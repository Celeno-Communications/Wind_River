/* SPDX-License-Identifier: GPL-2.0 OR BSD-2-Clause */
/* Copyright(c) 2019-2021, Celeno Communications Ltd. */

#ifndef REG_RIU_H
#define REG_RIU_H

#include "reg_access.h"
#include "chip.h"

/**
 * @brief RWNXVERSION register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 VERSION                   0x10010202
 * </pre>
 */
#define RIU_RWNXVERSION_ADDR        (REG_RIU_BASE_ADDR + 0x00000000)
#define RIU_RWNXVERSION_OFFSET      0x00000000
#define RIU_RWNXVERSION_INDEX       0x00000000
#define RIU_RWNXVERSION_RESET       0x10010202

static inline u32 riu_rwnxversion_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXVERSION_ADDR);
}

/* Field definitions */
#define RIU_RWNXVERSION_VERSION_MASK        ((u32)0xFFFFFFFF)
#define RIU_RWNXVERSION_VERSION_LSB         0
#define RIU_RWNXVERSION_VERSION_WIDTH       ((u32)0x00000020)

#define RIU_RWNXVERSION_VERSION_RST         0x10010202

static inline u32 riu_rwnxversion_version_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXVERSION_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief RWNXSTATICCONFIG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:30 FE_ALT_MODE               0x0
 *    29:28 CHANNELBW                 0x2
 *    26:25 LOOPBACK_RX_BW            0x0
 *    24:23 LOOPBACK_TX_BW            0x0
 *    22:21 FEENABLE                  0x3
 *    20:18 MODE                      0x7
 *    17:12 TXORRXN                   0x0
 *    11:06 INCHANNELVALIDANT         0x3F
 *    05:00 ACTIVEANT                 0x0
 * </pre>
 */
#define RIU_RWNXSTATICCONFIG_ADDR        (REG_RIU_BASE_ADDR + 0x00000004)
#define RIU_RWNXSTATICCONFIG_OFFSET      0x00000004
#define RIU_RWNXSTATICCONFIG_INDEX       0x00000001
#define RIU_RWNXSTATICCONFIG_RESET       0x207C0FC0

static inline u32 riu_rwnxstaticconfig_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR);
}

static inline void riu_rwnxstaticconfig_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXSTATICCONFIG_FE_ALT_MODE_MASK    ((u32)0xC0000000)
#define RIU_RWNXSTATICCONFIG_FE_ALT_MODE_LSB    30
#define RIU_RWNXSTATICCONFIG_FE_ALT_MODE_WIDTH    ((u32)0x00000002)
#define RIU_RWNXSTATICCONFIG_CHANNELBW_MASK    ((u32)0x30000000)
#define RIU_RWNXSTATICCONFIG_CHANNELBW_LSB    28
#define RIU_RWNXSTATICCONFIG_CHANNELBW_WIDTH    ((u32)0x00000002)
#define RIU_RWNXSTATICCONFIG_LOOPBACK_RX_BW_MASK    ((u32)0x06000000)
#define RIU_RWNXSTATICCONFIG_LOOPBACK_RX_BW_LSB    25
#define RIU_RWNXSTATICCONFIG_LOOPBACK_RX_BW_WIDTH    ((u32)0x00000002)
#define RIU_RWNXSTATICCONFIG_LOOPBACK_TX_BW_MASK    ((u32)0x01800000)
#define RIU_RWNXSTATICCONFIG_LOOPBACK_TX_BW_LSB    23
#define RIU_RWNXSTATICCONFIG_LOOPBACK_TX_BW_WIDTH    ((u32)0x00000002)
#define RIU_RWNXSTATICCONFIG_FEENABLE_MASK    ((u32)0x00600000)
#define RIU_RWNXSTATICCONFIG_FEENABLE_LSB    21
#define RIU_RWNXSTATICCONFIG_FEENABLE_WIDTH    ((u32)0x00000002)
#define RIU_RWNXSTATICCONFIG_MODE_MASK      ((u32)0x001C0000)
#define RIU_RWNXSTATICCONFIG_MODE_LSB       18
#define RIU_RWNXSTATICCONFIG_MODE_WIDTH     ((u32)0x00000003)
#define RIU_RWNXSTATICCONFIG_TXORRXN_MASK    ((u32)0x0003F000)
#define RIU_RWNXSTATICCONFIG_TXORRXN_LSB    12
#define RIU_RWNXSTATICCONFIG_TXORRXN_WIDTH    ((u32)0x00000006)
#define RIU_RWNXSTATICCONFIG_INCHANNELVALIDANT_MASK    ((u32)0x00000FC0)
#define RIU_RWNXSTATICCONFIG_INCHANNELVALIDANT_LSB    6
#define RIU_RWNXSTATICCONFIG_INCHANNELVALIDANT_WIDTH    ((u32)0x00000006)
#define RIU_RWNXSTATICCONFIG_ACTIVEANT_MASK    ((u32)0x0000003F)
#define RIU_RWNXSTATICCONFIG_ACTIVEANT_LSB    0
#define RIU_RWNXSTATICCONFIG_ACTIVEANT_WIDTH    ((u32)0x00000006)

#define RIU_RWNXSTATICCONFIG_FE_ALT_MODE_RST    0x0
#define RIU_RWNXSTATICCONFIG_CHANNELBW_RST    0x2
#define RIU_RWNXSTATICCONFIG_LOOPBACK_RX_BW_RST    0x0
#define RIU_RWNXSTATICCONFIG_LOOPBACK_TX_BW_RST    0x0
#define RIU_RWNXSTATICCONFIG_FEENABLE_RST    0x3
#define RIU_RWNXSTATICCONFIG_MODE_RST       0x7
#define RIU_RWNXSTATICCONFIG_TXORRXN_RST    0x0
#define RIU_RWNXSTATICCONFIG_INCHANNELVALIDANT_RST    0x3F
#define RIU_RWNXSTATICCONFIG_ACTIVEANT_RST    0x0

static inline void riu_rwnxstaticconfig_pack(struct cl_chip *chip, u8 fe_alt_mode, u8 channelbw, u8 loopback_rx_bw, u8 loopback_tx_bw, u8 feenable, u8 mode, u8 txorrxn, u8 inchannelvalidant, u8 activeant)
{
	ASSERT_ERR_CHIP((((u32)fe_alt_mode << 30) & ~((u32)0xC0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)channelbw << 28) & ~((u32)0x30000000)) == 0);
	ASSERT_ERR_CHIP((((u32)loopback_rx_bw << 25) & ~((u32)0x06000000)) == 0);
	ASSERT_ERR_CHIP((((u32)loopback_tx_bw << 23) & ~((u32)0x01800000)) == 0);
	ASSERT_ERR_CHIP((((u32)feenable << 21) & ~((u32)0x00600000)) == 0);
	ASSERT_ERR_CHIP((((u32)mode << 18) & ~((u32)0x001C0000)) == 0);
	ASSERT_ERR_CHIP((((u32)txorrxn << 12) & ~((u32)0x0003F000)) == 0);
	ASSERT_ERR_CHIP((((u32)inchannelvalidant << 6) & ~((u32)0x00000FC0)) == 0);
	ASSERT_ERR_CHIP((((u32)activeant << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_ADDR, ((u32)fe_alt_mode << 30) | ((u32)channelbw << 28) | ((u32)loopback_rx_bw << 25) | ((u32)loopback_tx_bw << 23) | ((u32)feenable << 21) | ((u32)mode << 18) | ((u32)txorrxn << 12) | ((u32)inchannelvalidant << 6) | ((u32)activeant << 0));
}

static inline void riu_rwnxstaticconfig_unpack(struct cl_chip *chip, u8 *fe_alt_mode, u8 *channelbw, u8 *loopback_rx_bw, u8 *loopback_tx_bw, u8 *feenable, u8 *mode, u8 *txorrxn, u8 *inchannelvalidant, u8 *activeant)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR);

	*fe_alt_mode = (local_val & ((u32)0xC0000000)) >> 30;
	*channelbw = (local_val & ((u32)0x30000000)) >> 28;
	*loopback_rx_bw = (local_val & ((u32)0x06000000)) >> 25;
	*loopback_tx_bw = (local_val & ((u32)0x01800000)) >> 23;
	*feenable = (local_val & ((u32)0x00600000)) >> 21;
	*mode = (local_val & ((u32)0x001C0000)) >> 18;
	*txorrxn = (local_val & ((u32)0x0003F000)) >> 12;
	*inchannelvalidant = (local_val & ((u32)0x00000FC0)) >> 6;
	*activeant = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxstaticconfig_fe_alt_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR);

	return (u8)((local_val & ((u32)0xC0000000)) >> 30);
}

static inline void riu_rwnxstaticconfig_fe_alt_mode_setf(struct cl_chip *chip, u8 fealtmode)
{
	ASSERT_ERR_CHIP((((u32)fealtmode << 30) & ~((u32)0xC0000000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR) & ~((u32)0xC0000000)) | ((u32)fealtmode << 30));
}

static inline u8 riu_rwnxstaticconfig_channelbw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR);

	return (u8)((local_val & ((u32)0x30000000)) >> 28);
}

static inline void riu_rwnxstaticconfig_channelbw_setf(struct cl_chip *chip, u8 channelbw)
{
	ASSERT_ERR_CHIP((((u32)channelbw << 28) & ~((u32)0x30000000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR) & ~((u32)0x30000000)) | ((u32)channelbw << 28));
}

static inline u8 riu_rwnxstaticconfig_loopback_rx_bw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR);

	return (u8)((local_val & ((u32)0x06000000)) >> 25);
}

static inline void riu_rwnxstaticconfig_loopback_rx_bw_setf(struct cl_chip *chip, u8 loopbackrxbw)
{
	ASSERT_ERR_CHIP((((u32)loopbackrxbw << 25) & ~((u32)0x06000000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR) & ~((u32)0x06000000)) | ((u32)loopbackrxbw << 25));
}

static inline u8 riu_rwnxstaticconfig_loopback_tx_bw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR);

	return (u8)((local_val & ((u32)0x01800000)) >> 23);
}

static inline void riu_rwnxstaticconfig_loopback_tx_bw_setf(struct cl_chip *chip, u8 loopbacktxbw)
{
	ASSERT_ERR_CHIP((((u32)loopbacktxbw << 23) & ~((u32)0x01800000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR) & ~((u32)0x01800000)) | ((u32)loopbacktxbw << 23));
}

static inline u8 riu_rwnxstaticconfig_feenable_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR);

	return (u8)((local_val & ((u32)0x00600000)) >> 21);
}

static inline void riu_rwnxstaticconfig_feenable_setf(struct cl_chip *chip, u8 feenable)
{
	ASSERT_ERR_CHIP((((u32)feenable << 21) & ~((u32)0x00600000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR) & ~((u32)0x00600000)) | ((u32)feenable << 21));
}

static inline u8 riu_rwnxstaticconfig_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR);

	return (u8)((local_val & ((u32)0x001C0000)) >> 18);
}

static inline void riu_rwnxstaticconfig_mode_setf(struct cl_chip *chip, u8 mode)
{
	ASSERT_ERR_CHIP((((u32)mode << 18) & ~((u32)0x001C0000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR) & ~((u32)0x001C0000)) | ((u32)mode << 18));
}

static inline u8 riu_rwnxstaticconfig_txorrxn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR);

	return (u8)((local_val & ((u32)0x0003F000)) >> 12);
}

static inline void riu_rwnxstaticconfig_txorrxn_setf(struct cl_chip *chip, u8 txorrxn)
{
	ASSERT_ERR_CHIP((((u32)txorrxn << 12) & ~((u32)0x0003F000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR) & ~((u32)0x0003F000)) | ((u32)txorrxn << 12));
}

static inline u8 riu_rwnxstaticconfig_inchannelvalidant_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR);

	return (u8)((local_val & ((u32)0x00000FC0)) >> 6);
}

static inline void riu_rwnxstaticconfig_inchannelvalidant_setf(struct cl_chip *chip, u8 inchannelvalidant)
{
	ASSERT_ERR_CHIP((((u32)inchannelvalidant << 6) & ~((u32)0x00000FC0)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR) & ~((u32)0x00000FC0)) | ((u32)inchannelvalidant << 6));
}

static inline u8 riu_rwnxstaticconfig_activeant_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxstaticconfig_activeant_setf(struct cl_chip *chip, u8 activeant)
{
	ASSERT_ERR_CHIP((((u32)activeant << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_ADDR) & ~((u32)0x0000003F)) | ((u32)activeant << 0));
}

/**
 * @brief RWNXDYNAMICCONFIG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    20    RFRSSISTARTCAPTURE        0
 *    17    AGCADCPOWSTARTCAPTURE     0
 *    16    AGCINBDPOWSTARTCAPTURE    0
 *    08    HTSTFGAINUPDATE           0
 *    04    HTSTFSTARTESTIM           0
 *    00    LBSTARTCAPTURE            0
 * </pre>
 */
#define RIU_RWNXDYNAMICCONFIG_ADDR        (REG_RIU_BASE_ADDR + 0x00000008)
#define RIU_RWNXDYNAMICCONFIG_OFFSET      0x00000008
#define RIU_RWNXDYNAMICCONFIG_INDEX       0x00000002
#define RIU_RWNXDYNAMICCONFIG_RESET       0x00000000

static inline void riu_rwnxdynamicconfig_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXDYNAMICCONFIG_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXDYNAMICCONFIG_RFRSSISTARTCAPTURE_BIT    ((u32)0x00100000)
#define RIU_RWNXDYNAMICCONFIG_RFRSSISTARTCAPTURE_POS    20
#define RIU_RWNXDYNAMICCONFIG_AGCADCPOWSTARTCAPTURE_BIT    ((u32)0x00020000)
#define RIU_RWNXDYNAMICCONFIG_AGCADCPOWSTARTCAPTURE_POS    17
#define RIU_RWNXDYNAMICCONFIG_AGCINBDPOWSTARTCAPTURE_BIT    ((u32)0x00010000)
#define RIU_RWNXDYNAMICCONFIG_AGCINBDPOWSTARTCAPTURE_POS    16
#define RIU_RWNXDYNAMICCONFIG_HTSTFGAINUPDATE_BIT    ((u32)0x00000100)
#define RIU_RWNXDYNAMICCONFIG_HTSTFGAINUPDATE_POS    8
#define RIU_RWNXDYNAMICCONFIG_HTSTFSTARTESTIM_BIT    ((u32)0x00000010)
#define RIU_RWNXDYNAMICCONFIG_HTSTFSTARTESTIM_POS    4
#define RIU_RWNXDYNAMICCONFIG_LBSTARTCAPTURE_BIT    ((u32)0x00000001)
#define RIU_RWNXDYNAMICCONFIG_LBSTARTCAPTURE_POS    0

#define RIU_RWNXDYNAMICCONFIG_RFRSSISTARTCAPTURE_RST    0x0
#define RIU_RWNXDYNAMICCONFIG_AGCADCPOWSTARTCAPTURE_RST    0x0
#define RIU_RWNXDYNAMICCONFIG_AGCINBDPOWSTARTCAPTURE_RST    0x0
#define RIU_RWNXDYNAMICCONFIG_HTSTFGAINUPDATE_RST    0x0
#define RIU_RWNXDYNAMICCONFIG_HTSTFSTARTESTIM_RST    0x0
#define RIU_RWNXDYNAMICCONFIG_LBSTARTCAPTURE_RST    0x0

static inline void riu_rwnxdynamicconfig_pack(struct cl_chip *chip, u8 rfrssistartcapture, u8 agcadcpowstartcapture, u8 agcinbdpowstartcapture, u8 htstfgainupdate, u8 htstfstartestim, u8 lbstartcapture)
{
	ASSERT_ERR_CHIP((((u32)rfrssistartcapture << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)agcadcpowstartcapture << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)agcinbdpowstartcapture << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)htstfgainupdate << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)htstfstartestim << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)lbstartcapture << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXDYNAMICCONFIG_ADDR, ((u32)rfrssistartcapture << 20) | ((u32)agcadcpowstartcapture << 17) | ((u32)agcinbdpowstartcapture << 16) | ((u32)htstfgainupdate << 8) | ((u32)htstfstartestim << 4) | ((u32)lbstartcapture << 0));
}

static inline void riu_rwnxdynamicconfig_rfrssistartcapture_setf(struct cl_chip *chip, u8 rfrssistartcapture)
{
	ASSERT_ERR_CHIP((((u32)rfrssistartcapture << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RIU_RWNXDYNAMICCONFIG_ADDR, (cl_reg_read(chip, RIU_RWNXDYNAMICCONFIG_ADDR) & ~((u32)0x00100000)) | ((u32)rfrssistartcapture << 20));
}

static inline void riu_rwnxdynamicconfig_agcadcpowstartcapture_setf(struct cl_chip *chip, u8 agcadcpowstartcapture)
{
	ASSERT_ERR_CHIP((((u32)agcadcpowstartcapture << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RIU_RWNXDYNAMICCONFIG_ADDR, (cl_reg_read(chip, RIU_RWNXDYNAMICCONFIG_ADDR) & ~((u32)0x00020000)) | ((u32)agcadcpowstartcapture << 17));
}

static inline void riu_rwnxdynamicconfig_agcinbdpowstartcapture_setf(struct cl_chip *chip, u8 agcinbdpowstartcapture)
{
	ASSERT_ERR_CHIP((((u32)agcinbdpowstartcapture << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_RWNXDYNAMICCONFIG_ADDR, (cl_reg_read(chip, RIU_RWNXDYNAMICCONFIG_ADDR) & ~((u32)0x00010000)) | ((u32)agcinbdpowstartcapture << 16));
}

static inline void riu_rwnxdynamicconfig_htstfgainupdate_setf(struct cl_chip *chip, u8 htstfgainupdate)
{
	ASSERT_ERR_CHIP((((u32)htstfgainupdate << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_RWNXDYNAMICCONFIG_ADDR, (cl_reg_read(chip, RIU_RWNXDYNAMICCONFIG_ADDR) & ~((u32)0x00000100)) | ((u32)htstfgainupdate << 8));
}

static inline void riu_rwnxdynamicconfig_htstfstartestim_setf(struct cl_chip *chip, u8 htstfstartestim)
{
	ASSERT_ERR_CHIP((((u32)htstfstartestim << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RIU_RWNXDYNAMICCONFIG_ADDR, (cl_reg_read(chip, RIU_RWNXDYNAMICCONFIG_ADDR) & ~((u32)0x00000010)) | ((u32)htstfstartestim << 4));
}

static inline void riu_rwnxdynamicconfig_lbstartcapture_setf(struct cl_chip *chip, u8 lbstartcapture)
{
	ASSERT_ERR_CHIP((((u32)lbstartcapture << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXDYNAMICCONFIG_ADDR, (cl_reg_read(chip, RIU_RWNXDYNAMICCONFIG_ADDR) & ~((u32)0x00000001)) | ((u32)lbstartcapture << 0));
}

/**
 * @brief RWNXLBCAPTUREDELAY register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:28 LBTXSELDEFAULT            0x0
 *    26:16 LCU_RIU_PORT_MODE         0x0
 *    15    AGCFSM_INIT_SYNC_EN       0
 *    14    DSPEN2_SYNC_EN            0
 *    13    LBNCOCAPTUREEN            0
 *    12:00 LBCAPTUREDELAY            0x0
 * </pre>
 */
#define RIU_RWNXLBCAPTUREDELAY_ADDR        (REG_RIU_BASE_ADDR + 0x0000000C)
#define RIU_RWNXLBCAPTUREDELAY_OFFSET      0x0000000C
#define RIU_RWNXLBCAPTUREDELAY_INDEX       0x00000003
#define RIU_RWNXLBCAPTUREDELAY_RESET       0x00000000

static inline u32 riu_rwnxlbcapturedelay_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXLBCAPTUREDELAY_ADDR);
}

static inline void riu_rwnxlbcapturedelay_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXLBCAPTUREDELAY_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXLBCAPTUREDELAY_LBTXSELDEFAULT_MASK    ((u32)0x70000000)
#define RIU_RWNXLBCAPTUREDELAY_LBTXSELDEFAULT_LSB    28
#define RIU_RWNXLBCAPTUREDELAY_LBTXSELDEFAULT_WIDTH    ((u32)0x00000003)
#define RIU_RWNXLBCAPTUREDELAY_LCU_RIU_PORT_MODE_MASK    ((u32)0x07FF0000)
#define RIU_RWNXLBCAPTUREDELAY_LCU_RIU_PORT_MODE_LSB    16
#define RIU_RWNXLBCAPTUREDELAY_LCU_RIU_PORT_MODE_WIDTH    ((u32)0x0000000B)
#define RIU_RWNXLBCAPTUREDELAY_AGCFSM_INIT_SYNC_EN_BIT    ((u32)0x00008000)
#define RIU_RWNXLBCAPTUREDELAY_AGCFSM_INIT_SYNC_EN_POS    15
#define RIU_RWNXLBCAPTUREDELAY_DSPEN_2_SYNC_EN_BIT    ((u32)0x00004000)
#define RIU_RWNXLBCAPTUREDELAY_DSPEN_2_SYNC_EN_POS    14
#define RIU_RWNXLBCAPTUREDELAY_LBNCOCAPTUREEN_BIT    ((u32)0x00002000)
#define RIU_RWNXLBCAPTUREDELAY_LBNCOCAPTUREEN_POS    13
#define RIU_RWNXLBCAPTUREDELAY_LBCAPTUREDELAY_MASK    ((u32)0x00001FFF)
#define RIU_RWNXLBCAPTUREDELAY_LBCAPTUREDELAY_LSB    0
#define RIU_RWNXLBCAPTUREDELAY_LBCAPTUREDELAY_WIDTH    ((u32)0x0000000D)

#define RIU_RWNXLBCAPTUREDELAY_LBTXSELDEFAULT_RST    0x0
#define RIU_RWNXLBCAPTUREDELAY_LCU_RIU_PORT_MODE_RST    0x0
#define RIU_RWNXLBCAPTUREDELAY_AGCFSM_INIT_SYNC_EN_RST    0x0
#define RIU_RWNXLBCAPTUREDELAY_DSPEN_2_SYNC_EN_RST    0x0
#define RIU_RWNXLBCAPTUREDELAY_LBNCOCAPTUREEN_RST    0x0
#define RIU_RWNXLBCAPTUREDELAY_LBCAPTUREDELAY_RST    0x0

static inline void riu_rwnxlbcapturedelay_pack(struct cl_chip *chip, u8 lbtxseldefault, u16 lcu_riu_port_mode, u8 agcfsm_init_sync_en, u8 dspen2_sync_en, u8 lbncocaptureen, u16 lbcapturedelay)
{
	ASSERT_ERR_CHIP((((u32)lbtxseldefault << 28) & ~((u32)0x70000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lcu_riu_port_mode << 16) & ~((u32)0x07FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)agcfsm_init_sync_en << 15) & ~((u32)0x00008000)) == 0);
	ASSERT_ERR_CHIP((((u32)dspen2_sync_en << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)lbncocaptureen << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)lbcapturedelay << 0) & ~((u32)0x00001FFF)) == 0);
	cl_reg_write(chip, RIU_RWNXLBCAPTUREDELAY_ADDR, ((u32)lbtxseldefault << 28) | ((u32)lcu_riu_port_mode << 16) | ((u32)agcfsm_init_sync_en << 15) | ((u32)dspen2_sync_en << 14) | ((u32)lbncocaptureen << 13) | ((u32)lbcapturedelay << 0));
}

static inline void riu_rwnxlbcapturedelay_unpack(struct cl_chip *chip, u8 *lbtxseldefault, u16 *lcu_riu_port_mode, u8 *agcfsm_init_sync_en, u8 *dspen2_sync_en, u8 *lbncocaptureen, u16 *lbcapturedelay)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXLBCAPTUREDELAY_ADDR);

	*lbtxseldefault = (local_val & ((u32)0x70000000)) >> 28;
	*lcu_riu_port_mode = (local_val & ((u32)0x07FF0000)) >> 16;
	*agcfsm_init_sync_en = (local_val & ((u32)0x00008000)) >> 15;
	*dspen2_sync_en = (local_val & ((u32)0x00004000)) >> 14;
	*lbncocaptureen = (local_val & ((u32)0x00002000)) >> 13;
	*lbcapturedelay = (local_val & ((u32)0x00001FFF)) >> 0;
}

static inline u8 riu_rwnxlbcapturedelay_lbtxseldefault_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXLBCAPTUREDELAY_ADDR);

	return (u8)((local_val & ((u32)0x70000000)) >> 28);
}

static inline void riu_rwnxlbcapturedelay_lbtxseldefault_setf(struct cl_chip *chip, u8 lbtxseldefault)
{
	ASSERT_ERR_CHIP((((u32)lbtxseldefault << 28) & ~((u32)0x70000000)) == 0);
	cl_reg_write(chip, RIU_RWNXLBCAPTUREDELAY_ADDR, (cl_reg_read(chip, RIU_RWNXLBCAPTUREDELAY_ADDR) & ~((u32)0x70000000)) | ((u32)lbtxseldefault << 28));
}

static inline u16 riu_rwnxlbcapturedelay_lcu_riu_port_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXLBCAPTUREDELAY_ADDR);

	return (u16)((local_val & ((u32)0x07FF0000)) >> 16);
}

static inline void riu_rwnxlbcapturedelay_lcu_riu_port_mode_setf(struct cl_chip *chip, u16 lcuriuportmode)
{
	ASSERT_ERR_CHIP((((u32)lcuriuportmode << 16) & ~((u32)0x07FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXLBCAPTUREDELAY_ADDR, (cl_reg_read(chip, RIU_RWNXLBCAPTUREDELAY_ADDR) & ~((u32)0x07FF0000)) | ((u32)lcuriuportmode << 16));
}

static inline u8 riu_rwnxlbcapturedelay_agcfsm_init_sync_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXLBCAPTUREDELAY_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline void riu_rwnxlbcapturedelay_agcfsm_init_sync_en_setf(struct cl_chip *chip, u8 agcfsminitsyncen)
{
	ASSERT_ERR_CHIP((((u32)agcfsminitsyncen << 15) & ~((u32)0x00008000)) == 0);
	cl_reg_write(chip, RIU_RWNXLBCAPTUREDELAY_ADDR, (cl_reg_read(chip, RIU_RWNXLBCAPTUREDELAY_ADDR) & ~((u32)0x00008000)) | ((u32)agcfsminitsyncen << 15));
}

static inline u8 riu_rwnxlbcapturedelay_dspen_2_sync_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXLBCAPTUREDELAY_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void riu_rwnxlbcapturedelay_dspen_2_sync_en_setf(struct cl_chip *chip, u8 dspen2syncen)
{
	ASSERT_ERR_CHIP((((u32)dspen2syncen << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RIU_RWNXLBCAPTUREDELAY_ADDR, (cl_reg_read(chip, RIU_RWNXLBCAPTUREDELAY_ADDR) & ~((u32)0x00004000)) | ((u32)dspen2syncen << 14));
}

static inline u8 riu_rwnxlbcapturedelay_lbncocaptureen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXLBCAPTUREDELAY_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_rwnxlbcapturedelay_lbncocaptureen_setf(struct cl_chip *chip, u8 lbncocaptureen)
{
	ASSERT_ERR_CHIP((((u32)lbncocaptureen << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXLBCAPTUREDELAY_ADDR, (cl_reg_read(chip, RIU_RWNXLBCAPTUREDELAY_ADDR) & ~((u32)0x00002000)) | ((u32)lbncocaptureen << 13));
}

static inline u16 riu_rwnxlbcapturedelay_lbcapturedelay_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXLBCAPTUREDELAY_ADDR);

	return (u16)((local_val & ((u32)0x00001FFF)) >> 0);
}

static inline void riu_rwnxlbcapturedelay_lbcapturedelay_setf(struct cl_chip *chip, u16 lbcapturedelay)
{
	ASSERT_ERR_CHIP((((u32)lbcapturedelay << 0) & ~((u32)0x00001FFF)) == 0);
	cl_reg_write(chip, RIU_RWNXLBCAPTUREDELAY_ADDR, (cl_reg_read(chip, RIU_RWNXLBCAPTUREDELAY_ADDR) & ~((u32)0x00001FFF)) | ((u32)lbcapturedelay << 0));
}

/**
 * @brief RWNXTXSTARTDELAY register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    12:00 TXSTARTDELAY              0x780
 * </pre>
 */
#define RIU_RWNXTXSTARTDELAY_ADDR        (REG_RIU_BASE_ADDR + 0x00000010)
#define RIU_RWNXTXSTARTDELAY_OFFSET      0x00000010
#define RIU_RWNXTXSTARTDELAY_INDEX       0x00000004
#define RIU_RWNXTXSTARTDELAY_RESET       0x00000780

static inline u32 riu_rwnxtxstartdelay_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXTXSTARTDELAY_ADDR);
}

static inline void riu_rwnxtxstartdelay_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXTXSTARTDELAY_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXTXSTARTDELAY_TXSTARTDELAY_MASK    ((u32)0x00001FFF)
#define RIU_RWNXTXSTARTDELAY_TXSTARTDELAY_LSB    0
#define RIU_RWNXTXSTARTDELAY_TXSTARTDELAY_WIDTH    ((u32)0x0000000D)

#define RIU_RWNXTXSTARTDELAY_TXSTARTDELAY_RST    0x780

static inline u16 riu_rwnxtxstartdelay_txstartdelay_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXSTARTDELAY_ADDR);

	return (u16)(local_val >> 0);
}

static inline void riu_rwnxtxstartdelay_txstartdelay_setf(struct cl_chip *chip, u16 txstartdelay)
{
	ASSERT_ERR_CHIP((((u32)txstartdelay << 0) & ~((u32)0x00001FFF)) == 0);
	cl_reg_write(chip, RIU_RWNXTXSTARTDELAY_ADDR, (u32)txstartdelay << 0);
}

/**
 * @brief RWNXTXFEDELAY register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 TXENDDELAY20              0x88
 *    21:12 TXFEMDMBDELAY             0xc0
 *    09:00 TXFEDELAY20               0x396
 * </pre>
 */
#define RIU_RWNXTXFEDELAY_ADDR        (REG_RIU_BASE_ADDR + 0x00000014)
#define RIU_RWNXTXFEDELAY_OFFSET      0x00000014
#define RIU_RWNXTXFEDELAY_INDEX       0x00000005
#define RIU_RWNXTXFEDELAY_RESET       0x440C0396

static inline u32 riu_rwnxtxfedelay_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXTXFEDELAY_ADDR);
}

static inline void riu_rwnxtxfedelay_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXTXFEDELAY_TXENDDELAY_20_MASK    ((u32)0xFF800000)
#define RIU_RWNXTXFEDELAY_TXENDDELAY_20_LSB    23
#define RIU_RWNXTXFEDELAY_TXENDDELAY_20_WIDTH    ((u32)0x00000009)
#define RIU_RWNXTXFEDELAY_TXFEMDMBDELAY_MASK    ((u32)0x003FF000)
#define RIU_RWNXTXFEDELAY_TXFEMDMBDELAY_LSB    12
#define RIU_RWNXTXFEDELAY_TXFEMDMBDELAY_WIDTH    ((u32)0x0000000A)
#define RIU_RWNXTXFEDELAY_TXFEDELAY_20_MASK    ((u32)0x000003FF)
#define RIU_RWNXTXFEDELAY_TXFEDELAY_20_LSB    0
#define RIU_RWNXTXFEDELAY_TXFEDELAY_20_WIDTH    ((u32)0x0000000A)

#define RIU_RWNXTXFEDELAY_TXENDDELAY_20_RST    0x88
#define RIU_RWNXTXFEDELAY_TXFEMDMBDELAY_RST    0xc0
#define RIU_RWNXTXFEDELAY_TXFEDELAY_20_RST    0x396

static inline void riu_rwnxtxfedelay_pack(struct cl_chip *chip, u16 txenddelay20, u16 txfemdmbdelay, u16 txfedelay20)
{
	ASSERT_ERR_CHIP((((u32)txenddelay20 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)txfemdmbdelay << 12) & ~((u32)0x003FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)txfedelay20 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_ADDR, ((u32)txenddelay20 << 23) | ((u32)txfemdmbdelay << 12) | ((u32)txfedelay20 << 0));
}

static inline void riu_rwnxtxfedelay_unpack(struct cl_chip *chip, u16 *txenddelay20, u16 *txfemdmbdelay, u16 *txfedelay20)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_ADDR);

	*txenddelay20 = (local_val & ((u32)0xFF800000)) >> 23;
	*txfemdmbdelay = (local_val & ((u32)0x003FF000)) >> 12;
	*txfedelay20 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_rwnxtxfedelay_txenddelay_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_rwnxtxfedelay_txenddelay_20_setf(struct cl_chip *chip, u16 txenddelay20)
{
	ASSERT_ERR_CHIP((((u32)txenddelay20 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_ADDR, (cl_reg_read(chip, RIU_RWNXTXFEDELAY_ADDR) & ~((u32)0xFF800000)) | ((u32)txenddelay20 << 23));
}

static inline u16 riu_rwnxtxfedelay_txfemdmbdelay_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_ADDR);

	return (u16)((local_val & ((u32)0x003FF000)) >> 12);
}

static inline void riu_rwnxtxfedelay_txfemdmbdelay_setf(struct cl_chip *chip, u16 txfemdmbdelay)
{
	ASSERT_ERR_CHIP((((u32)txfemdmbdelay << 12) & ~((u32)0x003FF000)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_ADDR, (cl_reg_read(chip, RIU_RWNXTXFEDELAY_ADDR) & ~((u32)0x003FF000)) | ((u32)txfemdmbdelay << 12));
}

static inline u16 riu_rwnxtxfedelay_txfedelay_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_rwnxtxfedelay_txfedelay_20_setf(struct cl_chip *chip, u16 txfedelay20)
{
	ASSERT_ERR_CHIP((((u32)txfedelay20 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_ADDR, (cl_reg_read(chip, RIU_RWNXTXFEDELAY_ADDR) & ~((u32)0x000003FF)) | ((u32)txfedelay20 << 0));
}

/**
 * @brief AGCFSMIND register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    HTSIG_MCS_ON_TIME         0
 *    09:00 AGCFSMIND                 0x0
 * </pre>
 */
#define RIU_AGCFSMIND_ADDR        (REG_RIU_BASE_ADDR + 0x00000018)
#define RIU_AGCFSMIND_OFFSET      0x00000018
#define RIU_AGCFSMIND_INDEX       0x00000006
#define RIU_AGCFSMIND_RESET       0x00000000

static inline u32 riu_agcfsmind_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSMIND_ADDR);
}

/* Field definitions */
#define RIU_AGCFSMIND_HTSIG_MCS_ON_TIME_BIT    ((u32)0x80000000)
#define RIU_AGCFSMIND_HTSIG_MCS_ON_TIME_POS    31
#define RIU_AGCFSMIND_AGCFSMIND_MASK        ((u32)0x000003FF)
#define RIU_AGCFSMIND_AGCFSMIND_LSB         0
#define RIU_AGCFSMIND_AGCFSMIND_WIDTH       ((u32)0x0000000A)

#define RIU_AGCFSMIND_HTSIG_MCS_ON_TIME_RST    0x0
#define RIU_AGCFSMIND_AGCFSMIND_RST         0x0

static inline void riu_agcfsmind_unpack(struct cl_chip *chip, u8 *htsig_mcs_on_time, u16 *agcfsmind)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSMIND_ADDR);

	*htsig_mcs_on_time = (local_val & ((u32)0x80000000)) >> 31;
	*agcfsmind = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u8 riu_agcfsmind_htsig_mcs_on_time_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSMIND_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline u16 riu_agcfsmind_agcfsmind_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSMIND_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

/**
 * @brief RWNXIQCTRL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    TXIQSWAPSEL               0
 *    30    TXIQSWAPPATH3             0
 *    29    TXIQSWAPPATH2             0
 *    28    TXIQSWAPPATH1             0
 *    27    TXIQSWAPPATH0             0
 *    26    RXIQSWAPPATH4             0
 *    25    RXIQSWAPPATH3             0
 *    24    RXIQSWAPPATH2             0
 *    23    RXIQSWAPPATH1             0
 *    22    RXIQSWAPPATH0             0
 *    19    TXIQDELPATHQ3             0
 *    18    TXIQDELPATHI3             0
 *    17    TXIQDELPATHQ2             0
 *    16    TXIQDELPATHI2             0
 *    15    TXIQDELPATHQ1             0
 *    14    TXIQDELPATHI1             0
 *    13    TXIQDELPATHQ0             0
 *    12    TXIQDELPATHI0             0
 *    11    RXIQDELPATHQ4             0
 *    10    RXIQDELPATHI4             0
 *    09    RXIQDELPATHQ3             0
 *    08    RXIQDELPATHI3             0
 *    07    RXIQDELPATHQ2             0
 *    06    RXIQDELPATHI2             0
 *    05    RXIQDELPATHQ1             0
 *    04    RXIQDELPATHI1             0
 *    03    RXIQDELPATHQ0             0
 *    02    RXIQDELPATHI0             0
 *    01    TXC2_SDISBCFG             0
 *    00    RXC2_SDISBCFG             0
 * </pre>
 */
#define RIU_RWNXIQCTRL_ADDR        (REG_RIU_BASE_ADDR + 0x0000001C)
#define RIU_RWNXIQCTRL_OFFSET      0x0000001C
#define RIU_RWNXIQCTRL_INDEX       0x00000007
#define RIU_RWNXIQCTRL_RESET       0x00000000

static inline u32 riu_rwnxiqctrl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);
}

static inline void riu_rwnxiqctrl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXIQCTRL_TXIQSWAPSEL_BIT      ((u32)0x80000000)
#define RIU_RWNXIQCTRL_TXIQSWAPSEL_POS      31
#define RIU_RWNXIQCTRL_TXIQSWAPPATH_3_BIT    ((u32)0x40000000)
#define RIU_RWNXIQCTRL_TXIQSWAPPATH_3_POS    30
#define RIU_RWNXIQCTRL_TXIQSWAPPATH_2_BIT    ((u32)0x20000000)
#define RIU_RWNXIQCTRL_TXIQSWAPPATH_2_POS    29
#define RIU_RWNXIQCTRL_TXIQSWAPPATH_1_BIT    ((u32)0x10000000)
#define RIU_RWNXIQCTRL_TXIQSWAPPATH_1_POS    28
#define RIU_RWNXIQCTRL_TXIQSWAPPATH_0_BIT    ((u32)0x08000000)
#define RIU_RWNXIQCTRL_TXIQSWAPPATH_0_POS    27
#define RIU_RWNXIQCTRL_RXIQSWAPPATH_4_BIT    ((u32)0x04000000)
#define RIU_RWNXIQCTRL_RXIQSWAPPATH_4_POS    26
#define RIU_RWNXIQCTRL_RXIQSWAPPATH_3_BIT    ((u32)0x02000000)
#define RIU_RWNXIQCTRL_RXIQSWAPPATH_3_POS    25
#define RIU_RWNXIQCTRL_RXIQSWAPPATH_2_BIT    ((u32)0x01000000)
#define RIU_RWNXIQCTRL_RXIQSWAPPATH_2_POS    24
#define RIU_RWNXIQCTRL_RXIQSWAPPATH_1_BIT    ((u32)0x00800000)
#define RIU_RWNXIQCTRL_RXIQSWAPPATH_1_POS    23
#define RIU_RWNXIQCTRL_RXIQSWAPPATH_0_BIT    ((u32)0x00400000)
#define RIU_RWNXIQCTRL_RXIQSWAPPATH_0_POS    22
#define RIU_RWNXIQCTRL_TXIQDELPATHQ_3_BIT    ((u32)0x00080000)
#define RIU_RWNXIQCTRL_TXIQDELPATHQ_3_POS    19
#define RIU_RWNXIQCTRL_TXIQDELPATHI_3_BIT    ((u32)0x00040000)
#define RIU_RWNXIQCTRL_TXIQDELPATHI_3_POS    18
#define RIU_RWNXIQCTRL_TXIQDELPATHQ_2_BIT    ((u32)0x00020000)
#define RIU_RWNXIQCTRL_TXIQDELPATHQ_2_POS    17
#define RIU_RWNXIQCTRL_TXIQDELPATHI_2_BIT    ((u32)0x00010000)
#define RIU_RWNXIQCTRL_TXIQDELPATHI_2_POS    16
#define RIU_RWNXIQCTRL_TXIQDELPATHQ_1_BIT    ((u32)0x00008000)
#define RIU_RWNXIQCTRL_TXIQDELPATHQ_1_POS    15
#define RIU_RWNXIQCTRL_TXIQDELPATHI_1_BIT    ((u32)0x00004000)
#define RIU_RWNXIQCTRL_TXIQDELPATHI_1_POS    14
#define RIU_RWNXIQCTRL_TXIQDELPATHQ_0_BIT    ((u32)0x00002000)
#define RIU_RWNXIQCTRL_TXIQDELPATHQ_0_POS    13
#define RIU_RWNXIQCTRL_TXIQDELPATHI_0_BIT    ((u32)0x00001000)
#define RIU_RWNXIQCTRL_TXIQDELPATHI_0_POS    12
#define RIU_RWNXIQCTRL_RXIQDELPATHQ_4_BIT    ((u32)0x00000800)
#define RIU_RWNXIQCTRL_RXIQDELPATHQ_4_POS    11
#define RIU_RWNXIQCTRL_RXIQDELPATHI_4_BIT    ((u32)0x00000400)
#define RIU_RWNXIQCTRL_RXIQDELPATHI_4_POS    10
#define RIU_RWNXIQCTRL_RXIQDELPATHQ_3_BIT    ((u32)0x00000200)
#define RIU_RWNXIQCTRL_RXIQDELPATHQ_3_POS    9
#define RIU_RWNXIQCTRL_RXIQDELPATHI_3_BIT    ((u32)0x00000100)
#define RIU_RWNXIQCTRL_RXIQDELPATHI_3_POS    8
#define RIU_RWNXIQCTRL_RXIQDELPATHQ_2_BIT    ((u32)0x00000080)
#define RIU_RWNXIQCTRL_RXIQDELPATHQ_2_POS    7
#define RIU_RWNXIQCTRL_RXIQDELPATHI_2_BIT    ((u32)0x00000040)
#define RIU_RWNXIQCTRL_RXIQDELPATHI_2_POS    6
#define RIU_RWNXIQCTRL_RXIQDELPATHQ_1_BIT    ((u32)0x00000020)
#define RIU_RWNXIQCTRL_RXIQDELPATHQ_1_POS    5
#define RIU_RWNXIQCTRL_RXIQDELPATHI_1_BIT    ((u32)0x00000010)
#define RIU_RWNXIQCTRL_RXIQDELPATHI_1_POS    4
#define RIU_RWNXIQCTRL_RXIQDELPATHQ_0_BIT    ((u32)0x00000008)
#define RIU_RWNXIQCTRL_RXIQDELPATHQ_0_POS    3
#define RIU_RWNXIQCTRL_RXIQDELPATHI_0_BIT    ((u32)0x00000004)
#define RIU_RWNXIQCTRL_RXIQDELPATHI_0_POS    2
#define RIU_RWNXIQCTRL_TXC_2_SDISBCFG_BIT    ((u32)0x00000002)
#define RIU_RWNXIQCTRL_TXC_2_SDISBCFG_POS    1
#define RIU_RWNXIQCTRL_RXC_2_SDISBCFG_BIT    ((u32)0x00000001)
#define RIU_RWNXIQCTRL_RXC_2_SDISBCFG_POS    0

#define RIU_RWNXIQCTRL_TXIQSWAPSEL_RST      0x0
#define RIU_RWNXIQCTRL_TXIQSWAPPATH_3_RST    0x0
#define RIU_RWNXIQCTRL_TXIQSWAPPATH_2_RST    0x0
#define RIU_RWNXIQCTRL_TXIQSWAPPATH_1_RST    0x0
#define RIU_RWNXIQCTRL_TXIQSWAPPATH_0_RST    0x0
#define RIU_RWNXIQCTRL_RXIQSWAPPATH_4_RST    0x0
#define RIU_RWNXIQCTRL_RXIQSWAPPATH_3_RST    0x0
#define RIU_RWNXIQCTRL_RXIQSWAPPATH_2_RST    0x0
#define RIU_RWNXIQCTRL_RXIQSWAPPATH_1_RST    0x0
#define RIU_RWNXIQCTRL_RXIQSWAPPATH_0_RST    0x0
#define RIU_RWNXIQCTRL_TXIQDELPATHQ_3_RST    0x0
#define RIU_RWNXIQCTRL_TXIQDELPATHI_3_RST    0x0
#define RIU_RWNXIQCTRL_TXIQDELPATHQ_2_RST    0x0
#define RIU_RWNXIQCTRL_TXIQDELPATHI_2_RST    0x0
#define RIU_RWNXIQCTRL_TXIQDELPATHQ_1_RST    0x0
#define RIU_RWNXIQCTRL_TXIQDELPATHI_1_RST    0x0
#define RIU_RWNXIQCTRL_TXIQDELPATHQ_0_RST    0x0
#define RIU_RWNXIQCTRL_TXIQDELPATHI_0_RST    0x0
#define RIU_RWNXIQCTRL_RXIQDELPATHQ_4_RST    0x0
#define RIU_RWNXIQCTRL_RXIQDELPATHI_4_RST    0x0
#define RIU_RWNXIQCTRL_RXIQDELPATHQ_3_RST    0x0
#define RIU_RWNXIQCTRL_RXIQDELPATHI_3_RST    0x0
#define RIU_RWNXIQCTRL_RXIQDELPATHQ_2_RST    0x0
#define RIU_RWNXIQCTRL_RXIQDELPATHI_2_RST    0x0
#define RIU_RWNXIQCTRL_RXIQDELPATHQ_1_RST    0x0
#define RIU_RWNXIQCTRL_RXIQDELPATHI_1_RST    0x0
#define RIU_RWNXIQCTRL_RXIQDELPATHQ_0_RST    0x0
#define RIU_RWNXIQCTRL_RXIQDELPATHI_0_RST    0x0
#define RIU_RWNXIQCTRL_TXC_2_SDISBCFG_RST    0x0
#define RIU_RWNXIQCTRL_RXC_2_SDISBCFG_RST    0x0

static inline void riu_rwnxiqctrl_pack(struct cl_chip *chip, u8 txiqswapsel, u8 txiqswappath3, u8 txiqswappath2, u8 txiqswappath1, u8 txiqswappath0, u8 rxiqswappath4, u8 rxiqswappath3, u8 rxiqswappath2, u8 rxiqswappath1, u8 rxiqswappath0, u8 txiqdelpathq3, u8 txiqdelpathi3, u8 txiqdelpathq2, u8 txiqdelpathi2, u8 txiqdelpathq1, u8 txiqdelpathi1, u8 txiqdelpathq0, u8 txiqdelpathi0, u8 rxiqdelpathq4, u8 rxiqdelpathi4, u8 rxiqdelpathq3, u8 rxiqdelpathi3, u8 rxiqdelpathq2, u8 rxiqdelpathi2, u8 rxiqdelpathq1, u8 rxiqdelpathi1, u8 rxiqdelpathq0, u8 rxiqdelpathi0, u8 txc2_sdisbcfg, u8 rxc2_sdisbcfg)
{
	ASSERT_ERR_CHIP((((u32)txiqswapsel << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqswappath3 << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqswappath2 << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqswappath1 << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqswappath0 << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqswappath4 << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqswappath3 << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqswappath2 << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqswappath1 << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqswappath0 << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqdelpathq3 << 19) & ~((u32)0x00080000)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqdelpathi3 << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqdelpathq2 << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqdelpathi2 << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqdelpathq1 << 15) & ~((u32)0x00008000)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqdelpathi1 << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqdelpathq0 << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqdelpathi0 << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqdelpathq4 << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqdelpathi4 << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqdelpathq3 << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqdelpathi3 << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqdelpathq2 << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqdelpathi2 << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqdelpathq1 << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqdelpathi1 << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqdelpathq0 << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqdelpathi0 << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)txc2_sdisbcfg << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)rxc2_sdisbcfg << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, ((u32)txiqswapsel << 31) | ((u32)txiqswappath3 << 30) | ((u32)txiqswappath2 << 29) | ((u32)txiqswappath1 << 28) | ((u32)txiqswappath0 << 27) | ((u32)rxiqswappath4 << 26) | ((u32)rxiqswappath3 << 25) | ((u32)rxiqswappath2 << 24) | ((u32)rxiqswappath1 << 23) | ((u32)rxiqswappath0 << 22) | ((u32)txiqdelpathq3 << 19) | ((u32)txiqdelpathi3 << 18) | ((u32)txiqdelpathq2 << 17) | ((u32)txiqdelpathi2 << 16) | ((u32)txiqdelpathq1 << 15) | ((u32)txiqdelpathi1 << 14) | ((u32)txiqdelpathq0 << 13) | ((u32)txiqdelpathi0 << 12) | ((u32)rxiqdelpathq4 << 11) | ((u32)rxiqdelpathi4 << 10) | ((u32)rxiqdelpathq3 << 9) | ((u32)rxiqdelpathi3 << 8) | ((u32)rxiqdelpathq2 << 7) | ((u32)rxiqdelpathi2 << 6) | ((u32)rxiqdelpathq1 << 5) | ((u32)rxiqdelpathi1 << 4) | ((u32)rxiqdelpathq0 << 3) | ((u32)rxiqdelpathi0 << 2) | ((u32)txc2_sdisbcfg << 1) | ((u32)rxc2_sdisbcfg << 0));
}

static inline void riu_rwnxiqctrl_unpack(struct cl_chip *chip, u8 *txiqswapsel, u8 *txiqswappath3, u8 *txiqswappath2, u8 *txiqswappath1, u8 *txiqswappath0, u8 *rxiqswappath4, u8 *rxiqswappath3, u8 *rxiqswappath2, u8 *rxiqswappath1, u8 *rxiqswappath0, u8 *txiqdelpathq3, u8 *txiqdelpathi3, u8 *txiqdelpathq2, u8 *txiqdelpathi2, u8 *txiqdelpathq1, u8 *txiqdelpathi1, u8 *txiqdelpathq0, u8 *txiqdelpathi0, u8 *rxiqdelpathq4, u8 *rxiqdelpathi4, u8 *rxiqdelpathq3, u8 *rxiqdelpathi3, u8 *rxiqdelpathq2, u8 *rxiqdelpathi2, u8 *rxiqdelpathq1, u8 *rxiqdelpathi1, u8 *rxiqdelpathq0, u8 *rxiqdelpathi0, u8 *txc2_sdisbcfg, u8 *rxc2_sdisbcfg)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	*txiqswapsel = (local_val & ((u32)0x80000000)) >> 31;
	*txiqswappath3 = (local_val & ((u32)0x40000000)) >> 30;
	*txiqswappath2 = (local_val & ((u32)0x20000000)) >> 29;
	*txiqswappath1 = (local_val & ((u32)0x10000000)) >> 28;
	*txiqswappath0 = (local_val & ((u32)0x08000000)) >> 27;
	*rxiqswappath4 = (local_val & ((u32)0x04000000)) >> 26;
	*rxiqswappath3 = (local_val & ((u32)0x02000000)) >> 25;
	*rxiqswappath2 = (local_val & ((u32)0x01000000)) >> 24;
	*rxiqswappath1 = (local_val & ((u32)0x00800000)) >> 23;
	*rxiqswappath0 = (local_val & ((u32)0x00400000)) >> 22;
	*txiqdelpathq3 = (local_val & ((u32)0x00080000)) >> 19;
	*txiqdelpathi3 = (local_val & ((u32)0x00040000)) >> 18;
	*txiqdelpathq2 = (local_val & ((u32)0x00020000)) >> 17;
	*txiqdelpathi2 = (local_val & ((u32)0x00010000)) >> 16;
	*txiqdelpathq1 = (local_val & ((u32)0x00008000)) >> 15;
	*txiqdelpathi1 = (local_val & ((u32)0x00004000)) >> 14;
	*txiqdelpathq0 = (local_val & ((u32)0x00002000)) >> 13;
	*txiqdelpathi0 = (local_val & ((u32)0x00001000)) >> 12;
	*rxiqdelpathq4 = (local_val & ((u32)0x00000800)) >> 11;
	*rxiqdelpathi4 = (local_val & ((u32)0x00000400)) >> 10;
	*rxiqdelpathq3 = (local_val & ((u32)0x00000200)) >> 9;
	*rxiqdelpathi3 = (local_val & ((u32)0x00000100)) >> 8;
	*rxiqdelpathq2 = (local_val & ((u32)0x00000080)) >> 7;
	*rxiqdelpathi2 = (local_val & ((u32)0x00000040)) >> 6;
	*rxiqdelpathq1 = (local_val & ((u32)0x00000020)) >> 5;
	*rxiqdelpathi1 = (local_val & ((u32)0x00000010)) >> 4;
	*rxiqdelpathq0 = (local_val & ((u32)0x00000008)) >> 3;
	*rxiqdelpathi0 = (local_val & ((u32)0x00000004)) >> 2;
	*txc2_sdisbcfg = (local_val & ((u32)0x00000002)) >> 1;
	*rxc2_sdisbcfg = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_rwnxiqctrl_txiqswapsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_rwnxiqctrl_txiqswapsel_setf(struct cl_chip *chip, u8 txiqswapsel)
{
	ASSERT_ERR_CHIP((((u32)txiqswapsel << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x80000000)) | ((u32)txiqswapsel << 31));
}

static inline u8 riu_rwnxiqctrl_txiqswappath_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void riu_rwnxiqctrl_txiqswappath_3_setf(struct cl_chip *chip, u8 txiqswappath3)
{
	ASSERT_ERR_CHIP((((u32)txiqswappath3 << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x40000000)) | ((u32)txiqswappath3 << 30));
}

static inline u8 riu_rwnxiqctrl_txiqswappath_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void riu_rwnxiqctrl_txiqswappath_2_setf(struct cl_chip *chip, u8 txiqswappath2)
{
	ASSERT_ERR_CHIP((((u32)txiqswappath2 << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x20000000)) | ((u32)txiqswappath2 << 29));
}

static inline u8 riu_rwnxiqctrl_txiqswappath_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void riu_rwnxiqctrl_txiqswappath_1_setf(struct cl_chip *chip, u8 txiqswappath1)
{
	ASSERT_ERR_CHIP((((u32)txiqswappath1 << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x10000000)) | ((u32)txiqswappath1 << 28));
}

static inline u8 riu_rwnxiqctrl_txiqswappath_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void riu_rwnxiqctrl_txiqswappath_0_setf(struct cl_chip *chip, u8 txiqswappath0)
{
	ASSERT_ERR_CHIP((((u32)txiqswappath0 << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x08000000)) | ((u32)txiqswappath0 << 27));
}

static inline u8 riu_rwnxiqctrl_rxiqswappath_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void riu_rwnxiqctrl_rxiqswappath_4_setf(struct cl_chip *chip, u8 rxiqswappath4)
{
	ASSERT_ERR_CHIP((((u32)rxiqswappath4 << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x04000000)) | ((u32)rxiqswappath4 << 26));
}

static inline u8 riu_rwnxiqctrl_rxiqswappath_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void riu_rwnxiqctrl_rxiqswappath_3_setf(struct cl_chip *chip, u8 rxiqswappath3)
{
	ASSERT_ERR_CHIP((((u32)rxiqswappath3 << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x02000000)) | ((u32)rxiqswappath3 << 25));
}

static inline u8 riu_rwnxiqctrl_rxiqswappath_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void riu_rwnxiqctrl_rxiqswappath_2_setf(struct cl_chip *chip, u8 rxiqswappath2)
{
	ASSERT_ERR_CHIP((((u32)rxiqswappath2 << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x01000000)) | ((u32)rxiqswappath2 << 24));
}

static inline u8 riu_rwnxiqctrl_rxiqswappath_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void riu_rwnxiqctrl_rxiqswappath_1_setf(struct cl_chip *chip, u8 rxiqswappath1)
{
	ASSERT_ERR_CHIP((((u32)rxiqswappath1 << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00800000)) | ((u32)rxiqswappath1 << 23));
}

static inline u8 riu_rwnxiqctrl_rxiqswappath_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline void riu_rwnxiqctrl_rxiqswappath_0_setf(struct cl_chip *chip, u8 rxiqswappath0)
{
	ASSERT_ERR_CHIP((((u32)rxiqswappath0 << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00400000)) | ((u32)rxiqswappath0 << 22));
}

static inline u8 riu_rwnxiqctrl_txiqdelpathq_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline void riu_rwnxiqctrl_txiqdelpathq_3_setf(struct cl_chip *chip, u8 txiqdelpathq3)
{
	ASSERT_ERR_CHIP((((u32)txiqdelpathq3 << 19) & ~((u32)0x00080000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00080000)) | ((u32)txiqdelpathq3 << 19));
}

static inline u8 riu_rwnxiqctrl_txiqdelpathi_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void riu_rwnxiqctrl_txiqdelpathi_3_setf(struct cl_chip *chip, u8 txiqdelpathi3)
{
	ASSERT_ERR_CHIP((((u32)txiqdelpathi3 << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00040000)) | ((u32)txiqdelpathi3 << 18));
}

static inline u8 riu_rwnxiqctrl_txiqdelpathq_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void riu_rwnxiqctrl_txiqdelpathq_2_setf(struct cl_chip *chip, u8 txiqdelpathq2)
{
	ASSERT_ERR_CHIP((((u32)txiqdelpathq2 << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00020000)) | ((u32)txiqdelpathq2 << 17));
}

static inline u8 riu_rwnxiqctrl_txiqdelpathi_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void riu_rwnxiqctrl_txiqdelpathi_2_setf(struct cl_chip *chip, u8 txiqdelpathi2)
{
	ASSERT_ERR_CHIP((((u32)txiqdelpathi2 << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00010000)) | ((u32)txiqdelpathi2 << 16));
}

static inline u8 riu_rwnxiqctrl_txiqdelpathq_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline void riu_rwnxiqctrl_txiqdelpathq_1_setf(struct cl_chip *chip, u8 txiqdelpathq1)
{
	ASSERT_ERR_CHIP((((u32)txiqdelpathq1 << 15) & ~((u32)0x00008000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00008000)) | ((u32)txiqdelpathq1 << 15));
}

static inline u8 riu_rwnxiqctrl_txiqdelpathi_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void riu_rwnxiqctrl_txiqdelpathi_1_setf(struct cl_chip *chip, u8 txiqdelpathi1)
{
	ASSERT_ERR_CHIP((((u32)txiqdelpathi1 << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00004000)) | ((u32)txiqdelpathi1 << 14));
}

static inline u8 riu_rwnxiqctrl_txiqdelpathq_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_rwnxiqctrl_txiqdelpathq_0_setf(struct cl_chip *chip, u8 txiqdelpathq0)
{
	ASSERT_ERR_CHIP((((u32)txiqdelpathq0 << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00002000)) | ((u32)txiqdelpathq0 << 13));
}

static inline u8 riu_rwnxiqctrl_txiqdelpathi_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void riu_rwnxiqctrl_txiqdelpathi_0_setf(struct cl_chip *chip, u8 txiqdelpathi0)
{
	ASSERT_ERR_CHIP((((u32)txiqdelpathi0 << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00001000)) | ((u32)txiqdelpathi0 << 12));
}

static inline u8 riu_rwnxiqctrl_rxiqdelpathq_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void riu_rwnxiqctrl_rxiqdelpathq_4_setf(struct cl_chip *chip, u8 rxiqdelpathq4)
{
	ASSERT_ERR_CHIP((((u32)rxiqdelpathq4 << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00000800)) | ((u32)rxiqdelpathq4 << 11));
}

static inline u8 riu_rwnxiqctrl_rxiqdelpathi_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void riu_rwnxiqctrl_rxiqdelpathi_4_setf(struct cl_chip *chip, u8 rxiqdelpathi4)
{
	ASSERT_ERR_CHIP((((u32)rxiqdelpathi4 << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00000400)) | ((u32)rxiqdelpathi4 << 10));
}

static inline u8 riu_rwnxiqctrl_rxiqdelpathq_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void riu_rwnxiqctrl_rxiqdelpathq_3_setf(struct cl_chip *chip, u8 rxiqdelpathq3)
{
	ASSERT_ERR_CHIP((((u32)rxiqdelpathq3 << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00000200)) | ((u32)rxiqdelpathq3 << 9));
}

static inline u8 riu_rwnxiqctrl_rxiqdelpathi_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void riu_rwnxiqctrl_rxiqdelpathi_3_setf(struct cl_chip *chip, u8 rxiqdelpathi3)
{
	ASSERT_ERR_CHIP((((u32)rxiqdelpathi3 << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00000100)) | ((u32)rxiqdelpathi3 << 8));
}

static inline u8 riu_rwnxiqctrl_rxiqdelpathq_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void riu_rwnxiqctrl_rxiqdelpathq_2_setf(struct cl_chip *chip, u8 rxiqdelpathq2)
{
	ASSERT_ERR_CHIP((((u32)rxiqdelpathq2 << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00000080)) | ((u32)rxiqdelpathq2 << 7));
}

static inline u8 riu_rwnxiqctrl_rxiqdelpathi_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void riu_rwnxiqctrl_rxiqdelpathi_2_setf(struct cl_chip *chip, u8 rxiqdelpathi2)
{
	ASSERT_ERR_CHIP((((u32)rxiqdelpathi2 << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00000040)) | ((u32)rxiqdelpathi2 << 6));
}

static inline u8 riu_rwnxiqctrl_rxiqdelpathq_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void riu_rwnxiqctrl_rxiqdelpathq_1_setf(struct cl_chip *chip, u8 rxiqdelpathq1)
{
	ASSERT_ERR_CHIP((((u32)rxiqdelpathq1 << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00000020)) | ((u32)rxiqdelpathq1 << 5));
}

static inline u8 riu_rwnxiqctrl_rxiqdelpathi_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void riu_rwnxiqctrl_rxiqdelpathi_1_setf(struct cl_chip *chip, u8 rxiqdelpathi1)
{
	ASSERT_ERR_CHIP((((u32)rxiqdelpathi1 << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00000010)) | ((u32)rxiqdelpathi1 << 4));
}

static inline u8 riu_rwnxiqctrl_rxiqdelpathq_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void riu_rwnxiqctrl_rxiqdelpathq_0_setf(struct cl_chip *chip, u8 rxiqdelpathq0)
{
	ASSERT_ERR_CHIP((((u32)rxiqdelpathq0 << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00000008)) | ((u32)rxiqdelpathq0 << 3));
}

static inline u8 riu_rwnxiqctrl_rxiqdelpathi_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void riu_rwnxiqctrl_rxiqdelpathi_0_setf(struct cl_chip *chip, u8 rxiqdelpathi0)
{
	ASSERT_ERR_CHIP((((u32)rxiqdelpathi0 << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00000004)) | ((u32)rxiqdelpathi0 << 2));
}

static inline u8 riu_rwnxiqctrl_txc_2_sdisbcfg_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void riu_rwnxiqctrl_txc_2_sdisbcfg_setf(struct cl_chip *chip, u8 txc2sdisbcfg)
{
	ASSERT_ERR_CHIP((((u32)txc2sdisbcfg << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00000002)) | ((u32)txc2sdisbcfg << 1));
}

static inline u8 riu_rwnxiqctrl_rxc_2_sdisbcfg_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_rwnxiqctrl_rxc_2_sdisbcfg_setf(struct cl_chip *chip, u8 rxc2sdisbcfg)
{
	ASSERT_ERR_CHIP((((u32)rxc2sdisbcfg << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_ADDR) & ~((u32)0x00000001)) | ((u32)rxc2sdisbcfg << 0));
}

/**
 * @brief RWNXRXUNLOCKTIMER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30    UNLOCKTIMEOUTReload_Set   0
 *    29    UNLOCKTIMEOUTDisable_Set  0
 *    28    UNLOCKTIMEOUTEnable_Set   0
 *    12:00 UNLOCKTIMEOUT             0x780
 * </pre>
 */
#define RIU_RWNXRXUNLOCKTIMER_ADDR        (REG_RIU_BASE_ADDR + 0x00000020)
#define RIU_RWNXRXUNLOCKTIMER_OFFSET      0x00000020
#define RIU_RWNXRXUNLOCKTIMER_INDEX       0x00000008
#define RIU_RWNXRXUNLOCKTIMER_RESET       0x00FF0780

static inline u32 riu_rwnxrxunlocktimer_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXRXUNLOCKTIMER_ADDR);
}

static inline void riu_rwnxrxunlocktimer_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXRXUNLOCKTIMER_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXRXUNLOCKTIMER_UNLOCKTIMEOUTRELOAD_SET_BIT    ((u32)0x40000000)
#define RIU_RWNXRXUNLOCKTIMER_UNLOCKTIMEOUTRELOAD_SET_POS    30
#define RIU_RWNXRXUNLOCKTIMER_UNLOCKTIMEOUTDISABLE_SET_BIT    ((u32)0x20000000)
#define RIU_RWNXRXUNLOCKTIMER_UNLOCKTIMEOUTDISABLE_SET_POS    29
#define RIU_RWNXRXUNLOCKTIMER_UNLOCKTIMEOUTENABLE_SET_BIT    ((u32)0x10000000)
#define RIU_RWNXRXUNLOCKTIMER_UNLOCKTIMEOUTENABLE_SET_POS    28
#define RIU_RWNXRXUNLOCKTIMER_UNLOCKTIMEOUT_MASK    ((u32)0x00001FFF)
#define RIU_RWNXRXUNLOCKTIMER_UNLOCKTIMEOUT_LSB    0
#define RIU_RWNXRXUNLOCKTIMER_UNLOCKTIMEOUT_WIDTH    ((u32)0x0000000D)

#define RIU_RWNXRXUNLOCKTIMER_UNLOCKTIMEOUTRELOAD_SET_RST    0x0
#define RIU_RWNXRXUNLOCKTIMER_UNLOCKTIMEOUTDISABLE_SET_RST    0x0
#define RIU_RWNXRXUNLOCKTIMER_UNLOCKTIMEOUTENABLE_SET_RST    0x0
#define RIU_RWNXRXUNLOCKTIMER_UNLOCKTIMEOUT_RST    0x780

static inline void riu_rwnxrxunlocktimer_pack(struct cl_chip *chip, u8 unlocktimeoutreload_set, u8 unlocktimeoutdisable_set, u8 unlocktimeoutenable_set, u16 unlocktimeout)
{
	ASSERT_ERR_CHIP((((u32)unlocktimeoutreload_set << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)unlocktimeoutdisable_set << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)unlocktimeoutenable_set << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)unlocktimeout << 0) & ~((u32)0x00001FFF)) == 0);
	cl_reg_write(chip, RIU_RWNXRXUNLOCKTIMER_ADDR, ((u32)unlocktimeoutreload_set << 30) | ((u32)unlocktimeoutdisable_set << 29) | ((u32)unlocktimeoutenable_set << 28) | ((u32)unlocktimeout << 0));
}

static inline void riu_rwnxrxunlocktimer_unpack(struct cl_chip *chip, u8 *unlocktimeoutreload_set, u8 *unlocktimeoutdisable_set, u8 *unlocktimeoutenable_set, u16 *unlocktimeout)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXRXUNLOCKTIMER_ADDR);

	*unlocktimeoutreload_set = (local_val & ((u32)0x40000000)) >> 30;
	*unlocktimeoutdisable_set = (local_val & ((u32)0x20000000)) >> 29;
	*unlocktimeoutenable_set = (local_val & ((u32)0x10000000)) >> 28;
	*unlocktimeout = (local_val & ((u32)0x00001FFF)) >> 0;
}

static inline u8 riu_rwnxrxunlocktimer_unlocktimeoutreload_set_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXRXUNLOCKTIMER_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void riu_rwnxrxunlocktimer_unlocktimeoutreload_set_setf(struct cl_chip *chip, u8 unlocktimeoutreloadset)
{
	ASSERT_ERR_CHIP((((u32)unlocktimeoutreloadset << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RIU_RWNXRXUNLOCKTIMER_ADDR, (cl_reg_read(chip, RIU_RWNXRXUNLOCKTIMER_ADDR) & ~((u32)0x40000000)) | ((u32)unlocktimeoutreloadset << 30));
}

static inline u8 riu_rwnxrxunlocktimer_unlocktimeoutdisable_set_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXRXUNLOCKTIMER_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void riu_rwnxrxunlocktimer_unlocktimeoutdisable_set_setf(struct cl_chip *chip, u8 unlocktimeoutdisableset)
{
	ASSERT_ERR_CHIP((((u32)unlocktimeoutdisableset << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RIU_RWNXRXUNLOCKTIMER_ADDR, (cl_reg_read(chip, RIU_RWNXRXUNLOCKTIMER_ADDR) & ~((u32)0x20000000)) | ((u32)unlocktimeoutdisableset << 29));
}

static inline u8 riu_rwnxrxunlocktimer_unlocktimeoutenable_set_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXRXUNLOCKTIMER_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void riu_rwnxrxunlocktimer_unlocktimeoutenable_set_setf(struct cl_chip *chip, u8 unlocktimeoutenableset)
{
	ASSERT_ERR_CHIP((((u32)unlocktimeoutenableset << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RIU_RWNXRXUNLOCKTIMER_ADDR, (cl_reg_read(chip, RIU_RWNXRXUNLOCKTIMER_ADDR) & ~((u32)0x10000000)) | ((u32)unlocktimeoutenableset << 28));
}

static inline u16 riu_rwnxrxunlocktimer_unlocktimeout_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXRXUNLOCKTIMER_ADDR);

	return (u16)((local_val & ((u32)0x00001FFF)) >> 0);
}

static inline void riu_rwnxrxunlocktimer_unlocktimeout_setf(struct cl_chip *chip, u16 unlocktimeout)
{
	ASSERT_ERR_CHIP((((u32)unlocktimeout << 0) & ~((u32)0x00001FFF)) == 0);
	cl_reg_write(chip, RIU_RWNXRXUNLOCKTIMER_ADDR, (cl_reg_read(chip, RIU_RWNXRXUNLOCKTIMER_ADDR) & ~((u32)0x00001FFF)) | ((u32)unlocktimeout << 0));
}

/**
 * @brief RWNXTXFEDELAY_40 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 TXENDDELAY40              0x78
 *    09:00 TXFEDELAY40               0x252
 * </pre>
 */
#define RIU_RWNXTXFEDELAY_40_ADDR        (REG_RIU_BASE_ADDR + 0x00000024)
#define RIU_RWNXTXFEDELAY_40_OFFSET      0x00000024
#define RIU_RWNXTXFEDELAY_40_INDEX       0x00000009
#define RIU_RWNXTXFEDELAY_40_RESET       0x3C000252

static inline u32 riu_rwnxtxfedelay_40_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXTXFEDELAY_40_ADDR);
}

static inline void riu_rwnxtxfedelay_40_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_40_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXTXFEDELAY_40_TXENDDELAY_40_MASK    ((u32)0xFF800000)
#define RIU_RWNXTXFEDELAY_40_TXENDDELAY_40_LSB    23
#define RIU_RWNXTXFEDELAY_40_TXENDDELAY_40_WIDTH    ((u32)0x00000009)
#define RIU_RWNXTXFEDELAY_40_TXFEDELAY_40_MASK    ((u32)0x000003FF)
#define RIU_RWNXTXFEDELAY_40_TXFEDELAY_40_LSB    0
#define RIU_RWNXTXFEDELAY_40_TXFEDELAY_40_WIDTH    ((u32)0x0000000A)

#define RIU_RWNXTXFEDELAY_40_TXENDDELAY_40_RST    0x78
#define RIU_RWNXTXFEDELAY_40_TXFEDELAY_40_RST    0x252

static inline void riu_rwnxtxfedelay_40_pack(struct cl_chip *chip, u16 txenddelay40, u16 txfedelay40)
{
	ASSERT_ERR_CHIP((((u32)txenddelay40 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)txfedelay40 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_40_ADDR, ((u32)txenddelay40 << 23) | ((u32)txfedelay40 << 0));
}

static inline void riu_rwnxtxfedelay_40_unpack(struct cl_chip *chip, u16 *txenddelay40, u16 *txfedelay40)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_40_ADDR);

	*txenddelay40 = (local_val & ((u32)0xFF800000)) >> 23;
	*txfedelay40 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_rwnxtxfedelay_40_txenddelay_40_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_40_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_rwnxtxfedelay_40_txenddelay_40_setf(struct cl_chip *chip, u16 txenddelay40)
{
	ASSERT_ERR_CHIP((((u32)txenddelay40 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_40_ADDR, (cl_reg_read(chip, RIU_RWNXTXFEDELAY_40_ADDR) & ~((u32)0xFF800000)) | ((u32)txenddelay40 << 23));
}

static inline u16 riu_rwnxtxfedelay_40_txfedelay_40_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_40_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_rwnxtxfedelay_40_txfedelay_40_setf(struct cl_chip *chip, u16 txfedelay40)
{
	ASSERT_ERR_CHIP((((u32)txfedelay40 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_40_ADDR, (cl_reg_read(chip, RIU_RWNXTXFEDELAY_40_ADDR) & ~((u32)0x000003FF)) | ((u32)txfedelay40 << 0));
}

/**
 * @brief RWNXTXFEDELAY_80 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 TXENDDELAY80              0x2c
 *    09:00 TXFEDELAY80               0x180
 * </pre>
 */
#define RIU_RWNXTXFEDELAY_80_ADDR        (REG_RIU_BASE_ADDR + 0x00000028)
#define RIU_RWNXTXFEDELAY_80_OFFSET      0x00000028
#define RIU_RWNXTXFEDELAY_80_INDEX       0x0000000A
#define RIU_RWNXTXFEDELAY_80_RESET       0x16000180

static inline u32 riu_rwnxtxfedelay_80_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXTXFEDELAY_80_ADDR);
}

static inline void riu_rwnxtxfedelay_80_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_80_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXTXFEDELAY_80_TXENDDELAY_80_MASK    ((u32)0xFF800000)
#define RIU_RWNXTXFEDELAY_80_TXENDDELAY_80_LSB    23
#define RIU_RWNXTXFEDELAY_80_TXENDDELAY_80_WIDTH    ((u32)0x00000009)
#define RIU_RWNXTXFEDELAY_80_TXFEDELAY_80_MASK    ((u32)0x000003FF)
#define RIU_RWNXTXFEDELAY_80_TXFEDELAY_80_LSB    0
#define RIU_RWNXTXFEDELAY_80_TXFEDELAY_80_WIDTH    ((u32)0x0000000A)

#define RIU_RWNXTXFEDELAY_80_TXENDDELAY_80_RST    0x2c
#define RIU_RWNXTXFEDELAY_80_TXFEDELAY_80_RST    0x180

static inline void riu_rwnxtxfedelay_80_pack(struct cl_chip *chip, u16 txenddelay80, u16 txfedelay80)
{
	ASSERT_ERR_CHIP((((u32)txenddelay80 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)txfedelay80 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_80_ADDR, ((u32)txenddelay80 << 23) | ((u32)txfedelay80 << 0));
}

static inline void riu_rwnxtxfedelay_80_unpack(struct cl_chip *chip, u16 *txenddelay80, u16 *txfedelay80)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_80_ADDR);

	*txenddelay80 = (local_val & ((u32)0xFF800000)) >> 23;
	*txfedelay80 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_rwnxtxfedelay_80_txenddelay_80_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_80_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_rwnxtxfedelay_80_txenddelay_80_setf(struct cl_chip *chip, u16 txenddelay80)
{
	ASSERT_ERR_CHIP((((u32)txenddelay80 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_80_ADDR, (cl_reg_read(chip, RIU_RWNXTXFEDELAY_80_ADDR) & ~((u32)0xFF800000)) | ((u32)txenddelay80 << 23));
}

static inline u16 riu_rwnxtxfedelay_80_txfedelay_80_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_80_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_rwnxtxfedelay_80_txfedelay_80_setf(struct cl_chip *chip, u16 txfedelay80)
{
	ASSERT_ERR_CHIP((((u32)txfedelay80 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_80_ADDR, (cl_reg_read(chip, RIU_RWNXTXFEDELAY_80_ADDR) & ~((u32)0x000003FF)) | ((u32)txfedelay80 << 0));
}

/**
 * @brief FTM_CTL register definition
 *  FTM free running counter soft reset register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    03    HBF20_SYNC20_MODE         0
 *    02    FRC_SYNC_START            1
 *    01    FRC_SYNC_TYPE             0
 *    00    FRC_EN                    1
 * </pre>
 */
#define RIU_FTM_CTL_ADDR        (REG_RIU_BASE_ADDR + 0x0000002C)
#define RIU_FTM_CTL_OFFSET      0x0000002C
#define RIU_FTM_CTL_INDEX       0x0000000B
#define RIU_FTM_CTL_RESET       0x00000005

static inline u32 riu_ftm_ctl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FTM_CTL_ADDR);
}

static inline void riu_ftm_ctl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_FTM_CTL_ADDR, value);
}

/* Field definitions */
#define RIU_FTM_CTL_HBF_20_SYNC_20_MODE_BIT    ((u32)0x00000008)
#define RIU_FTM_CTL_HBF_20_SYNC_20_MODE_POS    3
#define RIU_FTM_CTL_FRC_SYNC_START_BIT      ((u32)0x00000004)
#define RIU_FTM_CTL_FRC_SYNC_START_POS      2
#define RIU_FTM_CTL_FRC_SYNC_TYPE_BIT       ((u32)0x00000002)
#define RIU_FTM_CTL_FRC_SYNC_TYPE_POS       1
#define RIU_FTM_CTL_FRC_EN_BIT              ((u32)0x00000001)
#define RIU_FTM_CTL_FRC_EN_POS              0

#define RIU_FTM_CTL_HBF_20_SYNC_20_MODE_RST    0x0
#define RIU_FTM_CTL_FRC_SYNC_START_RST      0x1
#define RIU_FTM_CTL_FRC_SYNC_TYPE_RST       0x0
#define RIU_FTM_CTL_FRC_EN_RST              0x1

static inline void riu_ftm_ctl_pack(struct cl_chip *chip, u8 hbf20_sync20_mode, u8 frc_sync_start, u8 frc_sync_type, u8 frc_en)
{
	ASSERT_ERR_CHIP((((u32)hbf20_sync20_mode << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)frc_sync_start << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)frc_sync_type << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)frc_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_FTM_CTL_ADDR, ((u32)hbf20_sync20_mode << 3) | ((u32)frc_sync_start << 2) | ((u32)frc_sync_type << 1) | ((u32)frc_en << 0));
}

static inline void riu_ftm_ctl_unpack(struct cl_chip *chip, u8 *hbf20_sync20_mode, u8 *frc_sync_start, u8 *frc_sync_type, u8 *frc_en)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_CTL_ADDR);

	*hbf20_sync20_mode = (local_val & ((u32)0x00000008)) >> 3;
	*frc_sync_start = (local_val & ((u32)0x00000004)) >> 2;
	*frc_sync_type = (local_val & ((u32)0x00000002)) >> 1;
	*frc_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_ftm_ctl_hbf_20_sync_20_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_CTL_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void riu_ftm_ctl_hbf_20_sync_20_mode_setf(struct cl_chip *chip, u8 hbf20sync20mode)
{
	ASSERT_ERR_CHIP((((u32)hbf20sync20mode << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RIU_FTM_CTL_ADDR, (cl_reg_read(chip, RIU_FTM_CTL_ADDR) & ~((u32)0x00000008)) | ((u32)hbf20sync20mode << 3));
}

static inline u8 riu_ftm_ctl_frc_sync_start_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_CTL_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void riu_ftm_ctl_frc_sync_start_setf(struct cl_chip *chip, u8 frcsyncstart)
{
	ASSERT_ERR_CHIP((((u32)frcsyncstart << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RIU_FTM_CTL_ADDR, (cl_reg_read(chip, RIU_FTM_CTL_ADDR) & ~((u32)0x00000004)) | ((u32)frcsyncstart << 2));
}

static inline u8 riu_ftm_ctl_frc_sync_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_CTL_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void riu_ftm_ctl_frc_sync_type_setf(struct cl_chip *chip, u8 frcsynctype)
{
	ASSERT_ERR_CHIP((((u32)frcsynctype << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_FTM_CTL_ADDR, (cl_reg_read(chip, RIU_FTM_CTL_ADDR) & ~((u32)0x00000002)) | ((u32)frcsynctype << 1));
}

static inline u8 riu_ftm_ctl_frc_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_CTL_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_ftm_ctl_frc_en_setf(struct cl_chip *chip, u8 frcen)
{
	ASSERT_ERR_CHIP((((u32)frcen << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_FTM_CTL_ADDR, (cl_reg_read(chip, RIU_FTM_CTL_ADDR) & ~((u32)0x00000001)) | ((u32)frcen << 0));
}

/**
 * @brief FTM_TOD_LO register definition
 *  FTM TimeOfDeparture 32b lsb register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    TOD_LO_CC                 0
 *    30    TOD_MORE                  1
 *    29:00 TOD_29_0                  0x0
 * </pre>
 */
#define RIU_FTM_TOD_LO_ADDR        (REG_RIU_BASE_ADDR + 0x00000030)
#define RIU_FTM_TOD_LO_OFFSET      0x00000030
#define RIU_FTM_TOD_LO_INDEX       0x0000000C
#define RIU_FTM_TOD_LO_RESET       0x40000000

static inline u32 riu_ftm_tod_lo_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FTM_TOD_LO_ADDR);
}

/* Field definitions */
#define RIU_FTM_TOD_LO_TOD_LO_CC_BIT        ((u32)0x80000000)
#define RIU_FTM_TOD_LO_TOD_LO_CC_POS        31
#define RIU_FTM_TOD_LO_TOD_MORE_BIT         ((u32)0x40000000)
#define RIU_FTM_TOD_LO_TOD_MORE_POS         30
#define RIU_FTM_TOD_LO_TOD_29_0_MASK        ((u32)0x3FFFFFFF)
#define RIU_FTM_TOD_LO_TOD_29_0_LSB         0
#define RIU_FTM_TOD_LO_TOD_29_0_WIDTH       ((u32)0x0000001E)

#define RIU_FTM_TOD_LO_TOD_LO_CC_RST        0x0
#define RIU_FTM_TOD_LO_TOD_MORE_RST         0x1
#define RIU_FTM_TOD_LO_TOD_29_0_RST         0x0

static inline void riu_ftm_tod_lo_unpack(struct cl_chip *chip, u8 *tod_lo_cc, u8 *tod_more, u32 *tod_29_0)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TOD_LO_ADDR);

	*tod_lo_cc = (local_val & ((u32)0x80000000)) >> 31;
	*tod_more = (local_val & ((u32)0x40000000)) >> 30;
	*tod_29_0 = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_ftm_tod_lo_tod_lo_cc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TOD_LO_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline u8 riu_ftm_tod_lo_tod_more_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TOD_LO_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline u32 riu_ftm_tod_lo_tod_29_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TOD_LO_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

/**
 * @brief FTM_TOA_LO register definition
 *  FTM TimeOfArrival 32b lsb register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    TOA_LO_CC                 0
 *    30    TOA_MORE                  1
 *    29:00 TOA_29_0                  0x0
 * </pre>
 */
#define RIU_FTM_TOA_LO_ADDR        (REG_RIU_BASE_ADDR + 0x00000034)
#define RIU_FTM_TOA_LO_OFFSET      0x00000034
#define RIU_FTM_TOA_LO_INDEX       0x0000000D
#define RIU_FTM_TOA_LO_RESET       0x40000000

static inline u32 riu_ftm_toa_lo_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FTM_TOA_LO_ADDR);
}

/* Field definitions */
#define RIU_FTM_TOA_LO_TOA_LO_CC_BIT        ((u32)0x80000000)
#define RIU_FTM_TOA_LO_TOA_LO_CC_POS        31
#define RIU_FTM_TOA_LO_TOA_MORE_BIT         ((u32)0x40000000)
#define RIU_FTM_TOA_LO_TOA_MORE_POS         30
#define RIU_FTM_TOA_LO_TOA_29_0_MASK        ((u32)0x3FFFFFFF)
#define RIU_FTM_TOA_LO_TOA_29_0_LSB         0
#define RIU_FTM_TOA_LO_TOA_29_0_WIDTH       ((u32)0x0000001E)

#define RIU_FTM_TOA_LO_TOA_LO_CC_RST        0x0
#define RIU_FTM_TOA_LO_TOA_MORE_RST         0x1
#define RIU_FTM_TOA_LO_TOA_29_0_RST         0x0

static inline void riu_ftm_toa_lo_unpack(struct cl_chip *chip, u8 *toa_lo_cc, u8 *toa_more, u32 *toa_29_0)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TOA_LO_ADDR);

	*toa_lo_cc = (local_val & ((u32)0x80000000)) >> 31;
	*toa_more = (local_val & ((u32)0x40000000)) >> 30;
	*toa_29_0 = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_ftm_toa_lo_toa_lo_cc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TOA_LO_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline u8 riu_ftm_toa_lo_toa_more_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TOA_LO_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline u32 riu_ftm_toa_lo_toa_29_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TOA_LO_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

/**
 * @brief FTM_HI register definition
 *  FTM ToD and ToA 16b msb register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    TOA_HI_CC                 0
 *    30:16 TOA_44_30                 0x0
 *    15    TOD_HI_CC                 0
 *    14:00 TOD_44_30                 0x0
 * </pre>
 */
#define RIU_FTM_HI_ADDR        (REG_RIU_BASE_ADDR + 0x00000038)
#define RIU_FTM_HI_OFFSET      0x00000038
#define RIU_FTM_HI_INDEX       0x0000000E
#define RIU_FTM_HI_RESET       0x00000000

static inline u32 riu_ftm_hi_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FTM_HI_ADDR);
}

/* Field definitions */
#define RIU_FTM_HI_TOA_HI_CC_BIT            ((u32)0x80000000)
#define RIU_FTM_HI_TOA_HI_CC_POS            31
#define RIU_FTM_HI_TOA_44_30_MASK           ((u32)0x7FFF0000)
#define RIU_FTM_HI_TOA_44_30_LSB            16
#define RIU_FTM_HI_TOA_44_30_WIDTH          ((u32)0x0000000F)
#define RIU_FTM_HI_TOD_HI_CC_BIT            ((u32)0x00008000)
#define RIU_FTM_HI_TOD_HI_CC_POS            15
#define RIU_FTM_HI_TOD_44_30_MASK           ((u32)0x00007FFF)
#define RIU_FTM_HI_TOD_44_30_LSB            0
#define RIU_FTM_HI_TOD_44_30_WIDTH          ((u32)0x0000000F)

#define RIU_FTM_HI_TOA_HI_CC_RST            0x0
#define RIU_FTM_HI_TOA_44_30_RST            0x0
#define RIU_FTM_HI_TOD_HI_CC_RST            0x0
#define RIU_FTM_HI_TOD_44_30_RST            0x0

static inline void riu_ftm_hi_unpack(struct cl_chip *chip, u8 *toa_hi_cc, u16 *toa_44_30, u8 *tod_hi_cc, u16 *tod_44_30)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_HI_ADDR);

	*toa_hi_cc = (local_val & ((u32)0x80000000)) >> 31;
	*toa_44_30 = (local_val & ((u32)0x7FFF0000)) >> 16;
	*tod_hi_cc = (local_val & ((u32)0x00008000)) >> 15;
	*tod_44_30 = (local_val & ((u32)0x00007FFF)) >> 0;
}

static inline u8 riu_ftm_hi_toa_hi_cc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_HI_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline u16 riu_ftm_hi_toa_44_30_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_HI_ADDR);

	return (u16)((local_val & ((u32)0x7FFF0000)) >> 16);
}

static inline u8 riu_ftm_hi_tod_hi_cc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_HI_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline u16 riu_ftm_hi_tod_44_30_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_HI_ADDR);

	return (u16)((local_val & ((u32)0x00007FFF)) >> 0);
}

/**
 * @brief FTM_FRC register definition
 *  FTM FRC 32b samples count register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 FRC                       0x0
 * </pre>
 */
#define RIU_FTM_FRC_ADDR        (REG_RIU_BASE_ADDR + 0x0000003C)
#define RIU_FTM_FRC_OFFSET      0x0000003C
#define RIU_FTM_FRC_INDEX       0x0000000F
#define RIU_FTM_FRC_RESET       0x00000000

static inline u32 riu_ftm_frc_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FTM_FRC_ADDR);
}

/* Field definitions */
#define RIU_FTM_FRC_FRC_MASK                ((u32)0xFFFFFFFF)
#define RIU_FTM_FRC_FRC_LSB                 0
#define RIU_FTM_FRC_FRC_WIDTH               ((u32)0x00000020)

#define RIU_FTM_FRC_FRC_RST                 0x0

static inline u32 riu_ftm_frc_frc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_FRC_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief BTC_CTL register definition
 *  BT coex control reg register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    17    BTC_EN                    1
 *    16    BTC_DEBOUNCE_EN           0
 *    14:12 BTC3_MODE_TDO             0x0
 *    10:08 BTC2_MODE_TDI             0x0
 *    06:04 BTC1_MODE_TMS             0x0
 *    02:00 BTC0_MODE_TRSTN           0x0
 * </pre>
 */
#define RIU_BTC_CTL_ADDR        (REG_RIU_BASE_ADDR + 0x00000040)
#define RIU_BTC_CTL_OFFSET      0x00000040
#define RIU_BTC_CTL_INDEX       0x00000010
#define RIU_BTC_CTL_RESET       0x00020000

static inline u32 riu_btc_ctl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_BTC_CTL_ADDR);
}

static inline void riu_btc_ctl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_BTC_CTL_ADDR, value);
}

/* Field definitions */
#define RIU_BTC_CTL_BTC_EN_BIT              ((u32)0x00020000)
#define RIU_BTC_CTL_BTC_EN_POS              17
#define RIU_BTC_CTL_BTC_DEBOUNCE_EN_BIT     ((u32)0x00010000)
#define RIU_BTC_CTL_BTC_DEBOUNCE_EN_POS     16
#define RIU_BTC_CTL_BTC_3_MODE_TDO_MASK     ((u32)0x00007000)
#define RIU_BTC_CTL_BTC_3_MODE_TDO_LSB      12
#define RIU_BTC_CTL_BTC_3_MODE_TDO_WIDTH    ((u32)0x00000003)
#define RIU_BTC_CTL_BTC_2_MODE_TDI_MASK     ((u32)0x00000700)
#define RIU_BTC_CTL_BTC_2_MODE_TDI_LSB      8
#define RIU_BTC_CTL_BTC_2_MODE_TDI_WIDTH    ((u32)0x00000003)
#define RIU_BTC_CTL_BTC_1_MODE_TMS_MASK     ((u32)0x00000070)
#define RIU_BTC_CTL_BTC_1_MODE_TMS_LSB      4
#define RIU_BTC_CTL_BTC_1_MODE_TMS_WIDTH    ((u32)0x00000003)
#define RIU_BTC_CTL_BTC_0_MODE_TRSTN_MASK    ((u32)0x00000007)
#define RIU_BTC_CTL_BTC_0_MODE_TRSTN_LSB    0
#define RIU_BTC_CTL_BTC_0_MODE_TRSTN_WIDTH    ((u32)0x00000003)

#define RIU_BTC_CTL_BTC_EN_RST              0x1
#define RIU_BTC_CTL_BTC_DEBOUNCE_EN_RST     0x0
#define RIU_BTC_CTL_BTC_3_MODE_TDO_RST      0x0
#define RIU_BTC_CTL_BTC_2_MODE_TDI_RST      0x0
#define RIU_BTC_CTL_BTC_1_MODE_TMS_RST      0x0
#define RIU_BTC_CTL_BTC_0_MODE_TRSTN_RST    0x0

static inline void riu_btc_ctl_pack(struct cl_chip *chip, u8 btc_en, u8 btc_debounce_en, u8 btc3_mode_tdo, u8 btc2_mode_tdi, u8 btc1_mode_tms, u8 btc0_mode_trstn)
{
	ASSERT_ERR_CHIP((((u32)btc_en << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)btc_debounce_en << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)btc3_mode_tdo << 12) & ~((u32)0x00007000)) == 0);
	ASSERT_ERR_CHIP((((u32)btc2_mode_tdi << 8) & ~((u32)0x00000700)) == 0);
	ASSERT_ERR_CHIP((((u32)btc1_mode_tms << 4) & ~((u32)0x00000070)) == 0);
	ASSERT_ERR_CHIP((((u32)btc0_mode_trstn << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RIU_BTC_CTL_ADDR, ((u32)btc_en << 17) | ((u32)btc_debounce_en << 16) | ((u32)btc3_mode_tdo << 12) | ((u32)btc2_mode_tdi << 8) | ((u32)btc1_mode_tms << 4) | ((u32)btc0_mode_trstn << 0));
}

static inline void riu_btc_ctl_unpack(struct cl_chip *chip, u8 *btc_en, u8 *btc_debounce_en, u8 *btc3_mode_tdo, u8 *btc2_mode_tdi, u8 *btc1_mode_tms, u8 *btc0_mode_trstn)
{
	u32 local_val = cl_reg_read(chip, RIU_BTC_CTL_ADDR);

	*btc_en = (local_val & ((u32)0x00020000)) >> 17;
	*btc_debounce_en = (local_val & ((u32)0x00010000)) >> 16;
	*btc3_mode_tdo = (local_val & ((u32)0x00007000)) >> 12;
	*btc2_mode_tdi = (local_val & ((u32)0x00000700)) >> 8;
	*btc1_mode_tms = (local_val & ((u32)0x00000070)) >> 4;
	*btc0_mode_trstn = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 riu_btc_ctl_btc_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_BTC_CTL_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void riu_btc_ctl_btc_en_setf(struct cl_chip *chip, u8 btcen)
{
	ASSERT_ERR_CHIP((((u32)btcen << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RIU_BTC_CTL_ADDR, (cl_reg_read(chip, RIU_BTC_CTL_ADDR) & ~((u32)0x00020000)) | ((u32)btcen << 17));
}

static inline u8 riu_btc_ctl_btc_debounce_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_BTC_CTL_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void riu_btc_ctl_btc_debounce_en_setf(struct cl_chip *chip, u8 btcdebounceen)
{
	ASSERT_ERR_CHIP((((u32)btcdebounceen << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_BTC_CTL_ADDR, (cl_reg_read(chip, RIU_BTC_CTL_ADDR) & ~((u32)0x00010000)) | ((u32)btcdebounceen << 16));
}

static inline u8 riu_btc_ctl_btc_3_mode_tdo_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_BTC_CTL_ADDR);

	return (u8)((local_val & ((u32)0x00007000)) >> 12);
}

static inline void riu_btc_ctl_btc_3_mode_tdo_setf(struct cl_chip *chip, u8 btc3modetdo)
{
	ASSERT_ERR_CHIP((((u32)btc3modetdo << 12) & ~((u32)0x00007000)) == 0);
	cl_reg_write(chip, RIU_BTC_CTL_ADDR, (cl_reg_read(chip, RIU_BTC_CTL_ADDR) & ~((u32)0x00007000)) | ((u32)btc3modetdo << 12));
}

static inline u8 riu_btc_ctl_btc_2_mode_tdi_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_BTC_CTL_ADDR);

	return (u8)((local_val & ((u32)0x00000700)) >> 8);
}

static inline void riu_btc_ctl_btc_2_mode_tdi_setf(struct cl_chip *chip, u8 btc2modetdi)
{
	ASSERT_ERR_CHIP((((u32)btc2modetdi << 8) & ~((u32)0x00000700)) == 0);
	cl_reg_write(chip, RIU_BTC_CTL_ADDR, (cl_reg_read(chip, RIU_BTC_CTL_ADDR) & ~((u32)0x00000700)) | ((u32)btc2modetdi << 8));
}

static inline u8 riu_btc_ctl_btc_1_mode_tms_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_BTC_CTL_ADDR);

	return (u8)((local_val & ((u32)0x00000070)) >> 4);
}

static inline void riu_btc_ctl_btc_1_mode_tms_setf(struct cl_chip *chip, u8 btc1modetms)
{
	ASSERT_ERR_CHIP((((u32)btc1modetms << 4) & ~((u32)0x00000070)) == 0);
	cl_reg_write(chip, RIU_BTC_CTL_ADDR, (cl_reg_read(chip, RIU_BTC_CTL_ADDR) & ~((u32)0x00000070)) | ((u32)btc1modetms << 4));
}

static inline u8 riu_btc_ctl_btc_0_mode_trstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_BTC_CTL_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void riu_btc_ctl_btc_0_mode_trstn_setf(struct cl_chip *chip, u8 btc0modetrstn)
{
	ASSERT_ERR_CHIP((((u32)btc0modetrstn << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RIU_BTC_CTL_ADDR, (cl_reg_read(chip, RIU_BTC_CTL_ADDR) & ~((u32)0x00000007)) | ((u32)btc0modetrstn << 0));
}

/**
 * @brief BTC_STAT register definition
 *  BT coex inputs post debouncing register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    03    BTC3_STAT_TDO             0
 *    02    BTC2_STAT_TDI             0
 *    01    BTC1_STAT_TMS             0
 *    00    BTC0_STAT_TRSTN           0
 * </pre>
 */
#define RIU_BTC_STAT_ADDR        (REG_RIU_BASE_ADDR + 0x00000044)
#define RIU_BTC_STAT_OFFSET      0x00000044
#define RIU_BTC_STAT_INDEX       0x00000011
#define RIU_BTC_STAT_RESET       0x00000000

static inline u32 riu_btc_stat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_BTC_STAT_ADDR);
}

/* Field definitions */
#define RIU_BTC_STAT_BTC_3_STAT_TDO_BIT     ((u32)0x00000008)
#define RIU_BTC_STAT_BTC_3_STAT_TDO_POS     3
#define RIU_BTC_STAT_BTC_2_STAT_TDI_BIT     ((u32)0x00000004)
#define RIU_BTC_STAT_BTC_2_STAT_TDI_POS     2
#define RIU_BTC_STAT_BTC_1_STAT_TMS_BIT     ((u32)0x00000002)
#define RIU_BTC_STAT_BTC_1_STAT_TMS_POS     1
#define RIU_BTC_STAT_BTC_0_STAT_TRSTN_BIT    ((u32)0x00000001)
#define RIU_BTC_STAT_BTC_0_STAT_TRSTN_POS    0

#define RIU_BTC_STAT_BTC_3_STAT_TDO_RST     0x0
#define RIU_BTC_STAT_BTC_2_STAT_TDI_RST     0x0
#define RIU_BTC_STAT_BTC_1_STAT_TMS_RST     0x0
#define RIU_BTC_STAT_BTC_0_STAT_TRSTN_RST    0x0

static inline void riu_btc_stat_unpack(struct cl_chip *chip, u8 *btc3_stat_tdo, u8 *btc2_stat_tdi, u8 *btc1_stat_tms, u8 *btc0_stat_trstn)
{
	u32 local_val = cl_reg_read(chip, RIU_BTC_STAT_ADDR);

	*btc3_stat_tdo = (local_val & ((u32)0x00000008)) >> 3;
	*btc2_stat_tdi = (local_val & ((u32)0x00000004)) >> 2;
	*btc1_stat_tms = (local_val & ((u32)0x00000002)) >> 1;
	*btc0_stat_trstn = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_btc_stat_btc_3_stat_tdo_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_BTC_STAT_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline u8 riu_btc_stat_btc_2_stat_tdi_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_BTC_STAT_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline u8 riu_btc_stat_btc_1_stat_tms_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_BTC_STAT_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline u8 riu_btc_stat_btc_0_stat_trstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_BTC_STAT_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

/**
 * @brief EXACTTXSTART register definition
 *  FRC based tx start register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    TXSTARTFRCCANCEL          0
 *    29:00 TXSTARTFRCTARGET          0x0
 * </pre>
 */
#define RIU_EXACTTXSTART_ADDR        (REG_RIU_BASE_ADDR + 0x00000048)
#define RIU_EXACTTXSTART_OFFSET      0x00000048
#define RIU_EXACTTXSTART_INDEX       0x00000012
#define RIU_EXACTTXSTART_RESET       0x00000000

static inline u32 riu_exacttxstart_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_EXACTTXSTART_ADDR);
}

static inline void riu_exacttxstart_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_EXACTTXSTART_ADDR, value);
}

/* Field definitions */
#define RIU_EXACTTXSTART_TXSTARTFRCCANCEL_BIT    ((u32)0x80000000)
#define RIU_EXACTTXSTART_TXSTARTFRCCANCEL_POS    31
#define RIU_EXACTTXSTART_TXSTARTFRCTARGET_MASK    ((u32)0x3FFFFFFF)
#define RIU_EXACTTXSTART_TXSTARTFRCTARGET_LSB    0
#define RIU_EXACTTXSTART_TXSTARTFRCTARGET_WIDTH    ((u32)0x0000001E)

#define RIU_EXACTTXSTART_TXSTARTFRCCANCEL_RST    0x0
#define RIU_EXACTTXSTART_TXSTARTFRCTARGET_RST    0x0

static inline void riu_exacttxstart_pack(struct cl_chip *chip, u8 txstartfrccancel, u32 txstartfrctarget)
{
	ASSERT_ERR_CHIP((((u32)txstartfrccancel << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)txstartfrctarget << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_EXACTTXSTART_ADDR, ((u32)txstartfrccancel << 31) | ((u32)txstartfrctarget << 0));
}

static inline void riu_exacttxstart_unpack(struct cl_chip *chip, u8 *txstartfrccancel, u32 *txstartfrctarget)
{
	u32 local_val = cl_reg_read(chip, RIU_EXACTTXSTART_ADDR);

	*txstartfrccancel = (local_val & ((u32)0x80000000)) >> 31;
	*txstartfrctarget = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_exacttxstart_txstartfrccancel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_EXACTTXSTART_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_exacttxstart_txstartfrccancel_setf(struct cl_chip *chip, u8 txstartfrccancel)
{
	ASSERT_ERR_CHIP((((u32)txstartfrccancel << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_EXACTTXSTART_ADDR, (cl_reg_read(chip, RIU_EXACTTXSTART_ADDR) & ~((u32)0x80000000)) | ((u32)txstartfrccancel << 31));
}

static inline u32 riu_exacttxstart_txstartfrctarget_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_EXACTTXSTART_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

static inline void riu_exacttxstart_txstartfrctarget_setf(struct cl_chip *chip, u32 txstartfrctarget)
{
	ASSERT_ERR_CHIP((((u32)txstartfrctarget << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_EXACTTXSTART_ADDR, (cl_reg_read(chip, RIU_EXACTTXSTART_ADDR) & ~((u32)0x3FFFFFFF)) | ((u32)txstartfrctarget << 0));
}

/**
 * @brief TX_ENV_DET register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    24    ENV_DET_POLARITY          0
 *    20:16 ENV_DET_DELAY             0x0
 *    14:12 ENV_DET_SCALE             0x0
 *    11:00 ENV_DET_TH                0xfff
 * </pre>
 */
#define RIU_TX_ENV_DET_ADDR        (REG_RIU_BASE_ADDR + 0x0000004C)
#define RIU_TX_ENV_DET_OFFSET      0x0000004C
#define RIU_TX_ENV_DET_INDEX       0x00000013
#define RIU_TX_ENV_DET_RESET       0x00000FFF

static inline u32 riu_tx_env_det_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_TX_ENV_DET_ADDR);
}

static inline void riu_tx_env_det_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_TX_ENV_DET_ADDR, value);
}

/* Field definitions */
#define RIU_TX_ENV_DET_ENV_DET_POLARITY_BIT    ((u32)0x01000000)
#define RIU_TX_ENV_DET_ENV_DET_POLARITY_POS    24
#define RIU_TX_ENV_DET_ENV_DET_DELAY_MASK    ((u32)0x001F0000)
#define RIU_TX_ENV_DET_ENV_DET_DELAY_LSB    16
#define RIU_TX_ENV_DET_ENV_DET_DELAY_WIDTH    ((u32)0x00000005)
#define RIU_TX_ENV_DET_ENV_DET_SCALE_MASK    ((u32)0x00007000)
#define RIU_TX_ENV_DET_ENV_DET_SCALE_LSB    12
#define RIU_TX_ENV_DET_ENV_DET_SCALE_WIDTH    ((u32)0x00000003)
#define RIU_TX_ENV_DET_ENV_DET_TH_MASK      ((u32)0x00000FFF)
#define RIU_TX_ENV_DET_ENV_DET_TH_LSB       0
#define RIU_TX_ENV_DET_ENV_DET_TH_WIDTH     ((u32)0x0000000C)

#define RIU_TX_ENV_DET_ENV_DET_POLARITY_RST    0x0
#define RIU_TX_ENV_DET_ENV_DET_DELAY_RST    0x0
#define RIU_TX_ENV_DET_ENV_DET_SCALE_RST    0x0
#define RIU_TX_ENV_DET_ENV_DET_TH_RST       0xfff

static inline void riu_tx_env_det_pack(struct cl_chip *chip, u8 env_det_polarity, u8 env_det_delay, u8 env_det_scale, u16 env_det_th)
{
	ASSERT_ERR_CHIP((((u32)env_det_polarity << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)env_det_delay << 16) & ~((u32)0x001F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)env_det_scale << 12) & ~((u32)0x00007000)) == 0);
	ASSERT_ERR_CHIP((((u32)env_det_th << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_TX_ENV_DET_ADDR, ((u32)env_det_polarity << 24) | ((u32)env_det_delay << 16) | ((u32)env_det_scale << 12) | ((u32)env_det_th << 0));
}

static inline void riu_tx_env_det_unpack(struct cl_chip *chip, u8 *env_det_polarity, u8 *env_det_delay, u8 *env_det_scale, u16 *env_det_th)
{
	u32 local_val = cl_reg_read(chip, RIU_TX_ENV_DET_ADDR);

	*env_det_polarity = (local_val & ((u32)0x01000000)) >> 24;
	*env_det_delay = (local_val & ((u32)0x001F0000)) >> 16;
	*env_det_scale = (local_val & ((u32)0x00007000)) >> 12;
	*env_det_th = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u8 riu_tx_env_det_env_det_polarity_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_TX_ENV_DET_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void riu_tx_env_det_env_det_polarity_setf(struct cl_chip *chip, u8 envdetpolarity)
{
	ASSERT_ERR_CHIP((((u32)envdetpolarity << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RIU_TX_ENV_DET_ADDR, (cl_reg_read(chip, RIU_TX_ENV_DET_ADDR) & ~((u32)0x01000000)) | ((u32)envdetpolarity << 24));
}

static inline u8 riu_tx_env_det_env_det_delay_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_TX_ENV_DET_ADDR);

	return (u8)((local_val & ((u32)0x001F0000)) >> 16);
}

static inline void riu_tx_env_det_env_det_delay_setf(struct cl_chip *chip, u8 envdetdelay)
{
	ASSERT_ERR_CHIP((((u32)envdetdelay << 16) & ~((u32)0x001F0000)) == 0);
	cl_reg_write(chip, RIU_TX_ENV_DET_ADDR, (cl_reg_read(chip, RIU_TX_ENV_DET_ADDR) & ~((u32)0x001F0000)) | ((u32)envdetdelay << 16));
}

static inline u8 riu_tx_env_det_env_det_scale_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_TX_ENV_DET_ADDR);

	return (u8)((local_val & ((u32)0x00007000)) >> 12);
}

static inline void riu_tx_env_det_env_det_scale_setf(struct cl_chip *chip, u8 envdetscale)
{
	ASSERT_ERR_CHIP((((u32)envdetscale << 12) & ~((u32)0x00007000)) == 0);
	cl_reg_write(chip, RIU_TX_ENV_DET_ADDR, (cl_reg_read(chip, RIU_TX_ENV_DET_ADDR) & ~((u32)0x00007000)) | ((u32)envdetscale << 12));
}

static inline u16 riu_tx_env_det_env_det_th_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_TX_ENV_DET_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

static inline void riu_tx_env_det_env_det_th_setf(struct cl_chip *chip, u16 envdetth)
{
	ASSERT_ERR_CHIP((((u32)envdetth << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_TX_ENV_DET_ADDR, (cl_reg_read(chip, RIU_TX_ENV_DET_ADDR) & ~((u32)0x00000FFF)) | ((u32)envdetth << 0));
}

/**
 * @brief AGCBWSEL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    11:10 ACI_BW_SW                 0x0
 *    08    ACI_BW_SRC_SEL            0
 *    07:06 RFG_BW_SW                 0x0
 *    04    RFG_BW_SRC_SEL            0
 *    03:02 CCA_BW_SW                 0x0
 *    00    CCA_BW_SRC_SEL            0
 * </pre>
 */
#define RIU_AGCBWSEL_ADDR        (REG_RIU_BASE_ADDR + 0x00000050)
#define RIU_AGCBWSEL_OFFSET      0x00000050
#define RIU_AGCBWSEL_INDEX       0x00000014
#define RIU_AGCBWSEL_RESET       0x00000000

static inline u32 riu_agcbwsel_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCBWSEL_ADDR);
}

static inline void riu_agcbwsel_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCBWSEL_ADDR, value);
}

/* Field definitions */
#define RIU_AGCBWSEL_ACI_BW_SW_MASK         ((u32)0x00000C00)
#define RIU_AGCBWSEL_ACI_BW_SW_LSB          10
#define RIU_AGCBWSEL_ACI_BW_SW_WIDTH        ((u32)0x00000002)
#define RIU_AGCBWSEL_ACI_BW_SRC_SEL_BIT     ((u32)0x00000100)
#define RIU_AGCBWSEL_ACI_BW_SRC_SEL_POS     8
#define RIU_AGCBWSEL_RFG_BW_SW_MASK         ((u32)0x000000C0)
#define RIU_AGCBWSEL_RFG_BW_SW_LSB          6
#define RIU_AGCBWSEL_RFG_BW_SW_WIDTH        ((u32)0x00000002)
#define RIU_AGCBWSEL_RFG_BW_SRC_SEL_BIT     ((u32)0x00000010)
#define RIU_AGCBWSEL_RFG_BW_SRC_SEL_POS     4
#define RIU_AGCBWSEL_CCA_BW_SW_MASK         ((u32)0x0000000C)
#define RIU_AGCBWSEL_CCA_BW_SW_LSB          2
#define RIU_AGCBWSEL_CCA_BW_SW_WIDTH        ((u32)0x00000002)
#define RIU_AGCBWSEL_CCA_BW_SRC_SEL_BIT     ((u32)0x00000001)
#define RIU_AGCBWSEL_CCA_BW_SRC_SEL_POS     0

#define RIU_AGCBWSEL_ACI_BW_SW_RST          0x0
#define RIU_AGCBWSEL_ACI_BW_SRC_SEL_RST     0x0
#define RIU_AGCBWSEL_RFG_BW_SW_RST          0x0
#define RIU_AGCBWSEL_RFG_BW_SRC_SEL_RST     0x0
#define RIU_AGCBWSEL_CCA_BW_SW_RST          0x0
#define RIU_AGCBWSEL_CCA_BW_SRC_SEL_RST     0x0

static inline void riu_agcbwsel_pack(struct cl_chip *chip, u8 aci_bw_sw, u8 aci_bw_src_sel, u8 rfg_bw_sw, u8 rfg_bw_src_sel, u8 cca_bw_sw, u8 cca_bw_src_sel)
{
	ASSERT_ERR_CHIP((((u32)aci_bw_sw << 10) & ~((u32)0x00000C00)) == 0);
	ASSERT_ERR_CHIP((((u32)aci_bw_src_sel << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)rfg_bw_sw << 6) & ~((u32)0x000000C0)) == 0);
	ASSERT_ERR_CHIP((((u32)rfg_bw_src_sel << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)cca_bw_sw << 2) & ~((u32)0x0000000C)) == 0);
	ASSERT_ERR_CHIP((((u32)cca_bw_src_sel << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_AGCBWSEL_ADDR, ((u32)aci_bw_sw << 10) | ((u32)aci_bw_src_sel << 8) | ((u32)rfg_bw_sw << 6) | ((u32)rfg_bw_src_sel << 4) | ((u32)cca_bw_sw << 2) | ((u32)cca_bw_src_sel << 0));
}

static inline void riu_agcbwsel_unpack(struct cl_chip *chip, u8 *aci_bw_sw, u8 *aci_bw_src_sel, u8 *rfg_bw_sw, u8 *rfg_bw_src_sel, u8 *cca_bw_sw, u8 *cca_bw_src_sel)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCBWSEL_ADDR);

	*aci_bw_sw = (local_val & ((u32)0x00000C00)) >> 10;
	*aci_bw_src_sel = (local_val & ((u32)0x00000100)) >> 8;
	*rfg_bw_sw = (local_val & ((u32)0x000000C0)) >> 6;
	*rfg_bw_src_sel = (local_val & ((u32)0x00000010)) >> 4;
	*cca_bw_sw = (local_val & ((u32)0x0000000C)) >> 2;
	*cca_bw_src_sel = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_agcbwsel_aci_bw_sw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCBWSEL_ADDR);

	return (u8)((local_val & ((u32)0x00000C00)) >> 10);
}

static inline void riu_agcbwsel_aci_bw_sw_setf(struct cl_chip *chip, u8 acibwsw)
{
	ASSERT_ERR_CHIP((((u32)acibwsw << 10) & ~((u32)0x00000C00)) == 0);
	cl_reg_write(chip, RIU_AGCBWSEL_ADDR, (cl_reg_read(chip, RIU_AGCBWSEL_ADDR) & ~((u32)0x00000C00)) | ((u32)acibwsw << 10));
}

static inline u8 riu_agcbwsel_aci_bw_src_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCBWSEL_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void riu_agcbwsel_aci_bw_src_sel_setf(struct cl_chip *chip, u8 acibwsrcsel)
{
	ASSERT_ERR_CHIP((((u32)acibwsrcsel << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_AGCBWSEL_ADDR, (cl_reg_read(chip, RIU_AGCBWSEL_ADDR) & ~((u32)0x00000100)) | ((u32)acibwsrcsel << 8));
}

static inline u8 riu_agcbwsel_rfg_bw_sw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCBWSEL_ADDR);

	return (u8)((local_val & ((u32)0x000000C0)) >> 6);
}

static inline void riu_agcbwsel_rfg_bw_sw_setf(struct cl_chip *chip, u8 rfgbwsw)
{
	ASSERT_ERR_CHIP((((u32)rfgbwsw << 6) & ~((u32)0x000000C0)) == 0);
	cl_reg_write(chip, RIU_AGCBWSEL_ADDR, (cl_reg_read(chip, RIU_AGCBWSEL_ADDR) & ~((u32)0x000000C0)) | ((u32)rfgbwsw << 6));
}

static inline u8 riu_agcbwsel_rfg_bw_src_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCBWSEL_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void riu_agcbwsel_rfg_bw_src_sel_setf(struct cl_chip *chip, u8 rfgbwsrcsel)
{
	ASSERT_ERR_CHIP((((u32)rfgbwsrcsel << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RIU_AGCBWSEL_ADDR, (cl_reg_read(chip, RIU_AGCBWSEL_ADDR) & ~((u32)0x00000010)) | ((u32)rfgbwsrcsel << 4));
}

static inline u8 riu_agcbwsel_cca_bw_sw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCBWSEL_ADDR);

	return (u8)((local_val & ((u32)0x0000000C)) >> 2);
}

static inline void riu_agcbwsel_cca_bw_sw_setf(struct cl_chip *chip, u8 ccabwsw)
{
	ASSERT_ERR_CHIP((((u32)ccabwsw << 2) & ~((u32)0x0000000C)) == 0);
	cl_reg_write(chip, RIU_AGCBWSEL_ADDR, (cl_reg_read(chip, RIU_AGCBWSEL_ADDR) & ~((u32)0x0000000C)) | ((u32)ccabwsw << 2));
}

static inline u8 riu_agcbwsel_cca_bw_src_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCBWSEL_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_agcbwsel_cca_bw_src_sel_setf(struct cl_chip *chip, u8 ccabwsrcsel)
{
	ASSERT_ERR_CHIP((((u32)ccabwsrcsel << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_AGCBWSEL_ADDR, (cl_reg_read(chip, RIU_AGCBWSEL_ADDR) & ~((u32)0x00000001)) | ((u32)ccabwsrcsel << 0));
}

/**
 * @brief FTM_FRC_MOD_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 FTM_FRC_MOD3              0x0
 * </pre>
 */
#define RIU_FTM_FRC_MOD_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000054)
#define RIU_FTM_FRC_MOD_3_OFFSET      0x00000054
#define RIU_FTM_FRC_MOD_3_INDEX       0x00000015
#define RIU_FTM_FRC_MOD_3_RESET       0x00000000

static inline u32 riu_ftm_frc_mod_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FTM_FRC_MOD_3_ADDR);
}

/* Field definitions */
#define RIU_FTM_FRC_MOD_3_FTM_FRC_MOD_3_MASK    ((u32)0xFFFFFFFF)
#define RIU_FTM_FRC_MOD_3_FTM_FRC_MOD_3_LSB    0
#define RIU_FTM_FRC_MOD_3_FTM_FRC_MOD_3_WIDTH    ((u32)0x00000020)

#define RIU_FTM_FRC_MOD_3_FTM_FRC_MOD_3_RST    0x0

static inline u32 riu_ftm_frc_mod_3_ftm_frc_mod_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_FRC_MOD_3_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_CS register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_CS                0x0
 * </pre>
 */
#define RIU_CCA_CNT_CS_ADDR        (REG_RIU_BASE_ADDR + 0x00000058)
#define RIU_CCA_CNT_CS_OFFSET      0x00000058
#define RIU_CCA_CNT_CS_INDEX       0x00000016
#define RIU_CCA_CNT_CS_RESET       0x00000000

static inline u32 riu_cca_cnt_cs_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_CS_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_CS_CCA_CNT_CS_MASK      ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_CS_CCA_CNT_CS_LSB       0
#define RIU_CCA_CNT_CS_CCA_CNT_CS_WIDTH     ((u32)0x00000020)

#define RIU_CCA_CNT_CS_CCA_CNT_CS_RST       0x0

static inline u32 riu_cca_cnt_cs_cca_cnt_cs_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_CS_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_MDM_STATE register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    11:00 CCA_MDM_STATE             0x0
 * </pre>
 */
#define RIU_CCA_MDM_STATE_ADDR        (REG_RIU_BASE_ADDR + 0x0000005C)
#define RIU_CCA_MDM_STATE_OFFSET      0x0000005C
#define RIU_CCA_MDM_STATE_INDEX       0x00000017
#define RIU_CCA_MDM_STATE_RESET       0x00000000

static inline u32 riu_cca_mdm_state_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_MDM_STATE_ADDR);
}

/* Field definitions */
#define RIU_CCA_MDM_STATE_CCA_MDM_STATE_MASK    ((u32)0x00000FFF)
#define RIU_CCA_MDM_STATE_CCA_MDM_STATE_LSB    0
#define RIU_CCA_MDM_STATE_CCA_MDM_STATE_WIDTH    ((u32)0x0000000C)

#define RIU_CCA_MDM_STATE_CCA_MDM_STATE_RST    0x0

static inline u16 riu_cca_mdm_state_cca_mdm_state_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_MDM_STATE_ADDR);

	return (u16)(local_val >> 0);
}

/**
 * @brief AGCFSM_REV register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGCFSM_REV                0x0
 * </pre>
 */
#define RIU_AGCFSM_REV_ADDR        (REG_RIU_BASE_ADDR + 0x00000060)
#define RIU_AGCFSM_REV_OFFSET      0x00000060
#define RIU_AGCFSM_REV_INDEX       0x00000018
#define RIU_AGCFSM_REV_RESET       0x00000000

static inline u32 riu_agcfsm_rev_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_REV_ADDR);
}

/* Field definitions */
#define RIU_AGCFSM_REV_AGCFSM_REV_MASK      ((u32)0x00FFFFFF)
#define RIU_AGCFSM_REV_AGCFSM_REV_LSB       0
#define RIU_AGCFSM_REV_AGCFSM_REV_WIDTH     ((u32)0x00000018)

#define RIU_AGCFSM_REV_AGCFSM_REV_RST       0x0

static inline u32 riu_agcfsm_rev_agcfsm_rev_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_REV_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief UNLOCK_TIMEOUT_MASK register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    22:00 UNLOCK_TIMEOUT_MASK       0x7FFFFF
 * </pre>
 */
#define RIU_UNLOCK_TIMEOUT_MASK_ADDR        (REG_RIU_BASE_ADDR + 0x00000064)
#define RIU_UNLOCK_TIMEOUT_MASK_OFFSET      0x00000064
#define RIU_UNLOCK_TIMEOUT_MASK_INDEX       0x00000019
#define RIU_UNLOCK_TIMEOUT_MASK_RESET       0x007FFFFF

static inline u32 riu_unlock_timeout_mask_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_UNLOCK_TIMEOUT_MASK_ADDR);
}

static inline void riu_unlock_timeout_mask_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_UNLOCK_TIMEOUT_MASK_ADDR, value);
}

/* Field definitions */
#define RIU_UNLOCK_TIMEOUT_MASK_UNLOCK_TIMEOUT_MASK_MASK    ((u32)0x007FFFFF)
#define RIU_UNLOCK_TIMEOUT_MASK_UNLOCK_TIMEOUT_MASK_LSB    0
#define RIU_UNLOCK_TIMEOUT_MASK_UNLOCK_TIMEOUT_MASK_WIDTH    ((u32)0x00000017)

#define RIU_UNLOCK_TIMEOUT_MASK_UNLOCK_TIMEOUT_MASK_RST    0x7FFFFF

static inline u32 riu_unlock_timeout_mask_unlock_timeout_mask_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_UNLOCK_TIMEOUT_MASK_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_unlock_timeout_mask_unlock_timeout_mask_setf(struct cl_chip *chip, u32 unlocktimeoutmask)
{
	ASSERT_ERR_CHIP((((u32)unlocktimeoutmask << 0) & ~((u32)0x007FFFFF)) == 0);
	cl_reg_write(chip, RIU_UNLOCK_TIMEOUT_MASK_ADDR, (u32)unlocktimeoutmask << 0);
}

/**
 * @brief AGC_UNLOCK_REASON register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    22:00 AGC_UNLOCK_REASON         0x0
 * </pre>
 */
#define RIU_AGC_UNLOCK_REASON_ADDR        (REG_RIU_BASE_ADDR + 0x00000068)
#define RIU_AGC_UNLOCK_REASON_OFFSET      0x00000068
#define RIU_AGC_UNLOCK_REASON_INDEX       0x0000001A
#define RIU_AGC_UNLOCK_REASON_RESET       0x00000000

static inline u32 riu_agc_unlock_reason_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGC_UNLOCK_REASON_ADDR);
}

/* Field definitions */
#define RIU_AGC_UNLOCK_REASON_AGC_UNLOCK_REASON_MASK    ((u32)0x007FFFFF)
#define RIU_AGC_UNLOCK_REASON_AGC_UNLOCK_REASON_LSB    0
#define RIU_AGC_UNLOCK_REASON_AGC_UNLOCK_REASON_WIDTH    ((u32)0x00000017)

#define RIU_AGC_UNLOCK_REASON_AGC_UNLOCK_REASON_RST    0x0

static inline u32 riu_agc_unlock_reason_agc_unlock_reason_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGC_UNLOCK_REASON_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief RWNXSTATICCONFIG_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    DIGITAL_GAIN_CALC_ACTIVE_EN 0
 *    28    BW_160_DC_RADAR_EN        0
 *    27    BW_160_DC_PRIM_EN         0
 *    26    BW_160_DC_CENTER_EN       0
 *    25    BW_80_DC_RADAR_EN         0
 *    24    BW_80_DC_PRIM_EN          0
 *    23    BW_80_DC_CENTER_EN        0
 *    22    BW_40_DC_RADAR_EN         0
 *    21    BW_40_DC_PRIM_EN          0
 *    20    BW_40_DC_CENTER_EN        0
 *    19    BW_20_DC_RADAR_EN         0
 *    18    BW_20_DC_PRIM_EN          0
 *    17    BW_20_DC_CENTER_EN        0
 *    16    FE_DC_SW_CTRL_EN          0
 *    12    ACI_MARGIN_BW_TYPE        0
 *    10    DEBUG_EN                  0
 *    09    ADC_POW_DIS_MODE          0
 *    08    FE_CLK_GATE_DIS           0
 *    05:00 LNA_SEL_CFG               0x0
 * </pre>
 */
#define RIU_RWNXSTATICCONFIG_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000006C)
#define RIU_RWNXSTATICCONFIG_2_OFFSET      0x0000006C
#define RIU_RWNXSTATICCONFIG_2_INDEX       0x0000001B
#define RIU_RWNXSTATICCONFIG_2_RESET       0x00000000

static inline u32 riu_rwnxstaticconfig_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);
}

static inline void riu_rwnxstaticconfig_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXSTATICCONFIG_2_DIGITAL_GAIN_CALC_ACTIVE_EN_BIT    ((u32)0x20000000)
#define RIU_RWNXSTATICCONFIG_2_DIGITAL_GAIN_CALC_ACTIVE_EN_POS    29
#define RIU_RWNXSTATICCONFIG_2_BW_160_DC_RADAR_EN_BIT    ((u32)0x10000000)
#define RIU_RWNXSTATICCONFIG_2_BW_160_DC_RADAR_EN_POS    28
#define RIU_RWNXSTATICCONFIG_2_BW_160_DC_PRIM_EN_BIT    ((u32)0x08000000)
#define RIU_RWNXSTATICCONFIG_2_BW_160_DC_PRIM_EN_POS    27
#define RIU_RWNXSTATICCONFIG_2_BW_160_DC_CENTER_EN_BIT    ((u32)0x04000000)
#define RIU_RWNXSTATICCONFIG_2_BW_160_DC_CENTER_EN_POS    26
#define RIU_RWNXSTATICCONFIG_2_BW_80_DC_RADAR_EN_BIT    ((u32)0x02000000)
#define RIU_RWNXSTATICCONFIG_2_BW_80_DC_RADAR_EN_POS    25
#define RIU_RWNXSTATICCONFIG_2_BW_80_DC_PRIM_EN_BIT    ((u32)0x01000000)
#define RIU_RWNXSTATICCONFIG_2_BW_80_DC_PRIM_EN_POS    24
#define RIU_RWNXSTATICCONFIG_2_BW_80_DC_CENTER_EN_BIT    ((u32)0x00800000)
#define RIU_RWNXSTATICCONFIG_2_BW_80_DC_CENTER_EN_POS    23
#define RIU_RWNXSTATICCONFIG_2_BW_40_DC_RADAR_EN_BIT    ((u32)0x00400000)
#define RIU_RWNXSTATICCONFIG_2_BW_40_DC_RADAR_EN_POS    22
#define RIU_RWNXSTATICCONFIG_2_BW_40_DC_PRIM_EN_BIT    ((u32)0x00200000)
#define RIU_RWNXSTATICCONFIG_2_BW_40_DC_PRIM_EN_POS    21
#define RIU_RWNXSTATICCONFIG_2_BW_40_DC_CENTER_EN_BIT    ((u32)0x00100000)
#define RIU_RWNXSTATICCONFIG_2_BW_40_DC_CENTER_EN_POS    20
#define RIU_RWNXSTATICCONFIG_2_BW_20_DC_RADAR_EN_BIT    ((u32)0x00080000)
#define RIU_RWNXSTATICCONFIG_2_BW_20_DC_RADAR_EN_POS    19
#define RIU_RWNXSTATICCONFIG_2_BW_20_DC_PRIM_EN_BIT    ((u32)0x00040000)
#define RIU_RWNXSTATICCONFIG_2_BW_20_DC_PRIM_EN_POS    18
#define RIU_RWNXSTATICCONFIG_2_BW_20_DC_CENTER_EN_BIT    ((u32)0x00020000)
#define RIU_RWNXSTATICCONFIG_2_BW_20_DC_CENTER_EN_POS    17
#define RIU_RWNXSTATICCONFIG_2_FE_DC_SW_CTRL_EN_BIT    ((u32)0x00010000)
#define RIU_RWNXSTATICCONFIG_2_FE_DC_SW_CTRL_EN_POS    16
#define RIU_RWNXSTATICCONFIG_2_ACI_MARGIN_BW_TYPE_BIT    ((u32)0x00001000)
#define RIU_RWNXSTATICCONFIG_2_ACI_MARGIN_BW_TYPE_POS    12
#define RIU_RWNXSTATICCONFIG_2_DEBUG_EN_BIT    ((u32)0x00000400)
#define RIU_RWNXSTATICCONFIG_2_DEBUG_EN_POS    10
#define RIU_RWNXSTATICCONFIG_2_ADC_POW_DIS_MODE_BIT    ((u32)0x00000200)
#define RIU_RWNXSTATICCONFIG_2_ADC_POW_DIS_MODE_POS    9
#define RIU_RWNXSTATICCONFIG_2_FE_CLK_GATE_DIS_BIT    ((u32)0x00000100)
#define RIU_RWNXSTATICCONFIG_2_FE_CLK_GATE_DIS_POS    8
#define RIU_RWNXSTATICCONFIG_2_LNA_SEL_CFG_MASK    ((u32)0x0000003F)
#define RIU_RWNXSTATICCONFIG_2_LNA_SEL_CFG_LSB    0
#define RIU_RWNXSTATICCONFIG_2_LNA_SEL_CFG_WIDTH    ((u32)0x00000006)

#define RIU_RWNXSTATICCONFIG_2_DIGITAL_GAIN_CALC_ACTIVE_EN_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_BW_160_DC_RADAR_EN_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_BW_160_DC_PRIM_EN_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_BW_160_DC_CENTER_EN_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_BW_80_DC_RADAR_EN_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_BW_80_DC_PRIM_EN_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_BW_80_DC_CENTER_EN_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_BW_40_DC_RADAR_EN_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_BW_40_DC_PRIM_EN_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_BW_40_DC_CENTER_EN_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_BW_20_DC_RADAR_EN_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_BW_20_DC_PRIM_EN_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_BW_20_DC_CENTER_EN_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_FE_DC_SW_CTRL_EN_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_ACI_MARGIN_BW_TYPE_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_DEBUG_EN_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_ADC_POW_DIS_MODE_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_FE_CLK_GATE_DIS_RST    0x0
#define RIU_RWNXSTATICCONFIG_2_LNA_SEL_CFG_RST    0x0

static inline void riu_rwnxstaticconfig_2_pack(struct cl_chip *chip, u8 digital_gain_calc_active_en, u8 bw_160_dc_radar_en, u8 bw_160_dc_prim_en, u8 bw_160_dc_center_en, u8 bw_80_dc_radar_en, u8 bw_80_dc_prim_en, u8 bw_80_dc_center_en, u8 bw_40_dc_radar_en, u8 bw_40_dc_prim_en, u8 bw_40_dc_center_en, u8 bw_20_dc_radar_en, u8 bw_20_dc_prim_en, u8 bw_20_dc_center_en, u8 fe_dc_sw_ctrl_en, u8 aci_margin_bw_type, u8 debug_en, u8 adc_pow_dis_mode, u8 fe_clk_gate_dis, u8 lna_sel_cfg)
{
	ASSERT_ERR_CHIP((((u32)digital_gain_calc_active_en << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bw_160_dc_radar_en << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bw_160_dc_prim_en << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bw_160_dc_center_en << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bw_80_dc_radar_en << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bw_80_dc_prim_en << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bw_80_dc_center_en << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)bw_40_dc_radar_en << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)bw_40_dc_prim_en << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)bw_40_dc_center_en << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)bw_20_dc_radar_en << 19) & ~((u32)0x00080000)) == 0);
	ASSERT_ERR_CHIP((((u32)bw_20_dc_prim_en << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)bw_20_dc_center_en << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)fe_dc_sw_ctrl_en << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci_margin_bw_type << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)debug_en << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)adc_pow_dis_mode << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)fe_clk_gate_dis << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)lna_sel_cfg << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, ((u32)digital_gain_calc_active_en << 29) | ((u32)bw_160_dc_radar_en << 28) | ((u32)bw_160_dc_prim_en << 27) | ((u32)bw_160_dc_center_en << 26) | ((u32)bw_80_dc_radar_en << 25) | ((u32)bw_80_dc_prim_en << 24) | ((u32)bw_80_dc_center_en << 23) | ((u32)bw_40_dc_radar_en << 22) | ((u32)bw_40_dc_prim_en << 21) | ((u32)bw_40_dc_center_en << 20) | ((u32)bw_20_dc_radar_en << 19) | ((u32)bw_20_dc_prim_en << 18) | ((u32)bw_20_dc_center_en << 17) | ((u32)fe_dc_sw_ctrl_en << 16) | ((u32)aci_margin_bw_type << 12) | ((u32)debug_en << 10) | ((u32)adc_pow_dis_mode << 9) | ((u32)fe_clk_gate_dis << 8) | ((u32)lna_sel_cfg << 0));
}

static inline void riu_rwnxstaticconfig_2_unpack(struct cl_chip *chip, u8 *digital_gain_calc_active_en, u8 *bw_160_dc_radar_en, u8 *bw_160_dc_prim_en, u8 *bw_160_dc_center_en, u8 *bw_80_dc_radar_en, u8 *bw_80_dc_prim_en, u8 *bw_80_dc_center_en, u8 *bw_40_dc_radar_en, u8 *bw_40_dc_prim_en, u8 *bw_40_dc_center_en, u8 *bw_20_dc_radar_en, u8 *bw_20_dc_prim_en, u8 *bw_20_dc_center_en, u8 *fe_dc_sw_ctrl_en, u8 *aci_margin_bw_type, u8 *debug_en, u8 *adc_pow_dis_mode, u8 *fe_clk_gate_dis, u8 *lna_sel_cfg)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	*digital_gain_calc_active_en = (local_val & ((u32)0x20000000)) >> 29;
	*bw_160_dc_radar_en = (local_val & ((u32)0x10000000)) >> 28;
	*bw_160_dc_prim_en = (local_val & ((u32)0x08000000)) >> 27;
	*bw_160_dc_center_en = (local_val & ((u32)0x04000000)) >> 26;
	*bw_80_dc_radar_en = (local_val & ((u32)0x02000000)) >> 25;
	*bw_80_dc_prim_en = (local_val & ((u32)0x01000000)) >> 24;
	*bw_80_dc_center_en = (local_val & ((u32)0x00800000)) >> 23;
	*bw_40_dc_radar_en = (local_val & ((u32)0x00400000)) >> 22;
	*bw_40_dc_prim_en = (local_val & ((u32)0x00200000)) >> 21;
	*bw_40_dc_center_en = (local_val & ((u32)0x00100000)) >> 20;
	*bw_20_dc_radar_en = (local_val & ((u32)0x00080000)) >> 19;
	*bw_20_dc_prim_en = (local_val & ((u32)0x00040000)) >> 18;
	*bw_20_dc_center_en = (local_val & ((u32)0x00020000)) >> 17;
	*fe_dc_sw_ctrl_en = (local_val & ((u32)0x00010000)) >> 16;
	*aci_margin_bw_type = (local_val & ((u32)0x00001000)) >> 12;
	*debug_en = (local_val & ((u32)0x00000400)) >> 10;
	*adc_pow_dis_mode = (local_val & ((u32)0x00000200)) >> 9;
	*fe_clk_gate_dis = (local_val & ((u32)0x00000100)) >> 8;
	*lna_sel_cfg = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxstaticconfig_2_digital_gain_calc_active_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void riu_rwnxstaticconfig_2_digital_gain_calc_active_en_setf(struct cl_chip *chip, u8 digitalgaincalcactiveen)
{
	ASSERT_ERR_CHIP((((u32)digitalgaincalcactiveen << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x20000000)) | ((u32)digitalgaincalcactiveen << 29));
}

static inline u8 riu_rwnxstaticconfig_2_bw_160_dc_radar_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void riu_rwnxstaticconfig_2_bw_160_dc_radar_en_setf(struct cl_chip *chip, u8 bw160dcradaren)
{
	ASSERT_ERR_CHIP((((u32)bw160dcradaren << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x10000000)) | ((u32)bw160dcradaren << 28));
}

static inline u8 riu_rwnxstaticconfig_2_bw_160_dc_prim_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void riu_rwnxstaticconfig_2_bw_160_dc_prim_en_setf(struct cl_chip *chip, u8 bw160dcprimen)
{
	ASSERT_ERR_CHIP((((u32)bw160dcprimen << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x08000000)) | ((u32)bw160dcprimen << 27));
}

static inline u8 riu_rwnxstaticconfig_2_bw_160_dc_center_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void riu_rwnxstaticconfig_2_bw_160_dc_center_en_setf(struct cl_chip *chip, u8 bw160dccenteren)
{
	ASSERT_ERR_CHIP((((u32)bw160dccenteren << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x04000000)) | ((u32)bw160dccenteren << 26));
}

static inline u8 riu_rwnxstaticconfig_2_bw_80_dc_radar_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void riu_rwnxstaticconfig_2_bw_80_dc_radar_en_setf(struct cl_chip *chip, u8 bw80dcradaren)
{
	ASSERT_ERR_CHIP((((u32)bw80dcradaren << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x02000000)) | ((u32)bw80dcradaren << 25));
}

static inline u8 riu_rwnxstaticconfig_2_bw_80_dc_prim_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void riu_rwnxstaticconfig_2_bw_80_dc_prim_en_setf(struct cl_chip *chip, u8 bw80dcprimen)
{
	ASSERT_ERR_CHIP((((u32)bw80dcprimen << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x01000000)) | ((u32)bw80dcprimen << 24));
}

static inline u8 riu_rwnxstaticconfig_2_bw_80_dc_center_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void riu_rwnxstaticconfig_2_bw_80_dc_center_en_setf(struct cl_chip *chip, u8 bw80dccenteren)
{
	ASSERT_ERR_CHIP((((u32)bw80dccenteren << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x00800000)) | ((u32)bw80dccenteren << 23));
}

static inline u8 riu_rwnxstaticconfig_2_bw_40_dc_radar_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline void riu_rwnxstaticconfig_2_bw_40_dc_radar_en_setf(struct cl_chip *chip, u8 bw40dcradaren)
{
	ASSERT_ERR_CHIP((((u32)bw40dcradaren << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x00400000)) | ((u32)bw40dcradaren << 22));
}

static inline u8 riu_rwnxstaticconfig_2_bw_40_dc_prim_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline void riu_rwnxstaticconfig_2_bw_40_dc_prim_en_setf(struct cl_chip *chip, u8 bw40dcprimen)
{
	ASSERT_ERR_CHIP((((u32)bw40dcprimen << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x00200000)) | ((u32)bw40dcprimen << 21));
}

static inline u8 riu_rwnxstaticconfig_2_bw_40_dc_center_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void riu_rwnxstaticconfig_2_bw_40_dc_center_en_setf(struct cl_chip *chip, u8 bw40dccenteren)
{
	ASSERT_ERR_CHIP((((u32)bw40dccenteren << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x00100000)) | ((u32)bw40dccenteren << 20));
}

static inline u8 riu_rwnxstaticconfig_2_bw_20_dc_radar_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline void riu_rwnxstaticconfig_2_bw_20_dc_radar_en_setf(struct cl_chip *chip, u8 bw20dcradaren)
{
	ASSERT_ERR_CHIP((((u32)bw20dcradaren << 19) & ~((u32)0x00080000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x00080000)) | ((u32)bw20dcradaren << 19));
}

static inline u8 riu_rwnxstaticconfig_2_bw_20_dc_prim_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void riu_rwnxstaticconfig_2_bw_20_dc_prim_en_setf(struct cl_chip *chip, u8 bw20dcprimen)
{
	ASSERT_ERR_CHIP((((u32)bw20dcprimen << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x00040000)) | ((u32)bw20dcprimen << 18));
}

static inline u8 riu_rwnxstaticconfig_2_bw_20_dc_center_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void riu_rwnxstaticconfig_2_bw_20_dc_center_en_setf(struct cl_chip *chip, u8 bw20dccenteren)
{
	ASSERT_ERR_CHIP((((u32)bw20dccenteren << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x00020000)) | ((u32)bw20dccenteren << 17));
}

static inline u8 riu_rwnxstaticconfig_2_fe_dc_sw_ctrl_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void riu_rwnxstaticconfig_2_fe_dc_sw_ctrl_en_setf(struct cl_chip *chip, u8 fedcswctrlen)
{
	ASSERT_ERR_CHIP((((u32)fedcswctrlen << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x00010000)) | ((u32)fedcswctrlen << 16));
}

static inline u8 riu_rwnxstaticconfig_2_aci_margin_bw_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void riu_rwnxstaticconfig_2_aci_margin_bw_type_setf(struct cl_chip *chip, u8 acimarginbwtype)
{
	ASSERT_ERR_CHIP((((u32)acimarginbwtype << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x00001000)) | ((u32)acimarginbwtype << 12));
}

static inline u8 riu_rwnxstaticconfig_2_debug_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void riu_rwnxstaticconfig_2_debug_en_setf(struct cl_chip *chip, u8 debugen)
{
	ASSERT_ERR_CHIP((((u32)debugen << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x00000400)) | ((u32)debugen << 10));
}

static inline u8 riu_rwnxstaticconfig_2_adc_pow_dis_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void riu_rwnxstaticconfig_2_adc_pow_dis_mode_setf(struct cl_chip *chip, u8 adcpowdismode)
{
	ASSERT_ERR_CHIP((((u32)adcpowdismode << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x00000200)) | ((u32)adcpowdismode << 9));
}

static inline u8 riu_rwnxstaticconfig_2_fe_clk_gate_dis_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void riu_rwnxstaticconfig_2_fe_clk_gate_dis_setf(struct cl_chip *chip, u8 feclkgatedis)
{
	ASSERT_ERR_CHIP((((u32)feclkgatedis << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x00000100)) | ((u32)feclkgatedis << 8));
}

static inline u8 riu_rwnxstaticconfig_2_lna_sel_cfg_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxstaticconfig_2_lna_sel_cfg_setf(struct cl_chip *chip, u8 lnaselcfg)
{
	ASSERT_ERR_CHIP((((u32)lnaselcfg << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXSTATICCONFIG_2_ADDR, (cl_reg_read(chip, RIU_RWNXSTATICCONFIG_2_ADDR) & ~((u32)0x0000003F)) | ((u32)lnaselcfg << 0));
}

/**
 * @brief HBF_20_PCOEF_0_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF20_PCOEF0_1            0x05000000
 * </pre>
 */
#define RIU_HBF_20_PCOEF_0_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000070)
#define RIU_HBF_20_PCOEF_0_1_OFFSET      0x00000070
#define RIU_HBF_20_PCOEF_0_1_INDEX       0x0000001C
#define RIU_HBF_20_PCOEF_0_1_RESET       0x05000000

static inline u32 riu_hbf_20_pcoef_0_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_20_PCOEF_0_1_ADDR);
}

static inline void riu_hbf_20_pcoef_0_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_20_PCOEF_0_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_20_PCOEF_0_1_HBF_20_PCOEF_0_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_20_PCOEF_0_1_HBF_20_PCOEF_0_1_LSB    0
#define RIU_HBF_20_PCOEF_0_1_HBF_20_PCOEF_0_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_20_PCOEF_0_1_HBF_20_PCOEF_0_1_RST    0x05000000

static inline u32 riu_hbf_20_pcoef_0_1_hbf_20_pcoef_0_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_20_PCOEF_0_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_20_pcoef_0_1_hbf_20_pcoef_0_1_setf(struct cl_chip *chip, u32 hbf20pcoef01)
{
	ASSERT_ERR_CHIP((((u32)hbf20pcoef01 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_20_PCOEF_0_1_ADDR, (u32)hbf20pcoef01 << 0);
}

/**
 * @brief HBF_20_PCOEF_1_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF20_PCOEF1_1            0xec7ec02a
 * </pre>
 */
#define RIU_HBF_20_PCOEF_1_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000074)
#define RIU_HBF_20_PCOEF_1_1_OFFSET      0x00000074
#define RIU_HBF_20_PCOEF_1_1_INDEX       0x0000001D
#define RIU_HBF_20_PCOEF_1_1_RESET       0xEC7EC02A

static inline u32 riu_hbf_20_pcoef_1_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_20_PCOEF_1_1_ADDR);
}

static inline void riu_hbf_20_pcoef_1_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_20_PCOEF_1_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_20_PCOEF_1_1_HBF_20_PCOEF_1_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_20_PCOEF_1_1_HBF_20_PCOEF_1_1_LSB    0
#define RIU_HBF_20_PCOEF_1_1_HBF_20_PCOEF_1_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_20_PCOEF_1_1_HBF_20_PCOEF_1_1_RST    0xec7ec02a

static inline u32 riu_hbf_20_pcoef_1_1_hbf_20_pcoef_1_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_20_PCOEF_1_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_20_pcoef_1_1_hbf_20_pcoef_1_1_setf(struct cl_chip *chip, u32 hbf20pcoef11)
{
	ASSERT_ERR_CHIP((((u32)hbf20pcoef11 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_20_PCOEF_1_1_ADDR, (u32)hbf20pcoef11 << 0);
}

/**
 * @brief HBF_20_PCOEF_2_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF20_PCOEF2_1            0xf307e043
 * </pre>
 */
#define RIU_HBF_20_PCOEF_2_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000078)
#define RIU_HBF_20_PCOEF_2_1_OFFSET      0x00000078
#define RIU_HBF_20_PCOEF_2_1_INDEX       0x0000001E
#define RIU_HBF_20_PCOEF_2_1_RESET       0xF307E043

static inline u32 riu_hbf_20_pcoef_2_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_20_PCOEF_2_1_ADDR);
}

static inline void riu_hbf_20_pcoef_2_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_20_PCOEF_2_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_20_PCOEF_2_1_HBF_20_PCOEF_2_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_20_PCOEF_2_1_HBF_20_PCOEF_2_1_LSB    0
#define RIU_HBF_20_PCOEF_2_1_HBF_20_PCOEF_2_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_20_PCOEF_2_1_HBF_20_PCOEF_2_1_RST    0xf307e043

static inline u32 riu_hbf_20_pcoef_2_1_hbf_20_pcoef_2_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_20_PCOEF_2_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_20_pcoef_2_1_hbf_20_pcoef_2_1_setf(struct cl_chip *chip, u32 hbf20pcoef21)
{
	ASSERT_ERR_CHIP((((u32)hbf20pcoef21 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_20_PCOEF_2_1_ADDR, (u32)hbf20pcoef21 << 0);
}

/**
 * @brief HBF_20_PCOEF_3_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF20_PCOEF3_1            0x9a033c9f
 * </pre>
 */
#define RIU_HBF_20_PCOEF_3_1_ADDR        (REG_RIU_BASE_ADDR + 0x0000007C)
#define RIU_HBF_20_PCOEF_3_1_OFFSET      0x0000007C
#define RIU_HBF_20_PCOEF_3_1_INDEX       0x0000001F
#define RIU_HBF_20_PCOEF_3_1_RESET       0x9A033C9F

static inline u32 riu_hbf_20_pcoef_3_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_20_PCOEF_3_1_ADDR);
}

static inline void riu_hbf_20_pcoef_3_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_20_PCOEF_3_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_20_PCOEF_3_1_HBF_20_PCOEF_3_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_20_PCOEF_3_1_HBF_20_PCOEF_3_1_LSB    0
#define RIU_HBF_20_PCOEF_3_1_HBF_20_PCOEF_3_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_20_PCOEF_3_1_HBF_20_PCOEF_3_1_RST    0x9a033c9f

static inline u32 riu_hbf_20_pcoef_3_1_hbf_20_pcoef_3_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_20_PCOEF_3_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_20_pcoef_3_1_hbf_20_pcoef_3_1_setf(struct cl_chip *chip, u32 hbf20pcoef31)
{
	ASSERT_ERR_CHIP((((u32)hbf20pcoef31 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_20_PCOEF_3_1_ADDR, (u32)hbf20pcoef31 << 0);
}

/**
 * @brief RWNXMACSTATICCONFIG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    02:00 PSSELECT                  0x0
 * </pre>
 */
#define RIU_RWNXMACSTATICCONFIG_ADDR        (REG_RIU_BASE_ADDR + 0x00000080)
#define RIU_RWNXMACSTATICCONFIG_OFFSET      0x00000080
#define RIU_RWNXMACSTATICCONFIG_INDEX       0x00000020
#define RIU_RWNXMACSTATICCONFIG_RESET       0x00000000

static inline u32 riu_rwnxmacstaticconfig_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXMACSTATICCONFIG_ADDR);
}

static inline void riu_rwnxmacstaticconfig_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXMACSTATICCONFIG_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXMACSTATICCONFIG_PSSELECT_MASK    ((u32)0x00000007)
#define RIU_RWNXMACSTATICCONFIG_PSSELECT_LSB    0
#define RIU_RWNXMACSTATICCONFIG_PSSELECT_WIDTH    ((u32)0x00000003)

#define RIU_RWNXMACSTATICCONFIG_PSSELECT_RST    0x0

static inline u8 riu_rwnxmacstaticconfig_psselect_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACSTATICCONFIG_ADDR);

	return (u8)(local_val >> 0);
}

static inline void riu_rwnxmacstaticconfig_psselect_setf(struct cl_chip *chip, u8 psselect)
{
	ASSERT_ERR_CHIP((((u32)psselect << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RIU_RWNXMACSTATICCONFIG_ADDR, (u32)psselect << 0);
}

/**
 * @brief HBF_20_PCOEF_4_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    14:00 HBF20_PCOEF4_1            0x2002
 * </pre>
 */
#define RIU_HBF_20_PCOEF_4_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000084)
#define RIU_HBF_20_PCOEF_4_1_OFFSET      0x00000084
#define RIU_HBF_20_PCOEF_4_1_INDEX       0x00000021
#define RIU_HBF_20_PCOEF_4_1_RESET       0x00002002

static inline u32 riu_hbf_20_pcoef_4_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_20_PCOEF_4_1_ADDR);
}

static inline void riu_hbf_20_pcoef_4_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_20_PCOEF_4_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_20_PCOEF_4_1_HBF_20_PCOEF_4_1_MASK    ((u32)0x00007FFF)
#define RIU_HBF_20_PCOEF_4_1_HBF_20_PCOEF_4_1_LSB    0
#define RIU_HBF_20_PCOEF_4_1_HBF_20_PCOEF_4_1_WIDTH    ((u32)0x0000000F)

#define RIU_HBF_20_PCOEF_4_1_HBF_20_PCOEF_4_1_RST    0x2002

static inline u16 riu_hbf_20_pcoef_4_1_hbf_20_pcoef_4_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_20_PCOEF_4_1_ADDR);

	return (u16)(local_val >> 0);
}

static inline void riu_hbf_20_pcoef_4_1_hbf_20_pcoef_4_1_setf(struct cl_chip *chip, u16 hbf20pcoef41)
{
	ASSERT_ERR_CHIP((((u32)hbf20pcoef41 << 0) & ~((u32)0x00007FFF)) == 0);
	cl_reg_write(chip, RIU_HBF_20_PCOEF_4_1_ADDR, (u32)hbf20pcoef41 << 0);
}

/**
 * @brief HBF_40_PCOEF_0_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF40_PCOEF0_1            0x1b02b010
 * </pre>
 */
#define RIU_HBF_40_PCOEF_0_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000088)
#define RIU_HBF_40_PCOEF_0_1_OFFSET      0x00000088
#define RIU_HBF_40_PCOEF_0_1_INDEX       0x00000022
#define RIU_HBF_40_PCOEF_0_1_RESET       0x1B02B010

static inline u32 riu_hbf_40_pcoef_0_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_40_PCOEF_0_1_ADDR);
}

static inline void riu_hbf_40_pcoef_0_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_40_PCOEF_0_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_40_PCOEF_0_1_HBF_40_PCOEF_0_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_40_PCOEF_0_1_HBF_40_PCOEF_0_1_LSB    0
#define RIU_HBF_40_PCOEF_0_1_HBF_40_PCOEF_0_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_40_PCOEF_0_1_HBF_40_PCOEF_0_1_RST    0x1b02b010

static inline u32 riu_hbf_40_pcoef_0_1_hbf_40_pcoef_0_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_40_PCOEF_0_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_40_pcoef_0_1_hbf_40_pcoef_0_1_setf(struct cl_chip *chip, u32 hbf40pcoef01)
{
	ASSERT_ERR_CHIP((((u32)hbf40pcoef01 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_40_PCOEF_0_1_ADDR, (u32)hbf40pcoef01 << 0);
}

/**
 * @brief HBF_40_PCOEF_1_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF40_PCOEF1_1            0xbfd3fdf0
 * </pre>
 */
#define RIU_HBF_40_PCOEF_1_1_ADDR        (REG_RIU_BASE_ADDR + 0x0000008C)
#define RIU_HBF_40_PCOEF_1_1_OFFSET      0x0000008C
#define RIU_HBF_40_PCOEF_1_1_INDEX       0x00000023
#define RIU_HBF_40_PCOEF_1_1_RESET       0xBFD3FDF0

static inline u32 riu_hbf_40_pcoef_1_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_40_PCOEF_1_1_ADDR);
}

static inline void riu_hbf_40_pcoef_1_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_40_PCOEF_1_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_40_PCOEF_1_1_HBF_40_PCOEF_1_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_40_PCOEF_1_1_HBF_40_PCOEF_1_1_LSB    0
#define RIU_HBF_40_PCOEF_1_1_HBF_40_PCOEF_1_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_40_PCOEF_1_1_HBF_40_PCOEF_1_1_RST    0xbfd3fdf0

static inline u32 riu_hbf_40_pcoef_1_1_hbf_40_pcoef_1_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_40_PCOEF_1_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_40_pcoef_1_1_hbf_40_pcoef_1_1_setf(struct cl_chip *chip, u32 hbf40pcoef11)
{
	ASSERT_ERR_CHIP((((u32)hbf40pcoef11 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_40_PCOEF_1_1_ADDR, (u32)hbf40pcoef11 << 0);
}

/**
 * @brief HBF_40_PCOEF_2_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF40_PCOEF2_1            0xfe803f01
 * </pre>
 */
#define RIU_HBF_40_PCOEF_2_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000090)
#define RIU_HBF_40_PCOEF_2_1_OFFSET      0x00000090
#define RIU_HBF_40_PCOEF_2_1_INDEX       0x00000024
#define RIU_HBF_40_PCOEF_2_1_RESET       0xFE803F01

static inline u32 riu_hbf_40_pcoef_2_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_40_PCOEF_2_1_ADDR);
}

static inline void riu_hbf_40_pcoef_2_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_40_PCOEF_2_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_40_PCOEF_2_1_HBF_40_PCOEF_2_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_40_PCOEF_2_1_HBF_40_PCOEF_2_1_LSB    0
#define RIU_HBF_40_PCOEF_2_1_HBF_40_PCOEF_2_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_40_PCOEF_2_1_HBF_40_PCOEF_2_1_RST    0xfe803f01

static inline u32 riu_hbf_40_pcoef_2_1_hbf_40_pcoef_2_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_40_PCOEF_2_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_40_pcoef_2_1_hbf_40_pcoef_2_1_setf(struct cl_chip *chip, u32 hbf40pcoef21)
{
	ASSERT_ERR_CHIP((((u32)hbf40pcoef21 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_40_PCOEF_2_1_ADDR, (u32)hbf40pcoef21 << 0);
}

/**
 * @brief HBF_40_PCOEF_3_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF40_PCOEF3_1            0x7f016fa9
 * </pre>
 */
#define RIU_HBF_40_PCOEF_3_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000094)
#define RIU_HBF_40_PCOEF_3_1_OFFSET      0x00000094
#define RIU_HBF_40_PCOEF_3_1_INDEX       0x00000025
#define RIU_HBF_40_PCOEF_3_1_RESET       0x7F016FA9

static inline u32 riu_hbf_40_pcoef_3_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_40_PCOEF_3_1_ADDR);
}

static inline void riu_hbf_40_pcoef_3_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_40_PCOEF_3_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_40_PCOEF_3_1_HBF_40_PCOEF_3_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_40_PCOEF_3_1_HBF_40_PCOEF_3_1_LSB    0
#define RIU_HBF_40_PCOEF_3_1_HBF_40_PCOEF_3_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_40_PCOEF_3_1_HBF_40_PCOEF_3_1_RST    0x7f016fa9

static inline u32 riu_hbf_40_pcoef_3_1_hbf_40_pcoef_3_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_40_PCOEF_3_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_40_pcoef_3_1_hbf_40_pcoef_3_1_setf(struct cl_chip *chip, u32 hbf40pcoef31)
{
	ASSERT_ERR_CHIP((((u32)hbf40pcoef31 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_40_PCOEF_3_1_ADDR, (u32)hbf40pcoef31 << 0);
}

/**
 * @brief HBF_40_PCOEF_4_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF40_PCOEF4_1            0x4f26feb0
 * </pre>
 */
#define RIU_HBF_40_PCOEF_4_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000098)
#define RIU_HBF_40_PCOEF_4_1_OFFSET      0x00000098
#define RIU_HBF_40_PCOEF_4_1_INDEX       0x00000026
#define RIU_HBF_40_PCOEF_4_1_RESET       0x4F26FEB0

static inline u32 riu_hbf_40_pcoef_4_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_40_PCOEF_4_1_ADDR);
}

static inline void riu_hbf_40_pcoef_4_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_40_PCOEF_4_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_40_PCOEF_4_1_HBF_40_PCOEF_4_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_40_PCOEF_4_1_HBF_40_PCOEF_4_1_LSB    0
#define RIU_HBF_40_PCOEF_4_1_HBF_40_PCOEF_4_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_40_PCOEF_4_1_HBF_40_PCOEF_4_1_RST    0x4f26feb0

static inline u32 riu_hbf_40_pcoef_4_1_hbf_40_pcoef_4_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_40_PCOEF_4_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_40_pcoef_4_1_hbf_40_pcoef_4_1_setf(struct cl_chip *chip, u32 hbf40pcoef41)
{
	ASSERT_ERR_CHIP((((u32)hbf40pcoef41 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_40_PCOEF_4_1_ADDR, (u32)hbf40pcoef41 << 0);
}

/**
 * @brief HBF_40_PCOEF_5_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF40_PCOEF5_1            0x40029701
 * </pre>
 */
#define RIU_HBF_40_PCOEF_5_1_ADDR        (REG_RIU_BASE_ADDR + 0x0000009C)
#define RIU_HBF_40_PCOEF_5_1_OFFSET      0x0000009C
#define RIU_HBF_40_PCOEF_5_1_INDEX       0x00000027
#define RIU_HBF_40_PCOEF_5_1_RESET       0x40029701

static inline u32 riu_hbf_40_pcoef_5_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_40_PCOEF_5_1_ADDR);
}

static inline void riu_hbf_40_pcoef_5_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_40_PCOEF_5_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_40_PCOEF_5_1_HBF_40_PCOEF_5_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_40_PCOEF_5_1_HBF_40_PCOEF_5_1_LSB    0
#define RIU_HBF_40_PCOEF_5_1_HBF_40_PCOEF_5_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_40_PCOEF_5_1_HBF_40_PCOEF_5_1_RST    0x40029701

static inline u32 riu_hbf_40_pcoef_5_1_hbf_40_pcoef_5_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_40_PCOEF_5_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_40_pcoef_5_1_hbf_40_pcoef_5_1_setf(struct cl_chip *chip, u32 hbf40pcoef51)
{
	ASSERT_ERR_CHIP((((u32)hbf40pcoef51 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_40_PCOEF_5_1_ADDR, (u32)hbf40pcoef51 << 0);
}

/**
 * @brief HBF_80_PCOEF_0_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF80_PCOEF0_1            0xfe3f97fb
 * </pre>
 */
#define RIU_HBF_80_PCOEF_0_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000A0)
#define RIU_HBF_80_PCOEF_0_1_OFFSET      0x000000A0
#define RIU_HBF_80_PCOEF_0_1_INDEX       0x00000028
#define RIU_HBF_80_PCOEF_0_1_RESET       0xFE3F97FB

static inline u32 riu_hbf_80_pcoef_0_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_0_1_ADDR);
}

static inline void riu_hbf_80_pcoef_0_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_0_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_0_1_HBF_80_PCOEF_0_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_80_PCOEF_0_1_HBF_80_PCOEF_0_1_LSB    0
#define RIU_HBF_80_PCOEF_0_1_HBF_80_PCOEF_0_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_80_PCOEF_0_1_HBF_80_PCOEF_0_1_RST    0xfe3f97fb

static inline u32 riu_hbf_80_pcoef_0_1_hbf_80_pcoef_0_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_0_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_0_1_hbf_80_pcoef_0_1_setf(struct cl_chip *chip, u32 hbf80pcoef01)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef01 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_0_1_ADDR, (u32)hbf80pcoef01 << 0);
}

/**
 * @brief HBF_80_PCOEF_1_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF80_PCOEF1_1            0xfb80c017
 * </pre>
 */
#define RIU_HBF_80_PCOEF_1_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000A4)
#define RIU_HBF_80_PCOEF_1_1_OFFSET      0x000000A4
#define RIU_HBF_80_PCOEF_1_1_INDEX       0x00000029
#define RIU_HBF_80_PCOEF_1_1_RESET       0xFB80C017

static inline u32 riu_hbf_80_pcoef_1_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_1_1_ADDR);
}

static inline void riu_hbf_80_pcoef_1_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_1_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_1_1_HBF_80_PCOEF_1_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_80_PCOEF_1_1_HBF_80_PCOEF_1_1_LSB    0
#define RIU_HBF_80_PCOEF_1_1_HBF_80_PCOEF_1_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_80_PCOEF_1_1_HBF_80_PCOEF_1_1_RST    0xfb80c017

static inline u32 riu_hbf_80_pcoef_1_1_hbf_80_pcoef_1_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_1_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_1_1_hbf_80_pcoef_1_1_setf(struct cl_chip *chip, u32 hbf80pcoef11)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef11 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_1_1_ADDR, (u32)hbf80pcoef11 << 0);
}

/**
 * @brief HBF_80_PCOEF_2_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF80_PCOEF2_1            0x1200ffc7
 * </pre>
 */
#define RIU_HBF_80_PCOEF_2_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000A8)
#define RIU_HBF_80_PCOEF_2_1_OFFSET      0x000000A8
#define RIU_HBF_80_PCOEF_2_1_INDEX       0x0000002A
#define RIU_HBF_80_PCOEF_2_1_RESET       0x1200FFC7

static inline u32 riu_hbf_80_pcoef_2_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_2_1_ADDR);
}

static inline void riu_hbf_80_pcoef_2_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_2_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_2_1_HBF_80_PCOEF_2_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_80_PCOEF_2_1_HBF_80_PCOEF_2_1_LSB    0
#define RIU_HBF_80_PCOEF_2_1_HBF_80_PCOEF_2_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_80_PCOEF_2_1_HBF_80_PCOEF_2_1_RST    0x1200ffc7

static inline u32 riu_hbf_80_pcoef_2_1_hbf_80_pcoef_2_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_2_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_2_1_hbf_80_pcoef_2_1_setf(struct cl_chip *chip, u32 hbf80pcoef21)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef21 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_2_1_ADDR, (u32)hbf80pcoef21 << 0);
}

/**
 * @brief HBF_80_PCOEF_3_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF80_PCOEF3_1            0x0dfaffd0
 * </pre>
 */
#define RIU_HBF_80_PCOEF_3_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000AC)
#define RIU_HBF_80_PCOEF_3_1_OFFSET      0x000000AC
#define RIU_HBF_80_PCOEF_3_1_INDEX       0x0000002B
#define RIU_HBF_80_PCOEF_3_1_RESET       0x0DFAFFD0

static inline u32 riu_hbf_80_pcoef_3_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_3_1_ADDR);
}

static inline void riu_hbf_80_pcoef_3_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_3_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_3_1_HBF_80_PCOEF_3_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_80_PCOEF_3_1_HBF_80_PCOEF_3_1_LSB    0
#define RIU_HBF_80_PCOEF_3_1_HBF_80_PCOEF_3_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_80_PCOEF_3_1_HBF_80_PCOEF_3_1_RST    0x0dfaffd0

static inline u32 riu_hbf_80_pcoef_3_1_hbf_80_pcoef_3_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_3_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_3_1_hbf_80_pcoef_3_1_setf(struct cl_chip *chip, u32 hbf80pcoef31)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef31 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_3_1_ADDR, (u32)hbf80pcoef31 << 0);
}

/**
 * @brief HBF_80_PCOEF_4_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF80_PCOEF4_1            0x8ffd8180
 * </pre>
 */
#define RIU_HBF_80_PCOEF_4_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000B0)
#define RIU_HBF_80_PCOEF_4_1_OFFSET      0x000000B0
#define RIU_HBF_80_PCOEF_4_1_INDEX       0x0000002C
#define RIU_HBF_80_PCOEF_4_1_RESET       0x8FFD8180

static inline u32 riu_hbf_80_pcoef_4_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_4_1_ADDR);
}

static inline void riu_hbf_80_pcoef_4_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_4_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_4_1_HBF_80_PCOEF_4_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_80_PCOEF_4_1_HBF_80_PCOEF_4_1_LSB    0
#define RIU_HBF_80_PCOEF_4_1_HBF_80_PCOEF_4_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_80_PCOEF_4_1_HBF_80_PCOEF_4_1_RST    0x8ffd8180

static inline u32 riu_hbf_80_pcoef_4_1_hbf_80_pcoef_4_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_4_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_4_1_hbf_80_pcoef_4_1_setf(struct cl_chip *chip, u32 hbf80pcoef41)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef41 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_4_1_ADDR, (u32)hbf80pcoef41 << 0);
}

/**
 * @brief HBF_80_PCOEF_5_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF80_PCOEF5_1            0xe02400bf
 * </pre>
 */
#define RIU_HBF_80_PCOEF_5_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000B4)
#define RIU_HBF_80_PCOEF_5_1_OFFSET      0x000000B4
#define RIU_HBF_80_PCOEF_5_1_INDEX       0x0000002D
#define RIU_HBF_80_PCOEF_5_1_RESET       0xE02400BF

static inline u32 riu_hbf_80_pcoef_5_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_5_1_ADDR);
}

static inline void riu_hbf_80_pcoef_5_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_5_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_5_1_HBF_80_PCOEF_5_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_80_PCOEF_5_1_HBF_80_PCOEF_5_1_LSB    0
#define RIU_HBF_80_PCOEF_5_1_HBF_80_PCOEF_5_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_80_PCOEF_5_1_HBF_80_PCOEF_5_1_RST    0xe02400bf

static inline u32 riu_hbf_80_pcoef_5_1_hbf_80_pcoef_5_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_5_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_5_1_hbf_80_pcoef_5_1_setf(struct cl_chip *chip, u32 hbf80pcoef51)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef51 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_5_1_ADDR, (u32)hbf80pcoef51 << 0);
}

/**
 * @brief HBF_80_PCOEF_6_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF80_PCOEF6_1            0x1009f4bf
 * </pre>
 */
#define RIU_HBF_80_PCOEF_6_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000B8)
#define RIU_HBF_80_PCOEF_6_1_OFFSET      0x000000B8
#define RIU_HBF_80_PCOEF_6_1_INDEX       0x0000002E
#define RIU_HBF_80_PCOEF_6_1_RESET       0x1009F4BF

static inline u32 riu_hbf_80_pcoef_6_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_6_1_ADDR);
}

static inline void riu_hbf_80_pcoef_6_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_6_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_6_1_HBF_80_PCOEF_6_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_80_PCOEF_6_1_HBF_80_PCOEF_6_1_LSB    0
#define RIU_HBF_80_PCOEF_6_1_HBF_80_PCOEF_6_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_80_PCOEF_6_1_HBF_80_PCOEF_6_1_RST    0x1009f4bf

static inline u32 riu_hbf_80_pcoef_6_1_hbf_80_pcoef_6_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_6_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_6_1_hbf_80_pcoef_6_1_setf(struct cl_chip *chip, u32 hbf80pcoef61)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef61 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_6_1_ADDR, (u32)hbf80pcoef61 << 0);
}

/**
 * @brief HBF_80_PCOEF_7_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF80_PCOEF7_1            0x9e4ffe04
 * </pre>
 */
#define RIU_HBF_80_PCOEF_7_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000BC)
#define RIU_HBF_80_PCOEF_7_1_OFFSET      0x000000BC
#define RIU_HBF_80_PCOEF_7_1_INDEX       0x0000002F
#define RIU_HBF_80_PCOEF_7_1_RESET       0x9E4FFE04

static inline u32 riu_hbf_80_pcoef_7_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_7_1_ADDR);
}

static inline void riu_hbf_80_pcoef_7_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_7_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_7_1_HBF_80_PCOEF_7_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_80_PCOEF_7_1_HBF_80_PCOEF_7_1_LSB    0
#define RIU_HBF_80_PCOEF_7_1_HBF_80_PCOEF_7_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_80_PCOEF_7_1_HBF_80_PCOEF_7_1_RST    0x9e4ffe04

static inline u32 riu_hbf_80_pcoef_7_1_hbf_80_pcoef_7_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_7_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_7_1_hbf_80_pcoef_7_1_setf(struct cl_chip *chip, u32 hbf80pcoef71)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef71 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_7_1_ADDR, (u32)hbf80pcoef71 << 0);
}

/**
 * @brief HBF_80_PCOEF_8_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:00 HBF80_PCOEF8_1            0x10014800
 * </pre>
 */
#define RIU_HBF_80_PCOEF_8_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000C0)
#define RIU_HBF_80_PCOEF_8_1_OFFSET      0x000000C0
#define RIU_HBF_80_PCOEF_8_1_INDEX       0x00000030
#define RIU_HBF_80_PCOEF_8_1_RESET       0x10014800

static inline u32 riu_hbf_80_pcoef_8_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_8_1_ADDR);
}

static inline void riu_hbf_80_pcoef_8_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_8_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_8_1_HBF_80_PCOEF_8_1_MASK    ((u32)0x3FFFFFFF)
#define RIU_HBF_80_PCOEF_8_1_HBF_80_PCOEF_8_1_LSB    0
#define RIU_HBF_80_PCOEF_8_1_HBF_80_PCOEF_8_1_WIDTH    ((u32)0x0000001E)

#define RIU_HBF_80_PCOEF_8_1_HBF_80_PCOEF_8_1_RST    0x10014800

static inline u32 riu_hbf_80_pcoef_8_1_hbf_80_pcoef_8_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_8_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_8_1_hbf_80_pcoef_8_1_setf(struct cl_chip *chip, u32 hbf80pcoef81)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef81 << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_8_1_ADDR, (u32)hbf80pcoef81 << 0);
}

/**
 * @brief HBF_160_PCOEF_0_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF0_1           0xfa3eeff2
 * </pre>
 */
#define RIU_HBF_160_PCOEF_0_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000C4)
#define RIU_HBF_160_PCOEF_0_1_OFFSET      0x000000C4
#define RIU_HBF_160_PCOEF_0_1_INDEX       0x00000031
#define RIU_HBF_160_PCOEF_0_1_RESET       0xFA3EEFF2

static inline u32 riu_hbf_160_pcoef_0_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_0_1_ADDR);
}

static inline void riu_hbf_160_pcoef_0_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_0_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_0_1_HBF_160_PCOEF_0_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_0_1_HBF_160_PCOEF_0_1_LSB    0
#define RIU_HBF_160_PCOEF_0_1_HBF_160_PCOEF_0_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_0_1_HBF_160_PCOEF_0_1_RST    0xfa3eeff2

static inline u32 riu_hbf_160_pcoef_0_1_hbf_160_pcoef_0_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_0_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_0_1_hbf_160_pcoef_0_1_setf(struct cl_chip *chip, u32 hbf160pcoef01)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef01 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_0_1_ADDR, (u32)hbf160pcoef01 << 0);
}

/**
 * @brief HBF_160_PCOEF_1_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF1_1           0xfd811015
 * </pre>
 */
#define RIU_HBF_160_PCOEF_1_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000C8)
#define RIU_HBF_160_PCOEF_1_1_OFFSET      0x000000C8
#define RIU_HBF_160_PCOEF_1_1_INDEX       0x00000032
#define RIU_HBF_160_PCOEF_1_1_RESET       0xFD811015

static inline u32 riu_hbf_160_pcoef_1_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_1_1_ADDR);
}

static inline void riu_hbf_160_pcoef_1_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_1_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_1_1_HBF_160_PCOEF_1_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_1_1_HBF_160_PCOEF_1_1_LSB    0
#define RIU_HBF_160_PCOEF_1_1_HBF_160_PCOEF_1_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_1_1_HBF_160_PCOEF_1_1_RST    0xfd811015

static inline u32 riu_hbf_160_pcoef_1_1_hbf_160_pcoef_1_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_1_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_1_1_hbf_160_pcoef_1_1_setf(struct cl_chip *chip, u32 hbf160pcoef11)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef11 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_1_1_ADDR, (u32)hbf160pcoef11 << 0);
}

/**
 * @brief HBF_160_PCOEF_2_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF2_1           0x09009fdb
 * </pre>
 */
#define RIU_HBF_160_PCOEF_2_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000CC)
#define RIU_HBF_160_PCOEF_2_1_OFFSET      0x000000CC
#define RIU_HBF_160_PCOEF_2_1_INDEX       0x00000033
#define RIU_HBF_160_PCOEF_2_1_RESET       0x09009FDB

static inline u32 riu_hbf_160_pcoef_2_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_2_1_ADDR);
}

static inline void riu_hbf_160_pcoef_2_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_2_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_2_1_HBF_160_PCOEF_2_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_2_1_HBF_160_PCOEF_2_1_LSB    0
#define RIU_HBF_160_PCOEF_2_1_HBF_160_PCOEF_2_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_2_1_HBF_160_PCOEF_2_1_RST    0x09009fdb

static inline u32 riu_hbf_160_pcoef_2_1_hbf_160_pcoef_2_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_2_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_2_1_hbf_160_pcoef_2_1_setf(struct cl_chip *chip, u32 hbf160pcoef21)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef21 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_2_1_ADDR, (u32)hbf160pcoef21 << 0);
}

/**
 * @brief HBF_160_PCOEF_3_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF3_1           0x05fe3ff0
 * </pre>
 */
#define RIU_HBF_160_PCOEF_3_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000D0)
#define RIU_HBF_160_PCOEF_3_1_OFFSET      0x000000D0
#define RIU_HBF_160_PCOEF_3_1_INDEX       0x00000034
#define RIU_HBF_160_PCOEF_3_1_RESET       0x05FE3FF0

static inline u32 riu_hbf_160_pcoef_3_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_3_1_ADDR);
}

static inline void riu_hbf_160_pcoef_3_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_3_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_3_1_HBF_160_PCOEF_3_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_3_1_HBF_160_PCOEF_3_1_LSB    0
#define RIU_HBF_160_PCOEF_3_1_HBF_160_PCOEF_3_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_3_1_HBF_160_PCOEF_3_1_RST    0x05fe3ff0

static inline u32 riu_hbf_160_pcoef_3_1_hbf_160_pcoef_3_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_3_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_3_1_hbf_160_pcoef_3_1_setf(struct cl_chip *chip, u32 hbf160pcoef31)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef31 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_3_1_ADDR, (u32)hbf160pcoef31 << 0);
}

/**
 * @brief HBF_160_PCOEF_4_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF4_1           0xdffe8090
 * </pre>
 */
#define RIU_HBF_160_PCOEF_4_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000D4)
#define RIU_HBF_160_PCOEF_4_1_OFFSET      0x000000D4
#define RIU_HBF_160_PCOEF_4_1_INDEX       0x00000035
#define RIU_HBF_160_PCOEF_4_1_RESET       0xDFFE8090

static inline u32 riu_hbf_160_pcoef_4_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_4_1_ADDR);
}

static inline void riu_hbf_160_pcoef_4_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_4_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_4_1_HBF_160_PCOEF_4_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_4_1_HBF_160_PCOEF_4_1_LSB    0
#define RIU_HBF_160_PCOEF_4_1_HBF_160_PCOEF_4_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_4_1_HBF_160_PCOEF_4_1_RST    0xdffe8090

static inline u32 riu_hbf_160_pcoef_4_1_hbf_160_pcoef_4_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_4_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_4_1_hbf_160_pcoef_4_1_setf(struct cl_chip *chip, u32 hbf160pcoef41)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef41 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_4_1_ADDR, (u32)hbf160pcoef41 << 0);
}

/**
 * @brief HBF_160_PCOEF_5_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF5_1           0xe80a007f
 * </pre>
 */
#define RIU_HBF_160_PCOEF_5_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000D8)
#define RIU_HBF_160_PCOEF_5_1_OFFSET      0x000000D8
#define RIU_HBF_160_PCOEF_5_1_INDEX       0x00000036
#define RIU_HBF_160_PCOEF_5_1_RESET       0xE80A007F

static inline u32 riu_hbf_160_pcoef_5_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_5_1_ADDR);
}

static inline void riu_hbf_160_pcoef_5_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_5_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_5_1_HBF_160_PCOEF_5_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_5_1_HBF_160_PCOEF_5_1_LSB    0
#define RIU_HBF_160_PCOEF_5_1_HBF_160_PCOEF_5_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_5_1_HBF_160_PCOEF_5_1_RST    0xe80a007f

static inline u32 riu_hbf_160_pcoef_5_1_hbf_160_pcoef_5_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_5_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_5_1_hbf_160_pcoef_5_1_setf(struct cl_chip *chip, u32 hbf160pcoef51)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef51 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_5_1_ADDR, (u32)hbf160pcoef51 << 0);
}

/**
 * @brief HBF_160_PCOEF_6_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF6_1           0xc007fd7f
 * </pre>
 */
#define RIU_HBF_160_PCOEF_6_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000DC)
#define RIU_HBF_160_PCOEF_6_1_OFFSET      0x000000DC
#define RIU_HBF_160_PCOEF_6_1_INDEX       0x00000037
#define RIU_HBF_160_PCOEF_6_1_RESET       0xC007FD7F

static inline u32 riu_hbf_160_pcoef_6_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_6_1_ADDR);
}

static inline void riu_hbf_160_pcoef_6_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_6_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_6_1_HBF_160_PCOEF_6_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_6_1_HBF_160_PCOEF_6_1_LSB    0
#define RIU_HBF_160_PCOEF_6_1_HBF_160_PCOEF_6_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_6_1_HBF_160_PCOEF_6_1_RST    0xc007fd7f

static inline u32 riu_hbf_160_pcoef_6_1_hbf_160_pcoef_6_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_6_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_6_1_hbf_160_pcoef_6_1_setf(struct cl_chip *chip, u32 hbf160pcoef61)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef61 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_6_1_ADDR, (u32)hbf160pcoef61 << 0);
}

/**
 * @brief HBF_160_PCOEF_7_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF7_1           0x9fcffe80
 * </pre>
 */
#define RIU_HBF_160_PCOEF_7_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000E0)
#define RIU_HBF_160_PCOEF_7_1_OFFSET      0x000000E0
#define RIU_HBF_160_PCOEF_7_1_INDEX       0x00000038
#define RIU_HBF_160_PCOEF_7_1_RESET       0x9FCFFE80

static inline u32 riu_hbf_160_pcoef_7_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_7_1_ADDR);
}

static inline void riu_hbf_160_pcoef_7_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_7_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_7_1_HBF_160_PCOEF_7_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_7_1_HBF_160_PCOEF_7_1_LSB    0
#define RIU_HBF_160_PCOEF_7_1_HBF_160_PCOEF_7_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_7_1_HBF_160_PCOEF_7_1_RST    0x9fcffe80

static inline u32 riu_hbf_160_pcoef_7_1_hbf_160_pcoef_7_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_7_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_7_1_hbf_160_pcoef_7_1_setf(struct cl_chip *chip, u32 hbf160pcoef71)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef71 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_7_1_ADDR, (u32)hbf160pcoef71 << 0);
}

/**
 * @brief HBF_160_PCOEF_8_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF8_1           0x3fe80e00
 * </pre>
 */
#define RIU_HBF_160_PCOEF_8_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000E4)
#define RIU_HBF_160_PCOEF_8_1_OFFSET      0x000000E4
#define RIU_HBF_160_PCOEF_8_1_INDEX       0x00000039
#define RIU_HBF_160_PCOEF_8_1_RESET       0x3FE80E00

static inline u32 riu_hbf_160_pcoef_8_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_8_1_ADDR);
}

static inline void riu_hbf_160_pcoef_8_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_8_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_8_1_HBF_160_PCOEF_8_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_8_1_HBF_160_PCOEF_8_1_LSB    0
#define RIU_HBF_160_PCOEF_8_1_HBF_160_PCOEF_8_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_8_1_HBF_160_PCOEF_8_1_RST    0x3fe80e00

static inline u32 riu_hbf_160_pcoef_8_1_hbf_160_pcoef_8_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_8_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_8_1_hbf_160_pcoef_8_1_setf(struct cl_chip *chip, u32 hbf160pcoef81)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef81 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_8_1_ADDR, (u32)hbf160pcoef81 << 0);
}

/**
 * @brief HBF_160_PCOEF_9_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF9_1           0x812007fc
 * </pre>
 */
#define RIU_HBF_160_PCOEF_9_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000E8)
#define RIU_HBF_160_PCOEF_9_1_OFFSET      0x000000E8
#define RIU_HBF_160_PCOEF_9_1_INDEX       0x0000003A
#define RIU_HBF_160_PCOEF_9_1_RESET       0x812007FC

static inline u32 riu_hbf_160_pcoef_9_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_9_1_ADDR);
}

static inline void riu_hbf_160_pcoef_9_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_9_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_9_1_HBF_160_PCOEF_9_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_9_1_HBF_160_PCOEF_9_1_LSB    0
#define RIU_HBF_160_PCOEF_9_1_HBF_160_PCOEF_9_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_9_1_HBF_160_PCOEF_9_1_RST    0x812007fc

static inline u32 riu_hbf_160_pcoef_9_1_hbf_160_pcoef_9_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_9_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_9_1_hbf_160_pcoef_9_1_setf(struct cl_chip *chip, u32 hbf160pcoef91)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef91 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_9_1_ADDR, (u32)hbf160pcoef91 << 0);
}

/**
 * @brief HBF_160_PCOEF_10_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF10_1          0x009fb3fe
 * </pre>
 */
#define RIU_HBF_160_PCOEF_10_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000EC)
#define RIU_HBF_160_PCOEF_10_1_OFFSET      0x000000EC
#define RIU_HBF_160_PCOEF_10_1_INDEX       0x0000003B
#define RIU_HBF_160_PCOEF_10_1_RESET       0x009FB3FE

static inline u32 riu_hbf_160_pcoef_10_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_10_1_ADDR);
}

static inline void riu_hbf_160_pcoef_10_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_10_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_10_1_HBF_160_PCOEF_10_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_10_1_HBF_160_PCOEF_10_1_LSB    0
#define RIU_HBF_160_PCOEF_10_1_HBF_160_PCOEF_10_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_10_1_HBF_160_PCOEF_10_1_RST    0x009fb3fe

static inline u32 riu_hbf_160_pcoef_10_1_hbf_160_pcoef_10_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_10_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_10_1_hbf_160_pcoef_10_1_setf(struct cl_chip *chip, u32 hbf160pcoef101)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef101 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_10_1_ADDR, (u32)hbf160pcoef101 << 0);
}

/**
 * @brief HBF_160_PCOEF_11_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF11_1          0xf93fe818
 * </pre>
 */
#define RIU_HBF_160_PCOEF_11_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000F0)
#define RIU_HBF_160_PCOEF_11_1_OFFSET      0x000000F0
#define RIU_HBF_160_PCOEF_11_1_INDEX       0x0000003C
#define RIU_HBF_160_PCOEF_11_1_RESET       0xF93FE818

static inline u32 riu_hbf_160_pcoef_11_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_11_1_ADDR);
}

static inline void riu_hbf_160_pcoef_11_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_11_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_11_1_HBF_160_PCOEF_11_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_11_1_HBF_160_PCOEF_11_1_LSB    0
#define RIU_HBF_160_PCOEF_11_1_HBF_160_PCOEF_11_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_11_1_HBF_160_PCOEF_11_1_RST    0xf93fe818

static inline u32 riu_hbf_160_pcoef_11_1_hbf_160_pcoef_11_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_11_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_11_1_hbf_160_pcoef_11_1_setf(struct cl_chip *chip, u32 hbf160pcoef111)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef111 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_11_1_ADDR, (u32)hbf160pcoef111 << 0);
}

/**
 * @brief HBF_160_PCOEF_12_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF12_1          0xfe023009
 * </pre>
 */
#define RIU_HBF_160_PCOEF_12_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000F4)
#define RIU_HBF_160_PCOEF_12_1_OFFSET      0x000000F4
#define RIU_HBF_160_PCOEF_12_1_INDEX       0x0000003D
#define RIU_HBF_160_PCOEF_12_1_RESET       0xFE023009

static inline u32 riu_hbf_160_pcoef_12_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_12_1_ADDR);
}

static inline void riu_hbf_160_pcoef_12_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_12_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_12_1_HBF_160_PCOEF_12_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_12_1_HBF_160_PCOEF_12_1_LSB    0
#define RIU_HBF_160_PCOEF_12_1_HBF_160_PCOEF_12_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_12_1_HBF_160_PCOEF_12_1_RST    0xfe023009

static inline u32 riu_hbf_160_pcoef_12_1_hbf_160_pcoef_12_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_12_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_12_1_hbf_160_pcoef_12_1_setf(struct cl_chip *chip, u32 hbf160pcoef121)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef121 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_12_1_ADDR, (u32)hbf160pcoef121 << 0);
}

/**
 * @brief HBF_160_PCOEF_13_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF13_1          0x40009f4f
 * </pre>
 */
#define RIU_HBF_160_PCOEF_13_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000F8)
#define RIU_HBF_160_PCOEF_13_1_OFFSET      0x000000F8
#define RIU_HBF_160_PCOEF_13_1_INDEX       0x0000003E
#define RIU_HBF_160_PCOEF_13_1_RESET       0x40009F4F

static inline u32 riu_hbf_160_pcoef_13_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_13_1_ADDR);
}

static inline void riu_hbf_160_pcoef_13_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_13_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_13_1_HBF_160_PCOEF_13_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_13_1_HBF_160_PCOEF_13_1_LSB    0
#define RIU_HBF_160_PCOEF_13_1_HBF_160_PCOEF_13_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_13_1_HBF_160_PCOEF_13_1_RST    0x40009f4f

static inline u32 riu_hbf_160_pcoef_13_1_hbf_160_pcoef_13_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_13_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_13_1_hbf_160_pcoef_13_1_setf(struct cl_chip *chip, u32 hbf160pcoef131)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef131 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_13_1_ADDR, (u32)hbf160pcoef131 << 0);
}

/**
 * @brief HBF_160_PCOEF_14_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF14_1          0x11e63fe8
 * </pre>
 */
#define RIU_HBF_160_PCOEF_14_1_ADDR        (REG_RIU_BASE_ADDR + 0x000000FC)
#define RIU_HBF_160_PCOEF_14_1_OFFSET      0x000000FC
#define RIU_HBF_160_PCOEF_14_1_INDEX       0x0000003F
#define RIU_HBF_160_PCOEF_14_1_RESET       0x11E63FE8

static inline u32 riu_hbf_160_pcoef_14_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_14_1_ADDR);
}

static inline void riu_hbf_160_pcoef_14_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_14_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_14_1_HBF_160_PCOEF_14_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_14_1_HBF_160_PCOEF_14_1_LSB    0
#define RIU_HBF_160_PCOEF_14_1_HBF_160_PCOEF_14_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_14_1_HBF_160_PCOEF_14_1_RST    0x11e63fe8

static inline u32 riu_hbf_160_pcoef_14_1_hbf_160_pcoef_14_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_14_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_14_1_hbf_160_pcoef_14_1_setf(struct cl_chip *chip, u32 hbf160pcoef141)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef141 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_14_1_ADDR, (u32)hbf160pcoef141 << 0);
}

/**
 * @brief RWNXFECTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 TX160_DIGGAINLIN0         0x20
 *    22:16 TX80_DIGGAINLIN0          0x20
 *    14:08 TX40_DIGGAINLIN0          0x20
 *    06:00 TX20_DIGGAINLIN0          0x20
 * </pre>
 */
#define RIU_RWNXFECTRL_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000100)
#define RIU_RWNXFECTRL_0_OFFSET      0x00000100
#define RIU_RWNXFECTRL_0_INDEX       0x00000040
#define RIU_RWNXFECTRL_0_RESET       0x20202020

static inline u32 riu_rwnxfectrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXFECTRL_0_ADDR);
}

static inline void riu_rwnxfectrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXFECTRL_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXFECTRL_0_TX_160_DIGGAINLIN_0_MASK    ((u32)0x7F000000)
#define RIU_RWNXFECTRL_0_TX_160_DIGGAINLIN_0_LSB    24
#define RIU_RWNXFECTRL_0_TX_160_DIGGAINLIN_0_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_0_TX_80_DIGGAINLIN_0_MASK    ((u32)0x007F0000)
#define RIU_RWNXFECTRL_0_TX_80_DIGGAINLIN_0_LSB    16
#define RIU_RWNXFECTRL_0_TX_80_DIGGAINLIN_0_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_0_TX_40_DIGGAINLIN_0_MASK    ((u32)0x00007F00)
#define RIU_RWNXFECTRL_0_TX_40_DIGGAINLIN_0_LSB    8
#define RIU_RWNXFECTRL_0_TX_40_DIGGAINLIN_0_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_0_TX_20_DIGGAINLIN_0_MASK    ((u32)0x0000007F)
#define RIU_RWNXFECTRL_0_TX_20_DIGGAINLIN_0_LSB    0
#define RIU_RWNXFECTRL_0_TX_20_DIGGAINLIN_0_WIDTH    ((u32)0x00000007)

#define RIU_RWNXFECTRL_0_TX_160_DIGGAINLIN_0_RST    0x20
#define RIU_RWNXFECTRL_0_TX_80_DIGGAINLIN_0_RST    0x20
#define RIU_RWNXFECTRL_0_TX_40_DIGGAINLIN_0_RST    0x20
#define RIU_RWNXFECTRL_0_TX_20_DIGGAINLIN_0_RST    0x20

static inline void riu_rwnxfectrl_0_pack(struct cl_chip *chip, u8 tx160_diggainlin0, u8 tx80_diggainlin0, u8 tx40_diggainlin0, u8 tx20_diggainlin0)
{
	ASSERT_ERR_CHIP((((u32)tx160_diggainlin0 << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)tx80_diggainlin0 << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)tx40_diggainlin0 << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)tx20_diggainlin0 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_0_ADDR, ((u32)tx160_diggainlin0 << 24) | ((u32)tx80_diggainlin0 << 16) | ((u32)tx40_diggainlin0 << 8) | ((u32)tx20_diggainlin0 << 0));
}

static inline void riu_rwnxfectrl_0_unpack(struct cl_chip *chip, u8 *tx160_diggainlin0, u8 *tx80_diggainlin0, u8 *tx40_diggainlin0, u8 *tx20_diggainlin0)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_0_ADDR);

	*tx160_diggainlin0 = (local_val & ((u32)0x7F000000)) >> 24;
	*tx80_diggainlin0 = (local_val & ((u32)0x007F0000)) >> 16;
	*tx40_diggainlin0 = (local_val & ((u32)0x00007F00)) >> 8;
	*tx20_diggainlin0 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxfectrl_0_tx_160_diggainlin_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxfectrl_0_tx_160_diggainlin_0_setf(struct cl_chip *chip, u8 tx160diggainlin0)
{
	ASSERT_ERR_CHIP((((u32)tx160diggainlin0 << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_0_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_0_ADDR) & ~((u32)0x7F000000)) | ((u32)tx160diggainlin0 << 24));
}

static inline u8 riu_rwnxfectrl_0_tx_80_diggainlin_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxfectrl_0_tx_80_diggainlin_0_setf(struct cl_chip *chip, u8 tx80diggainlin0)
{
	ASSERT_ERR_CHIP((((u32)tx80diggainlin0 << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_0_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_0_ADDR) & ~((u32)0x007F0000)) | ((u32)tx80diggainlin0 << 16));
}

static inline u8 riu_rwnxfectrl_0_tx_40_diggainlin_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxfectrl_0_tx_40_diggainlin_0_setf(struct cl_chip *chip, u8 tx40diggainlin0)
{
	ASSERT_ERR_CHIP((((u32)tx40diggainlin0 << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_0_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_0_ADDR) & ~((u32)0x00007F00)) | ((u32)tx40diggainlin0 << 8));
}

static inline u8 riu_rwnxfectrl_0_tx_20_diggainlin_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxfectrl_0_tx_20_diggainlin_0_setf(struct cl_chip *chip, u8 tx20diggainlin0)
{
	ASSERT_ERR_CHIP((((u32)tx20diggainlin0 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_0_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_0_ADDR) & ~((u32)0x0000007F)) | ((u32)tx20diggainlin0 << 0));
}

/**
 * @brief RWNXFECTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 TX160_DIGGAINLIN1         0x20
 *    22:16 TX80_DIGGAINLIN1          0x20
 *    14:08 TX40_DIGGAINLIN1          0x20
 *    06:00 TX20_DIGGAINLIN1          0x20
 * </pre>
 */
#define RIU_RWNXFECTRL_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000104)
#define RIU_RWNXFECTRL_1_OFFSET      0x00000104
#define RIU_RWNXFECTRL_1_INDEX       0x00000041
#define RIU_RWNXFECTRL_1_RESET       0x20202020

static inline u32 riu_rwnxfectrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXFECTRL_1_ADDR);
}

static inline void riu_rwnxfectrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXFECTRL_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXFECTRL_1_TX_160_DIGGAINLIN_1_MASK    ((u32)0x7F000000)
#define RIU_RWNXFECTRL_1_TX_160_DIGGAINLIN_1_LSB    24
#define RIU_RWNXFECTRL_1_TX_160_DIGGAINLIN_1_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_1_TX_80_DIGGAINLIN_1_MASK    ((u32)0x007F0000)
#define RIU_RWNXFECTRL_1_TX_80_DIGGAINLIN_1_LSB    16
#define RIU_RWNXFECTRL_1_TX_80_DIGGAINLIN_1_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_1_TX_40_DIGGAINLIN_1_MASK    ((u32)0x00007F00)
#define RIU_RWNXFECTRL_1_TX_40_DIGGAINLIN_1_LSB    8
#define RIU_RWNXFECTRL_1_TX_40_DIGGAINLIN_1_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_1_TX_20_DIGGAINLIN_1_MASK    ((u32)0x0000007F)
#define RIU_RWNXFECTRL_1_TX_20_DIGGAINLIN_1_LSB    0
#define RIU_RWNXFECTRL_1_TX_20_DIGGAINLIN_1_WIDTH    ((u32)0x00000007)

#define RIU_RWNXFECTRL_1_TX_160_DIGGAINLIN_1_RST    0x20
#define RIU_RWNXFECTRL_1_TX_80_DIGGAINLIN_1_RST    0x20
#define RIU_RWNXFECTRL_1_TX_40_DIGGAINLIN_1_RST    0x20
#define RIU_RWNXFECTRL_1_TX_20_DIGGAINLIN_1_RST    0x20

static inline void riu_rwnxfectrl_1_pack(struct cl_chip *chip, u8 tx160_diggainlin1, u8 tx80_diggainlin1, u8 tx40_diggainlin1, u8 tx20_diggainlin1)
{
	ASSERT_ERR_CHIP((((u32)tx160_diggainlin1 << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)tx80_diggainlin1 << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)tx40_diggainlin1 << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)tx20_diggainlin1 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_1_ADDR, ((u32)tx160_diggainlin1 << 24) | ((u32)tx80_diggainlin1 << 16) | ((u32)tx40_diggainlin1 << 8) | ((u32)tx20_diggainlin1 << 0));
}

static inline void riu_rwnxfectrl_1_unpack(struct cl_chip *chip, u8 *tx160_diggainlin1, u8 *tx80_diggainlin1, u8 *tx40_diggainlin1, u8 *tx20_diggainlin1)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_1_ADDR);

	*tx160_diggainlin1 = (local_val & ((u32)0x7F000000)) >> 24;
	*tx80_diggainlin1 = (local_val & ((u32)0x007F0000)) >> 16;
	*tx40_diggainlin1 = (local_val & ((u32)0x00007F00)) >> 8;
	*tx20_diggainlin1 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxfectrl_1_tx_160_diggainlin_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxfectrl_1_tx_160_diggainlin_1_setf(struct cl_chip *chip, u8 tx160diggainlin1)
{
	ASSERT_ERR_CHIP((((u32)tx160diggainlin1 << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_1_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_1_ADDR) & ~((u32)0x7F000000)) | ((u32)tx160diggainlin1 << 24));
}

static inline u8 riu_rwnxfectrl_1_tx_80_diggainlin_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxfectrl_1_tx_80_diggainlin_1_setf(struct cl_chip *chip, u8 tx80diggainlin1)
{
	ASSERT_ERR_CHIP((((u32)tx80diggainlin1 << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_1_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_1_ADDR) & ~((u32)0x007F0000)) | ((u32)tx80diggainlin1 << 16));
}

static inline u8 riu_rwnxfectrl_1_tx_40_diggainlin_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxfectrl_1_tx_40_diggainlin_1_setf(struct cl_chip *chip, u8 tx40diggainlin1)
{
	ASSERT_ERR_CHIP((((u32)tx40diggainlin1 << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_1_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_1_ADDR) & ~((u32)0x00007F00)) | ((u32)tx40diggainlin1 << 8));
}

static inline u8 riu_rwnxfectrl_1_tx_20_diggainlin_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxfectrl_1_tx_20_diggainlin_1_setf(struct cl_chip *chip, u8 tx20diggainlin1)
{
	ASSERT_ERR_CHIP((((u32)tx20diggainlin1 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_1_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_1_ADDR) & ~((u32)0x0000007F)) | ((u32)tx20diggainlin1 << 0));
}

/**
 * @brief RWNXFECTRL_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 TX160_DIGGAINLIN2         0x20
 *    22:16 TX80_DIGGAINLIN2          0x20
 *    14:08 TX40_DIGGAINLIN2          0x20
 *    06:00 TX20_DIGGAINLIN2          0x20
 * </pre>
 */
#define RIU_RWNXFECTRL_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000108)
#define RIU_RWNXFECTRL_2_OFFSET      0x00000108
#define RIU_RWNXFECTRL_2_INDEX       0x00000042
#define RIU_RWNXFECTRL_2_RESET       0x20202020

static inline u32 riu_rwnxfectrl_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXFECTRL_2_ADDR);
}

static inline void riu_rwnxfectrl_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXFECTRL_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXFECTRL_2_TX_160_DIGGAINLIN_2_MASK    ((u32)0x7F000000)
#define RIU_RWNXFECTRL_2_TX_160_DIGGAINLIN_2_LSB    24
#define RIU_RWNXFECTRL_2_TX_160_DIGGAINLIN_2_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_2_TX_80_DIGGAINLIN_2_MASK    ((u32)0x007F0000)
#define RIU_RWNXFECTRL_2_TX_80_DIGGAINLIN_2_LSB    16
#define RIU_RWNXFECTRL_2_TX_80_DIGGAINLIN_2_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_2_TX_40_DIGGAINLIN_2_MASK    ((u32)0x00007F00)
#define RIU_RWNXFECTRL_2_TX_40_DIGGAINLIN_2_LSB    8
#define RIU_RWNXFECTRL_2_TX_40_DIGGAINLIN_2_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_2_TX_20_DIGGAINLIN_2_MASK    ((u32)0x0000007F)
#define RIU_RWNXFECTRL_2_TX_20_DIGGAINLIN_2_LSB    0
#define RIU_RWNXFECTRL_2_TX_20_DIGGAINLIN_2_WIDTH    ((u32)0x00000007)

#define RIU_RWNXFECTRL_2_TX_160_DIGGAINLIN_2_RST    0x20
#define RIU_RWNXFECTRL_2_TX_80_DIGGAINLIN_2_RST    0x20
#define RIU_RWNXFECTRL_2_TX_40_DIGGAINLIN_2_RST    0x20
#define RIU_RWNXFECTRL_2_TX_20_DIGGAINLIN_2_RST    0x20

static inline void riu_rwnxfectrl_2_pack(struct cl_chip *chip, u8 tx160_diggainlin2, u8 tx80_diggainlin2, u8 tx40_diggainlin2, u8 tx20_diggainlin2)
{
	ASSERT_ERR_CHIP((((u32)tx160_diggainlin2 << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)tx80_diggainlin2 << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)tx40_diggainlin2 << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)tx20_diggainlin2 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_2_ADDR, ((u32)tx160_diggainlin2 << 24) | ((u32)tx80_diggainlin2 << 16) | ((u32)tx40_diggainlin2 << 8) | ((u32)tx20_diggainlin2 << 0));
}

static inline void riu_rwnxfectrl_2_unpack(struct cl_chip *chip, u8 *tx160_diggainlin2, u8 *tx80_diggainlin2, u8 *tx40_diggainlin2, u8 *tx20_diggainlin2)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_2_ADDR);

	*tx160_diggainlin2 = (local_val & ((u32)0x7F000000)) >> 24;
	*tx80_diggainlin2 = (local_val & ((u32)0x007F0000)) >> 16;
	*tx40_diggainlin2 = (local_val & ((u32)0x00007F00)) >> 8;
	*tx20_diggainlin2 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxfectrl_2_tx_160_diggainlin_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxfectrl_2_tx_160_diggainlin_2_setf(struct cl_chip *chip, u8 tx160diggainlin2)
{
	ASSERT_ERR_CHIP((((u32)tx160diggainlin2 << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_2_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_2_ADDR) & ~((u32)0x7F000000)) | ((u32)tx160diggainlin2 << 24));
}

static inline u8 riu_rwnxfectrl_2_tx_80_diggainlin_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxfectrl_2_tx_80_diggainlin_2_setf(struct cl_chip *chip, u8 tx80diggainlin2)
{
	ASSERT_ERR_CHIP((((u32)tx80diggainlin2 << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_2_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_2_ADDR) & ~((u32)0x007F0000)) | ((u32)tx80diggainlin2 << 16));
}

static inline u8 riu_rwnxfectrl_2_tx_40_diggainlin_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxfectrl_2_tx_40_diggainlin_2_setf(struct cl_chip *chip, u8 tx40diggainlin2)
{
	ASSERT_ERR_CHIP((((u32)tx40diggainlin2 << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_2_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_2_ADDR) & ~((u32)0x00007F00)) | ((u32)tx40diggainlin2 << 8));
}

static inline u8 riu_rwnxfectrl_2_tx_20_diggainlin_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxfectrl_2_tx_20_diggainlin_2_setf(struct cl_chip *chip, u8 tx20diggainlin2)
{
	ASSERT_ERR_CHIP((((u32)tx20diggainlin2 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_2_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_2_ADDR) & ~((u32)0x0000007F)) | ((u32)tx20diggainlin2 << 0));
}

/**
 * @brief RWNXFECTRL_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 TX160_DIGGAINLIN3         0x20
 *    22:16 TX80_DIGGAINLIN3          0x20
 *    14:08 TX40_DIGGAINLIN3          0x20
 *    06:00 TX20_DIGGAINLIN3          0x20
 * </pre>
 */
#define RIU_RWNXFECTRL_3_ADDR        (REG_RIU_BASE_ADDR + 0x0000010C)
#define RIU_RWNXFECTRL_3_OFFSET      0x0000010C
#define RIU_RWNXFECTRL_3_INDEX       0x00000043
#define RIU_RWNXFECTRL_3_RESET       0x20202020

static inline u32 riu_rwnxfectrl_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXFECTRL_3_ADDR);
}

static inline void riu_rwnxfectrl_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXFECTRL_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXFECTRL_3_TX_160_DIGGAINLIN_3_MASK    ((u32)0x7F000000)
#define RIU_RWNXFECTRL_3_TX_160_DIGGAINLIN_3_LSB    24
#define RIU_RWNXFECTRL_3_TX_160_DIGGAINLIN_3_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_3_TX_80_DIGGAINLIN_3_MASK    ((u32)0x007F0000)
#define RIU_RWNXFECTRL_3_TX_80_DIGGAINLIN_3_LSB    16
#define RIU_RWNXFECTRL_3_TX_80_DIGGAINLIN_3_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_3_TX_40_DIGGAINLIN_3_MASK    ((u32)0x00007F00)
#define RIU_RWNXFECTRL_3_TX_40_DIGGAINLIN_3_LSB    8
#define RIU_RWNXFECTRL_3_TX_40_DIGGAINLIN_3_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_3_TX_20_DIGGAINLIN_3_MASK    ((u32)0x0000007F)
#define RIU_RWNXFECTRL_3_TX_20_DIGGAINLIN_3_LSB    0
#define RIU_RWNXFECTRL_3_TX_20_DIGGAINLIN_3_WIDTH    ((u32)0x00000007)

#define RIU_RWNXFECTRL_3_TX_160_DIGGAINLIN_3_RST    0x20
#define RIU_RWNXFECTRL_3_TX_80_DIGGAINLIN_3_RST    0x20
#define RIU_RWNXFECTRL_3_TX_40_DIGGAINLIN_3_RST    0x20
#define RIU_RWNXFECTRL_3_TX_20_DIGGAINLIN_3_RST    0x20

static inline void riu_rwnxfectrl_3_pack(struct cl_chip *chip, u8 tx160_diggainlin3, u8 tx80_diggainlin3, u8 tx40_diggainlin3, u8 tx20_diggainlin3)
{
	ASSERT_ERR_CHIP((((u32)tx160_diggainlin3 << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)tx80_diggainlin3 << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)tx40_diggainlin3 << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)tx20_diggainlin3 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_3_ADDR, ((u32)tx160_diggainlin3 << 24) | ((u32)tx80_diggainlin3 << 16) | ((u32)tx40_diggainlin3 << 8) | ((u32)tx20_diggainlin3 << 0));
}

static inline void riu_rwnxfectrl_3_unpack(struct cl_chip *chip, u8 *tx160_diggainlin3, u8 *tx80_diggainlin3, u8 *tx40_diggainlin3, u8 *tx20_diggainlin3)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_3_ADDR);

	*tx160_diggainlin3 = (local_val & ((u32)0x7F000000)) >> 24;
	*tx80_diggainlin3 = (local_val & ((u32)0x007F0000)) >> 16;
	*tx40_diggainlin3 = (local_val & ((u32)0x00007F00)) >> 8;
	*tx20_diggainlin3 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxfectrl_3_tx_160_diggainlin_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxfectrl_3_tx_160_diggainlin_3_setf(struct cl_chip *chip, u8 tx160diggainlin3)
{
	ASSERT_ERR_CHIP((((u32)tx160diggainlin3 << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_3_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_3_ADDR) & ~((u32)0x7F000000)) | ((u32)tx160diggainlin3 << 24));
}

static inline u8 riu_rwnxfectrl_3_tx_80_diggainlin_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxfectrl_3_tx_80_diggainlin_3_setf(struct cl_chip *chip, u8 tx80diggainlin3)
{
	ASSERT_ERR_CHIP((((u32)tx80diggainlin3 << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_3_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_3_ADDR) & ~((u32)0x007F0000)) | ((u32)tx80diggainlin3 << 16));
}

static inline u8 riu_rwnxfectrl_3_tx_40_diggainlin_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxfectrl_3_tx_40_diggainlin_3_setf(struct cl_chip *chip, u8 tx40diggainlin3)
{
	ASSERT_ERR_CHIP((((u32)tx40diggainlin3 << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_3_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_3_ADDR) & ~((u32)0x00007F00)) | ((u32)tx40diggainlin3 << 8));
}

static inline u8 riu_rwnxfectrl_3_tx_20_diggainlin_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxfectrl_3_tx_20_diggainlin_3_setf(struct cl_chip *chip, u8 tx20diggainlin3)
{
	ASSERT_ERR_CHIP((((u32)tx20diggainlin3 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_3_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_3_ADDR) & ~((u32)0x0000007F)) | ((u32)tx20diggainlin3 << 0));
}

/**
 * @brief RWNXFECTRL_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 BTXDIGGAINLIN3            0x20
 *    22:16 BTXDIGGAINLIN2            0x20
 *    14:08 BTXDIGGAINLIN1            0x20
 *    06:00 BTXDIGGAINLIN0            0x20
 * </pre>
 */
#define RIU_RWNXFECTRL_4_ADDR        (REG_RIU_BASE_ADDR + 0x00000110)
#define RIU_RWNXFECTRL_4_OFFSET      0x00000110
#define RIU_RWNXFECTRL_4_INDEX       0x00000044
#define RIU_RWNXFECTRL_4_RESET       0x20202020

static inline u32 riu_rwnxfectrl_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXFECTRL_4_ADDR);
}

static inline void riu_rwnxfectrl_4_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXFECTRL_4_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXFECTRL_4_BTXDIGGAINLIN_3_MASK    ((u32)0x7F000000)
#define RIU_RWNXFECTRL_4_BTXDIGGAINLIN_3_LSB    24
#define RIU_RWNXFECTRL_4_BTXDIGGAINLIN_3_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_4_BTXDIGGAINLIN_2_MASK    ((u32)0x007F0000)
#define RIU_RWNXFECTRL_4_BTXDIGGAINLIN_2_LSB    16
#define RIU_RWNXFECTRL_4_BTXDIGGAINLIN_2_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_4_BTXDIGGAINLIN_1_MASK    ((u32)0x00007F00)
#define RIU_RWNXFECTRL_4_BTXDIGGAINLIN_1_LSB    8
#define RIU_RWNXFECTRL_4_BTXDIGGAINLIN_1_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_4_BTXDIGGAINLIN_0_MASK    ((u32)0x0000007F)
#define RIU_RWNXFECTRL_4_BTXDIGGAINLIN_0_LSB    0
#define RIU_RWNXFECTRL_4_BTXDIGGAINLIN_0_WIDTH    ((u32)0x00000007)

#define RIU_RWNXFECTRL_4_BTXDIGGAINLIN_3_RST    0x20
#define RIU_RWNXFECTRL_4_BTXDIGGAINLIN_2_RST    0x20
#define RIU_RWNXFECTRL_4_BTXDIGGAINLIN_1_RST    0x20
#define RIU_RWNXFECTRL_4_BTXDIGGAINLIN_0_RST    0x20

static inline void riu_rwnxfectrl_4_pack(struct cl_chip *chip, u8 btxdiggainlin3, u8 btxdiggainlin2, u8 btxdiggainlin1, u8 btxdiggainlin0)
{
	ASSERT_ERR_CHIP((((u32)btxdiggainlin3 << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)btxdiggainlin2 << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)btxdiggainlin1 << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)btxdiggainlin0 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_4_ADDR, ((u32)btxdiggainlin3 << 24) | ((u32)btxdiggainlin2 << 16) | ((u32)btxdiggainlin1 << 8) | ((u32)btxdiggainlin0 << 0));
}

static inline void riu_rwnxfectrl_4_unpack(struct cl_chip *chip, u8 *btxdiggainlin3, u8 *btxdiggainlin2, u8 *btxdiggainlin1, u8 *btxdiggainlin0)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_4_ADDR);

	*btxdiggainlin3 = (local_val & ((u32)0x7F000000)) >> 24;
	*btxdiggainlin2 = (local_val & ((u32)0x007F0000)) >> 16;
	*btxdiggainlin1 = (local_val & ((u32)0x00007F00)) >> 8;
	*btxdiggainlin0 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxfectrl_4_btxdiggainlin_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxfectrl_4_btxdiggainlin_3_setf(struct cl_chip *chip, u8 btxdiggainlin3)
{
	ASSERT_ERR_CHIP((((u32)btxdiggainlin3 << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_4_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_4_ADDR) & ~((u32)0x7F000000)) | ((u32)btxdiggainlin3 << 24));
}

static inline u8 riu_rwnxfectrl_4_btxdiggainlin_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxfectrl_4_btxdiggainlin_2_setf(struct cl_chip *chip, u8 btxdiggainlin2)
{
	ASSERT_ERR_CHIP((((u32)btxdiggainlin2 << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_4_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_4_ADDR) & ~((u32)0x007F0000)) | ((u32)btxdiggainlin2 << 16));
}

static inline u8 riu_rwnxfectrl_4_btxdiggainlin_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxfectrl_4_btxdiggainlin_1_setf(struct cl_chip *chip, u8 btxdiggainlin1)
{
	ASSERT_ERR_CHIP((((u32)btxdiggainlin1 << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_4_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_4_ADDR) & ~((u32)0x00007F00)) | ((u32)btxdiggainlin1 << 8));
}

static inline u8 riu_rwnxfectrl_4_btxdiggainlin_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxfectrl_4_btxdiggainlin_0_setf(struct cl_chip *chip, u8 btxdiggainlin0)
{
	ASSERT_ERR_CHIP((((u32)btxdiggainlin0 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_4_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_4_ADDR) & ~((u32)0x0000007F)) | ((u32)btxdiggainlin0 << 0));
}

/**
 * @brief HBF_20_PCOEF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF20_PCOEF0              0x05000000
 * </pre>
 */
#define RIU_HBF_20_PCOEF_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000114)
#define RIU_HBF_20_PCOEF_0_OFFSET      0x00000114
#define RIU_HBF_20_PCOEF_0_INDEX       0x00000045
#define RIU_HBF_20_PCOEF_0_RESET       0x05000000

static inline u32 riu_hbf_20_pcoef_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_20_PCOEF_0_ADDR);
}

static inline void riu_hbf_20_pcoef_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_20_PCOEF_0_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_20_PCOEF_0_HBF_20_PCOEF_0_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_20_PCOEF_0_HBF_20_PCOEF_0_LSB    0
#define RIU_HBF_20_PCOEF_0_HBF_20_PCOEF_0_WIDTH    ((u32)0x00000020)

#define RIU_HBF_20_PCOEF_0_HBF_20_PCOEF_0_RST    0x05000000

static inline u32 riu_hbf_20_pcoef_0_hbf_20_pcoef_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_20_PCOEF_0_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_20_pcoef_0_hbf_20_pcoef_0_setf(struct cl_chip *chip, u32 hbf20pcoef0)
{
	ASSERT_ERR_CHIP((((u32)hbf20pcoef0 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_20_PCOEF_0_ADDR, (u32)hbf20pcoef0 << 0);
}

/**
 * @brief HBF_20_PCOEF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF20_PCOEF1              0xec7ec02a
 * </pre>
 */
#define RIU_HBF_20_PCOEF_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000118)
#define RIU_HBF_20_PCOEF_1_OFFSET      0x00000118
#define RIU_HBF_20_PCOEF_1_INDEX       0x00000046
#define RIU_HBF_20_PCOEF_1_RESET       0xEC7EC02A

static inline u32 riu_hbf_20_pcoef_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_20_PCOEF_1_ADDR);
}

static inline void riu_hbf_20_pcoef_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_20_PCOEF_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_20_PCOEF_1_HBF_20_PCOEF_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_20_PCOEF_1_HBF_20_PCOEF_1_LSB    0
#define RIU_HBF_20_PCOEF_1_HBF_20_PCOEF_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_20_PCOEF_1_HBF_20_PCOEF_1_RST    0xec7ec02a

static inline u32 riu_hbf_20_pcoef_1_hbf_20_pcoef_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_20_PCOEF_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_20_pcoef_1_hbf_20_pcoef_1_setf(struct cl_chip *chip, u32 hbf20pcoef1)
{
	ASSERT_ERR_CHIP((((u32)hbf20pcoef1 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_20_PCOEF_1_ADDR, (u32)hbf20pcoef1 << 0);
}

/**
 * @brief HBF_20_PCOEF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF20_PCOEF2              0xf307e043
 * </pre>
 */
#define RIU_HBF_20_PCOEF_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000011C)
#define RIU_HBF_20_PCOEF_2_OFFSET      0x0000011C
#define RIU_HBF_20_PCOEF_2_INDEX       0x00000047
#define RIU_HBF_20_PCOEF_2_RESET       0xF307E043

static inline u32 riu_hbf_20_pcoef_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_20_PCOEF_2_ADDR);
}

static inline void riu_hbf_20_pcoef_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_20_PCOEF_2_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_20_PCOEF_2_HBF_20_PCOEF_2_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_20_PCOEF_2_HBF_20_PCOEF_2_LSB    0
#define RIU_HBF_20_PCOEF_2_HBF_20_PCOEF_2_WIDTH    ((u32)0x00000020)

#define RIU_HBF_20_PCOEF_2_HBF_20_PCOEF_2_RST    0xf307e043

static inline u32 riu_hbf_20_pcoef_2_hbf_20_pcoef_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_20_PCOEF_2_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_20_pcoef_2_hbf_20_pcoef_2_setf(struct cl_chip *chip, u32 hbf20pcoef2)
{
	ASSERT_ERR_CHIP((((u32)hbf20pcoef2 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_20_PCOEF_2_ADDR, (u32)hbf20pcoef2 << 0);
}

/**
 * @brief HBF_20_PCOEF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF20_PCOEF3              0x9a033c9f
 * </pre>
 */
#define RIU_HBF_20_PCOEF_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000120)
#define RIU_HBF_20_PCOEF_3_OFFSET      0x00000120
#define RIU_HBF_20_PCOEF_3_INDEX       0x00000048
#define RIU_HBF_20_PCOEF_3_RESET       0x9A033C9F

static inline u32 riu_hbf_20_pcoef_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_20_PCOEF_3_ADDR);
}

static inline void riu_hbf_20_pcoef_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_20_PCOEF_3_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_20_PCOEF_3_HBF_20_PCOEF_3_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_20_PCOEF_3_HBF_20_PCOEF_3_LSB    0
#define RIU_HBF_20_PCOEF_3_HBF_20_PCOEF_3_WIDTH    ((u32)0x00000020)

#define RIU_HBF_20_PCOEF_3_HBF_20_PCOEF_3_RST    0x9a033c9f

static inline u32 riu_hbf_20_pcoef_3_hbf_20_pcoef_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_20_PCOEF_3_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_20_pcoef_3_hbf_20_pcoef_3_setf(struct cl_chip *chip, u32 hbf20pcoef3)
{
	ASSERT_ERR_CHIP((((u32)hbf20pcoef3 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_20_PCOEF_3_ADDR, (u32)hbf20pcoef3 << 0);
}

/**
 * @brief HBF_20_PCOEF_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    14:00 HBF20_PCOEF4              0x2002
 * </pre>
 */
#define RIU_HBF_20_PCOEF_4_ADDR        (REG_RIU_BASE_ADDR + 0x00000124)
#define RIU_HBF_20_PCOEF_4_OFFSET      0x00000124
#define RIU_HBF_20_PCOEF_4_INDEX       0x00000049
#define RIU_HBF_20_PCOEF_4_RESET       0x00002002

static inline u32 riu_hbf_20_pcoef_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_20_PCOEF_4_ADDR);
}

static inline void riu_hbf_20_pcoef_4_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_20_PCOEF_4_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_20_PCOEF_4_HBF_20_PCOEF_4_MASK    ((u32)0x00007FFF)
#define RIU_HBF_20_PCOEF_4_HBF_20_PCOEF_4_LSB    0
#define RIU_HBF_20_PCOEF_4_HBF_20_PCOEF_4_WIDTH    ((u32)0x0000000F)

#define RIU_HBF_20_PCOEF_4_HBF_20_PCOEF_4_RST    0x2002

static inline u16 riu_hbf_20_pcoef_4_hbf_20_pcoef_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_20_PCOEF_4_ADDR);

	return (u16)(local_val >> 0);
}

static inline void riu_hbf_20_pcoef_4_hbf_20_pcoef_4_setf(struct cl_chip *chip, u16 hbf20pcoef4)
{
	ASSERT_ERR_CHIP((((u32)hbf20pcoef4 << 0) & ~((u32)0x00007FFF)) == 0);
	cl_reg_write(chip, RIU_HBF_20_PCOEF_4_ADDR, (u32)hbf20pcoef4 << 0);
}

/**
 * @brief HBF_40_PCOEF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF40_PCOEF0              0x1b02b010
 * </pre>
 */
#define RIU_HBF_40_PCOEF_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000128)
#define RIU_HBF_40_PCOEF_0_OFFSET      0x00000128
#define RIU_HBF_40_PCOEF_0_INDEX       0x0000004A
#define RIU_HBF_40_PCOEF_0_RESET       0x1B02B010

static inline u32 riu_hbf_40_pcoef_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_40_PCOEF_0_ADDR);
}

static inline void riu_hbf_40_pcoef_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_40_PCOEF_0_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_40_PCOEF_0_HBF_40_PCOEF_0_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_40_PCOEF_0_HBF_40_PCOEF_0_LSB    0
#define RIU_HBF_40_PCOEF_0_HBF_40_PCOEF_0_WIDTH    ((u32)0x00000020)

#define RIU_HBF_40_PCOEF_0_HBF_40_PCOEF_0_RST    0x1b02b010

static inline u32 riu_hbf_40_pcoef_0_hbf_40_pcoef_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_40_PCOEF_0_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_40_pcoef_0_hbf_40_pcoef_0_setf(struct cl_chip *chip, u32 hbf40pcoef0)
{
	ASSERT_ERR_CHIP((((u32)hbf40pcoef0 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_40_PCOEF_0_ADDR, (u32)hbf40pcoef0 << 0);
}

/**
 * @brief HBF_40_PCOEF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF40_PCOEF1              0xbfd3fdf0
 * </pre>
 */
#define RIU_HBF_40_PCOEF_1_ADDR        (REG_RIU_BASE_ADDR + 0x0000012C)
#define RIU_HBF_40_PCOEF_1_OFFSET      0x0000012C
#define RIU_HBF_40_PCOEF_1_INDEX       0x0000004B
#define RIU_HBF_40_PCOEF_1_RESET       0xBFD3FDF0

static inline u32 riu_hbf_40_pcoef_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_40_PCOEF_1_ADDR);
}

static inline void riu_hbf_40_pcoef_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_40_PCOEF_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_40_PCOEF_1_HBF_40_PCOEF_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_40_PCOEF_1_HBF_40_PCOEF_1_LSB    0
#define RIU_HBF_40_PCOEF_1_HBF_40_PCOEF_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_40_PCOEF_1_HBF_40_PCOEF_1_RST    0xbfd3fdf0

static inline u32 riu_hbf_40_pcoef_1_hbf_40_pcoef_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_40_PCOEF_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_40_pcoef_1_hbf_40_pcoef_1_setf(struct cl_chip *chip, u32 hbf40pcoef1)
{
	ASSERT_ERR_CHIP((((u32)hbf40pcoef1 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_40_PCOEF_1_ADDR, (u32)hbf40pcoef1 << 0);
}

/**
 * @brief HBF_40_PCOEF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF40_PCOEF2              0xfe803f01
 * </pre>
 */
#define RIU_HBF_40_PCOEF_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000130)
#define RIU_HBF_40_PCOEF_2_OFFSET      0x00000130
#define RIU_HBF_40_PCOEF_2_INDEX       0x0000004C
#define RIU_HBF_40_PCOEF_2_RESET       0xFE803F01

static inline u32 riu_hbf_40_pcoef_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_40_PCOEF_2_ADDR);
}

static inline void riu_hbf_40_pcoef_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_40_PCOEF_2_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_40_PCOEF_2_HBF_40_PCOEF_2_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_40_PCOEF_2_HBF_40_PCOEF_2_LSB    0
#define RIU_HBF_40_PCOEF_2_HBF_40_PCOEF_2_WIDTH    ((u32)0x00000020)

#define RIU_HBF_40_PCOEF_2_HBF_40_PCOEF_2_RST    0xfe803f01

static inline u32 riu_hbf_40_pcoef_2_hbf_40_pcoef_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_40_PCOEF_2_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_40_pcoef_2_hbf_40_pcoef_2_setf(struct cl_chip *chip, u32 hbf40pcoef2)
{
	ASSERT_ERR_CHIP((((u32)hbf40pcoef2 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_40_PCOEF_2_ADDR, (u32)hbf40pcoef2 << 0);
}

/**
 * @brief HBF_40_PCOEF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF40_PCOEF3              0x7f016fa9
 * </pre>
 */
#define RIU_HBF_40_PCOEF_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000134)
#define RIU_HBF_40_PCOEF_3_OFFSET      0x00000134
#define RIU_HBF_40_PCOEF_3_INDEX       0x0000004D
#define RIU_HBF_40_PCOEF_3_RESET       0x7F016FA9

static inline u32 riu_hbf_40_pcoef_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_40_PCOEF_3_ADDR);
}

static inline void riu_hbf_40_pcoef_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_40_PCOEF_3_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_40_PCOEF_3_HBF_40_PCOEF_3_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_40_PCOEF_3_HBF_40_PCOEF_3_LSB    0
#define RIU_HBF_40_PCOEF_3_HBF_40_PCOEF_3_WIDTH    ((u32)0x00000020)

#define RIU_HBF_40_PCOEF_3_HBF_40_PCOEF_3_RST    0x7f016fa9

static inline u32 riu_hbf_40_pcoef_3_hbf_40_pcoef_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_40_PCOEF_3_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_40_pcoef_3_hbf_40_pcoef_3_setf(struct cl_chip *chip, u32 hbf40pcoef3)
{
	ASSERT_ERR_CHIP((((u32)hbf40pcoef3 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_40_PCOEF_3_ADDR, (u32)hbf40pcoef3 << 0);
}

/**
 * @brief HBF_40_PCOEF_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF40_PCOEF4              0x4f26feb0
 * </pre>
 */
#define RIU_HBF_40_PCOEF_4_ADDR        (REG_RIU_BASE_ADDR + 0x00000138)
#define RIU_HBF_40_PCOEF_4_OFFSET      0x00000138
#define RIU_HBF_40_PCOEF_4_INDEX       0x0000004E
#define RIU_HBF_40_PCOEF_4_RESET       0x4F26FEB0

static inline u32 riu_hbf_40_pcoef_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_40_PCOEF_4_ADDR);
}

static inline void riu_hbf_40_pcoef_4_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_40_PCOEF_4_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_40_PCOEF_4_HBF_40_PCOEF_4_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_40_PCOEF_4_HBF_40_PCOEF_4_LSB    0
#define RIU_HBF_40_PCOEF_4_HBF_40_PCOEF_4_WIDTH    ((u32)0x00000020)

#define RIU_HBF_40_PCOEF_4_HBF_40_PCOEF_4_RST    0x4f26feb0

static inline u32 riu_hbf_40_pcoef_4_hbf_40_pcoef_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_40_PCOEF_4_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_40_pcoef_4_hbf_40_pcoef_4_setf(struct cl_chip *chip, u32 hbf40pcoef4)
{
	ASSERT_ERR_CHIP((((u32)hbf40pcoef4 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_40_PCOEF_4_ADDR, (u32)hbf40pcoef4 << 0);
}

/**
 * @brief HBF_40_PCOEF_5 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF40_PCOEF5              0x40029701
 * </pre>
 */
#define RIU_HBF_40_PCOEF_5_ADDR        (REG_RIU_BASE_ADDR + 0x0000013C)
#define RIU_HBF_40_PCOEF_5_OFFSET      0x0000013C
#define RIU_HBF_40_PCOEF_5_INDEX       0x0000004F
#define RIU_HBF_40_PCOEF_5_RESET       0x40029701

static inline u32 riu_hbf_40_pcoef_5_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_40_PCOEF_5_ADDR);
}

static inline void riu_hbf_40_pcoef_5_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_40_PCOEF_5_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_40_PCOEF_5_HBF_40_PCOEF_5_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_40_PCOEF_5_HBF_40_PCOEF_5_LSB    0
#define RIU_HBF_40_PCOEF_5_HBF_40_PCOEF_5_WIDTH    ((u32)0x00000020)

#define RIU_HBF_40_PCOEF_5_HBF_40_PCOEF_5_RST    0x40029701

static inline u32 riu_hbf_40_pcoef_5_hbf_40_pcoef_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_40_PCOEF_5_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_40_pcoef_5_hbf_40_pcoef_5_setf(struct cl_chip *chip, u32 hbf40pcoef5)
{
	ASSERT_ERR_CHIP((((u32)hbf40pcoef5 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_40_PCOEF_5_ADDR, (u32)hbf40pcoef5 << 0);
}

/**
 * @brief HBF_80_PCOEF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF80_PCOEF0              0xfe3f97fb
 * </pre>
 */
#define RIU_HBF_80_PCOEF_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000140)
#define RIU_HBF_80_PCOEF_0_OFFSET      0x00000140
#define RIU_HBF_80_PCOEF_0_INDEX       0x00000050
#define RIU_HBF_80_PCOEF_0_RESET       0xFE3F97FB

static inline u32 riu_hbf_80_pcoef_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_0_ADDR);
}

static inline void riu_hbf_80_pcoef_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_0_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_0_HBF_80_PCOEF_0_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_80_PCOEF_0_HBF_80_PCOEF_0_LSB    0
#define RIU_HBF_80_PCOEF_0_HBF_80_PCOEF_0_WIDTH    ((u32)0x00000020)

#define RIU_HBF_80_PCOEF_0_HBF_80_PCOEF_0_RST    0xfe3f97fb

static inline u32 riu_hbf_80_pcoef_0_hbf_80_pcoef_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_0_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_0_hbf_80_pcoef_0_setf(struct cl_chip *chip, u32 hbf80pcoef0)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef0 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_0_ADDR, (u32)hbf80pcoef0 << 0);
}

/**
 * @brief HBF_80_PCOEF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF80_PCOEF1              0xfb80c017
 * </pre>
 */
#define RIU_HBF_80_PCOEF_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000144)
#define RIU_HBF_80_PCOEF_1_OFFSET      0x00000144
#define RIU_HBF_80_PCOEF_1_INDEX       0x00000051
#define RIU_HBF_80_PCOEF_1_RESET       0xFB80C017

static inline u32 riu_hbf_80_pcoef_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_1_ADDR);
}

static inline void riu_hbf_80_pcoef_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_1_HBF_80_PCOEF_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_80_PCOEF_1_HBF_80_PCOEF_1_LSB    0
#define RIU_HBF_80_PCOEF_1_HBF_80_PCOEF_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_80_PCOEF_1_HBF_80_PCOEF_1_RST    0xfb80c017

static inline u32 riu_hbf_80_pcoef_1_hbf_80_pcoef_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_1_hbf_80_pcoef_1_setf(struct cl_chip *chip, u32 hbf80pcoef1)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef1 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_1_ADDR, (u32)hbf80pcoef1 << 0);
}

/**
 * @brief HBF_80_PCOEF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF80_PCOEF2              0x1200ffc7
 * </pre>
 */
#define RIU_HBF_80_PCOEF_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000148)
#define RIU_HBF_80_PCOEF_2_OFFSET      0x00000148
#define RIU_HBF_80_PCOEF_2_INDEX       0x00000052
#define RIU_HBF_80_PCOEF_2_RESET       0x1200FFC7

static inline u32 riu_hbf_80_pcoef_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_2_ADDR);
}

static inline void riu_hbf_80_pcoef_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_2_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_2_HBF_80_PCOEF_2_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_80_PCOEF_2_HBF_80_PCOEF_2_LSB    0
#define RIU_HBF_80_PCOEF_2_HBF_80_PCOEF_2_WIDTH    ((u32)0x00000020)

#define RIU_HBF_80_PCOEF_2_HBF_80_PCOEF_2_RST    0x1200ffc7

static inline u32 riu_hbf_80_pcoef_2_hbf_80_pcoef_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_2_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_2_hbf_80_pcoef_2_setf(struct cl_chip *chip, u32 hbf80pcoef2)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef2 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_2_ADDR, (u32)hbf80pcoef2 << 0);
}

/**
 * @brief HBF_80_PCOEF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF80_PCOEF3              0x0dfaffd0
 * </pre>
 */
#define RIU_HBF_80_PCOEF_3_ADDR        (REG_RIU_BASE_ADDR + 0x0000014C)
#define RIU_HBF_80_PCOEF_3_OFFSET      0x0000014C
#define RIU_HBF_80_PCOEF_3_INDEX       0x00000053
#define RIU_HBF_80_PCOEF_3_RESET       0x0DFAFFD0

static inline u32 riu_hbf_80_pcoef_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_3_ADDR);
}

static inline void riu_hbf_80_pcoef_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_3_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_3_HBF_80_PCOEF_3_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_80_PCOEF_3_HBF_80_PCOEF_3_LSB    0
#define RIU_HBF_80_PCOEF_3_HBF_80_PCOEF_3_WIDTH    ((u32)0x00000020)

#define RIU_HBF_80_PCOEF_3_HBF_80_PCOEF_3_RST    0x0dfaffd0

static inline u32 riu_hbf_80_pcoef_3_hbf_80_pcoef_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_3_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_3_hbf_80_pcoef_3_setf(struct cl_chip *chip, u32 hbf80pcoef3)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef3 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_3_ADDR, (u32)hbf80pcoef3 << 0);
}

/**
 * @brief HBF_80_PCOEF_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF80_PCOEF4              0x8ffd8180
 * </pre>
 */
#define RIU_HBF_80_PCOEF_4_ADDR        (REG_RIU_BASE_ADDR + 0x00000150)
#define RIU_HBF_80_PCOEF_4_OFFSET      0x00000150
#define RIU_HBF_80_PCOEF_4_INDEX       0x00000054
#define RIU_HBF_80_PCOEF_4_RESET       0x8FFD8180

static inline u32 riu_hbf_80_pcoef_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_4_ADDR);
}

static inline void riu_hbf_80_pcoef_4_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_4_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_4_HBF_80_PCOEF_4_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_80_PCOEF_4_HBF_80_PCOEF_4_LSB    0
#define RIU_HBF_80_PCOEF_4_HBF_80_PCOEF_4_WIDTH    ((u32)0x00000020)

#define RIU_HBF_80_PCOEF_4_HBF_80_PCOEF_4_RST    0x8ffd8180

static inline u32 riu_hbf_80_pcoef_4_hbf_80_pcoef_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_4_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_4_hbf_80_pcoef_4_setf(struct cl_chip *chip, u32 hbf80pcoef4)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef4 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_4_ADDR, (u32)hbf80pcoef4 << 0);
}

/**
 * @brief HBF_80_PCOEF_5 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF80_PCOEF5              0xe02400bf
 * </pre>
 */
#define RIU_HBF_80_PCOEF_5_ADDR        (REG_RIU_BASE_ADDR + 0x00000154)
#define RIU_HBF_80_PCOEF_5_OFFSET      0x00000154
#define RIU_HBF_80_PCOEF_5_INDEX       0x00000055
#define RIU_HBF_80_PCOEF_5_RESET       0xE02400BF

static inline u32 riu_hbf_80_pcoef_5_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_5_ADDR);
}

static inline void riu_hbf_80_pcoef_5_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_5_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_5_HBF_80_PCOEF_5_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_80_PCOEF_5_HBF_80_PCOEF_5_LSB    0
#define RIU_HBF_80_PCOEF_5_HBF_80_PCOEF_5_WIDTH    ((u32)0x00000020)

#define RIU_HBF_80_PCOEF_5_HBF_80_PCOEF_5_RST    0xe02400bf

static inline u32 riu_hbf_80_pcoef_5_hbf_80_pcoef_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_5_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_5_hbf_80_pcoef_5_setf(struct cl_chip *chip, u32 hbf80pcoef5)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef5 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_5_ADDR, (u32)hbf80pcoef5 << 0);
}

/**
 * @brief HBF_80_PCOEF_6 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF80_PCOEF6              0x1009f4bf
 * </pre>
 */
#define RIU_HBF_80_PCOEF_6_ADDR        (REG_RIU_BASE_ADDR + 0x00000158)
#define RIU_HBF_80_PCOEF_6_OFFSET      0x00000158
#define RIU_HBF_80_PCOEF_6_INDEX       0x00000056
#define RIU_HBF_80_PCOEF_6_RESET       0x1009F4BF

static inline u32 riu_hbf_80_pcoef_6_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_6_ADDR);
}

static inline void riu_hbf_80_pcoef_6_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_6_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_6_HBF_80_PCOEF_6_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_80_PCOEF_6_HBF_80_PCOEF_6_LSB    0
#define RIU_HBF_80_PCOEF_6_HBF_80_PCOEF_6_WIDTH    ((u32)0x00000020)

#define RIU_HBF_80_PCOEF_6_HBF_80_PCOEF_6_RST    0x1009f4bf

static inline u32 riu_hbf_80_pcoef_6_hbf_80_pcoef_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_6_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_6_hbf_80_pcoef_6_setf(struct cl_chip *chip, u32 hbf80pcoef6)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef6 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_6_ADDR, (u32)hbf80pcoef6 << 0);
}

/**
 * @brief HBF_80_PCOEF_7 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF80_PCOEF7              0x9e4ffe04
 * </pre>
 */
#define RIU_HBF_80_PCOEF_7_ADDR        (REG_RIU_BASE_ADDR + 0x0000015C)
#define RIU_HBF_80_PCOEF_7_OFFSET      0x0000015C
#define RIU_HBF_80_PCOEF_7_INDEX       0x00000057
#define RIU_HBF_80_PCOEF_7_RESET       0x9E4FFE04

static inline u32 riu_hbf_80_pcoef_7_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_7_ADDR);
}

static inline void riu_hbf_80_pcoef_7_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_7_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_7_HBF_80_PCOEF_7_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_80_PCOEF_7_HBF_80_PCOEF_7_LSB    0
#define RIU_HBF_80_PCOEF_7_HBF_80_PCOEF_7_WIDTH    ((u32)0x00000020)

#define RIU_HBF_80_PCOEF_7_HBF_80_PCOEF_7_RST    0x9e4ffe04

static inline u32 riu_hbf_80_pcoef_7_hbf_80_pcoef_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_7_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_7_hbf_80_pcoef_7_setf(struct cl_chip *chip, u32 hbf80pcoef7)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef7 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_7_ADDR, (u32)hbf80pcoef7 << 0);
}

/**
 * @brief HBF_80_PCOEF_8 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:00 HBF80_PCOEF8              0x10014800
 * </pre>
 */
#define RIU_HBF_80_PCOEF_8_ADDR        (REG_RIU_BASE_ADDR + 0x00000160)
#define RIU_HBF_80_PCOEF_8_OFFSET      0x00000160
#define RIU_HBF_80_PCOEF_8_INDEX       0x00000058
#define RIU_HBF_80_PCOEF_8_RESET       0x10014800

static inline u32 riu_hbf_80_pcoef_8_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_80_PCOEF_8_ADDR);
}

static inline void riu_hbf_80_pcoef_8_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_80_PCOEF_8_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_80_PCOEF_8_HBF_80_PCOEF_8_MASK    ((u32)0x3FFFFFFF)
#define RIU_HBF_80_PCOEF_8_HBF_80_PCOEF_8_LSB    0
#define RIU_HBF_80_PCOEF_8_HBF_80_PCOEF_8_WIDTH    ((u32)0x0000001E)

#define RIU_HBF_80_PCOEF_8_HBF_80_PCOEF_8_RST    0x10014800

static inline u32 riu_hbf_80_pcoef_8_hbf_80_pcoef_8_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_80_PCOEF_8_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_80_pcoef_8_hbf_80_pcoef_8_setf(struct cl_chip *chip, u32 hbf80pcoef8)
{
	ASSERT_ERR_CHIP((((u32)hbf80pcoef8 << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_80_PCOEF_8_ADDR, (u32)hbf80pcoef8 << 0);
}

/**
 * @brief HBF_160_PCOEF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF0             0xfa3eeff2
 * </pre>
 */
#define RIU_HBF_160_PCOEF_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000164)
#define RIU_HBF_160_PCOEF_0_OFFSET      0x00000164
#define RIU_HBF_160_PCOEF_0_INDEX       0x00000059
#define RIU_HBF_160_PCOEF_0_RESET       0xFA3EEFF2

static inline u32 riu_hbf_160_pcoef_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_0_ADDR);
}

static inline void riu_hbf_160_pcoef_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_0_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_0_HBF_160_PCOEF_0_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_0_HBF_160_PCOEF_0_LSB    0
#define RIU_HBF_160_PCOEF_0_HBF_160_PCOEF_0_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_0_HBF_160_PCOEF_0_RST    0xfa3eeff2

static inline u32 riu_hbf_160_pcoef_0_hbf_160_pcoef_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_0_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_0_hbf_160_pcoef_0_setf(struct cl_chip *chip, u32 hbf160pcoef0)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef0 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_0_ADDR, (u32)hbf160pcoef0 << 0);
}

/**
 * @brief HBF_160_PCOEF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF1             0xfd811015
 * </pre>
 */
#define RIU_HBF_160_PCOEF_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000168)
#define RIU_HBF_160_PCOEF_1_OFFSET      0x00000168
#define RIU_HBF_160_PCOEF_1_INDEX       0x0000005A
#define RIU_HBF_160_PCOEF_1_RESET       0xFD811015

static inline u32 riu_hbf_160_pcoef_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_1_ADDR);
}

static inline void riu_hbf_160_pcoef_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_1_HBF_160_PCOEF_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_1_HBF_160_PCOEF_1_LSB    0
#define RIU_HBF_160_PCOEF_1_HBF_160_PCOEF_1_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_1_HBF_160_PCOEF_1_RST    0xfd811015

static inline u32 riu_hbf_160_pcoef_1_hbf_160_pcoef_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_1_hbf_160_pcoef_1_setf(struct cl_chip *chip, u32 hbf160pcoef1)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef1 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_1_ADDR, (u32)hbf160pcoef1 << 0);
}

/**
 * @brief HBF_160_PCOEF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF2             0x09009fdb
 * </pre>
 */
#define RIU_HBF_160_PCOEF_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000016C)
#define RIU_HBF_160_PCOEF_2_OFFSET      0x0000016C
#define RIU_HBF_160_PCOEF_2_INDEX       0x0000005B
#define RIU_HBF_160_PCOEF_2_RESET       0x09009FDB

static inline u32 riu_hbf_160_pcoef_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_2_ADDR);
}

static inline void riu_hbf_160_pcoef_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_2_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_2_HBF_160_PCOEF_2_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_2_HBF_160_PCOEF_2_LSB    0
#define RIU_HBF_160_PCOEF_2_HBF_160_PCOEF_2_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_2_HBF_160_PCOEF_2_RST    0x09009fdb

static inline u32 riu_hbf_160_pcoef_2_hbf_160_pcoef_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_2_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_2_hbf_160_pcoef_2_setf(struct cl_chip *chip, u32 hbf160pcoef2)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef2 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_2_ADDR, (u32)hbf160pcoef2 << 0);
}

/**
 * @brief HBF_160_PCOEF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF3             0x05fe3ff0
 * </pre>
 */
#define RIU_HBF_160_PCOEF_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000170)
#define RIU_HBF_160_PCOEF_3_OFFSET      0x00000170
#define RIU_HBF_160_PCOEF_3_INDEX       0x0000005C
#define RIU_HBF_160_PCOEF_3_RESET       0x05FE3FF0

static inline u32 riu_hbf_160_pcoef_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_3_ADDR);
}

static inline void riu_hbf_160_pcoef_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_3_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_3_HBF_160_PCOEF_3_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_3_HBF_160_PCOEF_3_LSB    0
#define RIU_HBF_160_PCOEF_3_HBF_160_PCOEF_3_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_3_HBF_160_PCOEF_3_RST    0x05fe3ff0

static inline u32 riu_hbf_160_pcoef_3_hbf_160_pcoef_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_3_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_3_hbf_160_pcoef_3_setf(struct cl_chip *chip, u32 hbf160pcoef3)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef3 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_3_ADDR, (u32)hbf160pcoef3 << 0);
}

/**
 * @brief HBF_160_PCOEF_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF4             0xdffe8090
 * </pre>
 */
#define RIU_HBF_160_PCOEF_4_ADDR        (REG_RIU_BASE_ADDR + 0x00000174)
#define RIU_HBF_160_PCOEF_4_OFFSET      0x00000174
#define RIU_HBF_160_PCOEF_4_INDEX       0x0000005D
#define RIU_HBF_160_PCOEF_4_RESET       0xDFFE8090

static inline u32 riu_hbf_160_pcoef_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_4_ADDR);
}

static inline void riu_hbf_160_pcoef_4_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_4_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_4_HBF_160_PCOEF_4_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_4_HBF_160_PCOEF_4_LSB    0
#define RIU_HBF_160_PCOEF_4_HBF_160_PCOEF_4_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_4_HBF_160_PCOEF_4_RST    0xdffe8090

static inline u32 riu_hbf_160_pcoef_4_hbf_160_pcoef_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_4_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_4_hbf_160_pcoef_4_setf(struct cl_chip *chip, u32 hbf160pcoef4)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef4 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_4_ADDR, (u32)hbf160pcoef4 << 0);
}

/**
 * @brief HBF_160_PCOEF_5 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF5             0xe80a007f
 * </pre>
 */
#define RIU_HBF_160_PCOEF_5_ADDR        (REG_RIU_BASE_ADDR + 0x00000178)
#define RIU_HBF_160_PCOEF_5_OFFSET      0x00000178
#define RIU_HBF_160_PCOEF_5_INDEX       0x0000005E
#define RIU_HBF_160_PCOEF_5_RESET       0xE80A007F

static inline u32 riu_hbf_160_pcoef_5_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_5_ADDR);
}

static inline void riu_hbf_160_pcoef_5_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_5_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_5_HBF_160_PCOEF_5_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_5_HBF_160_PCOEF_5_LSB    0
#define RIU_HBF_160_PCOEF_5_HBF_160_PCOEF_5_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_5_HBF_160_PCOEF_5_RST    0xe80a007f

static inline u32 riu_hbf_160_pcoef_5_hbf_160_pcoef_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_5_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_5_hbf_160_pcoef_5_setf(struct cl_chip *chip, u32 hbf160pcoef5)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef5 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_5_ADDR, (u32)hbf160pcoef5 << 0);
}

/**
 * @brief HBF_160_PCOEF_6 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF6             0xc007fd7f
 * </pre>
 */
#define RIU_HBF_160_PCOEF_6_ADDR        (REG_RIU_BASE_ADDR + 0x0000017C)
#define RIU_HBF_160_PCOEF_6_OFFSET      0x0000017C
#define RIU_HBF_160_PCOEF_6_INDEX       0x0000005F
#define RIU_HBF_160_PCOEF_6_RESET       0xC007FD7F

static inline u32 riu_hbf_160_pcoef_6_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_6_ADDR);
}

static inline void riu_hbf_160_pcoef_6_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_6_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_6_HBF_160_PCOEF_6_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_6_HBF_160_PCOEF_6_LSB    0
#define RIU_HBF_160_PCOEF_6_HBF_160_PCOEF_6_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_6_HBF_160_PCOEF_6_RST    0xc007fd7f

static inline u32 riu_hbf_160_pcoef_6_hbf_160_pcoef_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_6_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_6_hbf_160_pcoef_6_setf(struct cl_chip *chip, u32 hbf160pcoef6)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef6 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_6_ADDR, (u32)hbf160pcoef6 << 0);
}

/**
 * @brief HBF_160_PCOEF_7 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF7             0x9fcffe80
 * </pre>
 */
#define RIU_HBF_160_PCOEF_7_ADDR        (REG_RIU_BASE_ADDR + 0x00000180)
#define RIU_HBF_160_PCOEF_7_OFFSET      0x00000180
#define RIU_HBF_160_PCOEF_7_INDEX       0x00000060
#define RIU_HBF_160_PCOEF_7_RESET       0x9FCFFE80

static inline u32 riu_hbf_160_pcoef_7_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_7_ADDR);
}

static inline void riu_hbf_160_pcoef_7_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_7_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_7_HBF_160_PCOEF_7_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_7_HBF_160_PCOEF_7_LSB    0
#define RIU_HBF_160_PCOEF_7_HBF_160_PCOEF_7_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_7_HBF_160_PCOEF_7_RST    0x9fcffe80

static inline u32 riu_hbf_160_pcoef_7_hbf_160_pcoef_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_7_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_7_hbf_160_pcoef_7_setf(struct cl_chip *chip, u32 hbf160pcoef7)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef7 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_7_ADDR, (u32)hbf160pcoef7 << 0);
}

/**
 * @brief HBF_160_PCOEF_8 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF8             0x3fe80e00
 * </pre>
 */
#define RIU_HBF_160_PCOEF_8_ADDR        (REG_RIU_BASE_ADDR + 0x00000184)
#define RIU_HBF_160_PCOEF_8_OFFSET      0x00000184
#define RIU_HBF_160_PCOEF_8_INDEX       0x00000061
#define RIU_HBF_160_PCOEF_8_RESET       0x3FE80E00

static inline u32 riu_hbf_160_pcoef_8_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_8_ADDR);
}

static inline void riu_hbf_160_pcoef_8_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_8_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_8_HBF_160_PCOEF_8_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_8_HBF_160_PCOEF_8_LSB    0
#define RIU_HBF_160_PCOEF_8_HBF_160_PCOEF_8_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_8_HBF_160_PCOEF_8_RST    0x3fe80e00

static inline u32 riu_hbf_160_pcoef_8_hbf_160_pcoef_8_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_8_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_8_hbf_160_pcoef_8_setf(struct cl_chip *chip, u32 hbf160pcoef8)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef8 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_8_ADDR, (u32)hbf160pcoef8 << 0);
}

/**
 * @brief HBF_160_PCOEF_9 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF9             0x812007fc
 * </pre>
 */
#define RIU_HBF_160_PCOEF_9_ADDR        (REG_RIU_BASE_ADDR + 0x00000188)
#define RIU_HBF_160_PCOEF_9_OFFSET      0x00000188
#define RIU_HBF_160_PCOEF_9_INDEX       0x00000062
#define RIU_HBF_160_PCOEF_9_RESET       0x812007FC

static inline u32 riu_hbf_160_pcoef_9_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_9_ADDR);
}

static inline void riu_hbf_160_pcoef_9_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_9_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_9_HBF_160_PCOEF_9_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_9_HBF_160_PCOEF_9_LSB    0
#define RIU_HBF_160_PCOEF_9_HBF_160_PCOEF_9_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_9_HBF_160_PCOEF_9_RST    0x812007fc

static inline u32 riu_hbf_160_pcoef_9_hbf_160_pcoef_9_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_9_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_9_hbf_160_pcoef_9_setf(struct cl_chip *chip, u32 hbf160pcoef9)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef9 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_9_ADDR, (u32)hbf160pcoef9 << 0);
}

/**
 * @brief HBF_160_PCOEF_10 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF10            0x009fb3fe
 * </pre>
 */
#define RIU_HBF_160_PCOEF_10_ADDR        (REG_RIU_BASE_ADDR + 0x0000018C)
#define RIU_HBF_160_PCOEF_10_OFFSET      0x0000018C
#define RIU_HBF_160_PCOEF_10_INDEX       0x00000063
#define RIU_HBF_160_PCOEF_10_RESET       0x009FB3FE

static inline u32 riu_hbf_160_pcoef_10_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_10_ADDR);
}

static inline void riu_hbf_160_pcoef_10_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_10_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_10_HBF_160_PCOEF_10_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_10_HBF_160_PCOEF_10_LSB    0
#define RIU_HBF_160_PCOEF_10_HBF_160_PCOEF_10_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_10_HBF_160_PCOEF_10_RST    0x009fb3fe

static inline u32 riu_hbf_160_pcoef_10_hbf_160_pcoef_10_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_10_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_10_hbf_160_pcoef_10_setf(struct cl_chip *chip, u32 hbf160pcoef10)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef10 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_10_ADDR, (u32)hbf160pcoef10 << 0);
}

/**
 * @brief HBF_160_PCOEF_11 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF11            0xf93fe818
 * </pre>
 */
#define RIU_HBF_160_PCOEF_11_ADDR        (REG_RIU_BASE_ADDR + 0x00000190)
#define RIU_HBF_160_PCOEF_11_OFFSET      0x00000190
#define RIU_HBF_160_PCOEF_11_INDEX       0x00000064
#define RIU_HBF_160_PCOEF_11_RESET       0xF93FE818

static inline u32 riu_hbf_160_pcoef_11_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_11_ADDR);
}

static inline void riu_hbf_160_pcoef_11_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_11_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_11_HBF_160_PCOEF_11_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_11_HBF_160_PCOEF_11_LSB    0
#define RIU_HBF_160_PCOEF_11_HBF_160_PCOEF_11_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_11_HBF_160_PCOEF_11_RST    0xf93fe818

static inline u32 riu_hbf_160_pcoef_11_hbf_160_pcoef_11_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_11_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_11_hbf_160_pcoef_11_setf(struct cl_chip *chip, u32 hbf160pcoef11)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef11 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_11_ADDR, (u32)hbf160pcoef11 << 0);
}

/**
 * @brief HBF_160_PCOEF_12 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF12            0xfe023009
 * </pre>
 */
#define RIU_HBF_160_PCOEF_12_ADDR        (REG_RIU_BASE_ADDR + 0x00000194)
#define RIU_HBF_160_PCOEF_12_OFFSET      0x00000194
#define RIU_HBF_160_PCOEF_12_INDEX       0x00000065
#define RIU_HBF_160_PCOEF_12_RESET       0xFE023009

static inline u32 riu_hbf_160_pcoef_12_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_12_ADDR);
}

static inline void riu_hbf_160_pcoef_12_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_12_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_12_HBF_160_PCOEF_12_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_12_HBF_160_PCOEF_12_LSB    0
#define RIU_HBF_160_PCOEF_12_HBF_160_PCOEF_12_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_12_HBF_160_PCOEF_12_RST    0xfe023009

static inline u32 riu_hbf_160_pcoef_12_hbf_160_pcoef_12_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_12_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_12_hbf_160_pcoef_12_setf(struct cl_chip *chip, u32 hbf160pcoef12)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef12 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_12_ADDR, (u32)hbf160pcoef12 << 0);
}

/**
 * @brief HBF_160_PCOEF_13 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF13            0x40009f4f
 * </pre>
 */
#define RIU_HBF_160_PCOEF_13_ADDR        (REG_RIU_BASE_ADDR + 0x00000198)
#define RIU_HBF_160_PCOEF_13_OFFSET      0x00000198
#define RIU_HBF_160_PCOEF_13_INDEX       0x00000066
#define RIU_HBF_160_PCOEF_13_RESET       0x40009F4F

static inline u32 riu_hbf_160_pcoef_13_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_13_ADDR);
}

static inline void riu_hbf_160_pcoef_13_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_13_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_13_HBF_160_PCOEF_13_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_13_HBF_160_PCOEF_13_LSB    0
#define RIU_HBF_160_PCOEF_13_HBF_160_PCOEF_13_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_13_HBF_160_PCOEF_13_RST    0x40009f4f

static inline u32 riu_hbf_160_pcoef_13_hbf_160_pcoef_13_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_13_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_13_hbf_160_pcoef_13_setf(struct cl_chip *chip, u32 hbf160pcoef13)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef13 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_13_ADDR, (u32)hbf160pcoef13 << 0);
}

/**
 * @brief HBF_160_PCOEF_14 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HBF160_PCOEF14            0x11e63fe8
 * </pre>
 */
#define RIU_HBF_160_PCOEF_14_ADDR        (REG_RIU_BASE_ADDR + 0x0000019C)
#define RIU_HBF_160_PCOEF_14_OFFSET      0x0000019C
#define RIU_HBF_160_PCOEF_14_INDEX       0x00000067
#define RIU_HBF_160_PCOEF_14_RESET       0x11E63FE8

static inline u32 riu_hbf_160_pcoef_14_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_14_ADDR);
}

static inline void riu_hbf_160_pcoef_14_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_14_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_14_HBF_160_PCOEF_14_MASK    ((u32)0xFFFFFFFF)
#define RIU_HBF_160_PCOEF_14_HBF_160_PCOEF_14_LSB    0
#define RIU_HBF_160_PCOEF_14_HBF_160_PCOEF_14_WIDTH    ((u32)0x00000020)

#define RIU_HBF_160_PCOEF_14_HBF_160_PCOEF_14_RST    0x11e63fe8

static inline u32 riu_hbf_160_pcoef_14_hbf_160_pcoef_14_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_14_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_14_hbf_160_pcoef_14_setf(struct cl_chip *chip, u32 hbf160pcoef14)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef14 << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_14_ADDR, (u32)hbf160pcoef14 << 0);
}

/**
 * @brief HBF_160_PCOEF_15 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25:00 HBF160_PCOEF15            0x0fd1460
 * </pre>
 */
#define RIU_HBF_160_PCOEF_15_ADDR        (REG_RIU_BASE_ADDR + 0x000001A0)
#define RIU_HBF_160_PCOEF_15_OFFSET      0x000001A0
#define RIU_HBF_160_PCOEF_15_INDEX       0x00000068
#define RIU_HBF_160_PCOEF_15_RESET       0x00FD1460

static inline u32 riu_hbf_160_pcoef_15_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_15_ADDR);
}

static inline void riu_hbf_160_pcoef_15_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_15_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_15_HBF_160_PCOEF_15_MASK    ((u32)0x03FFFFFF)
#define RIU_HBF_160_PCOEF_15_HBF_160_PCOEF_15_LSB    0
#define RIU_HBF_160_PCOEF_15_HBF_160_PCOEF_15_WIDTH    ((u32)0x0000001A)

#define RIU_HBF_160_PCOEF_15_HBF_160_PCOEF_15_RST    0x0fd1460

static inline u32 riu_hbf_160_pcoef_15_hbf_160_pcoef_15_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_15_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_15_hbf_160_pcoef_15_setf(struct cl_chip *chip, u32 hbf160pcoef15)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef15 << 0) & ~((u32)0x03FFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_15_ADDR, (u32)hbf160pcoef15 << 0);
}

/**
 * @brief RSF_CONF_0 register definition
 *  ReSampling Filter configuration register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:07 RSF_OFFSET                0x0
 *    06:00 RSF_DELAY                 0x0
 * </pre>
 */
#define RIU_RSF_CONF_0_ADDR        (REG_RIU_BASE_ADDR + 0x000001A4)
#define RIU_RSF_CONF_0_OFFSET      0x000001A4
#define RIU_RSF_CONF_0_INDEX       0x00000069
#define RIU_RSF_CONF_0_RESET       0x00000000

static inline u32 riu_rsf_conf_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RSF_CONF_0_ADDR);
}

static inline void riu_rsf_conf_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RSF_CONF_0_ADDR, value);
}

/* Field definitions */
#define RIU_RSF_CONF_0_RSF_OFFSET_MASK      ((u32)0xFFFFFF80)
#define RIU_RSF_CONF_0_RSF_OFFSET_LSB       7
#define RIU_RSF_CONF_0_RSF_OFFSET_WIDTH     ((u32)0x00000019)
#define RIU_RSF_CONF_0_RSF_DELAY_MASK       ((u32)0x0000007F)
#define RIU_RSF_CONF_0_RSF_DELAY_LSB        0
#define RIU_RSF_CONF_0_RSF_DELAY_WIDTH      ((u32)0x00000007)

#define RIU_RSF_CONF_0_RSF_OFFSET_RST       0x0
#define RIU_RSF_CONF_0_RSF_DELAY_RST        0x0

static inline void riu_rsf_conf_0_pack(struct cl_chip *chip, u32 rsf_offset, u8 rsf_delay)
{
	ASSERT_ERR_CHIP((((u32)rsf_offset << 7) & ~((u32)0xFFFFFF80)) == 0);
	ASSERT_ERR_CHIP((((u32)rsf_delay << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RSF_CONF_0_ADDR, ((u32)rsf_offset << 7) | ((u32)rsf_delay << 0));
}

static inline void riu_rsf_conf_0_unpack(struct cl_chip *chip, u32 *rsf_offset, u8 *rsf_delay)
{
	u32 local_val = cl_reg_read(chip, RIU_RSF_CONF_0_ADDR);

	*rsf_offset = (local_val & ((u32)0xFFFFFF80)) >> 7;
	*rsf_delay = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u32 riu_rsf_conf_0_rsf_offset_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RSF_CONF_0_ADDR);

	return (u32)((local_val & ((u32)0xFFFFFF80)) >> 7);
}

static inline void riu_rsf_conf_0_rsf_offset_setf(struct cl_chip *chip, u32 rsfoffset)
{
	ASSERT_ERR_CHIP((((u32)rsfoffset << 7) & ~((u32)0xFFFFFF80)) == 0);
	cl_reg_write(chip, RIU_RSF_CONF_0_ADDR, (cl_reg_read(chip, RIU_RSF_CONF_0_ADDR) & ~((u32)0xFFFFFF80)) | ((u32)rsfoffset << 7));
}

static inline u8 riu_rsf_conf_0_rsf_delay_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RSF_CONF_0_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rsf_conf_0_rsf_delay_setf(struct cl_chip *chip, u8 rsfdelay)
{
	ASSERT_ERR_CHIP((((u32)rsfdelay << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RSF_CONF_0_ADDR, (cl_reg_read(chip, RIU_RSF_CONF_0_ADDR) & ~((u32)0x0000007F)) | ((u32)rsfdelay << 0));
}

/**
 * @brief RSF_CONTROL register definition
 *  resampling filter operation mode register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    rsf_init_en               1
 *    07    rsf_tx_bypass_type        0
 *    06    rsf_tx_bypass_mode        1
 *    05    rsf_rx_bypass_type        0
 *    04    rsf_rx_bypass_mode        1
 *    01    rsf_rx_ctl_from_reg       1
 * </pre>
 */
#define RIU_RSF_CONTROL_ADDR        (REG_RIU_BASE_ADDR + 0x000001A8)
#define RIU_RSF_CONTROL_OFFSET      0x000001A8
#define RIU_RSF_CONTROL_INDEX       0x0000006A
#define RIU_RSF_CONTROL_RESET       0x80000053

static inline u32 riu_rsf_control_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RSF_CONTROL_ADDR);
}

static inline void riu_rsf_control_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RSF_CONTROL_ADDR, value);
}

/* Field definitions */
#define RIU_RSF_CONTROL_RSF_INIT_EN_BIT     ((u32)0x80000000)
#define RIU_RSF_CONTROL_RSF_INIT_EN_POS     31
#define RIU_RSF_CONTROL_RSF_TX_BYPASS_TYPE_BIT    ((u32)0x00000080)
#define RIU_RSF_CONTROL_RSF_TX_BYPASS_TYPE_POS    7
#define RIU_RSF_CONTROL_RSF_TX_BYPASS_MODE_BIT    ((u32)0x00000040)
#define RIU_RSF_CONTROL_RSF_TX_BYPASS_MODE_POS    6
#define RIU_RSF_CONTROL_RSF_RX_BYPASS_TYPE_BIT    ((u32)0x00000020)
#define RIU_RSF_CONTROL_RSF_RX_BYPASS_TYPE_POS    5
#define RIU_RSF_CONTROL_RSF_RX_BYPASS_MODE_BIT    ((u32)0x00000010)
#define RIU_RSF_CONTROL_RSF_RX_BYPASS_MODE_POS    4
#define RIU_RSF_CONTROL_RSF_RX_CTL_FROM_REG_BIT    ((u32)0x00000002)
#define RIU_RSF_CONTROL_RSF_RX_CTL_FROM_REG_POS    1

#define RIU_RSF_CONTROL_RSF_INIT_EN_RST     0x1
#define RIU_RSF_CONTROL_RSF_TX_BYPASS_TYPE_RST    0x0
#define RIU_RSF_CONTROL_RSF_TX_BYPASS_MODE_RST    0x1
#define RIU_RSF_CONTROL_RSF_RX_BYPASS_TYPE_RST    0x0
#define RIU_RSF_CONTROL_RSF_RX_BYPASS_MODE_RST    0x1
#define RIU_RSF_CONTROL_RSF_RX_CTL_FROM_REG_RST    0x1

static inline void riu_rsf_control_pack(struct cl_chip *chip, u8 rsf_init_en, u8 rsf_tx_bypass_type, u8 rsf_tx_bypass_mode, u8 rsf_rx_bypass_type, u8 rsf_rx_bypass_mode, u8 rsf_rx_ctl_from_reg)
{
	ASSERT_ERR_CHIP((((u32)rsf_init_en << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rsf_tx_bypass_type << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)rsf_tx_bypass_mode << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)rsf_rx_bypass_type << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)rsf_rx_bypass_mode << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)rsf_rx_ctl_from_reg << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_RSF_CONTROL_ADDR, ((u32)rsf_init_en << 31) | ((u32)rsf_tx_bypass_type << 7) | ((u32)rsf_tx_bypass_mode << 6) | ((u32)rsf_rx_bypass_type << 5) | ((u32)rsf_rx_bypass_mode << 4) | ((u32)rsf_rx_ctl_from_reg << 1));
}

static inline void riu_rsf_control_unpack(struct cl_chip *chip, u8 *rsf_init_en, u8 *rsf_tx_bypass_type, u8 *rsf_tx_bypass_mode, u8 *rsf_rx_bypass_type, u8 *rsf_rx_bypass_mode, u8 *rsf_rx_ctl_from_reg)
{
	u32 local_val = cl_reg_read(chip, RIU_RSF_CONTROL_ADDR);

	*rsf_init_en = (local_val & ((u32)0x80000000)) >> 31;
	*rsf_tx_bypass_type = (local_val & ((u32)0x00000080)) >> 7;
	*rsf_tx_bypass_mode = (local_val & ((u32)0x00000040)) >> 6;
	*rsf_rx_bypass_type = (local_val & ((u32)0x00000020)) >> 5;
	*rsf_rx_bypass_mode = (local_val & ((u32)0x00000010)) >> 4;
	*rsf_rx_ctl_from_reg = (local_val & ((u32)0x00000002)) >> 1;
}

static inline u8 riu_rsf_control_rsf_init_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RSF_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_rsf_control_rsf_init_en_setf(struct cl_chip *chip, u8 rsfiniten)
{
	ASSERT_ERR_CHIP((((u32)rsfiniten << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_RSF_CONTROL_ADDR, (cl_reg_read(chip, RIU_RSF_CONTROL_ADDR) & ~((u32)0x80000000)) | ((u32)rsfiniten << 31));
}

static inline u8 riu_rsf_control_rsf_tx_bypass_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RSF_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void riu_rsf_control_rsf_tx_bypass_type_setf(struct cl_chip *chip, u8 rsftxbypasstype)
{
	ASSERT_ERR_CHIP((((u32)rsftxbypasstype << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RIU_RSF_CONTROL_ADDR, (cl_reg_read(chip, RIU_RSF_CONTROL_ADDR) & ~((u32)0x00000080)) | ((u32)rsftxbypasstype << 7));
}

static inline u8 riu_rsf_control_rsf_tx_bypass_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RSF_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void riu_rsf_control_rsf_tx_bypass_mode_setf(struct cl_chip *chip, u8 rsftxbypassmode)
{
	ASSERT_ERR_CHIP((((u32)rsftxbypassmode << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RIU_RSF_CONTROL_ADDR, (cl_reg_read(chip, RIU_RSF_CONTROL_ADDR) & ~((u32)0x00000040)) | ((u32)rsftxbypassmode << 6));
}

static inline u8 riu_rsf_control_rsf_rx_bypass_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RSF_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void riu_rsf_control_rsf_rx_bypass_type_setf(struct cl_chip *chip, u8 rsfrxbypasstype)
{
	ASSERT_ERR_CHIP((((u32)rsfrxbypasstype << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RIU_RSF_CONTROL_ADDR, (cl_reg_read(chip, RIU_RSF_CONTROL_ADDR) & ~((u32)0x00000020)) | ((u32)rsfrxbypasstype << 5));
}

static inline u8 riu_rsf_control_rsf_rx_bypass_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RSF_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void riu_rsf_control_rsf_rx_bypass_mode_setf(struct cl_chip *chip, u8 rsfrxbypassmode)
{
	ASSERT_ERR_CHIP((((u32)rsfrxbypassmode << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RIU_RSF_CONTROL_ADDR, (cl_reg_read(chip, RIU_RSF_CONTROL_ADDR) & ~((u32)0x00000010)) | ((u32)rsfrxbypassmode << 4));
}

static inline u8 riu_rsf_control_rsf_rx_ctl_from_reg_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RSF_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void riu_rsf_control_rsf_rx_ctl_from_reg_setf(struct cl_chip *chip, u8 rsfrxctlfromreg)
{
	ASSERT_ERR_CHIP((((u32)rsfrxctlfromreg << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_RSF_CONTROL_ADDR, (cl_reg_read(chip, RIU_RSF_CONTROL_ADDR) & ~((u32)0x00000002)) | ((u32)rsfrxctlfromreg << 1));
}

/**
 * @brief RSF_INIT register definition
 *  resampling filter initialization data register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RSF_INIT_DATA             0x0
 * </pre>
 */
#define RIU_RSF_INIT_ADDR        (REG_RIU_BASE_ADDR + 0x000001AC)
#define RIU_RSF_INIT_OFFSET      0x000001AC
#define RIU_RSF_INIT_INDEX       0x0000006B
#define RIU_RSF_INIT_RESET       0x00000000

static inline u32 riu_rsf_init_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RSF_INIT_ADDR);
}

static inline void riu_rsf_init_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RSF_INIT_ADDR, value);
}

/* Field definitions */
#define RIU_RSF_INIT_RSF_INIT_DATA_MASK     ((u32)0xFFFFFFFF)
#define RIU_RSF_INIT_RSF_INIT_DATA_LSB      0
#define RIU_RSF_INIT_RSF_INIT_DATA_WIDTH    ((u32)0x00000020)

#define RIU_RSF_INIT_RSF_INIT_DATA_RST      0x0

static inline u32 riu_rsf_init_rsf_init_data_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RSF_INIT_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_rsf_init_rsf_init_data_setf(struct cl_chip *chip, u32 rsfinitdata)
{
	ASSERT_ERR_CHIP((((u32)rsfinitdata << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_RSF_INIT_ADDR, (u32)rsfinitdata << 0);
}

/**
 * @brief AGCFSM_RAM_INIT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    AGC_FSM_RAM_INIT_EN       0
 *    29    AGC_FSM_RAM_INIT_AINC2    0
 *    28    AGC_FSM_RAM_INIT_AINC1    0
 *    12    AGC_FSM_RAM_INIT_WPTR_SET 0
 *    10:00 AGC_FSM_RAM_INIT_WPTR     0x0
 * </pre>
 */
#define RIU_AGCFSM_RAM_INIT_1_ADDR        (REG_RIU_BASE_ADDR + 0x000001B0)
#define RIU_AGCFSM_RAM_INIT_1_OFFSET      0x000001B0
#define RIU_AGCFSM_RAM_INIT_1_INDEX       0x0000006C
#define RIU_AGCFSM_RAM_INIT_1_RESET       0x00000000

static inline u32 riu_agcfsm_ram_init_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_RAM_INIT_1_ADDR);
}

static inline void riu_agcfsm_ram_init_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_RAM_INIT_1_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_RAM_INIT_1_AGC_FSM_RAM_INIT_EN_BIT    ((u32)0x80000000)
#define RIU_AGCFSM_RAM_INIT_1_AGC_FSM_RAM_INIT_EN_POS    31
#define RIU_AGCFSM_RAM_INIT_1_AGC_FSM_RAM_INIT_AINC_2_BIT    ((u32)0x20000000)
#define RIU_AGCFSM_RAM_INIT_1_AGC_FSM_RAM_INIT_AINC_2_POS    29
#define RIU_AGCFSM_RAM_INIT_1_AGC_FSM_RAM_INIT_AINC_1_BIT    ((u32)0x10000000)
#define RIU_AGCFSM_RAM_INIT_1_AGC_FSM_RAM_INIT_AINC_1_POS    28
#define RIU_AGCFSM_RAM_INIT_1_AGC_FSM_RAM_INIT_WPTR_SET_BIT    ((u32)0x00001000)
#define RIU_AGCFSM_RAM_INIT_1_AGC_FSM_RAM_INIT_WPTR_SET_POS    12
#define RIU_AGCFSM_RAM_INIT_1_AGC_FSM_RAM_INIT_WPTR_MASK    ((u32)0x000007FF)
#define RIU_AGCFSM_RAM_INIT_1_AGC_FSM_RAM_INIT_WPTR_LSB    0
#define RIU_AGCFSM_RAM_INIT_1_AGC_FSM_RAM_INIT_WPTR_WIDTH    ((u32)0x0000000B)

#define RIU_AGCFSM_RAM_INIT_1_AGC_FSM_RAM_INIT_EN_RST    0x0
#define RIU_AGCFSM_RAM_INIT_1_AGC_FSM_RAM_INIT_AINC_2_RST    0x0
#define RIU_AGCFSM_RAM_INIT_1_AGC_FSM_RAM_INIT_AINC_1_RST    0x0
#define RIU_AGCFSM_RAM_INIT_1_AGC_FSM_RAM_INIT_WPTR_SET_RST    0x0
#define RIU_AGCFSM_RAM_INIT_1_AGC_FSM_RAM_INIT_WPTR_RST    0x0

static inline void riu_agcfsm_ram_init_1_pack(struct cl_chip *chip, u8 agc_fsm_ram_init_en, u8 agc_fsm_ram_init_ainc2, u8 agc_fsm_ram_init_ainc1, u8 agc_fsm_ram_init_wptr_set, u16 agc_fsm_ram_init_wptr)
{
	ASSERT_ERR_CHIP((((u32)agc_fsm_ram_init_en << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)agc_fsm_ram_init_ainc2 << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)agc_fsm_ram_init_ainc1 << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)agc_fsm_ram_init_wptr_set << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)agc_fsm_ram_init_wptr << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_RAM_INIT_1_ADDR, ((u32)agc_fsm_ram_init_en << 31) | ((u32)agc_fsm_ram_init_ainc2 << 29) | ((u32)agc_fsm_ram_init_ainc1 << 28) | ((u32)agc_fsm_ram_init_wptr_set << 12) | ((u32)agc_fsm_ram_init_wptr << 0));
}

static inline void riu_agcfsm_ram_init_1_unpack(struct cl_chip *chip, u8 *agc_fsm_ram_init_en, u8 *agc_fsm_ram_init_ainc2, u8 *agc_fsm_ram_init_ainc1, u8 *agc_fsm_ram_init_wptr_set, u16 *agc_fsm_ram_init_wptr)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_RAM_INIT_1_ADDR);

	*agc_fsm_ram_init_en = (local_val & ((u32)0x80000000)) >> 31;
	*agc_fsm_ram_init_ainc2 = (local_val & ((u32)0x20000000)) >> 29;
	*agc_fsm_ram_init_ainc1 = (local_val & ((u32)0x10000000)) >> 28;
	*agc_fsm_ram_init_wptr_set = (local_val & ((u32)0x00001000)) >> 12;
	*agc_fsm_ram_init_wptr = (local_val & ((u32)0x000007FF)) >> 0;
}

static inline u8 riu_agcfsm_ram_init_1_agc_fsm_ram_init_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_RAM_INIT_1_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_agcfsm_ram_init_1_agc_fsm_ram_init_en_setf(struct cl_chip *chip, u8 agcfsmraminiten)
{
	ASSERT_ERR_CHIP((((u32)agcfsmraminiten << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_RAM_INIT_1_ADDR, (cl_reg_read(chip, RIU_AGCFSM_RAM_INIT_1_ADDR) & ~((u32)0x80000000)) | ((u32)agcfsmraminiten << 31));
}

static inline u8 riu_agcfsm_ram_init_1_agc_fsm_ram_init_ainc_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_RAM_INIT_1_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void riu_agcfsm_ram_init_1_agc_fsm_ram_init_ainc_2_setf(struct cl_chip *chip, u8 agcfsmraminitainc2)
{
	ASSERT_ERR_CHIP((((u32)agcfsmraminitainc2 << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_RAM_INIT_1_ADDR, (cl_reg_read(chip, RIU_AGCFSM_RAM_INIT_1_ADDR) & ~((u32)0x20000000)) | ((u32)agcfsmraminitainc2 << 29));
}

static inline u8 riu_agcfsm_ram_init_1_agc_fsm_ram_init_ainc_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_RAM_INIT_1_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void riu_agcfsm_ram_init_1_agc_fsm_ram_init_ainc_1_setf(struct cl_chip *chip, u8 agcfsmraminitainc1)
{
	ASSERT_ERR_CHIP((((u32)agcfsmraminitainc1 << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_RAM_INIT_1_ADDR, (cl_reg_read(chip, RIU_AGCFSM_RAM_INIT_1_ADDR) & ~((u32)0x10000000)) | ((u32)agcfsmraminitainc1 << 28));
}

static inline u8 riu_agcfsm_ram_init_1_agc_fsm_ram_init_wptr_set_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_RAM_INIT_1_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void riu_agcfsm_ram_init_1_agc_fsm_ram_init_wptr_set_setf(struct cl_chip *chip, u8 agcfsmraminitwptrset)
{
	ASSERT_ERR_CHIP((((u32)agcfsmraminitwptrset << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_RAM_INIT_1_ADDR, (cl_reg_read(chip, RIU_AGCFSM_RAM_INIT_1_ADDR) & ~((u32)0x00001000)) | ((u32)agcfsmraminitwptrset << 12));
}

static inline u16 riu_agcfsm_ram_init_1_agc_fsm_ram_init_wptr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_RAM_INIT_1_ADDR);

	return (u16)((local_val & ((u32)0x000007FF)) >> 0);
}

static inline void riu_agcfsm_ram_init_1_agc_fsm_ram_init_wptr_setf(struct cl_chip *chip, u16 agcfsmraminitwptr)
{
	ASSERT_ERR_CHIP((((u32)agcfsmraminitwptr << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_RAM_INIT_1_ADDR, (cl_reg_read(chip, RIU_AGCFSM_RAM_INIT_1_ADDR) & ~((u32)0x000007FF)) | ((u32)agcfsmraminitwptr << 0));
}

/**
 * @brief AGCFSM_RAM_INIT_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 AGC_FSM_RAM_INIT_WDATA    0x0
 * </pre>
 */
#define RIU_AGCFSM_RAM_INIT_2_ADDR        (REG_RIU_BASE_ADDR + 0x000001B4)
#define RIU_AGCFSM_RAM_INIT_2_OFFSET      0x000001B4
#define RIU_AGCFSM_RAM_INIT_2_INDEX       0x0000006D
#define RIU_AGCFSM_RAM_INIT_2_RESET       0x00000000

static inline u32 riu_agcfsm_ram_init_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_RAM_INIT_2_ADDR);
}

static inline void riu_agcfsm_ram_init_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_RAM_INIT_2_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_RAM_INIT_2_AGC_FSM_RAM_INIT_WDATA_MASK    ((u32)0xFFFFFFFF)
#define RIU_AGCFSM_RAM_INIT_2_AGC_FSM_RAM_INIT_WDATA_LSB    0
#define RIU_AGCFSM_RAM_INIT_2_AGC_FSM_RAM_INIT_WDATA_WIDTH    ((u32)0x00000020)

#define RIU_AGCFSM_RAM_INIT_2_AGC_FSM_RAM_INIT_WDATA_RST    0x0

static inline u32 riu_agcfsm_ram_init_2_agc_fsm_ram_init_wdata_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_RAM_INIT_2_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_agcfsm_ram_init_2_agc_fsm_ram_init_wdata_setf(struct cl_chip *chip, u32 agcfsmraminitwdata)
{
	ASSERT_ERR_CHIP((((u32)agcfsmraminitwdata << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_RAM_INIT_2_ADDR, (u32)agcfsmraminitwdata << 0);
}

/**
 * @brief AGCFSM_RAM_INIT_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 AGC_FSM_RAM_INIT_RDATA    0x0
 * </pre>
 */
#define RIU_AGCFSM_RAM_INIT_3_ADDR        (REG_RIU_BASE_ADDR + 0x000001B8)
#define RIU_AGCFSM_RAM_INIT_3_OFFSET      0x000001B8
#define RIU_AGCFSM_RAM_INIT_3_INDEX       0x0000006E
#define RIU_AGCFSM_RAM_INIT_3_RESET       0x00000000

static inline u32 riu_agcfsm_ram_init_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_RAM_INIT_3_ADDR);
}

/* Field definitions */
#define RIU_AGCFSM_RAM_INIT_3_AGC_FSM_RAM_INIT_RDATA_MASK    ((u32)0xFFFFFFFF)
#define RIU_AGCFSM_RAM_INIT_3_AGC_FSM_RAM_INIT_RDATA_LSB    0
#define RIU_AGCFSM_RAM_INIT_3_AGC_FSM_RAM_INIT_RDATA_WIDTH    ((u32)0x00000020)

#define RIU_AGCFSM_RAM_INIT_3_AGC_FSM_RAM_INIT_RDATA_RST    0x0

static inline u32 riu_agcfsm_ram_init_3_agc_fsm_ram_init_rdata_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_RAM_INIT_3_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief LCU_TRIG_DLY_CONF register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 LCU_STOP_TRIG_DELAY       0x0
 *    15:00 LCU_START_TRIG_DELAY      0x0
 * </pre>
 */
#define RIU_LCU_TRIG_DLY_CONF_ADDR        (REG_RIU_BASE_ADDR + 0x000001BC)
#define RIU_LCU_TRIG_DLY_CONF_OFFSET      0x000001BC
#define RIU_LCU_TRIG_DLY_CONF_INDEX       0x0000006F
#define RIU_LCU_TRIG_DLY_CONF_RESET       0x00000000

static inline u32 riu_lcu_trig_dly_conf_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_LCU_TRIG_DLY_CONF_ADDR);
}

static inline void riu_lcu_trig_dly_conf_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_LCU_TRIG_DLY_CONF_ADDR, value);
}

/* Field definitions */
#define RIU_LCU_TRIG_DLY_CONF_LCU_STOP_TRIG_DELAY_MASK    ((u32)0xFFFF0000)
#define RIU_LCU_TRIG_DLY_CONF_LCU_STOP_TRIG_DELAY_LSB    16
#define RIU_LCU_TRIG_DLY_CONF_LCU_STOP_TRIG_DELAY_WIDTH    ((u32)0x00000010)
#define RIU_LCU_TRIG_DLY_CONF_LCU_START_TRIG_DELAY_MASK    ((u32)0x0000FFFF)
#define RIU_LCU_TRIG_DLY_CONF_LCU_START_TRIG_DELAY_LSB    0
#define RIU_LCU_TRIG_DLY_CONF_LCU_START_TRIG_DELAY_WIDTH    ((u32)0x00000010)

#define RIU_LCU_TRIG_DLY_CONF_LCU_STOP_TRIG_DELAY_RST    0x0
#define RIU_LCU_TRIG_DLY_CONF_LCU_START_TRIG_DELAY_RST    0x0

static inline void riu_lcu_trig_dly_conf_pack(struct cl_chip *chip, u16 lcu_stop_trig_delay, u16 lcu_start_trig_delay)
{
	ASSERT_ERR_CHIP((((u32)lcu_stop_trig_delay << 16) & ~((u32)0xFFFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lcu_start_trig_delay << 0) & ~((u32)0x0000FFFF)) == 0);
	cl_reg_write(chip, RIU_LCU_TRIG_DLY_CONF_ADDR, ((u32)lcu_stop_trig_delay << 16) | ((u32)lcu_start_trig_delay << 0));
}

static inline void riu_lcu_trig_dly_conf_unpack(struct cl_chip *chip, u16 *lcu_stop_trig_delay, u16 *lcu_start_trig_delay)
{
	u32 local_val = cl_reg_read(chip, RIU_LCU_TRIG_DLY_CONF_ADDR);

	*lcu_stop_trig_delay = (local_val & ((u32)0xFFFF0000)) >> 16;
	*lcu_start_trig_delay = (local_val & ((u32)0x0000FFFF)) >> 0;
}

static inline u16 riu_lcu_trig_dly_conf_lcu_stop_trig_delay_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LCU_TRIG_DLY_CONF_ADDR);

	return (u16)((local_val & ((u32)0xFFFF0000)) >> 16);
}

static inline void riu_lcu_trig_dly_conf_lcu_stop_trig_delay_setf(struct cl_chip *chip, u16 lcustoptrigdelay)
{
	ASSERT_ERR_CHIP((((u32)lcustoptrigdelay << 16) & ~((u32)0xFFFF0000)) == 0);
	cl_reg_write(chip, RIU_LCU_TRIG_DLY_CONF_ADDR, (cl_reg_read(chip, RIU_LCU_TRIG_DLY_CONF_ADDR) & ~((u32)0xFFFF0000)) | ((u32)lcustoptrigdelay << 16));
}

static inline u16 riu_lcu_trig_dly_conf_lcu_start_trig_delay_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LCU_TRIG_DLY_CONF_ADDR);

	return (u16)((local_val & ((u32)0x0000FFFF)) >> 0);
}

static inline void riu_lcu_trig_dly_conf_lcu_start_trig_delay_setf(struct cl_chip *chip, u16 lcustarttrigdelay)
{
	ASSERT_ERR_CHIP((((u32)lcustarttrigdelay << 0) & ~((u32)0x0000FFFF)) == 0);
	cl_reg_write(chip, RIU_LCU_TRIG_DLY_CONF_ADDR, (cl_reg_read(chip, RIU_LCU_TRIG_DLY_CONF_ADDR) & ~((u32)0x0000FFFF)) | ((u32)lcustarttrigdelay << 0));
}

/**
 * @brief LCU_TRIG_START_CONF register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    LCU_START_TRIG_CLEAR_P    0
 *    29:20 LCU_START_TRIG_STATE      0x0
 *    16    LCU_START_TRIG_DSSS_UNLOCK 0
 *    07:00 LCU_START_TRIG_CMD        0x0
 * </pre>
 */
#define RIU_LCU_TRIG_START_CONF_ADDR        (REG_RIU_BASE_ADDR + 0x000001C0)
#define RIU_LCU_TRIG_START_CONF_OFFSET      0x000001C0
#define RIU_LCU_TRIG_START_CONF_INDEX       0x00000070
#define RIU_LCU_TRIG_START_CONF_RESET       0x00000000

static inline u32 riu_lcu_trig_start_conf_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_LCU_TRIG_START_CONF_ADDR);
}

static inline void riu_lcu_trig_start_conf_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_LCU_TRIG_START_CONF_ADDR, value);
}

/* Field definitions */
#define RIU_LCU_TRIG_START_CONF_LCU_START_TRIG_CLEAR_P_BIT    ((u32)0x80000000)
#define RIU_LCU_TRIG_START_CONF_LCU_START_TRIG_CLEAR_P_POS    31
#define RIU_LCU_TRIG_START_CONF_LCU_START_TRIG_STATE_MASK    ((u32)0x3FF00000)
#define RIU_LCU_TRIG_START_CONF_LCU_START_TRIG_STATE_LSB    20
#define RIU_LCU_TRIG_START_CONF_LCU_START_TRIG_STATE_WIDTH    ((u32)0x0000000A)
#define RIU_LCU_TRIG_START_CONF_LCU_START_TRIG_DSSS_UNLOCK_BIT    ((u32)0x00010000)
#define RIU_LCU_TRIG_START_CONF_LCU_START_TRIG_DSSS_UNLOCK_POS    16
#define RIU_LCU_TRIG_START_CONF_LCU_START_TRIG_CMD_MASK    ((u32)0x000000FF)
#define RIU_LCU_TRIG_START_CONF_LCU_START_TRIG_CMD_LSB    0
#define RIU_LCU_TRIG_START_CONF_LCU_START_TRIG_CMD_WIDTH    ((u32)0x00000008)

#define RIU_LCU_TRIG_START_CONF_LCU_START_TRIG_CLEAR_P_RST    0x0
#define RIU_LCU_TRIG_START_CONF_LCU_START_TRIG_STATE_RST    0x0
#define RIU_LCU_TRIG_START_CONF_LCU_START_TRIG_DSSS_UNLOCK_RST    0x0
#define RIU_LCU_TRIG_START_CONF_LCU_START_TRIG_CMD_RST    0x0

static inline void riu_lcu_trig_start_conf_pack(struct cl_chip *chip, u8 lcu_start_trig_clear_p, u16 lcu_start_trig_state, u8 lcu_start_trig_dsss_unlock, u8 lcu_start_trig_cmd)
{
	ASSERT_ERR_CHIP((((u32)lcu_start_trig_clear_p << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lcu_start_trig_state << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)lcu_start_trig_dsss_unlock << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)lcu_start_trig_cmd << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_LCU_TRIG_START_CONF_ADDR, ((u32)lcu_start_trig_clear_p << 31) | ((u32)lcu_start_trig_state << 20) | ((u32)lcu_start_trig_dsss_unlock << 16) | ((u32)lcu_start_trig_cmd << 0));
}

static inline void riu_lcu_trig_start_conf_unpack(struct cl_chip *chip, u8 *lcu_start_trig_clear_p, u16 *lcu_start_trig_state, u8 *lcu_start_trig_dsss_unlock, u8 *lcu_start_trig_cmd)
{
	u32 local_val = cl_reg_read(chip, RIU_LCU_TRIG_START_CONF_ADDR);

	*lcu_start_trig_clear_p = (local_val & ((u32)0x80000000)) >> 31;
	*lcu_start_trig_state = (local_val & ((u32)0x3FF00000)) >> 20;
	*lcu_start_trig_dsss_unlock = (local_val & ((u32)0x00010000)) >> 16;
	*lcu_start_trig_cmd = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_lcu_trig_start_conf_lcu_start_trig_clear_p_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LCU_TRIG_START_CONF_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_lcu_trig_start_conf_lcu_start_trig_clear_p_setf(struct cl_chip *chip, u8 lcustarttrigclearp)
{
	ASSERT_ERR_CHIP((((u32)lcustarttrigclearp << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_LCU_TRIG_START_CONF_ADDR, (cl_reg_read(chip, RIU_LCU_TRIG_START_CONF_ADDR) & ~((u32)0x80000000)) | ((u32)lcustarttrigclearp << 31));
}

static inline u16 riu_lcu_trig_start_conf_lcu_start_trig_state_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LCU_TRIG_START_CONF_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_lcu_trig_start_conf_lcu_start_trig_state_setf(struct cl_chip *chip, u16 lcustarttrigstate)
{
	ASSERT_ERR_CHIP((((u32)lcustarttrigstate << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_LCU_TRIG_START_CONF_ADDR, (cl_reg_read(chip, RIU_LCU_TRIG_START_CONF_ADDR) & ~((u32)0x3FF00000)) | ((u32)lcustarttrigstate << 20));
}

static inline u8 riu_lcu_trig_start_conf_lcu_start_trig_dsss_unlock_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LCU_TRIG_START_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void riu_lcu_trig_start_conf_lcu_start_trig_dsss_unlock_setf(struct cl_chip *chip, u8 lcustarttrigdsssunlock)
{
	ASSERT_ERR_CHIP((((u32)lcustarttrigdsssunlock << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_LCU_TRIG_START_CONF_ADDR, (cl_reg_read(chip, RIU_LCU_TRIG_START_CONF_ADDR) & ~((u32)0x00010000)) | ((u32)lcustarttrigdsssunlock << 16));
}

static inline u8 riu_lcu_trig_start_conf_lcu_start_trig_cmd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LCU_TRIG_START_CONF_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_lcu_trig_start_conf_lcu_start_trig_cmd_setf(struct cl_chip *chip, u8 lcustarttrigcmd)
{
	ASSERT_ERR_CHIP((((u32)lcustarttrigcmd << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_LCU_TRIG_START_CONF_ADDR, (cl_reg_read(chip, RIU_LCU_TRIG_START_CONF_ADDR) & ~((u32)0x000000FF)) | ((u32)lcustarttrigcmd << 0));
}

/**
 * @brief LCU_TRIG_STOP_CONF register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    LCU_STOP_TRIG_CLEAR_P     0
 *    29:20 LCU_STOP_TRIG_STATE       0x0
 *    16    LCU_STOP_TRIG_DSSS_UNLOCK 0
 *    15:08 LCU_STOP_TRIG_OFDM_UNLOCK 0x0
 *    07:00 LCU_STOP_TRIG_CMD         0x0
 * </pre>
 */
#define RIU_LCU_TRIG_STOP_CONF_ADDR        (REG_RIU_BASE_ADDR + 0x000001C4)
#define RIU_LCU_TRIG_STOP_CONF_OFFSET      0x000001C4
#define RIU_LCU_TRIG_STOP_CONF_INDEX       0x00000071
#define RIU_LCU_TRIG_STOP_CONF_RESET       0x00000000

static inline u32 riu_lcu_trig_stop_conf_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_LCU_TRIG_STOP_CONF_ADDR);
}

static inline void riu_lcu_trig_stop_conf_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_LCU_TRIG_STOP_CONF_ADDR, value);
}

/* Field definitions */
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_CLEAR_P_BIT    ((u32)0x80000000)
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_CLEAR_P_POS    31
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_STATE_MASK    ((u32)0x3FF00000)
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_STATE_LSB    20
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_STATE_WIDTH    ((u32)0x0000000A)
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_DSSS_UNLOCK_BIT    ((u32)0x00010000)
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_DSSS_UNLOCK_POS    16
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_OFDM_UNLOCK_MASK    ((u32)0x0000FF00)
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_OFDM_UNLOCK_LSB    8
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_OFDM_UNLOCK_WIDTH    ((u32)0x00000008)
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_CMD_MASK    ((u32)0x000000FF)
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_CMD_LSB    0
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_CMD_WIDTH    ((u32)0x00000008)

#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_CLEAR_P_RST    0x0
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_STATE_RST    0x0
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_DSSS_UNLOCK_RST    0x0
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_OFDM_UNLOCK_RST    0x0
#define RIU_LCU_TRIG_STOP_CONF_LCU_STOP_TRIG_CMD_RST    0x0

static inline void riu_lcu_trig_stop_conf_pack(struct cl_chip *chip, u8 lcu_stop_trig_clear_p, u16 lcu_stop_trig_state, u8 lcu_stop_trig_dsss_unlock, u8 lcu_stop_trig_ofdm_unlock, u8 lcu_stop_trig_cmd)
{
	ASSERT_ERR_CHIP((((u32)lcu_stop_trig_clear_p << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lcu_stop_trig_state << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)lcu_stop_trig_dsss_unlock << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)lcu_stop_trig_ofdm_unlock << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lcu_stop_trig_cmd << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_LCU_TRIG_STOP_CONF_ADDR, ((u32)lcu_stop_trig_clear_p << 31) | ((u32)lcu_stop_trig_state << 20) | ((u32)lcu_stop_trig_dsss_unlock << 16) | ((u32)lcu_stop_trig_ofdm_unlock << 8) | ((u32)lcu_stop_trig_cmd << 0));
}

static inline void riu_lcu_trig_stop_conf_unpack(struct cl_chip *chip, u8 *lcu_stop_trig_clear_p, u16 *lcu_stop_trig_state, u8 *lcu_stop_trig_dsss_unlock, u8 *lcu_stop_trig_ofdm_unlock, u8 *lcu_stop_trig_cmd)
{
	u32 local_val = cl_reg_read(chip, RIU_LCU_TRIG_STOP_CONF_ADDR);

	*lcu_stop_trig_clear_p = (local_val & ((u32)0x80000000)) >> 31;
	*lcu_stop_trig_state = (local_val & ((u32)0x3FF00000)) >> 20;
	*lcu_stop_trig_dsss_unlock = (local_val & ((u32)0x00010000)) >> 16;
	*lcu_stop_trig_ofdm_unlock = (local_val & ((u32)0x0000FF00)) >> 8;
	*lcu_stop_trig_cmd = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_lcu_trig_stop_conf_lcu_stop_trig_clear_p_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LCU_TRIG_STOP_CONF_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_lcu_trig_stop_conf_lcu_stop_trig_clear_p_setf(struct cl_chip *chip, u8 lcustoptrigclearp)
{
	ASSERT_ERR_CHIP((((u32)lcustoptrigclearp << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_LCU_TRIG_STOP_CONF_ADDR, (cl_reg_read(chip, RIU_LCU_TRIG_STOP_CONF_ADDR) & ~((u32)0x80000000)) | ((u32)lcustoptrigclearp << 31));
}

static inline u16 riu_lcu_trig_stop_conf_lcu_stop_trig_state_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LCU_TRIG_STOP_CONF_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_lcu_trig_stop_conf_lcu_stop_trig_state_setf(struct cl_chip *chip, u16 lcustoptrigstate)
{
	ASSERT_ERR_CHIP((((u32)lcustoptrigstate << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_LCU_TRIG_STOP_CONF_ADDR, (cl_reg_read(chip, RIU_LCU_TRIG_STOP_CONF_ADDR) & ~((u32)0x3FF00000)) | ((u32)lcustoptrigstate << 20));
}

static inline u8 riu_lcu_trig_stop_conf_lcu_stop_trig_dsss_unlock_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LCU_TRIG_STOP_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void riu_lcu_trig_stop_conf_lcu_stop_trig_dsss_unlock_setf(struct cl_chip *chip, u8 lcustoptrigdsssunlock)
{
	ASSERT_ERR_CHIP((((u32)lcustoptrigdsssunlock << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_LCU_TRIG_STOP_CONF_ADDR, (cl_reg_read(chip, RIU_LCU_TRIG_STOP_CONF_ADDR) & ~((u32)0x00010000)) | ((u32)lcustoptrigdsssunlock << 16));
}

static inline u8 riu_lcu_trig_stop_conf_lcu_stop_trig_ofdm_unlock_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LCU_TRIG_STOP_CONF_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_lcu_trig_stop_conf_lcu_stop_trig_ofdm_unlock_setf(struct cl_chip *chip, u8 lcustoptrigofdmunlock)
{
	ASSERT_ERR_CHIP((((u32)lcustoptrigofdmunlock << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_LCU_TRIG_STOP_CONF_ADDR, (cl_reg_read(chip, RIU_LCU_TRIG_STOP_CONF_ADDR) & ~((u32)0x0000FF00)) | ((u32)lcustoptrigofdmunlock << 8));
}

static inline u8 riu_lcu_trig_stop_conf_lcu_stop_trig_cmd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LCU_TRIG_STOP_CONF_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_lcu_trig_stop_conf_lcu_stop_trig_cmd_setf(struct cl_chip *chip, u8 lcustoptrigcmd)
{
	ASSERT_ERR_CHIP((((u32)lcustoptrigcmd << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_LCU_TRIG_STOP_CONF_ADDR, (cl_reg_read(chip, RIU_LCU_TRIG_STOP_CONF_ADDR) & ~((u32)0x000000FF)) | ((u32)lcustoptrigcmd << 0));
}

/**
 * @brief SAS_CTL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    03    SAS_IO_PAD_1_2_SW_CTRL    0
 *    02:01 SAS_IO_PAD_1_2            0x0
 *    00    SAS_IO_PAD_3              0
 * </pre>
 */
#define RIU_SAS_CTL_0_ADDR        (REG_RIU_BASE_ADDR + 0x000001C8)
#define RIU_SAS_CTL_0_OFFSET      0x000001C8
#define RIU_SAS_CTL_0_INDEX       0x00000072
#define RIU_SAS_CTL_0_RESET       0x00000000

static inline u32 riu_sas_ctl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_SAS_CTL_0_ADDR);
}

static inline void riu_sas_ctl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_SAS_CTL_0_ADDR, value);
}

/* Field definitions */
#define RIU_SAS_CTL_0_SAS_IO_PAD_1_2_SW_CTRL_BIT    ((u32)0x00000008)
#define RIU_SAS_CTL_0_SAS_IO_PAD_1_2_SW_CTRL_POS    3
#define RIU_SAS_CTL_0_SAS_IO_PAD_1_2_MASK    ((u32)0x00000006)
#define RIU_SAS_CTL_0_SAS_IO_PAD_1_2_LSB    1
#define RIU_SAS_CTL_0_SAS_IO_PAD_1_2_WIDTH    ((u32)0x00000002)
#define RIU_SAS_CTL_0_SAS_IO_PAD_3_BIT      ((u32)0x00000001)
#define RIU_SAS_CTL_0_SAS_IO_PAD_3_POS      0

#define RIU_SAS_CTL_0_SAS_IO_PAD_1_2_SW_CTRL_RST    0x0
#define RIU_SAS_CTL_0_SAS_IO_PAD_1_2_RST    0x0
#define RIU_SAS_CTL_0_SAS_IO_PAD_3_RST      0x0

static inline void riu_sas_ctl_0_pack(struct cl_chip *chip, u8 sas_io_pad_1_2_sw_ctrl, u8 sas_io_pad_1_2, u8 sas_io_pad_3)
{
	ASSERT_ERR_CHIP((((u32)sas_io_pad_1_2_sw_ctrl << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)sas_io_pad_1_2 << 1) & ~((u32)0x00000006)) == 0);
	ASSERT_ERR_CHIP((((u32)sas_io_pad_3 << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_SAS_CTL_0_ADDR, ((u32)sas_io_pad_1_2_sw_ctrl << 3) | ((u32)sas_io_pad_1_2 << 1) | ((u32)sas_io_pad_3 << 0));
}

static inline void riu_sas_ctl_0_unpack(struct cl_chip *chip, u8 *sas_io_pad_1_2_sw_ctrl, u8 *sas_io_pad_1_2, u8 *sas_io_pad_3)
{
	u32 local_val = cl_reg_read(chip, RIU_SAS_CTL_0_ADDR);

	*sas_io_pad_1_2_sw_ctrl = (local_val & ((u32)0x00000008)) >> 3;
	*sas_io_pad_1_2 = (local_val & ((u32)0x00000006)) >> 1;
	*sas_io_pad_3 = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_sas_ctl_0_sas_io_pad_1_2_sw_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_SAS_CTL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void riu_sas_ctl_0_sas_io_pad_1_2_sw_ctrl_setf(struct cl_chip *chip, u8 sasiopad12swctrl)
{
	ASSERT_ERR_CHIP((((u32)sasiopad12swctrl << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RIU_SAS_CTL_0_ADDR, (cl_reg_read(chip, RIU_SAS_CTL_0_ADDR) & ~((u32)0x00000008)) | ((u32)sasiopad12swctrl << 3));
}

static inline u8 riu_sas_ctl_0_sas_io_pad_1_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_SAS_CTL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000006)) >> 1);
}

static inline void riu_sas_ctl_0_sas_io_pad_1_2_setf(struct cl_chip *chip, u8 sasiopad12)
{
	ASSERT_ERR_CHIP((((u32)sasiopad12 << 1) & ~((u32)0x00000006)) == 0);
	cl_reg_write(chip, RIU_SAS_CTL_0_ADDR, (cl_reg_read(chip, RIU_SAS_CTL_0_ADDR) & ~((u32)0x00000006)) | ((u32)sasiopad12 << 1));
}

static inline u8 riu_sas_ctl_0_sas_io_pad_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_SAS_CTL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_sas_ctl_0_sas_io_pad_3_setf(struct cl_chip *chip, u8 sasiopad3)
{
	ASSERT_ERR_CHIP((((u32)sasiopad3 << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_SAS_CTL_0_ADDR, (cl_reg_read(chip, RIU_SAS_CTL_0_ADDR) & ~((u32)0x00000001)) | ((u32)sasiopad3 << 0));
}

/**
 * @brief RSF_CONF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    11:00 RSF_CORRECTION            0x0
 * </pre>
 */
#define RIU_RSF_CONF_1_ADDR        (REG_RIU_BASE_ADDR + 0x000001CC)
#define RIU_RSF_CONF_1_OFFSET      0x000001CC
#define RIU_RSF_CONF_1_INDEX       0x00000073
#define RIU_RSF_CONF_1_RESET       0x00000000

static inline u32 riu_rsf_conf_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RSF_CONF_1_ADDR);
}

static inline void riu_rsf_conf_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RSF_CONF_1_ADDR, value);
}

/* Field definitions */
#define RIU_RSF_CONF_1_RSF_CORRECTION_MASK    ((u32)0x00000FFF)
#define RIU_RSF_CONF_1_RSF_CORRECTION_LSB    0
#define RIU_RSF_CONF_1_RSF_CORRECTION_WIDTH    ((u32)0x0000000C)

#define RIU_RSF_CONF_1_RSF_CORRECTION_RST    0x0

static inline u16 riu_rsf_conf_1_rsf_correction_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RSF_CONF_1_ADDR);

	return (u16)(local_val >> 0);
}

static inline void riu_rsf_conf_1_rsf_correction_setf(struct cl_chip *chip, u16 rsfcorrection)
{
	ASSERT_ERR_CHIP((((u32)rsfcorrection << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RSF_CONF_1_ADDR, (u32)rsfcorrection << 0);
}

/**
 * @brief MICTOR_CONF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 MICTOR_SEL3               0x0
 *    22:16 MICTOR_SEL2               0x0
 *    14:08 MICTOR_SEL1               0x0
 *    06:00 MICTOR_SEL0               0x0
 * </pre>
 */
#define RIU_MICTOR_CONF_1_ADDR        (REG_RIU_BASE_ADDR + 0x000001D0)
#define RIU_MICTOR_CONF_1_OFFSET      0x000001D0
#define RIU_MICTOR_CONF_1_INDEX       0x00000074
#define RIU_MICTOR_CONF_1_RESET       0x00000000

static inline u32 riu_mictor_conf_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_MICTOR_CONF_1_ADDR);
}

static inline void riu_mictor_conf_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_MICTOR_CONF_1_ADDR, value);
}

/* Field definitions */
#define RIU_MICTOR_CONF_1_MICTOR_SEL_3_MASK    ((u32)0x7F000000)
#define RIU_MICTOR_CONF_1_MICTOR_SEL_3_LSB    24
#define RIU_MICTOR_CONF_1_MICTOR_SEL_3_WIDTH    ((u32)0x00000007)
#define RIU_MICTOR_CONF_1_MICTOR_SEL_2_MASK    ((u32)0x007F0000)
#define RIU_MICTOR_CONF_1_MICTOR_SEL_2_LSB    16
#define RIU_MICTOR_CONF_1_MICTOR_SEL_2_WIDTH    ((u32)0x00000007)
#define RIU_MICTOR_CONF_1_MICTOR_SEL_1_MASK    ((u32)0x00007F00)
#define RIU_MICTOR_CONF_1_MICTOR_SEL_1_LSB    8
#define RIU_MICTOR_CONF_1_MICTOR_SEL_1_WIDTH    ((u32)0x00000007)
#define RIU_MICTOR_CONF_1_MICTOR_SEL_0_MASK    ((u32)0x0000007F)
#define RIU_MICTOR_CONF_1_MICTOR_SEL_0_LSB    0
#define RIU_MICTOR_CONF_1_MICTOR_SEL_0_WIDTH    ((u32)0x00000007)

#define RIU_MICTOR_CONF_1_MICTOR_SEL_3_RST    0x0
#define RIU_MICTOR_CONF_1_MICTOR_SEL_2_RST    0x0
#define RIU_MICTOR_CONF_1_MICTOR_SEL_1_RST    0x0
#define RIU_MICTOR_CONF_1_MICTOR_SEL_0_RST    0x0

static inline void riu_mictor_conf_1_pack(struct cl_chip *chip, u8 mictor_sel3, u8 mictor_sel2, u8 mictor_sel1, u8 mictor_sel0)
{
	ASSERT_ERR_CHIP((((u32)mictor_sel3 << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)mictor_sel2 << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)mictor_sel1 << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)mictor_sel0 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_MICTOR_CONF_1_ADDR, ((u32)mictor_sel3 << 24) | ((u32)mictor_sel2 << 16) | ((u32)mictor_sel1 << 8) | ((u32)mictor_sel0 << 0));
}

static inline void riu_mictor_conf_1_unpack(struct cl_chip *chip, u8 *mictor_sel3, u8 *mictor_sel2, u8 *mictor_sel1, u8 *mictor_sel0)
{
	u32 local_val = cl_reg_read(chip, RIU_MICTOR_CONF_1_ADDR);

	*mictor_sel3 = (local_val & ((u32)0x7F000000)) >> 24;
	*mictor_sel2 = (local_val & ((u32)0x007F0000)) >> 16;
	*mictor_sel1 = (local_val & ((u32)0x00007F00)) >> 8;
	*mictor_sel0 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_mictor_conf_1_mictor_sel_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MICTOR_CONF_1_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_mictor_conf_1_mictor_sel_3_setf(struct cl_chip *chip, u8 mictorsel3)
{
	ASSERT_ERR_CHIP((((u32)mictorsel3 << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_MICTOR_CONF_1_ADDR, (cl_reg_read(chip, RIU_MICTOR_CONF_1_ADDR) & ~((u32)0x7F000000)) | ((u32)mictorsel3 << 24));
}

static inline u8 riu_mictor_conf_1_mictor_sel_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MICTOR_CONF_1_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_mictor_conf_1_mictor_sel_2_setf(struct cl_chip *chip, u8 mictorsel2)
{
	ASSERT_ERR_CHIP((((u32)mictorsel2 << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_MICTOR_CONF_1_ADDR, (cl_reg_read(chip, RIU_MICTOR_CONF_1_ADDR) & ~((u32)0x007F0000)) | ((u32)mictorsel2 << 16));
}

static inline u8 riu_mictor_conf_1_mictor_sel_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MICTOR_CONF_1_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_mictor_conf_1_mictor_sel_1_setf(struct cl_chip *chip, u8 mictorsel1)
{
	ASSERT_ERR_CHIP((((u32)mictorsel1 << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_MICTOR_CONF_1_ADDR, (cl_reg_read(chip, RIU_MICTOR_CONF_1_ADDR) & ~((u32)0x00007F00)) | ((u32)mictorsel1 << 8));
}

static inline u8 riu_mictor_conf_1_mictor_sel_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MICTOR_CONF_1_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_mictor_conf_1_mictor_sel_0_setf(struct cl_chip *chip, u8 mictorsel0)
{
	ASSERT_ERR_CHIP((((u32)mictorsel0 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_MICTOR_CONF_1_ADDR, (cl_reg_read(chip, RIU_MICTOR_CONF_1_ADDR) & ~((u32)0x0000007F)) | ((u32)mictorsel0 << 0));
}

/**
 * @brief MICTOR_CONF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    14:08 MICTOR_SEL5               0x0
 *    06:00 MICTOR_SEL4               0x0
 * </pre>
 */
#define RIU_MICTOR_CONF_2_ADDR        (REG_RIU_BASE_ADDR + 0x000001D4)
#define RIU_MICTOR_CONF_2_OFFSET      0x000001D4
#define RIU_MICTOR_CONF_2_INDEX       0x00000075
#define RIU_MICTOR_CONF_2_RESET       0x00000000

static inline u32 riu_mictor_conf_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_MICTOR_CONF_2_ADDR);
}

static inline void riu_mictor_conf_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_MICTOR_CONF_2_ADDR, value);
}

/* Field definitions */
#define RIU_MICTOR_CONF_2_MICTOR_SEL_5_MASK    ((u32)0x00007F00)
#define RIU_MICTOR_CONF_2_MICTOR_SEL_5_LSB    8
#define RIU_MICTOR_CONF_2_MICTOR_SEL_5_WIDTH    ((u32)0x00000007)
#define RIU_MICTOR_CONF_2_MICTOR_SEL_4_MASK    ((u32)0x0000007F)
#define RIU_MICTOR_CONF_2_MICTOR_SEL_4_LSB    0
#define RIU_MICTOR_CONF_2_MICTOR_SEL_4_WIDTH    ((u32)0x00000007)

#define RIU_MICTOR_CONF_2_MICTOR_SEL_5_RST    0x0
#define RIU_MICTOR_CONF_2_MICTOR_SEL_4_RST    0x0

static inline void riu_mictor_conf_2_pack(struct cl_chip *chip, u8 mictor_sel5, u8 mictor_sel4)
{
	ASSERT_ERR_CHIP((((u32)mictor_sel5 << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)mictor_sel4 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_MICTOR_CONF_2_ADDR, ((u32)mictor_sel5 << 8) | ((u32)mictor_sel4 << 0));
}

static inline void riu_mictor_conf_2_unpack(struct cl_chip *chip, u8 *mictor_sel5, u8 *mictor_sel4)
{
	u32 local_val = cl_reg_read(chip, RIU_MICTOR_CONF_2_ADDR);

	*mictor_sel5 = (local_val & ((u32)0x00007F00)) >> 8;
	*mictor_sel4 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_mictor_conf_2_mictor_sel_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MICTOR_CONF_2_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_mictor_conf_2_mictor_sel_5_setf(struct cl_chip *chip, u8 mictorsel5)
{
	ASSERT_ERR_CHIP((((u32)mictorsel5 << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_MICTOR_CONF_2_ADDR, (cl_reg_read(chip, RIU_MICTOR_CONF_2_ADDR) & ~((u32)0x00007F00)) | ((u32)mictorsel5 << 8));
}

static inline u8 riu_mictor_conf_2_mictor_sel_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MICTOR_CONF_2_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_mictor_conf_2_mictor_sel_4_setf(struct cl_chip *chip, u8 mictorsel4)
{
	ASSERT_ERR_CHIP((((u32)mictorsel4 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_MICTOR_CONF_2_ADDR, (cl_reg_read(chip, RIU_MICTOR_CONF_2_ADDR) & ~((u32)0x0000007F)) | ((u32)mictorsel4 << 0));
}

/**
 * @brief LCU_START_TRIG_UNLOCK register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    22:00 LCU_START_TRIG_UNLOCK     0x0
 * </pre>
 */
#define RIU_LCU_START_TRIG_UNLOCK_ADDR        (REG_RIU_BASE_ADDR + 0x000001D8)
#define RIU_LCU_START_TRIG_UNLOCK_OFFSET      0x000001D8
#define RIU_LCU_START_TRIG_UNLOCK_INDEX       0x00000076
#define RIU_LCU_START_TRIG_UNLOCK_RESET       0x00000000

static inline u32 riu_lcu_start_trig_unlock_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_LCU_START_TRIG_UNLOCK_ADDR);
}

static inline void riu_lcu_start_trig_unlock_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_LCU_START_TRIG_UNLOCK_ADDR, value);
}

/* Field definitions */
#define RIU_LCU_START_TRIG_UNLOCK_LCU_START_TRIG_UNLOCK_MASK    ((u32)0x007FFFFF)
#define RIU_LCU_START_TRIG_UNLOCK_LCU_START_TRIG_UNLOCK_LSB    0
#define RIU_LCU_START_TRIG_UNLOCK_LCU_START_TRIG_UNLOCK_WIDTH    ((u32)0x00000017)

#define RIU_LCU_START_TRIG_UNLOCK_LCU_START_TRIG_UNLOCK_RST    0x0

static inline u32 riu_lcu_start_trig_unlock_lcu_start_trig_unlock_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LCU_START_TRIG_UNLOCK_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_lcu_start_trig_unlock_lcu_start_trig_unlock_setf(struct cl_chip *chip, u32 lcustarttrigunlock)
{
	ASSERT_ERR_CHIP((((u32)lcustarttrigunlock << 0) & ~((u32)0x007FFFFF)) == 0);
	cl_reg_write(chip, RIU_LCU_START_TRIG_UNLOCK_ADDR, (u32)lcustarttrigunlock << 0);
}

/**
 * @brief HBF_160_PCOEF_15_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25:00 HBF160_PCOEF15_1          0x0fd1460
 * </pre>
 */
#define RIU_HBF_160_PCOEF_15_1_ADDR        (REG_RIU_BASE_ADDR + 0x000001DC)
#define RIU_HBF_160_PCOEF_15_1_OFFSET      0x000001DC
#define RIU_HBF_160_PCOEF_15_1_INDEX       0x00000077
#define RIU_HBF_160_PCOEF_15_1_RESET       0x00FD1460

static inline u32 riu_hbf_160_pcoef_15_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_160_PCOEF_15_1_ADDR);
}

static inline void riu_hbf_160_pcoef_15_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_160_PCOEF_15_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_160_PCOEF_15_1_HBF_160_PCOEF_15_1_MASK    ((u32)0x03FFFFFF)
#define RIU_HBF_160_PCOEF_15_1_HBF_160_PCOEF_15_1_LSB    0
#define RIU_HBF_160_PCOEF_15_1_HBF_160_PCOEF_15_1_WIDTH    ((u32)0x0000001A)

#define RIU_HBF_160_PCOEF_15_1_HBF_160_PCOEF_15_1_RST    0x0fd1460

static inline u32 riu_hbf_160_pcoef_15_1_hbf_160_pcoef_15_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_160_PCOEF_15_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_hbf_160_pcoef_15_1_hbf_160_pcoef_15_1_setf(struct cl_chip *chip, u32 hbf160pcoef151)
{
	ASSERT_ERR_CHIP((((u32)hbf160pcoef151 << 0) & ~((u32)0x03FFFFFF)) == 0);
	cl_reg_write(chip, RIU_HBF_160_PCOEF_15_1_ADDR, (u32)hbf160pcoef151 << 0);
}

/**
 * @brief HBF_SEL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    07:06 DC_SCALE_SET_SEL          0x0
 *    05:03 HBF160_SEL_RX_1           0x0
 *    02:00 HBF160_SEL_RX_0           0x0
 * </pre>
 */
#define RIU_HBF_SEL_1_ADDR        (REG_RIU_BASE_ADDR + 0x000001E0)
#define RIU_HBF_SEL_1_OFFSET      0x000001E0
#define RIU_HBF_SEL_1_INDEX       0x00000078
#define RIU_HBF_SEL_1_RESET       0x00000000

static inline u32 riu_hbf_sel_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_SEL_1_ADDR);
}

static inline void riu_hbf_sel_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_SEL_1_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_SEL_1_DC_SCALE_SET_SEL_MASK    ((u32)0x000000C0)
#define RIU_HBF_SEL_1_DC_SCALE_SET_SEL_LSB    6
#define RIU_HBF_SEL_1_DC_SCALE_SET_SEL_WIDTH    ((u32)0x00000002)
#define RIU_HBF_SEL_1_HBF_160_SEL_RX_1_MASK    ((u32)0x00000038)
#define RIU_HBF_SEL_1_HBF_160_SEL_RX_1_LSB    3
#define RIU_HBF_SEL_1_HBF_160_SEL_RX_1_WIDTH    ((u32)0x00000003)
#define RIU_HBF_SEL_1_HBF_160_SEL_RX_0_MASK    ((u32)0x00000007)
#define RIU_HBF_SEL_1_HBF_160_SEL_RX_0_LSB    0
#define RIU_HBF_SEL_1_HBF_160_SEL_RX_0_WIDTH    ((u32)0x00000003)

#define RIU_HBF_SEL_1_DC_SCALE_SET_SEL_RST    0x0
#define RIU_HBF_SEL_1_HBF_160_SEL_RX_1_RST    0x0
#define RIU_HBF_SEL_1_HBF_160_SEL_RX_0_RST    0x0

static inline void riu_hbf_sel_1_pack(struct cl_chip *chip, u8 dc_scale_set_sel, u8 hbf160_sel_rx_1, u8 hbf160_sel_rx_0)
{
	ASSERT_ERR_CHIP((((u32)dc_scale_set_sel << 6) & ~((u32)0x000000C0)) == 0);
	ASSERT_ERR_CHIP((((u32)hbf160_sel_rx_1 << 3) & ~((u32)0x00000038)) == 0);
	ASSERT_ERR_CHIP((((u32)hbf160_sel_rx_0 << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RIU_HBF_SEL_1_ADDR, ((u32)dc_scale_set_sel << 6) | ((u32)hbf160_sel_rx_1 << 3) | ((u32)hbf160_sel_rx_0 << 0));
}

static inline void riu_hbf_sel_1_unpack(struct cl_chip *chip, u8 *dc_scale_set_sel, u8 *hbf160_sel_rx_1, u8 *hbf160_sel_rx_0)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_SEL_1_ADDR);

	*dc_scale_set_sel = (local_val & ((u32)0x000000C0)) >> 6;
	*hbf160_sel_rx_1 = (local_val & ((u32)0x00000038)) >> 3;
	*hbf160_sel_rx_0 = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 riu_hbf_sel_1_dc_scale_set_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_SEL_1_ADDR);

	return (u8)((local_val & ((u32)0x000000C0)) >> 6);
}

static inline void riu_hbf_sel_1_dc_scale_set_sel_setf(struct cl_chip *chip, u8 dcscalesetsel)
{
	ASSERT_ERR_CHIP((((u32)dcscalesetsel << 6) & ~((u32)0x000000C0)) == 0);
	cl_reg_write(chip, RIU_HBF_SEL_1_ADDR, (cl_reg_read(chip, RIU_HBF_SEL_1_ADDR) & ~((u32)0x000000C0)) | ((u32)dcscalesetsel << 6));
}

static inline u8 riu_hbf_sel_1_hbf_160_sel_rx_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_SEL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000038)) >> 3);
}

static inline void riu_hbf_sel_1_hbf_160_sel_rx_1_setf(struct cl_chip *chip, u8 hbf160selrx1)
{
	ASSERT_ERR_CHIP((((u32)hbf160selrx1 << 3) & ~((u32)0x00000038)) == 0);
	cl_reg_write(chip, RIU_HBF_SEL_1_ADDR, (cl_reg_read(chip, RIU_HBF_SEL_1_ADDR) & ~((u32)0x00000038)) | ((u32)hbf160selrx1 << 3));
}

static inline u8 riu_hbf_sel_1_hbf_160_sel_rx_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_SEL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void riu_hbf_sel_1_hbf_160_sel_rx_0_setf(struct cl_chip *chip, u8 hbf160selrx0)
{
	ASSERT_ERR_CHIP((((u32)hbf160selrx0 << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RIU_HBF_SEL_1_ADDR, (cl_reg_read(chip, RIU_HBF_SEL_1_ADDR) & ~((u32)0x00000007)) | ((u32)hbf160selrx0 << 0));
}

/**
 * @brief RADAR_DETECTOR_CFG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    RADAR_DETECTOR_EN         1
 *    30    OUTPUT_COMB_TYPE          0
 *    29    RADAR_CMD_73_PULSE_DISABLE 0
 *    28:24 EVTDELAY50_NS             0x8
 *    21:16 EVTHIGHTHRDBV             0x39
 *    13:08 EVTLOWTHRDBV              0x35
 *    05:00 EVTTHRDBV                 0x36
 * </pre>
 */
#define RIU_RADAR_DETECTOR_CFG_ADDR        (REG_RIU_BASE_ADDR + 0x000001E4)
#define RIU_RADAR_DETECTOR_CFG_OFFSET      0x000001E4
#define RIU_RADAR_DETECTOR_CFG_INDEX       0x00000079
#define RIU_RADAR_DETECTOR_CFG_RESET       0x88393536

static inline u32 riu_radar_detector_cfg_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADAR_DETECTOR_CFG_ADDR);
}

static inline void riu_radar_detector_cfg_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RADAR_DETECTOR_CFG_ADDR, value);
}

/* Field definitions */
#define RIU_RADAR_DETECTOR_CFG_RADAR_DETECTOR_EN_BIT    ((u32)0x80000000)
#define RIU_RADAR_DETECTOR_CFG_RADAR_DETECTOR_EN_POS    31
#define RIU_RADAR_DETECTOR_CFG_OUTPUT_COMB_TYPE_BIT    ((u32)0x40000000)
#define RIU_RADAR_DETECTOR_CFG_OUTPUT_COMB_TYPE_POS    30
#define RIU_RADAR_DETECTOR_CFG_RADAR_CMD_73_PULSE_DISABLE_BIT    ((u32)0x20000000)
#define RIU_RADAR_DETECTOR_CFG_RADAR_CMD_73_PULSE_DISABLE_POS    29
#define RIU_RADAR_DETECTOR_CFG_EVTDELAY_50_NS_MASK    ((u32)0x1F000000)
#define RIU_RADAR_DETECTOR_CFG_EVTDELAY_50_NS_LSB    24
#define RIU_RADAR_DETECTOR_CFG_EVTDELAY_50_NS_WIDTH    ((u32)0x00000005)
#define RIU_RADAR_DETECTOR_CFG_EVTHIGHTHRDBV_MASK    ((u32)0x003F0000)
#define RIU_RADAR_DETECTOR_CFG_EVTHIGHTHRDBV_LSB    16
#define RIU_RADAR_DETECTOR_CFG_EVTHIGHTHRDBV_WIDTH    ((u32)0x00000006)
#define RIU_RADAR_DETECTOR_CFG_EVTLOWTHRDBV_MASK    ((u32)0x00003F00)
#define RIU_RADAR_DETECTOR_CFG_EVTLOWTHRDBV_LSB    8
#define RIU_RADAR_DETECTOR_CFG_EVTLOWTHRDBV_WIDTH    ((u32)0x00000006)
#define RIU_RADAR_DETECTOR_CFG_EVTTHRDBV_MASK    ((u32)0x0000003F)
#define RIU_RADAR_DETECTOR_CFG_EVTTHRDBV_LSB    0
#define RIU_RADAR_DETECTOR_CFG_EVTTHRDBV_WIDTH    ((u32)0x00000006)

#define RIU_RADAR_DETECTOR_CFG_RADAR_DETECTOR_EN_RST    0x1
#define RIU_RADAR_DETECTOR_CFG_OUTPUT_COMB_TYPE_RST    0x0
#define RIU_RADAR_DETECTOR_CFG_RADAR_CMD_73_PULSE_DISABLE_RST    0x0
#define RIU_RADAR_DETECTOR_CFG_EVTDELAY_50_NS_RST    0x8
#define RIU_RADAR_DETECTOR_CFG_EVTHIGHTHRDBV_RST    0x39
#define RIU_RADAR_DETECTOR_CFG_EVTLOWTHRDBV_RST    0x35
#define RIU_RADAR_DETECTOR_CFG_EVTTHRDBV_RST    0x36

static inline void riu_radar_detector_cfg_pack(struct cl_chip *chip, u8 radar_detector_en, u8 output_comb_type, u8 radar_cmd_73_pulse_disable, u8 evtdelay50_ns, u8 evthighthrdbv, u8 evtlowthrdbv, u8 evtthrdbv)
{
	ASSERT_ERR_CHIP((((u32)radar_detector_en << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)output_comb_type << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)radar_cmd_73_pulse_disable << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)evtdelay50_ns << 24) & ~((u32)0x1F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)evthighthrdbv << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)evtlowthrdbv << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)evtthrdbv << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RADAR_DETECTOR_CFG_ADDR, ((u32)radar_detector_en << 31) | ((u32)output_comb_type << 30) | ((u32)radar_cmd_73_pulse_disable << 29) | ((u32)evtdelay50_ns << 24) | ((u32)evthighthrdbv << 16) | ((u32)evtlowthrdbv << 8) | ((u32)evtthrdbv << 0));
}

static inline void riu_radar_detector_cfg_unpack(struct cl_chip *chip, u8 *radar_detector_en, u8 *output_comb_type, u8 *radar_cmd_73_pulse_disable, u8 *evtdelay50_ns, u8 *evthighthrdbv, u8 *evtlowthrdbv, u8 *evtthrdbv)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_DETECTOR_CFG_ADDR);

	*radar_detector_en = (local_val & ((u32)0x80000000)) >> 31;
	*output_comb_type = (local_val & ((u32)0x40000000)) >> 30;
	*radar_cmd_73_pulse_disable = (local_val & ((u32)0x20000000)) >> 29;
	*evtdelay50_ns = (local_val & ((u32)0x1F000000)) >> 24;
	*evthighthrdbv = (local_val & ((u32)0x003F0000)) >> 16;
	*evtlowthrdbv = (local_val & ((u32)0x00003F00)) >> 8;
	*evtthrdbv = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_radar_detector_cfg_radar_detector_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_DETECTOR_CFG_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_radar_detector_cfg_radar_detector_en_setf(struct cl_chip *chip, u8 radardetectoren)
{
	ASSERT_ERR_CHIP((((u32)radardetectoren << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_RADAR_DETECTOR_CFG_ADDR, (cl_reg_read(chip, RIU_RADAR_DETECTOR_CFG_ADDR) & ~((u32)0x80000000)) | ((u32)radardetectoren << 31));
}

static inline u8 riu_radar_detector_cfg_output_comb_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_DETECTOR_CFG_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void riu_radar_detector_cfg_output_comb_type_setf(struct cl_chip *chip, u8 outputcombtype)
{
	ASSERT_ERR_CHIP((((u32)outputcombtype << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RIU_RADAR_DETECTOR_CFG_ADDR, (cl_reg_read(chip, RIU_RADAR_DETECTOR_CFG_ADDR) & ~((u32)0x40000000)) | ((u32)outputcombtype << 30));
}

static inline u8 riu_radar_detector_cfg_radar_cmd_73_pulse_disable_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_DETECTOR_CFG_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void riu_radar_detector_cfg_radar_cmd_73_pulse_disable_setf(struct cl_chip *chip, u8 radarcmd73pulsedisable)
{
	ASSERT_ERR_CHIP((((u32)radarcmd73pulsedisable << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RIU_RADAR_DETECTOR_CFG_ADDR, (cl_reg_read(chip, RIU_RADAR_DETECTOR_CFG_ADDR) & ~((u32)0x20000000)) | ((u32)radarcmd73pulsedisable << 29));
}

static inline u8 riu_radar_detector_cfg_evtdelay_50_ns_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_DETECTOR_CFG_ADDR);

	return (u8)((local_val & ((u32)0x1F000000)) >> 24);
}

static inline void riu_radar_detector_cfg_evtdelay_50_ns_setf(struct cl_chip *chip, u8 evtdelay50ns)
{
	ASSERT_ERR_CHIP((((u32)evtdelay50ns << 24) & ~((u32)0x1F000000)) == 0);
	cl_reg_write(chip, RIU_RADAR_DETECTOR_CFG_ADDR, (cl_reg_read(chip, RIU_RADAR_DETECTOR_CFG_ADDR) & ~((u32)0x1F000000)) | ((u32)evtdelay50ns << 24));
}

static inline u8 riu_radar_detector_cfg_evthighthrdbv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_DETECTOR_CFG_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void riu_radar_detector_cfg_evthighthrdbv_setf(struct cl_chip *chip, u8 evthighthrdbv)
{
	ASSERT_ERR_CHIP((((u32)evthighthrdbv << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RIU_RADAR_DETECTOR_CFG_ADDR, (cl_reg_read(chip, RIU_RADAR_DETECTOR_CFG_ADDR) & ~((u32)0x003F0000)) | ((u32)evthighthrdbv << 16));
}

static inline u8 riu_radar_detector_cfg_evtlowthrdbv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_DETECTOR_CFG_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_radar_detector_cfg_evtlowthrdbv_setf(struct cl_chip *chip, u8 evtlowthrdbv)
{
	ASSERT_ERR_CHIP((((u32)evtlowthrdbv << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_RADAR_DETECTOR_CFG_ADDR, (cl_reg_read(chip, RIU_RADAR_DETECTOR_CFG_ADDR) & ~((u32)0x00003F00)) | ((u32)evtlowthrdbv << 8));
}

static inline u8 riu_radar_detector_cfg_evtthrdbv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_DETECTOR_CFG_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_radar_detector_cfg_evtthrdbv_setf(struct cl_chip *chip, u8 evtthrdbv)
{
	ASSERT_ERR_CHIP((((u32)evtthrdbv << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RADAR_DETECTOR_CFG_ADDR, (cl_reg_read(chip, RIU_RADAR_DETECTOR_CFG_ADDR) & ~((u32)0x0000003F)) | ((u32)evtthrdbv << 0));
}

/**
 * @brief RF_RSSI_STAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    11:10 RFRSSI5                   0x0
 *    09:08 RFRSSI4                   0x0
 *    07:06 RFRSSI3                   0x0
 *    05:04 RFRSSI2                   0x0
 *    03:02 RFRSSI1                   0x0
 *    01:00 RFRSSI0                   0x0
 * </pre>
 */
#define RIU_RF_RSSI_STAT_ADDR        (REG_RIU_BASE_ADDR + 0x000001E8)
#define RIU_RF_RSSI_STAT_OFFSET      0x000001E8
#define RIU_RF_RSSI_STAT_INDEX       0x0000007A
#define RIU_RF_RSSI_STAT_RESET       0x00000000

static inline u32 riu_rf_rssi_stat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RF_RSSI_STAT_ADDR);
}

/* Field definitions */
#define RIU_RF_RSSI_STAT_RFRSSI_5_MASK      ((u32)0x00000C00)
#define RIU_RF_RSSI_STAT_RFRSSI_5_LSB       10
#define RIU_RF_RSSI_STAT_RFRSSI_5_WIDTH     ((u32)0x00000002)
#define RIU_RF_RSSI_STAT_RFRSSI_4_MASK      ((u32)0x00000300)
#define RIU_RF_RSSI_STAT_RFRSSI_4_LSB       8
#define RIU_RF_RSSI_STAT_RFRSSI_4_WIDTH     ((u32)0x00000002)
#define RIU_RF_RSSI_STAT_RFRSSI_3_MASK      ((u32)0x000000C0)
#define RIU_RF_RSSI_STAT_RFRSSI_3_LSB       6
#define RIU_RF_RSSI_STAT_RFRSSI_3_WIDTH     ((u32)0x00000002)
#define RIU_RF_RSSI_STAT_RFRSSI_2_MASK      ((u32)0x00000030)
#define RIU_RF_RSSI_STAT_RFRSSI_2_LSB       4
#define RIU_RF_RSSI_STAT_RFRSSI_2_WIDTH     ((u32)0x00000002)
#define RIU_RF_RSSI_STAT_RFRSSI_1_MASK      ((u32)0x0000000C)
#define RIU_RF_RSSI_STAT_RFRSSI_1_LSB       2
#define RIU_RF_RSSI_STAT_RFRSSI_1_WIDTH     ((u32)0x00000002)
#define RIU_RF_RSSI_STAT_RFRSSI_0_MASK      ((u32)0x00000003)
#define RIU_RF_RSSI_STAT_RFRSSI_0_LSB       0
#define RIU_RF_RSSI_STAT_RFRSSI_0_WIDTH     ((u32)0x00000002)

#define RIU_RF_RSSI_STAT_RFRSSI_5_RST       0x0
#define RIU_RF_RSSI_STAT_RFRSSI_4_RST       0x0
#define RIU_RF_RSSI_STAT_RFRSSI_3_RST       0x0
#define RIU_RF_RSSI_STAT_RFRSSI_2_RST       0x0
#define RIU_RF_RSSI_STAT_RFRSSI_1_RST       0x0
#define RIU_RF_RSSI_STAT_RFRSSI_0_RST       0x0

static inline void riu_rf_rssi_stat_unpack(struct cl_chip *chip, u8 *rfrssi5, u8 *rfrssi4, u8 *rfrssi3, u8 *rfrssi2, u8 *rfrssi1, u8 *rfrssi0)
{
	u32 local_val = cl_reg_read(chip, RIU_RF_RSSI_STAT_ADDR);

	*rfrssi5 = (local_val & ((u32)0x00000C00)) >> 10;
	*rfrssi4 = (local_val & ((u32)0x00000300)) >> 8;
	*rfrssi3 = (local_val & ((u32)0x000000C0)) >> 6;
	*rfrssi2 = (local_val & ((u32)0x00000030)) >> 4;
	*rfrssi1 = (local_val & ((u32)0x0000000C)) >> 2;
	*rfrssi0 = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 riu_rf_rssi_stat_rfrssi_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RF_RSSI_STAT_ADDR);

	return (u8)((local_val & ((u32)0x00000C00)) >> 10);
}

static inline u8 riu_rf_rssi_stat_rfrssi_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RF_RSSI_STAT_ADDR);

	return (u8)((local_val & ((u32)0x00000300)) >> 8);
}

static inline u8 riu_rf_rssi_stat_rfrssi_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RF_RSSI_STAT_ADDR);

	return (u8)((local_val & ((u32)0x000000C0)) >> 6);
}

static inline u8 riu_rf_rssi_stat_rfrssi_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RF_RSSI_STAT_ADDR);

	return (u8)((local_val & ((u32)0x00000030)) >> 4);
}

static inline u8 riu_rf_rssi_stat_rfrssi_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RF_RSSI_STAT_ADDR);

	return (u8)((local_val & ((u32)0x0000000C)) >> 2);
}

static inline u8 riu_rf_rssi_stat_rfrssi_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RF_RSSI_STAT_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

/**
 * @brief NCO_CTRL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    NCO_CLEAR_P               0
 *    15:14 NCO_EN_CH5                0x0
 *    13:12 NCO_EN_CH4                0x0
 *    11:10 NCO_EN_CH3                0x0
 *    09:08 NCO_EN_CH2                0x0
 *    07:06 NCO_EN_CH1                0x0
 *    05:04 NCO_EN_CH0                0x0
 *    00    NCO_ENABLE                0
 * </pre>
 */
#define RIU_NCO_CTRL_ADDR        (REG_RIU_BASE_ADDR + 0x000001EC)
#define RIU_NCO_CTRL_OFFSET      0x000001EC
#define RIU_NCO_CTRL_INDEX       0x0000007B
#define RIU_NCO_CTRL_RESET       0x00000000

static inline u32 riu_nco_ctrl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_NCO_CTRL_ADDR);
}

static inline void riu_nco_ctrl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_NCO_CTRL_ADDR, value);
}

/* Field definitions */
#define RIU_NCO_CTRL_NCO_CLEAR_P_BIT        ((u32)0x80000000)
#define RIU_NCO_CTRL_NCO_CLEAR_P_POS        31
#define RIU_NCO_CTRL_NCO_EN_CH_5_MASK       ((u32)0x0000C000)
#define RIU_NCO_CTRL_NCO_EN_CH_5_LSB        14
#define RIU_NCO_CTRL_NCO_EN_CH_5_WIDTH      ((u32)0x00000002)
#define RIU_NCO_CTRL_NCO_EN_CH_4_MASK       ((u32)0x00003000)
#define RIU_NCO_CTRL_NCO_EN_CH_4_LSB        12
#define RIU_NCO_CTRL_NCO_EN_CH_4_WIDTH      ((u32)0x00000002)
#define RIU_NCO_CTRL_NCO_EN_CH_3_MASK       ((u32)0x00000C00)
#define RIU_NCO_CTRL_NCO_EN_CH_3_LSB        10
#define RIU_NCO_CTRL_NCO_EN_CH_3_WIDTH      ((u32)0x00000002)
#define RIU_NCO_CTRL_NCO_EN_CH_2_MASK       ((u32)0x00000300)
#define RIU_NCO_CTRL_NCO_EN_CH_2_LSB        8
#define RIU_NCO_CTRL_NCO_EN_CH_2_WIDTH      ((u32)0x00000002)
#define RIU_NCO_CTRL_NCO_EN_CH_1_MASK       ((u32)0x000000C0)
#define RIU_NCO_CTRL_NCO_EN_CH_1_LSB        6
#define RIU_NCO_CTRL_NCO_EN_CH_1_WIDTH      ((u32)0x00000002)
#define RIU_NCO_CTRL_NCO_EN_CH_0_MASK       ((u32)0x00000030)
#define RIU_NCO_CTRL_NCO_EN_CH_0_LSB        4
#define RIU_NCO_CTRL_NCO_EN_CH_0_WIDTH      ((u32)0x00000002)
#define RIU_NCO_CTRL_NCO_ENABLE_BIT         ((u32)0x00000001)
#define RIU_NCO_CTRL_NCO_ENABLE_POS         0

#define RIU_NCO_CTRL_NCO_CLEAR_P_RST        0x0
#define RIU_NCO_CTRL_NCO_EN_CH_5_RST        0x0
#define RIU_NCO_CTRL_NCO_EN_CH_4_RST        0x0
#define RIU_NCO_CTRL_NCO_EN_CH_3_RST        0x0
#define RIU_NCO_CTRL_NCO_EN_CH_2_RST        0x0
#define RIU_NCO_CTRL_NCO_EN_CH_1_RST        0x0
#define RIU_NCO_CTRL_NCO_EN_CH_0_RST        0x0
#define RIU_NCO_CTRL_NCO_ENABLE_RST         0x0

static inline void riu_nco_ctrl_pack(struct cl_chip *chip, u8 nco_clear_p, u8 nco_en_ch5, u8 nco_en_ch4, u8 nco_en_ch3, u8 nco_en_ch2, u8 nco_en_ch1, u8 nco_en_ch0, u8 nco_enable)
{
	ASSERT_ERR_CHIP((((u32)nco_clear_p << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)nco_en_ch5 << 14) & ~((u32)0x0000C000)) == 0);
	ASSERT_ERR_CHIP((((u32)nco_en_ch4 << 12) & ~((u32)0x00003000)) == 0);
	ASSERT_ERR_CHIP((((u32)nco_en_ch3 << 10) & ~((u32)0x00000C00)) == 0);
	ASSERT_ERR_CHIP((((u32)nco_en_ch2 << 8) & ~((u32)0x00000300)) == 0);
	ASSERT_ERR_CHIP((((u32)nco_en_ch1 << 6) & ~((u32)0x000000C0)) == 0);
	ASSERT_ERR_CHIP((((u32)nco_en_ch0 << 4) & ~((u32)0x00000030)) == 0);
	ASSERT_ERR_CHIP((((u32)nco_enable << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_NCO_CTRL_ADDR, ((u32)nco_clear_p << 31) | ((u32)nco_en_ch5 << 14) | ((u32)nco_en_ch4 << 12) | ((u32)nco_en_ch3 << 10) | ((u32)nco_en_ch2 << 8) | ((u32)nco_en_ch1 << 6) | ((u32)nco_en_ch0 << 4) | ((u32)nco_enable << 0));
}

static inline void riu_nco_ctrl_unpack(struct cl_chip *chip, u8 *nco_clear_p, u8 *nco_en_ch5, u8 *nco_en_ch4, u8 *nco_en_ch3, u8 *nco_en_ch2, u8 *nco_en_ch1, u8 *nco_en_ch0, u8 *nco_enable)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_CTRL_ADDR);

	*nco_clear_p = (local_val & ((u32)0x80000000)) >> 31;
	*nco_en_ch5 = (local_val & ((u32)0x0000C000)) >> 14;
	*nco_en_ch4 = (local_val & ((u32)0x00003000)) >> 12;
	*nco_en_ch3 = (local_val & ((u32)0x00000C00)) >> 10;
	*nco_en_ch2 = (local_val & ((u32)0x00000300)) >> 8;
	*nco_en_ch1 = (local_val & ((u32)0x000000C0)) >> 6;
	*nco_en_ch0 = (local_val & ((u32)0x00000030)) >> 4;
	*nco_enable = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_nco_ctrl_nco_clear_p_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_nco_ctrl_nco_clear_p_setf(struct cl_chip *chip, u8 ncoclearp)
{
	ASSERT_ERR_CHIP((((u32)ncoclearp << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_NCO_CTRL_ADDR, (cl_reg_read(chip, RIU_NCO_CTRL_ADDR) & ~((u32)0x80000000)) | ((u32)ncoclearp << 31));
}

static inline u8 riu_nco_ctrl_nco_en_ch_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x0000C000)) >> 14);
}

static inline void riu_nco_ctrl_nco_en_ch_5_setf(struct cl_chip *chip, u8 ncoench5)
{
	ASSERT_ERR_CHIP((((u32)ncoench5 << 14) & ~((u32)0x0000C000)) == 0);
	cl_reg_write(chip, RIU_NCO_CTRL_ADDR, (cl_reg_read(chip, RIU_NCO_CTRL_ADDR) & ~((u32)0x0000C000)) | ((u32)ncoench5 << 14));
}

static inline u8 riu_nco_ctrl_nco_en_ch_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x00003000)) >> 12);
}

static inline void riu_nco_ctrl_nco_en_ch_4_setf(struct cl_chip *chip, u8 ncoench4)
{
	ASSERT_ERR_CHIP((((u32)ncoench4 << 12) & ~((u32)0x00003000)) == 0);
	cl_reg_write(chip, RIU_NCO_CTRL_ADDR, (cl_reg_read(chip, RIU_NCO_CTRL_ADDR) & ~((u32)0x00003000)) | ((u32)ncoench4 << 12));
}

static inline u8 riu_nco_ctrl_nco_en_ch_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000C00)) >> 10);
}

static inline void riu_nco_ctrl_nco_en_ch_3_setf(struct cl_chip *chip, u8 ncoench3)
{
	ASSERT_ERR_CHIP((((u32)ncoench3 << 10) & ~((u32)0x00000C00)) == 0);
	cl_reg_write(chip, RIU_NCO_CTRL_ADDR, (cl_reg_read(chip, RIU_NCO_CTRL_ADDR) & ~((u32)0x00000C00)) | ((u32)ncoench3 << 10));
}

static inline u8 riu_nco_ctrl_nco_en_ch_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000300)) >> 8);
}

static inline void riu_nco_ctrl_nco_en_ch_2_setf(struct cl_chip *chip, u8 ncoench2)
{
	ASSERT_ERR_CHIP((((u32)ncoench2 << 8) & ~((u32)0x00000300)) == 0);
	cl_reg_write(chip, RIU_NCO_CTRL_ADDR, (cl_reg_read(chip, RIU_NCO_CTRL_ADDR) & ~((u32)0x00000300)) | ((u32)ncoench2 << 8));
}

static inline u8 riu_nco_ctrl_nco_en_ch_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x000000C0)) >> 6);
}

static inline void riu_nco_ctrl_nco_en_ch_1_setf(struct cl_chip *chip, u8 ncoench1)
{
	ASSERT_ERR_CHIP((((u32)ncoench1 << 6) & ~((u32)0x000000C0)) == 0);
	cl_reg_write(chip, RIU_NCO_CTRL_ADDR, (cl_reg_read(chip, RIU_NCO_CTRL_ADDR) & ~((u32)0x000000C0)) | ((u32)ncoench1 << 6));
}

static inline u8 riu_nco_ctrl_nco_en_ch_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000030)) >> 4);
}

static inline void riu_nco_ctrl_nco_en_ch_0_setf(struct cl_chip *chip, u8 ncoench0)
{
	ASSERT_ERR_CHIP((((u32)ncoench0 << 4) & ~((u32)0x00000030)) == 0);
	cl_reg_write(chip, RIU_NCO_CTRL_ADDR, (cl_reg_read(chip, RIU_NCO_CTRL_ADDR) & ~((u32)0x00000030)) | ((u32)ncoench0 << 4));
}

static inline u8 riu_nco_ctrl_nco_enable_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_nco_ctrl_nco_enable_setf(struct cl_chip *chip, u8 ncoenable)
{
	ASSERT_ERR_CHIP((((u32)ncoenable << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_NCO_CTRL_ADDR, (cl_reg_read(chip, RIU_NCO_CTRL_ADDR) & ~((u32)0x00000001)) | ((u32)ncoenable << 0));
}

/**
 * @brief NCO_INC_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    24:00 NCO_INC_0                 0x0
 * </pre>
 */
#define RIU_NCO_INC_0_ADDR        (REG_RIU_BASE_ADDR + 0x000001F0)
#define RIU_NCO_INC_0_OFFSET      0x000001F0
#define RIU_NCO_INC_0_INDEX       0x0000007C
#define RIU_NCO_INC_0_RESET       0x00000000

static inline u32 riu_nco_inc_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_NCO_INC_0_ADDR);
}

static inline void riu_nco_inc_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_NCO_INC_0_ADDR, value);
}

/* Field definitions */
#define RIU_NCO_INC_0_NCO_INC_0_MASK        ((u32)0x01FFFFFF)
#define RIU_NCO_INC_0_NCO_INC_0_LSB         0
#define RIU_NCO_INC_0_NCO_INC_0_WIDTH       ((u32)0x00000019)

#define RIU_NCO_INC_0_NCO_INC_0_RST         0x0

static inline u32 riu_nco_inc_0_nco_inc_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_INC_0_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_nco_inc_0_nco_inc_0_setf(struct cl_chip *chip, u32 ncoinc0)
{
	ASSERT_ERR_CHIP((((u32)ncoinc0 << 0) & ~((u32)0x01FFFFFF)) == 0);
	cl_reg_write(chip, RIU_NCO_INC_0_ADDR, (u32)ncoinc0 << 0);
}

/**
 * @brief NCO_INC_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    24:00 NCO_INC_1                 0x0
 * </pre>
 */
#define RIU_NCO_INC_1_ADDR        (REG_RIU_BASE_ADDR + 0x000001F4)
#define RIU_NCO_INC_1_OFFSET      0x000001F4
#define RIU_NCO_INC_1_INDEX       0x0000007D
#define RIU_NCO_INC_1_RESET       0x00000000

static inline u32 riu_nco_inc_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_NCO_INC_1_ADDR);
}

static inline void riu_nco_inc_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_NCO_INC_1_ADDR, value);
}

/* Field definitions */
#define RIU_NCO_INC_1_NCO_INC_1_MASK        ((u32)0x01FFFFFF)
#define RIU_NCO_INC_1_NCO_INC_1_LSB         0
#define RIU_NCO_INC_1_NCO_INC_1_WIDTH       ((u32)0x00000019)

#define RIU_NCO_INC_1_NCO_INC_1_RST         0x0

static inline u32 riu_nco_inc_1_nco_inc_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_INC_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_nco_inc_1_nco_inc_1_setf(struct cl_chip *chip, u32 ncoinc1)
{
	ASSERT_ERR_CHIP((((u32)ncoinc1 << 0) & ~((u32)0x01FFFFFF)) == 0);
	cl_reg_write(chip, RIU_NCO_INC_1_ADDR, (u32)ncoinc1 << 0);
}

/**
 * @brief NCO_INIT_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:16 NCO_INIT_Q0               0x0
 *    14:00 NCO_INIT_I0               0x0
 * </pre>
 */
#define RIU_NCO_INIT_0_ADDR        (REG_RIU_BASE_ADDR + 0x000001F8)
#define RIU_NCO_INIT_0_OFFSET      0x000001F8
#define RIU_NCO_INIT_0_INDEX       0x0000007E
#define RIU_NCO_INIT_0_RESET       0x00000000

static inline u32 riu_nco_init_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_NCO_INIT_0_ADDR);
}

static inline void riu_nco_init_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_NCO_INIT_0_ADDR, value);
}

/* Field definitions */
#define RIU_NCO_INIT_0_NCO_INIT_Q_0_MASK    ((u32)0x7FFF0000)
#define RIU_NCO_INIT_0_NCO_INIT_Q_0_LSB     16
#define RIU_NCO_INIT_0_NCO_INIT_Q_0_WIDTH    ((u32)0x0000000F)
#define RIU_NCO_INIT_0_NCO_INIT_I_0_MASK    ((u32)0x00007FFF)
#define RIU_NCO_INIT_0_NCO_INIT_I_0_LSB     0
#define RIU_NCO_INIT_0_NCO_INIT_I_0_WIDTH    ((u32)0x0000000F)

#define RIU_NCO_INIT_0_NCO_INIT_Q_0_RST     0x0
#define RIU_NCO_INIT_0_NCO_INIT_I_0_RST     0x0

static inline void riu_nco_init_0_pack(struct cl_chip *chip, u16 nco_init_q0, u16 nco_init_i0)
{
	ASSERT_ERR_CHIP((((u32)nco_init_q0 << 16) & ~((u32)0x7FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)nco_init_i0 << 0) & ~((u32)0x00007FFF)) == 0);
	cl_reg_write(chip, RIU_NCO_INIT_0_ADDR, ((u32)nco_init_q0 << 16) | ((u32)nco_init_i0 << 0));
}

static inline void riu_nco_init_0_unpack(struct cl_chip *chip, u16 *nco_init_q0, u16 *nco_init_i0)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_INIT_0_ADDR);

	*nco_init_q0 = (local_val & ((u32)0x7FFF0000)) >> 16;
	*nco_init_i0 = (local_val & ((u32)0x00007FFF)) >> 0;
}

static inline u16 riu_nco_init_0_nco_init_q_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_INIT_0_ADDR);

	return (u16)((local_val & ((u32)0x7FFF0000)) >> 16);
}

static inline void riu_nco_init_0_nco_init_q_0_setf(struct cl_chip *chip, u16 ncoinitq0)
{
	ASSERT_ERR_CHIP((((u32)ncoinitq0 << 16) & ~((u32)0x7FFF0000)) == 0);
	cl_reg_write(chip, RIU_NCO_INIT_0_ADDR, (cl_reg_read(chip, RIU_NCO_INIT_0_ADDR) & ~((u32)0x7FFF0000)) | ((u32)ncoinitq0 << 16));
}

static inline u16 riu_nco_init_0_nco_init_i_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_INIT_0_ADDR);

	return (u16)((local_val & ((u32)0x00007FFF)) >> 0);
}

static inline void riu_nco_init_0_nco_init_i_0_setf(struct cl_chip *chip, u16 ncoiniti0)
{
	ASSERT_ERR_CHIP((((u32)ncoiniti0 << 0) & ~((u32)0x00007FFF)) == 0);
	cl_reg_write(chip, RIU_NCO_INIT_0_ADDR, (cl_reg_read(chip, RIU_NCO_INIT_0_ADDR) & ~((u32)0x00007FFF)) | ((u32)ncoiniti0 << 0));
}

/**
 * @brief NCO_INIT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:16 NCO_INIT_Q1               0x0
 *    14:00 NCO_INIT_I1               0x0
 * </pre>
 */
#define RIU_NCO_INIT_1_ADDR        (REG_RIU_BASE_ADDR + 0x000001FC)
#define RIU_NCO_INIT_1_OFFSET      0x000001FC
#define RIU_NCO_INIT_1_INDEX       0x0000007F
#define RIU_NCO_INIT_1_RESET       0x00000000

static inline u32 riu_nco_init_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_NCO_INIT_1_ADDR);
}

static inline void riu_nco_init_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_NCO_INIT_1_ADDR, value);
}

/* Field definitions */
#define RIU_NCO_INIT_1_NCO_INIT_Q_1_MASK    ((u32)0x7FFF0000)
#define RIU_NCO_INIT_1_NCO_INIT_Q_1_LSB     16
#define RIU_NCO_INIT_1_NCO_INIT_Q_1_WIDTH    ((u32)0x0000000F)
#define RIU_NCO_INIT_1_NCO_INIT_I_1_MASK    ((u32)0x00007FFF)
#define RIU_NCO_INIT_1_NCO_INIT_I_1_LSB     0
#define RIU_NCO_INIT_1_NCO_INIT_I_1_WIDTH    ((u32)0x0000000F)

#define RIU_NCO_INIT_1_NCO_INIT_Q_1_RST     0x0
#define RIU_NCO_INIT_1_NCO_INIT_I_1_RST     0x0

static inline void riu_nco_init_1_pack(struct cl_chip *chip, u16 nco_init_q1, u16 nco_init_i1)
{
	ASSERT_ERR_CHIP((((u32)nco_init_q1 << 16) & ~((u32)0x7FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)nco_init_i1 << 0) & ~((u32)0x00007FFF)) == 0);
	cl_reg_write(chip, RIU_NCO_INIT_1_ADDR, ((u32)nco_init_q1 << 16) | ((u32)nco_init_i1 << 0));
}

static inline void riu_nco_init_1_unpack(struct cl_chip *chip, u16 *nco_init_q1, u16 *nco_init_i1)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_INIT_1_ADDR);

	*nco_init_q1 = (local_val & ((u32)0x7FFF0000)) >> 16;
	*nco_init_i1 = (local_val & ((u32)0x00007FFF)) >> 0;
}

static inline u16 riu_nco_init_1_nco_init_q_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_INIT_1_ADDR);

	return (u16)((local_val & ((u32)0x7FFF0000)) >> 16);
}

static inline void riu_nco_init_1_nco_init_q_1_setf(struct cl_chip *chip, u16 ncoinitq1)
{
	ASSERT_ERR_CHIP((((u32)ncoinitq1 << 16) & ~((u32)0x7FFF0000)) == 0);
	cl_reg_write(chip, RIU_NCO_INIT_1_ADDR, (cl_reg_read(chip, RIU_NCO_INIT_1_ADDR) & ~((u32)0x7FFF0000)) | ((u32)ncoinitq1 << 16));
}

static inline u16 riu_nco_init_1_nco_init_i_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_NCO_INIT_1_ADDR);

	return (u16)((local_val & ((u32)0x00007FFF)) >> 0);
}

static inline void riu_nco_init_1_nco_init_i_1_setf(struct cl_chip *chip, u16 ncoiniti1)
{
	ASSERT_ERR_CHIP((((u32)ncoiniti1 << 0) & ~((u32)0x00007FFF)) == 0);
	cl_reg_write(chip, RIU_NCO_INIT_1_ADDR, (cl_reg_read(chip, RIU_NCO_INIT_1_ADDR) & ~((u32)0x00007FFF)) | ((u32)ncoiniti1 << 0));
}

/**
 * @brief AGCGAINSTAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 AGCGAIN3                  0x0
 *    23:16 AGCGAIN2                  0x0
 *    15:08 AGCGAIN1                  0x0
 *    07:00 AGCGAIN0                  0x0
 * </pre>
 */
#define RIU_AGCGAINSTAT_ADDR        (REG_RIU_BASE_ADDR + 0x00000200)
#define RIU_AGCGAINSTAT_OFFSET      0x00000200
#define RIU_AGCGAINSTAT_INDEX       0x00000080
#define RIU_AGCGAINSTAT_RESET       0x00000000

static inline u32 riu_agcgainstat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCGAINSTAT_ADDR);
}

/* Field definitions */
#define RIU_AGCGAINSTAT_AGCGAIN_3_MASK      ((u32)0xFF000000)
#define RIU_AGCGAINSTAT_AGCGAIN_3_LSB       24
#define RIU_AGCGAINSTAT_AGCGAIN_3_WIDTH     ((u32)0x00000008)
#define RIU_AGCGAINSTAT_AGCGAIN_2_MASK      ((u32)0x00FF0000)
#define RIU_AGCGAINSTAT_AGCGAIN_2_LSB       16
#define RIU_AGCGAINSTAT_AGCGAIN_2_WIDTH     ((u32)0x00000008)
#define RIU_AGCGAINSTAT_AGCGAIN_1_MASK      ((u32)0x0000FF00)
#define RIU_AGCGAINSTAT_AGCGAIN_1_LSB       8
#define RIU_AGCGAINSTAT_AGCGAIN_1_WIDTH     ((u32)0x00000008)
#define RIU_AGCGAINSTAT_AGCGAIN_0_MASK      ((u32)0x000000FF)
#define RIU_AGCGAINSTAT_AGCGAIN_0_LSB       0
#define RIU_AGCGAINSTAT_AGCGAIN_0_WIDTH     ((u32)0x00000008)

#define RIU_AGCGAINSTAT_AGCGAIN_3_RST       0x0
#define RIU_AGCGAINSTAT_AGCGAIN_2_RST       0x0
#define RIU_AGCGAINSTAT_AGCGAIN_1_RST       0x0
#define RIU_AGCGAINSTAT_AGCGAIN_0_RST       0x0

static inline void riu_agcgainstat_unpack(struct cl_chip *chip, u8 *agcgain3, u8 *agcgain2, u8 *agcgain1, u8 *agcgain0)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_ADDR);

	*agcgain3 = (local_val & ((u32)0xFF000000)) >> 24;
	*agcgain2 = (local_val & ((u32)0x00FF0000)) >> 16;
	*agcgain1 = (local_val & ((u32)0x0000FF00)) >> 8;
	*agcgain0 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_agcgainstat_agcgain_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_agcgainstat_agcgain_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_agcgainstat_agcgain_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_agcgainstat_agcgain_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief AGCRFGAINSTAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    28    AGCRFGAIN2_EXTLNA         0
 *    27:25 AGCRFGAIN2_LNA            0x0
 *    24:20 AGCRFGAIN2_VGA            0x0
 *    18    AGCRFGAIN1_EXTLNA         0
 *    17:15 AGCRFGAIN1_LNA            0x0
 *    14:10 AGCRFGAIN1_VGA            0x0
 *    08    AGCRFGAIN0_EXTLNA         0
 *    07:05 AGCRFGAIN0_LNA            0x0
 *    04:00 AGCRFGAIN0_VGA            0x0
 * </pre>
 */
#define RIU_AGCRFGAINSTAT_ADDR        (REG_RIU_BASE_ADDR + 0x00000204)
#define RIU_AGCRFGAINSTAT_OFFSET      0x00000204
#define RIU_AGCRFGAINSTAT_INDEX       0x00000081
#define RIU_AGCRFGAINSTAT_RESET       0x00000000

static inline u32 riu_agcrfgainstat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCRFGAINSTAT_ADDR);
}

/* Field definitions */
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_2_EXTLNA_BIT    ((u32)0x10000000)
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_2_EXTLNA_POS    28
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_2_LNA_MASK    ((u32)0x0E000000)
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_2_LNA_LSB    25
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_2_LNA_WIDTH    ((u32)0x00000003)
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_2_VGA_MASK    ((u32)0x01F00000)
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_2_VGA_LSB    20
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_2_VGA_WIDTH    ((u32)0x00000005)
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_1_EXTLNA_BIT    ((u32)0x00040000)
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_1_EXTLNA_POS    18
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_1_LNA_MASK    ((u32)0x00038000)
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_1_LNA_LSB    15
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_1_LNA_WIDTH    ((u32)0x00000003)
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_1_VGA_MASK    ((u32)0x00007C00)
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_1_VGA_LSB    10
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_1_VGA_WIDTH    ((u32)0x00000005)
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_0_EXTLNA_BIT    ((u32)0x00000100)
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_0_EXTLNA_POS    8
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_0_LNA_MASK    ((u32)0x000000E0)
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_0_LNA_LSB    5
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_0_LNA_WIDTH    ((u32)0x00000003)
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_0_VGA_MASK    ((u32)0x0000001F)
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_0_VGA_LSB    0
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_0_VGA_WIDTH    ((u32)0x00000005)

#define RIU_AGCRFGAINSTAT_AGCRFGAIN_2_EXTLNA_RST    0x0
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_2_LNA_RST    0x0
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_2_VGA_RST    0x0
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_1_EXTLNA_RST    0x0
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_1_LNA_RST    0x0
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_1_VGA_RST    0x0
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_0_EXTLNA_RST    0x0
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_0_LNA_RST    0x0
#define RIU_AGCRFGAINSTAT_AGCRFGAIN_0_VGA_RST    0x0

static inline void riu_agcrfgainstat_unpack(struct cl_chip *chip, u8 *agcrfgain2_extlna, u8 *agcrfgain2_lna, u8 *agcrfgain2_vga, u8 *agcrfgain1_extlna, u8 *agcrfgain1_lna, u8 *agcrfgain1_vga, u8 *agcrfgain0_extlna, u8 *agcrfgain0_lna, u8 *agcrfgain0_vga)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCRFGAINSTAT_ADDR);

	*agcrfgain2_extlna = (local_val & ((u32)0x10000000)) >> 28;
	*agcrfgain2_lna = (local_val & ((u32)0x0E000000)) >> 25;
	*agcrfgain2_vga = (local_val & ((u32)0x01F00000)) >> 20;
	*agcrfgain1_extlna = (local_val & ((u32)0x00040000)) >> 18;
	*agcrfgain1_lna = (local_val & ((u32)0x00038000)) >> 15;
	*agcrfgain1_vga = (local_val & ((u32)0x00007C00)) >> 10;
	*agcrfgain0_extlna = (local_val & ((u32)0x00000100)) >> 8;
	*agcrfgain0_lna = (local_val & ((u32)0x000000E0)) >> 5;
	*agcrfgain0_vga = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u8 riu_agcrfgainstat_agcrfgain_2_extlna_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCRFGAINSTAT_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline u8 riu_agcrfgainstat_agcrfgain_2_lna_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCRFGAINSTAT_ADDR);

	return (u8)((local_val & ((u32)0x0E000000)) >> 25);
}

static inline u8 riu_agcrfgainstat_agcrfgain_2_vga_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCRFGAINSTAT_ADDR);

	return (u8)((local_val & ((u32)0x01F00000)) >> 20);
}

static inline u8 riu_agcrfgainstat_agcrfgain_1_extlna_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCRFGAINSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline u8 riu_agcrfgainstat_agcrfgain_1_lna_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCRFGAINSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00038000)) >> 15);
}

static inline u8 riu_agcrfgainstat_agcrfgain_1_vga_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCRFGAINSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00007C00)) >> 10);
}

static inline u8 riu_agcrfgainstat_agcrfgain_0_extlna_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCRFGAINSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline u8 riu_agcrfgainstat_agcrfgain_0_lna_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCRFGAINSTAT_ADDR);

	return (u8)((local_val & ((u32)0x000000E0)) >> 5);
}

static inline u8 riu_agcrfgainstat_agcrfgain_0_vga_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCRFGAINSTAT_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

/**
 * @brief AGCADCPOWSTAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 ADCPOWDBV3                0x0
 *    22:16 ADCPOWDBV2                0x0
 *    14:08 ADCPOWDBV1                0x0
 *    06:00 ADCPOWDBV0                0x0
 * </pre>
 */
#define RIU_AGCADCPOWSTAT_ADDR        (REG_RIU_BASE_ADDR + 0x00000208)
#define RIU_AGCADCPOWSTAT_OFFSET      0x00000208
#define RIU_AGCADCPOWSTAT_INDEX       0x00000082
#define RIU_AGCADCPOWSTAT_RESET       0x00000000

static inline u32 riu_agcadcpowstat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCADCPOWSTAT_ADDR);
}

/* Field definitions */
#define RIU_AGCADCPOWSTAT_ADCPOWDBV_3_MASK    ((u32)0x7F000000)
#define RIU_AGCADCPOWSTAT_ADCPOWDBV_3_LSB    24
#define RIU_AGCADCPOWSTAT_ADCPOWDBV_3_WIDTH    ((u32)0x00000007)
#define RIU_AGCADCPOWSTAT_ADCPOWDBV_2_MASK    ((u32)0x007F0000)
#define RIU_AGCADCPOWSTAT_ADCPOWDBV_2_LSB    16
#define RIU_AGCADCPOWSTAT_ADCPOWDBV_2_WIDTH    ((u32)0x00000007)
#define RIU_AGCADCPOWSTAT_ADCPOWDBV_1_MASK    ((u32)0x00007F00)
#define RIU_AGCADCPOWSTAT_ADCPOWDBV_1_LSB    8
#define RIU_AGCADCPOWSTAT_ADCPOWDBV_1_WIDTH    ((u32)0x00000007)
#define RIU_AGCADCPOWSTAT_ADCPOWDBV_0_MASK    ((u32)0x0000007F)
#define RIU_AGCADCPOWSTAT_ADCPOWDBV_0_LSB    0
#define RIU_AGCADCPOWSTAT_ADCPOWDBV_0_WIDTH    ((u32)0x00000007)

#define RIU_AGCADCPOWSTAT_ADCPOWDBV_3_RST    0x0
#define RIU_AGCADCPOWSTAT_ADCPOWDBV_2_RST    0x0
#define RIU_AGCADCPOWSTAT_ADCPOWDBV_1_RST    0x0
#define RIU_AGCADCPOWSTAT_ADCPOWDBV_0_RST    0x0

static inline void riu_agcadcpowstat_unpack(struct cl_chip *chip, u8 *adcpowdbv3, u8 *adcpowdbv2, u8 *adcpowdbv1, u8 *adcpowdbv0)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCADCPOWSTAT_ADDR);

	*adcpowdbv3 = (local_val & ((u32)0x7F000000)) >> 24;
	*adcpowdbv2 = (local_val & ((u32)0x007F0000)) >> 16;
	*adcpowdbv1 = (local_val & ((u32)0x00007F00)) >> 8;
	*adcpowdbv0 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_agcadcpowstat_adcpowdbv_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCADCPOWSTAT_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline u8 riu_agcadcpowstat_adcpowdbv_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCADCPOWSTAT_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline u8 riu_agcadcpowstat_adcpowdbv_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCADCPOWSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline u8 riu_agcadcpowstat_adcpowdbv_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCADCPOWSTAT_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

/**
 * @brief AGCINBDPOW_20_STAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 INBDPOW20_PDBM3           0x0
 *    23:16 INBDPOW20_PDBM2           0x0
 *    15:08 INBDPOW20_PDBM1           0x0
 *    07:00 INBDPOW20_PDBM0           0x0
 * </pre>
 */
#define RIU_AGCINBDPOW_20_STAT_ADDR        (REG_RIU_BASE_ADDR + 0x0000020C)
#define RIU_AGCINBDPOW_20_STAT_OFFSET      0x0000020C
#define RIU_AGCINBDPOW_20_STAT_INDEX       0x00000083
#define RIU_AGCINBDPOW_20_STAT_RESET       0x00000000

static inline u32 riu_agcinbdpow_20_stat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCINBDPOW_20_STAT_ADDR);
}

/* Field definitions */
#define RIU_AGCINBDPOW_20_STAT_INBDPOW_20_PDBM_3_MASK    ((u32)0xFF000000)
#define RIU_AGCINBDPOW_20_STAT_INBDPOW_20_PDBM_3_LSB    24
#define RIU_AGCINBDPOW_20_STAT_INBDPOW_20_PDBM_3_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOW_20_STAT_INBDPOW_20_PDBM_2_MASK    ((u32)0x00FF0000)
#define RIU_AGCINBDPOW_20_STAT_INBDPOW_20_PDBM_2_LSB    16
#define RIU_AGCINBDPOW_20_STAT_INBDPOW_20_PDBM_2_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOW_20_STAT_INBDPOW_20_PDBM_1_MASK    ((u32)0x0000FF00)
#define RIU_AGCINBDPOW_20_STAT_INBDPOW_20_PDBM_1_LSB    8
#define RIU_AGCINBDPOW_20_STAT_INBDPOW_20_PDBM_1_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOW_20_STAT_INBDPOW_20_PDBM_0_MASK    ((u32)0x000000FF)
#define RIU_AGCINBDPOW_20_STAT_INBDPOW_20_PDBM_0_LSB    0
#define RIU_AGCINBDPOW_20_STAT_INBDPOW_20_PDBM_0_WIDTH    ((u32)0x00000008)

#define RIU_AGCINBDPOW_20_STAT_INBDPOW_20_PDBM_3_RST    0x0
#define RIU_AGCINBDPOW_20_STAT_INBDPOW_20_PDBM_2_RST    0x0
#define RIU_AGCINBDPOW_20_STAT_INBDPOW_20_PDBM_1_RST    0x0
#define RIU_AGCINBDPOW_20_STAT_INBDPOW_20_PDBM_0_RST    0x0

static inline void riu_agcinbdpow_20_stat_unpack(struct cl_chip *chip, u8 *inbdpow20_pdbm3, u8 *inbdpow20_pdbm2, u8 *inbdpow20_pdbm1, u8 *inbdpow20_pdbm0)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOW_20_STAT_ADDR);

	*inbdpow20_pdbm3 = (local_val & ((u32)0xFF000000)) >> 24;
	*inbdpow20_pdbm2 = (local_val & ((u32)0x00FF0000)) >> 16;
	*inbdpow20_pdbm1 = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpow20_pdbm0 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_agcinbdpow_20_stat_inbdpow_20_pdbm_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOW_20_STAT_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_agcinbdpow_20_stat_inbdpow_20_pdbm_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOW_20_STAT_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_agcinbdpow_20_stat_inbdpow_20_pdbm_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOW_20_STAT_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_agcinbdpow_20_stat_inbdpow_20_pdbm_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOW_20_STAT_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief AGCDIGGAIN_0_STAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 DIGGAIN160_ANT0           0x0
 *    22:16 DIGGAIN80_ANT0            0x0
 *    14:08 DIGGAIN40_ANT0            0x0
 *    06:00 DIGGAIN20_ANT0            0x0
 * </pre>
 */
#define RIU_AGCDIGGAIN_0_STAT_ADDR        (REG_RIU_BASE_ADDR + 0x00000210)
#define RIU_AGCDIGGAIN_0_STAT_OFFSET      0x00000210
#define RIU_AGCDIGGAIN_0_STAT_INDEX       0x00000084
#define RIU_AGCDIGGAIN_0_STAT_RESET       0x00000000

static inline u32 riu_agcdiggain_0_stat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCDIGGAIN_0_STAT_ADDR);
}

/* Field definitions */
#define RIU_AGCDIGGAIN_0_STAT_DIGGAIN_160_ANT_0_MASK    ((u32)0x7F000000)
#define RIU_AGCDIGGAIN_0_STAT_DIGGAIN_160_ANT_0_LSB    24
#define RIU_AGCDIGGAIN_0_STAT_DIGGAIN_160_ANT_0_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_0_STAT_DIGGAIN_80_ANT_0_MASK    ((u32)0x007F0000)
#define RIU_AGCDIGGAIN_0_STAT_DIGGAIN_80_ANT_0_LSB    16
#define RIU_AGCDIGGAIN_0_STAT_DIGGAIN_80_ANT_0_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_0_STAT_DIGGAIN_40_ANT_0_MASK    ((u32)0x00007F00)
#define RIU_AGCDIGGAIN_0_STAT_DIGGAIN_40_ANT_0_LSB    8
#define RIU_AGCDIGGAIN_0_STAT_DIGGAIN_40_ANT_0_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_0_STAT_DIGGAIN_20_ANT_0_MASK    ((u32)0x0000007F)
#define RIU_AGCDIGGAIN_0_STAT_DIGGAIN_20_ANT_0_LSB    0
#define RIU_AGCDIGGAIN_0_STAT_DIGGAIN_20_ANT_0_WIDTH    ((u32)0x00000007)

#define RIU_AGCDIGGAIN_0_STAT_DIGGAIN_160_ANT_0_RST    0x0
#define RIU_AGCDIGGAIN_0_STAT_DIGGAIN_80_ANT_0_RST    0x0
#define RIU_AGCDIGGAIN_0_STAT_DIGGAIN_40_ANT_0_RST    0x0
#define RIU_AGCDIGGAIN_0_STAT_DIGGAIN_20_ANT_0_RST    0x0

static inline void riu_agcdiggain_0_stat_unpack(struct cl_chip *chip, u8 *diggain160_ant0, u8 *diggain80_ant0, u8 *diggain40_ant0, u8 *diggain20_ant0)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_0_STAT_ADDR);

	*diggain160_ant0 = (local_val & ((u32)0x7F000000)) >> 24;
	*diggain80_ant0 = (local_val & ((u32)0x007F0000)) >> 16;
	*diggain40_ant0 = (local_val & ((u32)0x00007F00)) >> 8;
	*diggain20_ant0 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_agcdiggain_0_stat_diggain_160_ant_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_0_STAT_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline u8 riu_agcdiggain_0_stat_diggain_80_ant_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_0_STAT_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline u8 riu_agcdiggain_0_stat_diggain_40_ant_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_0_STAT_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline u8 riu_agcdiggain_0_stat_diggain_20_ant_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_0_STAT_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

/**
 * @brief AGCDIGGAIN_1_STAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 DIGGAIN160_ANT1           0x0
 *    22:16 DIGGAIN80_ANT1            0x0
 *    14:08 DIGGAIN40_ANT1            0x0
 *    06:00 DIGGAIN20_ANT1            0x0
 * </pre>
 */
#define RIU_AGCDIGGAIN_1_STAT_ADDR        (REG_RIU_BASE_ADDR + 0x00000214)
#define RIU_AGCDIGGAIN_1_STAT_OFFSET      0x00000214
#define RIU_AGCDIGGAIN_1_STAT_INDEX       0x00000085
#define RIU_AGCDIGGAIN_1_STAT_RESET       0x00000000

static inline u32 riu_agcdiggain_1_stat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCDIGGAIN_1_STAT_ADDR);
}

/* Field definitions */
#define RIU_AGCDIGGAIN_1_STAT_DIGGAIN_160_ANT_1_MASK    ((u32)0x7F000000)
#define RIU_AGCDIGGAIN_1_STAT_DIGGAIN_160_ANT_1_LSB    24
#define RIU_AGCDIGGAIN_1_STAT_DIGGAIN_160_ANT_1_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_1_STAT_DIGGAIN_80_ANT_1_MASK    ((u32)0x007F0000)
#define RIU_AGCDIGGAIN_1_STAT_DIGGAIN_80_ANT_1_LSB    16
#define RIU_AGCDIGGAIN_1_STAT_DIGGAIN_80_ANT_1_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_1_STAT_DIGGAIN_40_ANT_1_MASK    ((u32)0x00007F00)
#define RIU_AGCDIGGAIN_1_STAT_DIGGAIN_40_ANT_1_LSB    8
#define RIU_AGCDIGGAIN_1_STAT_DIGGAIN_40_ANT_1_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_1_STAT_DIGGAIN_20_ANT_1_MASK    ((u32)0x0000007F)
#define RIU_AGCDIGGAIN_1_STAT_DIGGAIN_20_ANT_1_LSB    0
#define RIU_AGCDIGGAIN_1_STAT_DIGGAIN_20_ANT_1_WIDTH    ((u32)0x00000007)

#define RIU_AGCDIGGAIN_1_STAT_DIGGAIN_160_ANT_1_RST    0x0
#define RIU_AGCDIGGAIN_1_STAT_DIGGAIN_80_ANT_1_RST    0x0
#define RIU_AGCDIGGAIN_1_STAT_DIGGAIN_40_ANT_1_RST    0x0
#define RIU_AGCDIGGAIN_1_STAT_DIGGAIN_20_ANT_1_RST    0x0

static inline void riu_agcdiggain_1_stat_unpack(struct cl_chip *chip, u8 *diggain160_ant1, u8 *diggain80_ant1, u8 *diggain40_ant1, u8 *diggain20_ant1)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_1_STAT_ADDR);

	*diggain160_ant1 = (local_val & ((u32)0x7F000000)) >> 24;
	*diggain80_ant1 = (local_val & ((u32)0x007F0000)) >> 16;
	*diggain40_ant1 = (local_val & ((u32)0x00007F00)) >> 8;
	*diggain20_ant1 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_agcdiggain_1_stat_diggain_160_ant_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_1_STAT_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline u8 riu_agcdiggain_1_stat_diggain_80_ant_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_1_STAT_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline u8 riu_agcdiggain_1_stat_diggain_40_ant_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_1_STAT_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline u8 riu_agcdiggain_1_stat_diggain_20_ant_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_1_STAT_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

/**
 * @brief AGCDIGGAIN_2_STAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 DIGGAIN160_ANT2           0x0
 *    22:16 DIGGAIN80_ANT2            0x0
 *    14:08 DIGGAIN40_ANT2            0x0
 *    06:00 DIGGAIN20_ANT2            0x0
 * </pre>
 */
#define RIU_AGCDIGGAIN_2_STAT_ADDR        (REG_RIU_BASE_ADDR + 0x00000218)
#define RIU_AGCDIGGAIN_2_STAT_OFFSET      0x00000218
#define RIU_AGCDIGGAIN_2_STAT_INDEX       0x00000086
#define RIU_AGCDIGGAIN_2_STAT_RESET       0x00000000

static inline u32 riu_agcdiggain_2_stat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCDIGGAIN_2_STAT_ADDR);
}

/* Field definitions */
#define RIU_AGCDIGGAIN_2_STAT_DIGGAIN_160_ANT_2_MASK    ((u32)0x7F000000)
#define RIU_AGCDIGGAIN_2_STAT_DIGGAIN_160_ANT_2_LSB    24
#define RIU_AGCDIGGAIN_2_STAT_DIGGAIN_160_ANT_2_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_2_STAT_DIGGAIN_80_ANT_2_MASK    ((u32)0x007F0000)
#define RIU_AGCDIGGAIN_2_STAT_DIGGAIN_80_ANT_2_LSB    16
#define RIU_AGCDIGGAIN_2_STAT_DIGGAIN_80_ANT_2_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_2_STAT_DIGGAIN_40_ANT_2_MASK    ((u32)0x00007F00)
#define RIU_AGCDIGGAIN_2_STAT_DIGGAIN_40_ANT_2_LSB    8
#define RIU_AGCDIGGAIN_2_STAT_DIGGAIN_40_ANT_2_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_2_STAT_DIGGAIN_20_ANT_2_MASK    ((u32)0x0000007F)
#define RIU_AGCDIGGAIN_2_STAT_DIGGAIN_20_ANT_2_LSB    0
#define RIU_AGCDIGGAIN_2_STAT_DIGGAIN_20_ANT_2_WIDTH    ((u32)0x00000007)

#define RIU_AGCDIGGAIN_2_STAT_DIGGAIN_160_ANT_2_RST    0x0
#define RIU_AGCDIGGAIN_2_STAT_DIGGAIN_80_ANT_2_RST    0x0
#define RIU_AGCDIGGAIN_2_STAT_DIGGAIN_40_ANT_2_RST    0x0
#define RIU_AGCDIGGAIN_2_STAT_DIGGAIN_20_ANT_2_RST    0x0

static inline void riu_agcdiggain_2_stat_unpack(struct cl_chip *chip, u8 *diggain160_ant2, u8 *diggain80_ant2, u8 *diggain40_ant2, u8 *diggain20_ant2)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_2_STAT_ADDR);

	*diggain160_ant2 = (local_val & ((u32)0x7F000000)) >> 24;
	*diggain80_ant2 = (local_val & ((u32)0x007F0000)) >> 16;
	*diggain40_ant2 = (local_val & ((u32)0x00007F00)) >> 8;
	*diggain20_ant2 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_agcdiggain_2_stat_diggain_160_ant_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_2_STAT_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline u8 riu_agcdiggain_2_stat_diggain_80_ant_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_2_STAT_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline u8 riu_agcdiggain_2_stat_diggain_40_ant_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_2_STAT_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline u8 riu_agcdiggain_2_stat_diggain_20_ant_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_2_STAT_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

/**
 * @brief AGCDIGGAIN_3_STAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 DIGGAIN160_ANT3           0x0
 *    22:16 DIGGAIN80_ANT3            0x0
 *    14:08 DIGGAIN40_ANT3            0x0
 *    06:00 DIGGAIN20_ANT3            0x0
 * </pre>
 */
#define RIU_AGCDIGGAIN_3_STAT_ADDR        (REG_RIU_BASE_ADDR + 0x0000021C)
#define RIU_AGCDIGGAIN_3_STAT_OFFSET      0x0000021C
#define RIU_AGCDIGGAIN_3_STAT_INDEX       0x00000087
#define RIU_AGCDIGGAIN_3_STAT_RESET       0x00000000

static inline u32 riu_agcdiggain_3_stat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCDIGGAIN_3_STAT_ADDR);
}

/* Field definitions */
#define RIU_AGCDIGGAIN_3_STAT_DIGGAIN_160_ANT_3_MASK    ((u32)0x7F000000)
#define RIU_AGCDIGGAIN_3_STAT_DIGGAIN_160_ANT_3_LSB    24
#define RIU_AGCDIGGAIN_3_STAT_DIGGAIN_160_ANT_3_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_3_STAT_DIGGAIN_80_ANT_3_MASK    ((u32)0x007F0000)
#define RIU_AGCDIGGAIN_3_STAT_DIGGAIN_80_ANT_3_LSB    16
#define RIU_AGCDIGGAIN_3_STAT_DIGGAIN_80_ANT_3_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_3_STAT_DIGGAIN_40_ANT_3_MASK    ((u32)0x00007F00)
#define RIU_AGCDIGGAIN_3_STAT_DIGGAIN_40_ANT_3_LSB    8
#define RIU_AGCDIGGAIN_3_STAT_DIGGAIN_40_ANT_3_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_3_STAT_DIGGAIN_20_ANT_3_MASK    ((u32)0x0000007F)
#define RIU_AGCDIGGAIN_3_STAT_DIGGAIN_20_ANT_3_LSB    0
#define RIU_AGCDIGGAIN_3_STAT_DIGGAIN_20_ANT_3_WIDTH    ((u32)0x00000007)

#define RIU_AGCDIGGAIN_3_STAT_DIGGAIN_160_ANT_3_RST    0x0
#define RIU_AGCDIGGAIN_3_STAT_DIGGAIN_80_ANT_3_RST    0x0
#define RIU_AGCDIGGAIN_3_STAT_DIGGAIN_40_ANT_3_RST    0x0
#define RIU_AGCDIGGAIN_3_STAT_DIGGAIN_20_ANT_3_RST    0x0

static inline void riu_agcdiggain_3_stat_unpack(struct cl_chip *chip, u8 *diggain160_ant3, u8 *diggain80_ant3, u8 *diggain40_ant3, u8 *diggain20_ant3)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_3_STAT_ADDR);

	*diggain160_ant3 = (local_val & ((u32)0x7F000000)) >> 24;
	*diggain80_ant3 = (local_val & ((u32)0x007F0000)) >> 16;
	*diggain40_ant3 = (local_val & ((u32)0x00007F00)) >> 8;
	*diggain20_ant3 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_agcdiggain_3_stat_diggain_160_ant_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_3_STAT_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline u8 riu_agcdiggain_3_stat_diggain_80_ant_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_3_STAT_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline u8 riu_agcdiggain_3_stat_diggain_40_ant_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_3_STAT_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline u8 riu_agcdiggain_3_stat_diggain_20_ant_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_3_STAT_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

/**
 * @brief RADARSTAT_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    28:21 PULSE_LENGTH              0x0
 *    20:13 AGC_CMD_71_PARAM_2        0x0
 *    12:10 AGC_CMD_71_PARAM_1        0x0
 *    09:05 FSM_STATE                 0x0
 *    04    CUR_PASS_NUM              0
 *    03    MEAS_DONE_3               0
 *    02    MEAS_DONE_2               0
 *    01    MEAS_DONE_1               0
 *    00    RADFIFOEMPTY              1
 * </pre>
 */
#define RIU_RADARSTAT_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000220)
#define RIU_RADARSTAT_0_OFFSET      0x00000220
#define RIU_RADARSTAT_0_INDEX       0x00000088
#define RIU_RADARSTAT_0_RESET       0x00000001

static inline u32 riu_radarstat_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADARSTAT_0_ADDR);
}

/* Field definitions */
#define RIU_RADARSTAT_0_PULSE_LENGTH_MASK    ((u32)0x1FE00000)
#define RIU_RADARSTAT_0_PULSE_LENGTH_LSB    21
#define RIU_RADARSTAT_0_PULSE_LENGTH_WIDTH    ((u32)0x00000008)
#define RIU_RADARSTAT_0_AGC_CMD_71_PARAM_2_MASK    ((u32)0x001FE000)
#define RIU_RADARSTAT_0_AGC_CMD_71_PARAM_2_LSB    13
#define RIU_RADARSTAT_0_AGC_CMD_71_PARAM_2_WIDTH    ((u32)0x00000008)
#define RIU_RADARSTAT_0_AGC_CMD_71_PARAM_1_MASK    ((u32)0x00001C00)
#define RIU_RADARSTAT_0_AGC_CMD_71_PARAM_1_LSB    10
#define RIU_RADARSTAT_0_AGC_CMD_71_PARAM_1_WIDTH    ((u32)0x00000003)
#define RIU_RADARSTAT_0_FSM_STATE_MASK      ((u32)0x000003E0)
#define RIU_RADARSTAT_0_FSM_STATE_LSB       5
#define RIU_RADARSTAT_0_FSM_STATE_WIDTH     ((u32)0x00000005)
#define RIU_RADARSTAT_0_CUR_PASS_NUM_BIT    ((u32)0x00000010)
#define RIU_RADARSTAT_0_CUR_PASS_NUM_POS    4
#define RIU_RADARSTAT_0_MEAS_DONE_3_BIT     ((u32)0x00000008)
#define RIU_RADARSTAT_0_MEAS_DONE_3_POS     3
#define RIU_RADARSTAT_0_MEAS_DONE_2_BIT     ((u32)0x00000004)
#define RIU_RADARSTAT_0_MEAS_DONE_2_POS     2
#define RIU_RADARSTAT_0_MEAS_DONE_1_BIT     ((u32)0x00000002)
#define RIU_RADARSTAT_0_MEAS_DONE_1_POS     1
#define RIU_RADARSTAT_0_RADFIFOEMPTY_BIT    ((u32)0x00000001)
#define RIU_RADARSTAT_0_RADFIFOEMPTY_POS    0

#define RIU_RADARSTAT_0_PULSE_LENGTH_RST    0x0
#define RIU_RADARSTAT_0_AGC_CMD_71_PARAM_2_RST    0x0
#define RIU_RADARSTAT_0_AGC_CMD_71_PARAM_1_RST    0x0
#define RIU_RADARSTAT_0_FSM_STATE_RST       0x0
#define RIU_RADARSTAT_0_CUR_PASS_NUM_RST    0x0
#define RIU_RADARSTAT_0_MEAS_DONE_3_RST     0x0
#define RIU_RADARSTAT_0_MEAS_DONE_2_RST     0x0
#define RIU_RADARSTAT_0_MEAS_DONE_1_RST     0x0
#define RIU_RADARSTAT_0_RADFIFOEMPTY_RST    0x1

static inline void riu_radarstat_0_unpack(struct cl_chip *chip, u8 *pulse_length, u8 *agc_cmd_71_param_2, u8 *agc_cmd_71_param_1, u8 *fsm_state, u8 *cur_pass_num, u8 *meas_done_3, u8 *meas_done_2, u8 *meas_done_1, u8 *radfifoempty)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_0_ADDR);

	*pulse_length = (local_val & ((u32)0x1FE00000)) >> 21;
	*agc_cmd_71_param_2 = (local_val & ((u32)0x001FE000)) >> 13;
	*agc_cmd_71_param_1 = (local_val & ((u32)0x00001C00)) >> 10;
	*fsm_state = (local_val & ((u32)0x000003E0)) >> 5;
	*cur_pass_num = (local_val & ((u32)0x00000010)) >> 4;
	*meas_done_3 = (local_val & ((u32)0x00000008)) >> 3;
	*meas_done_2 = (local_val & ((u32)0x00000004)) >> 2;
	*meas_done_1 = (local_val & ((u32)0x00000002)) >> 1;
	*radfifoempty = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_radarstat_0_pulse_length_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_0_ADDR);

	return (u8)((local_val & ((u32)0x1FE00000)) >> 21);
}

static inline u8 riu_radarstat_0_agc_cmd_71_param_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_0_ADDR);

	return (u8)((local_val & ((u32)0x001FE000)) >> 13);
}

static inline u8 riu_radarstat_0_agc_cmd_71_param_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_0_ADDR);

	return (u8)((local_val & ((u32)0x00001C00)) >> 10);
}

static inline u8 riu_radarstat_0_fsm_state_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_0_ADDR);

	return (u8)((local_val & ((u32)0x000003E0)) >> 5);
}

static inline u8 riu_radarstat_0_cur_pass_num_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_0_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline u8 riu_radarstat_0_meas_done_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_0_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline u8 riu_radarstat_0_meas_done_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_0_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline u8 riu_radarstat_0_meas_done_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_0_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline u8 riu_radarstat_0_radfifoempty_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

/**
 * @brief UNLOCKTIMESTAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:22 AGCFSMSTAT                0x0
 *    20:08 AGCOFDMUNLOCKTIME         0x0
 * </pre>
 */
#define RIU_UNLOCKTIMESTAT_ADDR        (REG_RIU_BASE_ADDR + 0x00000224)
#define RIU_UNLOCKTIMESTAT_OFFSET      0x00000224
#define RIU_UNLOCKTIMESTAT_INDEX       0x00000089
#define RIU_UNLOCKTIMESTAT_RESET       0x00000000

static inline u32 riu_unlocktimestat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_UNLOCKTIMESTAT_ADDR);
}

/* Field definitions */
#define RIU_UNLOCKTIMESTAT_AGCFSMSTAT_MASK    ((u32)0xFFC00000)
#define RIU_UNLOCKTIMESTAT_AGCFSMSTAT_LSB    22
#define RIU_UNLOCKTIMESTAT_AGCFSMSTAT_WIDTH    ((u32)0x0000000A)
#define RIU_UNLOCKTIMESTAT_AGCOFDMUNLOCKTIME_MASK    ((u32)0x001FFF00)
#define RIU_UNLOCKTIMESTAT_AGCOFDMUNLOCKTIME_LSB    8
#define RIU_UNLOCKTIMESTAT_AGCOFDMUNLOCKTIME_WIDTH    ((u32)0x0000000D)

#define RIU_UNLOCKTIMESTAT_AGCFSMSTAT_RST    0x0
#define RIU_UNLOCKTIMESTAT_AGCOFDMUNLOCKTIME_RST    0x0

static inline void riu_unlocktimestat_unpack(struct cl_chip *chip, u16 *agcfsmstat, u16 *agcofdmunlocktime)
{
	u32 local_val = cl_reg_read(chip, RIU_UNLOCKTIMESTAT_ADDR);

	*agcfsmstat = (local_val & ((u32)0xFFC00000)) >> 22;
	*agcofdmunlocktime = (local_val & ((u32)0x001FFF00)) >> 8;
}

static inline u16 riu_unlocktimestat_agcfsmstat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_UNLOCKTIMESTAT_ADDR);

	return (u16)((local_val & ((u32)0xFFC00000)) >> 22);
}

static inline u16 riu_unlocktimestat_agcofdmunlocktime_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_UNLOCKTIMESTAT_ADDR);

	return (u16)((local_val & ((u32)0x001FFF00)) >> 8);
}

/**
 * @brief AGCINBDPOW_20_PNOISESTAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 INBDPOW20_PNOISEDBM3      0x0
 *    23:16 INBDPOW20_PNOISEDBM2      0x0
 *    15:08 INBDPOW20_PNOISEDBM1      0x0
 *    07:00 INBDPOW20_PNOISEDBM0      0x0
 * </pre>
 */
#define RIU_AGCINBDPOW_20_PNOISESTAT_ADDR        (REG_RIU_BASE_ADDR + 0x00000228)
#define RIU_AGCINBDPOW_20_PNOISESTAT_OFFSET      0x00000228
#define RIU_AGCINBDPOW_20_PNOISESTAT_INDEX       0x0000008A
#define RIU_AGCINBDPOW_20_PNOISESTAT_RESET       0x00000000

static inline u32 riu_agcinbdpow_20_pnoisestat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCINBDPOW_20_PNOISESTAT_ADDR);
}

/* Field definitions */
#define RIU_AGCINBDPOW_20_PNOISESTAT_INBDPOW_20_PNOISEDBM_3_MASK    ((u32)0xFF000000)
#define RIU_AGCINBDPOW_20_PNOISESTAT_INBDPOW_20_PNOISEDBM_3_LSB    24
#define RIU_AGCINBDPOW_20_PNOISESTAT_INBDPOW_20_PNOISEDBM_3_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOW_20_PNOISESTAT_INBDPOW_20_PNOISEDBM_2_MASK    ((u32)0x00FF0000)
#define RIU_AGCINBDPOW_20_PNOISESTAT_INBDPOW_20_PNOISEDBM_2_LSB    16
#define RIU_AGCINBDPOW_20_PNOISESTAT_INBDPOW_20_PNOISEDBM_2_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOW_20_PNOISESTAT_INBDPOW_20_PNOISEDBM_1_MASK    ((u32)0x0000FF00)
#define RIU_AGCINBDPOW_20_PNOISESTAT_INBDPOW_20_PNOISEDBM_1_LSB    8
#define RIU_AGCINBDPOW_20_PNOISESTAT_INBDPOW_20_PNOISEDBM_1_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOW_20_PNOISESTAT_INBDPOW_20_PNOISEDBM_0_MASK    ((u32)0x000000FF)
#define RIU_AGCINBDPOW_20_PNOISESTAT_INBDPOW_20_PNOISEDBM_0_LSB    0
#define RIU_AGCINBDPOW_20_PNOISESTAT_INBDPOW_20_PNOISEDBM_0_WIDTH    ((u32)0x00000008)

#define RIU_AGCINBDPOW_20_PNOISESTAT_INBDPOW_20_PNOISEDBM_3_RST    0x0
#define RIU_AGCINBDPOW_20_PNOISESTAT_INBDPOW_20_PNOISEDBM_2_RST    0x0
#define RIU_AGCINBDPOW_20_PNOISESTAT_INBDPOW_20_PNOISEDBM_1_RST    0x0
#define RIU_AGCINBDPOW_20_PNOISESTAT_INBDPOW_20_PNOISEDBM_0_RST    0x0

static inline void riu_agcinbdpow_20_pnoisestat_unpack(struct cl_chip *chip, u8 *inbdpow20_pnoisedbm3, u8 *inbdpow20_pnoisedbm2, u8 *inbdpow20_pnoisedbm1, u8 *inbdpow20_pnoisedbm0)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOW_20_PNOISESTAT_ADDR);

	*inbdpow20_pnoisedbm3 = (local_val & ((u32)0xFF000000)) >> 24;
	*inbdpow20_pnoisedbm2 = (local_val & ((u32)0x00FF0000)) >> 16;
	*inbdpow20_pnoisedbm1 = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpow20_pnoisedbm0 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_agcinbdpow_20_pnoisestat_inbdpow_20_pnoisedbm_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOW_20_PNOISESTAT_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_agcinbdpow_20_pnoisestat_inbdpow_20_pnoisedbm_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOW_20_PNOISESTAT_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_agcinbdpow_20_pnoisestat_inbdpow_20_pnoisedbm_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOW_20_PNOISESTAT_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_agcinbdpow_20_pnoisestat_inbdpow_20_pnoisedbm_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOW_20_PNOISESTAT_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief AGCINBDPOWSECSTAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:16 INBDPOW80_SDBM            0x0
 *    15:08 INBDPOW40_SDBM            0x0
 *    07:00 INBDPOW20_SDBM            0x0
 * </pre>
 */
#define RIU_AGCINBDPOWSECSTAT_ADDR        (REG_RIU_BASE_ADDR + 0x0000022C)
#define RIU_AGCINBDPOWSECSTAT_OFFSET      0x0000022C
#define RIU_AGCINBDPOWSECSTAT_INDEX       0x0000008B
#define RIU_AGCINBDPOWSECSTAT_RESET       0x00000000

static inline u32 riu_agcinbdpowsecstat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCINBDPOWSECSTAT_ADDR);
}

/* Field definitions */
#define RIU_AGCINBDPOWSECSTAT_INBDPOW_80_SDBM_MASK    ((u32)0x00FF0000)
#define RIU_AGCINBDPOWSECSTAT_INBDPOW_80_SDBM_LSB    16
#define RIU_AGCINBDPOWSECSTAT_INBDPOW_80_SDBM_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOWSECSTAT_INBDPOW_40_SDBM_MASK    ((u32)0x0000FF00)
#define RIU_AGCINBDPOWSECSTAT_INBDPOW_40_SDBM_LSB    8
#define RIU_AGCINBDPOWSECSTAT_INBDPOW_40_SDBM_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOWSECSTAT_INBDPOW_20_SDBM_MASK    ((u32)0x000000FF)
#define RIU_AGCINBDPOWSECSTAT_INBDPOW_20_SDBM_LSB    0
#define RIU_AGCINBDPOWSECSTAT_INBDPOW_20_SDBM_WIDTH    ((u32)0x00000008)

#define RIU_AGCINBDPOWSECSTAT_INBDPOW_80_SDBM_RST    0x0
#define RIU_AGCINBDPOWSECSTAT_INBDPOW_40_SDBM_RST    0x0
#define RIU_AGCINBDPOWSECSTAT_INBDPOW_20_SDBM_RST    0x0

static inline void riu_agcinbdpowsecstat_unpack(struct cl_chip *chip, u8 *inbdpow80_sdbm, u8 *inbdpow40_sdbm, u8 *inbdpow20_sdbm)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWSECSTAT_ADDR);

	*inbdpow80_sdbm = (local_val & ((u32)0x00FF0000)) >> 16;
	*inbdpow40_sdbm = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpow20_sdbm = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_agcinbdpowsecstat_inbdpow_80_sdbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWSECSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_agcinbdpowsecstat_inbdpow_40_sdbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWSECSTAT_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_agcinbdpowsecstat_inbdpow_20_sdbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWSECSTAT_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief AGCINBDPOWSECNOISESTAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:16 INBDPOW80_SNOISEDBM       0x0
 *    15:08 INBDPOW40_SNOISEDBM       0x0
 *    07:00 INBDPOW20_SNOISEDBM       0x0
 * </pre>
 */
#define RIU_AGCINBDPOWSECNOISESTAT_ADDR        (REG_RIU_BASE_ADDR + 0x00000230)
#define RIU_AGCINBDPOWSECNOISESTAT_OFFSET      0x00000230
#define RIU_AGCINBDPOWSECNOISESTAT_INDEX       0x0000008C
#define RIU_AGCINBDPOWSECNOISESTAT_RESET       0x00000000

static inline u32 riu_agcinbdpowsecnoisestat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCINBDPOWSECNOISESTAT_ADDR);
}

/* Field definitions */
#define RIU_AGCINBDPOWSECNOISESTAT_INBDPOW_80_SNOISEDBM_MASK    ((u32)0x00FF0000)
#define RIU_AGCINBDPOWSECNOISESTAT_INBDPOW_80_SNOISEDBM_LSB    16
#define RIU_AGCINBDPOWSECNOISESTAT_INBDPOW_80_SNOISEDBM_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOWSECNOISESTAT_INBDPOW_40_SNOISEDBM_MASK    ((u32)0x0000FF00)
#define RIU_AGCINBDPOWSECNOISESTAT_INBDPOW_40_SNOISEDBM_LSB    8
#define RIU_AGCINBDPOWSECNOISESTAT_INBDPOW_40_SNOISEDBM_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOWSECNOISESTAT_INBDPOW_20_SNOISEDBM_MASK    ((u32)0x000000FF)
#define RIU_AGCINBDPOWSECNOISESTAT_INBDPOW_20_SNOISEDBM_LSB    0
#define RIU_AGCINBDPOWSECNOISESTAT_INBDPOW_20_SNOISEDBM_WIDTH    ((u32)0x00000008)

#define RIU_AGCINBDPOWSECNOISESTAT_INBDPOW_80_SNOISEDBM_RST    0x0
#define RIU_AGCINBDPOWSECNOISESTAT_INBDPOW_40_SNOISEDBM_RST    0x0
#define RIU_AGCINBDPOWSECNOISESTAT_INBDPOW_20_SNOISEDBM_RST    0x0

static inline void riu_agcinbdpowsecnoisestat_unpack(struct cl_chip *chip, u8 *inbdpow80_snoisedbm, u8 *inbdpow40_snoisedbm, u8 *inbdpow20_snoisedbm)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWSECNOISESTAT_ADDR);

	*inbdpow80_snoisedbm = (local_val & ((u32)0x00FF0000)) >> 16;
	*inbdpow40_snoisedbm = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpow20_snoisedbm = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_agcinbdpowsecnoisestat_inbdpow_80_snoisedbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWSECNOISESTAT_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_agcinbdpowsecnoisestat_inbdpow_40_snoisedbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWSECNOISESTAT_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_agcinbdpowsecnoisestat_inbdpow_20_snoisedbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWSECNOISESTAT_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief AGCADCPOWDBMSTAT register definition
 *  latched ADC Power estimation in dBm register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 ADCPOWDBM3                0x0
 *    23:16 ADCPOWDBM2                0x0
 *    15:08 ADCPOWDBM1                0x0
 *    07:00 ADCPOWDBM0                0x0
 * </pre>
 */
#define RIU_AGCADCPOWDBMSTAT_ADDR        (REG_RIU_BASE_ADDR + 0x00000234)
#define RIU_AGCADCPOWDBMSTAT_OFFSET      0x00000234
#define RIU_AGCADCPOWDBMSTAT_INDEX       0x0000008D
#define RIU_AGCADCPOWDBMSTAT_RESET       0x00000000

static inline u32 riu_agcadcpowdbmstat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCADCPOWDBMSTAT_ADDR);
}

/* Field definitions */
#define RIU_AGCADCPOWDBMSTAT_ADCPOWDBM_3_MASK    ((u32)0xFF000000)
#define RIU_AGCADCPOWDBMSTAT_ADCPOWDBM_3_LSB    24
#define RIU_AGCADCPOWDBMSTAT_ADCPOWDBM_3_WIDTH    ((u32)0x00000008)
#define RIU_AGCADCPOWDBMSTAT_ADCPOWDBM_2_MASK    ((u32)0x00FF0000)
#define RIU_AGCADCPOWDBMSTAT_ADCPOWDBM_2_LSB    16
#define RIU_AGCADCPOWDBMSTAT_ADCPOWDBM_2_WIDTH    ((u32)0x00000008)
#define RIU_AGCADCPOWDBMSTAT_ADCPOWDBM_1_MASK    ((u32)0x0000FF00)
#define RIU_AGCADCPOWDBMSTAT_ADCPOWDBM_1_LSB    8
#define RIU_AGCADCPOWDBMSTAT_ADCPOWDBM_1_WIDTH    ((u32)0x00000008)
#define RIU_AGCADCPOWDBMSTAT_ADCPOWDBM_0_MASK    ((u32)0x000000FF)
#define RIU_AGCADCPOWDBMSTAT_ADCPOWDBM_0_LSB    0
#define RIU_AGCADCPOWDBMSTAT_ADCPOWDBM_0_WIDTH    ((u32)0x00000008)

#define RIU_AGCADCPOWDBMSTAT_ADCPOWDBM_3_RST    0x0
#define RIU_AGCADCPOWDBMSTAT_ADCPOWDBM_2_RST    0x0
#define RIU_AGCADCPOWDBMSTAT_ADCPOWDBM_1_RST    0x0
#define RIU_AGCADCPOWDBMSTAT_ADCPOWDBM_0_RST    0x0

static inline void riu_agcadcpowdbmstat_unpack(struct cl_chip *chip, u8 *adcpowdbm3, u8 *adcpowdbm2, u8 *adcpowdbm1, u8 *adcpowdbm0)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCADCPOWDBMSTAT_ADDR);

	*adcpowdbm3 = (local_val & ((u32)0xFF000000)) >> 24;
	*adcpowdbm2 = (local_val & ((u32)0x00FF0000)) >> 16;
	*adcpowdbm1 = (local_val & ((u32)0x0000FF00)) >> 8;
	*adcpowdbm0 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_agcadcpowdbmstat_adcpowdbm_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCADCPOWDBMSTAT_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_agcadcpowdbmstat_adcpowdbm_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCADCPOWDBMSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_agcadcpowdbmstat_adcpowdbm_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCADCPOWDBMSTAT_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_agcadcpowdbmstat_adcpowdbm_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCADCPOWDBMSTAT_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief AGC_UNLOCK_REASON_RAW register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    22:00 AGC_UNLOCK_REASON_RAW     0x1
 * </pre>
 */
#define RIU_AGC_UNLOCK_REASON_RAW_ADDR        (REG_RIU_BASE_ADDR + 0x00000238)
#define RIU_AGC_UNLOCK_REASON_RAW_OFFSET      0x00000238
#define RIU_AGC_UNLOCK_REASON_RAW_INDEX       0x0000008E
#define RIU_AGC_UNLOCK_REASON_RAW_RESET       0x00000001

static inline u32 riu_agc_unlock_reason_raw_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGC_UNLOCK_REASON_RAW_ADDR);
}

/* Field definitions */
#define RIU_AGC_UNLOCK_REASON_RAW_AGC_UNLOCK_REASON_RAW_MASK    ((u32)0x007FFFFF)
#define RIU_AGC_UNLOCK_REASON_RAW_AGC_UNLOCK_REASON_RAW_LSB    0
#define RIU_AGC_UNLOCK_REASON_RAW_AGC_UNLOCK_REASON_RAW_WIDTH    ((u32)0x00000017)

#define RIU_AGC_UNLOCK_REASON_RAW_AGC_UNLOCK_REASON_RAW_RST    0x1

static inline u32 riu_agc_unlock_reason_raw_agc_unlock_reason_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGC_UNLOCK_REASON_RAW_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief AGCFSM_PRESET_P_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGCFSM_PRESET_P1          0x0
 * </pre>
 */
#define RIU_AGCFSM_PRESET_P_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000240)
#define RIU_AGCFSM_PRESET_P_1_OFFSET      0x00000240
#define RIU_AGCFSM_PRESET_P_1_INDEX       0x00000090
#define RIU_AGCFSM_PRESET_P_1_RESET       0x00000000

static inline u32 riu_agcfsm_preset_p_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_PRESET_P_1_ADDR);
}

static inline void riu_agcfsm_preset_p_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_1_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_PRESET_P_1_AGCFSM_PRESET_P_1_MASK    ((u32)0x00FFFFFF)
#define RIU_AGCFSM_PRESET_P_1_AGCFSM_PRESET_P_1_LSB    0
#define RIU_AGCFSM_PRESET_P_1_AGCFSM_PRESET_P_1_WIDTH    ((u32)0x00000018)

#define RIU_AGCFSM_PRESET_P_1_AGCFSM_PRESET_P_1_RST    0x0

static inline u32 riu_agcfsm_preset_p_1_agcfsm_preset_p_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_PRESET_P_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_agcfsm_preset_p_1_agcfsm_preset_p_1_setf(struct cl_chip *chip, u32 agcfsmpresetp1)
{
	ASSERT_ERR_CHIP((((u32)agcfsmpresetp1 << 0) & ~((u32)0x00FFFFFF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_1_ADDR, (u32)agcfsmpresetp1 << 0);
}

/**
 * @brief AGCFSM_PRESET_P_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGCFSM_PRESET_P2          0x0
 * </pre>
 */
#define RIU_AGCFSM_PRESET_P_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000244)
#define RIU_AGCFSM_PRESET_P_2_OFFSET      0x00000244
#define RIU_AGCFSM_PRESET_P_2_INDEX       0x00000091
#define RIU_AGCFSM_PRESET_P_2_RESET       0x00000000

static inline u32 riu_agcfsm_preset_p_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_PRESET_P_2_ADDR);
}

static inline void riu_agcfsm_preset_p_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_2_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_PRESET_P_2_AGCFSM_PRESET_P_2_MASK    ((u32)0x00FFFFFF)
#define RIU_AGCFSM_PRESET_P_2_AGCFSM_PRESET_P_2_LSB    0
#define RIU_AGCFSM_PRESET_P_2_AGCFSM_PRESET_P_2_WIDTH    ((u32)0x00000018)

#define RIU_AGCFSM_PRESET_P_2_AGCFSM_PRESET_P_2_RST    0x0

static inline u32 riu_agcfsm_preset_p_2_agcfsm_preset_p_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_PRESET_P_2_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_agcfsm_preset_p_2_agcfsm_preset_p_2_setf(struct cl_chip *chip, u32 agcfsmpresetp2)
{
	ASSERT_ERR_CHIP((((u32)agcfsmpresetp2 << 0) & ~((u32)0x00FFFFFF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_2_ADDR, (u32)agcfsmpresetp2 << 0);
}

/**
 * @brief AGCFSM_PRESET_P_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGCFSM_PRESET_P3          0x0
 * </pre>
 */
#define RIU_AGCFSM_PRESET_P_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000248)
#define RIU_AGCFSM_PRESET_P_3_OFFSET      0x00000248
#define RIU_AGCFSM_PRESET_P_3_INDEX       0x00000092
#define RIU_AGCFSM_PRESET_P_3_RESET       0x00000000

static inline u32 riu_agcfsm_preset_p_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_PRESET_P_3_ADDR);
}

static inline void riu_agcfsm_preset_p_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_3_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_PRESET_P_3_AGCFSM_PRESET_P_3_MASK    ((u32)0x00FFFFFF)
#define RIU_AGCFSM_PRESET_P_3_AGCFSM_PRESET_P_3_LSB    0
#define RIU_AGCFSM_PRESET_P_3_AGCFSM_PRESET_P_3_WIDTH    ((u32)0x00000018)

#define RIU_AGCFSM_PRESET_P_3_AGCFSM_PRESET_P_3_RST    0x0

static inline u32 riu_agcfsm_preset_p_3_agcfsm_preset_p_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_PRESET_P_3_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_agcfsm_preset_p_3_agcfsm_preset_p_3_setf(struct cl_chip *chip, u32 agcfsmpresetp3)
{
	ASSERT_ERR_CHIP((((u32)agcfsmpresetp3 << 0) & ~((u32)0x00FFFFFF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_3_ADDR, (u32)agcfsmpresetp3 << 0);
}

/**
 * @brief AGCFSM_PRESET_P_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGCFSM_PRESET_P4          0x0
 * </pre>
 */
#define RIU_AGCFSM_PRESET_P_4_ADDR        (REG_RIU_BASE_ADDR + 0x0000024C)
#define RIU_AGCFSM_PRESET_P_4_OFFSET      0x0000024C
#define RIU_AGCFSM_PRESET_P_4_INDEX       0x00000093
#define RIU_AGCFSM_PRESET_P_4_RESET       0x00000000

static inline u32 riu_agcfsm_preset_p_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_PRESET_P_4_ADDR);
}

static inline void riu_agcfsm_preset_p_4_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_4_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_PRESET_P_4_AGCFSM_PRESET_P_4_MASK    ((u32)0x00FFFFFF)
#define RIU_AGCFSM_PRESET_P_4_AGCFSM_PRESET_P_4_LSB    0
#define RIU_AGCFSM_PRESET_P_4_AGCFSM_PRESET_P_4_WIDTH    ((u32)0x00000018)

#define RIU_AGCFSM_PRESET_P_4_AGCFSM_PRESET_P_4_RST    0x0

static inline u32 riu_agcfsm_preset_p_4_agcfsm_preset_p_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_PRESET_P_4_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_agcfsm_preset_p_4_agcfsm_preset_p_4_setf(struct cl_chip *chip, u32 agcfsmpresetp4)
{
	ASSERT_ERR_CHIP((((u32)agcfsmpresetp4 << 0) & ~((u32)0x00FFFFFF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_4_ADDR, (u32)agcfsmpresetp4 << 0);
}

/**
 * @brief AGCFSM_PRESET_P_5 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGCFSM_PRESET_P5          0x0
 * </pre>
 */
#define RIU_AGCFSM_PRESET_P_5_ADDR        (REG_RIU_BASE_ADDR + 0x00000250)
#define RIU_AGCFSM_PRESET_P_5_OFFSET      0x00000250
#define RIU_AGCFSM_PRESET_P_5_INDEX       0x00000094
#define RIU_AGCFSM_PRESET_P_5_RESET       0x00000000

static inline u32 riu_agcfsm_preset_p_5_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_PRESET_P_5_ADDR);
}

static inline void riu_agcfsm_preset_p_5_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_5_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_PRESET_P_5_AGCFSM_PRESET_P_5_MASK    ((u32)0x00FFFFFF)
#define RIU_AGCFSM_PRESET_P_5_AGCFSM_PRESET_P_5_LSB    0
#define RIU_AGCFSM_PRESET_P_5_AGCFSM_PRESET_P_5_WIDTH    ((u32)0x00000018)

#define RIU_AGCFSM_PRESET_P_5_AGCFSM_PRESET_P_5_RST    0x0

static inline u32 riu_agcfsm_preset_p_5_agcfsm_preset_p_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_PRESET_P_5_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_agcfsm_preset_p_5_agcfsm_preset_p_5_setf(struct cl_chip *chip, u32 agcfsmpresetp5)
{
	ASSERT_ERR_CHIP((((u32)agcfsmpresetp5 << 0) & ~((u32)0x00FFFFFF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_5_ADDR, (u32)agcfsmpresetp5 << 0);
}

/**
 * @brief AGCFSM_PRESET_P_6 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGCFSM_PRESET_P6          0x0
 * </pre>
 */
#define RIU_AGCFSM_PRESET_P_6_ADDR        (REG_RIU_BASE_ADDR + 0x00000254)
#define RIU_AGCFSM_PRESET_P_6_OFFSET      0x00000254
#define RIU_AGCFSM_PRESET_P_6_INDEX       0x00000095
#define RIU_AGCFSM_PRESET_P_6_RESET       0x00000000

static inline u32 riu_agcfsm_preset_p_6_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_PRESET_P_6_ADDR);
}

static inline void riu_agcfsm_preset_p_6_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_6_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_PRESET_P_6_AGCFSM_PRESET_P_6_MASK    ((u32)0x00FFFFFF)
#define RIU_AGCFSM_PRESET_P_6_AGCFSM_PRESET_P_6_LSB    0
#define RIU_AGCFSM_PRESET_P_6_AGCFSM_PRESET_P_6_WIDTH    ((u32)0x00000018)

#define RIU_AGCFSM_PRESET_P_6_AGCFSM_PRESET_P_6_RST    0x0

static inline u32 riu_agcfsm_preset_p_6_agcfsm_preset_p_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_PRESET_P_6_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_agcfsm_preset_p_6_agcfsm_preset_p_6_setf(struct cl_chip *chip, u32 agcfsmpresetp6)
{
	ASSERT_ERR_CHIP((((u32)agcfsmpresetp6 << 0) & ~((u32)0x00FFFFFF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_6_ADDR, (u32)agcfsmpresetp6 << 0);
}

/**
 * @brief AGCFSM_PRESET_P_7 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGCFSM_PRESET_P7          0x0
 * </pre>
 */
#define RIU_AGCFSM_PRESET_P_7_ADDR        (REG_RIU_BASE_ADDR + 0x00000258)
#define RIU_AGCFSM_PRESET_P_7_OFFSET      0x00000258
#define RIU_AGCFSM_PRESET_P_7_INDEX       0x00000096
#define RIU_AGCFSM_PRESET_P_7_RESET       0x00000000

static inline u32 riu_agcfsm_preset_p_7_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_PRESET_P_7_ADDR);
}

static inline void riu_agcfsm_preset_p_7_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_7_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_PRESET_P_7_AGCFSM_PRESET_P_7_MASK    ((u32)0x00FFFFFF)
#define RIU_AGCFSM_PRESET_P_7_AGCFSM_PRESET_P_7_LSB    0
#define RIU_AGCFSM_PRESET_P_7_AGCFSM_PRESET_P_7_WIDTH    ((u32)0x00000018)

#define RIU_AGCFSM_PRESET_P_7_AGCFSM_PRESET_P_7_RST    0x0

static inline u32 riu_agcfsm_preset_p_7_agcfsm_preset_p_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_PRESET_P_7_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_agcfsm_preset_p_7_agcfsm_preset_p_7_setf(struct cl_chip *chip, u32 agcfsmpresetp7)
{
	ASSERT_ERR_CHIP((((u32)agcfsmpresetp7 << 0) & ~((u32)0x00FFFFFF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_7_ADDR, (u32)agcfsmpresetp7 << 0);
}

/**
 * @brief RWNXAGCLNATHRSET_0_REF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA11_THRSET0_DB          0x3a
 *    23:16 LNA10_THRSET0_DB          0x3a
 *    15:08 LNA9_THRSET0_DB           0x3a
 *    07:00 LNA8_THRSET0_DB           0x3a
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000025C)
#define RIU_RWNXAGCLNATHRSET_0_REF_2_OFFSET      0x0000025C
#define RIU_RWNXAGCLNATHRSET_0_REF_2_INDEX       0x00000097
#define RIU_RWNXAGCLNATHRSET_0_REF_2_RESET       0x3A3A3A3A

static inline u32 riu_rwnxagclnathrset_0_ref_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR);
}

static inline void riu_rwnxagclnathrset_0_ref_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_0_REF_2_LNA_11_THRSET_0_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_0_REF_2_LNA_11_THRSET_0_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_0_REF_2_LNA_11_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_0_REF_2_LNA_10_THRSET_0_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_0_REF_2_LNA_10_THRSET_0_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_0_REF_2_LNA_10_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_0_REF_2_LNA_9_THRSET_0_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_0_REF_2_LNA_9_THRSET_0_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_0_REF_2_LNA_9_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_0_REF_2_LNA_8_THRSET_0_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_0_REF_2_LNA_8_THRSET_0_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_0_REF_2_LNA_8_THRSET_0_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_0_REF_2_LNA_11_THRSET_0_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_0_REF_2_LNA_10_THRSET_0_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_0_REF_2_LNA_9_THRSET_0_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_0_REF_2_LNA_8_THRSET_0_DB_RST    0x3a

static inline void riu_rwnxagclnathrset_0_ref_2_pack(struct cl_chip *chip, u8 lna11_thrset0_db, u8 lna10_thrset0_db, u8 lna9_thrset0_db, u8 lna8_thrset0_db)
{
	ASSERT_ERR_CHIP((((u32)lna11_thrset0_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna10_thrset0_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna9_thrset0_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna8_thrset0_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR, ((u32)lna11_thrset0_db << 24) | ((u32)lna10_thrset0_db << 16) | ((u32)lna9_thrset0_db << 8) | ((u32)lna8_thrset0_db << 0));
}

static inline void riu_rwnxagclnathrset_0_ref_2_unpack(struct cl_chip *chip, u8 *lna11_thrset0_db, u8 *lna10_thrset0_db, u8 *lna9_thrset0_db, u8 *lna8_thrset0_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR);

	*lna11_thrset0_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna10_thrset0_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna9_thrset0_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna8_thrset0_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_0_ref_2_lna_11_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_0_ref_2_lna_11_thrset_0_db_setf(struct cl_chip *chip, u8 lna11thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna11thrset0db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR) & ~((u32)0xFF000000)) | ((u32)lna11thrset0db << 24));
}

static inline u8 riu_rwnxagclnathrset_0_ref_2_lna_10_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_0_ref_2_lna_10_thrset_0_db_setf(struct cl_chip *chip, u8 lna10thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna10thrset0db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna10thrset0db << 16));
}

static inline u8 riu_rwnxagclnathrset_0_ref_2_lna_9_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_0_ref_2_lna_9_thrset_0_db_setf(struct cl_chip *chip, u8 lna9thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna9thrset0db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna9thrset0db << 8));
}

static inline u8 riu_rwnxagclnathrset_0_ref_2_lna_8_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_0_ref_2_lna_8_thrset_0_db_setf(struct cl_chip *chip, u8 lna8thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna8thrset0db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_2_ADDR) & ~((u32)0x000000FF)) | ((u32)lna8thrset0db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_0_REF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:16 LNA14_THRSET0_DB          0x3a
 *    15:08 LNA13_THRSET0_DB          0x3a
 *    07:00 LNA12_THRSET0_DB          0x3a
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_0_REF_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000260)
#define RIU_RWNXAGCLNATHRSET_0_REF_3_OFFSET      0x00000260
#define RIU_RWNXAGCLNATHRSET_0_REF_3_INDEX       0x00000098
#define RIU_RWNXAGCLNATHRSET_0_REF_3_RESET       0x003A3A3A

static inline u32 riu_rwnxagclnathrset_0_ref_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_3_ADDR);
}

static inline void riu_rwnxagclnathrset_0_ref_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_0_REF_3_LNA_14_THRSET_0_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_0_REF_3_LNA_14_THRSET_0_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_0_REF_3_LNA_14_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_0_REF_3_LNA_13_THRSET_0_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_0_REF_3_LNA_13_THRSET_0_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_0_REF_3_LNA_13_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_0_REF_3_LNA_12_THRSET_0_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_0_REF_3_LNA_12_THRSET_0_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_0_REF_3_LNA_12_THRSET_0_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_0_REF_3_LNA_14_THRSET_0_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_0_REF_3_LNA_13_THRSET_0_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_0_REF_3_LNA_12_THRSET_0_DB_RST    0x3a

static inline void riu_rwnxagclnathrset_0_ref_3_pack(struct cl_chip *chip, u8 lna14_thrset0_db, u8 lna13_thrset0_db, u8 lna12_thrset0_db)
{
	ASSERT_ERR_CHIP((((u32)lna14_thrset0_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna13_thrset0_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna12_thrset0_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_3_ADDR, ((u32)lna14_thrset0_db << 16) | ((u32)lna13_thrset0_db << 8) | ((u32)lna12_thrset0_db << 0));
}

static inline void riu_rwnxagclnathrset_0_ref_3_unpack(struct cl_chip *chip, u8 *lna14_thrset0_db, u8 *lna13_thrset0_db, u8 *lna12_thrset0_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_3_ADDR);

	*lna14_thrset0_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna13_thrset0_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna12_thrset0_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_0_ref_3_lna_14_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_0_ref_3_lna_14_thrset_0_db_setf(struct cl_chip *chip, u8 lna14thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna14thrset0db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_3_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna14thrset0db << 16));
}

static inline u8 riu_rwnxagclnathrset_0_ref_3_lna_13_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_0_ref_3_lna_13_thrset_0_db_setf(struct cl_chip *chip, u8 lna13thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna13thrset0db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_3_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna13thrset0db << 8));
}

static inline u8 riu_rwnxagclnathrset_0_ref_3_lna_12_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_0_ref_3_lna_12_thrset_0_db_setf(struct cl_chip *chip, u8 lna12thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna12thrset0db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_3_ADDR) & ~((u32)0x000000FF)) | ((u32)lna12thrset0db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_1_REF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA11_THRSET1_DB          0x3a
 *    23:16 LNA10_THRSET1_DB          0x3a
 *    15:08 LNA9_THRSET1_DB           0x3a
 *    07:00 LNA8_THRSET1_DB           0x3a
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000264)
#define RIU_RWNXAGCLNATHRSET_1_REF_2_OFFSET      0x00000264
#define RIU_RWNXAGCLNATHRSET_1_REF_2_INDEX       0x00000099
#define RIU_RWNXAGCLNATHRSET_1_REF_2_RESET       0x3A3A3A3A

static inline u32 riu_rwnxagclnathrset_1_ref_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR);
}

static inline void riu_rwnxagclnathrset_1_ref_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_1_REF_2_LNA_11_THRSET_1_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_1_REF_2_LNA_11_THRSET_1_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_1_REF_2_LNA_11_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_1_REF_2_LNA_10_THRSET_1_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_1_REF_2_LNA_10_THRSET_1_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_1_REF_2_LNA_10_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_1_REF_2_LNA_9_THRSET_1_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_1_REF_2_LNA_9_THRSET_1_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_1_REF_2_LNA_9_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_1_REF_2_LNA_8_THRSET_1_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_1_REF_2_LNA_8_THRSET_1_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_1_REF_2_LNA_8_THRSET_1_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_1_REF_2_LNA_11_THRSET_1_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_1_REF_2_LNA_10_THRSET_1_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_1_REF_2_LNA_9_THRSET_1_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_1_REF_2_LNA_8_THRSET_1_DB_RST    0x3a

static inline void riu_rwnxagclnathrset_1_ref_2_pack(struct cl_chip *chip, u8 lna11_thrset1_db, u8 lna10_thrset1_db, u8 lna9_thrset1_db, u8 lna8_thrset1_db)
{
	ASSERT_ERR_CHIP((((u32)lna11_thrset1_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna10_thrset1_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna9_thrset1_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna8_thrset1_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR, ((u32)lna11_thrset1_db << 24) | ((u32)lna10_thrset1_db << 16) | ((u32)lna9_thrset1_db << 8) | ((u32)lna8_thrset1_db << 0));
}

static inline void riu_rwnxagclnathrset_1_ref_2_unpack(struct cl_chip *chip, u8 *lna11_thrset1_db, u8 *lna10_thrset1_db, u8 *lna9_thrset1_db, u8 *lna8_thrset1_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR);

	*lna11_thrset1_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna10_thrset1_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna9_thrset1_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna8_thrset1_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_1_ref_2_lna_11_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_1_ref_2_lna_11_thrset_1_db_setf(struct cl_chip *chip, u8 lna11thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna11thrset1db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR) & ~((u32)0xFF000000)) | ((u32)lna11thrset1db << 24));
}

static inline u8 riu_rwnxagclnathrset_1_ref_2_lna_10_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_1_ref_2_lna_10_thrset_1_db_setf(struct cl_chip *chip, u8 lna10thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna10thrset1db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna10thrset1db << 16));
}

static inline u8 riu_rwnxagclnathrset_1_ref_2_lna_9_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_1_ref_2_lna_9_thrset_1_db_setf(struct cl_chip *chip, u8 lna9thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna9thrset1db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna9thrset1db << 8));
}

static inline u8 riu_rwnxagclnathrset_1_ref_2_lna_8_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_1_ref_2_lna_8_thrset_1_db_setf(struct cl_chip *chip, u8 lna8thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna8thrset1db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_2_ADDR) & ~((u32)0x000000FF)) | ((u32)lna8thrset1db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_1_REF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:16 LNA14_THRSET1_DB          0x3a
 *    15:08 LNA13_THRSET1_DB          0x3a
 *    07:00 LNA12_THRSET1_DB          0x3a
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_1_REF_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000268)
#define RIU_RWNXAGCLNATHRSET_1_REF_3_OFFSET      0x00000268
#define RIU_RWNXAGCLNATHRSET_1_REF_3_INDEX       0x0000009A
#define RIU_RWNXAGCLNATHRSET_1_REF_3_RESET       0x003A3A3A

static inline u32 riu_rwnxagclnathrset_1_ref_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_3_ADDR);
}

static inline void riu_rwnxagclnathrset_1_ref_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_1_REF_3_LNA_14_THRSET_1_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_1_REF_3_LNA_14_THRSET_1_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_1_REF_3_LNA_14_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_1_REF_3_LNA_13_THRSET_1_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_1_REF_3_LNA_13_THRSET_1_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_1_REF_3_LNA_13_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_1_REF_3_LNA_12_THRSET_1_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_1_REF_3_LNA_12_THRSET_1_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_1_REF_3_LNA_12_THRSET_1_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_1_REF_3_LNA_14_THRSET_1_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_1_REF_3_LNA_13_THRSET_1_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_1_REF_3_LNA_12_THRSET_1_DB_RST    0x3a

static inline void riu_rwnxagclnathrset_1_ref_3_pack(struct cl_chip *chip, u8 lna14_thrset1_db, u8 lna13_thrset1_db, u8 lna12_thrset1_db)
{
	ASSERT_ERR_CHIP((((u32)lna14_thrset1_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna13_thrset1_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna12_thrset1_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_3_ADDR, ((u32)lna14_thrset1_db << 16) | ((u32)lna13_thrset1_db << 8) | ((u32)lna12_thrset1_db << 0));
}

static inline void riu_rwnxagclnathrset_1_ref_3_unpack(struct cl_chip *chip, u8 *lna14_thrset1_db, u8 *lna13_thrset1_db, u8 *lna12_thrset1_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_3_ADDR);

	*lna14_thrset1_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna13_thrset1_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna12_thrset1_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_1_ref_3_lna_14_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_1_ref_3_lna_14_thrset_1_db_setf(struct cl_chip *chip, u8 lna14thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna14thrset1db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_3_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna14thrset1db << 16));
}

static inline u8 riu_rwnxagclnathrset_1_ref_3_lna_13_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_1_ref_3_lna_13_thrset_1_db_setf(struct cl_chip *chip, u8 lna13thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna13thrset1db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_3_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna13thrset1db << 8));
}

static inline u8 riu_rwnxagclnathrset_1_ref_3_lna_12_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_1_ref_3_lna_12_thrset_1_db_setf(struct cl_chip *chip, u8 lna12thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna12thrset1db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_3_ADDR) & ~((u32)0x000000FF)) | ((u32)lna12thrset1db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_2_REF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA11_THRSET2_DB          0x3a
 *    23:16 LNA10_THRSET2_DB          0x3a
 *    15:08 LNA9_THRSET2_DB           0x3a
 *    07:00 LNA8_THRSET2_DB           0x3a
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000026C)
#define RIU_RWNXAGCLNATHRSET_2_REF_2_OFFSET      0x0000026C
#define RIU_RWNXAGCLNATHRSET_2_REF_2_INDEX       0x0000009B
#define RIU_RWNXAGCLNATHRSET_2_REF_2_RESET       0x3A3A3A3A

static inline u32 riu_rwnxagclnathrset_2_ref_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR);
}

static inline void riu_rwnxagclnathrset_2_ref_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_2_REF_2_LNA_11_THRSET_2_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_2_REF_2_LNA_11_THRSET_2_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_2_REF_2_LNA_11_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_2_REF_2_LNA_10_THRSET_2_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_2_REF_2_LNA_10_THRSET_2_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_2_REF_2_LNA_10_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_2_REF_2_LNA_9_THRSET_2_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_2_REF_2_LNA_9_THRSET_2_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_2_REF_2_LNA_9_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_2_REF_2_LNA_8_THRSET_2_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_2_REF_2_LNA_8_THRSET_2_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_2_REF_2_LNA_8_THRSET_2_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_2_REF_2_LNA_11_THRSET_2_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_2_REF_2_LNA_10_THRSET_2_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_2_REF_2_LNA_9_THRSET_2_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_2_REF_2_LNA_8_THRSET_2_DB_RST    0x3a

static inline void riu_rwnxagclnathrset_2_ref_2_pack(struct cl_chip *chip, u8 lna11_thrset2_db, u8 lna10_thrset2_db, u8 lna9_thrset2_db, u8 lna8_thrset2_db)
{
	ASSERT_ERR_CHIP((((u32)lna11_thrset2_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna10_thrset2_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna9_thrset2_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna8_thrset2_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR, ((u32)lna11_thrset2_db << 24) | ((u32)lna10_thrset2_db << 16) | ((u32)lna9_thrset2_db << 8) | ((u32)lna8_thrset2_db << 0));
}

static inline void riu_rwnxagclnathrset_2_ref_2_unpack(struct cl_chip *chip, u8 *lna11_thrset2_db, u8 *lna10_thrset2_db, u8 *lna9_thrset2_db, u8 *lna8_thrset2_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR);

	*lna11_thrset2_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna10_thrset2_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna9_thrset2_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna8_thrset2_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_2_ref_2_lna_11_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_2_ref_2_lna_11_thrset_2_db_setf(struct cl_chip *chip, u8 lna11thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna11thrset2db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR) & ~((u32)0xFF000000)) | ((u32)lna11thrset2db << 24));
}

static inline u8 riu_rwnxagclnathrset_2_ref_2_lna_10_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_2_ref_2_lna_10_thrset_2_db_setf(struct cl_chip *chip, u8 lna10thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna10thrset2db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna10thrset2db << 16));
}

static inline u8 riu_rwnxagclnathrset_2_ref_2_lna_9_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_2_ref_2_lna_9_thrset_2_db_setf(struct cl_chip *chip, u8 lna9thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna9thrset2db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna9thrset2db << 8));
}

static inline u8 riu_rwnxagclnathrset_2_ref_2_lna_8_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_2_ref_2_lna_8_thrset_2_db_setf(struct cl_chip *chip, u8 lna8thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna8thrset2db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_2_ADDR) & ~((u32)0x000000FF)) | ((u32)lna8thrset2db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_2_REF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:16 LNA14_THRSET2_DB          0x3a
 *    15:08 LNA13_THRSET2_DB          0x3a
 *    07:00 LNA12_THRSET2_DB          0x3a
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_2_REF_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000270)
#define RIU_RWNXAGCLNATHRSET_2_REF_3_OFFSET      0x00000270
#define RIU_RWNXAGCLNATHRSET_2_REF_3_INDEX       0x0000009C
#define RIU_RWNXAGCLNATHRSET_2_REF_3_RESET       0x003A3A3A

static inline u32 riu_rwnxagclnathrset_2_ref_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_3_ADDR);
}

static inline void riu_rwnxagclnathrset_2_ref_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_2_REF_3_LNA_14_THRSET_2_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_2_REF_3_LNA_14_THRSET_2_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_2_REF_3_LNA_14_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_2_REF_3_LNA_13_THRSET_2_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_2_REF_3_LNA_13_THRSET_2_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_2_REF_3_LNA_13_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_2_REF_3_LNA_12_THRSET_2_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_2_REF_3_LNA_12_THRSET_2_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_2_REF_3_LNA_12_THRSET_2_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_2_REF_3_LNA_14_THRSET_2_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_2_REF_3_LNA_13_THRSET_2_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_2_REF_3_LNA_12_THRSET_2_DB_RST    0x3a

static inline void riu_rwnxagclnathrset_2_ref_3_pack(struct cl_chip *chip, u8 lna14_thrset2_db, u8 lna13_thrset2_db, u8 lna12_thrset2_db)
{
	ASSERT_ERR_CHIP((((u32)lna14_thrset2_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna13_thrset2_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna12_thrset2_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_3_ADDR, ((u32)lna14_thrset2_db << 16) | ((u32)lna13_thrset2_db << 8) | ((u32)lna12_thrset2_db << 0));
}

static inline void riu_rwnxagclnathrset_2_ref_3_unpack(struct cl_chip *chip, u8 *lna14_thrset2_db, u8 *lna13_thrset2_db, u8 *lna12_thrset2_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_3_ADDR);

	*lna14_thrset2_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna13_thrset2_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna12_thrset2_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_2_ref_3_lna_14_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_2_ref_3_lna_14_thrset_2_db_setf(struct cl_chip *chip, u8 lna14thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna14thrset2db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_3_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna14thrset2db << 16));
}

static inline u8 riu_rwnxagclnathrset_2_ref_3_lna_13_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_2_ref_3_lna_13_thrset_2_db_setf(struct cl_chip *chip, u8 lna13thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna13thrset2db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_3_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna13thrset2db << 8));
}

static inline u8 riu_rwnxagclnathrset_2_ref_3_lna_12_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_2_ref_3_lna_12_thrset_2_db_setf(struct cl_chip *chip, u8 lna12thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna12thrset2db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_3_ADDR) & ~((u32)0x000000FF)) | ((u32)lna12thrset2db << 0));
}

/**
 * @brief RWNXAGCLNAGAINSET_0_REF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA11_GAINDB              0x27
 *    22:16 LNA10_GAINDB              0x27
 *    14:08 LNA9_GAINDB               0x27
 *    06:00 LNA8_GAINDB               0x27
 * </pre>
 */
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000274)
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_OFFSET      0x00000274
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_INDEX       0x0000009D
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_RESET       0x27272727

static inline u32 riu_rwnxagclnagainset_0_ref_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR);
}

static inline void riu_rwnxagclnagainset_0_ref_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_LNA_11_GAINDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_LNA_11_GAINDB_LSB    24
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_LNA_11_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_LNA_10_GAINDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_LNA_10_GAINDB_LSB    16
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_LNA_10_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_LNA_9_GAINDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_LNA_9_GAINDB_LSB    8
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_LNA_9_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_LNA_8_GAINDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_LNA_8_GAINDB_LSB    0
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_LNA_8_GAINDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAGAINSET_0_REF_2_LNA_11_GAINDB_RST    0x27
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_LNA_10_GAINDB_RST    0x27
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_LNA_9_GAINDB_RST    0x27
#define RIU_RWNXAGCLNAGAINSET_0_REF_2_LNA_8_GAINDB_RST    0x27

static inline void riu_rwnxagclnagainset_0_ref_2_pack(struct cl_chip *chip, u8 lna11_gaindb, u8 lna10_gaindb, u8 lna9_gaindb, u8 lna8_gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna11_gaindb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna10_gaindb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna9_gaindb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna8_gaindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR, ((u32)lna11_gaindb << 24) | ((u32)lna10_gaindb << 16) | ((u32)lna9_gaindb << 8) | ((u32)lna8_gaindb << 0));
}

static inline void riu_rwnxagclnagainset_0_ref_2_unpack(struct cl_chip *chip, u8 *lna11_gaindb, u8 *lna10_gaindb, u8 *lna9_gaindb, u8 *lna8_gaindb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR);

	*lna11_gaindb = (local_val & ((u32)0x7F000000)) >> 24;
	*lna10_gaindb = (local_val & ((u32)0x007F0000)) >> 16;
	*lna9_gaindb = (local_val & ((u32)0x00007F00)) >> 8;
	*lna8_gaindb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnagainset_0_ref_2_lna_11_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnagainset_0_ref_2_lna_11_gaindb_setf(struct cl_chip *chip, u8 lna11gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna11gaindb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR) & ~((u32)0x7F000000)) | ((u32)lna11gaindb << 24));
}

static inline u8 riu_rwnxagclnagainset_0_ref_2_lna_10_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnagainset_0_ref_2_lna_10_gaindb_setf(struct cl_chip *chip, u8 lna10gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna10gaindb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR) & ~((u32)0x007F0000)) | ((u32)lna10gaindb << 16));
}

static inline u8 riu_rwnxagclnagainset_0_ref_2_lna_9_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnagainset_0_ref_2_lna_9_gaindb_setf(struct cl_chip *chip, u8 lna9gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna9gaindb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR) & ~((u32)0x00007F00)) | ((u32)lna9gaindb << 8));
}

static inline u8 riu_rwnxagclnagainset_0_ref_2_lna_8_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnagainset_0_ref_2_lna_8_gaindb_setf(struct cl_chip *chip, u8 lna8gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna8gaindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_2_ADDR) & ~((u32)0x0000007F)) | ((u32)lna8gaindb << 0));
}

/**
 * @brief RWNXAGCLNAGAINSET_0_REF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA15_GAINDB              0x27
 *    22:16 LNA14_GAINDB              0x27
 *    14:08 LNA13_GAINDB              0x27
 *    06:00 LNA12_GAINDB              0x27
 * </pre>
 */
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000278)
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_OFFSET      0x00000278
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_INDEX       0x0000009E
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_RESET       0x27272727

static inline u32 riu_rwnxagclnagainset_0_ref_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR);
}

static inline void riu_rwnxagclnagainset_0_ref_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_LNA_15_GAINDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_LNA_15_GAINDB_LSB    24
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_LNA_15_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_LNA_14_GAINDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_LNA_14_GAINDB_LSB    16
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_LNA_14_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_LNA_13_GAINDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_LNA_13_GAINDB_LSB    8
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_LNA_13_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_LNA_12_GAINDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_LNA_12_GAINDB_LSB    0
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_LNA_12_GAINDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAGAINSET_0_REF_3_LNA_15_GAINDB_RST    0x27
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_LNA_14_GAINDB_RST    0x27
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_LNA_13_GAINDB_RST    0x27
#define RIU_RWNXAGCLNAGAINSET_0_REF_3_LNA_12_GAINDB_RST    0x27

static inline void riu_rwnxagclnagainset_0_ref_3_pack(struct cl_chip *chip, u8 lna15_gaindb, u8 lna14_gaindb, u8 lna13_gaindb, u8 lna12_gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna15_gaindb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna14_gaindb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna13_gaindb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna12_gaindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR, ((u32)lna15_gaindb << 24) | ((u32)lna14_gaindb << 16) | ((u32)lna13_gaindb << 8) | ((u32)lna12_gaindb << 0));
}

static inline void riu_rwnxagclnagainset_0_ref_3_unpack(struct cl_chip *chip, u8 *lna15_gaindb, u8 *lna14_gaindb, u8 *lna13_gaindb, u8 *lna12_gaindb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR);

	*lna15_gaindb = (local_val & ((u32)0x7F000000)) >> 24;
	*lna14_gaindb = (local_val & ((u32)0x007F0000)) >> 16;
	*lna13_gaindb = (local_val & ((u32)0x00007F00)) >> 8;
	*lna12_gaindb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnagainset_0_ref_3_lna_15_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnagainset_0_ref_3_lna_15_gaindb_setf(struct cl_chip *chip, u8 lna15gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna15gaindb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR) & ~((u32)0x7F000000)) | ((u32)lna15gaindb << 24));
}

static inline u8 riu_rwnxagclnagainset_0_ref_3_lna_14_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnagainset_0_ref_3_lna_14_gaindb_setf(struct cl_chip *chip, u8 lna14gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna14gaindb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR) & ~((u32)0x007F0000)) | ((u32)lna14gaindb << 16));
}

static inline u8 riu_rwnxagclnagainset_0_ref_3_lna_13_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnagainset_0_ref_3_lna_13_gaindb_setf(struct cl_chip *chip, u8 lna13gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna13gaindb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR) & ~((u32)0x00007F00)) | ((u32)lna13gaindb << 8));
}

static inline u8 riu_rwnxagclnagainset_0_ref_3_lna_12_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnagainset_0_ref_3_lna_12_gaindb_setf(struct cl_chip *chip, u8 lna12gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna12gaindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_3_ADDR) & ~((u32)0x0000007F)) | ((u32)lna12gaindb << 0));
}

/**
 * @brief RWNXAGCLNANFSET_0_REF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA11_NFDB                0x4
 *    22:16 LNA10_NFDB                0x5
 *    14:08 LNA9_NFDB                 0x7
 *    06:00 LNA8_NFDB                 0x8
 * </pre>
 */
#define RIU_RWNXAGCLNANFSET_0_REF_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000027C)
#define RIU_RWNXAGCLNANFSET_0_REF_2_OFFSET      0x0000027C
#define RIU_RWNXAGCLNANFSET_0_REF_2_INDEX       0x0000009F
#define RIU_RWNXAGCLNANFSET_0_REF_2_RESET       0x04050708

static inline u32 riu_rwnxagclnanfset_0_ref_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_2_ADDR);
}

static inline void riu_rwnxagclnanfset_0_ref_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNANFSET_0_REF_2_LNA_11_NFDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNANFSET_0_REF_2_LNA_11_NFDB_LSB    24
#define RIU_RWNXAGCLNANFSET_0_REF_2_LNA_11_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_0_REF_2_LNA_10_NFDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNANFSET_0_REF_2_LNA_10_NFDB_LSB    16
#define RIU_RWNXAGCLNANFSET_0_REF_2_LNA_10_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_0_REF_2_LNA_9_NFDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNANFSET_0_REF_2_LNA_9_NFDB_LSB    8
#define RIU_RWNXAGCLNANFSET_0_REF_2_LNA_9_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_0_REF_2_LNA_8_NFDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNANFSET_0_REF_2_LNA_8_NFDB_LSB    0
#define RIU_RWNXAGCLNANFSET_0_REF_2_LNA_8_NFDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNANFSET_0_REF_2_LNA_11_NFDB_RST    0x4
#define RIU_RWNXAGCLNANFSET_0_REF_2_LNA_10_NFDB_RST    0x5
#define RIU_RWNXAGCLNANFSET_0_REF_2_LNA_9_NFDB_RST    0x7
#define RIU_RWNXAGCLNANFSET_0_REF_2_LNA_8_NFDB_RST    0x8

static inline void riu_rwnxagclnanfset_0_ref_2_pack(struct cl_chip *chip, u8 lna11_nfdb, u8 lna10_nfdb, u8 lna9_nfdb, u8 lna8_nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna11_nfdb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna10_nfdb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna9_nfdb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna8_nfdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_2_ADDR, ((u32)lna11_nfdb << 24) | ((u32)lna10_nfdb << 16) | ((u32)lna9_nfdb << 8) | ((u32)lna8_nfdb << 0));
}

static inline void riu_rwnxagclnanfset_0_ref_2_unpack(struct cl_chip *chip, u8 *lna11_nfdb, u8 *lna10_nfdb, u8 *lna9_nfdb, u8 *lna8_nfdb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_2_ADDR);

	*lna11_nfdb = (local_val & ((u32)0x7F000000)) >> 24;
	*lna10_nfdb = (local_val & ((u32)0x007F0000)) >> 16;
	*lna9_nfdb = (local_val & ((u32)0x00007F00)) >> 8;
	*lna8_nfdb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnanfset_0_ref_2_lna_11_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnanfset_0_ref_2_lna_11_nfdb_setf(struct cl_chip *chip, u8 lna11nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna11nfdb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_2_ADDR) & ~((u32)0x7F000000)) | ((u32)lna11nfdb << 24));
}

static inline u8 riu_rwnxagclnanfset_0_ref_2_lna_10_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnanfset_0_ref_2_lna_10_nfdb_setf(struct cl_chip *chip, u8 lna10nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna10nfdb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_2_ADDR) & ~((u32)0x007F0000)) | ((u32)lna10nfdb << 16));
}

static inline u8 riu_rwnxagclnanfset_0_ref_2_lna_9_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnanfset_0_ref_2_lna_9_nfdb_setf(struct cl_chip *chip, u8 lna9nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna9nfdb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_2_ADDR) & ~((u32)0x00007F00)) | ((u32)lna9nfdb << 8));
}

static inline u8 riu_rwnxagclnanfset_0_ref_2_lna_8_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnanfset_0_ref_2_lna_8_nfdb_setf(struct cl_chip *chip, u8 lna8nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna8nfdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_2_ADDR) & ~((u32)0x0000007F)) | ((u32)lna8nfdb << 0));
}

/**
 * @brief RWNXAGCLNANFSET_0_REF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA15_NFDB                0x7f
 *    22:16 LNA14_NFDB                0x2
 *    14:08 LNA13_NFDB                0x3
 *    06:00 LNA12_NFDB                0x3
 * </pre>
 */
#define RIU_RWNXAGCLNANFSET_0_REF_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000280)
#define RIU_RWNXAGCLNANFSET_0_REF_3_OFFSET      0x00000280
#define RIU_RWNXAGCLNANFSET_0_REF_3_INDEX       0x000000A0
#define RIU_RWNXAGCLNANFSET_0_REF_3_RESET       0x7F020303

static inline u32 riu_rwnxagclnanfset_0_ref_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_3_ADDR);
}

static inline void riu_rwnxagclnanfset_0_ref_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNANFSET_0_REF_3_LNA_15_NFDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNANFSET_0_REF_3_LNA_15_NFDB_LSB    24
#define RIU_RWNXAGCLNANFSET_0_REF_3_LNA_15_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_0_REF_3_LNA_14_NFDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNANFSET_0_REF_3_LNA_14_NFDB_LSB    16
#define RIU_RWNXAGCLNANFSET_0_REF_3_LNA_14_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_0_REF_3_LNA_13_NFDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNANFSET_0_REF_3_LNA_13_NFDB_LSB    8
#define RIU_RWNXAGCLNANFSET_0_REF_3_LNA_13_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_0_REF_3_LNA_12_NFDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNANFSET_0_REF_3_LNA_12_NFDB_LSB    0
#define RIU_RWNXAGCLNANFSET_0_REF_3_LNA_12_NFDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNANFSET_0_REF_3_LNA_15_NFDB_RST    0x7f
#define RIU_RWNXAGCLNANFSET_0_REF_3_LNA_14_NFDB_RST    0x2
#define RIU_RWNXAGCLNANFSET_0_REF_3_LNA_13_NFDB_RST    0x3
#define RIU_RWNXAGCLNANFSET_0_REF_3_LNA_12_NFDB_RST    0x3

static inline void riu_rwnxagclnanfset_0_ref_3_pack(struct cl_chip *chip, u8 lna15_nfdb, u8 lna14_nfdb, u8 lna13_nfdb, u8 lna12_nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna15_nfdb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna14_nfdb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna13_nfdb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna12_nfdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_3_ADDR, ((u32)lna15_nfdb << 24) | ((u32)lna14_nfdb << 16) | ((u32)lna13_nfdb << 8) | ((u32)lna12_nfdb << 0));
}

static inline void riu_rwnxagclnanfset_0_ref_3_unpack(struct cl_chip *chip, u8 *lna15_nfdb, u8 *lna14_nfdb, u8 *lna13_nfdb, u8 *lna12_nfdb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_3_ADDR);

	*lna15_nfdb = (local_val & ((u32)0x7F000000)) >> 24;
	*lna14_nfdb = (local_val & ((u32)0x007F0000)) >> 16;
	*lna13_nfdb = (local_val & ((u32)0x00007F00)) >> 8;
	*lna12_nfdb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnanfset_0_ref_3_lna_15_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnanfset_0_ref_3_lna_15_nfdb_setf(struct cl_chip *chip, u8 lna15nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna15nfdb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_3_ADDR) & ~((u32)0x7F000000)) | ((u32)lna15nfdb << 24));
}

static inline u8 riu_rwnxagclnanfset_0_ref_3_lna_14_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnanfset_0_ref_3_lna_14_nfdb_setf(struct cl_chip *chip, u8 lna14nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna14nfdb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_3_ADDR) & ~((u32)0x007F0000)) | ((u32)lna14nfdb << 16));
}

static inline u8 riu_rwnxagclnanfset_0_ref_3_lna_13_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnanfset_0_ref_3_lna_13_nfdb_setf(struct cl_chip *chip, u8 lna13nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna13nfdb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_3_ADDR) & ~((u32)0x00007F00)) | ((u32)lna13nfdb << 8));
}

static inline u8 riu_rwnxagclnanfset_0_ref_3_lna_12_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnanfset_0_ref_3_lna_12_nfdb_setf(struct cl_chip *chip, u8 lna12nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna12nfdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_3_ADDR) & ~((u32)0x0000007F)) | ((u32)lna12nfdb << 0));
}

/**
 * @brief RWNXAGCLNAICP_1_SET_0_REF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA11_ICP1_DB             0x2
 *    22:16 LNA10_ICP1_DB             0x2
 *    14:08 LNA9_ICP1_DB              0x2
 *    06:00 LNA8_ICP1_DB              0x2
 * </pre>
 */
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000284)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_OFFSET      0x00000284
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_INDEX       0x000000A1
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_RESET       0x02020202

static inline u32 riu_rwnxagclnaicp_1_set_0_ref_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_LNA_11_ICP_1_DB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_LNA_11_ICP_1_DB_LSB    24
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_LNA_11_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_LNA_10_ICP_1_DB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_LNA_10_ICP_1_DB_LSB    16
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_LNA_10_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_LNA_9_ICP_1_DB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_LNA_9_ICP_1_DB_LSB    8
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_LNA_9_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_LNA_8_ICP_1_DB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_LNA_8_ICP_1_DB_LSB    0
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_LNA_8_ICP_1_DB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_LNA_11_ICP_1_DB_RST    0x2
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_LNA_10_ICP_1_DB_RST    0x2
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_LNA_9_ICP_1_DB_RST    0x2
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_2_LNA_8_ICP_1_DB_RST    0x2

static inline void riu_rwnxagclnaicp_1_set_0_ref_2_pack(struct cl_chip *chip, u8 lna11_icp1_db, u8 lna10_icp1_db, u8 lna9_icp1_db, u8 lna8_icp1_db)
{
	ASSERT_ERR_CHIP((((u32)lna11_icp1_db << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna10_icp1_db << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna9_icp1_db << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna8_icp1_db << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR, ((u32)lna11_icp1_db << 24) | ((u32)lna10_icp1_db << 16) | ((u32)lna9_icp1_db << 8) | ((u32)lna8_icp1_db << 0));
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_2_unpack(struct cl_chip *chip, u8 *lna11_icp1_db, u8 *lna10_icp1_db, u8 *lna9_icp1_db, u8 *lna8_icp1_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR);

	*lna11_icp1_db = (local_val & ((u32)0x7F000000)) >> 24;
	*lna10_icp1_db = (local_val & ((u32)0x007F0000)) >> 16;
	*lna9_icp1_db = (local_val & ((u32)0x00007F00)) >> 8;
	*lna8_icp1_db = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnaicp_1_set_0_ref_2_lna_11_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_2_lna_11_icp_1_db_setf(struct cl_chip *chip, u8 lna11icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna11icp1db << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR) & ~((u32)0x7F000000)) | ((u32)lna11icp1db << 24));
}

static inline u8 riu_rwnxagclnaicp_1_set_0_ref_2_lna_10_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_2_lna_10_icp_1_db_setf(struct cl_chip *chip, u8 lna10icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna10icp1db << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR) & ~((u32)0x007F0000)) | ((u32)lna10icp1db << 16));
}

static inline u8 riu_rwnxagclnaicp_1_set_0_ref_2_lna_9_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_2_lna_9_icp_1_db_setf(struct cl_chip *chip, u8 lna9icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna9icp1db << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR) & ~((u32)0x00007F00)) | ((u32)lna9icp1db << 8));
}

static inline u8 riu_rwnxagclnaicp_1_set_0_ref_2_lna_8_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_2_lna_8_icp_1_db_setf(struct cl_chip *chip, u8 lna8icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna8icp1db << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_2_ADDR) & ~((u32)0x0000007F)) | ((u32)lna8icp1db << 0));
}

/**
 * @brief RWNXAGCLNAICP_1_SET_0_REF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA15_ICP1_DB             0x2
 *    22:16 LNA14_ICP1_DB             0x2
 *    14:08 LNA13_ICP1_DB             0x2
 *    06:00 LNA12_ICP1_DB             0x2
 * </pre>
 */
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000288)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_OFFSET      0x00000288
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_INDEX       0x000000A2
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_RESET       0x02020202

static inline u32 riu_rwnxagclnaicp_1_set_0_ref_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_LNA_15_ICP_1_DB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_LNA_15_ICP_1_DB_LSB    24
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_LNA_15_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_LNA_14_ICP_1_DB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_LNA_14_ICP_1_DB_LSB    16
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_LNA_14_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_LNA_13_ICP_1_DB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_LNA_13_ICP_1_DB_LSB    8
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_LNA_13_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_LNA_12_ICP_1_DB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_LNA_12_ICP_1_DB_LSB    0
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_LNA_12_ICP_1_DB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_LNA_15_ICP_1_DB_RST    0x2
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_LNA_14_ICP_1_DB_RST    0x2
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_LNA_13_ICP_1_DB_RST    0x2
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_3_LNA_12_ICP_1_DB_RST    0x2

static inline void riu_rwnxagclnaicp_1_set_0_ref_3_pack(struct cl_chip *chip, u8 lna15_icp1_db, u8 lna14_icp1_db, u8 lna13_icp1_db, u8 lna12_icp1_db)
{
	ASSERT_ERR_CHIP((((u32)lna15_icp1_db << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna14_icp1_db << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna13_icp1_db << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna12_icp1_db << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR, ((u32)lna15_icp1_db << 24) | ((u32)lna14_icp1_db << 16) | ((u32)lna13_icp1_db << 8) | ((u32)lna12_icp1_db << 0));
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_3_unpack(struct cl_chip *chip, u8 *lna15_icp1_db, u8 *lna14_icp1_db, u8 *lna13_icp1_db, u8 *lna12_icp1_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR);

	*lna15_icp1_db = (local_val & ((u32)0x7F000000)) >> 24;
	*lna14_icp1_db = (local_val & ((u32)0x007F0000)) >> 16;
	*lna13_icp1_db = (local_val & ((u32)0x00007F00)) >> 8;
	*lna12_icp1_db = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnaicp_1_set_0_ref_3_lna_15_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_3_lna_15_icp_1_db_setf(struct cl_chip *chip, u8 lna15icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna15icp1db << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR) & ~((u32)0x7F000000)) | ((u32)lna15icp1db << 24));
}

static inline u8 riu_rwnxagclnaicp_1_set_0_ref_3_lna_14_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_3_lna_14_icp_1_db_setf(struct cl_chip *chip, u8 lna14icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna14icp1db << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR) & ~((u32)0x007F0000)) | ((u32)lna14icp1db << 16));
}

static inline u8 riu_rwnxagclnaicp_1_set_0_ref_3_lna_13_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_3_lna_13_icp_1_db_setf(struct cl_chip *chip, u8 lna13icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna13icp1db << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR) & ~((u32)0x00007F00)) | ((u32)lna13icp1db << 8));
}

static inline u8 riu_rwnxagclnaicp_1_set_0_ref_3_lna_12_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_3_lna_12_icp_1_db_setf(struct cl_chip *chip, u8 lna12icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna12icp1db << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_3_ADDR) & ~((u32)0x0000007F)) | ((u32)lna12icp1db << 0));
}

/**
 * @brief RWNXAGCRSSILNA_0_SET_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 RSSI_LNA3_DB              0x0
 *    23:16 RSSI_LNA2_DB              0x0
 *    15:08 RSSI_LNA1_DB              0x0
 *    07:00 RSSI_LNA0_DB              0x0
 * </pre>
 */
#define RIU_RWNXAGCRSSILNA_0_SET_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000290)
#define RIU_RWNXAGCRSSILNA_0_SET_0_OFFSET      0x00000290
#define RIU_RWNXAGCRSSILNA_0_SET_0_INDEX       0x000000A4
#define RIU_RWNXAGCRSSILNA_0_SET_0_RESET       0x00000000

static inline u32 riu_rwnxagcrssilna_0_set_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_0_ADDR);
}

static inline void riu_rwnxagcrssilna_0_set_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_0_SET_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCRSSILNA_0_SET_0_RSSI_LNA_3_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCRSSILNA_0_SET_0_RSSI_LNA_3_DB_LSB    24
#define RIU_RWNXAGCRSSILNA_0_SET_0_RSSI_LNA_3_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_0_SET_0_RSSI_LNA_2_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCRSSILNA_0_SET_0_RSSI_LNA_2_DB_LSB    16
#define RIU_RWNXAGCRSSILNA_0_SET_0_RSSI_LNA_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_0_SET_0_RSSI_LNA_1_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCRSSILNA_0_SET_0_RSSI_LNA_1_DB_LSB    8
#define RIU_RWNXAGCRSSILNA_0_SET_0_RSSI_LNA_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_0_SET_0_RSSI_LNA_0_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCRSSILNA_0_SET_0_RSSI_LNA_0_DB_LSB    0
#define RIU_RWNXAGCRSSILNA_0_SET_0_RSSI_LNA_0_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCRSSILNA_0_SET_0_RSSI_LNA_3_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_0_SET_0_RSSI_LNA_2_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_0_SET_0_RSSI_LNA_1_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_0_SET_0_RSSI_LNA_0_DB_RST    0x0

static inline void riu_rwnxagcrssilna_0_set_0_pack(struct cl_chip *chip, u8 rssi_lna3_db, u8 rssi_lna2_db, u8 rssi_lna1_db, u8 rssi_lna0_db)
{
	ASSERT_ERR_CHIP((((u32)rssi_lna3_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna2_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna1_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna0_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_0_SET_0_ADDR, ((u32)rssi_lna3_db << 24) | ((u32)rssi_lna2_db << 16) | ((u32)rssi_lna1_db << 8) | ((u32)rssi_lna0_db << 0));
}

static inline void riu_rwnxagcrssilna_0_set_0_unpack(struct cl_chip *chip, u8 *rssi_lna3_db, u8 *rssi_lna2_db, u8 *rssi_lna1_db, u8 *rssi_lna0_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_0_ADDR);

	*rssi_lna3_db = (local_val & ((u32)0xFF000000)) >> 24;
	*rssi_lna2_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*rssi_lna1_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*rssi_lna0_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcrssilna_0_set_0_rssi_lna_3_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_0_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagcrssilna_0_set_0_rssi_lna_3_db_setf(struct cl_chip *chip, u8 rssilna3db)
{
	ASSERT_ERR_CHIP((((u32)rssilna3db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_0_SET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_0_ADDR) & ~((u32)0xFF000000)) | ((u32)rssilna3db << 24));
}

static inline u8 riu_rwnxagcrssilna_0_set_0_rssi_lna_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_0_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagcrssilna_0_set_0_rssi_lna_2_db_setf(struct cl_chip *chip, u8 rssilna2db)
{
	ASSERT_ERR_CHIP((((u32)rssilna2db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_0_SET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_0_ADDR) & ~((u32)0x00FF0000)) | ((u32)rssilna2db << 16));
}

static inline u8 riu_rwnxagcrssilna_0_set_0_rssi_lna_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_0_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagcrssilna_0_set_0_rssi_lna_1_db_setf(struct cl_chip *chip, u8 rssilna1db)
{
	ASSERT_ERR_CHIP((((u32)rssilna1db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_0_SET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_0_ADDR) & ~((u32)0x0000FF00)) | ((u32)rssilna1db << 8));
}

static inline u8 riu_rwnxagcrssilna_0_set_0_rssi_lna_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcrssilna_0_set_0_rssi_lna_0_db_setf(struct cl_chip *chip, u8 rssilna0db)
{
	ASSERT_ERR_CHIP((((u32)rssilna0db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_0_SET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_0_ADDR) & ~((u32)0x000000FF)) | ((u32)rssilna0db << 0));
}

/**
 * @brief RWNXAGCRSSILNA_1_SET_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 RSSI_LNA7_DB              0x0
 *    23:16 RSSI_LNA6_DB              0x0
 *    15:08 RSSI_LNA5_DB              0x0
 *    07:00 RSSI_LNA4_DB              0x0
 * </pre>
 */
#define RIU_RWNXAGCRSSILNA_1_SET_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000294)
#define RIU_RWNXAGCRSSILNA_1_SET_0_OFFSET      0x00000294
#define RIU_RWNXAGCRSSILNA_1_SET_0_INDEX       0x000000A5
#define RIU_RWNXAGCRSSILNA_1_SET_0_RESET       0x00000000

static inline u32 riu_rwnxagcrssilna_1_set_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_0_ADDR);
}

static inline void riu_rwnxagcrssilna_1_set_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_1_SET_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCRSSILNA_1_SET_0_RSSI_LNA_7_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCRSSILNA_1_SET_0_RSSI_LNA_7_DB_LSB    24
#define RIU_RWNXAGCRSSILNA_1_SET_0_RSSI_LNA_7_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_1_SET_0_RSSI_LNA_6_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCRSSILNA_1_SET_0_RSSI_LNA_6_DB_LSB    16
#define RIU_RWNXAGCRSSILNA_1_SET_0_RSSI_LNA_6_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_1_SET_0_RSSI_LNA_5_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCRSSILNA_1_SET_0_RSSI_LNA_5_DB_LSB    8
#define RIU_RWNXAGCRSSILNA_1_SET_0_RSSI_LNA_5_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_1_SET_0_RSSI_LNA_4_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCRSSILNA_1_SET_0_RSSI_LNA_4_DB_LSB    0
#define RIU_RWNXAGCRSSILNA_1_SET_0_RSSI_LNA_4_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCRSSILNA_1_SET_0_RSSI_LNA_7_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_1_SET_0_RSSI_LNA_6_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_1_SET_0_RSSI_LNA_5_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_1_SET_0_RSSI_LNA_4_DB_RST    0x0

static inline void riu_rwnxagcrssilna_1_set_0_pack(struct cl_chip *chip, u8 rssi_lna7_db, u8 rssi_lna6_db, u8 rssi_lna5_db, u8 rssi_lna4_db)
{
	ASSERT_ERR_CHIP((((u32)rssi_lna7_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna6_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna5_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna4_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_1_SET_0_ADDR, ((u32)rssi_lna7_db << 24) | ((u32)rssi_lna6_db << 16) | ((u32)rssi_lna5_db << 8) | ((u32)rssi_lna4_db << 0));
}

static inline void riu_rwnxagcrssilna_1_set_0_unpack(struct cl_chip *chip, u8 *rssi_lna7_db, u8 *rssi_lna6_db, u8 *rssi_lna5_db, u8 *rssi_lna4_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_0_ADDR);

	*rssi_lna7_db = (local_val & ((u32)0xFF000000)) >> 24;
	*rssi_lna6_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*rssi_lna5_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*rssi_lna4_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcrssilna_1_set_0_rssi_lna_7_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_0_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagcrssilna_1_set_0_rssi_lna_7_db_setf(struct cl_chip *chip, u8 rssilna7db)
{
	ASSERT_ERR_CHIP((((u32)rssilna7db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_1_SET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_0_ADDR) & ~((u32)0xFF000000)) | ((u32)rssilna7db << 24));
}

static inline u8 riu_rwnxagcrssilna_1_set_0_rssi_lna_6_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_0_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagcrssilna_1_set_0_rssi_lna_6_db_setf(struct cl_chip *chip, u8 rssilna6db)
{
	ASSERT_ERR_CHIP((((u32)rssilna6db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_1_SET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_0_ADDR) & ~((u32)0x00FF0000)) | ((u32)rssilna6db << 16));
}

static inline u8 riu_rwnxagcrssilna_1_set_0_rssi_lna_5_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_0_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagcrssilna_1_set_0_rssi_lna_5_db_setf(struct cl_chip *chip, u8 rssilna5db)
{
	ASSERT_ERR_CHIP((((u32)rssilna5db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_1_SET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_0_ADDR) & ~((u32)0x0000FF00)) | ((u32)rssilna5db << 8));
}

static inline u8 riu_rwnxagcrssilna_1_set_0_rssi_lna_4_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcrssilna_1_set_0_rssi_lna_4_db_setf(struct cl_chip *chip, u8 rssilna4db)
{
	ASSERT_ERR_CHIP((((u32)rssilna4db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_1_SET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_0_ADDR) & ~((u32)0x000000FF)) | ((u32)rssilna4db << 0));
}

/**
 * @brief RWNXAGCRSSILNA_2_SET_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 RSSI_LNA11_DB             0x0
 *    23:16 RSSI_LNA10_DB             0x0
 *    15:08 RSSI_LNA9_DB              0x0
 *    07:00 RSSI_LNA8_DB              0x0
 * </pre>
 */
#define RIU_RWNXAGCRSSILNA_2_SET_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000298)
#define RIU_RWNXAGCRSSILNA_2_SET_0_OFFSET      0x00000298
#define RIU_RWNXAGCRSSILNA_2_SET_0_INDEX       0x000000A6
#define RIU_RWNXAGCRSSILNA_2_SET_0_RESET       0x00000000

static inline u32 riu_rwnxagcrssilna_2_set_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_0_ADDR);
}

static inline void riu_rwnxagcrssilna_2_set_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_2_SET_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCRSSILNA_2_SET_0_RSSI_LNA_11_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCRSSILNA_2_SET_0_RSSI_LNA_11_DB_LSB    24
#define RIU_RWNXAGCRSSILNA_2_SET_0_RSSI_LNA_11_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_2_SET_0_RSSI_LNA_10_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCRSSILNA_2_SET_0_RSSI_LNA_10_DB_LSB    16
#define RIU_RWNXAGCRSSILNA_2_SET_0_RSSI_LNA_10_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_2_SET_0_RSSI_LNA_9_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCRSSILNA_2_SET_0_RSSI_LNA_9_DB_LSB    8
#define RIU_RWNXAGCRSSILNA_2_SET_0_RSSI_LNA_9_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_2_SET_0_RSSI_LNA_8_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCRSSILNA_2_SET_0_RSSI_LNA_8_DB_LSB    0
#define RIU_RWNXAGCRSSILNA_2_SET_0_RSSI_LNA_8_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCRSSILNA_2_SET_0_RSSI_LNA_11_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_2_SET_0_RSSI_LNA_10_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_2_SET_0_RSSI_LNA_9_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_2_SET_0_RSSI_LNA_8_DB_RST    0x0

static inline void riu_rwnxagcrssilna_2_set_0_pack(struct cl_chip *chip, u8 rssi_lna11_db, u8 rssi_lna10_db, u8 rssi_lna9_db, u8 rssi_lna8_db)
{
	ASSERT_ERR_CHIP((((u32)rssi_lna11_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna10_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna9_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna8_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_2_SET_0_ADDR, ((u32)rssi_lna11_db << 24) | ((u32)rssi_lna10_db << 16) | ((u32)rssi_lna9_db << 8) | ((u32)rssi_lna8_db << 0));
}

static inline void riu_rwnxagcrssilna_2_set_0_unpack(struct cl_chip *chip, u8 *rssi_lna11_db, u8 *rssi_lna10_db, u8 *rssi_lna9_db, u8 *rssi_lna8_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_0_ADDR);

	*rssi_lna11_db = (local_val & ((u32)0xFF000000)) >> 24;
	*rssi_lna10_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*rssi_lna9_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*rssi_lna8_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcrssilna_2_set_0_rssi_lna_11_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_0_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagcrssilna_2_set_0_rssi_lna_11_db_setf(struct cl_chip *chip, u8 rssilna11db)
{
	ASSERT_ERR_CHIP((((u32)rssilna11db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_2_SET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_0_ADDR) & ~((u32)0xFF000000)) | ((u32)rssilna11db << 24));
}

static inline u8 riu_rwnxagcrssilna_2_set_0_rssi_lna_10_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_0_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagcrssilna_2_set_0_rssi_lna_10_db_setf(struct cl_chip *chip, u8 rssilna10db)
{
	ASSERT_ERR_CHIP((((u32)rssilna10db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_2_SET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_0_ADDR) & ~((u32)0x00FF0000)) | ((u32)rssilna10db << 16));
}

static inline u8 riu_rwnxagcrssilna_2_set_0_rssi_lna_9_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_0_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagcrssilna_2_set_0_rssi_lna_9_db_setf(struct cl_chip *chip, u8 rssilna9db)
{
	ASSERT_ERR_CHIP((((u32)rssilna9db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_2_SET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_0_ADDR) & ~((u32)0x0000FF00)) | ((u32)rssilna9db << 8));
}

static inline u8 riu_rwnxagcrssilna_2_set_0_rssi_lna_8_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcrssilna_2_set_0_rssi_lna_8_db_setf(struct cl_chip *chip, u8 rssilna8db)
{
	ASSERT_ERR_CHIP((((u32)rssilna8db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_2_SET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_0_ADDR) & ~((u32)0x000000FF)) | ((u32)rssilna8db << 0));
}

/**
 * @brief RWNXAGCRSSILNA_3_SET_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 RSSI_LNA15_DB             0x0
 *    23:16 RSSI_LNA14_DB             0x0
 *    15:08 RSSI_LNA13_DB             0x0
 *    07:00 RSSI_LNA12_DB             0x0
 * </pre>
 */
#define RIU_RWNXAGCRSSILNA_3_SET_0_ADDR        (REG_RIU_BASE_ADDR + 0x0000029C)
#define RIU_RWNXAGCRSSILNA_3_SET_0_OFFSET      0x0000029C
#define RIU_RWNXAGCRSSILNA_3_SET_0_INDEX       0x000000A7
#define RIU_RWNXAGCRSSILNA_3_SET_0_RESET       0x00000000

static inline u32 riu_rwnxagcrssilna_3_set_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_0_ADDR);
}

static inline void riu_rwnxagcrssilna_3_set_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_3_SET_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCRSSILNA_3_SET_0_RSSI_LNA_15_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCRSSILNA_3_SET_0_RSSI_LNA_15_DB_LSB    24
#define RIU_RWNXAGCRSSILNA_3_SET_0_RSSI_LNA_15_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_3_SET_0_RSSI_LNA_14_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCRSSILNA_3_SET_0_RSSI_LNA_14_DB_LSB    16
#define RIU_RWNXAGCRSSILNA_3_SET_0_RSSI_LNA_14_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_3_SET_0_RSSI_LNA_13_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCRSSILNA_3_SET_0_RSSI_LNA_13_DB_LSB    8
#define RIU_RWNXAGCRSSILNA_3_SET_0_RSSI_LNA_13_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_3_SET_0_RSSI_LNA_12_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCRSSILNA_3_SET_0_RSSI_LNA_12_DB_LSB    0
#define RIU_RWNXAGCRSSILNA_3_SET_0_RSSI_LNA_12_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCRSSILNA_3_SET_0_RSSI_LNA_15_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_3_SET_0_RSSI_LNA_14_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_3_SET_0_RSSI_LNA_13_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_3_SET_0_RSSI_LNA_12_DB_RST    0x0

static inline void riu_rwnxagcrssilna_3_set_0_pack(struct cl_chip *chip, u8 rssi_lna15_db, u8 rssi_lna14_db, u8 rssi_lna13_db, u8 rssi_lna12_db)
{
	ASSERT_ERR_CHIP((((u32)rssi_lna15_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna14_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna13_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna12_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_3_SET_0_ADDR, ((u32)rssi_lna15_db << 24) | ((u32)rssi_lna14_db << 16) | ((u32)rssi_lna13_db << 8) | ((u32)rssi_lna12_db << 0));
}

static inline void riu_rwnxagcrssilna_3_set_0_unpack(struct cl_chip *chip, u8 *rssi_lna15_db, u8 *rssi_lna14_db, u8 *rssi_lna13_db, u8 *rssi_lna12_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_0_ADDR);

	*rssi_lna15_db = (local_val & ((u32)0xFF000000)) >> 24;
	*rssi_lna14_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*rssi_lna13_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*rssi_lna12_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcrssilna_3_set_0_rssi_lna_15_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_0_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagcrssilna_3_set_0_rssi_lna_15_db_setf(struct cl_chip *chip, u8 rssilna15db)
{
	ASSERT_ERR_CHIP((((u32)rssilna15db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_3_SET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_0_ADDR) & ~((u32)0xFF000000)) | ((u32)rssilna15db << 24));
}

static inline u8 riu_rwnxagcrssilna_3_set_0_rssi_lna_14_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_0_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagcrssilna_3_set_0_rssi_lna_14_db_setf(struct cl_chip *chip, u8 rssilna14db)
{
	ASSERT_ERR_CHIP((((u32)rssilna14db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_3_SET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_0_ADDR) & ~((u32)0x00FF0000)) | ((u32)rssilna14db << 16));
}

static inline u8 riu_rwnxagcrssilna_3_set_0_rssi_lna_13_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_0_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagcrssilna_3_set_0_rssi_lna_13_db_setf(struct cl_chip *chip, u8 rssilna13db)
{
	ASSERT_ERR_CHIP((((u32)rssilna13db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_3_SET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_0_ADDR) & ~((u32)0x0000FF00)) | ((u32)rssilna13db << 8));
}

static inline u8 riu_rwnxagcrssilna_3_set_0_rssi_lna_12_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcrssilna_3_set_0_rssi_lna_12_db_setf(struct cl_chip *chip, u8 rssilna12db)
{
	ASSERT_ERR_CHIP((((u32)rssilna12db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_3_SET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_0_ADDR) & ~((u32)0x000000FF)) | ((u32)rssilna12db << 0));
}

/**
 * @brief AGCFSM_PRESET_P_8 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGCFSM_PRESET_P8          0x0
 * </pre>
 */
#define RIU_AGCFSM_PRESET_P_8_ADDR        (REG_RIU_BASE_ADDR + 0x000002A0)
#define RIU_AGCFSM_PRESET_P_8_OFFSET      0x000002A0
#define RIU_AGCFSM_PRESET_P_8_INDEX       0x000000A8
#define RIU_AGCFSM_PRESET_P_8_RESET       0x00000000

static inline u32 riu_agcfsm_preset_p_8_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_PRESET_P_8_ADDR);
}

static inline void riu_agcfsm_preset_p_8_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_8_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_PRESET_P_8_AGCFSM_PRESET_P_8_MASK    ((u32)0x00FFFFFF)
#define RIU_AGCFSM_PRESET_P_8_AGCFSM_PRESET_P_8_LSB    0
#define RIU_AGCFSM_PRESET_P_8_AGCFSM_PRESET_P_8_WIDTH    ((u32)0x00000018)

#define RIU_AGCFSM_PRESET_P_8_AGCFSM_PRESET_P_8_RST    0x0

static inline u32 riu_agcfsm_preset_p_8_agcfsm_preset_p_8_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_PRESET_P_8_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_agcfsm_preset_p_8_agcfsm_preset_p_8_setf(struct cl_chip *chip, u32 agcfsmpresetp8)
{
	ASSERT_ERR_CHIP((((u32)agcfsmpresetp8 << 0) & ~((u32)0x00FFFFFF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_8_ADDR, (u32)agcfsmpresetp8 << 0);
}

/**
 * @brief AGCFSM_PRESET_P_9 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGCFSM_PRESET_P9          0x0
 * </pre>
 */
#define RIU_AGCFSM_PRESET_P_9_ADDR        (REG_RIU_BASE_ADDR + 0x000002A4)
#define RIU_AGCFSM_PRESET_P_9_OFFSET      0x000002A4
#define RIU_AGCFSM_PRESET_P_9_INDEX       0x000000A9
#define RIU_AGCFSM_PRESET_P_9_RESET       0x00000000

static inline u32 riu_agcfsm_preset_p_9_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_PRESET_P_9_ADDR);
}

static inline void riu_agcfsm_preset_p_9_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_9_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_PRESET_P_9_AGCFSM_PRESET_P_9_MASK    ((u32)0x00FFFFFF)
#define RIU_AGCFSM_PRESET_P_9_AGCFSM_PRESET_P_9_LSB    0
#define RIU_AGCFSM_PRESET_P_9_AGCFSM_PRESET_P_9_WIDTH    ((u32)0x00000018)

#define RIU_AGCFSM_PRESET_P_9_AGCFSM_PRESET_P_9_RST    0x0

static inline u32 riu_agcfsm_preset_p_9_agcfsm_preset_p_9_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_PRESET_P_9_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_agcfsm_preset_p_9_agcfsm_preset_p_9_setf(struct cl_chip *chip, u32 agcfsmpresetp9)
{
	ASSERT_ERR_CHIP((((u32)agcfsmpresetp9 << 0) & ~((u32)0x00FFFFFF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_9_ADDR, (u32)agcfsmpresetp9 << 0);
}

/**
 * @brief AGCFSM_PRESET_P_10 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGCFSM_PRESET_P10         0x0
 * </pre>
 */
#define RIU_AGCFSM_PRESET_P_10_ADDR        (REG_RIU_BASE_ADDR + 0x000002A8)
#define RIU_AGCFSM_PRESET_P_10_OFFSET      0x000002A8
#define RIU_AGCFSM_PRESET_P_10_INDEX       0x000000AA
#define RIU_AGCFSM_PRESET_P_10_RESET       0x00000000

static inline u32 riu_agcfsm_preset_p_10_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_PRESET_P_10_ADDR);
}

static inline void riu_agcfsm_preset_p_10_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_10_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_PRESET_P_10_AGCFSM_PRESET_P_10_MASK    ((u32)0x00FFFFFF)
#define RIU_AGCFSM_PRESET_P_10_AGCFSM_PRESET_P_10_LSB    0
#define RIU_AGCFSM_PRESET_P_10_AGCFSM_PRESET_P_10_WIDTH    ((u32)0x00000018)

#define RIU_AGCFSM_PRESET_P_10_AGCFSM_PRESET_P_10_RST    0x0

static inline u32 riu_agcfsm_preset_p_10_agcfsm_preset_p_10_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_PRESET_P_10_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_agcfsm_preset_p_10_agcfsm_preset_p_10_setf(struct cl_chip *chip, u32 agcfsmpresetp10)
{
	ASSERT_ERR_CHIP((((u32)agcfsmpresetp10 << 0) & ~((u32)0x00FFFFFF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_10_ADDR, (u32)agcfsmpresetp10 << 0);
}

/**
 * @brief AGCFSM_PRESET_P_11 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGCFSM_PRESET_P11         0x0
 * </pre>
 */
#define RIU_AGCFSM_PRESET_P_11_ADDR        (REG_RIU_BASE_ADDR + 0x000002AC)
#define RIU_AGCFSM_PRESET_P_11_OFFSET      0x000002AC
#define RIU_AGCFSM_PRESET_P_11_INDEX       0x000000AB
#define RIU_AGCFSM_PRESET_P_11_RESET       0x00000000

static inline u32 riu_agcfsm_preset_p_11_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_PRESET_P_11_ADDR);
}

static inline void riu_agcfsm_preset_p_11_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_11_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_PRESET_P_11_AGCFSM_PRESET_P_11_MASK    ((u32)0x00FFFFFF)
#define RIU_AGCFSM_PRESET_P_11_AGCFSM_PRESET_P_11_LSB    0
#define RIU_AGCFSM_PRESET_P_11_AGCFSM_PRESET_P_11_WIDTH    ((u32)0x00000018)

#define RIU_AGCFSM_PRESET_P_11_AGCFSM_PRESET_P_11_RST    0x0

static inline u32 riu_agcfsm_preset_p_11_agcfsm_preset_p_11_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_PRESET_P_11_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_agcfsm_preset_p_11_agcfsm_preset_p_11_setf(struct cl_chip *chip, u32 agcfsmpresetp11)
{
	ASSERT_ERR_CHIP((((u32)agcfsmpresetp11 << 0) & ~((u32)0x00FFFFFF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_11_ADDR, (u32)agcfsmpresetp11 << 0);
}

/**
 * @brief AGCFSM_PRESET_P_12 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGCFSM_PRESET_P12         0x0
 * </pre>
 */
#define RIU_AGCFSM_PRESET_P_12_ADDR        (REG_RIU_BASE_ADDR + 0x000002B0)
#define RIU_AGCFSM_PRESET_P_12_OFFSET      0x000002B0
#define RIU_AGCFSM_PRESET_P_12_INDEX       0x000000AC
#define RIU_AGCFSM_PRESET_P_12_RESET       0x00000000

static inline u32 riu_agcfsm_preset_p_12_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_PRESET_P_12_ADDR);
}

static inline void riu_agcfsm_preset_p_12_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_12_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_PRESET_P_12_AGCFSM_PRESET_P_12_MASK    ((u32)0x00FFFFFF)
#define RIU_AGCFSM_PRESET_P_12_AGCFSM_PRESET_P_12_LSB    0
#define RIU_AGCFSM_PRESET_P_12_AGCFSM_PRESET_P_12_WIDTH    ((u32)0x00000018)

#define RIU_AGCFSM_PRESET_P_12_AGCFSM_PRESET_P_12_RST    0x0

static inline u32 riu_agcfsm_preset_p_12_agcfsm_preset_p_12_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_PRESET_P_12_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_agcfsm_preset_p_12_agcfsm_preset_p_12_setf(struct cl_chip *chip, u32 agcfsmpresetp12)
{
	ASSERT_ERR_CHIP((((u32)agcfsmpresetp12 << 0) & ~((u32)0x00FFFFFF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_12_ADDR, (u32)agcfsmpresetp12 << 0);
}

/**
 * @brief AGCFSM_PRESET_P_13 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGCFSM_PRESET_P13         0x0
 * </pre>
 */
#define RIU_AGCFSM_PRESET_P_13_ADDR        (REG_RIU_BASE_ADDR + 0x000002B4)
#define RIU_AGCFSM_PRESET_P_13_OFFSET      0x000002B4
#define RIU_AGCFSM_PRESET_P_13_INDEX       0x000000AD
#define RIU_AGCFSM_PRESET_P_13_RESET       0x00000000

static inline u32 riu_agcfsm_preset_p_13_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_PRESET_P_13_ADDR);
}

static inline void riu_agcfsm_preset_p_13_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_13_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_PRESET_P_13_AGCFSM_PRESET_P_13_MASK    ((u32)0x00FFFFFF)
#define RIU_AGCFSM_PRESET_P_13_AGCFSM_PRESET_P_13_LSB    0
#define RIU_AGCFSM_PRESET_P_13_AGCFSM_PRESET_P_13_WIDTH    ((u32)0x00000018)

#define RIU_AGCFSM_PRESET_P_13_AGCFSM_PRESET_P_13_RST    0x0

static inline u32 riu_agcfsm_preset_p_13_agcfsm_preset_p_13_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_PRESET_P_13_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_agcfsm_preset_p_13_agcfsm_preset_p_13_setf(struct cl_chip *chip, u32 agcfsmpresetp13)
{
	ASSERT_ERR_CHIP((((u32)agcfsmpresetp13 << 0) & ~((u32)0x00FFFFFF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_13_ADDR, (u32)agcfsmpresetp13 << 0);
}

/**
 * @brief AGCFSM_PRESET_P_14 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGCFSM_PRESET_P14         0x0
 * </pre>
 */
#define RIU_AGCFSM_PRESET_P_14_ADDR        (REG_RIU_BASE_ADDR + 0x000002B8)
#define RIU_AGCFSM_PRESET_P_14_OFFSET      0x000002B8
#define RIU_AGCFSM_PRESET_P_14_INDEX       0x000000AE
#define RIU_AGCFSM_PRESET_P_14_RESET       0x00000000

static inline u32 riu_agcfsm_preset_p_14_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_PRESET_P_14_ADDR);
}

static inline void riu_agcfsm_preset_p_14_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_14_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_PRESET_P_14_AGCFSM_PRESET_P_14_MASK    ((u32)0x00FFFFFF)
#define RIU_AGCFSM_PRESET_P_14_AGCFSM_PRESET_P_14_LSB    0
#define RIU_AGCFSM_PRESET_P_14_AGCFSM_PRESET_P_14_WIDTH    ((u32)0x00000018)

#define RIU_AGCFSM_PRESET_P_14_AGCFSM_PRESET_P_14_RST    0x0

static inline u32 riu_agcfsm_preset_p_14_agcfsm_preset_p_14_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_PRESET_P_14_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_agcfsm_preset_p_14_agcfsm_preset_p_14_setf(struct cl_chip *chip, u32 agcfsmpresetp14)
{
	ASSERT_ERR_CHIP((((u32)agcfsmpresetp14 << 0) & ~((u32)0x00FFFFFF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_14_ADDR, (u32)agcfsmpresetp14 << 0);
}

/**
 * @brief AGCFSM_PRESET_P_15 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGCFSM_PRESET_P15         0x0
 * </pre>
 */
#define RIU_AGCFSM_PRESET_P_15_ADDR        (REG_RIU_BASE_ADDR + 0x000002BC)
#define RIU_AGCFSM_PRESET_P_15_OFFSET      0x000002BC
#define RIU_AGCFSM_PRESET_P_15_INDEX       0x000000AF
#define RIU_AGCFSM_PRESET_P_15_RESET       0x00000000

static inline u32 riu_agcfsm_preset_p_15_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCFSM_PRESET_P_15_ADDR);
}

static inline void riu_agcfsm_preset_p_15_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_15_ADDR, value);
}

/* Field definitions */
#define RIU_AGCFSM_PRESET_P_15_AGCFSM_PRESET_P_15_MASK    ((u32)0x00FFFFFF)
#define RIU_AGCFSM_PRESET_P_15_AGCFSM_PRESET_P_15_LSB    0
#define RIU_AGCFSM_PRESET_P_15_AGCFSM_PRESET_P_15_WIDTH    ((u32)0x00000018)

#define RIU_AGCFSM_PRESET_P_15_AGCFSM_PRESET_P_15_RST    0x0

static inline u32 riu_agcfsm_preset_p_15_agcfsm_preset_p_15_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCFSM_PRESET_P_15_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_agcfsm_preset_p_15_agcfsm_preset_p_15_setf(struct cl_chip *chip, u32 agcfsmpresetp15)
{
	ASSERT_ERR_CHIP((((u32)agcfsmpresetp15 << 0) & ~((u32)0x00FFFFFF)) == 0);
	cl_reg_write(chip, RIU_AGCFSM_PRESET_P_15_ADDR, (u32)agcfsmpresetp15 << 0);
}

/**
 * @brief DAC_SAT_CNT_CFG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    26:16 SAT_CNT_TH                0x0
 *    02    SAT_CNT_CLR               0
 *    01    SAT_CNT_MODE              0
 *    00    SAT_CNT_EN                0
 * </pre>
 */
#define RIU_DAC_SAT_CNT_CFG_ADDR        (REG_RIU_BASE_ADDR + 0x000002C0)
#define RIU_DAC_SAT_CNT_CFG_OFFSET      0x000002C0
#define RIU_DAC_SAT_CNT_CFG_INDEX       0x000000B0
#define RIU_DAC_SAT_CNT_CFG_RESET       0x00000000

static inline u32 riu_dac_sat_cnt_cfg_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DAC_SAT_CNT_CFG_ADDR);
}

static inline void riu_dac_sat_cnt_cfg_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_DAC_SAT_CNT_CFG_ADDR, value);
}

/* Field definitions */
#define RIU_DAC_SAT_CNT_CFG_SAT_CNT_TH_MASK    ((u32)0x07FF0000)
#define RIU_DAC_SAT_CNT_CFG_SAT_CNT_TH_LSB    16
#define RIU_DAC_SAT_CNT_CFG_SAT_CNT_TH_WIDTH    ((u32)0x0000000B)
#define RIU_DAC_SAT_CNT_CFG_SAT_CNT_CLR_BIT    ((u32)0x00000004)
#define RIU_DAC_SAT_CNT_CFG_SAT_CNT_CLR_POS    2
#define RIU_DAC_SAT_CNT_CFG_SAT_CNT_MODE_BIT    ((u32)0x00000002)
#define RIU_DAC_SAT_CNT_CFG_SAT_CNT_MODE_POS    1
#define RIU_DAC_SAT_CNT_CFG_SAT_CNT_EN_BIT    ((u32)0x00000001)
#define RIU_DAC_SAT_CNT_CFG_SAT_CNT_EN_POS    0

#define RIU_DAC_SAT_CNT_CFG_SAT_CNT_TH_RST    0x0
#define RIU_DAC_SAT_CNT_CFG_SAT_CNT_CLR_RST    0x0
#define RIU_DAC_SAT_CNT_CFG_SAT_CNT_MODE_RST    0x0
#define RIU_DAC_SAT_CNT_CFG_SAT_CNT_EN_RST    0x0

static inline void riu_dac_sat_cnt_cfg_pack(struct cl_chip *chip, u16 sat_cnt_th, u8 sat_cnt_clr, u8 sat_cnt_mode, u8 sat_cnt_en)
{
	ASSERT_ERR_CHIP((((u32)sat_cnt_th << 16) & ~((u32)0x07FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)sat_cnt_clr << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)sat_cnt_mode << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)sat_cnt_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_DAC_SAT_CNT_CFG_ADDR, ((u32)sat_cnt_th << 16) | ((u32)sat_cnt_clr << 2) | ((u32)sat_cnt_mode << 1) | ((u32)sat_cnt_en << 0));
}

static inline void riu_dac_sat_cnt_cfg_unpack(struct cl_chip *chip, u16 *sat_cnt_th, u8 *sat_cnt_clr, u8 *sat_cnt_mode, u8 *sat_cnt_en)
{
	u32 local_val = cl_reg_read(chip, RIU_DAC_SAT_CNT_CFG_ADDR);

	*sat_cnt_th = (local_val & ((u32)0x07FF0000)) >> 16;
	*sat_cnt_clr = (local_val & ((u32)0x00000004)) >> 2;
	*sat_cnt_mode = (local_val & ((u32)0x00000002)) >> 1;
	*sat_cnt_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u16 riu_dac_sat_cnt_cfg_sat_cnt_th_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DAC_SAT_CNT_CFG_ADDR);

	return (u16)((local_val & ((u32)0x07FF0000)) >> 16);
}

static inline void riu_dac_sat_cnt_cfg_sat_cnt_th_setf(struct cl_chip *chip, u16 satcntth)
{
	ASSERT_ERR_CHIP((((u32)satcntth << 16) & ~((u32)0x07FF0000)) == 0);
	cl_reg_write(chip, RIU_DAC_SAT_CNT_CFG_ADDR, (cl_reg_read(chip, RIU_DAC_SAT_CNT_CFG_ADDR) & ~((u32)0x07FF0000)) | ((u32)satcntth << 16));
}

static inline void riu_dac_sat_cnt_cfg_sat_cnt_clr_setf(struct cl_chip *chip, u8 satcntclr)
{
	ASSERT_ERR_CHIP((((u32)satcntclr << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RIU_DAC_SAT_CNT_CFG_ADDR, (cl_reg_read(chip, RIU_DAC_SAT_CNT_CFG_ADDR) & ~((u32)0x00000004)) | ((u32)satcntclr << 2));
}

static inline u8 riu_dac_sat_cnt_cfg_sat_cnt_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DAC_SAT_CNT_CFG_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void riu_dac_sat_cnt_cfg_sat_cnt_mode_setf(struct cl_chip *chip, u8 satcntmode)
{
	ASSERT_ERR_CHIP((((u32)satcntmode << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_DAC_SAT_CNT_CFG_ADDR, (cl_reg_read(chip, RIU_DAC_SAT_CNT_CFG_ADDR) & ~((u32)0x00000002)) | ((u32)satcntmode << 1));
}

static inline u8 riu_dac_sat_cnt_cfg_sat_cnt_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DAC_SAT_CNT_CFG_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_dac_sat_cnt_cfg_sat_cnt_en_setf(struct cl_chip *chip, u8 satcnten)
{
	ASSERT_ERR_CHIP((((u32)satcnten << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_DAC_SAT_CNT_CFG_ADDR, (cl_reg_read(chip, RIU_DAC_SAT_CNT_CFG_ADDR) & ~((u32)0x00000001)) | ((u32)satcnten << 0));
}

/**
 * @brief DAC_0_SAT_CNT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 DAC0_SAT_CNT              0x0
 * </pre>
 */
#define RIU_DAC_0_SAT_CNT_ADDR        (REG_RIU_BASE_ADDR + 0x000002C4)
#define RIU_DAC_0_SAT_CNT_OFFSET      0x000002C4
#define RIU_DAC_0_SAT_CNT_INDEX       0x000000B1
#define RIU_DAC_0_SAT_CNT_RESET       0x00000000

static inline u32 riu_dac_0_sat_cnt_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DAC_0_SAT_CNT_ADDR);
}

/* Field definitions */
#define RIU_DAC_0_SAT_CNT_DAC_0_SAT_CNT_MASK    ((u32)0xFFFFFFFF)
#define RIU_DAC_0_SAT_CNT_DAC_0_SAT_CNT_LSB    0
#define RIU_DAC_0_SAT_CNT_DAC_0_SAT_CNT_WIDTH    ((u32)0x00000020)

#define RIU_DAC_0_SAT_CNT_DAC_0_SAT_CNT_RST    0x0

static inline u32 riu_dac_0_sat_cnt_dac_0_sat_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DAC_0_SAT_CNT_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief DAC_1_SAT_CNT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 DAC1_SAT_CNT              0x0
 * </pre>
 */
#define RIU_DAC_1_SAT_CNT_ADDR        (REG_RIU_BASE_ADDR + 0x000002C8)
#define RIU_DAC_1_SAT_CNT_OFFSET      0x000002C8
#define RIU_DAC_1_SAT_CNT_INDEX       0x000000B2
#define RIU_DAC_1_SAT_CNT_RESET       0x00000000

static inline u32 riu_dac_1_sat_cnt_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DAC_1_SAT_CNT_ADDR);
}

/* Field definitions */
#define RIU_DAC_1_SAT_CNT_DAC_1_SAT_CNT_MASK    ((u32)0xFFFFFFFF)
#define RIU_DAC_1_SAT_CNT_DAC_1_SAT_CNT_LSB    0
#define RIU_DAC_1_SAT_CNT_DAC_1_SAT_CNT_WIDTH    ((u32)0x00000020)

#define RIU_DAC_1_SAT_CNT_DAC_1_SAT_CNT_RST    0x0

static inline u32 riu_dac_1_sat_cnt_dac_1_sat_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DAC_1_SAT_CNT_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief DAC_2_SAT_CNT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 DAC2_SAT_CNT              0x0
 * </pre>
 */
#define RIU_DAC_2_SAT_CNT_ADDR        (REG_RIU_BASE_ADDR + 0x000002CC)
#define RIU_DAC_2_SAT_CNT_OFFSET      0x000002CC
#define RIU_DAC_2_SAT_CNT_INDEX       0x000000B3
#define RIU_DAC_2_SAT_CNT_RESET       0x00000000

static inline u32 riu_dac_2_sat_cnt_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DAC_2_SAT_CNT_ADDR);
}

/* Field definitions */
#define RIU_DAC_2_SAT_CNT_DAC_2_SAT_CNT_MASK    ((u32)0xFFFFFFFF)
#define RIU_DAC_2_SAT_CNT_DAC_2_SAT_CNT_LSB    0
#define RIU_DAC_2_SAT_CNT_DAC_2_SAT_CNT_WIDTH    ((u32)0x00000020)

#define RIU_DAC_2_SAT_CNT_DAC_2_SAT_CNT_RST    0x0

static inline u32 riu_dac_2_sat_cnt_dac_2_sat_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DAC_2_SAT_CNT_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief DAC_3_SAT_CNT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 DAC3_SAT_CNT              0x0
 * </pre>
 */
#define RIU_DAC_3_SAT_CNT_ADDR        (REG_RIU_BASE_ADDR + 0x000002D0)
#define RIU_DAC_3_SAT_CNT_OFFSET      0x000002D0
#define RIU_DAC_3_SAT_CNT_INDEX       0x000000B4
#define RIU_DAC_3_SAT_CNT_RESET       0x00000000

static inline u32 riu_dac_3_sat_cnt_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DAC_3_SAT_CNT_ADDR);
}

/* Field definitions */
#define RIU_DAC_3_SAT_CNT_DAC_3_SAT_CNT_MASK    ((u32)0xFFFFFFFF)
#define RIU_DAC_3_SAT_CNT_DAC_3_SAT_CNT_LSB    0
#define RIU_DAC_3_SAT_CNT_DAC_3_SAT_CNT_WIDTH    ((u32)0x00000020)

#define RIU_DAC_3_SAT_CNT_DAC_3_SAT_CNT_RST    0x0

static inline u32 riu_dac_3_sat_cnt_dac_3_sat_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DAC_3_SAT_CNT_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief DAC_4_SAT_CNT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 DAC4_SAT_CNT              0x0
 * </pre>
 */
#define RIU_DAC_4_SAT_CNT_ADDR        (REG_RIU_BASE_ADDR + 0x000002D4)
#define RIU_DAC_4_SAT_CNT_OFFSET      0x000002D4
#define RIU_DAC_4_SAT_CNT_INDEX       0x000000B5
#define RIU_DAC_4_SAT_CNT_RESET       0x00000000

static inline u32 riu_dac_4_sat_cnt_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DAC_4_SAT_CNT_ADDR);
}

/* Field definitions */
#define RIU_DAC_4_SAT_CNT_DAC_4_SAT_CNT_MASK    ((u32)0xFFFFFFFF)
#define RIU_DAC_4_SAT_CNT_DAC_4_SAT_CNT_LSB    0
#define RIU_DAC_4_SAT_CNT_DAC_4_SAT_CNT_WIDTH    ((u32)0x00000020)

#define RIU_DAC_4_SAT_CNT_DAC_4_SAT_CNT_RST    0x0

static inline u32 riu_dac_4_sat_cnt_dac_4_sat_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DAC_4_SAT_CNT_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief DAC_5_SAT_CNT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 DAC5_SAT_CNT              0x0
 * </pre>
 */
#define RIU_DAC_5_SAT_CNT_ADDR        (REG_RIU_BASE_ADDR + 0x000002D8)
#define RIU_DAC_5_SAT_CNT_OFFSET      0x000002D8
#define RIU_DAC_5_SAT_CNT_INDEX       0x000000B6
#define RIU_DAC_5_SAT_CNT_RESET       0x00000000

static inline u32 riu_dac_5_sat_cnt_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DAC_5_SAT_CNT_ADDR);
}

/* Field definitions */
#define RIU_DAC_5_SAT_CNT_DAC_5_SAT_CNT_MASK    ((u32)0xFFFFFFFF)
#define RIU_DAC_5_SAT_CNT_DAC_5_SAT_CNT_LSB    0
#define RIU_DAC_5_SAT_CNT_DAC_5_SAT_CNT_WIDTH    ((u32)0x00000020)

#define RIU_DAC_5_SAT_CNT_DAC_5_SAT_CNT_RST    0x0

static inline u32 riu_dac_5_sat_cnt_dac_5_sat_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DAC_5_SAT_CNT_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_MODEM_STATE_P register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_MODEM_STATE_P     0x0
 * </pre>
 */
#define RIU_CCA_CNT_MODEM_STATE_P_ADDR        (REG_RIU_BASE_ADDR + 0x000002DC)
#define RIU_CCA_CNT_MODEM_STATE_P_OFFSET      0x000002DC
#define RIU_CCA_CNT_MODEM_STATE_P_INDEX       0x000000B7
#define RIU_CCA_CNT_MODEM_STATE_P_RESET       0x00000000

static inline u32 riu_cca_cnt_modem_state_p_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_MODEM_STATE_P_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_MODEM_STATE_P_CCA_CNT_MODEM_STATE_P_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_MODEM_STATE_P_CCA_CNT_MODEM_STATE_P_LSB    0
#define RIU_CCA_CNT_MODEM_STATE_P_CCA_CNT_MODEM_STATE_P_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_MODEM_STATE_P_CCA_CNT_MODEM_STATE_P_RST    0x0

static inline u32 riu_cca_cnt_modem_state_p_cca_cnt_modem_state_p_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_MODEM_STATE_P_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_MODEM_STATE_20_S register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_MODEM_STATE_20_S  0x0
 * </pre>
 */
#define RIU_CCA_CNT_MODEM_STATE_20_S_ADDR        (REG_RIU_BASE_ADDR + 0x000002E0)
#define RIU_CCA_CNT_MODEM_STATE_20_S_OFFSET      0x000002E0
#define RIU_CCA_CNT_MODEM_STATE_20_S_INDEX       0x000000B8
#define RIU_CCA_CNT_MODEM_STATE_20_S_RESET       0x00000000

static inline u32 riu_cca_cnt_modem_state_20_s_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_MODEM_STATE_20_S_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_MODEM_STATE_20_S_CCA_CNT_MODEM_STATE_20_S_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_MODEM_STATE_20_S_CCA_CNT_MODEM_STATE_20_S_LSB    0
#define RIU_CCA_CNT_MODEM_STATE_20_S_CCA_CNT_MODEM_STATE_20_S_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_MODEM_STATE_20_S_CCA_CNT_MODEM_STATE_20_S_RST    0x0

static inline u32 riu_cca_cnt_modem_state_20_s_cca_cnt_modem_state_20_s_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_MODEM_STATE_20_S_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_MODEM_STATE_40_S register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_MODEM_STATE_40_S  0x0
 * </pre>
 */
#define RIU_CCA_CNT_MODEM_STATE_40_S_ADDR        (REG_RIU_BASE_ADDR + 0x000002E4)
#define RIU_CCA_CNT_MODEM_STATE_40_S_OFFSET      0x000002E4
#define RIU_CCA_CNT_MODEM_STATE_40_S_INDEX       0x000000B9
#define RIU_CCA_CNT_MODEM_STATE_40_S_RESET       0x00000000

static inline u32 riu_cca_cnt_modem_state_40_s_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_MODEM_STATE_40_S_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_MODEM_STATE_40_S_CCA_CNT_MODEM_STATE_40_S_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_MODEM_STATE_40_S_CCA_CNT_MODEM_STATE_40_S_LSB    0
#define RIU_CCA_CNT_MODEM_STATE_40_S_CCA_CNT_MODEM_STATE_40_S_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_MODEM_STATE_40_S_CCA_CNT_MODEM_STATE_40_S_RST    0x0

static inline u32 riu_cca_cnt_modem_state_40_s_cca_cnt_modem_state_40_s_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_MODEM_STATE_40_S_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_MODEM_STATE_80_S register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_MODEM_STATE_80_S  0x0
 * </pre>
 */
#define RIU_CCA_CNT_MODEM_STATE_80_S_ADDR        (REG_RIU_BASE_ADDR + 0x000002E8)
#define RIU_CCA_CNT_MODEM_STATE_80_S_OFFSET      0x000002E8
#define RIU_CCA_CNT_MODEM_STATE_80_S_INDEX       0x000000BA
#define RIU_CCA_CNT_MODEM_STATE_80_S_RESET       0x00000000

static inline u32 riu_cca_cnt_modem_state_80_s_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_MODEM_STATE_80_S_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_MODEM_STATE_80_S_CCA_CNT_MODEM_STATE_80_S_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_MODEM_STATE_80_S_CCA_CNT_MODEM_STATE_80_S_LSB    0
#define RIU_CCA_CNT_MODEM_STATE_80_S_CCA_CNT_MODEM_STATE_80_S_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_MODEM_STATE_80_S_CCA_CNT_MODEM_STATE_80_S_RST    0x0

static inline u32 riu_cca_cnt_modem_state_80_s_cca_cnt_modem_state_80_s_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_MODEM_STATE_80_S_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_RAMP_UP_P register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_RAMP_UP_P         0x0
 * </pre>
 */
#define RIU_CCA_CNT_RAMP_UP_P_ADDR        (REG_RIU_BASE_ADDR + 0x000002EC)
#define RIU_CCA_CNT_RAMP_UP_P_OFFSET      0x000002EC
#define RIU_CCA_CNT_RAMP_UP_P_INDEX       0x000000BB
#define RIU_CCA_CNT_RAMP_UP_P_RESET       0x00000000

static inline u32 riu_cca_cnt_ramp_up_p_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_RAMP_UP_P_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_RAMP_UP_P_CCA_CNT_RAMP_UP_P_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_RAMP_UP_P_CCA_CNT_RAMP_UP_P_LSB    0
#define RIU_CCA_CNT_RAMP_UP_P_CCA_CNT_RAMP_UP_P_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_RAMP_UP_P_CCA_CNT_RAMP_UP_P_RST    0x0

static inline u32 riu_cca_cnt_ramp_up_p_cca_cnt_ramp_up_p_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_RAMP_UP_P_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_RAMP_UP_20_S register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_RAMP_UP_20_S      0x0
 * </pre>
 */
#define RIU_CCA_CNT_RAMP_UP_20_S_ADDR        (REG_RIU_BASE_ADDR + 0x000002F0)
#define RIU_CCA_CNT_RAMP_UP_20_S_OFFSET      0x000002F0
#define RIU_CCA_CNT_RAMP_UP_20_S_INDEX       0x000000BC
#define RIU_CCA_CNT_RAMP_UP_20_S_RESET       0x00000000

static inline u32 riu_cca_cnt_ramp_up_20_s_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_RAMP_UP_20_S_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_RAMP_UP_20_S_CCA_CNT_RAMP_UP_20_S_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_RAMP_UP_20_S_CCA_CNT_RAMP_UP_20_S_LSB    0
#define RIU_CCA_CNT_RAMP_UP_20_S_CCA_CNT_RAMP_UP_20_S_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_RAMP_UP_20_S_CCA_CNT_RAMP_UP_20_S_RST    0x0

static inline u32 riu_cca_cnt_ramp_up_20_s_cca_cnt_ramp_up_20_s_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_RAMP_UP_20_S_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_ENERGY_THR_P register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_ENERGY_THR_P      0x0
 * </pre>
 */
#define RIU_CCA_CNT_ENERGY_THR_P_ADDR        (REG_RIU_BASE_ADDR + 0x000002F4)
#define RIU_CCA_CNT_ENERGY_THR_P_OFFSET      0x000002F4
#define RIU_CCA_CNT_ENERGY_THR_P_INDEX       0x000000BD
#define RIU_CCA_CNT_ENERGY_THR_P_RESET       0x00000000

static inline u32 riu_cca_cnt_energy_thr_p_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_P_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_ENERGY_THR_P_CCA_CNT_ENERGY_THR_P_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_ENERGY_THR_P_CCA_CNT_ENERGY_THR_P_LSB    0
#define RIU_CCA_CNT_ENERGY_THR_P_CCA_CNT_ENERGY_THR_P_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_ENERGY_THR_P_CCA_CNT_ENERGY_THR_P_RST    0x0

static inline u32 riu_cca_cnt_energy_thr_p_cca_cnt_energy_thr_p_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_P_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_ENERGY_THR_20_S register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_ENERGY_THR_20_S   0x0
 * </pre>
 */
#define RIU_CCA_CNT_ENERGY_THR_20_S_ADDR        (REG_RIU_BASE_ADDR + 0x000002F8)
#define RIU_CCA_CNT_ENERGY_THR_20_S_OFFSET      0x000002F8
#define RIU_CCA_CNT_ENERGY_THR_20_S_INDEX       0x000000BE
#define RIU_CCA_CNT_ENERGY_THR_20_S_RESET       0x00000000

static inline u32 riu_cca_cnt_energy_thr_20_s_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_S_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_ENERGY_THR_20_S_CCA_CNT_ENERGY_THR_20_S_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_ENERGY_THR_20_S_CCA_CNT_ENERGY_THR_20_S_LSB    0
#define RIU_CCA_CNT_ENERGY_THR_20_S_CCA_CNT_ENERGY_THR_20_S_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_ENERGY_THR_20_S_CCA_CNT_ENERGY_THR_20_S_RST    0x0

static inline u32 riu_cca_cnt_energy_thr_20_s_cca_cnt_energy_thr_20_s_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_S_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_GI_20_P register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_GI_20_P           0x0
 * </pre>
 */
#define RIU_CCA_CNT_GI_20_P_ADDR        (REG_RIU_BASE_ADDR + 0x000002FC)
#define RIU_CCA_CNT_GI_20_P_OFFSET      0x000002FC
#define RIU_CCA_CNT_GI_20_P_INDEX       0x000000BF
#define RIU_CCA_CNT_GI_20_P_RESET       0x00000000

static inline u32 riu_cca_cnt_gi_20_p_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_GI_20_P_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_GI_20_P_CCA_CNT_GI_20_P_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_GI_20_P_CCA_CNT_GI_20_P_LSB    0
#define RIU_CCA_CNT_GI_20_P_CCA_CNT_GI_20_P_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_GI_20_P_CCA_CNT_GI_20_P_RST    0x0

static inline u32 riu_cca_cnt_gi_20_p_cca_cnt_gi_20_p_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_GI_20_P_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief RWNXAGCANTLOSS register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:20 RFLOSSANT5_DB             0x0
 *    19:16 RFLOSSANT4_DB             0x0
 *    15:12 RFLOSSANT3_DB             0x0
 *    11:08 RFLOSSANT2_DB             0x0
 *    07:04 RFLOSSANT1_DB             0x0
 *    03:00 RFLOSSANT0_DB             0x0
 * </pre>
 */
#define RIU_RWNXAGCANTLOSS_ADDR        (REG_RIU_BASE_ADDR + 0x00000300)
#define RIU_RWNXAGCANTLOSS_OFFSET      0x00000300
#define RIU_RWNXAGCANTLOSS_INDEX       0x000000C0
#define RIU_RWNXAGCANTLOSS_RESET       0x00000000

static inline u32 riu_rwnxagcantloss_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCANTLOSS_ADDR);
}

static inline void riu_rwnxagcantloss_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCANTLOSS_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_5_DB_MASK    ((u32)0x00F00000)
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_5_DB_LSB    20
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_5_DB_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_4_DB_MASK    ((u32)0x000F0000)
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_4_DB_LSB    16
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_4_DB_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_3_DB_MASK    ((u32)0x0000F000)
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_3_DB_LSB    12
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_3_DB_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_2_DB_MASK    ((u32)0x00000F00)
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_2_DB_LSB    8
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_2_DB_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_1_DB_MASK    ((u32)0x000000F0)
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_1_DB_LSB    4
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_1_DB_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_0_DB_MASK    ((u32)0x0000000F)
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_0_DB_LSB    0
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_0_DB_WIDTH    ((u32)0x00000004)

#define RIU_RWNXAGCANTLOSS_RFLOSSANT_5_DB_RST    0x0
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_4_DB_RST    0x0
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_3_DB_RST    0x0
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_2_DB_RST    0x0
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_1_DB_RST    0x0
#define RIU_RWNXAGCANTLOSS_RFLOSSANT_0_DB_RST    0x0

static inline void riu_rwnxagcantloss_pack(struct cl_chip *chip, u8 rflossant5_db, u8 rflossant4_db, u8 rflossant3_db, u8 rflossant2_db, u8 rflossant1_db, u8 rflossant0_db)
{
	ASSERT_ERR_CHIP((((u32)rflossant5_db << 20) & ~((u32)0x00F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)rflossant4_db << 16) & ~((u32)0x000F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)rflossant3_db << 12) & ~((u32)0x0000F000)) == 0);
	ASSERT_ERR_CHIP((((u32)rflossant2_db << 8) & ~((u32)0x00000F00)) == 0);
	ASSERT_ERR_CHIP((((u32)rflossant1_db << 4) & ~((u32)0x000000F0)) == 0);
	ASSERT_ERR_CHIP((((u32)rflossant0_db << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCANTLOSS_ADDR, ((u32)rflossant5_db << 20) | ((u32)rflossant4_db << 16) | ((u32)rflossant3_db << 12) | ((u32)rflossant2_db << 8) | ((u32)rflossant1_db << 4) | ((u32)rflossant0_db << 0));
}

static inline void riu_rwnxagcantloss_unpack(struct cl_chip *chip, u8 *rflossant5_db, u8 *rflossant4_db, u8 *rflossant3_db, u8 *rflossant2_db, u8 *rflossant1_db, u8 *rflossant0_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCANTLOSS_ADDR);

	*rflossant5_db = (local_val & ((u32)0x00F00000)) >> 20;
	*rflossant4_db = (local_val & ((u32)0x000F0000)) >> 16;
	*rflossant3_db = (local_val & ((u32)0x0000F000)) >> 12;
	*rflossant2_db = (local_val & ((u32)0x00000F00)) >> 8;
	*rflossant1_db = (local_val & ((u32)0x000000F0)) >> 4;
	*rflossant0_db = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 riu_rwnxagcantloss_rflossant_5_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCANTLOSS_ADDR);

	return (u8)((local_val & ((u32)0x00F00000)) >> 20);
}

static inline void riu_rwnxagcantloss_rflossant_5_db_setf(struct cl_chip *chip, u8 rflossant5db)
{
	ASSERT_ERR_CHIP((((u32)rflossant5db << 20) & ~((u32)0x00F00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCANTLOSS_ADDR, (cl_reg_read(chip, RIU_RWNXAGCANTLOSS_ADDR) & ~((u32)0x00F00000)) | ((u32)rflossant5db << 20));
}

static inline u8 riu_rwnxagcantloss_rflossant_4_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCANTLOSS_ADDR);

	return (u8)((local_val & ((u32)0x000F0000)) >> 16);
}

static inline void riu_rwnxagcantloss_rflossant_4_db_setf(struct cl_chip *chip, u8 rflossant4db)
{
	ASSERT_ERR_CHIP((((u32)rflossant4db << 16) & ~((u32)0x000F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCANTLOSS_ADDR, (cl_reg_read(chip, RIU_RWNXAGCANTLOSS_ADDR) & ~((u32)0x000F0000)) | ((u32)rflossant4db << 16));
}

static inline u8 riu_rwnxagcantloss_rflossant_3_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCANTLOSS_ADDR);

	return (u8)((local_val & ((u32)0x0000F000)) >> 12);
}

static inline void riu_rwnxagcantloss_rflossant_3_db_setf(struct cl_chip *chip, u8 rflossant3db)
{
	ASSERT_ERR_CHIP((((u32)rflossant3db << 12) & ~((u32)0x0000F000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCANTLOSS_ADDR, (cl_reg_read(chip, RIU_RWNXAGCANTLOSS_ADDR) & ~((u32)0x0000F000)) | ((u32)rflossant3db << 12));
}

static inline u8 riu_rwnxagcantloss_rflossant_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCANTLOSS_ADDR);

	return (u8)((local_val & ((u32)0x00000F00)) >> 8);
}

static inline void riu_rwnxagcantloss_rflossant_2_db_setf(struct cl_chip *chip, u8 rflossant2db)
{
	ASSERT_ERR_CHIP((((u32)rflossant2db << 8) & ~((u32)0x00000F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCANTLOSS_ADDR, (cl_reg_read(chip, RIU_RWNXAGCANTLOSS_ADDR) & ~((u32)0x00000F00)) | ((u32)rflossant2db << 8));
}

static inline u8 riu_rwnxagcantloss_rflossant_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCANTLOSS_ADDR);

	return (u8)((local_val & ((u32)0x000000F0)) >> 4);
}

static inline void riu_rwnxagcantloss_rflossant_1_db_setf(struct cl_chip *chip, u8 rflossant1db)
{
	ASSERT_ERR_CHIP((((u32)rflossant1db << 4) & ~((u32)0x000000F0)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCANTLOSS_ADDR, (cl_reg_read(chip, RIU_RWNXAGCANTLOSS_ADDR) & ~((u32)0x000000F0)) | ((u32)rflossant1db << 4));
}

static inline u8 riu_rwnxagcantloss_rflossant_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCANTLOSS_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

static inline void riu_rwnxagcantloss_rflossant_0_db_setf(struct cl_chip *chip, u8 rflossant0db)
{
	ASSERT_ERR_CHIP((((u32)rflossant0db << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCANTLOSS_ADDR, (cl_reg_read(chip, RIU_RWNXAGCANTLOSS_ADDR) & ~((u32)0x0000000F)) | ((u32)rflossant0db << 0));
}

/**
 * @brief RWNXAGCGAINRANGE register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 RFGAINMAX4_DETDB          0x47
 *    22:16 RFGAINMIN4_DETDB          0x6C
 *    14:08 RFGAINMAXDB               0x64
 *    06:00 RFGAINMINDB               0x6C
 * </pre>
 */
#define RIU_RWNXAGCGAINRANGE_ADDR        (REG_RIU_BASE_ADDR + 0x00000304)
#define RIU_RWNXAGCGAINRANGE_OFFSET      0x00000304
#define RIU_RWNXAGCGAINRANGE_INDEX       0x000000C1
#define RIU_RWNXAGCGAINRANGE_RESET       0x476C646C

static inline u32 riu_rwnxagcgainrange_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCGAINRANGE_ADDR);
}

static inline void riu_rwnxagcgainrange_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCGAINRANGE_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCGAINRANGE_RFGAINMAX_4_DETDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCGAINRANGE_RFGAINMAX_4_DETDB_LSB    24
#define RIU_RWNXAGCGAINRANGE_RFGAINMAX_4_DETDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCGAINRANGE_RFGAINMIN_4_DETDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCGAINRANGE_RFGAINMIN_4_DETDB_LSB    16
#define RIU_RWNXAGCGAINRANGE_RFGAINMIN_4_DETDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCGAINRANGE_RFGAINMAXDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCGAINRANGE_RFGAINMAXDB_LSB    8
#define RIU_RWNXAGCGAINRANGE_RFGAINMAXDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCGAINRANGE_RFGAINMINDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCGAINRANGE_RFGAINMINDB_LSB    0
#define RIU_RWNXAGCGAINRANGE_RFGAINMINDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCGAINRANGE_RFGAINMAX_4_DETDB_RST    0x47
#define RIU_RWNXAGCGAINRANGE_RFGAINMIN_4_DETDB_RST    0x6C
#define RIU_RWNXAGCGAINRANGE_RFGAINMAXDB_RST    0x64
#define RIU_RWNXAGCGAINRANGE_RFGAINMINDB_RST    0x6C

static inline void riu_rwnxagcgainrange_pack(struct cl_chip *chip, u8 rfgainmax4_detdb, u8 rfgainmin4_detdb, u8 rfgainmaxdb, u8 rfgainmindb)
{
	ASSERT_ERR_CHIP((((u32)rfgainmax4_detdb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rfgainmin4_detdb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)rfgainmaxdb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)rfgainmindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCGAINRANGE_ADDR, ((u32)rfgainmax4_detdb << 24) | ((u32)rfgainmin4_detdb << 16) | ((u32)rfgainmaxdb << 8) | ((u32)rfgainmindb << 0));
}

static inline void riu_rwnxagcgainrange_unpack(struct cl_chip *chip, u8 *rfgainmax4_detdb, u8 *rfgainmin4_detdb, u8 *rfgainmaxdb, u8 *rfgainmindb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCGAINRANGE_ADDR);

	*rfgainmax4_detdb = (local_val & ((u32)0x7F000000)) >> 24;
	*rfgainmin4_detdb = (local_val & ((u32)0x007F0000)) >> 16;
	*rfgainmaxdb = (local_val & ((u32)0x00007F00)) >> 8;
	*rfgainmindb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagcgainrange_rfgainmax_4_detdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCGAINRANGE_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagcgainrange_rfgainmax_4_detdb_setf(struct cl_chip *chip, u8 rfgainmax4detdb)
{
	ASSERT_ERR_CHIP((((u32)rfgainmax4detdb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCGAINRANGE_ADDR, (cl_reg_read(chip, RIU_RWNXAGCGAINRANGE_ADDR) & ~((u32)0x7F000000)) | ((u32)rfgainmax4detdb << 24));
}

static inline u8 riu_rwnxagcgainrange_rfgainmin_4_detdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCGAINRANGE_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagcgainrange_rfgainmin_4_detdb_setf(struct cl_chip *chip, u8 rfgainmin4detdb)
{
	ASSERT_ERR_CHIP((((u32)rfgainmin4detdb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCGAINRANGE_ADDR, (cl_reg_read(chip, RIU_RWNXAGCGAINRANGE_ADDR) & ~((u32)0x007F0000)) | ((u32)rfgainmin4detdb << 16));
}

static inline u8 riu_rwnxagcgainrange_rfgainmaxdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCGAINRANGE_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagcgainrange_rfgainmaxdb_setf(struct cl_chip *chip, u8 rfgainmaxdb)
{
	ASSERT_ERR_CHIP((((u32)rfgainmaxdb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCGAINRANGE_ADDR, (cl_reg_read(chip, RIU_RWNXAGCGAINRANGE_ADDR) & ~((u32)0x00007F00)) | ((u32)rfgainmaxdb << 8));
}

static inline u8 riu_rwnxagcgainrange_rfgainmindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCGAINRANGE_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagcgainrange_rfgainmindb_setf(struct cl_chip *chip, u8 rfgainmindb)
{
	ASSERT_ERR_CHIP((((u32)rfgainmindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCGAINRANGE_ADDR, (cl_reg_read(chip, RIU_RWNXAGCGAINRANGE_ADDR) & ~((u32)0x0000007F)) | ((u32)rfgainmindb << 0));
}

/**
 * @brief RWNXAGCVGAREF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 DIGGAIN160_VS20           0x0
 *    27:24 DIGGAIN80_VS20            0x0
 *    23:20 DIGGAIN40_VS20            0x0
 *    19    Dig_Gain_Fix160_En        0
 *    18    Dig_Gain_Fix80_En         0
 *    17    Dig_Gain_Fix40_En         0
 *    16:12 VGAINDMAX                 0x1D
 *    10:08 VGASTEPDB                 0x2
 *    04:00 VGAMINDB                  0x1A
 * </pre>
 */
#define RIU_RWNXAGCVGAREF_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000308)
#define RIU_RWNXAGCVGAREF_0_OFFSET      0x00000308
#define RIU_RWNXAGCVGAREF_0_INDEX       0x000000C2
#define RIU_RWNXAGCVGAREF_0_RESET       0x0001D21A

static inline u32 riu_rwnxagcvgaref_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR);
}

static inline void riu_rwnxagcvgaref_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCVGAREF_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCVGAREF_0_DIGGAIN_160_VS_20_MASK    ((u32)0xF0000000)
#define RIU_RWNXAGCVGAREF_0_DIGGAIN_160_VS_20_LSB    28
#define RIU_RWNXAGCVGAREF_0_DIGGAIN_160_VS_20_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCVGAREF_0_DIGGAIN_80_VS_20_MASK    ((u32)0x0F000000)
#define RIU_RWNXAGCVGAREF_0_DIGGAIN_80_VS_20_LSB    24
#define RIU_RWNXAGCVGAREF_0_DIGGAIN_80_VS_20_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCVGAREF_0_DIGGAIN_40_VS_20_MASK    ((u32)0x00F00000)
#define RIU_RWNXAGCVGAREF_0_DIGGAIN_40_VS_20_LSB    20
#define RIU_RWNXAGCVGAREF_0_DIGGAIN_40_VS_20_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCVGAREF_0_DIG_GAIN_FIX_160_EN_BIT    ((u32)0x00080000)
#define RIU_RWNXAGCVGAREF_0_DIG_GAIN_FIX_160_EN_POS    19
#define RIU_RWNXAGCVGAREF_0_DIG_GAIN_FIX_80_EN_BIT    ((u32)0x00040000)
#define RIU_RWNXAGCVGAREF_0_DIG_GAIN_FIX_80_EN_POS    18
#define RIU_RWNXAGCVGAREF_0_DIG_GAIN_FIX_40_EN_BIT    ((u32)0x00020000)
#define RIU_RWNXAGCVGAREF_0_DIG_GAIN_FIX_40_EN_POS    17
#define RIU_RWNXAGCVGAREF_0_VGAINDMAX_MASK    ((u32)0x0001F000)
#define RIU_RWNXAGCVGAREF_0_VGAINDMAX_LSB    12
#define RIU_RWNXAGCVGAREF_0_VGAINDMAX_WIDTH    ((u32)0x00000005)
#define RIU_RWNXAGCVGAREF_0_VGASTEPDB_MASK    ((u32)0x00000700)
#define RIU_RWNXAGCVGAREF_0_VGASTEPDB_LSB    8
#define RIU_RWNXAGCVGAREF_0_VGASTEPDB_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCVGAREF_0_VGAMINDB_MASK    ((u32)0x0000001F)
#define RIU_RWNXAGCVGAREF_0_VGAMINDB_LSB    0
#define RIU_RWNXAGCVGAREF_0_VGAMINDB_WIDTH    ((u32)0x00000005)

#define RIU_RWNXAGCVGAREF_0_DIGGAIN_160_VS_20_RST    0x0
#define RIU_RWNXAGCVGAREF_0_DIGGAIN_80_VS_20_RST    0x0
#define RIU_RWNXAGCVGAREF_0_DIGGAIN_40_VS_20_RST    0x0
#define RIU_RWNXAGCVGAREF_0_DIG_GAIN_FIX_160_EN_RST    0x0
#define RIU_RWNXAGCVGAREF_0_DIG_GAIN_FIX_80_EN_RST    0x0
#define RIU_RWNXAGCVGAREF_0_DIG_GAIN_FIX_40_EN_RST    0x0
#define RIU_RWNXAGCVGAREF_0_VGAINDMAX_RST    0x1D
#define RIU_RWNXAGCVGAREF_0_VGASTEPDB_RST    0x2
#define RIU_RWNXAGCVGAREF_0_VGAMINDB_RST    0x1A

static inline void riu_rwnxagcvgaref_0_pack(struct cl_chip *chip, u8 diggain160_vs20, u8 diggain80_vs20, u8 diggain40_vs20, u8 dig_gain_fix160_en, u8 dig_gain_fix80_en, u8 dig_gain_fix40_en, u8 vgaindmax, u8 vgastepdb, u8 vgamindb)
{
	ASSERT_ERR_CHIP((((u32)diggain160_vs20 << 28) & ~((u32)0xF0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)diggain80_vs20 << 24) & ~((u32)0x0F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)diggain40_vs20 << 20) & ~((u32)0x00F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)dig_gain_fix160_en << 19) & ~((u32)0x00080000)) == 0);
	ASSERT_ERR_CHIP((((u32)dig_gain_fix80_en << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)dig_gain_fix40_en << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)vgaindmax << 12) & ~((u32)0x0001F000)) == 0);
	ASSERT_ERR_CHIP((((u32)vgastepdb << 8) & ~((u32)0x00000700)) == 0);
	ASSERT_ERR_CHIP((((u32)vgamindb << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCVGAREF_0_ADDR, ((u32)diggain160_vs20 << 28) | ((u32)diggain80_vs20 << 24) | ((u32)diggain40_vs20 << 20) | ((u32)dig_gain_fix160_en << 19) | ((u32)dig_gain_fix80_en << 18) | ((u32)dig_gain_fix40_en << 17) | ((u32)vgaindmax << 12) | ((u32)vgastepdb << 8) | ((u32)vgamindb << 0));
}

static inline void riu_rwnxagcvgaref_0_unpack(struct cl_chip *chip, u8 *diggain160_vs20, u8 *diggain80_vs20, u8 *diggain40_vs20, u8 *dig_gain_fix160_en, u8 *dig_gain_fix80_en, u8 *dig_gain_fix40_en, u8 *vgaindmax, u8 *vgastepdb, u8 *vgamindb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR);

	*diggain160_vs20 = (local_val & ((u32)0xF0000000)) >> 28;
	*diggain80_vs20 = (local_val & ((u32)0x0F000000)) >> 24;
	*diggain40_vs20 = (local_val & ((u32)0x00F00000)) >> 20;
	*dig_gain_fix160_en = (local_val & ((u32)0x00080000)) >> 19;
	*dig_gain_fix80_en = (local_val & ((u32)0x00040000)) >> 18;
	*dig_gain_fix40_en = (local_val & ((u32)0x00020000)) >> 17;
	*vgaindmax = (local_val & ((u32)0x0001F000)) >> 12;
	*vgastepdb = (local_val & ((u32)0x00000700)) >> 8;
	*vgamindb = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u8 riu_rwnxagcvgaref_0_diggain_160_vs_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR);

	return (u8)((local_val & ((u32)0xF0000000)) >> 28);
}

static inline void riu_rwnxagcvgaref_0_diggain_160_vs_20_setf(struct cl_chip *chip, u8 diggain160vs20)
{
	ASSERT_ERR_CHIP((((u32)diggain160vs20 << 28) & ~((u32)0xF0000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCVGAREF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR) & ~((u32)0xF0000000)) | ((u32)diggain160vs20 << 28));
}

static inline u8 riu_rwnxagcvgaref_0_diggain_80_vs_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR);

	return (u8)((local_val & ((u32)0x0F000000)) >> 24);
}

static inline void riu_rwnxagcvgaref_0_diggain_80_vs_20_setf(struct cl_chip *chip, u8 diggain80vs20)
{
	ASSERT_ERR_CHIP((((u32)diggain80vs20 << 24) & ~((u32)0x0F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCVGAREF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR) & ~((u32)0x0F000000)) | ((u32)diggain80vs20 << 24));
}

static inline u8 riu_rwnxagcvgaref_0_diggain_40_vs_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR);

	return (u8)((local_val & ((u32)0x00F00000)) >> 20);
}

static inline void riu_rwnxagcvgaref_0_diggain_40_vs_20_setf(struct cl_chip *chip, u8 diggain40vs20)
{
	ASSERT_ERR_CHIP((((u32)diggain40vs20 << 20) & ~((u32)0x00F00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCVGAREF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR) & ~((u32)0x00F00000)) | ((u32)diggain40vs20 << 20));
}

static inline u8 riu_rwnxagcvgaref_0_dig_gain_fix_160_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline void riu_rwnxagcvgaref_0_dig_gain_fix_160_en_setf(struct cl_chip *chip, u8 diggainfix160en)
{
	ASSERT_ERR_CHIP((((u32)diggainfix160en << 19) & ~((u32)0x00080000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCVGAREF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR) & ~((u32)0x00080000)) | ((u32)diggainfix160en << 19));
}

static inline u8 riu_rwnxagcvgaref_0_dig_gain_fix_80_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void riu_rwnxagcvgaref_0_dig_gain_fix_80_en_setf(struct cl_chip *chip, u8 diggainfix80en)
{
	ASSERT_ERR_CHIP((((u32)diggainfix80en << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCVGAREF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR) & ~((u32)0x00040000)) | ((u32)diggainfix80en << 18));
}

static inline u8 riu_rwnxagcvgaref_0_dig_gain_fix_40_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void riu_rwnxagcvgaref_0_dig_gain_fix_40_en_setf(struct cl_chip *chip, u8 diggainfix40en)
{
	ASSERT_ERR_CHIP((((u32)diggainfix40en << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCVGAREF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR) & ~((u32)0x00020000)) | ((u32)diggainfix40en << 17));
}

static inline u8 riu_rwnxagcvgaref_0_vgaindmax_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR);

	return (u8)((local_val & ((u32)0x0001F000)) >> 12);
}

static inline void riu_rwnxagcvgaref_0_vgaindmax_setf(struct cl_chip *chip, u8 vgaindmax)
{
	ASSERT_ERR_CHIP((((u32)vgaindmax << 12) & ~((u32)0x0001F000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCVGAREF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR) & ~((u32)0x0001F000)) | ((u32)vgaindmax << 12));
}

static inline u8 riu_rwnxagcvgaref_0_vgastepdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR);

	return (u8)((local_val & ((u32)0x00000700)) >> 8);
}

static inline void riu_rwnxagcvgaref_0_vgastepdb_setf(struct cl_chip *chip, u8 vgastepdb)
{
	ASSERT_ERR_CHIP((((u32)vgastepdb << 8) & ~((u32)0x00000700)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCVGAREF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR) & ~((u32)0x00000700)) | ((u32)vgastepdb << 8));
}

static inline u8 riu_rwnxagcvgaref_0_vgamindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

static inline void riu_rwnxagcvgaref_0_vgamindb_setf(struct cl_chip *chip, u8 vgamindb)
{
	ASSERT_ERR_CHIP((((u32)vgamindb << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCVGAREF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCVGAREF_0_ADDR) & ~((u32)0x0000001F)) | ((u32)vgamindb << 0));
}

/**
 * @brief RWNXAGCLNAGAINSET_0_REF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA3_GAINDB               0xF
 *    22:16 LNA2_GAINDB               0xC
 *    14:08 LNA1_GAINDB               0x0
 *    06:00 LNA0_GAINDB               0x74
 * </pre>
 */
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR        (REG_RIU_BASE_ADDR + 0x0000030C)
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_OFFSET      0x0000030C
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_INDEX       0x000000C3
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_RESET       0x0F0C0074

static inline u32 riu_rwnxagclnagainset_0_ref_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR);
}

static inline void riu_rwnxagclnagainset_0_ref_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_LNA_3_GAINDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_LNA_3_GAINDB_LSB    24
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_LNA_3_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_LNA_2_GAINDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_LNA_2_GAINDB_LSB    16
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_LNA_2_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_LNA_1_GAINDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_LNA_1_GAINDB_LSB    8
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_LNA_1_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_LNA_0_GAINDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_LNA_0_GAINDB_LSB    0
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_LNA_0_GAINDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAGAINSET_0_REF_0_LNA_3_GAINDB_RST    0xF
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_LNA_2_GAINDB_RST    0xC
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_LNA_1_GAINDB_RST    0x0
#define RIU_RWNXAGCLNAGAINSET_0_REF_0_LNA_0_GAINDB_RST    0x74

static inline void riu_rwnxagclnagainset_0_ref_0_pack(struct cl_chip *chip, u8 lna3_gaindb, u8 lna2_gaindb, u8 lna1_gaindb, u8 lna0_gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna3_gaindb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna2_gaindb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna1_gaindb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna0_gaindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR, ((u32)lna3_gaindb << 24) | ((u32)lna2_gaindb << 16) | ((u32)lna1_gaindb << 8) | ((u32)lna0_gaindb << 0));
}

static inline void riu_rwnxagclnagainset_0_ref_0_unpack(struct cl_chip *chip, u8 *lna3_gaindb, u8 *lna2_gaindb, u8 *lna1_gaindb, u8 *lna0_gaindb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR);

	*lna3_gaindb = (local_val & ((u32)0x7F000000)) >> 24;
	*lna2_gaindb = (local_val & ((u32)0x007F0000)) >> 16;
	*lna1_gaindb = (local_val & ((u32)0x00007F00)) >> 8;
	*lna0_gaindb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnagainset_0_ref_0_lna_3_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnagainset_0_ref_0_lna_3_gaindb_setf(struct cl_chip *chip, u8 lna3gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna3gaindb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR) & ~((u32)0x7F000000)) | ((u32)lna3gaindb << 24));
}

static inline u8 riu_rwnxagclnagainset_0_ref_0_lna_2_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnagainset_0_ref_0_lna_2_gaindb_setf(struct cl_chip *chip, u8 lna2gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna2gaindb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR) & ~((u32)0x007F0000)) | ((u32)lna2gaindb << 16));
}

static inline u8 riu_rwnxagclnagainset_0_ref_0_lna_1_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnagainset_0_ref_0_lna_1_gaindb_setf(struct cl_chip *chip, u8 lna1gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna1gaindb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR) & ~((u32)0x00007F00)) | ((u32)lna1gaindb << 8));
}

static inline u8 riu_rwnxagclnagainset_0_ref_0_lna_0_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnagainset_0_ref_0_lna_0_gaindb_setf(struct cl_chip *chip, u8 lna0gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna0gaindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_0_ADDR) & ~((u32)0x0000007F)) | ((u32)lna0gaindb << 0));
}

/**
 * @brief RWNXAGCLNAGAINSET_0_REF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA7_GAINDB               0x27
 *    22:16 LNA6_GAINDB               0x27
 *    14:08 LNA5_GAINDB               0x21
 *    06:00 LNA4_GAINDB               0x1B
 * </pre>
 */
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000310)
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_OFFSET      0x00000310
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_INDEX       0x000000C4
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_RESET       0x2727211B

static inline u32 riu_rwnxagclnagainset_0_ref_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR);
}

static inline void riu_rwnxagclnagainset_0_ref_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_LNA_7_GAINDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_LNA_7_GAINDB_LSB    24
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_LNA_7_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_LNA_6_GAINDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_LNA_6_GAINDB_LSB    16
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_LNA_6_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_LNA_5_GAINDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_LNA_5_GAINDB_LSB    8
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_LNA_5_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_LNA_4_GAINDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_LNA_4_GAINDB_LSB    0
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_LNA_4_GAINDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAGAINSET_0_REF_1_LNA_7_GAINDB_RST    0x27
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_LNA_6_GAINDB_RST    0x27
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_LNA_5_GAINDB_RST    0x21
#define RIU_RWNXAGCLNAGAINSET_0_REF_1_LNA_4_GAINDB_RST    0x1B

static inline void riu_rwnxagclnagainset_0_ref_1_pack(struct cl_chip *chip, u8 lna7_gaindb, u8 lna6_gaindb, u8 lna5_gaindb, u8 lna4_gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna7_gaindb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna6_gaindb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna5_gaindb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna4_gaindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR, ((u32)lna7_gaindb << 24) | ((u32)lna6_gaindb << 16) | ((u32)lna5_gaindb << 8) | ((u32)lna4_gaindb << 0));
}

static inline void riu_rwnxagclnagainset_0_ref_1_unpack(struct cl_chip *chip, u8 *lna7_gaindb, u8 *lna6_gaindb, u8 *lna5_gaindb, u8 *lna4_gaindb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR);

	*lna7_gaindb = (local_val & ((u32)0x7F000000)) >> 24;
	*lna6_gaindb = (local_val & ((u32)0x007F0000)) >> 16;
	*lna5_gaindb = (local_val & ((u32)0x00007F00)) >> 8;
	*lna4_gaindb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnagainset_0_ref_1_lna_7_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnagainset_0_ref_1_lna_7_gaindb_setf(struct cl_chip *chip, u8 lna7gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna7gaindb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR) & ~((u32)0x7F000000)) | ((u32)lna7gaindb << 24));
}

static inline u8 riu_rwnxagclnagainset_0_ref_1_lna_6_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnagainset_0_ref_1_lna_6_gaindb_setf(struct cl_chip *chip, u8 lna6gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna6gaindb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR) & ~((u32)0x007F0000)) | ((u32)lna6gaindb << 16));
}

static inline u8 riu_rwnxagclnagainset_0_ref_1_lna_5_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnagainset_0_ref_1_lna_5_gaindb_setf(struct cl_chip *chip, u8 lna5gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna5gaindb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR) & ~((u32)0x00007F00)) | ((u32)lna5gaindb << 8));
}

static inline u8 riu_rwnxagclnagainset_0_ref_1_lna_4_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnagainset_0_ref_1_lna_4_gaindb_setf(struct cl_chip *chip, u8 lna4gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna4gaindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_0_REF_1_ADDR) & ~((u32)0x0000007F)) | ((u32)lna4gaindb << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_0_REF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA3_THRSET0_DB           0x2C
 *    23:16 LNA2_THRSET0_DB           0x26
 *    15:08 LNA1_THRSET0_DB           0x17
 *    07:00 LNA0_THRSET0_DB           0xC
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000314)
#define RIU_RWNXAGCLNATHRSET_0_REF_0_OFFSET      0x00000314
#define RIU_RWNXAGCLNATHRSET_0_REF_0_INDEX       0x000000C5
#define RIU_RWNXAGCLNATHRSET_0_REF_0_RESET       0x2C26170C

static inline u32 riu_rwnxagclnathrset_0_ref_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR);
}

static inline void riu_rwnxagclnathrset_0_ref_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_0_REF_0_LNA_3_THRSET_0_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_0_REF_0_LNA_3_THRSET_0_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_0_REF_0_LNA_3_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_0_REF_0_LNA_2_THRSET_0_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_0_REF_0_LNA_2_THRSET_0_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_0_REF_0_LNA_2_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_0_REF_0_LNA_1_THRSET_0_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_0_REF_0_LNA_1_THRSET_0_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_0_REF_0_LNA_1_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_0_REF_0_LNA_0_THRSET_0_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_0_REF_0_LNA_0_THRSET_0_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_0_REF_0_LNA_0_THRSET_0_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_0_REF_0_LNA_3_THRSET_0_DB_RST    0x2C
#define RIU_RWNXAGCLNATHRSET_0_REF_0_LNA_2_THRSET_0_DB_RST    0x26
#define RIU_RWNXAGCLNATHRSET_0_REF_0_LNA_1_THRSET_0_DB_RST    0x17
#define RIU_RWNXAGCLNATHRSET_0_REF_0_LNA_0_THRSET_0_DB_RST    0xC

static inline void riu_rwnxagclnathrset_0_ref_0_pack(struct cl_chip *chip, u8 lna3_thrset0_db, u8 lna2_thrset0_db, u8 lna1_thrset0_db, u8 lna0_thrset0_db)
{
	ASSERT_ERR_CHIP((((u32)lna3_thrset0_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna2_thrset0_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna1_thrset0_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna0_thrset0_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR, ((u32)lna3_thrset0_db << 24) | ((u32)lna2_thrset0_db << 16) | ((u32)lna1_thrset0_db << 8) | ((u32)lna0_thrset0_db << 0));
}

static inline void riu_rwnxagclnathrset_0_ref_0_unpack(struct cl_chip *chip, u8 *lna3_thrset0_db, u8 *lna2_thrset0_db, u8 *lna1_thrset0_db, u8 *lna0_thrset0_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR);

	*lna3_thrset0_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna2_thrset0_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna1_thrset0_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna0_thrset0_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_0_ref_0_lna_3_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_0_ref_0_lna_3_thrset_0_db_setf(struct cl_chip *chip, u8 lna3thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna3thrset0db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR) & ~((u32)0xFF000000)) | ((u32)lna3thrset0db << 24));
}

static inline u8 riu_rwnxagclnathrset_0_ref_0_lna_2_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_0_ref_0_lna_2_thrset_0_db_setf(struct cl_chip *chip, u8 lna2thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna2thrset0db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna2thrset0db << 16));
}

static inline u8 riu_rwnxagclnathrset_0_ref_0_lna_1_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_0_ref_0_lna_1_thrset_0_db_setf(struct cl_chip *chip, u8 lna1thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna1thrset0db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna1thrset0db << 8));
}

static inline u8 riu_rwnxagclnathrset_0_ref_0_lna_0_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_0_ref_0_lna_0_thrset_0_db_setf(struct cl_chip *chip, u8 lna0thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna0thrset0db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_0_ADDR) & ~((u32)0x000000FF)) | ((u32)lna0thrset0db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_0_REF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA7_THRSET0_DB           0x3a
 *    23:16 LNA6_THRSET0_DB           0x3a
 *    15:08 LNA5_THRSET0_DB           0x3A
 *    07:00 LNA4_THRSET0_DB           0x2F
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000318)
#define RIU_RWNXAGCLNATHRSET_0_REF_1_OFFSET      0x00000318
#define RIU_RWNXAGCLNATHRSET_0_REF_1_INDEX       0x000000C6
#define RIU_RWNXAGCLNATHRSET_0_REF_1_RESET       0x3A3A3A2F

static inline u32 riu_rwnxagclnathrset_0_ref_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR);
}

static inline void riu_rwnxagclnathrset_0_ref_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_0_REF_1_LNA_7_THRSET_0_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_0_REF_1_LNA_7_THRSET_0_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_0_REF_1_LNA_7_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_0_REF_1_LNA_6_THRSET_0_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_0_REF_1_LNA_6_THRSET_0_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_0_REF_1_LNA_6_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_0_REF_1_LNA_5_THRSET_0_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_0_REF_1_LNA_5_THRSET_0_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_0_REF_1_LNA_5_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_0_REF_1_LNA_4_THRSET_0_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_0_REF_1_LNA_4_THRSET_0_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_0_REF_1_LNA_4_THRSET_0_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_0_REF_1_LNA_7_THRSET_0_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_0_REF_1_LNA_6_THRSET_0_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_0_REF_1_LNA_5_THRSET_0_DB_RST    0x3A
#define RIU_RWNXAGCLNATHRSET_0_REF_1_LNA_4_THRSET_0_DB_RST    0x2F

static inline void riu_rwnxagclnathrset_0_ref_1_pack(struct cl_chip *chip, u8 lna7_thrset0_db, u8 lna6_thrset0_db, u8 lna5_thrset0_db, u8 lna4_thrset0_db)
{
	ASSERT_ERR_CHIP((((u32)lna7_thrset0_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna6_thrset0_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna5_thrset0_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna4_thrset0_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR, ((u32)lna7_thrset0_db << 24) | ((u32)lna6_thrset0_db << 16) | ((u32)lna5_thrset0_db << 8) | ((u32)lna4_thrset0_db << 0));
}

static inline void riu_rwnxagclnathrset_0_ref_1_unpack(struct cl_chip *chip, u8 *lna7_thrset0_db, u8 *lna6_thrset0_db, u8 *lna5_thrset0_db, u8 *lna4_thrset0_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR);

	*lna7_thrset0_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna6_thrset0_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna5_thrset0_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna4_thrset0_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_0_ref_1_lna_7_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_0_ref_1_lna_7_thrset_0_db_setf(struct cl_chip *chip, u8 lna7thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna7thrset0db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR) & ~((u32)0xFF000000)) | ((u32)lna7thrset0db << 24));
}

static inline u8 riu_rwnxagclnathrset_0_ref_1_lna_6_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_0_ref_1_lna_6_thrset_0_db_setf(struct cl_chip *chip, u8 lna6thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna6thrset0db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna6thrset0db << 16));
}

static inline u8 riu_rwnxagclnathrset_0_ref_1_lna_5_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_0_ref_1_lna_5_thrset_0_db_setf(struct cl_chip *chip, u8 lna5thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna5thrset0db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna5thrset0db << 8));
}

static inline u8 riu_rwnxagclnathrset_0_ref_1_lna_4_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_0_ref_1_lna_4_thrset_0_db_setf(struct cl_chip *chip, u8 lna4thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna4thrset0db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_0_REF_1_ADDR) & ~((u32)0x000000FF)) | ((u32)lna4thrset0db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_1_REF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA3_THRSET1_DB           0x31
 *    23:16 LNA2_THRSET1_DB           0x2B
 *    15:08 LNA1_THRSET1_DB           0x1C
 *    07:00 LNA0_THRSET1_DB           0x11
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR        (REG_RIU_BASE_ADDR + 0x0000031C)
#define RIU_RWNXAGCLNATHRSET_1_REF_0_OFFSET      0x0000031C
#define RIU_RWNXAGCLNATHRSET_1_REF_0_INDEX       0x000000C7
#define RIU_RWNXAGCLNATHRSET_1_REF_0_RESET       0x312B1C11

static inline u32 riu_rwnxagclnathrset_1_ref_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR);
}

static inline void riu_rwnxagclnathrset_1_ref_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_1_REF_0_LNA_3_THRSET_1_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_1_REF_0_LNA_3_THRSET_1_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_1_REF_0_LNA_3_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_1_REF_0_LNA_2_THRSET_1_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_1_REF_0_LNA_2_THRSET_1_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_1_REF_0_LNA_2_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_1_REF_0_LNA_1_THRSET_1_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_1_REF_0_LNA_1_THRSET_1_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_1_REF_0_LNA_1_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_1_REF_0_LNA_0_THRSET_1_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_1_REF_0_LNA_0_THRSET_1_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_1_REF_0_LNA_0_THRSET_1_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_1_REF_0_LNA_3_THRSET_1_DB_RST    0x31
#define RIU_RWNXAGCLNATHRSET_1_REF_0_LNA_2_THRSET_1_DB_RST    0x2B
#define RIU_RWNXAGCLNATHRSET_1_REF_0_LNA_1_THRSET_1_DB_RST    0x1C
#define RIU_RWNXAGCLNATHRSET_1_REF_0_LNA_0_THRSET_1_DB_RST    0x11

static inline void riu_rwnxagclnathrset_1_ref_0_pack(struct cl_chip *chip, u8 lna3_thrset1_db, u8 lna2_thrset1_db, u8 lna1_thrset1_db, u8 lna0_thrset1_db)
{
	ASSERT_ERR_CHIP((((u32)lna3_thrset1_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna2_thrset1_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna1_thrset1_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna0_thrset1_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR, ((u32)lna3_thrset1_db << 24) | ((u32)lna2_thrset1_db << 16) | ((u32)lna1_thrset1_db << 8) | ((u32)lna0_thrset1_db << 0));
}

static inline void riu_rwnxagclnathrset_1_ref_0_unpack(struct cl_chip *chip, u8 *lna3_thrset1_db, u8 *lna2_thrset1_db, u8 *lna1_thrset1_db, u8 *lna0_thrset1_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR);

	*lna3_thrset1_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna2_thrset1_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna1_thrset1_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna0_thrset1_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_1_ref_0_lna_3_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_1_ref_0_lna_3_thrset_1_db_setf(struct cl_chip *chip, u8 lna3thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna3thrset1db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR) & ~((u32)0xFF000000)) | ((u32)lna3thrset1db << 24));
}

static inline u8 riu_rwnxagclnathrset_1_ref_0_lna_2_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_1_ref_0_lna_2_thrset_1_db_setf(struct cl_chip *chip, u8 lna2thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna2thrset1db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna2thrset1db << 16));
}

static inline u8 riu_rwnxagclnathrset_1_ref_0_lna_1_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_1_ref_0_lna_1_thrset_1_db_setf(struct cl_chip *chip, u8 lna1thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna1thrset1db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna1thrset1db << 8));
}

static inline u8 riu_rwnxagclnathrset_1_ref_0_lna_0_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_1_ref_0_lna_0_thrset_1_db_setf(struct cl_chip *chip, u8 lna0thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna0thrset1db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_0_ADDR) & ~((u32)0x000000FF)) | ((u32)lna0thrset1db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_1_REF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA7_THRSET1_DB           0x4b
 *    23:16 LNA6_THRSET1_DB           0x4b
 *    15:08 LNA5_THRSET1_DB           0x4B
 *    07:00 LNA4_THRSET1_DB           0x46
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000320)
#define RIU_RWNXAGCLNATHRSET_1_REF_1_OFFSET      0x00000320
#define RIU_RWNXAGCLNATHRSET_1_REF_1_INDEX       0x000000C8
#define RIU_RWNXAGCLNATHRSET_1_REF_1_RESET       0x4B4B4B46

static inline u32 riu_rwnxagclnathrset_1_ref_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR);
}

static inline void riu_rwnxagclnathrset_1_ref_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_1_REF_1_LNA_7_THRSET_1_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_1_REF_1_LNA_7_THRSET_1_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_1_REF_1_LNA_7_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_1_REF_1_LNA_6_THRSET_1_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_1_REF_1_LNA_6_THRSET_1_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_1_REF_1_LNA_6_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_1_REF_1_LNA_5_THRSET_1_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_1_REF_1_LNA_5_THRSET_1_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_1_REF_1_LNA_5_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_1_REF_1_LNA_4_THRSET_1_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_1_REF_1_LNA_4_THRSET_1_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_1_REF_1_LNA_4_THRSET_1_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_1_REF_1_LNA_7_THRSET_1_DB_RST    0x4b
#define RIU_RWNXAGCLNATHRSET_1_REF_1_LNA_6_THRSET_1_DB_RST    0x4b
#define RIU_RWNXAGCLNATHRSET_1_REF_1_LNA_5_THRSET_1_DB_RST    0x4B
#define RIU_RWNXAGCLNATHRSET_1_REF_1_LNA_4_THRSET_1_DB_RST    0x46

static inline void riu_rwnxagclnathrset_1_ref_1_pack(struct cl_chip *chip, u8 lna7_thrset1_db, u8 lna6_thrset1_db, u8 lna5_thrset1_db, u8 lna4_thrset1_db)
{
	ASSERT_ERR_CHIP((((u32)lna7_thrset1_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna6_thrset1_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna5_thrset1_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna4_thrset1_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR, ((u32)lna7_thrset1_db << 24) | ((u32)lna6_thrset1_db << 16) | ((u32)lna5_thrset1_db << 8) | ((u32)lna4_thrset1_db << 0));
}

static inline void riu_rwnxagclnathrset_1_ref_1_unpack(struct cl_chip *chip, u8 *lna7_thrset1_db, u8 *lna6_thrset1_db, u8 *lna5_thrset1_db, u8 *lna4_thrset1_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR);

	*lna7_thrset1_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna6_thrset1_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna5_thrset1_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna4_thrset1_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_1_ref_1_lna_7_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_1_ref_1_lna_7_thrset_1_db_setf(struct cl_chip *chip, u8 lna7thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna7thrset1db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR) & ~((u32)0xFF000000)) | ((u32)lna7thrset1db << 24));
}

static inline u8 riu_rwnxagclnathrset_1_ref_1_lna_6_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_1_ref_1_lna_6_thrset_1_db_setf(struct cl_chip *chip, u8 lna6thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna6thrset1db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna6thrset1db << 16));
}

static inline u8 riu_rwnxagclnathrset_1_ref_1_lna_5_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_1_ref_1_lna_5_thrset_1_db_setf(struct cl_chip *chip, u8 lna5thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna5thrset1db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna5thrset1db << 8));
}

static inline u8 riu_rwnxagclnathrset_1_ref_1_lna_4_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_1_ref_1_lna_4_thrset_1_db_setf(struct cl_chip *chip, u8 lna4thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna4thrset1db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_1_REF_1_ADDR) & ~((u32)0x000000FF)) | ((u32)lna4thrset1db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_2_REF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA3_THRSET2_DB           0x5F
 *    23:16 LNA2_THRSET2_DB           0x41
 *    15:08 LNA1_THRSET2_DB           0x2D
 *    07:00 LNA0_THRSET2_DB           0x11
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000324)
#define RIU_RWNXAGCLNATHRSET_2_REF_0_OFFSET      0x00000324
#define RIU_RWNXAGCLNATHRSET_2_REF_0_INDEX       0x000000C9
#define RIU_RWNXAGCLNATHRSET_2_REF_0_RESET       0x5F412D11

static inline u32 riu_rwnxagclnathrset_2_ref_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR);
}

static inline void riu_rwnxagclnathrset_2_ref_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_2_REF_0_LNA_3_THRSET_2_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_2_REF_0_LNA_3_THRSET_2_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_2_REF_0_LNA_3_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_2_REF_0_LNA_2_THRSET_2_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_2_REF_0_LNA_2_THRSET_2_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_2_REF_0_LNA_2_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_2_REF_0_LNA_1_THRSET_2_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_2_REF_0_LNA_1_THRSET_2_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_2_REF_0_LNA_1_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_2_REF_0_LNA_0_THRSET_2_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_2_REF_0_LNA_0_THRSET_2_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_2_REF_0_LNA_0_THRSET_2_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_2_REF_0_LNA_3_THRSET_2_DB_RST    0x5F
#define RIU_RWNXAGCLNATHRSET_2_REF_0_LNA_2_THRSET_2_DB_RST    0x41
#define RIU_RWNXAGCLNATHRSET_2_REF_0_LNA_1_THRSET_2_DB_RST    0x2D
#define RIU_RWNXAGCLNATHRSET_2_REF_0_LNA_0_THRSET_2_DB_RST    0x11

static inline void riu_rwnxagclnathrset_2_ref_0_pack(struct cl_chip *chip, u8 lna3_thrset2_db, u8 lna2_thrset2_db, u8 lna1_thrset2_db, u8 lna0_thrset2_db)
{
	ASSERT_ERR_CHIP((((u32)lna3_thrset2_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna2_thrset2_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna1_thrset2_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna0_thrset2_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR, ((u32)lna3_thrset2_db << 24) | ((u32)lna2_thrset2_db << 16) | ((u32)lna1_thrset2_db << 8) | ((u32)lna0_thrset2_db << 0));
}

static inline void riu_rwnxagclnathrset_2_ref_0_unpack(struct cl_chip *chip, u8 *lna3_thrset2_db, u8 *lna2_thrset2_db, u8 *lna1_thrset2_db, u8 *lna0_thrset2_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR);

	*lna3_thrset2_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna2_thrset2_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna1_thrset2_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna0_thrset2_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_2_ref_0_lna_3_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_2_ref_0_lna_3_thrset_2_db_setf(struct cl_chip *chip, u8 lna3thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna3thrset2db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR) & ~((u32)0xFF000000)) | ((u32)lna3thrset2db << 24));
}

static inline u8 riu_rwnxagclnathrset_2_ref_0_lna_2_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_2_ref_0_lna_2_thrset_2_db_setf(struct cl_chip *chip, u8 lna2thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna2thrset2db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna2thrset2db << 16));
}

static inline u8 riu_rwnxagclnathrset_2_ref_0_lna_1_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_2_ref_0_lna_1_thrset_2_db_setf(struct cl_chip *chip, u8 lna1thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna1thrset2db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna1thrset2db << 8));
}

static inline u8 riu_rwnxagclnathrset_2_ref_0_lna_0_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_2_ref_0_lna_0_thrset_2_db_setf(struct cl_chip *chip, u8 lna0thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna0thrset2db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_0_ADDR) & ~((u32)0x000000FF)) | ((u32)lna0thrset2db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_2_REF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA7_THRSET2_DB           0x5f
 *    23:16 LNA6_THRSET2_DB           0x5f
 *    15:08 LNA5_THRSET2_DB           0x5F
 *    07:00 LNA4_THRSET2_DB           0x5F
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000328)
#define RIU_RWNXAGCLNATHRSET_2_REF_1_OFFSET      0x00000328
#define RIU_RWNXAGCLNATHRSET_2_REF_1_INDEX       0x000000CA
#define RIU_RWNXAGCLNATHRSET_2_REF_1_RESET       0x5F5F5F5F

static inline u32 riu_rwnxagclnathrset_2_ref_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR);
}

static inline void riu_rwnxagclnathrset_2_ref_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_2_REF_1_LNA_7_THRSET_2_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_2_REF_1_LNA_7_THRSET_2_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_2_REF_1_LNA_7_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_2_REF_1_LNA_6_THRSET_2_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_2_REF_1_LNA_6_THRSET_2_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_2_REF_1_LNA_6_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_2_REF_1_LNA_5_THRSET_2_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_2_REF_1_LNA_5_THRSET_2_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_2_REF_1_LNA_5_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_2_REF_1_LNA_4_THRSET_2_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_2_REF_1_LNA_4_THRSET_2_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_2_REF_1_LNA_4_THRSET_2_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_2_REF_1_LNA_7_THRSET_2_DB_RST    0x5f
#define RIU_RWNXAGCLNATHRSET_2_REF_1_LNA_6_THRSET_2_DB_RST    0x5f
#define RIU_RWNXAGCLNATHRSET_2_REF_1_LNA_5_THRSET_2_DB_RST    0x5F
#define RIU_RWNXAGCLNATHRSET_2_REF_1_LNA_4_THRSET_2_DB_RST    0x5F

static inline void riu_rwnxagclnathrset_2_ref_1_pack(struct cl_chip *chip, u8 lna7_thrset2_db, u8 lna6_thrset2_db, u8 lna5_thrset2_db, u8 lna4_thrset2_db)
{
	ASSERT_ERR_CHIP((((u32)lna7_thrset2_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna6_thrset2_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna5_thrset2_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna4_thrset2_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR, ((u32)lna7_thrset2_db << 24) | ((u32)lna6_thrset2_db << 16) | ((u32)lna5_thrset2_db << 8) | ((u32)lna4_thrset2_db << 0));
}

static inline void riu_rwnxagclnathrset_2_ref_1_unpack(struct cl_chip *chip, u8 *lna7_thrset2_db, u8 *lna6_thrset2_db, u8 *lna5_thrset2_db, u8 *lna4_thrset2_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR);

	*lna7_thrset2_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna6_thrset2_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna5_thrset2_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna4_thrset2_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_2_ref_1_lna_7_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_2_ref_1_lna_7_thrset_2_db_setf(struct cl_chip *chip, u8 lna7thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna7thrset2db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR) & ~((u32)0xFF000000)) | ((u32)lna7thrset2db << 24));
}

static inline u8 riu_rwnxagclnathrset_2_ref_1_lna_6_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_2_ref_1_lna_6_thrset_2_db_setf(struct cl_chip *chip, u8 lna6thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna6thrset2db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna6thrset2db << 16));
}

static inline u8 riu_rwnxagclnathrset_2_ref_1_lna_5_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_2_ref_1_lna_5_thrset_2_db_setf(struct cl_chip *chip, u8 lna5thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna5thrset2db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna5thrset2db << 8));
}

static inline u8 riu_rwnxagclnathrset_2_ref_1_lna_4_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_2_ref_1_lna_4_thrset_2_db_setf(struct cl_chip *chip, u8 lna4thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna4thrset2db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_2_REF_1_ADDR) & ~((u32)0x000000FF)) | ((u32)lna4thrset2db << 0));
}

/**
 * @brief RWNXAGCLNANFSET_0_REF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA3_NFDB                 0x7
 *    22:16 LNA2_NFDB                 0xA
 *    14:08 LNA1_NFDB                 0x19
 *    06:00 LNA0_NFDB                 0x23
 * </pre>
 */
#define RIU_RWNXAGCLNANFSET_0_REF_0_ADDR        (REG_RIU_BASE_ADDR + 0x0000032C)
#define RIU_RWNXAGCLNANFSET_0_REF_0_OFFSET      0x0000032C
#define RIU_RWNXAGCLNANFSET_0_REF_0_INDEX       0x000000CB
#define RIU_RWNXAGCLNANFSET_0_REF_0_RESET       0x070A1923

static inline u32 riu_rwnxagclnanfset_0_ref_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_0_ADDR);
}

static inline void riu_rwnxagclnanfset_0_ref_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNANFSET_0_REF_0_LNA_3_NFDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNANFSET_0_REF_0_LNA_3_NFDB_LSB    24
#define RIU_RWNXAGCLNANFSET_0_REF_0_LNA_3_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_0_REF_0_LNA_2_NFDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNANFSET_0_REF_0_LNA_2_NFDB_LSB    16
#define RIU_RWNXAGCLNANFSET_0_REF_0_LNA_2_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_0_REF_0_LNA_1_NFDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNANFSET_0_REF_0_LNA_1_NFDB_LSB    8
#define RIU_RWNXAGCLNANFSET_0_REF_0_LNA_1_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_0_REF_0_LNA_0_NFDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNANFSET_0_REF_0_LNA_0_NFDB_LSB    0
#define RIU_RWNXAGCLNANFSET_0_REF_0_LNA_0_NFDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNANFSET_0_REF_0_LNA_3_NFDB_RST    0x7
#define RIU_RWNXAGCLNANFSET_0_REF_0_LNA_2_NFDB_RST    0xA
#define RIU_RWNXAGCLNANFSET_0_REF_0_LNA_1_NFDB_RST    0x19
#define RIU_RWNXAGCLNANFSET_0_REF_0_LNA_0_NFDB_RST    0x23

static inline void riu_rwnxagclnanfset_0_ref_0_pack(struct cl_chip *chip, u8 lna3_nfdb, u8 lna2_nfdb, u8 lna1_nfdb, u8 lna0_nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna3_nfdb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna2_nfdb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna1_nfdb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna0_nfdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_0_ADDR, ((u32)lna3_nfdb << 24) | ((u32)lna2_nfdb << 16) | ((u32)lna1_nfdb << 8) | ((u32)lna0_nfdb << 0));
}

static inline void riu_rwnxagclnanfset_0_ref_0_unpack(struct cl_chip *chip, u8 *lna3_nfdb, u8 *lna2_nfdb, u8 *lna1_nfdb, u8 *lna0_nfdb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_0_ADDR);

	*lna3_nfdb = (local_val & ((u32)0x7F000000)) >> 24;
	*lna2_nfdb = (local_val & ((u32)0x007F0000)) >> 16;
	*lna1_nfdb = (local_val & ((u32)0x00007F00)) >> 8;
	*lna0_nfdb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnanfset_0_ref_0_lna_3_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnanfset_0_ref_0_lna_3_nfdb_setf(struct cl_chip *chip, u8 lna3nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna3nfdb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_0_ADDR) & ~((u32)0x7F000000)) | ((u32)lna3nfdb << 24));
}

static inline u8 riu_rwnxagclnanfset_0_ref_0_lna_2_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnanfset_0_ref_0_lna_2_nfdb_setf(struct cl_chip *chip, u8 lna2nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna2nfdb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_0_ADDR) & ~((u32)0x007F0000)) | ((u32)lna2nfdb << 16));
}

static inline u8 riu_rwnxagclnanfset_0_ref_0_lna_1_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnanfset_0_ref_0_lna_1_nfdb_setf(struct cl_chip *chip, u8 lna1nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna1nfdb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_0_ADDR) & ~((u32)0x00007F00)) | ((u32)lna1nfdb << 8));
}

static inline u8 riu_rwnxagclnanfset_0_ref_0_lna_0_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnanfset_0_ref_0_lna_0_nfdb_setf(struct cl_chip *chip, u8 lna0nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna0nfdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_0_ADDR) & ~((u32)0x0000007F)) | ((u32)lna0nfdb << 0));
}

/**
 * @brief RWNXAGCLNANFSET_0_REF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA7_NFDB                 0x2
 *    22:16 LNA6_NFDB                 0x2
 *    14:08 LNA5_NFDB                 0x2
 *    06:00 LNA4_NFDB                 0x3
 * </pre>
 */
#define RIU_RWNXAGCLNANFSET_0_REF_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000330)
#define RIU_RWNXAGCLNANFSET_0_REF_1_OFFSET      0x00000330
#define RIU_RWNXAGCLNANFSET_0_REF_1_INDEX       0x000000CC
#define RIU_RWNXAGCLNANFSET_0_REF_1_RESET       0x02020203

static inline u32 riu_rwnxagclnanfset_0_ref_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_1_ADDR);
}

static inline void riu_rwnxagclnanfset_0_ref_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNANFSET_0_REF_1_LNA_7_NFDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNANFSET_0_REF_1_LNA_7_NFDB_LSB    24
#define RIU_RWNXAGCLNANFSET_0_REF_1_LNA_7_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_0_REF_1_LNA_6_NFDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNANFSET_0_REF_1_LNA_6_NFDB_LSB    16
#define RIU_RWNXAGCLNANFSET_0_REF_1_LNA_6_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_0_REF_1_LNA_5_NFDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNANFSET_0_REF_1_LNA_5_NFDB_LSB    8
#define RIU_RWNXAGCLNANFSET_0_REF_1_LNA_5_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_0_REF_1_LNA_4_NFDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNANFSET_0_REF_1_LNA_4_NFDB_LSB    0
#define RIU_RWNXAGCLNANFSET_0_REF_1_LNA_4_NFDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNANFSET_0_REF_1_LNA_7_NFDB_RST    0x2
#define RIU_RWNXAGCLNANFSET_0_REF_1_LNA_6_NFDB_RST    0x2
#define RIU_RWNXAGCLNANFSET_0_REF_1_LNA_5_NFDB_RST    0x2
#define RIU_RWNXAGCLNANFSET_0_REF_1_LNA_4_NFDB_RST    0x3

static inline void riu_rwnxagclnanfset_0_ref_1_pack(struct cl_chip *chip, u8 lna7_nfdb, u8 lna6_nfdb, u8 lna5_nfdb, u8 lna4_nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna7_nfdb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna6_nfdb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna5_nfdb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna4_nfdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_1_ADDR, ((u32)lna7_nfdb << 24) | ((u32)lna6_nfdb << 16) | ((u32)lna5_nfdb << 8) | ((u32)lna4_nfdb << 0));
}

static inline void riu_rwnxagclnanfset_0_ref_1_unpack(struct cl_chip *chip, u8 *lna7_nfdb, u8 *lna6_nfdb, u8 *lna5_nfdb, u8 *lna4_nfdb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_1_ADDR);

	*lna7_nfdb = (local_val & ((u32)0x7F000000)) >> 24;
	*lna6_nfdb = (local_val & ((u32)0x007F0000)) >> 16;
	*lna5_nfdb = (local_val & ((u32)0x00007F00)) >> 8;
	*lna4_nfdb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnanfset_0_ref_1_lna_7_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnanfset_0_ref_1_lna_7_nfdb_setf(struct cl_chip *chip, u8 lna7nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna7nfdb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_1_ADDR) & ~((u32)0x7F000000)) | ((u32)lna7nfdb << 24));
}

static inline u8 riu_rwnxagclnanfset_0_ref_1_lna_6_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnanfset_0_ref_1_lna_6_nfdb_setf(struct cl_chip *chip, u8 lna6nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna6nfdb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_1_ADDR) & ~((u32)0x007F0000)) | ((u32)lna6nfdb << 16));
}

static inline u8 riu_rwnxagclnanfset_0_ref_1_lna_5_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnanfset_0_ref_1_lna_5_nfdb_setf(struct cl_chip *chip, u8 lna5nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna5nfdb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_1_ADDR) & ~((u32)0x00007F00)) | ((u32)lna5nfdb << 8));
}

static inline u8 riu_rwnxagclnanfset_0_ref_1_lna_4_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnanfset_0_ref_1_lna_4_nfdb_setf(struct cl_chip *chip, u8 lna4nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna4nfdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_0_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_0_REF_1_ADDR) & ~((u32)0x0000007F)) | ((u32)lna4nfdb << 0));
}

/**
 * @brief RWNXAGCLNAICP_1_SET_0_REF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA3_ICP1_DB              0x64
 *    22:16 LNA2_ICP1_DB              0x73
 *    14:08 LNA1_ICP1_DB              0x7E
 *    06:00 LNA0_ICP1_DB              0x5
 * </pre>
 */
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000334)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_OFFSET      0x00000334
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_INDEX       0x000000CD
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_RESET       0x64737E05

static inline u32 riu_rwnxagclnaicp_1_set_0_ref_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_LNA_3_ICP_1_DB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_LNA_3_ICP_1_DB_LSB    24
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_LNA_3_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_LNA_2_ICP_1_DB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_LNA_2_ICP_1_DB_LSB    16
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_LNA_2_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_LNA_1_ICP_1_DB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_LNA_1_ICP_1_DB_LSB    8
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_LNA_1_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_LNA_0_ICP_1_DB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_LNA_0_ICP_1_DB_LSB    0
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_LNA_0_ICP_1_DB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_LNA_3_ICP_1_DB_RST    0x64
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_LNA_2_ICP_1_DB_RST    0x73
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_LNA_1_ICP_1_DB_RST    0x7E
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_0_LNA_0_ICP_1_DB_RST    0x5

static inline void riu_rwnxagclnaicp_1_set_0_ref_0_pack(struct cl_chip *chip, u8 lna3_icp1_db, u8 lna2_icp1_db, u8 lna1_icp1_db, u8 lna0_icp1_db)
{
	ASSERT_ERR_CHIP((((u32)lna3_icp1_db << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna2_icp1_db << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna1_icp1_db << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna0_icp1_db << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR, ((u32)lna3_icp1_db << 24) | ((u32)lna2_icp1_db << 16) | ((u32)lna1_icp1_db << 8) | ((u32)lna0_icp1_db << 0));
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_0_unpack(struct cl_chip *chip, u8 *lna3_icp1_db, u8 *lna2_icp1_db, u8 *lna1_icp1_db, u8 *lna0_icp1_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR);

	*lna3_icp1_db = (local_val & ((u32)0x7F000000)) >> 24;
	*lna2_icp1_db = (local_val & ((u32)0x007F0000)) >> 16;
	*lna1_icp1_db = (local_val & ((u32)0x00007F00)) >> 8;
	*lna0_icp1_db = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnaicp_1_set_0_ref_0_lna_3_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_0_lna_3_icp_1_db_setf(struct cl_chip *chip, u8 lna3icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna3icp1db << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR) & ~((u32)0x7F000000)) | ((u32)lna3icp1db << 24));
}

static inline u8 riu_rwnxagclnaicp_1_set_0_ref_0_lna_2_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_0_lna_2_icp_1_db_setf(struct cl_chip *chip, u8 lna2icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna2icp1db << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR) & ~((u32)0x007F0000)) | ((u32)lna2icp1db << 16));
}

static inline u8 riu_rwnxagclnaicp_1_set_0_ref_0_lna_1_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_0_lna_1_icp_1_db_setf(struct cl_chip *chip, u8 lna1icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna1icp1db << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR) & ~((u32)0x00007F00)) | ((u32)lna1icp1db << 8));
}

static inline u8 riu_rwnxagclnaicp_1_set_0_ref_0_lna_0_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_0_lna_0_icp_1_db_setf(struct cl_chip *chip, u8 lna0icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna0icp1db << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_0_ADDR) & ~((u32)0x0000007F)) | ((u32)lna0icp1db << 0));
}

/**
 * @brief RWNXAGCLNAICP_1_SET_0_REF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA7_ICP1_DB              0x56
 *    22:16 LNA6_ICP1_DB              0x56
 *    14:08 LNA5_ICP1_DB              0x5B
 *    06:00 LNA4_ICP1_DB              0x5E
 * </pre>
 */
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000338)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_OFFSET      0x00000338
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_INDEX       0x000000CE
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_RESET       0x56565B5E

static inline u32 riu_rwnxagclnaicp_1_set_0_ref_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_LNA_7_ICP_1_DB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_LNA_7_ICP_1_DB_LSB    24
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_LNA_7_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_LNA_6_ICP_1_DB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_LNA_6_ICP_1_DB_LSB    16
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_LNA_6_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_LNA_5_ICP_1_DB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_LNA_5_ICP_1_DB_LSB    8
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_LNA_5_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_LNA_4_ICP_1_DB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_LNA_4_ICP_1_DB_LSB    0
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_LNA_4_ICP_1_DB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_LNA_7_ICP_1_DB_RST    0x56
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_LNA_6_ICP_1_DB_RST    0x56
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_LNA_5_ICP_1_DB_RST    0x5B
#define RIU_RWNXAGCLNAICP_1_SET_0_REF_1_LNA_4_ICP_1_DB_RST    0x5E

static inline void riu_rwnxagclnaicp_1_set_0_ref_1_pack(struct cl_chip *chip, u8 lna7_icp1_db, u8 lna6_icp1_db, u8 lna5_icp1_db, u8 lna4_icp1_db)
{
	ASSERT_ERR_CHIP((((u32)lna7_icp1_db << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna6_icp1_db << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna5_icp1_db << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna4_icp1_db << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR, ((u32)lna7_icp1_db << 24) | ((u32)lna6_icp1_db << 16) | ((u32)lna5_icp1_db << 8) | ((u32)lna4_icp1_db << 0));
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_1_unpack(struct cl_chip *chip, u8 *lna7_icp1_db, u8 *lna6_icp1_db, u8 *lna5_icp1_db, u8 *lna4_icp1_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR);

	*lna7_icp1_db = (local_val & ((u32)0x7F000000)) >> 24;
	*lna6_icp1_db = (local_val & ((u32)0x007F0000)) >> 16;
	*lna5_icp1_db = (local_val & ((u32)0x00007F00)) >> 8;
	*lna4_icp1_db = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnaicp_1_set_0_ref_1_lna_7_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_1_lna_7_icp_1_db_setf(struct cl_chip *chip, u8 lna7icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna7icp1db << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR) & ~((u32)0x7F000000)) | ((u32)lna7icp1db << 24));
}

static inline u8 riu_rwnxagclnaicp_1_set_0_ref_1_lna_6_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_1_lna_6_icp_1_db_setf(struct cl_chip *chip, u8 lna6icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna6icp1db << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR) & ~((u32)0x007F0000)) | ((u32)lna6icp1db << 16));
}

static inline u8 riu_rwnxagclnaicp_1_set_0_ref_1_lna_5_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_1_lna_5_icp_1_db_setf(struct cl_chip *chip, u8 lna5icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna5icp1db << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR) & ~((u32)0x00007F00)) | ((u32)lna5icp1db << 8));
}

static inline u8 riu_rwnxagclnaicp_1_set_0_ref_1_lna_4_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnaicp_1_set_0_ref_1_lna_4_icp_1_db_setf(struct cl_chip *chip, u8 lna4icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna4icp1db << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_0_REF_1_ADDR) & ~((u32)0x0000007F)) | ((u32)lna4icp1db << 0));
}

/**
 * @brief RWNXAGCLNAGAPSET_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SDRx2                     0
 *    30:28 LNA3_MAX                  0x7
 *    22:16 SNRGAPDB                  0x7D
 *    06:00 SDRGAPDB                  0x2
 * </pre>
 */
#define RIU_RWNXAGCLNAGAPSET_0_ADDR        (REG_RIU_BASE_ADDR + 0x0000033C)
#define RIU_RWNXAGCLNAGAPSET_0_OFFSET      0x0000033C
#define RIU_RWNXAGCLNAGAPSET_0_INDEX       0x000000CF
#define RIU_RWNXAGCLNAGAPSET_0_RESET       0x707D0002

static inline u32 riu_rwnxagclnagapset_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_0_ADDR);
}

static inline void riu_rwnxagclnagapset_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAGAPSET_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAGAPSET_0_SDRX_2_BIT    ((u32)0x80000000)
#define RIU_RWNXAGCLNAGAPSET_0_SDRX_2_POS    31
#define RIU_RWNXAGCLNAGAPSET_0_LNA_3_MAX_MASK    ((u32)0x70000000)
#define RIU_RWNXAGCLNAGAPSET_0_LNA_3_MAX_LSB    28
#define RIU_RWNXAGCLNAGAPSET_0_LNA_3_MAX_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCLNAGAPSET_0_SNRGAPDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAGAPSET_0_SNRGAPDB_LSB    16
#define RIU_RWNXAGCLNAGAPSET_0_SNRGAPDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAPSET_0_SDRGAPDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAGAPSET_0_SDRGAPDB_LSB    0
#define RIU_RWNXAGCLNAGAPSET_0_SDRGAPDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAGAPSET_0_SDRX_2_RST    0x0
#define RIU_RWNXAGCLNAGAPSET_0_LNA_3_MAX_RST    0x7
#define RIU_RWNXAGCLNAGAPSET_0_SNRGAPDB_RST    0x7D
#define RIU_RWNXAGCLNAGAPSET_0_SDRGAPDB_RST    0x2

static inline void riu_rwnxagclnagapset_0_pack(struct cl_chip *chip, u8 sdrx2, u8 lna3_max, u8 snrgapdb, u8 sdrgapdb)
{
	ASSERT_ERR_CHIP((((u32)sdrx2 << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna3_max << 28) & ~((u32)0x70000000)) == 0);
	ASSERT_ERR_CHIP((((u32)snrgapdb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)sdrgapdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAPSET_0_ADDR, ((u32)sdrx2 << 31) | ((u32)lna3_max << 28) | ((u32)snrgapdb << 16) | ((u32)sdrgapdb << 0));
}

static inline void riu_rwnxagclnagapset_0_unpack(struct cl_chip *chip, u8 *sdrx2, u8 *lna3_max, u8 *snrgapdb, u8 *sdrgapdb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_0_ADDR);

	*sdrx2 = (local_val & ((u32)0x80000000)) >> 31;
	*lna3_max = (local_val & ((u32)0x70000000)) >> 28;
	*snrgapdb = (local_val & ((u32)0x007F0000)) >> 16;
	*sdrgapdb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnagapset_0_sdrx_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_0_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_rwnxagclnagapset_0_sdrx_2_setf(struct cl_chip *chip, u8 sdrx2)
{
	ASSERT_ERR_CHIP((((u32)sdrx2 << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAPSET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_0_ADDR) & ~((u32)0x80000000)) | ((u32)sdrx2 << 31));
}

static inline u8 riu_rwnxagclnagapset_0_lna_3_max_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_0_ADDR);

	return (u8)((local_val & ((u32)0x70000000)) >> 28);
}

static inline void riu_rwnxagclnagapset_0_lna_3_max_setf(struct cl_chip *chip, u8 lna3max)
{
	ASSERT_ERR_CHIP((((u32)lna3max << 28) & ~((u32)0x70000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAPSET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_0_ADDR) & ~((u32)0x70000000)) | ((u32)lna3max << 28));
}

static inline u8 riu_rwnxagclnagapset_0_snrgapdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_0_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnagapset_0_snrgapdb_setf(struct cl_chip *chip, u8 snrgapdb)
{
	ASSERT_ERR_CHIP((((u32)snrgapdb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAPSET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_0_ADDR) & ~((u32)0x007F0000)) | ((u32)snrgapdb << 16));
}

static inline u8 riu_rwnxagclnagapset_0_sdrgapdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_0_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnagapset_0_sdrgapdb_setf(struct cl_chip *chip, u8 sdrgapdb)
{
	ASSERT_ERR_CHIP((((u32)sdrgapdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAPSET_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_0_ADDR) & ~((u32)0x0000007F)) | ((u32)sdrgapdb << 0));
}

/**
 * @brief RWNXAGCACI_20_MARG_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 ACI20_MARGMCS3            0x2
 *    21:16 ACI20_MARGMCS2            0x4
 *    13:08 ACI20_MARGMCS1            0x5
 *    05:00 ACI20_MARGMCS0            0x7
 * </pre>
 */
#define RIU_RWNXAGCACI_20_MARG_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000340)
#define RIU_RWNXAGCACI_20_MARG_0_OFFSET      0x00000340
#define RIU_RWNXAGCACI_20_MARG_0_INDEX       0x000000D0
#define RIU_RWNXAGCACI_20_MARG_0_RESET       0x02040507

static inline u32 riu_rwnxagcaci_20_marg_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_0_ADDR);
}

static inline void riu_rwnxagcaci_20_marg_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCACI_20_MARG_0_ACI_20_MARGMCS_3_MASK    ((u32)0x3F000000)
#define RIU_RWNXAGCACI_20_MARG_0_ACI_20_MARGMCS_3_LSB    24
#define RIU_RWNXAGCACI_20_MARG_0_ACI_20_MARGMCS_3_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_20_MARG_0_ACI_20_MARGMCS_2_MASK    ((u32)0x003F0000)
#define RIU_RWNXAGCACI_20_MARG_0_ACI_20_MARGMCS_2_LSB    16
#define RIU_RWNXAGCACI_20_MARG_0_ACI_20_MARGMCS_2_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_20_MARG_0_ACI_20_MARGMCS_1_MASK    ((u32)0x00003F00)
#define RIU_RWNXAGCACI_20_MARG_0_ACI_20_MARGMCS_1_LSB    8
#define RIU_RWNXAGCACI_20_MARG_0_ACI_20_MARGMCS_1_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_20_MARG_0_ACI_20_MARGMCS_0_MASK    ((u32)0x0000003F)
#define RIU_RWNXAGCACI_20_MARG_0_ACI_20_MARGMCS_0_LSB    0
#define RIU_RWNXAGCACI_20_MARG_0_ACI_20_MARGMCS_0_WIDTH    ((u32)0x00000006)

#define RIU_RWNXAGCACI_20_MARG_0_ACI_20_MARGMCS_3_RST    0x2
#define RIU_RWNXAGCACI_20_MARG_0_ACI_20_MARGMCS_2_RST    0x4
#define RIU_RWNXAGCACI_20_MARG_0_ACI_20_MARGMCS_1_RST    0x5
#define RIU_RWNXAGCACI_20_MARG_0_ACI_20_MARGMCS_0_RST    0x7

static inline void riu_rwnxagcaci_20_marg_0_pack(struct cl_chip *chip, u8 aci20_margmcs3, u8 aci20_margmcs2, u8 aci20_margmcs1, u8 aci20_margmcs0)
{
	ASSERT_ERR_CHIP((((u32)aci20_margmcs3 << 24) & ~((u32)0x3F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci20_margmcs2 << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci20_margmcs1 << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)aci20_margmcs0 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_0_ADDR, ((u32)aci20_margmcs3 << 24) | ((u32)aci20_margmcs2 << 16) | ((u32)aci20_margmcs1 << 8) | ((u32)aci20_margmcs0 << 0));
}

static inline void riu_rwnxagcaci_20_marg_0_unpack(struct cl_chip *chip, u8 *aci20_margmcs3, u8 *aci20_margmcs2, u8 *aci20_margmcs1, u8 *aci20_margmcs0)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_0_ADDR);

	*aci20_margmcs3 = (local_val & ((u32)0x3F000000)) >> 24;
	*aci20_margmcs2 = (local_val & ((u32)0x003F0000)) >> 16;
	*aci20_margmcs1 = (local_val & ((u32)0x00003F00)) >> 8;
	*aci20_margmcs0 = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxagcaci_20_marg_0_aci_20_margmcs_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_0_ADDR);

	return (u8)((local_val & ((u32)0x3F000000)) >> 24);
}

static inline void riu_rwnxagcaci_20_marg_0_aci_20_margmcs_3_setf(struct cl_chip *chip, u8 aci20margmcs3)
{
	ASSERT_ERR_CHIP((((u32)aci20margmcs3 << 24) & ~((u32)0x3F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_0_ADDR) & ~((u32)0x3F000000)) | ((u32)aci20margmcs3 << 24));
}

static inline u8 riu_rwnxagcaci_20_marg_0_aci_20_margmcs_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_0_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void riu_rwnxagcaci_20_marg_0_aci_20_margmcs_2_setf(struct cl_chip *chip, u8 aci20margmcs2)
{
	ASSERT_ERR_CHIP((((u32)aci20margmcs2 << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_0_ADDR) & ~((u32)0x003F0000)) | ((u32)aci20margmcs2 << 16));
}

static inline u8 riu_rwnxagcaci_20_marg_0_aci_20_margmcs_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_0_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_rwnxagcaci_20_marg_0_aci_20_margmcs_1_setf(struct cl_chip *chip, u8 aci20margmcs1)
{
	ASSERT_ERR_CHIP((((u32)aci20margmcs1 << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_0_ADDR) & ~((u32)0x00003F00)) | ((u32)aci20margmcs1 << 8));
}

static inline u8 riu_rwnxagcaci_20_marg_0_aci_20_margmcs_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_0_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxagcaci_20_marg_0_aci_20_margmcs_0_setf(struct cl_chip *chip, u8 aci20margmcs0)
{
	ASSERT_ERR_CHIP((((u32)aci20margmcs0 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_0_ADDR) & ~((u32)0x0000003F)) | ((u32)aci20margmcs0 << 0));
}

/**
 * @brief RWNXAGCACI_20_MARG_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 ACI20_MARGMCS7            0x0
 *    21:16 ACI20_MARGMCS6            0x0
 *    13:08 ACI20_MARGMCS5            0x0
 *    05:00 ACI20_MARGMCS4            0x1
 * </pre>
 */
#define RIU_RWNXAGCACI_20_MARG_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000344)
#define RIU_RWNXAGCACI_20_MARG_1_OFFSET      0x00000344
#define RIU_RWNXAGCACI_20_MARG_1_INDEX       0x000000D1
#define RIU_RWNXAGCACI_20_MARG_1_RESET       0x00000001

static inline u32 riu_rwnxagcaci_20_marg_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_1_ADDR);
}

static inline void riu_rwnxagcaci_20_marg_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCACI_20_MARG_1_ACI_20_MARGMCS_7_MASK    ((u32)0x3F000000)
#define RIU_RWNXAGCACI_20_MARG_1_ACI_20_MARGMCS_7_LSB    24
#define RIU_RWNXAGCACI_20_MARG_1_ACI_20_MARGMCS_7_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_20_MARG_1_ACI_20_MARGMCS_6_MASK    ((u32)0x003F0000)
#define RIU_RWNXAGCACI_20_MARG_1_ACI_20_MARGMCS_6_LSB    16
#define RIU_RWNXAGCACI_20_MARG_1_ACI_20_MARGMCS_6_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_20_MARG_1_ACI_20_MARGMCS_5_MASK    ((u32)0x00003F00)
#define RIU_RWNXAGCACI_20_MARG_1_ACI_20_MARGMCS_5_LSB    8
#define RIU_RWNXAGCACI_20_MARG_1_ACI_20_MARGMCS_5_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_20_MARG_1_ACI_20_MARGMCS_4_MASK    ((u32)0x0000003F)
#define RIU_RWNXAGCACI_20_MARG_1_ACI_20_MARGMCS_4_LSB    0
#define RIU_RWNXAGCACI_20_MARG_1_ACI_20_MARGMCS_4_WIDTH    ((u32)0x00000006)

#define RIU_RWNXAGCACI_20_MARG_1_ACI_20_MARGMCS_7_RST    0x0
#define RIU_RWNXAGCACI_20_MARG_1_ACI_20_MARGMCS_6_RST    0x0
#define RIU_RWNXAGCACI_20_MARG_1_ACI_20_MARGMCS_5_RST    0x0
#define RIU_RWNXAGCACI_20_MARG_1_ACI_20_MARGMCS_4_RST    0x1

static inline void riu_rwnxagcaci_20_marg_1_pack(struct cl_chip *chip, u8 aci20_margmcs7, u8 aci20_margmcs6, u8 aci20_margmcs5, u8 aci20_margmcs4)
{
	ASSERT_ERR_CHIP((((u32)aci20_margmcs7 << 24) & ~((u32)0x3F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci20_margmcs6 << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci20_margmcs5 << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)aci20_margmcs4 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_1_ADDR, ((u32)aci20_margmcs7 << 24) | ((u32)aci20_margmcs6 << 16) | ((u32)aci20_margmcs5 << 8) | ((u32)aci20_margmcs4 << 0));
}

static inline void riu_rwnxagcaci_20_marg_1_unpack(struct cl_chip *chip, u8 *aci20_margmcs7, u8 *aci20_margmcs6, u8 *aci20_margmcs5, u8 *aci20_margmcs4)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_1_ADDR);

	*aci20_margmcs7 = (local_val & ((u32)0x3F000000)) >> 24;
	*aci20_margmcs6 = (local_val & ((u32)0x003F0000)) >> 16;
	*aci20_margmcs5 = (local_val & ((u32)0x00003F00)) >> 8;
	*aci20_margmcs4 = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxagcaci_20_marg_1_aci_20_margmcs_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_1_ADDR);

	return (u8)((local_val & ((u32)0x3F000000)) >> 24);
}

static inline void riu_rwnxagcaci_20_marg_1_aci_20_margmcs_7_setf(struct cl_chip *chip, u8 aci20margmcs7)
{
	ASSERT_ERR_CHIP((((u32)aci20margmcs7 << 24) & ~((u32)0x3F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_1_ADDR) & ~((u32)0x3F000000)) | ((u32)aci20margmcs7 << 24));
}

static inline u8 riu_rwnxagcaci_20_marg_1_aci_20_margmcs_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_1_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void riu_rwnxagcaci_20_marg_1_aci_20_margmcs_6_setf(struct cl_chip *chip, u8 aci20margmcs6)
{
	ASSERT_ERR_CHIP((((u32)aci20margmcs6 << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_1_ADDR) & ~((u32)0x003F0000)) | ((u32)aci20margmcs6 << 16));
}

static inline u8 riu_rwnxagcaci_20_marg_1_aci_20_margmcs_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_1_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_rwnxagcaci_20_marg_1_aci_20_margmcs_5_setf(struct cl_chip *chip, u8 aci20margmcs5)
{
	ASSERT_ERR_CHIP((((u32)aci20margmcs5 << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_1_ADDR) & ~((u32)0x00003F00)) | ((u32)aci20margmcs5 << 8));
}

static inline u8 riu_rwnxagcaci_20_marg_1_aci_20_margmcs_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_1_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxagcaci_20_marg_1_aci_20_margmcs_4_setf(struct cl_chip *chip, u8 aci20margmcs4)
{
	ASSERT_ERR_CHIP((((u32)aci20margmcs4 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_1_ADDR) & ~((u32)0x0000003F)) | ((u32)aci20margmcs4 << 0));
}

/**
 * @brief RWNXAGCACI_20_MARG_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 ACI20_MARGMCS11           0x0
 *    21:16 ACI20_MARGMCS10           0x0
 *    13:08 ACI20_MARGMCS9            0x0
 *    05:00 ACI20_MARGMCS8            0x0
 * </pre>
 */
#define RIU_RWNXAGCACI_20_MARG_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000348)
#define RIU_RWNXAGCACI_20_MARG_2_OFFSET      0x00000348
#define RIU_RWNXAGCACI_20_MARG_2_INDEX       0x000000D2
#define RIU_RWNXAGCACI_20_MARG_2_RESET       0x00000000

static inline u32 riu_rwnxagcaci_20_marg_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_2_ADDR);
}

static inline void riu_rwnxagcaci_20_marg_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCACI_20_MARG_2_ACI_20_MARGMCS_11_MASK    ((u32)0x3F000000)
#define RIU_RWNXAGCACI_20_MARG_2_ACI_20_MARGMCS_11_LSB    24
#define RIU_RWNXAGCACI_20_MARG_2_ACI_20_MARGMCS_11_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_20_MARG_2_ACI_20_MARGMCS_10_MASK    ((u32)0x003F0000)
#define RIU_RWNXAGCACI_20_MARG_2_ACI_20_MARGMCS_10_LSB    16
#define RIU_RWNXAGCACI_20_MARG_2_ACI_20_MARGMCS_10_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_20_MARG_2_ACI_20_MARGMCS_9_MASK    ((u32)0x00003F00)
#define RIU_RWNXAGCACI_20_MARG_2_ACI_20_MARGMCS_9_LSB    8
#define RIU_RWNXAGCACI_20_MARG_2_ACI_20_MARGMCS_9_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_20_MARG_2_ACI_20_MARGMCS_8_MASK    ((u32)0x0000003F)
#define RIU_RWNXAGCACI_20_MARG_2_ACI_20_MARGMCS_8_LSB    0
#define RIU_RWNXAGCACI_20_MARG_2_ACI_20_MARGMCS_8_WIDTH    ((u32)0x00000006)

#define RIU_RWNXAGCACI_20_MARG_2_ACI_20_MARGMCS_11_RST    0x0
#define RIU_RWNXAGCACI_20_MARG_2_ACI_20_MARGMCS_10_RST    0x0
#define RIU_RWNXAGCACI_20_MARG_2_ACI_20_MARGMCS_9_RST    0x0
#define RIU_RWNXAGCACI_20_MARG_2_ACI_20_MARGMCS_8_RST    0x0

static inline void riu_rwnxagcaci_20_marg_2_pack(struct cl_chip *chip, u8 aci20_margmcs11, u8 aci20_margmcs10, u8 aci20_margmcs9, u8 aci20_margmcs8)
{
	ASSERT_ERR_CHIP((((u32)aci20_margmcs11 << 24) & ~((u32)0x3F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci20_margmcs10 << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci20_margmcs9 << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)aci20_margmcs8 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_2_ADDR, ((u32)aci20_margmcs11 << 24) | ((u32)aci20_margmcs10 << 16) | ((u32)aci20_margmcs9 << 8) | ((u32)aci20_margmcs8 << 0));
}

static inline void riu_rwnxagcaci_20_marg_2_unpack(struct cl_chip *chip, u8 *aci20_margmcs11, u8 *aci20_margmcs10, u8 *aci20_margmcs9, u8 *aci20_margmcs8)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_2_ADDR);

	*aci20_margmcs11 = (local_val & ((u32)0x3F000000)) >> 24;
	*aci20_margmcs10 = (local_val & ((u32)0x003F0000)) >> 16;
	*aci20_margmcs9 = (local_val & ((u32)0x00003F00)) >> 8;
	*aci20_margmcs8 = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxagcaci_20_marg_2_aci_20_margmcs_11_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_2_ADDR);

	return (u8)((local_val & ((u32)0x3F000000)) >> 24);
}

static inline void riu_rwnxagcaci_20_marg_2_aci_20_margmcs_11_setf(struct cl_chip *chip, u8 aci20margmcs11)
{
	ASSERT_ERR_CHIP((((u32)aci20margmcs11 << 24) & ~((u32)0x3F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_2_ADDR) & ~((u32)0x3F000000)) | ((u32)aci20margmcs11 << 24));
}

static inline u8 riu_rwnxagcaci_20_marg_2_aci_20_margmcs_10_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_2_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void riu_rwnxagcaci_20_marg_2_aci_20_margmcs_10_setf(struct cl_chip *chip, u8 aci20margmcs10)
{
	ASSERT_ERR_CHIP((((u32)aci20margmcs10 << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_2_ADDR) & ~((u32)0x003F0000)) | ((u32)aci20margmcs10 << 16));
}

static inline u8 riu_rwnxagcaci_20_marg_2_aci_20_margmcs_9_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_2_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_rwnxagcaci_20_marg_2_aci_20_margmcs_9_setf(struct cl_chip *chip, u8 aci20margmcs9)
{
	ASSERT_ERR_CHIP((((u32)aci20margmcs9 << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_2_ADDR) & ~((u32)0x00003F00)) | ((u32)aci20margmcs9 << 8));
}

static inline u8 riu_rwnxagcaci_20_marg_2_aci_20_margmcs_8_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_2_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxagcaci_20_marg_2_aci_20_margmcs_8_setf(struct cl_chip *chip, u8 aci20margmcs8)
{
	ASSERT_ERR_CHIP((((u32)aci20margmcs8 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_20_MARG_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_20_MARG_2_ADDR) & ~((u32)0x0000003F)) | ((u32)aci20margmcs8 << 0));
}

/**
 * @brief RWNXAGCACI_40_MARG_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 ACI40_MARGMCS3            0x9
 *    21:16 ACI40_MARGMCS2            0xB
 *    13:08 ACI40_MARGMCS1            0xD
 *    05:00 ACI40_MARGMCS0            0x10
 * </pre>
 */
#define RIU_RWNXAGCACI_40_MARG_0_ADDR        (REG_RIU_BASE_ADDR + 0x0000034C)
#define RIU_RWNXAGCACI_40_MARG_0_OFFSET      0x0000034C
#define RIU_RWNXAGCACI_40_MARG_0_INDEX       0x000000D3
#define RIU_RWNXAGCACI_40_MARG_0_RESET       0x090B0D10

static inline u32 riu_rwnxagcaci_40_marg_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_0_ADDR);
}

static inline void riu_rwnxagcaci_40_marg_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCACI_40_MARG_0_ACI_40_MARGMCS_3_MASK    ((u32)0x3F000000)
#define RIU_RWNXAGCACI_40_MARG_0_ACI_40_MARGMCS_3_LSB    24
#define RIU_RWNXAGCACI_40_MARG_0_ACI_40_MARGMCS_3_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_40_MARG_0_ACI_40_MARGMCS_2_MASK    ((u32)0x003F0000)
#define RIU_RWNXAGCACI_40_MARG_0_ACI_40_MARGMCS_2_LSB    16
#define RIU_RWNXAGCACI_40_MARG_0_ACI_40_MARGMCS_2_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_40_MARG_0_ACI_40_MARGMCS_1_MASK    ((u32)0x00003F00)
#define RIU_RWNXAGCACI_40_MARG_0_ACI_40_MARGMCS_1_LSB    8
#define RIU_RWNXAGCACI_40_MARG_0_ACI_40_MARGMCS_1_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_40_MARG_0_ACI_40_MARGMCS_0_MASK    ((u32)0x0000003F)
#define RIU_RWNXAGCACI_40_MARG_0_ACI_40_MARGMCS_0_LSB    0
#define RIU_RWNXAGCACI_40_MARG_0_ACI_40_MARGMCS_0_WIDTH    ((u32)0x00000006)

#define RIU_RWNXAGCACI_40_MARG_0_ACI_40_MARGMCS_3_RST    0x9
#define RIU_RWNXAGCACI_40_MARG_0_ACI_40_MARGMCS_2_RST    0xB
#define RIU_RWNXAGCACI_40_MARG_0_ACI_40_MARGMCS_1_RST    0xD
#define RIU_RWNXAGCACI_40_MARG_0_ACI_40_MARGMCS_0_RST    0x10

static inline void riu_rwnxagcaci_40_marg_0_pack(struct cl_chip *chip, u8 aci40_margmcs3, u8 aci40_margmcs2, u8 aci40_margmcs1, u8 aci40_margmcs0)
{
	ASSERT_ERR_CHIP((((u32)aci40_margmcs3 << 24) & ~((u32)0x3F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci40_margmcs2 << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci40_margmcs1 << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)aci40_margmcs0 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_0_ADDR, ((u32)aci40_margmcs3 << 24) | ((u32)aci40_margmcs2 << 16) | ((u32)aci40_margmcs1 << 8) | ((u32)aci40_margmcs0 << 0));
}

static inline void riu_rwnxagcaci_40_marg_0_unpack(struct cl_chip *chip, u8 *aci40_margmcs3, u8 *aci40_margmcs2, u8 *aci40_margmcs1, u8 *aci40_margmcs0)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_0_ADDR);

	*aci40_margmcs3 = (local_val & ((u32)0x3F000000)) >> 24;
	*aci40_margmcs2 = (local_val & ((u32)0x003F0000)) >> 16;
	*aci40_margmcs1 = (local_val & ((u32)0x00003F00)) >> 8;
	*aci40_margmcs0 = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxagcaci_40_marg_0_aci_40_margmcs_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_0_ADDR);

	return (u8)((local_val & ((u32)0x3F000000)) >> 24);
}

static inline void riu_rwnxagcaci_40_marg_0_aci_40_margmcs_3_setf(struct cl_chip *chip, u8 aci40margmcs3)
{
	ASSERT_ERR_CHIP((((u32)aci40margmcs3 << 24) & ~((u32)0x3F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_0_ADDR) & ~((u32)0x3F000000)) | ((u32)aci40margmcs3 << 24));
}

static inline u8 riu_rwnxagcaci_40_marg_0_aci_40_margmcs_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_0_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void riu_rwnxagcaci_40_marg_0_aci_40_margmcs_2_setf(struct cl_chip *chip, u8 aci40margmcs2)
{
	ASSERT_ERR_CHIP((((u32)aci40margmcs2 << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_0_ADDR) & ~((u32)0x003F0000)) | ((u32)aci40margmcs2 << 16));
}

static inline u8 riu_rwnxagcaci_40_marg_0_aci_40_margmcs_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_0_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_rwnxagcaci_40_marg_0_aci_40_margmcs_1_setf(struct cl_chip *chip, u8 aci40margmcs1)
{
	ASSERT_ERR_CHIP((((u32)aci40margmcs1 << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_0_ADDR) & ~((u32)0x00003F00)) | ((u32)aci40margmcs1 << 8));
}

static inline u8 riu_rwnxagcaci_40_marg_0_aci_40_margmcs_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_0_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxagcaci_40_marg_0_aci_40_margmcs_0_setf(struct cl_chip *chip, u8 aci40margmcs0)
{
	ASSERT_ERR_CHIP((((u32)aci40margmcs0 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_0_ADDR) & ~((u32)0x0000003F)) | ((u32)aci40margmcs0 << 0));
}

/**
 * @brief RWNXAGCACI_40_MARG_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 ACI40_MARGMCS7            0x2
 *    21:16 ACI40_MARGMCS6            0x3
 *    13:08 ACI40_MARGMCS5            0x3
 *    05:00 ACI40_MARGMCS4            0x5
 * </pre>
 */
#define RIU_RWNXAGCACI_40_MARG_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000350)
#define RIU_RWNXAGCACI_40_MARG_1_OFFSET      0x00000350
#define RIU_RWNXAGCACI_40_MARG_1_INDEX       0x000000D4
#define RIU_RWNXAGCACI_40_MARG_1_RESET       0x02030305

static inline u32 riu_rwnxagcaci_40_marg_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_1_ADDR);
}

static inline void riu_rwnxagcaci_40_marg_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCACI_40_MARG_1_ACI_40_MARGMCS_7_MASK    ((u32)0x3F000000)
#define RIU_RWNXAGCACI_40_MARG_1_ACI_40_MARGMCS_7_LSB    24
#define RIU_RWNXAGCACI_40_MARG_1_ACI_40_MARGMCS_7_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_40_MARG_1_ACI_40_MARGMCS_6_MASK    ((u32)0x003F0000)
#define RIU_RWNXAGCACI_40_MARG_1_ACI_40_MARGMCS_6_LSB    16
#define RIU_RWNXAGCACI_40_MARG_1_ACI_40_MARGMCS_6_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_40_MARG_1_ACI_40_MARGMCS_5_MASK    ((u32)0x00003F00)
#define RIU_RWNXAGCACI_40_MARG_1_ACI_40_MARGMCS_5_LSB    8
#define RIU_RWNXAGCACI_40_MARG_1_ACI_40_MARGMCS_5_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_40_MARG_1_ACI_40_MARGMCS_4_MASK    ((u32)0x0000003F)
#define RIU_RWNXAGCACI_40_MARG_1_ACI_40_MARGMCS_4_LSB    0
#define RIU_RWNXAGCACI_40_MARG_1_ACI_40_MARGMCS_4_WIDTH    ((u32)0x00000006)

#define RIU_RWNXAGCACI_40_MARG_1_ACI_40_MARGMCS_7_RST    0x2
#define RIU_RWNXAGCACI_40_MARG_1_ACI_40_MARGMCS_6_RST    0x3
#define RIU_RWNXAGCACI_40_MARG_1_ACI_40_MARGMCS_5_RST    0x3
#define RIU_RWNXAGCACI_40_MARG_1_ACI_40_MARGMCS_4_RST    0x5

static inline void riu_rwnxagcaci_40_marg_1_pack(struct cl_chip *chip, u8 aci40_margmcs7, u8 aci40_margmcs6, u8 aci40_margmcs5, u8 aci40_margmcs4)
{
	ASSERT_ERR_CHIP((((u32)aci40_margmcs7 << 24) & ~((u32)0x3F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci40_margmcs6 << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci40_margmcs5 << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)aci40_margmcs4 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_1_ADDR, ((u32)aci40_margmcs7 << 24) | ((u32)aci40_margmcs6 << 16) | ((u32)aci40_margmcs5 << 8) | ((u32)aci40_margmcs4 << 0));
}

static inline void riu_rwnxagcaci_40_marg_1_unpack(struct cl_chip *chip, u8 *aci40_margmcs7, u8 *aci40_margmcs6, u8 *aci40_margmcs5, u8 *aci40_margmcs4)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_1_ADDR);

	*aci40_margmcs7 = (local_val & ((u32)0x3F000000)) >> 24;
	*aci40_margmcs6 = (local_val & ((u32)0x003F0000)) >> 16;
	*aci40_margmcs5 = (local_val & ((u32)0x00003F00)) >> 8;
	*aci40_margmcs4 = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxagcaci_40_marg_1_aci_40_margmcs_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_1_ADDR);

	return (u8)((local_val & ((u32)0x3F000000)) >> 24);
}

static inline void riu_rwnxagcaci_40_marg_1_aci_40_margmcs_7_setf(struct cl_chip *chip, u8 aci40margmcs7)
{
	ASSERT_ERR_CHIP((((u32)aci40margmcs7 << 24) & ~((u32)0x3F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_1_ADDR) & ~((u32)0x3F000000)) | ((u32)aci40margmcs7 << 24));
}

static inline u8 riu_rwnxagcaci_40_marg_1_aci_40_margmcs_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_1_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void riu_rwnxagcaci_40_marg_1_aci_40_margmcs_6_setf(struct cl_chip *chip, u8 aci40margmcs6)
{
	ASSERT_ERR_CHIP((((u32)aci40margmcs6 << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_1_ADDR) & ~((u32)0x003F0000)) | ((u32)aci40margmcs6 << 16));
}

static inline u8 riu_rwnxagcaci_40_marg_1_aci_40_margmcs_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_1_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_rwnxagcaci_40_marg_1_aci_40_margmcs_5_setf(struct cl_chip *chip, u8 aci40margmcs5)
{
	ASSERT_ERR_CHIP((((u32)aci40margmcs5 << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_1_ADDR) & ~((u32)0x00003F00)) | ((u32)aci40margmcs5 << 8));
}

static inline u8 riu_rwnxagcaci_40_marg_1_aci_40_margmcs_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_1_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxagcaci_40_marg_1_aci_40_margmcs_4_setf(struct cl_chip *chip, u8 aci40margmcs4)
{
	ASSERT_ERR_CHIP((((u32)aci40margmcs4 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_1_ADDR) & ~((u32)0x0000003F)) | ((u32)aci40margmcs4 << 0));
}

/**
 * @brief RWNXAGCACI_40_MARG_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 ACI40_MARGMCS11           0x1
 *    21:16 ACI40_MARGMCS10           0x1
 *    13:08 ACI40_MARGMCS9            0x1
 *    05:00 ACI40_MARGMCS8            0x1
 * </pre>
 */
#define RIU_RWNXAGCACI_40_MARG_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000354)
#define RIU_RWNXAGCACI_40_MARG_2_OFFSET      0x00000354
#define RIU_RWNXAGCACI_40_MARG_2_INDEX       0x000000D5
#define RIU_RWNXAGCACI_40_MARG_2_RESET       0x01010101

static inline u32 riu_rwnxagcaci_40_marg_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_2_ADDR);
}

static inline void riu_rwnxagcaci_40_marg_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCACI_40_MARG_2_ACI_40_MARGMCS_11_MASK    ((u32)0x3F000000)
#define RIU_RWNXAGCACI_40_MARG_2_ACI_40_MARGMCS_11_LSB    24
#define RIU_RWNXAGCACI_40_MARG_2_ACI_40_MARGMCS_11_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_40_MARG_2_ACI_40_MARGMCS_10_MASK    ((u32)0x003F0000)
#define RIU_RWNXAGCACI_40_MARG_2_ACI_40_MARGMCS_10_LSB    16
#define RIU_RWNXAGCACI_40_MARG_2_ACI_40_MARGMCS_10_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_40_MARG_2_ACI_40_MARGMCS_9_MASK    ((u32)0x00003F00)
#define RIU_RWNXAGCACI_40_MARG_2_ACI_40_MARGMCS_9_LSB    8
#define RIU_RWNXAGCACI_40_MARG_2_ACI_40_MARGMCS_9_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_40_MARG_2_ACI_40_MARGMCS_8_MASK    ((u32)0x0000003F)
#define RIU_RWNXAGCACI_40_MARG_2_ACI_40_MARGMCS_8_LSB    0
#define RIU_RWNXAGCACI_40_MARG_2_ACI_40_MARGMCS_8_WIDTH    ((u32)0x00000006)

#define RIU_RWNXAGCACI_40_MARG_2_ACI_40_MARGMCS_11_RST    0x1
#define RIU_RWNXAGCACI_40_MARG_2_ACI_40_MARGMCS_10_RST    0x1
#define RIU_RWNXAGCACI_40_MARG_2_ACI_40_MARGMCS_9_RST    0x1
#define RIU_RWNXAGCACI_40_MARG_2_ACI_40_MARGMCS_8_RST    0x1

static inline void riu_rwnxagcaci_40_marg_2_pack(struct cl_chip *chip, u8 aci40_margmcs11, u8 aci40_margmcs10, u8 aci40_margmcs9, u8 aci40_margmcs8)
{
	ASSERT_ERR_CHIP((((u32)aci40_margmcs11 << 24) & ~((u32)0x3F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci40_margmcs10 << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci40_margmcs9 << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)aci40_margmcs8 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_2_ADDR, ((u32)aci40_margmcs11 << 24) | ((u32)aci40_margmcs10 << 16) | ((u32)aci40_margmcs9 << 8) | ((u32)aci40_margmcs8 << 0));
}

static inline void riu_rwnxagcaci_40_marg_2_unpack(struct cl_chip *chip, u8 *aci40_margmcs11, u8 *aci40_margmcs10, u8 *aci40_margmcs9, u8 *aci40_margmcs8)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_2_ADDR);

	*aci40_margmcs11 = (local_val & ((u32)0x3F000000)) >> 24;
	*aci40_margmcs10 = (local_val & ((u32)0x003F0000)) >> 16;
	*aci40_margmcs9 = (local_val & ((u32)0x00003F00)) >> 8;
	*aci40_margmcs8 = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxagcaci_40_marg_2_aci_40_margmcs_11_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_2_ADDR);

	return (u8)((local_val & ((u32)0x3F000000)) >> 24);
}

static inline void riu_rwnxagcaci_40_marg_2_aci_40_margmcs_11_setf(struct cl_chip *chip, u8 aci40margmcs11)
{
	ASSERT_ERR_CHIP((((u32)aci40margmcs11 << 24) & ~((u32)0x3F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_2_ADDR) & ~((u32)0x3F000000)) | ((u32)aci40margmcs11 << 24));
}

static inline u8 riu_rwnxagcaci_40_marg_2_aci_40_margmcs_10_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_2_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void riu_rwnxagcaci_40_marg_2_aci_40_margmcs_10_setf(struct cl_chip *chip, u8 aci40margmcs10)
{
	ASSERT_ERR_CHIP((((u32)aci40margmcs10 << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_2_ADDR) & ~((u32)0x003F0000)) | ((u32)aci40margmcs10 << 16));
}

static inline u8 riu_rwnxagcaci_40_marg_2_aci_40_margmcs_9_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_2_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_rwnxagcaci_40_marg_2_aci_40_margmcs_9_setf(struct cl_chip *chip, u8 aci40margmcs9)
{
	ASSERT_ERR_CHIP((((u32)aci40margmcs9 << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_2_ADDR) & ~((u32)0x00003F00)) | ((u32)aci40margmcs9 << 8));
}

static inline u8 riu_rwnxagcaci_40_marg_2_aci_40_margmcs_8_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_2_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxagcaci_40_marg_2_aci_40_margmcs_8_setf(struct cl_chip *chip, u8 aci40margmcs8)
{
	ASSERT_ERR_CHIP((((u32)aci40margmcs8 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_40_MARG_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_40_MARG_2_ADDR) & ~((u32)0x0000003F)) | ((u32)aci40margmcs8 << 0));
}

/**
 * @brief RWNXAGCACI_80_MARG_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 ACI80_MARGMCS3            0x18
 *    21:16 ACI80_MARGMCS2            0x1B
 *    13:08 ACI80_MARGMCS1            0x1D
 *    05:00 ACI80_MARGMCS0            0x20
 * </pre>
 */
#define RIU_RWNXAGCACI_80_MARG_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000358)
#define RIU_RWNXAGCACI_80_MARG_0_OFFSET      0x00000358
#define RIU_RWNXAGCACI_80_MARG_0_INDEX       0x000000D6
#define RIU_RWNXAGCACI_80_MARG_0_RESET       0x181B1D20

static inline u32 riu_rwnxagcaci_80_marg_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_0_ADDR);
}

static inline void riu_rwnxagcaci_80_marg_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCACI_80_MARG_0_ACI_80_MARGMCS_3_MASK    ((u32)0x3F000000)
#define RIU_RWNXAGCACI_80_MARG_0_ACI_80_MARGMCS_3_LSB    24
#define RIU_RWNXAGCACI_80_MARG_0_ACI_80_MARGMCS_3_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_80_MARG_0_ACI_80_MARGMCS_2_MASK    ((u32)0x003F0000)
#define RIU_RWNXAGCACI_80_MARG_0_ACI_80_MARGMCS_2_LSB    16
#define RIU_RWNXAGCACI_80_MARG_0_ACI_80_MARGMCS_2_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_80_MARG_0_ACI_80_MARGMCS_1_MASK    ((u32)0x00003F00)
#define RIU_RWNXAGCACI_80_MARG_0_ACI_80_MARGMCS_1_LSB    8
#define RIU_RWNXAGCACI_80_MARG_0_ACI_80_MARGMCS_1_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_80_MARG_0_ACI_80_MARGMCS_0_MASK    ((u32)0x0000003F)
#define RIU_RWNXAGCACI_80_MARG_0_ACI_80_MARGMCS_0_LSB    0
#define RIU_RWNXAGCACI_80_MARG_0_ACI_80_MARGMCS_0_WIDTH    ((u32)0x00000006)

#define RIU_RWNXAGCACI_80_MARG_0_ACI_80_MARGMCS_3_RST    0x18
#define RIU_RWNXAGCACI_80_MARG_0_ACI_80_MARGMCS_2_RST    0x1B
#define RIU_RWNXAGCACI_80_MARG_0_ACI_80_MARGMCS_1_RST    0x1D
#define RIU_RWNXAGCACI_80_MARG_0_ACI_80_MARGMCS_0_RST    0x20

static inline void riu_rwnxagcaci_80_marg_0_pack(struct cl_chip *chip, u8 aci80_margmcs3, u8 aci80_margmcs2, u8 aci80_margmcs1, u8 aci80_margmcs0)
{
	ASSERT_ERR_CHIP((((u32)aci80_margmcs3 << 24) & ~((u32)0x3F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci80_margmcs2 << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci80_margmcs1 << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)aci80_margmcs0 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_0_ADDR, ((u32)aci80_margmcs3 << 24) | ((u32)aci80_margmcs2 << 16) | ((u32)aci80_margmcs1 << 8) | ((u32)aci80_margmcs0 << 0));
}

static inline void riu_rwnxagcaci_80_marg_0_unpack(struct cl_chip *chip, u8 *aci80_margmcs3, u8 *aci80_margmcs2, u8 *aci80_margmcs1, u8 *aci80_margmcs0)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_0_ADDR);

	*aci80_margmcs3 = (local_val & ((u32)0x3F000000)) >> 24;
	*aci80_margmcs2 = (local_val & ((u32)0x003F0000)) >> 16;
	*aci80_margmcs1 = (local_val & ((u32)0x00003F00)) >> 8;
	*aci80_margmcs0 = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxagcaci_80_marg_0_aci_80_margmcs_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_0_ADDR);

	return (u8)((local_val & ((u32)0x3F000000)) >> 24);
}

static inline void riu_rwnxagcaci_80_marg_0_aci_80_margmcs_3_setf(struct cl_chip *chip, u8 aci80margmcs3)
{
	ASSERT_ERR_CHIP((((u32)aci80margmcs3 << 24) & ~((u32)0x3F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_0_ADDR) & ~((u32)0x3F000000)) | ((u32)aci80margmcs3 << 24));
}

static inline u8 riu_rwnxagcaci_80_marg_0_aci_80_margmcs_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_0_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void riu_rwnxagcaci_80_marg_0_aci_80_margmcs_2_setf(struct cl_chip *chip, u8 aci80margmcs2)
{
	ASSERT_ERR_CHIP((((u32)aci80margmcs2 << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_0_ADDR) & ~((u32)0x003F0000)) | ((u32)aci80margmcs2 << 16));
}

static inline u8 riu_rwnxagcaci_80_marg_0_aci_80_margmcs_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_0_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_rwnxagcaci_80_marg_0_aci_80_margmcs_1_setf(struct cl_chip *chip, u8 aci80margmcs1)
{
	ASSERT_ERR_CHIP((((u32)aci80margmcs1 << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_0_ADDR) & ~((u32)0x00003F00)) | ((u32)aci80margmcs1 << 8));
}

static inline u8 riu_rwnxagcaci_80_marg_0_aci_80_margmcs_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_0_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxagcaci_80_marg_0_aci_80_margmcs_0_setf(struct cl_chip *chip, u8 aci80margmcs0)
{
	ASSERT_ERR_CHIP((((u32)aci80margmcs0 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_0_ADDR) & ~((u32)0x0000003F)) | ((u32)aci80margmcs0 << 0));
}

/**
 * @brief RWNXAGCACI_80_MARG_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 ACI80_MARGMCS7            0xE
 *    21:16 ACI80_MARGMCS6            0xF
 *    13:08 ACI80_MARGMCS5            0x10
 *    05:00 ACI80_MARGMCS4            0x14
 * </pre>
 */
#define RIU_RWNXAGCACI_80_MARG_1_ADDR        (REG_RIU_BASE_ADDR + 0x0000035C)
#define RIU_RWNXAGCACI_80_MARG_1_OFFSET      0x0000035C
#define RIU_RWNXAGCACI_80_MARG_1_INDEX       0x000000D7
#define RIU_RWNXAGCACI_80_MARG_1_RESET       0x0E0F1014

static inline u32 riu_rwnxagcaci_80_marg_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_1_ADDR);
}

static inline void riu_rwnxagcaci_80_marg_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCACI_80_MARG_1_ACI_80_MARGMCS_7_MASK    ((u32)0x3F000000)
#define RIU_RWNXAGCACI_80_MARG_1_ACI_80_MARGMCS_7_LSB    24
#define RIU_RWNXAGCACI_80_MARG_1_ACI_80_MARGMCS_7_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_80_MARG_1_ACI_80_MARGMCS_6_MASK    ((u32)0x003F0000)
#define RIU_RWNXAGCACI_80_MARG_1_ACI_80_MARGMCS_6_LSB    16
#define RIU_RWNXAGCACI_80_MARG_1_ACI_80_MARGMCS_6_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_80_MARG_1_ACI_80_MARGMCS_5_MASK    ((u32)0x00003F00)
#define RIU_RWNXAGCACI_80_MARG_1_ACI_80_MARGMCS_5_LSB    8
#define RIU_RWNXAGCACI_80_MARG_1_ACI_80_MARGMCS_5_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_80_MARG_1_ACI_80_MARGMCS_4_MASK    ((u32)0x0000003F)
#define RIU_RWNXAGCACI_80_MARG_1_ACI_80_MARGMCS_4_LSB    0
#define RIU_RWNXAGCACI_80_MARG_1_ACI_80_MARGMCS_4_WIDTH    ((u32)0x00000006)

#define RIU_RWNXAGCACI_80_MARG_1_ACI_80_MARGMCS_7_RST    0xE
#define RIU_RWNXAGCACI_80_MARG_1_ACI_80_MARGMCS_6_RST    0xF
#define RIU_RWNXAGCACI_80_MARG_1_ACI_80_MARGMCS_5_RST    0x10
#define RIU_RWNXAGCACI_80_MARG_1_ACI_80_MARGMCS_4_RST    0x14

static inline void riu_rwnxagcaci_80_marg_1_pack(struct cl_chip *chip, u8 aci80_margmcs7, u8 aci80_margmcs6, u8 aci80_margmcs5, u8 aci80_margmcs4)
{
	ASSERT_ERR_CHIP((((u32)aci80_margmcs7 << 24) & ~((u32)0x3F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci80_margmcs6 << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci80_margmcs5 << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)aci80_margmcs4 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_1_ADDR, ((u32)aci80_margmcs7 << 24) | ((u32)aci80_margmcs6 << 16) | ((u32)aci80_margmcs5 << 8) | ((u32)aci80_margmcs4 << 0));
}

static inline void riu_rwnxagcaci_80_marg_1_unpack(struct cl_chip *chip, u8 *aci80_margmcs7, u8 *aci80_margmcs6, u8 *aci80_margmcs5, u8 *aci80_margmcs4)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_1_ADDR);

	*aci80_margmcs7 = (local_val & ((u32)0x3F000000)) >> 24;
	*aci80_margmcs6 = (local_val & ((u32)0x003F0000)) >> 16;
	*aci80_margmcs5 = (local_val & ((u32)0x00003F00)) >> 8;
	*aci80_margmcs4 = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxagcaci_80_marg_1_aci_80_margmcs_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_1_ADDR);

	return (u8)((local_val & ((u32)0x3F000000)) >> 24);
}

static inline void riu_rwnxagcaci_80_marg_1_aci_80_margmcs_7_setf(struct cl_chip *chip, u8 aci80margmcs7)
{
	ASSERT_ERR_CHIP((((u32)aci80margmcs7 << 24) & ~((u32)0x3F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_1_ADDR) & ~((u32)0x3F000000)) | ((u32)aci80margmcs7 << 24));
}

static inline u8 riu_rwnxagcaci_80_marg_1_aci_80_margmcs_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_1_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void riu_rwnxagcaci_80_marg_1_aci_80_margmcs_6_setf(struct cl_chip *chip, u8 aci80margmcs6)
{
	ASSERT_ERR_CHIP((((u32)aci80margmcs6 << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_1_ADDR) & ~((u32)0x003F0000)) | ((u32)aci80margmcs6 << 16));
}

static inline u8 riu_rwnxagcaci_80_marg_1_aci_80_margmcs_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_1_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_rwnxagcaci_80_marg_1_aci_80_margmcs_5_setf(struct cl_chip *chip, u8 aci80margmcs5)
{
	ASSERT_ERR_CHIP((((u32)aci80margmcs5 << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_1_ADDR) & ~((u32)0x00003F00)) | ((u32)aci80margmcs5 << 8));
}

static inline u8 riu_rwnxagcaci_80_marg_1_aci_80_margmcs_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_1_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxagcaci_80_marg_1_aci_80_margmcs_4_setf(struct cl_chip *chip, u8 aci80margmcs4)
{
	ASSERT_ERR_CHIP((((u32)aci80margmcs4 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_1_ADDR) & ~((u32)0x0000003F)) | ((u32)aci80margmcs4 << 0));
}

/**
 * @brief RWNXAGCACI_80_MARG_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 ACI80_MARGMCS11           0x6
 *    21:16 ACI80_MARGMCS10           0x7
 *    13:08 ACI80_MARGMCS9            0x8
 *    05:00 ACI80_MARGMCS8            0xA
 * </pre>
 */
#define RIU_RWNXAGCACI_80_MARG_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000360)
#define RIU_RWNXAGCACI_80_MARG_2_OFFSET      0x00000360
#define RIU_RWNXAGCACI_80_MARG_2_INDEX       0x000000D8
#define RIU_RWNXAGCACI_80_MARG_2_RESET       0x0607080A

static inline u32 riu_rwnxagcaci_80_marg_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_2_ADDR);
}

static inline void riu_rwnxagcaci_80_marg_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCACI_80_MARG_2_ACI_80_MARGMCS_11_MASK    ((u32)0x3F000000)
#define RIU_RWNXAGCACI_80_MARG_2_ACI_80_MARGMCS_11_LSB    24
#define RIU_RWNXAGCACI_80_MARG_2_ACI_80_MARGMCS_11_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_80_MARG_2_ACI_80_MARGMCS_10_MASK    ((u32)0x003F0000)
#define RIU_RWNXAGCACI_80_MARG_2_ACI_80_MARGMCS_10_LSB    16
#define RIU_RWNXAGCACI_80_MARG_2_ACI_80_MARGMCS_10_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_80_MARG_2_ACI_80_MARGMCS_9_MASK    ((u32)0x00003F00)
#define RIU_RWNXAGCACI_80_MARG_2_ACI_80_MARGMCS_9_LSB    8
#define RIU_RWNXAGCACI_80_MARG_2_ACI_80_MARGMCS_9_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_80_MARG_2_ACI_80_MARGMCS_8_MASK    ((u32)0x0000003F)
#define RIU_RWNXAGCACI_80_MARG_2_ACI_80_MARGMCS_8_LSB    0
#define RIU_RWNXAGCACI_80_MARG_2_ACI_80_MARGMCS_8_WIDTH    ((u32)0x00000006)

#define RIU_RWNXAGCACI_80_MARG_2_ACI_80_MARGMCS_11_RST    0x6
#define RIU_RWNXAGCACI_80_MARG_2_ACI_80_MARGMCS_10_RST    0x7
#define RIU_RWNXAGCACI_80_MARG_2_ACI_80_MARGMCS_9_RST    0x8
#define RIU_RWNXAGCACI_80_MARG_2_ACI_80_MARGMCS_8_RST    0xA

static inline void riu_rwnxagcaci_80_marg_2_pack(struct cl_chip *chip, u8 aci80_margmcs11, u8 aci80_margmcs10, u8 aci80_margmcs9, u8 aci80_margmcs8)
{
	ASSERT_ERR_CHIP((((u32)aci80_margmcs11 << 24) & ~((u32)0x3F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci80_margmcs10 << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci80_margmcs9 << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)aci80_margmcs8 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_2_ADDR, ((u32)aci80_margmcs11 << 24) | ((u32)aci80_margmcs10 << 16) | ((u32)aci80_margmcs9 << 8) | ((u32)aci80_margmcs8 << 0));
}

static inline void riu_rwnxagcaci_80_marg_2_unpack(struct cl_chip *chip, u8 *aci80_margmcs11, u8 *aci80_margmcs10, u8 *aci80_margmcs9, u8 *aci80_margmcs8)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_2_ADDR);

	*aci80_margmcs11 = (local_val & ((u32)0x3F000000)) >> 24;
	*aci80_margmcs10 = (local_val & ((u32)0x003F0000)) >> 16;
	*aci80_margmcs9 = (local_val & ((u32)0x00003F00)) >> 8;
	*aci80_margmcs8 = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxagcaci_80_marg_2_aci_80_margmcs_11_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_2_ADDR);

	return (u8)((local_val & ((u32)0x3F000000)) >> 24);
}

static inline void riu_rwnxagcaci_80_marg_2_aci_80_margmcs_11_setf(struct cl_chip *chip, u8 aci80margmcs11)
{
	ASSERT_ERR_CHIP((((u32)aci80margmcs11 << 24) & ~((u32)0x3F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_2_ADDR) & ~((u32)0x3F000000)) | ((u32)aci80margmcs11 << 24));
}

static inline u8 riu_rwnxagcaci_80_marg_2_aci_80_margmcs_10_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_2_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void riu_rwnxagcaci_80_marg_2_aci_80_margmcs_10_setf(struct cl_chip *chip, u8 aci80margmcs10)
{
	ASSERT_ERR_CHIP((((u32)aci80margmcs10 << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_2_ADDR) & ~((u32)0x003F0000)) | ((u32)aci80margmcs10 << 16));
}

static inline u8 riu_rwnxagcaci_80_marg_2_aci_80_margmcs_9_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_2_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_rwnxagcaci_80_marg_2_aci_80_margmcs_9_setf(struct cl_chip *chip, u8 aci80margmcs9)
{
	ASSERT_ERR_CHIP((((u32)aci80margmcs9 << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_2_ADDR) & ~((u32)0x00003F00)) | ((u32)aci80margmcs9 << 8));
}

static inline u8 riu_rwnxagcaci_80_marg_2_aci_80_margmcs_8_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_2_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxagcaci_80_marg_2_aci_80_margmcs_8_setf(struct cl_chip *chip, u8 aci80margmcs8)
{
	ASSERT_ERR_CHIP((((u32)aci80margmcs8 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_80_MARG_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_80_MARG_2_ADDR) & ~((u32)0x0000003F)) | ((u32)aci80margmcs8 << 0));
}

/**
 * @brief RWNXAGCSAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    28:24 SATDELAY50_NS             0x8
 *    21:16 SATHIGHTHRDBV             0x39
 *    13:08 SATLOWTHRDBV              0x35
 *    05:00 SATTHRDBV                 0x36
 * </pre>
 */
#define RIU_RWNXAGCSAT_ADDR        (REG_RIU_BASE_ADDR + 0x00000364)
#define RIU_RWNXAGCSAT_OFFSET      0x00000364
#define RIU_RWNXAGCSAT_INDEX       0x000000D9
#define RIU_RWNXAGCSAT_RESET       0x08393536

static inline u32 riu_rwnxagcsat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCSAT_ADDR);
}

static inline void riu_rwnxagcsat_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCSAT_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCSAT_SATDELAY_50_NS_MASK    ((u32)0x1F000000)
#define RIU_RWNXAGCSAT_SATDELAY_50_NS_LSB    24
#define RIU_RWNXAGCSAT_SATDELAY_50_NS_WIDTH    ((u32)0x00000005)
#define RIU_RWNXAGCSAT_SATHIGHTHRDBV_MASK    ((u32)0x003F0000)
#define RIU_RWNXAGCSAT_SATHIGHTHRDBV_LSB    16
#define RIU_RWNXAGCSAT_SATHIGHTHRDBV_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCSAT_SATLOWTHRDBV_MASK    ((u32)0x00003F00)
#define RIU_RWNXAGCSAT_SATLOWTHRDBV_LSB     8
#define RIU_RWNXAGCSAT_SATLOWTHRDBV_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCSAT_SATTHRDBV_MASK       ((u32)0x0000003F)
#define RIU_RWNXAGCSAT_SATTHRDBV_LSB        0
#define RIU_RWNXAGCSAT_SATTHRDBV_WIDTH      ((u32)0x00000006)

#define RIU_RWNXAGCSAT_SATDELAY_50_NS_RST    0x8
#define RIU_RWNXAGCSAT_SATHIGHTHRDBV_RST    0x39
#define RIU_RWNXAGCSAT_SATLOWTHRDBV_RST     0x35
#define RIU_RWNXAGCSAT_SATTHRDBV_RST        0x36

static inline void riu_rwnxagcsat_pack(struct cl_chip *chip, u8 satdelay50_ns, u8 sathighthrdbv, u8 satlowthrdbv, u8 satthrdbv)
{
	ASSERT_ERR_CHIP((((u32)satdelay50_ns << 24) & ~((u32)0x1F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sathighthrdbv << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)satlowthrdbv << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)satthrdbv << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCSAT_ADDR, ((u32)satdelay50_ns << 24) | ((u32)sathighthrdbv << 16) | ((u32)satlowthrdbv << 8) | ((u32)satthrdbv << 0));
}

static inline void riu_rwnxagcsat_unpack(struct cl_chip *chip, u8 *satdelay50_ns, u8 *sathighthrdbv, u8 *satlowthrdbv, u8 *satthrdbv)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCSAT_ADDR);

	*satdelay50_ns = (local_val & ((u32)0x1F000000)) >> 24;
	*sathighthrdbv = (local_val & ((u32)0x003F0000)) >> 16;
	*satlowthrdbv = (local_val & ((u32)0x00003F00)) >> 8;
	*satthrdbv = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxagcsat_satdelay_50_ns_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCSAT_ADDR);

	return (u8)((local_val & ((u32)0x1F000000)) >> 24);
}

static inline void riu_rwnxagcsat_satdelay_50_ns_setf(struct cl_chip *chip, u8 satdelay50ns)
{
	ASSERT_ERR_CHIP((((u32)satdelay50ns << 24) & ~((u32)0x1F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCSAT_ADDR, (cl_reg_read(chip, RIU_RWNXAGCSAT_ADDR) & ~((u32)0x1F000000)) | ((u32)satdelay50ns << 24));
}

static inline u8 riu_rwnxagcsat_sathighthrdbv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCSAT_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void riu_rwnxagcsat_sathighthrdbv_setf(struct cl_chip *chip, u8 sathighthrdbv)
{
	ASSERT_ERR_CHIP((((u32)sathighthrdbv << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCSAT_ADDR, (cl_reg_read(chip, RIU_RWNXAGCSAT_ADDR) & ~((u32)0x003F0000)) | ((u32)sathighthrdbv << 16));
}

static inline u8 riu_rwnxagcsat_satlowthrdbv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCSAT_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_rwnxagcsat_satlowthrdbv_setf(struct cl_chip *chip, u8 satlowthrdbv)
{
	ASSERT_ERR_CHIP((((u32)satlowthrdbv << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCSAT_ADDR, (cl_reg_read(chip, RIU_RWNXAGCSAT_ADDR) & ~((u32)0x00003F00)) | ((u32)satlowthrdbv << 8));
}

static inline u8 riu_rwnxagcsat_satthrdbv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCSAT_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxagcsat_satthrdbv_setf(struct cl_chip *chip, u8 satthrdbv)
{
	ASSERT_ERR_CHIP((((u32)satthrdbv << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCSAT_ADDR, (cl_reg_read(chip, RIU_RWNXAGCSAT_ADDR) & ~((u32)0x0000003F)) | ((u32)satthrdbv << 0));
}

/**
 * @brief RWNXAGCCROSS register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21:12 CROSSDNTHRQDBM            0x280
 *    09:00 CROSSUPTHRQDBM            0x280
 * </pre>
 */
#define RIU_RWNXAGCCROSS_ADDR        (REG_RIU_BASE_ADDR + 0x00000368)
#define RIU_RWNXAGCCROSS_OFFSET      0x00000368
#define RIU_RWNXAGCCROSS_INDEX       0x000000DA
#define RIU_RWNXAGCCROSS_RESET       0x00280280

static inline u32 riu_rwnxagccross_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCCROSS_ADDR);
}

static inline void riu_rwnxagccross_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCCROSS_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCCROSS_CROSSDNTHRQDBM_MASK    ((u32)0x003FF000)
#define RIU_RWNXAGCCROSS_CROSSDNTHRQDBM_LSB    12
#define RIU_RWNXAGCCROSS_CROSSDNTHRQDBM_WIDTH    ((u32)0x0000000A)
#define RIU_RWNXAGCCROSS_CROSSUPTHRQDBM_MASK    ((u32)0x000003FF)
#define RIU_RWNXAGCCROSS_CROSSUPTHRQDBM_LSB    0
#define RIU_RWNXAGCCROSS_CROSSUPTHRQDBM_WIDTH    ((u32)0x0000000A)

#define RIU_RWNXAGCCROSS_CROSSDNTHRQDBM_RST    0x280
#define RIU_RWNXAGCCROSS_CROSSUPTHRQDBM_RST    0x280

static inline void riu_rwnxagccross_pack(struct cl_chip *chip, u16 crossdnthrqdbm, u16 crossupthrqdbm)
{
	ASSERT_ERR_CHIP((((u32)crossdnthrqdbm << 12) & ~((u32)0x003FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)crossupthrqdbm << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCROSS_ADDR, ((u32)crossdnthrqdbm << 12) | ((u32)crossupthrqdbm << 0));
}

static inline void riu_rwnxagccross_unpack(struct cl_chip *chip, u16 *crossdnthrqdbm, u16 *crossupthrqdbm)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCROSS_ADDR);

	*crossdnthrqdbm = (local_val & ((u32)0x003FF000)) >> 12;
	*crossupthrqdbm = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_rwnxagccross_crossdnthrqdbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCROSS_ADDR);

	return (u16)((local_val & ((u32)0x003FF000)) >> 12);
}

static inline void riu_rwnxagccross_crossdnthrqdbm_setf(struct cl_chip *chip, u16 crossdnthrqdbm)
{
	ASSERT_ERR_CHIP((((u32)crossdnthrqdbm << 12) & ~((u32)0x003FF000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCROSS_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCROSS_ADDR) & ~((u32)0x003FF000)) | ((u32)crossdnthrqdbm << 12));
}

static inline u16 riu_rwnxagccross_crossupthrqdbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCROSS_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_rwnxagccross_crossupthrqdbm_setf(struct cl_chip *chip, u16 crossupthrqdbm)
{
	ASSERT_ERR_CHIP((((u32)crossupthrqdbm << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCROSS_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCROSS_ADDR) & ~((u32)0x000003FF)) | ((u32)crossupthrqdbm << 0));
}

/**
 * @brief RWNXAGCRAMP register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    26:24 RAMPDNNDLINDEX            0x5
 *    23:16 RAMPDNGAPQDB              0x20
 *    10:08 RAMPUPNDLINDEX            0x7
 *    07:00 RAMPUPGAPQDB              0x10
 * </pre>
 */
#define RIU_RWNXAGCRAMP_ADDR        (REG_RIU_BASE_ADDR + 0x0000036C)
#define RIU_RWNXAGCRAMP_OFFSET      0x0000036C
#define RIU_RWNXAGCRAMP_INDEX       0x000000DB
#define RIU_RWNXAGCRAMP_RESET       0x05200710

static inline u32 riu_rwnxagcramp_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCRAMP_ADDR);
}

static inline void riu_rwnxagcramp_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCRAMP_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCRAMP_RAMPDNNDLINDEX_MASK    ((u32)0x07000000)
#define RIU_RWNXAGCRAMP_RAMPDNNDLINDEX_LSB    24
#define RIU_RWNXAGCRAMP_RAMPDNNDLINDEX_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCRAMP_RAMPDNGAPQDB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCRAMP_RAMPDNGAPQDB_LSB    16
#define RIU_RWNXAGCRAMP_RAMPDNGAPQDB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRAMP_RAMPUPNDLINDEX_MASK    ((u32)0x00000700)
#define RIU_RWNXAGCRAMP_RAMPUPNDLINDEX_LSB    8
#define RIU_RWNXAGCRAMP_RAMPUPNDLINDEX_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCRAMP_RAMPUPGAPQDB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCRAMP_RAMPUPGAPQDB_LSB    0
#define RIU_RWNXAGCRAMP_RAMPUPGAPQDB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCRAMP_RAMPDNNDLINDEX_RST    0x5
#define RIU_RWNXAGCRAMP_RAMPDNGAPQDB_RST    0x20
#define RIU_RWNXAGCRAMP_RAMPUPNDLINDEX_RST    0x7
#define RIU_RWNXAGCRAMP_RAMPUPGAPQDB_RST    0x10

static inline void riu_rwnxagcramp_pack(struct cl_chip *chip, u8 rampdnndlindex, u8 rampdngapqdb, u8 rampupndlindex, u8 rampupgapqdb)
{
	ASSERT_ERR_CHIP((((u32)rampdnndlindex << 24) & ~((u32)0x07000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rampdngapqdb << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)rampupndlindex << 8) & ~((u32)0x00000700)) == 0);
	ASSERT_ERR_CHIP((((u32)rampupgapqdb << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRAMP_ADDR, ((u32)rampdnndlindex << 24) | ((u32)rampdngapqdb << 16) | ((u32)rampupndlindex << 8) | ((u32)rampupgapqdb << 0));
}

static inline void riu_rwnxagcramp_unpack(struct cl_chip *chip, u8 *rampdnndlindex, u8 *rampdngapqdb, u8 *rampupndlindex, u8 *rampupgapqdb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRAMP_ADDR);

	*rampdnndlindex = (local_val & ((u32)0x07000000)) >> 24;
	*rampdngapqdb = (local_val & ((u32)0x00FF0000)) >> 16;
	*rampupndlindex = (local_val & ((u32)0x00000700)) >> 8;
	*rampupgapqdb = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcramp_rampdnndlindex_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRAMP_ADDR);

	return (u8)((local_val & ((u32)0x07000000)) >> 24);
}

static inline void riu_rwnxagcramp_rampdnndlindex_setf(struct cl_chip *chip, u8 rampdnndlindex)
{
	ASSERT_ERR_CHIP((((u32)rampdnndlindex << 24) & ~((u32)0x07000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRAMP_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRAMP_ADDR) & ~((u32)0x07000000)) | ((u32)rampdnndlindex << 24));
}

static inline u8 riu_rwnxagcramp_rampdngapqdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRAMP_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagcramp_rampdngapqdb_setf(struct cl_chip *chip, u8 rampdngapqdb)
{
	ASSERT_ERR_CHIP((((u32)rampdngapqdb << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRAMP_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRAMP_ADDR) & ~((u32)0x00FF0000)) | ((u32)rampdngapqdb << 16));
}

static inline u8 riu_rwnxagcramp_rampupndlindex_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRAMP_ADDR);

	return (u8)((local_val & ((u32)0x00000700)) >> 8);
}

static inline void riu_rwnxagcramp_rampupndlindex_setf(struct cl_chip *chip, u8 rampupndlindex)
{
	ASSERT_ERR_CHIP((((u32)rampupndlindex << 8) & ~((u32)0x00000700)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRAMP_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRAMP_ADDR) & ~((u32)0x00000700)) | ((u32)rampupndlindex << 8));
}

static inline u8 riu_rwnxagcramp_rampupgapqdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRAMP_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcramp_rampupgapqdb_setf(struct cl_chip *chip, u8 rampupgapqdb)
{
	ASSERT_ERR_CHIP((((u32)rampupgapqdb << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRAMP_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRAMP_ADDR) & ~((u32)0x000000FF)) | ((u32)rampupgapqdb << 0));
}

/**
 * @brief RWNXAGCSTABDIS register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:24 ADCPOWDISNDL              0x8
 *    22:16 ADCPOWDISTHRDBV           0x54
 *    10:08 PLATNDLINDEX              0x3
 *    04:00 PLATDPQDB                 0x8
 * </pre>
 */
#define RIU_RWNXAGCSTABDIS_ADDR        (REG_RIU_BASE_ADDR + 0x00000370)
#define RIU_RWNXAGCSTABDIS_OFFSET      0x00000370
#define RIU_RWNXAGCSTABDIS_INDEX       0x000000DC
#define RIU_RWNXAGCSTABDIS_RESET       0x08540308

static inline u32 riu_rwnxagcstabdis_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCSTABDIS_ADDR);
}

static inline void riu_rwnxagcstabdis_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCSTABDIS_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCSTABDIS_ADCPOWDISNDL_MASK    ((u32)0x0F000000)
#define RIU_RWNXAGCSTABDIS_ADCPOWDISNDL_LSB    24
#define RIU_RWNXAGCSTABDIS_ADCPOWDISNDL_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCSTABDIS_ADCPOWDISTHRDBV_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCSTABDIS_ADCPOWDISTHRDBV_LSB    16
#define RIU_RWNXAGCSTABDIS_ADCPOWDISTHRDBV_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCSTABDIS_PLATNDLINDEX_MASK    ((u32)0x00000700)
#define RIU_RWNXAGCSTABDIS_PLATNDLINDEX_LSB    8
#define RIU_RWNXAGCSTABDIS_PLATNDLINDEX_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCSTABDIS_PLATDPQDB_MASK    ((u32)0x0000001F)
#define RIU_RWNXAGCSTABDIS_PLATDPQDB_LSB    0
#define RIU_RWNXAGCSTABDIS_PLATDPQDB_WIDTH    ((u32)0x00000005)

#define RIU_RWNXAGCSTABDIS_ADCPOWDISNDL_RST    0x8
#define RIU_RWNXAGCSTABDIS_ADCPOWDISTHRDBV_RST    0x54
#define RIU_RWNXAGCSTABDIS_PLATNDLINDEX_RST    0x3
#define RIU_RWNXAGCSTABDIS_PLATDPQDB_RST    0x8

static inline void riu_rwnxagcstabdis_pack(struct cl_chip *chip, u8 adcpowdisndl, u8 adcpowdisthrdbv, u8 platndlindex, u8 platdpqdb)
{
	ASSERT_ERR_CHIP((((u32)adcpowdisndl << 24) & ~((u32)0x0F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)adcpowdisthrdbv << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)platndlindex << 8) & ~((u32)0x00000700)) == 0);
	ASSERT_ERR_CHIP((((u32)platdpqdb << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCSTABDIS_ADDR, ((u32)adcpowdisndl << 24) | ((u32)adcpowdisthrdbv << 16) | ((u32)platndlindex << 8) | ((u32)platdpqdb << 0));
}

static inline void riu_rwnxagcstabdis_unpack(struct cl_chip *chip, u8 *adcpowdisndl, u8 *adcpowdisthrdbv, u8 *platndlindex, u8 *platdpqdb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCSTABDIS_ADDR);

	*adcpowdisndl = (local_val & ((u32)0x0F000000)) >> 24;
	*adcpowdisthrdbv = (local_val & ((u32)0x007F0000)) >> 16;
	*platndlindex = (local_val & ((u32)0x00000700)) >> 8;
	*platdpqdb = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u8 riu_rwnxagcstabdis_adcpowdisndl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCSTABDIS_ADDR);

	return (u8)((local_val & ((u32)0x0F000000)) >> 24);
}

static inline void riu_rwnxagcstabdis_adcpowdisndl_setf(struct cl_chip *chip, u8 adcpowdisndl)
{
	ASSERT_ERR_CHIP((((u32)adcpowdisndl << 24) & ~((u32)0x0F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCSTABDIS_ADDR, (cl_reg_read(chip, RIU_RWNXAGCSTABDIS_ADDR) & ~((u32)0x0F000000)) | ((u32)adcpowdisndl << 24));
}

static inline u8 riu_rwnxagcstabdis_adcpowdisthrdbv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCSTABDIS_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagcstabdis_adcpowdisthrdbv_setf(struct cl_chip *chip, u8 adcpowdisthrdbv)
{
	ASSERT_ERR_CHIP((((u32)adcpowdisthrdbv << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCSTABDIS_ADDR, (cl_reg_read(chip, RIU_RWNXAGCSTABDIS_ADDR) & ~((u32)0x007F0000)) | ((u32)adcpowdisthrdbv << 16));
}

static inline u8 riu_rwnxagcstabdis_platndlindex_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCSTABDIS_ADDR);

	return (u8)((local_val & ((u32)0x00000700)) >> 8);
}

static inline void riu_rwnxagcstabdis_platndlindex_setf(struct cl_chip *chip, u8 platndlindex)
{
	ASSERT_ERR_CHIP((((u32)platndlindex << 8) & ~((u32)0x00000700)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCSTABDIS_ADDR, (cl_reg_read(chip, RIU_RWNXAGCSTABDIS_ADDR) & ~((u32)0x00000700)) | ((u32)platndlindex << 8));
}

static inline u8 riu_rwnxagcstabdis_platdpqdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCSTABDIS_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

static inline void riu_rwnxagcstabdis_platdpqdb_setf(struct cl_chip *chip, u8 platdpqdb)
{
	ASSERT_ERR_CHIP((((u32)platdpqdb << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCSTABDIS_ADDR, (cl_reg_read(chip, RIU_RWNXAGCSTABDIS_ADDR) & ~((u32)0x0000001F)) | ((u32)platdpqdb << 0));
}

/**
 * @brief RWNXAGCDCCOMP_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:28 DCRADARTYPE               0x0
 *    27    DCCENTEREDFROMAGC         0
 *    25:24 DCCENTEREDTYPE            0x3
 *    21:20 DCAGC20_TYPE              0x1
 *    17:16 DCADCTYPE                 0x1
 *    14:08 DCADCHOLDTIME50_NS        0x14
 *    06:00 DCADCZEROTIME50_NS        0x0
 * </pre>
 */
#define RIU_RWNXAGCDCCOMP_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000374)
#define RIU_RWNXAGCDCCOMP_0_OFFSET      0x00000374
#define RIU_RWNXAGCDCCOMP_0_INDEX       0x000000DD
#define RIU_RWNXAGCDCCOMP_0_RESET       0x03111400

static inline u32 riu_rwnxagcdccomp_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCDCCOMP_0_ADDR);
}

static inline void riu_rwnxagcdccomp_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCDCCOMP_0_DCRADARTYPE_MASK    ((u32)0x30000000)
#define RIU_RWNXAGCDCCOMP_0_DCRADARTYPE_LSB    28
#define RIU_RWNXAGCDCCOMP_0_DCRADARTYPE_WIDTH    ((u32)0x00000002)
#define RIU_RWNXAGCDCCOMP_0_DCCENTEREDFROMAGC_BIT    ((u32)0x08000000)
#define RIU_RWNXAGCDCCOMP_0_DCCENTEREDFROMAGC_POS    27
#define RIU_RWNXAGCDCCOMP_0_DCCENTEREDTYPE_MASK    ((u32)0x03000000)
#define RIU_RWNXAGCDCCOMP_0_DCCENTEREDTYPE_LSB    24
#define RIU_RWNXAGCDCCOMP_0_DCCENTEREDTYPE_WIDTH    ((u32)0x00000002)
#define RIU_RWNXAGCDCCOMP_0_DCAGC_20_TYPE_MASK    ((u32)0x00300000)
#define RIU_RWNXAGCDCCOMP_0_DCAGC_20_TYPE_LSB    20
#define RIU_RWNXAGCDCCOMP_0_DCAGC_20_TYPE_WIDTH    ((u32)0x00000002)
#define RIU_RWNXAGCDCCOMP_0_DCADCTYPE_MASK    ((u32)0x00030000)
#define RIU_RWNXAGCDCCOMP_0_DCADCTYPE_LSB    16
#define RIU_RWNXAGCDCCOMP_0_DCADCTYPE_WIDTH    ((u32)0x00000002)
#define RIU_RWNXAGCDCCOMP_0_DCADCHOLDTIME_50_NS_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCDCCOMP_0_DCADCHOLDTIME_50_NS_LSB    8
#define RIU_RWNXAGCDCCOMP_0_DCADCHOLDTIME_50_NS_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCDCCOMP_0_DCADCZEROTIME_50_NS_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCDCCOMP_0_DCADCZEROTIME_50_NS_LSB    0
#define RIU_RWNXAGCDCCOMP_0_DCADCZEROTIME_50_NS_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCDCCOMP_0_DCRADARTYPE_RST    0x0
#define RIU_RWNXAGCDCCOMP_0_DCCENTEREDFROMAGC_RST    0x0
#define RIU_RWNXAGCDCCOMP_0_DCCENTEREDTYPE_RST    0x3
#define RIU_RWNXAGCDCCOMP_0_DCAGC_20_TYPE_RST    0x1
#define RIU_RWNXAGCDCCOMP_0_DCADCTYPE_RST    0x1
#define RIU_RWNXAGCDCCOMP_0_DCADCHOLDTIME_50_NS_RST    0x14
#define RIU_RWNXAGCDCCOMP_0_DCADCZEROTIME_50_NS_RST    0x0

static inline void riu_rwnxagcdccomp_0_pack(struct cl_chip *chip, u8 dcradartype, u8 dccenteredfromagc, u8 dccenteredtype, u8 dcagc20_type, u8 dcadctype, u8 dcadcholdtime50_ns, u8 dcadczerotime50_ns)
{
	ASSERT_ERR_CHIP((((u32)dcradartype << 28) & ~((u32)0x30000000)) == 0);
	ASSERT_ERR_CHIP((((u32)dccenteredfromagc << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)dccenteredtype << 24) & ~((u32)0x03000000)) == 0);
	ASSERT_ERR_CHIP((((u32)dcagc20_type << 20) & ~((u32)0x00300000)) == 0);
	ASSERT_ERR_CHIP((((u32)dcadctype << 16) & ~((u32)0x00030000)) == 0);
	ASSERT_ERR_CHIP((((u32)dcadcholdtime50_ns << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)dcadczerotime50_ns << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_0_ADDR, ((u32)dcradartype << 28) | ((u32)dccenteredfromagc << 27) | ((u32)dccenteredtype << 24) | ((u32)dcagc20_type << 20) | ((u32)dcadctype << 16) | ((u32)dcadcholdtime50_ns << 8) | ((u32)dcadczerotime50_ns << 0));
}

static inline void riu_rwnxagcdccomp_0_unpack(struct cl_chip *chip, u8 *dcradartype, u8 *dccenteredfromagc, u8 *dccenteredtype, u8 *dcagc20_type, u8 *dcadctype, u8 *dcadcholdtime50_ns, u8 *dcadczerotime50_ns)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_0_ADDR);

	*dcradartype = (local_val & ((u32)0x30000000)) >> 28;
	*dccenteredfromagc = (local_val & ((u32)0x08000000)) >> 27;
	*dccenteredtype = (local_val & ((u32)0x03000000)) >> 24;
	*dcagc20_type = (local_val & ((u32)0x00300000)) >> 20;
	*dcadctype = (local_val & ((u32)0x00030000)) >> 16;
	*dcadcholdtime50_ns = (local_val & ((u32)0x00007F00)) >> 8;
	*dcadczerotime50_ns = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagcdccomp_0_dcradartype_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_0_ADDR);

	return (u8)((local_val & ((u32)0x30000000)) >> 28);
}

static inline void riu_rwnxagcdccomp_0_dcradartype_setf(struct cl_chip *chip, u8 dcradartype)
{
	ASSERT_ERR_CHIP((((u32)dcradartype << 28) & ~((u32)0x30000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDCCOMP_0_ADDR) & ~((u32)0x30000000)) | ((u32)dcradartype << 28));
}

static inline u8 riu_rwnxagcdccomp_0_dccenteredfromagc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_0_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void riu_rwnxagcdccomp_0_dccenteredfromagc_setf(struct cl_chip *chip, u8 dccenteredfromagc)
{
	ASSERT_ERR_CHIP((((u32)dccenteredfromagc << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDCCOMP_0_ADDR) & ~((u32)0x08000000)) | ((u32)dccenteredfromagc << 27));
}

static inline u8 riu_rwnxagcdccomp_0_dccenteredtype_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_0_ADDR);

	return (u8)((local_val & ((u32)0x03000000)) >> 24);
}

static inline void riu_rwnxagcdccomp_0_dccenteredtype_setf(struct cl_chip *chip, u8 dccenteredtype)
{
	ASSERT_ERR_CHIP((((u32)dccenteredtype << 24) & ~((u32)0x03000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDCCOMP_0_ADDR) & ~((u32)0x03000000)) | ((u32)dccenteredtype << 24));
}

static inline u8 riu_rwnxagcdccomp_0_dcagc_20_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_0_ADDR);

	return (u8)((local_val & ((u32)0x00300000)) >> 20);
}

static inline void riu_rwnxagcdccomp_0_dcagc_20_type_setf(struct cl_chip *chip, u8 dcagc20type)
{
	ASSERT_ERR_CHIP((((u32)dcagc20type << 20) & ~((u32)0x00300000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDCCOMP_0_ADDR) & ~((u32)0x00300000)) | ((u32)dcagc20type << 20));
}

static inline u8 riu_rwnxagcdccomp_0_dcadctype_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_0_ADDR);

	return (u8)((local_val & ((u32)0x00030000)) >> 16);
}

static inline void riu_rwnxagcdccomp_0_dcadctype_setf(struct cl_chip *chip, u8 dcadctype)
{
	ASSERT_ERR_CHIP((((u32)dcadctype << 16) & ~((u32)0x00030000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDCCOMP_0_ADDR) & ~((u32)0x00030000)) | ((u32)dcadctype << 16));
}

static inline u8 riu_rwnxagcdccomp_0_dcadcholdtime_50_ns_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_0_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagcdccomp_0_dcadcholdtime_50_ns_setf(struct cl_chip *chip, u8 dcadcholdtime50ns)
{
	ASSERT_ERR_CHIP((((u32)dcadcholdtime50ns << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDCCOMP_0_ADDR) & ~((u32)0x00007F00)) | ((u32)dcadcholdtime50ns << 8));
}

static inline u8 riu_rwnxagcdccomp_0_dcadczerotime_50_ns_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_0_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagcdccomp_0_dcadczerotime_50_ns_setf(struct cl_chip *chip, u8 dcadczerotime50ns)
{
	ASSERT_ERR_CHIP((((u32)dcadczerotime50ns << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDCCOMP_0_ADDR) & ~((u32)0x0000007F)) | ((u32)dcadczerotime50ns << 0));
}

/**
 * @brief RWNXAGCDCCOMP_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 DCCENTEREDHOLDTIME50_NS   0x8
 *    22:16 DCCENTEREDZEROTIME50_NS   0x2
 *    14:08 DCAGC20_HOLDTIME50_NS     0x0
 *    06:00 DCAGC20_ZEROTIME50_NS     0x2
 * </pre>
 */
#define RIU_RWNXAGCDCCOMP_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000378)
#define RIU_RWNXAGCDCCOMP_1_OFFSET      0x00000378
#define RIU_RWNXAGCDCCOMP_1_INDEX       0x000000DE
#define RIU_RWNXAGCDCCOMP_1_RESET       0x08020002

static inline u32 riu_rwnxagcdccomp_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCDCCOMP_1_ADDR);
}

static inline void riu_rwnxagcdccomp_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCDCCOMP_1_DCCENTEREDHOLDTIME_50_NS_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCDCCOMP_1_DCCENTEREDHOLDTIME_50_NS_LSB    24
#define RIU_RWNXAGCDCCOMP_1_DCCENTEREDHOLDTIME_50_NS_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCDCCOMP_1_DCCENTEREDZEROTIME_50_NS_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCDCCOMP_1_DCCENTEREDZEROTIME_50_NS_LSB    16
#define RIU_RWNXAGCDCCOMP_1_DCCENTEREDZEROTIME_50_NS_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCDCCOMP_1_DCAGC_20_HOLDTIME_50_NS_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCDCCOMP_1_DCAGC_20_HOLDTIME_50_NS_LSB    8
#define RIU_RWNXAGCDCCOMP_1_DCAGC_20_HOLDTIME_50_NS_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCDCCOMP_1_DCAGC_20_ZEROTIME_50_NS_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCDCCOMP_1_DCAGC_20_ZEROTIME_50_NS_LSB    0
#define RIU_RWNXAGCDCCOMP_1_DCAGC_20_ZEROTIME_50_NS_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCDCCOMP_1_DCCENTEREDHOLDTIME_50_NS_RST    0x8
#define RIU_RWNXAGCDCCOMP_1_DCCENTEREDZEROTIME_50_NS_RST    0x2
#define RIU_RWNXAGCDCCOMP_1_DCAGC_20_HOLDTIME_50_NS_RST    0x0
#define RIU_RWNXAGCDCCOMP_1_DCAGC_20_ZEROTIME_50_NS_RST    0x2

static inline void riu_rwnxagcdccomp_1_pack(struct cl_chip *chip, u8 dccenteredholdtime50_ns, u8 dccenteredzerotime50_ns, u8 dcagc20_holdtime50_ns, u8 dcagc20_zerotime50_ns)
{
	ASSERT_ERR_CHIP((((u32)dccenteredholdtime50_ns << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)dccenteredzerotime50_ns << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)dcagc20_holdtime50_ns << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)dcagc20_zerotime50_ns << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_1_ADDR, ((u32)dccenteredholdtime50_ns << 24) | ((u32)dccenteredzerotime50_ns << 16) | ((u32)dcagc20_holdtime50_ns << 8) | ((u32)dcagc20_zerotime50_ns << 0));
}

static inline void riu_rwnxagcdccomp_1_unpack(struct cl_chip *chip, u8 *dccenteredholdtime50_ns, u8 *dccenteredzerotime50_ns, u8 *dcagc20_holdtime50_ns, u8 *dcagc20_zerotime50_ns)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_1_ADDR);

	*dccenteredholdtime50_ns = (local_val & ((u32)0x7F000000)) >> 24;
	*dccenteredzerotime50_ns = (local_val & ((u32)0x007F0000)) >> 16;
	*dcagc20_holdtime50_ns = (local_val & ((u32)0x00007F00)) >> 8;
	*dcagc20_zerotime50_ns = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagcdccomp_1_dccenteredholdtime_50_ns_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_1_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagcdccomp_1_dccenteredholdtime_50_ns_setf(struct cl_chip *chip, u8 dccenteredholdtime50ns)
{
	ASSERT_ERR_CHIP((((u32)dccenteredholdtime50ns << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDCCOMP_1_ADDR) & ~((u32)0x7F000000)) | ((u32)dccenteredholdtime50ns << 24));
}

static inline u8 riu_rwnxagcdccomp_1_dccenteredzerotime_50_ns_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_1_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagcdccomp_1_dccenteredzerotime_50_ns_setf(struct cl_chip *chip, u8 dccenteredzerotime50ns)
{
	ASSERT_ERR_CHIP((((u32)dccenteredzerotime50ns << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDCCOMP_1_ADDR) & ~((u32)0x007F0000)) | ((u32)dccenteredzerotime50ns << 16));
}

static inline u8 riu_rwnxagcdccomp_1_dcagc_20_holdtime_50_ns_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_1_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagcdccomp_1_dcagc_20_holdtime_50_ns_setf(struct cl_chip *chip, u8 dcagc20holdtime50ns)
{
	ASSERT_ERR_CHIP((((u32)dcagc20holdtime50ns << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDCCOMP_1_ADDR) & ~((u32)0x00007F00)) | ((u32)dcagc20holdtime50ns << 8));
}

static inline u8 riu_rwnxagcdccomp_1_dcagc_20_zerotime_50_ns_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_1_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagcdccomp_1_dcagc_20_zerotime_50_ns_setf(struct cl_chip *chip, u8 dcagc20zerotime50ns)
{
	ASSERT_ERR_CHIP((((u32)dcagc20zerotime50ns << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDCCOMP_1_ADDR) & ~((u32)0x0000007F)) | ((u32)dcagc20zerotime50ns << 0));
}

/**
 * @brief RWNXAGCDCCOMP_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:23 DELDCSTABLECC1            0x0
 *    22:16 DCRADARHOLDTIME50_NS      0x8
 *    14:08 DCRADARZEROTIME50_NS      0x0
 *    06:00 DELDCSTABLECC0            0x0
 * </pre>
 */
#define RIU_RWNXAGCDCCOMP_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000037C)
#define RIU_RWNXAGCDCCOMP_2_OFFSET      0x0000037C
#define RIU_RWNXAGCDCCOMP_2_INDEX       0x000000DF
#define RIU_RWNXAGCDCCOMP_2_RESET       0x00080000

static inline u32 riu_rwnxagcdccomp_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCDCCOMP_2_ADDR);
}

static inline void riu_rwnxagcdccomp_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCDCCOMP_2_DELDCSTABLECC_1_MASK    ((u32)0x3F800000)
#define RIU_RWNXAGCDCCOMP_2_DELDCSTABLECC_1_LSB    23
#define RIU_RWNXAGCDCCOMP_2_DELDCSTABLECC_1_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCDCCOMP_2_DCRADARHOLDTIME_50_NS_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCDCCOMP_2_DCRADARHOLDTIME_50_NS_LSB    16
#define RIU_RWNXAGCDCCOMP_2_DCRADARHOLDTIME_50_NS_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCDCCOMP_2_DCRADARZEROTIME_50_NS_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCDCCOMP_2_DCRADARZEROTIME_50_NS_LSB    8
#define RIU_RWNXAGCDCCOMP_2_DCRADARZEROTIME_50_NS_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCDCCOMP_2_DELDCSTABLECC_0_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCDCCOMP_2_DELDCSTABLECC_0_LSB    0
#define RIU_RWNXAGCDCCOMP_2_DELDCSTABLECC_0_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCDCCOMP_2_DELDCSTABLECC_1_RST    0x0
#define RIU_RWNXAGCDCCOMP_2_DCRADARHOLDTIME_50_NS_RST    0x8
#define RIU_RWNXAGCDCCOMP_2_DCRADARZEROTIME_50_NS_RST    0x0
#define RIU_RWNXAGCDCCOMP_2_DELDCSTABLECC_0_RST    0x0

static inline void riu_rwnxagcdccomp_2_pack(struct cl_chip *chip, u8 deldcstablecc1, u8 dcradarholdtime50_ns, u8 dcradarzerotime50_ns, u8 deldcstablecc0)
{
	ASSERT_ERR_CHIP((((u32)deldcstablecc1 << 23) & ~((u32)0x3F800000)) == 0);
	ASSERT_ERR_CHIP((((u32)dcradarholdtime50_ns << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)dcradarzerotime50_ns << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)deldcstablecc0 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_2_ADDR, ((u32)deldcstablecc1 << 23) | ((u32)dcradarholdtime50_ns << 16) | ((u32)dcradarzerotime50_ns << 8) | ((u32)deldcstablecc0 << 0));
}

static inline void riu_rwnxagcdccomp_2_unpack(struct cl_chip *chip, u8 *deldcstablecc1, u8 *dcradarholdtime50_ns, u8 *dcradarzerotime50_ns, u8 *deldcstablecc0)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_2_ADDR);

	*deldcstablecc1 = (local_val & ((u32)0x3F800000)) >> 23;
	*dcradarholdtime50_ns = (local_val & ((u32)0x007F0000)) >> 16;
	*dcradarzerotime50_ns = (local_val & ((u32)0x00007F00)) >> 8;
	*deldcstablecc0 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagcdccomp_2_deldcstablecc_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_2_ADDR);

	return (u8)((local_val & ((u32)0x3F800000)) >> 23);
}

static inline void riu_rwnxagcdccomp_2_deldcstablecc_1_setf(struct cl_chip *chip, u8 deldcstablecc1)
{
	ASSERT_ERR_CHIP((((u32)deldcstablecc1 << 23) & ~((u32)0x3F800000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDCCOMP_2_ADDR) & ~((u32)0x3F800000)) | ((u32)deldcstablecc1 << 23));
}

static inline u8 riu_rwnxagcdccomp_2_dcradarholdtime_50_ns_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_2_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagcdccomp_2_dcradarholdtime_50_ns_setf(struct cl_chip *chip, u8 dcradarholdtime50ns)
{
	ASSERT_ERR_CHIP((((u32)dcradarholdtime50ns << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDCCOMP_2_ADDR) & ~((u32)0x007F0000)) | ((u32)dcradarholdtime50ns << 16));
}

static inline u8 riu_rwnxagcdccomp_2_dcradarzerotime_50_ns_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_2_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagcdccomp_2_dcradarzerotime_50_ns_setf(struct cl_chip *chip, u8 dcradarzerotime50ns)
{
	ASSERT_ERR_CHIP((((u32)dcradarzerotime50ns << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDCCOMP_2_ADDR) & ~((u32)0x00007F00)) | ((u32)dcradarzerotime50ns << 8));
}

static inline u8 riu_rwnxagcdccomp_2_deldcstablecc_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDCCOMP_2_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagcdccomp_2_deldcstablecc_0_setf(struct cl_chip *chip, u8 deldcstablecc0)
{
	ASSERT_ERR_CHIP((((u32)deldcstablecc0 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDCCOMP_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDCCOMP_2_ADDR) & ~((u32)0x0000007F)) | ((u32)deldcstablecc0 << 0));
}

/**
 * @brief RWNXAGCEVT_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:26 EVT0_OP1                  0x14
 *    25:20 EVT0_OP2                  0x10
 *    19:14 EVT0_OP3                  0x1
 *    13    EVT0_PATHCOMB             0
 *    12:10 EVT0_OPCOMB               0x1
 *    09:00 EVT0_TGTADD               0x2
 * </pre>
 */
#define RIU_RWNXAGCEVT_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000380)
#define RIU_RWNXAGCEVT_0_OFFSET      0x00000380
#define RIU_RWNXAGCEVT_0_INDEX       0x000000E0
#define RIU_RWNXAGCEVT_0_RESET       0x51004402

static inline u32 riu_rwnxagcevt_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCEVT_0_ADDR);
}

static inline void riu_rwnxagcevt_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCEVT_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCEVT_0_EVT_0_OP_1_MASK    ((u32)0xFC000000)
#define RIU_RWNXAGCEVT_0_EVT_0_OP_1_LSB     26
#define RIU_RWNXAGCEVT_0_EVT_0_OP_1_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_0_EVT_0_OP_2_MASK    ((u32)0x03F00000)
#define RIU_RWNXAGCEVT_0_EVT_0_OP_2_LSB     20
#define RIU_RWNXAGCEVT_0_EVT_0_OP_2_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_0_EVT_0_OP_3_MASK    ((u32)0x000FC000)
#define RIU_RWNXAGCEVT_0_EVT_0_OP_3_LSB     14
#define RIU_RWNXAGCEVT_0_EVT_0_OP_3_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_0_EVT_0_PATHCOMB_BIT    ((u32)0x00002000)
#define RIU_RWNXAGCEVT_0_EVT_0_PATHCOMB_POS    13
#define RIU_RWNXAGCEVT_0_EVT_0_OPCOMB_MASK    ((u32)0x00001C00)
#define RIU_RWNXAGCEVT_0_EVT_0_OPCOMB_LSB    10
#define RIU_RWNXAGCEVT_0_EVT_0_OPCOMB_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCEVT_0_EVT_0_TGTADD_MASK    ((u32)0x000003FF)
#define RIU_RWNXAGCEVT_0_EVT_0_TGTADD_LSB    0
#define RIU_RWNXAGCEVT_0_EVT_0_TGTADD_WIDTH    ((u32)0x0000000A)

#define RIU_RWNXAGCEVT_0_EVT_0_OP_1_RST     0x14
#define RIU_RWNXAGCEVT_0_EVT_0_OP_2_RST     0x10
#define RIU_RWNXAGCEVT_0_EVT_0_OP_3_RST     0x1
#define RIU_RWNXAGCEVT_0_EVT_0_PATHCOMB_RST    0x0
#define RIU_RWNXAGCEVT_0_EVT_0_OPCOMB_RST    0x1
#define RIU_RWNXAGCEVT_0_EVT_0_TGTADD_RST    0x2

static inline void riu_rwnxagcevt_0_pack(struct cl_chip *chip, u8 evt0_op1, u8 evt0_op2, u8 evt0_op3, u8 evt0_pathcomb, u8 evt0_opcomb, u16 evt0_tgtadd)
{
	ASSERT_ERR_CHIP((((u32)evt0_op1 << 26) & ~((u32)0xFC000000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt0_op2 << 20) & ~((u32)0x03F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt0_op3 << 14) & ~((u32)0x000FC000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt0_pathcomb << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt0_opcomb << 10) & ~((u32)0x00001C00)) == 0);
	ASSERT_ERR_CHIP((((u32)evt0_tgtadd << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_0_ADDR, ((u32)evt0_op1 << 26) | ((u32)evt0_op2 << 20) | ((u32)evt0_op3 << 14) | ((u32)evt0_pathcomb << 13) | ((u32)evt0_opcomb << 10) | ((u32)evt0_tgtadd << 0));
}

static inline void riu_rwnxagcevt_0_unpack(struct cl_chip *chip, u8 *evt0_op1, u8 *evt0_op2, u8 *evt0_op3, u8 *evt0_pathcomb, u8 *evt0_opcomb, u16 *evt0_tgtadd)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_0_ADDR);

	*evt0_op1 = (local_val & ((u32)0xFC000000)) >> 26;
	*evt0_op2 = (local_val & ((u32)0x03F00000)) >> 20;
	*evt0_op3 = (local_val & ((u32)0x000FC000)) >> 14;
	*evt0_pathcomb = (local_val & ((u32)0x00002000)) >> 13;
	*evt0_opcomb = (local_val & ((u32)0x00001C00)) >> 10;
	*evt0_tgtadd = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u8 riu_rwnxagcevt_0_evt_0_op_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_0_ADDR);

	return (u8)((local_val & ((u32)0xFC000000)) >> 26);
}

static inline void riu_rwnxagcevt_0_evt_0_op_1_setf(struct cl_chip *chip, u8 evt0op1)
{
	ASSERT_ERR_CHIP((((u32)evt0op1 << 26) & ~((u32)0xFC000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_0_ADDR) & ~((u32)0xFC000000)) | ((u32)evt0op1 << 26));
}

static inline u8 riu_rwnxagcevt_0_evt_0_op_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_0_ADDR);

	return (u8)((local_val & ((u32)0x03F00000)) >> 20);
}

static inline void riu_rwnxagcevt_0_evt_0_op_2_setf(struct cl_chip *chip, u8 evt0op2)
{
	ASSERT_ERR_CHIP((((u32)evt0op2 << 20) & ~((u32)0x03F00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_0_ADDR) & ~((u32)0x03F00000)) | ((u32)evt0op2 << 20));
}

static inline u8 riu_rwnxagcevt_0_evt_0_op_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_0_ADDR);

	return (u8)((local_val & ((u32)0x000FC000)) >> 14);
}

static inline void riu_rwnxagcevt_0_evt_0_op_3_setf(struct cl_chip *chip, u8 evt0op3)
{
	ASSERT_ERR_CHIP((((u32)evt0op3 << 14) & ~((u32)0x000FC000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_0_ADDR) & ~((u32)0x000FC000)) | ((u32)evt0op3 << 14));
}

static inline u8 riu_rwnxagcevt_0_evt_0_pathcomb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_0_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_rwnxagcevt_0_evt_0_pathcomb_setf(struct cl_chip *chip, u8 evt0pathcomb)
{
	ASSERT_ERR_CHIP((((u32)evt0pathcomb << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_0_ADDR) & ~((u32)0x00002000)) | ((u32)evt0pathcomb << 13));
}

static inline u8 riu_rwnxagcevt_0_evt_0_opcomb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_0_ADDR);

	return (u8)((local_val & ((u32)0x00001C00)) >> 10);
}

static inline void riu_rwnxagcevt_0_evt_0_opcomb_setf(struct cl_chip *chip, u8 evt0opcomb)
{
	ASSERT_ERR_CHIP((((u32)evt0opcomb << 10) & ~((u32)0x00001C00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_0_ADDR) & ~((u32)0x00001C00)) | ((u32)evt0opcomb << 10));
}

static inline u16 riu_rwnxagcevt_0_evt_0_tgtadd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_0_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_rwnxagcevt_0_evt_0_tgtadd_setf(struct cl_chip *chip, u16 evt0tgtadd)
{
	ASSERT_ERR_CHIP((((u32)evt0tgtadd << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_0_ADDR) & ~((u32)0x000003FF)) | ((u32)evt0tgtadd << 0));
}

/**
 * @brief RWNXAGCEVT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:26 EVT1_OP1                  0x15
 *    25:20 EVT1_OP2                  0x17
 *    19:14 EVT1_OP3                  0xF
 *    13    EVT1_PATHCOMB             0
 *    12:10 EVT1_OPCOMB               0x2
 *    09:00 EVT1_TGTADD               0x5
 * </pre>
 */
#define RIU_RWNXAGCEVT_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000384)
#define RIU_RWNXAGCEVT_1_OFFSET      0x00000384
#define RIU_RWNXAGCEVT_1_INDEX       0x000000E1
#define RIU_RWNXAGCEVT_1_RESET       0x5573C805

static inline u32 riu_rwnxagcevt_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCEVT_1_ADDR);
}

static inline void riu_rwnxagcevt_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCEVT_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCEVT_1_EVT_1_OP_1_MASK    ((u32)0xFC000000)
#define RIU_RWNXAGCEVT_1_EVT_1_OP_1_LSB     26
#define RIU_RWNXAGCEVT_1_EVT_1_OP_1_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_1_EVT_1_OP_2_MASK    ((u32)0x03F00000)
#define RIU_RWNXAGCEVT_1_EVT_1_OP_2_LSB     20
#define RIU_RWNXAGCEVT_1_EVT_1_OP_2_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_1_EVT_1_OP_3_MASK    ((u32)0x000FC000)
#define RIU_RWNXAGCEVT_1_EVT_1_OP_3_LSB     14
#define RIU_RWNXAGCEVT_1_EVT_1_OP_3_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_1_EVT_1_PATHCOMB_BIT    ((u32)0x00002000)
#define RIU_RWNXAGCEVT_1_EVT_1_PATHCOMB_POS    13
#define RIU_RWNXAGCEVT_1_EVT_1_OPCOMB_MASK    ((u32)0x00001C00)
#define RIU_RWNXAGCEVT_1_EVT_1_OPCOMB_LSB    10
#define RIU_RWNXAGCEVT_1_EVT_1_OPCOMB_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCEVT_1_EVT_1_TGTADD_MASK    ((u32)0x000003FF)
#define RIU_RWNXAGCEVT_1_EVT_1_TGTADD_LSB    0
#define RIU_RWNXAGCEVT_1_EVT_1_TGTADD_WIDTH    ((u32)0x0000000A)

#define RIU_RWNXAGCEVT_1_EVT_1_OP_1_RST     0x15
#define RIU_RWNXAGCEVT_1_EVT_1_OP_2_RST     0x17
#define RIU_RWNXAGCEVT_1_EVT_1_OP_3_RST     0xF
#define RIU_RWNXAGCEVT_1_EVT_1_PATHCOMB_RST    0x0
#define RIU_RWNXAGCEVT_1_EVT_1_OPCOMB_RST    0x2
#define RIU_RWNXAGCEVT_1_EVT_1_TGTADD_RST    0x5

static inline void riu_rwnxagcevt_1_pack(struct cl_chip *chip, u8 evt1_op1, u8 evt1_op2, u8 evt1_op3, u8 evt1_pathcomb, u8 evt1_opcomb, u16 evt1_tgtadd)
{
	ASSERT_ERR_CHIP((((u32)evt1_op1 << 26) & ~((u32)0xFC000000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt1_op2 << 20) & ~((u32)0x03F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt1_op3 << 14) & ~((u32)0x000FC000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt1_pathcomb << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt1_opcomb << 10) & ~((u32)0x00001C00)) == 0);
	ASSERT_ERR_CHIP((((u32)evt1_tgtadd << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_1_ADDR, ((u32)evt1_op1 << 26) | ((u32)evt1_op2 << 20) | ((u32)evt1_op3 << 14) | ((u32)evt1_pathcomb << 13) | ((u32)evt1_opcomb << 10) | ((u32)evt1_tgtadd << 0));
}

static inline void riu_rwnxagcevt_1_unpack(struct cl_chip *chip, u8 *evt1_op1, u8 *evt1_op2, u8 *evt1_op3, u8 *evt1_pathcomb, u8 *evt1_opcomb, u16 *evt1_tgtadd)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_1_ADDR);

	*evt1_op1 = (local_val & ((u32)0xFC000000)) >> 26;
	*evt1_op2 = (local_val & ((u32)0x03F00000)) >> 20;
	*evt1_op3 = (local_val & ((u32)0x000FC000)) >> 14;
	*evt1_pathcomb = (local_val & ((u32)0x00002000)) >> 13;
	*evt1_opcomb = (local_val & ((u32)0x00001C00)) >> 10;
	*evt1_tgtadd = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u8 riu_rwnxagcevt_1_evt_1_op_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_1_ADDR);

	return (u8)((local_val & ((u32)0xFC000000)) >> 26);
}

static inline void riu_rwnxagcevt_1_evt_1_op_1_setf(struct cl_chip *chip, u8 evt1op1)
{
	ASSERT_ERR_CHIP((((u32)evt1op1 << 26) & ~((u32)0xFC000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_1_ADDR) & ~((u32)0xFC000000)) | ((u32)evt1op1 << 26));
}

static inline u8 riu_rwnxagcevt_1_evt_1_op_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_1_ADDR);

	return (u8)((local_val & ((u32)0x03F00000)) >> 20);
}

static inline void riu_rwnxagcevt_1_evt_1_op_2_setf(struct cl_chip *chip, u8 evt1op2)
{
	ASSERT_ERR_CHIP((((u32)evt1op2 << 20) & ~((u32)0x03F00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_1_ADDR) & ~((u32)0x03F00000)) | ((u32)evt1op2 << 20));
}

static inline u8 riu_rwnxagcevt_1_evt_1_op_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_1_ADDR);

	return (u8)((local_val & ((u32)0x000FC000)) >> 14);
}

static inline void riu_rwnxagcevt_1_evt_1_op_3_setf(struct cl_chip *chip, u8 evt1op3)
{
	ASSERT_ERR_CHIP((((u32)evt1op3 << 14) & ~((u32)0x000FC000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_1_ADDR) & ~((u32)0x000FC000)) | ((u32)evt1op3 << 14));
}

static inline u8 riu_rwnxagcevt_1_evt_1_pathcomb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_1_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_rwnxagcevt_1_evt_1_pathcomb_setf(struct cl_chip *chip, u8 evt1pathcomb)
{
	ASSERT_ERR_CHIP((((u32)evt1pathcomb << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_1_ADDR) & ~((u32)0x00002000)) | ((u32)evt1pathcomb << 13));
}

static inline u8 riu_rwnxagcevt_1_evt_1_opcomb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_1_ADDR);

	return (u8)((local_val & ((u32)0x00001C00)) >> 10);
}

static inline void riu_rwnxagcevt_1_evt_1_opcomb_setf(struct cl_chip *chip, u8 evt1opcomb)
{
	ASSERT_ERR_CHIP((((u32)evt1opcomb << 10) & ~((u32)0x00001C00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_1_ADDR) & ~((u32)0x00001C00)) | ((u32)evt1opcomb << 10));
}

static inline u16 riu_rwnxagcevt_1_evt_1_tgtadd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_1_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_rwnxagcevt_1_evt_1_tgtadd_setf(struct cl_chip *chip, u16 evt1tgtadd)
{
	ASSERT_ERR_CHIP((((u32)evt1tgtadd << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_1_ADDR) & ~((u32)0x000003FF)) | ((u32)evt1tgtadd << 0));
}

/**
 * @brief RWNXAGCEVT_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:26 EVT2_OP1                  0x19
 *    25:20 EVT2_OP2                  0x0
 *    19:14 EVT2_OP3                  0xE
 *    13    EVT2_PATHCOMB             1
 *    12:10 EVT2_OPCOMB               0x2
 *    09:00 EVT2_TGTADD               0x8
 * </pre>
 */
#define RIU_RWNXAGCEVT_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000388)
#define RIU_RWNXAGCEVT_2_OFFSET      0x00000388
#define RIU_RWNXAGCEVT_2_INDEX       0x000000E2
#define RIU_RWNXAGCEVT_2_RESET       0x6403A808

static inline u32 riu_rwnxagcevt_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCEVT_2_ADDR);
}

static inline void riu_rwnxagcevt_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCEVT_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCEVT_2_EVT_2_OP_1_MASK    ((u32)0xFC000000)
#define RIU_RWNXAGCEVT_2_EVT_2_OP_1_LSB     26
#define RIU_RWNXAGCEVT_2_EVT_2_OP_1_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_2_EVT_2_OP_2_MASK    ((u32)0x03F00000)
#define RIU_RWNXAGCEVT_2_EVT_2_OP_2_LSB     20
#define RIU_RWNXAGCEVT_2_EVT_2_OP_2_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_2_EVT_2_OP_3_MASK    ((u32)0x000FC000)
#define RIU_RWNXAGCEVT_2_EVT_2_OP_3_LSB     14
#define RIU_RWNXAGCEVT_2_EVT_2_OP_3_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_2_EVT_2_PATHCOMB_BIT    ((u32)0x00002000)
#define RIU_RWNXAGCEVT_2_EVT_2_PATHCOMB_POS    13
#define RIU_RWNXAGCEVT_2_EVT_2_OPCOMB_MASK    ((u32)0x00001C00)
#define RIU_RWNXAGCEVT_2_EVT_2_OPCOMB_LSB    10
#define RIU_RWNXAGCEVT_2_EVT_2_OPCOMB_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCEVT_2_EVT_2_TGTADD_MASK    ((u32)0x000003FF)
#define RIU_RWNXAGCEVT_2_EVT_2_TGTADD_LSB    0
#define RIU_RWNXAGCEVT_2_EVT_2_TGTADD_WIDTH    ((u32)0x0000000A)

#define RIU_RWNXAGCEVT_2_EVT_2_OP_1_RST     0x19
#define RIU_RWNXAGCEVT_2_EVT_2_OP_2_RST     0x0
#define RIU_RWNXAGCEVT_2_EVT_2_OP_3_RST     0xE
#define RIU_RWNXAGCEVT_2_EVT_2_PATHCOMB_RST    0x1
#define RIU_RWNXAGCEVT_2_EVT_2_OPCOMB_RST    0x2
#define RIU_RWNXAGCEVT_2_EVT_2_TGTADD_RST    0x8

static inline void riu_rwnxagcevt_2_pack(struct cl_chip *chip, u8 evt2_op1, u8 evt2_op2, u8 evt2_op3, u8 evt2_pathcomb, u8 evt2_opcomb, u16 evt2_tgtadd)
{
	ASSERT_ERR_CHIP((((u32)evt2_op1 << 26) & ~((u32)0xFC000000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt2_op2 << 20) & ~((u32)0x03F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt2_op3 << 14) & ~((u32)0x000FC000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt2_pathcomb << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt2_opcomb << 10) & ~((u32)0x00001C00)) == 0);
	ASSERT_ERR_CHIP((((u32)evt2_tgtadd << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_2_ADDR, ((u32)evt2_op1 << 26) | ((u32)evt2_op2 << 20) | ((u32)evt2_op3 << 14) | ((u32)evt2_pathcomb << 13) | ((u32)evt2_opcomb << 10) | ((u32)evt2_tgtadd << 0));
}

static inline void riu_rwnxagcevt_2_unpack(struct cl_chip *chip, u8 *evt2_op1, u8 *evt2_op2, u8 *evt2_op3, u8 *evt2_pathcomb, u8 *evt2_opcomb, u16 *evt2_tgtadd)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_2_ADDR);

	*evt2_op1 = (local_val & ((u32)0xFC000000)) >> 26;
	*evt2_op2 = (local_val & ((u32)0x03F00000)) >> 20;
	*evt2_op3 = (local_val & ((u32)0x000FC000)) >> 14;
	*evt2_pathcomb = (local_val & ((u32)0x00002000)) >> 13;
	*evt2_opcomb = (local_val & ((u32)0x00001C00)) >> 10;
	*evt2_tgtadd = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u8 riu_rwnxagcevt_2_evt_2_op_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_2_ADDR);

	return (u8)((local_val & ((u32)0xFC000000)) >> 26);
}

static inline void riu_rwnxagcevt_2_evt_2_op_1_setf(struct cl_chip *chip, u8 evt2op1)
{
	ASSERT_ERR_CHIP((((u32)evt2op1 << 26) & ~((u32)0xFC000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_2_ADDR) & ~((u32)0xFC000000)) | ((u32)evt2op1 << 26));
}

static inline u8 riu_rwnxagcevt_2_evt_2_op_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_2_ADDR);

	return (u8)((local_val & ((u32)0x03F00000)) >> 20);
}

static inline void riu_rwnxagcevt_2_evt_2_op_2_setf(struct cl_chip *chip, u8 evt2op2)
{
	ASSERT_ERR_CHIP((((u32)evt2op2 << 20) & ~((u32)0x03F00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_2_ADDR) & ~((u32)0x03F00000)) | ((u32)evt2op2 << 20));
}

static inline u8 riu_rwnxagcevt_2_evt_2_op_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_2_ADDR);

	return (u8)((local_val & ((u32)0x000FC000)) >> 14);
}

static inline void riu_rwnxagcevt_2_evt_2_op_3_setf(struct cl_chip *chip, u8 evt2op3)
{
	ASSERT_ERR_CHIP((((u32)evt2op3 << 14) & ~((u32)0x000FC000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_2_ADDR) & ~((u32)0x000FC000)) | ((u32)evt2op3 << 14));
}

static inline u8 riu_rwnxagcevt_2_evt_2_pathcomb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_2_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_rwnxagcevt_2_evt_2_pathcomb_setf(struct cl_chip *chip, u8 evt2pathcomb)
{
	ASSERT_ERR_CHIP((((u32)evt2pathcomb << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_2_ADDR) & ~((u32)0x00002000)) | ((u32)evt2pathcomb << 13));
}

static inline u8 riu_rwnxagcevt_2_evt_2_opcomb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_2_ADDR);

	return (u8)((local_val & ((u32)0x00001C00)) >> 10);
}

static inline void riu_rwnxagcevt_2_evt_2_opcomb_setf(struct cl_chip *chip, u8 evt2opcomb)
{
	ASSERT_ERR_CHIP((((u32)evt2opcomb << 10) & ~((u32)0x00001C00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_2_ADDR) & ~((u32)0x00001C00)) | ((u32)evt2opcomb << 10));
}

static inline u16 riu_rwnxagcevt_2_evt_2_tgtadd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_2_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_rwnxagcevt_2_evt_2_tgtadd_setf(struct cl_chip *chip, u16 evt2tgtadd)
{
	ASSERT_ERR_CHIP((((u32)evt2tgtadd << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_2_ADDR) & ~((u32)0x000003FF)) | ((u32)evt2tgtadd << 0));
}

/**
 * @brief RWNXAGCEVT_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:26 EVT3_OP1                  0x13
 *    25:20 EVT3_OP2                  0x11
 *    19:14 EVT3_OP3                  0x12
 *    13    EVT3_PATHCOMB             0
 *    12:10 EVT3_OPCOMB               0x5
 *    09:00 EVT3_TGTADD               0xB
 * </pre>
 */
#define RIU_RWNXAGCEVT_3_ADDR        (REG_RIU_BASE_ADDR + 0x0000038C)
#define RIU_RWNXAGCEVT_3_OFFSET      0x0000038C
#define RIU_RWNXAGCEVT_3_INDEX       0x000000E3
#define RIU_RWNXAGCEVT_3_RESET       0x4D14940B

static inline u32 riu_rwnxagcevt_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCEVT_3_ADDR);
}

static inline void riu_rwnxagcevt_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCEVT_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCEVT_3_EVT_3_OP_1_MASK    ((u32)0xFC000000)
#define RIU_RWNXAGCEVT_3_EVT_3_OP_1_LSB     26
#define RIU_RWNXAGCEVT_3_EVT_3_OP_1_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_3_EVT_3_OP_2_MASK    ((u32)0x03F00000)
#define RIU_RWNXAGCEVT_3_EVT_3_OP_2_LSB     20
#define RIU_RWNXAGCEVT_3_EVT_3_OP_2_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_3_EVT_3_OP_3_MASK    ((u32)0x000FC000)
#define RIU_RWNXAGCEVT_3_EVT_3_OP_3_LSB     14
#define RIU_RWNXAGCEVT_3_EVT_3_OP_3_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_3_EVT_3_PATHCOMB_BIT    ((u32)0x00002000)
#define RIU_RWNXAGCEVT_3_EVT_3_PATHCOMB_POS    13
#define RIU_RWNXAGCEVT_3_EVT_3_OPCOMB_MASK    ((u32)0x00001C00)
#define RIU_RWNXAGCEVT_3_EVT_3_OPCOMB_LSB    10
#define RIU_RWNXAGCEVT_3_EVT_3_OPCOMB_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCEVT_3_EVT_3_TGTADD_MASK    ((u32)0x000003FF)
#define RIU_RWNXAGCEVT_3_EVT_3_TGTADD_LSB    0
#define RIU_RWNXAGCEVT_3_EVT_3_TGTADD_WIDTH    ((u32)0x0000000A)

#define RIU_RWNXAGCEVT_3_EVT_3_OP_1_RST     0x13
#define RIU_RWNXAGCEVT_3_EVT_3_OP_2_RST     0x11
#define RIU_RWNXAGCEVT_3_EVT_3_OP_3_RST     0x12
#define RIU_RWNXAGCEVT_3_EVT_3_PATHCOMB_RST    0x0
#define RIU_RWNXAGCEVT_3_EVT_3_OPCOMB_RST    0x5
#define RIU_RWNXAGCEVT_3_EVT_3_TGTADD_RST    0xB

static inline void riu_rwnxagcevt_3_pack(struct cl_chip *chip, u8 evt3_op1, u8 evt3_op2, u8 evt3_op3, u8 evt3_pathcomb, u8 evt3_opcomb, u16 evt3_tgtadd)
{
	ASSERT_ERR_CHIP((((u32)evt3_op1 << 26) & ~((u32)0xFC000000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt3_op2 << 20) & ~((u32)0x03F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt3_op3 << 14) & ~((u32)0x000FC000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt3_pathcomb << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt3_opcomb << 10) & ~((u32)0x00001C00)) == 0);
	ASSERT_ERR_CHIP((((u32)evt3_tgtadd << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_3_ADDR, ((u32)evt3_op1 << 26) | ((u32)evt3_op2 << 20) | ((u32)evt3_op3 << 14) | ((u32)evt3_pathcomb << 13) | ((u32)evt3_opcomb << 10) | ((u32)evt3_tgtadd << 0));
}

static inline void riu_rwnxagcevt_3_unpack(struct cl_chip *chip, u8 *evt3_op1, u8 *evt3_op2, u8 *evt3_op3, u8 *evt3_pathcomb, u8 *evt3_opcomb, u16 *evt3_tgtadd)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_3_ADDR);

	*evt3_op1 = (local_val & ((u32)0xFC000000)) >> 26;
	*evt3_op2 = (local_val & ((u32)0x03F00000)) >> 20;
	*evt3_op3 = (local_val & ((u32)0x000FC000)) >> 14;
	*evt3_pathcomb = (local_val & ((u32)0x00002000)) >> 13;
	*evt3_opcomb = (local_val & ((u32)0x00001C00)) >> 10;
	*evt3_tgtadd = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u8 riu_rwnxagcevt_3_evt_3_op_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_3_ADDR);

	return (u8)((local_val & ((u32)0xFC000000)) >> 26);
}

static inline void riu_rwnxagcevt_3_evt_3_op_1_setf(struct cl_chip *chip, u8 evt3op1)
{
	ASSERT_ERR_CHIP((((u32)evt3op1 << 26) & ~((u32)0xFC000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_3_ADDR) & ~((u32)0xFC000000)) | ((u32)evt3op1 << 26));
}

static inline u8 riu_rwnxagcevt_3_evt_3_op_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_3_ADDR);

	return (u8)((local_val & ((u32)0x03F00000)) >> 20);
}

static inline void riu_rwnxagcevt_3_evt_3_op_2_setf(struct cl_chip *chip, u8 evt3op2)
{
	ASSERT_ERR_CHIP((((u32)evt3op2 << 20) & ~((u32)0x03F00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_3_ADDR) & ~((u32)0x03F00000)) | ((u32)evt3op2 << 20));
}

static inline u8 riu_rwnxagcevt_3_evt_3_op_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_3_ADDR);

	return (u8)((local_val & ((u32)0x000FC000)) >> 14);
}

static inline void riu_rwnxagcevt_3_evt_3_op_3_setf(struct cl_chip *chip, u8 evt3op3)
{
	ASSERT_ERR_CHIP((((u32)evt3op3 << 14) & ~((u32)0x000FC000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_3_ADDR) & ~((u32)0x000FC000)) | ((u32)evt3op3 << 14));
}

static inline u8 riu_rwnxagcevt_3_evt_3_pathcomb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_3_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_rwnxagcevt_3_evt_3_pathcomb_setf(struct cl_chip *chip, u8 evt3pathcomb)
{
	ASSERT_ERR_CHIP((((u32)evt3pathcomb << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_3_ADDR) & ~((u32)0x00002000)) | ((u32)evt3pathcomb << 13));
}

static inline u8 riu_rwnxagcevt_3_evt_3_opcomb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_3_ADDR);

	return (u8)((local_val & ((u32)0x00001C00)) >> 10);
}

static inline void riu_rwnxagcevt_3_evt_3_opcomb_setf(struct cl_chip *chip, u8 evt3opcomb)
{
	ASSERT_ERR_CHIP((((u32)evt3opcomb << 10) & ~((u32)0x00001C00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_3_ADDR) & ~((u32)0x00001C00)) | ((u32)evt3opcomb << 10));
}

static inline u16 riu_rwnxagcevt_3_evt_3_tgtadd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_3_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_rwnxagcevt_3_evt_3_tgtadd_setf(struct cl_chip *chip, u16 evt3tgtadd)
{
	ASSERT_ERR_CHIP((((u32)evt3tgtadd << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_3_ADDR) & ~((u32)0x000003FF)) | ((u32)evt3tgtadd << 0));
}

/**
 * @brief RWNXAGCCNTL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:26 COMBPATHSEL               0x3F
 *    25:20 GAINKEEP                  0x0
 *    16    HTSTFGAINEN               1
 *    15    NOISE_CAPTURE_DELAY_MODE  0
 *    14    EST_PATH_SEL_2            0
 *    13    CCA_MDM_ST_CLEAR          0
 *    12    AGCFSMRESET               0
 *    11    RADARDETEN                0
 *    10    RIFSDETEN                 1
 *    09    DSSSONLY                  0
 *    08    OFDMONLY                  0
 *    07:04 GPSTATUS                  0x0
 *    03    EST_PATH_SEL              0
 *    01    ADC_SEL_RADAR_DETECTOR    0
 *    00    ADC_SEL_COMP_MODULE       0
 * </pre>
 */
#define RIU_RWNXAGCCNTL_ADDR        (REG_RIU_BASE_ADDR + 0x00000390)
#define RIU_RWNXAGCCNTL_OFFSET      0x00000390
#define RIU_RWNXAGCCNTL_INDEX       0x000000E4
#define RIU_RWNXAGCCNTL_RESET       0xFC010400

static inline u32 riu_rwnxagccntl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);
}

static inline void riu_rwnxagccntl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCCNTL_COMBPATHSEL_MASK    ((u32)0xFC000000)
#define RIU_RWNXAGCCNTL_COMBPATHSEL_LSB     26
#define RIU_RWNXAGCCNTL_COMBPATHSEL_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCCNTL_GAINKEEP_MASK       ((u32)0x03F00000)
#define RIU_RWNXAGCCNTL_GAINKEEP_LSB        20
#define RIU_RWNXAGCCNTL_GAINKEEP_WIDTH      ((u32)0x00000006)
#define RIU_RWNXAGCCNTL_HTSTFGAINEN_BIT     ((u32)0x00010000)
#define RIU_RWNXAGCCNTL_HTSTFGAINEN_POS     16
#define RIU_RWNXAGCCNTL_NOISE_CAPTURE_DELAY_MODE_BIT    ((u32)0x00008000)
#define RIU_RWNXAGCCNTL_NOISE_CAPTURE_DELAY_MODE_POS    15
#define RIU_RWNXAGCCNTL_EST_PATH_SEL_2_BIT    ((u32)0x00004000)
#define RIU_RWNXAGCCNTL_EST_PATH_SEL_2_POS    14
#define RIU_RWNXAGCCNTL_CCA_MDM_ST_CLEAR_BIT    ((u32)0x00002000)
#define RIU_RWNXAGCCNTL_CCA_MDM_ST_CLEAR_POS    13
#define RIU_RWNXAGCCNTL_AGCFSMRESET_BIT     ((u32)0x00001000)
#define RIU_RWNXAGCCNTL_AGCFSMRESET_POS     12
#define RIU_RWNXAGCCNTL_RADARDETEN_BIT      ((u32)0x00000800)
#define RIU_RWNXAGCCNTL_RADARDETEN_POS      11
#define RIU_RWNXAGCCNTL_RIFSDETEN_BIT       ((u32)0x00000400)
#define RIU_RWNXAGCCNTL_RIFSDETEN_POS       10
#define RIU_RWNXAGCCNTL_DSSSONLY_BIT        ((u32)0x00000200)
#define RIU_RWNXAGCCNTL_DSSSONLY_POS        9
#define RIU_RWNXAGCCNTL_OFDMONLY_BIT        ((u32)0x00000100)
#define RIU_RWNXAGCCNTL_OFDMONLY_POS        8
#define RIU_RWNXAGCCNTL_GPSTATUS_MASK       ((u32)0x000000F0)
#define RIU_RWNXAGCCNTL_GPSTATUS_LSB        4
#define RIU_RWNXAGCCNTL_GPSTATUS_WIDTH      ((u32)0x00000004)
#define RIU_RWNXAGCCNTL_EST_PATH_SEL_BIT    ((u32)0x00000008)
#define RIU_RWNXAGCCNTL_EST_PATH_SEL_POS    3
#define RIU_RWNXAGCCNTL_ADC_SEL_RADAR_DETECTOR_BIT    ((u32)0x00000002)
#define RIU_RWNXAGCCNTL_ADC_SEL_RADAR_DETECTOR_POS    1
#define RIU_RWNXAGCCNTL_ADC_SEL_COMP_MODULE_BIT    ((u32)0x00000001)
#define RIU_RWNXAGCCNTL_ADC_SEL_COMP_MODULE_POS    0

#define RIU_RWNXAGCCNTL_COMBPATHSEL_RST     0x3F
#define RIU_RWNXAGCCNTL_GAINKEEP_RST        0x0
#define RIU_RWNXAGCCNTL_HTSTFGAINEN_RST     0x1
#define RIU_RWNXAGCCNTL_NOISE_CAPTURE_DELAY_MODE_RST    0x0
#define RIU_RWNXAGCCNTL_EST_PATH_SEL_2_RST    0x0
#define RIU_RWNXAGCCNTL_CCA_MDM_ST_CLEAR_RST    0x0
#define RIU_RWNXAGCCNTL_AGCFSMRESET_RST     0x0
#define RIU_RWNXAGCCNTL_RADARDETEN_RST      0x0
#define RIU_RWNXAGCCNTL_RIFSDETEN_RST       0x1
#define RIU_RWNXAGCCNTL_DSSSONLY_RST        0x0
#define RIU_RWNXAGCCNTL_OFDMONLY_RST        0x0
#define RIU_RWNXAGCCNTL_GPSTATUS_RST        0x0
#define RIU_RWNXAGCCNTL_EST_PATH_SEL_RST    0x0
#define RIU_RWNXAGCCNTL_ADC_SEL_RADAR_DETECTOR_RST    0x0
#define RIU_RWNXAGCCNTL_ADC_SEL_COMP_MODULE_RST    0x0

static inline void riu_rwnxagccntl_pack(struct cl_chip *chip, u8 combpathsel, u8 gainkeep, u8 htstfgainen, u8 noise_capture_delay_mode, u8 est_path_sel_2, u8 cca_mdm_st_clear, u8 agcfsmreset, u8 radardeten, u8 rifsdeten, u8 dsssonly, u8 ofdmonly, u8 gpstatus, u8 est_path_sel, u8 adc_sel_radar_detector, u8 adc_sel_comp_module)
{
	ASSERT_ERR_CHIP((((u32)combpathsel << 26) & ~((u32)0xFC000000)) == 0);
	ASSERT_ERR_CHIP((((u32)gainkeep << 20) & ~((u32)0x03F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)htstfgainen << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)noise_capture_delay_mode << 15) & ~((u32)0x00008000)) == 0);
	ASSERT_ERR_CHIP((((u32)est_path_sel_2 << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)cca_mdm_st_clear << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)agcfsmreset << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)radardeten << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)rifsdeten << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)dsssonly << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)ofdmonly << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)gpstatus << 4) & ~((u32)0x000000F0)) == 0);
	ASSERT_ERR_CHIP((((u32)est_path_sel << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)adc_sel_radar_detector << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)adc_sel_comp_module << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, ((u32)combpathsel << 26) | ((u32)gainkeep << 20) | ((u32)htstfgainen << 16) | ((u32)noise_capture_delay_mode << 15) | ((u32)est_path_sel_2 << 14) | ((u32)cca_mdm_st_clear << 13) | ((u32)agcfsmreset << 12) | ((u32)radardeten << 11) | ((u32)rifsdeten << 10) | ((u32)dsssonly << 9) | ((u32)ofdmonly << 8) | ((u32)gpstatus << 4) | ((u32)est_path_sel << 3) | ((u32)adc_sel_radar_detector << 1) | ((u32)adc_sel_comp_module << 0));
}

static inline void riu_rwnxagccntl_unpack(struct cl_chip *chip, u8 *combpathsel, u8 *gainkeep, u8 *htstfgainen, u8 *noise_capture_delay_mode, u8 *est_path_sel_2, u8 *cca_mdm_st_clear, u8 *agcfsmreset, u8 *radardeten, u8 *rifsdeten, u8 *dsssonly, u8 *ofdmonly, u8 *gpstatus, u8 *est_path_sel, u8 *adc_sel_radar_detector, u8 *adc_sel_comp_module)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);

	*combpathsel = (local_val & ((u32)0xFC000000)) >> 26;
	*gainkeep = (local_val & ((u32)0x03F00000)) >> 20;
	*htstfgainen = (local_val & ((u32)0x00010000)) >> 16;
	*noise_capture_delay_mode = (local_val & ((u32)0x00008000)) >> 15;
	*est_path_sel_2 = (local_val & ((u32)0x00004000)) >> 14;
	*cca_mdm_st_clear = (local_val & ((u32)0x00002000)) >> 13;
	*agcfsmreset = (local_val & ((u32)0x00001000)) >> 12;
	*radardeten = (local_val & ((u32)0x00000800)) >> 11;
	*rifsdeten = (local_val & ((u32)0x00000400)) >> 10;
	*dsssonly = (local_val & ((u32)0x00000200)) >> 9;
	*ofdmonly = (local_val & ((u32)0x00000100)) >> 8;
	*gpstatus = (local_val & ((u32)0x000000F0)) >> 4;
	*est_path_sel = (local_val & ((u32)0x00000008)) >> 3;
	*adc_sel_radar_detector = (local_val & ((u32)0x00000002)) >> 1;
	*adc_sel_comp_module = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_rwnxagccntl_combpathsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);

	return (u8)((local_val & ((u32)0xFC000000)) >> 26);
}

static inline void riu_rwnxagccntl_combpathsel_setf(struct cl_chip *chip, u8 combpathsel)
{
	ASSERT_ERR_CHIP((((u32)combpathsel << 26) & ~((u32)0xFC000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR) & ~((u32)0xFC000000)) | ((u32)combpathsel << 26));
}

static inline u8 riu_rwnxagccntl_gainkeep_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);

	return (u8)((local_val & ((u32)0x03F00000)) >> 20);
}

static inline void riu_rwnxagccntl_gainkeep_setf(struct cl_chip *chip, u8 gainkeep)
{
	ASSERT_ERR_CHIP((((u32)gainkeep << 20) & ~((u32)0x03F00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR) & ~((u32)0x03F00000)) | ((u32)gainkeep << 20));
}

static inline u8 riu_rwnxagccntl_htstfgainen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void riu_rwnxagccntl_htstfgainen_setf(struct cl_chip *chip, u8 htstfgainen)
{
	ASSERT_ERR_CHIP((((u32)htstfgainen << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR) & ~((u32)0x00010000)) | ((u32)htstfgainen << 16));
}

static inline u8 riu_rwnxagccntl_noise_capture_delay_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline void riu_rwnxagccntl_noise_capture_delay_mode_setf(struct cl_chip *chip, u8 noisecapturedelaymode)
{
	ASSERT_ERR_CHIP((((u32)noisecapturedelaymode << 15) & ~((u32)0x00008000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR) & ~((u32)0x00008000)) | ((u32)noisecapturedelaymode << 15));
}

static inline u8 riu_rwnxagccntl_est_path_sel_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void riu_rwnxagccntl_est_path_sel_2_setf(struct cl_chip *chip, u8 estpathsel2)
{
	ASSERT_ERR_CHIP((((u32)estpathsel2 << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR) & ~((u32)0x00004000)) | ((u32)estpathsel2 << 14));
}

static inline u8 riu_rwnxagccntl_cca_mdm_st_clear_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_rwnxagccntl_cca_mdm_st_clear_setf(struct cl_chip *chip, u8 ccamdmstclear)
{
	ASSERT_ERR_CHIP((((u32)ccamdmstclear << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR) & ~((u32)0x00002000)) | ((u32)ccamdmstclear << 13));
}

static inline u8 riu_rwnxagccntl_agcfsmreset_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void riu_rwnxagccntl_agcfsmreset_setf(struct cl_chip *chip, u8 agcfsmreset)
{
	ASSERT_ERR_CHIP((((u32)agcfsmreset << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR) & ~((u32)0x00001000)) | ((u32)agcfsmreset << 12));
}

static inline u8 riu_rwnxagccntl_radardeten_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void riu_rwnxagccntl_radardeten_setf(struct cl_chip *chip, u8 radardeten)
{
	ASSERT_ERR_CHIP((((u32)radardeten << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR) & ~((u32)0x00000800)) | ((u32)radardeten << 11));
}

static inline u8 riu_rwnxagccntl_rifsdeten_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void riu_rwnxagccntl_rifsdeten_setf(struct cl_chip *chip, u8 rifsdeten)
{
	ASSERT_ERR_CHIP((((u32)rifsdeten << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR) & ~((u32)0x00000400)) | ((u32)rifsdeten << 10));
}

static inline u8 riu_rwnxagccntl_dsssonly_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void riu_rwnxagccntl_dsssonly_setf(struct cl_chip *chip, u8 dsssonly)
{
	ASSERT_ERR_CHIP((((u32)dsssonly << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR) & ~((u32)0x00000200)) | ((u32)dsssonly << 9));
}

static inline u8 riu_rwnxagccntl_ofdmonly_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void riu_rwnxagccntl_ofdmonly_setf(struct cl_chip *chip, u8 ofdmonly)
{
	ASSERT_ERR_CHIP((((u32)ofdmonly << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR) & ~((u32)0x00000100)) | ((u32)ofdmonly << 8));
}

static inline u8 riu_rwnxagccntl_gpstatus_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);

	return (u8)((local_val & ((u32)0x000000F0)) >> 4);
}

static inline void riu_rwnxagccntl_gpstatus_setf(struct cl_chip *chip, u8 gpstatus)
{
	ASSERT_ERR_CHIP((((u32)gpstatus << 4) & ~((u32)0x000000F0)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR) & ~((u32)0x000000F0)) | ((u32)gpstatus << 4));
}

static inline u8 riu_rwnxagccntl_est_path_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void riu_rwnxagccntl_est_path_sel_setf(struct cl_chip *chip, u8 estpathsel)
{
	ASSERT_ERR_CHIP((((u32)estpathsel << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR) & ~((u32)0x00000008)) | ((u32)estpathsel << 3));
}

static inline u8 riu_rwnxagccntl_adc_sel_radar_detector_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void riu_rwnxagccntl_adc_sel_radar_detector_setf(struct cl_chip *chip, u8 adcselradardetector)
{
	ASSERT_ERR_CHIP((((u32)adcselradardetector << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR) & ~((u32)0x00000002)) | ((u32)adcselradardetector << 1));
}

static inline u8 riu_rwnxagccntl_adc_sel_comp_module_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_rwnxagccntl_adc_sel_comp_module_setf(struct cl_chip *chip, u8 adcselcompmodule)
{
	ASSERT_ERR_CHIP((((u32)adcselcompmodule << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCNTL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCNTL_ADDR) & ~((u32)0x00000001)) | ((u32)adcselcompmodule << 0));
}

/**
 * @brief RWNXAGCDSP_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:24 NBITADC                   0xC
 *    23:16 VPEAKADCQDBV              0xE8
 *    15:08 ADCPOWMINDBV              0xB5
 *    07:00 ADCPOWBIASQDBV            0x0
 * </pre>
 */
#define RIU_RWNXAGCDSP_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000394)
#define RIU_RWNXAGCDSP_0_OFFSET      0x00000394
#define RIU_RWNXAGCDSP_0_INDEX       0x000000E5
#define RIU_RWNXAGCDSP_0_RESET       0x0CE8B500

static inline u32 riu_rwnxagcdsp_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCDSP_0_ADDR);
}

static inline void riu_rwnxagcdsp_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCDSP_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCDSP_0_NBITADC_MASK       ((u32)0x0F000000)
#define RIU_RWNXAGCDSP_0_NBITADC_LSB        24
#define RIU_RWNXAGCDSP_0_NBITADC_WIDTH      ((u32)0x00000004)
#define RIU_RWNXAGCDSP_0_VPEAKADCQDBV_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCDSP_0_VPEAKADCQDBV_LSB    16
#define RIU_RWNXAGCDSP_0_VPEAKADCQDBV_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCDSP_0_ADCPOWMINDBV_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCDSP_0_ADCPOWMINDBV_LSB    8
#define RIU_RWNXAGCDSP_0_ADCPOWMINDBV_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCDSP_0_ADCPOWBIASQDBV_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCDSP_0_ADCPOWBIASQDBV_LSB    0
#define RIU_RWNXAGCDSP_0_ADCPOWBIASQDBV_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCDSP_0_NBITADC_RST        0xC
#define RIU_RWNXAGCDSP_0_VPEAKADCQDBV_RST    0xE8
#define RIU_RWNXAGCDSP_0_ADCPOWMINDBV_RST    0xB5
#define RIU_RWNXAGCDSP_0_ADCPOWBIASQDBV_RST    0x0

static inline void riu_rwnxagcdsp_0_pack(struct cl_chip *chip, u8 nbitadc, u8 vpeakadcqdbv, u8 adcpowmindbv, u8 adcpowbiasqdbv)
{
	ASSERT_ERR_CHIP((((u32)nbitadc << 24) & ~((u32)0x0F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)vpeakadcqdbv << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)adcpowmindbv << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)adcpowbiasqdbv << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_0_ADDR, ((u32)nbitadc << 24) | ((u32)vpeakadcqdbv << 16) | ((u32)adcpowmindbv << 8) | ((u32)adcpowbiasqdbv << 0));
}

static inline void riu_rwnxagcdsp_0_unpack(struct cl_chip *chip, u8 *nbitadc, u8 *vpeakadcqdbv, u8 *adcpowmindbv, u8 *adcpowbiasqdbv)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_0_ADDR);

	*nbitadc = (local_val & ((u32)0x0F000000)) >> 24;
	*vpeakadcqdbv = (local_val & ((u32)0x00FF0000)) >> 16;
	*adcpowmindbv = (local_val & ((u32)0x0000FF00)) >> 8;
	*adcpowbiasqdbv = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcdsp_0_nbitadc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_0_ADDR);

	return (u8)((local_val & ((u32)0x0F000000)) >> 24);
}

static inline void riu_rwnxagcdsp_0_nbitadc_setf(struct cl_chip *chip, u8 nbitadc)
{
	ASSERT_ERR_CHIP((((u32)nbitadc << 24) & ~((u32)0x0F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_0_ADDR) & ~((u32)0x0F000000)) | ((u32)nbitadc << 24));
}

static inline u8 riu_rwnxagcdsp_0_vpeakadcqdbv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_0_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagcdsp_0_vpeakadcqdbv_setf(struct cl_chip *chip, u8 vpeakadcqdbv)
{
	ASSERT_ERR_CHIP((((u32)vpeakadcqdbv << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_0_ADDR) & ~((u32)0x00FF0000)) | ((u32)vpeakadcqdbv << 16));
}

static inline u8 riu_rwnxagcdsp_0_adcpowmindbv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_0_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagcdsp_0_adcpowmindbv_setf(struct cl_chip *chip, u8 adcpowmindbv)
{
	ASSERT_ERR_CHIP((((u32)adcpowmindbv << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_0_ADDR) & ~((u32)0x0000FF00)) | ((u32)adcpowmindbv << 8));
}

static inline u8 riu_rwnxagcdsp_0_adcpowbiasqdbv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcdsp_0_adcpowbiasqdbv_setf(struct cl_chip *chip, u8 adcpowbiasqdbv)
{
	ASSERT_ERR_CHIP((((u32)adcpowbiasqdbv << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_0_ADDR) & ~((u32)0x000000FF)) | ((u32)adcpowbiasqdbv << 0));
}

/**
 * @brief RWNXAGCDSP_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 ADCPOWMINDBM              0x9C
 *    07:00 ADCPOWBIASQDBM            0x0
 * </pre>
 */
#define RIU_RWNXAGCDSP_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000398)
#define RIU_RWNXAGCDSP_1_OFFSET      0x00000398
#define RIU_RWNXAGCDSP_1_INDEX       0x000000E6
#define RIU_RWNXAGCDSP_1_RESET       0x00009C00

static inline u32 riu_rwnxagcdsp_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCDSP_1_ADDR);
}

static inline void riu_rwnxagcdsp_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCDSP_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCDSP_1_ADCPOWMINDBM_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCDSP_1_ADCPOWMINDBM_LSB    8
#define RIU_RWNXAGCDSP_1_ADCPOWMINDBM_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCDSP_1_ADCPOWBIASQDBM_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCDSP_1_ADCPOWBIASQDBM_LSB    0
#define RIU_RWNXAGCDSP_1_ADCPOWBIASQDBM_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCDSP_1_ADCPOWMINDBM_RST    0x9C
#define RIU_RWNXAGCDSP_1_ADCPOWBIASQDBM_RST    0x0

static inline void riu_rwnxagcdsp_1_pack(struct cl_chip *chip, u8 adcpowmindbm, u8 adcpowbiasqdbm)
{
	ASSERT_ERR_CHIP((((u32)adcpowmindbm << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)adcpowbiasqdbm << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_1_ADDR, ((u32)adcpowmindbm << 8) | ((u32)adcpowbiasqdbm << 0));
}

static inline void riu_rwnxagcdsp_1_unpack(struct cl_chip *chip, u8 *adcpowmindbm, u8 *adcpowbiasqdbm)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_1_ADDR);

	*adcpowmindbm = (local_val & ((u32)0x0000FF00)) >> 8;
	*adcpowbiasqdbm = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcdsp_1_adcpowmindbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagcdsp_1_adcpowmindbm_setf(struct cl_chip *chip, u8 adcpowmindbm)
{
	ASSERT_ERR_CHIP((((u32)adcpowmindbm << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_1_ADDR) & ~((u32)0x0000FF00)) | ((u32)adcpowmindbm << 8));
}

static inline u8 riu_rwnxagcdsp_1_adcpowbiasqdbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcdsp_1_adcpowbiasqdbm_setf(struct cl_chip *chip, u8 adcpowbiasqdbm)
{
	ASSERT_ERR_CHIP((((u32)adcpowbiasqdbm << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_1_ADDR) & ~((u32)0x000000FF)) | ((u32)adcpowbiasqdbm << 0));
}

/**
 * @brief RWNXAGCDSP_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 INBDPOW80_SBIASQDB        0x0
 *    23:16 INBDPOW40_SBIASQDB        0x0
 *    15:08 INBDPOW20_SBIASQDB        0x0
 *    07:00 INBDPOW20_PBIASQDB        0x0
 * </pre>
 */
#define RIU_RWNXAGCDSP_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000039C)
#define RIU_RWNXAGCDSP_2_OFFSET      0x0000039C
#define RIU_RWNXAGCDSP_2_INDEX       0x000000E7
#define RIU_RWNXAGCDSP_2_RESET       0x00000000

static inline u32 riu_rwnxagcdsp_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCDSP_2_ADDR);
}

static inline void riu_rwnxagcdsp_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCDSP_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCDSP_2_INBDPOW_80_SBIASQDB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCDSP_2_INBDPOW_80_SBIASQDB_LSB    24
#define RIU_RWNXAGCDSP_2_INBDPOW_80_SBIASQDB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCDSP_2_INBDPOW_40_SBIASQDB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCDSP_2_INBDPOW_40_SBIASQDB_LSB    16
#define RIU_RWNXAGCDSP_2_INBDPOW_40_SBIASQDB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCDSP_2_INBDPOW_20_SBIASQDB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCDSP_2_INBDPOW_20_SBIASQDB_LSB    8
#define RIU_RWNXAGCDSP_2_INBDPOW_20_SBIASQDB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCDSP_2_INBDPOW_20_PBIASQDB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCDSP_2_INBDPOW_20_PBIASQDB_LSB    0
#define RIU_RWNXAGCDSP_2_INBDPOW_20_PBIASQDB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCDSP_2_INBDPOW_80_SBIASQDB_RST    0x0
#define RIU_RWNXAGCDSP_2_INBDPOW_40_SBIASQDB_RST    0x0
#define RIU_RWNXAGCDSP_2_INBDPOW_20_SBIASQDB_RST    0x0
#define RIU_RWNXAGCDSP_2_INBDPOW_20_PBIASQDB_RST    0x0

static inline void riu_rwnxagcdsp_2_pack(struct cl_chip *chip, u8 inbdpow80_sbiasqdb, u8 inbdpow40_sbiasqdb, u8 inbdpow20_sbiasqdb, u8 inbdpow20_pbiasqdb)
{
	ASSERT_ERR_CHIP((((u32)inbdpow80_sbiasqdb << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)inbdpow40_sbiasqdb << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)inbdpow20_sbiasqdb << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)inbdpow20_pbiasqdb << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_2_ADDR, ((u32)inbdpow80_sbiasqdb << 24) | ((u32)inbdpow40_sbiasqdb << 16) | ((u32)inbdpow20_sbiasqdb << 8) | ((u32)inbdpow20_pbiasqdb << 0));
}

static inline void riu_rwnxagcdsp_2_unpack(struct cl_chip *chip, u8 *inbdpow80_sbiasqdb, u8 *inbdpow40_sbiasqdb, u8 *inbdpow20_sbiasqdb, u8 *inbdpow20_pbiasqdb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_2_ADDR);

	*inbdpow80_sbiasqdb = (local_val & ((u32)0xFF000000)) >> 24;
	*inbdpow40_sbiasqdb = (local_val & ((u32)0x00FF0000)) >> 16;
	*inbdpow20_sbiasqdb = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpow20_pbiasqdb = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcdsp_2_inbdpow_80_sbiasqdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_2_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagcdsp_2_inbdpow_80_sbiasqdb_setf(struct cl_chip *chip, u8 inbdpow80sbiasqdb)
{
	ASSERT_ERR_CHIP((((u32)inbdpow80sbiasqdb << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_2_ADDR) & ~((u32)0xFF000000)) | ((u32)inbdpow80sbiasqdb << 24));
}

static inline u8 riu_rwnxagcdsp_2_inbdpow_40_sbiasqdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_2_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagcdsp_2_inbdpow_40_sbiasqdb_setf(struct cl_chip *chip, u8 inbdpow40sbiasqdb)
{
	ASSERT_ERR_CHIP((((u32)inbdpow40sbiasqdb << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_2_ADDR) & ~((u32)0x00FF0000)) | ((u32)inbdpow40sbiasqdb << 16));
}

static inline u8 riu_rwnxagcdsp_2_inbdpow_20_sbiasqdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_2_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagcdsp_2_inbdpow_20_sbiasqdb_setf(struct cl_chip *chip, u8 inbdpow20sbiasqdb)
{
	ASSERT_ERR_CHIP((((u32)inbdpow20sbiasqdb << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_2_ADDR) & ~((u32)0x0000FF00)) | ((u32)inbdpow20sbiasqdb << 8));
}

static inline u8 riu_rwnxagcdsp_2_inbdpow_20_pbiasqdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcdsp_2_inbdpow_20_pbiasqdb_setf(struct cl_chip *chip, u8 inbdpow20pbiasqdb)
{
	ASSERT_ERR_CHIP((((u32)inbdpow20pbiasqdb << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_2_ADDR) & ~((u32)0x000000FF)) | ((u32)inbdpow20pbiasqdb << 0));
}

/**
 * @brief RWNXAGCDSP_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:20 INBDPOWMINDBV             0xBF
 *    17:16 INBDRND                   0x3
 *    15:08 INBDPOWMINDBM_ANT1        0x9C
 *    07:00 INBDPOWMINDBM_ANT0        0x9C
 * </pre>
 */
#define RIU_RWNXAGCDSP_3_ADDR        (REG_RIU_BASE_ADDR + 0x000003A0)
#define RIU_RWNXAGCDSP_3_OFFSET      0x000003A0
#define RIU_RWNXAGCDSP_3_INDEX       0x000000E8
#define RIU_RWNXAGCDSP_3_RESET       0x0BF39C9C

static inline u32 riu_rwnxagcdsp_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCDSP_3_ADDR);
}

static inline void riu_rwnxagcdsp_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCDSP_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCDSP_3_INBDPOWMINDBV_MASK    ((u32)0x0FF00000)
#define RIU_RWNXAGCDSP_3_INBDPOWMINDBV_LSB    20
#define RIU_RWNXAGCDSP_3_INBDPOWMINDBV_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCDSP_3_INBDRND_MASK       ((u32)0x00030000)
#define RIU_RWNXAGCDSP_3_INBDRND_LSB        16
#define RIU_RWNXAGCDSP_3_INBDRND_WIDTH      ((u32)0x00000002)
#define RIU_RWNXAGCDSP_3_INBDPOWMINDBM_ANT_1_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCDSP_3_INBDPOWMINDBM_ANT_1_LSB    8
#define RIU_RWNXAGCDSP_3_INBDPOWMINDBM_ANT_1_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCDSP_3_INBDPOWMINDBM_ANT_0_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCDSP_3_INBDPOWMINDBM_ANT_0_LSB    0
#define RIU_RWNXAGCDSP_3_INBDPOWMINDBM_ANT_0_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCDSP_3_INBDPOWMINDBV_RST    0xBF
#define RIU_RWNXAGCDSP_3_INBDRND_RST        0x3
#define RIU_RWNXAGCDSP_3_INBDPOWMINDBM_ANT_1_RST    0x9C
#define RIU_RWNXAGCDSP_3_INBDPOWMINDBM_ANT_0_RST    0x9C

static inline void riu_rwnxagcdsp_3_pack(struct cl_chip *chip, u8 inbdpowmindbv, u8 inbdrnd, u8 inbdpowmindbm_ant1, u8 inbdpowmindbm_ant0)
{
	ASSERT_ERR_CHIP((((u32)inbdpowmindbv << 20) & ~((u32)0x0FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)inbdrnd << 16) & ~((u32)0x00030000)) == 0);
	ASSERT_ERR_CHIP((((u32)inbdpowmindbm_ant1 << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)inbdpowmindbm_ant0 << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_3_ADDR, ((u32)inbdpowmindbv << 20) | ((u32)inbdrnd << 16) | ((u32)inbdpowmindbm_ant1 << 8) | ((u32)inbdpowmindbm_ant0 << 0));
}

static inline void riu_rwnxagcdsp_3_unpack(struct cl_chip *chip, u8 *inbdpowmindbv, u8 *inbdrnd, u8 *inbdpowmindbm_ant1, u8 *inbdpowmindbm_ant0)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_3_ADDR);

	*inbdpowmindbv = (local_val & ((u32)0x0FF00000)) >> 20;
	*inbdrnd = (local_val & ((u32)0x00030000)) >> 16;
	*inbdpowmindbm_ant1 = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpowmindbm_ant0 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcdsp_3_inbdpowmindbv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_3_ADDR);

	return (u8)((local_val & ((u32)0x0FF00000)) >> 20);
}

static inline void riu_rwnxagcdsp_3_inbdpowmindbv_setf(struct cl_chip *chip, u8 inbdpowmindbv)
{
	ASSERT_ERR_CHIP((((u32)inbdpowmindbv << 20) & ~((u32)0x0FF00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_3_ADDR) & ~((u32)0x0FF00000)) | ((u32)inbdpowmindbv << 20));
}

static inline u8 riu_rwnxagcdsp_3_inbdrnd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_3_ADDR);

	return (u8)((local_val & ((u32)0x00030000)) >> 16);
}

static inline void riu_rwnxagcdsp_3_inbdrnd_setf(struct cl_chip *chip, u8 inbdrnd)
{
	ASSERT_ERR_CHIP((((u32)inbdrnd << 16) & ~((u32)0x00030000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_3_ADDR) & ~((u32)0x00030000)) | ((u32)inbdrnd << 16));
}

static inline u8 riu_rwnxagcdsp_3_inbdpowmindbm_ant_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_3_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagcdsp_3_inbdpowmindbm_ant_1_setf(struct cl_chip *chip, u8 inbdpowmindbmant1)
{
	ASSERT_ERR_CHIP((((u32)inbdpowmindbmant1 << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_3_ADDR) & ~((u32)0x0000FF00)) | ((u32)inbdpowmindbmant1 << 8));
}

static inline u8 riu_rwnxagcdsp_3_inbdpowmindbm_ant_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_3_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcdsp_3_inbdpowmindbm_ant_0_setf(struct cl_chip *chip, u8 inbdpowmindbmant0)
{
	ASSERT_ERR_CHIP((((u32)inbdpowmindbmant0 << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_3_ADDR) & ~((u32)0x000000FF)) | ((u32)inbdpowmindbmant0 << 0));
}

/**
 * @brief RWNXAGCDSP_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:16 FE80_GAIN                 0x2
 *    15:08 FE40_GAIN                 0x2
 *    07:00 FE20_GAIN                 0x2
 * </pre>
 */
#define RIU_RWNXAGCDSP_4_ADDR        (REG_RIU_BASE_ADDR + 0x000003A4)
#define RIU_RWNXAGCDSP_4_OFFSET      0x000003A4
#define RIU_RWNXAGCDSP_4_INDEX       0x000000E9
#define RIU_RWNXAGCDSP_4_RESET       0x00020202

static inline u32 riu_rwnxagcdsp_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCDSP_4_ADDR);
}

static inline void riu_rwnxagcdsp_4_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCDSP_4_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCDSP_4_FE_80_GAIN_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCDSP_4_FE_80_GAIN_LSB     16
#define RIU_RWNXAGCDSP_4_FE_80_GAIN_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCDSP_4_FE_40_GAIN_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCDSP_4_FE_40_GAIN_LSB     8
#define RIU_RWNXAGCDSP_4_FE_40_GAIN_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCDSP_4_FE_20_GAIN_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCDSP_4_FE_20_GAIN_LSB     0
#define RIU_RWNXAGCDSP_4_FE_20_GAIN_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCDSP_4_FE_80_GAIN_RST     0x2
#define RIU_RWNXAGCDSP_4_FE_40_GAIN_RST     0x2
#define RIU_RWNXAGCDSP_4_FE_20_GAIN_RST     0x2

static inline void riu_rwnxagcdsp_4_pack(struct cl_chip *chip, u8 fe80_gain, u8 fe40_gain, u8 fe20_gain)
{
	ASSERT_ERR_CHIP((((u32)fe80_gain << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)fe40_gain << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)fe20_gain << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_4_ADDR, ((u32)fe80_gain << 16) | ((u32)fe40_gain << 8) | ((u32)fe20_gain << 0));
}

static inline void riu_rwnxagcdsp_4_unpack(struct cl_chip *chip, u8 *fe80_gain, u8 *fe40_gain, u8 *fe20_gain)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_4_ADDR);

	*fe80_gain = (local_val & ((u32)0x00FF0000)) >> 16;
	*fe40_gain = (local_val & ((u32)0x0000FF00)) >> 8;
	*fe20_gain = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcdsp_4_fe_80_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_4_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagcdsp_4_fe_80_gain_setf(struct cl_chip *chip, u8 fe80gain)
{
	ASSERT_ERR_CHIP((((u32)fe80gain << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_4_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_4_ADDR) & ~((u32)0x00FF0000)) | ((u32)fe80gain << 16));
}

static inline u8 riu_rwnxagcdsp_4_fe_40_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_4_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagcdsp_4_fe_40_gain_setf(struct cl_chip *chip, u8 fe40gain)
{
	ASSERT_ERR_CHIP((((u32)fe40gain << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_4_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_4_ADDR) & ~((u32)0x0000FF00)) | ((u32)fe40gain << 8));
}

static inline u8 riu_rwnxagcdsp_4_fe_20_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_4_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcdsp_4_fe_20_gain_setf(struct cl_chip *chip, u8 fe20gain)
{
	ASSERT_ERR_CHIP((((u32)fe20gain << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_4_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_4_ADDR) & ~((u32)0x000000FF)) | ((u32)fe20gain << 0));
}

/**
 * @brief RWNXAGCCCA_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:25 CCA_INBD_PWR_SEC_VALID_NUM_SAMPLES_CNT 0x0
 *    24    CCA_MIDPACKET_AGC_CTRL    1
 *    23    CCA_MIDPACKET_DSP_VALID   1
 *    22:20 DELCCARAMPDNTAP           0x5
 *    18:16 DELCCARAMPUPTAP           0x5
 *    15    Per20_DISCCAEN            1
 *    14    Per20_SATCCAEN            0
 *    13:08 CCADETRAMPDN              0x9
 *    05:00 CCADETRAMPUP              0x9
 * </pre>
 */
#define RIU_RWNXAGCCCA_0_ADDR        (REG_RIU_BASE_ADDR + 0x000003A8)
#define RIU_RWNXAGCCCA_0_OFFSET      0x000003A8
#define RIU_RWNXAGCCCA_0_INDEX       0x000000EA
#define RIU_RWNXAGCCCA_0_RESET       0x01D58909

static inline u32 riu_rwnxagccca_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR);
}

static inline void riu_rwnxagccca_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCCCA_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCCCA_0_CCA_INBD_PWR_SEC_VALID_NUM_SAMPLES_CNT_MASK    ((u32)0xFE000000)
#define RIU_RWNXAGCCCA_0_CCA_INBD_PWR_SEC_VALID_NUM_SAMPLES_CNT_LSB    25
#define RIU_RWNXAGCCCA_0_CCA_INBD_PWR_SEC_VALID_NUM_SAMPLES_CNT_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCCCA_0_CCA_MIDPACKET_AGC_CTRL_BIT    ((u32)0x01000000)
#define RIU_RWNXAGCCCA_0_CCA_MIDPACKET_AGC_CTRL_POS    24
#define RIU_RWNXAGCCCA_0_CCA_MIDPACKET_DSP_VALID_BIT    ((u32)0x00800000)
#define RIU_RWNXAGCCCA_0_CCA_MIDPACKET_DSP_VALID_POS    23
#define RIU_RWNXAGCCCA_0_DELCCARAMPDNTAP_MASK    ((u32)0x00700000)
#define RIU_RWNXAGCCCA_0_DELCCARAMPDNTAP_LSB    20
#define RIU_RWNXAGCCCA_0_DELCCARAMPDNTAP_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCCCA_0_DELCCARAMPUPTAP_MASK    ((u32)0x00070000)
#define RIU_RWNXAGCCCA_0_DELCCARAMPUPTAP_LSB    16
#define RIU_RWNXAGCCCA_0_DELCCARAMPUPTAP_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCCCA_0_PER_20_DISCCAEN_BIT    ((u32)0x00008000)
#define RIU_RWNXAGCCCA_0_PER_20_DISCCAEN_POS    15
#define RIU_RWNXAGCCCA_0_PER_20_SATCCAEN_BIT    ((u32)0x00004000)
#define RIU_RWNXAGCCCA_0_PER_20_SATCCAEN_POS    14
#define RIU_RWNXAGCCCA_0_CCADETRAMPDN_MASK    ((u32)0x00003F00)
#define RIU_RWNXAGCCCA_0_CCADETRAMPDN_LSB    8
#define RIU_RWNXAGCCCA_0_CCADETRAMPDN_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCCCA_0_CCADETRAMPUP_MASK    ((u32)0x0000003F)
#define RIU_RWNXAGCCCA_0_CCADETRAMPUP_LSB    0
#define RIU_RWNXAGCCCA_0_CCADETRAMPUP_WIDTH    ((u32)0x00000006)

#define RIU_RWNXAGCCCA_0_CCA_INBD_PWR_SEC_VALID_NUM_SAMPLES_CNT_RST    0x0
#define RIU_RWNXAGCCCA_0_CCA_MIDPACKET_AGC_CTRL_RST    0x1
#define RIU_RWNXAGCCCA_0_CCA_MIDPACKET_DSP_VALID_RST    0x1
#define RIU_RWNXAGCCCA_0_DELCCARAMPDNTAP_RST    0x5
#define RIU_RWNXAGCCCA_0_DELCCARAMPUPTAP_RST    0x5
#define RIU_RWNXAGCCCA_0_PER_20_DISCCAEN_RST    0x1
#define RIU_RWNXAGCCCA_0_PER_20_SATCCAEN_RST    0x0
#define RIU_RWNXAGCCCA_0_CCADETRAMPDN_RST    0x9
#define RIU_RWNXAGCCCA_0_CCADETRAMPUP_RST    0x9

static inline void riu_rwnxagccca_0_pack(struct cl_chip *chip, u8 cca_inbd_pwr_sec_valid_num_samples_cnt, u8 cca_midpacket_agc_ctrl, u8 cca_midpacket_dsp_valid, u8 delccarampdntap, u8 delccarampuptap, u8 per20_disccaen, u8 per20_satccaen, u8 ccadetrampdn, u8 ccadetrampup)
{
	ASSERT_ERR_CHIP((((u32)cca_inbd_pwr_sec_valid_num_samples_cnt << 25) & ~((u32)0xFE000000)) == 0);
	ASSERT_ERR_CHIP((((u32)cca_midpacket_agc_ctrl << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)cca_midpacket_dsp_valid << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)delccarampdntap << 20) & ~((u32)0x00700000)) == 0);
	ASSERT_ERR_CHIP((((u32)delccarampuptap << 16) & ~((u32)0x00070000)) == 0);
	ASSERT_ERR_CHIP((((u32)per20_disccaen << 15) & ~((u32)0x00008000)) == 0);
	ASSERT_ERR_CHIP((((u32)per20_satccaen << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccadetrampdn << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)ccadetrampup << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_0_ADDR, ((u32)cca_inbd_pwr_sec_valid_num_samples_cnt << 25) | ((u32)cca_midpacket_agc_ctrl << 24) | ((u32)cca_midpacket_dsp_valid << 23) | ((u32)delccarampdntap << 20) | ((u32)delccarampuptap << 16) | ((u32)per20_disccaen << 15) | ((u32)per20_satccaen << 14) | ((u32)ccadetrampdn << 8) | ((u32)ccadetrampup << 0));
}

static inline void riu_rwnxagccca_0_unpack(struct cl_chip *chip, u8 *cca_inbd_pwr_sec_valid_num_samples_cnt, u8 *cca_midpacket_agc_ctrl, u8 *cca_midpacket_dsp_valid, u8 *delccarampdntap, u8 *delccarampuptap, u8 *per20_disccaen, u8 *per20_satccaen, u8 *ccadetrampdn, u8 *ccadetrampup)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR);

	*cca_inbd_pwr_sec_valid_num_samples_cnt = (local_val & ((u32)0xFE000000)) >> 25;
	*cca_midpacket_agc_ctrl = (local_val & ((u32)0x01000000)) >> 24;
	*cca_midpacket_dsp_valid = (local_val & ((u32)0x00800000)) >> 23;
	*delccarampdntap = (local_val & ((u32)0x00700000)) >> 20;
	*delccarampuptap = (local_val & ((u32)0x00070000)) >> 16;
	*per20_disccaen = (local_val & ((u32)0x00008000)) >> 15;
	*per20_satccaen = (local_val & ((u32)0x00004000)) >> 14;
	*ccadetrampdn = (local_val & ((u32)0x00003F00)) >> 8;
	*ccadetrampup = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxagccca_0_cca_inbd_pwr_sec_valid_num_samples_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR);

	return (u8)((local_val & ((u32)0xFE000000)) >> 25);
}

static inline void riu_rwnxagccca_0_cca_inbd_pwr_sec_valid_num_samples_cnt_setf(struct cl_chip *chip, u8 ccainbdpwrsecvalidnumsamplescnt)
{
	ASSERT_ERR_CHIP((((u32)ccainbdpwrsecvalidnumsamplescnt << 25) & ~((u32)0xFE000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR) & ~((u32)0xFE000000)) | ((u32)ccainbdpwrsecvalidnumsamplescnt << 25));
}

static inline u8 riu_rwnxagccca_0_cca_midpacket_agc_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void riu_rwnxagccca_0_cca_midpacket_agc_ctrl_setf(struct cl_chip *chip, u8 ccamidpacketagcctrl)
{
	ASSERT_ERR_CHIP((((u32)ccamidpacketagcctrl << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR) & ~((u32)0x01000000)) | ((u32)ccamidpacketagcctrl << 24));
}

static inline u8 riu_rwnxagccca_0_cca_midpacket_dsp_valid_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void riu_rwnxagccca_0_cca_midpacket_dsp_valid_setf(struct cl_chip *chip, u8 ccamidpacketdspvalid)
{
	ASSERT_ERR_CHIP((((u32)ccamidpacketdspvalid << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR) & ~((u32)0x00800000)) | ((u32)ccamidpacketdspvalid << 23));
}

static inline u8 riu_rwnxagccca_0_delccarampdntap_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR);

	return (u8)((local_val & ((u32)0x00700000)) >> 20);
}

static inline void riu_rwnxagccca_0_delccarampdntap_setf(struct cl_chip *chip, u8 delccarampdntap)
{
	ASSERT_ERR_CHIP((((u32)delccarampdntap << 20) & ~((u32)0x00700000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR) & ~((u32)0x00700000)) | ((u32)delccarampdntap << 20));
}

static inline u8 riu_rwnxagccca_0_delccarampuptap_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR);

	return (u8)((local_val & ((u32)0x00070000)) >> 16);
}

static inline void riu_rwnxagccca_0_delccarampuptap_setf(struct cl_chip *chip, u8 delccarampuptap)
{
	ASSERT_ERR_CHIP((((u32)delccarampuptap << 16) & ~((u32)0x00070000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR) & ~((u32)0x00070000)) | ((u32)delccarampuptap << 16));
}

static inline u8 riu_rwnxagccca_0_per_20_disccaen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline void riu_rwnxagccca_0_per_20_disccaen_setf(struct cl_chip *chip, u8 per20disccaen)
{
	ASSERT_ERR_CHIP((((u32)per20disccaen << 15) & ~((u32)0x00008000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR) & ~((u32)0x00008000)) | ((u32)per20disccaen << 15));
}

static inline u8 riu_rwnxagccca_0_per_20_satccaen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void riu_rwnxagccca_0_per_20_satccaen_setf(struct cl_chip *chip, u8 per20satccaen)
{
	ASSERT_ERR_CHIP((((u32)per20satccaen << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR) & ~((u32)0x00004000)) | ((u32)per20satccaen << 14));
}

static inline u8 riu_rwnxagccca_0_ccadetrampdn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_rwnxagccca_0_ccadetrampdn_setf(struct cl_chip *chip, u8 ccadetrampdn)
{
	ASSERT_ERR_CHIP((((u32)ccadetrampdn << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR) & ~((u32)0x00003F00)) | ((u32)ccadetrampdn << 8));
}

static inline u8 riu_rwnxagccca_0_ccadetrampup_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxagccca_0_ccadetrampup_setf(struct cl_chip *chip, u8 ccadetrampup)
{
	ASSERT_ERR_CHIP((((u32)ccadetrampup << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_0_ADDR) & ~((u32)0x0000003F)) | ((u32)ccadetrampup << 0));
}

/**
 * @brief RWNXAGCCCA_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    CCA_CNT_CLEAR             0
 *    30:29 CCA_CNT_RATE              0x0
 *    28:20 INBDCCAPOWMINDBM          0x1B5
 *    19:12 CCAFALLTHRDBM             0xBF
 *    10    CCAEnergy_Reset_Type      0
 *    09    DISCCAEN                  1
 *    08    SATCCAEN                  1
 *    07:00 CCARISETHRDBM             0xC2
 * </pre>
 */
#define RIU_RWNXAGCCCA_1_ADDR        (REG_RIU_BASE_ADDR + 0x000003AC)
#define RIU_RWNXAGCCCA_1_OFFSET      0x000003AC
#define RIU_RWNXAGCCCA_1_INDEX       0x000000EB
#define RIU_RWNXAGCCCA_1_RESET       0x1B5BF3C2

static inline u32 riu_rwnxagccca_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR);
}

static inline void riu_rwnxagccca_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCCCA_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCCCA_1_CCA_CNT_CLEAR_BIT    ((u32)0x80000000)
#define RIU_RWNXAGCCCA_1_CCA_CNT_CLEAR_POS    31
#define RIU_RWNXAGCCCA_1_CCA_CNT_RATE_MASK    ((u32)0x60000000)
#define RIU_RWNXAGCCCA_1_CCA_CNT_RATE_LSB    29
#define RIU_RWNXAGCCCA_1_CCA_CNT_RATE_WIDTH    ((u32)0x00000002)
#define RIU_RWNXAGCCCA_1_INBDCCAPOWMINDBM_MASK    ((u32)0x1FF00000)
#define RIU_RWNXAGCCCA_1_INBDCCAPOWMINDBM_LSB    20
#define RIU_RWNXAGCCCA_1_INBDCCAPOWMINDBM_WIDTH    ((u32)0x00000009)
#define RIU_RWNXAGCCCA_1_CCAFALLTHRDBM_MASK    ((u32)0x000FF000)
#define RIU_RWNXAGCCCA_1_CCAFALLTHRDBM_LSB    12
#define RIU_RWNXAGCCCA_1_CCAFALLTHRDBM_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCCCA_1_CCAENERGY_RESET_TYPE_BIT    ((u32)0x00000400)
#define RIU_RWNXAGCCCA_1_CCAENERGY_RESET_TYPE_POS    10
#define RIU_RWNXAGCCCA_1_DISCCAEN_BIT       ((u32)0x00000200)
#define RIU_RWNXAGCCCA_1_DISCCAEN_POS       9
#define RIU_RWNXAGCCCA_1_SATCCAEN_BIT       ((u32)0x00000100)
#define RIU_RWNXAGCCCA_1_SATCCAEN_POS       8
#define RIU_RWNXAGCCCA_1_CCARISETHRDBM_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCCCA_1_CCARISETHRDBM_LSB    0
#define RIU_RWNXAGCCCA_1_CCARISETHRDBM_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCCCA_1_CCA_CNT_CLEAR_RST    0x0
#define RIU_RWNXAGCCCA_1_CCA_CNT_RATE_RST    0x0
#define RIU_RWNXAGCCCA_1_INBDCCAPOWMINDBM_RST    0x1B5
#define RIU_RWNXAGCCCA_1_CCAFALLTHRDBM_RST    0xBF
#define RIU_RWNXAGCCCA_1_CCAENERGY_RESET_TYPE_RST    0x0
#define RIU_RWNXAGCCCA_1_DISCCAEN_RST       0x1
#define RIU_RWNXAGCCCA_1_SATCCAEN_RST       0x1
#define RIU_RWNXAGCCCA_1_CCARISETHRDBM_RST    0xC2

static inline void riu_rwnxagccca_1_pack(struct cl_chip *chip, u8 cca_cnt_clear, u8 cca_cnt_rate, u16 inbdccapowmindbm, u8 ccafallthrdbm, u8 ccaenergy_reset_type, u8 disccaen, u8 satccaen, u8 ccarisethrdbm)
{
	ASSERT_ERR_CHIP((((u32)cca_cnt_clear << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)cca_cnt_rate << 29) & ~((u32)0x60000000)) == 0);
	ASSERT_ERR_CHIP((((u32)inbdccapowmindbm << 20) & ~((u32)0x1FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccafallthrdbm << 12) & ~((u32)0x000FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccaenergy_reset_type << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)disccaen << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)satccaen << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)ccarisethrdbm << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_1_ADDR, ((u32)cca_cnt_clear << 31) | ((u32)cca_cnt_rate << 29) | ((u32)inbdccapowmindbm << 20) | ((u32)ccafallthrdbm << 12) | ((u32)ccaenergy_reset_type << 10) | ((u32)disccaen << 9) | ((u32)satccaen << 8) | ((u32)ccarisethrdbm << 0));
}

static inline void riu_rwnxagccca_1_unpack(struct cl_chip *chip, u8 *cca_cnt_clear, u8 *cca_cnt_rate, u16 *inbdccapowmindbm, u8 *ccafallthrdbm, u8 *ccaenergy_reset_type, u8 *disccaen, u8 *satccaen, u8 *ccarisethrdbm)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR);

	*cca_cnt_clear = (local_val & ((u32)0x80000000)) >> 31;
	*cca_cnt_rate = (local_val & ((u32)0x60000000)) >> 29;
	*inbdccapowmindbm = (local_val & ((u32)0x1FF00000)) >> 20;
	*ccafallthrdbm = (local_val & ((u32)0x000FF000)) >> 12;
	*ccaenergy_reset_type = (local_val & ((u32)0x00000400)) >> 10;
	*disccaen = (local_val & ((u32)0x00000200)) >> 9;
	*satccaen = (local_val & ((u32)0x00000100)) >> 8;
	*ccarisethrdbm = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline void riu_rwnxagccca_1_cca_cnt_clear_setf(struct cl_chip *chip, u8 ccacntclear)
{
	ASSERT_ERR_CHIP((((u32)ccacntclear << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR) & ~((u32)0x80000000)) | ((u32)ccacntclear << 31));
}

static inline u8 riu_rwnxagccca_1_cca_cnt_rate_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR);

	return (u8)((local_val & ((u32)0x60000000)) >> 29);
}

static inline void riu_rwnxagccca_1_cca_cnt_rate_setf(struct cl_chip *chip, u8 ccacntrate)
{
	ASSERT_ERR_CHIP((((u32)ccacntrate << 29) & ~((u32)0x60000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR) & ~((u32)0x60000000)) | ((u32)ccacntrate << 29));
}

static inline u16 riu_rwnxagccca_1_inbdccapowmindbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR);

	return (u16)((local_val & ((u32)0x1FF00000)) >> 20);
}

static inline void riu_rwnxagccca_1_inbdccapowmindbm_setf(struct cl_chip *chip, u16 inbdccapowmindbm)
{
	ASSERT_ERR_CHIP((((u32)inbdccapowmindbm << 20) & ~((u32)0x1FF00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR) & ~((u32)0x1FF00000)) | ((u32)inbdccapowmindbm << 20));
}

static inline u8 riu_rwnxagccca_1_ccafallthrdbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR);

	return (u8)((local_val & ((u32)0x000FF000)) >> 12);
}

static inline void riu_rwnxagccca_1_ccafallthrdbm_setf(struct cl_chip *chip, u8 ccafallthrdbm)
{
	ASSERT_ERR_CHIP((((u32)ccafallthrdbm << 12) & ~((u32)0x000FF000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR) & ~((u32)0x000FF000)) | ((u32)ccafallthrdbm << 12));
}

static inline u8 riu_rwnxagccca_1_ccaenergy_reset_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void riu_rwnxagccca_1_ccaenergy_reset_type_setf(struct cl_chip *chip, u8 ccaenergyresettype)
{
	ASSERT_ERR_CHIP((((u32)ccaenergyresettype << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR) & ~((u32)0x00000400)) | ((u32)ccaenergyresettype << 10));
}

static inline u8 riu_rwnxagccca_1_disccaen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void riu_rwnxagccca_1_disccaen_setf(struct cl_chip *chip, u8 disccaen)
{
	ASSERT_ERR_CHIP((((u32)disccaen << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR) & ~((u32)0x00000200)) | ((u32)disccaen << 9));
}

static inline u8 riu_rwnxagccca_1_satccaen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void riu_rwnxagccca_1_satccaen_setf(struct cl_chip *chip, u8 satccaen)
{
	ASSERT_ERR_CHIP((((u32)satccaen << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR) & ~((u32)0x00000100)) | ((u32)satccaen << 8));
}

static inline u8 riu_rwnxagccca_1_ccarisethrdbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagccca_1_ccarisethrdbm_setf(struct cl_chip *chip, u8 ccarisethrdbm)
{
	ASSERT_ERR_CHIP((((u32)ccarisethrdbm << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_1_ADDR) & ~((u32)0x000000FF)) | ((u32)ccarisethrdbm << 0));
}

/**
 * @brief RWNXAGCCCACTRL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 CCAFLAG3_CTRL             0xA
 *    27:24 CCAFLAG2_CTRL             0x2
 *    23:20 CCAFLAG1_CTRL             0x8
 *    19:16 CCAFLAG0_CTRL             0x0
 *    14:12 CCA_SECOND_ANT_SEL        0x1
 *    10:08 CCA_MAIN_ANT_SEL          0x0
 *    07:04 CCADEMOD                  0xF
 *    03:02 CCACOUNTERSCLOCK          0x0
 *    01    CCACOUNTERSRESET          0
 *    00    CCACSEN                   1
 * </pre>
 */
#define RIU_RWNXAGCCCACTRL_ADDR        (REG_RIU_BASE_ADDR + 0x000003B0)
#define RIU_RWNXAGCCCACTRL_OFFSET      0x000003B0
#define RIU_RWNXAGCCCACTRL_INDEX       0x000000EC
#define RIU_RWNXAGCCCACTRL_RESET       0xA28010F1

static inline u32 riu_rwnxagcccactrl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR);
}

static inline void riu_rwnxagcccactrl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCCCACTRL_CCAFLAG_3_CTRL_MASK    ((u32)0xF0000000)
#define RIU_RWNXAGCCCACTRL_CCAFLAG_3_CTRL_LSB    28
#define RIU_RWNXAGCCCACTRL_CCAFLAG_3_CTRL_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCCCACTRL_CCAFLAG_2_CTRL_MASK    ((u32)0x0F000000)
#define RIU_RWNXAGCCCACTRL_CCAFLAG_2_CTRL_LSB    24
#define RIU_RWNXAGCCCACTRL_CCAFLAG_2_CTRL_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCCCACTRL_CCAFLAG_1_CTRL_MASK    ((u32)0x00F00000)
#define RIU_RWNXAGCCCACTRL_CCAFLAG_1_CTRL_LSB    20
#define RIU_RWNXAGCCCACTRL_CCAFLAG_1_CTRL_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCCCACTRL_CCAFLAG_0_CTRL_MASK    ((u32)0x000F0000)
#define RIU_RWNXAGCCCACTRL_CCAFLAG_0_CTRL_LSB    16
#define RIU_RWNXAGCCCACTRL_CCAFLAG_0_CTRL_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCCCACTRL_CCA_SECOND_ANT_SEL_MASK    ((u32)0x00007000)
#define RIU_RWNXAGCCCACTRL_CCA_SECOND_ANT_SEL_LSB    12
#define RIU_RWNXAGCCCACTRL_CCA_SECOND_ANT_SEL_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCCCACTRL_CCA_MAIN_ANT_SEL_MASK    ((u32)0x00000700)
#define RIU_RWNXAGCCCACTRL_CCA_MAIN_ANT_SEL_LSB    8
#define RIU_RWNXAGCCCACTRL_CCA_MAIN_ANT_SEL_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCCCACTRL_CCADEMOD_MASK    ((u32)0x000000F0)
#define RIU_RWNXAGCCCACTRL_CCADEMOD_LSB     4
#define RIU_RWNXAGCCCACTRL_CCADEMOD_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCCCACTRL_CCACOUNTERSCLOCK_MASK    ((u32)0x0000000C)
#define RIU_RWNXAGCCCACTRL_CCACOUNTERSCLOCK_LSB    2
#define RIU_RWNXAGCCCACTRL_CCACOUNTERSCLOCK_WIDTH    ((u32)0x00000002)
#define RIU_RWNXAGCCCACTRL_CCACOUNTERSRESET_BIT    ((u32)0x00000002)
#define RIU_RWNXAGCCCACTRL_CCACOUNTERSRESET_POS    1
#define RIU_RWNXAGCCCACTRL_CCACSEN_BIT      ((u32)0x00000001)
#define RIU_RWNXAGCCCACTRL_CCACSEN_POS      0

#define RIU_RWNXAGCCCACTRL_CCAFLAG_3_CTRL_RST    0xA
#define RIU_RWNXAGCCCACTRL_CCAFLAG_2_CTRL_RST    0x2
#define RIU_RWNXAGCCCACTRL_CCAFLAG_1_CTRL_RST    0x8
#define RIU_RWNXAGCCCACTRL_CCAFLAG_0_CTRL_RST    0x0
#define RIU_RWNXAGCCCACTRL_CCA_SECOND_ANT_SEL_RST    0x1
#define RIU_RWNXAGCCCACTRL_CCA_MAIN_ANT_SEL_RST    0x0
#define RIU_RWNXAGCCCACTRL_CCADEMOD_RST     0xF
#define RIU_RWNXAGCCCACTRL_CCACOUNTERSCLOCK_RST    0x0
#define RIU_RWNXAGCCCACTRL_CCACOUNTERSRESET_RST    0x0
#define RIU_RWNXAGCCCACTRL_CCACSEN_RST      0x1

static inline void riu_rwnxagcccactrl_pack(struct cl_chip *chip, u8 ccaflag3_ctrl, u8 ccaflag2_ctrl, u8 ccaflag1_ctrl, u8 ccaflag0_ctrl, u8 cca_second_ant_sel, u8 cca_main_ant_sel, u8 ccademod, u8 ccacountersclock, u8 ccacountersreset, u8 ccacsen)
{
	ASSERT_ERR_CHIP((((u32)ccaflag3_ctrl << 28) & ~((u32)0xF0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccaflag2_ctrl << 24) & ~((u32)0x0F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccaflag1_ctrl << 20) & ~((u32)0x00F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccaflag0_ctrl << 16) & ~((u32)0x000F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)cca_second_ant_sel << 12) & ~((u32)0x00007000)) == 0);
	ASSERT_ERR_CHIP((((u32)cca_main_ant_sel << 8) & ~((u32)0x00000700)) == 0);
	ASSERT_ERR_CHIP((((u32)ccademod << 4) & ~((u32)0x000000F0)) == 0);
	ASSERT_ERR_CHIP((((u32)ccacountersclock << 2) & ~((u32)0x0000000C)) == 0);
	ASSERT_ERR_CHIP((((u32)ccacountersreset << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)ccacsen << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_ADDR, ((u32)ccaflag3_ctrl << 28) | ((u32)ccaflag2_ctrl << 24) | ((u32)ccaflag1_ctrl << 20) | ((u32)ccaflag0_ctrl << 16) | ((u32)cca_second_ant_sel << 12) | ((u32)cca_main_ant_sel << 8) | ((u32)ccademod << 4) | ((u32)ccacountersclock << 2) | ((u32)ccacountersreset << 1) | ((u32)ccacsen << 0));
}

static inline void riu_rwnxagcccactrl_unpack(struct cl_chip *chip, u8 *ccaflag3_ctrl, u8 *ccaflag2_ctrl, u8 *ccaflag1_ctrl, u8 *ccaflag0_ctrl, u8 *cca_second_ant_sel, u8 *cca_main_ant_sel, u8 *ccademod, u8 *ccacountersclock, u8 *ccacountersreset, u8 *ccacsen)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR);

	*ccaflag3_ctrl = (local_val & ((u32)0xF0000000)) >> 28;
	*ccaflag2_ctrl = (local_val & ((u32)0x0F000000)) >> 24;
	*ccaflag1_ctrl = (local_val & ((u32)0x00F00000)) >> 20;
	*ccaflag0_ctrl = (local_val & ((u32)0x000F0000)) >> 16;
	*cca_second_ant_sel = (local_val & ((u32)0x00007000)) >> 12;
	*cca_main_ant_sel = (local_val & ((u32)0x00000700)) >> 8;
	*ccademod = (local_val & ((u32)0x000000F0)) >> 4;
	*ccacountersclock = (local_val & ((u32)0x0000000C)) >> 2;
	*ccacountersreset = (local_val & ((u32)0x00000002)) >> 1;
	*ccacsen = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_rwnxagcccactrl_ccaflag_3_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR);

	return (u8)((local_val & ((u32)0xF0000000)) >> 28);
}

static inline void riu_rwnxagcccactrl_ccaflag_3_ctrl_setf(struct cl_chip *chip, u8 ccaflag3ctrl)
{
	ASSERT_ERR_CHIP((((u32)ccaflag3ctrl << 28) & ~((u32)0xF0000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR) & ~((u32)0xF0000000)) | ((u32)ccaflag3ctrl << 28));
}

static inline u8 riu_rwnxagcccactrl_ccaflag_2_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR);

	return (u8)((local_val & ((u32)0x0F000000)) >> 24);
}

static inline void riu_rwnxagcccactrl_ccaflag_2_ctrl_setf(struct cl_chip *chip, u8 ccaflag2ctrl)
{
	ASSERT_ERR_CHIP((((u32)ccaflag2ctrl << 24) & ~((u32)0x0F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR) & ~((u32)0x0F000000)) | ((u32)ccaflag2ctrl << 24));
}

static inline u8 riu_rwnxagcccactrl_ccaflag_1_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR);

	return (u8)((local_val & ((u32)0x00F00000)) >> 20);
}

static inline void riu_rwnxagcccactrl_ccaflag_1_ctrl_setf(struct cl_chip *chip, u8 ccaflag1ctrl)
{
	ASSERT_ERR_CHIP((((u32)ccaflag1ctrl << 20) & ~((u32)0x00F00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR) & ~((u32)0x00F00000)) | ((u32)ccaflag1ctrl << 20));
}

static inline u8 riu_rwnxagcccactrl_ccaflag_0_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR);

	return (u8)((local_val & ((u32)0x000F0000)) >> 16);
}

static inline void riu_rwnxagcccactrl_ccaflag_0_ctrl_setf(struct cl_chip *chip, u8 ccaflag0ctrl)
{
	ASSERT_ERR_CHIP((((u32)ccaflag0ctrl << 16) & ~((u32)0x000F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR) & ~((u32)0x000F0000)) | ((u32)ccaflag0ctrl << 16));
}

static inline u8 riu_rwnxagcccactrl_cca_second_ant_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR);

	return (u8)((local_val & ((u32)0x00007000)) >> 12);
}

static inline void riu_rwnxagcccactrl_cca_second_ant_sel_setf(struct cl_chip *chip, u8 ccasecondantsel)
{
	ASSERT_ERR_CHIP((((u32)ccasecondantsel << 12) & ~((u32)0x00007000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR) & ~((u32)0x00007000)) | ((u32)ccasecondantsel << 12));
}

static inline u8 riu_rwnxagcccactrl_cca_main_ant_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000700)) >> 8);
}

static inline void riu_rwnxagcccactrl_cca_main_ant_sel_setf(struct cl_chip *chip, u8 ccamainantsel)
{
	ASSERT_ERR_CHIP((((u32)ccamainantsel << 8) & ~((u32)0x00000700)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR) & ~((u32)0x00000700)) | ((u32)ccamainantsel << 8));
}

static inline u8 riu_rwnxagcccactrl_ccademod_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR);

	return (u8)((local_val & ((u32)0x000000F0)) >> 4);
}

static inline void riu_rwnxagcccactrl_ccademod_setf(struct cl_chip *chip, u8 ccademod)
{
	ASSERT_ERR_CHIP((((u32)ccademod << 4) & ~((u32)0x000000F0)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR) & ~((u32)0x000000F0)) | ((u32)ccademod << 4));
}

static inline u8 riu_rwnxagcccactrl_ccacountersclock_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR);

	return (u8)((local_val & ((u32)0x0000000C)) >> 2);
}

static inline void riu_rwnxagcccactrl_ccacountersclock_setf(struct cl_chip *chip, u8 ccacountersclock)
{
	ASSERT_ERR_CHIP((((u32)ccacountersclock << 2) & ~((u32)0x0000000C)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR) & ~((u32)0x0000000C)) | ((u32)ccacountersclock << 2));
}

static inline u8 riu_rwnxagcccactrl_ccacountersreset_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void riu_rwnxagcccactrl_ccacountersreset_setf(struct cl_chip *chip, u8 ccacountersreset)
{
	ASSERT_ERR_CHIP((((u32)ccacountersreset << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR) & ~((u32)0x00000002)) | ((u32)ccacountersreset << 1));
}

static inline u8 riu_rwnxagcccactrl_ccacsen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_rwnxagcccactrl_ccacsen_setf(struct cl_chip *chip, u8 ccacsen)
{
	ASSERT_ERR_CHIP((((u32)ccacsen << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCACTRL_ADDR) & ~((u32)0x00000001)) | ((u32)ccacsen << 0));
}

/**
 * @brief RWNXAGCCCASTATE_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    28    CCAMDMSTFORCEEN           0
 *    27:24 CCAMDMSTFORCE             0x0
 *    23:12 RXSTATECCA20_SSEL         0x380
 *    11:00 RXSTATECCA20_PSEL         0x3F8
 * </pre>
 */
#define RIU_RWNXAGCCCASTATE_0_ADDR        (REG_RIU_BASE_ADDR + 0x000003B4)
#define RIU_RWNXAGCCCASTATE_0_OFFSET      0x000003B4
#define RIU_RWNXAGCCCASTATE_0_INDEX       0x000000ED
#define RIU_RWNXAGCCCASTATE_0_RESET       0x003803F8

static inline u32 riu_rwnxagcccastate_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCCCASTATE_0_ADDR);
}

static inline void riu_rwnxagcccastate_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCCCASTATE_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCCCASTATE_0_CCAMDMSTFORCEEN_BIT    ((u32)0x10000000)
#define RIU_RWNXAGCCCASTATE_0_CCAMDMSTFORCEEN_POS    28
#define RIU_RWNXAGCCCASTATE_0_CCAMDMSTFORCE_MASK    ((u32)0x0F000000)
#define RIU_RWNXAGCCCASTATE_0_CCAMDMSTFORCE_LSB    24
#define RIU_RWNXAGCCCASTATE_0_CCAMDMSTFORCE_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCCCASTATE_0_RXSTATECCA_20_SSEL_MASK    ((u32)0x00FFF000)
#define RIU_RWNXAGCCCASTATE_0_RXSTATECCA_20_SSEL_LSB    12
#define RIU_RWNXAGCCCASTATE_0_RXSTATECCA_20_SSEL_WIDTH    ((u32)0x0000000C)
#define RIU_RWNXAGCCCASTATE_0_RXSTATECCA_20_PSEL_MASK    ((u32)0x00000FFF)
#define RIU_RWNXAGCCCASTATE_0_RXSTATECCA_20_PSEL_LSB    0
#define RIU_RWNXAGCCCASTATE_0_RXSTATECCA_20_PSEL_WIDTH    ((u32)0x0000000C)

#define RIU_RWNXAGCCCASTATE_0_CCAMDMSTFORCEEN_RST    0x0
#define RIU_RWNXAGCCCASTATE_0_CCAMDMSTFORCE_RST    0x0
#define RIU_RWNXAGCCCASTATE_0_RXSTATECCA_20_SSEL_RST    0x380
#define RIU_RWNXAGCCCASTATE_0_RXSTATECCA_20_PSEL_RST    0x3F8

static inline void riu_rwnxagcccastate_0_pack(struct cl_chip *chip, u8 ccamdmstforceen, u8 ccamdmstforce, u16 rxstatecca20_ssel, u16 rxstatecca20_psel)
{
	ASSERT_ERR_CHIP((((u32)ccamdmstforceen << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccamdmstforce << 24) & ~((u32)0x0F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rxstatecca20_ssel << 12) & ~((u32)0x00FFF000)) == 0);
	ASSERT_ERR_CHIP((((u32)rxstatecca20_psel << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCASTATE_0_ADDR, ((u32)ccamdmstforceen << 28) | ((u32)ccamdmstforce << 24) | ((u32)rxstatecca20_ssel << 12) | ((u32)rxstatecca20_psel << 0));
}

static inline void riu_rwnxagcccastate_0_unpack(struct cl_chip *chip, u8 *ccamdmstforceen, u8 *ccamdmstforce, u16 *rxstatecca20_ssel, u16 *rxstatecca20_psel)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCASTATE_0_ADDR);

	*ccamdmstforceen = (local_val & ((u32)0x10000000)) >> 28;
	*ccamdmstforce = (local_val & ((u32)0x0F000000)) >> 24;
	*rxstatecca20_ssel = (local_val & ((u32)0x00FFF000)) >> 12;
	*rxstatecca20_psel = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u8 riu_rwnxagcccastate_0_ccamdmstforceen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCASTATE_0_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void riu_rwnxagcccastate_0_ccamdmstforceen_setf(struct cl_chip *chip, u8 ccamdmstforceen)
{
	ASSERT_ERR_CHIP((((u32)ccamdmstforceen << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCASTATE_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCASTATE_0_ADDR) & ~((u32)0x10000000)) | ((u32)ccamdmstforceen << 28));
}

static inline u8 riu_rwnxagcccastate_0_ccamdmstforce_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCASTATE_0_ADDR);

	return (u8)((local_val & ((u32)0x0F000000)) >> 24);
}

static inline void riu_rwnxagcccastate_0_ccamdmstforce_setf(struct cl_chip *chip, u8 ccamdmstforce)
{
	ASSERT_ERR_CHIP((((u32)ccamdmstforce << 24) & ~((u32)0x0F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCASTATE_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCASTATE_0_ADDR) & ~((u32)0x0F000000)) | ((u32)ccamdmstforce << 24));
}

static inline u16 riu_rwnxagcccastate_0_rxstatecca_20_ssel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCASTATE_0_ADDR);

	return (u16)((local_val & ((u32)0x00FFF000)) >> 12);
}

static inline void riu_rwnxagcccastate_0_rxstatecca_20_ssel_setf(struct cl_chip *chip, u16 rxstatecca20ssel)
{
	ASSERT_ERR_CHIP((((u32)rxstatecca20ssel << 12) & ~((u32)0x00FFF000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCASTATE_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCASTATE_0_ADDR) & ~((u32)0x00FFF000)) | ((u32)rxstatecca20ssel << 12));
}

static inline u16 riu_rwnxagcccastate_0_rxstatecca_20_psel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCASTATE_0_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

static inline void riu_rwnxagcccastate_0_rxstatecca_20_psel_setf(struct cl_chip *chip, u16 rxstatecca20psel)
{
	ASSERT_ERR_CHIP((((u32)rxstatecca20psel << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCASTATE_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCASTATE_0_ADDR) & ~((u32)0x00000FFF)) | ((u32)rxstatecca20psel << 0));
}

/**
 * @brief RWNXAGCCCASTATE_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 RXSTATECCA80_SSEL         0x200
 *    11:00 RXSTATECCA40_SSEL         0x300
 * </pre>
 */
#define RIU_RWNXAGCCCASTATE_1_ADDR        (REG_RIU_BASE_ADDR + 0x000003B8)
#define RIU_RWNXAGCCCASTATE_1_OFFSET      0x000003B8
#define RIU_RWNXAGCCCASTATE_1_INDEX       0x000000EE
#define RIU_RWNXAGCCCASTATE_1_RESET       0x02000300

static inline u32 riu_rwnxagcccastate_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCCCASTATE_1_ADDR);
}

static inline void riu_rwnxagcccastate_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCCCASTATE_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCCCASTATE_1_RXSTATECCA_80_SSEL_MASK    ((u32)0x0FFF0000)
#define RIU_RWNXAGCCCASTATE_1_RXSTATECCA_80_SSEL_LSB    16
#define RIU_RWNXAGCCCASTATE_1_RXSTATECCA_80_SSEL_WIDTH    ((u32)0x0000000C)
#define RIU_RWNXAGCCCASTATE_1_RXSTATECCA_40_SSEL_MASK    ((u32)0x00000FFF)
#define RIU_RWNXAGCCCASTATE_1_RXSTATECCA_40_SSEL_LSB    0
#define RIU_RWNXAGCCCASTATE_1_RXSTATECCA_40_SSEL_WIDTH    ((u32)0x0000000C)

#define RIU_RWNXAGCCCASTATE_1_RXSTATECCA_80_SSEL_RST    0x200
#define RIU_RWNXAGCCCASTATE_1_RXSTATECCA_40_SSEL_RST    0x300

static inline void riu_rwnxagcccastate_1_pack(struct cl_chip *chip, u16 rxstatecca80_ssel, u16 rxstatecca40_ssel)
{
	ASSERT_ERR_CHIP((((u32)rxstatecca80_ssel << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)rxstatecca40_ssel << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCASTATE_1_ADDR, ((u32)rxstatecca80_ssel << 16) | ((u32)rxstatecca40_ssel << 0));
}

static inline void riu_rwnxagcccastate_1_unpack(struct cl_chip *chip, u16 *rxstatecca80_ssel, u16 *rxstatecca40_ssel)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCASTATE_1_ADDR);

	*rxstatecca80_ssel = (local_val & ((u32)0x0FFF0000)) >> 16;
	*rxstatecca40_ssel = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u16 riu_rwnxagcccastate_1_rxstatecca_80_ssel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCASTATE_1_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_rwnxagcccastate_1_rxstatecca_80_ssel_setf(struct cl_chip *chip, u16 rxstatecca80ssel)
{
	ASSERT_ERR_CHIP((((u32)rxstatecca80ssel << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCASTATE_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCASTATE_1_ADDR) & ~((u32)0x0FFF0000)) | ((u32)rxstatecca80ssel << 16));
}

static inline u16 riu_rwnxagcccastate_1_rxstatecca_40_ssel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCASTATE_1_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

static inline void riu_rwnxagcccastate_1_rxstatecca_40_ssel_setf(struct cl_chip *chip, u16 rxstatecca40ssel)
{
	ASSERT_ERR_CHIP((((u32)rxstatecca40ssel << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCASTATE_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCASTATE_1_ADDR) & ~((u32)0x00000FFF)) | ((u32)rxstatecca40ssel << 0));
}

/**
 * @brief RWNXAGCCCATIMEOUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCATIMEOUT                0x111700
 * </pre>
 */
#define RIU_RWNXAGCCCATIMEOUT_ADDR        (REG_RIU_BASE_ADDR + 0x000003BC)
#define RIU_RWNXAGCCCATIMEOUT_OFFSET      0x000003BC
#define RIU_RWNXAGCCCATIMEOUT_INDEX       0x000000EF
#define RIU_RWNXAGCCCATIMEOUT_RESET       0x00111700

static inline u32 riu_rwnxagcccatimeout_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCCCATIMEOUT_ADDR);
}

static inline void riu_rwnxagcccatimeout_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCCCATIMEOUT_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCCCATIMEOUT_CCATIMEOUT_MASK    ((u32)0xFFFFFFFF)
#define RIU_RWNXAGCCCATIMEOUT_CCATIMEOUT_LSB    0
#define RIU_RWNXAGCCCATIMEOUT_CCATIMEOUT_WIDTH    ((u32)0x00000020)

#define RIU_RWNXAGCCCATIMEOUT_CCATIMEOUT_RST    0x111700

static inline u32 riu_rwnxagcccatimeout_ccatimeout_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCATIMEOUT_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_rwnxagcccatimeout_ccatimeout_setf(struct cl_chip *chip, u32 ccatimeout)
{
	ASSERT_ERR_CHIP((((u32)ccatimeout << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCATIMEOUT_ADDR, (u32)ccatimeout << 0);
}

/**
 * @brief RWNXAGCCOMP_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 IDINBDPOWGAPDNQDBM        0x28
 *    23:16 IDINBDPOWGAPUPQDBM        0x28
 *    15:08 INBDPOWINFTHRDBM          0xB0
 *    07:00 INBDPOWSUPTHRDBM          0xAE
 * </pre>
 */
#define RIU_RWNXAGCCOMP_0_ADDR        (REG_RIU_BASE_ADDR + 0x000003C0)
#define RIU_RWNXAGCCOMP_0_OFFSET      0x000003C0
#define RIU_RWNXAGCCOMP_0_INDEX       0x000000F0
#define RIU_RWNXAGCCOMP_0_RESET       0x2828B0AE

static inline u32 riu_rwnxagccomp_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCCOMP_0_ADDR);
}

static inline void riu_rwnxagccomp_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCCOMP_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCCOMP_0_IDINBDPOWGAPDNQDBM_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCCOMP_0_IDINBDPOWGAPDNQDBM_LSB    24
#define RIU_RWNXAGCCOMP_0_IDINBDPOWGAPDNQDBM_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCCOMP_0_IDINBDPOWGAPUPQDBM_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCCOMP_0_IDINBDPOWGAPUPQDBM_LSB    16
#define RIU_RWNXAGCCOMP_0_IDINBDPOWGAPUPQDBM_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCCOMP_0_INBDPOWINFTHRDBM_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCCOMP_0_INBDPOWINFTHRDBM_LSB    8
#define RIU_RWNXAGCCOMP_0_INBDPOWINFTHRDBM_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCCOMP_0_INBDPOWSUPTHRDBM_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCCOMP_0_INBDPOWSUPTHRDBM_LSB    0
#define RIU_RWNXAGCCOMP_0_INBDPOWSUPTHRDBM_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCCOMP_0_IDINBDPOWGAPDNQDBM_RST    0x28
#define RIU_RWNXAGCCOMP_0_IDINBDPOWGAPUPQDBM_RST    0x28
#define RIU_RWNXAGCCOMP_0_INBDPOWINFTHRDBM_RST    0xB0
#define RIU_RWNXAGCCOMP_0_INBDPOWSUPTHRDBM_RST    0xAE

static inline void riu_rwnxagccomp_0_pack(struct cl_chip *chip, u8 idinbdpowgapdnqdbm, u8 idinbdpowgapupqdbm, u8 inbdpowinfthrdbm, u8 inbdpowsupthrdbm)
{
	ASSERT_ERR_CHIP((((u32)idinbdpowgapdnqdbm << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)idinbdpowgapupqdbm << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)inbdpowinfthrdbm << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)inbdpowsupthrdbm << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCOMP_0_ADDR, ((u32)idinbdpowgapdnqdbm << 24) | ((u32)idinbdpowgapupqdbm << 16) | ((u32)inbdpowinfthrdbm << 8) | ((u32)inbdpowsupthrdbm << 0));
}

static inline void riu_rwnxagccomp_0_unpack(struct cl_chip *chip, u8 *idinbdpowgapdnqdbm, u8 *idinbdpowgapupqdbm, u8 *inbdpowinfthrdbm, u8 *inbdpowsupthrdbm)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCOMP_0_ADDR);

	*idinbdpowgapdnqdbm = (local_val & ((u32)0xFF000000)) >> 24;
	*idinbdpowgapupqdbm = (local_val & ((u32)0x00FF0000)) >> 16;
	*inbdpowinfthrdbm = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpowsupthrdbm = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagccomp_0_idinbdpowgapdnqdbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCOMP_0_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagccomp_0_idinbdpowgapdnqdbm_setf(struct cl_chip *chip, u8 idinbdpowgapdnqdbm)
{
	ASSERT_ERR_CHIP((((u32)idinbdpowgapdnqdbm << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCOMP_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCOMP_0_ADDR) & ~((u32)0xFF000000)) | ((u32)idinbdpowgapdnqdbm << 24));
}

static inline u8 riu_rwnxagccomp_0_idinbdpowgapupqdbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCOMP_0_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagccomp_0_idinbdpowgapupqdbm_setf(struct cl_chip *chip, u8 idinbdpowgapupqdbm)
{
	ASSERT_ERR_CHIP((((u32)idinbdpowgapupqdbm << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCOMP_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCOMP_0_ADDR) & ~((u32)0x00FF0000)) | ((u32)idinbdpowgapupqdbm << 16));
}

static inline u8 riu_rwnxagccomp_0_inbdpowinfthrdbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCOMP_0_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagccomp_0_inbdpowinfthrdbm_setf(struct cl_chip *chip, u8 inbdpowinfthrdbm)
{
	ASSERT_ERR_CHIP((((u32)inbdpowinfthrdbm << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCOMP_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCOMP_0_ADDR) & ~((u32)0x0000FF00)) | ((u32)inbdpowinfthrdbm << 8));
}

static inline u8 riu_rwnxagccomp_0_inbdpowsupthrdbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCOMP_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagccomp_0_inbdpowsupthrdbm_setf(struct cl_chip *chip, u8 inbdpowsupthrdbm)
{
	ASSERT_ERR_CHIP((((u32)inbdpowsupthrdbm << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCOMP_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCOMP_0_ADDR) & ~((u32)0x000000FF)) | ((u32)inbdpowsupthrdbm << 0));
}

/**
 * @brief RWNXAGCCOMP_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 ADCPOWINFTHRDBV           0xF2
 *    23:16 ADCPOWSUPTHRDBV           0xDB
 *    15:08 ADCPOWINFTHRDBM           0xBF
 *    07:00 ADCPOWSUPTHRDBM           0xBE
 * </pre>
 */
#define RIU_RWNXAGCCOMP_1_ADDR        (REG_RIU_BASE_ADDR + 0x000003C4)
#define RIU_RWNXAGCCOMP_1_OFFSET      0x000003C4
#define RIU_RWNXAGCCOMP_1_INDEX       0x000000F1
#define RIU_RWNXAGCCOMP_1_RESET       0xF2DBBFBE

static inline u32 riu_rwnxagccomp_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCCOMP_1_ADDR);
}

static inline void riu_rwnxagccomp_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCCOMP_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCCOMP_1_ADCPOWINFTHRDBV_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCCOMP_1_ADCPOWINFTHRDBV_LSB    24
#define RIU_RWNXAGCCOMP_1_ADCPOWINFTHRDBV_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCCOMP_1_ADCPOWSUPTHRDBV_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCCOMP_1_ADCPOWSUPTHRDBV_LSB    16
#define RIU_RWNXAGCCOMP_1_ADCPOWSUPTHRDBV_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCCOMP_1_ADCPOWINFTHRDBM_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCCOMP_1_ADCPOWINFTHRDBM_LSB    8
#define RIU_RWNXAGCCOMP_1_ADCPOWINFTHRDBM_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCCOMP_1_ADCPOWSUPTHRDBM_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCCOMP_1_ADCPOWSUPTHRDBM_LSB    0
#define RIU_RWNXAGCCOMP_1_ADCPOWSUPTHRDBM_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCCOMP_1_ADCPOWINFTHRDBV_RST    0xF2
#define RIU_RWNXAGCCOMP_1_ADCPOWSUPTHRDBV_RST    0xDB
#define RIU_RWNXAGCCOMP_1_ADCPOWINFTHRDBM_RST    0xBF
#define RIU_RWNXAGCCOMP_1_ADCPOWSUPTHRDBM_RST    0xBE

static inline void riu_rwnxagccomp_1_pack(struct cl_chip *chip, u8 adcpowinfthrdbv, u8 adcpowsupthrdbv, u8 adcpowinfthrdbm, u8 adcpowsupthrdbm)
{
	ASSERT_ERR_CHIP((((u32)adcpowinfthrdbv << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)adcpowsupthrdbv << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)adcpowinfthrdbm << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)adcpowsupthrdbm << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCOMP_1_ADDR, ((u32)adcpowinfthrdbv << 24) | ((u32)adcpowsupthrdbv << 16) | ((u32)adcpowinfthrdbm << 8) | ((u32)adcpowsupthrdbm << 0));
}

static inline void riu_rwnxagccomp_1_unpack(struct cl_chip *chip, u8 *adcpowinfthrdbv, u8 *adcpowsupthrdbv, u8 *adcpowinfthrdbm, u8 *adcpowsupthrdbm)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCOMP_1_ADDR);

	*adcpowinfthrdbv = (local_val & ((u32)0xFF000000)) >> 24;
	*adcpowsupthrdbv = (local_val & ((u32)0x00FF0000)) >> 16;
	*adcpowinfthrdbm = (local_val & ((u32)0x0000FF00)) >> 8;
	*adcpowsupthrdbm = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagccomp_1_adcpowinfthrdbv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCOMP_1_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagccomp_1_adcpowinfthrdbv_setf(struct cl_chip *chip, u8 adcpowinfthrdbv)
{
	ASSERT_ERR_CHIP((((u32)adcpowinfthrdbv << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCOMP_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCOMP_1_ADDR) & ~((u32)0xFF000000)) | ((u32)adcpowinfthrdbv << 24));
}

static inline u8 riu_rwnxagccomp_1_adcpowsupthrdbv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCOMP_1_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagccomp_1_adcpowsupthrdbv_setf(struct cl_chip *chip, u8 adcpowsupthrdbv)
{
	ASSERT_ERR_CHIP((((u32)adcpowsupthrdbv << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCOMP_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCOMP_1_ADDR) & ~((u32)0x00FF0000)) | ((u32)adcpowsupthrdbv << 16));
}

static inline u8 riu_rwnxagccomp_1_adcpowinfthrdbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCOMP_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagccomp_1_adcpowinfthrdbm_setf(struct cl_chip *chip, u8 adcpowinfthrdbm)
{
	ASSERT_ERR_CHIP((((u32)adcpowinfthrdbm << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCOMP_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCOMP_1_ADDR) & ~((u32)0x0000FF00)) | ((u32)adcpowinfthrdbm << 8));
}

static inline u8 riu_rwnxagccomp_1_adcpowsupthrdbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCOMP_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagccomp_1_adcpowsupthrdbm_setf(struct cl_chip *chip, u8 adcpowsupthrdbm)
{
	ASSERT_ERR_CHIP((((u32)adcpowsupthrdbm << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCOMP_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCOMP_1_ADDR) & ~((u32)0x000000FF)) | ((u32)adcpowsupthrdbm << 0));
}

/**
 * @brief RWNXAGCRADAR register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:20 FREQSINGGAP               0x0
 *    19:12 FREQSING                  0x0
 *    11:08 FOMSINGGAP                0x0
 *    07:00 FOMSING                   0x0
 * </pre>
 */
#define RIU_RWNXAGCRADAR_ADDR        (REG_RIU_BASE_ADDR + 0x000003C8)
#define RIU_RWNXAGCRADAR_OFFSET      0x000003C8
#define RIU_RWNXAGCRADAR_INDEX       0x000000F2
#define RIU_RWNXAGCRADAR_RESET       0x10000000

static inline u32 riu_rwnxagcradar_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCRADAR_ADDR);
}

static inline void riu_rwnxagcradar_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCRADAR_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCRADAR_FREQSINGGAP_MASK    ((u32)0x00F00000)
#define RIU_RWNXAGCRADAR_FREQSINGGAP_LSB    20
#define RIU_RWNXAGCRADAR_FREQSINGGAP_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCRADAR_FREQSING_MASK      ((u32)0x000FF000)
#define RIU_RWNXAGCRADAR_FREQSING_LSB       12
#define RIU_RWNXAGCRADAR_FREQSING_WIDTH     ((u32)0x00000008)
#define RIU_RWNXAGCRADAR_FOMSINGGAP_MASK    ((u32)0x00000F00)
#define RIU_RWNXAGCRADAR_FOMSINGGAP_LSB     8
#define RIU_RWNXAGCRADAR_FOMSINGGAP_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCRADAR_FOMSING_MASK       ((u32)0x000000FF)
#define RIU_RWNXAGCRADAR_FOMSING_LSB        0
#define RIU_RWNXAGCRADAR_FOMSING_WIDTH      ((u32)0x00000008)

#define RIU_RWNXAGCRADAR_FREQSINGGAP_RST    0x0
#define RIU_RWNXAGCRADAR_FREQSING_RST       0x0
#define RIU_RWNXAGCRADAR_FOMSINGGAP_RST     0x0
#define RIU_RWNXAGCRADAR_FOMSING_RST        0x0

static inline void riu_rwnxagcradar_pack(struct cl_chip *chip, u8 freqsinggap, u8 freqsing, u8 fomsinggap, u8 fomsing)
{
	ASSERT_ERR_CHIP((((u32)freqsinggap << 20) & ~((u32)0x00F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)freqsing << 12) & ~((u32)0x000FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)fomsinggap << 8) & ~((u32)0x00000F00)) == 0);
	ASSERT_ERR_CHIP((((u32)fomsing << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRADAR_ADDR, ((u32)freqsinggap << 20) | ((u32)freqsing << 12) | ((u32)fomsinggap << 8) | ((u32)fomsing << 0));
}

static inline void riu_rwnxagcradar_unpack(struct cl_chip *chip, u8 *freqsinggap, u8 *freqsing, u8 *fomsinggap, u8 *fomsing)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRADAR_ADDR);

	*freqsinggap = (local_val & ((u32)0x00F00000)) >> 20;
	*freqsing = (local_val & ((u32)0x000FF000)) >> 12;
	*fomsinggap = (local_val & ((u32)0x00000F00)) >> 8;
	*fomsing = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcradar_freqsinggap_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRADAR_ADDR);

	return (u8)((local_val & ((u32)0x00F00000)) >> 20);
}

static inline void riu_rwnxagcradar_freqsinggap_setf(struct cl_chip *chip, u8 freqsinggap)
{
	ASSERT_ERR_CHIP((((u32)freqsinggap << 20) & ~((u32)0x00F00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRADAR_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRADAR_ADDR) & ~((u32)0x00F00000)) | ((u32)freqsinggap << 20));
}

static inline u8 riu_rwnxagcradar_freqsing_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRADAR_ADDR);

	return (u8)((local_val & ((u32)0x000FF000)) >> 12);
}

static inline void riu_rwnxagcradar_freqsing_setf(struct cl_chip *chip, u8 freqsing)
{
	ASSERT_ERR_CHIP((((u32)freqsing << 12) & ~((u32)0x000FF000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRADAR_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRADAR_ADDR) & ~((u32)0x000FF000)) | ((u32)freqsing << 12));
}

static inline u8 riu_rwnxagcradar_fomsinggap_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRADAR_ADDR);

	return (u8)((local_val & ((u32)0x00000F00)) >> 8);
}

static inline void riu_rwnxagcradar_fomsinggap_setf(struct cl_chip *chip, u8 fomsinggap)
{
	ASSERT_ERR_CHIP((((u32)fomsinggap << 8) & ~((u32)0x00000F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRADAR_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRADAR_ADDR) & ~((u32)0x00000F00)) | ((u32)fomsinggap << 8));
}

static inline u8 riu_rwnxagcradar_fomsing_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRADAR_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcradar_fomsing_setf(struct cl_chip *chip, u8 fomsing)
{
	ASSERT_ERR_CHIP((((u32)fomsing << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRADAR_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRADAR_ADDR) & ~((u32)0x000000FF)) | ((u32)fomsing << 0));
}

/**
 * @brief RWNXAGCRADARTIM register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    PULSETIMERCLEAR           0
 *    20:16 PULSEIRQFIFOTHR           0x3
 *    07:00 PULSEIRQTIMEOUT           0x8
 * </pre>
 */
#define RIU_RWNXAGCRADARTIM_ADDR        (REG_RIU_BASE_ADDR + 0x000003CC)
#define RIU_RWNXAGCRADARTIM_OFFSET      0x000003CC
#define RIU_RWNXAGCRADARTIM_INDEX       0x000000F3
#define RIU_RWNXAGCRADARTIM_RESET       0x00030008

static inline u32 riu_rwnxagcradartim_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCRADARTIM_ADDR);
}

static inline void riu_rwnxagcradartim_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCRADARTIM_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCRADARTIM_PULSETIMERCLEAR_BIT    ((u32)0x80000000)
#define RIU_RWNXAGCRADARTIM_PULSETIMERCLEAR_POS    31
#define RIU_RWNXAGCRADARTIM_PULSEIRQFIFOTHR_MASK    ((u32)0x001F0000)
#define RIU_RWNXAGCRADARTIM_PULSEIRQFIFOTHR_LSB    16
#define RIU_RWNXAGCRADARTIM_PULSEIRQFIFOTHR_WIDTH    ((u32)0x00000005)
#define RIU_RWNXAGCRADARTIM_PULSEIRQTIMEOUT_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCRADARTIM_PULSEIRQTIMEOUT_LSB    0
#define RIU_RWNXAGCRADARTIM_PULSEIRQTIMEOUT_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCRADARTIM_PULSETIMERCLEAR_RST    0x0
#define RIU_RWNXAGCRADARTIM_PULSEIRQFIFOTHR_RST    0x3
#define RIU_RWNXAGCRADARTIM_PULSEIRQTIMEOUT_RST    0x8

static inline void riu_rwnxagcradartim_pack(struct cl_chip *chip, u8 pulsetimerclear, u8 pulseirqfifothr, u8 pulseirqtimeout)
{
	ASSERT_ERR_CHIP((((u32)pulsetimerclear << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)pulseirqfifothr << 16) & ~((u32)0x001F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)pulseirqtimeout << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRADARTIM_ADDR, ((u32)pulsetimerclear << 31) | ((u32)pulseirqfifothr << 16) | ((u32)pulseirqtimeout << 0));
}

static inline void riu_rwnxagcradartim_unpack(struct cl_chip *chip, u8 *pulsetimerclear, u8 *pulseirqfifothr, u8 *pulseirqtimeout)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRADARTIM_ADDR);

	*pulsetimerclear = (local_val & ((u32)0x80000000)) >> 31;
	*pulseirqfifothr = (local_val & ((u32)0x001F0000)) >> 16;
	*pulseirqtimeout = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcradartim_pulsetimerclear_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRADARTIM_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_rwnxagcradartim_pulsetimerclear_setf(struct cl_chip *chip, u8 pulsetimerclear)
{
	ASSERT_ERR_CHIP((((u32)pulsetimerclear << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRADARTIM_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRADARTIM_ADDR) & ~((u32)0x80000000)) | ((u32)pulsetimerclear << 31));
}

static inline u8 riu_rwnxagcradartim_pulseirqfifothr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRADARTIM_ADDR);

	return (u8)((local_val & ((u32)0x001F0000)) >> 16);
}

static inline void riu_rwnxagcradartim_pulseirqfifothr_setf(struct cl_chip *chip, u8 pulseirqfifothr)
{
	ASSERT_ERR_CHIP((((u32)pulseirqfifothr << 16) & ~((u32)0x001F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRADARTIM_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRADARTIM_ADDR) & ~((u32)0x001F0000)) | ((u32)pulseirqfifothr << 16));
}

static inline u8 riu_rwnxagcradartim_pulseirqtimeout_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRADARTIM_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcradartim_pulseirqtimeout_setf(struct cl_chip *chip, u8 pulseirqtimeout)
{
	ASSERT_ERR_CHIP((((u32)pulseirqtimeout << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRADARTIM_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRADARTIM_ADDR) & ~((u32)0x000000FF)) | ((u32)pulseirqtimeout << 0));
}

/**
 * @brief RWNXAGCCCA_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:27 CCASGITHR                 0x12
 *    26:22 CCALGITHR                 0x14
 *    21    CCAGISATEN                0
 *    20    CCAGIDISEN                0
 *    19:12 CCAGIFALLTHRDBM           0xb5
 *    11    GIAnt_Sel                 0
 *    10:08 CCANONHEGINBSYMB          0x4
 *    07:00 CCAGIRISETHRDBM           0xB2
 * </pre>
 */
#define RIU_RWNXAGCCCA_2_ADDR        (REG_RIU_BASE_ADDR + 0x000003D0)
#define RIU_RWNXAGCCCA_2_OFFSET      0x000003D0
#define RIU_RWNXAGCCCA_2_INDEX       0x000000F4
#define RIU_RWNXAGCCCA_2_RESET       0x950B54B2

static inline u32 riu_rwnxagccca_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR);
}

static inline void riu_rwnxagccca_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCCCA_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCCCA_2_CCASGITHR_MASK     ((u32)0xF8000000)
#define RIU_RWNXAGCCCA_2_CCASGITHR_LSB      27
#define RIU_RWNXAGCCCA_2_CCASGITHR_WIDTH    ((u32)0x00000005)
#define RIU_RWNXAGCCCA_2_CCALGITHR_MASK     ((u32)0x07C00000)
#define RIU_RWNXAGCCCA_2_CCALGITHR_LSB      22
#define RIU_RWNXAGCCCA_2_CCALGITHR_WIDTH    ((u32)0x00000005)
#define RIU_RWNXAGCCCA_2_CCAGISATEN_BIT     ((u32)0x00200000)
#define RIU_RWNXAGCCCA_2_CCAGISATEN_POS     21
#define RIU_RWNXAGCCCA_2_CCAGIDISEN_BIT     ((u32)0x00100000)
#define RIU_RWNXAGCCCA_2_CCAGIDISEN_POS     20
#define RIU_RWNXAGCCCA_2_CCAGIFALLTHRDBM_MASK    ((u32)0x000FF000)
#define RIU_RWNXAGCCCA_2_CCAGIFALLTHRDBM_LSB    12
#define RIU_RWNXAGCCCA_2_CCAGIFALLTHRDBM_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCCCA_2_GIANT_SEL_BIT      ((u32)0x00000800)
#define RIU_RWNXAGCCCA_2_GIANT_SEL_POS      11
#define RIU_RWNXAGCCCA_2_CCANONHEGINBSYMB_MASK    ((u32)0x00000700)
#define RIU_RWNXAGCCCA_2_CCANONHEGINBSYMB_LSB    8
#define RIU_RWNXAGCCCA_2_CCANONHEGINBSYMB_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCCCA_2_CCAGIRISETHRDBM_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCCCA_2_CCAGIRISETHRDBM_LSB    0
#define RIU_RWNXAGCCCA_2_CCAGIRISETHRDBM_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCCCA_2_CCASGITHR_RST      0x12
#define RIU_RWNXAGCCCA_2_CCALGITHR_RST      0x14
#define RIU_RWNXAGCCCA_2_CCAGISATEN_RST     0x0
#define RIU_RWNXAGCCCA_2_CCAGIDISEN_RST     0x0
#define RIU_RWNXAGCCCA_2_CCAGIFALLTHRDBM_RST    0xb5
#define RIU_RWNXAGCCCA_2_GIANT_SEL_RST      0x0
#define RIU_RWNXAGCCCA_2_CCANONHEGINBSYMB_RST    0x4
#define RIU_RWNXAGCCCA_2_CCAGIRISETHRDBM_RST    0xB2

static inline void riu_rwnxagccca_2_pack(struct cl_chip *chip, u8 ccasgithr, u8 ccalgithr, u8 ccagisaten, u8 ccagidisen, u8 ccagifallthrdbm, u8 giant_sel, u8 ccanonheginbsymb, u8 ccagirisethrdbm)
{
	ASSERT_ERR_CHIP((((u32)ccasgithr << 27) & ~((u32)0xF8000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccalgithr << 22) & ~((u32)0x07C00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccagisaten << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccagidisen << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccagifallthrdbm << 12) & ~((u32)0x000FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)giant_sel << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)ccanonheginbsymb << 8) & ~((u32)0x00000700)) == 0);
	ASSERT_ERR_CHIP((((u32)ccagirisethrdbm << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_2_ADDR, ((u32)ccasgithr << 27) | ((u32)ccalgithr << 22) | ((u32)ccagisaten << 21) | ((u32)ccagidisen << 20) | ((u32)ccagifallthrdbm << 12) | ((u32)giant_sel << 11) | ((u32)ccanonheginbsymb << 8) | ((u32)ccagirisethrdbm << 0));
}

static inline void riu_rwnxagccca_2_unpack(struct cl_chip *chip, u8 *ccasgithr, u8 *ccalgithr, u8 *ccagisaten, u8 *ccagidisen, u8 *ccagifallthrdbm, u8 *giant_sel, u8 *ccanonheginbsymb, u8 *ccagirisethrdbm)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR);

	*ccasgithr = (local_val & ((u32)0xF8000000)) >> 27;
	*ccalgithr = (local_val & ((u32)0x07C00000)) >> 22;
	*ccagisaten = (local_val & ((u32)0x00200000)) >> 21;
	*ccagidisen = (local_val & ((u32)0x00100000)) >> 20;
	*ccagifallthrdbm = (local_val & ((u32)0x000FF000)) >> 12;
	*giant_sel = (local_val & ((u32)0x00000800)) >> 11;
	*ccanonheginbsymb = (local_val & ((u32)0x00000700)) >> 8;
	*ccagirisethrdbm = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagccca_2_ccasgithr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR);

	return (u8)((local_val & ((u32)0xF8000000)) >> 27);
}

static inline void riu_rwnxagccca_2_ccasgithr_setf(struct cl_chip *chip, u8 ccasgithr)
{
	ASSERT_ERR_CHIP((((u32)ccasgithr << 27) & ~((u32)0xF8000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR) & ~((u32)0xF8000000)) | ((u32)ccasgithr << 27));
}

static inline u8 riu_rwnxagccca_2_ccalgithr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR);

	return (u8)((local_val & ((u32)0x07C00000)) >> 22);
}

static inline void riu_rwnxagccca_2_ccalgithr_setf(struct cl_chip *chip, u8 ccalgithr)
{
	ASSERT_ERR_CHIP((((u32)ccalgithr << 22) & ~((u32)0x07C00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR) & ~((u32)0x07C00000)) | ((u32)ccalgithr << 22));
}

static inline u8 riu_rwnxagccca_2_ccagisaten_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline void riu_rwnxagccca_2_ccagisaten_setf(struct cl_chip *chip, u8 ccagisaten)
{
	ASSERT_ERR_CHIP((((u32)ccagisaten << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR) & ~((u32)0x00200000)) | ((u32)ccagisaten << 21));
}

static inline u8 riu_rwnxagccca_2_ccagidisen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void riu_rwnxagccca_2_ccagidisen_setf(struct cl_chip *chip, u8 ccagidisen)
{
	ASSERT_ERR_CHIP((((u32)ccagidisen << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR) & ~((u32)0x00100000)) | ((u32)ccagidisen << 20));
}

static inline u8 riu_rwnxagccca_2_ccagifallthrdbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR);

	return (u8)((local_val & ((u32)0x000FF000)) >> 12);
}

static inline void riu_rwnxagccca_2_ccagifallthrdbm_setf(struct cl_chip *chip, u8 ccagifallthrdbm)
{
	ASSERT_ERR_CHIP((((u32)ccagifallthrdbm << 12) & ~((u32)0x000FF000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR) & ~((u32)0x000FF000)) | ((u32)ccagifallthrdbm << 12));
}

static inline u8 riu_rwnxagccca_2_giant_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void riu_rwnxagccca_2_giant_sel_setf(struct cl_chip *chip, u8 giantsel)
{
	ASSERT_ERR_CHIP((((u32)giantsel << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR) & ~((u32)0x00000800)) | ((u32)giantsel << 11));
}

static inline u8 riu_rwnxagccca_2_ccanonheginbsymb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR);

	return (u8)((local_val & ((u32)0x00000700)) >> 8);
}

static inline void riu_rwnxagccca_2_ccanonheginbsymb_setf(struct cl_chip *chip, u8 ccanonheginbsymb)
{
	ASSERT_ERR_CHIP((((u32)ccanonheginbsymb << 8) & ~((u32)0x00000700)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR) & ~((u32)0x00000700)) | ((u32)ccanonheginbsymb << 8));
}

static inline u8 riu_rwnxagccca_2_ccagirisethrdbm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagccca_2_ccagirisethrdbm_setf(struct cl_chip *chip, u8 ccagirisethrdbm)
{
	ASSERT_ERR_CHIP((((u32)ccagirisethrdbm << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_2_ADDR) & ~((u32)0x000000FF)) | ((u32)ccagirisethrdbm << 0));
}

/**
 * @brief CCAGENSTAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 FRC_TXENDP_CNT            0x0
 *    27:24 FRC_TXSTART_CNT           0x0
 *    23:20 CCA_STATE_DET_CURRENT     0x0
 *    19    CCA20_P_STATE_DET_STAT    0
 *    18    CCA20_P_RAMPUP_DET_STAT   0
 *    17    CCA20_P_ENERGY_DET_STAT   0
 *    16    CCA20_P_CS                0
 *    15    CCA20_S_STATE_DET_STAT    0
 *    14    CCA20_S_RAMPUP_DET_STAT   0
 *    13    CCA20_S_ENERGY_DET_STAT   0
 *    12:08 CCA20_S_GI_DET_STAT       0x0
 *    07    CCA40_S_STATE_DET_STAT    0
 *    06    CCA40_S_RAMPUP_DET_STAT   0
 *    05    CCA40_S_ENERGY_DET_STAT   0
 *    04:00 CCA40_S_GI_DET_STAT       0x0
 * </pre>
 */
#define RIU_CCAGENSTAT_ADDR        (REG_RIU_BASE_ADDR + 0x000003D4)
#define RIU_CCAGENSTAT_OFFSET      0x000003D4
#define RIU_CCAGENSTAT_INDEX       0x000000F5
#define RIU_CCAGENSTAT_RESET       0x00000000

static inline u32 riu_ccagenstat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);
}

/* Field definitions */
#define RIU_CCAGENSTAT_FRC_TXENDP_CNT_MASK    ((u32)0xF0000000)
#define RIU_CCAGENSTAT_FRC_TXENDP_CNT_LSB    28
#define RIU_CCAGENSTAT_FRC_TXENDP_CNT_WIDTH    ((u32)0x00000004)
#define RIU_CCAGENSTAT_FRC_TXSTART_CNT_MASK    ((u32)0x0F000000)
#define RIU_CCAGENSTAT_FRC_TXSTART_CNT_LSB    24
#define RIU_CCAGENSTAT_FRC_TXSTART_CNT_WIDTH    ((u32)0x00000004)
#define RIU_CCAGENSTAT_CCA_STATE_DET_CURRENT_MASK    ((u32)0x00F00000)
#define RIU_CCAGENSTAT_CCA_STATE_DET_CURRENT_LSB    20
#define RIU_CCAGENSTAT_CCA_STATE_DET_CURRENT_WIDTH    ((u32)0x00000004)
#define RIU_CCAGENSTAT_CCA_20_P_STATE_DET_STAT_BIT    ((u32)0x00080000)
#define RIU_CCAGENSTAT_CCA_20_P_STATE_DET_STAT_POS    19
#define RIU_CCAGENSTAT_CCA_20_P_RAMPUP_DET_STAT_BIT    ((u32)0x00040000)
#define RIU_CCAGENSTAT_CCA_20_P_RAMPUP_DET_STAT_POS    18
#define RIU_CCAGENSTAT_CCA_20_P_ENERGY_DET_STAT_BIT    ((u32)0x00020000)
#define RIU_CCAGENSTAT_CCA_20_P_ENERGY_DET_STAT_POS    17
#define RIU_CCAGENSTAT_CCA_20_P_CS_BIT      ((u32)0x00010000)
#define RIU_CCAGENSTAT_CCA_20_P_CS_POS      16
#define RIU_CCAGENSTAT_CCA_20_S_STATE_DET_STAT_BIT    ((u32)0x00008000)
#define RIU_CCAGENSTAT_CCA_20_S_STATE_DET_STAT_POS    15
#define RIU_CCAGENSTAT_CCA_20_S_RAMPUP_DET_STAT_BIT    ((u32)0x00004000)
#define RIU_CCAGENSTAT_CCA_20_S_RAMPUP_DET_STAT_POS    14
#define RIU_CCAGENSTAT_CCA_20_S_ENERGY_DET_STAT_BIT    ((u32)0x00002000)
#define RIU_CCAGENSTAT_CCA_20_S_ENERGY_DET_STAT_POS    13
#define RIU_CCAGENSTAT_CCA_20_S_GI_DET_STAT_MASK    ((u32)0x00001F00)
#define RIU_CCAGENSTAT_CCA_20_S_GI_DET_STAT_LSB    8
#define RIU_CCAGENSTAT_CCA_20_S_GI_DET_STAT_WIDTH    ((u32)0x00000005)
#define RIU_CCAGENSTAT_CCA_40_S_STATE_DET_STAT_BIT    ((u32)0x00000080)
#define RIU_CCAGENSTAT_CCA_40_S_STATE_DET_STAT_POS    7
#define RIU_CCAGENSTAT_CCA_40_S_RAMPUP_DET_STAT_BIT    ((u32)0x00000040)
#define RIU_CCAGENSTAT_CCA_40_S_RAMPUP_DET_STAT_POS    6
#define RIU_CCAGENSTAT_CCA_40_S_ENERGY_DET_STAT_BIT    ((u32)0x00000020)
#define RIU_CCAGENSTAT_CCA_40_S_ENERGY_DET_STAT_POS    5
#define RIU_CCAGENSTAT_CCA_40_S_GI_DET_STAT_MASK    ((u32)0x0000001F)
#define RIU_CCAGENSTAT_CCA_40_S_GI_DET_STAT_LSB    0
#define RIU_CCAGENSTAT_CCA_40_S_GI_DET_STAT_WIDTH    ((u32)0x00000005)

#define RIU_CCAGENSTAT_FRC_TXENDP_CNT_RST    0x0
#define RIU_CCAGENSTAT_FRC_TXSTART_CNT_RST    0x0
#define RIU_CCAGENSTAT_CCA_STATE_DET_CURRENT_RST    0x0
#define RIU_CCAGENSTAT_CCA_20_P_STATE_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_CCA_20_P_RAMPUP_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_CCA_20_P_ENERGY_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_CCA_20_P_CS_RST      0x0
#define RIU_CCAGENSTAT_CCA_20_S_STATE_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_CCA_20_S_RAMPUP_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_CCA_20_S_ENERGY_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_CCA_20_S_GI_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_CCA_40_S_STATE_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_CCA_40_S_RAMPUP_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_CCA_40_S_ENERGY_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_CCA_40_S_GI_DET_STAT_RST    0x0

static inline void riu_ccagenstat_unpack(struct cl_chip *chip, u8 *frc_txendp_cnt, u8 *frc_txstart_cnt, u8 *cca_state_det_current, u8 *cca20_p_state_det_stat, u8 *cca20_p_rampup_det_stat, u8 *cca20_p_energy_det_stat, u8 *cca20_p_cs, u8 *cca20_s_state_det_stat, u8 *cca20_s_rampup_det_stat, u8 *cca20_s_energy_det_stat, u8 *cca20_s_gi_det_stat, u8 *cca40_s_state_det_stat, u8 *cca40_s_rampup_det_stat, u8 *cca40_s_energy_det_stat, u8 *cca40_s_gi_det_stat)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);

	*frc_txendp_cnt = (local_val & ((u32)0xF0000000)) >> 28;
	*frc_txstart_cnt = (local_val & ((u32)0x0F000000)) >> 24;
	*cca_state_det_current = (local_val & ((u32)0x00F00000)) >> 20;
	*cca20_p_state_det_stat = (local_val & ((u32)0x00080000)) >> 19;
	*cca20_p_rampup_det_stat = (local_val & ((u32)0x00040000)) >> 18;
	*cca20_p_energy_det_stat = (local_val & ((u32)0x00020000)) >> 17;
	*cca20_p_cs = (local_val & ((u32)0x00010000)) >> 16;
	*cca20_s_state_det_stat = (local_val & ((u32)0x00008000)) >> 15;
	*cca20_s_rampup_det_stat = (local_val & ((u32)0x00004000)) >> 14;
	*cca20_s_energy_det_stat = (local_val & ((u32)0x00002000)) >> 13;
	*cca20_s_gi_det_stat = (local_val & ((u32)0x00001F00)) >> 8;
	*cca40_s_state_det_stat = (local_val & ((u32)0x00000080)) >> 7;
	*cca40_s_rampup_det_stat = (local_val & ((u32)0x00000040)) >> 6;
	*cca40_s_energy_det_stat = (local_val & ((u32)0x00000020)) >> 5;
	*cca40_s_gi_det_stat = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u8 riu_ccagenstat_frc_txendp_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);

	return (u8)((local_val & ((u32)0xF0000000)) >> 28);
}

static inline u8 riu_ccagenstat_frc_txstart_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);

	return (u8)((local_val & ((u32)0x0F000000)) >> 24);
}

static inline u8 riu_ccagenstat_cca_state_det_current_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00F00000)) >> 20);
}

static inline u8 riu_ccagenstat_cca_20_p_state_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline u8 riu_ccagenstat_cca_20_p_rampup_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline u8 riu_ccagenstat_cca_20_p_energy_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline u8 riu_ccagenstat_cca_20_p_cs_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline u8 riu_ccagenstat_cca_20_s_state_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline u8 riu_ccagenstat_cca_20_s_rampup_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline u8 riu_ccagenstat_cca_20_s_energy_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline u8 riu_ccagenstat_cca_20_s_gi_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00001F00)) >> 8);
}

static inline u8 riu_ccagenstat_cca_40_s_state_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline u8 riu_ccagenstat_cca_40_s_rampup_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline u8 riu_ccagenstat_cca_40_s_energy_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline u8 riu_ccagenstat_cca_40_s_gi_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

/**
 * @brief RWNXAGCEVT_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:26 EVT4_OP1                  0x0
 *    25:20 EVT4_OP2                  0x0
 *    19:14 EVT4_OP3                  0x0
 *    13    EVT4_PATHCOMB             0
 *    12:10 EVT4_OPCOMB               0x0
 *    09:00 EVT4_TGTADD               0x0
 * </pre>
 */
#define RIU_RWNXAGCEVT_4_ADDR        (REG_RIU_BASE_ADDR + 0x000003D8)
#define RIU_RWNXAGCEVT_4_OFFSET      0x000003D8
#define RIU_RWNXAGCEVT_4_INDEX       0x000000F6
#define RIU_RWNXAGCEVT_4_RESET       0x00000000

static inline u32 riu_rwnxagcevt_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCEVT_4_ADDR);
}

static inline void riu_rwnxagcevt_4_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCEVT_4_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCEVT_4_EVT_4_OP_1_MASK    ((u32)0xFC000000)
#define RIU_RWNXAGCEVT_4_EVT_4_OP_1_LSB     26
#define RIU_RWNXAGCEVT_4_EVT_4_OP_1_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_4_EVT_4_OP_2_MASK    ((u32)0x03F00000)
#define RIU_RWNXAGCEVT_4_EVT_4_OP_2_LSB     20
#define RIU_RWNXAGCEVT_4_EVT_4_OP_2_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_4_EVT_4_OP_3_MASK    ((u32)0x000FC000)
#define RIU_RWNXAGCEVT_4_EVT_4_OP_3_LSB     14
#define RIU_RWNXAGCEVT_4_EVT_4_OP_3_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_4_EVT_4_PATHCOMB_BIT    ((u32)0x00002000)
#define RIU_RWNXAGCEVT_4_EVT_4_PATHCOMB_POS    13
#define RIU_RWNXAGCEVT_4_EVT_4_OPCOMB_MASK    ((u32)0x00001C00)
#define RIU_RWNXAGCEVT_4_EVT_4_OPCOMB_LSB    10
#define RIU_RWNXAGCEVT_4_EVT_4_OPCOMB_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCEVT_4_EVT_4_TGTADD_MASK    ((u32)0x000003FF)
#define RIU_RWNXAGCEVT_4_EVT_4_TGTADD_LSB    0
#define RIU_RWNXAGCEVT_4_EVT_4_TGTADD_WIDTH    ((u32)0x0000000A)

#define RIU_RWNXAGCEVT_4_EVT_4_OP_1_RST     0x0
#define RIU_RWNXAGCEVT_4_EVT_4_OP_2_RST     0x0
#define RIU_RWNXAGCEVT_4_EVT_4_OP_3_RST     0x0
#define RIU_RWNXAGCEVT_4_EVT_4_PATHCOMB_RST    0x0
#define RIU_RWNXAGCEVT_4_EVT_4_OPCOMB_RST    0x0
#define RIU_RWNXAGCEVT_4_EVT_4_TGTADD_RST    0x0

static inline void riu_rwnxagcevt_4_pack(struct cl_chip *chip, u8 evt4_op1, u8 evt4_op2, u8 evt4_op3, u8 evt4_pathcomb, u8 evt4_opcomb, u16 evt4_tgtadd)
{
	ASSERT_ERR_CHIP((((u32)evt4_op1 << 26) & ~((u32)0xFC000000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt4_op2 << 20) & ~((u32)0x03F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt4_op3 << 14) & ~((u32)0x000FC000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt4_pathcomb << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt4_opcomb << 10) & ~((u32)0x00001C00)) == 0);
	ASSERT_ERR_CHIP((((u32)evt4_tgtadd << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_4_ADDR, ((u32)evt4_op1 << 26) | ((u32)evt4_op2 << 20) | ((u32)evt4_op3 << 14) | ((u32)evt4_pathcomb << 13) | ((u32)evt4_opcomb << 10) | ((u32)evt4_tgtadd << 0));
}

static inline void riu_rwnxagcevt_4_unpack(struct cl_chip *chip, u8 *evt4_op1, u8 *evt4_op2, u8 *evt4_op3, u8 *evt4_pathcomb, u8 *evt4_opcomb, u16 *evt4_tgtadd)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_4_ADDR);

	*evt4_op1 = (local_val & ((u32)0xFC000000)) >> 26;
	*evt4_op2 = (local_val & ((u32)0x03F00000)) >> 20;
	*evt4_op3 = (local_val & ((u32)0x000FC000)) >> 14;
	*evt4_pathcomb = (local_val & ((u32)0x00002000)) >> 13;
	*evt4_opcomb = (local_val & ((u32)0x00001C00)) >> 10;
	*evt4_tgtadd = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u8 riu_rwnxagcevt_4_evt_4_op_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_4_ADDR);

	return (u8)((local_val & ((u32)0xFC000000)) >> 26);
}

static inline void riu_rwnxagcevt_4_evt_4_op_1_setf(struct cl_chip *chip, u8 evt4op1)
{
	ASSERT_ERR_CHIP((((u32)evt4op1 << 26) & ~((u32)0xFC000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_4_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_4_ADDR) & ~((u32)0xFC000000)) | ((u32)evt4op1 << 26));
}

static inline u8 riu_rwnxagcevt_4_evt_4_op_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_4_ADDR);

	return (u8)((local_val & ((u32)0x03F00000)) >> 20);
}

static inline void riu_rwnxagcevt_4_evt_4_op_2_setf(struct cl_chip *chip, u8 evt4op2)
{
	ASSERT_ERR_CHIP((((u32)evt4op2 << 20) & ~((u32)0x03F00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_4_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_4_ADDR) & ~((u32)0x03F00000)) | ((u32)evt4op2 << 20));
}

static inline u8 riu_rwnxagcevt_4_evt_4_op_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_4_ADDR);

	return (u8)((local_val & ((u32)0x000FC000)) >> 14);
}

static inline void riu_rwnxagcevt_4_evt_4_op_3_setf(struct cl_chip *chip, u8 evt4op3)
{
	ASSERT_ERR_CHIP((((u32)evt4op3 << 14) & ~((u32)0x000FC000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_4_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_4_ADDR) & ~((u32)0x000FC000)) | ((u32)evt4op3 << 14));
}

static inline u8 riu_rwnxagcevt_4_evt_4_pathcomb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_4_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_rwnxagcevt_4_evt_4_pathcomb_setf(struct cl_chip *chip, u8 evt4pathcomb)
{
	ASSERT_ERR_CHIP((((u32)evt4pathcomb << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_4_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_4_ADDR) & ~((u32)0x00002000)) | ((u32)evt4pathcomb << 13));
}

static inline u8 riu_rwnxagcevt_4_evt_4_opcomb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_4_ADDR);

	return (u8)((local_val & ((u32)0x00001C00)) >> 10);
}

static inline void riu_rwnxagcevt_4_evt_4_opcomb_setf(struct cl_chip *chip, u8 evt4opcomb)
{
	ASSERT_ERR_CHIP((((u32)evt4opcomb << 10) & ~((u32)0x00001C00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_4_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_4_ADDR) & ~((u32)0x00001C00)) | ((u32)evt4opcomb << 10));
}

static inline u16 riu_rwnxagcevt_4_evt_4_tgtadd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_4_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_rwnxagcevt_4_evt_4_tgtadd_setf(struct cl_chip *chip, u16 evt4tgtadd)
{
	ASSERT_ERR_CHIP((((u32)evt4tgtadd << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_4_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_4_ADDR) & ~((u32)0x000003FF)) | ((u32)evt4tgtadd << 0));
}

/**
 * @brief RWNXAGCEVT_5 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:26 EVT5_OP1                  0x0
 *    25:20 EVT5_OP2                  0x0
 *    19:14 EVT5_OP3                  0x0
 *    13    EVT5_PATHCOMB             0
 *    12:10 EVT5_OPCOMB               0x0
 *    09:00 EVT5_TGTADDR              0x0
 * </pre>
 */
#define RIU_RWNXAGCEVT_5_ADDR        (REG_RIU_BASE_ADDR + 0x000003DC)
#define RIU_RWNXAGCEVT_5_OFFSET      0x000003DC
#define RIU_RWNXAGCEVT_5_INDEX       0x000000F7
#define RIU_RWNXAGCEVT_5_RESET       0x00000000

static inline u32 riu_rwnxagcevt_5_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCEVT_5_ADDR);
}

static inline void riu_rwnxagcevt_5_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCEVT_5_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCEVT_5_EVT_5_OP_1_MASK    ((u32)0xFC000000)
#define RIU_RWNXAGCEVT_5_EVT_5_OP_1_LSB     26
#define RIU_RWNXAGCEVT_5_EVT_5_OP_1_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_5_EVT_5_OP_2_MASK    ((u32)0x03F00000)
#define RIU_RWNXAGCEVT_5_EVT_5_OP_2_LSB     20
#define RIU_RWNXAGCEVT_5_EVT_5_OP_2_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_5_EVT_5_OP_3_MASK    ((u32)0x000FC000)
#define RIU_RWNXAGCEVT_5_EVT_5_OP_3_LSB     14
#define RIU_RWNXAGCEVT_5_EVT_5_OP_3_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_5_EVT_5_PATHCOMB_BIT    ((u32)0x00002000)
#define RIU_RWNXAGCEVT_5_EVT_5_PATHCOMB_POS    13
#define RIU_RWNXAGCEVT_5_EVT_5_OPCOMB_MASK    ((u32)0x00001C00)
#define RIU_RWNXAGCEVT_5_EVT_5_OPCOMB_LSB    10
#define RIU_RWNXAGCEVT_5_EVT_5_OPCOMB_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCEVT_5_EVT_5_TGTADDR_MASK    ((u32)0x000003FF)
#define RIU_RWNXAGCEVT_5_EVT_5_TGTADDR_LSB    0
#define RIU_RWNXAGCEVT_5_EVT_5_TGTADDR_WIDTH    ((u32)0x0000000A)

#define RIU_RWNXAGCEVT_5_EVT_5_OP_1_RST     0x0
#define RIU_RWNXAGCEVT_5_EVT_5_OP_2_RST     0x0
#define RIU_RWNXAGCEVT_5_EVT_5_OP_3_RST     0x0
#define RIU_RWNXAGCEVT_5_EVT_5_PATHCOMB_RST    0x0
#define RIU_RWNXAGCEVT_5_EVT_5_OPCOMB_RST    0x0
#define RIU_RWNXAGCEVT_5_EVT_5_TGTADDR_RST    0x0

static inline void riu_rwnxagcevt_5_pack(struct cl_chip *chip, u8 evt5_op1, u8 evt5_op2, u8 evt5_op3, u8 evt5_pathcomb, u8 evt5_opcomb, u16 evt5_tgtaddr)
{
	ASSERT_ERR_CHIP((((u32)evt5_op1 << 26) & ~((u32)0xFC000000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt5_op2 << 20) & ~((u32)0x03F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt5_op3 << 14) & ~((u32)0x000FC000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt5_pathcomb << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt5_opcomb << 10) & ~((u32)0x00001C00)) == 0);
	ASSERT_ERR_CHIP((((u32)evt5_tgtaddr << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_5_ADDR, ((u32)evt5_op1 << 26) | ((u32)evt5_op2 << 20) | ((u32)evt5_op3 << 14) | ((u32)evt5_pathcomb << 13) | ((u32)evt5_opcomb << 10) | ((u32)evt5_tgtaddr << 0));
}

static inline void riu_rwnxagcevt_5_unpack(struct cl_chip *chip, u8 *evt5_op1, u8 *evt5_op2, u8 *evt5_op3, u8 *evt5_pathcomb, u8 *evt5_opcomb, u16 *evt5_tgtaddr)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_5_ADDR);

	*evt5_op1 = (local_val & ((u32)0xFC000000)) >> 26;
	*evt5_op2 = (local_val & ((u32)0x03F00000)) >> 20;
	*evt5_op3 = (local_val & ((u32)0x000FC000)) >> 14;
	*evt5_pathcomb = (local_val & ((u32)0x00002000)) >> 13;
	*evt5_opcomb = (local_val & ((u32)0x00001C00)) >> 10;
	*evt5_tgtaddr = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u8 riu_rwnxagcevt_5_evt_5_op_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_5_ADDR);

	return (u8)((local_val & ((u32)0xFC000000)) >> 26);
}

static inline void riu_rwnxagcevt_5_evt_5_op_1_setf(struct cl_chip *chip, u8 evt5op1)
{
	ASSERT_ERR_CHIP((((u32)evt5op1 << 26) & ~((u32)0xFC000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_5_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_5_ADDR) & ~((u32)0xFC000000)) | ((u32)evt5op1 << 26));
}

static inline u8 riu_rwnxagcevt_5_evt_5_op_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_5_ADDR);

	return (u8)((local_val & ((u32)0x03F00000)) >> 20);
}

static inline void riu_rwnxagcevt_5_evt_5_op_2_setf(struct cl_chip *chip, u8 evt5op2)
{
	ASSERT_ERR_CHIP((((u32)evt5op2 << 20) & ~((u32)0x03F00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_5_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_5_ADDR) & ~((u32)0x03F00000)) | ((u32)evt5op2 << 20));
}

static inline u8 riu_rwnxagcevt_5_evt_5_op_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_5_ADDR);

	return (u8)((local_val & ((u32)0x000FC000)) >> 14);
}

static inline void riu_rwnxagcevt_5_evt_5_op_3_setf(struct cl_chip *chip, u8 evt5op3)
{
	ASSERT_ERR_CHIP((((u32)evt5op3 << 14) & ~((u32)0x000FC000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_5_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_5_ADDR) & ~((u32)0x000FC000)) | ((u32)evt5op3 << 14));
}

static inline u8 riu_rwnxagcevt_5_evt_5_pathcomb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_5_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_rwnxagcevt_5_evt_5_pathcomb_setf(struct cl_chip *chip, u8 evt5pathcomb)
{
	ASSERT_ERR_CHIP((((u32)evt5pathcomb << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_5_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_5_ADDR) & ~((u32)0x00002000)) | ((u32)evt5pathcomb << 13));
}

static inline u8 riu_rwnxagcevt_5_evt_5_opcomb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_5_ADDR);

	return (u8)((local_val & ((u32)0x00001C00)) >> 10);
}

static inline void riu_rwnxagcevt_5_evt_5_opcomb_setf(struct cl_chip *chip, u8 evt5opcomb)
{
	ASSERT_ERR_CHIP((((u32)evt5opcomb << 10) & ~((u32)0x00001C00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_5_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_5_ADDR) & ~((u32)0x00001C00)) | ((u32)evt5opcomb << 10));
}

static inline u16 riu_rwnxagcevt_5_evt_5_tgtaddr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_5_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_rwnxagcevt_5_evt_5_tgtaddr_setf(struct cl_chip *chip, u16 evt5tgtaddr)
{
	ASSERT_ERR_CHIP((((u32)evt5tgtaddr << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_5_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_5_ADDR) & ~((u32)0x000003FF)) | ((u32)evt5tgtaddr << 0));
}

/**
 * @brief RWNXAGCEVT_6 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:26 EVT6_OP1                  0x0
 *    25:20 EVT6_OP2                  0x0
 *    19:14 EVT6_OP3                  0x0
 *    13    EVT6_PATHCOMB             0
 *    12:10 EVT6_OPCOMB               0x0
 *    09:00 EVT6_TGTADD               0x0
 * </pre>
 */
#define RIU_RWNXAGCEVT_6_ADDR        (REG_RIU_BASE_ADDR + 0x000003E0)
#define RIU_RWNXAGCEVT_6_OFFSET      0x000003E0
#define RIU_RWNXAGCEVT_6_INDEX       0x000000F8
#define RIU_RWNXAGCEVT_6_RESET       0x00000000

static inline u32 riu_rwnxagcevt_6_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCEVT_6_ADDR);
}

static inline void riu_rwnxagcevt_6_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCEVT_6_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCEVT_6_EVT_6_OP_1_MASK    ((u32)0xFC000000)
#define RIU_RWNXAGCEVT_6_EVT_6_OP_1_LSB     26
#define RIU_RWNXAGCEVT_6_EVT_6_OP_1_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_6_EVT_6_OP_2_MASK    ((u32)0x03F00000)
#define RIU_RWNXAGCEVT_6_EVT_6_OP_2_LSB     20
#define RIU_RWNXAGCEVT_6_EVT_6_OP_2_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_6_EVT_6_OP_3_MASK    ((u32)0x000FC000)
#define RIU_RWNXAGCEVT_6_EVT_6_OP_3_LSB     14
#define RIU_RWNXAGCEVT_6_EVT_6_OP_3_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_6_EVT_6_PATHCOMB_BIT    ((u32)0x00002000)
#define RIU_RWNXAGCEVT_6_EVT_6_PATHCOMB_POS    13
#define RIU_RWNXAGCEVT_6_EVT_6_OPCOMB_MASK    ((u32)0x00001C00)
#define RIU_RWNXAGCEVT_6_EVT_6_OPCOMB_LSB    10
#define RIU_RWNXAGCEVT_6_EVT_6_OPCOMB_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCEVT_6_EVT_6_TGTADD_MASK    ((u32)0x000003FF)
#define RIU_RWNXAGCEVT_6_EVT_6_TGTADD_LSB    0
#define RIU_RWNXAGCEVT_6_EVT_6_TGTADD_WIDTH    ((u32)0x0000000A)

#define RIU_RWNXAGCEVT_6_EVT_6_OP_1_RST     0x0
#define RIU_RWNXAGCEVT_6_EVT_6_OP_2_RST     0x0
#define RIU_RWNXAGCEVT_6_EVT_6_OP_3_RST     0x0
#define RIU_RWNXAGCEVT_6_EVT_6_PATHCOMB_RST    0x0
#define RIU_RWNXAGCEVT_6_EVT_6_OPCOMB_RST    0x0
#define RIU_RWNXAGCEVT_6_EVT_6_TGTADD_RST    0x0

static inline void riu_rwnxagcevt_6_pack(struct cl_chip *chip, u8 evt6_op1, u8 evt6_op2, u8 evt6_op3, u8 evt6_pathcomb, u8 evt6_opcomb, u16 evt6_tgtadd)
{
	ASSERT_ERR_CHIP((((u32)evt6_op1 << 26) & ~((u32)0xFC000000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt6_op2 << 20) & ~((u32)0x03F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt6_op3 << 14) & ~((u32)0x000FC000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt6_pathcomb << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt6_opcomb << 10) & ~((u32)0x00001C00)) == 0);
	ASSERT_ERR_CHIP((((u32)evt6_tgtadd << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_6_ADDR, ((u32)evt6_op1 << 26) | ((u32)evt6_op2 << 20) | ((u32)evt6_op3 << 14) | ((u32)evt6_pathcomb << 13) | ((u32)evt6_opcomb << 10) | ((u32)evt6_tgtadd << 0));
}

static inline void riu_rwnxagcevt_6_unpack(struct cl_chip *chip, u8 *evt6_op1, u8 *evt6_op2, u8 *evt6_op3, u8 *evt6_pathcomb, u8 *evt6_opcomb, u16 *evt6_tgtadd)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_6_ADDR);

	*evt6_op1 = (local_val & ((u32)0xFC000000)) >> 26;
	*evt6_op2 = (local_val & ((u32)0x03F00000)) >> 20;
	*evt6_op3 = (local_val & ((u32)0x000FC000)) >> 14;
	*evt6_pathcomb = (local_val & ((u32)0x00002000)) >> 13;
	*evt6_opcomb = (local_val & ((u32)0x00001C00)) >> 10;
	*evt6_tgtadd = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u8 riu_rwnxagcevt_6_evt_6_op_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_6_ADDR);

	return (u8)((local_val & ((u32)0xFC000000)) >> 26);
}

static inline void riu_rwnxagcevt_6_evt_6_op_1_setf(struct cl_chip *chip, u8 evt6op1)
{
	ASSERT_ERR_CHIP((((u32)evt6op1 << 26) & ~((u32)0xFC000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_6_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_6_ADDR) & ~((u32)0xFC000000)) | ((u32)evt6op1 << 26));
}

static inline u8 riu_rwnxagcevt_6_evt_6_op_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_6_ADDR);

	return (u8)((local_val & ((u32)0x03F00000)) >> 20);
}

static inline void riu_rwnxagcevt_6_evt_6_op_2_setf(struct cl_chip *chip, u8 evt6op2)
{
	ASSERT_ERR_CHIP((((u32)evt6op2 << 20) & ~((u32)0x03F00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_6_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_6_ADDR) & ~((u32)0x03F00000)) | ((u32)evt6op2 << 20));
}

static inline u8 riu_rwnxagcevt_6_evt_6_op_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_6_ADDR);

	return (u8)((local_val & ((u32)0x000FC000)) >> 14);
}

static inline void riu_rwnxagcevt_6_evt_6_op_3_setf(struct cl_chip *chip, u8 evt6op3)
{
	ASSERT_ERR_CHIP((((u32)evt6op3 << 14) & ~((u32)0x000FC000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_6_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_6_ADDR) & ~((u32)0x000FC000)) | ((u32)evt6op3 << 14));
}

static inline u8 riu_rwnxagcevt_6_evt_6_pathcomb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_6_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_rwnxagcevt_6_evt_6_pathcomb_setf(struct cl_chip *chip, u8 evt6pathcomb)
{
	ASSERT_ERR_CHIP((((u32)evt6pathcomb << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_6_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_6_ADDR) & ~((u32)0x00002000)) | ((u32)evt6pathcomb << 13));
}

static inline u8 riu_rwnxagcevt_6_evt_6_opcomb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_6_ADDR);

	return (u8)((local_val & ((u32)0x00001C00)) >> 10);
}

static inline void riu_rwnxagcevt_6_evt_6_opcomb_setf(struct cl_chip *chip, u8 evt6opcomb)
{
	ASSERT_ERR_CHIP((((u32)evt6opcomb << 10) & ~((u32)0x00001C00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_6_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_6_ADDR) & ~((u32)0x00001C00)) | ((u32)evt6opcomb << 10));
}

static inline u16 riu_rwnxagcevt_6_evt_6_tgtadd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_6_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_rwnxagcevt_6_evt_6_tgtadd_setf(struct cl_chip *chip, u16 evt6tgtadd)
{
	ASSERT_ERR_CHIP((((u32)evt6tgtadd << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_6_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_6_ADDR) & ~((u32)0x000003FF)) | ((u32)evt6tgtadd << 0));
}

/**
 * @brief RWNXAGCEVT_7 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:26 EVT7_OP1                  0x0
 *    25:20 EVT7_OP2                  0x0
 *    19:14 EVT7_OP3                  0x0
 *    13    EVT7_PATHCOMB             0
 *    12:10 EVT7_OPCOMB               0x0
 *    09:00 EVT7_TGTADD               0x0
 * </pre>
 */
#define RIU_RWNXAGCEVT_7_ADDR        (REG_RIU_BASE_ADDR + 0x000003E4)
#define RIU_RWNXAGCEVT_7_OFFSET      0x000003E4
#define RIU_RWNXAGCEVT_7_INDEX       0x000000F9
#define RIU_RWNXAGCEVT_7_RESET       0x00000000

static inline u32 riu_rwnxagcevt_7_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCEVT_7_ADDR);
}

static inline void riu_rwnxagcevt_7_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCEVT_7_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCEVT_7_EVT_7_OP_1_MASK    ((u32)0xFC000000)
#define RIU_RWNXAGCEVT_7_EVT_7_OP_1_LSB     26
#define RIU_RWNXAGCEVT_7_EVT_7_OP_1_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_7_EVT_7_OP_2_MASK    ((u32)0x03F00000)
#define RIU_RWNXAGCEVT_7_EVT_7_OP_2_LSB     20
#define RIU_RWNXAGCEVT_7_EVT_7_OP_2_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_7_EVT_7_OP_3_MASK    ((u32)0x000FC000)
#define RIU_RWNXAGCEVT_7_EVT_7_OP_3_LSB     14
#define RIU_RWNXAGCEVT_7_EVT_7_OP_3_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCEVT_7_EVT_7_PATHCOMB_BIT    ((u32)0x00002000)
#define RIU_RWNXAGCEVT_7_EVT_7_PATHCOMB_POS    13
#define RIU_RWNXAGCEVT_7_EVT_7_OPCOMB_MASK    ((u32)0x00001C00)
#define RIU_RWNXAGCEVT_7_EVT_7_OPCOMB_LSB    10
#define RIU_RWNXAGCEVT_7_EVT_7_OPCOMB_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCEVT_7_EVT_7_TGTADD_MASK    ((u32)0x000003FF)
#define RIU_RWNXAGCEVT_7_EVT_7_TGTADD_LSB    0
#define RIU_RWNXAGCEVT_7_EVT_7_TGTADD_WIDTH    ((u32)0x0000000A)

#define RIU_RWNXAGCEVT_7_EVT_7_OP_1_RST     0x0
#define RIU_RWNXAGCEVT_7_EVT_7_OP_2_RST     0x0
#define RIU_RWNXAGCEVT_7_EVT_7_OP_3_RST     0x0
#define RIU_RWNXAGCEVT_7_EVT_7_PATHCOMB_RST    0x0
#define RIU_RWNXAGCEVT_7_EVT_7_OPCOMB_RST    0x0
#define RIU_RWNXAGCEVT_7_EVT_7_TGTADD_RST    0x0

static inline void riu_rwnxagcevt_7_pack(struct cl_chip *chip, u8 evt7_op1, u8 evt7_op2, u8 evt7_op3, u8 evt7_pathcomb, u8 evt7_opcomb, u16 evt7_tgtadd)
{
	ASSERT_ERR_CHIP((((u32)evt7_op1 << 26) & ~((u32)0xFC000000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt7_op2 << 20) & ~((u32)0x03F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt7_op3 << 14) & ~((u32)0x000FC000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt7_pathcomb << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt7_opcomb << 10) & ~((u32)0x00001C00)) == 0);
	ASSERT_ERR_CHIP((((u32)evt7_tgtadd << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_7_ADDR, ((u32)evt7_op1 << 26) | ((u32)evt7_op2 << 20) | ((u32)evt7_op3 << 14) | ((u32)evt7_pathcomb << 13) | ((u32)evt7_opcomb << 10) | ((u32)evt7_tgtadd << 0));
}

static inline void riu_rwnxagcevt_7_unpack(struct cl_chip *chip, u8 *evt7_op1, u8 *evt7_op2, u8 *evt7_op3, u8 *evt7_pathcomb, u8 *evt7_opcomb, u16 *evt7_tgtadd)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_7_ADDR);

	*evt7_op1 = (local_val & ((u32)0xFC000000)) >> 26;
	*evt7_op2 = (local_val & ((u32)0x03F00000)) >> 20;
	*evt7_op3 = (local_val & ((u32)0x000FC000)) >> 14;
	*evt7_pathcomb = (local_val & ((u32)0x00002000)) >> 13;
	*evt7_opcomb = (local_val & ((u32)0x00001C00)) >> 10;
	*evt7_tgtadd = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u8 riu_rwnxagcevt_7_evt_7_op_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_7_ADDR);

	return (u8)((local_val & ((u32)0xFC000000)) >> 26);
}

static inline void riu_rwnxagcevt_7_evt_7_op_1_setf(struct cl_chip *chip, u8 evt7op1)
{
	ASSERT_ERR_CHIP((((u32)evt7op1 << 26) & ~((u32)0xFC000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_7_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_7_ADDR) & ~((u32)0xFC000000)) | ((u32)evt7op1 << 26));
}

static inline u8 riu_rwnxagcevt_7_evt_7_op_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_7_ADDR);

	return (u8)((local_val & ((u32)0x03F00000)) >> 20);
}

static inline void riu_rwnxagcevt_7_evt_7_op_2_setf(struct cl_chip *chip, u8 evt7op2)
{
	ASSERT_ERR_CHIP((((u32)evt7op2 << 20) & ~((u32)0x03F00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_7_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_7_ADDR) & ~((u32)0x03F00000)) | ((u32)evt7op2 << 20));
}

static inline u8 riu_rwnxagcevt_7_evt_7_op_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_7_ADDR);

	return (u8)((local_val & ((u32)0x000FC000)) >> 14);
}

static inline void riu_rwnxagcevt_7_evt_7_op_3_setf(struct cl_chip *chip, u8 evt7op3)
{
	ASSERT_ERR_CHIP((((u32)evt7op3 << 14) & ~((u32)0x000FC000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_7_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_7_ADDR) & ~((u32)0x000FC000)) | ((u32)evt7op3 << 14));
}

static inline u8 riu_rwnxagcevt_7_evt_7_pathcomb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_7_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_rwnxagcevt_7_evt_7_pathcomb_setf(struct cl_chip *chip, u8 evt7pathcomb)
{
	ASSERT_ERR_CHIP((((u32)evt7pathcomb << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_7_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_7_ADDR) & ~((u32)0x00002000)) | ((u32)evt7pathcomb << 13));
}

static inline u8 riu_rwnxagcevt_7_evt_7_opcomb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_7_ADDR);

	return (u8)((local_val & ((u32)0x00001C00)) >> 10);
}

static inline void riu_rwnxagcevt_7_evt_7_opcomb_setf(struct cl_chip *chip, u8 evt7opcomb)
{
	ASSERT_ERR_CHIP((((u32)evt7opcomb << 10) & ~((u32)0x00001C00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_7_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_7_ADDR) & ~((u32)0x00001C00)) | ((u32)evt7opcomb << 10));
}

static inline u16 riu_rwnxagcevt_7_evt_7_tgtadd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVT_7_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_rwnxagcevt_7_evt_7_tgtadd_setf(struct cl_chip *chip, u16 evt7tgtadd)
{
	ASSERT_ERR_CHIP((((u32)evt7tgtadd << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVT_7_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVT_7_ADDR) & ~((u32)0x000003FF)) | ((u32)evt7tgtadd << 0));
}

/**
 * @brief RWNXAGCEVTEXT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 EVT7_EXT                  0x0
 *    27:24 EVT6_EXT                  0x0
 *    23:20 EVT5_EXT                  0x0
 *    19:16 EVT4_EXT                  0x0
 *    15:12 EVT3_EXT                  0x0
 *    11:08 EVT2_EXT                  0x0
 *    07:04 EVT1_EXT                  0x0
 *    03:00 EVT0_EXT                  0x0
 * </pre>
 */
#define RIU_RWNXAGCEVTEXT_ADDR        (REG_RIU_BASE_ADDR + 0x000003E8)
#define RIU_RWNXAGCEVTEXT_OFFSET      0x000003E8
#define RIU_RWNXAGCEVTEXT_INDEX       0x000000FA
#define RIU_RWNXAGCEVTEXT_RESET       0x00000000

static inline u32 riu_rwnxagcevtext_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR);
}

static inline void riu_rwnxagcevtext_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCEVTEXT_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCEVTEXT_EVT_7_EXT_MASK    ((u32)0xF0000000)
#define RIU_RWNXAGCEVTEXT_EVT_7_EXT_LSB     28
#define RIU_RWNXAGCEVTEXT_EVT_7_EXT_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCEVTEXT_EVT_6_EXT_MASK    ((u32)0x0F000000)
#define RIU_RWNXAGCEVTEXT_EVT_6_EXT_LSB     24
#define RIU_RWNXAGCEVTEXT_EVT_6_EXT_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCEVTEXT_EVT_5_EXT_MASK    ((u32)0x00F00000)
#define RIU_RWNXAGCEVTEXT_EVT_5_EXT_LSB     20
#define RIU_RWNXAGCEVTEXT_EVT_5_EXT_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCEVTEXT_EVT_4_EXT_MASK    ((u32)0x000F0000)
#define RIU_RWNXAGCEVTEXT_EVT_4_EXT_LSB     16
#define RIU_RWNXAGCEVTEXT_EVT_4_EXT_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCEVTEXT_EVT_3_EXT_MASK    ((u32)0x0000F000)
#define RIU_RWNXAGCEVTEXT_EVT_3_EXT_LSB     12
#define RIU_RWNXAGCEVTEXT_EVT_3_EXT_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCEVTEXT_EVT_2_EXT_MASK    ((u32)0x00000F00)
#define RIU_RWNXAGCEVTEXT_EVT_2_EXT_LSB     8
#define RIU_RWNXAGCEVTEXT_EVT_2_EXT_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCEVTEXT_EVT_1_EXT_MASK    ((u32)0x000000F0)
#define RIU_RWNXAGCEVTEXT_EVT_1_EXT_LSB     4
#define RIU_RWNXAGCEVTEXT_EVT_1_EXT_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCEVTEXT_EVT_0_EXT_MASK    ((u32)0x0000000F)
#define RIU_RWNXAGCEVTEXT_EVT_0_EXT_LSB     0
#define RIU_RWNXAGCEVTEXT_EVT_0_EXT_WIDTH    ((u32)0x00000004)

#define RIU_RWNXAGCEVTEXT_EVT_7_EXT_RST     0x0
#define RIU_RWNXAGCEVTEXT_EVT_6_EXT_RST     0x0
#define RIU_RWNXAGCEVTEXT_EVT_5_EXT_RST     0x0
#define RIU_RWNXAGCEVTEXT_EVT_4_EXT_RST     0x0
#define RIU_RWNXAGCEVTEXT_EVT_3_EXT_RST     0x0
#define RIU_RWNXAGCEVTEXT_EVT_2_EXT_RST     0x0
#define RIU_RWNXAGCEVTEXT_EVT_1_EXT_RST     0x0
#define RIU_RWNXAGCEVTEXT_EVT_0_EXT_RST     0x0

static inline void riu_rwnxagcevtext_pack(struct cl_chip *chip, u8 evt7_ext, u8 evt6_ext, u8 evt5_ext, u8 evt4_ext, u8 evt3_ext, u8 evt2_ext, u8 evt1_ext, u8 evt0_ext)
{
	ASSERT_ERR_CHIP((((u32)evt7_ext << 28) & ~((u32)0xF0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt6_ext << 24) & ~((u32)0x0F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt5_ext << 20) & ~((u32)0x00F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt4_ext << 16) & ~((u32)0x000F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt3_ext << 12) & ~((u32)0x0000F000)) == 0);
	ASSERT_ERR_CHIP((((u32)evt2_ext << 8) & ~((u32)0x00000F00)) == 0);
	ASSERT_ERR_CHIP((((u32)evt1_ext << 4) & ~((u32)0x000000F0)) == 0);
	ASSERT_ERR_CHIP((((u32)evt0_ext << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVTEXT_ADDR, ((u32)evt7_ext << 28) | ((u32)evt6_ext << 24) | ((u32)evt5_ext << 20) | ((u32)evt4_ext << 16) | ((u32)evt3_ext << 12) | ((u32)evt2_ext << 8) | ((u32)evt1_ext << 4) | ((u32)evt0_ext << 0));
}

static inline void riu_rwnxagcevtext_unpack(struct cl_chip *chip, u8 *evt7_ext, u8 *evt6_ext, u8 *evt5_ext, u8 *evt4_ext, u8 *evt3_ext, u8 *evt2_ext, u8 *evt1_ext, u8 *evt0_ext)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR);

	*evt7_ext = (local_val & ((u32)0xF0000000)) >> 28;
	*evt6_ext = (local_val & ((u32)0x0F000000)) >> 24;
	*evt5_ext = (local_val & ((u32)0x00F00000)) >> 20;
	*evt4_ext = (local_val & ((u32)0x000F0000)) >> 16;
	*evt3_ext = (local_val & ((u32)0x0000F000)) >> 12;
	*evt2_ext = (local_val & ((u32)0x00000F00)) >> 8;
	*evt1_ext = (local_val & ((u32)0x000000F0)) >> 4;
	*evt0_ext = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 riu_rwnxagcevtext_evt_7_ext_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR);

	return (u8)((local_val & ((u32)0xF0000000)) >> 28);
}

static inline void riu_rwnxagcevtext_evt_7_ext_setf(struct cl_chip *chip, u8 evt7ext)
{
	ASSERT_ERR_CHIP((((u32)evt7ext << 28) & ~((u32)0xF0000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVTEXT_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR) & ~((u32)0xF0000000)) | ((u32)evt7ext << 28));
}

static inline u8 riu_rwnxagcevtext_evt_6_ext_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR);

	return (u8)((local_val & ((u32)0x0F000000)) >> 24);
}

static inline void riu_rwnxagcevtext_evt_6_ext_setf(struct cl_chip *chip, u8 evt6ext)
{
	ASSERT_ERR_CHIP((((u32)evt6ext << 24) & ~((u32)0x0F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVTEXT_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR) & ~((u32)0x0F000000)) | ((u32)evt6ext << 24));
}

static inline u8 riu_rwnxagcevtext_evt_5_ext_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR);

	return (u8)((local_val & ((u32)0x00F00000)) >> 20);
}

static inline void riu_rwnxagcevtext_evt_5_ext_setf(struct cl_chip *chip, u8 evt5ext)
{
	ASSERT_ERR_CHIP((((u32)evt5ext << 20) & ~((u32)0x00F00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVTEXT_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR) & ~((u32)0x00F00000)) | ((u32)evt5ext << 20));
}

static inline u8 riu_rwnxagcevtext_evt_4_ext_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR);

	return (u8)((local_val & ((u32)0x000F0000)) >> 16);
}

static inline void riu_rwnxagcevtext_evt_4_ext_setf(struct cl_chip *chip, u8 evt4ext)
{
	ASSERT_ERR_CHIP((((u32)evt4ext << 16) & ~((u32)0x000F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVTEXT_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR) & ~((u32)0x000F0000)) | ((u32)evt4ext << 16));
}

static inline u8 riu_rwnxagcevtext_evt_3_ext_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR);

	return (u8)((local_val & ((u32)0x0000F000)) >> 12);
}

static inline void riu_rwnxagcevtext_evt_3_ext_setf(struct cl_chip *chip, u8 evt3ext)
{
	ASSERT_ERR_CHIP((((u32)evt3ext << 12) & ~((u32)0x0000F000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVTEXT_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR) & ~((u32)0x0000F000)) | ((u32)evt3ext << 12));
}

static inline u8 riu_rwnxagcevtext_evt_2_ext_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR);

	return (u8)((local_val & ((u32)0x00000F00)) >> 8);
}

static inline void riu_rwnxagcevtext_evt_2_ext_setf(struct cl_chip *chip, u8 evt2ext)
{
	ASSERT_ERR_CHIP((((u32)evt2ext << 8) & ~((u32)0x00000F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVTEXT_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR) & ~((u32)0x00000F00)) | ((u32)evt2ext << 8));
}

static inline u8 riu_rwnxagcevtext_evt_1_ext_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR);

	return (u8)((local_val & ((u32)0x000000F0)) >> 4);
}

static inline void riu_rwnxagcevtext_evt_1_ext_setf(struct cl_chip *chip, u8 evt1ext)
{
	ASSERT_ERR_CHIP((((u32)evt1ext << 4) & ~((u32)0x000000F0)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVTEXT_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR) & ~((u32)0x000000F0)) | ((u32)evt1ext << 4));
}

static inline u8 riu_rwnxagcevtext_evt_0_ext_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

static inline void riu_rwnxagcevtext_evt_0_ext_setf(struct cl_chip *chip, u8 evt0ext)
{
	ASSERT_ERR_CHIP((((u32)evt0ext << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCEVTEXT_ADDR, (cl_reg_read(chip, RIU_RWNXAGCEVTEXT_ADDR) & ~((u32)0x0000000F)) | ((u32)evt0ext << 0));
}

/**
 * @brief RWNXAGCDSP_5 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 INBDPOWMINDBM_ANT5        0x9C
 *    23:16 INBDPOWMINDBM_ANT4        0x9C
 *    15:08 INBDPOWMINDBM_ANT3        0x9C
 *    07:00 INBDPOWMINDBM_ANT2        0x9C
 * </pre>
 */
#define RIU_RWNXAGCDSP_5_ADDR        (REG_RIU_BASE_ADDR + 0x000003EC)
#define RIU_RWNXAGCDSP_5_OFFSET      0x000003EC
#define RIU_RWNXAGCDSP_5_INDEX       0x000000FB
#define RIU_RWNXAGCDSP_5_RESET       0x9C9C9C9C

static inline u32 riu_rwnxagcdsp_5_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCDSP_5_ADDR);
}

static inline void riu_rwnxagcdsp_5_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCDSP_5_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCDSP_5_INBDPOWMINDBM_ANT_5_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCDSP_5_INBDPOWMINDBM_ANT_5_LSB    24
#define RIU_RWNXAGCDSP_5_INBDPOWMINDBM_ANT_5_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCDSP_5_INBDPOWMINDBM_ANT_4_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCDSP_5_INBDPOWMINDBM_ANT_4_LSB    16
#define RIU_RWNXAGCDSP_5_INBDPOWMINDBM_ANT_4_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCDSP_5_INBDPOWMINDBM_ANT_3_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCDSP_5_INBDPOWMINDBM_ANT_3_LSB    8
#define RIU_RWNXAGCDSP_5_INBDPOWMINDBM_ANT_3_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCDSP_5_INBDPOWMINDBM_ANT_2_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCDSP_5_INBDPOWMINDBM_ANT_2_LSB    0
#define RIU_RWNXAGCDSP_5_INBDPOWMINDBM_ANT_2_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCDSP_5_INBDPOWMINDBM_ANT_5_RST    0x9C
#define RIU_RWNXAGCDSP_5_INBDPOWMINDBM_ANT_4_RST    0x9C
#define RIU_RWNXAGCDSP_5_INBDPOWMINDBM_ANT_3_RST    0x9C
#define RIU_RWNXAGCDSP_5_INBDPOWMINDBM_ANT_2_RST    0x9C

static inline void riu_rwnxagcdsp_5_pack(struct cl_chip *chip, u8 inbdpowmindbm_ant5, u8 inbdpowmindbm_ant4, u8 inbdpowmindbm_ant3, u8 inbdpowmindbm_ant2)
{
	ASSERT_ERR_CHIP((((u32)inbdpowmindbm_ant5 << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)inbdpowmindbm_ant4 << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)inbdpowmindbm_ant3 << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)inbdpowmindbm_ant2 << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_5_ADDR, ((u32)inbdpowmindbm_ant5 << 24) | ((u32)inbdpowmindbm_ant4 << 16) | ((u32)inbdpowmindbm_ant3 << 8) | ((u32)inbdpowmindbm_ant2 << 0));
}

static inline void riu_rwnxagcdsp_5_unpack(struct cl_chip *chip, u8 *inbdpowmindbm_ant5, u8 *inbdpowmindbm_ant4, u8 *inbdpowmindbm_ant3, u8 *inbdpowmindbm_ant2)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_5_ADDR);

	*inbdpowmindbm_ant5 = (local_val & ((u32)0xFF000000)) >> 24;
	*inbdpowmindbm_ant4 = (local_val & ((u32)0x00FF0000)) >> 16;
	*inbdpowmindbm_ant3 = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpowmindbm_ant2 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcdsp_5_inbdpowmindbm_ant_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_5_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagcdsp_5_inbdpowmindbm_ant_5_setf(struct cl_chip *chip, u8 inbdpowmindbmant5)
{
	ASSERT_ERR_CHIP((((u32)inbdpowmindbmant5 << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_5_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_5_ADDR) & ~((u32)0xFF000000)) | ((u32)inbdpowmindbmant5 << 24));
}

static inline u8 riu_rwnxagcdsp_5_inbdpowmindbm_ant_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_5_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagcdsp_5_inbdpowmindbm_ant_4_setf(struct cl_chip *chip, u8 inbdpowmindbmant4)
{
	ASSERT_ERR_CHIP((((u32)inbdpowmindbmant4 << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_5_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_5_ADDR) & ~((u32)0x00FF0000)) | ((u32)inbdpowmindbmant4 << 16));
}

static inline u8 riu_rwnxagcdsp_5_inbdpowmindbm_ant_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_5_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagcdsp_5_inbdpowmindbm_ant_3_setf(struct cl_chip *chip, u8 inbdpowmindbmant3)
{
	ASSERT_ERR_CHIP((((u32)inbdpowmindbmant3 << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_5_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_5_ADDR) & ~((u32)0x0000FF00)) | ((u32)inbdpowmindbmant3 << 8));
}

static inline u8 riu_rwnxagcdsp_5_inbdpowmindbm_ant_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_5_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcdsp_5_inbdpowmindbm_ant_2_setf(struct cl_chip *chip, u8 inbdpowmindbmant2)
{
	ASSERT_ERR_CHIP((((u32)inbdpowmindbmant2 << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_5_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_5_ADDR) & ~((u32)0x000000FF)) | ((u32)inbdpowmindbmant2 << 0));
}

/**
 * @brief RWNXAGCCCA_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 CCAGi_Pow_Lim_Thrd_Bm     0xc5
 *    23:16 CCAGITHRDBM_DELTA_80      0x0
 *    15:08 CCAGITHRDBM_DELTA_40      0x0
 *    07:00 CCAGITHRDBM_DELTA_PER_20  0x0
 * </pre>
 */
#define RIU_RWNXAGCCCA_4_ADDR        (REG_RIU_BASE_ADDR + 0x000003F0)
#define RIU_RWNXAGCCCA_4_OFFSET      0x000003F0
#define RIU_RWNXAGCCCA_4_INDEX       0x000000FC
#define RIU_RWNXAGCCCA_4_RESET       0xC5000000

static inline u32 riu_rwnxagccca_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCCCA_4_ADDR);
}

static inline void riu_rwnxagccca_4_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCCCA_4_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCCCA_4_CCAGI_POW_LIM_THRD_BM_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCCCA_4_CCAGI_POW_LIM_THRD_BM_LSB    24
#define RIU_RWNXAGCCCA_4_CCAGI_POW_LIM_THRD_BM_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCCCA_4_CCAGITHRDBM_DELTA_80_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCCCA_4_CCAGITHRDBM_DELTA_80_LSB    16
#define RIU_RWNXAGCCCA_4_CCAGITHRDBM_DELTA_80_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCCCA_4_CCAGITHRDBM_DELTA_40_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCCCA_4_CCAGITHRDBM_DELTA_40_LSB    8
#define RIU_RWNXAGCCCA_4_CCAGITHRDBM_DELTA_40_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCCCA_4_CCAGITHRDBM_DELTA_PER_20_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCCCA_4_CCAGITHRDBM_DELTA_PER_20_LSB    0
#define RIU_RWNXAGCCCA_4_CCAGITHRDBM_DELTA_PER_20_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCCCA_4_CCAGI_POW_LIM_THRD_BM_RST    0xc5
#define RIU_RWNXAGCCCA_4_CCAGITHRDBM_DELTA_80_RST    0x0
#define RIU_RWNXAGCCCA_4_CCAGITHRDBM_DELTA_40_RST    0x0
#define RIU_RWNXAGCCCA_4_CCAGITHRDBM_DELTA_PER_20_RST    0x0

static inline void riu_rwnxagccca_4_pack(struct cl_chip *chip, u8 ccagi_pow_lim_thrd_bm, u8 ccagithrdbm_delta_80, u8 ccagithrdbm_delta_40, u8 ccagithrdbm_delta_per_20)
{
	ASSERT_ERR_CHIP((((u32)ccagi_pow_lim_thrd_bm << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccagithrdbm_delta_80 << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccagithrdbm_delta_40 << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)ccagithrdbm_delta_per_20 << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_4_ADDR, ((u32)ccagi_pow_lim_thrd_bm << 24) | ((u32)ccagithrdbm_delta_80 << 16) | ((u32)ccagithrdbm_delta_40 << 8) | ((u32)ccagithrdbm_delta_per_20 << 0));
}

static inline void riu_rwnxagccca_4_unpack(struct cl_chip *chip, u8 *ccagi_pow_lim_thrd_bm, u8 *ccagithrdbm_delta_80, u8 *ccagithrdbm_delta_40, u8 *ccagithrdbm_delta_per_20)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_4_ADDR);

	*ccagi_pow_lim_thrd_bm = (local_val & ((u32)0xFF000000)) >> 24;
	*ccagithrdbm_delta_80 = (local_val & ((u32)0x00FF0000)) >> 16;
	*ccagithrdbm_delta_40 = (local_val & ((u32)0x0000FF00)) >> 8;
	*ccagithrdbm_delta_per_20 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagccca_4_ccagi_pow_lim_thrd_bm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_4_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagccca_4_ccagi_pow_lim_thrd_bm_setf(struct cl_chip *chip, u8 ccagipowlimthrdbm)
{
	ASSERT_ERR_CHIP((((u32)ccagipowlimthrdbm << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_4_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_4_ADDR) & ~((u32)0xFF000000)) | ((u32)ccagipowlimthrdbm << 24));
}

static inline u8 riu_rwnxagccca_4_ccagithrdbm_delta_80_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_4_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagccca_4_ccagithrdbm_delta_80_setf(struct cl_chip *chip, u8 ccagithrdbmdelta80)
{
	ASSERT_ERR_CHIP((((u32)ccagithrdbmdelta80 << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_4_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_4_ADDR) & ~((u32)0x00FF0000)) | ((u32)ccagithrdbmdelta80 << 16));
}

static inline u8 riu_rwnxagccca_4_ccagithrdbm_delta_40_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_4_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagccca_4_ccagithrdbm_delta_40_setf(struct cl_chip *chip, u8 ccagithrdbmdelta40)
{
	ASSERT_ERR_CHIP((((u32)ccagithrdbmdelta40 << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_4_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_4_ADDR) & ~((u32)0x0000FF00)) | ((u32)ccagithrdbmdelta40 << 8));
}

static inline u8 riu_rwnxagccca_4_ccagithrdbm_delta_per_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_4_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagccca_4_ccagithrdbm_delta_per_20_setf(struct cl_chip *chip, u8 ccagithrdbmdeltaper20)
{
	ASSERT_ERR_CHIP((((u32)ccagithrdbmdeltaper20 << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_4_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_4_ADDR) & ~((u32)0x000000FF)) | ((u32)ccagithrdbmdeltaper20 << 0));
}

/**
 * @brief DMAHWTRIG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    20:16 TRIG_BITSEL               0x11
 *    15:08 TRIG_DELAY                0x0
 *    07:00 TRIG_CMD                  0x0
 * </pre>
 */
#define RIU_DMAHWTRIG_ADDR        (REG_RIU_BASE_ADDR + 0x000003FC)
#define RIU_DMAHWTRIG_OFFSET      0x000003FC
#define RIU_DMAHWTRIG_INDEX       0x000000FF
#define RIU_DMAHWTRIG_RESET       0x00110000

static inline u32 riu_dmahwtrig_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DMAHWTRIG_ADDR);
}

static inline void riu_dmahwtrig_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_DMAHWTRIG_ADDR, value);
}

/* Field definitions */
#define RIU_DMAHWTRIG_TRIG_BITSEL_MASK      ((u32)0x001F0000)
#define RIU_DMAHWTRIG_TRIG_BITSEL_LSB       16
#define RIU_DMAHWTRIG_TRIG_BITSEL_WIDTH     ((u32)0x00000005)
#define RIU_DMAHWTRIG_TRIG_DELAY_MASK       ((u32)0x0000FF00)
#define RIU_DMAHWTRIG_TRIG_DELAY_LSB        8
#define RIU_DMAHWTRIG_TRIG_DELAY_WIDTH      ((u32)0x00000008)
#define RIU_DMAHWTRIG_TRIG_CMD_MASK         ((u32)0x000000FF)
#define RIU_DMAHWTRIG_TRIG_CMD_LSB          0
#define RIU_DMAHWTRIG_TRIG_CMD_WIDTH        ((u32)0x00000008)

#define RIU_DMAHWTRIG_TRIG_BITSEL_RST       0x11
#define RIU_DMAHWTRIG_TRIG_DELAY_RST        0x0
#define RIU_DMAHWTRIG_TRIG_CMD_RST          0x0

static inline void riu_dmahwtrig_pack(struct cl_chip *chip, u8 trig_bitsel, u8 trig_delay, u8 trig_cmd)
{
	ASSERT_ERR_CHIP((((u32)trig_bitsel << 16) & ~((u32)0x001F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)trig_delay << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)trig_cmd << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_DMAHWTRIG_ADDR, ((u32)trig_bitsel << 16) | ((u32)trig_delay << 8) | ((u32)trig_cmd << 0));
}

static inline void riu_dmahwtrig_unpack(struct cl_chip *chip, u8 *trig_bitsel, u8 *trig_delay, u8 *trig_cmd)
{
	u32 local_val = cl_reg_read(chip, RIU_DMAHWTRIG_ADDR);

	*trig_bitsel = (local_val & ((u32)0x001F0000)) >> 16;
	*trig_delay = (local_val & ((u32)0x0000FF00)) >> 8;
	*trig_cmd = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_dmahwtrig_trig_bitsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DMAHWTRIG_ADDR);

	return (u8)((local_val & ((u32)0x001F0000)) >> 16);
}

static inline void riu_dmahwtrig_trig_bitsel_setf(struct cl_chip *chip, u8 trigbitsel)
{
	ASSERT_ERR_CHIP((((u32)trigbitsel << 16) & ~((u32)0x001F0000)) == 0);
	cl_reg_write(chip, RIU_DMAHWTRIG_ADDR, (cl_reg_read(chip, RIU_DMAHWTRIG_ADDR) & ~((u32)0x001F0000)) | ((u32)trigbitsel << 16));
}

static inline u8 riu_dmahwtrig_trig_delay_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DMAHWTRIG_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_dmahwtrig_trig_delay_setf(struct cl_chip *chip, u8 trigdelay)
{
	ASSERT_ERR_CHIP((((u32)trigdelay << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_DMAHWTRIG_ADDR, (cl_reg_read(chip, RIU_DMAHWTRIG_ADDR) & ~((u32)0x0000FF00)) | ((u32)trigdelay << 8));
}

static inline u8 riu_dmahwtrig_trig_cmd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DMAHWTRIG_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_dmahwtrig_trig_cmd_setf(struct cl_chip *chip, u8 trigcmd)
{
	ASSERT_ERR_CHIP((((u32)trigcmd << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_DMAHWTRIG_ADDR, (cl_reg_read(chip, RIU_DMAHWTRIG_ADDR) & ~((u32)0x000000FF)) | ((u32)trigcmd << 0));
}

/**
 * @brief RWNXDSPINTEN register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    IRQDSPRCRXENDEN           0
 *    28    IRQDSPRCTXENDEN           0
 *    27    IRQDSPERRORMDMBEN         0
 *    26    IRQDSPTXENDMDMBEN         0
 *    25    IRQDSPRXENDMDMBEN         0
 *    24    IRQDSPRXVECTORMDMBEN      0
 *    23    IRQDSP_FRC_RX_END4_T_EN   0
 *    22    IRQDSP_FRC_RX_SIG_END_EN  0
 *    21    IRQDSP_FRC_RX_PHY_PROC_LIM_EN 0
 *    20    IRQDSPLBCAPTUREDONEEN     0
 *    17    IRQDSPAGCDSSSLOCKEN       0
 *    16    IRQDSPAGCDSSSUNLOCKEN     0
 *    14    IRQDSP_AGC_FSM3_EN        0
 *    13    IRQDSPRADARTRIGGEREN      0
 *    12    IRQDSPRADARDETEN          0
 *    11    IRQDSP_AGC_FSM2_EN        0
 *    10    IRQDSP_AGC_FSM1_EN        0
 *    09    IRQDSP_AGC_FSM0_EN        0
 *    08    IRQDSPCCATIMEOUTEN        0
 *    07    IRQDSPBTC3_EN             0
 *    06    IRQDSPBTC2_EN             0
 *    05    IRQDSPBTC1_EN             0
 *    04    IRQDSPBTC0_EN             0
 *    03    IRQDSPMPUTXENDEN          0
 *    02    IRQDSPAGCOFDMUNLOCKTIMEREN 0
 *    01    IRQDSPAGCOFDMLOCKEN       0
 *    00    IRQDSPAGCOFDMUNLOCKEN     0
 * </pre>
 */
#define RIU_RWNXDSPINTEN_ADDR        (REG_RIU_BASE_ADDR + 0x00000400)
#define RIU_RWNXDSPINTEN_OFFSET      0x00000400
#define RIU_RWNXDSPINTEN_INDEX       0x00000100
#define RIU_RWNXDSPINTEN_RESET       0x00000000

static inline u32 riu_rwnxdspinten_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);
}

static inline void riu_rwnxdspinten_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXDSPINTEN_IRQDSPRCRXENDEN_BIT    ((u32)0x20000000)
#define RIU_RWNXDSPINTEN_IRQDSPRCRXENDEN_POS    29
#define RIU_RWNXDSPINTEN_IRQDSPRCTXENDEN_BIT    ((u32)0x10000000)
#define RIU_RWNXDSPINTEN_IRQDSPRCTXENDEN_POS    28
#define RIU_RWNXDSPINTEN_IRQDSPERRORMDMBEN_BIT    ((u32)0x08000000)
#define RIU_RWNXDSPINTEN_IRQDSPERRORMDMBEN_POS    27
#define RIU_RWNXDSPINTEN_IRQDSPTXENDMDMBEN_BIT    ((u32)0x04000000)
#define RIU_RWNXDSPINTEN_IRQDSPTXENDMDMBEN_POS    26
#define RIU_RWNXDSPINTEN_IRQDSPRXENDMDMBEN_BIT    ((u32)0x02000000)
#define RIU_RWNXDSPINTEN_IRQDSPRXENDMDMBEN_POS    25
#define RIU_RWNXDSPINTEN_IRQDSPRXVECTORMDMBEN_BIT    ((u32)0x01000000)
#define RIU_RWNXDSPINTEN_IRQDSPRXVECTORMDMBEN_POS    24
#define RIU_RWNXDSPINTEN_IRQDSP_FRC_RX_END_4_T_EN_BIT    ((u32)0x00800000)
#define RIU_RWNXDSPINTEN_IRQDSP_FRC_RX_END_4_T_EN_POS    23
#define RIU_RWNXDSPINTEN_IRQDSP_FRC_RX_SIG_END_EN_BIT    ((u32)0x00400000)
#define RIU_RWNXDSPINTEN_IRQDSP_FRC_RX_SIG_END_EN_POS    22
#define RIU_RWNXDSPINTEN_IRQDSP_FRC_RX_PHY_PROC_LIM_EN_BIT    ((u32)0x00200000)
#define RIU_RWNXDSPINTEN_IRQDSP_FRC_RX_PHY_PROC_LIM_EN_POS    21
#define RIU_RWNXDSPINTEN_IRQDSPLBCAPTUREDONEEN_BIT    ((u32)0x00100000)
#define RIU_RWNXDSPINTEN_IRQDSPLBCAPTUREDONEEN_POS    20
#define RIU_RWNXDSPINTEN_IRQDSPAGCDSSSLOCKEN_BIT    ((u32)0x00020000)
#define RIU_RWNXDSPINTEN_IRQDSPAGCDSSSLOCKEN_POS    17
#define RIU_RWNXDSPINTEN_IRQDSPAGCDSSSUNLOCKEN_BIT    ((u32)0x00010000)
#define RIU_RWNXDSPINTEN_IRQDSPAGCDSSSUNLOCKEN_POS    16
#define RIU_RWNXDSPINTEN_IRQDSP_AGC_FSM_3_EN_BIT    ((u32)0x00004000)
#define RIU_RWNXDSPINTEN_IRQDSP_AGC_FSM_3_EN_POS    14
#define RIU_RWNXDSPINTEN_IRQDSPRADARTRIGGEREN_BIT    ((u32)0x00002000)
#define RIU_RWNXDSPINTEN_IRQDSPRADARTRIGGEREN_POS    13
#define RIU_RWNXDSPINTEN_IRQDSPRADARDETEN_BIT    ((u32)0x00001000)
#define RIU_RWNXDSPINTEN_IRQDSPRADARDETEN_POS    12
#define RIU_RWNXDSPINTEN_IRQDSP_AGC_FSM_2_EN_BIT    ((u32)0x00000800)
#define RIU_RWNXDSPINTEN_IRQDSP_AGC_FSM_2_EN_POS    11
#define RIU_RWNXDSPINTEN_IRQDSP_AGC_FSM_1_EN_BIT    ((u32)0x00000400)
#define RIU_RWNXDSPINTEN_IRQDSP_AGC_FSM_1_EN_POS    10
#define RIU_RWNXDSPINTEN_IRQDSP_AGC_FSM_0_EN_BIT    ((u32)0x00000200)
#define RIU_RWNXDSPINTEN_IRQDSP_AGC_FSM_0_EN_POS    9
#define RIU_RWNXDSPINTEN_IRQDSPCCATIMEOUTEN_BIT    ((u32)0x00000100)
#define RIU_RWNXDSPINTEN_IRQDSPCCATIMEOUTEN_POS    8
#define RIU_RWNXDSPINTEN_IRQDSPBTC_3_EN_BIT    ((u32)0x00000080)
#define RIU_RWNXDSPINTEN_IRQDSPBTC_3_EN_POS    7
#define RIU_RWNXDSPINTEN_IRQDSPBTC_2_EN_BIT    ((u32)0x00000040)
#define RIU_RWNXDSPINTEN_IRQDSPBTC_2_EN_POS    6
#define RIU_RWNXDSPINTEN_IRQDSPBTC_1_EN_BIT    ((u32)0x00000020)
#define RIU_RWNXDSPINTEN_IRQDSPBTC_1_EN_POS    5
#define RIU_RWNXDSPINTEN_IRQDSPBTC_0_EN_BIT    ((u32)0x00000010)
#define RIU_RWNXDSPINTEN_IRQDSPBTC_0_EN_POS    4
#define RIU_RWNXDSPINTEN_IRQDSPMPUTXENDEN_BIT    ((u32)0x00000008)
#define RIU_RWNXDSPINTEN_IRQDSPMPUTXENDEN_POS    3
#define RIU_RWNXDSPINTEN_IRQDSPAGCOFDMUNLOCKTIMEREN_BIT    ((u32)0x00000004)
#define RIU_RWNXDSPINTEN_IRQDSPAGCOFDMUNLOCKTIMEREN_POS    2
#define RIU_RWNXDSPINTEN_IRQDSPAGCOFDMLOCKEN_BIT    ((u32)0x00000002)
#define RIU_RWNXDSPINTEN_IRQDSPAGCOFDMLOCKEN_POS    1
#define RIU_RWNXDSPINTEN_IRQDSPAGCOFDMUNLOCKEN_BIT    ((u32)0x00000001)
#define RIU_RWNXDSPINTEN_IRQDSPAGCOFDMUNLOCKEN_POS    0

#define RIU_RWNXDSPINTEN_IRQDSPRCRXENDEN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPRCTXENDEN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPERRORMDMBEN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPTXENDMDMBEN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPRXENDMDMBEN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPRXVECTORMDMBEN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSP_FRC_RX_END_4_T_EN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSP_FRC_RX_SIG_END_EN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSP_FRC_RX_PHY_PROC_LIM_EN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPLBCAPTUREDONEEN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPAGCDSSSLOCKEN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPAGCDSSSUNLOCKEN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSP_AGC_FSM_3_EN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPRADARTRIGGEREN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPRADARDETEN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSP_AGC_FSM_2_EN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSP_AGC_FSM_1_EN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSP_AGC_FSM_0_EN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPCCATIMEOUTEN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPBTC_3_EN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPBTC_2_EN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPBTC_1_EN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPBTC_0_EN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPMPUTXENDEN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPAGCOFDMUNLOCKTIMEREN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPAGCOFDMLOCKEN_RST    0x0
#define RIU_RWNXDSPINTEN_IRQDSPAGCOFDMUNLOCKEN_RST    0x0

static inline void riu_rwnxdspinten_pack(struct cl_chip *chip, u8 irqdsprcrxenden, u8 irqdsprctxenden, u8 irqdsperrormdmben, u8 irqdsptxendmdmben, u8 irqdsprxendmdmben, u8 irqdsprxvectormdmben, u8 irqdsp_frc_rx_end4_t_en, u8 irqdsp_frc_rx_sig_end_en, u8 irqdsp_frc_rx_phy_proc_lim_en, u8 irqdsplbcapturedoneen, u8 irqdspagcdssslocken, u8 irqdspagcdsssunlocken, u8 irqdsp_agc_fsm3_en, u8 irqdspradartriggeren, u8 irqdspradardeten, u8 irqdsp_agc_fsm2_en, u8 irqdsp_agc_fsm1_en, u8 irqdsp_agc_fsm0_en, u8 irqdspccatimeouten, u8 irqdspbtc3_en, u8 irqdspbtc2_en, u8 irqdspbtc1_en, u8 irqdspbtc0_en, u8 irqdspmputxenden, u8 irqdspagcofdmunlocktimeren, u8 irqdspagcofdmlocken, u8 irqdspagcofdmunlocken)
{
	ASSERT_ERR_CHIP((((u32)irqdsprcrxenden << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsprctxenden << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsperrormdmben << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsptxendmdmben << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsprxendmdmben << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsprxvectormdmben << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_frc_rx_end4_t_en << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_frc_rx_sig_end_en << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_frc_rx_phy_proc_lim_en << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsplbcapturedoneen << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspagcdssslocken << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspagcdsssunlocken << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_agc_fsm3_en << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspradartriggeren << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspradardeten << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_agc_fsm2_en << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_agc_fsm1_en << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_agc_fsm0_en << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspccatimeouten << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspbtc3_en << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspbtc2_en << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspbtc1_en << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspbtc0_en << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspmputxenden << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmunlocktimeren << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmlocken << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmunlocken << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, ((u32)irqdsprcrxenden << 29) | ((u32)irqdsprctxenden << 28) | ((u32)irqdsperrormdmben << 27) | ((u32)irqdsptxendmdmben << 26) | ((u32)irqdsprxendmdmben << 25) | ((u32)irqdsprxvectormdmben << 24) | ((u32)irqdsp_frc_rx_end4_t_en << 23) | ((u32)irqdsp_frc_rx_sig_end_en << 22) | ((u32)irqdsp_frc_rx_phy_proc_lim_en << 21) | ((u32)irqdsplbcapturedoneen << 20) | ((u32)irqdspagcdssslocken << 17) | ((u32)irqdspagcdsssunlocken << 16) | ((u32)irqdsp_agc_fsm3_en << 14) | ((u32)irqdspradartriggeren << 13) | ((u32)irqdspradardeten << 12) | ((u32)irqdsp_agc_fsm2_en << 11) | ((u32)irqdsp_agc_fsm1_en << 10) | ((u32)irqdsp_agc_fsm0_en << 9) | ((u32)irqdspccatimeouten << 8) | ((u32)irqdspbtc3_en << 7) | ((u32)irqdspbtc2_en << 6) | ((u32)irqdspbtc1_en << 5) | ((u32)irqdspbtc0_en << 4) | ((u32)irqdspmputxenden << 3) | ((u32)irqdspagcofdmunlocktimeren << 2) | ((u32)irqdspagcofdmlocken << 1) | ((u32)irqdspagcofdmunlocken << 0));
}

static inline void riu_rwnxdspinten_unpack(struct cl_chip *chip, u8 *irqdsprcrxenden, u8 *irqdsprctxenden, u8 *irqdsperrormdmben, u8 *irqdsptxendmdmben, u8 *irqdsprxendmdmben, u8 *irqdsprxvectormdmben, u8 *irqdsp_frc_rx_end4_t_en, u8 *irqdsp_frc_rx_sig_end_en, u8 *irqdsp_frc_rx_phy_proc_lim_en, u8 *irqdsplbcapturedoneen, u8 *irqdspagcdssslocken, u8 *irqdspagcdsssunlocken, u8 *irqdsp_agc_fsm3_en, u8 *irqdspradartriggeren, u8 *irqdspradardeten, u8 *irqdsp_agc_fsm2_en, u8 *irqdsp_agc_fsm1_en, u8 *irqdsp_agc_fsm0_en, u8 *irqdspccatimeouten, u8 *irqdspbtc3_en, u8 *irqdspbtc2_en, u8 *irqdspbtc1_en, u8 *irqdspbtc0_en, u8 *irqdspmputxenden, u8 *irqdspagcofdmunlocktimeren, u8 *irqdspagcofdmlocken, u8 *irqdspagcofdmunlocken)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	*irqdsprcrxenden = (local_val & ((u32)0x20000000)) >> 29;
	*irqdsprctxenden = (local_val & ((u32)0x10000000)) >> 28;
	*irqdsperrormdmben = (local_val & ((u32)0x08000000)) >> 27;
	*irqdsptxendmdmben = (local_val & ((u32)0x04000000)) >> 26;
	*irqdsprxendmdmben = (local_val & ((u32)0x02000000)) >> 25;
	*irqdsprxvectormdmben = (local_val & ((u32)0x01000000)) >> 24;
	*irqdsp_frc_rx_end4_t_en = (local_val & ((u32)0x00800000)) >> 23;
	*irqdsp_frc_rx_sig_end_en = (local_val & ((u32)0x00400000)) >> 22;
	*irqdsp_frc_rx_phy_proc_lim_en = (local_val & ((u32)0x00200000)) >> 21;
	*irqdsplbcapturedoneen = (local_val & ((u32)0x00100000)) >> 20;
	*irqdspagcdssslocken = (local_val & ((u32)0x00020000)) >> 17;
	*irqdspagcdsssunlocken = (local_val & ((u32)0x00010000)) >> 16;
	*irqdsp_agc_fsm3_en = (local_val & ((u32)0x00004000)) >> 14;
	*irqdspradartriggeren = (local_val & ((u32)0x00002000)) >> 13;
	*irqdspradardeten = (local_val & ((u32)0x00001000)) >> 12;
	*irqdsp_agc_fsm2_en = (local_val & ((u32)0x00000800)) >> 11;
	*irqdsp_agc_fsm1_en = (local_val & ((u32)0x00000400)) >> 10;
	*irqdsp_agc_fsm0_en = (local_val & ((u32)0x00000200)) >> 9;
	*irqdspccatimeouten = (local_val & ((u32)0x00000100)) >> 8;
	*irqdspbtc3_en = (local_val & ((u32)0x00000080)) >> 7;
	*irqdspbtc2_en = (local_val & ((u32)0x00000040)) >> 6;
	*irqdspbtc1_en = (local_val & ((u32)0x00000020)) >> 5;
	*irqdspbtc0_en = (local_val & ((u32)0x00000010)) >> 4;
	*irqdspmputxenden = (local_val & ((u32)0x00000008)) >> 3;
	*irqdspagcofdmunlocktimeren = (local_val & ((u32)0x00000004)) >> 2;
	*irqdspagcofdmlocken = (local_val & ((u32)0x00000002)) >> 1;
	*irqdspagcofdmunlocken = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_rwnxdspinten_irqdsprcrxenden_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void riu_rwnxdspinten_irqdsprcrxenden_setf(struct cl_chip *chip, u8 irqdsprcrxenden)
{
	ASSERT_ERR_CHIP((((u32)irqdsprcrxenden << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x20000000)) | ((u32)irqdsprcrxenden << 29));
}

static inline u8 riu_rwnxdspinten_irqdsprctxenden_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void riu_rwnxdspinten_irqdsprctxenden_setf(struct cl_chip *chip, u8 irqdsprctxenden)
{
	ASSERT_ERR_CHIP((((u32)irqdsprctxenden << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x10000000)) | ((u32)irqdsprctxenden << 28));
}

static inline u8 riu_rwnxdspinten_irqdsperrormdmben_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void riu_rwnxdspinten_irqdsperrormdmben_setf(struct cl_chip *chip, u8 irqdsperrormdmben)
{
	ASSERT_ERR_CHIP((((u32)irqdsperrormdmben << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x08000000)) | ((u32)irqdsperrormdmben << 27));
}

static inline u8 riu_rwnxdspinten_irqdsptxendmdmben_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void riu_rwnxdspinten_irqdsptxendmdmben_setf(struct cl_chip *chip, u8 irqdsptxendmdmben)
{
	ASSERT_ERR_CHIP((((u32)irqdsptxendmdmben << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x04000000)) | ((u32)irqdsptxendmdmben << 26));
}

static inline u8 riu_rwnxdspinten_irqdsprxendmdmben_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void riu_rwnxdspinten_irqdsprxendmdmben_setf(struct cl_chip *chip, u8 irqdsprxendmdmben)
{
	ASSERT_ERR_CHIP((((u32)irqdsprxendmdmben << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x02000000)) | ((u32)irqdsprxendmdmben << 25));
}

static inline u8 riu_rwnxdspinten_irqdsprxvectormdmben_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void riu_rwnxdspinten_irqdsprxvectormdmben_setf(struct cl_chip *chip, u8 irqdsprxvectormdmben)
{
	ASSERT_ERR_CHIP((((u32)irqdsprxvectormdmben << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x01000000)) | ((u32)irqdsprxvectormdmben << 24));
}

static inline u8 riu_rwnxdspinten_irqdsp_frc_rx_end_4_t_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void riu_rwnxdspinten_irqdsp_frc_rx_end_4_t_en_setf(struct cl_chip *chip, u8 irqdspfrcrxend4ten)
{
	ASSERT_ERR_CHIP((((u32)irqdspfrcrxend4ten << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00800000)) | ((u32)irqdspfrcrxend4ten << 23));
}

static inline u8 riu_rwnxdspinten_irqdsp_frc_rx_sig_end_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline void riu_rwnxdspinten_irqdsp_frc_rx_sig_end_en_setf(struct cl_chip *chip, u8 irqdspfrcrxsigenden)
{
	ASSERT_ERR_CHIP((((u32)irqdspfrcrxsigenden << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00400000)) | ((u32)irqdspfrcrxsigenden << 22));
}

static inline u8 riu_rwnxdspinten_irqdsp_frc_rx_phy_proc_lim_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline void riu_rwnxdspinten_irqdsp_frc_rx_phy_proc_lim_en_setf(struct cl_chip *chip, u8 irqdspfrcrxphyproclimen)
{
	ASSERT_ERR_CHIP((((u32)irqdspfrcrxphyproclimen << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00200000)) | ((u32)irqdspfrcrxphyproclimen << 21));
}

static inline u8 riu_rwnxdspinten_irqdsplbcapturedoneen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void riu_rwnxdspinten_irqdsplbcapturedoneen_setf(struct cl_chip *chip, u8 irqdsplbcapturedoneen)
{
	ASSERT_ERR_CHIP((((u32)irqdsplbcapturedoneen << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00100000)) | ((u32)irqdsplbcapturedoneen << 20));
}

static inline u8 riu_rwnxdspinten_irqdspagcdssslocken_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void riu_rwnxdspinten_irqdspagcdssslocken_setf(struct cl_chip *chip, u8 irqdspagcdssslocken)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcdssslocken << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00020000)) | ((u32)irqdspagcdssslocken << 17));
}

static inline u8 riu_rwnxdspinten_irqdspagcdsssunlocken_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void riu_rwnxdspinten_irqdspagcdsssunlocken_setf(struct cl_chip *chip, u8 irqdspagcdsssunlocken)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcdsssunlocken << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00010000)) | ((u32)irqdspagcdsssunlocken << 16));
}

static inline u8 riu_rwnxdspinten_irqdsp_agc_fsm_3_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void riu_rwnxdspinten_irqdsp_agc_fsm_3_en_setf(struct cl_chip *chip, u8 irqdspagcfsm3en)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcfsm3en << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00004000)) | ((u32)irqdspagcfsm3en << 14));
}

static inline u8 riu_rwnxdspinten_irqdspradartriggeren_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_rwnxdspinten_irqdspradartriggeren_setf(struct cl_chip *chip, u8 irqdspradartriggeren)
{
	ASSERT_ERR_CHIP((((u32)irqdspradartriggeren << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00002000)) | ((u32)irqdspradartriggeren << 13));
}

static inline u8 riu_rwnxdspinten_irqdspradardeten_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void riu_rwnxdspinten_irqdspradardeten_setf(struct cl_chip *chip, u8 irqdspradardeten)
{
	ASSERT_ERR_CHIP((((u32)irqdspradardeten << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00001000)) | ((u32)irqdspradardeten << 12));
}

static inline u8 riu_rwnxdspinten_irqdsp_agc_fsm_2_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void riu_rwnxdspinten_irqdsp_agc_fsm_2_en_setf(struct cl_chip *chip, u8 irqdspagcfsm2en)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcfsm2en << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00000800)) | ((u32)irqdspagcfsm2en << 11));
}

static inline u8 riu_rwnxdspinten_irqdsp_agc_fsm_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void riu_rwnxdspinten_irqdsp_agc_fsm_1_en_setf(struct cl_chip *chip, u8 irqdspagcfsm1en)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcfsm1en << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00000400)) | ((u32)irqdspagcfsm1en << 10));
}

static inline u8 riu_rwnxdspinten_irqdsp_agc_fsm_0_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void riu_rwnxdspinten_irqdsp_agc_fsm_0_en_setf(struct cl_chip *chip, u8 irqdspagcfsm0en)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcfsm0en << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00000200)) | ((u32)irqdspagcfsm0en << 9));
}

static inline u8 riu_rwnxdspinten_irqdspccatimeouten_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void riu_rwnxdspinten_irqdspccatimeouten_setf(struct cl_chip *chip, u8 irqdspccatimeouten)
{
	ASSERT_ERR_CHIP((((u32)irqdspccatimeouten << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00000100)) | ((u32)irqdspccatimeouten << 8));
}

static inline u8 riu_rwnxdspinten_irqdspbtc_3_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void riu_rwnxdspinten_irqdspbtc_3_en_setf(struct cl_chip *chip, u8 irqdspbtc3en)
{
	ASSERT_ERR_CHIP((((u32)irqdspbtc3en << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00000080)) | ((u32)irqdspbtc3en << 7));
}

static inline u8 riu_rwnxdspinten_irqdspbtc_2_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void riu_rwnxdspinten_irqdspbtc_2_en_setf(struct cl_chip *chip, u8 irqdspbtc2en)
{
	ASSERT_ERR_CHIP((((u32)irqdspbtc2en << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00000040)) | ((u32)irqdspbtc2en << 6));
}

static inline u8 riu_rwnxdspinten_irqdspbtc_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void riu_rwnxdspinten_irqdspbtc_1_en_setf(struct cl_chip *chip, u8 irqdspbtc1en)
{
	ASSERT_ERR_CHIP((((u32)irqdspbtc1en << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00000020)) | ((u32)irqdspbtc1en << 5));
}

static inline u8 riu_rwnxdspinten_irqdspbtc_0_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void riu_rwnxdspinten_irqdspbtc_0_en_setf(struct cl_chip *chip, u8 irqdspbtc0en)
{
	ASSERT_ERR_CHIP((((u32)irqdspbtc0en << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00000010)) | ((u32)irqdspbtc0en << 4));
}

static inline u8 riu_rwnxdspinten_irqdspmputxenden_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void riu_rwnxdspinten_irqdspmputxenden_setf(struct cl_chip *chip, u8 irqdspmputxenden)
{
	ASSERT_ERR_CHIP((((u32)irqdspmputxenden << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00000008)) | ((u32)irqdspmputxenden << 3));
}

static inline u8 riu_rwnxdspinten_irqdspagcofdmunlocktimeren_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void riu_rwnxdspinten_irqdspagcofdmunlocktimeren_setf(struct cl_chip *chip, u8 irqdspagcofdmunlocktimeren)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmunlocktimeren << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00000004)) | ((u32)irqdspagcofdmunlocktimeren << 2));
}

static inline u8 riu_rwnxdspinten_irqdspagcofdmlocken_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void riu_rwnxdspinten_irqdspagcofdmlocken_setf(struct cl_chip *chip, u8 irqdspagcofdmlocken)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmlocken << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00000002)) | ((u32)irqdspagcofdmlocken << 1));
}

static inline u8 riu_rwnxdspinten_irqdspagcofdmunlocken_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_rwnxdspinten_irqdspagcofdmunlocken_setf(struct cl_chip *chip, u8 irqdspagcofdmunlocken)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmunlocken << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTEN_ADDR) & ~((u32)0x00000001)) | ((u32)irqdspagcofdmunlocken << 0));
}

/**
 * @brief RWNXDSPINTSTATRAW register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    IRQDSPRCRXENDRAW          0
 *    28    IRQDSPRCTXENDRAW          0
 *    27    IRQDSPERRORMDMBRAW        0
 *    26    IRQDSPTXENDMDMBRAW        0
 *    25    IRQDSPRXENDMDMBRAW        0
 *    24    IRQDSPRXVECTORMDMBRAW     0
 *    23    IRQDSP_FRC_RX_END4_T_RAW  0
 *    22    IRQDSP_FRC_RX_SIG_END_RAW 0
 *    21    IRQDSP_FRC_RX_PHY_PROC_LIM_RAW 0
 *    20    IRQDSPLBCAPTUREDONERAW    0
 *    17    IRQDSPAGCDSSSLOCKRAW      0
 *    16    IRQDSPAGCDSSSUNLOCKRAW    0
 *    14    IRQDSP_AGC_FSM3_RAW       0
 *    13    IRQDSPRADARTRIGGERRAW     0
 *    12    IRQDSPRADARDETRAW         0
 *    11    IRQDSP_AGC_FSM2_RAW       0
 *    10    IRQDSP_AGC_FSM1_RAW       0
 *    09    IRQDSP_AGC_FSM0_RAW       0
 *    08    IRQDSPCCATIMEOUTRAW       0
 *    07    IRQDSPBTC3_RAW            0
 *    06    IRQDSPBTC2_RAW            0
 *    05    IRQDSPBTC1_RAW            0
 *    04    IRQDSPBTC0_RAW            0
 *    03    IRQDSPMPUTXENDRAW         0
 *    02    IRQDSPAGCOFDMUNLOCKTIMERRAW 0
 *    01    IRQDSPAGCOFDMLOCKRAW      0
 *    00    IRQDSPAGCOFDMUNLOCKRAW    0
 * </pre>
 */
#define RIU_RWNXDSPINTSTATRAW_ADDR        (REG_RIU_BASE_ADDR + 0x00000404)
#define RIU_RWNXDSPINTSTATRAW_OFFSET      0x00000404
#define RIU_RWNXDSPINTSTATRAW_INDEX       0x00000101
#define RIU_RWNXDSPINTSTATRAW_RESET       0x00000000

static inline u32 riu_rwnxdspintstatraw_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);
}

/* Field definitions */
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRCRXENDRAW_BIT    ((u32)0x20000000)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRCRXENDRAW_POS    29
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRCTXENDRAW_BIT    ((u32)0x10000000)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRCTXENDRAW_POS    28
#define RIU_RWNXDSPINTSTATRAW_IRQDSPERRORMDMBRAW_BIT    ((u32)0x08000000)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPERRORMDMBRAW_POS    27
#define RIU_RWNXDSPINTSTATRAW_IRQDSPTXENDMDMBRAW_BIT    ((u32)0x04000000)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPTXENDMDMBRAW_POS    26
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRXENDMDMBRAW_BIT    ((u32)0x02000000)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRXENDMDMBRAW_POS    25
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRXVECTORMDMBRAW_BIT    ((u32)0x01000000)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRXVECTORMDMBRAW_POS    24
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_FRC_RX_END_4_T_RAW_BIT    ((u32)0x00800000)
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_FRC_RX_END_4_T_RAW_POS    23
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_FRC_RX_SIG_END_RAW_BIT    ((u32)0x00400000)
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_FRC_RX_SIG_END_RAW_POS    22
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_FRC_RX_PHY_PROC_LIM_RAW_BIT    ((u32)0x00200000)
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_FRC_RX_PHY_PROC_LIM_RAW_POS    21
#define RIU_RWNXDSPINTSTATRAW_IRQDSPLBCAPTUREDONERAW_BIT    ((u32)0x00100000)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPLBCAPTUREDONERAW_POS    20
#define RIU_RWNXDSPINTSTATRAW_IRQDSPAGCDSSSLOCKRAW_BIT    ((u32)0x00020000)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPAGCDSSSLOCKRAW_POS    17
#define RIU_RWNXDSPINTSTATRAW_IRQDSPAGCDSSSUNLOCKRAW_BIT    ((u32)0x00010000)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPAGCDSSSUNLOCKRAW_POS    16
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_AGC_FSM_3_RAW_BIT    ((u32)0x00004000)
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_AGC_FSM_3_RAW_POS    14
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRADARTRIGGERRAW_BIT    ((u32)0x00002000)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRADARTRIGGERRAW_POS    13
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRADARDETRAW_BIT    ((u32)0x00001000)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRADARDETRAW_POS    12
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_AGC_FSM_2_RAW_BIT    ((u32)0x00000800)
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_AGC_FSM_2_RAW_POS    11
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_AGC_FSM_1_RAW_BIT    ((u32)0x00000400)
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_AGC_FSM_1_RAW_POS    10
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_AGC_FSM_0_RAW_BIT    ((u32)0x00000200)
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_AGC_FSM_0_RAW_POS    9
#define RIU_RWNXDSPINTSTATRAW_IRQDSPCCATIMEOUTRAW_BIT    ((u32)0x00000100)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPCCATIMEOUTRAW_POS    8
#define RIU_RWNXDSPINTSTATRAW_IRQDSPBTC_3_RAW_BIT    ((u32)0x00000080)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPBTC_3_RAW_POS    7
#define RIU_RWNXDSPINTSTATRAW_IRQDSPBTC_2_RAW_BIT    ((u32)0x00000040)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPBTC_2_RAW_POS    6
#define RIU_RWNXDSPINTSTATRAW_IRQDSPBTC_1_RAW_BIT    ((u32)0x00000020)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPBTC_1_RAW_POS    5
#define RIU_RWNXDSPINTSTATRAW_IRQDSPBTC_0_RAW_BIT    ((u32)0x00000010)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPBTC_0_RAW_POS    4
#define RIU_RWNXDSPINTSTATRAW_IRQDSPMPUTXENDRAW_BIT    ((u32)0x00000008)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPMPUTXENDRAW_POS    3
#define RIU_RWNXDSPINTSTATRAW_IRQDSPAGCOFDMUNLOCKTIMERRAW_BIT    ((u32)0x00000004)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPAGCOFDMUNLOCKTIMERRAW_POS    2
#define RIU_RWNXDSPINTSTATRAW_IRQDSPAGCOFDMLOCKRAW_BIT    ((u32)0x00000002)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPAGCOFDMLOCKRAW_POS    1
#define RIU_RWNXDSPINTSTATRAW_IRQDSPAGCOFDMUNLOCKRAW_BIT    ((u32)0x00000001)
#define RIU_RWNXDSPINTSTATRAW_IRQDSPAGCOFDMUNLOCKRAW_POS    0

#define RIU_RWNXDSPINTSTATRAW_IRQDSPRCRXENDRAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRCTXENDRAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPERRORMDMBRAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPTXENDMDMBRAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRXENDMDMBRAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRXVECTORMDMBRAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_FRC_RX_END_4_T_RAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_FRC_RX_SIG_END_RAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_FRC_RX_PHY_PROC_LIM_RAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPLBCAPTUREDONERAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPAGCDSSSLOCKRAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPAGCDSSSUNLOCKRAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_AGC_FSM_3_RAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRADARTRIGGERRAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPRADARDETRAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_AGC_FSM_2_RAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_AGC_FSM_1_RAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSP_AGC_FSM_0_RAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPCCATIMEOUTRAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPBTC_3_RAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPBTC_2_RAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPBTC_1_RAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPBTC_0_RAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPMPUTXENDRAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPAGCOFDMUNLOCKTIMERRAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPAGCOFDMLOCKRAW_RST    0x0
#define RIU_RWNXDSPINTSTATRAW_IRQDSPAGCOFDMUNLOCKRAW_RST    0x0

static inline void riu_rwnxdspintstatraw_unpack(struct cl_chip *chip, u8 *irqdsprcrxendraw, u8 *irqdsprctxendraw, u8 *irqdsperrormdmbraw, u8 *irqdsptxendmdmbraw, u8 *irqdsprxendmdmbraw, u8 *irqdsprxvectormdmbraw, u8 *irqdsp_frc_rx_end4_t_raw, u8 *irqdsp_frc_rx_sig_end_raw, u8 *irqdsp_frc_rx_phy_proc_lim_raw, u8 *irqdsplbcapturedoneraw, u8 *irqdspagcdssslockraw, u8 *irqdspagcdsssunlockraw, u8 *irqdsp_agc_fsm3_raw, u8 *irqdspradartriggerraw, u8 *irqdspradardetraw, u8 *irqdsp_agc_fsm2_raw, u8 *irqdsp_agc_fsm1_raw, u8 *irqdsp_agc_fsm0_raw, u8 *irqdspccatimeoutraw, u8 *irqdspbtc3_raw, u8 *irqdspbtc2_raw, u8 *irqdspbtc1_raw, u8 *irqdspbtc0_raw, u8 *irqdspmputxendraw, u8 *irqdspagcofdmunlocktimerraw, u8 *irqdspagcofdmlockraw, u8 *irqdspagcofdmunlockraw)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	*irqdsprcrxendraw = (local_val & ((u32)0x20000000)) >> 29;
	*irqdsprctxendraw = (local_val & ((u32)0x10000000)) >> 28;
	*irqdsperrormdmbraw = (local_val & ((u32)0x08000000)) >> 27;
	*irqdsptxendmdmbraw = (local_val & ((u32)0x04000000)) >> 26;
	*irqdsprxendmdmbraw = (local_val & ((u32)0x02000000)) >> 25;
	*irqdsprxvectormdmbraw = (local_val & ((u32)0x01000000)) >> 24;
	*irqdsp_frc_rx_end4_t_raw = (local_val & ((u32)0x00800000)) >> 23;
	*irqdsp_frc_rx_sig_end_raw = (local_val & ((u32)0x00400000)) >> 22;
	*irqdsp_frc_rx_phy_proc_lim_raw = (local_val & ((u32)0x00200000)) >> 21;
	*irqdsplbcapturedoneraw = (local_val & ((u32)0x00100000)) >> 20;
	*irqdspagcdssslockraw = (local_val & ((u32)0x00020000)) >> 17;
	*irqdspagcdsssunlockraw = (local_val & ((u32)0x00010000)) >> 16;
	*irqdsp_agc_fsm3_raw = (local_val & ((u32)0x00004000)) >> 14;
	*irqdspradartriggerraw = (local_val & ((u32)0x00002000)) >> 13;
	*irqdspradardetraw = (local_val & ((u32)0x00001000)) >> 12;
	*irqdsp_agc_fsm2_raw = (local_val & ((u32)0x00000800)) >> 11;
	*irqdsp_agc_fsm1_raw = (local_val & ((u32)0x00000400)) >> 10;
	*irqdsp_agc_fsm0_raw = (local_val & ((u32)0x00000200)) >> 9;
	*irqdspccatimeoutraw = (local_val & ((u32)0x00000100)) >> 8;
	*irqdspbtc3_raw = (local_val & ((u32)0x00000080)) >> 7;
	*irqdspbtc2_raw = (local_val & ((u32)0x00000040)) >> 6;
	*irqdspbtc1_raw = (local_val & ((u32)0x00000020)) >> 5;
	*irqdspbtc0_raw = (local_val & ((u32)0x00000010)) >> 4;
	*irqdspmputxendraw = (local_val & ((u32)0x00000008)) >> 3;
	*irqdspagcofdmunlocktimerraw = (local_val & ((u32)0x00000004)) >> 2;
	*irqdspagcofdmlockraw = (local_val & ((u32)0x00000002)) >> 1;
	*irqdspagcofdmunlockraw = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_rwnxdspintstatraw_irqdsprcrxendraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline u8 riu_rwnxdspintstatraw_irqdsprctxendraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline u8 riu_rwnxdspintstatraw_irqdsperrormdmbraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline u8 riu_rwnxdspintstatraw_irqdsptxendmdmbraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline u8 riu_rwnxdspintstatraw_irqdsprxendmdmbraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline u8 riu_rwnxdspintstatraw_irqdsprxvectormdmbraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline u8 riu_rwnxdspintstatraw_irqdsp_frc_rx_end_4_t_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline u8 riu_rwnxdspintstatraw_irqdsp_frc_rx_sig_end_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline u8 riu_rwnxdspintstatraw_irqdsp_frc_rx_phy_proc_lim_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline u8 riu_rwnxdspintstatraw_irqdsplbcapturedoneraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline u8 riu_rwnxdspintstatraw_irqdspagcdssslockraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline u8 riu_rwnxdspintstatraw_irqdspagcdsssunlockraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline u8 riu_rwnxdspintstatraw_irqdsp_agc_fsm_3_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline u8 riu_rwnxdspintstatraw_irqdspradartriggerraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline u8 riu_rwnxdspintstatraw_irqdspradardetraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline u8 riu_rwnxdspintstatraw_irqdsp_agc_fsm_2_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline u8 riu_rwnxdspintstatraw_irqdsp_agc_fsm_1_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline u8 riu_rwnxdspintstatraw_irqdsp_agc_fsm_0_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline u8 riu_rwnxdspintstatraw_irqdspccatimeoutraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline u8 riu_rwnxdspintstatraw_irqdspbtc_3_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline u8 riu_rwnxdspintstatraw_irqdspbtc_2_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline u8 riu_rwnxdspintstatraw_irqdspbtc_1_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline u8 riu_rwnxdspintstatraw_irqdspbtc_0_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline u8 riu_rwnxdspintstatraw_irqdspmputxendraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline u8 riu_rwnxdspintstatraw_irqdspagcofdmunlocktimerraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline u8 riu_rwnxdspintstatraw_irqdspagcofdmlockraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline u8 riu_rwnxdspintstatraw_irqdspagcofdmunlockraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

/**
 * @brief RWNXDSPINTSTATMASKED register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    IRQDSPRCRXENDMASKED       0
 *    28    IRQDSPRCTXENDMASKED       0
 *    27    IRQDSPERRORMDMBMASKED     0
 *    26    IRQDSPTXENDMDMBMASKED     0
 *    25    IRQDSPRXENDMDMBMASKED     0
 *    24    IRQDSPRXVECTORMDMBMASKED  0
 *    23    IRQDSP_FRC_RX_END4_T_MASKED 0
 *    22    IRQDSP_FRC_RX_SIG_END_MASKED 0
 *    21    IRQDSP_FRC_RX_PROC_LIM_MASKED 0
 *    20    IRQDSPLBCAPTUREDONEMASKED 0
 *    17    IRQDSPAGCDSSSLOCKMASKED   0
 *    16    IRQDSPAGCDSSSUNLOCKMASKED 0
 *    14    IRQDSP_AGC_FSM3_MASKED    0
 *    13    IRQDSPRADARTRIGGERMASKED  0
 *    12    IRQDSPRADARDETMASKED      0
 *    11    IRQDSP_AGC_FSM2_MASKED    0
 *    10    IRQDSP_AGC_FSM1_MASKED    0
 *    09    IRQDSP_AGC_FSM0_MASKED    0
 *    08    IRQDSPCCATIMEOUTMASKED    0
 *    07    IRQDSPBTC3_MASKED         0
 *    06    IRQDSPBTC2_MASKED         0
 *    05    IRQDSPBTC1_MASKED         0
 *    04    IRQDSPBTC0_MASKED         0
 *    03    IRQDSPMPUTXENDMASKED      0
 *    02    IRQDSPAGCOFDMUNLOCKTIMERMASKED 0
 *    01    IRQDSPAGCOFDMLOCKMASKED   0
 *    00    IRQDSPAGCOFDMUNLOCKMASKED 0
 * </pre>
 */
#define RIU_RWNXDSPINTSTATMASKED_ADDR        (REG_RIU_BASE_ADDR + 0x00000408)
#define RIU_RWNXDSPINTSTATMASKED_OFFSET      0x00000408
#define RIU_RWNXDSPINTSTATMASKED_INDEX       0x00000102
#define RIU_RWNXDSPINTSTATMASKED_RESET       0x00000000

static inline u32 riu_rwnxdspintstatmasked_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);
}

/* Field definitions */
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRCRXENDMASKED_BIT    ((u32)0x20000000)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRCRXENDMASKED_POS    29
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRCTXENDMASKED_BIT    ((u32)0x10000000)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRCTXENDMASKED_POS    28
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPERRORMDMBMASKED_BIT    ((u32)0x08000000)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPERRORMDMBMASKED_POS    27
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPTXENDMDMBMASKED_BIT    ((u32)0x04000000)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPTXENDMDMBMASKED_POS    26
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRXENDMDMBMASKED_BIT    ((u32)0x02000000)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRXENDMDMBMASKED_POS    25
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRXVECTORMDMBMASKED_BIT    ((u32)0x01000000)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRXVECTORMDMBMASKED_POS    24
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_FRC_RX_END_4_T_MASKED_BIT    ((u32)0x00800000)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_FRC_RX_END_4_T_MASKED_POS    23
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_FRC_RX_SIG_END_MASKED_BIT    ((u32)0x00400000)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_FRC_RX_SIG_END_MASKED_POS    22
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_FRC_RX_PROC_LIM_MASKED_BIT    ((u32)0x00200000)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_FRC_RX_PROC_LIM_MASKED_POS    21
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPLBCAPTUREDONEMASKED_BIT    ((u32)0x00100000)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPLBCAPTUREDONEMASKED_POS    20
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPAGCDSSSLOCKMASKED_BIT    ((u32)0x00020000)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPAGCDSSSLOCKMASKED_POS    17
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPAGCDSSSUNLOCKMASKED_BIT    ((u32)0x00010000)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPAGCDSSSUNLOCKMASKED_POS    16
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_AGC_FSM_3_MASKED_BIT    ((u32)0x00004000)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_AGC_FSM_3_MASKED_POS    14
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRADARTRIGGERMASKED_BIT    ((u32)0x00002000)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRADARTRIGGERMASKED_POS    13
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRADARDETMASKED_BIT    ((u32)0x00001000)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRADARDETMASKED_POS    12
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_AGC_FSM_2_MASKED_BIT    ((u32)0x00000800)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_AGC_FSM_2_MASKED_POS    11
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_AGC_FSM_1_MASKED_BIT    ((u32)0x00000400)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_AGC_FSM_1_MASKED_POS    10
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_AGC_FSM_0_MASKED_BIT    ((u32)0x00000200)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_AGC_FSM_0_MASKED_POS    9
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPCCATIMEOUTMASKED_BIT    ((u32)0x00000100)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPCCATIMEOUTMASKED_POS    8
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPBTC_3_MASKED_BIT    ((u32)0x00000080)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPBTC_3_MASKED_POS    7
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPBTC_2_MASKED_BIT    ((u32)0x00000040)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPBTC_2_MASKED_POS    6
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPBTC_1_MASKED_BIT    ((u32)0x00000020)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPBTC_1_MASKED_POS    5
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPBTC_0_MASKED_BIT    ((u32)0x00000010)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPBTC_0_MASKED_POS    4
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPMPUTXENDMASKED_BIT    ((u32)0x00000008)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPMPUTXENDMASKED_POS    3
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPAGCOFDMUNLOCKTIMERMASKED_BIT    ((u32)0x00000004)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPAGCOFDMUNLOCKTIMERMASKED_POS    2
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPAGCOFDMLOCKMASKED_BIT    ((u32)0x00000002)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPAGCOFDMLOCKMASKED_POS    1
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPAGCOFDMUNLOCKMASKED_BIT    ((u32)0x00000001)
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPAGCOFDMUNLOCKMASKED_POS    0

#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRCRXENDMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRCTXENDMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPERRORMDMBMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPTXENDMDMBMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRXENDMDMBMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRXVECTORMDMBMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_FRC_RX_END_4_T_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_FRC_RX_SIG_END_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_FRC_RX_PROC_LIM_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPLBCAPTUREDONEMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPAGCDSSSLOCKMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPAGCDSSSUNLOCKMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_AGC_FSM_3_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRADARTRIGGERMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPRADARDETMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_AGC_FSM_2_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_AGC_FSM_1_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSP_AGC_FSM_0_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPCCATIMEOUTMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPBTC_3_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPBTC_2_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPBTC_1_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPBTC_0_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPMPUTXENDMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPAGCOFDMUNLOCKTIMERMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPAGCOFDMLOCKMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATMASKED_IRQDSPAGCOFDMUNLOCKMASKED_RST    0x0

static inline void riu_rwnxdspintstatmasked_unpack(struct cl_chip *chip, u8 *irqdsprcrxendmasked, u8 *irqdsprctxendmasked, u8 *irqdsperrormdmbmasked, u8 *irqdsptxendmdmbmasked, u8 *irqdsprxendmdmbmasked, u8 *irqdsprxvectormdmbmasked, u8 *irqdsp_frc_rx_end4_t_masked, u8 *irqdsp_frc_rx_sig_end_masked, u8 *irqdsp_frc_rx_proc_lim_masked, u8 *irqdsplbcapturedonemasked, u8 *irqdspagcdssslockmasked, u8 *irqdspagcdsssunlockmasked, u8 *irqdsp_agc_fsm3_masked, u8 *irqdspradartriggermasked, u8 *irqdspradardetmasked, u8 *irqdsp_agc_fsm2_masked, u8 *irqdsp_agc_fsm1_masked, u8 *irqdsp_agc_fsm0_masked, u8 *irqdspccatimeoutmasked, u8 *irqdspbtc3_masked, u8 *irqdspbtc2_masked, u8 *irqdspbtc1_masked, u8 *irqdspbtc0_masked, u8 *irqdspmputxendmasked, u8 *irqdspagcofdmunlocktimermasked, u8 *irqdspagcofdmlockmasked, u8 *irqdspagcofdmunlockmasked)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	*irqdsprcrxendmasked = (local_val & ((u32)0x20000000)) >> 29;
	*irqdsprctxendmasked = (local_val & ((u32)0x10000000)) >> 28;
	*irqdsperrormdmbmasked = (local_val & ((u32)0x08000000)) >> 27;
	*irqdsptxendmdmbmasked = (local_val & ((u32)0x04000000)) >> 26;
	*irqdsprxendmdmbmasked = (local_val & ((u32)0x02000000)) >> 25;
	*irqdsprxvectormdmbmasked = (local_val & ((u32)0x01000000)) >> 24;
	*irqdsp_frc_rx_end4_t_masked = (local_val & ((u32)0x00800000)) >> 23;
	*irqdsp_frc_rx_sig_end_masked = (local_val & ((u32)0x00400000)) >> 22;
	*irqdsp_frc_rx_proc_lim_masked = (local_val & ((u32)0x00200000)) >> 21;
	*irqdsplbcapturedonemasked = (local_val & ((u32)0x00100000)) >> 20;
	*irqdspagcdssslockmasked = (local_val & ((u32)0x00020000)) >> 17;
	*irqdspagcdsssunlockmasked = (local_val & ((u32)0x00010000)) >> 16;
	*irqdsp_agc_fsm3_masked = (local_val & ((u32)0x00004000)) >> 14;
	*irqdspradartriggermasked = (local_val & ((u32)0x00002000)) >> 13;
	*irqdspradardetmasked = (local_val & ((u32)0x00001000)) >> 12;
	*irqdsp_agc_fsm2_masked = (local_val & ((u32)0x00000800)) >> 11;
	*irqdsp_agc_fsm1_masked = (local_val & ((u32)0x00000400)) >> 10;
	*irqdsp_agc_fsm0_masked = (local_val & ((u32)0x00000200)) >> 9;
	*irqdspccatimeoutmasked = (local_val & ((u32)0x00000100)) >> 8;
	*irqdspbtc3_masked = (local_val & ((u32)0x00000080)) >> 7;
	*irqdspbtc2_masked = (local_val & ((u32)0x00000040)) >> 6;
	*irqdspbtc1_masked = (local_val & ((u32)0x00000020)) >> 5;
	*irqdspbtc0_masked = (local_val & ((u32)0x00000010)) >> 4;
	*irqdspmputxendmasked = (local_val & ((u32)0x00000008)) >> 3;
	*irqdspagcofdmunlocktimermasked = (local_val & ((u32)0x00000004)) >> 2;
	*irqdspagcofdmlockmasked = (local_val & ((u32)0x00000002)) >> 1;
	*irqdspagcofdmunlockmasked = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_rwnxdspintstatmasked_irqdsprcrxendmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline u8 riu_rwnxdspintstatmasked_irqdsprctxendmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline u8 riu_rwnxdspintstatmasked_irqdsperrormdmbmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline u8 riu_rwnxdspintstatmasked_irqdsptxendmdmbmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline u8 riu_rwnxdspintstatmasked_irqdsprxendmdmbmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline u8 riu_rwnxdspintstatmasked_irqdsprxvectormdmbmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline u8 riu_rwnxdspintstatmasked_irqdsp_frc_rx_end_4_t_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline u8 riu_rwnxdspintstatmasked_irqdsp_frc_rx_sig_end_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline u8 riu_rwnxdspintstatmasked_irqdsp_frc_rx_proc_lim_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline u8 riu_rwnxdspintstatmasked_irqdsplbcapturedonemasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline u8 riu_rwnxdspintstatmasked_irqdspagcdssslockmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline u8 riu_rwnxdspintstatmasked_irqdspagcdsssunlockmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline u8 riu_rwnxdspintstatmasked_irqdsp_agc_fsm_3_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline u8 riu_rwnxdspintstatmasked_irqdspradartriggermasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline u8 riu_rwnxdspintstatmasked_irqdspradardetmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline u8 riu_rwnxdspintstatmasked_irqdsp_agc_fsm_2_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline u8 riu_rwnxdspintstatmasked_irqdsp_agc_fsm_1_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline u8 riu_rwnxdspintstatmasked_irqdsp_agc_fsm_0_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline u8 riu_rwnxdspintstatmasked_irqdspccatimeoutmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline u8 riu_rwnxdspintstatmasked_irqdspbtc_3_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline u8 riu_rwnxdspintstatmasked_irqdspbtc_2_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline u8 riu_rwnxdspintstatmasked_irqdspbtc_1_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline u8 riu_rwnxdspintstatmasked_irqdspbtc_0_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline u8 riu_rwnxdspintstatmasked_irqdspmputxendmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline u8 riu_rwnxdspintstatmasked_irqdspagcofdmunlocktimermasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline u8 riu_rwnxdspintstatmasked_irqdspagcofdmlockmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline u8 riu_rwnxdspintstatmasked_irqdspagcofdmunlockmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

/**
 * @brief RWNXDSPINTACK register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    IRQDSPRCRXENDACK          0
 *    28    IRQDSPRCTXENDACK          0
 *    27    IRQDSPERRORMDMBACK        0
 *    26    IRQDSPTXENDMDMBACK        0
 *    25    IRQDSPRXENDMDMBACK        0
 *    24    IRQDSPRXVECTORMDMBACK     0
 *    23    IRQDSP_FRC_RX_END4_T_ACK  0
 *    22    IRQDSP_FRC_RX_SIG_END_ACK 0
 *    21    IRQDSP_FRC_RX_PHY_PROC_LIM_ACK 0
 *    20    IRQDSPLBCAPTUREDONEACK    0
 *    17    IRQDSPAGCDSSSLOCKACK      0
 *    16    IRQDSPAGCDSSSUNLOCKACK    0
 *    14    IRQDSP_AGC_FSM3_ACK       0
 *    13    IRQDSPRADARTRIGGERACK     0
 *    12    IRQDSPRADARDETACK         0
 *    11    IRQDSP_AGC_FSM2_ACK       0
 *    10    IRQDSP_AGC_FSM1_ACK       0
 *    09    IRQDSP_AGC_FSM0_ACK       0
 *    08    IRQDSPCCATIMEOUTACK       0
 *    07    IRQDSPBTC3_ACK            0
 *    06    IRQDSPBTC2_ACK            0
 *    05    IRQDSPBTC1_ACK            0
 *    04    IRQDSPBTC0_ACK            0
 *    03    IRQDSPMPUTXENDACK         0
 *    02    IRQDSPAGCOFDMUNLOCKTIMERACK 0
 *    01    IRQDSPAGCOFDMLOCKACK      0
 *    00    IRQDSPAGCOFDMUNLOCKACK    0
 * </pre>
 */
#define RIU_RWNXDSPINTACK_ADDR        (REG_RIU_BASE_ADDR + 0x0000040C)
#define RIU_RWNXDSPINTACK_OFFSET      0x0000040C
#define RIU_RWNXDSPINTACK_INDEX       0x00000103
#define RIU_RWNXDSPINTACK_RESET       0x00000000

static inline void riu_rwnxdspintack_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, value);
}

static inline void riu_rwnxdspintack_clear(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXDSPINTACK_IRQDSPRCRXENDACK_BIT    ((u32)0x20000000)
#define RIU_RWNXDSPINTACK_IRQDSPRCRXENDACK_POS    29
#define RIU_RWNXDSPINTACK_IRQDSPRCTXENDACK_BIT    ((u32)0x10000000)
#define RIU_RWNXDSPINTACK_IRQDSPRCTXENDACK_POS    28
#define RIU_RWNXDSPINTACK_IRQDSPERRORMDMBACK_BIT    ((u32)0x08000000)
#define RIU_RWNXDSPINTACK_IRQDSPERRORMDMBACK_POS    27
#define RIU_RWNXDSPINTACK_IRQDSPTXENDMDMBACK_BIT    ((u32)0x04000000)
#define RIU_RWNXDSPINTACK_IRQDSPTXENDMDMBACK_POS    26
#define RIU_RWNXDSPINTACK_IRQDSPRXENDMDMBACK_BIT    ((u32)0x02000000)
#define RIU_RWNXDSPINTACK_IRQDSPRXENDMDMBACK_POS    25
#define RIU_RWNXDSPINTACK_IRQDSPRXVECTORMDMBACK_BIT    ((u32)0x01000000)
#define RIU_RWNXDSPINTACK_IRQDSPRXVECTORMDMBACK_POS    24
#define RIU_RWNXDSPINTACK_IRQDSP_FRC_RX_END_4_T_ACK_BIT    ((u32)0x00800000)
#define RIU_RWNXDSPINTACK_IRQDSP_FRC_RX_END_4_T_ACK_POS    23
#define RIU_RWNXDSPINTACK_IRQDSP_FRC_RX_SIG_END_ACK_BIT    ((u32)0x00400000)
#define RIU_RWNXDSPINTACK_IRQDSP_FRC_RX_SIG_END_ACK_POS    22
#define RIU_RWNXDSPINTACK_IRQDSP_FRC_RX_PHY_PROC_LIM_ACK_BIT    ((u32)0x00200000)
#define RIU_RWNXDSPINTACK_IRQDSP_FRC_RX_PHY_PROC_LIM_ACK_POS    21
#define RIU_RWNXDSPINTACK_IRQDSPLBCAPTUREDONEACK_BIT    ((u32)0x00100000)
#define RIU_RWNXDSPINTACK_IRQDSPLBCAPTUREDONEACK_POS    20
#define RIU_RWNXDSPINTACK_IRQDSPAGCDSSSLOCKACK_BIT    ((u32)0x00020000)
#define RIU_RWNXDSPINTACK_IRQDSPAGCDSSSLOCKACK_POS    17
#define RIU_RWNXDSPINTACK_IRQDSPAGCDSSSUNLOCKACK_BIT    ((u32)0x00010000)
#define RIU_RWNXDSPINTACK_IRQDSPAGCDSSSUNLOCKACK_POS    16
#define RIU_RWNXDSPINTACK_IRQDSP_AGC_FSM_3_ACK_BIT    ((u32)0x00004000)
#define RIU_RWNXDSPINTACK_IRQDSP_AGC_FSM_3_ACK_POS    14
#define RIU_RWNXDSPINTACK_IRQDSPRADARTRIGGERACK_BIT    ((u32)0x00002000)
#define RIU_RWNXDSPINTACK_IRQDSPRADARTRIGGERACK_POS    13
#define RIU_RWNXDSPINTACK_IRQDSPRADARDETACK_BIT    ((u32)0x00001000)
#define RIU_RWNXDSPINTACK_IRQDSPRADARDETACK_POS    12
#define RIU_RWNXDSPINTACK_IRQDSP_AGC_FSM_2_ACK_BIT    ((u32)0x00000800)
#define RIU_RWNXDSPINTACK_IRQDSP_AGC_FSM_2_ACK_POS    11
#define RIU_RWNXDSPINTACK_IRQDSP_AGC_FSM_1_ACK_BIT    ((u32)0x00000400)
#define RIU_RWNXDSPINTACK_IRQDSP_AGC_FSM_1_ACK_POS    10
#define RIU_RWNXDSPINTACK_IRQDSP_AGC_FSM_0_ACK_BIT    ((u32)0x00000200)
#define RIU_RWNXDSPINTACK_IRQDSP_AGC_FSM_0_ACK_POS    9
#define RIU_RWNXDSPINTACK_IRQDSPCCATIMEOUTACK_BIT    ((u32)0x00000100)
#define RIU_RWNXDSPINTACK_IRQDSPCCATIMEOUTACK_POS    8
#define RIU_RWNXDSPINTACK_IRQDSPBTC_3_ACK_BIT    ((u32)0x00000080)
#define RIU_RWNXDSPINTACK_IRQDSPBTC_3_ACK_POS    7
#define RIU_RWNXDSPINTACK_IRQDSPBTC_2_ACK_BIT    ((u32)0x00000040)
#define RIU_RWNXDSPINTACK_IRQDSPBTC_2_ACK_POS    6
#define RIU_RWNXDSPINTACK_IRQDSPBTC_1_ACK_BIT    ((u32)0x00000020)
#define RIU_RWNXDSPINTACK_IRQDSPBTC_1_ACK_POS    5
#define RIU_RWNXDSPINTACK_IRQDSPBTC_0_ACK_BIT    ((u32)0x00000010)
#define RIU_RWNXDSPINTACK_IRQDSPBTC_0_ACK_POS    4
#define RIU_RWNXDSPINTACK_IRQDSPMPUTXENDACK_BIT    ((u32)0x00000008)
#define RIU_RWNXDSPINTACK_IRQDSPMPUTXENDACK_POS    3
#define RIU_RWNXDSPINTACK_IRQDSPAGCOFDMUNLOCKTIMERACK_BIT    ((u32)0x00000004)
#define RIU_RWNXDSPINTACK_IRQDSPAGCOFDMUNLOCKTIMERACK_POS    2
#define RIU_RWNXDSPINTACK_IRQDSPAGCOFDMLOCKACK_BIT    ((u32)0x00000002)
#define RIU_RWNXDSPINTACK_IRQDSPAGCOFDMLOCKACK_POS    1
#define RIU_RWNXDSPINTACK_IRQDSPAGCOFDMUNLOCKACK_BIT    ((u32)0x00000001)
#define RIU_RWNXDSPINTACK_IRQDSPAGCOFDMUNLOCKACK_POS    0

#define RIU_RWNXDSPINTACK_IRQDSPRCRXENDACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPRCTXENDACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPERRORMDMBACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPTXENDMDMBACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPRXENDMDMBACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPRXVECTORMDMBACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSP_FRC_RX_END_4_T_ACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSP_FRC_RX_SIG_END_ACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSP_FRC_RX_PHY_PROC_LIM_ACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPLBCAPTUREDONEACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPAGCDSSSLOCKACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPAGCDSSSUNLOCKACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSP_AGC_FSM_3_ACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPRADARTRIGGERACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPRADARDETACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSP_AGC_FSM_2_ACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSP_AGC_FSM_1_ACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSP_AGC_FSM_0_ACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPCCATIMEOUTACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPBTC_3_ACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPBTC_2_ACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPBTC_1_ACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPBTC_0_ACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPMPUTXENDACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPAGCOFDMUNLOCKTIMERACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPAGCOFDMLOCKACK_RST    0x0
#define RIU_RWNXDSPINTACK_IRQDSPAGCOFDMUNLOCKACK_RST    0x0

static inline void riu_rwnxdspintack_pack(struct cl_chip *chip, u8 irqdsprcrxendack, u8 irqdsprctxendack, u8 irqdsperrormdmback, u8 irqdsptxendmdmback, u8 irqdsprxendmdmback, u8 irqdsprxvectormdmback, u8 irqdsp_frc_rx_end4_t_ack, u8 irqdsp_frc_rx_sig_end_ack, u8 irqdsp_frc_rx_phy_proc_lim_ack, u8 irqdsplbcapturedoneack, u8 irqdspagcdssslockack, u8 irqdspagcdsssunlockack, u8 irqdsp_agc_fsm3_ack, u8 irqdspradartriggerack, u8 irqdspradardetack, u8 irqdsp_agc_fsm2_ack, u8 irqdsp_agc_fsm1_ack, u8 irqdsp_agc_fsm0_ack, u8 irqdspccatimeoutack, u8 irqdspbtc3_ack, u8 irqdspbtc2_ack, u8 irqdspbtc1_ack, u8 irqdspbtc0_ack, u8 irqdspmputxendack, u8 irqdspagcofdmunlocktimerack, u8 irqdspagcofdmlockack, u8 irqdspagcofdmunlockack)
{
	ASSERT_ERR_CHIP((((u32)irqdsprcrxendack << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsprctxendack << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsperrormdmback << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsptxendmdmback << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsprxendmdmback << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsprxvectormdmback << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_frc_rx_end4_t_ack << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_frc_rx_sig_end_ack << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_frc_rx_phy_proc_lim_ack << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsplbcapturedoneack << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspagcdssslockack << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspagcdsssunlockack << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_agc_fsm3_ack << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspradartriggerack << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspradardetack << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_agc_fsm2_ack << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_agc_fsm1_ack << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_agc_fsm0_ack << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspccatimeoutack << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspbtc3_ack << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspbtc2_ack << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspbtc1_ack << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspbtc0_ack << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspmputxendack << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmunlocktimerack << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmlockack << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmunlockack << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, ((u32)irqdsprcrxendack << 29) | ((u32)irqdsprctxendack << 28) | ((u32)irqdsperrormdmback << 27) | ((u32)irqdsptxendmdmback << 26) | ((u32)irqdsprxendmdmback << 25) | ((u32)irqdsprxvectormdmback << 24) | ((u32)irqdsp_frc_rx_end4_t_ack << 23) | ((u32)irqdsp_frc_rx_sig_end_ack << 22) | ((u32)irqdsp_frc_rx_phy_proc_lim_ack << 21) | ((u32)irqdsplbcapturedoneack << 20) | ((u32)irqdspagcdssslockack << 17) | ((u32)irqdspagcdsssunlockack << 16) | ((u32)irqdsp_agc_fsm3_ack << 14) | ((u32)irqdspradartriggerack << 13) | ((u32)irqdspradardetack << 12) | ((u32)irqdsp_agc_fsm2_ack << 11) | ((u32)irqdsp_agc_fsm1_ack << 10) | ((u32)irqdsp_agc_fsm0_ack << 9) | ((u32)irqdspccatimeoutack << 8) | ((u32)irqdspbtc3_ack << 7) | ((u32)irqdspbtc2_ack << 6) | ((u32)irqdspbtc1_ack << 5) | ((u32)irqdspbtc0_ack << 4) | ((u32)irqdspmputxendack << 3) | ((u32)irqdspagcofdmunlocktimerack << 2) | ((u32)irqdspagcofdmlockack << 1) | ((u32)irqdspagcofdmunlockack << 0));
}

static inline void riu_rwnxdspintack_irqdsprcrxendack_setf(struct cl_chip *chip, u8 irqdsprcrxendack)
{
	ASSERT_ERR_CHIP((((u32)irqdsprcrxendack << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x20000000)) | ((u32)irqdsprcrxendack << 29));
}

static inline void riu_rwnxdspintack_irqdsprcrxendack_clearf(struct cl_chip *chip, u8 irqdsprcrxendack)
{
	ASSERT_ERR_CHIP((((u32)irqdsprcrxendack << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x20000000)) | ((u32)irqdsprcrxendack << 29));
}

static inline void riu_rwnxdspintack_irqdsprctxendack_setf(struct cl_chip *chip, u8 irqdsprctxendack)
{
	ASSERT_ERR_CHIP((((u32)irqdsprctxendack << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x10000000)) | ((u32)irqdsprctxendack << 28));
}

static inline void riu_rwnxdspintack_irqdsprctxendack_clearf(struct cl_chip *chip, u8 irqdsprctxendack)
{
	ASSERT_ERR_CHIP((((u32)irqdsprctxendack << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x10000000)) | ((u32)irqdsprctxendack << 28));
}

static inline void riu_rwnxdspintack_irqdsperrormdmback_setf(struct cl_chip *chip, u8 irqdsperrormdmback)
{
	ASSERT_ERR_CHIP((((u32)irqdsperrormdmback << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x08000000)) | ((u32)irqdsperrormdmback << 27));
}

static inline void riu_rwnxdspintack_irqdsperrormdmback_clearf(struct cl_chip *chip, u8 irqdsperrormdmback)
{
	ASSERT_ERR_CHIP((((u32)irqdsperrormdmback << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x08000000)) | ((u32)irqdsperrormdmback << 27));
}

static inline void riu_rwnxdspintack_irqdsptxendmdmback_setf(struct cl_chip *chip, u8 irqdsptxendmdmback)
{
	ASSERT_ERR_CHIP((((u32)irqdsptxendmdmback << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x04000000)) | ((u32)irqdsptxendmdmback << 26));
}

static inline void riu_rwnxdspintack_irqdsptxendmdmback_clearf(struct cl_chip *chip, u8 irqdsptxendmdmback)
{
	ASSERT_ERR_CHIP((((u32)irqdsptxendmdmback << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x04000000)) | ((u32)irqdsptxendmdmback << 26));
}

static inline void riu_rwnxdspintack_irqdsprxendmdmback_setf(struct cl_chip *chip, u8 irqdsprxendmdmback)
{
	ASSERT_ERR_CHIP((((u32)irqdsprxendmdmback << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x02000000)) | ((u32)irqdsprxendmdmback << 25));
}

static inline void riu_rwnxdspintack_irqdsprxendmdmback_clearf(struct cl_chip *chip, u8 irqdsprxendmdmback)
{
	ASSERT_ERR_CHIP((((u32)irqdsprxendmdmback << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x02000000)) | ((u32)irqdsprxendmdmback << 25));
}

static inline void riu_rwnxdspintack_irqdsprxvectormdmback_setf(struct cl_chip *chip, u8 irqdsprxvectormdmback)
{
	ASSERT_ERR_CHIP((((u32)irqdsprxvectormdmback << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x01000000)) | ((u32)irqdsprxvectormdmback << 24));
}

static inline void riu_rwnxdspintack_irqdsprxvectormdmback_clearf(struct cl_chip *chip, u8 irqdsprxvectormdmback)
{
	ASSERT_ERR_CHIP((((u32)irqdsprxvectormdmback << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x01000000)) | ((u32)irqdsprxvectormdmback << 24));
}

static inline void riu_rwnxdspintack_irqdsp_frc_rx_end_4_t_ack_setf(struct cl_chip *chip, u8 irqdspfrcrxend4tack)
{
	ASSERT_ERR_CHIP((((u32)irqdspfrcrxend4tack << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00800000)) | ((u32)irqdspfrcrxend4tack << 23));
}

static inline void riu_rwnxdspintack_irqdsp_frc_rx_end_4_t_ack_clearf(struct cl_chip *chip, u8 irqdspfrcrxend4tack)
{
	ASSERT_ERR_CHIP((((u32)irqdspfrcrxend4tack << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00800000)) | ((u32)irqdspfrcrxend4tack << 23));
}

static inline void riu_rwnxdspintack_irqdsp_frc_rx_sig_end_ack_setf(struct cl_chip *chip, u8 irqdspfrcrxsigendack)
{
	ASSERT_ERR_CHIP((((u32)irqdspfrcrxsigendack << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00400000)) | ((u32)irqdspfrcrxsigendack << 22));
}

static inline void riu_rwnxdspintack_irqdsp_frc_rx_sig_end_ack_clearf(struct cl_chip *chip, u8 irqdspfrcrxsigendack)
{
	ASSERT_ERR_CHIP((((u32)irqdspfrcrxsigendack << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00400000)) | ((u32)irqdspfrcrxsigendack << 22));
}

static inline void riu_rwnxdspintack_irqdsp_frc_rx_phy_proc_lim_ack_setf(struct cl_chip *chip, u8 irqdspfrcrxphyproclimack)
{
	ASSERT_ERR_CHIP((((u32)irqdspfrcrxphyproclimack << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00200000)) | ((u32)irqdspfrcrxphyproclimack << 21));
}

static inline void riu_rwnxdspintack_irqdsp_frc_rx_phy_proc_lim_ack_clearf(struct cl_chip *chip, u8 irqdspfrcrxphyproclimack)
{
	ASSERT_ERR_CHIP((((u32)irqdspfrcrxphyproclimack << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00200000)) | ((u32)irqdspfrcrxphyproclimack << 21));
}

static inline void riu_rwnxdspintack_irqdsplbcapturedoneack_setf(struct cl_chip *chip, u8 irqdsplbcapturedoneack)
{
	ASSERT_ERR_CHIP((((u32)irqdsplbcapturedoneack << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00100000)) | ((u32)irqdsplbcapturedoneack << 20));
}

static inline void riu_rwnxdspintack_irqdsplbcapturedoneack_clearf(struct cl_chip *chip, u8 irqdsplbcapturedoneack)
{
	ASSERT_ERR_CHIP((((u32)irqdsplbcapturedoneack << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00100000)) | ((u32)irqdsplbcapturedoneack << 20));
}

static inline void riu_rwnxdspintack_irqdspagcdssslockack_setf(struct cl_chip *chip, u8 irqdspagcdssslockack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcdssslockack << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00020000)) | ((u32)irqdspagcdssslockack << 17));
}

static inline void riu_rwnxdspintack_irqdspagcdssslockack_clearf(struct cl_chip *chip, u8 irqdspagcdssslockack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcdssslockack << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00020000)) | ((u32)irqdspagcdssslockack << 17));
}

static inline void riu_rwnxdspintack_irqdspagcdsssunlockack_setf(struct cl_chip *chip, u8 irqdspagcdsssunlockack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcdsssunlockack << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00010000)) | ((u32)irqdspagcdsssunlockack << 16));
}

static inline void riu_rwnxdspintack_irqdspagcdsssunlockack_clearf(struct cl_chip *chip, u8 irqdspagcdsssunlockack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcdsssunlockack << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00010000)) | ((u32)irqdspagcdsssunlockack << 16));
}

static inline void riu_rwnxdspintack_irqdsp_agc_fsm_3_ack_setf(struct cl_chip *chip, u8 irqdspagcfsm3ack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcfsm3ack << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00004000)) | ((u32)irqdspagcfsm3ack << 14));
}

static inline void riu_rwnxdspintack_irqdsp_agc_fsm_3_ack_clearf(struct cl_chip *chip, u8 irqdspagcfsm3ack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcfsm3ack << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00004000)) | ((u32)irqdspagcfsm3ack << 14));
}

static inline void riu_rwnxdspintack_irqdspradartriggerack_setf(struct cl_chip *chip, u8 irqdspradartriggerack)
{
	ASSERT_ERR_CHIP((((u32)irqdspradartriggerack << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00002000)) | ((u32)irqdspradartriggerack << 13));
}

static inline void riu_rwnxdspintack_irqdspradartriggerack_clearf(struct cl_chip *chip, u8 irqdspradartriggerack)
{
	ASSERT_ERR_CHIP((((u32)irqdspradartriggerack << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00002000)) | ((u32)irqdspradartriggerack << 13));
}

static inline void riu_rwnxdspintack_irqdspradardetack_setf(struct cl_chip *chip, u8 irqdspradardetack)
{
	ASSERT_ERR_CHIP((((u32)irqdspradardetack << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00001000)) | ((u32)irqdspradardetack << 12));
}

static inline void riu_rwnxdspintack_irqdspradardetack_clearf(struct cl_chip *chip, u8 irqdspradardetack)
{
	ASSERT_ERR_CHIP((((u32)irqdspradardetack << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00001000)) | ((u32)irqdspradardetack << 12));
}

static inline void riu_rwnxdspintack_irqdsp_agc_fsm_2_ack_setf(struct cl_chip *chip, u8 irqdspagcfsm2ack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcfsm2ack << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000800)) | ((u32)irqdspagcfsm2ack << 11));
}

static inline void riu_rwnxdspintack_irqdsp_agc_fsm_2_ack_clearf(struct cl_chip *chip, u8 irqdspagcfsm2ack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcfsm2ack << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000800)) | ((u32)irqdspagcfsm2ack << 11));
}

static inline void riu_rwnxdspintack_irqdsp_agc_fsm_1_ack_setf(struct cl_chip *chip, u8 irqdspagcfsm1ack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcfsm1ack << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000400)) | ((u32)irqdspagcfsm1ack << 10));
}

static inline void riu_rwnxdspintack_irqdsp_agc_fsm_1_ack_clearf(struct cl_chip *chip, u8 irqdspagcfsm1ack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcfsm1ack << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000400)) | ((u32)irqdspagcfsm1ack << 10));
}

static inline void riu_rwnxdspintack_irqdsp_agc_fsm_0_ack_setf(struct cl_chip *chip, u8 irqdspagcfsm0ack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcfsm0ack << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000200)) | ((u32)irqdspagcfsm0ack << 9));
}

static inline void riu_rwnxdspintack_irqdsp_agc_fsm_0_ack_clearf(struct cl_chip *chip, u8 irqdspagcfsm0ack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcfsm0ack << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000200)) | ((u32)irqdspagcfsm0ack << 9));
}

static inline void riu_rwnxdspintack_irqdspccatimeoutack_setf(struct cl_chip *chip, u8 irqdspccatimeoutack)
{
	ASSERT_ERR_CHIP((((u32)irqdspccatimeoutack << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000100)) | ((u32)irqdspccatimeoutack << 8));
}

static inline void riu_rwnxdspintack_irqdspccatimeoutack_clearf(struct cl_chip *chip, u8 irqdspccatimeoutack)
{
	ASSERT_ERR_CHIP((((u32)irqdspccatimeoutack << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000100)) | ((u32)irqdspccatimeoutack << 8));
}

static inline void riu_rwnxdspintack_irqdspbtc_3_ack_setf(struct cl_chip *chip, u8 irqdspbtc3ack)
{
	ASSERT_ERR_CHIP((((u32)irqdspbtc3ack << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000080)) | ((u32)irqdspbtc3ack << 7));
}

static inline void riu_rwnxdspintack_irqdspbtc_3_ack_clearf(struct cl_chip *chip, u8 irqdspbtc3ack)
{
	ASSERT_ERR_CHIP((((u32)irqdspbtc3ack << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000080)) | ((u32)irqdspbtc3ack << 7));
}

static inline void riu_rwnxdspintack_irqdspbtc_2_ack_setf(struct cl_chip *chip, u8 irqdspbtc2ack)
{
	ASSERT_ERR_CHIP((((u32)irqdspbtc2ack << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000040)) | ((u32)irqdspbtc2ack << 6));
}

static inline void riu_rwnxdspintack_irqdspbtc_2_ack_clearf(struct cl_chip *chip, u8 irqdspbtc2ack)
{
	ASSERT_ERR_CHIP((((u32)irqdspbtc2ack << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000040)) | ((u32)irqdspbtc2ack << 6));
}

static inline void riu_rwnxdspintack_irqdspbtc_1_ack_setf(struct cl_chip *chip, u8 irqdspbtc1ack)
{
	ASSERT_ERR_CHIP((((u32)irqdspbtc1ack << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000020)) | ((u32)irqdspbtc1ack << 5));
}

static inline void riu_rwnxdspintack_irqdspbtc_1_ack_clearf(struct cl_chip *chip, u8 irqdspbtc1ack)
{
	ASSERT_ERR_CHIP((((u32)irqdspbtc1ack << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000020)) | ((u32)irqdspbtc1ack << 5));
}

static inline void riu_rwnxdspintack_irqdspbtc_0_ack_setf(struct cl_chip *chip, u8 irqdspbtc0ack)
{
	ASSERT_ERR_CHIP((((u32)irqdspbtc0ack << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000010)) | ((u32)irqdspbtc0ack << 4));
}

static inline void riu_rwnxdspintack_irqdspbtc_0_ack_clearf(struct cl_chip *chip, u8 irqdspbtc0ack)
{
	ASSERT_ERR_CHIP((((u32)irqdspbtc0ack << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000010)) | ((u32)irqdspbtc0ack << 4));
}

static inline void riu_rwnxdspintack_irqdspmputxendack_setf(struct cl_chip *chip, u8 irqdspmputxendack)
{
	ASSERT_ERR_CHIP((((u32)irqdspmputxendack << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000008)) | ((u32)irqdspmputxendack << 3));
}

static inline void riu_rwnxdspintack_irqdspmputxendack_clearf(struct cl_chip *chip, u8 irqdspmputxendack)
{
	ASSERT_ERR_CHIP((((u32)irqdspmputxendack << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000008)) | ((u32)irqdspmputxendack << 3));
}

static inline void riu_rwnxdspintack_irqdspagcofdmunlocktimerack_setf(struct cl_chip *chip, u8 irqdspagcofdmunlocktimerack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmunlocktimerack << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000004)) | ((u32)irqdspagcofdmunlocktimerack << 2));
}

static inline void riu_rwnxdspintack_irqdspagcofdmunlocktimerack_clearf(struct cl_chip *chip, u8 irqdspagcofdmunlocktimerack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmunlocktimerack << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000004)) | ((u32)irqdspagcofdmunlocktimerack << 2));
}

static inline void riu_rwnxdspintack_irqdspagcofdmlockack_setf(struct cl_chip *chip, u8 irqdspagcofdmlockack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmlockack << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000002)) | ((u32)irqdspagcofdmlockack << 1));
}

static inline void riu_rwnxdspintack_irqdspagcofdmlockack_clearf(struct cl_chip *chip, u8 irqdspagcofdmlockack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmlockack << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000002)) | ((u32)irqdspagcofdmlockack << 1));
}

static inline void riu_rwnxdspintack_irqdspagcofdmunlockack_setf(struct cl_chip *chip, u8 irqdspagcofdmunlockack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmunlockack << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000001)) | ((u32)irqdspagcofdmunlockack << 0));
}

static inline void riu_rwnxdspintack_irqdspagcofdmunlockack_clearf(struct cl_chip *chip, u8 irqdspagcofdmunlockack)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmunlockack << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTACK_ADDR) & ~((u32)0x00000001)) | ((u32)irqdspagcofdmunlockack << 0));
}

/**
 * @brief RWNXDSPINTGEN register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    IRQDSPRCRXENDGEN          0
 *    28    IRQDSPRCTXENDGEN          0
 *    27    IRQDSPERRORMDMBGEN        0
 *    26    IRQDSPTXENDMDMBGEN        0
 *    25    IRQDSPRXENDMDMBGEN        0
 *    24    IRQDSPRXVECTORMDMBGEN     0
 *    23    IRQDSP_FRC_RX_END4_T_GEN  0
 *    22    IRQDSP_FRC_RX_SIG_END_GEN 0
 *    21    IRQDSP_FRC_RX_PHY_PROC_LIM_GEN 0
 *    20    IRQDSPLBCAPTUREDONEGEN    0
 *    17    IRQDSPAGCDSSSLOCKGEN      0
 *    16    IRQDSPAGCDSSSUNLOCKGEN    0
 *    14    IRQDSP_AGC_FSM3_GEN       0
 *    13    IRQDSPRADARTRIGGERGEN     0
 *    12    IRQDSPRADARDETGEN         0
 *    11    IRQDSP_AGC_FSM2_GEN       0
 *    10    IRQDSP_AGC_FSM1_GEN       0
 *    09    IRQDSP_AGC_FSM0_GEN       0
 *    08    IRQDSPCCATIMEOUTGEN       0
 *    07    IRQDSPBTC3_GEN            0
 *    06    IRQDSPBTC2_GEN            0
 *    05    IRQDSPBTC1_GEN            0
 *    04    IRQDSPBTC0_GEN            0
 *    03    IRQDSPMPUTXENDGEN         0
 *    02    IRQDSPAGCOFDMUNLOCKTIMERGEN 0
 *    01    IRQDSPAGCOFDMLOCKGEN      0
 *    00    IRQDSPAGCOFDMUNLOCKGEN    0
 * </pre>
 */
#define RIU_RWNXDSPINTGEN_ADDR        (REG_RIU_BASE_ADDR + 0x00000410)
#define RIU_RWNXDSPINTGEN_OFFSET      0x00000410
#define RIU_RWNXDSPINTGEN_INDEX       0x00000104
#define RIU_RWNXDSPINTGEN_RESET       0x00000000

static inline void riu_rwnxdspintgen_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXDSPINTGEN_IRQDSPRCRXENDGEN_BIT    ((u32)0x20000000)
#define RIU_RWNXDSPINTGEN_IRQDSPRCRXENDGEN_POS    29
#define RIU_RWNXDSPINTGEN_IRQDSPRCTXENDGEN_BIT    ((u32)0x10000000)
#define RIU_RWNXDSPINTGEN_IRQDSPRCTXENDGEN_POS    28
#define RIU_RWNXDSPINTGEN_IRQDSPERRORMDMBGEN_BIT    ((u32)0x08000000)
#define RIU_RWNXDSPINTGEN_IRQDSPERRORMDMBGEN_POS    27
#define RIU_RWNXDSPINTGEN_IRQDSPTXENDMDMBGEN_BIT    ((u32)0x04000000)
#define RIU_RWNXDSPINTGEN_IRQDSPTXENDMDMBGEN_POS    26
#define RIU_RWNXDSPINTGEN_IRQDSPRXENDMDMBGEN_BIT    ((u32)0x02000000)
#define RIU_RWNXDSPINTGEN_IRQDSPRXENDMDMBGEN_POS    25
#define RIU_RWNXDSPINTGEN_IRQDSPRXVECTORMDMBGEN_BIT    ((u32)0x01000000)
#define RIU_RWNXDSPINTGEN_IRQDSPRXVECTORMDMBGEN_POS    24
#define RIU_RWNXDSPINTGEN_IRQDSP_FRC_RX_END_4_T_GEN_BIT    ((u32)0x00800000)
#define RIU_RWNXDSPINTGEN_IRQDSP_FRC_RX_END_4_T_GEN_POS    23
#define RIU_RWNXDSPINTGEN_IRQDSP_FRC_RX_SIG_END_GEN_BIT    ((u32)0x00400000)
#define RIU_RWNXDSPINTGEN_IRQDSP_FRC_RX_SIG_END_GEN_POS    22
#define RIU_RWNXDSPINTGEN_IRQDSP_FRC_RX_PHY_PROC_LIM_GEN_BIT    ((u32)0x00200000)
#define RIU_RWNXDSPINTGEN_IRQDSP_FRC_RX_PHY_PROC_LIM_GEN_POS    21
#define RIU_RWNXDSPINTGEN_IRQDSPLBCAPTUREDONEGEN_BIT    ((u32)0x00100000)
#define RIU_RWNXDSPINTGEN_IRQDSPLBCAPTUREDONEGEN_POS    20
#define RIU_RWNXDSPINTGEN_IRQDSPAGCDSSSLOCKGEN_BIT    ((u32)0x00020000)
#define RIU_RWNXDSPINTGEN_IRQDSPAGCDSSSLOCKGEN_POS    17
#define RIU_RWNXDSPINTGEN_IRQDSPAGCDSSSUNLOCKGEN_BIT    ((u32)0x00010000)
#define RIU_RWNXDSPINTGEN_IRQDSPAGCDSSSUNLOCKGEN_POS    16
#define RIU_RWNXDSPINTGEN_IRQDSP_AGC_FSM_3_GEN_BIT    ((u32)0x00004000)
#define RIU_RWNXDSPINTGEN_IRQDSP_AGC_FSM_3_GEN_POS    14
#define RIU_RWNXDSPINTGEN_IRQDSPRADARTRIGGERGEN_BIT    ((u32)0x00002000)
#define RIU_RWNXDSPINTGEN_IRQDSPRADARTRIGGERGEN_POS    13
#define RIU_RWNXDSPINTGEN_IRQDSPRADARDETGEN_BIT    ((u32)0x00001000)
#define RIU_RWNXDSPINTGEN_IRQDSPRADARDETGEN_POS    12
#define RIU_RWNXDSPINTGEN_IRQDSP_AGC_FSM_2_GEN_BIT    ((u32)0x00000800)
#define RIU_RWNXDSPINTGEN_IRQDSP_AGC_FSM_2_GEN_POS    11
#define RIU_RWNXDSPINTGEN_IRQDSP_AGC_FSM_1_GEN_BIT    ((u32)0x00000400)
#define RIU_RWNXDSPINTGEN_IRQDSP_AGC_FSM_1_GEN_POS    10
#define RIU_RWNXDSPINTGEN_IRQDSP_AGC_FSM_0_GEN_BIT    ((u32)0x00000200)
#define RIU_RWNXDSPINTGEN_IRQDSP_AGC_FSM_0_GEN_POS    9
#define RIU_RWNXDSPINTGEN_IRQDSPCCATIMEOUTGEN_BIT    ((u32)0x00000100)
#define RIU_RWNXDSPINTGEN_IRQDSPCCATIMEOUTGEN_POS    8
#define RIU_RWNXDSPINTGEN_IRQDSPBTC_3_GEN_BIT    ((u32)0x00000080)
#define RIU_RWNXDSPINTGEN_IRQDSPBTC_3_GEN_POS    7
#define RIU_RWNXDSPINTGEN_IRQDSPBTC_2_GEN_BIT    ((u32)0x00000040)
#define RIU_RWNXDSPINTGEN_IRQDSPBTC_2_GEN_POS    6
#define RIU_RWNXDSPINTGEN_IRQDSPBTC_1_GEN_BIT    ((u32)0x00000020)
#define RIU_RWNXDSPINTGEN_IRQDSPBTC_1_GEN_POS    5
#define RIU_RWNXDSPINTGEN_IRQDSPBTC_0_GEN_BIT    ((u32)0x00000010)
#define RIU_RWNXDSPINTGEN_IRQDSPBTC_0_GEN_POS    4
#define RIU_RWNXDSPINTGEN_IRQDSPMPUTXENDGEN_BIT    ((u32)0x00000008)
#define RIU_RWNXDSPINTGEN_IRQDSPMPUTXENDGEN_POS    3
#define RIU_RWNXDSPINTGEN_IRQDSPAGCOFDMUNLOCKTIMERGEN_BIT    ((u32)0x00000004)
#define RIU_RWNXDSPINTGEN_IRQDSPAGCOFDMUNLOCKTIMERGEN_POS    2
#define RIU_RWNXDSPINTGEN_IRQDSPAGCOFDMLOCKGEN_BIT    ((u32)0x00000002)
#define RIU_RWNXDSPINTGEN_IRQDSPAGCOFDMLOCKGEN_POS    1
#define RIU_RWNXDSPINTGEN_IRQDSPAGCOFDMUNLOCKGEN_BIT    ((u32)0x00000001)
#define RIU_RWNXDSPINTGEN_IRQDSPAGCOFDMUNLOCKGEN_POS    0

#define RIU_RWNXDSPINTGEN_IRQDSPRCRXENDGEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPRCTXENDGEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPERRORMDMBGEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPTXENDMDMBGEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPRXENDMDMBGEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPRXVECTORMDMBGEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSP_FRC_RX_END_4_T_GEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSP_FRC_RX_SIG_END_GEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSP_FRC_RX_PHY_PROC_LIM_GEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPLBCAPTUREDONEGEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPAGCDSSSLOCKGEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPAGCDSSSUNLOCKGEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSP_AGC_FSM_3_GEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPRADARTRIGGERGEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPRADARDETGEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSP_AGC_FSM_2_GEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSP_AGC_FSM_1_GEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSP_AGC_FSM_0_GEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPCCATIMEOUTGEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPBTC_3_GEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPBTC_2_GEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPBTC_1_GEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPBTC_0_GEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPMPUTXENDGEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPAGCOFDMUNLOCKTIMERGEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPAGCOFDMLOCKGEN_RST    0x0
#define RIU_RWNXDSPINTGEN_IRQDSPAGCOFDMUNLOCKGEN_RST    0x0

static inline void riu_rwnxdspintgen_pack(struct cl_chip *chip, u8 irqdsprcrxendgen, u8 irqdsprctxendgen, u8 irqdsperrormdmbgen, u8 irqdsptxendmdmbgen, u8 irqdsprxendmdmbgen, u8 irqdsprxvectormdmbgen, u8 irqdsp_frc_rx_end4_t_gen, u8 irqdsp_frc_rx_sig_end_gen, u8 irqdsp_frc_rx_phy_proc_lim_gen, u8 irqdsplbcapturedonegen, u8 irqdspagcdssslockgen, u8 irqdspagcdsssunlockgen, u8 irqdsp_agc_fsm3_gen, u8 irqdspradartriggergen, u8 irqdspradardetgen, u8 irqdsp_agc_fsm2_gen, u8 irqdsp_agc_fsm1_gen, u8 irqdsp_agc_fsm0_gen, u8 irqdspccatimeoutgen, u8 irqdspbtc3_gen, u8 irqdspbtc2_gen, u8 irqdspbtc1_gen, u8 irqdspbtc0_gen, u8 irqdspmputxendgen, u8 irqdspagcofdmunlocktimergen, u8 irqdspagcofdmlockgen, u8 irqdspagcofdmunlockgen)
{
	ASSERT_ERR_CHIP((((u32)irqdsprcrxendgen << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsprctxendgen << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsperrormdmbgen << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsptxendmdmbgen << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsprxendmdmbgen << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsprxvectormdmbgen << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_frc_rx_end4_t_gen << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_frc_rx_sig_end_gen << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_frc_rx_phy_proc_lim_gen << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsplbcapturedonegen << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspagcdssslockgen << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspagcdsssunlockgen << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_agc_fsm3_gen << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspradartriggergen << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspradardetgen << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_agc_fsm2_gen << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_agc_fsm1_gen << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdsp_agc_fsm0_gen << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspccatimeoutgen << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspbtc3_gen << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspbtc2_gen << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspbtc1_gen << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspbtc0_gen << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspmputxendgen << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmunlocktimergen << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmlockgen << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmunlockgen << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, ((u32)irqdsprcrxendgen << 29) | ((u32)irqdsprctxendgen << 28) | ((u32)irqdsperrormdmbgen << 27) | ((u32)irqdsptxendmdmbgen << 26) | ((u32)irqdsprxendmdmbgen << 25) | ((u32)irqdsprxvectormdmbgen << 24) | ((u32)irqdsp_frc_rx_end4_t_gen << 23) | ((u32)irqdsp_frc_rx_sig_end_gen << 22) | ((u32)irqdsp_frc_rx_phy_proc_lim_gen << 21) | ((u32)irqdsplbcapturedonegen << 20) | ((u32)irqdspagcdssslockgen << 17) | ((u32)irqdspagcdsssunlockgen << 16) | ((u32)irqdsp_agc_fsm3_gen << 14) | ((u32)irqdspradartriggergen << 13) | ((u32)irqdspradardetgen << 12) | ((u32)irqdsp_agc_fsm2_gen << 11) | ((u32)irqdsp_agc_fsm1_gen << 10) | ((u32)irqdsp_agc_fsm0_gen << 9) | ((u32)irqdspccatimeoutgen << 8) | ((u32)irqdspbtc3_gen << 7) | ((u32)irqdspbtc2_gen << 6) | ((u32)irqdspbtc1_gen << 5) | ((u32)irqdspbtc0_gen << 4) | ((u32)irqdspmputxendgen << 3) | ((u32)irqdspagcofdmunlocktimergen << 2) | ((u32)irqdspagcofdmlockgen << 1) | ((u32)irqdspagcofdmunlockgen << 0));
}

static inline void riu_rwnxdspintgen_irqdsprcrxendgen_setf(struct cl_chip *chip, u8 irqdsprcrxendgen)
{
	ASSERT_ERR_CHIP((((u32)irqdsprcrxendgen << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x20000000)) | ((u32)irqdsprcrxendgen << 29));
}

static inline void riu_rwnxdspintgen_irqdsprctxendgen_setf(struct cl_chip *chip, u8 irqdsprctxendgen)
{
	ASSERT_ERR_CHIP((((u32)irqdsprctxendgen << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x10000000)) | ((u32)irqdsprctxendgen << 28));
}

static inline void riu_rwnxdspintgen_irqdsperrormdmbgen_setf(struct cl_chip *chip, u8 irqdsperrormdmbgen)
{
	ASSERT_ERR_CHIP((((u32)irqdsperrormdmbgen << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x08000000)) | ((u32)irqdsperrormdmbgen << 27));
}

static inline void riu_rwnxdspintgen_irqdsptxendmdmbgen_setf(struct cl_chip *chip, u8 irqdsptxendmdmbgen)
{
	ASSERT_ERR_CHIP((((u32)irqdsptxendmdmbgen << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x04000000)) | ((u32)irqdsptxendmdmbgen << 26));
}

static inline void riu_rwnxdspintgen_irqdsprxendmdmbgen_setf(struct cl_chip *chip, u8 irqdsprxendmdmbgen)
{
	ASSERT_ERR_CHIP((((u32)irqdsprxendmdmbgen << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x02000000)) | ((u32)irqdsprxendmdmbgen << 25));
}

static inline void riu_rwnxdspintgen_irqdsprxvectormdmbgen_setf(struct cl_chip *chip, u8 irqdsprxvectormdmbgen)
{
	ASSERT_ERR_CHIP((((u32)irqdsprxvectormdmbgen << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x01000000)) | ((u32)irqdsprxvectormdmbgen << 24));
}

static inline void riu_rwnxdspintgen_irqdsp_frc_rx_end_4_t_gen_setf(struct cl_chip *chip, u8 irqdspfrcrxend4tgen)
{
	ASSERT_ERR_CHIP((((u32)irqdspfrcrxend4tgen << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00800000)) | ((u32)irqdspfrcrxend4tgen << 23));
}

static inline void riu_rwnxdspintgen_irqdsp_frc_rx_sig_end_gen_setf(struct cl_chip *chip, u8 irqdspfrcrxsigendgen)
{
	ASSERT_ERR_CHIP((((u32)irqdspfrcrxsigendgen << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00400000)) | ((u32)irqdspfrcrxsigendgen << 22));
}

static inline void riu_rwnxdspintgen_irqdsp_frc_rx_phy_proc_lim_gen_setf(struct cl_chip *chip, u8 irqdspfrcrxphyproclimgen)
{
	ASSERT_ERR_CHIP((((u32)irqdspfrcrxphyproclimgen << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00200000)) | ((u32)irqdspfrcrxphyproclimgen << 21));
}

static inline void riu_rwnxdspintgen_irqdsplbcapturedonegen_setf(struct cl_chip *chip, u8 irqdsplbcapturedonegen)
{
	ASSERT_ERR_CHIP((((u32)irqdsplbcapturedonegen << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00100000)) | ((u32)irqdsplbcapturedonegen << 20));
}

static inline void riu_rwnxdspintgen_irqdspagcdssslockgen_setf(struct cl_chip *chip, u8 irqdspagcdssslockgen)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcdssslockgen << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00020000)) | ((u32)irqdspagcdssslockgen << 17));
}

static inline void riu_rwnxdspintgen_irqdspagcdsssunlockgen_setf(struct cl_chip *chip, u8 irqdspagcdsssunlockgen)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcdsssunlockgen << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00010000)) | ((u32)irqdspagcdsssunlockgen << 16));
}

static inline void riu_rwnxdspintgen_irqdsp_agc_fsm_3_gen_setf(struct cl_chip *chip, u8 irqdspagcfsm3gen)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcfsm3gen << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00004000)) | ((u32)irqdspagcfsm3gen << 14));
}

static inline void riu_rwnxdspintgen_irqdspradartriggergen_setf(struct cl_chip *chip, u8 irqdspradartriggergen)
{
	ASSERT_ERR_CHIP((((u32)irqdspradartriggergen << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00002000)) | ((u32)irqdspradartriggergen << 13));
}

static inline void riu_rwnxdspintgen_irqdspradardetgen_setf(struct cl_chip *chip, u8 irqdspradardetgen)
{
	ASSERT_ERR_CHIP((((u32)irqdspradardetgen << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00001000)) | ((u32)irqdspradardetgen << 12));
}

static inline void riu_rwnxdspintgen_irqdsp_agc_fsm_2_gen_setf(struct cl_chip *chip, u8 irqdspagcfsm2gen)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcfsm2gen << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00000800)) | ((u32)irqdspagcfsm2gen << 11));
}

static inline void riu_rwnxdspintgen_irqdsp_agc_fsm_1_gen_setf(struct cl_chip *chip, u8 irqdspagcfsm1gen)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcfsm1gen << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00000400)) | ((u32)irqdspagcfsm1gen << 10));
}

static inline void riu_rwnxdspintgen_irqdsp_agc_fsm_0_gen_setf(struct cl_chip *chip, u8 irqdspagcfsm0gen)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcfsm0gen << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00000200)) | ((u32)irqdspagcfsm0gen << 9));
}

static inline void riu_rwnxdspintgen_irqdspccatimeoutgen_setf(struct cl_chip *chip, u8 irqdspccatimeoutgen)
{
	ASSERT_ERR_CHIP((((u32)irqdspccatimeoutgen << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00000100)) | ((u32)irqdspccatimeoutgen << 8));
}

static inline void riu_rwnxdspintgen_irqdspbtc_3_gen_setf(struct cl_chip *chip, u8 irqdspbtc3gen)
{
	ASSERT_ERR_CHIP((((u32)irqdspbtc3gen << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00000080)) | ((u32)irqdspbtc3gen << 7));
}

static inline void riu_rwnxdspintgen_irqdspbtc_2_gen_setf(struct cl_chip *chip, u8 irqdspbtc2gen)
{
	ASSERT_ERR_CHIP((((u32)irqdspbtc2gen << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00000040)) | ((u32)irqdspbtc2gen << 6));
}

static inline void riu_rwnxdspintgen_irqdspbtc_1_gen_setf(struct cl_chip *chip, u8 irqdspbtc1gen)
{
	ASSERT_ERR_CHIP((((u32)irqdspbtc1gen << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00000020)) | ((u32)irqdspbtc1gen << 5));
}

static inline void riu_rwnxdspintgen_irqdspbtc_0_gen_setf(struct cl_chip *chip, u8 irqdspbtc0gen)
{
	ASSERT_ERR_CHIP((((u32)irqdspbtc0gen << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00000010)) | ((u32)irqdspbtc0gen << 4));
}

static inline void riu_rwnxdspintgen_irqdspmputxendgen_setf(struct cl_chip *chip, u8 irqdspmputxendgen)
{
	ASSERT_ERR_CHIP((((u32)irqdspmputxendgen << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00000008)) | ((u32)irqdspmputxendgen << 3));
}

static inline void riu_rwnxdspintgen_irqdspagcofdmunlocktimergen_setf(struct cl_chip *chip, u8 irqdspagcofdmunlocktimergen)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmunlocktimergen << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00000004)) | ((u32)irqdspagcofdmunlocktimergen << 2));
}

static inline void riu_rwnxdspintgen_irqdspagcofdmlockgen_setf(struct cl_chip *chip, u8 irqdspagcofdmlockgen)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmlockgen << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00000002)) | ((u32)irqdspagcofdmlockgen << 1));
}

static inline void riu_rwnxdspintgen_irqdspagcofdmunlockgen_setf(struct cl_chip *chip, u8 irqdspagcofdmunlockgen)
{
	ASSERT_ERR_CHIP((((u32)irqdspagcofdmunlockgen << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXDSPINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXDSPINTGEN_ADDR) & ~((u32)0x00000001)) | ((u32)irqdspagcofdmunlockgen << 0));
}

/**
 * @brief RWNXMACINTEN register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    IRQMACRCRXENDEN           0
 *    28    IRQMACRCTXENDEN           0
 *    27    IRQMACERRORMDMBEN         0
 *    26    IRQMACTXENDMDMBEN         0
 *    25    IRQMACRXENDMDMBEN         0
 *    24    IRQMACRXVECTORMDMBEN      0
 *    23    IRQMAC_FRC_RX_END4_T_EN   0
 *    22    IRQMAC_FRC_RX_SIG_END_EN  0
 *    21    IRQMAC_FRC_RX_PHY_PROC_LIM_EN 0
 *    20    IRQMACLBCAPTUREDONEEN     0
 *    17    IRQMACAGCDSSSLOCKEN       0
 *    16    IRQMACAGCDSSSUNLOCKEN     0
 *    14    IRQMAC_AGC_FSM3_EN        0
 *    13    IRQMACRADARTRIGGEREN      0
 *    12    IRQMACRADARDETEN          0
 *    11    IRQMAC_AGC_FSM2_EN        0
 *    10    IRQMAC_AGC_FSM1_EN        0
 *    09    IRQMAC_AGC_FSM0_EN        0
 *    08    IRQMACCCATIMEOUTEN        0
 *    07    IRQMACBTC3_EN             0
 *    06    IRQMACBTC2_EN             0
 *    05    IRQMACBTC1_EN             0
 *    04    IRQMACBTC0_EN             0
 *    03    IRQMACMPUTXENDEN          0
 *    02    IRQMACAGCOFDMUNLOCKTIMEREN 0
 *    01    IRQMACAGCOFDMLOCKEN       0
 *    00    IRQMACAGCOFDMUNLOCKEN     0
 * </pre>
 */
#define RIU_RWNXMACINTEN_ADDR        (REG_RIU_BASE_ADDR + 0x00000414)
#define RIU_RWNXMACINTEN_OFFSET      0x00000414
#define RIU_RWNXMACINTEN_INDEX       0x00000105
#define RIU_RWNXMACINTEN_RESET       0x00000000

static inline u32 riu_rwnxmacinten_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);
}

static inline void riu_rwnxmacinten_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXMACINTEN_IRQMACRCRXENDEN_BIT    ((u32)0x20000000)
#define RIU_RWNXMACINTEN_IRQMACRCRXENDEN_POS    29
#define RIU_RWNXMACINTEN_IRQMACRCTXENDEN_BIT    ((u32)0x10000000)
#define RIU_RWNXMACINTEN_IRQMACRCTXENDEN_POS    28
#define RIU_RWNXMACINTEN_IRQMACERRORMDMBEN_BIT    ((u32)0x08000000)
#define RIU_RWNXMACINTEN_IRQMACERRORMDMBEN_POS    27
#define RIU_RWNXMACINTEN_IRQMACTXENDMDMBEN_BIT    ((u32)0x04000000)
#define RIU_RWNXMACINTEN_IRQMACTXENDMDMBEN_POS    26
#define RIU_RWNXMACINTEN_IRQMACRXENDMDMBEN_BIT    ((u32)0x02000000)
#define RIU_RWNXMACINTEN_IRQMACRXENDMDMBEN_POS    25
#define RIU_RWNXMACINTEN_IRQMACRXVECTORMDMBEN_BIT    ((u32)0x01000000)
#define RIU_RWNXMACINTEN_IRQMACRXVECTORMDMBEN_POS    24
#define RIU_RWNXMACINTEN_IRQMAC_FRC_RX_END_4_T_EN_BIT    ((u32)0x00800000)
#define RIU_RWNXMACINTEN_IRQMAC_FRC_RX_END_4_T_EN_POS    23
#define RIU_RWNXMACINTEN_IRQMAC_FRC_RX_SIG_END_EN_BIT    ((u32)0x00400000)
#define RIU_RWNXMACINTEN_IRQMAC_FRC_RX_SIG_END_EN_POS    22
#define RIU_RWNXMACINTEN_IRQMAC_FRC_RX_PHY_PROC_LIM_EN_BIT    ((u32)0x00200000)
#define RIU_RWNXMACINTEN_IRQMAC_FRC_RX_PHY_PROC_LIM_EN_POS    21
#define RIU_RWNXMACINTEN_IRQMACLBCAPTUREDONEEN_BIT    ((u32)0x00100000)
#define RIU_RWNXMACINTEN_IRQMACLBCAPTUREDONEEN_POS    20
#define RIU_RWNXMACINTEN_IRQMACAGCDSSSLOCKEN_BIT    ((u32)0x00020000)
#define RIU_RWNXMACINTEN_IRQMACAGCDSSSLOCKEN_POS    17
#define RIU_RWNXMACINTEN_IRQMACAGCDSSSUNLOCKEN_BIT    ((u32)0x00010000)
#define RIU_RWNXMACINTEN_IRQMACAGCDSSSUNLOCKEN_POS    16
#define RIU_RWNXMACINTEN_IRQMAC_AGC_FSM_3_EN_BIT    ((u32)0x00004000)
#define RIU_RWNXMACINTEN_IRQMAC_AGC_FSM_3_EN_POS    14
#define RIU_RWNXMACINTEN_IRQMACRADARTRIGGEREN_BIT    ((u32)0x00002000)
#define RIU_RWNXMACINTEN_IRQMACRADARTRIGGEREN_POS    13
#define RIU_RWNXMACINTEN_IRQMACRADARDETEN_BIT    ((u32)0x00001000)
#define RIU_RWNXMACINTEN_IRQMACRADARDETEN_POS    12
#define RIU_RWNXMACINTEN_IRQMAC_AGC_FSM_2_EN_BIT    ((u32)0x00000800)
#define RIU_RWNXMACINTEN_IRQMAC_AGC_FSM_2_EN_POS    11
#define RIU_RWNXMACINTEN_IRQMAC_AGC_FSM_1_EN_BIT    ((u32)0x00000400)
#define RIU_RWNXMACINTEN_IRQMAC_AGC_FSM_1_EN_POS    10
#define RIU_RWNXMACINTEN_IRQMAC_AGC_FSM_0_EN_BIT    ((u32)0x00000200)
#define RIU_RWNXMACINTEN_IRQMAC_AGC_FSM_0_EN_POS    9
#define RIU_RWNXMACINTEN_IRQMACCCATIMEOUTEN_BIT    ((u32)0x00000100)
#define RIU_RWNXMACINTEN_IRQMACCCATIMEOUTEN_POS    8
#define RIU_RWNXMACINTEN_IRQMACBTC_3_EN_BIT    ((u32)0x00000080)
#define RIU_RWNXMACINTEN_IRQMACBTC_3_EN_POS    7
#define RIU_RWNXMACINTEN_IRQMACBTC_2_EN_BIT    ((u32)0x00000040)
#define RIU_RWNXMACINTEN_IRQMACBTC_2_EN_POS    6
#define RIU_RWNXMACINTEN_IRQMACBTC_1_EN_BIT    ((u32)0x00000020)
#define RIU_RWNXMACINTEN_IRQMACBTC_1_EN_POS    5
#define RIU_RWNXMACINTEN_IRQMACBTC_0_EN_BIT    ((u32)0x00000010)
#define RIU_RWNXMACINTEN_IRQMACBTC_0_EN_POS    4
#define RIU_RWNXMACINTEN_IRQMACMPUTXENDEN_BIT    ((u32)0x00000008)
#define RIU_RWNXMACINTEN_IRQMACMPUTXENDEN_POS    3
#define RIU_RWNXMACINTEN_IRQMACAGCOFDMUNLOCKTIMEREN_BIT    ((u32)0x00000004)
#define RIU_RWNXMACINTEN_IRQMACAGCOFDMUNLOCKTIMEREN_POS    2
#define RIU_RWNXMACINTEN_IRQMACAGCOFDMLOCKEN_BIT    ((u32)0x00000002)
#define RIU_RWNXMACINTEN_IRQMACAGCOFDMLOCKEN_POS    1
#define RIU_RWNXMACINTEN_IRQMACAGCOFDMUNLOCKEN_BIT    ((u32)0x00000001)
#define RIU_RWNXMACINTEN_IRQMACAGCOFDMUNLOCKEN_POS    0

#define RIU_RWNXMACINTEN_IRQMACRCRXENDEN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACRCTXENDEN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACERRORMDMBEN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACTXENDMDMBEN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACRXENDMDMBEN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACRXVECTORMDMBEN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMAC_FRC_RX_END_4_T_EN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMAC_FRC_RX_SIG_END_EN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMAC_FRC_RX_PHY_PROC_LIM_EN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACLBCAPTUREDONEEN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACAGCDSSSLOCKEN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACAGCDSSSUNLOCKEN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMAC_AGC_FSM_3_EN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACRADARTRIGGEREN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACRADARDETEN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMAC_AGC_FSM_2_EN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMAC_AGC_FSM_1_EN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMAC_AGC_FSM_0_EN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACCCATIMEOUTEN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACBTC_3_EN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACBTC_2_EN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACBTC_1_EN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACBTC_0_EN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACMPUTXENDEN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACAGCOFDMUNLOCKTIMEREN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACAGCOFDMLOCKEN_RST    0x0
#define RIU_RWNXMACINTEN_IRQMACAGCOFDMUNLOCKEN_RST    0x0

static inline void riu_rwnxmacinten_pack(struct cl_chip *chip, u8 irqmacrcrxenden, u8 irqmacrctxenden, u8 irqmacerrormdmben, u8 irqmactxendmdmben, u8 irqmacrxendmdmben, u8 irqmacrxvectormdmben, u8 irqmac_frc_rx_end4_t_en, u8 irqmac_frc_rx_sig_end_en, u8 irqmac_frc_rx_phy_proc_lim_en, u8 irqmaclbcapturedoneen, u8 irqmacagcdssslocken, u8 irqmacagcdsssunlocken, u8 irqmac_agc_fsm3_en, u8 irqmacradartriggeren, u8 irqmacradardeten, u8 irqmac_agc_fsm2_en, u8 irqmac_agc_fsm1_en, u8 irqmac_agc_fsm0_en, u8 irqmacccatimeouten, u8 irqmacbtc3_en, u8 irqmacbtc2_en, u8 irqmacbtc1_en, u8 irqmacbtc0_en, u8 irqmacmputxenden, u8 irqmacagcofdmunlocktimeren, u8 irqmacagcofdmlocken, u8 irqmacagcofdmunlocken)
{
	ASSERT_ERR_CHIP((((u32)irqmacrcrxenden << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacrctxenden << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacerrormdmben << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmactxendmdmben << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacrxendmdmben << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacrxvectormdmben << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_frc_rx_end4_t_en << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_frc_rx_sig_end_en << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_frc_rx_phy_proc_lim_en << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmaclbcapturedoneen << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacagcdssslocken << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacagcdsssunlocken << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_agc_fsm3_en << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacradartriggeren << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacradardeten << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_agc_fsm2_en << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_agc_fsm1_en << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_agc_fsm0_en << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacccatimeouten << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacbtc3_en << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacbtc2_en << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacbtc1_en << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacbtc0_en << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacmputxenden << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmunlocktimeren << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmlocken << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmunlocken << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, ((u32)irqmacrcrxenden << 29) | ((u32)irqmacrctxenden << 28) | ((u32)irqmacerrormdmben << 27) | ((u32)irqmactxendmdmben << 26) | ((u32)irqmacrxendmdmben << 25) | ((u32)irqmacrxvectormdmben << 24) | ((u32)irqmac_frc_rx_end4_t_en << 23) | ((u32)irqmac_frc_rx_sig_end_en << 22) | ((u32)irqmac_frc_rx_phy_proc_lim_en << 21) | ((u32)irqmaclbcapturedoneen << 20) | ((u32)irqmacagcdssslocken << 17) | ((u32)irqmacagcdsssunlocken << 16) | ((u32)irqmac_agc_fsm3_en << 14) | ((u32)irqmacradartriggeren << 13) | ((u32)irqmacradardeten << 12) | ((u32)irqmac_agc_fsm2_en << 11) | ((u32)irqmac_agc_fsm1_en << 10) | ((u32)irqmac_agc_fsm0_en << 9) | ((u32)irqmacccatimeouten << 8) | ((u32)irqmacbtc3_en << 7) | ((u32)irqmacbtc2_en << 6) | ((u32)irqmacbtc1_en << 5) | ((u32)irqmacbtc0_en << 4) | ((u32)irqmacmputxenden << 3) | ((u32)irqmacagcofdmunlocktimeren << 2) | ((u32)irqmacagcofdmlocken << 1) | ((u32)irqmacagcofdmunlocken << 0));
}

static inline void riu_rwnxmacinten_unpack(struct cl_chip *chip, u8 *irqmacrcrxenden, u8 *irqmacrctxenden, u8 *irqmacerrormdmben, u8 *irqmactxendmdmben, u8 *irqmacrxendmdmben, u8 *irqmacrxvectormdmben, u8 *irqmac_frc_rx_end4_t_en, u8 *irqmac_frc_rx_sig_end_en, u8 *irqmac_frc_rx_phy_proc_lim_en, u8 *irqmaclbcapturedoneen, u8 *irqmacagcdssslocken, u8 *irqmacagcdsssunlocken, u8 *irqmac_agc_fsm3_en, u8 *irqmacradartriggeren, u8 *irqmacradardeten, u8 *irqmac_agc_fsm2_en, u8 *irqmac_agc_fsm1_en, u8 *irqmac_agc_fsm0_en, u8 *irqmacccatimeouten, u8 *irqmacbtc3_en, u8 *irqmacbtc2_en, u8 *irqmacbtc1_en, u8 *irqmacbtc0_en, u8 *irqmacmputxenden, u8 *irqmacagcofdmunlocktimeren, u8 *irqmacagcofdmlocken, u8 *irqmacagcofdmunlocken)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	*irqmacrcrxenden = (local_val & ((u32)0x20000000)) >> 29;
	*irqmacrctxenden = (local_val & ((u32)0x10000000)) >> 28;
	*irqmacerrormdmben = (local_val & ((u32)0x08000000)) >> 27;
	*irqmactxendmdmben = (local_val & ((u32)0x04000000)) >> 26;
	*irqmacrxendmdmben = (local_val & ((u32)0x02000000)) >> 25;
	*irqmacrxvectormdmben = (local_val & ((u32)0x01000000)) >> 24;
	*irqmac_frc_rx_end4_t_en = (local_val & ((u32)0x00800000)) >> 23;
	*irqmac_frc_rx_sig_end_en = (local_val & ((u32)0x00400000)) >> 22;
	*irqmac_frc_rx_phy_proc_lim_en = (local_val & ((u32)0x00200000)) >> 21;
	*irqmaclbcapturedoneen = (local_val & ((u32)0x00100000)) >> 20;
	*irqmacagcdssslocken = (local_val & ((u32)0x00020000)) >> 17;
	*irqmacagcdsssunlocken = (local_val & ((u32)0x00010000)) >> 16;
	*irqmac_agc_fsm3_en = (local_val & ((u32)0x00004000)) >> 14;
	*irqmacradartriggeren = (local_val & ((u32)0x00002000)) >> 13;
	*irqmacradardeten = (local_val & ((u32)0x00001000)) >> 12;
	*irqmac_agc_fsm2_en = (local_val & ((u32)0x00000800)) >> 11;
	*irqmac_agc_fsm1_en = (local_val & ((u32)0x00000400)) >> 10;
	*irqmac_agc_fsm0_en = (local_val & ((u32)0x00000200)) >> 9;
	*irqmacccatimeouten = (local_val & ((u32)0x00000100)) >> 8;
	*irqmacbtc3_en = (local_val & ((u32)0x00000080)) >> 7;
	*irqmacbtc2_en = (local_val & ((u32)0x00000040)) >> 6;
	*irqmacbtc1_en = (local_val & ((u32)0x00000020)) >> 5;
	*irqmacbtc0_en = (local_val & ((u32)0x00000010)) >> 4;
	*irqmacmputxenden = (local_val & ((u32)0x00000008)) >> 3;
	*irqmacagcofdmunlocktimeren = (local_val & ((u32)0x00000004)) >> 2;
	*irqmacagcofdmlocken = (local_val & ((u32)0x00000002)) >> 1;
	*irqmacagcofdmunlocken = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_rwnxmacinten_irqmacrcrxenden_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void riu_rwnxmacinten_irqmacrcrxenden_setf(struct cl_chip *chip, u8 irqmacrcrxenden)
{
	ASSERT_ERR_CHIP((((u32)irqmacrcrxenden << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x20000000)) | ((u32)irqmacrcrxenden << 29));
}

static inline u8 riu_rwnxmacinten_irqmacrctxenden_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void riu_rwnxmacinten_irqmacrctxenden_setf(struct cl_chip *chip, u8 irqmacrctxenden)
{
	ASSERT_ERR_CHIP((((u32)irqmacrctxenden << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x10000000)) | ((u32)irqmacrctxenden << 28));
}

static inline u8 riu_rwnxmacinten_irqmacerrormdmben_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void riu_rwnxmacinten_irqmacerrormdmben_setf(struct cl_chip *chip, u8 irqmacerrormdmben)
{
	ASSERT_ERR_CHIP((((u32)irqmacerrormdmben << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x08000000)) | ((u32)irqmacerrormdmben << 27));
}

static inline u8 riu_rwnxmacinten_irqmactxendmdmben_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void riu_rwnxmacinten_irqmactxendmdmben_setf(struct cl_chip *chip, u8 irqmactxendmdmben)
{
	ASSERT_ERR_CHIP((((u32)irqmactxendmdmben << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x04000000)) | ((u32)irqmactxendmdmben << 26));
}

static inline u8 riu_rwnxmacinten_irqmacrxendmdmben_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void riu_rwnxmacinten_irqmacrxendmdmben_setf(struct cl_chip *chip, u8 irqmacrxendmdmben)
{
	ASSERT_ERR_CHIP((((u32)irqmacrxendmdmben << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x02000000)) | ((u32)irqmacrxendmdmben << 25));
}

static inline u8 riu_rwnxmacinten_irqmacrxvectormdmben_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void riu_rwnxmacinten_irqmacrxvectormdmben_setf(struct cl_chip *chip, u8 irqmacrxvectormdmben)
{
	ASSERT_ERR_CHIP((((u32)irqmacrxvectormdmben << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x01000000)) | ((u32)irqmacrxvectormdmben << 24));
}

static inline u8 riu_rwnxmacinten_irqmac_frc_rx_end_4_t_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void riu_rwnxmacinten_irqmac_frc_rx_end_4_t_en_setf(struct cl_chip *chip, u8 irqmacfrcrxend4ten)
{
	ASSERT_ERR_CHIP((((u32)irqmacfrcrxend4ten << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00800000)) | ((u32)irqmacfrcrxend4ten << 23));
}

static inline u8 riu_rwnxmacinten_irqmac_frc_rx_sig_end_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline void riu_rwnxmacinten_irqmac_frc_rx_sig_end_en_setf(struct cl_chip *chip, u8 irqmacfrcrxsigenden)
{
	ASSERT_ERR_CHIP((((u32)irqmacfrcrxsigenden << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00400000)) | ((u32)irqmacfrcrxsigenden << 22));
}

static inline u8 riu_rwnxmacinten_irqmac_frc_rx_phy_proc_lim_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline void riu_rwnxmacinten_irqmac_frc_rx_phy_proc_lim_en_setf(struct cl_chip *chip, u8 irqmacfrcrxphyproclimen)
{
	ASSERT_ERR_CHIP((((u32)irqmacfrcrxphyproclimen << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00200000)) | ((u32)irqmacfrcrxphyproclimen << 21));
}

static inline u8 riu_rwnxmacinten_irqmaclbcapturedoneen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void riu_rwnxmacinten_irqmaclbcapturedoneen_setf(struct cl_chip *chip, u8 irqmaclbcapturedoneen)
{
	ASSERT_ERR_CHIP((((u32)irqmaclbcapturedoneen << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00100000)) | ((u32)irqmaclbcapturedoneen << 20));
}

static inline u8 riu_rwnxmacinten_irqmacagcdssslocken_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void riu_rwnxmacinten_irqmacagcdssslocken_setf(struct cl_chip *chip, u8 irqmacagcdssslocken)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcdssslocken << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00020000)) | ((u32)irqmacagcdssslocken << 17));
}

static inline u8 riu_rwnxmacinten_irqmacagcdsssunlocken_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void riu_rwnxmacinten_irqmacagcdsssunlocken_setf(struct cl_chip *chip, u8 irqmacagcdsssunlocken)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcdsssunlocken << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00010000)) | ((u32)irqmacagcdsssunlocken << 16));
}

static inline u8 riu_rwnxmacinten_irqmac_agc_fsm_3_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void riu_rwnxmacinten_irqmac_agc_fsm_3_en_setf(struct cl_chip *chip, u8 irqmacagcfsm3en)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcfsm3en << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00004000)) | ((u32)irqmacagcfsm3en << 14));
}

static inline u8 riu_rwnxmacinten_irqmacradartriggeren_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_rwnxmacinten_irqmacradartriggeren_setf(struct cl_chip *chip, u8 irqmacradartriggeren)
{
	ASSERT_ERR_CHIP((((u32)irqmacradartriggeren << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00002000)) | ((u32)irqmacradartriggeren << 13));
}

static inline u8 riu_rwnxmacinten_irqmacradardeten_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void riu_rwnxmacinten_irqmacradardeten_setf(struct cl_chip *chip, u8 irqmacradardeten)
{
	ASSERT_ERR_CHIP((((u32)irqmacradardeten << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00001000)) | ((u32)irqmacradardeten << 12));
}

static inline u8 riu_rwnxmacinten_irqmac_agc_fsm_2_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void riu_rwnxmacinten_irqmac_agc_fsm_2_en_setf(struct cl_chip *chip, u8 irqmacagcfsm2en)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcfsm2en << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00000800)) | ((u32)irqmacagcfsm2en << 11));
}

static inline u8 riu_rwnxmacinten_irqmac_agc_fsm_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void riu_rwnxmacinten_irqmac_agc_fsm_1_en_setf(struct cl_chip *chip, u8 irqmacagcfsm1en)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcfsm1en << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00000400)) | ((u32)irqmacagcfsm1en << 10));
}

static inline u8 riu_rwnxmacinten_irqmac_agc_fsm_0_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void riu_rwnxmacinten_irqmac_agc_fsm_0_en_setf(struct cl_chip *chip, u8 irqmacagcfsm0en)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcfsm0en << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00000200)) | ((u32)irqmacagcfsm0en << 9));
}

static inline u8 riu_rwnxmacinten_irqmacccatimeouten_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void riu_rwnxmacinten_irqmacccatimeouten_setf(struct cl_chip *chip, u8 irqmacccatimeouten)
{
	ASSERT_ERR_CHIP((((u32)irqmacccatimeouten << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00000100)) | ((u32)irqmacccatimeouten << 8));
}

static inline u8 riu_rwnxmacinten_irqmacbtc_3_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void riu_rwnxmacinten_irqmacbtc_3_en_setf(struct cl_chip *chip, u8 irqmacbtc3en)
{
	ASSERT_ERR_CHIP((((u32)irqmacbtc3en << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00000080)) | ((u32)irqmacbtc3en << 7));
}

static inline u8 riu_rwnxmacinten_irqmacbtc_2_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void riu_rwnxmacinten_irqmacbtc_2_en_setf(struct cl_chip *chip, u8 irqmacbtc2en)
{
	ASSERT_ERR_CHIP((((u32)irqmacbtc2en << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00000040)) | ((u32)irqmacbtc2en << 6));
}

static inline u8 riu_rwnxmacinten_irqmacbtc_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void riu_rwnxmacinten_irqmacbtc_1_en_setf(struct cl_chip *chip, u8 irqmacbtc1en)
{
	ASSERT_ERR_CHIP((((u32)irqmacbtc1en << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00000020)) | ((u32)irqmacbtc1en << 5));
}

static inline u8 riu_rwnxmacinten_irqmacbtc_0_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void riu_rwnxmacinten_irqmacbtc_0_en_setf(struct cl_chip *chip, u8 irqmacbtc0en)
{
	ASSERT_ERR_CHIP((((u32)irqmacbtc0en << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00000010)) | ((u32)irqmacbtc0en << 4));
}

static inline u8 riu_rwnxmacinten_irqmacmputxenden_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void riu_rwnxmacinten_irqmacmputxenden_setf(struct cl_chip *chip, u8 irqmacmputxenden)
{
	ASSERT_ERR_CHIP((((u32)irqmacmputxenden << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00000008)) | ((u32)irqmacmputxenden << 3));
}

static inline u8 riu_rwnxmacinten_irqmacagcofdmunlocktimeren_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void riu_rwnxmacinten_irqmacagcofdmunlocktimeren_setf(struct cl_chip *chip, u8 irqmacagcofdmunlocktimeren)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmunlocktimeren << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00000004)) | ((u32)irqmacagcofdmunlocktimeren << 2));
}

static inline u8 riu_rwnxmacinten_irqmacagcofdmlocken_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void riu_rwnxmacinten_irqmacagcofdmlocken_setf(struct cl_chip *chip, u8 irqmacagcofdmlocken)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmlocken << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00000002)) | ((u32)irqmacagcofdmlocken << 1));
}

static inline u8 riu_rwnxmacinten_irqmacagcofdmunlocken_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_rwnxmacinten_irqmacagcofdmunlocken_setf(struct cl_chip *chip, u8 irqmacagcofdmunlocken)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmunlocken << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTEN_ADDR) & ~((u32)0x00000001)) | ((u32)irqmacagcofdmunlocken << 0));
}

/**
 * @brief RWNXMACINTSTATRAW register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    IRQMACRCRXENDRAW          0
 *    28    IRQMACRCTXENDRAW          0
 *    27    IRQMACERRORMDMBRAW        0
 *    26    IRQMACTXENDMDMBRAW        0
 *    25    IRQMACRXENDMDMBRAW        0
 *    24    IRQMACRXVECTORMDMBRAW     0
 *    23    IRQMAC_FRC_RX_END4_T_RAW  0
 *    22    IRQMAC_FRC_RX_SIG_END_RAW 0
 *    21    IRQMAC_FRC_RX_PHY_PROC_LIM_RAW 0
 *    20    IRQMACLBCAPTUREDONERAW    0
 *    17    IRQMACAGCDSSSLOCKRAW      0
 *    16    IRQMACAGCDSSSUNLOCKRAW    0
 *    14    IRQMAC_AGC_FSM3_RAW       0
 *    13    IRQMACRADARTRIGGERRAW     0
 *    12    IRQMACRADARDETRAW         0
 *    11    IRQMAC_AGC_FSM2_RAW       0
 *    10    IRQMAC_AGC_FSM1_RAW       0
 *    09    IRQMAC_AGC_FSM0_RAW       0
 *    08    IRQMACCCATIMEOUTRAW       0
 *    07    IRQMACBTC3_RAW            0
 *    06    IRQMACBTC2_RAW            0
 *    05    IRQMACBTC1_RAW            0
 *    04    IRQMACBTC0_RAW            0
 *    03    IRQMACMPUTXENDRAW         0
 *    02    IRQMACAGCOFDMUNLOCKTIMERRAW 0
 *    01    IRQMACAGCOFDMLOCKRAW      0
 *    00    IRQMACAGCOFDMUNLOCKRAW    0
 * </pre>
 */
#define RIU_RWNXMACINTSTATRAW_ADDR        (REG_RIU_BASE_ADDR + 0x00000418)
#define RIU_RWNXMACINTSTATRAW_OFFSET      0x00000418
#define RIU_RWNXMACINTSTATRAW_INDEX       0x00000106
#define RIU_RWNXMACINTSTATRAW_RESET       0x00000000

static inline u32 riu_rwnxmacintstatraw_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);
}

/* Field definitions */
#define RIU_RWNXMACINTSTATRAW_IRQMACRCRXENDRAW_BIT    ((u32)0x20000000)
#define RIU_RWNXMACINTSTATRAW_IRQMACRCRXENDRAW_POS    29
#define RIU_RWNXMACINTSTATRAW_IRQMACRCTXENDRAW_BIT    ((u32)0x10000000)
#define RIU_RWNXMACINTSTATRAW_IRQMACRCTXENDRAW_POS    28
#define RIU_RWNXMACINTSTATRAW_IRQMACERRORMDMBRAW_BIT    ((u32)0x08000000)
#define RIU_RWNXMACINTSTATRAW_IRQMACERRORMDMBRAW_POS    27
#define RIU_RWNXMACINTSTATRAW_IRQMACTXENDMDMBRAW_BIT    ((u32)0x04000000)
#define RIU_RWNXMACINTSTATRAW_IRQMACTXENDMDMBRAW_POS    26
#define RIU_RWNXMACINTSTATRAW_IRQMACRXENDMDMBRAW_BIT    ((u32)0x02000000)
#define RIU_RWNXMACINTSTATRAW_IRQMACRXENDMDMBRAW_POS    25
#define RIU_RWNXMACINTSTATRAW_IRQMACRXVECTORMDMBRAW_BIT    ((u32)0x01000000)
#define RIU_RWNXMACINTSTATRAW_IRQMACRXVECTORMDMBRAW_POS    24
#define RIU_RWNXMACINTSTATRAW_IRQMAC_FRC_RX_END_4_T_RAW_BIT    ((u32)0x00800000)
#define RIU_RWNXMACINTSTATRAW_IRQMAC_FRC_RX_END_4_T_RAW_POS    23
#define RIU_RWNXMACINTSTATRAW_IRQMAC_FRC_RX_SIG_END_RAW_BIT    ((u32)0x00400000)
#define RIU_RWNXMACINTSTATRAW_IRQMAC_FRC_RX_SIG_END_RAW_POS    22
#define RIU_RWNXMACINTSTATRAW_IRQMAC_FRC_RX_PHY_PROC_LIM_RAW_BIT    ((u32)0x00200000)
#define RIU_RWNXMACINTSTATRAW_IRQMAC_FRC_RX_PHY_PROC_LIM_RAW_POS    21
#define RIU_RWNXMACINTSTATRAW_IRQMACLBCAPTUREDONERAW_BIT    ((u32)0x00100000)
#define RIU_RWNXMACINTSTATRAW_IRQMACLBCAPTUREDONERAW_POS    20
#define RIU_RWNXMACINTSTATRAW_IRQMACAGCDSSSLOCKRAW_BIT    ((u32)0x00020000)
#define RIU_RWNXMACINTSTATRAW_IRQMACAGCDSSSLOCKRAW_POS    17
#define RIU_RWNXMACINTSTATRAW_IRQMACAGCDSSSUNLOCKRAW_BIT    ((u32)0x00010000)
#define RIU_RWNXMACINTSTATRAW_IRQMACAGCDSSSUNLOCKRAW_POS    16
#define RIU_RWNXMACINTSTATRAW_IRQMAC_AGC_FSM_3_RAW_BIT    ((u32)0x00004000)
#define RIU_RWNXMACINTSTATRAW_IRQMAC_AGC_FSM_3_RAW_POS    14
#define RIU_RWNXMACINTSTATRAW_IRQMACRADARTRIGGERRAW_BIT    ((u32)0x00002000)
#define RIU_RWNXMACINTSTATRAW_IRQMACRADARTRIGGERRAW_POS    13
#define RIU_RWNXMACINTSTATRAW_IRQMACRADARDETRAW_BIT    ((u32)0x00001000)
#define RIU_RWNXMACINTSTATRAW_IRQMACRADARDETRAW_POS    12
#define RIU_RWNXMACINTSTATRAW_IRQMAC_AGC_FSM_2_RAW_BIT    ((u32)0x00000800)
#define RIU_RWNXMACINTSTATRAW_IRQMAC_AGC_FSM_2_RAW_POS    11
#define RIU_RWNXMACINTSTATRAW_IRQMAC_AGC_FSM_1_RAW_BIT    ((u32)0x00000400)
#define RIU_RWNXMACINTSTATRAW_IRQMAC_AGC_FSM_1_RAW_POS    10
#define RIU_RWNXMACINTSTATRAW_IRQMAC_AGC_FSM_0_RAW_BIT    ((u32)0x00000200)
#define RIU_RWNXMACINTSTATRAW_IRQMAC_AGC_FSM_0_RAW_POS    9
#define RIU_RWNXMACINTSTATRAW_IRQMACCCATIMEOUTRAW_BIT    ((u32)0x00000100)
#define RIU_RWNXMACINTSTATRAW_IRQMACCCATIMEOUTRAW_POS    8
#define RIU_RWNXMACINTSTATRAW_IRQMACBTC_3_RAW_BIT    ((u32)0x00000080)
#define RIU_RWNXMACINTSTATRAW_IRQMACBTC_3_RAW_POS    7
#define RIU_RWNXMACINTSTATRAW_IRQMACBTC_2_RAW_BIT    ((u32)0x00000040)
#define RIU_RWNXMACINTSTATRAW_IRQMACBTC_2_RAW_POS    6
#define RIU_RWNXMACINTSTATRAW_IRQMACBTC_1_RAW_BIT    ((u32)0x00000020)
#define RIU_RWNXMACINTSTATRAW_IRQMACBTC_1_RAW_POS    5
#define RIU_RWNXMACINTSTATRAW_IRQMACBTC_0_RAW_BIT    ((u32)0x00000010)
#define RIU_RWNXMACINTSTATRAW_IRQMACBTC_0_RAW_POS    4
#define RIU_RWNXMACINTSTATRAW_IRQMACMPUTXENDRAW_BIT    ((u32)0x00000008)
#define RIU_RWNXMACINTSTATRAW_IRQMACMPUTXENDRAW_POS    3
#define RIU_RWNXMACINTSTATRAW_IRQMACAGCOFDMUNLOCKTIMERRAW_BIT    ((u32)0x00000004)
#define RIU_RWNXMACINTSTATRAW_IRQMACAGCOFDMUNLOCKTIMERRAW_POS    2
#define RIU_RWNXMACINTSTATRAW_IRQMACAGCOFDMLOCKRAW_BIT    ((u32)0x00000002)
#define RIU_RWNXMACINTSTATRAW_IRQMACAGCOFDMLOCKRAW_POS    1
#define RIU_RWNXMACINTSTATRAW_IRQMACAGCOFDMUNLOCKRAW_BIT    ((u32)0x00000001)
#define RIU_RWNXMACINTSTATRAW_IRQMACAGCOFDMUNLOCKRAW_POS    0

#define RIU_RWNXMACINTSTATRAW_IRQMACRCRXENDRAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACRCTXENDRAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACERRORMDMBRAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACTXENDMDMBRAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACRXENDMDMBRAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACRXVECTORMDMBRAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMAC_FRC_RX_END_4_T_RAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMAC_FRC_RX_SIG_END_RAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMAC_FRC_RX_PHY_PROC_LIM_RAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACLBCAPTUREDONERAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACAGCDSSSLOCKRAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACAGCDSSSUNLOCKRAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMAC_AGC_FSM_3_RAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACRADARTRIGGERRAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACRADARDETRAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMAC_AGC_FSM_2_RAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMAC_AGC_FSM_1_RAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMAC_AGC_FSM_0_RAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACCCATIMEOUTRAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACBTC_3_RAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACBTC_2_RAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACBTC_1_RAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACBTC_0_RAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACMPUTXENDRAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACAGCOFDMUNLOCKTIMERRAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACAGCOFDMLOCKRAW_RST    0x0
#define RIU_RWNXMACINTSTATRAW_IRQMACAGCOFDMUNLOCKRAW_RST    0x0

static inline void riu_rwnxmacintstatraw_unpack(struct cl_chip *chip, u8 *irqmacrcrxendraw, u8 *irqmacrctxendraw, u8 *irqmacerrormdmbraw, u8 *irqmactxendmdmbraw, u8 *irqmacrxendmdmbraw, u8 *irqmacrxvectormdmbraw, u8 *irqmac_frc_rx_end4_t_raw, u8 *irqmac_frc_rx_sig_end_raw, u8 *irqmac_frc_rx_phy_proc_lim_raw, u8 *irqmaclbcapturedoneraw, u8 *irqmacagcdssslockraw, u8 *irqmacagcdsssunlockraw, u8 *irqmac_agc_fsm3_raw, u8 *irqmacradartriggerraw, u8 *irqmacradardetraw, u8 *irqmac_agc_fsm2_raw, u8 *irqmac_agc_fsm1_raw, u8 *irqmac_agc_fsm0_raw, u8 *irqmacccatimeoutraw, u8 *irqmacbtc3_raw, u8 *irqmacbtc2_raw, u8 *irqmacbtc1_raw, u8 *irqmacbtc0_raw, u8 *irqmacmputxendraw, u8 *irqmacagcofdmunlocktimerraw, u8 *irqmacagcofdmlockraw, u8 *irqmacagcofdmunlockraw)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	*irqmacrcrxendraw = (local_val & ((u32)0x20000000)) >> 29;
	*irqmacrctxendraw = (local_val & ((u32)0x10000000)) >> 28;
	*irqmacerrormdmbraw = (local_val & ((u32)0x08000000)) >> 27;
	*irqmactxendmdmbraw = (local_val & ((u32)0x04000000)) >> 26;
	*irqmacrxendmdmbraw = (local_val & ((u32)0x02000000)) >> 25;
	*irqmacrxvectormdmbraw = (local_val & ((u32)0x01000000)) >> 24;
	*irqmac_frc_rx_end4_t_raw = (local_val & ((u32)0x00800000)) >> 23;
	*irqmac_frc_rx_sig_end_raw = (local_val & ((u32)0x00400000)) >> 22;
	*irqmac_frc_rx_phy_proc_lim_raw = (local_val & ((u32)0x00200000)) >> 21;
	*irqmaclbcapturedoneraw = (local_val & ((u32)0x00100000)) >> 20;
	*irqmacagcdssslockraw = (local_val & ((u32)0x00020000)) >> 17;
	*irqmacagcdsssunlockraw = (local_val & ((u32)0x00010000)) >> 16;
	*irqmac_agc_fsm3_raw = (local_val & ((u32)0x00004000)) >> 14;
	*irqmacradartriggerraw = (local_val & ((u32)0x00002000)) >> 13;
	*irqmacradardetraw = (local_val & ((u32)0x00001000)) >> 12;
	*irqmac_agc_fsm2_raw = (local_val & ((u32)0x00000800)) >> 11;
	*irqmac_agc_fsm1_raw = (local_val & ((u32)0x00000400)) >> 10;
	*irqmac_agc_fsm0_raw = (local_val & ((u32)0x00000200)) >> 9;
	*irqmacccatimeoutraw = (local_val & ((u32)0x00000100)) >> 8;
	*irqmacbtc3_raw = (local_val & ((u32)0x00000080)) >> 7;
	*irqmacbtc2_raw = (local_val & ((u32)0x00000040)) >> 6;
	*irqmacbtc1_raw = (local_val & ((u32)0x00000020)) >> 5;
	*irqmacbtc0_raw = (local_val & ((u32)0x00000010)) >> 4;
	*irqmacmputxendraw = (local_val & ((u32)0x00000008)) >> 3;
	*irqmacagcofdmunlocktimerraw = (local_val & ((u32)0x00000004)) >> 2;
	*irqmacagcofdmlockraw = (local_val & ((u32)0x00000002)) >> 1;
	*irqmacagcofdmunlockraw = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_rwnxmacintstatraw_irqmacrcrxendraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline u8 riu_rwnxmacintstatraw_irqmacrctxendraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline u8 riu_rwnxmacintstatraw_irqmacerrormdmbraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline u8 riu_rwnxmacintstatraw_irqmactxendmdmbraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline u8 riu_rwnxmacintstatraw_irqmacrxendmdmbraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline u8 riu_rwnxmacintstatraw_irqmacrxvectormdmbraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline u8 riu_rwnxmacintstatraw_irqmac_frc_rx_end_4_t_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline u8 riu_rwnxmacintstatraw_irqmac_frc_rx_sig_end_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline u8 riu_rwnxmacintstatraw_irqmac_frc_rx_phy_proc_lim_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline u8 riu_rwnxmacintstatraw_irqmaclbcapturedoneraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline u8 riu_rwnxmacintstatraw_irqmacagcdssslockraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline u8 riu_rwnxmacintstatraw_irqmacagcdsssunlockraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline u8 riu_rwnxmacintstatraw_irqmac_agc_fsm_3_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline u8 riu_rwnxmacintstatraw_irqmacradartriggerraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline u8 riu_rwnxmacintstatraw_irqmacradardetraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline u8 riu_rwnxmacintstatraw_irqmac_agc_fsm_2_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline u8 riu_rwnxmacintstatraw_irqmac_agc_fsm_1_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline u8 riu_rwnxmacintstatraw_irqmac_agc_fsm_0_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline u8 riu_rwnxmacintstatraw_irqmacccatimeoutraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline u8 riu_rwnxmacintstatraw_irqmacbtc_3_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline u8 riu_rwnxmacintstatraw_irqmacbtc_2_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline u8 riu_rwnxmacintstatraw_irqmacbtc_1_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline u8 riu_rwnxmacintstatraw_irqmacbtc_0_raw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline u8 riu_rwnxmacintstatraw_irqmacmputxendraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline u8 riu_rwnxmacintstatraw_irqmacagcofdmunlocktimerraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline u8 riu_rwnxmacintstatraw_irqmacagcofdmlockraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline u8 riu_rwnxmacintstatraw_irqmacagcofdmunlockraw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATRAW_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

/**
 * @brief RWNXMACINTSTATMASKED register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    IRQMACRCRXENDMASKED       0
 *    28    IRQMACRCTXENDMASKED       0
 *    27    IRQMACERRORMDMBMASKED     0
 *    26    IRQMACTXENDMDMBMASKED     0
 *    25    IRQMACRXENDMDMBMASKED     0
 *    24    IRQMACRXVECTORMDMBMASKED  0
 *    23    IRQMAC_FRC_RX_END4_T_MASKED 0
 *    22    IRQMAC_FRC_RX_SIG_END_MASKED 0
 *    21    IRQMAC_FRC_RX_PHY_PROC_LIM_MASKED 0
 *    20    IRQMACLBCAPTUREDONEMASKED 0
 *    17    IRQMACAGCDSSSLOCKMASKED   0
 *    16    IRQMACAGCDSSSUNLOCKMASKED 0
 *    14    IRQMAC_AGC_FSM3_MASKED    0
 *    13    IRQMACRADARTRIGGERMASKED  0
 *    12    IRQMACRADARDETMASKED      0
 *    11    IRQMAC_AGC_FSM2_MASKED    0
 *    10    IRQMAC_AGC_FSM1_MASKED    0
 *    09    IRQMAC_AGC_FSM0_MASKED    0
 *    08    IRQMACCCATIMEOUTMASKED    0
 *    07    IRQMACBTC3_MASKED         0
 *    06    IRQMACBTC2_MASKED         0
 *    05    IRQMACBTC1_MASKED         0
 *    04    IRQMACBTC0_MASKED         0
 *    03    IRQMACMPUTXENDMASKED      0
 *    02    IRQMACAGCOFDMUNLOCKTIMERMASKED 0
 *    01    IRQMACAGCOFDMLOCKMASKED   0
 *    00    IRQMACAGCOFDMUNLOCKMASKED 0
 * </pre>
 */
#define RIU_RWNXMACINTSTATMASKED_ADDR        (REG_RIU_BASE_ADDR + 0x0000041C)
#define RIU_RWNXMACINTSTATMASKED_OFFSET      0x0000041C
#define RIU_RWNXMACINTSTATMASKED_INDEX       0x00000107
#define RIU_RWNXMACINTSTATMASKED_RESET       0x00000000

static inline u32 riu_rwnxmacintstatmasked_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);
}

/* Field definitions */
#define RIU_RWNXMACINTSTATMASKED_IRQMACRCRXENDMASKED_BIT    ((u32)0x20000000)
#define RIU_RWNXMACINTSTATMASKED_IRQMACRCRXENDMASKED_POS    29
#define RIU_RWNXMACINTSTATMASKED_IRQMACRCTXENDMASKED_BIT    ((u32)0x10000000)
#define RIU_RWNXMACINTSTATMASKED_IRQMACRCTXENDMASKED_POS    28
#define RIU_RWNXMACINTSTATMASKED_IRQMACERRORMDMBMASKED_BIT    ((u32)0x08000000)
#define RIU_RWNXMACINTSTATMASKED_IRQMACERRORMDMBMASKED_POS    27
#define RIU_RWNXMACINTSTATMASKED_IRQMACTXENDMDMBMASKED_BIT    ((u32)0x04000000)
#define RIU_RWNXMACINTSTATMASKED_IRQMACTXENDMDMBMASKED_POS    26
#define RIU_RWNXMACINTSTATMASKED_IRQMACRXENDMDMBMASKED_BIT    ((u32)0x02000000)
#define RIU_RWNXMACINTSTATMASKED_IRQMACRXENDMDMBMASKED_POS    25
#define RIU_RWNXMACINTSTATMASKED_IRQMACRXVECTORMDMBMASKED_BIT    ((u32)0x01000000)
#define RIU_RWNXMACINTSTATMASKED_IRQMACRXVECTORMDMBMASKED_POS    24
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_FRC_RX_END_4_T_MASKED_BIT    ((u32)0x00800000)
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_FRC_RX_END_4_T_MASKED_POS    23
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_FRC_RX_SIG_END_MASKED_BIT    ((u32)0x00400000)
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_FRC_RX_SIG_END_MASKED_POS    22
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_FRC_RX_PHY_PROC_LIM_MASKED_BIT    ((u32)0x00200000)
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_FRC_RX_PHY_PROC_LIM_MASKED_POS    21
#define RIU_RWNXMACINTSTATMASKED_IRQMACLBCAPTUREDONEMASKED_BIT    ((u32)0x00100000)
#define RIU_RWNXMACINTSTATMASKED_IRQMACLBCAPTUREDONEMASKED_POS    20
#define RIU_RWNXMACINTSTATMASKED_IRQMACAGCDSSSLOCKMASKED_BIT    ((u32)0x00020000)
#define RIU_RWNXMACINTSTATMASKED_IRQMACAGCDSSSLOCKMASKED_POS    17
#define RIU_RWNXMACINTSTATMASKED_IRQMACAGCDSSSUNLOCKMASKED_BIT    ((u32)0x00010000)
#define RIU_RWNXMACINTSTATMASKED_IRQMACAGCDSSSUNLOCKMASKED_POS    16
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_AGC_FSM_3_MASKED_BIT    ((u32)0x00004000)
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_AGC_FSM_3_MASKED_POS    14
#define RIU_RWNXMACINTSTATMASKED_IRQMACRADARTRIGGERMASKED_BIT    ((u32)0x00002000)
#define RIU_RWNXMACINTSTATMASKED_IRQMACRADARTRIGGERMASKED_POS    13
#define RIU_RWNXMACINTSTATMASKED_IRQMACRADARDETMASKED_BIT    ((u32)0x00001000)
#define RIU_RWNXMACINTSTATMASKED_IRQMACRADARDETMASKED_POS    12
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_AGC_FSM_2_MASKED_BIT    ((u32)0x00000800)
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_AGC_FSM_2_MASKED_POS    11
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_AGC_FSM_1_MASKED_BIT    ((u32)0x00000400)
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_AGC_FSM_1_MASKED_POS    10
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_AGC_FSM_0_MASKED_BIT    ((u32)0x00000200)
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_AGC_FSM_0_MASKED_POS    9
#define RIU_RWNXMACINTSTATMASKED_IRQMACCCATIMEOUTMASKED_BIT    ((u32)0x00000100)
#define RIU_RWNXMACINTSTATMASKED_IRQMACCCATIMEOUTMASKED_POS    8
#define RIU_RWNXMACINTSTATMASKED_IRQMACBTC_3_MASKED_BIT    ((u32)0x00000080)
#define RIU_RWNXMACINTSTATMASKED_IRQMACBTC_3_MASKED_POS    7
#define RIU_RWNXMACINTSTATMASKED_IRQMACBTC_2_MASKED_BIT    ((u32)0x00000040)
#define RIU_RWNXMACINTSTATMASKED_IRQMACBTC_2_MASKED_POS    6
#define RIU_RWNXMACINTSTATMASKED_IRQMACBTC_1_MASKED_BIT    ((u32)0x00000020)
#define RIU_RWNXMACINTSTATMASKED_IRQMACBTC_1_MASKED_POS    5
#define RIU_RWNXMACINTSTATMASKED_IRQMACBTC_0_MASKED_BIT    ((u32)0x00000010)
#define RIU_RWNXMACINTSTATMASKED_IRQMACBTC_0_MASKED_POS    4
#define RIU_RWNXMACINTSTATMASKED_IRQMACMPUTXENDMASKED_BIT    ((u32)0x00000008)
#define RIU_RWNXMACINTSTATMASKED_IRQMACMPUTXENDMASKED_POS    3
#define RIU_RWNXMACINTSTATMASKED_IRQMACAGCOFDMUNLOCKTIMERMASKED_BIT    ((u32)0x00000004)
#define RIU_RWNXMACINTSTATMASKED_IRQMACAGCOFDMUNLOCKTIMERMASKED_POS    2
#define RIU_RWNXMACINTSTATMASKED_IRQMACAGCOFDMLOCKMASKED_BIT    ((u32)0x00000002)
#define RIU_RWNXMACINTSTATMASKED_IRQMACAGCOFDMLOCKMASKED_POS    1
#define RIU_RWNXMACINTSTATMASKED_IRQMACAGCOFDMUNLOCKMASKED_BIT    ((u32)0x00000001)
#define RIU_RWNXMACINTSTATMASKED_IRQMACAGCOFDMUNLOCKMASKED_POS    0

#define RIU_RWNXMACINTSTATMASKED_IRQMACRCRXENDMASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACRCTXENDMASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACERRORMDMBMASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACTXENDMDMBMASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACRXENDMDMBMASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACRXVECTORMDMBMASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_FRC_RX_END_4_T_MASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_FRC_RX_SIG_END_MASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_FRC_RX_PHY_PROC_LIM_MASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACLBCAPTUREDONEMASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACAGCDSSSLOCKMASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACAGCDSSSUNLOCKMASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_AGC_FSM_3_MASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACRADARTRIGGERMASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACRADARDETMASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_AGC_FSM_2_MASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_AGC_FSM_1_MASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMAC_AGC_FSM_0_MASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACCCATIMEOUTMASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACBTC_3_MASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACBTC_2_MASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACBTC_1_MASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACBTC_0_MASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACMPUTXENDMASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACAGCOFDMUNLOCKTIMERMASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACAGCOFDMLOCKMASKED_RST    0x0
#define RIU_RWNXMACINTSTATMASKED_IRQMACAGCOFDMUNLOCKMASKED_RST    0x0

static inline void riu_rwnxmacintstatmasked_unpack(struct cl_chip *chip, u8 *irqmacrcrxendmasked, u8 *irqmacrctxendmasked, u8 *irqmacerrormdmbmasked, u8 *irqmactxendmdmbmasked, u8 *irqmacrxendmdmbmasked, u8 *irqmacrxvectormdmbmasked, u8 *irqmac_frc_rx_end4_t_masked, u8 *irqmac_frc_rx_sig_end_masked, u8 *irqmac_frc_rx_phy_proc_lim_masked, u8 *irqmaclbcapturedonemasked, u8 *irqmacagcdssslockmasked, u8 *irqmacagcdsssunlockmasked, u8 *irqmac_agc_fsm3_masked, u8 *irqmacradartriggermasked, u8 *irqmacradardetmasked, u8 *irqmac_agc_fsm2_masked, u8 *irqmac_agc_fsm1_masked, u8 *irqmac_agc_fsm0_masked, u8 *irqmacccatimeoutmasked, u8 *irqmacbtc3_masked, u8 *irqmacbtc2_masked, u8 *irqmacbtc1_masked, u8 *irqmacbtc0_masked, u8 *irqmacmputxendmasked, u8 *irqmacagcofdmunlocktimermasked, u8 *irqmacagcofdmlockmasked, u8 *irqmacagcofdmunlockmasked)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	*irqmacrcrxendmasked = (local_val & ((u32)0x20000000)) >> 29;
	*irqmacrctxendmasked = (local_val & ((u32)0x10000000)) >> 28;
	*irqmacerrormdmbmasked = (local_val & ((u32)0x08000000)) >> 27;
	*irqmactxendmdmbmasked = (local_val & ((u32)0x04000000)) >> 26;
	*irqmacrxendmdmbmasked = (local_val & ((u32)0x02000000)) >> 25;
	*irqmacrxvectormdmbmasked = (local_val & ((u32)0x01000000)) >> 24;
	*irqmac_frc_rx_end4_t_masked = (local_val & ((u32)0x00800000)) >> 23;
	*irqmac_frc_rx_sig_end_masked = (local_val & ((u32)0x00400000)) >> 22;
	*irqmac_frc_rx_phy_proc_lim_masked = (local_val & ((u32)0x00200000)) >> 21;
	*irqmaclbcapturedonemasked = (local_val & ((u32)0x00100000)) >> 20;
	*irqmacagcdssslockmasked = (local_val & ((u32)0x00020000)) >> 17;
	*irqmacagcdsssunlockmasked = (local_val & ((u32)0x00010000)) >> 16;
	*irqmac_agc_fsm3_masked = (local_val & ((u32)0x00004000)) >> 14;
	*irqmacradartriggermasked = (local_val & ((u32)0x00002000)) >> 13;
	*irqmacradardetmasked = (local_val & ((u32)0x00001000)) >> 12;
	*irqmac_agc_fsm2_masked = (local_val & ((u32)0x00000800)) >> 11;
	*irqmac_agc_fsm1_masked = (local_val & ((u32)0x00000400)) >> 10;
	*irqmac_agc_fsm0_masked = (local_val & ((u32)0x00000200)) >> 9;
	*irqmacccatimeoutmasked = (local_val & ((u32)0x00000100)) >> 8;
	*irqmacbtc3_masked = (local_val & ((u32)0x00000080)) >> 7;
	*irqmacbtc2_masked = (local_val & ((u32)0x00000040)) >> 6;
	*irqmacbtc1_masked = (local_val & ((u32)0x00000020)) >> 5;
	*irqmacbtc0_masked = (local_val & ((u32)0x00000010)) >> 4;
	*irqmacmputxendmasked = (local_val & ((u32)0x00000008)) >> 3;
	*irqmacagcofdmunlocktimermasked = (local_val & ((u32)0x00000004)) >> 2;
	*irqmacagcofdmlockmasked = (local_val & ((u32)0x00000002)) >> 1;
	*irqmacagcofdmunlockmasked = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_rwnxmacintstatmasked_irqmacrcrxendmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacrctxendmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacerrormdmbmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline u8 riu_rwnxmacintstatmasked_irqmactxendmdmbmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacrxendmdmbmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacrxvectormdmbmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline u8 riu_rwnxmacintstatmasked_irqmac_frc_rx_end_4_t_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline u8 riu_rwnxmacintstatmasked_irqmac_frc_rx_sig_end_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline u8 riu_rwnxmacintstatmasked_irqmac_frc_rx_phy_proc_lim_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline u8 riu_rwnxmacintstatmasked_irqmaclbcapturedonemasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacagcdssslockmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacagcdsssunlockmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline u8 riu_rwnxmacintstatmasked_irqmac_agc_fsm_3_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacradartriggermasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacradardetmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline u8 riu_rwnxmacintstatmasked_irqmac_agc_fsm_2_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline u8 riu_rwnxmacintstatmasked_irqmac_agc_fsm_1_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline u8 riu_rwnxmacintstatmasked_irqmac_agc_fsm_0_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacccatimeoutmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacbtc_3_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacbtc_2_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacbtc_1_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacbtc_0_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacmputxendmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacagcofdmunlocktimermasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacagcofdmlockmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline u8 riu_rwnxmacintstatmasked_irqmacagcofdmunlockmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXMACINTSTATMASKED_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

/**
 * @brief RWNXMACINTACK register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    IRQMACRCRXENDACK          0
 *    28    IRQMACRCTXENDACK          0
 *    27    IRQMACERRORMDMBACK        0
 *    26    IRQMACTXENDMDMBACK        0
 *    25    IRQMACRXENDMDMBACK        0
 *    24    IRQMACRXVECTORMDMBACK     0
 *    23    IRQMAC_FRC_RX_END4_T_ACK  0
 *    22    IRQMAC_FRC_RX_SIG_END_ACK 0
 *    21    IRQMAC_FRC_RX_PHY_PROC_LIM_ACK 0
 *    20    IRQMACLBCAPTUREDONEACK    0
 *    17    IRQMACAGCDSSSLOCKACK      0
 *    16    IRQMACAGCDSSSUNLOCKACK    0
 *    14    IRQMAC_AGC_FSM3_ACK       0
 *    13    IRQMACRADARTRIGGERACK     0
 *    12    IRQMACRADARDETACK         0
 *    11    IRQMAC_AGC_FSM2_ACK       0
 *    10    IRQMAC_AGC_FSM1_ACK       0
 *    09    IRQMAC_AGC_FSM0_ACK       0
 *    08    IRQMACCCATIMEOUTACK       0
 *    07    IRQMACBTC3_ACK            0
 *    06    IRQMACBTC2_ACK            0
 *    05    IRQMACBTC1_ACK            0
 *    04    IRQMACBTC0_ACK            0
 *    03    IRQMACMPUTXENDACK         0
 *    02    IRQMACAGCOFDMUNLOCKTIMERACK 0
 *    01    IRQMACAGCOFDMLOCKACK      0
 *    00    IRQMACAGCOFDMUNLOCKACK    0
 * </pre>
 */
#define RIU_RWNXMACINTACK_ADDR        (REG_RIU_BASE_ADDR + 0x00000420)
#define RIU_RWNXMACINTACK_OFFSET      0x00000420
#define RIU_RWNXMACINTACK_INDEX       0x00000108
#define RIU_RWNXMACINTACK_RESET       0x00000000

static inline void riu_rwnxmacintack_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, value);
}

static inline void riu_rwnxmacintack_clear(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXMACINTACK_IRQMACRCRXENDACK_BIT    ((u32)0x20000000)
#define RIU_RWNXMACINTACK_IRQMACRCRXENDACK_POS    29
#define RIU_RWNXMACINTACK_IRQMACRCTXENDACK_BIT    ((u32)0x10000000)
#define RIU_RWNXMACINTACK_IRQMACRCTXENDACK_POS    28
#define RIU_RWNXMACINTACK_IRQMACERRORMDMBACK_BIT    ((u32)0x08000000)
#define RIU_RWNXMACINTACK_IRQMACERRORMDMBACK_POS    27
#define RIU_RWNXMACINTACK_IRQMACTXENDMDMBACK_BIT    ((u32)0x04000000)
#define RIU_RWNXMACINTACK_IRQMACTXENDMDMBACK_POS    26
#define RIU_RWNXMACINTACK_IRQMACRXENDMDMBACK_BIT    ((u32)0x02000000)
#define RIU_RWNXMACINTACK_IRQMACRXENDMDMBACK_POS    25
#define RIU_RWNXMACINTACK_IRQMACRXVECTORMDMBACK_BIT    ((u32)0x01000000)
#define RIU_RWNXMACINTACK_IRQMACRXVECTORMDMBACK_POS    24
#define RIU_RWNXMACINTACK_IRQMAC_FRC_RX_END_4_T_ACK_BIT    ((u32)0x00800000)
#define RIU_RWNXMACINTACK_IRQMAC_FRC_RX_END_4_T_ACK_POS    23
#define RIU_RWNXMACINTACK_IRQMAC_FRC_RX_SIG_END_ACK_BIT    ((u32)0x00400000)
#define RIU_RWNXMACINTACK_IRQMAC_FRC_RX_SIG_END_ACK_POS    22
#define RIU_RWNXMACINTACK_IRQMAC_FRC_RX_PHY_PROC_LIM_ACK_BIT    ((u32)0x00200000)
#define RIU_RWNXMACINTACK_IRQMAC_FRC_RX_PHY_PROC_LIM_ACK_POS    21
#define RIU_RWNXMACINTACK_IRQMACLBCAPTUREDONEACK_BIT    ((u32)0x00100000)
#define RIU_RWNXMACINTACK_IRQMACLBCAPTUREDONEACK_POS    20
#define RIU_RWNXMACINTACK_IRQMACAGCDSSSLOCKACK_BIT    ((u32)0x00020000)
#define RIU_RWNXMACINTACK_IRQMACAGCDSSSLOCKACK_POS    17
#define RIU_RWNXMACINTACK_IRQMACAGCDSSSUNLOCKACK_BIT    ((u32)0x00010000)
#define RIU_RWNXMACINTACK_IRQMACAGCDSSSUNLOCKACK_POS    16
#define RIU_RWNXMACINTACK_IRQMAC_AGC_FSM_3_ACK_BIT    ((u32)0x00004000)
#define RIU_RWNXMACINTACK_IRQMAC_AGC_FSM_3_ACK_POS    14
#define RIU_RWNXMACINTACK_IRQMACRADARTRIGGERACK_BIT    ((u32)0x00002000)
#define RIU_RWNXMACINTACK_IRQMACRADARTRIGGERACK_POS    13
#define RIU_RWNXMACINTACK_IRQMACRADARDETACK_BIT    ((u32)0x00001000)
#define RIU_RWNXMACINTACK_IRQMACRADARDETACK_POS    12
#define RIU_RWNXMACINTACK_IRQMAC_AGC_FSM_2_ACK_BIT    ((u32)0x00000800)
#define RIU_RWNXMACINTACK_IRQMAC_AGC_FSM_2_ACK_POS    11
#define RIU_RWNXMACINTACK_IRQMAC_AGC_FSM_1_ACK_BIT    ((u32)0x00000400)
#define RIU_RWNXMACINTACK_IRQMAC_AGC_FSM_1_ACK_POS    10
#define RIU_RWNXMACINTACK_IRQMAC_AGC_FSM_0_ACK_BIT    ((u32)0x00000200)
#define RIU_RWNXMACINTACK_IRQMAC_AGC_FSM_0_ACK_POS    9
#define RIU_RWNXMACINTACK_IRQMACCCATIMEOUTACK_BIT    ((u32)0x00000100)
#define RIU_RWNXMACINTACK_IRQMACCCATIMEOUTACK_POS    8
#define RIU_RWNXMACINTACK_IRQMACBTC_3_ACK_BIT    ((u32)0x00000080)
#define RIU_RWNXMACINTACK_IRQMACBTC_3_ACK_POS    7
#define RIU_RWNXMACINTACK_IRQMACBTC_2_ACK_BIT    ((u32)0x00000040)
#define RIU_RWNXMACINTACK_IRQMACBTC_2_ACK_POS    6
#define RIU_RWNXMACINTACK_IRQMACBTC_1_ACK_BIT    ((u32)0x00000020)
#define RIU_RWNXMACINTACK_IRQMACBTC_1_ACK_POS    5
#define RIU_RWNXMACINTACK_IRQMACBTC_0_ACK_BIT    ((u32)0x00000010)
#define RIU_RWNXMACINTACK_IRQMACBTC_0_ACK_POS    4
#define RIU_RWNXMACINTACK_IRQMACMPUTXENDACK_BIT    ((u32)0x00000008)
#define RIU_RWNXMACINTACK_IRQMACMPUTXENDACK_POS    3
#define RIU_RWNXMACINTACK_IRQMACAGCOFDMUNLOCKTIMERACK_BIT    ((u32)0x00000004)
#define RIU_RWNXMACINTACK_IRQMACAGCOFDMUNLOCKTIMERACK_POS    2
#define RIU_RWNXMACINTACK_IRQMACAGCOFDMLOCKACK_BIT    ((u32)0x00000002)
#define RIU_RWNXMACINTACK_IRQMACAGCOFDMLOCKACK_POS    1
#define RIU_RWNXMACINTACK_IRQMACAGCOFDMUNLOCKACK_BIT    ((u32)0x00000001)
#define RIU_RWNXMACINTACK_IRQMACAGCOFDMUNLOCKACK_POS    0

#define RIU_RWNXMACINTACK_IRQMACRCRXENDACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACRCTXENDACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACERRORMDMBACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACTXENDMDMBACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACRXENDMDMBACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACRXVECTORMDMBACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMAC_FRC_RX_END_4_T_ACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMAC_FRC_RX_SIG_END_ACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMAC_FRC_RX_PHY_PROC_LIM_ACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACLBCAPTUREDONEACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACAGCDSSSLOCKACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACAGCDSSSUNLOCKACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMAC_AGC_FSM_3_ACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACRADARTRIGGERACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACRADARDETACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMAC_AGC_FSM_2_ACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMAC_AGC_FSM_1_ACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMAC_AGC_FSM_0_ACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACCCATIMEOUTACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACBTC_3_ACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACBTC_2_ACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACBTC_1_ACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACBTC_0_ACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACMPUTXENDACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACAGCOFDMUNLOCKTIMERACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACAGCOFDMLOCKACK_RST    0x0
#define RIU_RWNXMACINTACK_IRQMACAGCOFDMUNLOCKACK_RST    0x0

static inline void riu_rwnxmacintack_pack(struct cl_chip *chip, u8 irqmacrcrxendack, u8 irqmacrctxendack, u8 irqmacerrormdmback, u8 irqmactxendmdmback, u8 irqmacrxendmdmback, u8 irqmacrxvectormdmback, u8 irqmac_frc_rx_end4_t_ack, u8 irqmac_frc_rx_sig_end_ack, u8 irqmac_frc_rx_phy_proc_lim_ack, u8 irqmaclbcapturedoneack, u8 irqmacagcdssslockack, u8 irqmacagcdsssunlockack, u8 irqmac_agc_fsm3_ack, u8 irqmacradartriggerack, u8 irqmacradardetack, u8 irqmac_agc_fsm2_ack, u8 irqmac_agc_fsm1_ack, u8 irqmac_agc_fsm0_ack, u8 irqmacccatimeoutack, u8 irqmacbtc3_ack, u8 irqmacbtc2_ack, u8 irqmacbtc1_ack, u8 irqmacbtc0_ack, u8 irqmacmputxendack, u8 irqmacagcofdmunlocktimerack, u8 irqmacagcofdmlockack, u8 irqmacagcofdmunlockack)
{
	ASSERT_ERR_CHIP((((u32)irqmacrcrxendack << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacrctxendack << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacerrormdmback << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmactxendmdmback << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacrxendmdmback << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacrxvectormdmback << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_frc_rx_end4_t_ack << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_frc_rx_sig_end_ack << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_frc_rx_phy_proc_lim_ack << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmaclbcapturedoneack << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacagcdssslockack << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacagcdsssunlockack << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_agc_fsm3_ack << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacradartriggerack << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacradardetack << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_agc_fsm2_ack << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_agc_fsm1_ack << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_agc_fsm0_ack << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacccatimeoutack << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacbtc3_ack << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacbtc2_ack << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacbtc1_ack << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacbtc0_ack << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacmputxendack << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmunlocktimerack << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmlockack << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmunlockack << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, ((u32)irqmacrcrxendack << 29) | ((u32)irqmacrctxendack << 28) | ((u32)irqmacerrormdmback << 27) | ((u32)irqmactxendmdmback << 26) | ((u32)irqmacrxendmdmback << 25) | ((u32)irqmacrxvectormdmback << 24) | ((u32)irqmac_frc_rx_end4_t_ack << 23) | ((u32)irqmac_frc_rx_sig_end_ack << 22) | ((u32)irqmac_frc_rx_phy_proc_lim_ack << 21) | ((u32)irqmaclbcapturedoneack << 20) | ((u32)irqmacagcdssslockack << 17) | ((u32)irqmacagcdsssunlockack << 16) | ((u32)irqmac_agc_fsm3_ack << 14) | ((u32)irqmacradartriggerack << 13) | ((u32)irqmacradardetack << 12) | ((u32)irqmac_agc_fsm2_ack << 11) | ((u32)irqmac_agc_fsm1_ack << 10) | ((u32)irqmac_agc_fsm0_ack << 9) | ((u32)irqmacccatimeoutack << 8) | ((u32)irqmacbtc3_ack << 7) | ((u32)irqmacbtc2_ack << 6) | ((u32)irqmacbtc1_ack << 5) | ((u32)irqmacbtc0_ack << 4) | ((u32)irqmacmputxendack << 3) | ((u32)irqmacagcofdmunlocktimerack << 2) | ((u32)irqmacagcofdmlockack << 1) | ((u32)irqmacagcofdmunlockack << 0));
}

static inline void riu_rwnxmacintack_irqmacrcrxendack_setf(struct cl_chip *chip, u8 irqmacrcrxendack)
{
	ASSERT_ERR_CHIP((((u32)irqmacrcrxendack << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x20000000)) | ((u32)irqmacrcrxendack << 29));
}

static inline void riu_rwnxmacintack_irqmacrcrxendack_clearf(struct cl_chip *chip, u8 irqmacrcrxendack)
{
	ASSERT_ERR_CHIP((((u32)irqmacrcrxendack << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x20000000)) | ((u32)irqmacrcrxendack << 29));
}

static inline void riu_rwnxmacintack_irqmacrctxendack_setf(struct cl_chip *chip, u8 irqmacrctxendack)
{
	ASSERT_ERR_CHIP((((u32)irqmacrctxendack << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x10000000)) | ((u32)irqmacrctxendack << 28));
}

static inline void riu_rwnxmacintack_irqmacrctxendack_clearf(struct cl_chip *chip, u8 irqmacrctxendack)
{
	ASSERT_ERR_CHIP((((u32)irqmacrctxendack << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x10000000)) | ((u32)irqmacrctxendack << 28));
}

static inline void riu_rwnxmacintack_irqmacerrormdmback_setf(struct cl_chip *chip, u8 irqmacerrormdmback)
{
	ASSERT_ERR_CHIP((((u32)irqmacerrormdmback << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x08000000)) | ((u32)irqmacerrormdmback << 27));
}

static inline void riu_rwnxmacintack_irqmacerrormdmback_clearf(struct cl_chip *chip, u8 irqmacerrormdmback)
{
	ASSERT_ERR_CHIP((((u32)irqmacerrormdmback << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x08000000)) | ((u32)irqmacerrormdmback << 27));
}

static inline void riu_rwnxmacintack_irqmactxendmdmback_setf(struct cl_chip *chip, u8 irqmactxendmdmback)
{
	ASSERT_ERR_CHIP((((u32)irqmactxendmdmback << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x04000000)) | ((u32)irqmactxendmdmback << 26));
}

static inline void riu_rwnxmacintack_irqmactxendmdmback_clearf(struct cl_chip *chip, u8 irqmactxendmdmback)
{
	ASSERT_ERR_CHIP((((u32)irqmactxendmdmback << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x04000000)) | ((u32)irqmactxendmdmback << 26));
}

static inline void riu_rwnxmacintack_irqmacrxendmdmback_setf(struct cl_chip *chip, u8 irqmacrxendmdmback)
{
	ASSERT_ERR_CHIP((((u32)irqmacrxendmdmback << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x02000000)) | ((u32)irqmacrxendmdmback << 25));
}

static inline void riu_rwnxmacintack_irqmacrxendmdmback_clearf(struct cl_chip *chip, u8 irqmacrxendmdmback)
{
	ASSERT_ERR_CHIP((((u32)irqmacrxendmdmback << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x02000000)) | ((u32)irqmacrxendmdmback << 25));
}

static inline void riu_rwnxmacintack_irqmacrxvectormdmback_setf(struct cl_chip *chip, u8 irqmacrxvectormdmback)
{
	ASSERT_ERR_CHIP((((u32)irqmacrxvectormdmback << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x01000000)) | ((u32)irqmacrxvectormdmback << 24));
}

static inline void riu_rwnxmacintack_irqmacrxvectormdmback_clearf(struct cl_chip *chip, u8 irqmacrxvectormdmback)
{
	ASSERT_ERR_CHIP((((u32)irqmacrxvectormdmback << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x01000000)) | ((u32)irqmacrxvectormdmback << 24));
}

static inline void riu_rwnxmacintack_irqmac_frc_rx_end_4_t_ack_setf(struct cl_chip *chip, u8 irqmacfrcrxend4tack)
{
	ASSERT_ERR_CHIP((((u32)irqmacfrcrxend4tack << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00800000)) | ((u32)irqmacfrcrxend4tack << 23));
}

static inline void riu_rwnxmacintack_irqmac_frc_rx_end_4_t_ack_clearf(struct cl_chip *chip, u8 irqmacfrcrxend4tack)
{
	ASSERT_ERR_CHIP((((u32)irqmacfrcrxend4tack << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00800000)) | ((u32)irqmacfrcrxend4tack << 23));
}

static inline void riu_rwnxmacintack_irqmac_frc_rx_sig_end_ack_setf(struct cl_chip *chip, u8 irqmacfrcrxsigendack)
{
	ASSERT_ERR_CHIP((((u32)irqmacfrcrxsigendack << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00400000)) | ((u32)irqmacfrcrxsigendack << 22));
}

static inline void riu_rwnxmacintack_irqmac_frc_rx_sig_end_ack_clearf(struct cl_chip *chip, u8 irqmacfrcrxsigendack)
{
	ASSERT_ERR_CHIP((((u32)irqmacfrcrxsigendack << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00400000)) | ((u32)irqmacfrcrxsigendack << 22));
}

static inline void riu_rwnxmacintack_irqmac_frc_rx_phy_proc_lim_ack_setf(struct cl_chip *chip, u8 irqmacfrcrxphyproclimack)
{
	ASSERT_ERR_CHIP((((u32)irqmacfrcrxphyproclimack << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00200000)) | ((u32)irqmacfrcrxphyproclimack << 21));
}

static inline void riu_rwnxmacintack_irqmac_frc_rx_phy_proc_lim_ack_clearf(struct cl_chip *chip, u8 irqmacfrcrxphyproclimack)
{
	ASSERT_ERR_CHIP((((u32)irqmacfrcrxphyproclimack << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00200000)) | ((u32)irqmacfrcrxphyproclimack << 21));
}

static inline void riu_rwnxmacintack_irqmaclbcapturedoneack_setf(struct cl_chip *chip, u8 irqmaclbcapturedoneack)
{
	ASSERT_ERR_CHIP((((u32)irqmaclbcapturedoneack << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00100000)) | ((u32)irqmaclbcapturedoneack << 20));
}

static inline void riu_rwnxmacintack_irqmaclbcapturedoneack_clearf(struct cl_chip *chip, u8 irqmaclbcapturedoneack)
{
	ASSERT_ERR_CHIP((((u32)irqmaclbcapturedoneack << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00100000)) | ((u32)irqmaclbcapturedoneack << 20));
}

static inline void riu_rwnxmacintack_irqmacagcdssslockack_setf(struct cl_chip *chip, u8 irqmacagcdssslockack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcdssslockack << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00020000)) | ((u32)irqmacagcdssslockack << 17));
}

static inline void riu_rwnxmacintack_irqmacagcdssslockack_clearf(struct cl_chip *chip, u8 irqmacagcdssslockack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcdssslockack << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00020000)) | ((u32)irqmacagcdssslockack << 17));
}

static inline void riu_rwnxmacintack_irqmacagcdsssunlockack_setf(struct cl_chip *chip, u8 irqmacagcdsssunlockack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcdsssunlockack << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00010000)) | ((u32)irqmacagcdsssunlockack << 16));
}

static inline void riu_rwnxmacintack_irqmacagcdsssunlockack_clearf(struct cl_chip *chip, u8 irqmacagcdsssunlockack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcdsssunlockack << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00010000)) | ((u32)irqmacagcdsssunlockack << 16));
}

static inline void riu_rwnxmacintack_irqmac_agc_fsm_3_ack_setf(struct cl_chip *chip, u8 irqmacagcfsm3ack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcfsm3ack << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00004000)) | ((u32)irqmacagcfsm3ack << 14));
}

static inline void riu_rwnxmacintack_irqmac_agc_fsm_3_ack_clearf(struct cl_chip *chip, u8 irqmacagcfsm3ack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcfsm3ack << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00004000)) | ((u32)irqmacagcfsm3ack << 14));
}

static inline void riu_rwnxmacintack_irqmacradartriggerack_setf(struct cl_chip *chip, u8 irqmacradartriggerack)
{
	ASSERT_ERR_CHIP((((u32)irqmacradartriggerack << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00002000)) | ((u32)irqmacradartriggerack << 13));
}

static inline void riu_rwnxmacintack_irqmacradartriggerack_clearf(struct cl_chip *chip, u8 irqmacradartriggerack)
{
	ASSERT_ERR_CHIP((((u32)irqmacradartriggerack << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00002000)) | ((u32)irqmacradartriggerack << 13));
}

static inline void riu_rwnxmacintack_irqmacradardetack_setf(struct cl_chip *chip, u8 irqmacradardetack)
{
	ASSERT_ERR_CHIP((((u32)irqmacradardetack << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00001000)) | ((u32)irqmacradardetack << 12));
}

static inline void riu_rwnxmacintack_irqmacradardetack_clearf(struct cl_chip *chip, u8 irqmacradardetack)
{
	ASSERT_ERR_CHIP((((u32)irqmacradardetack << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00001000)) | ((u32)irqmacradardetack << 12));
}

static inline void riu_rwnxmacintack_irqmac_agc_fsm_2_ack_setf(struct cl_chip *chip, u8 irqmacagcfsm2ack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcfsm2ack << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000800)) | ((u32)irqmacagcfsm2ack << 11));
}

static inline void riu_rwnxmacintack_irqmac_agc_fsm_2_ack_clearf(struct cl_chip *chip, u8 irqmacagcfsm2ack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcfsm2ack << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000800)) | ((u32)irqmacagcfsm2ack << 11));
}

static inline void riu_rwnxmacintack_irqmac_agc_fsm_1_ack_setf(struct cl_chip *chip, u8 irqmacagcfsm1ack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcfsm1ack << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000400)) | ((u32)irqmacagcfsm1ack << 10));
}

static inline void riu_rwnxmacintack_irqmac_agc_fsm_1_ack_clearf(struct cl_chip *chip, u8 irqmacagcfsm1ack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcfsm1ack << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000400)) | ((u32)irqmacagcfsm1ack << 10));
}

static inline void riu_rwnxmacintack_irqmac_agc_fsm_0_ack_setf(struct cl_chip *chip, u8 irqmacagcfsm0ack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcfsm0ack << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000200)) | ((u32)irqmacagcfsm0ack << 9));
}

static inline void riu_rwnxmacintack_irqmac_agc_fsm_0_ack_clearf(struct cl_chip *chip, u8 irqmacagcfsm0ack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcfsm0ack << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000200)) | ((u32)irqmacagcfsm0ack << 9));
}

static inline void riu_rwnxmacintack_irqmacccatimeoutack_setf(struct cl_chip *chip, u8 irqmacccatimeoutack)
{
	ASSERT_ERR_CHIP((((u32)irqmacccatimeoutack << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000100)) | ((u32)irqmacccatimeoutack << 8));
}

static inline void riu_rwnxmacintack_irqmacccatimeoutack_clearf(struct cl_chip *chip, u8 irqmacccatimeoutack)
{
	ASSERT_ERR_CHIP((((u32)irqmacccatimeoutack << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000100)) | ((u32)irqmacccatimeoutack << 8));
}

static inline void riu_rwnxmacintack_irqmacbtc_3_ack_setf(struct cl_chip *chip, u8 irqmacbtc3ack)
{
	ASSERT_ERR_CHIP((((u32)irqmacbtc3ack << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000080)) | ((u32)irqmacbtc3ack << 7));
}

static inline void riu_rwnxmacintack_irqmacbtc_3_ack_clearf(struct cl_chip *chip, u8 irqmacbtc3ack)
{
	ASSERT_ERR_CHIP((((u32)irqmacbtc3ack << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000080)) | ((u32)irqmacbtc3ack << 7));
}

static inline void riu_rwnxmacintack_irqmacbtc_2_ack_setf(struct cl_chip *chip, u8 irqmacbtc2ack)
{
	ASSERT_ERR_CHIP((((u32)irqmacbtc2ack << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000040)) | ((u32)irqmacbtc2ack << 6));
}

static inline void riu_rwnxmacintack_irqmacbtc_2_ack_clearf(struct cl_chip *chip, u8 irqmacbtc2ack)
{
	ASSERT_ERR_CHIP((((u32)irqmacbtc2ack << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000040)) | ((u32)irqmacbtc2ack << 6));
}

static inline void riu_rwnxmacintack_irqmacbtc_1_ack_setf(struct cl_chip *chip, u8 irqmacbtc1ack)
{
	ASSERT_ERR_CHIP((((u32)irqmacbtc1ack << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000020)) | ((u32)irqmacbtc1ack << 5));
}

static inline void riu_rwnxmacintack_irqmacbtc_1_ack_clearf(struct cl_chip *chip, u8 irqmacbtc1ack)
{
	ASSERT_ERR_CHIP((((u32)irqmacbtc1ack << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000020)) | ((u32)irqmacbtc1ack << 5));
}

static inline void riu_rwnxmacintack_irqmacbtc_0_ack_setf(struct cl_chip *chip, u8 irqmacbtc0ack)
{
	ASSERT_ERR_CHIP((((u32)irqmacbtc0ack << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000010)) | ((u32)irqmacbtc0ack << 4));
}

static inline void riu_rwnxmacintack_irqmacbtc_0_ack_clearf(struct cl_chip *chip, u8 irqmacbtc0ack)
{
	ASSERT_ERR_CHIP((((u32)irqmacbtc0ack << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000010)) | ((u32)irqmacbtc0ack << 4));
}

static inline void riu_rwnxmacintack_irqmacmputxendack_setf(struct cl_chip *chip, u8 irqmacmputxendack)
{
	ASSERT_ERR_CHIP((((u32)irqmacmputxendack << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000008)) | ((u32)irqmacmputxendack << 3));
}

static inline void riu_rwnxmacintack_irqmacmputxendack_clearf(struct cl_chip *chip, u8 irqmacmputxendack)
{
	ASSERT_ERR_CHIP((((u32)irqmacmputxendack << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000008)) | ((u32)irqmacmputxendack << 3));
}

static inline void riu_rwnxmacintack_irqmacagcofdmunlocktimerack_setf(struct cl_chip *chip, u8 irqmacagcofdmunlocktimerack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmunlocktimerack << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000004)) | ((u32)irqmacagcofdmunlocktimerack << 2));
}

static inline void riu_rwnxmacintack_irqmacagcofdmunlocktimerack_clearf(struct cl_chip *chip, u8 irqmacagcofdmunlocktimerack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmunlocktimerack << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000004)) | ((u32)irqmacagcofdmunlocktimerack << 2));
}

static inline void riu_rwnxmacintack_irqmacagcofdmlockack_setf(struct cl_chip *chip, u8 irqmacagcofdmlockack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmlockack << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000002)) | ((u32)irqmacagcofdmlockack << 1));
}

static inline void riu_rwnxmacintack_irqmacagcofdmlockack_clearf(struct cl_chip *chip, u8 irqmacagcofdmlockack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmlockack << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000002)) | ((u32)irqmacagcofdmlockack << 1));
}

static inline void riu_rwnxmacintack_irqmacagcofdmunlockack_setf(struct cl_chip *chip, u8 irqmacagcofdmunlockack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmunlockack << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000001)) | ((u32)irqmacagcofdmunlockack << 0));
}

static inline void riu_rwnxmacintack_irqmacagcofdmunlockack_clearf(struct cl_chip *chip, u8 irqmacagcofdmunlockack)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmunlockack << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTACK_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTACK_ADDR) & ~((u32)0x00000001)) | ((u32)irqmacagcofdmunlockack << 0));
}

/**
 * @brief RWNXMACINTGEN register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    IRQMACRCRXENDGEN          0
 *    28    IRQMACRCTXENDGEN          0
 *    27    IRQMACERRORMDMBGEN        0
 *    26    IRQMACTXENDMDMBGEN        0
 *    25    IRQMACRXENDMDMBGEN        0
 *    24    IRQMACRXVECTORMDMBGEN     0
 *    23    IRQMAC_FRC_RX_END4_T_GEN  0
 *    22    IRQMAC_FRC_RX_SIG_END_GEN 0
 *    21    IRQMAC_FRC_RX_PHY_PROC_LIM_GEN 0
 *    20    IRQMACLBCAPTUREDONEGEN    0
 *    17    IRQMACAGCDSSSLOCKGEN      0
 *    16    IRQMACAGCDSSSUNLOCKGEN    0
 *    14    IRQMAC_AGC_FSM3_GEN       0
 *    13    IRQMACRADARTRIGGERGEN     0
 *    12    IRQMACRADARDETGEN         0
 *    11    IRQMAC_AGC_FSM2_GEN       0
 *    10    IRQMAC_AGC_FSM1_GEN       0
 *    09    IRQMAC_AGC_FSM0_GEN       0
 *    08    IRQMACCCATIMEOUTGEN       0
 *    07    IRQMACBTC3_GEN            0
 *    06    IRQMACBTC2_GEN            0
 *    05    IRQMACBTC1_GEN            0
 *    04    IRQMACBTC0_GEN            0
 *    03    IRQMACMPUTXENDGEN         0
 *    02    IRQMACAGCOFDMUNLOCKTIMERGEN 0
 *    01    IRQMACAGCOFDMLOCKGEN      0
 *    00    IRQMACAGCOFDMUNLOCKGEN    0
 * </pre>
 */
#define RIU_RWNXMACINTGEN_ADDR        (REG_RIU_BASE_ADDR + 0x00000424)
#define RIU_RWNXMACINTGEN_OFFSET      0x00000424
#define RIU_RWNXMACINTGEN_INDEX       0x00000109
#define RIU_RWNXMACINTGEN_RESET       0x00000000

static inline void riu_rwnxmacintgen_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXMACINTGEN_IRQMACRCRXENDGEN_BIT    ((u32)0x20000000)
#define RIU_RWNXMACINTGEN_IRQMACRCRXENDGEN_POS    29
#define RIU_RWNXMACINTGEN_IRQMACRCTXENDGEN_BIT    ((u32)0x10000000)
#define RIU_RWNXMACINTGEN_IRQMACRCTXENDGEN_POS    28
#define RIU_RWNXMACINTGEN_IRQMACERRORMDMBGEN_BIT    ((u32)0x08000000)
#define RIU_RWNXMACINTGEN_IRQMACERRORMDMBGEN_POS    27
#define RIU_RWNXMACINTGEN_IRQMACTXENDMDMBGEN_BIT    ((u32)0x04000000)
#define RIU_RWNXMACINTGEN_IRQMACTXENDMDMBGEN_POS    26
#define RIU_RWNXMACINTGEN_IRQMACRXENDMDMBGEN_BIT    ((u32)0x02000000)
#define RIU_RWNXMACINTGEN_IRQMACRXENDMDMBGEN_POS    25
#define RIU_RWNXMACINTGEN_IRQMACRXVECTORMDMBGEN_BIT    ((u32)0x01000000)
#define RIU_RWNXMACINTGEN_IRQMACRXVECTORMDMBGEN_POS    24
#define RIU_RWNXMACINTGEN_IRQMAC_FRC_RX_END_4_T_GEN_BIT    ((u32)0x00800000)
#define RIU_RWNXMACINTGEN_IRQMAC_FRC_RX_END_4_T_GEN_POS    23
#define RIU_RWNXMACINTGEN_IRQMAC_FRC_RX_SIG_END_GEN_BIT    ((u32)0x00400000)
#define RIU_RWNXMACINTGEN_IRQMAC_FRC_RX_SIG_END_GEN_POS    22
#define RIU_RWNXMACINTGEN_IRQMAC_FRC_RX_PHY_PROC_LIM_GEN_BIT    ((u32)0x00200000)
#define RIU_RWNXMACINTGEN_IRQMAC_FRC_RX_PHY_PROC_LIM_GEN_POS    21
#define RIU_RWNXMACINTGEN_IRQMACLBCAPTUREDONEGEN_BIT    ((u32)0x00100000)
#define RIU_RWNXMACINTGEN_IRQMACLBCAPTUREDONEGEN_POS    20
#define RIU_RWNXMACINTGEN_IRQMACAGCDSSSLOCKGEN_BIT    ((u32)0x00020000)
#define RIU_RWNXMACINTGEN_IRQMACAGCDSSSLOCKGEN_POS    17
#define RIU_RWNXMACINTGEN_IRQMACAGCDSSSUNLOCKGEN_BIT    ((u32)0x00010000)
#define RIU_RWNXMACINTGEN_IRQMACAGCDSSSUNLOCKGEN_POS    16
#define RIU_RWNXMACINTGEN_IRQMAC_AGC_FSM_3_GEN_BIT    ((u32)0x00004000)
#define RIU_RWNXMACINTGEN_IRQMAC_AGC_FSM_3_GEN_POS    14
#define RIU_RWNXMACINTGEN_IRQMACRADARTRIGGERGEN_BIT    ((u32)0x00002000)
#define RIU_RWNXMACINTGEN_IRQMACRADARTRIGGERGEN_POS    13
#define RIU_RWNXMACINTGEN_IRQMACRADARDETGEN_BIT    ((u32)0x00001000)
#define RIU_RWNXMACINTGEN_IRQMACRADARDETGEN_POS    12
#define RIU_RWNXMACINTGEN_IRQMAC_AGC_FSM_2_GEN_BIT    ((u32)0x00000800)
#define RIU_RWNXMACINTGEN_IRQMAC_AGC_FSM_2_GEN_POS    11
#define RIU_RWNXMACINTGEN_IRQMAC_AGC_FSM_1_GEN_BIT    ((u32)0x00000400)
#define RIU_RWNXMACINTGEN_IRQMAC_AGC_FSM_1_GEN_POS    10
#define RIU_RWNXMACINTGEN_IRQMAC_AGC_FSM_0_GEN_BIT    ((u32)0x00000200)
#define RIU_RWNXMACINTGEN_IRQMAC_AGC_FSM_0_GEN_POS    9
#define RIU_RWNXMACINTGEN_IRQMACCCATIMEOUTGEN_BIT    ((u32)0x00000100)
#define RIU_RWNXMACINTGEN_IRQMACCCATIMEOUTGEN_POS    8
#define RIU_RWNXMACINTGEN_IRQMACBTC_3_GEN_BIT    ((u32)0x00000080)
#define RIU_RWNXMACINTGEN_IRQMACBTC_3_GEN_POS    7
#define RIU_RWNXMACINTGEN_IRQMACBTC_2_GEN_BIT    ((u32)0x00000040)
#define RIU_RWNXMACINTGEN_IRQMACBTC_2_GEN_POS    6
#define RIU_RWNXMACINTGEN_IRQMACBTC_1_GEN_BIT    ((u32)0x00000020)
#define RIU_RWNXMACINTGEN_IRQMACBTC_1_GEN_POS    5
#define RIU_RWNXMACINTGEN_IRQMACBTC_0_GEN_BIT    ((u32)0x00000010)
#define RIU_RWNXMACINTGEN_IRQMACBTC_0_GEN_POS    4
#define RIU_RWNXMACINTGEN_IRQMACMPUTXENDGEN_BIT    ((u32)0x00000008)
#define RIU_RWNXMACINTGEN_IRQMACMPUTXENDGEN_POS    3
#define RIU_RWNXMACINTGEN_IRQMACAGCOFDMUNLOCKTIMERGEN_BIT    ((u32)0x00000004)
#define RIU_RWNXMACINTGEN_IRQMACAGCOFDMUNLOCKTIMERGEN_POS    2
#define RIU_RWNXMACINTGEN_IRQMACAGCOFDMLOCKGEN_BIT    ((u32)0x00000002)
#define RIU_RWNXMACINTGEN_IRQMACAGCOFDMLOCKGEN_POS    1
#define RIU_RWNXMACINTGEN_IRQMACAGCOFDMUNLOCKGEN_BIT    ((u32)0x00000001)
#define RIU_RWNXMACINTGEN_IRQMACAGCOFDMUNLOCKGEN_POS    0

#define RIU_RWNXMACINTGEN_IRQMACRCRXENDGEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACRCTXENDGEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACERRORMDMBGEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACTXENDMDMBGEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACRXENDMDMBGEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACRXVECTORMDMBGEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMAC_FRC_RX_END_4_T_GEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMAC_FRC_RX_SIG_END_GEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMAC_FRC_RX_PHY_PROC_LIM_GEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACLBCAPTUREDONEGEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACAGCDSSSLOCKGEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACAGCDSSSUNLOCKGEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMAC_AGC_FSM_3_GEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACRADARTRIGGERGEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACRADARDETGEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMAC_AGC_FSM_2_GEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMAC_AGC_FSM_1_GEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMAC_AGC_FSM_0_GEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACCCATIMEOUTGEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACBTC_3_GEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACBTC_2_GEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACBTC_1_GEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACBTC_0_GEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACMPUTXENDGEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACAGCOFDMUNLOCKTIMERGEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACAGCOFDMLOCKGEN_RST    0x0
#define RIU_RWNXMACINTGEN_IRQMACAGCOFDMUNLOCKGEN_RST    0x0

static inline void riu_rwnxmacintgen_pack(struct cl_chip *chip, u8 irqmacrcrxendgen, u8 irqmacrctxendgen, u8 irqmacerrormdmbgen, u8 irqmactxendmdmbgen, u8 irqmacrxendmdmbgen, u8 irqmacrxvectormdmbgen, u8 irqmac_frc_rx_end4_t_gen, u8 irqmac_frc_rx_sig_end_gen, u8 irqmac_frc_rx_phy_proc_lim_gen, u8 irqmaclbcapturedonegen, u8 irqmacagcdssslockgen, u8 irqmacagcdsssunlockgen, u8 irqmac_agc_fsm3_gen, u8 irqmacradartriggergen, u8 irqmacradardetgen, u8 irqmac_agc_fsm2_gen, u8 irqmac_agc_fsm1_gen, u8 irqmac_agc_fsm0_gen, u8 irqmacccatimeoutgen, u8 irqmacbtc3_gen, u8 irqmacbtc2_gen, u8 irqmacbtc1_gen, u8 irqmacbtc0_gen, u8 irqmacmputxendgen, u8 irqmacagcofdmunlocktimergen, u8 irqmacagcofdmlockgen, u8 irqmacagcofdmunlockgen)
{
	ASSERT_ERR_CHIP((((u32)irqmacrcrxendgen << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacrctxendgen << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacerrormdmbgen << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmactxendmdmbgen << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacrxendmdmbgen << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacrxvectormdmbgen << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_frc_rx_end4_t_gen << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_frc_rx_sig_end_gen << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_frc_rx_phy_proc_lim_gen << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmaclbcapturedonegen << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacagcdssslockgen << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacagcdsssunlockgen << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_agc_fsm3_gen << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacradartriggergen << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacradardetgen << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_agc_fsm2_gen << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_agc_fsm1_gen << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmac_agc_fsm0_gen << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacccatimeoutgen << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacbtc3_gen << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacbtc2_gen << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacbtc1_gen << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacbtc0_gen << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacmputxendgen << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmunlocktimergen << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmlockgen << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmunlockgen << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, ((u32)irqmacrcrxendgen << 29) | ((u32)irqmacrctxendgen << 28) | ((u32)irqmacerrormdmbgen << 27) | ((u32)irqmactxendmdmbgen << 26) | ((u32)irqmacrxendmdmbgen << 25) | ((u32)irqmacrxvectormdmbgen << 24) | ((u32)irqmac_frc_rx_end4_t_gen << 23) | ((u32)irqmac_frc_rx_sig_end_gen << 22) | ((u32)irqmac_frc_rx_phy_proc_lim_gen << 21) | ((u32)irqmaclbcapturedonegen << 20) | ((u32)irqmacagcdssslockgen << 17) | ((u32)irqmacagcdsssunlockgen << 16) | ((u32)irqmac_agc_fsm3_gen << 14) | ((u32)irqmacradartriggergen << 13) | ((u32)irqmacradardetgen << 12) | ((u32)irqmac_agc_fsm2_gen << 11) | ((u32)irqmac_agc_fsm1_gen << 10) | ((u32)irqmac_agc_fsm0_gen << 9) | ((u32)irqmacccatimeoutgen << 8) | ((u32)irqmacbtc3_gen << 7) | ((u32)irqmacbtc2_gen << 6) | ((u32)irqmacbtc1_gen << 5) | ((u32)irqmacbtc0_gen << 4) | ((u32)irqmacmputxendgen << 3) | ((u32)irqmacagcofdmunlocktimergen << 2) | ((u32)irqmacagcofdmlockgen << 1) | ((u32)irqmacagcofdmunlockgen << 0));
}

static inline void riu_rwnxmacintgen_irqmacrcrxendgen_setf(struct cl_chip *chip, u8 irqmacrcrxendgen)
{
	ASSERT_ERR_CHIP((((u32)irqmacrcrxendgen << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x20000000)) | ((u32)irqmacrcrxendgen << 29));
}

static inline void riu_rwnxmacintgen_irqmacrctxendgen_setf(struct cl_chip *chip, u8 irqmacrctxendgen)
{
	ASSERT_ERR_CHIP((((u32)irqmacrctxendgen << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x10000000)) | ((u32)irqmacrctxendgen << 28));
}

static inline void riu_rwnxmacintgen_irqmacerrormdmbgen_setf(struct cl_chip *chip, u8 irqmacerrormdmbgen)
{
	ASSERT_ERR_CHIP((((u32)irqmacerrormdmbgen << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x08000000)) | ((u32)irqmacerrormdmbgen << 27));
}

static inline void riu_rwnxmacintgen_irqmactxendmdmbgen_setf(struct cl_chip *chip, u8 irqmactxendmdmbgen)
{
	ASSERT_ERR_CHIP((((u32)irqmactxendmdmbgen << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x04000000)) | ((u32)irqmactxendmdmbgen << 26));
}

static inline void riu_rwnxmacintgen_irqmacrxendmdmbgen_setf(struct cl_chip *chip, u8 irqmacrxendmdmbgen)
{
	ASSERT_ERR_CHIP((((u32)irqmacrxendmdmbgen << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x02000000)) | ((u32)irqmacrxendmdmbgen << 25));
}

static inline void riu_rwnxmacintgen_irqmacrxvectormdmbgen_setf(struct cl_chip *chip, u8 irqmacrxvectormdmbgen)
{
	ASSERT_ERR_CHIP((((u32)irqmacrxvectormdmbgen << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x01000000)) | ((u32)irqmacrxvectormdmbgen << 24));
}

static inline void riu_rwnxmacintgen_irqmac_frc_rx_end_4_t_gen_setf(struct cl_chip *chip, u8 irqmacfrcrxend4tgen)
{
	ASSERT_ERR_CHIP((((u32)irqmacfrcrxend4tgen << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00800000)) | ((u32)irqmacfrcrxend4tgen << 23));
}

static inline void riu_rwnxmacintgen_irqmac_frc_rx_sig_end_gen_setf(struct cl_chip *chip, u8 irqmacfrcrxsigendgen)
{
	ASSERT_ERR_CHIP((((u32)irqmacfrcrxsigendgen << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00400000)) | ((u32)irqmacfrcrxsigendgen << 22));
}

static inline void riu_rwnxmacintgen_irqmac_frc_rx_phy_proc_lim_gen_setf(struct cl_chip *chip, u8 irqmacfrcrxphyproclimgen)
{
	ASSERT_ERR_CHIP((((u32)irqmacfrcrxphyproclimgen << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00200000)) | ((u32)irqmacfrcrxphyproclimgen << 21));
}

static inline void riu_rwnxmacintgen_irqmaclbcapturedonegen_setf(struct cl_chip *chip, u8 irqmaclbcapturedonegen)
{
	ASSERT_ERR_CHIP((((u32)irqmaclbcapturedonegen << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00100000)) | ((u32)irqmaclbcapturedonegen << 20));
}

static inline void riu_rwnxmacintgen_irqmacagcdssslockgen_setf(struct cl_chip *chip, u8 irqmacagcdssslockgen)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcdssslockgen << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00020000)) | ((u32)irqmacagcdssslockgen << 17));
}

static inline void riu_rwnxmacintgen_irqmacagcdsssunlockgen_setf(struct cl_chip *chip, u8 irqmacagcdsssunlockgen)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcdsssunlockgen << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00010000)) | ((u32)irqmacagcdsssunlockgen << 16));
}

static inline void riu_rwnxmacintgen_irqmac_agc_fsm_3_gen_setf(struct cl_chip *chip, u8 irqmacagcfsm3gen)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcfsm3gen << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00004000)) | ((u32)irqmacagcfsm3gen << 14));
}

static inline void riu_rwnxmacintgen_irqmacradartriggergen_setf(struct cl_chip *chip, u8 irqmacradartriggergen)
{
	ASSERT_ERR_CHIP((((u32)irqmacradartriggergen << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00002000)) | ((u32)irqmacradartriggergen << 13));
}

static inline void riu_rwnxmacintgen_irqmacradardetgen_setf(struct cl_chip *chip, u8 irqmacradardetgen)
{
	ASSERT_ERR_CHIP((((u32)irqmacradardetgen << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00001000)) | ((u32)irqmacradardetgen << 12));
}

static inline void riu_rwnxmacintgen_irqmac_agc_fsm_2_gen_setf(struct cl_chip *chip, u8 irqmacagcfsm2gen)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcfsm2gen << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00000800)) | ((u32)irqmacagcfsm2gen << 11));
}

static inline void riu_rwnxmacintgen_irqmac_agc_fsm_1_gen_setf(struct cl_chip *chip, u8 irqmacagcfsm1gen)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcfsm1gen << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00000400)) | ((u32)irqmacagcfsm1gen << 10));
}

static inline void riu_rwnxmacintgen_irqmac_agc_fsm_0_gen_setf(struct cl_chip *chip, u8 irqmacagcfsm0gen)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcfsm0gen << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00000200)) | ((u32)irqmacagcfsm0gen << 9));
}

static inline void riu_rwnxmacintgen_irqmacccatimeoutgen_setf(struct cl_chip *chip, u8 irqmacccatimeoutgen)
{
	ASSERT_ERR_CHIP((((u32)irqmacccatimeoutgen << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00000100)) | ((u32)irqmacccatimeoutgen << 8));
}

static inline void riu_rwnxmacintgen_irqmacbtc_3_gen_setf(struct cl_chip *chip, u8 irqmacbtc3gen)
{
	ASSERT_ERR_CHIP((((u32)irqmacbtc3gen << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00000080)) | ((u32)irqmacbtc3gen << 7));
}

static inline void riu_rwnxmacintgen_irqmacbtc_2_gen_setf(struct cl_chip *chip, u8 irqmacbtc2gen)
{
	ASSERT_ERR_CHIP((((u32)irqmacbtc2gen << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00000040)) | ((u32)irqmacbtc2gen << 6));
}

static inline void riu_rwnxmacintgen_irqmacbtc_1_gen_setf(struct cl_chip *chip, u8 irqmacbtc1gen)
{
	ASSERT_ERR_CHIP((((u32)irqmacbtc1gen << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00000020)) | ((u32)irqmacbtc1gen << 5));
}

static inline void riu_rwnxmacintgen_irqmacbtc_0_gen_setf(struct cl_chip *chip, u8 irqmacbtc0gen)
{
	ASSERT_ERR_CHIP((((u32)irqmacbtc0gen << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00000010)) | ((u32)irqmacbtc0gen << 4));
}

static inline void riu_rwnxmacintgen_irqmacmputxendgen_setf(struct cl_chip *chip, u8 irqmacmputxendgen)
{
	ASSERT_ERR_CHIP((((u32)irqmacmputxendgen << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00000008)) | ((u32)irqmacmputxendgen << 3));
}

static inline void riu_rwnxmacintgen_irqmacagcofdmunlocktimergen_setf(struct cl_chip *chip, u8 irqmacagcofdmunlocktimergen)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmunlocktimergen << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00000004)) | ((u32)irqmacagcofdmunlocktimergen << 2));
}

static inline void riu_rwnxmacintgen_irqmacagcofdmlockgen_setf(struct cl_chip *chip, u8 irqmacagcofdmlockgen)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmlockgen << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00000002)) | ((u32)irqmacagcofdmlockgen << 1));
}

static inline void riu_rwnxmacintgen_irqmacagcofdmunlockgen_setf(struct cl_chip *chip, u8 irqmacagcofdmunlockgen)
{
	ASSERT_ERR_CHIP((((u32)irqmacagcofdmunlockgen << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXMACINTGEN_ADDR, (cl_reg_read(chip, RIU_RWNXMACINTGEN_ADDR) & ~((u32)0x00000001)) | ((u32)irqmacagcofdmunlockgen << 0));
}

/**
 * @brief RWNXAGCCCA_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:25 CCA_INBD_PWR_VALID_NUM_SAMPLES_CNT 0x0
 *    24:20 CCAHE32_GITHR             0x15
 *    16:12 CCAHE16_GITHR             0x15
 *    08:04 CCAHE08_GITHR             0x15
 *    02:00 CCAHEGINBSYMB             0x1
 * </pre>
 */
#define RIU_RWNXAGCCCA_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000428)
#define RIU_RWNXAGCCCA_3_OFFSET      0x00000428
#define RIU_RWNXAGCCCA_3_INDEX       0x0000010A
#define RIU_RWNXAGCCCA_3_RESET       0x01515151

static inline u32 riu_rwnxagccca_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCCCA_3_ADDR);
}

static inline void riu_rwnxagccca_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCCCA_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCCCA_3_CCA_INBD_PWR_VALID_NUM_SAMPLES_CNT_MASK    ((u32)0xFE000000)
#define RIU_RWNXAGCCCA_3_CCA_INBD_PWR_VALID_NUM_SAMPLES_CNT_LSB    25
#define RIU_RWNXAGCCCA_3_CCA_INBD_PWR_VALID_NUM_SAMPLES_CNT_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCCCA_3_CCAHE_32_GITHR_MASK    ((u32)0x01F00000)
#define RIU_RWNXAGCCCA_3_CCAHE_32_GITHR_LSB    20
#define RIU_RWNXAGCCCA_3_CCAHE_32_GITHR_WIDTH    ((u32)0x00000005)
#define RIU_RWNXAGCCCA_3_CCAHE_16_GITHR_MASK    ((u32)0x0001F000)
#define RIU_RWNXAGCCCA_3_CCAHE_16_GITHR_LSB    12
#define RIU_RWNXAGCCCA_3_CCAHE_16_GITHR_WIDTH    ((u32)0x00000005)
#define RIU_RWNXAGCCCA_3_CCAHE_08_GITHR_MASK    ((u32)0x000001F0)
#define RIU_RWNXAGCCCA_3_CCAHE_08_GITHR_LSB    4
#define RIU_RWNXAGCCCA_3_CCAHE_08_GITHR_WIDTH    ((u32)0x00000005)
#define RIU_RWNXAGCCCA_3_CCAHEGINBSYMB_MASK    ((u32)0x00000007)
#define RIU_RWNXAGCCCA_3_CCAHEGINBSYMB_LSB    0
#define RIU_RWNXAGCCCA_3_CCAHEGINBSYMB_WIDTH    ((u32)0x00000003)

#define RIU_RWNXAGCCCA_3_CCA_INBD_PWR_VALID_NUM_SAMPLES_CNT_RST    0x0
#define RIU_RWNXAGCCCA_3_CCAHE_32_GITHR_RST    0x15
#define RIU_RWNXAGCCCA_3_CCAHE_16_GITHR_RST    0x15
#define RIU_RWNXAGCCCA_3_CCAHE_08_GITHR_RST    0x15
#define RIU_RWNXAGCCCA_3_CCAHEGINBSYMB_RST    0x1

static inline void riu_rwnxagccca_3_pack(struct cl_chip *chip, u8 cca_inbd_pwr_valid_num_samples_cnt, u8 ccahe32_githr, u8 ccahe16_githr, u8 ccahe08_githr, u8 ccaheginbsymb)
{
	ASSERT_ERR_CHIP((((u32)cca_inbd_pwr_valid_num_samples_cnt << 25) & ~((u32)0xFE000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccahe32_githr << 20) & ~((u32)0x01F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccahe16_githr << 12) & ~((u32)0x0001F000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccahe08_githr << 4) & ~((u32)0x000001F0)) == 0);
	ASSERT_ERR_CHIP((((u32)ccaheginbsymb << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_3_ADDR, ((u32)cca_inbd_pwr_valid_num_samples_cnt << 25) | ((u32)ccahe32_githr << 20) | ((u32)ccahe16_githr << 12) | ((u32)ccahe08_githr << 4) | ((u32)ccaheginbsymb << 0));
}

static inline void riu_rwnxagccca_3_unpack(struct cl_chip *chip, u8 *cca_inbd_pwr_valid_num_samples_cnt, u8 *ccahe32_githr, u8 *ccahe16_githr, u8 *ccahe08_githr, u8 *ccaheginbsymb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_3_ADDR);

	*cca_inbd_pwr_valid_num_samples_cnt = (local_val & ((u32)0xFE000000)) >> 25;
	*ccahe32_githr = (local_val & ((u32)0x01F00000)) >> 20;
	*ccahe16_githr = (local_val & ((u32)0x0001F000)) >> 12;
	*ccahe08_githr = (local_val & ((u32)0x000001F0)) >> 4;
	*ccaheginbsymb = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 riu_rwnxagccca_3_cca_inbd_pwr_valid_num_samples_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_3_ADDR);

	return (u8)((local_val & ((u32)0xFE000000)) >> 25);
}

static inline void riu_rwnxagccca_3_cca_inbd_pwr_valid_num_samples_cnt_setf(struct cl_chip *chip, u8 ccainbdpwrvalidnumsamplescnt)
{
	ASSERT_ERR_CHIP((((u32)ccainbdpwrvalidnumsamplescnt << 25) & ~((u32)0xFE000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_3_ADDR) & ~((u32)0xFE000000)) | ((u32)ccainbdpwrvalidnumsamplescnt << 25));
}

static inline u8 riu_rwnxagccca_3_ccahe_32_githr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_3_ADDR);

	return (u8)((local_val & ((u32)0x01F00000)) >> 20);
}

static inline void riu_rwnxagccca_3_ccahe_32_githr_setf(struct cl_chip *chip, u8 ccahe32githr)
{
	ASSERT_ERR_CHIP((((u32)ccahe32githr << 20) & ~((u32)0x01F00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_3_ADDR) & ~((u32)0x01F00000)) | ((u32)ccahe32githr << 20));
}

static inline u8 riu_rwnxagccca_3_ccahe_16_githr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_3_ADDR);

	return (u8)((local_val & ((u32)0x0001F000)) >> 12);
}

static inline void riu_rwnxagccca_3_ccahe_16_githr_setf(struct cl_chip *chip, u8 ccahe16githr)
{
	ASSERT_ERR_CHIP((((u32)ccahe16githr << 12) & ~((u32)0x0001F000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_3_ADDR) & ~((u32)0x0001F000)) | ((u32)ccahe16githr << 12));
}

static inline u8 riu_rwnxagccca_3_ccahe_08_githr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_3_ADDR);

	return (u8)((local_val & ((u32)0x000001F0)) >> 4);
}

static inline void riu_rwnxagccca_3_ccahe_08_githr_setf(struct cl_chip *chip, u8 ccahe08githr)
{
	ASSERT_ERR_CHIP((((u32)ccahe08githr << 4) & ~((u32)0x000001F0)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_3_ADDR) & ~((u32)0x000001F0)) | ((u32)ccahe08githr << 4));
}

static inline u8 riu_rwnxagccca_3_ccaheginbsymb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCA_3_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void riu_rwnxagccca_3_ccaheginbsymb_setf(struct cl_chip *chip, u8 ccaheginbsymb)
{
	ASSERT_ERR_CHIP((((u32)ccaheginbsymb << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCA_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCA_3_ADDR) & ~((u32)0x00000007)) | ((u32)ccaheginbsymb << 0));
}

/**
 * @brief RWNXAGCCCACTRL_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    28    CCAOUTRESETCOMMAND1       0
 *    26    CCAPER20_MODE             0
 *    25:22 CCAGIEN                   0xf
 *    21:11 CCARAMPUDEN               0x1ff
 *    10:00 CCAENERGYEN               0x1ff
 * </pre>
 */
#define RIU_RWNXAGCCCACTRL_3_ADDR        (REG_RIU_BASE_ADDR + 0x0000042C)
#define RIU_RWNXAGCCCACTRL_3_OFFSET      0x0000042C
#define RIU_RWNXAGCCCACTRL_3_INDEX       0x0000010B
#define RIU_RWNXAGCCCACTRL_3_RESET       0x03CFF9FF

static inline u32 riu_rwnxagcccactrl_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCCCACTRL_3_ADDR);
}

static inline void riu_rwnxagcccactrl_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCCCACTRL_3_CCAOUTRESETCOMMAND_1_BIT    ((u32)0x10000000)
#define RIU_RWNXAGCCCACTRL_3_CCAOUTRESETCOMMAND_1_POS    28
#define RIU_RWNXAGCCCACTRL_3_CCAPER_20_MODE_BIT    ((u32)0x04000000)
#define RIU_RWNXAGCCCACTRL_3_CCAPER_20_MODE_POS    26
#define RIU_RWNXAGCCCACTRL_3_CCAGIEN_MASK    ((u32)0x03C00000)
#define RIU_RWNXAGCCCACTRL_3_CCAGIEN_LSB    22
#define RIU_RWNXAGCCCACTRL_3_CCAGIEN_WIDTH    ((u32)0x00000004)
#define RIU_RWNXAGCCCACTRL_3_CCARAMPUDEN_MASK    ((u32)0x003FF800)
#define RIU_RWNXAGCCCACTRL_3_CCARAMPUDEN_LSB    11
#define RIU_RWNXAGCCCACTRL_3_CCARAMPUDEN_WIDTH    ((u32)0x0000000B)
#define RIU_RWNXAGCCCACTRL_3_CCAENERGYEN_MASK    ((u32)0x000007FF)
#define RIU_RWNXAGCCCACTRL_3_CCAENERGYEN_LSB    0
#define RIU_RWNXAGCCCACTRL_3_CCAENERGYEN_WIDTH    ((u32)0x0000000B)

#define RIU_RWNXAGCCCACTRL_3_CCAOUTRESETCOMMAND_1_RST    0x0
#define RIU_RWNXAGCCCACTRL_3_CCAPER_20_MODE_RST    0x0
#define RIU_RWNXAGCCCACTRL_3_CCAGIEN_RST    0xf
#define RIU_RWNXAGCCCACTRL_3_CCARAMPUDEN_RST    0x1ff
#define RIU_RWNXAGCCCACTRL_3_CCAENERGYEN_RST    0x1ff

static inline void riu_rwnxagcccactrl_3_pack(struct cl_chip *chip, u8 ccaoutresetcommand1, u8 ccaper20_mode, u8 ccagien, u16 ccarampuden, u16 ccaenergyen)
{
	ASSERT_ERR_CHIP((((u32)ccaoutresetcommand1 << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccaper20_mode << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccagien << 22) & ~((u32)0x03C00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ccarampuden << 11) & ~((u32)0x003FF800)) == 0);
	ASSERT_ERR_CHIP((((u32)ccaenergyen << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_3_ADDR, ((u32)ccaoutresetcommand1 << 28) | ((u32)ccaper20_mode << 26) | ((u32)ccagien << 22) | ((u32)ccarampuden << 11) | ((u32)ccaenergyen << 0));
}

static inline void riu_rwnxagcccactrl_3_unpack(struct cl_chip *chip, u8 *ccaoutresetcommand1, u8 *ccaper20_mode, u8 *ccagien, u16 *ccarampuden, u16 *ccaenergyen)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_3_ADDR);

	*ccaoutresetcommand1 = (local_val & ((u32)0x10000000)) >> 28;
	*ccaper20_mode = (local_val & ((u32)0x04000000)) >> 26;
	*ccagien = (local_val & ((u32)0x03C00000)) >> 22;
	*ccarampuden = (local_val & ((u32)0x003FF800)) >> 11;
	*ccaenergyen = (local_val & ((u32)0x000007FF)) >> 0;
}

static inline u8 riu_rwnxagcccactrl_3_ccaoutresetcommand_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void riu_rwnxagcccactrl_3_ccaoutresetcommand_1_setf(struct cl_chip *chip, u8 ccaoutresetcommand1)
{
	ASSERT_ERR_CHIP((((u32)ccaoutresetcommand1 << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCACTRL_3_ADDR) & ~((u32)0x10000000)) | ((u32)ccaoutresetcommand1 << 28));
}

static inline u8 riu_rwnxagcccactrl_3_ccaper_20_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void riu_rwnxagcccactrl_3_ccaper_20_mode_setf(struct cl_chip *chip, u8 ccaper20mode)
{
	ASSERT_ERR_CHIP((((u32)ccaper20mode << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCACTRL_3_ADDR) & ~((u32)0x04000000)) | ((u32)ccaper20mode << 26));
}

static inline u8 riu_rwnxagcccactrl_3_ccagien_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x03C00000)) >> 22);
}

static inline void riu_rwnxagcccactrl_3_ccagien_setf(struct cl_chip *chip, u8 ccagien)
{
	ASSERT_ERR_CHIP((((u32)ccagien << 22) & ~((u32)0x03C00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCACTRL_3_ADDR) & ~((u32)0x03C00000)) | ((u32)ccagien << 22));
}

static inline u16 riu_rwnxagcccactrl_3_ccarampuden_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_3_ADDR);

	return (u16)((local_val & ((u32)0x003FF800)) >> 11);
}

static inline void riu_rwnxagcccactrl_3_ccarampuden_setf(struct cl_chip *chip, u16 ccarampuden)
{
	ASSERT_ERR_CHIP((((u32)ccarampuden << 11) & ~((u32)0x003FF800)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCACTRL_3_ADDR) & ~((u32)0x003FF800)) | ((u32)ccarampuden << 11));
}

static inline u16 riu_rwnxagcccactrl_3_ccaenergyen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCCCACTRL_3_ADDR);

	return (u16)((local_val & ((u32)0x000007FF)) >> 0);
}

static inline void riu_rwnxagcccactrl_3_ccaenergyen_setf(struct cl_chip *chip, u16 ccaenergyen)
{
	ASSERT_ERR_CHIP((((u32)ccaenergyen << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCCCACTRL_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCCCACTRL_3_ADDR) & ~((u32)0x000007FF)) | ((u32)ccaenergyen << 0));
}

/**
 * @brief CCAGENSTAT_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    19    CCA20_S7_ENERGY_DET_STAT  0
 *    18    CCA20_S6_ENERGY_DET_STAT  0
 *    17    CCA20_S5_ENERGY_DET_STAT  0
 *    16    CCA20_S4_ENERGY_DET_STAT  0
 *    15    CCA20_S3_ENERGY_DET_STAT  0
 *    14    CCA20_S2_ENERGY_DET_STAT  0
 *    13    CCA80_S_STATE_DET_STAT    0
 *    12    CCA80_S_RAMPUP_DET_STAT   0
 *    11    CCA80_S_ENERGY_DET_STAT   0
 *    10:06 CCA80_S_GI_DET_STAT       0x0
 *    05    CCA20_P_2_ENERGY_DET_STAT 0
 *    04:00 CCA20_P_GI_DET_STAT       0x0
 * </pre>
 */
#define RIU_CCAGENSTAT_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000434)
#define RIU_CCAGENSTAT_2_OFFSET      0x00000434
#define RIU_CCAGENSTAT_2_INDEX       0x0000010D
#define RIU_CCAGENSTAT_2_RESET       0x00000000

static inline u32 riu_ccagenstat_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCAGENSTAT_2_ADDR);
}

/* Field definitions */
#define RIU_CCAGENSTAT_2_CCA_20_S_7_ENERGY_DET_STAT_BIT    ((u32)0x00080000)
#define RIU_CCAGENSTAT_2_CCA_20_S_7_ENERGY_DET_STAT_POS    19
#define RIU_CCAGENSTAT_2_CCA_20_S_6_ENERGY_DET_STAT_BIT    ((u32)0x00040000)
#define RIU_CCAGENSTAT_2_CCA_20_S_6_ENERGY_DET_STAT_POS    18
#define RIU_CCAGENSTAT_2_CCA_20_S_5_ENERGY_DET_STAT_BIT    ((u32)0x00020000)
#define RIU_CCAGENSTAT_2_CCA_20_S_5_ENERGY_DET_STAT_POS    17
#define RIU_CCAGENSTAT_2_CCA_20_S_4_ENERGY_DET_STAT_BIT    ((u32)0x00010000)
#define RIU_CCAGENSTAT_2_CCA_20_S_4_ENERGY_DET_STAT_POS    16
#define RIU_CCAGENSTAT_2_CCA_20_S_3_ENERGY_DET_STAT_BIT    ((u32)0x00008000)
#define RIU_CCAGENSTAT_2_CCA_20_S_3_ENERGY_DET_STAT_POS    15
#define RIU_CCAGENSTAT_2_CCA_20_S_2_ENERGY_DET_STAT_BIT    ((u32)0x00004000)
#define RIU_CCAGENSTAT_2_CCA_20_S_2_ENERGY_DET_STAT_POS    14
#define RIU_CCAGENSTAT_2_CCA_80_S_STATE_DET_STAT_BIT    ((u32)0x00002000)
#define RIU_CCAGENSTAT_2_CCA_80_S_STATE_DET_STAT_POS    13
#define RIU_CCAGENSTAT_2_CCA_80_S_RAMPUP_DET_STAT_BIT    ((u32)0x00001000)
#define RIU_CCAGENSTAT_2_CCA_80_S_RAMPUP_DET_STAT_POS    12
#define RIU_CCAGENSTAT_2_CCA_80_S_ENERGY_DET_STAT_BIT    ((u32)0x00000800)
#define RIU_CCAGENSTAT_2_CCA_80_S_ENERGY_DET_STAT_POS    11
#define RIU_CCAGENSTAT_2_CCA_80_S_GI_DET_STAT_MASK    ((u32)0x000007C0)
#define RIU_CCAGENSTAT_2_CCA_80_S_GI_DET_STAT_LSB    6
#define RIU_CCAGENSTAT_2_CCA_80_S_GI_DET_STAT_WIDTH    ((u32)0x00000005)
#define RIU_CCAGENSTAT_2_CCA_20_P_2_ENERGY_DET_STAT_BIT    ((u32)0x00000020)
#define RIU_CCAGENSTAT_2_CCA_20_P_2_ENERGY_DET_STAT_POS    5
#define RIU_CCAGENSTAT_2_CCA_20_P_GI_DET_STAT_MASK    ((u32)0x0000001F)
#define RIU_CCAGENSTAT_2_CCA_20_P_GI_DET_STAT_LSB    0
#define RIU_CCAGENSTAT_2_CCA_20_P_GI_DET_STAT_WIDTH    ((u32)0x00000005)

#define RIU_CCAGENSTAT_2_CCA_20_S_7_ENERGY_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_2_CCA_20_S_6_ENERGY_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_2_CCA_20_S_5_ENERGY_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_2_CCA_20_S_4_ENERGY_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_2_CCA_20_S_3_ENERGY_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_2_CCA_20_S_2_ENERGY_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_2_CCA_80_S_STATE_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_2_CCA_80_S_RAMPUP_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_2_CCA_80_S_ENERGY_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_2_CCA_80_S_GI_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_2_CCA_20_P_2_ENERGY_DET_STAT_RST    0x0
#define RIU_CCAGENSTAT_2_CCA_20_P_GI_DET_STAT_RST    0x0

static inline void riu_ccagenstat_2_unpack(struct cl_chip *chip, u8 *cca20_s7_energy_det_stat, u8 *cca20_s6_energy_det_stat, u8 *cca20_s5_energy_det_stat, u8 *cca20_s4_energy_det_stat, u8 *cca20_s3_energy_det_stat, u8 *cca20_s2_energy_det_stat, u8 *cca80_s_state_det_stat, u8 *cca80_s_rampup_det_stat, u8 *cca80_s_energy_det_stat, u8 *cca80_s_gi_det_stat, u8 *cca20_p_2_energy_det_stat, u8 *cca20_p_gi_det_stat)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_2_ADDR);

	*cca20_s7_energy_det_stat = (local_val & ((u32)0x00080000)) >> 19;
	*cca20_s6_energy_det_stat = (local_val & ((u32)0x00040000)) >> 18;
	*cca20_s5_energy_det_stat = (local_val & ((u32)0x00020000)) >> 17;
	*cca20_s4_energy_det_stat = (local_val & ((u32)0x00010000)) >> 16;
	*cca20_s3_energy_det_stat = (local_val & ((u32)0x00008000)) >> 15;
	*cca20_s2_energy_det_stat = (local_val & ((u32)0x00004000)) >> 14;
	*cca80_s_state_det_stat = (local_val & ((u32)0x00002000)) >> 13;
	*cca80_s_rampup_det_stat = (local_val & ((u32)0x00001000)) >> 12;
	*cca80_s_energy_det_stat = (local_val & ((u32)0x00000800)) >> 11;
	*cca80_s_gi_det_stat = (local_val & ((u32)0x000007C0)) >> 6;
	*cca20_p_2_energy_det_stat = (local_val & ((u32)0x00000020)) >> 5;
	*cca20_p_gi_det_stat = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u8 riu_ccagenstat_2_cca_20_s_7_energy_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline u8 riu_ccagenstat_2_cca_20_s_6_energy_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline u8 riu_ccagenstat_2_cca_20_s_5_energy_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline u8 riu_ccagenstat_2_cca_20_s_4_energy_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline u8 riu_ccagenstat_2_cca_20_s_3_energy_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline u8 riu_ccagenstat_2_cca_20_s_2_energy_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline u8 riu_ccagenstat_2_cca_80_s_state_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline u8 riu_ccagenstat_2_cca_80_s_rampup_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline u8 riu_ccagenstat_2_cca_80_s_energy_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline u8 riu_ccagenstat_2_cca_80_s_gi_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x000007C0)) >> 6);
}

static inline u8 riu_ccagenstat_2_cca_20_p_2_energy_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline u8 riu_ccagenstat_2_cca_20_p_gi_det_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCAGENSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

/**
 * @brief LPF_160_PCOEFF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 H_2_48                    0xE
 *    19:10 H_1_49                    0x9
 *    09:00 H_0_50                    0x3
 * </pre>
 */
#define RIU_LPF_160_PCOEFF_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000440)
#define RIU_LPF_160_PCOEFF_0_OFFSET      0x00000440
#define RIU_LPF_160_PCOEFF_0_INDEX       0x00000110
#define RIU_LPF_160_PCOEFF_0_RESET       0x00E02403

static inline u32 riu_lpf_160_pcoeff_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_LPF_160_PCOEFF_0_ADDR);
}

static inline void riu_lpf_160_pcoeff_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_0_ADDR, value);
}

/* Field definitions */
#define RIU_LPF_160_PCOEFF_0_H_2_48_MASK    ((u32)0x3FF00000)
#define RIU_LPF_160_PCOEFF_0_H_2_48_LSB     20
#define RIU_LPF_160_PCOEFF_0_H_2_48_WIDTH    ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_0_H_1_49_MASK    ((u32)0x000FFC00)
#define RIU_LPF_160_PCOEFF_0_H_1_49_LSB     10
#define RIU_LPF_160_PCOEFF_0_H_1_49_WIDTH    ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_0_H_0_50_MASK    ((u32)0x000003FF)
#define RIU_LPF_160_PCOEFF_0_H_0_50_LSB     0
#define RIU_LPF_160_PCOEFF_0_H_0_50_WIDTH    ((u32)0x0000000A)

#define RIU_LPF_160_PCOEFF_0_H_2_48_RST     0xE
#define RIU_LPF_160_PCOEFF_0_H_1_49_RST     0x9
#define RIU_LPF_160_PCOEFF_0_H_0_50_RST     0x3

static inline void riu_lpf_160_pcoeff_0_pack(struct cl_chip *chip, u16 h_2_48, u16 h_1_49, u16 h_0_50)
{
	ASSERT_ERR_CHIP((((u32)h_2_48 << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)h_1_49 << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)h_0_50 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_0_ADDR, ((u32)h_2_48 << 20) | ((u32)h_1_49 << 10) | ((u32)h_0_50 << 0));
}

static inline void riu_lpf_160_pcoeff_0_unpack(struct cl_chip *chip, u16 *h_2_48, u16 *h_1_49, u16 *h_0_50)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_0_ADDR);

	*h_2_48 = (local_val & ((u32)0x3FF00000)) >> 20;
	*h_1_49 = (local_val & ((u32)0x000FFC00)) >> 10;
	*h_0_50 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_lpf_160_pcoeff_0_h_2_48_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_0_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_lpf_160_pcoeff_0_h_2_48_setf(struct cl_chip *chip, u16 h248)
{
	ASSERT_ERR_CHIP((((u32)h248 << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_0_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_0_ADDR) & ~((u32)0x3FF00000)) | ((u32)h248 << 20));
}

static inline u16 riu_lpf_160_pcoeff_0_h_1_49_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_0_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_lpf_160_pcoeff_0_h_1_49_setf(struct cl_chip *chip, u16 h149)
{
	ASSERT_ERR_CHIP((((u32)h149 << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_0_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_0_ADDR) & ~((u32)0x000FFC00)) | ((u32)h149 << 10));
}

static inline u16 riu_lpf_160_pcoeff_0_h_0_50_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_0_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_lpf_160_pcoeff_0_h_0_50_setf(struct cl_chip *chip, u16 h050)
{
	ASSERT_ERR_CHIP((((u32)h050 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_0_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_0_ADDR) & ~((u32)0x000003FF)) | ((u32)h050 << 0));
}

/**
 * @brief LPF_160_PCOEFF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 H_5_45                    0x3F9
 *    19:10 H_4_46                    0x6
 *    09:00 H_3_47                    0xE
 * </pre>
 */
#define RIU_LPF_160_PCOEFF_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000444)
#define RIU_LPF_160_PCOEFF_1_OFFSET      0x00000444
#define RIU_LPF_160_PCOEFF_1_INDEX       0x00000111
#define RIU_LPF_160_PCOEFF_1_RESET       0x3F90180E

static inline u32 riu_lpf_160_pcoeff_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_LPF_160_PCOEFF_1_ADDR);
}

static inline void riu_lpf_160_pcoeff_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_1_ADDR, value);
}

/* Field definitions */
#define RIU_LPF_160_PCOEFF_1_H_5_45_MASK    ((u32)0x3FF00000)
#define RIU_LPF_160_PCOEFF_1_H_5_45_LSB     20
#define RIU_LPF_160_PCOEFF_1_H_5_45_WIDTH    ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_1_H_4_46_MASK    ((u32)0x000FFC00)
#define RIU_LPF_160_PCOEFF_1_H_4_46_LSB     10
#define RIU_LPF_160_PCOEFF_1_H_4_46_WIDTH    ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_1_H_3_47_MASK    ((u32)0x000003FF)
#define RIU_LPF_160_PCOEFF_1_H_3_47_LSB     0
#define RIU_LPF_160_PCOEFF_1_H_3_47_WIDTH    ((u32)0x0000000A)

#define RIU_LPF_160_PCOEFF_1_H_5_45_RST     0x3F9
#define RIU_LPF_160_PCOEFF_1_H_4_46_RST     0x6
#define RIU_LPF_160_PCOEFF_1_H_3_47_RST     0xE

static inline void riu_lpf_160_pcoeff_1_pack(struct cl_chip *chip, u16 h_5_45, u16 h_4_46, u16 h_3_47)
{
	ASSERT_ERR_CHIP((((u32)h_5_45 << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)h_4_46 << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)h_3_47 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_1_ADDR, ((u32)h_5_45 << 20) | ((u32)h_4_46 << 10) | ((u32)h_3_47 << 0));
}

static inline void riu_lpf_160_pcoeff_1_unpack(struct cl_chip *chip, u16 *h_5_45, u16 *h_4_46, u16 *h_3_47)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_1_ADDR);

	*h_5_45 = (local_val & ((u32)0x3FF00000)) >> 20;
	*h_4_46 = (local_val & ((u32)0x000FFC00)) >> 10;
	*h_3_47 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_lpf_160_pcoeff_1_h_5_45_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_1_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_lpf_160_pcoeff_1_h_5_45_setf(struct cl_chip *chip, u16 h545)
{
	ASSERT_ERR_CHIP((((u32)h545 << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_1_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_1_ADDR) & ~((u32)0x3FF00000)) | ((u32)h545 << 20));
}

static inline u16 riu_lpf_160_pcoeff_1_h_4_46_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_1_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_lpf_160_pcoeff_1_h_4_46_setf(struct cl_chip *chip, u16 h446)
{
	ASSERT_ERR_CHIP((((u32)h446 << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_1_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_1_ADDR) & ~((u32)0x000FFC00)) | ((u32)h446 << 10));
}

static inline u16 riu_lpf_160_pcoeff_1_h_3_47_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_1_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_lpf_160_pcoeff_1_h_3_47_setf(struct cl_chip *chip, u16 h347)
{
	ASSERT_ERR_CHIP((((u32)h347 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_1_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_1_ADDR) & ~((u32)0x000003FF)) | ((u32)h347 << 0));
}

/**
 * @brief LPF_160_PCOEFF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 H_8_42                    0x3FE
 *    19:10 H_7_43                    0x3F2
 *    09:00 H_6_44                    0x3F0
 * </pre>
 */
#define RIU_LPF_160_PCOEFF_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000448)
#define RIU_LPF_160_PCOEFF_2_OFFSET      0x00000448
#define RIU_LPF_160_PCOEFF_2_INDEX       0x00000112
#define RIU_LPF_160_PCOEFF_2_RESET       0x3FEFCBF0

static inline u32 riu_lpf_160_pcoeff_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_LPF_160_PCOEFF_2_ADDR);
}

static inline void riu_lpf_160_pcoeff_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_2_ADDR, value);
}

/* Field definitions */
#define RIU_LPF_160_PCOEFF_2_H_8_42_MASK    ((u32)0x3FF00000)
#define RIU_LPF_160_PCOEFF_2_H_8_42_LSB     20
#define RIU_LPF_160_PCOEFF_2_H_8_42_WIDTH    ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_2_H_7_43_MASK    ((u32)0x000FFC00)
#define RIU_LPF_160_PCOEFF_2_H_7_43_LSB     10
#define RIU_LPF_160_PCOEFF_2_H_7_43_WIDTH    ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_2_H_6_44_MASK    ((u32)0x000003FF)
#define RIU_LPF_160_PCOEFF_2_H_6_44_LSB     0
#define RIU_LPF_160_PCOEFF_2_H_6_44_WIDTH    ((u32)0x0000000A)

#define RIU_LPF_160_PCOEFF_2_H_8_42_RST     0x3FE
#define RIU_LPF_160_PCOEFF_2_H_7_43_RST     0x3F2
#define RIU_LPF_160_PCOEFF_2_H_6_44_RST     0x3F0

static inline void riu_lpf_160_pcoeff_2_pack(struct cl_chip *chip, u16 h_8_42, u16 h_7_43, u16 h_6_44)
{
	ASSERT_ERR_CHIP((((u32)h_8_42 << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)h_7_43 << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)h_6_44 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_2_ADDR, ((u32)h_8_42 << 20) | ((u32)h_7_43 << 10) | ((u32)h_6_44 << 0));
}

static inline void riu_lpf_160_pcoeff_2_unpack(struct cl_chip *chip, u16 *h_8_42, u16 *h_7_43, u16 *h_6_44)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_2_ADDR);

	*h_8_42 = (local_val & ((u32)0x3FF00000)) >> 20;
	*h_7_43 = (local_val & ((u32)0x000FFC00)) >> 10;
	*h_6_44 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_lpf_160_pcoeff_2_h_8_42_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_2_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_lpf_160_pcoeff_2_h_8_42_setf(struct cl_chip *chip, u16 h842)
{
	ASSERT_ERR_CHIP((((u32)h842 << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_2_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_2_ADDR) & ~((u32)0x3FF00000)) | ((u32)h842 << 20));
}

static inline u16 riu_lpf_160_pcoeff_2_h_7_43_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_2_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_lpf_160_pcoeff_2_h_7_43_setf(struct cl_chip *chip, u16 h743)
{
	ASSERT_ERR_CHIP((((u32)h743 << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_2_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_2_ADDR) & ~((u32)0x000FFC00)) | ((u32)h743 << 10));
}

static inline u16 riu_lpf_160_pcoeff_2_h_6_44_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_2_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_lpf_160_pcoeff_2_h_6_44_setf(struct cl_chip *chip, u16 h644)
{
	ASSERT_ERR_CHIP((((u32)h644 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_2_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_2_ADDR) & ~((u32)0x000003FF)) | ((u32)h644 << 0));
}

/**
 * @brief LPF_160_PCOEFF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 H_11_39                   0xB
 *    19:10 H_10_40                   0x14
 *    09:00 H_9_41                    0xE
 * </pre>
 */
#define RIU_LPF_160_PCOEFF_3_ADDR        (REG_RIU_BASE_ADDR + 0x0000044C)
#define RIU_LPF_160_PCOEFF_3_OFFSET      0x0000044C
#define RIU_LPF_160_PCOEFF_3_INDEX       0x00000113
#define RIU_LPF_160_PCOEFF_3_RESET       0x00B0500E

static inline u32 riu_lpf_160_pcoeff_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_LPF_160_PCOEFF_3_ADDR);
}

static inline void riu_lpf_160_pcoeff_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_3_ADDR, value);
}

/* Field definitions */
#define RIU_LPF_160_PCOEFF_3_H_11_39_MASK    ((u32)0x3FF00000)
#define RIU_LPF_160_PCOEFF_3_H_11_39_LSB    20
#define RIU_LPF_160_PCOEFF_3_H_11_39_WIDTH    ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_3_H_10_40_MASK    ((u32)0x000FFC00)
#define RIU_LPF_160_PCOEFF_3_H_10_40_LSB    10
#define RIU_LPF_160_PCOEFF_3_H_10_40_WIDTH    ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_3_H_9_41_MASK    ((u32)0x000003FF)
#define RIU_LPF_160_PCOEFF_3_H_9_41_LSB     0
#define RIU_LPF_160_PCOEFF_3_H_9_41_WIDTH    ((u32)0x0000000A)

#define RIU_LPF_160_PCOEFF_3_H_11_39_RST    0xB
#define RIU_LPF_160_PCOEFF_3_H_10_40_RST    0x14
#define RIU_LPF_160_PCOEFF_3_H_9_41_RST     0xE

static inline void riu_lpf_160_pcoeff_3_pack(struct cl_chip *chip, u16 h_11_39, u16 h_10_40, u16 h_9_41)
{
	ASSERT_ERR_CHIP((((u32)h_11_39 << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)h_10_40 << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)h_9_41 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_3_ADDR, ((u32)h_11_39 << 20) | ((u32)h_10_40 << 10) | ((u32)h_9_41 << 0));
}

static inline void riu_lpf_160_pcoeff_3_unpack(struct cl_chip *chip, u16 *h_11_39, u16 *h_10_40, u16 *h_9_41)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_3_ADDR);

	*h_11_39 = (local_val & ((u32)0x3FF00000)) >> 20;
	*h_10_40 = (local_val & ((u32)0x000FFC00)) >> 10;
	*h_9_41 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_lpf_160_pcoeff_3_h_11_39_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_3_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_lpf_160_pcoeff_3_h_11_39_setf(struct cl_chip *chip, u16 h1139)
{
	ASSERT_ERR_CHIP((((u32)h1139 << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_3_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_3_ADDR) & ~((u32)0x3FF00000)) | ((u32)h1139 << 20));
}

static inline u16 riu_lpf_160_pcoeff_3_h_10_40_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_3_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_lpf_160_pcoeff_3_h_10_40_setf(struct cl_chip *chip, u16 h1040)
{
	ASSERT_ERR_CHIP((((u32)h1040 << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_3_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_3_ADDR) & ~((u32)0x000FFC00)) | ((u32)h1040 << 10));
}

static inline u16 riu_lpf_160_pcoeff_3_h_9_41_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_3_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_lpf_160_pcoeff_3_h_9_41_setf(struct cl_chip *chip, u16 h941)
{
	ASSERT_ERR_CHIP((((u32)h941 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_3_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_3_ADDR) & ~((u32)0x000003FF)) | ((u32)h941 << 0));
}

/**
 * @brief LPF_160_PCOEFF_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 H_14_36                   0x3EA
 *    19:10 H_13_37                   0x3E7
 *    09:00 H_12_38                   0x3F7
 * </pre>
 */
#define RIU_LPF_160_PCOEFF_4_ADDR        (REG_RIU_BASE_ADDR + 0x00000450)
#define RIU_LPF_160_PCOEFF_4_OFFSET      0x00000450
#define RIU_LPF_160_PCOEFF_4_INDEX       0x00000114
#define RIU_LPF_160_PCOEFF_4_RESET       0x3EAF9FF7

static inline u32 riu_lpf_160_pcoeff_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_LPF_160_PCOEFF_4_ADDR);
}

static inline void riu_lpf_160_pcoeff_4_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_4_ADDR, value);
}

/* Field definitions */
#define RIU_LPF_160_PCOEFF_4_H_14_36_MASK    ((u32)0x3FF00000)
#define RIU_LPF_160_PCOEFF_4_H_14_36_LSB    20
#define RIU_LPF_160_PCOEFF_4_H_14_36_WIDTH    ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_4_H_13_37_MASK    ((u32)0x000FFC00)
#define RIU_LPF_160_PCOEFF_4_H_13_37_LSB    10
#define RIU_LPF_160_PCOEFF_4_H_13_37_WIDTH    ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_4_H_12_38_MASK    ((u32)0x000003FF)
#define RIU_LPF_160_PCOEFF_4_H_12_38_LSB    0
#define RIU_LPF_160_PCOEFF_4_H_12_38_WIDTH    ((u32)0x0000000A)

#define RIU_LPF_160_PCOEFF_4_H_14_36_RST    0x3EA
#define RIU_LPF_160_PCOEFF_4_H_13_37_RST    0x3E7
#define RIU_LPF_160_PCOEFF_4_H_12_38_RST    0x3F7

static inline void riu_lpf_160_pcoeff_4_pack(struct cl_chip *chip, u16 h_14_36, u16 h_13_37, u16 h_12_38)
{
	ASSERT_ERR_CHIP((((u32)h_14_36 << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)h_13_37 << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)h_12_38 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_4_ADDR, ((u32)h_14_36 << 20) | ((u32)h_13_37 << 10) | ((u32)h_12_38 << 0));
}

static inline void riu_lpf_160_pcoeff_4_unpack(struct cl_chip *chip, u16 *h_14_36, u16 *h_13_37, u16 *h_12_38)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_4_ADDR);

	*h_14_36 = (local_val & ((u32)0x3FF00000)) >> 20;
	*h_13_37 = (local_val & ((u32)0x000FFC00)) >> 10;
	*h_12_38 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_lpf_160_pcoeff_4_h_14_36_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_4_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_lpf_160_pcoeff_4_h_14_36_setf(struct cl_chip *chip, u16 h1436)
{
	ASSERT_ERR_CHIP((((u32)h1436 << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_4_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_4_ADDR) & ~((u32)0x3FF00000)) | ((u32)h1436 << 20));
}

static inline u16 riu_lpf_160_pcoeff_4_h_13_37_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_4_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_lpf_160_pcoeff_4_h_13_37_setf(struct cl_chip *chip, u16 h1337)
{
	ASSERT_ERR_CHIP((((u32)h1337 << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_4_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_4_ADDR) & ~((u32)0x000FFC00)) | ((u32)h1337 << 10));
}

static inline u16 riu_lpf_160_pcoeff_4_h_12_38_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_4_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_lpf_160_pcoeff_4_h_12_38_setf(struct cl_chip *chip, u16 h1238)
{
	ASSERT_ERR_CHIP((((u32)h1238 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_4_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_4_ADDR) & ~((u32)0x000003FF)) | ((u32)h1238 << 0));
}

/**
 * @brief LPF_160_PCOEFF_5 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 H_17_33                   0x24
 *    19:10 H_16_34                   0x1C
 *    09:00 H_15_35                   0x1
 * </pre>
 */
#define RIU_LPF_160_PCOEFF_5_ADDR        (REG_RIU_BASE_ADDR + 0x00000454)
#define RIU_LPF_160_PCOEFF_5_OFFSET      0x00000454
#define RIU_LPF_160_PCOEFF_5_INDEX       0x00000115
#define RIU_LPF_160_PCOEFF_5_RESET       0x02407001

static inline u32 riu_lpf_160_pcoeff_5_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_LPF_160_PCOEFF_5_ADDR);
}

static inline void riu_lpf_160_pcoeff_5_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_5_ADDR, value);
}

/* Field definitions */
#define RIU_LPF_160_PCOEFF_5_H_17_33_MASK    ((u32)0x3FF00000)
#define RIU_LPF_160_PCOEFF_5_H_17_33_LSB    20
#define RIU_LPF_160_PCOEFF_5_H_17_33_WIDTH    ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_5_H_16_34_MASK    ((u32)0x000FFC00)
#define RIU_LPF_160_PCOEFF_5_H_16_34_LSB    10
#define RIU_LPF_160_PCOEFF_5_H_16_34_WIDTH    ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_5_H_15_35_MASK    ((u32)0x000003FF)
#define RIU_LPF_160_PCOEFF_5_H_15_35_LSB    0
#define RIU_LPF_160_PCOEFF_5_H_15_35_WIDTH    ((u32)0x0000000A)

#define RIU_LPF_160_PCOEFF_5_H_17_33_RST    0x24
#define RIU_LPF_160_PCOEFF_5_H_16_34_RST    0x1C
#define RIU_LPF_160_PCOEFF_5_H_15_35_RST    0x1

static inline void riu_lpf_160_pcoeff_5_pack(struct cl_chip *chip, u16 h_17_33, u16 h_16_34, u16 h_15_35)
{
	ASSERT_ERR_CHIP((((u32)h_17_33 << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)h_16_34 << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)h_15_35 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_5_ADDR, ((u32)h_17_33 << 20) | ((u32)h_16_34 << 10) | ((u32)h_15_35 << 0));
}

static inline void riu_lpf_160_pcoeff_5_unpack(struct cl_chip *chip, u16 *h_17_33, u16 *h_16_34, u16 *h_15_35)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_5_ADDR);

	*h_17_33 = (local_val & ((u32)0x3FF00000)) >> 20;
	*h_16_34 = (local_val & ((u32)0x000FFC00)) >> 10;
	*h_15_35 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_lpf_160_pcoeff_5_h_17_33_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_5_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_lpf_160_pcoeff_5_h_17_33_setf(struct cl_chip *chip, u16 h1733)
{
	ASSERT_ERR_CHIP((((u32)h1733 << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_5_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_5_ADDR) & ~((u32)0x3FF00000)) | ((u32)h1733 << 20));
}

static inline u16 riu_lpf_160_pcoeff_5_h_16_34_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_5_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_lpf_160_pcoeff_5_h_16_34_setf(struct cl_chip *chip, u16 h1634)
{
	ASSERT_ERR_CHIP((((u32)h1634 << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_5_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_5_ADDR) & ~((u32)0x000FFC00)) | ((u32)h1634 << 10));
}

static inline u16 riu_lpf_160_pcoeff_5_h_15_35_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_5_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_lpf_160_pcoeff_5_h_15_35_setf(struct cl_chip *chip, u16 h1535)
{
	ASSERT_ERR_CHIP((((u32)h1535 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_5_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_5_ADDR) & ~((u32)0x000003FF)) | ((u32)h1535 << 0));
}

/**
 * @brief LPF_160_PCOEFF_6 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 H_20_30                   0x3C2
 *    19:10 H_19_31                   0x3E1
 *    09:00 H_18_32                   0xD
 * </pre>
 */
#define RIU_LPF_160_PCOEFF_6_ADDR        (REG_RIU_BASE_ADDR + 0x00000458)
#define RIU_LPF_160_PCOEFF_6_OFFSET      0x00000458
#define RIU_LPF_160_PCOEFF_6_INDEX       0x00000116
#define RIU_LPF_160_PCOEFF_6_RESET       0x3C2F840D

static inline u32 riu_lpf_160_pcoeff_6_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_LPF_160_PCOEFF_6_ADDR);
}

static inline void riu_lpf_160_pcoeff_6_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_6_ADDR, value);
}

/* Field definitions */
#define RIU_LPF_160_PCOEFF_6_H_20_30_MASK    ((u32)0x3FF00000)
#define RIU_LPF_160_PCOEFF_6_H_20_30_LSB    20
#define RIU_LPF_160_PCOEFF_6_H_20_30_WIDTH    ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_6_H_19_31_MASK    ((u32)0x000FFC00)
#define RIU_LPF_160_PCOEFF_6_H_19_31_LSB    10
#define RIU_LPF_160_PCOEFF_6_H_19_31_WIDTH    ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_6_H_18_32_MASK    ((u32)0x000003FF)
#define RIU_LPF_160_PCOEFF_6_H_18_32_LSB    0
#define RIU_LPF_160_PCOEFF_6_H_18_32_WIDTH    ((u32)0x0000000A)

#define RIU_LPF_160_PCOEFF_6_H_20_30_RST    0x3C2
#define RIU_LPF_160_PCOEFF_6_H_19_31_RST    0x3E1
#define RIU_LPF_160_PCOEFF_6_H_18_32_RST    0xD

static inline void riu_lpf_160_pcoeff_6_pack(struct cl_chip *chip, u16 h_20_30, u16 h_19_31, u16 h_18_32)
{
	ASSERT_ERR_CHIP((((u32)h_20_30 << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)h_19_31 << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)h_18_32 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_6_ADDR, ((u32)h_20_30 << 20) | ((u32)h_19_31 << 10) | ((u32)h_18_32 << 0));
}

static inline void riu_lpf_160_pcoeff_6_unpack(struct cl_chip *chip, u16 *h_20_30, u16 *h_19_31, u16 *h_18_32)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_6_ADDR);

	*h_20_30 = (local_val & ((u32)0x3FF00000)) >> 20;
	*h_19_31 = (local_val & ((u32)0x000FFC00)) >> 10;
	*h_18_32 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_lpf_160_pcoeff_6_h_20_30_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_6_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_lpf_160_pcoeff_6_h_20_30_setf(struct cl_chip *chip, u16 h2030)
{
	ASSERT_ERR_CHIP((((u32)h2030 << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_6_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_6_ADDR) & ~((u32)0x3FF00000)) | ((u32)h2030 << 20));
}

static inline u16 riu_lpf_160_pcoeff_6_h_19_31_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_6_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_lpf_160_pcoeff_6_h_19_31_setf(struct cl_chip *chip, u16 h1931)
{
	ASSERT_ERR_CHIP((((u32)h1931 << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_6_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_6_ADDR) & ~((u32)0x000FFC00)) | ((u32)h1931 << 10));
}

static inline u16 riu_lpf_160_pcoeff_6_h_18_32_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_6_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_lpf_160_pcoeff_6_h_18_32_setf(struct cl_chip *chip, u16 h1832)
{
	ASSERT_ERR_CHIP((((u32)h1832 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_6_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_6_ADDR) & ~((u32)0x000003FF)) | ((u32)h1832 << 0));
}

/**
 * @brief LPF_160_PCOEFF_7 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 H_23_27                   0x93
 *    19:10 H_22_28                   0x20
 *    09:00 H_21_29                   0x3D3
 * </pre>
 */
#define RIU_LPF_160_PCOEFF_7_ADDR        (REG_RIU_BASE_ADDR + 0x0000045C)
#define RIU_LPF_160_PCOEFF_7_OFFSET      0x0000045C
#define RIU_LPF_160_PCOEFF_7_INDEX       0x00000117
#define RIU_LPF_160_PCOEFF_7_RESET       0x093083D3

static inline u32 riu_lpf_160_pcoeff_7_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_LPF_160_PCOEFF_7_ADDR);
}

static inline void riu_lpf_160_pcoeff_7_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_7_ADDR, value);
}

/* Field definitions */
#define RIU_LPF_160_PCOEFF_7_H_23_27_MASK    ((u32)0x3FF00000)
#define RIU_LPF_160_PCOEFF_7_H_23_27_LSB    20
#define RIU_LPF_160_PCOEFF_7_H_23_27_WIDTH    ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_7_H_22_28_MASK    ((u32)0x000FFC00)
#define RIU_LPF_160_PCOEFF_7_H_22_28_LSB    10
#define RIU_LPF_160_PCOEFF_7_H_22_28_WIDTH    ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_7_H_21_29_MASK    ((u32)0x000003FF)
#define RIU_LPF_160_PCOEFF_7_H_21_29_LSB    0
#define RIU_LPF_160_PCOEFF_7_H_21_29_WIDTH    ((u32)0x0000000A)

#define RIU_LPF_160_PCOEFF_7_H_23_27_RST    0x93
#define RIU_LPF_160_PCOEFF_7_H_22_28_RST    0x20
#define RIU_LPF_160_PCOEFF_7_H_21_29_RST    0x3D3

static inline void riu_lpf_160_pcoeff_7_pack(struct cl_chip *chip, u16 h_23_27, u16 h_22_28, u16 h_21_29)
{
	ASSERT_ERR_CHIP((((u32)h_23_27 << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)h_22_28 << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)h_21_29 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_7_ADDR, ((u32)h_23_27 << 20) | ((u32)h_22_28 << 10) | ((u32)h_21_29 << 0));
}

static inline void riu_lpf_160_pcoeff_7_unpack(struct cl_chip *chip, u16 *h_23_27, u16 *h_22_28, u16 *h_21_29)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_7_ADDR);

	*h_23_27 = (local_val & ((u32)0x3FF00000)) >> 20;
	*h_22_28 = (local_val & ((u32)0x000FFC00)) >> 10;
	*h_21_29 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_lpf_160_pcoeff_7_h_23_27_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_7_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_lpf_160_pcoeff_7_h_23_27_setf(struct cl_chip *chip, u16 h2327)
{
	ASSERT_ERR_CHIP((((u32)h2327 << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_7_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_7_ADDR) & ~((u32)0x3FF00000)) | ((u32)h2327 << 20));
}

static inline u16 riu_lpf_160_pcoeff_7_h_22_28_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_7_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_lpf_160_pcoeff_7_h_22_28_setf(struct cl_chip *chip, u16 h2228)
{
	ASSERT_ERR_CHIP((((u32)h2228 << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_7_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_7_ADDR) & ~((u32)0x000FFC00)) | ((u32)h2228 << 10));
}

static inline u16 riu_lpf_160_pcoeff_7_h_21_29_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_7_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_lpf_160_pcoeff_7_h_21_29_setf(struct cl_chip *chip, u16 h2129)
{
	ASSERT_ERR_CHIP((((u32)h2129 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_7_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_7_ADDR) & ~((u32)0x000003FF)) | ((u32)h2129 << 0));
}

/**
 * @brief LPF_160_PCOEFF_8 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    19:10 H_25                      0x123
 *    09:00 H_24_26                   0xFA
 * </pre>
 */
#define RIU_LPF_160_PCOEFF_8_ADDR        (REG_RIU_BASE_ADDR + 0x00000460)
#define RIU_LPF_160_PCOEFF_8_OFFSET      0x00000460
#define RIU_LPF_160_PCOEFF_8_INDEX       0x00000118
#define RIU_LPF_160_PCOEFF_8_RESET       0x00048CFA

static inline u32 riu_lpf_160_pcoeff_8_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_LPF_160_PCOEFF_8_ADDR);
}

static inline void riu_lpf_160_pcoeff_8_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_8_ADDR, value);
}

/* Field definitions */
#define RIU_LPF_160_PCOEFF_8_H_25_MASK      ((u32)0x000FFC00)
#define RIU_LPF_160_PCOEFF_8_H_25_LSB       10
#define RIU_LPF_160_PCOEFF_8_H_25_WIDTH     ((u32)0x0000000A)
#define RIU_LPF_160_PCOEFF_8_H_24_26_MASK    ((u32)0x000003FF)
#define RIU_LPF_160_PCOEFF_8_H_24_26_LSB    0
#define RIU_LPF_160_PCOEFF_8_H_24_26_WIDTH    ((u32)0x0000000A)

#define RIU_LPF_160_PCOEFF_8_H_25_RST       0x123
#define RIU_LPF_160_PCOEFF_8_H_24_26_RST    0xFA

static inline void riu_lpf_160_pcoeff_8_pack(struct cl_chip *chip, u16 h_25, u16 h_24_26)
{
	ASSERT_ERR_CHIP((((u32)h_25 << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)h_24_26 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_8_ADDR, ((u32)h_25 << 10) | ((u32)h_24_26 << 0));
}

static inline void riu_lpf_160_pcoeff_8_unpack(struct cl_chip *chip, u16 *h_25, u16 *h_24_26)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_8_ADDR);

	*h_25 = (local_val & ((u32)0x000FFC00)) >> 10;
	*h_24_26 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_lpf_160_pcoeff_8_h_25_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_8_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_lpf_160_pcoeff_8_h_25_setf(struct cl_chip *chip, u16 h25)
{
	ASSERT_ERR_CHIP((((u32)h25 << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_8_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_8_ADDR) & ~((u32)0x000FFC00)) | ((u32)h25 << 10));
}

static inline u16 riu_lpf_160_pcoeff_8_h_24_26_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_PCOEFF_8_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_lpf_160_pcoeff_8_h_24_26_setf(struct cl_chip *chip, u16 h2426)
{
	ASSERT_ERR_CHIP((((u32)h2426 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_LPF_160_PCOEFF_8_ADDR, (cl_reg_read(chip, RIU_LPF_160_PCOEFF_8_ADDR) & ~((u32)0x000003FF)) | ((u32)h2426 << 0));
}

/**
 * @brief LPF_160_BYPASS register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    01    BYPASS_TYPE               0
 *    00    BYPASS_MODE               0
 * </pre>
 */
#define RIU_LPF_160_BYPASS_ADDR        (REG_RIU_BASE_ADDR + 0x00000464)
#define RIU_LPF_160_BYPASS_OFFSET      0x00000464
#define RIU_LPF_160_BYPASS_INDEX       0x00000119
#define RIU_LPF_160_BYPASS_RESET       0x00000000

static inline u32 riu_lpf_160_bypass_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_LPF_160_BYPASS_ADDR);
}

static inline void riu_lpf_160_bypass_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_LPF_160_BYPASS_ADDR, value);
}

/* Field definitions */
#define RIU_LPF_160_BYPASS_BYPASS_TYPE_BIT    ((u32)0x00000002)
#define RIU_LPF_160_BYPASS_BYPASS_TYPE_POS    1
#define RIU_LPF_160_BYPASS_BYPASS_MODE_BIT    ((u32)0x00000001)
#define RIU_LPF_160_BYPASS_BYPASS_MODE_POS    0

#define RIU_LPF_160_BYPASS_BYPASS_TYPE_RST    0x0
#define RIU_LPF_160_BYPASS_BYPASS_MODE_RST    0x0

static inline void riu_lpf_160_bypass_pack(struct cl_chip *chip, u8 bypass_type, u8 bypass_mode)
{
	ASSERT_ERR_CHIP((((u32)bypass_type << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)bypass_mode << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_LPF_160_BYPASS_ADDR, ((u32)bypass_type << 1) | ((u32)bypass_mode << 0));
}

static inline void riu_lpf_160_bypass_unpack(struct cl_chip *chip, u8 *bypass_type, u8 *bypass_mode)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_BYPASS_ADDR);

	*bypass_type = (local_val & ((u32)0x00000002)) >> 1;
	*bypass_mode = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_lpf_160_bypass_bypass_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_BYPASS_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void riu_lpf_160_bypass_bypass_type_setf(struct cl_chip *chip, u8 bypasstype)
{
	ASSERT_ERR_CHIP((((u32)bypasstype << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_LPF_160_BYPASS_ADDR, (cl_reg_read(chip, RIU_LPF_160_BYPASS_ADDR) & ~((u32)0x00000002)) | ((u32)bypasstype << 1));
}

static inline u8 riu_lpf_160_bypass_bypass_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LPF_160_BYPASS_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_lpf_160_bypass_bypass_mode_setf(struct cl_chip *chip, u8 bypassmode)
{
	ASSERT_ERR_CHIP((((u32)bypassmode << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_LPF_160_BYPASS_ADDR, (cl_reg_read(chip, RIU_LPF_160_BYPASS_ADDR) & ~((u32)0x00000001)) | ((u32)bypassmode << 0));
}

/**
 * @brief AGCINBDPOWPER_20_STAT_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 INBDPOWDBMPER20_3         0x0
 *    23:16 INBDPOWDBMPER20_2         0x0
 *    15:08 INBDPOWDBMPER20_1         0x0
 *    07:00 INBDPOWDBMPER20_0         0x0
 * </pre>
 */
#define RIU_AGCINBDPOWPER_20_STAT_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000470)
#define RIU_AGCINBDPOWPER_20_STAT_0_OFFSET      0x00000470
#define RIU_AGCINBDPOWPER_20_STAT_0_INDEX       0x0000011C
#define RIU_AGCINBDPOWPER_20_STAT_0_RESET       0x00000000

static inline u32 riu_agcinbdpowper_20_stat_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCINBDPOWPER_20_STAT_0_ADDR);
}

/* Field definitions */
#define RIU_AGCINBDPOWPER_20_STAT_0_INBDPOWDBMPER_20_3_MASK    ((u32)0xFF000000)
#define RIU_AGCINBDPOWPER_20_STAT_0_INBDPOWDBMPER_20_3_LSB    24
#define RIU_AGCINBDPOWPER_20_STAT_0_INBDPOWDBMPER_20_3_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOWPER_20_STAT_0_INBDPOWDBMPER_20_2_MASK    ((u32)0x00FF0000)
#define RIU_AGCINBDPOWPER_20_STAT_0_INBDPOWDBMPER_20_2_LSB    16
#define RIU_AGCINBDPOWPER_20_STAT_0_INBDPOWDBMPER_20_2_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOWPER_20_STAT_0_INBDPOWDBMPER_20_1_MASK    ((u32)0x0000FF00)
#define RIU_AGCINBDPOWPER_20_STAT_0_INBDPOWDBMPER_20_1_LSB    8
#define RIU_AGCINBDPOWPER_20_STAT_0_INBDPOWDBMPER_20_1_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOWPER_20_STAT_0_INBDPOWDBMPER_20_0_MASK    ((u32)0x000000FF)
#define RIU_AGCINBDPOWPER_20_STAT_0_INBDPOWDBMPER_20_0_LSB    0
#define RIU_AGCINBDPOWPER_20_STAT_0_INBDPOWDBMPER_20_0_WIDTH    ((u32)0x00000008)

#define RIU_AGCINBDPOWPER_20_STAT_0_INBDPOWDBMPER_20_3_RST    0x0
#define RIU_AGCINBDPOWPER_20_STAT_0_INBDPOWDBMPER_20_2_RST    0x0
#define RIU_AGCINBDPOWPER_20_STAT_0_INBDPOWDBMPER_20_1_RST    0x0
#define RIU_AGCINBDPOWPER_20_STAT_0_INBDPOWDBMPER_20_0_RST    0x0

static inline void riu_agcinbdpowper_20_stat_0_unpack(struct cl_chip *chip, u8 *inbdpowdbmper20_3, u8 *inbdpowdbmper20_2, u8 *inbdpowdbmper20_1, u8 *inbdpowdbmper20_0)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWPER_20_STAT_0_ADDR);

	*inbdpowdbmper20_3 = (local_val & ((u32)0xFF000000)) >> 24;
	*inbdpowdbmper20_2 = (local_val & ((u32)0x00FF0000)) >> 16;
	*inbdpowdbmper20_1 = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpowdbmper20_0 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_agcinbdpowper_20_stat_0_inbdpowdbmper_20_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWPER_20_STAT_0_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_agcinbdpowper_20_stat_0_inbdpowdbmper_20_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWPER_20_STAT_0_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_agcinbdpowper_20_stat_0_inbdpowdbmper_20_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWPER_20_STAT_0_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_agcinbdpowper_20_stat_0_inbdpowdbmper_20_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWPER_20_STAT_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief AGCINBDPOWPER_20_STAT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 INBDPOWDBMPER20_7         0x0
 *    23:16 INBDPOWDBMPER20_6         0x0
 *    15:08 INBDPOWDBMPER20_5         0x0
 *    07:00 INBDPOWDBMPER20_4         0x0
 * </pre>
 */
#define RIU_AGCINBDPOWPER_20_STAT_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000474)
#define RIU_AGCINBDPOWPER_20_STAT_1_OFFSET      0x00000474
#define RIU_AGCINBDPOWPER_20_STAT_1_INDEX       0x0000011D
#define RIU_AGCINBDPOWPER_20_STAT_1_RESET       0x00000000

static inline u32 riu_agcinbdpowper_20_stat_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCINBDPOWPER_20_STAT_1_ADDR);
}

/* Field definitions */
#define RIU_AGCINBDPOWPER_20_STAT_1_INBDPOWDBMPER_20_7_MASK    ((u32)0xFF000000)
#define RIU_AGCINBDPOWPER_20_STAT_1_INBDPOWDBMPER_20_7_LSB    24
#define RIU_AGCINBDPOWPER_20_STAT_1_INBDPOWDBMPER_20_7_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOWPER_20_STAT_1_INBDPOWDBMPER_20_6_MASK    ((u32)0x00FF0000)
#define RIU_AGCINBDPOWPER_20_STAT_1_INBDPOWDBMPER_20_6_LSB    16
#define RIU_AGCINBDPOWPER_20_STAT_1_INBDPOWDBMPER_20_6_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOWPER_20_STAT_1_INBDPOWDBMPER_20_5_MASK    ((u32)0x0000FF00)
#define RIU_AGCINBDPOWPER_20_STAT_1_INBDPOWDBMPER_20_5_LSB    8
#define RIU_AGCINBDPOWPER_20_STAT_1_INBDPOWDBMPER_20_5_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOWPER_20_STAT_1_INBDPOWDBMPER_20_4_MASK    ((u32)0x000000FF)
#define RIU_AGCINBDPOWPER_20_STAT_1_INBDPOWDBMPER_20_4_LSB    0
#define RIU_AGCINBDPOWPER_20_STAT_1_INBDPOWDBMPER_20_4_WIDTH    ((u32)0x00000008)

#define RIU_AGCINBDPOWPER_20_STAT_1_INBDPOWDBMPER_20_7_RST    0x0
#define RIU_AGCINBDPOWPER_20_STAT_1_INBDPOWDBMPER_20_6_RST    0x0
#define RIU_AGCINBDPOWPER_20_STAT_1_INBDPOWDBMPER_20_5_RST    0x0
#define RIU_AGCINBDPOWPER_20_STAT_1_INBDPOWDBMPER_20_4_RST    0x0

static inline void riu_agcinbdpowper_20_stat_1_unpack(struct cl_chip *chip, u8 *inbdpowdbmper20_7, u8 *inbdpowdbmper20_6, u8 *inbdpowdbmper20_5, u8 *inbdpowdbmper20_4)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWPER_20_STAT_1_ADDR);

	*inbdpowdbmper20_7 = (local_val & ((u32)0xFF000000)) >> 24;
	*inbdpowdbmper20_6 = (local_val & ((u32)0x00FF0000)) >> 16;
	*inbdpowdbmper20_5 = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpowdbmper20_4 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_agcinbdpowper_20_stat_1_inbdpowdbmper_20_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWPER_20_STAT_1_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_agcinbdpowper_20_stat_1_inbdpowdbmper_20_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWPER_20_STAT_1_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_agcinbdpowper_20_stat_1_inbdpowdbmper_20_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWPER_20_STAT_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_agcinbdpowper_20_stat_1_inbdpowdbmper_20_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWPER_20_STAT_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief AGCINBDPOWNOISEPER_20_STAT_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 INBDPOWNOISEDBMPER20_3    0x0
 *    23:16 INBDPOWNOISEDBMPER20_2    0x0
 *    15:08 INBDPOWNOISEDBMPER20_1    0x0
 *    07:00 INBDPOWNOISEDBMPER20_0    0x0
 * </pre>
 */
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000478)
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_OFFSET      0x00000478
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INDEX       0x0000011E
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_RESET       0x00000000

static inline u32 riu_agcinbdpownoiseper_20_stat_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCINBDPOWNOISEPER_20_STAT_0_ADDR);
}

/* Field definitions */
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INBDPOWNOISEDBMPER_20_3_MASK    ((u32)0xFF000000)
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INBDPOWNOISEDBMPER_20_3_LSB    24
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INBDPOWNOISEDBMPER_20_3_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INBDPOWNOISEDBMPER_20_2_MASK    ((u32)0x00FF0000)
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INBDPOWNOISEDBMPER_20_2_LSB    16
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INBDPOWNOISEDBMPER_20_2_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INBDPOWNOISEDBMPER_20_1_MASK    ((u32)0x0000FF00)
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INBDPOWNOISEDBMPER_20_1_LSB    8
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INBDPOWNOISEDBMPER_20_1_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INBDPOWNOISEDBMPER_20_0_MASK    ((u32)0x000000FF)
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INBDPOWNOISEDBMPER_20_0_LSB    0
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INBDPOWNOISEDBMPER_20_0_WIDTH    ((u32)0x00000008)

#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INBDPOWNOISEDBMPER_20_3_RST    0x0
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INBDPOWNOISEDBMPER_20_2_RST    0x0
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INBDPOWNOISEDBMPER_20_1_RST    0x0
#define RIU_AGCINBDPOWNOISEPER_20_STAT_0_INBDPOWNOISEDBMPER_20_0_RST    0x0

static inline void riu_agcinbdpownoiseper_20_stat_0_unpack(struct cl_chip *chip, u8 *inbdpownoisedbmper20_3, u8 *inbdpownoisedbmper20_2, u8 *inbdpownoisedbmper20_1, u8 *inbdpownoisedbmper20_0)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWNOISEPER_20_STAT_0_ADDR);

	*inbdpownoisedbmper20_3 = (local_val & ((u32)0xFF000000)) >> 24;
	*inbdpownoisedbmper20_2 = (local_val & ((u32)0x00FF0000)) >> 16;
	*inbdpownoisedbmper20_1 = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpownoisedbmper20_0 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_agcinbdpownoiseper_20_stat_0_inbdpownoisedbmper_20_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWNOISEPER_20_STAT_0_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_agcinbdpownoiseper_20_stat_0_inbdpownoisedbmper_20_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWNOISEPER_20_STAT_0_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_agcinbdpownoiseper_20_stat_0_inbdpownoisedbmper_20_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWNOISEPER_20_STAT_0_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_agcinbdpownoiseper_20_stat_0_inbdpownoisedbmper_20_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWNOISEPER_20_STAT_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief AGCINBDPOWNOISEPER_20_STAT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 INBDPOWNOISEDBMPER20_7    0x0
 *    23:16 INBDPOWNOISEDBMPER20_6    0x0
 *    15:08 INBDPOWNOISEDBMPER20_5    0x0
 *    07:00 INBDPOWNOISEDBMPER20_4    0x0
 * </pre>
 */
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_ADDR        (REG_RIU_BASE_ADDR + 0x0000047C)
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_OFFSET      0x0000047C
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INDEX       0x0000011F
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_RESET       0x00000000

static inline u32 riu_agcinbdpownoiseper_20_stat_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCINBDPOWNOISEPER_20_STAT_1_ADDR);
}

/* Field definitions */
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INBDPOWNOISEDBMPER_20_7_MASK    ((u32)0xFF000000)
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INBDPOWNOISEDBMPER_20_7_LSB    24
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INBDPOWNOISEDBMPER_20_7_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INBDPOWNOISEDBMPER_20_6_MASK    ((u32)0x00FF0000)
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INBDPOWNOISEDBMPER_20_6_LSB    16
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INBDPOWNOISEDBMPER_20_6_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INBDPOWNOISEDBMPER_20_5_MASK    ((u32)0x0000FF00)
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INBDPOWNOISEDBMPER_20_5_LSB    8
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INBDPOWNOISEDBMPER_20_5_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INBDPOWNOISEDBMPER_20_4_MASK    ((u32)0x000000FF)
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INBDPOWNOISEDBMPER_20_4_LSB    0
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INBDPOWNOISEDBMPER_20_4_WIDTH    ((u32)0x00000008)

#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INBDPOWNOISEDBMPER_20_7_RST    0x0
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INBDPOWNOISEDBMPER_20_6_RST    0x0
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INBDPOWNOISEDBMPER_20_5_RST    0x0
#define RIU_AGCINBDPOWNOISEPER_20_STAT_1_INBDPOWNOISEDBMPER_20_4_RST    0x0

static inline void riu_agcinbdpownoiseper_20_stat_1_unpack(struct cl_chip *chip, u8 *inbdpownoisedbmper20_7, u8 *inbdpownoisedbmper20_6, u8 *inbdpownoisedbmper20_5, u8 *inbdpownoisedbmper20_4)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWNOISEPER_20_STAT_1_ADDR);

	*inbdpownoisedbmper20_7 = (local_val & ((u32)0xFF000000)) >> 24;
	*inbdpownoisedbmper20_6 = (local_val & ((u32)0x00FF0000)) >> 16;
	*inbdpownoisedbmper20_5 = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpownoisedbmper20_4 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_agcinbdpownoiseper_20_stat_1_inbdpownoisedbmper_20_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWNOISEPER_20_STAT_1_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_agcinbdpownoiseper_20_stat_1_inbdpownoisedbmper_20_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWNOISEPER_20_STAT_1_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_agcinbdpownoiseper_20_stat_1_inbdpownoisedbmper_20_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWNOISEPER_20_STAT_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_agcinbdpownoiseper_20_stat_1_inbdpownoisedbmper_20_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOWNOISEPER_20_STAT_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief INBDPOWFORMAC_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 INBDPOW20_PDBMA3_MAC      0x0
 *    23:16 INBDPOW20_PDBMA2_MAC      0x0
 *    15:08 INBDPOW20_PDBMA1_MAC      0x0
 *    07:00 INBDPOW20_PDBMA0_MAC      0x0
 * </pre>
 */
#define RIU_INBDPOWFORMAC_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000480)
#define RIU_INBDPOWFORMAC_0_OFFSET      0x00000480
#define RIU_INBDPOWFORMAC_0_INDEX       0x00000120
#define RIU_INBDPOWFORMAC_0_RESET       0x00000000

static inline u32 riu_inbdpowformac_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_INBDPOWFORMAC_0_ADDR);
}

/* Field definitions */
#define RIU_INBDPOWFORMAC_0_INBDPOW_20_PDBMA_3_MAC_MASK    ((u32)0xFF000000)
#define RIU_INBDPOWFORMAC_0_INBDPOW_20_PDBMA_3_MAC_LSB    24
#define RIU_INBDPOWFORMAC_0_INBDPOW_20_PDBMA_3_MAC_WIDTH    ((u32)0x00000008)
#define RIU_INBDPOWFORMAC_0_INBDPOW_20_PDBMA_2_MAC_MASK    ((u32)0x00FF0000)
#define RIU_INBDPOWFORMAC_0_INBDPOW_20_PDBMA_2_MAC_LSB    16
#define RIU_INBDPOWFORMAC_0_INBDPOW_20_PDBMA_2_MAC_WIDTH    ((u32)0x00000008)
#define RIU_INBDPOWFORMAC_0_INBDPOW_20_PDBMA_1_MAC_MASK    ((u32)0x0000FF00)
#define RIU_INBDPOWFORMAC_0_INBDPOW_20_PDBMA_1_MAC_LSB    8
#define RIU_INBDPOWFORMAC_0_INBDPOW_20_PDBMA_1_MAC_WIDTH    ((u32)0x00000008)
#define RIU_INBDPOWFORMAC_0_INBDPOW_20_PDBMA_0_MAC_MASK    ((u32)0x000000FF)
#define RIU_INBDPOWFORMAC_0_INBDPOW_20_PDBMA_0_MAC_LSB    0
#define RIU_INBDPOWFORMAC_0_INBDPOW_20_PDBMA_0_MAC_WIDTH    ((u32)0x00000008)

#define RIU_INBDPOWFORMAC_0_INBDPOW_20_PDBMA_3_MAC_RST    0x0
#define RIU_INBDPOWFORMAC_0_INBDPOW_20_PDBMA_2_MAC_RST    0x0
#define RIU_INBDPOWFORMAC_0_INBDPOW_20_PDBMA_1_MAC_RST    0x0
#define RIU_INBDPOWFORMAC_0_INBDPOW_20_PDBMA_0_MAC_RST    0x0

static inline void riu_inbdpowformac_0_unpack(struct cl_chip *chip, u8 *inbdpow20_pdbma3_mac, u8 *inbdpow20_pdbma2_mac, u8 *inbdpow20_pdbma1_mac, u8 *inbdpow20_pdbma0_mac)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_0_ADDR);

	*inbdpow20_pdbma3_mac = (local_val & ((u32)0xFF000000)) >> 24;
	*inbdpow20_pdbma2_mac = (local_val & ((u32)0x00FF0000)) >> 16;
	*inbdpow20_pdbma1_mac = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpow20_pdbma0_mac = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_inbdpowformac_0_inbdpow_20_pdbma_3_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_0_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_inbdpowformac_0_inbdpow_20_pdbma_2_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_0_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_inbdpowformac_0_inbdpow_20_pdbma_1_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_0_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_inbdpowformac_0_inbdpow_20_pdbma_0_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief INBDPOWFORMAC_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 INBDPOW20_PDBMA5_MAC      0x0
 *    07:00 INBDPOW20_PDBMA4_MAC      0x0
 * </pre>
 */
#define RIU_INBDPOWFORMAC_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000484)
#define RIU_INBDPOWFORMAC_1_OFFSET      0x00000484
#define RIU_INBDPOWFORMAC_1_INDEX       0x00000121
#define RIU_INBDPOWFORMAC_1_RESET       0x00000000

static inline u32 riu_inbdpowformac_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_INBDPOWFORMAC_1_ADDR);
}

/* Field definitions */
#define RIU_INBDPOWFORMAC_1_INBDPOW_20_PDBMA_5_MAC_MASK    ((u32)0x0000FF00)
#define RIU_INBDPOWFORMAC_1_INBDPOW_20_PDBMA_5_MAC_LSB    8
#define RIU_INBDPOWFORMAC_1_INBDPOW_20_PDBMA_5_MAC_WIDTH    ((u32)0x00000008)
#define RIU_INBDPOWFORMAC_1_INBDPOW_20_PDBMA_4_MAC_MASK    ((u32)0x000000FF)
#define RIU_INBDPOWFORMAC_1_INBDPOW_20_PDBMA_4_MAC_LSB    0
#define RIU_INBDPOWFORMAC_1_INBDPOW_20_PDBMA_4_MAC_WIDTH    ((u32)0x00000008)

#define RIU_INBDPOWFORMAC_1_INBDPOW_20_PDBMA_5_MAC_RST    0x0
#define RIU_INBDPOWFORMAC_1_INBDPOW_20_PDBMA_4_MAC_RST    0x0

static inline void riu_inbdpowformac_1_unpack(struct cl_chip *chip, u8 *inbdpow20_pdbma5_mac, u8 *inbdpow20_pdbma4_mac)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_1_ADDR);

	*inbdpow20_pdbma5_mac = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpow20_pdbma4_mac = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_inbdpowformac_1_inbdpow_20_pdbma_5_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_inbdpowformac_1_inbdpow_20_pdbma_4_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief INBDPOWFORMAC_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:16 INBDPOW80_SDBM_MAC        0x0
 *    15:08 INBDPOW40_SDBM_MAC        0x0
 *    07:00 INBDPOW20_SDBM_MAC        0x0
 * </pre>
 */
#define RIU_INBDPOWFORMAC_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000488)
#define RIU_INBDPOWFORMAC_2_OFFSET      0x00000488
#define RIU_INBDPOWFORMAC_2_INDEX       0x00000122
#define RIU_INBDPOWFORMAC_2_RESET       0x00000000

static inline u32 riu_inbdpowformac_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_INBDPOWFORMAC_2_ADDR);
}

/* Field definitions */
#define RIU_INBDPOWFORMAC_2_INBDPOW_80_SDBM_MAC_MASK    ((u32)0x00FF0000)
#define RIU_INBDPOWFORMAC_2_INBDPOW_80_SDBM_MAC_LSB    16
#define RIU_INBDPOWFORMAC_2_INBDPOW_80_SDBM_MAC_WIDTH    ((u32)0x00000008)
#define RIU_INBDPOWFORMAC_2_INBDPOW_40_SDBM_MAC_MASK    ((u32)0x0000FF00)
#define RIU_INBDPOWFORMAC_2_INBDPOW_40_SDBM_MAC_LSB    8
#define RIU_INBDPOWFORMAC_2_INBDPOW_40_SDBM_MAC_WIDTH    ((u32)0x00000008)
#define RIU_INBDPOWFORMAC_2_INBDPOW_20_SDBM_MAC_MASK    ((u32)0x000000FF)
#define RIU_INBDPOWFORMAC_2_INBDPOW_20_SDBM_MAC_LSB    0
#define RIU_INBDPOWFORMAC_2_INBDPOW_20_SDBM_MAC_WIDTH    ((u32)0x00000008)

#define RIU_INBDPOWFORMAC_2_INBDPOW_80_SDBM_MAC_RST    0x0
#define RIU_INBDPOWFORMAC_2_INBDPOW_40_SDBM_MAC_RST    0x0
#define RIU_INBDPOWFORMAC_2_INBDPOW_20_SDBM_MAC_RST    0x0

static inline void riu_inbdpowformac_2_unpack(struct cl_chip *chip, u8 *inbdpow80_sdbm_mac, u8 *inbdpow40_sdbm_mac, u8 *inbdpow20_sdbm_mac)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_2_ADDR);

	*inbdpow80_sdbm_mac = (local_val & ((u32)0x00FF0000)) >> 16;
	*inbdpow40_sdbm_mac = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpow20_sdbm_mac = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_inbdpowformac_2_inbdpow_80_sdbm_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_2_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_inbdpowformac_2_inbdpow_40_sdbm_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_2_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_inbdpowformac_2_inbdpow_20_sdbm_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief INBDPOWFORMAC_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 INBDPOWPER20_PDBM_3_MAC   0x0
 *    23:16 INBDPOWPER20_PDBM_2_MAC   0x0
 *    15:08 INBDPOWPER20_PDBM_1_MAC   0x0
 *    07:00 INBDPOWPER20_PDBM_0_MAC   0x0
 * </pre>
 */
#define RIU_INBDPOWFORMAC_3_ADDR        (REG_RIU_BASE_ADDR + 0x0000048C)
#define RIU_INBDPOWFORMAC_3_OFFSET      0x0000048C
#define RIU_INBDPOWFORMAC_3_INDEX       0x00000123
#define RIU_INBDPOWFORMAC_3_RESET       0x00000000

static inline u32 riu_inbdpowformac_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_INBDPOWFORMAC_3_ADDR);
}

/* Field definitions */
#define RIU_INBDPOWFORMAC_3_INBDPOWPER_20_PDBM_3_MAC_MASK    ((u32)0xFF000000)
#define RIU_INBDPOWFORMAC_3_INBDPOWPER_20_PDBM_3_MAC_LSB    24
#define RIU_INBDPOWFORMAC_3_INBDPOWPER_20_PDBM_3_MAC_WIDTH    ((u32)0x00000008)
#define RIU_INBDPOWFORMAC_3_INBDPOWPER_20_PDBM_2_MAC_MASK    ((u32)0x00FF0000)
#define RIU_INBDPOWFORMAC_3_INBDPOWPER_20_PDBM_2_MAC_LSB    16
#define RIU_INBDPOWFORMAC_3_INBDPOWPER_20_PDBM_2_MAC_WIDTH    ((u32)0x00000008)
#define RIU_INBDPOWFORMAC_3_INBDPOWPER_20_PDBM_1_MAC_MASK    ((u32)0x0000FF00)
#define RIU_INBDPOWFORMAC_3_INBDPOWPER_20_PDBM_1_MAC_LSB    8
#define RIU_INBDPOWFORMAC_3_INBDPOWPER_20_PDBM_1_MAC_WIDTH    ((u32)0x00000008)
#define RIU_INBDPOWFORMAC_3_INBDPOWPER_20_PDBM_0_MAC_MASK    ((u32)0x000000FF)
#define RIU_INBDPOWFORMAC_3_INBDPOWPER_20_PDBM_0_MAC_LSB    0
#define RIU_INBDPOWFORMAC_3_INBDPOWPER_20_PDBM_0_MAC_WIDTH    ((u32)0x00000008)

#define RIU_INBDPOWFORMAC_3_INBDPOWPER_20_PDBM_3_MAC_RST    0x0
#define RIU_INBDPOWFORMAC_3_INBDPOWPER_20_PDBM_2_MAC_RST    0x0
#define RIU_INBDPOWFORMAC_3_INBDPOWPER_20_PDBM_1_MAC_RST    0x0
#define RIU_INBDPOWFORMAC_3_INBDPOWPER_20_PDBM_0_MAC_RST    0x0

static inline void riu_inbdpowformac_3_unpack(struct cl_chip *chip, u8 *inbdpowper20_pdbm_3_mac, u8 *inbdpowper20_pdbm_2_mac, u8 *inbdpowper20_pdbm_1_mac, u8 *inbdpowper20_pdbm_0_mac)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_3_ADDR);

	*inbdpowper20_pdbm_3_mac = (local_val & ((u32)0xFF000000)) >> 24;
	*inbdpowper20_pdbm_2_mac = (local_val & ((u32)0x00FF0000)) >> 16;
	*inbdpowper20_pdbm_1_mac = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpowper20_pdbm_0_mac = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_inbdpowformac_3_inbdpowper_20_pdbm_3_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_3_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_inbdpowformac_3_inbdpowper_20_pdbm_2_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_3_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_inbdpowformac_3_inbdpowper_20_pdbm_1_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_3_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_inbdpowformac_3_inbdpowper_20_pdbm_0_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_3_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief INBDPOWFORMAC_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 INBDPOWPER20_PDBM_7_MAC   0x0
 *    23:16 INBDPOWPER20_PDBM_6_MAC   0x0
 *    15:08 INBDPOWPER20_PDBM_5_MAC   0x0
 *    07:00 INBDPOWPER20_PDBM_4_MAC   0x0
 * </pre>
 */
#define RIU_INBDPOWFORMAC_4_ADDR        (REG_RIU_BASE_ADDR + 0x00000490)
#define RIU_INBDPOWFORMAC_4_OFFSET      0x00000490
#define RIU_INBDPOWFORMAC_4_INDEX       0x00000124
#define RIU_INBDPOWFORMAC_4_RESET       0x00000000

static inline u32 riu_inbdpowformac_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_INBDPOWFORMAC_4_ADDR);
}

/* Field definitions */
#define RIU_INBDPOWFORMAC_4_INBDPOWPER_20_PDBM_7_MAC_MASK    ((u32)0xFF000000)
#define RIU_INBDPOWFORMAC_4_INBDPOWPER_20_PDBM_7_MAC_LSB    24
#define RIU_INBDPOWFORMAC_4_INBDPOWPER_20_PDBM_7_MAC_WIDTH    ((u32)0x00000008)
#define RIU_INBDPOWFORMAC_4_INBDPOWPER_20_PDBM_6_MAC_MASK    ((u32)0x00FF0000)
#define RIU_INBDPOWFORMAC_4_INBDPOWPER_20_PDBM_6_MAC_LSB    16
#define RIU_INBDPOWFORMAC_4_INBDPOWPER_20_PDBM_6_MAC_WIDTH    ((u32)0x00000008)
#define RIU_INBDPOWFORMAC_4_INBDPOWPER_20_PDBM_5_MAC_MASK    ((u32)0x0000FF00)
#define RIU_INBDPOWFORMAC_4_INBDPOWPER_20_PDBM_5_MAC_LSB    8
#define RIU_INBDPOWFORMAC_4_INBDPOWPER_20_PDBM_5_MAC_WIDTH    ((u32)0x00000008)
#define RIU_INBDPOWFORMAC_4_INBDPOWPER_20_PDBM_4_MAC_MASK    ((u32)0x000000FF)
#define RIU_INBDPOWFORMAC_4_INBDPOWPER_20_PDBM_4_MAC_LSB    0
#define RIU_INBDPOWFORMAC_4_INBDPOWPER_20_PDBM_4_MAC_WIDTH    ((u32)0x00000008)

#define RIU_INBDPOWFORMAC_4_INBDPOWPER_20_PDBM_7_MAC_RST    0x0
#define RIU_INBDPOWFORMAC_4_INBDPOWPER_20_PDBM_6_MAC_RST    0x0
#define RIU_INBDPOWFORMAC_4_INBDPOWPER_20_PDBM_5_MAC_RST    0x0
#define RIU_INBDPOWFORMAC_4_INBDPOWPER_20_PDBM_4_MAC_RST    0x0

static inline void riu_inbdpowformac_4_unpack(struct cl_chip *chip, u8 *inbdpowper20_pdbm_7_mac, u8 *inbdpowper20_pdbm_6_mac, u8 *inbdpowper20_pdbm_5_mac, u8 *inbdpowper20_pdbm_4_mac)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_4_ADDR);

	*inbdpowper20_pdbm_7_mac = (local_val & ((u32)0xFF000000)) >> 24;
	*inbdpowper20_pdbm_6_mac = (local_val & ((u32)0x00FF0000)) >> 16;
	*inbdpowper20_pdbm_5_mac = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpowper20_pdbm_4_mac = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_inbdpowformac_4_inbdpowper_20_pdbm_7_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_4_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_inbdpowformac_4_inbdpowper_20_pdbm_6_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_4_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_inbdpowformac_4_inbdpowper_20_pdbm_5_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_4_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_inbdpowformac_4_inbdpowper_20_pdbm_4_mac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_INBDPOWFORMAC_4_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief CCA_CNT_GI_20_S register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_GI_20_S           0x0
 * </pre>
 */
#define RIU_CCA_CNT_GI_20_S_ADDR        (REG_RIU_BASE_ADDR + 0x00000494)
#define RIU_CCA_CNT_GI_20_S_OFFSET      0x00000494
#define RIU_CCA_CNT_GI_20_S_INDEX       0x00000125
#define RIU_CCA_CNT_GI_20_S_RESET       0x00000000

static inline u32 riu_cca_cnt_gi_20_s_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_GI_20_S_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_GI_20_S_CCA_CNT_GI_20_S_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_GI_20_S_CCA_CNT_GI_20_S_LSB    0
#define RIU_CCA_CNT_GI_20_S_CCA_CNT_GI_20_S_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_GI_20_S_CCA_CNT_GI_20_S_RST    0x0

static inline u32 riu_cca_cnt_gi_20_s_cca_cnt_gi_20_s_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_GI_20_S_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_GI_40_S register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_GI_40_S           0x0
 * </pre>
 */
#define RIU_CCA_CNT_GI_40_S_ADDR        (REG_RIU_BASE_ADDR + 0x00000498)
#define RIU_CCA_CNT_GI_40_S_OFFSET      0x00000498
#define RIU_CCA_CNT_GI_40_S_INDEX       0x00000126
#define RIU_CCA_CNT_GI_40_S_RESET       0x00000000

static inline u32 riu_cca_cnt_gi_40_s_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_GI_40_S_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_GI_40_S_CCA_CNT_GI_40_S_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_GI_40_S_CCA_CNT_GI_40_S_LSB    0
#define RIU_CCA_CNT_GI_40_S_CCA_CNT_GI_40_S_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_GI_40_S_CCA_CNT_GI_40_S_RST    0x0

static inline u32 riu_cca_cnt_gi_40_s_cca_cnt_gi_40_s_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_GI_40_S_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_GI_80_S register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_GI_80_S           0x0
 * </pre>
 */
#define RIU_CCA_CNT_GI_80_S_ADDR        (REG_RIU_BASE_ADDR + 0x0000049C)
#define RIU_CCA_CNT_GI_80_S_OFFSET      0x0000049C
#define RIU_CCA_CNT_GI_80_S_INDEX       0x00000127
#define RIU_CCA_CNT_GI_80_S_RESET       0x00000000

static inline u32 riu_cca_cnt_gi_80_s_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_GI_80_S_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_GI_80_S_CCA_CNT_GI_80_S_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_GI_80_S_CCA_CNT_GI_80_S_LSB    0
#define RIU_CCA_CNT_GI_80_S_CCA_CNT_GI_80_S_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_GI_80_S_CCA_CNT_GI_80_S_RST    0x0

static inline u32 riu_cca_cnt_gi_80_s_cca_cnt_gi_80_s_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_GI_80_S_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_ENERGY_THR_40_S register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_ENERGY_THR_40_S   0x0
 * </pre>
 */
#define RIU_CCA_CNT_ENERGY_THR_40_S_ADDR        (REG_RIU_BASE_ADDR + 0x000004A0)
#define RIU_CCA_CNT_ENERGY_THR_40_S_OFFSET      0x000004A0
#define RIU_CCA_CNT_ENERGY_THR_40_S_INDEX       0x00000128
#define RIU_CCA_CNT_ENERGY_THR_40_S_RESET       0x00000000

static inline u32 riu_cca_cnt_energy_thr_40_s_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_40_S_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_ENERGY_THR_40_S_CCA_CNT_ENERGY_THR_40_S_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_ENERGY_THR_40_S_CCA_CNT_ENERGY_THR_40_S_LSB    0
#define RIU_CCA_CNT_ENERGY_THR_40_S_CCA_CNT_ENERGY_THR_40_S_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_ENERGY_THR_40_S_CCA_CNT_ENERGY_THR_40_S_RST    0x0

static inline u32 riu_cca_cnt_energy_thr_40_s_cca_cnt_energy_thr_40_s_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_40_S_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_ENERGY_THR_80_S register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_ENERGY_THR_80_S   0x0
 * </pre>
 */
#define RIU_CCA_CNT_ENERGY_THR_80_S_ADDR        (REG_RIU_BASE_ADDR + 0x000004A4)
#define RIU_CCA_CNT_ENERGY_THR_80_S_OFFSET      0x000004A4
#define RIU_CCA_CNT_ENERGY_THR_80_S_INDEX       0x00000129
#define RIU_CCA_CNT_ENERGY_THR_80_S_RESET       0x00000000

static inline u32 riu_cca_cnt_energy_thr_80_s_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_80_S_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_ENERGY_THR_80_S_CCA_CNT_ENERGY_THR_80_S_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_ENERGY_THR_80_S_CCA_CNT_ENERGY_THR_80_S_LSB    0
#define RIU_CCA_CNT_ENERGY_THR_80_S_CCA_CNT_ENERGY_THR_80_S_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_ENERGY_THR_80_S_CCA_CNT_ENERGY_THR_80_S_RST    0x0

static inline u32 riu_cca_cnt_energy_thr_80_s_cca_cnt_energy_thr_80_s_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_80_S_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_ENERGY_THR_20_BAND_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_ENERGY_THR_20_BAND_0 0x0
 * </pre>
 */
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_0_ADDR        (REG_RIU_BASE_ADDR + 0x000004A8)
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_0_OFFSET      0x000004A8
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_0_INDEX       0x0000012A
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_0_RESET       0x00000000

static inline u32 riu_cca_cnt_energy_thr_20_band_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_BAND_0_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_0_CCA_CNT_ENERGY_THR_20_BAND_0_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_0_CCA_CNT_ENERGY_THR_20_BAND_0_LSB    0
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_0_CCA_CNT_ENERGY_THR_20_BAND_0_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_ENERGY_THR_20_BAND_0_CCA_CNT_ENERGY_THR_20_BAND_0_RST    0x0

static inline u32 riu_cca_cnt_energy_thr_20_band_0_cca_cnt_energy_thr_20_band_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_BAND_0_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_ENERGY_THR_20_BAND_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_ENERGY_THR_20_BAND_1 0x0
 * </pre>
 */
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_1_ADDR        (REG_RIU_BASE_ADDR + 0x000004AC)
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_1_OFFSET      0x000004AC
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_1_INDEX       0x0000012B
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_1_RESET       0x00000000

static inline u32 riu_cca_cnt_energy_thr_20_band_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_BAND_1_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_1_CCA_CNT_ENERGY_THR_20_BAND_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_1_CCA_CNT_ENERGY_THR_20_BAND_1_LSB    0
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_1_CCA_CNT_ENERGY_THR_20_BAND_1_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_ENERGY_THR_20_BAND_1_CCA_CNT_ENERGY_THR_20_BAND_1_RST    0x0

static inline u32 riu_cca_cnt_energy_thr_20_band_1_cca_cnt_energy_thr_20_band_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_BAND_1_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_ENERGY_THR_20_BAND_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_ENERGY_THR_20_BAND_2 0x0
 * </pre>
 */
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_2_ADDR        (REG_RIU_BASE_ADDR + 0x000004B0)
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_2_OFFSET      0x000004B0
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_2_INDEX       0x0000012C
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_2_RESET       0x00000000

static inline u32 riu_cca_cnt_energy_thr_20_band_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_BAND_2_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_2_CCA_CNT_ENERGY_THR_20_BAND_2_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_2_CCA_CNT_ENERGY_THR_20_BAND_2_LSB    0
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_2_CCA_CNT_ENERGY_THR_20_BAND_2_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_ENERGY_THR_20_BAND_2_CCA_CNT_ENERGY_THR_20_BAND_2_RST    0x0

static inline u32 riu_cca_cnt_energy_thr_20_band_2_cca_cnt_energy_thr_20_band_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_BAND_2_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_ENERGY_THR_20_BAND_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_ENERGY_THR_20_BAND_3 0x0
 * </pre>
 */
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_3_ADDR        (REG_RIU_BASE_ADDR + 0x000004B4)
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_3_OFFSET      0x000004B4
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_3_INDEX       0x0000012D
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_3_RESET       0x00000000

static inline u32 riu_cca_cnt_energy_thr_20_band_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_BAND_3_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_3_CCA_CNT_ENERGY_THR_20_BAND_3_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_3_CCA_CNT_ENERGY_THR_20_BAND_3_LSB    0
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_3_CCA_CNT_ENERGY_THR_20_BAND_3_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_ENERGY_THR_20_BAND_3_CCA_CNT_ENERGY_THR_20_BAND_3_RST    0x0

static inline u32 riu_cca_cnt_energy_thr_20_band_3_cca_cnt_energy_thr_20_band_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_BAND_3_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_ENERGY_THR_20_BAND_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_ENERGY_THR_20_BAND_4 0x0
 * </pre>
 */
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_4_ADDR        (REG_RIU_BASE_ADDR + 0x000004B8)
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_4_OFFSET      0x000004B8
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_4_INDEX       0x0000012E
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_4_RESET       0x00000000

static inline u32 riu_cca_cnt_energy_thr_20_band_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_BAND_4_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_4_CCA_CNT_ENERGY_THR_20_BAND_4_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_4_CCA_CNT_ENERGY_THR_20_BAND_4_LSB    0
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_4_CCA_CNT_ENERGY_THR_20_BAND_4_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_ENERGY_THR_20_BAND_4_CCA_CNT_ENERGY_THR_20_BAND_4_RST    0x0

static inline u32 riu_cca_cnt_energy_thr_20_band_4_cca_cnt_energy_thr_20_band_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_BAND_4_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_ENERGY_THR_20_BAND_5 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_ENERGY_THR_20_BAND_5 0x0
 * </pre>
 */
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_5_ADDR        (REG_RIU_BASE_ADDR + 0x000004BC)
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_5_OFFSET      0x000004BC
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_5_INDEX       0x0000012F
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_5_RESET       0x00000000

static inline u32 riu_cca_cnt_energy_thr_20_band_5_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_BAND_5_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_5_CCA_CNT_ENERGY_THR_20_BAND_5_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_5_CCA_CNT_ENERGY_THR_20_BAND_5_LSB    0
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_5_CCA_CNT_ENERGY_THR_20_BAND_5_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_ENERGY_THR_20_BAND_5_CCA_CNT_ENERGY_THR_20_BAND_5_RST    0x0

static inline u32 riu_cca_cnt_energy_thr_20_band_5_cca_cnt_energy_thr_20_band_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_BAND_5_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_ENERGY_THR_20_BAND_6 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_ENERGY_THR_20_BAND_6 0x0
 * </pre>
 */
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_6_ADDR        (REG_RIU_BASE_ADDR + 0x000004C0)
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_6_OFFSET      0x000004C0
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_6_INDEX       0x00000130
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_6_RESET       0x00000000

static inline u32 riu_cca_cnt_energy_thr_20_band_6_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_BAND_6_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_6_CCA_CNT_ENERGY_THR_20_BAND_6_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_6_CCA_CNT_ENERGY_THR_20_BAND_6_LSB    0
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_6_CCA_CNT_ENERGY_THR_20_BAND_6_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_ENERGY_THR_20_BAND_6_CCA_CNT_ENERGY_THR_20_BAND_6_RST    0x0

static inline u32 riu_cca_cnt_energy_thr_20_band_6_cca_cnt_energy_thr_20_band_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_BAND_6_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief CCA_CNT_ENERGY_THR_20_BAND_7 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_CNT_ENERGY_THR_20_BAND_7 0x0
 * </pre>
 */
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_7_ADDR        (REG_RIU_BASE_ADDR + 0x000004C4)
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_7_OFFSET      0x000004C4
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_7_INDEX       0x00000131
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_7_RESET       0x00000000

static inline u32 riu_cca_cnt_energy_thr_20_band_7_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_BAND_7_ADDR);
}

/* Field definitions */
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_7_CCA_CNT_ENERGY_THR_20_BAND_7_MASK    ((u32)0xFFFFFFFF)
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_7_CCA_CNT_ENERGY_THR_20_BAND_7_LSB    0
#define RIU_CCA_CNT_ENERGY_THR_20_BAND_7_CCA_CNT_ENERGY_THR_20_BAND_7_WIDTH    ((u32)0x00000020)

#define RIU_CCA_CNT_ENERGY_THR_20_BAND_7_CCA_CNT_ENERGY_THR_20_BAND_7_RST    0x0

static inline u32 riu_cca_cnt_energy_thr_20_band_7_cca_cnt_energy_thr_20_band_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_CNT_ENERGY_THR_20_BAND_7_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief IQDC_TX_0_COEF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_tx0_fir_coeff_11     0x0
 *    20:12 iqdc_tx0_fir_coeff_10     0x0
 *    08:00 iqdc_tx0_fir_coeff_9      0x0
 * </pre>
 */
#define RIU_IQDC_TX_0_COEF_3_ADDR        (REG_RIU_BASE_ADDR + 0x000004C8)
#define RIU_IQDC_TX_0_COEF_3_OFFSET      0x000004C8
#define RIU_IQDC_TX_0_COEF_3_INDEX       0x00000132
#define RIU_IQDC_TX_0_COEF_3_RESET       0x00000000

static inline u32 riu_iqdc_tx_0_coef_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_0_COEF_3_ADDR);
}

static inline void riu_iqdc_tx_0_coef_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_0_COEF_3_IQDC_TX_0_FIR_COEFF_11_MASK    ((u32)0xFF800000)
#define RIU_IQDC_TX_0_COEF_3_IQDC_TX_0_FIR_COEFF_11_LSB    23
#define RIU_IQDC_TX_0_COEF_3_IQDC_TX_0_FIR_COEFF_11_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_0_COEF_3_IQDC_TX_0_FIR_COEFF_10_MASK    ((u32)0x001FF000)
#define RIU_IQDC_TX_0_COEF_3_IQDC_TX_0_FIR_COEFF_10_LSB    12
#define RIU_IQDC_TX_0_COEF_3_IQDC_TX_0_FIR_COEFF_10_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_0_COEF_3_IQDC_TX_0_FIR_COEFF_9_MASK    ((u32)0x000001FF)
#define RIU_IQDC_TX_0_COEF_3_IQDC_TX_0_FIR_COEFF_9_LSB    0
#define RIU_IQDC_TX_0_COEF_3_IQDC_TX_0_FIR_COEFF_9_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_TX_0_COEF_3_IQDC_TX_0_FIR_COEFF_11_RST    0x0
#define RIU_IQDC_TX_0_COEF_3_IQDC_TX_0_FIR_COEFF_10_RST    0x0
#define RIU_IQDC_TX_0_COEF_3_IQDC_TX_0_FIR_COEFF_9_RST    0x0

static inline void riu_iqdc_tx_0_coef_3_pack(struct cl_chip *chip, u16 iqdc_tx0_fir_coeff_11, u16 iqdc_tx0_fir_coeff_10, u16 iqdc_tx0_fir_coeff_9)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_11 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_10 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_9 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_3_ADDR, ((u32)iqdc_tx0_fir_coeff_11 << 23) | ((u32)iqdc_tx0_fir_coeff_10 << 12) | ((u32)iqdc_tx0_fir_coeff_9 << 0));
}

static inline void riu_iqdc_tx_0_coef_3_unpack(struct cl_chip *chip, u16 *iqdc_tx0_fir_coeff_11, u16 *iqdc_tx0_fir_coeff_10, u16 *iqdc_tx0_fir_coeff_9)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_3_ADDR);

	*iqdc_tx0_fir_coeff_11 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_tx0_fir_coeff_10 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_tx0_fir_coeff_9 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_tx_0_coef_3_iqdc_tx_0_fir_coeff_11_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_3_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_tx_0_coef_3_iqdc_tx_0_fir_coeff_11_setf(struct cl_chip *chip, u16 iqdctx0fircoeff11)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff11 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_3_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_3_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdctx0fircoeff11 << 23));
}

static inline u16 riu_iqdc_tx_0_coef_3_iqdc_tx_0_fir_coeff_10_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_3_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_tx_0_coef_3_iqdc_tx_0_fir_coeff_10_setf(struct cl_chip *chip, u16 iqdctx0fircoeff10)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff10 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_3_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_3_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdctx0fircoeff10 << 12));
}

static inline u16 riu_iqdc_tx_0_coef_3_iqdc_tx_0_fir_coeff_9_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_3_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_tx_0_coef_3_iqdc_tx_0_fir_coeff_9_setf(struct cl_chip *chip, u16 iqdctx0fircoeff9)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff9 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_3_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_3_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdctx0fircoeff9 << 0));
}

/**
 * @brief IQDC_TX_1_COEF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_tx1_fir_coeff_11     0x0
 *    20:12 iqdc_tx1_fir_coeff_10     0x0
 *    08:00 iqdc_tx1_fir_coeff_9      0x0
 * </pre>
 */
#define RIU_IQDC_TX_1_COEF_3_ADDR        (REG_RIU_BASE_ADDR + 0x000004CC)
#define RIU_IQDC_TX_1_COEF_3_OFFSET      0x000004CC
#define RIU_IQDC_TX_1_COEF_3_INDEX       0x00000133
#define RIU_IQDC_TX_1_COEF_3_RESET       0x00000000

static inline u32 riu_iqdc_tx_1_coef_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_1_COEF_3_ADDR);
}

static inline void riu_iqdc_tx_1_coef_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_1_COEF_3_IQDC_TX_1_FIR_COEFF_11_MASK    ((u32)0xFF800000)
#define RIU_IQDC_TX_1_COEF_3_IQDC_TX_1_FIR_COEFF_11_LSB    23
#define RIU_IQDC_TX_1_COEF_3_IQDC_TX_1_FIR_COEFF_11_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_1_COEF_3_IQDC_TX_1_FIR_COEFF_10_MASK    ((u32)0x001FF000)
#define RIU_IQDC_TX_1_COEF_3_IQDC_TX_1_FIR_COEFF_10_LSB    12
#define RIU_IQDC_TX_1_COEF_3_IQDC_TX_1_FIR_COEFF_10_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_1_COEF_3_IQDC_TX_1_FIR_COEFF_9_MASK    ((u32)0x000001FF)
#define RIU_IQDC_TX_1_COEF_3_IQDC_TX_1_FIR_COEFF_9_LSB    0
#define RIU_IQDC_TX_1_COEF_3_IQDC_TX_1_FIR_COEFF_9_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_TX_1_COEF_3_IQDC_TX_1_FIR_COEFF_11_RST    0x0
#define RIU_IQDC_TX_1_COEF_3_IQDC_TX_1_FIR_COEFF_10_RST    0x0
#define RIU_IQDC_TX_1_COEF_3_IQDC_TX_1_FIR_COEFF_9_RST    0x0

static inline void riu_iqdc_tx_1_coef_3_pack(struct cl_chip *chip, u16 iqdc_tx1_fir_coeff_11, u16 iqdc_tx1_fir_coeff_10, u16 iqdc_tx1_fir_coeff_9)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_11 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_10 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_9 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_3_ADDR, ((u32)iqdc_tx1_fir_coeff_11 << 23) | ((u32)iqdc_tx1_fir_coeff_10 << 12) | ((u32)iqdc_tx1_fir_coeff_9 << 0));
}

static inline void riu_iqdc_tx_1_coef_3_unpack(struct cl_chip *chip, u16 *iqdc_tx1_fir_coeff_11, u16 *iqdc_tx1_fir_coeff_10, u16 *iqdc_tx1_fir_coeff_9)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_3_ADDR);

	*iqdc_tx1_fir_coeff_11 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_tx1_fir_coeff_10 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_tx1_fir_coeff_9 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_tx_1_coef_3_iqdc_tx_1_fir_coeff_11_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_3_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_tx_1_coef_3_iqdc_tx_1_fir_coeff_11_setf(struct cl_chip *chip, u16 iqdctx1fircoeff11)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff11 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_3_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_3_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdctx1fircoeff11 << 23));
}

static inline u16 riu_iqdc_tx_1_coef_3_iqdc_tx_1_fir_coeff_10_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_3_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_tx_1_coef_3_iqdc_tx_1_fir_coeff_10_setf(struct cl_chip *chip, u16 iqdctx1fircoeff10)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff10 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_3_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_3_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdctx1fircoeff10 << 12));
}

static inline u16 riu_iqdc_tx_1_coef_3_iqdc_tx_1_fir_coeff_9_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_3_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_tx_1_coef_3_iqdc_tx_1_fir_coeff_9_setf(struct cl_chip *chip, u16 iqdctx1fircoeff9)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff9 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_3_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_3_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdctx1fircoeff9 << 0));
}

/**
 * @brief RX_FRONT_END_DELAY register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    26    RX_FE_DELAY_160_EN        0
 *    25    RX_FE_DELAY_80_EN         0
 *    24    RX_FE_DELAY_40_EN         0
 *    23:16 RX_FE_DELAY_160           0x0
 *    14:08 RX_FE_DELAY_80            0x0
 *    05:00 RX_FE_DELAY_40            0x0
 * </pre>
 */
#define RIU_RX_FRONT_END_DELAY_ADDR        (REG_RIU_BASE_ADDR + 0x000004D0)
#define RIU_RX_FRONT_END_DELAY_OFFSET      0x000004D0
#define RIU_RX_FRONT_END_DELAY_INDEX       0x00000134
#define RIU_RX_FRONT_END_DELAY_RESET       0x00000000

static inline u32 riu_rx_front_end_delay_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RX_FRONT_END_DELAY_ADDR);
}

static inline void riu_rx_front_end_delay_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RX_FRONT_END_DELAY_ADDR, value);
}

/* Field definitions */
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_160_EN_BIT    ((u32)0x04000000)
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_160_EN_POS    26
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_80_EN_BIT    ((u32)0x02000000)
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_80_EN_POS    25
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_40_EN_BIT    ((u32)0x01000000)
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_40_EN_POS    24
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_160_MASK    ((u32)0x00FF0000)
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_160_LSB    16
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_160_WIDTH    ((u32)0x00000008)
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_80_MASK    ((u32)0x00007F00)
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_80_LSB    8
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_80_WIDTH    ((u32)0x00000007)
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_40_MASK    ((u32)0x0000003F)
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_40_LSB    0
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_40_WIDTH    ((u32)0x00000006)

#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_160_EN_RST    0x0
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_80_EN_RST    0x0
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_40_EN_RST    0x0
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_160_RST    0x0
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_80_RST    0x0
#define RIU_RX_FRONT_END_DELAY_RX_FE_DELAY_40_RST    0x0

static inline void riu_rx_front_end_delay_pack(struct cl_chip *chip, u8 rx_fe_delay_160_en, u8 rx_fe_delay_80_en, u8 rx_fe_delay_40_en, u8 rx_fe_delay_160, u8 rx_fe_delay_80, u8 rx_fe_delay_40)
{
	ASSERT_ERR_CHIP((((u32)rx_fe_delay_160_en << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rx_fe_delay_80_en << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rx_fe_delay_40_en << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rx_fe_delay_160 << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)rx_fe_delay_80 << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)rx_fe_delay_40 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RX_FRONT_END_DELAY_ADDR, ((u32)rx_fe_delay_160_en << 26) | ((u32)rx_fe_delay_80_en << 25) | ((u32)rx_fe_delay_40_en << 24) | ((u32)rx_fe_delay_160 << 16) | ((u32)rx_fe_delay_80 << 8) | ((u32)rx_fe_delay_40 << 0));
}

static inline void riu_rx_front_end_delay_unpack(struct cl_chip *chip, u8 *rx_fe_delay_160_en, u8 *rx_fe_delay_80_en, u8 *rx_fe_delay_40_en, u8 *rx_fe_delay_160, u8 *rx_fe_delay_80, u8 *rx_fe_delay_40)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_FRONT_END_DELAY_ADDR);

	*rx_fe_delay_160_en = (local_val & ((u32)0x04000000)) >> 26;
	*rx_fe_delay_80_en = (local_val & ((u32)0x02000000)) >> 25;
	*rx_fe_delay_40_en = (local_val & ((u32)0x01000000)) >> 24;
	*rx_fe_delay_160 = (local_val & ((u32)0x00FF0000)) >> 16;
	*rx_fe_delay_80 = (local_val & ((u32)0x00007F00)) >> 8;
	*rx_fe_delay_40 = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rx_front_end_delay_rx_fe_delay_160_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_FRONT_END_DELAY_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void riu_rx_front_end_delay_rx_fe_delay_160_en_setf(struct cl_chip *chip, u8 rxfedelay160en)
{
	ASSERT_ERR_CHIP((((u32)rxfedelay160en << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RIU_RX_FRONT_END_DELAY_ADDR, (cl_reg_read(chip, RIU_RX_FRONT_END_DELAY_ADDR) & ~((u32)0x04000000)) | ((u32)rxfedelay160en << 26));
}

static inline u8 riu_rx_front_end_delay_rx_fe_delay_80_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_FRONT_END_DELAY_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void riu_rx_front_end_delay_rx_fe_delay_80_en_setf(struct cl_chip *chip, u8 rxfedelay80en)
{
	ASSERT_ERR_CHIP((((u32)rxfedelay80en << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RIU_RX_FRONT_END_DELAY_ADDR, (cl_reg_read(chip, RIU_RX_FRONT_END_DELAY_ADDR) & ~((u32)0x02000000)) | ((u32)rxfedelay80en << 25));
}

static inline u8 riu_rx_front_end_delay_rx_fe_delay_40_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_FRONT_END_DELAY_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void riu_rx_front_end_delay_rx_fe_delay_40_en_setf(struct cl_chip *chip, u8 rxfedelay40en)
{
	ASSERT_ERR_CHIP((((u32)rxfedelay40en << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RIU_RX_FRONT_END_DELAY_ADDR, (cl_reg_read(chip, RIU_RX_FRONT_END_DELAY_ADDR) & ~((u32)0x01000000)) | ((u32)rxfedelay40en << 24));
}

static inline u8 riu_rx_front_end_delay_rx_fe_delay_160_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_FRONT_END_DELAY_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rx_front_end_delay_rx_fe_delay_160_setf(struct cl_chip *chip, u8 rxfedelay160)
{
	ASSERT_ERR_CHIP((((u32)rxfedelay160 << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RX_FRONT_END_DELAY_ADDR, (cl_reg_read(chip, RIU_RX_FRONT_END_DELAY_ADDR) & ~((u32)0x00FF0000)) | ((u32)rxfedelay160 << 16));
}

static inline u8 riu_rx_front_end_delay_rx_fe_delay_80_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_FRONT_END_DELAY_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rx_front_end_delay_rx_fe_delay_80_setf(struct cl_chip *chip, u8 rxfedelay80)
{
	ASSERT_ERR_CHIP((((u32)rxfedelay80 << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RX_FRONT_END_DELAY_ADDR, (cl_reg_read(chip, RIU_RX_FRONT_END_DELAY_ADDR) & ~((u32)0x00007F00)) | ((u32)rxfedelay80 << 8));
}

static inline u8 riu_rx_front_end_delay_rx_fe_delay_40_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_FRONT_END_DELAY_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rx_front_end_delay_rx_fe_delay_40_setf(struct cl_chip *chip, u8 rxfedelay40)
{
	ASSERT_ERR_CHIP((((u32)rxfedelay40 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RX_FRONT_END_DELAY_ADDR, (cl_reg_read(chip, RIU_RX_FRONT_END_DELAY_ADDR) & ~((u32)0x0000003F)) | ((u32)rxfedelay40 << 0));
}

/**
 * @brief RWNXAGCDSP_6 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    Sensitivity_Sel_stat      0
 *    26:20 HTSIGMCS_SW_VAL           0x0
 *    19    HTSIGMCSValid_SW_VAL      0
 *    18    HTSIGMCSValid_SW_SET      0
 *    17    SW_Sensitivity_Sel_FORCE  0
 *    16    SW_Sensitivity_Sel        0
 *    15:08 INBDPOWMINDBM_ANT1_SET1   0x9C
 *    07:00 INBDPOWMINDBM_ANT0_SET1   0x9C
 * </pre>
 */
#define RIU_RWNXAGCDSP_6_ADDR        (REG_RIU_BASE_ADDR + 0x000004D4)
#define RIU_RWNXAGCDSP_6_OFFSET      0x000004D4
#define RIU_RWNXAGCDSP_6_INDEX       0x00000135
#define RIU_RWNXAGCDSP_6_RESET       0x00009C9C

static inline u32 riu_rwnxagcdsp_6_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR);
}

static inline void riu_rwnxagcdsp_6_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCDSP_6_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCDSP_6_SENSITIVITY_SEL_STAT_BIT    ((u32)0x80000000)
#define RIU_RWNXAGCDSP_6_SENSITIVITY_SEL_STAT_POS    31
#define RIU_RWNXAGCDSP_6_HTSIGMCS_SW_VAL_MASK    ((u32)0x07F00000)
#define RIU_RWNXAGCDSP_6_HTSIGMCS_SW_VAL_LSB    20
#define RIU_RWNXAGCDSP_6_HTSIGMCS_SW_VAL_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCDSP_6_HTSIGMCSVALID_SW_VAL_BIT    ((u32)0x00080000)
#define RIU_RWNXAGCDSP_6_HTSIGMCSVALID_SW_VAL_POS    19
#define RIU_RWNXAGCDSP_6_HTSIGMCSVALID_SW_SET_BIT    ((u32)0x00040000)
#define RIU_RWNXAGCDSP_6_HTSIGMCSVALID_SW_SET_POS    18
#define RIU_RWNXAGCDSP_6_SW_SENSITIVITY_SEL_FORCE_BIT    ((u32)0x00020000)
#define RIU_RWNXAGCDSP_6_SW_SENSITIVITY_SEL_FORCE_POS    17
#define RIU_RWNXAGCDSP_6_SW_SENSITIVITY_SEL_BIT    ((u32)0x00010000)
#define RIU_RWNXAGCDSP_6_SW_SENSITIVITY_SEL_POS    16
#define RIU_RWNXAGCDSP_6_INBDPOWMINDBM_ANT_1_SET_1_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCDSP_6_INBDPOWMINDBM_ANT_1_SET_1_LSB    8
#define RIU_RWNXAGCDSP_6_INBDPOWMINDBM_ANT_1_SET_1_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCDSP_6_INBDPOWMINDBM_ANT_0_SET_1_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCDSP_6_INBDPOWMINDBM_ANT_0_SET_1_LSB    0
#define RIU_RWNXAGCDSP_6_INBDPOWMINDBM_ANT_0_SET_1_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCDSP_6_SENSITIVITY_SEL_STAT_RST    0x0
#define RIU_RWNXAGCDSP_6_HTSIGMCS_SW_VAL_RST    0x0
#define RIU_RWNXAGCDSP_6_HTSIGMCSVALID_SW_VAL_RST    0x0
#define RIU_RWNXAGCDSP_6_HTSIGMCSVALID_SW_SET_RST    0x0
#define RIU_RWNXAGCDSP_6_SW_SENSITIVITY_SEL_FORCE_RST    0x0
#define RIU_RWNXAGCDSP_6_SW_SENSITIVITY_SEL_RST    0x0
#define RIU_RWNXAGCDSP_6_INBDPOWMINDBM_ANT_1_SET_1_RST    0x9C
#define RIU_RWNXAGCDSP_6_INBDPOWMINDBM_ANT_0_SET_1_RST    0x9C

static inline void riu_rwnxagcdsp_6_pack(struct cl_chip *chip, u8 sensitivity_sel_stat, u8 htsigmcs_sw_val, u8 htsigmcsvalid_sw_val, u8 htsigmcsvalid_sw_set, u8 sw_sensitivity_sel_force, u8 sw_sensitivity_sel, u8 inbdpowmindbm_ant1_set1, u8 inbdpowmindbm_ant0_set1)
{
	ASSERT_ERR_CHIP((((u32)sensitivity_sel_stat << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)htsigmcs_sw_val << 20) & ~((u32)0x07F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)htsigmcsvalid_sw_val << 19) & ~((u32)0x00080000)) == 0);
	ASSERT_ERR_CHIP((((u32)htsigmcsvalid_sw_set << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)sw_sensitivity_sel_force << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)sw_sensitivity_sel << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)inbdpowmindbm_ant1_set1 << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)inbdpowmindbm_ant0_set1 << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_6_ADDR, ((u32)sensitivity_sel_stat << 31) | ((u32)htsigmcs_sw_val << 20) | ((u32)htsigmcsvalid_sw_val << 19) | ((u32)htsigmcsvalid_sw_set << 18) | ((u32)sw_sensitivity_sel_force << 17) | ((u32)sw_sensitivity_sel << 16) | ((u32)inbdpowmindbm_ant1_set1 << 8) | ((u32)inbdpowmindbm_ant0_set1 << 0));
}

static inline void riu_rwnxagcdsp_6_unpack(struct cl_chip *chip, u8 *sensitivity_sel_stat, u8 *htsigmcs_sw_val, u8 *htsigmcsvalid_sw_val, u8 *htsigmcsvalid_sw_set, u8 *sw_sensitivity_sel_force, u8 *sw_sensitivity_sel, u8 *inbdpowmindbm_ant1_set1, u8 *inbdpowmindbm_ant0_set1)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR);

	*sensitivity_sel_stat = (local_val & ((u32)0x80000000)) >> 31;
	*htsigmcs_sw_val = (local_val & ((u32)0x07F00000)) >> 20;
	*htsigmcsvalid_sw_val = (local_val & ((u32)0x00080000)) >> 19;
	*htsigmcsvalid_sw_set = (local_val & ((u32)0x00040000)) >> 18;
	*sw_sensitivity_sel_force = (local_val & ((u32)0x00020000)) >> 17;
	*sw_sensitivity_sel = (local_val & ((u32)0x00010000)) >> 16;
	*inbdpowmindbm_ant1_set1 = (local_val & ((u32)0x0000FF00)) >> 8;
	*inbdpowmindbm_ant0_set1 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcdsp_6_sensitivity_sel_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline u8 riu_rwnxagcdsp_6_htsigmcs_sw_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR);

	return (u8)((local_val & ((u32)0x07F00000)) >> 20);
}

static inline void riu_rwnxagcdsp_6_htsigmcs_sw_val_setf(struct cl_chip *chip, u8 htsigmcsswval)
{
	ASSERT_ERR_CHIP((((u32)htsigmcsswval << 20) & ~((u32)0x07F00000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_6_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR) & ~((u32)0x07F00000)) | ((u32)htsigmcsswval << 20));
}

static inline u8 riu_rwnxagcdsp_6_htsigmcsvalid_sw_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline void riu_rwnxagcdsp_6_htsigmcsvalid_sw_val_setf(struct cl_chip *chip, u8 htsigmcsvalidswval)
{
	ASSERT_ERR_CHIP((((u32)htsigmcsvalidswval << 19) & ~((u32)0x00080000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_6_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR) & ~((u32)0x00080000)) | ((u32)htsigmcsvalidswval << 19));
}

static inline u8 riu_rwnxagcdsp_6_htsigmcsvalid_sw_set_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void riu_rwnxagcdsp_6_htsigmcsvalid_sw_set_setf(struct cl_chip *chip, u8 htsigmcsvalidswset)
{
	ASSERT_ERR_CHIP((((u32)htsigmcsvalidswset << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_6_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR) & ~((u32)0x00040000)) | ((u32)htsigmcsvalidswset << 18));
}

static inline u8 riu_rwnxagcdsp_6_sw_sensitivity_sel_force_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void riu_rwnxagcdsp_6_sw_sensitivity_sel_force_setf(struct cl_chip *chip, u8 swsensitivityselforce)
{
	ASSERT_ERR_CHIP((((u32)swsensitivityselforce << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_6_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR) & ~((u32)0x00020000)) | ((u32)swsensitivityselforce << 17));
}

static inline u8 riu_rwnxagcdsp_6_sw_sensitivity_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void riu_rwnxagcdsp_6_sw_sensitivity_sel_setf(struct cl_chip *chip, u8 swsensitivitysel)
{
	ASSERT_ERR_CHIP((((u32)swsensitivitysel << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_6_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR) & ~((u32)0x00010000)) | ((u32)swsensitivitysel << 16));
}

static inline u8 riu_rwnxagcdsp_6_inbdpowmindbm_ant_1_set_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagcdsp_6_inbdpowmindbm_ant_1_set_1_setf(struct cl_chip *chip, u8 inbdpowmindbmant1set1)
{
	ASSERT_ERR_CHIP((((u32)inbdpowmindbmant1set1 << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_6_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR) & ~((u32)0x0000FF00)) | ((u32)inbdpowmindbmant1set1 << 8));
}

static inline u8 riu_rwnxagcdsp_6_inbdpowmindbm_ant_0_set_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcdsp_6_inbdpowmindbm_ant_0_set_1_setf(struct cl_chip *chip, u8 inbdpowmindbmant0set1)
{
	ASSERT_ERR_CHIP((((u32)inbdpowmindbmant0set1 << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCDSP_6_ADDR, (cl_reg_read(chip, RIU_RWNXAGCDSP_6_ADDR) & ~((u32)0x000000FF)) | ((u32)inbdpowmindbmant0set1 << 0));
}

/**
 * @brief IQDC_RX_0_THRES register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    14    IQDC_THIRD_POINT_TYPE     0
 *    13:09 IQDC_VGA_THRES_B          0x0
 *    08:04 IQDC_VGA_THRES_A          0x0
 *    02:00 IQDC_LNA_THRES            0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_THRES_ADDR        (REG_RIU_BASE_ADDR + 0x000004D8)
#define RIU_IQDC_RX_0_THRES_OFFSET      0x000004D8
#define RIU_IQDC_RX_0_THRES_INDEX       0x00000136
#define RIU_IQDC_RX_0_THRES_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_thres_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_THRES_ADDR);
}

static inline void riu_iqdc_rx_0_thres_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_THRES_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_THRES_IQDC_THIRD_POINT_TYPE_BIT    ((u32)0x00004000)
#define RIU_IQDC_RX_0_THRES_IQDC_THIRD_POINT_TYPE_POS    14
#define RIU_IQDC_RX_0_THRES_IQDC_VGA_THRES_B_MASK    ((u32)0x00003E00)
#define RIU_IQDC_RX_0_THRES_IQDC_VGA_THRES_B_LSB    9
#define RIU_IQDC_RX_0_THRES_IQDC_VGA_THRES_B_WIDTH    ((u32)0x00000005)
#define RIU_IQDC_RX_0_THRES_IQDC_VGA_THRES_A_MASK    ((u32)0x000001F0)
#define RIU_IQDC_RX_0_THRES_IQDC_VGA_THRES_A_LSB    4
#define RIU_IQDC_RX_0_THRES_IQDC_VGA_THRES_A_WIDTH    ((u32)0x00000005)
#define RIU_IQDC_RX_0_THRES_IQDC_LNA_THRES_MASK    ((u32)0x00000007)
#define RIU_IQDC_RX_0_THRES_IQDC_LNA_THRES_LSB    0
#define RIU_IQDC_RX_0_THRES_IQDC_LNA_THRES_WIDTH    ((u32)0x00000003)

#define RIU_IQDC_RX_0_THRES_IQDC_THIRD_POINT_TYPE_RST    0x0
#define RIU_IQDC_RX_0_THRES_IQDC_VGA_THRES_B_RST    0x0
#define RIU_IQDC_RX_0_THRES_IQDC_VGA_THRES_A_RST    0x0
#define RIU_IQDC_RX_0_THRES_IQDC_LNA_THRES_RST    0x0

static inline void riu_iqdc_rx_0_thres_pack(struct cl_chip *chip, u8 iqdc_third_point_type, u8 iqdc_vga_thres_b, u8 iqdc_vga_thres_a, u8 iqdc_lna_thres)
{
	ASSERT_ERR_CHIP((((u32)iqdc_third_point_type << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_vga_thres_b << 9) & ~((u32)0x00003E00)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_vga_thres_a << 4) & ~((u32)0x000001F0)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_lna_thres << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_THRES_ADDR, ((u32)iqdc_third_point_type << 14) | ((u32)iqdc_vga_thres_b << 9) | ((u32)iqdc_vga_thres_a << 4) | ((u32)iqdc_lna_thres << 0));
}

static inline void riu_iqdc_rx_0_thres_unpack(struct cl_chip *chip, u8 *iqdc_third_point_type, u8 *iqdc_vga_thres_b, u8 *iqdc_vga_thres_a, u8 *iqdc_lna_thres)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_THRES_ADDR);

	*iqdc_third_point_type = (local_val & ((u32)0x00004000)) >> 14;
	*iqdc_vga_thres_b = (local_val & ((u32)0x00003E00)) >> 9;
	*iqdc_vga_thres_a = (local_val & ((u32)0x000001F0)) >> 4;
	*iqdc_lna_thres = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 riu_iqdc_rx_0_thres_iqdc_third_point_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_THRES_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void riu_iqdc_rx_0_thres_iqdc_third_point_type_setf(struct cl_chip *chip, u8 iqdcthirdpointtype)
{
	ASSERT_ERR_CHIP((((u32)iqdcthirdpointtype << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_THRES_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_THRES_ADDR) & ~((u32)0x00004000)) | ((u32)iqdcthirdpointtype << 14));
}

static inline u8 riu_iqdc_rx_0_thres_iqdc_vga_thres_b_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_THRES_ADDR);

	return (u8)((local_val & ((u32)0x00003E00)) >> 9);
}

static inline void riu_iqdc_rx_0_thres_iqdc_vga_thres_b_setf(struct cl_chip *chip, u8 iqdcvgathresb)
{
	ASSERT_ERR_CHIP((((u32)iqdcvgathresb << 9) & ~((u32)0x00003E00)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_THRES_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_THRES_ADDR) & ~((u32)0x00003E00)) | ((u32)iqdcvgathresb << 9));
}

static inline u8 riu_iqdc_rx_0_thres_iqdc_vga_thres_a_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_THRES_ADDR);

	return (u8)((local_val & ((u32)0x000001F0)) >> 4);
}

static inline void riu_iqdc_rx_0_thres_iqdc_vga_thres_a_setf(struct cl_chip *chip, u8 iqdcvgathresa)
{
	ASSERT_ERR_CHIP((((u32)iqdcvgathresa << 4) & ~((u32)0x000001F0)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_THRES_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_THRES_ADDR) & ~((u32)0x000001F0)) | ((u32)iqdcvgathresa << 4));
}

static inline u8 riu_iqdc_rx_0_thres_iqdc_lna_thres_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_THRES_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void riu_iqdc_rx_0_thres_iqdc_lna_thres_setf(struct cl_chip *chip, u8 iqdclnathres)
{
	ASSERT_ERR_CHIP((((u32)iqdclnathres << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_THRES_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_THRES_ADDR) & ~((u32)0x00000007)) | ((u32)iqdclnathres << 0));
}

/**
 * @brief PTA_CS_FLAG_CTRL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 PTA_CCAFLAG3              0xA
 *    11:08 PTA_CCAFLAG2              0x2
 *    07:04 PTA_CCAFLAG1              0x8
 *    03:00 PTA_CCAFLAG0              0x0
 * </pre>
 */
#define RIU_PTA_CS_FLAG_CTRL_ADDR        (REG_RIU_BASE_ADDR + 0x000004DC)
#define RIU_PTA_CS_FLAG_CTRL_OFFSET      0x000004DC
#define RIU_PTA_CS_FLAG_CTRL_INDEX       0x00000137
#define RIU_PTA_CS_FLAG_CTRL_RESET       0x0000A280

static inline u32 riu_pta_cs_flag_ctrl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_PTA_CS_FLAG_CTRL_ADDR);
}

static inline void riu_pta_cs_flag_ctrl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_PTA_CS_FLAG_CTRL_ADDR, value);
}

/* Field definitions */
#define RIU_PTA_CS_FLAG_CTRL_PTA_CCAFLAG_3_MASK    ((u32)0x0000F000)
#define RIU_PTA_CS_FLAG_CTRL_PTA_CCAFLAG_3_LSB    12
#define RIU_PTA_CS_FLAG_CTRL_PTA_CCAFLAG_3_WIDTH    ((u32)0x00000004)
#define RIU_PTA_CS_FLAG_CTRL_PTA_CCAFLAG_2_MASK    ((u32)0x00000F00)
#define RIU_PTA_CS_FLAG_CTRL_PTA_CCAFLAG_2_LSB    8
#define RIU_PTA_CS_FLAG_CTRL_PTA_CCAFLAG_2_WIDTH    ((u32)0x00000004)
#define RIU_PTA_CS_FLAG_CTRL_PTA_CCAFLAG_1_MASK    ((u32)0x000000F0)
#define RIU_PTA_CS_FLAG_CTRL_PTA_CCAFLAG_1_LSB    4
#define RIU_PTA_CS_FLAG_CTRL_PTA_CCAFLAG_1_WIDTH    ((u32)0x00000004)
#define RIU_PTA_CS_FLAG_CTRL_PTA_CCAFLAG_0_MASK    ((u32)0x0000000F)
#define RIU_PTA_CS_FLAG_CTRL_PTA_CCAFLAG_0_LSB    0
#define RIU_PTA_CS_FLAG_CTRL_PTA_CCAFLAG_0_WIDTH    ((u32)0x00000004)

#define RIU_PTA_CS_FLAG_CTRL_PTA_CCAFLAG_3_RST    0xA
#define RIU_PTA_CS_FLAG_CTRL_PTA_CCAFLAG_2_RST    0x2
#define RIU_PTA_CS_FLAG_CTRL_PTA_CCAFLAG_1_RST    0x8
#define RIU_PTA_CS_FLAG_CTRL_PTA_CCAFLAG_0_RST    0x0

static inline void riu_pta_cs_flag_ctrl_pack(struct cl_chip *chip, u8 pta_ccaflag3, u8 pta_ccaflag2, u8 pta_ccaflag1, u8 pta_ccaflag0)
{
	ASSERT_ERR_CHIP((((u32)pta_ccaflag3 << 12) & ~((u32)0x0000F000)) == 0);
	ASSERT_ERR_CHIP((((u32)pta_ccaflag2 << 8) & ~((u32)0x00000F00)) == 0);
	ASSERT_ERR_CHIP((((u32)pta_ccaflag1 << 4) & ~((u32)0x000000F0)) == 0);
	ASSERT_ERR_CHIP((((u32)pta_ccaflag0 << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_PTA_CS_FLAG_CTRL_ADDR, ((u32)pta_ccaflag3 << 12) | ((u32)pta_ccaflag2 << 8) | ((u32)pta_ccaflag1 << 4) | ((u32)pta_ccaflag0 << 0));
}

static inline void riu_pta_cs_flag_ctrl_unpack(struct cl_chip *chip, u8 *pta_ccaflag3, u8 *pta_ccaflag2, u8 *pta_ccaflag1, u8 *pta_ccaflag0)
{
	u32 local_val = cl_reg_read(chip, RIU_PTA_CS_FLAG_CTRL_ADDR);

	*pta_ccaflag3 = (local_val & ((u32)0x0000F000)) >> 12;
	*pta_ccaflag2 = (local_val & ((u32)0x00000F00)) >> 8;
	*pta_ccaflag1 = (local_val & ((u32)0x000000F0)) >> 4;
	*pta_ccaflag0 = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 riu_pta_cs_flag_ctrl_pta_ccaflag_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_PTA_CS_FLAG_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x0000F000)) >> 12);
}

static inline void riu_pta_cs_flag_ctrl_pta_ccaflag_3_setf(struct cl_chip *chip, u8 ptaccaflag3)
{
	ASSERT_ERR_CHIP((((u32)ptaccaflag3 << 12) & ~((u32)0x0000F000)) == 0);
	cl_reg_write(chip, RIU_PTA_CS_FLAG_CTRL_ADDR, (cl_reg_read(chip, RIU_PTA_CS_FLAG_CTRL_ADDR) & ~((u32)0x0000F000)) | ((u32)ptaccaflag3 << 12));
}

static inline u8 riu_pta_cs_flag_ctrl_pta_ccaflag_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_PTA_CS_FLAG_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000F00)) >> 8);
}

static inline void riu_pta_cs_flag_ctrl_pta_ccaflag_2_setf(struct cl_chip *chip, u8 ptaccaflag2)
{
	ASSERT_ERR_CHIP((((u32)ptaccaflag2 << 8) & ~((u32)0x00000F00)) == 0);
	cl_reg_write(chip, RIU_PTA_CS_FLAG_CTRL_ADDR, (cl_reg_read(chip, RIU_PTA_CS_FLAG_CTRL_ADDR) & ~((u32)0x00000F00)) | ((u32)ptaccaflag2 << 8));
}

static inline u8 riu_pta_cs_flag_ctrl_pta_ccaflag_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_PTA_CS_FLAG_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x000000F0)) >> 4);
}

static inline void riu_pta_cs_flag_ctrl_pta_ccaflag_1_setf(struct cl_chip *chip, u8 ptaccaflag1)
{
	ASSERT_ERR_CHIP((((u32)ptaccaflag1 << 4) & ~((u32)0x000000F0)) == 0);
	cl_reg_write(chip, RIU_PTA_CS_FLAG_CTRL_ADDR, (cl_reg_read(chip, RIU_PTA_CS_FLAG_CTRL_ADDR) & ~((u32)0x000000F0)) | ((u32)ptaccaflag1 << 4));
}

static inline u8 riu_pta_cs_flag_ctrl_pta_ccaflag_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_PTA_CS_FLAG_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

static inline void riu_pta_cs_flag_ctrl_pta_ccaflag_0_setf(struct cl_chip *chip, u8 ptaccaflag0)
{
	ASSERT_ERR_CHIP((((u32)ptaccaflag0 << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_PTA_CS_FLAG_CTRL_ADDR, (cl_reg_read(chip, RIU_PTA_CS_FLAG_CTRL_ADDR) & ~((u32)0x0000000F)) | ((u32)ptaccaflag0 << 0));
}

/**
 * @brief RX_INDICATIONS_TO_PTA_CTRL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    PTA_RXINDICATION_STATUS   0
 *    18    PTA_ED_20_P_SRC_EN        0
 *    17    PTA_CS_SRC_EN             1
 *    16    PTA_MIDPACKET_20_P_SRC_EN 0
 *    11:00 PTA_MDM_STATE             0x3FC
 * </pre>
 */
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR        (REG_RIU_BASE_ADDR + 0x000004E0)
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_OFFSET      0x000004E0
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_INDEX       0x00000138
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_RESET       0x000203FC

static inline u32 riu_rx_indications_to_pta_ctrl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR);
}

static inline void riu_rx_indications_to_pta_ctrl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR, value);
}

/* Field definitions */
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_PTA_RXINDICATION_STATUS_BIT    ((u32)0x80000000)
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_PTA_RXINDICATION_STATUS_POS    31
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_PTA_ED_20_P_SRC_EN_BIT    ((u32)0x00040000)
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_PTA_ED_20_P_SRC_EN_POS    18
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_PTA_CS_SRC_EN_BIT    ((u32)0x00020000)
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_PTA_CS_SRC_EN_POS    17
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_PTA_MIDPACKET_20_P_SRC_EN_BIT    ((u32)0x00010000)
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_PTA_MIDPACKET_20_P_SRC_EN_POS    16
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_PTA_MDM_STATE_MASK    ((u32)0x00000FFF)
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_PTA_MDM_STATE_LSB    0
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_PTA_MDM_STATE_WIDTH    ((u32)0x0000000C)

#define RIU_RX_INDICATIONS_TO_PTA_CTRL_PTA_RXINDICATION_STATUS_RST    0x0
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_PTA_ED_20_P_SRC_EN_RST    0x0
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_PTA_CS_SRC_EN_RST    0x1
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_PTA_MIDPACKET_20_P_SRC_EN_RST    0x0
#define RIU_RX_INDICATIONS_TO_PTA_CTRL_PTA_MDM_STATE_RST    0x3FC

static inline void riu_rx_indications_to_pta_ctrl_pack(struct cl_chip *chip, u8 pta_rxindication_status, u8 pta_ed_20_p_src_en, u8 pta_cs_src_en, u8 pta_midpacket_20_p_src_en, u16 pta_mdm_state)
{
	ASSERT_ERR_CHIP((((u32)pta_rxindication_status << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)pta_ed_20_p_src_en << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)pta_cs_src_en << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)pta_midpacket_20_p_src_en << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)pta_mdm_state << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR, ((u32)pta_rxindication_status << 31) | ((u32)pta_ed_20_p_src_en << 18) | ((u32)pta_cs_src_en << 17) | ((u32)pta_midpacket_20_p_src_en << 16) | ((u32)pta_mdm_state << 0));
}

static inline void riu_rx_indications_to_pta_ctrl_unpack(struct cl_chip *chip, u8 *pta_rxindication_status, u8 *pta_ed_20_p_src_en, u8 *pta_cs_src_en, u8 *pta_midpacket_20_p_src_en, u16 *pta_mdm_state)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR);

	*pta_rxindication_status = (local_val & ((u32)0x80000000)) >> 31;
	*pta_ed_20_p_src_en = (local_val & ((u32)0x00040000)) >> 18;
	*pta_cs_src_en = (local_val & ((u32)0x00020000)) >> 17;
	*pta_midpacket_20_p_src_en = (local_val & ((u32)0x00010000)) >> 16;
	*pta_mdm_state = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u8 riu_rx_indications_to_pta_ctrl_pta_rxindication_status_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline u8 riu_rx_indications_to_pta_ctrl_pta_ed_20_p_src_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void riu_rx_indications_to_pta_ctrl_pta_ed_20_p_src_en_setf(struct cl_chip *chip, u8 ptaed20psrcen)
{
	ASSERT_ERR_CHIP((((u32)ptaed20psrcen << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR, (cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR) & ~((u32)0x00040000)) | ((u32)ptaed20psrcen << 18));
}

static inline u8 riu_rx_indications_to_pta_ctrl_pta_cs_src_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void riu_rx_indications_to_pta_ctrl_pta_cs_src_en_setf(struct cl_chip *chip, u8 ptacssrcen)
{
	ASSERT_ERR_CHIP((((u32)ptacssrcen << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR, (cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR) & ~((u32)0x00020000)) | ((u32)ptacssrcen << 17));
}

static inline u8 riu_rx_indications_to_pta_ctrl_pta_midpacket_20_p_src_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void riu_rx_indications_to_pta_ctrl_pta_midpacket_20_p_src_en_setf(struct cl_chip *chip, u8 ptamidpacket20psrcen)
{
	ASSERT_ERR_CHIP((((u32)ptamidpacket20psrcen << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR, (cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR) & ~((u32)0x00010000)) | ((u32)ptamidpacket20psrcen << 16));
}

static inline u16 riu_rx_indications_to_pta_ctrl_pta_mdm_state_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

static inline void riu_rx_indications_to_pta_ctrl_pta_mdm_state_setf(struct cl_chip *chip, u16 ptamdmstate)
{
	ASSERT_ERR_CHIP((((u32)ptamdmstate << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR, (cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_CTRL_ADDR) & ~((u32)0x00000FFF)) | ((u32)ptamdmstate << 0));
}

/**
 * @brief RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    PTA_RXINDICATION_FORCE_OVERRIDE_EN 0
 *    00    PTA_FORCE_RX_INDICATION_VALUE 0
 * </pre>
 */
#define RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_ADDR        (REG_RIU_BASE_ADDR + 0x000004E4)
#define RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_OFFSET      0x000004E4
#define RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_INDEX       0x00000139
#define RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_RESET       0x00000000

static inline u32 riu_rx_indications_to_pta_force_override_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_ADDR);
}

static inline void riu_rx_indications_to_pta_force_override_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_ADDR, value);
}

/* Field definitions */
#define RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_PTA_RXINDICATION_FORCE_OVERRIDE_EN_BIT    ((u32)0x80000000)
#define RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_PTA_RXINDICATION_FORCE_OVERRIDE_EN_POS    31
#define RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_PTA_FORCE_RX_INDICATION_VALUE_BIT    ((u32)0x00000001)
#define RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_PTA_FORCE_RX_INDICATION_VALUE_POS    0

#define RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_PTA_RXINDICATION_FORCE_OVERRIDE_EN_RST    0x0
#define RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_PTA_FORCE_RX_INDICATION_VALUE_RST    0x0

static inline void riu_rx_indications_to_pta_force_override_pack(struct cl_chip *chip, u8 pta_rxindication_force_override_en, u8 pta_force_rx_indication_value)
{
	ASSERT_ERR_CHIP((((u32)pta_rxindication_force_override_en << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)pta_force_rx_indication_value << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_ADDR, ((u32)pta_rxindication_force_override_en << 31) | ((u32)pta_force_rx_indication_value << 0));
}

static inline void riu_rx_indications_to_pta_force_override_unpack(struct cl_chip *chip, u8 *pta_rxindication_force_override_en, u8 *pta_force_rx_indication_value)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_ADDR);

	*pta_rxindication_force_override_en = (local_val & ((u32)0x80000000)) >> 31;
	*pta_force_rx_indication_value = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_rx_indications_to_pta_force_override_pta_rxindication_force_override_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_rx_indications_to_pta_force_override_pta_rxindication_force_override_en_setf(struct cl_chip *chip, u8 ptarxindicationforceoverrideen)
{
	ASSERT_ERR_CHIP((((u32)ptarxindicationforceoverrideen << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_ADDR, (cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_ADDR) & ~((u32)0x80000000)) | ((u32)ptarxindicationforceoverrideen << 31));
}

static inline u8 riu_rx_indications_to_pta_force_override_pta_force_rx_indication_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_rx_indications_to_pta_force_override_pta_force_rx_indication_value_setf(struct cl_chip *chip, u8 ptaforcerxindicationvalue)
{
	ASSERT_ERR_CHIP((((u32)ptaforcerxindicationvalue << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_ADDR, (cl_reg_read(chip, RIU_RX_INDICATIONS_TO_PTA_FORCE_OVERRIDE_ADDR) & ~((u32)0x00000001)) | ((u32)ptaforcerxindicationvalue << 0));
}

/**
 * @brief AGCGAINCALIBSTAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 AGCGAINCalib3             0x0
 *    23:16 AGCGAINCalib2             0x0
 *    15:08 AGCGAINCalib1             0x0
 *    07:00 AGCGAINCalib0             0x0
 * </pre>
 */
#define RIU_AGCGAINCALIBSTAT_ADDR        (REG_RIU_BASE_ADDR + 0x000004E8)
#define RIU_AGCGAINCALIBSTAT_OFFSET      0x000004E8
#define RIU_AGCGAINCALIBSTAT_INDEX       0x0000013A
#define RIU_AGCGAINCALIBSTAT_RESET       0x00000000

static inline u32 riu_agcgaincalibstat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCGAINCALIBSTAT_ADDR);
}

/* Field definitions */
#define RIU_AGCGAINCALIBSTAT_AGCGAINCALIB_3_MASK    ((u32)0xFF000000)
#define RIU_AGCGAINCALIBSTAT_AGCGAINCALIB_3_LSB    24
#define RIU_AGCGAINCALIBSTAT_AGCGAINCALIB_3_WIDTH    ((u32)0x00000008)
#define RIU_AGCGAINCALIBSTAT_AGCGAINCALIB_2_MASK    ((u32)0x00FF0000)
#define RIU_AGCGAINCALIBSTAT_AGCGAINCALIB_2_LSB    16
#define RIU_AGCGAINCALIBSTAT_AGCGAINCALIB_2_WIDTH    ((u32)0x00000008)
#define RIU_AGCGAINCALIBSTAT_AGCGAINCALIB_1_MASK    ((u32)0x0000FF00)
#define RIU_AGCGAINCALIBSTAT_AGCGAINCALIB_1_LSB    8
#define RIU_AGCGAINCALIBSTAT_AGCGAINCALIB_1_WIDTH    ((u32)0x00000008)
#define RIU_AGCGAINCALIBSTAT_AGCGAINCALIB_0_MASK    ((u32)0x000000FF)
#define RIU_AGCGAINCALIBSTAT_AGCGAINCALIB_0_LSB    0
#define RIU_AGCGAINCALIBSTAT_AGCGAINCALIB_0_WIDTH    ((u32)0x00000008)

#define RIU_AGCGAINCALIBSTAT_AGCGAINCALIB_3_RST    0x0
#define RIU_AGCGAINCALIBSTAT_AGCGAINCALIB_2_RST    0x0
#define RIU_AGCGAINCALIBSTAT_AGCGAINCALIB_1_RST    0x0
#define RIU_AGCGAINCALIBSTAT_AGCGAINCALIB_0_RST    0x0

static inline void riu_agcgaincalibstat_unpack(struct cl_chip *chip, u8 *agcgaincalib3, u8 *agcgaincalib2, u8 *agcgaincalib1, u8 *agcgaincalib0)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINCALIBSTAT_ADDR);

	*agcgaincalib3 = (local_val & ((u32)0xFF000000)) >> 24;
	*agcgaincalib2 = (local_val & ((u32)0x00FF0000)) >> 16;
	*agcgaincalib1 = (local_val & ((u32)0x0000FF00)) >> 8;
	*agcgaincalib0 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_agcgaincalibstat_agcgaincalib_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINCALIBSTAT_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_agcgaincalibstat_agcgaincalib_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINCALIBSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_agcgaincalibstat_agcgaincalib_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINCALIBSTAT_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_agcgaincalibstat_agcgaincalib_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINCALIBSTAT_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief AGCRFGAINCALIBSTAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    28:20 AGCRFGAINCalib2           0x0
 *    18:10 AGCRFGAINCalib1           0x0
 *    08:00 AGCRFGAINCalib0           0x0
 * </pre>
 */
#define RIU_AGCRFGAINCALIBSTAT_ADDR        (REG_RIU_BASE_ADDR + 0x000004EC)
#define RIU_AGCRFGAINCALIBSTAT_OFFSET      0x000004EC
#define RIU_AGCRFGAINCALIBSTAT_INDEX       0x0000013B
#define RIU_AGCRFGAINCALIBSTAT_RESET       0x00000000

static inline u32 riu_agcrfgaincalibstat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCRFGAINCALIBSTAT_ADDR);
}

/* Field definitions */
#define RIU_AGCRFGAINCALIBSTAT_AGCRFGAINCALIB_2_MASK    ((u32)0x1FF00000)
#define RIU_AGCRFGAINCALIBSTAT_AGCRFGAINCALIB_2_LSB    20
#define RIU_AGCRFGAINCALIBSTAT_AGCRFGAINCALIB_2_WIDTH    ((u32)0x00000009)
#define RIU_AGCRFGAINCALIBSTAT_AGCRFGAINCALIB_1_MASK    ((u32)0x0007FC00)
#define RIU_AGCRFGAINCALIBSTAT_AGCRFGAINCALIB_1_LSB    10
#define RIU_AGCRFGAINCALIBSTAT_AGCRFGAINCALIB_1_WIDTH    ((u32)0x00000009)
#define RIU_AGCRFGAINCALIBSTAT_AGCRFGAINCALIB_0_MASK    ((u32)0x000001FF)
#define RIU_AGCRFGAINCALIBSTAT_AGCRFGAINCALIB_0_LSB    0
#define RIU_AGCRFGAINCALIBSTAT_AGCRFGAINCALIB_0_WIDTH    ((u32)0x00000009)

#define RIU_AGCRFGAINCALIBSTAT_AGCRFGAINCALIB_2_RST    0x0
#define RIU_AGCRFGAINCALIBSTAT_AGCRFGAINCALIB_1_RST    0x0
#define RIU_AGCRFGAINCALIBSTAT_AGCRFGAINCALIB_0_RST    0x0

static inline void riu_agcrfgaincalibstat_unpack(struct cl_chip *chip, u16 *agcrfgaincalib2, u16 *agcrfgaincalib1, u16 *agcrfgaincalib0)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCRFGAINCALIBSTAT_ADDR);

	*agcrfgaincalib2 = (local_val & ((u32)0x1FF00000)) >> 20;
	*agcrfgaincalib1 = (local_val & ((u32)0x0007FC00)) >> 10;
	*agcrfgaincalib0 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_agcrfgaincalibstat_agcrfgaincalib_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCRFGAINCALIBSTAT_ADDR);

	return (u16)((local_val & ((u32)0x1FF00000)) >> 20);
}

static inline u16 riu_agcrfgaincalibstat_agcrfgaincalib_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCRFGAINCALIBSTAT_ADDR);

	return (u16)((local_val & ((u32)0x0007FC00)) >> 10);
}

static inline u16 riu_agcrfgaincalibstat_agcrfgaincalib_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCRFGAINCALIBSTAT_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

/**
 * @brief AGCRFGAINCALIBSTAT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    08:00 AGCRFGAINCalib3           0x0
 * </pre>
 */
#define RIU_AGCRFGAINCALIBSTAT_1_ADDR        (REG_RIU_BASE_ADDR + 0x000004F0)
#define RIU_AGCRFGAINCALIBSTAT_1_OFFSET      0x000004F0
#define RIU_AGCRFGAINCALIBSTAT_1_INDEX       0x0000013C
#define RIU_AGCRFGAINCALIBSTAT_1_RESET       0x00000000

static inline u32 riu_agcrfgaincalibstat_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCRFGAINCALIBSTAT_1_ADDR);
}

/* Field definitions */
#define RIU_AGCRFGAINCALIBSTAT_1_AGCRFGAINCALIB_3_MASK    ((u32)0x000001FF)
#define RIU_AGCRFGAINCALIBSTAT_1_AGCRFGAINCALIB_3_LSB    0
#define RIU_AGCRFGAINCALIBSTAT_1_AGCRFGAINCALIB_3_WIDTH    ((u32)0x00000009)

#define RIU_AGCRFGAINCALIBSTAT_1_AGCRFGAINCALIB_3_RST    0x0

static inline u16 riu_agcrfgaincalibstat_1_agcrfgaincalib_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCRFGAINCALIBSTAT_1_ADDR);

	return (u16)(local_val >> 0);
}

/**
 * @brief IQDC_RX_0_COEF_3_SET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_11     0x0
 *    20:12 iqdc_rx0_fir_coeff_10     0x0
 *    08:00 iqdc_rx0_fir_coeff_9      0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_3_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x000004F4)
#define RIU_IQDC_RX_0_COEF_3_SET_1_OFFSET      0x000004F4
#define RIU_IQDC_RX_0_COEF_3_SET_1_INDEX       0x0000013D
#define RIU_IQDC_RX_0_COEF_3_SET_1_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_3_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_1_ADDR);
}

static inline void riu_iqdc_rx_0_coef_3_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_3_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_3_SET_1_IQDC_RX_0_FIR_COEFF_11_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_3_SET_1_IQDC_RX_0_FIR_COEFF_11_LSB    23
#define RIU_IQDC_RX_0_COEF_3_SET_1_IQDC_RX_0_FIR_COEFF_11_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_3_SET_1_IQDC_RX_0_FIR_COEFF_10_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_3_SET_1_IQDC_RX_0_FIR_COEFF_10_LSB    12
#define RIU_IQDC_RX_0_COEF_3_SET_1_IQDC_RX_0_FIR_COEFF_10_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_3_SET_1_IQDC_RX_0_FIR_COEFF_9_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_3_SET_1_IQDC_RX_0_FIR_COEFF_9_LSB    0
#define RIU_IQDC_RX_0_COEF_3_SET_1_IQDC_RX_0_FIR_COEFF_9_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_3_SET_1_IQDC_RX_0_FIR_COEFF_11_RST    0x0
#define RIU_IQDC_RX_0_COEF_3_SET_1_IQDC_RX_0_FIR_COEFF_10_RST    0x0
#define RIU_IQDC_RX_0_COEF_3_SET_1_IQDC_RX_0_FIR_COEFF_9_RST    0x0

static inline void riu_iqdc_rx_0_coef_3_set_1_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_11, u16 iqdc_rx0_fir_coeff_10, u16 iqdc_rx0_fir_coeff_9)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_11 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_10 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_9 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_3_SET_1_ADDR, ((u32)iqdc_rx0_fir_coeff_11 << 23) | ((u32)iqdc_rx0_fir_coeff_10 << 12) | ((u32)iqdc_rx0_fir_coeff_9 << 0));
}

static inline void riu_iqdc_rx_0_coef_3_set_1_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_11, u16 *iqdc_rx0_fir_coeff_10, u16 *iqdc_rx0_fir_coeff_9)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_1_ADDR);

	*iqdc_rx0_fir_coeff_11 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_10 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_9 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_3_set_1_iqdc_rx_0_fir_coeff_11_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_1_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_3_set_1_iqdc_rx_0_fir_coeff_11_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff11)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff11 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_3_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_1_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff11 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_3_set_1_iqdc_rx_0_fir_coeff_10_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_3_set_1_iqdc_rx_0_fir_coeff_10_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff10)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff10 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_3_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_1_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff10 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_3_set_1_iqdc_rx_0_fir_coeff_9_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_3_set_1_iqdc_rx_0_fir_coeff_9_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff9)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff9 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_3_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_1_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff9 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_3_SET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_11     0x0
 *    20:12 iqdc_rx1_fir_coeff_10     0x0
 *    08:00 iqdc_rx1_fir_coeff_9      0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_3_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x000004F8)
#define RIU_IQDC_RX_1_COEF_3_SET_1_OFFSET      0x000004F8
#define RIU_IQDC_RX_1_COEF_3_SET_1_INDEX       0x0000013E
#define RIU_IQDC_RX_1_COEF_3_SET_1_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_3_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_1_ADDR);
}

static inline void riu_iqdc_rx_1_coef_3_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_3_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_3_SET_1_IQDC_RX_1_FIR_COEFF_11_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_3_SET_1_IQDC_RX_1_FIR_COEFF_11_LSB    23
#define RIU_IQDC_RX_1_COEF_3_SET_1_IQDC_RX_1_FIR_COEFF_11_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_3_SET_1_IQDC_RX_1_FIR_COEFF_10_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_3_SET_1_IQDC_RX_1_FIR_COEFF_10_LSB    12
#define RIU_IQDC_RX_1_COEF_3_SET_1_IQDC_RX_1_FIR_COEFF_10_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_3_SET_1_IQDC_RX_1_FIR_COEFF_9_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_3_SET_1_IQDC_RX_1_FIR_COEFF_9_LSB    0
#define RIU_IQDC_RX_1_COEF_3_SET_1_IQDC_RX_1_FIR_COEFF_9_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_3_SET_1_IQDC_RX_1_FIR_COEFF_11_RST    0x0
#define RIU_IQDC_RX_1_COEF_3_SET_1_IQDC_RX_1_FIR_COEFF_10_RST    0x0
#define RIU_IQDC_RX_1_COEF_3_SET_1_IQDC_RX_1_FIR_COEFF_9_RST    0x0

static inline void riu_iqdc_rx_1_coef_3_set_1_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_11, u16 iqdc_rx1_fir_coeff_10, u16 iqdc_rx1_fir_coeff_9)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_11 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_10 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_9 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_3_SET_1_ADDR, ((u32)iqdc_rx1_fir_coeff_11 << 23) | ((u32)iqdc_rx1_fir_coeff_10 << 12) | ((u32)iqdc_rx1_fir_coeff_9 << 0));
}

static inline void riu_iqdc_rx_1_coef_3_set_1_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_11, u16 *iqdc_rx1_fir_coeff_10, u16 *iqdc_rx1_fir_coeff_9)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_1_ADDR);

	*iqdc_rx1_fir_coeff_11 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_10 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_9 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_3_set_1_iqdc_rx_1_fir_coeff_11_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_1_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_3_set_1_iqdc_rx_1_fir_coeff_11_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff11)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff11 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_3_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_1_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff11 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_3_set_1_iqdc_rx_1_fir_coeff_10_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_3_set_1_iqdc_rx_1_fir_coeff_10_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff10)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff10 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_3_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_1_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff10 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_3_set_1_iqdc_rx_1_fir_coeff_9_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_3_set_1_iqdc_rx_1_fir_coeff_9_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff9)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff9 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_3_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_1_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff9 << 0));
}

/**
 * @brief IQDC_RX_1_THRES register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    14    IQDC_THIRD_POINT_TYPE     0
 *    13:09 IQDC_VGA_THRES_B          0x0
 *    08:04 IQDC_VGA_THRES_A          0x0
 *    03:00 IQDC_LNA_THRES            0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_THRES_ADDR        (REG_RIU_BASE_ADDR + 0x000004FC)
#define RIU_IQDC_RX_1_THRES_OFFSET      0x000004FC
#define RIU_IQDC_RX_1_THRES_INDEX       0x0000013F
#define RIU_IQDC_RX_1_THRES_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_thres_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_THRES_ADDR);
}

static inline void riu_iqdc_rx_1_thres_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_THRES_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_THRES_IQDC_THIRD_POINT_TYPE_BIT    ((u32)0x00004000)
#define RIU_IQDC_RX_1_THRES_IQDC_THIRD_POINT_TYPE_POS    14
#define RIU_IQDC_RX_1_THRES_IQDC_VGA_THRES_B_MASK    ((u32)0x00003E00)
#define RIU_IQDC_RX_1_THRES_IQDC_VGA_THRES_B_LSB    9
#define RIU_IQDC_RX_1_THRES_IQDC_VGA_THRES_B_WIDTH    ((u32)0x00000005)
#define RIU_IQDC_RX_1_THRES_IQDC_VGA_THRES_A_MASK    ((u32)0x000001F0)
#define RIU_IQDC_RX_1_THRES_IQDC_VGA_THRES_A_LSB    4
#define RIU_IQDC_RX_1_THRES_IQDC_VGA_THRES_A_WIDTH    ((u32)0x00000005)
#define RIU_IQDC_RX_1_THRES_IQDC_LNA_THRES_MASK    ((u32)0x0000000F)
#define RIU_IQDC_RX_1_THRES_IQDC_LNA_THRES_LSB    0
#define RIU_IQDC_RX_1_THRES_IQDC_LNA_THRES_WIDTH    ((u32)0x00000004)

#define RIU_IQDC_RX_1_THRES_IQDC_THIRD_POINT_TYPE_RST    0x0
#define RIU_IQDC_RX_1_THRES_IQDC_VGA_THRES_B_RST    0x0
#define RIU_IQDC_RX_1_THRES_IQDC_VGA_THRES_A_RST    0x0
#define RIU_IQDC_RX_1_THRES_IQDC_LNA_THRES_RST    0x0

static inline void riu_iqdc_rx_1_thres_pack(struct cl_chip *chip, u8 iqdc_third_point_type, u8 iqdc_vga_thres_b, u8 iqdc_vga_thres_a, u8 iqdc_lna_thres)
{
	ASSERT_ERR_CHIP((((u32)iqdc_third_point_type << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_vga_thres_b << 9) & ~((u32)0x00003E00)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_vga_thres_a << 4) & ~((u32)0x000001F0)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_lna_thres << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_THRES_ADDR, ((u32)iqdc_third_point_type << 14) | ((u32)iqdc_vga_thres_b << 9) | ((u32)iqdc_vga_thres_a << 4) | ((u32)iqdc_lna_thres << 0));
}

static inline void riu_iqdc_rx_1_thres_unpack(struct cl_chip *chip, u8 *iqdc_third_point_type, u8 *iqdc_vga_thres_b, u8 *iqdc_vga_thres_a, u8 *iqdc_lna_thres)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_THRES_ADDR);

	*iqdc_third_point_type = (local_val & ((u32)0x00004000)) >> 14;
	*iqdc_vga_thres_b = (local_val & ((u32)0x00003E00)) >> 9;
	*iqdc_vga_thres_a = (local_val & ((u32)0x000001F0)) >> 4;
	*iqdc_lna_thres = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 riu_iqdc_rx_1_thres_iqdc_third_point_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_THRES_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void riu_iqdc_rx_1_thres_iqdc_third_point_type_setf(struct cl_chip *chip, u8 iqdcthirdpointtype)
{
	ASSERT_ERR_CHIP((((u32)iqdcthirdpointtype << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_THRES_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_THRES_ADDR) & ~((u32)0x00004000)) | ((u32)iqdcthirdpointtype << 14));
}

static inline u8 riu_iqdc_rx_1_thres_iqdc_vga_thres_b_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_THRES_ADDR);

	return (u8)((local_val & ((u32)0x00003E00)) >> 9);
}

static inline void riu_iqdc_rx_1_thres_iqdc_vga_thres_b_setf(struct cl_chip *chip, u8 iqdcvgathresb)
{
	ASSERT_ERR_CHIP((((u32)iqdcvgathresb << 9) & ~((u32)0x00003E00)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_THRES_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_THRES_ADDR) & ~((u32)0x00003E00)) | ((u32)iqdcvgathresb << 9));
}

static inline u8 riu_iqdc_rx_1_thres_iqdc_vga_thres_a_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_THRES_ADDR);

	return (u8)((local_val & ((u32)0x000001F0)) >> 4);
}

static inline void riu_iqdc_rx_1_thres_iqdc_vga_thres_a_setf(struct cl_chip *chip, u8 iqdcvgathresa)
{
	ASSERT_ERR_CHIP((((u32)iqdcvgathresa << 4) & ~((u32)0x000001F0)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_THRES_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_THRES_ADDR) & ~((u32)0x000001F0)) | ((u32)iqdcvgathresa << 4));
}

static inline u8 riu_iqdc_rx_1_thres_iqdc_lna_thres_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_THRES_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

static inline void riu_iqdc_rx_1_thres_iqdc_lna_thres_setf(struct cl_chip *chip, u8 iqdclnathres)
{
	ASSERT_ERR_CHIP((((u32)iqdclnathres << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_THRES_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_THRES_ADDR) & ~((u32)0x0000000F)) | ((u32)iqdclnathres << 0));
}

/**
 * @brief FEBCNTL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:26 TXNORM                    0x0
 *    25:20 MAXSTAGE                  0x27
 *    18:16 RXSHIFT4044               0x4
 *    15:14 TXSHIFT4044               0x1
 *    13:08 BTXPATHSELREG             0xF
 *    07:05 BRXPATHSELREG             0x0
 *    04    RXPATHSELFROMREG          1
 *    03    FIRDISB                   0
 *    02    GAINDISB                  0
 *    01    INTERPDISB                0
 *    00    FIRCOEFSEL                0
 * </pre>
 */
#define RIU_FEBCNTL_ADDR        (REG_RIU_BASE_ADDR + 0x00000500)
#define RIU_FEBCNTL_OFFSET      0x00000500
#define RIU_FEBCNTL_INDEX       0x00000140
#define RIU_FEBCNTL_RESET       0x02744F10

static inline u32 riu_febcntl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FEBCNTL_ADDR);
}

static inline void riu_febcntl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_FEBCNTL_ADDR, value);
}

/* Field definitions */
#define RIU_FEBCNTL_TXNORM_MASK             ((u32)0xFC000000)
#define RIU_FEBCNTL_TXNORM_LSB              26
#define RIU_FEBCNTL_TXNORM_WIDTH            ((u32)0x00000006)
#define RIU_FEBCNTL_MAXSTAGE_MASK           ((u32)0x03F00000)
#define RIU_FEBCNTL_MAXSTAGE_LSB            20
#define RIU_FEBCNTL_MAXSTAGE_WIDTH          ((u32)0x00000006)
#define RIU_FEBCNTL_RXSHIFT_4044_MASK       ((u32)0x00070000)
#define RIU_FEBCNTL_RXSHIFT_4044_LSB        16
#define RIU_FEBCNTL_RXSHIFT_4044_WIDTH      ((u32)0x00000003)
#define RIU_FEBCNTL_TXSHIFT_4044_MASK       ((u32)0x0000C000)
#define RIU_FEBCNTL_TXSHIFT_4044_LSB        14
#define RIU_FEBCNTL_TXSHIFT_4044_WIDTH      ((u32)0x00000002)
#define RIU_FEBCNTL_BTXPATHSELREG_MASK      ((u32)0x00003F00)
#define RIU_FEBCNTL_BTXPATHSELREG_LSB       8
#define RIU_FEBCNTL_BTXPATHSELREG_WIDTH     ((u32)0x00000006)
#define RIU_FEBCNTL_BRXPATHSELREG_MASK      ((u32)0x000000E0)
#define RIU_FEBCNTL_BRXPATHSELREG_LSB       5
#define RIU_FEBCNTL_BRXPATHSELREG_WIDTH     ((u32)0x00000003)
#define RIU_FEBCNTL_RXPATHSELFROMREG_BIT    ((u32)0x00000010)
#define RIU_FEBCNTL_RXPATHSELFROMREG_POS    4
#define RIU_FEBCNTL_FIRDISB_BIT             ((u32)0x00000008)
#define RIU_FEBCNTL_FIRDISB_POS             3
#define RIU_FEBCNTL_GAINDISB_BIT            ((u32)0x00000004)
#define RIU_FEBCNTL_GAINDISB_POS            2
#define RIU_FEBCNTL_INTERPDISB_BIT          ((u32)0x00000002)
#define RIU_FEBCNTL_INTERPDISB_POS          1
#define RIU_FEBCNTL_FIRCOEFSEL_BIT          ((u32)0x00000001)
#define RIU_FEBCNTL_FIRCOEFSEL_POS          0

#define RIU_FEBCNTL_TXNORM_RST              0x0
#define RIU_FEBCNTL_MAXSTAGE_RST            0x27
#define RIU_FEBCNTL_RXSHIFT_4044_RST        0x4
#define RIU_FEBCNTL_TXSHIFT_4044_RST        0x1
#define RIU_FEBCNTL_BTXPATHSELREG_RST       0xF
#define RIU_FEBCNTL_BRXPATHSELREG_RST       0x0
#define RIU_FEBCNTL_RXPATHSELFROMREG_RST    0x1
#define RIU_FEBCNTL_FIRDISB_RST             0x0
#define RIU_FEBCNTL_GAINDISB_RST            0x0
#define RIU_FEBCNTL_INTERPDISB_RST          0x0
#define RIU_FEBCNTL_FIRCOEFSEL_RST          0x0

static inline void riu_febcntl_pack(struct cl_chip *chip, u8 txnorm, u8 maxstage, u8 rxshift4044, u8 txshift4044, u8 btxpathselreg, u8 brxpathselreg, u8 rxpathselfromreg, u8 firdisb, u8 gaindisb, u8 interpdisb, u8 fircoefsel)
{
	ASSERT_ERR_CHIP((((u32)txnorm << 26) & ~((u32)0xFC000000)) == 0);
	ASSERT_ERR_CHIP((((u32)maxstage << 20) & ~((u32)0x03F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)rxshift4044 << 16) & ~((u32)0x00070000)) == 0);
	ASSERT_ERR_CHIP((((u32)txshift4044 << 14) & ~((u32)0x0000C000)) == 0);
	ASSERT_ERR_CHIP((((u32)btxpathselreg << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)brxpathselreg << 5) & ~((u32)0x000000E0)) == 0);
	ASSERT_ERR_CHIP((((u32)rxpathselfromreg << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)firdisb << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)gaindisb << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)interpdisb << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)fircoefsel << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_FEBCNTL_ADDR, ((u32)txnorm << 26) | ((u32)maxstage << 20) | ((u32)rxshift4044 << 16) | ((u32)txshift4044 << 14) | ((u32)btxpathselreg << 8) | ((u32)brxpathselreg << 5) | ((u32)rxpathselfromreg << 4) | ((u32)firdisb << 3) | ((u32)gaindisb << 2) | ((u32)interpdisb << 1) | ((u32)fircoefsel << 0));
}

static inline void riu_febcntl_unpack(struct cl_chip *chip, u8 *txnorm, u8 *maxstage, u8 *rxshift4044, u8 *txshift4044, u8 *btxpathselreg, u8 *brxpathselreg, u8 *rxpathselfromreg, u8 *firdisb, u8 *gaindisb, u8 *interpdisb, u8 *fircoefsel)
{
	u32 local_val = cl_reg_read(chip, RIU_FEBCNTL_ADDR);

	*txnorm = (local_val & ((u32)0xFC000000)) >> 26;
	*maxstage = (local_val & ((u32)0x03F00000)) >> 20;
	*rxshift4044 = (local_val & ((u32)0x00070000)) >> 16;
	*txshift4044 = (local_val & ((u32)0x0000C000)) >> 14;
	*btxpathselreg = (local_val & ((u32)0x00003F00)) >> 8;
	*brxpathselreg = (local_val & ((u32)0x000000E0)) >> 5;
	*rxpathselfromreg = (local_val & ((u32)0x00000010)) >> 4;
	*firdisb = (local_val & ((u32)0x00000008)) >> 3;
	*gaindisb = (local_val & ((u32)0x00000004)) >> 2;
	*interpdisb = (local_val & ((u32)0x00000002)) >> 1;
	*fircoefsel = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_febcntl_txnorm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FEBCNTL_ADDR);

	return (u8)((local_val & ((u32)0xFC000000)) >> 26);
}

static inline void riu_febcntl_txnorm_setf(struct cl_chip *chip, u8 txnorm)
{
	ASSERT_ERR_CHIP((((u32)txnorm << 26) & ~((u32)0xFC000000)) == 0);
	cl_reg_write(chip, RIU_FEBCNTL_ADDR, (cl_reg_read(chip, RIU_FEBCNTL_ADDR) & ~((u32)0xFC000000)) | ((u32)txnorm << 26));
}

static inline u8 riu_febcntl_maxstage_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FEBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x03F00000)) >> 20);
}

static inline void riu_febcntl_maxstage_setf(struct cl_chip *chip, u8 maxstage)
{
	ASSERT_ERR_CHIP((((u32)maxstage << 20) & ~((u32)0x03F00000)) == 0);
	cl_reg_write(chip, RIU_FEBCNTL_ADDR, (cl_reg_read(chip, RIU_FEBCNTL_ADDR) & ~((u32)0x03F00000)) | ((u32)maxstage << 20));
}

static inline u8 riu_febcntl_rxshift_4044_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FEBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00070000)) >> 16);
}

static inline void riu_febcntl_rxshift_4044_setf(struct cl_chip *chip, u8 rxshift4044)
{
	ASSERT_ERR_CHIP((((u32)rxshift4044 << 16) & ~((u32)0x00070000)) == 0);
	cl_reg_write(chip, RIU_FEBCNTL_ADDR, (cl_reg_read(chip, RIU_FEBCNTL_ADDR) & ~((u32)0x00070000)) | ((u32)rxshift4044 << 16));
}

static inline u8 riu_febcntl_txshift_4044_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FEBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x0000C000)) >> 14);
}

static inline void riu_febcntl_txshift_4044_setf(struct cl_chip *chip, u8 txshift4044)
{
	ASSERT_ERR_CHIP((((u32)txshift4044 << 14) & ~((u32)0x0000C000)) == 0);
	cl_reg_write(chip, RIU_FEBCNTL_ADDR, (cl_reg_read(chip, RIU_FEBCNTL_ADDR) & ~((u32)0x0000C000)) | ((u32)txshift4044 << 14));
}

static inline u8 riu_febcntl_btxpathselreg_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FEBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_febcntl_btxpathselreg_setf(struct cl_chip *chip, u8 btxpathselreg)
{
	ASSERT_ERR_CHIP((((u32)btxpathselreg << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_FEBCNTL_ADDR, (cl_reg_read(chip, RIU_FEBCNTL_ADDR) & ~((u32)0x00003F00)) | ((u32)btxpathselreg << 8));
}

static inline u8 riu_febcntl_brxpathselreg_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FEBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x000000E0)) >> 5);
}

static inline void riu_febcntl_brxpathselreg_setf(struct cl_chip *chip, u8 brxpathselreg)
{
	ASSERT_ERR_CHIP((((u32)brxpathselreg << 5) & ~((u32)0x000000E0)) == 0);
	cl_reg_write(chip, RIU_FEBCNTL_ADDR, (cl_reg_read(chip, RIU_FEBCNTL_ADDR) & ~((u32)0x000000E0)) | ((u32)brxpathselreg << 5));
}

static inline u8 riu_febcntl_rxpathselfromreg_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FEBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void riu_febcntl_rxpathselfromreg_setf(struct cl_chip *chip, u8 rxpathselfromreg)
{
	ASSERT_ERR_CHIP((((u32)rxpathselfromreg << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RIU_FEBCNTL_ADDR, (cl_reg_read(chip, RIU_FEBCNTL_ADDR) & ~((u32)0x00000010)) | ((u32)rxpathselfromreg << 4));
}

static inline u8 riu_febcntl_firdisb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FEBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void riu_febcntl_firdisb_setf(struct cl_chip *chip, u8 firdisb)
{
	ASSERT_ERR_CHIP((((u32)firdisb << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RIU_FEBCNTL_ADDR, (cl_reg_read(chip, RIU_FEBCNTL_ADDR) & ~((u32)0x00000008)) | ((u32)firdisb << 3));
}

static inline u8 riu_febcntl_gaindisb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FEBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void riu_febcntl_gaindisb_setf(struct cl_chip *chip, u8 gaindisb)
{
	ASSERT_ERR_CHIP((((u32)gaindisb << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RIU_FEBCNTL_ADDR, (cl_reg_read(chip, RIU_FEBCNTL_ADDR) & ~((u32)0x00000004)) | ((u32)gaindisb << 2));
}

static inline u8 riu_febcntl_interpdisb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FEBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void riu_febcntl_interpdisb_setf(struct cl_chip *chip, u8 interpdisb)
{
	ASSERT_ERR_CHIP((((u32)interpdisb << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_FEBCNTL_ADDR, (cl_reg_read(chip, RIU_FEBCNTL_ADDR) & ~((u32)0x00000002)) | ((u32)interpdisb << 1));
}

static inline u8 riu_febcntl_fircoefsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FEBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_febcntl_fircoefsel_setf(struct cl_chip *chip, u8 fircoefsel)
{
	ASSERT_ERR_CHIP((((u32)fircoefsel << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_FEBCNTL_ADDR, (cl_reg_read(chip, RIU_FEBCNTL_ADDR) & ~((u32)0x00000001)) | ((u32)fircoefsel << 0));
}

/**
 * @brief MDMBCNTL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    28    IQMMDISB                  0
 *    26    PRECOMPDISB               0
 *    25    DCOFFDISB                 0
 *    24    COMPDISB                  0
 *    23    EQDISB                    0
 *    21    SPREADDISB                0
 *    20    SCRAMBDISB                0
 *    14:12 SFDERR                    0x0
 *    10:08 SFDLEN                    0x0
 *    05:00 PREPRE                    0x0
 * </pre>
 */
#define RIU_MDMBCNTL_ADDR        (REG_RIU_BASE_ADDR + 0x00000504)
#define RIU_MDMBCNTL_OFFSET      0x00000504
#define RIU_MDMBCNTL_INDEX       0x00000141
#define RIU_MDMBCNTL_RESET       0x00000000

static inline u32 riu_mdmbcntl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_MDMBCNTL_ADDR);
}

static inline void riu_mdmbcntl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_MDMBCNTL_ADDR, value);
}

/* Field definitions */
#define RIU_MDMBCNTL_IQMMDISB_BIT           ((u32)0x10000000)
#define RIU_MDMBCNTL_IQMMDISB_POS           28
#define RIU_MDMBCNTL_PRECOMPDISB_BIT        ((u32)0x04000000)
#define RIU_MDMBCNTL_PRECOMPDISB_POS        26
#define RIU_MDMBCNTL_DCOFFDISB_BIT          ((u32)0x02000000)
#define RIU_MDMBCNTL_DCOFFDISB_POS          25
#define RIU_MDMBCNTL_COMPDISB_BIT           ((u32)0x01000000)
#define RIU_MDMBCNTL_COMPDISB_POS           24
#define RIU_MDMBCNTL_EQDISB_BIT             ((u32)0x00800000)
#define RIU_MDMBCNTL_EQDISB_POS             23
#define RIU_MDMBCNTL_SPREADDISB_BIT         ((u32)0x00200000)
#define RIU_MDMBCNTL_SPREADDISB_POS         21
#define RIU_MDMBCNTL_SCRAMBDISB_BIT         ((u32)0x00100000)
#define RIU_MDMBCNTL_SCRAMBDISB_POS         20
#define RIU_MDMBCNTL_SFDERR_MASK            ((u32)0x00007000)
#define RIU_MDMBCNTL_SFDERR_LSB             12
#define RIU_MDMBCNTL_SFDERR_WIDTH           ((u32)0x00000003)
#define RIU_MDMBCNTL_SFDLEN_MASK            ((u32)0x00000700)
#define RIU_MDMBCNTL_SFDLEN_LSB             8
#define RIU_MDMBCNTL_SFDLEN_WIDTH           ((u32)0x00000003)
#define RIU_MDMBCNTL_PREPRE_MASK            ((u32)0x0000003F)
#define RIU_MDMBCNTL_PREPRE_LSB             0
#define RIU_MDMBCNTL_PREPRE_WIDTH           ((u32)0x00000006)

#define RIU_MDMBCNTL_IQMMDISB_RST           0x0
#define RIU_MDMBCNTL_PRECOMPDISB_RST        0x0
#define RIU_MDMBCNTL_DCOFFDISB_RST          0x0
#define RIU_MDMBCNTL_COMPDISB_RST           0x0
#define RIU_MDMBCNTL_EQDISB_RST             0x0
#define RIU_MDMBCNTL_SPREADDISB_RST         0x0
#define RIU_MDMBCNTL_SCRAMBDISB_RST         0x0
#define RIU_MDMBCNTL_SFDERR_RST             0x0
#define RIU_MDMBCNTL_SFDLEN_RST             0x0
#define RIU_MDMBCNTL_PREPRE_RST             0x0

static inline void riu_mdmbcntl_pack(struct cl_chip *chip, u8 iqmmdisb, u8 precompdisb, u8 dcoffdisb, u8 compdisb, u8 eqdisb, u8 spreaddisb, u8 scrambdisb, u8 sfderr, u8 sfdlen, u8 prepre)
{
	ASSERT_ERR_CHIP((((u32)iqmmdisb << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)precompdisb << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)dcoffdisb << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)compdisb << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)eqdisb << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)spreaddisb << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)scrambdisb << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)sfderr << 12) & ~((u32)0x00007000)) == 0);
	ASSERT_ERR_CHIP((((u32)sfdlen << 8) & ~((u32)0x00000700)) == 0);
	ASSERT_ERR_CHIP((((u32)prepre << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_ADDR, ((u32)iqmmdisb << 28) | ((u32)precompdisb << 26) | ((u32)dcoffdisb << 25) | ((u32)compdisb << 24) | ((u32)eqdisb << 23) | ((u32)spreaddisb << 21) | ((u32)scrambdisb << 20) | ((u32)sfderr << 12) | ((u32)sfdlen << 8) | ((u32)prepre << 0));
}

static inline void riu_mdmbcntl_unpack(struct cl_chip *chip, u8 *iqmmdisb, u8 *precompdisb, u8 *dcoffdisb, u8 *compdisb, u8 *eqdisb, u8 *spreaddisb, u8 *scrambdisb, u8 *sfderr, u8 *sfdlen, u8 *prepre)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_ADDR);

	*iqmmdisb = (local_val & ((u32)0x10000000)) >> 28;
	*precompdisb = (local_val & ((u32)0x04000000)) >> 26;
	*dcoffdisb = (local_val & ((u32)0x02000000)) >> 25;
	*compdisb = (local_val & ((u32)0x01000000)) >> 24;
	*eqdisb = (local_val & ((u32)0x00800000)) >> 23;
	*spreaddisb = (local_val & ((u32)0x00200000)) >> 21;
	*scrambdisb = (local_val & ((u32)0x00100000)) >> 20;
	*sfderr = (local_val & ((u32)0x00007000)) >> 12;
	*sfdlen = (local_val & ((u32)0x00000700)) >> 8;
	*prepre = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_mdmbcntl_iqmmdisb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void riu_mdmbcntl_iqmmdisb_setf(struct cl_chip *chip, u8 iqmmdisb)
{
	ASSERT_ERR_CHIP((((u32)iqmmdisb << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_ADDR) & ~((u32)0x10000000)) | ((u32)iqmmdisb << 28));
}

static inline u8 riu_mdmbcntl_precompdisb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void riu_mdmbcntl_precompdisb_setf(struct cl_chip *chip, u8 precompdisb)
{
	ASSERT_ERR_CHIP((((u32)precompdisb << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_ADDR) & ~((u32)0x04000000)) | ((u32)precompdisb << 26));
}

static inline u8 riu_mdmbcntl_dcoffdisb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void riu_mdmbcntl_dcoffdisb_setf(struct cl_chip *chip, u8 dcoffdisb)
{
	ASSERT_ERR_CHIP((((u32)dcoffdisb << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_ADDR) & ~((u32)0x02000000)) | ((u32)dcoffdisb << 25));
}

static inline u8 riu_mdmbcntl_compdisb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void riu_mdmbcntl_compdisb_setf(struct cl_chip *chip, u8 compdisb)
{
	ASSERT_ERR_CHIP((((u32)compdisb << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_ADDR) & ~((u32)0x01000000)) | ((u32)compdisb << 24));
}

static inline u8 riu_mdmbcntl_eqdisb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void riu_mdmbcntl_eqdisb_setf(struct cl_chip *chip, u8 eqdisb)
{
	ASSERT_ERR_CHIP((((u32)eqdisb << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_ADDR) & ~((u32)0x00800000)) | ((u32)eqdisb << 23));
}

static inline u8 riu_mdmbcntl_spreaddisb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline void riu_mdmbcntl_spreaddisb_setf(struct cl_chip *chip, u8 spreaddisb)
{
	ASSERT_ERR_CHIP((((u32)spreaddisb << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_ADDR) & ~((u32)0x00200000)) | ((u32)spreaddisb << 21));
}

static inline u8 riu_mdmbcntl_scrambdisb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void riu_mdmbcntl_scrambdisb_setf(struct cl_chip *chip, u8 scrambdisb)
{
	ASSERT_ERR_CHIP((((u32)scrambdisb << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_ADDR) & ~((u32)0x00100000)) | ((u32)scrambdisb << 20));
}

static inline u8 riu_mdmbcntl_sfderr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00007000)) >> 12);
}

static inline void riu_mdmbcntl_sfderr_setf(struct cl_chip *chip, u8 sfderr)
{
	ASSERT_ERR_CHIP((((u32)sfderr << 12) & ~((u32)0x00007000)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_ADDR) & ~((u32)0x00007000)) | ((u32)sfderr << 12));
}

static inline u8 riu_mdmbcntl_sfdlen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00000700)) >> 8);
}

static inline void riu_mdmbcntl_sfdlen_setf(struct cl_chip *chip, u8 sfdlen)
{
	ASSERT_ERR_CHIP((((u32)sfdlen << 8) & ~((u32)0x00000700)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_ADDR) & ~((u32)0x00000700)) | ((u32)sfdlen << 8));
}

static inline u8 riu_mdmbcntl_prepre_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_mdmbcntl_prepre_setf(struct cl_chip *chip, u8 prepre)
{
	ASSERT_ERR_CHIP((((u32)prepre << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_ADDR) & ~((u32)0x0000003F)) | ((u32)prepre << 0));
}

/**
 * @brief MDMBPRMINIT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21:20 RHO                       0x0
 *    17:16 MU                        0x1
 *    05:04 BETA                      0x2
 *    01:00 ALPHA                     0x2
 * </pre>
 */
#define RIU_MDMBPRMINIT_ADDR        (REG_RIU_BASE_ADDR + 0x00000508)
#define RIU_MDMBPRMINIT_OFFSET      0x00000508
#define RIU_MDMBPRMINIT_INDEX       0x00000142
#define RIU_MDMBPRMINIT_RESET       0x00010022

static inline u32 riu_mdmbprminit_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_MDMBPRMINIT_ADDR);
}

static inline void riu_mdmbprminit_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_MDMBPRMINIT_ADDR, value);
}

/* Field definitions */
#define RIU_MDMBPRMINIT_RHO_MASK            ((u32)0x00300000)
#define RIU_MDMBPRMINIT_RHO_LSB             20
#define RIU_MDMBPRMINIT_RHO_WIDTH           ((u32)0x00000002)
#define RIU_MDMBPRMINIT_MU_MASK             ((u32)0x00030000)
#define RIU_MDMBPRMINIT_MU_LSB              16
#define RIU_MDMBPRMINIT_MU_WIDTH            ((u32)0x00000002)
#define RIU_MDMBPRMINIT_BETA_MASK           ((u32)0x00000030)
#define RIU_MDMBPRMINIT_BETA_LSB            4
#define RIU_MDMBPRMINIT_BETA_WIDTH          ((u32)0x00000002)
#define RIU_MDMBPRMINIT_ALPHA_MASK          ((u32)0x00000003)
#define RIU_MDMBPRMINIT_ALPHA_LSB           0
#define RIU_MDMBPRMINIT_ALPHA_WIDTH         ((u32)0x00000002)

#define RIU_MDMBPRMINIT_RHO_RST             0x0
#define RIU_MDMBPRMINIT_MU_RST              0x1
#define RIU_MDMBPRMINIT_BETA_RST            0x2
#define RIU_MDMBPRMINIT_ALPHA_RST           0x2

static inline void riu_mdmbprminit_pack(struct cl_chip *chip, u8 rho, u8 mu, u8 beta, u8 alpha)
{
	ASSERT_ERR_CHIP((((u32)rho << 20) & ~((u32)0x00300000)) == 0);
	ASSERT_ERR_CHIP((((u32)mu << 16) & ~((u32)0x00030000)) == 0);
	ASSERT_ERR_CHIP((((u32)beta << 4) & ~((u32)0x00000030)) == 0);
	ASSERT_ERR_CHIP((((u32)alpha << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RIU_MDMBPRMINIT_ADDR, ((u32)rho << 20) | ((u32)mu << 16) | ((u32)beta << 4) | ((u32)alpha << 0));
}

static inline void riu_mdmbprminit_unpack(struct cl_chip *chip, u8 *rho, u8 *mu, u8 *beta, u8 *alpha)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBPRMINIT_ADDR);

	*rho = (local_val & ((u32)0x00300000)) >> 20;
	*mu = (local_val & ((u32)0x00030000)) >> 16;
	*beta = (local_val & ((u32)0x00000030)) >> 4;
	*alpha = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 riu_mdmbprminit_rho_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBPRMINIT_ADDR);

	return (u8)((local_val & ((u32)0x00300000)) >> 20);
}

static inline void riu_mdmbprminit_rho_setf(struct cl_chip *chip, u8 rho)
{
	ASSERT_ERR_CHIP((((u32)rho << 20) & ~((u32)0x00300000)) == 0);
	cl_reg_write(chip, RIU_MDMBPRMINIT_ADDR, (cl_reg_read(chip, RIU_MDMBPRMINIT_ADDR) & ~((u32)0x00300000)) | ((u32)rho << 20));
}

static inline u8 riu_mdmbprminit_mu_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBPRMINIT_ADDR);

	return (u8)((local_val & ((u32)0x00030000)) >> 16);
}

static inline void riu_mdmbprminit_mu_setf(struct cl_chip *chip, u8 mu)
{
	ASSERT_ERR_CHIP((((u32)mu << 16) & ~((u32)0x00030000)) == 0);
	cl_reg_write(chip, RIU_MDMBPRMINIT_ADDR, (cl_reg_read(chip, RIU_MDMBPRMINIT_ADDR) & ~((u32)0x00030000)) | ((u32)mu << 16));
}

static inline u8 riu_mdmbprminit_beta_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBPRMINIT_ADDR);

	return (u8)((local_val & ((u32)0x00000030)) >> 4);
}

static inline void riu_mdmbprminit_beta_setf(struct cl_chip *chip, u8 beta)
{
	ASSERT_ERR_CHIP((((u32)beta << 4) & ~((u32)0x00000030)) == 0);
	cl_reg_write(chip, RIU_MDMBPRMINIT_ADDR, (cl_reg_read(chip, RIU_MDMBPRMINIT_ADDR) & ~((u32)0x00000030)) | ((u32)beta << 4));
}

static inline u8 riu_mdmbprminit_alpha_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBPRMINIT_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void riu_mdmbprminit_alpha_setf(struct cl_chip *chip, u8 alpha)
{
	ASSERT_ERR_CHIP((((u32)alpha << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RIU_MDMBPRMINIT_ADDR, (cl_reg_read(chip, RIU_MDMBPRMINIT_ADDR) & ~((u32)0x00000003)) | ((u32)alpha << 0));
}

/**
 * @brief MDMBTALPHA register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 TALPHA3                   0x6
 *    11:08 TALPHA2                   0x2
 *    07:04 TALPHA1                   0x3
 *    03:00 TALPHA0                   0x6
 * </pre>
 */
#define RIU_MDMBTALPHA_ADDR        (REG_RIU_BASE_ADDR + 0x0000050C)
#define RIU_MDMBTALPHA_OFFSET      0x0000050C
#define RIU_MDMBTALPHA_INDEX       0x00000143
#define RIU_MDMBTALPHA_RESET       0x00006236

static inline u32 riu_mdmbtalpha_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_MDMBTALPHA_ADDR);
}

static inline void riu_mdmbtalpha_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_MDMBTALPHA_ADDR, value);
}

/* Field definitions */
#define RIU_MDMBTALPHA_TALPHA_3_MASK        ((u32)0x0000F000)
#define RIU_MDMBTALPHA_TALPHA_3_LSB         12
#define RIU_MDMBTALPHA_TALPHA_3_WIDTH       ((u32)0x00000004)
#define RIU_MDMBTALPHA_TALPHA_2_MASK        ((u32)0x00000F00)
#define RIU_MDMBTALPHA_TALPHA_2_LSB         8
#define RIU_MDMBTALPHA_TALPHA_2_WIDTH       ((u32)0x00000004)
#define RIU_MDMBTALPHA_TALPHA_1_MASK        ((u32)0x000000F0)
#define RIU_MDMBTALPHA_TALPHA_1_LSB         4
#define RIU_MDMBTALPHA_TALPHA_1_WIDTH       ((u32)0x00000004)
#define RIU_MDMBTALPHA_TALPHA_0_MASK        ((u32)0x0000000F)
#define RIU_MDMBTALPHA_TALPHA_0_LSB         0
#define RIU_MDMBTALPHA_TALPHA_0_WIDTH       ((u32)0x00000004)

#define RIU_MDMBTALPHA_TALPHA_3_RST         0x6
#define RIU_MDMBTALPHA_TALPHA_2_RST         0x2
#define RIU_MDMBTALPHA_TALPHA_1_RST         0x3
#define RIU_MDMBTALPHA_TALPHA_0_RST         0x6

static inline void riu_mdmbtalpha_pack(struct cl_chip *chip, u8 talpha3, u8 talpha2, u8 talpha1, u8 talpha0)
{
	ASSERT_ERR_CHIP((((u32)talpha3 << 12) & ~((u32)0x0000F000)) == 0);
	ASSERT_ERR_CHIP((((u32)talpha2 << 8) & ~((u32)0x00000F00)) == 0);
	ASSERT_ERR_CHIP((((u32)talpha1 << 4) & ~((u32)0x000000F0)) == 0);
	ASSERT_ERR_CHIP((((u32)talpha0 << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_MDMBTALPHA_ADDR, ((u32)talpha3 << 12) | ((u32)talpha2 << 8) | ((u32)talpha1 << 4) | ((u32)talpha0 << 0));
}

static inline void riu_mdmbtalpha_unpack(struct cl_chip *chip, u8 *talpha3, u8 *talpha2, u8 *talpha1, u8 *talpha0)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTALPHA_ADDR);

	*talpha3 = (local_val & ((u32)0x0000F000)) >> 12;
	*talpha2 = (local_val & ((u32)0x00000F00)) >> 8;
	*talpha1 = (local_val & ((u32)0x000000F0)) >> 4;
	*talpha0 = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 riu_mdmbtalpha_talpha_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTALPHA_ADDR);

	return (u8)((local_val & ((u32)0x0000F000)) >> 12);
}

static inline void riu_mdmbtalpha_talpha_3_setf(struct cl_chip *chip, u8 talpha3)
{
	ASSERT_ERR_CHIP((((u32)talpha3 << 12) & ~((u32)0x0000F000)) == 0);
	cl_reg_write(chip, RIU_MDMBTALPHA_ADDR, (cl_reg_read(chip, RIU_MDMBTALPHA_ADDR) & ~((u32)0x0000F000)) | ((u32)talpha3 << 12));
}

static inline u8 riu_mdmbtalpha_talpha_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTALPHA_ADDR);

	return (u8)((local_val & ((u32)0x00000F00)) >> 8);
}

static inline void riu_mdmbtalpha_talpha_2_setf(struct cl_chip *chip, u8 talpha2)
{
	ASSERT_ERR_CHIP((((u32)talpha2 << 8) & ~((u32)0x00000F00)) == 0);
	cl_reg_write(chip, RIU_MDMBTALPHA_ADDR, (cl_reg_read(chip, RIU_MDMBTALPHA_ADDR) & ~((u32)0x00000F00)) | ((u32)talpha2 << 8));
}

static inline u8 riu_mdmbtalpha_talpha_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTALPHA_ADDR);

	return (u8)((local_val & ((u32)0x000000F0)) >> 4);
}

static inline void riu_mdmbtalpha_talpha_1_setf(struct cl_chip *chip, u8 talpha1)
{
	ASSERT_ERR_CHIP((((u32)talpha1 << 4) & ~((u32)0x000000F0)) == 0);
	cl_reg_write(chip, RIU_MDMBTALPHA_ADDR, (cl_reg_read(chip, RIU_MDMBTALPHA_ADDR) & ~((u32)0x000000F0)) | ((u32)talpha1 << 4));
}

static inline u8 riu_mdmbtalpha_talpha_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTALPHA_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

static inline void riu_mdmbtalpha_talpha_0_setf(struct cl_chip *chip, u8 talpha0)
{
	ASSERT_ERR_CHIP((((u32)talpha0 << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_MDMBTALPHA_ADDR, (cl_reg_read(chip, RIU_MDMBTALPHA_ADDR) & ~((u32)0x0000000F)) | ((u32)talpha0 << 0));
}

/**
 * @brief MDMBTBETA register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 TBETA3                    0x6
 *    11:08 TBETA2                    0x2
 *    07:04 TBETA1                    0x3
 *    03:00 TBETA0                    0x6
 * </pre>
 */
#define RIU_MDMBTBETA_ADDR        (REG_RIU_BASE_ADDR + 0x00000510)
#define RIU_MDMBTBETA_OFFSET      0x00000510
#define RIU_MDMBTBETA_INDEX       0x00000144
#define RIU_MDMBTBETA_RESET       0x00006236

static inline u32 riu_mdmbtbeta_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_MDMBTBETA_ADDR);
}

static inline void riu_mdmbtbeta_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_MDMBTBETA_ADDR, value);
}

/* Field definitions */
#define RIU_MDMBTBETA_TBETA_3_MASK          ((u32)0x0000F000)
#define RIU_MDMBTBETA_TBETA_3_LSB           12
#define RIU_MDMBTBETA_TBETA_3_WIDTH         ((u32)0x00000004)
#define RIU_MDMBTBETA_TBETA_2_MASK          ((u32)0x00000F00)
#define RIU_MDMBTBETA_TBETA_2_LSB           8
#define RIU_MDMBTBETA_TBETA_2_WIDTH         ((u32)0x00000004)
#define RIU_MDMBTBETA_TBETA_1_MASK          ((u32)0x000000F0)
#define RIU_MDMBTBETA_TBETA_1_LSB           4
#define RIU_MDMBTBETA_TBETA_1_WIDTH         ((u32)0x00000004)
#define RIU_MDMBTBETA_TBETA_0_MASK          ((u32)0x0000000F)
#define RIU_MDMBTBETA_TBETA_0_LSB           0
#define RIU_MDMBTBETA_TBETA_0_WIDTH         ((u32)0x00000004)

#define RIU_MDMBTBETA_TBETA_3_RST           0x6
#define RIU_MDMBTBETA_TBETA_2_RST           0x2
#define RIU_MDMBTBETA_TBETA_1_RST           0x3
#define RIU_MDMBTBETA_TBETA_0_RST           0x6

static inline void riu_mdmbtbeta_pack(struct cl_chip *chip, u8 tbeta3, u8 tbeta2, u8 tbeta1, u8 tbeta0)
{
	ASSERT_ERR_CHIP((((u32)tbeta3 << 12) & ~((u32)0x0000F000)) == 0);
	ASSERT_ERR_CHIP((((u32)tbeta2 << 8) & ~((u32)0x00000F00)) == 0);
	ASSERT_ERR_CHIP((((u32)tbeta1 << 4) & ~((u32)0x000000F0)) == 0);
	ASSERT_ERR_CHIP((((u32)tbeta0 << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_MDMBTBETA_ADDR, ((u32)tbeta3 << 12) | ((u32)tbeta2 << 8) | ((u32)tbeta1 << 4) | ((u32)tbeta0 << 0));
}

static inline void riu_mdmbtbeta_unpack(struct cl_chip *chip, u8 *tbeta3, u8 *tbeta2, u8 *tbeta1, u8 *tbeta0)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTBETA_ADDR);

	*tbeta3 = (local_val & ((u32)0x0000F000)) >> 12;
	*tbeta2 = (local_val & ((u32)0x00000F00)) >> 8;
	*tbeta1 = (local_val & ((u32)0x000000F0)) >> 4;
	*tbeta0 = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 riu_mdmbtbeta_tbeta_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTBETA_ADDR);

	return (u8)((local_val & ((u32)0x0000F000)) >> 12);
}

static inline void riu_mdmbtbeta_tbeta_3_setf(struct cl_chip *chip, u8 tbeta3)
{
	ASSERT_ERR_CHIP((((u32)tbeta3 << 12) & ~((u32)0x0000F000)) == 0);
	cl_reg_write(chip, RIU_MDMBTBETA_ADDR, (cl_reg_read(chip, RIU_MDMBTBETA_ADDR) & ~((u32)0x0000F000)) | ((u32)tbeta3 << 12));
}

static inline u8 riu_mdmbtbeta_tbeta_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTBETA_ADDR);

	return (u8)((local_val & ((u32)0x00000F00)) >> 8);
}

static inline void riu_mdmbtbeta_tbeta_2_setf(struct cl_chip *chip, u8 tbeta2)
{
	ASSERT_ERR_CHIP((((u32)tbeta2 << 8) & ~((u32)0x00000F00)) == 0);
	cl_reg_write(chip, RIU_MDMBTBETA_ADDR, (cl_reg_read(chip, RIU_MDMBTBETA_ADDR) & ~((u32)0x00000F00)) | ((u32)tbeta2 << 8));
}

static inline u8 riu_mdmbtbeta_tbeta_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTBETA_ADDR);

	return (u8)((local_val & ((u32)0x000000F0)) >> 4);
}

static inline void riu_mdmbtbeta_tbeta_1_setf(struct cl_chip *chip, u8 tbeta1)
{
	ASSERT_ERR_CHIP((((u32)tbeta1 << 4) & ~((u32)0x000000F0)) == 0);
	cl_reg_write(chip, RIU_MDMBTBETA_ADDR, (cl_reg_read(chip, RIU_MDMBTBETA_ADDR) & ~((u32)0x000000F0)) | ((u32)tbeta1 << 4));
}

static inline u8 riu_mdmbtbeta_tbeta_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTBETA_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

static inline void riu_mdmbtbeta_tbeta_0_setf(struct cl_chip *chip, u8 tbeta0)
{
	ASSERT_ERR_CHIP((((u32)tbeta0 << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_MDMBTBETA_ADDR, (cl_reg_read(chip, RIU_MDMBTBETA_ADDR) & ~((u32)0x0000000F)) | ((u32)tbeta0 << 0));
}

/**
 * @brief MDMBTMU register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 TMU3                      0x5
 *    11:08 TMU2                      0x5
 *    07:04 TMU1                      0x5
 *    03:00 TMU0                      0x5
 * </pre>
 */
#define RIU_MDMBTMU_ADDR        (REG_RIU_BASE_ADDR + 0x00000514)
#define RIU_MDMBTMU_OFFSET      0x00000514
#define RIU_MDMBTMU_INDEX       0x00000145
#define RIU_MDMBTMU_RESET       0x00005555

static inline u32 riu_mdmbtmu_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_MDMBTMU_ADDR);
}

static inline void riu_mdmbtmu_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_MDMBTMU_ADDR, value);
}

/* Field definitions */
#define RIU_MDMBTMU_TMU_3_MASK              ((u32)0x0000F000)
#define RIU_MDMBTMU_TMU_3_LSB               12
#define RIU_MDMBTMU_TMU_3_WIDTH             ((u32)0x00000004)
#define RIU_MDMBTMU_TMU_2_MASK              ((u32)0x00000F00)
#define RIU_MDMBTMU_TMU_2_LSB               8
#define RIU_MDMBTMU_TMU_2_WIDTH             ((u32)0x00000004)
#define RIU_MDMBTMU_TMU_1_MASK              ((u32)0x000000F0)
#define RIU_MDMBTMU_TMU_1_LSB               4
#define RIU_MDMBTMU_TMU_1_WIDTH             ((u32)0x00000004)
#define RIU_MDMBTMU_TMU_0_MASK              ((u32)0x0000000F)
#define RIU_MDMBTMU_TMU_0_LSB               0
#define RIU_MDMBTMU_TMU_0_WIDTH             ((u32)0x00000004)

#define RIU_MDMBTMU_TMU_3_RST               0x5
#define RIU_MDMBTMU_TMU_2_RST               0x5
#define RIU_MDMBTMU_TMU_1_RST               0x5
#define RIU_MDMBTMU_TMU_0_RST               0x5

static inline void riu_mdmbtmu_pack(struct cl_chip *chip, u8 tmu3, u8 tmu2, u8 tmu1, u8 tmu0)
{
	ASSERT_ERR_CHIP((((u32)tmu3 << 12) & ~((u32)0x0000F000)) == 0);
	ASSERT_ERR_CHIP((((u32)tmu2 << 8) & ~((u32)0x00000F00)) == 0);
	ASSERT_ERR_CHIP((((u32)tmu1 << 4) & ~((u32)0x000000F0)) == 0);
	ASSERT_ERR_CHIP((((u32)tmu0 << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_MDMBTMU_ADDR, ((u32)tmu3 << 12) | ((u32)tmu2 << 8) | ((u32)tmu1 << 4) | ((u32)tmu0 << 0));
}

static inline void riu_mdmbtmu_unpack(struct cl_chip *chip, u8 *tmu3, u8 *tmu2, u8 *tmu1, u8 *tmu0)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTMU_ADDR);

	*tmu3 = (local_val & ((u32)0x0000F000)) >> 12;
	*tmu2 = (local_val & ((u32)0x00000F00)) >> 8;
	*tmu1 = (local_val & ((u32)0x000000F0)) >> 4;
	*tmu0 = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 riu_mdmbtmu_tmu_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTMU_ADDR);

	return (u8)((local_val & ((u32)0x0000F000)) >> 12);
}

static inline void riu_mdmbtmu_tmu_3_setf(struct cl_chip *chip, u8 tmu3)
{
	ASSERT_ERR_CHIP((((u32)tmu3 << 12) & ~((u32)0x0000F000)) == 0);
	cl_reg_write(chip, RIU_MDMBTMU_ADDR, (cl_reg_read(chip, RIU_MDMBTMU_ADDR) & ~((u32)0x0000F000)) | ((u32)tmu3 << 12));
}

static inline u8 riu_mdmbtmu_tmu_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTMU_ADDR);

	return (u8)((local_val & ((u32)0x00000F00)) >> 8);
}

static inline void riu_mdmbtmu_tmu_2_setf(struct cl_chip *chip, u8 tmu2)
{
	ASSERT_ERR_CHIP((((u32)tmu2 << 8) & ~((u32)0x00000F00)) == 0);
	cl_reg_write(chip, RIU_MDMBTMU_ADDR, (cl_reg_read(chip, RIU_MDMBTMU_ADDR) & ~((u32)0x00000F00)) | ((u32)tmu2 << 8));
}

static inline u8 riu_mdmbtmu_tmu_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTMU_ADDR);

	return (u8)((local_val & ((u32)0x000000F0)) >> 4);
}

static inline void riu_mdmbtmu_tmu_1_setf(struct cl_chip *chip, u8 tmu1)
{
	ASSERT_ERR_CHIP((((u32)tmu1 << 4) & ~((u32)0x000000F0)) == 0);
	cl_reg_write(chip, RIU_MDMBTMU_ADDR, (cl_reg_read(chip, RIU_MDMBTMU_ADDR) & ~((u32)0x000000F0)) | ((u32)tmu1 << 4));
}

static inline u8 riu_mdmbtmu_tmu_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTMU_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

static inline void riu_mdmbtmu_tmu_0_setf(struct cl_chip *chip, u8 tmu0)
{
	ASSERT_ERR_CHIP((((u32)tmu0 << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_MDMBTMU_ADDR, (cl_reg_read(chip, RIU_MDMBTMU_ADDR) & ~((u32)0x0000000F)) | ((u32)tmu0 << 0));
}

/**
 * @brief MDMBCNTL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    MDMB_EXIT_FORCED          0
 *    30    MDMB_EXIT_ON_OFDMLOCK     1
 *    29    MDMB_EXIT_ON_DSSSUNLOCK   1
 *    12    RXLENCHKEN                1
 *    11:00 RXMAXLENGTH               0x92A
 * </pre>
 */
#define RIU_MDMBCNTL_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000518)
#define RIU_MDMBCNTL_1_OFFSET      0x00000518
#define RIU_MDMBCNTL_1_INDEX       0x00000146
#define RIU_MDMBCNTL_1_RESET       0x6000192A

static inline u32 riu_mdmbcntl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_MDMBCNTL_1_ADDR);
}

static inline void riu_mdmbcntl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_MDMBCNTL_1_ADDR, value);
}

/* Field definitions */
#define RIU_MDMBCNTL_1_MDMB_EXIT_FORCED_BIT    ((u32)0x80000000)
#define RIU_MDMBCNTL_1_MDMB_EXIT_FORCED_POS    31
#define RIU_MDMBCNTL_1_MDMB_EXIT_ON_OFDMLOCK_BIT    ((u32)0x40000000)
#define RIU_MDMBCNTL_1_MDMB_EXIT_ON_OFDMLOCK_POS    30
#define RIU_MDMBCNTL_1_MDMB_EXIT_ON_DSSSUNLOCK_BIT    ((u32)0x20000000)
#define RIU_MDMBCNTL_1_MDMB_EXIT_ON_DSSSUNLOCK_POS    29
#define RIU_MDMBCNTL_1_RXLENCHKEN_BIT       ((u32)0x00001000)
#define RIU_MDMBCNTL_1_RXLENCHKEN_POS       12
#define RIU_MDMBCNTL_1_RXMAXLENGTH_MASK     ((u32)0x00000FFF)
#define RIU_MDMBCNTL_1_RXMAXLENGTH_LSB      0
#define RIU_MDMBCNTL_1_RXMAXLENGTH_WIDTH    ((u32)0x0000000C)

#define RIU_MDMBCNTL_1_MDMB_EXIT_FORCED_RST    0x0
#define RIU_MDMBCNTL_1_MDMB_EXIT_ON_OFDMLOCK_RST    0x1
#define RIU_MDMBCNTL_1_MDMB_EXIT_ON_DSSSUNLOCK_RST    0x1
#define RIU_MDMBCNTL_1_RXLENCHKEN_RST       0x1
#define RIU_MDMBCNTL_1_RXMAXLENGTH_RST      0x92A

static inline void riu_mdmbcntl_1_pack(struct cl_chip *chip, u8 mdmb_exit_forced, u8 mdmb_exit_on_ofdmlock, u8 mdmb_exit_on_dsssunlock, u8 rxlenchken, u16 rxmaxlength)
{
	ASSERT_ERR_CHIP((((u32)mdmb_exit_forced << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)mdmb_exit_on_ofdmlock << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)mdmb_exit_on_dsssunlock << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rxlenchken << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)rxmaxlength << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_1_ADDR, ((u32)mdmb_exit_forced << 31) | ((u32)mdmb_exit_on_ofdmlock << 30) | ((u32)mdmb_exit_on_dsssunlock << 29) | ((u32)rxlenchken << 12) | ((u32)rxmaxlength << 0));
}

static inline void riu_mdmbcntl_1_unpack(struct cl_chip *chip, u8 *mdmb_exit_forced, u8 *mdmb_exit_on_ofdmlock, u8 *mdmb_exit_on_dsssunlock, u8 *rxlenchken, u16 *rxmaxlength)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_1_ADDR);

	*mdmb_exit_forced = (local_val & ((u32)0x80000000)) >> 31;
	*mdmb_exit_on_ofdmlock = (local_val & ((u32)0x40000000)) >> 30;
	*mdmb_exit_on_dsssunlock = (local_val & ((u32)0x20000000)) >> 29;
	*rxlenchken = (local_val & ((u32)0x00001000)) >> 12;
	*rxmaxlength = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u8 riu_mdmbcntl_1_mdmb_exit_forced_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_1_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_mdmbcntl_1_mdmb_exit_forced_setf(struct cl_chip *chip, u8 mdmbexitforced)
{
	ASSERT_ERR_CHIP((((u32)mdmbexitforced << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_1_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_1_ADDR) & ~((u32)0x80000000)) | ((u32)mdmbexitforced << 31));
}

static inline u8 riu_mdmbcntl_1_mdmb_exit_on_ofdmlock_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_1_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void riu_mdmbcntl_1_mdmb_exit_on_ofdmlock_setf(struct cl_chip *chip, u8 mdmbexitonofdmlock)
{
	ASSERT_ERR_CHIP((((u32)mdmbexitonofdmlock << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_1_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_1_ADDR) & ~((u32)0x40000000)) | ((u32)mdmbexitonofdmlock << 30));
}

static inline u8 riu_mdmbcntl_1_mdmb_exit_on_dsssunlock_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_1_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void riu_mdmbcntl_1_mdmb_exit_on_dsssunlock_setf(struct cl_chip *chip, u8 mdmbexitondsssunlock)
{
	ASSERT_ERR_CHIP((((u32)mdmbexitondsssunlock << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_1_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_1_ADDR) & ~((u32)0x20000000)) | ((u32)mdmbexitondsssunlock << 29));
}

static inline u8 riu_mdmbcntl_1_rxlenchken_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_1_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void riu_mdmbcntl_1_rxlenchken_setf(struct cl_chip *chip, u8 rxlenchken)
{
	ASSERT_ERR_CHIP((((u32)rxlenchken << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_1_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_1_ADDR) & ~((u32)0x00001000)) | ((u32)rxlenchken << 12));
}

static inline u16 riu_mdmbcntl_1_rxmaxlength_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_1_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

static inline void riu_mdmbcntl_1_rxmaxlength_setf(struct cl_chip *chip, u16 rxmaxlength)
{
	ASSERT_ERR_CHIP((((u32)rxmaxlength << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_1_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_1_ADDR) & ~((u32)0x00000FFF)) | ((u32)rxmaxlength << 0));
}

/**
 * @brief MDMBRFCNTL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    07:00 TXENDDEL                  0x30
 * </pre>
 */
#define RIU_MDMBRFCNTL_ADDR        (REG_RIU_BASE_ADDR + 0x0000051C)
#define RIU_MDMBRFCNTL_OFFSET      0x0000051C
#define RIU_MDMBRFCNTL_INDEX       0x00000147
#define RIU_MDMBRFCNTL_RESET       0x00000030

static inline u32 riu_mdmbrfcntl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_MDMBRFCNTL_ADDR);
}

static inline void riu_mdmbrfcntl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_MDMBRFCNTL_ADDR, value);
}

/* Field definitions */
#define RIU_MDMBRFCNTL_TXENDDEL_MASK        ((u32)0x000000FF)
#define RIU_MDMBRFCNTL_TXENDDEL_LSB         0
#define RIU_MDMBRFCNTL_TXENDDEL_WIDTH       ((u32)0x00000008)

#define RIU_MDMBRFCNTL_TXENDDEL_RST         0x30

static inline u8 riu_mdmbrfcntl_txenddel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBRFCNTL_ADDR);

	return (u8)(local_val >> 0);
}

static inline void riu_mdmbrfcntl_txenddel_setf(struct cl_chip *chip, u8 txenddel)
{
	ASSERT_ERR_CHIP((((u32)txenddel << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_MDMBRFCNTL_ADDR, (u32)txenddel << 0);
}

/**
 * @brief MDMBEQCNTL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 EQHOLD                    0xFFF
 *    14:10 COMPTIME                  0x0
 *    09:05 ESTTIME                   0x0
 *    03:00 EQTIME                    0x1
 * </pre>
 */
#define RIU_MDMBEQCNTL_ADDR        (REG_RIU_BASE_ADDR + 0x00000520)
#define RIU_MDMBEQCNTL_OFFSET      0x00000520
#define RIU_MDMBEQCNTL_INDEX       0x00000148
#define RIU_MDMBEQCNTL_RESET       0x0FFF0001

static inline u32 riu_mdmbeqcntl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_MDMBEQCNTL_ADDR);
}

static inline void riu_mdmbeqcntl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_MDMBEQCNTL_ADDR, value);
}

/* Field definitions */
#define RIU_MDMBEQCNTL_EQHOLD_MASK          ((u32)0x0FFF0000)
#define RIU_MDMBEQCNTL_EQHOLD_LSB           16
#define RIU_MDMBEQCNTL_EQHOLD_WIDTH         ((u32)0x0000000C)
#define RIU_MDMBEQCNTL_COMPTIME_MASK        ((u32)0x00007C00)
#define RIU_MDMBEQCNTL_COMPTIME_LSB         10
#define RIU_MDMBEQCNTL_COMPTIME_WIDTH       ((u32)0x00000005)
#define RIU_MDMBEQCNTL_ESTTIME_MASK         ((u32)0x000003E0)
#define RIU_MDMBEQCNTL_ESTTIME_LSB          5
#define RIU_MDMBEQCNTL_ESTTIME_WIDTH        ((u32)0x00000005)
#define RIU_MDMBEQCNTL_EQTIME_MASK          ((u32)0x0000000F)
#define RIU_MDMBEQCNTL_EQTIME_LSB           0
#define RIU_MDMBEQCNTL_EQTIME_WIDTH         ((u32)0x00000004)

#define RIU_MDMBEQCNTL_EQHOLD_RST           0xFFF
#define RIU_MDMBEQCNTL_COMPTIME_RST         0x0
#define RIU_MDMBEQCNTL_ESTTIME_RST          0x0
#define RIU_MDMBEQCNTL_EQTIME_RST           0x1

static inline void riu_mdmbeqcntl_pack(struct cl_chip *chip, u16 eqhold, u8 comptime, u8 esttime, u8 eqtime)
{
	ASSERT_ERR_CHIP((((u32)eqhold << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)comptime << 10) & ~((u32)0x00007C00)) == 0);
	ASSERT_ERR_CHIP((((u32)esttime << 5) & ~((u32)0x000003E0)) == 0);
	ASSERT_ERR_CHIP((((u32)eqtime << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_MDMBEQCNTL_ADDR, ((u32)eqhold << 16) | ((u32)comptime << 10) | ((u32)esttime << 5) | ((u32)eqtime << 0));
}

static inline void riu_mdmbeqcntl_unpack(struct cl_chip *chip, u16 *eqhold, u8 *comptime, u8 *esttime, u8 *eqtime)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBEQCNTL_ADDR);

	*eqhold = (local_val & ((u32)0x0FFF0000)) >> 16;
	*comptime = (local_val & ((u32)0x00007C00)) >> 10;
	*esttime = (local_val & ((u32)0x000003E0)) >> 5;
	*eqtime = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u16 riu_mdmbeqcntl_eqhold_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBEQCNTL_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_mdmbeqcntl_eqhold_setf(struct cl_chip *chip, u16 eqhold)
{
	ASSERT_ERR_CHIP((((u32)eqhold << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_MDMBEQCNTL_ADDR, (cl_reg_read(chip, RIU_MDMBEQCNTL_ADDR) & ~((u32)0x0FFF0000)) | ((u32)eqhold << 16));
}

static inline u8 riu_mdmbeqcntl_comptime_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBEQCNTL_ADDR);

	return (u8)((local_val & ((u32)0x00007C00)) >> 10);
}

static inline void riu_mdmbeqcntl_comptime_setf(struct cl_chip *chip, u8 comptime)
{
	ASSERT_ERR_CHIP((((u32)comptime << 10) & ~((u32)0x00007C00)) == 0);
	cl_reg_write(chip, RIU_MDMBEQCNTL_ADDR, (cl_reg_read(chip, RIU_MDMBEQCNTL_ADDR) & ~((u32)0x00007C00)) | ((u32)comptime << 10));
}

static inline u8 riu_mdmbeqcntl_esttime_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBEQCNTL_ADDR);

	return (u8)((local_val & ((u32)0x000003E0)) >> 5);
}

static inline void riu_mdmbeqcntl_esttime_setf(struct cl_chip *chip, u8 esttime)
{
	ASSERT_ERR_CHIP((((u32)esttime << 5) & ~((u32)0x000003E0)) == 0);
	cl_reg_write(chip, RIU_MDMBEQCNTL_ADDR, (cl_reg_read(chip, RIU_MDMBEQCNTL_ADDR) & ~((u32)0x000003E0)) | ((u32)esttime << 5));
}

static inline u8 riu_mdmbeqcntl_eqtime_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBEQCNTL_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

static inline void riu_mdmbeqcntl_eqtime_setf(struct cl_chip *chip, u8 eqtime)
{
	ASSERT_ERR_CHIP((((u32)eqtime << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_MDMBEQCNTL_ADDR, (cl_reg_read(chip, RIU_MDMBEQCNTL_ADDR) & ~((u32)0x0000000F)) | ((u32)eqtime << 0));
}

/**
 * @brief MDMBCNTL_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21:16 PRECOMP                   0x2D
 *    13:08 SYNCTIME                  0x12
 *    03:00 LOOPTIME                  0x5
 * </pre>
 */
#define RIU_MDMBCNTL_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000524)
#define RIU_MDMBCNTL_2_OFFSET      0x00000524
#define RIU_MDMBCNTL_2_INDEX       0x00000149
#define RIU_MDMBCNTL_2_RESET       0x002D1205

static inline u32 riu_mdmbcntl_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_MDMBCNTL_2_ADDR);
}

static inline void riu_mdmbcntl_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_MDMBCNTL_2_ADDR, value);
}

/* Field definitions */
#define RIU_MDMBCNTL_2_PRECOMP_MASK         ((u32)0x003F0000)
#define RIU_MDMBCNTL_2_PRECOMP_LSB          16
#define RIU_MDMBCNTL_2_PRECOMP_WIDTH        ((u32)0x00000006)
#define RIU_MDMBCNTL_2_SYNCTIME_MASK        ((u32)0x00003F00)
#define RIU_MDMBCNTL_2_SYNCTIME_LSB         8
#define RIU_MDMBCNTL_2_SYNCTIME_WIDTH       ((u32)0x00000006)
#define RIU_MDMBCNTL_2_LOOPTIME_MASK        ((u32)0x0000000F)
#define RIU_MDMBCNTL_2_LOOPTIME_LSB         0
#define RIU_MDMBCNTL_2_LOOPTIME_WIDTH       ((u32)0x00000004)

#define RIU_MDMBCNTL_2_PRECOMP_RST          0x2D
#define RIU_MDMBCNTL_2_SYNCTIME_RST         0x12
#define RIU_MDMBCNTL_2_LOOPTIME_RST         0x5

static inline void riu_mdmbcntl_2_pack(struct cl_chip *chip, u8 precomp, u8 synctime, u8 looptime)
{
	ASSERT_ERR_CHIP((((u32)precomp << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)synctime << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)looptime << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_2_ADDR, ((u32)precomp << 16) | ((u32)synctime << 8) | ((u32)looptime << 0));
}

static inline void riu_mdmbcntl_2_unpack(struct cl_chip *chip, u8 *precomp, u8 *synctime, u8 *looptime)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_2_ADDR);

	*precomp = (local_val & ((u32)0x003F0000)) >> 16;
	*synctime = (local_val & ((u32)0x00003F00)) >> 8;
	*looptime = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 riu_mdmbcntl_2_precomp_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_2_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void riu_mdmbcntl_2_precomp_setf(struct cl_chip *chip, u8 precomp)
{
	ASSERT_ERR_CHIP((((u32)precomp << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_2_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_2_ADDR) & ~((u32)0x003F0000)) | ((u32)precomp << 16));
}

static inline u8 riu_mdmbcntl_2_synctime_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_2_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_mdmbcntl_2_synctime_setf(struct cl_chip *chip, u8 synctime)
{
	ASSERT_ERR_CHIP((((u32)synctime << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_2_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_2_ADDR) & ~((u32)0x00003F00)) | ((u32)synctime << 8));
}

static inline u8 riu_mdmbcntl_2_looptime_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBCNTL_2_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

static inline void riu_mdmbcntl_2_looptime_setf(struct cl_chip *chip, u8 looptime)
{
	ASSERT_ERR_CHIP((((u32)looptime << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_MDMBCNTL_2_ADDR, (cl_reg_read(chip, RIU_MDMBCNTL_2_ADDR) & ~((u32)0x0000000F)) | ((u32)looptime << 0));
}

/**
 * @brief MDMBSTAT_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 EQSUMQ                    0x0
 *    23:16 EQSUMI                    0x0
 *    13:08 DCOFFSETQ                 0x0
 *    05:00 DCOFFSETI                 0x0
 * </pre>
 */
#define RIU_MDMBSTAT_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000528)
#define RIU_MDMBSTAT_0_OFFSET      0x00000528
#define RIU_MDMBSTAT_0_INDEX       0x0000014A
#define RIU_MDMBSTAT_0_RESET       0x00000000

static inline u32 riu_mdmbstat_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_MDMBSTAT_0_ADDR);
}

/* Field definitions */
#define RIU_MDMBSTAT_0_EQSUMQ_MASK          ((u32)0xFF000000)
#define RIU_MDMBSTAT_0_EQSUMQ_LSB           24
#define RIU_MDMBSTAT_0_EQSUMQ_WIDTH         ((u32)0x00000008)
#define RIU_MDMBSTAT_0_EQSUMI_MASK          ((u32)0x00FF0000)
#define RIU_MDMBSTAT_0_EQSUMI_LSB           16
#define RIU_MDMBSTAT_0_EQSUMI_WIDTH         ((u32)0x00000008)
#define RIU_MDMBSTAT_0_DCOFFSETQ_MASK       ((u32)0x00003F00)
#define RIU_MDMBSTAT_0_DCOFFSETQ_LSB        8
#define RIU_MDMBSTAT_0_DCOFFSETQ_WIDTH      ((u32)0x00000006)
#define RIU_MDMBSTAT_0_DCOFFSETI_MASK       ((u32)0x0000003F)
#define RIU_MDMBSTAT_0_DCOFFSETI_LSB        0
#define RIU_MDMBSTAT_0_DCOFFSETI_WIDTH      ((u32)0x00000006)

#define RIU_MDMBSTAT_0_EQSUMQ_RST           0x0
#define RIU_MDMBSTAT_0_EQSUMI_RST           0x0
#define RIU_MDMBSTAT_0_DCOFFSETQ_RST        0x0
#define RIU_MDMBSTAT_0_DCOFFSETI_RST        0x0

static inline void riu_mdmbstat_0_unpack(struct cl_chip *chip, u8 *eqsumq, u8 *eqsumi, u8 *dcoffsetq, u8 *dcoffseti)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBSTAT_0_ADDR);

	*eqsumq = (local_val & ((u32)0xFF000000)) >> 24;
	*eqsumi = (local_val & ((u32)0x00FF0000)) >> 16;
	*dcoffsetq = (local_val & ((u32)0x00003F00)) >> 8;
	*dcoffseti = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_mdmbstat_0_eqsumq_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBSTAT_0_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_mdmbstat_0_eqsumi_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBSTAT_0_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_mdmbstat_0_dcoffsetq_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBSTAT_0_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline u8 riu_mdmbstat_0_dcoffseti_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBSTAT_0_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

/**
 * @brief MDMBSTAT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:30 RXERRORSTAT               0x0
 *    28:16 EVM                       0x0
 *    14:08 IQGAINESTIM               0x0
 *    07:00 FREQOFFESTIM              0x0
 * </pre>
 */
#define RIU_MDMBSTAT_1_ADDR        (REG_RIU_BASE_ADDR + 0x0000052C)
#define RIU_MDMBSTAT_1_OFFSET      0x0000052C
#define RIU_MDMBSTAT_1_INDEX       0x0000014B
#define RIU_MDMBSTAT_1_RESET       0x00000000

static inline u32 riu_mdmbstat_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_MDMBSTAT_1_ADDR);
}

/* Field definitions */
#define RIU_MDMBSTAT_1_RXERRORSTAT_MASK     ((u32)0xC0000000)
#define RIU_MDMBSTAT_1_RXERRORSTAT_LSB      30
#define RIU_MDMBSTAT_1_RXERRORSTAT_WIDTH    ((u32)0x00000002)
#define RIU_MDMBSTAT_1_EVM_MASK             ((u32)0x1FFF0000)
#define RIU_MDMBSTAT_1_EVM_LSB              16
#define RIU_MDMBSTAT_1_EVM_WIDTH            ((u32)0x0000000D)
#define RIU_MDMBSTAT_1_IQGAINESTIM_MASK     ((u32)0x00007F00)
#define RIU_MDMBSTAT_1_IQGAINESTIM_LSB      8
#define RIU_MDMBSTAT_1_IQGAINESTIM_WIDTH    ((u32)0x00000007)
#define RIU_MDMBSTAT_1_FREQOFFESTIM_MASK    ((u32)0x000000FF)
#define RIU_MDMBSTAT_1_FREQOFFESTIM_LSB     0
#define RIU_MDMBSTAT_1_FREQOFFESTIM_WIDTH    ((u32)0x00000008)

#define RIU_MDMBSTAT_1_RXERRORSTAT_RST      0x0
#define RIU_MDMBSTAT_1_EVM_RST              0x0
#define RIU_MDMBSTAT_1_IQGAINESTIM_RST      0x0
#define RIU_MDMBSTAT_1_FREQOFFESTIM_RST     0x0

static inline void riu_mdmbstat_1_unpack(struct cl_chip *chip, u8 *rxerrorstat, u16 *evm, u8 *iqgainestim, u8 *freqoffestim)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBSTAT_1_ADDR);

	*rxerrorstat = (local_val & ((u32)0xC0000000)) >> 30;
	*evm = (local_val & ((u32)0x1FFF0000)) >> 16;
	*iqgainestim = (local_val & ((u32)0x00007F00)) >> 8;
	*freqoffestim = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_mdmbstat_1_rxerrorstat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBSTAT_1_ADDR);

	return (u8)((local_val & ((u32)0xC0000000)) >> 30);
}

static inline u16 riu_mdmbstat_1_evm_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBSTAT_1_ADDR);

	return (u16)((local_val & ((u32)0x1FFF0000)) >> 16);
}

static inline u8 riu_mdmbstat_1_iqgainestim_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBSTAT_1_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline u8 riu_mdmbstat_1_freqoffestim_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBSTAT_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief MDMBTXVECTOR register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    28    TX_PRE_TYPE               0
 *    27:24 TX_LEG_RATE               0x0
 *    23:16 TX_SERVICE                0x0
 *    11:00 TX_LEG_LENGTH             0x0
 * </pre>
 */
#define RIU_MDMBTXVECTOR_ADDR        (REG_RIU_BASE_ADDR + 0x00000530)
#define RIU_MDMBTXVECTOR_OFFSET      0x00000530
#define RIU_MDMBTXVECTOR_INDEX       0x0000014C
#define RIU_MDMBTXVECTOR_RESET       0x00000000

static inline u32 riu_mdmbtxvector_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_MDMBTXVECTOR_ADDR);
}

static inline void riu_mdmbtxvector_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_MDMBTXVECTOR_ADDR, value);
}

/* Field definitions */
#define RIU_MDMBTXVECTOR_TX_PRE_TYPE_BIT    ((u32)0x10000000)
#define RIU_MDMBTXVECTOR_TX_PRE_TYPE_POS    28
#define RIU_MDMBTXVECTOR_TX_LEG_RATE_MASK    ((u32)0x0F000000)
#define RIU_MDMBTXVECTOR_TX_LEG_RATE_LSB    24
#define RIU_MDMBTXVECTOR_TX_LEG_RATE_WIDTH    ((u32)0x00000004)
#define RIU_MDMBTXVECTOR_TX_SERVICE_MASK    ((u32)0x00FF0000)
#define RIU_MDMBTXVECTOR_TX_SERVICE_LSB     16
#define RIU_MDMBTXVECTOR_TX_SERVICE_WIDTH    ((u32)0x00000008)
#define RIU_MDMBTXVECTOR_TX_LEG_LENGTH_MASK    ((u32)0x00000FFF)
#define RIU_MDMBTXVECTOR_TX_LEG_LENGTH_LSB    0
#define RIU_MDMBTXVECTOR_TX_LEG_LENGTH_WIDTH    ((u32)0x0000000C)

#define RIU_MDMBTXVECTOR_TX_PRE_TYPE_RST    0x0
#define RIU_MDMBTXVECTOR_TX_LEG_RATE_RST    0x0
#define RIU_MDMBTXVECTOR_TX_SERVICE_RST     0x0
#define RIU_MDMBTXVECTOR_TX_LEG_LENGTH_RST    0x0

static inline void riu_mdmbtxvector_pack(struct cl_chip *chip, u8 tx_pre_type, u8 tx_leg_rate, u8 tx_service, u16 tx_leg_length)
{
	ASSERT_ERR_CHIP((((u32)tx_pre_type << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)tx_leg_rate << 24) & ~((u32)0x0F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)tx_service << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)tx_leg_length << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_MDMBTXVECTOR_ADDR, ((u32)tx_pre_type << 28) | ((u32)tx_leg_rate << 24) | ((u32)tx_service << 16) | ((u32)tx_leg_length << 0));
}

static inline void riu_mdmbtxvector_unpack(struct cl_chip *chip, u8 *tx_pre_type, u8 *tx_leg_rate, u8 *tx_service, u16 *tx_leg_length)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTXVECTOR_ADDR);

	*tx_pre_type = (local_val & ((u32)0x10000000)) >> 28;
	*tx_leg_rate = (local_val & ((u32)0x0F000000)) >> 24;
	*tx_service = (local_val & ((u32)0x00FF0000)) >> 16;
	*tx_leg_length = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u8 riu_mdmbtxvector_tx_pre_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTXVECTOR_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void riu_mdmbtxvector_tx_pre_type_setf(struct cl_chip *chip, u8 txpretype)
{
	ASSERT_ERR_CHIP((((u32)txpretype << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RIU_MDMBTXVECTOR_ADDR, (cl_reg_read(chip, RIU_MDMBTXVECTOR_ADDR) & ~((u32)0x10000000)) | ((u32)txpretype << 28));
}

static inline u8 riu_mdmbtxvector_tx_leg_rate_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTXVECTOR_ADDR);

	return (u8)((local_val & ((u32)0x0F000000)) >> 24);
}

static inline void riu_mdmbtxvector_tx_leg_rate_setf(struct cl_chip *chip, u8 txlegrate)
{
	ASSERT_ERR_CHIP((((u32)txlegrate << 24) & ~((u32)0x0F000000)) == 0);
	cl_reg_write(chip, RIU_MDMBTXVECTOR_ADDR, (cl_reg_read(chip, RIU_MDMBTXVECTOR_ADDR) & ~((u32)0x0F000000)) | ((u32)txlegrate << 24));
}

static inline u8 riu_mdmbtxvector_tx_service_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTXVECTOR_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_mdmbtxvector_tx_service_setf(struct cl_chip *chip, u8 txservice)
{
	ASSERT_ERR_CHIP((((u32)txservice << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_MDMBTXVECTOR_ADDR, (cl_reg_read(chip, RIU_MDMBTXVECTOR_ADDR) & ~((u32)0x00FF0000)) | ((u32)txservice << 16));
}

static inline u16 riu_mdmbtxvector_tx_leg_length_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBTXVECTOR_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

static inline void riu_mdmbtxvector_tx_leg_length_setf(struct cl_chip *chip, u16 txleglength)
{
	ASSERT_ERR_CHIP((((u32)txleglength << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_MDMBTXVECTOR_ADDR, (cl_reg_read(chip, RIU_MDMBTXVECTOR_ADDR) & ~((u32)0x00000FFF)) | ((u32)txleglength << 0));
}

/**
 * @brief MDMBRXVECTORSTAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    28    RX_PRE_TYPE               0
 *    27:24 RX_LEG_RATE               0x0
 *    23:16 RX_SERVICE                0x0
 *    11:00 RX_LEG_LENGTH             0x0
 * </pre>
 */
#define RIU_MDMBRXVECTORSTAT_ADDR        (REG_RIU_BASE_ADDR + 0x00000534)
#define RIU_MDMBRXVECTORSTAT_OFFSET      0x00000534
#define RIU_MDMBRXVECTORSTAT_INDEX       0x0000014D
#define RIU_MDMBRXVECTORSTAT_RESET       0x00000000

static inline u32 riu_mdmbrxvectorstat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_MDMBRXVECTORSTAT_ADDR);
}

/* Field definitions */
#define RIU_MDMBRXVECTORSTAT_RX_PRE_TYPE_BIT    ((u32)0x10000000)
#define RIU_MDMBRXVECTORSTAT_RX_PRE_TYPE_POS    28
#define RIU_MDMBRXVECTORSTAT_RX_LEG_RATE_MASK    ((u32)0x0F000000)
#define RIU_MDMBRXVECTORSTAT_RX_LEG_RATE_LSB    24
#define RIU_MDMBRXVECTORSTAT_RX_LEG_RATE_WIDTH    ((u32)0x00000004)
#define RIU_MDMBRXVECTORSTAT_RX_SERVICE_MASK    ((u32)0x00FF0000)
#define RIU_MDMBRXVECTORSTAT_RX_SERVICE_LSB    16
#define RIU_MDMBRXVECTORSTAT_RX_SERVICE_WIDTH    ((u32)0x00000008)
#define RIU_MDMBRXVECTORSTAT_RX_LEG_LENGTH_MASK    ((u32)0x00000FFF)
#define RIU_MDMBRXVECTORSTAT_RX_LEG_LENGTH_LSB    0
#define RIU_MDMBRXVECTORSTAT_RX_LEG_LENGTH_WIDTH    ((u32)0x0000000C)

#define RIU_MDMBRXVECTORSTAT_RX_PRE_TYPE_RST    0x0
#define RIU_MDMBRXVECTORSTAT_RX_LEG_RATE_RST    0x0
#define RIU_MDMBRXVECTORSTAT_RX_SERVICE_RST    0x0
#define RIU_MDMBRXVECTORSTAT_RX_LEG_LENGTH_RST    0x0

static inline void riu_mdmbrxvectorstat_unpack(struct cl_chip *chip, u8 *rx_pre_type, u8 *rx_leg_rate, u8 *rx_service, u16 *rx_leg_length)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBRXVECTORSTAT_ADDR);

	*rx_pre_type = (local_val & ((u32)0x10000000)) >> 28;
	*rx_leg_rate = (local_val & ((u32)0x0F000000)) >> 24;
	*rx_service = (local_val & ((u32)0x00FF0000)) >> 16;
	*rx_leg_length = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u8 riu_mdmbrxvectorstat_rx_pre_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBRXVECTORSTAT_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline u8 riu_mdmbrxvectorstat_rx_leg_rate_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBRXVECTORSTAT_ADDR);

	return (u8)((local_val & ((u32)0x0F000000)) >> 24);
}

static inline u8 riu_mdmbrxvectorstat_rx_service_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBRXVECTORSTAT_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u16 riu_mdmbrxvectorstat_rx_leg_length_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBRXVECTORSTAT_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

/**
 * @brief MDMBSTAT_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    02:00 ANT_SEL_DSSS_STAT         0x0
 * </pre>
 */
#define RIU_MDMBSTAT_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000538)
#define RIU_MDMBSTAT_2_OFFSET      0x00000538
#define RIU_MDMBSTAT_2_INDEX       0x0000014E
#define RIU_MDMBSTAT_2_RESET       0x00000000

static inline u32 riu_mdmbstat_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_MDMBSTAT_2_ADDR);
}

/* Field definitions */
#define RIU_MDMBSTAT_2_ANT_SEL_DSSS_STAT_MASK    ((u32)0x00000007)
#define RIU_MDMBSTAT_2_ANT_SEL_DSSS_STAT_LSB    0
#define RIU_MDMBSTAT_2_ANT_SEL_DSSS_STAT_WIDTH    ((u32)0x00000003)

#define RIU_MDMBSTAT_2_ANT_SEL_DSSS_STAT_RST    0x0

static inline u8 riu_mdmbstat_2_ant_sel_dsss_stat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_MDMBSTAT_2_ADDR);

	return (u8)(local_val >> 0);
}

/**
 * @brief HE_LTF_ANTENNA_HOPPING_SEQ register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 HE_LTF_ANTENNA_HOPPING_SEQ 0x0
 * </pre>
 */
#define RIU_HE_LTF_ANTENNA_HOPPING_SEQ_ADDR        (REG_RIU_BASE_ADDR + 0x00000540)
#define RIU_HE_LTF_ANTENNA_HOPPING_SEQ_OFFSET      0x00000540
#define RIU_HE_LTF_ANTENNA_HOPPING_SEQ_INDEX       0x00000150
#define RIU_HE_LTF_ANTENNA_HOPPING_SEQ_RESET       0x00000000

static inline u32 riu_he_ltf_antenna_hopping_seq_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HE_LTF_ANTENNA_HOPPING_SEQ_ADDR);
}

static inline void riu_he_ltf_antenna_hopping_seq_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HE_LTF_ANTENNA_HOPPING_SEQ_ADDR, value);
}

/* Field definitions */
#define RIU_HE_LTF_ANTENNA_HOPPING_SEQ_HE_LTF_ANTENNA_HOPPING_SEQ_MASK    ((u32)0x0000FFFF)
#define RIU_HE_LTF_ANTENNA_HOPPING_SEQ_HE_LTF_ANTENNA_HOPPING_SEQ_LSB    0
#define RIU_HE_LTF_ANTENNA_HOPPING_SEQ_HE_LTF_ANTENNA_HOPPING_SEQ_WIDTH    ((u32)0x00000010)

#define RIU_HE_LTF_ANTENNA_HOPPING_SEQ_HE_LTF_ANTENNA_HOPPING_SEQ_RST    0x0

static inline u16 riu_he_ltf_antenna_hopping_seq_he_ltf_antenna_hopping_seq_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HE_LTF_ANTENNA_HOPPING_SEQ_ADDR);

	return (u16)(local_val >> 0);
}

static inline void riu_he_ltf_antenna_hopping_seq_he_ltf_antenna_hopping_seq_setf(struct cl_chip *chip, u16 heltfantennahoppingseq)
{
	ASSERT_ERR_CHIP((((u32)heltfantennahoppingseq << 0) & ~((u32)0x0000FFFF)) == 0);
	cl_reg_write(chip, RIU_HE_LTF_ANTENNA_HOPPING_SEQ_ADDR, (u32)heltfantennahoppingseq << 0);
}

/**
 * @brief START_HE_LTF_RX register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    START_HE_LTF_RX_CANCEL    0
 *    29:00 START_HE_LTF_RX_TARGET    0x0
 * </pre>
 */
#define RIU_START_HE_LTF_RX_ADDR        (REG_RIU_BASE_ADDR + 0x0000054C)
#define RIU_START_HE_LTF_RX_OFFSET      0x0000054C
#define RIU_START_HE_LTF_RX_INDEX       0x00000153
#define RIU_START_HE_LTF_RX_RESET       0x00000000

static inline u32 riu_start_he_ltf_rx_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_START_HE_LTF_RX_ADDR);
}

static inline void riu_start_he_ltf_rx_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_START_HE_LTF_RX_ADDR, value);
}

/* Field definitions */
#define RIU_START_HE_LTF_RX_START_HE_LTF_RX_CANCEL_BIT    ((u32)0x80000000)
#define RIU_START_HE_LTF_RX_START_HE_LTF_RX_CANCEL_POS    31
#define RIU_START_HE_LTF_RX_START_HE_LTF_RX_TARGET_MASK    ((u32)0x3FFFFFFF)
#define RIU_START_HE_LTF_RX_START_HE_LTF_RX_TARGET_LSB    0
#define RIU_START_HE_LTF_RX_START_HE_LTF_RX_TARGET_WIDTH    ((u32)0x0000001E)

#define RIU_START_HE_LTF_RX_START_HE_LTF_RX_CANCEL_RST    0x0
#define RIU_START_HE_LTF_RX_START_HE_LTF_RX_TARGET_RST    0x0

static inline void riu_start_he_ltf_rx_pack(struct cl_chip *chip, u8 start_he_ltf_rx_cancel, u32 start_he_ltf_rx_target)
{
	ASSERT_ERR_CHIP((((u32)start_he_ltf_rx_cancel << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)start_he_ltf_rx_target << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_START_HE_LTF_RX_ADDR, ((u32)start_he_ltf_rx_cancel << 31) | ((u32)start_he_ltf_rx_target << 0));
}

static inline void riu_start_he_ltf_rx_unpack(struct cl_chip *chip, u8 *start_he_ltf_rx_cancel, u32 *start_he_ltf_rx_target)
{
	u32 local_val = cl_reg_read(chip, RIU_START_HE_LTF_RX_ADDR);

	*start_he_ltf_rx_cancel = (local_val & ((u32)0x80000000)) >> 31;
	*start_he_ltf_rx_target = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_start_he_ltf_rx_start_he_ltf_rx_cancel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_START_HE_LTF_RX_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_start_he_ltf_rx_start_he_ltf_rx_cancel_setf(struct cl_chip *chip, u8 startheltfrxcancel)
{
	ASSERT_ERR_CHIP((((u32)startheltfrxcancel << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_START_HE_LTF_RX_ADDR, (cl_reg_read(chip, RIU_START_HE_LTF_RX_ADDR) & ~((u32)0x80000000)) | ((u32)startheltfrxcancel << 31));
}

static inline u32 riu_start_he_ltf_rx_start_he_ltf_rx_target_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_START_HE_LTF_RX_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

static inline void riu_start_he_ltf_rx_start_he_ltf_rx_target_setf(struct cl_chip *chip, u32 startheltfrxtarget)
{
	ASSERT_ERR_CHIP((((u32)startheltfrxtarget << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_START_HE_LTF_RX_ADDR, (cl_reg_read(chip, RIU_START_HE_LTF_RX_ADDR) & ~((u32)0x3FFFFFFF)) | ((u32)startheltfrxtarget << 0));
}

/**
 * @brief HE_LTF_RX_PARAMS register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    19:16 HE_LTF_RX_NUN_OF_SYM      0x0
 *    15:00 HE_LTF_RX_DURATION        0x0
 * </pre>
 */
#define RIU_HE_LTF_RX_PARAMS_ADDR        (REG_RIU_BASE_ADDR + 0x00000550)
#define RIU_HE_LTF_RX_PARAMS_OFFSET      0x00000550
#define RIU_HE_LTF_RX_PARAMS_INDEX       0x00000154
#define RIU_HE_LTF_RX_PARAMS_RESET       0x00000000

static inline u32 riu_he_ltf_rx_params_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HE_LTF_RX_PARAMS_ADDR);
}

static inline void riu_he_ltf_rx_params_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HE_LTF_RX_PARAMS_ADDR, value);
}

/* Field definitions */
#define RIU_HE_LTF_RX_PARAMS_HE_LTF_RX_NUN_OF_SYM_MASK    ((u32)0x000F0000)
#define RIU_HE_LTF_RX_PARAMS_HE_LTF_RX_NUN_OF_SYM_LSB    16
#define RIU_HE_LTF_RX_PARAMS_HE_LTF_RX_NUN_OF_SYM_WIDTH    ((u32)0x00000004)
#define RIU_HE_LTF_RX_PARAMS_HE_LTF_RX_DURATION_MASK    ((u32)0x0000FFFF)
#define RIU_HE_LTF_RX_PARAMS_HE_LTF_RX_DURATION_LSB    0
#define RIU_HE_LTF_RX_PARAMS_HE_LTF_RX_DURATION_WIDTH    ((u32)0x00000010)

#define RIU_HE_LTF_RX_PARAMS_HE_LTF_RX_NUN_OF_SYM_RST    0x0
#define RIU_HE_LTF_RX_PARAMS_HE_LTF_RX_DURATION_RST    0x0

static inline void riu_he_ltf_rx_params_pack(struct cl_chip *chip, u8 he_ltf_rx_nun_of_sym, u16 he_ltf_rx_duration)
{
	ASSERT_ERR_CHIP((((u32)he_ltf_rx_nun_of_sym << 16) & ~((u32)0x000F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)he_ltf_rx_duration << 0) & ~((u32)0x0000FFFF)) == 0);
	cl_reg_write(chip, RIU_HE_LTF_RX_PARAMS_ADDR, ((u32)he_ltf_rx_nun_of_sym << 16) | ((u32)he_ltf_rx_duration << 0));
}

static inline void riu_he_ltf_rx_params_unpack(struct cl_chip *chip, u8 *he_ltf_rx_nun_of_sym, u16 *he_ltf_rx_duration)
{
	u32 local_val = cl_reg_read(chip, RIU_HE_LTF_RX_PARAMS_ADDR);

	*he_ltf_rx_nun_of_sym = (local_val & ((u32)0x000F0000)) >> 16;
	*he_ltf_rx_duration = (local_val & ((u32)0x0000FFFF)) >> 0;
}

static inline u8 riu_he_ltf_rx_params_he_ltf_rx_nun_of_sym_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HE_LTF_RX_PARAMS_ADDR);

	return (u8)((local_val & ((u32)0x000F0000)) >> 16);
}

static inline void riu_he_ltf_rx_params_he_ltf_rx_nun_of_sym_setf(struct cl_chip *chip, u8 heltfrxnunofsym)
{
	ASSERT_ERR_CHIP((((u32)heltfrxnunofsym << 16) & ~((u32)0x000F0000)) == 0);
	cl_reg_write(chip, RIU_HE_LTF_RX_PARAMS_ADDR, (cl_reg_read(chip, RIU_HE_LTF_RX_PARAMS_ADDR) & ~((u32)0x000F0000)) | ((u32)heltfrxnunofsym << 16));
}

static inline u16 riu_he_ltf_rx_params_he_ltf_rx_duration_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HE_LTF_RX_PARAMS_ADDR);

	return (u16)((local_val & ((u32)0x0000FFFF)) >> 0);
}

static inline void riu_he_ltf_rx_params_he_ltf_rx_duration_setf(struct cl_chip *chip, u16 heltfrxduration)
{
	ASSERT_ERR_CHIP((((u32)heltfrxduration << 0) & ~((u32)0x0000FFFF)) == 0);
	cl_reg_write(chip, RIU_HE_LTF_RX_PARAMS_ADDR, (cl_reg_read(chip, RIU_HE_LTF_RX_PARAMS_ADDR) & ~((u32)0x0000FFFF)) | ((u32)heltfrxduration << 0));
}

/**
 * @brief RIU_TFU_SAT_CNT_CHAIN_0_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 RIU_TFU_SAT_CNT_TH20_S_0  0xfff
 *    11:00 RIU_TFU_SAT_CNT_TH20_0    0xfff
 * </pre>
 */
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000554)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_OFFSET      0x00000554
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_INDEX       0x00000155
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_RESET       0x0FFF0FFF

static inline u32 riu_riu_tfu_sat_cnt_chain_0_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_ADDR);
}

static inline void riu_riu_tfu_sat_cnt_chain_0_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_ADDR, value);
}

/* Field definitions */
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_RIU_TFU_SAT_CNT_TH_20_S_0_MASK    ((u32)0x0FFF0000)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_RIU_TFU_SAT_CNT_TH_20_S_0_LSB    16
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_RIU_TFU_SAT_CNT_TH_20_S_0_WIDTH    ((u32)0x0000000C)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_RIU_TFU_SAT_CNT_TH_20_0_MASK    ((u32)0x00000FFF)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_RIU_TFU_SAT_CNT_TH_20_0_LSB    0
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_RIU_TFU_SAT_CNT_TH_20_0_WIDTH    ((u32)0x0000000C)

#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_RIU_TFU_SAT_CNT_TH_20_S_0_RST    0xfff
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_RIU_TFU_SAT_CNT_TH_20_0_RST    0xfff

static inline void riu_riu_tfu_sat_cnt_chain_0_0_pack(struct cl_chip *chip, u16 riu_tfu_sat_cnt_th20_s_0, u16 riu_tfu_sat_cnt_th20_0)
{
	ASSERT_ERR_CHIP((((u32)riu_tfu_sat_cnt_th20_s_0 << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)riu_tfu_sat_cnt_th20_0 << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_ADDR, ((u32)riu_tfu_sat_cnt_th20_s_0 << 16) | ((u32)riu_tfu_sat_cnt_th20_0 << 0));
}

static inline void riu_riu_tfu_sat_cnt_chain_0_0_unpack(struct cl_chip *chip, u16 *riu_tfu_sat_cnt_th20_s_0, u16 *riu_tfu_sat_cnt_th20_0)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_ADDR);

	*riu_tfu_sat_cnt_th20_s_0 = (local_val & ((u32)0x0FFF0000)) >> 16;
	*riu_tfu_sat_cnt_th20_0 = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u16 riu_riu_tfu_sat_cnt_chain_0_0_riu_tfu_sat_cnt_th_20_s_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_riu_tfu_sat_cnt_chain_0_0_riu_tfu_sat_cnt_th_20_s_0_setf(struct cl_chip *chip, u16 riutfusatcntth20s0)
{
	ASSERT_ERR_CHIP((((u32)riutfusatcntth20s0 << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_ADDR, (cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_ADDR) & ~((u32)0x0FFF0000)) | ((u32)riutfusatcntth20s0 << 16));
}

static inline u16 riu_riu_tfu_sat_cnt_chain_0_0_riu_tfu_sat_cnt_th_20_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

static inline void riu_riu_tfu_sat_cnt_chain_0_0_riu_tfu_sat_cnt_th_20_0_setf(struct cl_chip *chip, u16 riutfusatcntth200)
{
	ASSERT_ERR_CHIP((((u32)riutfusatcntth200 << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_ADDR, (cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_0_ADDR) & ~((u32)0x00000FFF)) | ((u32)riutfusatcntth200 << 0));
}

/**
 * @brief RIU_TFU_SAT_CNT_CHAIN_0_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 RIU_TFU_SAT_CNT_TH80_0    0xfff
 *    11:00 RIU_TFU_SAT_CNT_TH40_0    0xfff
 * </pre>
 */
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000558)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_OFFSET      0x00000558
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_INDEX       0x00000156
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_RESET       0x0FFF0FFF

static inline u32 riu_riu_tfu_sat_cnt_chain_0_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_ADDR);
}

static inline void riu_riu_tfu_sat_cnt_chain_0_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_ADDR, value);
}

/* Field definitions */
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_RIU_TFU_SAT_CNT_TH_80_0_MASK    ((u32)0x0FFF0000)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_RIU_TFU_SAT_CNT_TH_80_0_LSB    16
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_RIU_TFU_SAT_CNT_TH_80_0_WIDTH    ((u32)0x0000000C)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_RIU_TFU_SAT_CNT_TH_40_0_MASK    ((u32)0x00000FFF)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_RIU_TFU_SAT_CNT_TH_40_0_LSB    0
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_RIU_TFU_SAT_CNT_TH_40_0_WIDTH    ((u32)0x0000000C)

#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_RIU_TFU_SAT_CNT_TH_80_0_RST    0xfff
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_RIU_TFU_SAT_CNT_TH_40_0_RST    0xfff

static inline void riu_riu_tfu_sat_cnt_chain_0_1_pack(struct cl_chip *chip, u16 riu_tfu_sat_cnt_th80_0, u16 riu_tfu_sat_cnt_th40_0)
{
	ASSERT_ERR_CHIP((((u32)riu_tfu_sat_cnt_th80_0 << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)riu_tfu_sat_cnt_th40_0 << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_ADDR, ((u32)riu_tfu_sat_cnt_th80_0 << 16) | ((u32)riu_tfu_sat_cnt_th40_0 << 0));
}

static inline void riu_riu_tfu_sat_cnt_chain_0_1_unpack(struct cl_chip *chip, u16 *riu_tfu_sat_cnt_th80_0, u16 *riu_tfu_sat_cnt_th40_0)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_ADDR);

	*riu_tfu_sat_cnt_th80_0 = (local_val & ((u32)0x0FFF0000)) >> 16;
	*riu_tfu_sat_cnt_th40_0 = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u16 riu_riu_tfu_sat_cnt_chain_0_1_riu_tfu_sat_cnt_th_80_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_riu_tfu_sat_cnt_chain_0_1_riu_tfu_sat_cnt_th_80_0_setf(struct cl_chip *chip, u16 riutfusatcntth800)
{
	ASSERT_ERR_CHIP((((u32)riutfusatcntth800 << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_ADDR, (cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_ADDR) & ~((u32)0x0FFF0000)) | ((u32)riutfusatcntth800 << 16));
}

static inline u16 riu_riu_tfu_sat_cnt_chain_0_1_riu_tfu_sat_cnt_th_40_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

static inline void riu_riu_tfu_sat_cnt_chain_0_1_riu_tfu_sat_cnt_th_40_0_setf(struct cl_chip *chip, u16 riutfusatcntth400)
{
	ASSERT_ERR_CHIP((((u32)riutfusatcntth400 << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_ADDR, (cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_1_ADDR) & ~((u32)0x00000FFF)) | ((u32)riutfusatcntth400 << 0));
}

/**
 * @brief RIU_TFU_SAT_CNT_CHAIN_0_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    11:00 RIU_TFU_SAT_CNT_TH160_0   0xfff
 * </pre>
 */
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000055C)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_2_OFFSET      0x0000055C
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_2_INDEX       0x00000157
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_2_RESET       0x00000FFF

static inline u32 riu_riu_tfu_sat_cnt_chain_0_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_2_ADDR);
}

static inline void riu_riu_tfu_sat_cnt_chain_0_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_2_ADDR, value);
}

/* Field definitions */
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_2_RIU_TFU_SAT_CNT_TH_160_0_MASK    ((u32)0x00000FFF)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_2_RIU_TFU_SAT_CNT_TH_160_0_LSB    0
#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_2_RIU_TFU_SAT_CNT_TH_160_0_WIDTH    ((u32)0x0000000C)

#define RIU_RIU_TFU_SAT_CNT_CHAIN_0_2_RIU_TFU_SAT_CNT_TH_160_0_RST    0xfff

static inline u16 riu_riu_tfu_sat_cnt_chain_0_2_riu_tfu_sat_cnt_th_160_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_2_ADDR);

	return (u16)(local_val >> 0);
}

static inline void riu_riu_tfu_sat_cnt_chain_0_2_riu_tfu_sat_cnt_th_160_0_setf(struct cl_chip *chip, u16 riutfusatcntth1600)
{
	ASSERT_ERR_CHIP((((u32)riutfusatcntth1600 << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_0_2_ADDR, (u32)riutfusatcntth1600 << 0);
}

/**
 * @brief RIU_TFU_SAT_CNT_CHAIN_1_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 RIU_TFU_SAT_CNT_TH20_S_1  0xfff
 *    11:00 RIU_TFU_SAT_CNT_TH20_1    0xfff
 * </pre>
 */
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000560)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_OFFSET      0x00000560
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_INDEX       0x00000158
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_RESET       0x0FFF0FFF

static inline u32 riu_riu_tfu_sat_cnt_chain_1_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_ADDR);
}

static inline void riu_riu_tfu_sat_cnt_chain_1_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_ADDR, value);
}

/* Field definitions */
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_RIU_TFU_SAT_CNT_TH_20_S_1_MASK    ((u32)0x0FFF0000)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_RIU_TFU_SAT_CNT_TH_20_S_1_LSB    16
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_RIU_TFU_SAT_CNT_TH_20_S_1_WIDTH    ((u32)0x0000000C)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_RIU_TFU_SAT_CNT_TH_20_1_MASK    ((u32)0x00000FFF)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_RIU_TFU_SAT_CNT_TH_20_1_LSB    0
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_RIU_TFU_SAT_CNT_TH_20_1_WIDTH    ((u32)0x0000000C)

#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_RIU_TFU_SAT_CNT_TH_20_S_1_RST    0xfff
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_RIU_TFU_SAT_CNT_TH_20_1_RST    0xfff

static inline void riu_riu_tfu_sat_cnt_chain_1_0_pack(struct cl_chip *chip, u16 riu_tfu_sat_cnt_th20_s_1, u16 riu_tfu_sat_cnt_th20_1)
{
	ASSERT_ERR_CHIP((((u32)riu_tfu_sat_cnt_th20_s_1 << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)riu_tfu_sat_cnt_th20_1 << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_ADDR, ((u32)riu_tfu_sat_cnt_th20_s_1 << 16) | ((u32)riu_tfu_sat_cnt_th20_1 << 0));
}

static inline void riu_riu_tfu_sat_cnt_chain_1_0_unpack(struct cl_chip *chip, u16 *riu_tfu_sat_cnt_th20_s_1, u16 *riu_tfu_sat_cnt_th20_1)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_ADDR);

	*riu_tfu_sat_cnt_th20_s_1 = (local_val & ((u32)0x0FFF0000)) >> 16;
	*riu_tfu_sat_cnt_th20_1 = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u16 riu_riu_tfu_sat_cnt_chain_1_0_riu_tfu_sat_cnt_th_20_s_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_riu_tfu_sat_cnt_chain_1_0_riu_tfu_sat_cnt_th_20_s_1_setf(struct cl_chip *chip, u16 riutfusatcntth20s1)
{
	ASSERT_ERR_CHIP((((u32)riutfusatcntth20s1 << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_ADDR, (cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_ADDR) & ~((u32)0x0FFF0000)) | ((u32)riutfusatcntth20s1 << 16));
}

static inline u16 riu_riu_tfu_sat_cnt_chain_1_0_riu_tfu_sat_cnt_th_20_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

static inline void riu_riu_tfu_sat_cnt_chain_1_0_riu_tfu_sat_cnt_th_20_1_setf(struct cl_chip *chip, u16 riutfusatcntth201)
{
	ASSERT_ERR_CHIP((((u32)riutfusatcntth201 << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_ADDR, (cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_0_ADDR) & ~((u32)0x00000FFF)) | ((u32)riutfusatcntth201 << 0));
}

/**
 * @brief RIU_TFU_SAT_CNT_CHAIN_1_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 RIU_TFU_SAT_CNT_TH80_1    0xfff
 *    11:00 RIU_TFU_SAT_CNT_TH40_1    0xfff
 * </pre>
 */
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000564)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_OFFSET      0x00000564
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_INDEX       0x00000159
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_RESET       0x0FFF0FFF

static inline u32 riu_riu_tfu_sat_cnt_chain_1_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_ADDR);
}

static inline void riu_riu_tfu_sat_cnt_chain_1_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_ADDR, value);
}

/* Field definitions */
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_RIU_TFU_SAT_CNT_TH_80_1_MASK    ((u32)0x0FFF0000)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_RIU_TFU_SAT_CNT_TH_80_1_LSB    16
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_RIU_TFU_SAT_CNT_TH_80_1_WIDTH    ((u32)0x0000000C)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_RIU_TFU_SAT_CNT_TH_40_1_MASK    ((u32)0x00000FFF)
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_RIU_TFU_SAT_CNT_TH_40_1_LSB    0
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_RIU_TFU_SAT_CNT_TH_40_1_WIDTH    ((u32)0x0000000C)

#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_RIU_TFU_SAT_CNT_TH_80_1_RST    0xfff
#define RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_RIU_TFU_SAT_CNT_TH_40_1_RST    0xfff

static inline void riu_riu_tfu_sat_cnt_chain_1_1_pack(struct cl_chip *chip, u16 riu_tfu_sat_cnt_th80_1, u16 riu_tfu_sat_cnt_th40_1)
{
	ASSERT_ERR_CHIP((((u32)riu_tfu_sat_cnt_th80_1 << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)riu_tfu_sat_cnt_th40_1 << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_ADDR, ((u32)riu_tfu_sat_cnt_th80_1 << 16) | ((u32)riu_tfu_sat_cnt_th40_1 << 0));
}

static inline void riu_riu_tfu_sat_cnt_chain_1_1_unpack(struct cl_chip *chip, u16 *riu_tfu_sat_cnt_th80_1, u16 *riu_tfu_sat_cnt_th40_1)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_ADDR);

	*riu_tfu_sat_cnt_th80_1 = (local_val & ((u32)0x0FFF0000)) >> 16;
	*riu_tfu_sat_cnt_th40_1 = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u16 riu_riu_tfu_sat_cnt_chain_1_1_riu_tfu_sat_cnt_th_80_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_riu_tfu_sat_cnt_chain_1_1_riu_tfu_sat_cnt_th_80_1_setf(struct cl_chip *chip, u16 riutfusatcntth801)
{
	ASSERT_ERR_CHIP((((u32)riutfusatcntth801 << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_ADDR, (cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_ADDR) & ~((u32)0x0FFF0000)) | ((u32)riutfusatcntth801 << 16));
}

static inline u16 riu_riu_tfu_sat_cnt_chain_1_1_riu_tfu_sat_cnt_th_40_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

static inline void riu_riu_tfu_sat_cnt_chain_1_1_riu_tfu_sat_cnt_th_40_1_setf(struct cl_chip *chip, u16 riutfusatcntth401)
{
	ASSERT_ERR_CHIP((((u32)riutfusatcntth401 << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_ADDR, (cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CHAIN_1_1_ADDR) & ~((u32)0x00000FFF)) | ((u32)riutfusatcntth401 << 0));
}

/**
 * @brief RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    17    sat_cnt_clear             0
 *    16    sat_cnt_en                1
 *    11:00 RIU_TFU_SAT_CNT_TH160_1   0xfff
 * </pre>
 */
#define RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000568)
#define RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_OFFSET      0x00000568
#define RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_INDEX       0x0000015A
#define RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_RESET       0x00010FFF

static inline u32 riu_riu_tfu_sat_cnt_ctrl_chain_1_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_ADDR);
}

static inline void riu_riu_tfu_sat_cnt_ctrl_chain_1_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_ADDR, value);
}

/* Field definitions */
#define RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_SAT_CNT_CLEAR_BIT    ((u32)0x00020000)
#define RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_SAT_CNT_CLEAR_POS    17
#define RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_SAT_CNT_EN_BIT    ((u32)0x00010000)
#define RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_SAT_CNT_EN_POS    16
#define RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_RIU_TFU_SAT_CNT_TH_160_1_MASK    ((u32)0x00000FFF)
#define RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_RIU_TFU_SAT_CNT_TH_160_1_LSB    0
#define RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_RIU_TFU_SAT_CNT_TH_160_1_WIDTH    ((u32)0x0000000C)

#define RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_SAT_CNT_CLEAR_RST    0x0
#define RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_SAT_CNT_EN_RST    0x1
#define RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_RIU_TFU_SAT_CNT_TH_160_1_RST    0xfff

static inline void riu_riu_tfu_sat_cnt_ctrl_chain_1_2_pack(struct cl_chip *chip, u8 sat_cnt_clear, u8 sat_cnt_en, u16 riu_tfu_sat_cnt_th160_1)
{
	ASSERT_ERR_CHIP((((u32)sat_cnt_clear << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)sat_cnt_en << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)riu_tfu_sat_cnt_th160_1 << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_ADDR, ((u32)sat_cnt_clear << 17) | ((u32)sat_cnt_en << 16) | ((u32)riu_tfu_sat_cnt_th160_1 << 0));
}

static inline void riu_riu_tfu_sat_cnt_ctrl_chain_1_2_unpack(struct cl_chip *chip, u8 *sat_cnt_clear, u8 *sat_cnt_en, u16 *riu_tfu_sat_cnt_th160_1)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_ADDR);

	*sat_cnt_clear = (local_val & ((u32)0x00020000)) >> 17;
	*sat_cnt_en = (local_val & ((u32)0x00010000)) >> 16;
	*riu_tfu_sat_cnt_th160_1 = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u8 riu_riu_tfu_sat_cnt_ctrl_chain_1_2_sat_cnt_clear_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void riu_riu_tfu_sat_cnt_ctrl_chain_1_2_sat_cnt_clear_setf(struct cl_chip *chip, u8 satcntclear)
{
	ASSERT_ERR_CHIP((((u32)satcntclear << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_ADDR, (cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_ADDR) & ~((u32)0x00020000)) | ((u32)satcntclear << 17));
}

static inline u8 riu_riu_tfu_sat_cnt_ctrl_chain_1_2_sat_cnt_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void riu_riu_tfu_sat_cnt_ctrl_chain_1_2_sat_cnt_en_setf(struct cl_chip *chip, u8 satcnten)
{
	ASSERT_ERR_CHIP((((u32)satcnten << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_ADDR, (cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_ADDR) & ~((u32)0x00010000)) | ((u32)satcnten << 16));
}

static inline u16 riu_riu_tfu_sat_cnt_ctrl_chain_1_2_riu_tfu_sat_cnt_th_160_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

static inline void riu_riu_tfu_sat_cnt_ctrl_chain_1_2_riu_tfu_sat_cnt_th_160_1_setf(struct cl_chip *chip, u16 riutfusatcntth1601)
{
	ASSERT_ERR_CHIP((((u32)riutfusatcntth1601 << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_ADDR, (cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_CTRL_CHAIN_1_2_ADDR) & ~((u32)0x00000FFF)) | ((u32)riutfusatcntth1601 << 0));
}

/**
 * @brief RIU_TFU_SAT_CNT_20_P_STAT_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RIU_TFU_SAT_CNT_20_P_STAT_0 0x0
 * </pre>
 */
#define RIU_RIU_TFU_SAT_CNT_20_P_STAT_0_ADDR        (REG_RIU_BASE_ADDR + 0x0000056C)
#define RIU_RIU_TFU_SAT_CNT_20_P_STAT_0_OFFSET      0x0000056C
#define RIU_RIU_TFU_SAT_CNT_20_P_STAT_0_INDEX       0x0000015B
#define RIU_RIU_TFU_SAT_CNT_20_P_STAT_0_RESET       0x00000000

static inline u32 riu_riu_tfu_sat_cnt_20_p_stat_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_20_P_STAT_0_ADDR);
}

/* Field definitions */
#define RIU_RIU_TFU_SAT_CNT_20_P_STAT_0_RIU_TFU_SAT_CNT_20_P_STAT_0_MASK    ((u32)0xFFFFFFFF)
#define RIU_RIU_TFU_SAT_CNT_20_P_STAT_0_RIU_TFU_SAT_CNT_20_P_STAT_0_LSB    0
#define RIU_RIU_TFU_SAT_CNT_20_P_STAT_0_RIU_TFU_SAT_CNT_20_P_STAT_0_WIDTH    ((u32)0x00000020)

#define RIU_RIU_TFU_SAT_CNT_20_P_STAT_0_RIU_TFU_SAT_CNT_20_P_STAT_0_RST    0x0

static inline u32 riu_riu_tfu_sat_cnt_20_p_stat_0_riu_tfu_sat_cnt_20_p_stat_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_20_P_STAT_0_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief RIU_TFU_SAT_CNT_20_S_STAT_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RIU_TFU_SAT_CNT_20_S_STAT_0 0x0
 * </pre>
 */
#define RIU_RIU_TFU_SAT_CNT_20_S_STAT_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000570)
#define RIU_RIU_TFU_SAT_CNT_20_S_STAT_0_OFFSET      0x00000570
#define RIU_RIU_TFU_SAT_CNT_20_S_STAT_0_INDEX       0x0000015C
#define RIU_RIU_TFU_SAT_CNT_20_S_STAT_0_RESET       0x00000000

static inline u32 riu_riu_tfu_sat_cnt_20_s_stat_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_20_S_STAT_0_ADDR);
}

/* Field definitions */
#define RIU_RIU_TFU_SAT_CNT_20_S_STAT_0_RIU_TFU_SAT_CNT_20_S_STAT_0_MASK    ((u32)0xFFFFFFFF)
#define RIU_RIU_TFU_SAT_CNT_20_S_STAT_0_RIU_TFU_SAT_CNT_20_S_STAT_0_LSB    0
#define RIU_RIU_TFU_SAT_CNT_20_S_STAT_0_RIU_TFU_SAT_CNT_20_S_STAT_0_WIDTH    ((u32)0x00000020)

#define RIU_RIU_TFU_SAT_CNT_20_S_STAT_0_RIU_TFU_SAT_CNT_20_S_STAT_0_RST    0x0

static inline u32 riu_riu_tfu_sat_cnt_20_s_stat_0_riu_tfu_sat_cnt_20_s_stat_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_20_S_STAT_0_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief RIU_TFU_SAT_CNT_40_STAT_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RIU_TFU_SAT_CNT_40_STAT_0 0x0
 * </pre>
 */
#define RIU_RIU_TFU_SAT_CNT_40_STAT_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000574)
#define RIU_RIU_TFU_SAT_CNT_40_STAT_0_OFFSET      0x00000574
#define RIU_RIU_TFU_SAT_CNT_40_STAT_0_INDEX       0x0000015D
#define RIU_RIU_TFU_SAT_CNT_40_STAT_0_RESET       0x00000000

static inline u32 riu_riu_tfu_sat_cnt_40_stat_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_40_STAT_0_ADDR);
}

/* Field definitions */
#define RIU_RIU_TFU_SAT_CNT_40_STAT_0_RIU_TFU_SAT_CNT_40_STAT_0_MASK    ((u32)0xFFFFFFFF)
#define RIU_RIU_TFU_SAT_CNT_40_STAT_0_RIU_TFU_SAT_CNT_40_STAT_0_LSB    0
#define RIU_RIU_TFU_SAT_CNT_40_STAT_0_RIU_TFU_SAT_CNT_40_STAT_0_WIDTH    ((u32)0x00000020)

#define RIU_RIU_TFU_SAT_CNT_40_STAT_0_RIU_TFU_SAT_CNT_40_STAT_0_RST    0x0

static inline u32 riu_riu_tfu_sat_cnt_40_stat_0_riu_tfu_sat_cnt_40_stat_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_40_STAT_0_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief RIU_TFU_SAT_CNT_80_STAT_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RIU_TFU_SAT_CNT_80_STAT_0 0x0
 * </pre>
 */
#define RIU_RIU_TFU_SAT_CNT_80_STAT_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000578)
#define RIU_RIU_TFU_SAT_CNT_80_STAT_0_OFFSET      0x00000578
#define RIU_RIU_TFU_SAT_CNT_80_STAT_0_INDEX       0x0000015E
#define RIU_RIU_TFU_SAT_CNT_80_STAT_0_RESET       0x00000000

static inline u32 riu_riu_tfu_sat_cnt_80_stat_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_80_STAT_0_ADDR);
}

/* Field definitions */
#define RIU_RIU_TFU_SAT_CNT_80_STAT_0_RIU_TFU_SAT_CNT_80_STAT_0_MASK    ((u32)0xFFFFFFFF)
#define RIU_RIU_TFU_SAT_CNT_80_STAT_0_RIU_TFU_SAT_CNT_80_STAT_0_LSB    0
#define RIU_RIU_TFU_SAT_CNT_80_STAT_0_RIU_TFU_SAT_CNT_80_STAT_0_WIDTH    ((u32)0x00000020)

#define RIU_RIU_TFU_SAT_CNT_80_STAT_0_RIU_TFU_SAT_CNT_80_STAT_0_RST    0x0

static inline u32 riu_riu_tfu_sat_cnt_80_stat_0_riu_tfu_sat_cnt_80_stat_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_80_STAT_0_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief RIU_TFU_SAT_CNT_160_STAT_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RIU_TFU_SAT_CNT_160_STAT_0 0x0
 * </pre>
 */
#define RIU_RIU_TFU_SAT_CNT_160_STAT_0_ADDR        (REG_RIU_BASE_ADDR + 0x0000057C)
#define RIU_RIU_TFU_SAT_CNT_160_STAT_0_OFFSET      0x0000057C
#define RIU_RIU_TFU_SAT_CNT_160_STAT_0_INDEX       0x0000015F
#define RIU_RIU_TFU_SAT_CNT_160_STAT_0_RESET       0x00000000

static inline u32 riu_riu_tfu_sat_cnt_160_stat_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_160_STAT_0_ADDR);
}

/* Field definitions */
#define RIU_RIU_TFU_SAT_CNT_160_STAT_0_RIU_TFU_SAT_CNT_160_STAT_0_MASK    ((u32)0xFFFFFFFF)
#define RIU_RIU_TFU_SAT_CNT_160_STAT_0_RIU_TFU_SAT_CNT_160_STAT_0_LSB    0
#define RIU_RIU_TFU_SAT_CNT_160_STAT_0_RIU_TFU_SAT_CNT_160_STAT_0_WIDTH    ((u32)0x00000020)

#define RIU_RIU_TFU_SAT_CNT_160_STAT_0_RIU_TFU_SAT_CNT_160_STAT_0_RST    0x0

static inline u32 riu_riu_tfu_sat_cnt_160_stat_0_riu_tfu_sat_cnt_160_stat_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_160_STAT_0_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief RWNXAGCRSSILNA_0_SET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 RSSI_LNA3_DB              0x0
 *    23:16 RSSI_LNA2_DB              0x0
 *    15:08 RSSI_LNA1_DB              0x0
 *    07:00 RSSI_LNA0_DB              0x0
 * </pre>
 */
#define RIU_RWNXAGCRSSILNA_0_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000580)
#define RIU_RWNXAGCRSSILNA_0_SET_1_OFFSET      0x00000580
#define RIU_RWNXAGCRSSILNA_0_SET_1_INDEX       0x00000160
#define RIU_RWNXAGCRSSILNA_0_SET_1_RESET       0x00000000

static inline u32 riu_rwnxagcrssilna_0_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_1_ADDR);
}

static inline void riu_rwnxagcrssilna_0_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_0_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCRSSILNA_0_SET_1_RSSI_LNA_3_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCRSSILNA_0_SET_1_RSSI_LNA_3_DB_LSB    24
#define RIU_RWNXAGCRSSILNA_0_SET_1_RSSI_LNA_3_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_0_SET_1_RSSI_LNA_2_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCRSSILNA_0_SET_1_RSSI_LNA_2_DB_LSB    16
#define RIU_RWNXAGCRSSILNA_0_SET_1_RSSI_LNA_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_0_SET_1_RSSI_LNA_1_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCRSSILNA_0_SET_1_RSSI_LNA_1_DB_LSB    8
#define RIU_RWNXAGCRSSILNA_0_SET_1_RSSI_LNA_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_0_SET_1_RSSI_LNA_0_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCRSSILNA_0_SET_1_RSSI_LNA_0_DB_LSB    0
#define RIU_RWNXAGCRSSILNA_0_SET_1_RSSI_LNA_0_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCRSSILNA_0_SET_1_RSSI_LNA_3_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_0_SET_1_RSSI_LNA_2_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_0_SET_1_RSSI_LNA_1_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_0_SET_1_RSSI_LNA_0_DB_RST    0x0

static inline void riu_rwnxagcrssilna_0_set_1_pack(struct cl_chip *chip, u8 rssi_lna3_db, u8 rssi_lna2_db, u8 rssi_lna1_db, u8 rssi_lna0_db)
{
	ASSERT_ERR_CHIP((((u32)rssi_lna3_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna2_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna1_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna0_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_0_SET_1_ADDR, ((u32)rssi_lna3_db << 24) | ((u32)rssi_lna2_db << 16) | ((u32)rssi_lna1_db << 8) | ((u32)rssi_lna0_db << 0));
}

static inline void riu_rwnxagcrssilna_0_set_1_unpack(struct cl_chip *chip, u8 *rssi_lna3_db, u8 *rssi_lna2_db, u8 *rssi_lna1_db, u8 *rssi_lna0_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_1_ADDR);

	*rssi_lna3_db = (local_val & ((u32)0xFF000000)) >> 24;
	*rssi_lna2_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*rssi_lna1_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*rssi_lna0_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcrssilna_0_set_1_rssi_lna_3_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_1_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagcrssilna_0_set_1_rssi_lna_3_db_setf(struct cl_chip *chip, u8 rssilna3db)
{
	ASSERT_ERR_CHIP((((u32)rssilna3db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_0_SET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_1_ADDR) & ~((u32)0xFF000000)) | ((u32)rssilna3db << 24));
}

static inline u8 riu_rwnxagcrssilna_0_set_1_rssi_lna_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_1_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagcrssilna_0_set_1_rssi_lna_2_db_setf(struct cl_chip *chip, u8 rssilna2db)
{
	ASSERT_ERR_CHIP((((u32)rssilna2db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_0_SET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_1_ADDR) & ~((u32)0x00FF0000)) | ((u32)rssilna2db << 16));
}

static inline u8 riu_rwnxagcrssilna_0_set_1_rssi_lna_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagcrssilna_0_set_1_rssi_lna_1_db_setf(struct cl_chip *chip, u8 rssilna1db)
{
	ASSERT_ERR_CHIP((((u32)rssilna1db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_0_SET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_1_ADDR) & ~((u32)0x0000FF00)) | ((u32)rssilna1db << 8));
}

static inline u8 riu_rwnxagcrssilna_0_set_1_rssi_lna_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcrssilna_0_set_1_rssi_lna_0_db_setf(struct cl_chip *chip, u8 rssilna0db)
{
	ASSERT_ERR_CHIP((((u32)rssilna0db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_0_SET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_0_SET_1_ADDR) & ~((u32)0x000000FF)) | ((u32)rssilna0db << 0));
}

/**
 * @brief RWNXAGCRSSILNA_1_SET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 RSSI_LNA7_DB              0x0
 *    23:16 RSSI_LNA6_DB              0x0
 *    15:08 RSSI_LNA5_DB              0x0
 *    07:00 RSSI_LNA4_DB              0x0
 * </pre>
 */
#define RIU_RWNXAGCRSSILNA_1_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000584)
#define RIU_RWNXAGCRSSILNA_1_SET_1_OFFSET      0x00000584
#define RIU_RWNXAGCRSSILNA_1_SET_1_INDEX       0x00000161
#define RIU_RWNXAGCRSSILNA_1_SET_1_RESET       0x00000000

static inline u32 riu_rwnxagcrssilna_1_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_1_ADDR);
}

static inline void riu_rwnxagcrssilna_1_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_1_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCRSSILNA_1_SET_1_RSSI_LNA_7_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCRSSILNA_1_SET_1_RSSI_LNA_7_DB_LSB    24
#define RIU_RWNXAGCRSSILNA_1_SET_1_RSSI_LNA_7_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_1_SET_1_RSSI_LNA_6_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCRSSILNA_1_SET_1_RSSI_LNA_6_DB_LSB    16
#define RIU_RWNXAGCRSSILNA_1_SET_1_RSSI_LNA_6_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_1_SET_1_RSSI_LNA_5_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCRSSILNA_1_SET_1_RSSI_LNA_5_DB_LSB    8
#define RIU_RWNXAGCRSSILNA_1_SET_1_RSSI_LNA_5_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_1_SET_1_RSSI_LNA_4_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCRSSILNA_1_SET_1_RSSI_LNA_4_DB_LSB    0
#define RIU_RWNXAGCRSSILNA_1_SET_1_RSSI_LNA_4_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCRSSILNA_1_SET_1_RSSI_LNA_7_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_1_SET_1_RSSI_LNA_6_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_1_SET_1_RSSI_LNA_5_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_1_SET_1_RSSI_LNA_4_DB_RST    0x0

static inline void riu_rwnxagcrssilna_1_set_1_pack(struct cl_chip *chip, u8 rssi_lna7_db, u8 rssi_lna6_db, u8 rssi_lna5_db, u8 rssi_lna4_db)
{
	ASSERT_ERR_CHIP((((u32)rssi_lna7_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna6_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna5_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna4_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_1_SET_1_ADDR, ((u32)rssi_lna7_db << 24) | ((u32)rssi_lna6_db << 16) | ((u32)rssi_lna5_db << 8) | ((u32)rssi_lna4_db << 0));
}

static inline void riu_rwnxagcrssilna_1_set_1_unpack(struct cl_chip *chip, u8 *rssi_lna7_db, u8 *rssi_lna6_db, u8 *rssi_lna5_db, u8 *rssi_lna4_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_1_ADDR);

	*rssi_lna7_db = (local_val & ((u32)0xFF000000)) >> 24;
	*rssi_lna6_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*rssi_lna5_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*rssi_lna4_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcrssilna_1_set_1_rssi_lna_7_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_1_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagcrssilna_1_set_1_rssi_lna_7_db_setf(struct cl_chip *chip, u8 rssilna7db)
{
	ASSERT_ERR_CHIP((((u32)rssilna7db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_1_SET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_1_ADDR) & ~((u32)0xFF000000)) | ((u32)rssilna7db << 24));
}

static inline u8 riu_rwnxagcrssilna_1_set_1_rssi_lna_6_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_1_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagcrssilna_1_set_1_rssi_lna_6_db_setf(struct cl_chip *chip, u8 rssilna6db)
{
	ASSERT_ERR_CHIP((((u32)rssilna6db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_1_SET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_1_ADDR) & ~((u32)0x00FF0000)) | ((u32)rssilna6db << 16));
}

static inline u8 riu_rwnxagcrssilna_1_set_1_rssi_lna_5_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagcrssilna_1_set_1_rssi_lna_5_db_setf(struct cl_chip *chip, u8 rssilna5db)
{
	ASSERT_ERR_CHIP((((u32)rssilna5db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_1_SET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_1_ADDR) & ~((u32)0x0000FF00)) | ((u32)rssilna5db << 8));
}

static inline u8 riu_rwnxagcrssilna_1_set_1_rssi_lna_4_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcrssilna_1_set_1_rssi_lna_4_db_setf(struct cl_chip *chip, u8 rssilna4db)
{
	ASSERT_ERR_CHIP((((u32)rssilna4db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_1_SET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_1_SET_1_ADDR) & ~((u32)0x000000FF)) | ((u32)rssilna4db << 0));
}

/**
 * @brief RWNXAGCRSSILNA_2_SET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 RSSI_LNA11_DB             0x0
 *    23:16 RSSI_LNA10_DB             0x0
 *    15:08 RSSI_LNA9_DB              0x0
 *    07:00 RSSI_LNA8_DB              0x0
 * </pre>
 */
#define RIU_RWNXAGCRSSILNA_2_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000588)
#define RIU_RWNXAGCRSSILNA_2_SET_1_OFFSET      0x00000588
#define RIU_RWNXAGCRSSILNA_2_SET_1_INDEX       0x00000162
#define RIU_RWNXAGCRSSILNA_2_SET_1_RESET       0x00000000

static inline u32 riu_rwnxagcrssilna_2_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_1_ADDR);
}

static inline void riu_rwnxagcrssilna_2_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_2_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCRSSILNA_2_SET_1_RSSI_LNA_11_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCRSSILNA_2_SET_1_RSSI_LNA_11_DB_LSB    24
#define RIU_RWNXAGCRSSILNA_2_SET_1_RSSI_LNA_11_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_2_SET_1_RSSI_LNA_10_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCRSSILNA_2_SET_1_RSSI_LNA_10_DB_LSB    16
#define RIU_RWNXAGCRSSILNA_2_SET_1_RSSI_LNA_10_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_2_SET_1_RSSI_LNA_9_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCRSSILNA_2_SET_1_RSSI_LNA_9_DB_LSB    8
#define RIU_RWNXAGCRSSILNA_2_SET_1_RSSI_LNA_9_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_2_SET_1_RSSI_LNA_8_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCRSSILNA_2_SET_1_RSSI_LNA_8_DB_LSB    0
#define RIU_RWNXAGCRSSILNA_2_SET_1_RSSI_LNA_8_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCRSSILNA_2_SET_1_RSSI_LNA_11_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_2_SET_1_RSSI_LNA_10_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_2_SET_1_RSSI_LNA_9_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_2_SET_1_RSSI_LNA_8_DB_RST    0x0

static inline void riu_rwnxagcrssilna_2_set_1_pack(struct cl_chip *chip, u8 rssi_lna11_db, u8 rssi_lna10_db, u8 rssi_lna9_db, u8 rssi_lna8_db)
{
	ASSERT_ERR_CHIP((((u32)rssi_lna11_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna10_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna9_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna8_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_2_SET_1_ADDR, ((u32)rssi_lna11_db << 24) | ((u32)rssi_lna10_db << 16) | ((u32)rssi_lna9_db << 8) | ((u32)rssi_lna8_db << 0));
}

static inline void riu_rwnxagcrssilna_2_set_1_unpack(struct cl_chip *chip, u8 *rssi_lna11_db, u8 *rssi_lna10_db, u8 *rssi_lna9_db, u8 *rssi_lna8_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_1_ADDR);

	*rssi_lna11_db = (local_val & ((u32)0xFF000000)) >> 24;
	*rssi_lna10_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*rssi_lna9_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*rssi_lna8_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcrssilna_2_set_1_rssi_lna_11_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_1_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagcrssilna_2_set_1_rssi_lna_11_db_setf(struct cl_chip *chip, u8 rssilna11db)
{
	ASSERT_ERR_CHIP((((u32)rssilna11db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_2_SET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_1_ADDR) & ~((u32)0xFF000000)) | ((u32)rssilna11db << 24));
}

static inline u8 riu_rwnxagcrssilna_2_set_1_rssi_lna_10_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_1_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagcrssilna_2_set_1_rssi_lna_10_db_setf(struct cl_chip *chip, u8 rssilna10db)
{
	ASSERT_ERR_CHIP((((u32)rssilna10db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_2_SET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_1_ADDR) & ~((u32)0x00FF0000)) | ((u32)rssilna10db << 16));
}

static inline u8 riu_rwnxagcrssilna_2_set_1_rssi_lna_9_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagcrssilna_2_set_1_rssi_lna_9_db_setf(struct cl_chip *chip, u8 rssilna9db)
{
	ASSERT_ERR_CHIP((((u32)rssilna9db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_2_SET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_1_ADDR) & ~((u32)0x0000FF00)) | ((u32)rssilna9db << 8));
}

static inline u8 riu_rwnxagcrssilna_2_set_1_rssi_lna_8_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcrssilna_2_set_1_rssi_lna_8_db_setf(struct cl_chip *chip, u8 rssilna8db)
{
	ASSERT_ERR_CHIP((((u32)rssilna8db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_2_SET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_2_SET_1_ADDR) & ~((u32)0x000000FF)) | ((u32)rssilna8db << 0));
}

/**
 * @brief RWNXAGCRSSILNA_3_SET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 RSSI_LNA15_DB             0x0
 *    23:16 RSSI_LNA14_DB             0x0
 *    15:08 RSSI_LNA13_DB             0x0
 *    07:00 RSSI_LNA12_DB             0x0
 * </pre>
 */
#define RIU_RWNXAGCRSSILNA_3_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x0000058C)
#define RIU_RWNXAGCRSSILNA_3_SET_1_OFFSET      0x0000058C
#define RIU_RWNXAGCRSSILNA_3_SET_1_INDEX       0x00000163
#define RIU_RWNXAGCRSSILNA_3_SET_1_RESET       0x00000000

static inline u32 riu_rwnxagcrssilna_3_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_1_ADDR);
}

static inline void riu_rwnxagcrssilna_3_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_3_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCRSSILNA_3_SET_1_RSSI_LNA_15_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCRSSILNA_3_SET_1_RSSI_LNA_15_DB_LSB    24
#define RIU_RWNXAGCRSSILNA_3_SET_1_RSSI_LNA_15_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_3_SET_1_RSSI_LNA_14_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCRSSILNA_3_SET_1_RSSI_LNA_14_DB_LSB    16
#define RIU_RWNXAGCRSSILNA_3_SET_1_RSSI_LNA_14_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_3_SET_1_RSSI_LNA_13_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCRSSILNA_3_SET_1_RSSI_LNA_13_DB_LSB    8
#define RIU_RWNXAGCRSSILNA_3_SET_1_RSSI_LNA_13_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCRSSILNA_3_SET_1_RSSI_LNA_12_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCRSSILNA_3_SET_1_RSSI_LNA_12_DB_LSB    0
#define RIU_RWNXAGCRSSILNA_3_SET_1_RSSI_LNA_12_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCRSSILNA_3_SET_1_RSSI_LNA_15_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_3_SET_1_RSSI_LNA_14_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_3_SET_1_RSSI_LNA_13_DB_RST    0x0
#define RIU_RWNXAGCRSSILNA_3_SET_1_RSSI_LNA_12_DB_RST    0x0

static inline void riu_rwnxagcrssilna_3_set_1_pack(struct cl_chip *chip, u8 rssi_lna15_db, u8 rssi_lna14_db, u8 rssi_lna13_db, u8 rssi_lna12_db)
{
	ASSERT_ERR_CHIP((((u32)rssi_lna15_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna14_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna13_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)rssi_lna12_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_3_SET_1_ADDR, ((u32)rssi_lna15_db << 24) | ((u32)rssi_lna14_db << 16) | ((u32)rssi_lna13_db << 8) | ((u32)rssi_lna12_db << 0));
}

static inline void riu_rwnxagcrssilna_3_set_1_unpack(struct cl_chip *chip, u8 *rssi_lna15_db, u8 *rssi_lna14_db, u8 *rssi_lna13_db, u8 *rssi_lna12_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_1_ADDR);

	*rssi_lna15_db = (local_val & ((u32)0xFF000000)) >> 24;
	*rssi_lna14_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*rssi_lna13_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*rssi_lna12_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagcrssilna_3_set_1_rssi_lna_15_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_1_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagcrssilna_3_set_1_rssi_lna_15_db_setf(struct cl_chip *chip, u8 rssilna15db)
{
	ASSERT_ERR_CHIP((((u32)rssilna15db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_3_SET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_1_ADDR) & ~((u32)0xFF000000)) | ((u32)rssilna15db << 24));
}

static inline u8 riu_rwnxagcrssilna_3_set_1_rssi_lna_14_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_1_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagcrssilna_3_set_1_rssi_lna_14_db_setf(struct cl_chip *chip, u8 rssilna14db)
{
	ASSERT_ERR_CHIP((((u32)rssilna14db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_3_SET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_1_ADDR) & ~((u32)0x00FF0000)) | ((u32)rssilna14db << 16));
}

static inline u8 riu_rwnxagcrssilna_3_set_1_rssi_lna_13_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagcrssilna_3_set_1_rssi_lna_13_db_setf(struct cl_chip *chip, u8 rssilna13db)
{
	ASSERT_ERR_CHIP((((u32)rssilna13db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_3_SET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_1_ADDR) & ~((u32)0x0000FF00)) | ((u32)rssilna13db << 8));
}

static inline u8 riu_rwnxagcrssilna_3_set_1_rssi_lna_12_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagcrssilna_3_set_1_rssi_lna_12_db_setf(struct cl_chip *chip, u8 rssilna12db)
{
	ASSERT_ERR_CHIP((((u32)rssilna12db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCRSSILNA_3_SET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCRSSILNA_3_SET_1_ADDR) & ~((u32)0x000000FF)) | ((u32)rssilna12db << 0));
}

/**
 * @brief RWNXAGCLNAGAINSET_1_REF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA3_GAINDB               0xF
 *    22:16 LNA2_GAINDB               0xC
 *    14:08 LNA1_GAINDB               0x0
 *    06:00 LNA0_GAINDB               0x74
 * </pre>
 */
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000590)
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_OFFSET      0x00000590
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_INDEX       0x00000164
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_RESET       0x0F0C0074

static inline u32 riu_rwnxagclnagainset_1_ref_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR);
}

static inline void riu_rwnxagclnagainset_1_ref_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_LNA_3_GAINDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_LNA_3_GAINDB_LSB    24
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_LNA_3_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_LNA_2_GAINDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_LNA_2_GAINDB_LSB    16
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_LNA_2_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_LNA_1_GAINDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_LNA_1_GAINDB_LSB    8
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_LNA_1_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_LNA_0_GAINDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_LNA_0_GAINDB_LSB    0
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_LNA_0_GAINDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAGAINSET_1_REF_0_LNA_3_GAINDB_RST    0xF
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_LNA_2_GAINDB_RST    0xC
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_LNA_1_GAINDB_RST    0x0
#define RIU_RWNXAGCLNAGAINSET_1_REF_0_LNA_0_GAINDB_RST    0x74

static inline void riu_rwnxagclnagainset_1_ref_0_pack(struct cl_chip *chip, u8 lna3_gaindb, u8 lna2_gaindb, u8 lna1_gaindb, u8 lna0_gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna3_gaindb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna2_gaindb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna1_gaindb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna0_gaindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR, ((u32)lna3_gaindb << 24) | ((u32)lna2_gaindb << 16) | ((u32)lna1_gaindb << 8) | ((u32)lna0_gaindb << 0));
}

static inline void riu_rwnxagclnagainset_1_ref_0_unpack(struct cl_chip *chip, u8 *lna3_gaindb, u8 *lna2_gaindb, u8 *lna1_gaindb, u8 *lna0_gaindb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR);

	*lna3_gaindb = (local_val & ((u32)0x7F000000)) >> 24;
	*lna2_gaindb = (local_val & ((u32)0x007F0000)) >> 16;
	*lna1_gaindb = (local_val & ((u32)0x00007F00)) >> 8;
	*lna0_gaindb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnagainset_1_ref_0_lna_3_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnagainset_1_ref_0_lna_3_gaindb_setf(struct cl_chip *chip, u8 lna3gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna3gaindb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR) & ~((u32)0x7F000000)) | ((u32)lna3gaindb << 24));
}

static inline u8 riu_rwnxagclnagainset_1_ref_0_lna_2_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnagainset_1_ref_0_lna_2_gaindb_setf(struct cl_chip *chip, u8 lna2gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna2gaindb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR) & ~((u32)0x007F0000)) | ((u32)lna2gaindb << 16));
}

static inline u8 riu_rwnxagclnagainset_1_ref_0_lna_1_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnagainset_1_ref_0_lna_1_gaindb_setf(struct cl_chip *chip, u8 lna1gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna1gaindb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR) & ~((u32)0x00007F00)) | ((u32)lna1gaindb << 8));
}

static inline u8 riu_rwnxagclnagainset_1_ref_0_lna_0_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnagainset_1_ref_0_lna_0_gaindb_setf(struct cl_chip *chip, u8 lna0gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna0gaindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_0_ADDR) & ~((u32)0x0000007F)) | ((u32)lna0gaindb << 0));
}

/**
 * @brief RWNXAGCLNAGAINSET_1_REF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA7_GAINDB               0x27
 *    22:16 LNA6_GAINDB               0x27
 *    14:08 LNA5_GAINDB               0x21
 *    06:00 LNA4_GAINDB               0x1B
 * </pre>
 */
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000594)
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_OFFSET      0x00000594
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_INDEX       0x00000165
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_RESET       0x2727211B

static inline u32 riu_rwnxagclnagainset_1_ref_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR);
}

static inline void riu_rwnxagclnagainset_1_ref_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_LNA_7_GAINDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_LNA_7_GAINDB_LSB    24
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_LNA_7_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_LNA_6_GAINDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_LNA_6_GAINDB_LSB    16
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_LNA_6_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_LNA_5_GAINDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_LNA_5_GAINDB_LSB    8
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_LNA_5_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_LNA_4_GAINDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_LNA_4_GAINDB_LSB    0
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_LNA_4_GAINDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAGAINSET_1_REF_1_LNA_7_GAINDB_RST    0x27
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_LNA_6_GAINDB_RST    0x27
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_LNA_5_GAINDB_RST    0x21
#define RIU_RWNXAGCLNAGAINSET_1_REF_1_LNA_4_GAINDB_RST    0x1B

static inline void riu_rwnxagclnagainset_1_ref_1_pack(struct cl_chip *chip, u8 lna7_gaindb, u8 lna6_gaindb, u8 lna5_gaindb, u8 lna4_gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna7_gaindb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna6_gaindb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna5_gaindb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna4_gaindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR, ((u32)lna7_gaindb << 24) | ((u32)lna6_gaindb << 16) | ((u32)lna5_gaindb << 8) | ((u32)lna4_gaindb << 0));
}

static inline void riu_rwnxagclnagainset_1_ref_1_unpack(struct cl_chip *chip, u8 *lna7_gaindb, u8 *lna6_gaindb, u8 *lna5_gaindb, u8 *lna4_gaindb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR);

	*lna7_gaindb = (local_val & ((u32)0x7F000000)) >> 24;
	*lna6_gaindb = (local_val & ((u32)0x007F0000)) >> 16;
	*lna5_gaindb = (local_val & ((u32)0x00007F00)) >> 8;
	*lna4_gaindb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnagainset_1_ref_1_lna_7_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnagainset_1_ref_1_lna_7_gaindb_setf(struct cl_chip *chip, u8 lna7gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna7gaindb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR) & ~((u32)0x7F000000)) | ((u32)lna7gaindb << 24));
}

static inline u8 riu_rwnxagclnagainset_1_ref_1_lna_6_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnagainset_1_ref_1_lna_6_gaindb_setf(struct cl_chip *chip, u8 lna6gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna6gaindb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR) & ~((u32)0x007F0000)) | ((u32)lna6gaindb << 16));
}

static inline u8 riu_rwnxagclnagainset_1_ref_1_lna_5_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnagainset_1_ref_1_lna_5_gaindb_setf(struct cl_chip *chip, u8 lna5gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna5gaindb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR) & ~((u32)0x00007F00)) | ((u32)lna5gaindb << 8));
}

static inline u8 riu_rwnxagclnagainset_1_ref_1_lna_4_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnagainset_1_ref_1_lna_4_gaindb_setf(struct cl_chip *chip, u8 lna4gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna4gaindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_1_ADDR) & ~((u32)0x0000007F)) | ((u32)lna4gaindb << 0));
}

/**
 * @brief RWNXAGCLNAGAINSET_1_REF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA11_GAINDB              0x27
 *    22:16 LNA10_GAINDB              0x27
 *    14:08 LNA9_GAINDB               0x27
 *    06:00 LNA8_GAINDB               0x27
 * </pre>
 */
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000598)
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_OFFSET      0x00000598
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_INDEX       0x00000166
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_RESET       0x27272727

static inline u32 riu_rwnxagclnagainset_1_ref_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR);
}

static inline void riu_rwnxagclnagainset_1_ref_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_LNA_11_GAINDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_LNA_11_GAINDB_LSB    24
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_LNA_11_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_LNA_10_GAINDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_LNA_10_GAINDB_LSB    16
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_LNA_10_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_LNA_9_GAINDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_LNA_9_GAINDB_LSB    8
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_LNA_9_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_LNA_8_GAINDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_LNA_8_GAINDB_LSB    0
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_LNA_8_GAINDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAGAINSET_1_REF_2_LNA_11_GAINDB_RST    0x27
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_LNA_10_GAINDB_RST    0x27
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_LNA_9_GAINDB_RST    0x27
#define RIU_RWNXAGCLNAGAINSET_1_REF_2_LNA_8_GAINDB_RST    0x27

static inline void riu_rwnxagclnagainset_1_ref_2_pack(struct cl_chip *chip, u8 lna11_gaindb, u8 lna10_gaindb, u8 lna9_gaindb, u8 lna8_gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna11_gaindb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna10_gaindb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna9_gaindb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna8_gaindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR, ((u32)lna11_gaindb << 24) | ((u32)lna10_gaindb << 16) | ((u32)lna9_gaindb << 8) | ((u32)lna8_gaindb << 0));
}

static inline void riu_rwnxagclnagainset_1_ref_2_unpack(struct cl_chip *chip, u8 *lna11_gaindb, u8 *lna10_gaindb, u8 *lna9_gaindb, u8 *lna8_gaindb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR);

	*lna11_gaindb = (local_val & ((u32)0x7F000000)) >> 24;
	*lna10_gaindb = (local_val & ((u32)0x007F0000)) >> 16;
	*lna9_gaindb = (local_val & ((u32)0x00007F00)) >> 8;
	*lna8_gaindb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnagainset_1_ref_2_lna_11_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnagainset_1_ref_2_lna_11_gaindb_setf(struct cl_chip *chip, u8 lna11gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna11gaindb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR) & ~((u32)0x7F000000)) | ((u32)lna11gaindb << 24));
}

static inline u8 riu_rwnxagclnagainset_1_ref_2_lna_10_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnagainset_1_ref_2_lna_10_gaindb_setf(struct cl_chip *chip, u8 lna10gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna10gaindb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR) & ~((u32)0x007F0000)) | ((u32)lna10gaindb << 16));
}

static inline u8 riu_rwnxagclnagainset_1_ref_2_lna_9_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnagainset_1_ref_2_lna_9_gaindb_setf(struct cl_chip *chip, u8 lna9gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna9gaindb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR) & ~((u32)0x00007F00)) | ((u32)lna9gaindb << 8));
}

static inline u8 riu_rwnxagclnagainset_1_ref_2_lna_8_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnagainset_1_ref_2_lna_8_gaindb_setf(struct cl_chip *chip, u8 lna8gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna8gaindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_2_ADDR) & ~((u32)0x0000007F)) | ((u32)lna8gaindb << 0));
}

/**
 * @brief RWNXAGCLNAGAINSET_1_REF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA15_GAINDB              0x27
 *    22:16 LNA14_GAINDB              0x27
 *    14:08 LNA13_GAINDB              0x27
 *    06:00 LNA12_GAINDB              0x27
 * </pre>
 */
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR        (REG_RIU_BASE_ADDR + 0x0000059C)
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_OFFSET      0x0000059C
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_INDEX       0x00000167
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_RESET       0x27272727

static inline u32 riu_rwnxagclnagainset_1_ref_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR);
}

static inline void riu_rwnxagclnagainset_1_ref_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_LNA_15_GAINDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_LNA_15_GAINDB_LSB    24
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_LNA_15_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_LNA_14_GAINDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_LNA_14_GAINDB_LSB    16
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_LNA_14_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_LNA_13_GAINDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_LNA_13_GAINDB_LSB    8
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_LNA_13_GAINDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_LNA_12_GAINDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_LNA_12_GAINDB_LSB    0
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_LNA_12_GAINDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAGAINSET_1_REF_3_LNA_15_GAINDB_RST    0x27
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_LNA_14_GAINDB_RST    0x27
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_LNA_13_GAINDB_RST    0x27
#define RIU_RWNXAGCLNAGAINSET_1_REF_3_LNA_12_GAINDB_RST    0x27

static inline void riu_rwnxagclnagainset_1_ref_3_pack(struct cl_chip *chip, u8 lna15_gaindb, u8 lna14_gaindb, u8 lna13_gaindb, u8 lna12_gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna15_gaindb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna14_gaindb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna13_gaindb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna12_gaindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR, ((u32)lna15_gaindb << 24) | ((u32)lna14_gaindb << 16) | ((u32)lna13_gaindb << 8) | ((u32)lna12_gaindb << 0));
}

static inline void riu_rwnxagclnagainset_1_ref_3_unpack(struct cl_chip *chip, u8 *lna15_gaindb, u8 *lna14_gaindb, u8 *lna13_gaindb, u8 *lna12_gaindb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR);

	*lna15_gaindb = (local_val & ((u32)0x7F000000)) >> 24;
	*lna14_gaindb = (local_val & ((u32)0x007F0000)) >> 16;
	*lna13_gaindb = (local_val & ((u32)0x00007F00)) >> 8;
	*lna12_gaindb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnagainset_1_ref_3_lna_15_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnagainset_1_ref_3_lna_15_gaindb_setf(struct cl_chip *chip, u8 lna15gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna15gaindb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR) & ~((u32)0x7F000000)) | ((u32)lna15gaindb << 24));
}

static inline u8 riu_rwnxagclnagainset_1_ref_3_lna_14_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnagainset_1_ref_3_lna_14_gaindb_setf(struct cl_chip *chip, u8 lna14gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna14gaindb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR) & ~((u32)0x007F0000)) | ((u32)lna14gaindb << 16));
}

static inline u8 riu_rwnxagclnagainset_1_ref_3_lna_13_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnagainset_1_ref_3_lna_13_gaindb_setf(struct cl_chip *chip, u8 lna13gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna13gaindb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR) & ~((u32)0x00007F00)) | ((u32)lna13gaindb << 8));
}

static inline u8 riu_rwnxagclnagainset_1_ref_3_lna_12_gaindb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnagainset_1_ref_3_lna_12_gaindb_setf(struct cl_chip *chip, u8 lna12gaindb)
{
	ASSERT_ERR_CHIP((((u32)lna12gaindb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAINSET_1_REF_3_ADDR) & ~((u32)0x0000007F)) | ((u32)lna12gaindb << 0));
}

/**
 * @brief RWNXAGCLNANFSET_1_REF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA3_NFDB                 0x7
 *    22:16 LNA2_NFDB                 0xA
 *    14:08 LNA1_NFDB                 0x19
 *    06:00 LNA0_NFDB                 0x23
 * </pre>
 */
#define RIU_RWNXAGCLNANFSET_1_REF_0_ADDR        (REG_RIU_BASE_ADDR + 0x000005A0)
#define RIU_RWNXAGCLNANFSET_1_REF_0_OFFSET      0x000005A0
#define RIU_RWNXAGCLNANFSET_1_REF_0_INDEX       0x00000168
#define RIU_RWNXAGCLNANFSET_1_REF_0_RESET       0x070A1923

static inline u32 riu_rwnxagclnanfset_1_ref_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_0_ADDR);
}

static inline void riu_rwnxagclnanfset_1_ref_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNANFSET_1_REF_0_LNA_3_NFDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNANFSET_1_REF_0_LNA_3_NFDB_LSB    24
#define RIU_RWNXAGCLNANFSET_1_REF_0_LNA_3_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_1_REF_0_LNA_2_NFDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNANFSET_1_REF_0_LNA_2_NFDB_LSB    16
#define RIU_RWNXAGCLNANFSET_1_REF_0_LNA_2_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_1_REF_0_LNA_1_NFDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNANFSET_1_REF_0_LNA_1_NFDB_LSB    8
#define RIU_RWNXAGCLNANFSET_1_REF_0_LNA_1_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_1_REF_0_LNA_0_NFDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNANFSET_1_REF_0_LNA_0_NFDB_LSB    0
#define RIU_RWNXAGCLNANFSET_1_REF_0_LNA_0_NFDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNANFSET_1_REF_0_LNA_3_NFDB_RST    0x7
#define RIU_RWNXAGCLNANFSET_1_REF_0_LNA_2_NFDB_RST    0xA
#define RIU_RWNXAGCLNANFSET_1_REF_0_LNA_1_NFDB_RST    0x19
#define RIU_RWNXAGCLNANFSET_1_REF_0_LNA_0_NFDB_RST    0x23

static inline void riu_rwnxagclnanfset_1_ref_0_pack(struct cl_chip *chip, u8 lna3_nfdb, u8 lna2_nfdb, u8 lna1_nfdb, u8 lna0_nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna3_nfdb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna2_nfdb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna1_nfdb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna0_nfdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_0_ADDR, ((u32)lna3_nfdb << 24) | ((u32)lna2_nfdb << 16) | ((u32)lna1_nfdb << 8) | ((u32)lna0_nfdb << 0));
}

static inline void riu_rwnxagclnanfset_1_ref_0_unpack(struct cl_chip *chip, u8 *lna3_nfdb, u8 *lna2_nfdb, u8 *lna1_nfdb, u8 *lna0_nfdb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_0_ADDR);

	*lna3_nfdb = (local_val & ((u32)0x7F000000)) >> 24;
	*lna2_nfdb = (local_val & ((u32)0x007F0000)) >> 16;
	*lna1_nfdb = (local_val & ((u32)0x00007F00)) >> 8;
	*lna0_nfdb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnanfset_1_ref_0_lna_3_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnanfset_1_ref_0_lna_3_nfdb_setf(struct cl_chip *chip, u8 lna3nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna3nfdb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_0_ADDR) & ~((u32)0x7F000000)) | ((u32)lna3nfdb << 24));
}

static inline u8 riu_rwnxagclnanfset_1_ref_0_lna_2_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnanfset_1_ref_0_lna_2_nfdb_setf(struct cl_chip *chip, u8 lna2nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna2nfdb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_0_ADDR) & ~((u32)0x007F0000)) | ((u32)lna2nfdb << 16));
}

static inline u8 riu_rwnxagclnanfset_1_ref_0_lna_1_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnanfset_1_ref_0_lna_1_nfdb_setf(struct cl_chip *chip, u8 lna1nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna1nfdb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_0_ADDR) & ~((u32)0x00007F00)) | ((u32)lna1nfdb << 8));
}

static inline u8 riu_rwnxagclnanfset_1_ref_0_lna_0_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnanfset_1_ref_0_lna_0_nfdb_setf(struct cl_chip *chip, u8 lna0nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna0nfdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_0_ADDR) & ~((u32)0x0000007F)) | ((u32)lna0nfdb << 0));
}

/**
 * @brief RWNXAGCLNANFSET_1_REF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA7_NFDB                 0x2
 *    22:16 LNA6_NFDB                 0x2
 *    14:08 LNA5_NFDB                 0x2
 *    06:00 LNA4_NFDB                 0x3
 * </pre>
 */
#define RIU_RWNXAGCLNANFSET_1_REF_1_ADDR        (REG_RIU_BASE_ADDR + 0x000005A4)
#define RIU_RWNXAGCLNANFSET_1_REF_1_OFFSET      0x000005A4
#define RIU_RWNXAGCLNANFSET_1_REF_1_INDEX       0x00000169
#define RIU_RWNXAGCLNANFSET_1_REF_1_RESET       0x02020203

static inline u32 riu_rwnxagclnanfset_1_ref_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_1_ADDR);
}

static inline void riu_rwnxagclnanfset_1_ref_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNANFSET_1_REF_1_LNA_7_NFDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNANFSET_1_REF_1_LNA_7_NFDB_LSB    24
#define RIU_RWNXAGCLNANFSET_1_REF_1_LNA_7_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_1_REF_1_LNA_6_NFDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNANFSET_1_REF_1_LNA_6_NFDB_LSB    16
#define RIU_RWNXAGCLNANFSET_1_REF_1_LNA_6_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_1_REF_1_LNA_5_NFDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNANFSET_1_REF_1_LNA_5_NFDB_LSB    8
#define RIU_RWNXAGCLNANFSET_1_REF_1_LNA_5_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_1_REF_1_LNA_4_NFDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNANFSET_1_REF_1_LNA_4_NFDB_LSB    0
#define RIU_RWNXAGCLNANFSET_1_REF_1_LNA_4_NFDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNANFSET_1_REF_1_LNA_7_NFDB_RST    0x2
#define RIU_RWNXAGCLNANFSET_1_REF_1_LNA_6_NFDB_RST    0x2
#define RIU_RWNXAGCLNANFSET_1_REF_1_LNA_5_NFDB_RST    0x2
#define RIU_RWNXAGCLNANFSET_1_REF_1_LNA_4_NFDB_RST    0x3

static inline void riu_rwnxagclnanfset_1_ref_1_pack(struct cl_chip *chip, u8 lna7_nfdb, u8 lna6_nfdb, u8 lna5_nfdb, u8 lna4_nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna7_nfdb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna6_nfdb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna5_nfdb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna4_nfdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_1_ADDR, ((u32)lna7_nfdb << 24) | ((u32)lna6_nfdb << 16) | ((u32)lna5_nfdb << 8) | ((u32)lna4_nfdb << 0));
}

static inline void riu_rwnxagclnanfset_1_ref_1_unpack(struct cl_chip *chip, u8 *lna7_nfdb, u8 *lna6_nfdb, u8 *lna5_nfdb, u8 *lna4_nfdb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_1_ADDR);

	*lna7_nfdb = (local_val & ((u32)0x7F000000)) >> 24;
	*lna6_nfdb = (local_val & ((u32)0x007F0000)) >> 16;
	*lna5_nfdb = (local_val & ((u32)0x00007F00)) >> 8;
	*lna4_nfdb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnanfset_1_ref_1_lna_7_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnanfset_1_ref_1_lna_7_nfdb_setf(struct cl_chip *chip, u8 lna7nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna7nfdb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_1_ADDR) & ~((u32)0x7F000000)) | ((u32)lna7nfdb << 24));
}

static inline u8 riu_rwnxagclnanfset_1_ref_1_lna_6_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnanfset_1_ref_1_lna_6_nfdb_setf(struct cl_chip *chip, u8 lna6nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna6nfdb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_1_ADDR) & ~((u32)0x007F0000)) | ((u32)lna6nfdb << 16));
}

static inline u8 riu_rwnxagclnanfset_1_ref_1_lna_5_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnanfset_1_ref_1_lna_5_nfdb_setf(struct cl_chip *chip, u8 lna5nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna5nfdb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_1_ADDR) & ~((u32)0x00007F00)) | ((u32)lna5nfdb << 8));
}

static inline u8 riu_rwnxagclnanfset_1_ref_1_lna_4_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnanfset_1_ref_1_lna_4_nfdb_setf(struct cl_chip *chip, u8 lna4nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna4nfdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_1_ADDR) & ~((u32)0x0000007F)) | ((u32)lna4nfdb << 0));
}

/**
 * @brief RWNXAGCLNANFSET_1_REF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA11_NFDB                0x2
 *    22:16 LNA10_NFDB                0x2
 *    14:08 LNA9_NFDB                 0x2
 *    06:00 LNA8_NFDB                 0x2
 * </pre>
 */
#define RIU_RWNXAGCLNANFSET_1_REF_2_ADDR        (REG_RIU_BASE_ADDR + 0x000005A8)
#define RIU_RWNXAGCLNANFSET_1_REF_2_OFFSET      0x000005A8
#define RIU_RWNXAGCLNANFSET_1_REF_2_INDEX       0x0000016A
#define RIU_RWNXAGCLNANFSET_1_REF_2_RESET       0x02020202

static inline u32 riu_rwnxagclnanfset_1_ref_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_2_ADDR);
}

static inline void riu_rwnxagclnanfset_1_ref_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNANFSET_1_REF_2_LNA_11_NFDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNANFSET_1_REF_2_LNA_11_NFDB_LSB    24
#define RIU_RWNXAGCLNANFSET_1_REF_2_LNA_11_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_1_REF_2_LNA_10_NFDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNANFSET_1_REF_2_LNA_10_NFDB_LSB    16
#define RIU_RWNXAGCLNANFSET_1_REF_2_LNA_10_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_1_REF_2_LNA_9_NFDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNANFSET_1_REF_2_LNA_9_NFDB_LSB    8
#define RIU_RWNXAGCLNANFSET_1_REF_2_LNA_9_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_1_REF_2_LNA_8_NFDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNANFSET_1_REF_2_LNA_8_NFDB_LSB    0
#define RIU_RWNXAGCLNANFSET_1_REF_2_LNA_8_NFDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNANFSET_1_REF_2_LNA_11_NFDB_RST    0x2
#define RIU_RWNXAGCLNANFSET_1_REF_2_LNA_10_NFDB_RST    0x2
#define RIU_RWNXAGCLNANFSET_1_REF_2_LNA_9_NFDB_RST    0x2
#define RIU_RWNXAGCLNANFSET_1_REF_2_LNA_8_NFDB_RST    0x2

static inline void riu_rwnxagclnanfset_1_ref_2_pack(struct cl_chip *chip, u8 lna11_nfdb, u8 lna10_nfdb, u8 lna9_nfdb, u8 lna8_nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna11_nfdb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna10_nfdb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna9_nfdb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna8_nfdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_2_ADDR, ((u32)lna11_nfdb << 24) | ((u32)lna10_nfdb << 16) | ((u32)lna9_nfdb << 8) | ((u32)lna8_nfdb << 0));
}

static inline void riu_rwnxagclnanfset_1_ref_2_unpack(struct cl_chip *chip, u8 *lna11_nfdb, u8 *lna10_nfdb, u8 *lna9_nfdb, u8 *lna8_nfdb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_2_ADDR);

	*lna11_nfdb = (local_val & ((u32)0x7F000000)) >> 24;
	*lna10_nfdb = (local_val & ((u32)0x007F0000)) >> 16;
	*lna9_nfdb = (local_val & ((u32)0x00007F00)) >> 8;
	*lna8_nfdb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnanfset_1_ref_2_lna_11_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnanfset_1_ref_2_lna_11_nfdb_setf(struct cl_chip *chip, u8 lna11nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna11nfdb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_2_ADDR) & ~((u32)0x7F000000)) | ((u32)lna11nfdb << 24));
}

static inline u8 riu_rwnxagclnanfset_1_ref_2_lna_10_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnanfset_1_ref_2_lna_10_nfdb_setf(struct cl_chip *chip, u8 lna10nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna10nfdb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_2_ADDR) & ~((u32)0x007F0000)) | ((u32)lna10nfdb << 16));
}

static inline u8 riu_rwnxagclnanfset_1_ref_2_lna_9_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnanfset_1_ref_2_lna_9_nfdb_setf(struct cl_chip *chip, u8 lna9nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna9nfdb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_2_ADDR) & ~((u32)0x00007F00)) | ((u32)lna9nfdb << 8));
}

static inline u8 riu_rwnxagclnanfset_1_ref_2_lna_8_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnanfset_1_ref_2_lna_8_nfdb_setf(struct cl_chip *chip, u8 lna8nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna8nfdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_2_ADDR) & ~((u32)0x0000007F)) | ((u32)lna8nfdb << 0));
}

/**
 * @brief RWNXAGCLNANFSET_1_REF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA15_NFDB                0x2
 *    22:16 LNA14_NFDB                0x2
 *    14:08 LNA13_NFDB                0x2
 *    06:00 LNA12_NFDB                0x2
 * </pre>
 */
#define RIU_RWNXAGCLNANFSET_1_REF_3_ADDR        (REG_RIU_BASE_ADDR + 0x000005AC)
#define RIU_RWNXAGCLNANFSET_1_REF_3_OFFSET      0x000005AC
#define RIU_RWNXAGCLNANFSET_1_REF_3_INDEX       0x0000016B
#define RIU_RWNXAGCLNANFSET_1_REF_3_RESET       0x02020202

static inline u32 riu_rwnxagclnanfset_1_ref_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_3_ADDR);
}

static inline void riu_rwnxagclnanfset_1_ref_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNANFSET_1_REF_3_LNA_15_NFDB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNANFSET_1_REF_3_LNA_15_NFDB_LSB    24
#define RIU_RWNXAGCLNANFSET_1_REF_3_LNA_15_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_1_REF_3_LNA_14_NFDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNANFSET_1_REF_3_LNA_14_NFDB_LSB    16
#define RIU_RWNXAGCLNANFSET_1_REF_3_LNA_14_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_1_REF_3_LNA_13_NFDB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNANFSET_1_REF_3_LNA_13_NFDB_LSB    8
#define RIU_RWNXAGCLNANFSET_1_REF_3_LNA_13_NFDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNANFSET_1_REF_3_LNA_12_NFDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNANFSET_1_REF_3_LNA_12_NFDB_LSB    0
#define RIU_RWNXAGCLNANFSET_1_REF_3_LNA_12_NFDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNANFSET_1_REF_3_LNA_15_NFDB_RST    0x2
#define RIU_RWNXAGCLNANFSET_1_REF_3_LNA_14_NFDB_RST    0x2
#define RIU_RWNXAGCLNANFSET_1_REF_3_LNA_13_NFDB_RST    0x2
#define RIU_RWNXAGCLNANFSET_1_REF_3_LNA_12_NFDB_RST    0x2

static inline void riu_rwnxagclnanfset_1_ref_3_pack(struct cl_chip *chip, u8 lna15_nfdb, u8 lna14_nfdb, u8 lna13_nfdb, u8 lna12_nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna15_nfdb << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna14_nfdb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna13_nfdb << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna12_nfdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_3_ADDR, ((u32)lna15_nfdb << 24) | ((u32)lna14_nfdb << 16) | ((u32)lna13_nfdb << 8) | ((u32)lna12_nfdb << 0));
}

static inline void riu_rwnxagclnanfset_1_ref_3_unpack(struct cl_chip *chip, u8 *lna15_nfdb, u8 *lna14_nfdb, u8 *lna13_nfdb, u8 *lna12_nfdb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_3_ADDR);

	*lna15_nfdb = (local_val & ((u32)0x7F000000)) >> 24;
	*lna14_nfdb = (local_val & ((u32)0x007F0000)) >> 16;
	*lna13_nfdb = (local_val & ((u32)0x00007F00)) >> 8;
	*lna12_nfdb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnanfset_1_ref_3_lna_15_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnanfset_1_ref_3_lna_15_nfdb_setf(struct cl_chip *chip, u8 lna15nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna15nfdb << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_3_ADDR) & ~((u32)0x7F000000)) | ((u32)lna15nfdb << 24));
}

static inline u8 riu_rwnxagclnanfset_1_ref_3_lna_14_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnanfset_1_ref_3_lna_14_nfdb_setf(struct cl_chip *chip, u8 lna14nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna14nfdb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_3_ADDR) & ~((u32)0x007F0000)) | ((u32)lna14nfdb << 16));
}

static inline u8 riu_rwnxagclnanfset_1_ref_3_lna_13_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnanfset_1_ref_3_lna_13_nfdb_setf(struct cl_chip *chip, u8 lna13nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna13nfdb << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_3_ADDR) & ~((u32)0x00007F00)) | ((u32)lna13nfdb << 8));
}

static inline u8 riu_rwnxagclnanfset_1_ref_3_lna_12_nfdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnanfset_1_ref_3_lna_12_nfdb_setf(struct cl_chip *chip, u8 lna12nfdb)
{
	ASSERT_ERR_CHIP((((u32)lna12nfdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNANFSET_1_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNANFSET_1_REF_3_ADDR) & ~((u32)0x0000007F)) | ((u32)lna12nfdb << 0));
}

/**
 * @brief RWNXAGCLNAICP_1_SET_1_REF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA3_ICP1_DB              0x64
 *    22:16 LNA2_ICP1_DB              0x73
 *    14:08 LNA1_ICP1_DB              0x7E
 *    06:00 LNA0_ICP1_DB              0x5
 * </pre>
 */
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR        (REG_RIU_BASE_ADDR + 0x000005B0)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_OFFSET      0x000005B0
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_INDEX       0x0000016C
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_RESET       0x64737E05

static inline u32 riu_rwnxagclnaicp_1_set_1_ref_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_LNA_3_ICP_1_DB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_LNA_3_ICP_1_DB_LSB    24
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_LNA_3_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_LNA_2_ICP_1_DB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_LNA_2_ICP_1_DB_LSB    16
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_LNA_2_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_LNA_1_ICP_1_DB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_LNA_1_ICP_1_DB_LSB    8
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_LNA_1_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_LNA_0_ICP_1_DB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_LNA_0_ICP_1_DB_LSB    0
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_LNA_0_ICP_1_DB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_LNA_3_ICP_1_DB_RST    0x64
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_LNA_2_ICP_1_DB_RST    0x73
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_LNA_1_ICP_1_DB_RST    0x7E
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_0_LNA_0_ICP_1_DB_RST    0x5

static inline void riu_rwnxagclnaicp_1_set_1_ref_0_pack(struct cl_chip *chip, u8 lna3_icp1_db, u8 lna2_icp1_db, u8 lna1_icp1_db, u8 lna0_icp1_db)
{
	ASSERT_ERR_CHIP((((u32)lna3_icp1_db << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna2_icp1_db << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna1_icp1_db << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna0_icp1_db << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR, ((u32)lna3_icp1_db << 24) | ((u32)lna2_icp1_db << 16) | ((u32)lna1_icp1_db << 8) | ((u32)lna0_icp1_db << 0));
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_0_unpack(struct cl_chip *chip, u8 *lna3_icp1_db, u8 *lna2_icp1_db, u8 *lna1_icp1_db, u8 *lna0_icp1_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR);

	*lna3_icp1_db = (local_val & ((u32)0x7F000000)) >> 24;
	*lna2_icp1_db = (local_val & ((u32)0x007F0000)) >> 16;
	*lna1_icp1_db = (local_val & ((u32)0x00007F00)) >> 8;
	*lna0_icp1_db = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnaicp_1_set_1_ref_0_lna_3_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_0_lna_3_icp_1_db_setf(struct cl_chip *chip, u8 lna3icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna3icp1db << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR) & ~((u32)0x7F000000)) | ((u32)lna3icp1db << 24));
}

static inline u8 riu_rwnxagclnaicp_1_set_1_ref_0_lna_2_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_0_lna_2_icp_1_db_setf(struct cl_chip *chip, u8 lna2icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna2icp1db << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR) & ~((u32)0x007F0000)) | ((u32)lna2icp1db << 16));
}

static inline u8 riu_rwnxagclnaicp_1_set_1_ref_0_lna_1_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_0_lna_1_icp_1_db_setf(struct cl_chip *chip, u8 lna1icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna1icp1db << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR) & ~((u32)0x00007F00)) | ((u32)lna1icp1db << 8));
}

static inline u8 riu_rwnxagclnaicp_1_set_1_ref_0_lna_0_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_0_lna_0_icp_1_db_setf(struct cl_chip *chip, u8 lna0icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna0icp1db << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_0_ADDR) & ~((u32)0x0000007F)) | ((u32)lna0icp1db << 0));
}

/**
 * @brief RWNXAGCLNAICP_1_SET_1_REF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA7_ICP1_DB              0x56
 *    22:16 LNA6_ICP1_DB              0x56
 *    14:08 LNA5_ICP1_DB              0x5B
 *    06:00 LNA4_ICP1_DB              0x5E
 * </pre>
 */
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR        (REG_RIU_BASE_ADDR + 0x000005B4)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_OFFSET      0x000005B4
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_INDEX       0x0000016D
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_RESET       0x56565B5E

static inline u32 riu_rwnxagclnaicp_1_set_1_ref_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_LNA_7_ICP_1_DB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_LNA_7_ICP_1_DB_LSB    24
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_LNA_7_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_LNA_6_ICP_1_DB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_LNA_6_ICP_1_DB_LSB    16
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_LNA_6_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_LNA_5_ICP_1_DB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_LNA_5_ICP_1_DB_LSB    8
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_LNA_5_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_LNA_4_ICP_1_DB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_LNA_4_ICP_1_DB_LSB    0
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_LNA_4_ICP_1_DB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_LNA_7_ICP_1_DB_RST    0x56
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_LNA_6_ICP_1_DB_RST    0x56
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_LNA_5_ICP_1_DB_RST    0x5B
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_1_LNA_4_ICP_1_DB_RST    0x5E

static inline void riu_rwnxagclnaicp_1_set_1_ref_1_pack(struct cl_chip *chip, u8 lna7_icp1_db, u8 lna6_icp1_db, u8 lna5_icp1_db, u8 lna4_icp1_db)
{
	ASSERT_ERR_CHIP((((u32)lna7_icp1_db << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna6_icp1_db << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna5_icp1_db << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna4_icp1_db << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR, ((u32)lna7_icp1_db << 24) | ((u32)lna6_icp1_db << 16) | ((u32)lna5_icp1_db << 8) | ((u32)lna4_icp1_db << 0));
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_1_unpack(struct cl_chip *chip, u8 *lna7_icp1_db, u8 *lna6_icp1_db, u8 *lna5_icp1_db, u8 *lna4_icp1_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR);

	*lna7_icp1_db = (local_val & ((u32)0x7F000000)) >> 24;
	*lna6_icp1_db = (local_val & ((u32)0x007F0000)) >> 16;
	*lna5_icp1_db = (local_val & ((u32)0x00007F00)) >> 8;
	*lna4_icp1_db = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnaicp_1_set_1_ref_1_lna_7_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_1_lna_7_icp_1_db_setf(struct cl_chip *chip, u8 lna7icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna7icp1db << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR) & ~((u32)0x7F000000)) | ((u32)lna7icp1db << 24));
}

static inline u8 riu_rwnxagclnaicp_1_set_1_ref_1_lna_6_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_1_lna_6_icp_1_db_setf(struct cl_chip *chip, u8 lna6icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna6icp1db << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR) & ~((u32)0x007F0000)) | ((u32)lna6icp1db << 16));
}

static inline u8 riu_rwnxagclnaicp_1_set_1_ref_1_lna_5_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_1_lna_5_icp_1_db_setf(struct cl_chip *chip, u8 lna5icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna5icp1db << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR) & ~((u32)0x00007F00)) | ((u32)lna5icp1db << 8));
}

static inline u8 riu_rwnxagclnaicp_1_set_1_ref_1_lna_4_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_1_lna_4_icp_1_db_setf(struct cl_chip *chip, u8 lna4icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna4icp1db << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_1_ADDR) & ~((u32)0x0000007F)) | ((u32)lna4icp1db << 0));
}

/**
 * @brief RWNXAGCLNAICP_1_SET_1_REF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA11_ICP1_DB             0x2
 *    22:16 LNA10_ICP1_DB             0x2
 *    14:08 LNA9_ICP1_DB              0x2
 *    06:00 LNA8_ICP1_DB              0x2
 * </pre>
 */
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR        (REG_RIU_BASE_ADDR + 0x000005B8)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_OFFSET      0x000005B8
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_INDEX       0x0000016E
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_RESET       0x02020202

static inline u32 riu_rwnxagclnaicp_1_set_1_ref_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_LNA_11_ICP_1_DB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_LNA_11_ICP_1_DB_LSB    24
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_LNA_11_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_LNA_10_ICP_1_DB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_LNA_10_ICP_1_DB_LSB    16
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_LNA_10_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_LNA_9_ICP_1_DB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_LNA_9_ICP_1_DB_LSB    8
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_LNA_9_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_LNA_8_ICP_1_DB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_LNA_8_ICP_1_DB_LSB    0
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_LNA_8_ICP_1_DB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_LNA_11_ICP_1_DB_RST    0x2
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_LNA_10_ICP_1_DB_RST    0x2
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_LNA_9_ICP_1_DB_RST    0x2
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_2_LNA_8_ICP_1_DB_RST    0x2

static inline void riu_rwnxagclnaicp_1_set_1_ref_2_pack(struct cl_chip *chip, u8 lna11_icp1_db, u8 lna10_icp1_db, u8 lna9_icp1_db, u8 lna8_icp1_db)
{
	ASSERT_ERR_CHIP((((u32)lna11_icp1_db << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna10_icp1_db << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna9_icp1_db << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna8_icp1_db << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR, ((u32)lna11_icp1_db << 24) | ((u32)lna10_icp1_db << 16) | ((u32)lna9_icp1_db << 8) | ((u32)lna8_icp1_db << 0));
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_2_unpack(struct cl_chip *chip, u8 *lna11_icp1_db, u8 *lna10_icp1_db, u8 *lna9_icp1_db, u8 *lna8_icp1_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR);

	*lna11_icp1_db = (local_val & ((u32)0x7F000000)) >> 24;
	*lna10_icp1_db = (local_val & ((u32)0x007F0000)) >> 16;
	*lna9_icp1_db = (local_val & ((u32)0x00007F00)) >> 8;
	*lna8_icp1_db = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnaicp_1_set_1_ref_2_lna_11_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_2_lna_11_icp_1_db_setf(struct cl_chip *chip, u8 lna11icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna11icp1db << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR) & ~((u32)0x7F000000)) | ((u32)lna11icp1db << 24));
}

static inline u8 riu_rwnxagclnaicp_1_set_1_ref_2_lna_10_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_2_lna_10_icp_1_db_setf(struct cl_chip *chip, u8 lna10icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna10icp1db << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR) & ~((u32)0x007F0000)) | ((u32)lna10icp1db << 16));
}

static inline u8 riu_rwnxagclnaicp_1_set_1_ref_2_lna_9_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_2_lna_9_icp_1_db_setf(struct cl_chip *chip, u8 lna9icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna9icp1db << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR) & ~((u32)0x00007F00)) | ((u32)lna9icp1db << 8));
}

static inline u8 riu_rwnxagclnaicp_1_set_1_ref_2_lna_8_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_2_lna_8_icp_1_db_setf(struct cl_chip *chip, u8 lna8icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna8icp1db << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_2_ADDR) & ~((u32)0x0000007F)) | ((u32)lna8icp1db << 0));
}

/**
 * @brief RWNXAGCLNAICP_1_SET_1_REF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 LNA15_ICP1_DB             0x2
 *    22:16 LNA14_ICP1_DB             0x2
 *    14:08 LNA13_ICP1_DB             0x2
 *    06:00 LNA12_ICP1_DB             0x2
 * </pre>
 */
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR        (REG_RIU_BASE_ADDR + 0x000005BC)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_OFFSET      0x000005BC
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_INDEX       0x0000016F
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_RESET       0x02020202

static inline u32 riu_rwnxagclnaicp_1_set_1_ref_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_LNA_15_ICP_1_DB_MASK    ((u32)0x7F000000)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_LNA_15_ICP_1_DB_LSB    24
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_LNA_15_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_LNA_14_ICP_1_DB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_LNA_14_ICP_1_DB_LSB    16
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_LNA_14_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_LNA_13_ICP_1_DB_MASK    ((u32)0x00007F00)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_LNA_13_ICP_1_DB_LSB    8
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_LNA_13_ICP_1_DB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_LNA_12_ICP_1_DB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_LNA_12_ICP_1_DB_LSB    0
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_LNA_12_ICP_1_DB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_LNA_15_ICP_1_DB_RST    0x2
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_LNA_14_ICP_1_DB_RST    0x2
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_LNA_13_ICP_1_DB_RST    0x2
#define RIU_RWNXAGCLNAICP_1_SET_1_REF_3_LNA_12_ICP_1_DB_RST    0x2

static inline void riu_rwnxagclnaicp_1_set_1_ref_3_pack(struct cl_chip *chip, u8 lna15_icp1_db, u8 lna14_icp1_db, u8 lna13_icp1_db, u8 lna12_icp1_db)
{
	ASSERT_ERR_CHIP((((u32)lna15_icp1_db << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna14_icp1_db << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna13_icp1_db << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna12_icp1_db << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR, ((u32)lna15_icp1_db << 24) | ((u32)lna14_icp1_db << 16) | ((u32)lna13_icp1_db << 8) | ((u32)lna12_icp1_db << 0));
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_3_unpack(struct cl_chip *chip, u8 *lna15_icp1_db, u8 *lna14_icp1_db, u8 *lna13_icp1_db, u8 *lna12_icp1_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR);

	*lna15_icp1_db = (local_val & ((u32)0x7F000000)) >> 24;
	*lna14_icp1_db = (local_val & ((u32)0x007F0000)) >> 16;
	*lna13_icp1_db = (local_val & ((u32)0x00007F00)) >> 8;
	*lna12_icp1_db = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnaicp_1_set_1_ref_3_lna_15_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_3_lna_15_icp_1_db_setf(struct cl_chip *chip, u8 lna15icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna15icp1db << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR) & ~((u32)0x7F000000)) | ((u32)lna15icp1db << 24));
}

static inline u8 riu_rwnxagclnaicp_1_set_1_ref_3_lna_14_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_3_lna_14_icp_1_db_setf(struct cl_chip *chip, u8 lna14icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna14icp1db << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR) & ~((u32)0x007F0000)) | ((u32)lna14icp1db << 16));
}

static inline u8 riu_rwnxagclnaicp_1_set_1_ref_3_lna_13_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_3_lna_13_icp_1_db_setf(struct cl_chip *chip, u8 lna13icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna13icp1db << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR) & ~((u32)0x00007F00)) | ((u32)lna13icp1db << 8));
}

static inline u8 riu_rwnxagclnaicp_1_set_1_ref_3_lna_12_icp_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnaicp_1_set_1_ref_3_lna_12_icp_1_db_setf(struct cl_chip *chip, u8 lna12icp1db)
{
	ASSERT_ERR_CHIP((((u32)lna12icp1db << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAICP_1_SET_1_REF_3_ADDR) & ~((u32)0x0000007F)) | ((u32)lna12icp1db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_3_REF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA3_THRSET0_DB           0x2C
 *    23:16 LNA2_THRSET0_DB           0x26
 *    15:08 LNA1_THRSET0_DB           0x17
 *    07:00 LNA0_THRSET0_DB           0xC
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR        (REG_RIU_BASE_ADDR + 0x000005C0)
#define RIU_RWNXAGCLNATHRSET_3_REF_0_OFFSET      0x000005C0
#define RIU_RWNXAGCLNATHRSET_3_REF_0_INDEX       0x00000170
#define RIU_RWNXAGCLNATHRSET_3_REF_0_RESET       0x2C26170C

static inline u32 riu_rwnxagclnathrset_3_ref_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR);
}

static inline void riu_rwnxagclnathrset_3_ref_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_3_REF_0_LNA_3_THRSET_0_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_3_REF_0_LNA_3_THRSET_0_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_3_REF_0_LNA_3_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_3_REF_0_LNA_2_THRSET_0_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_3_REF_0_LNA_2_THRSET_0_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_3_REF_0_LNA_2_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_3_REF_0_LNA_1_THRSET_0_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_3_REF_0_LNA_1_THRSET_0_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_3_REF_0_LNA_1_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_3_REF_0_LNA_0_THRSET_0_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_3_REF_0_LNA_0_THRSET_0_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_3_REF_0_LNA_0_THRSET_0_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_3_REF_0_LNA_3_THRSET_0_DB_RST    0x2C
#define RIU_RWNXAGCLNATHRSET_3_REF_0_LNA_2_THRSET_0_DB_RST    0x26
#define RIU_RWNXAGCLNATHRSET_3_REF_0_LNA_1_THRSET_0_DB_RST    0x17
#define RIU_RWNXAGCLNATHRSET_3_REF_0_LNA_0_THRSET_0_DB_RST    0xC

static inline void riu_rwnxagclnathrset_3_ref_0_pack(struct cl_chip *chip, u8 lna3_thrset0_db, u8 lna2_thrset0_db, u8 lna1_thrset0_db, u8 lna0_thrset0_db)
{
	ASSERT_ERR_CHIP((((u32)lna3_thrset0_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna2_thrset0_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna1_thrset0_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna0_thrset0_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR, ((u32)lna3_thrset0_db << 24) | ((u32)lna2_thrset0_db << 16) | ((u32)lna1_thrset0_db << 8) | ((u32)lna0_thrset0_db << 0));
}

static inline void riu_rwnxagclnathrset_3_ref_0_unpack(struct cl_chip *chip, u8 *lna3_thrset0_db, u8 *lna2_thrset0_db, u8 *lna1_thrset0_db, u8 *lna0_thrset0_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR);

	*lna3_thrset0_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna2_thrset0_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna1_thrset0_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna0_thrset0_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_3_ref_0_lna_3_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_3_ref_0_lna_3_thrset_0_db_setf(struct cl_chip *chip, u8 lna3thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna3thrset0db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR) & ~((u32)0xFF000000)) | ((u32)lna3thrset0db << 24));
}

static inline u8 riu_rwnxagclnathrset_3_ref_0_lna_2_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_3_ref_0_lna_2_thrset_0_db_setf(struct cl_chip *chip, u8 lna2thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna2thrset0db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna2thrset0db << 16));
}

static inline u8 riu_rwnxagclnathrset_3_ref_0_lna_1_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_3_ref_0_lna_1_thrset_0_db_setf(struct cl_chip *chip, u8 lna1thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna1thrset0db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna1thrset0db << 8));
}

static inline u8 riu_rwnxagclnathrset_3_ref_0_lna_0_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_3_ref_0_lna_0_thrset_0_db_setf(struct cl_chip *chip, u8 lna0thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna0thrset0db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_0_ADDR) & ~((u32)0x000000FF)) | ((u32)lna0thrset0db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_3_REF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA7_THRSET0_DB           0x3a
 *    23:16 LNA6_THRSET0_DB           0x3a
 *    15:08 LNA5_THRSET0_DB           0x3A
 *    07:00 LNA4_THRSET0_DB           0x2F
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR        (REG_RIU_BASE_ADDR + 0x000005C4)
#define RIU_RWNXAGCLNATHRSET_3_REF_1_OFFSET      0x000005C4
#define RIU_RWNXAGCLNATHRSET_3_REF_1_INDEX       0x00000171
#define RIU_RWNXAGCLNATHRSET_3_REF_1_RESET       0x3A3A3A2F

static inline u32 riu_rwnxagclnathrset_3_ref_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR);
}

static inline void riu_rwnxagclnathrset_3_ref_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_3_REF_1_LNA_7_THRSET_0_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_3_REF_1_LNA_7_THRSET_0_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_3_REF_1_LNA_7_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_3_REF_1_LNA_6_THRSET_0_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_3_REF_1_LNA_6_THRSET_0_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_3_REF_1_LNA_6_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_3_REF_1_LNA_5_THRSET_0_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_3_REF_1_LNA_5_THRSET_0_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_3_REF_1_LNA_5_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_3_REF_1_LNA_4_THRSET_0_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_3_REF_1_LNA_4_THRSET_0_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_3_REF_1_LNA_4_THRSET_0_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_3_REF_1_LNA_7_THRSET_0_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_3_REF_1_LNA_6_THRSET_0_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_3_REF_1_LNA_5_THRSET_0_DB_RST    0x3A
#define RIU_RWNXAGCLNATHRSET_3_REF_1_LNA_4_THRSET_0_DB_RST    0x2F

static inline void riu_rwnxagclnathrset_3_ref_1_pack(struct cl_chip *chip, u8 lna7_thrset0_db, u8 lna6_thrset0_db, u8 lna5_thrset0_db, u8 lna4_thrset0_db)
{
	ASSERT_ERR_CHIP((((u32)lna7_thrset0_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna6_thrset0_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna5_thrset0_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna4_thrset0_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR, ((u32)lna7_thrset0_db << 24) | ((u32)lna6_thrset0_db << 16) | ((u32)lna5_thrset0_db << 8) | ((u32)lna4_thrset0_db << 0));
}

static inline void riu_rwnxagclnathrset_3_ref_1_unpack(struct cl_chip *chip, u8 *lna7_thrset0_db, u8 *lna6_thrset0_db, u8 *lna5_thrset0_db, u8 *lna4_thrset0_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR);

	*lna7_thrset0_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna6_thrset0_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna5_thrset0_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna4_thrset0_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_3_ref_1_lna_7_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_3_ref_1_lna_7_thrset_0_db_setf(struct cl_chip *chip, u8 lna7thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna7thrset0db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR) & ~((u32)0xFF000000)) | ((u32)lna7thrset0db << 24));
}

static inline u8 riu_rwnxagclnathrset_3_ref_1_lna_6_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_3_ref_1_lna_6_thrset_0_db_setf(struct cl_chip *chip, u8 lna6thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna6thrset0db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna6thrset0db << 16));
}

static inline u8 riu_rwnxagclnathrset_3_ref_1_lna_5_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_3_ref_1_lna_5_thrset_0_db_setf(struct cl_chip *chip, u8 lna5thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna5thrset0db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna5thrset0db << 8));
}

static inline u8 riu_rwnxagclnathrset_3_ref_1_lna_4_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_3_ref_1_lna_4_thrset_0_db_setf(struct cl_chip *chip, u8 lna4thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna4thrset0db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_1_ADDR) & ~((u32)0x000000FF)) | ((u32)lna4thrset0db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_3_REF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA11_THRSET0_DB          0x3a
 *    23:16 LNA10_THRSET0_DB          0x3a
 *    15:08 LNA9_THRSET0_DB           0x3a
 *    07:00 LNA8_THRSET0_DB           0x3a
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR        (REG_RIU_BASE_ADDR + 0x000005C8)
#define RIU_RWNXAGCLNATHRSET_3_REF_2_OFFSET      0x000005C8
#define RIU_RWNXAGCLNATHRSET_3_REF_2_INDEX       0x00000172
#define RIU_RWNXAGCLNATHRSET_3_REF_2_RESET       0x3A3A3A3A

static inline u32 riu_rwnxagclnathrset_3_ref_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR);
}

static inline void riu_rwnxagclnathrset_3_ref_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_3_REF_2_LNA_11_THRSET_0_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_3_REF_2_LNA_11_THRSET_0_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_3_REF_2_LNA_11_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_3_REF_2_LNA_10_THRSET_0_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_3_REF_2_LNA_10_THRSET_0_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_3_REF_2_LNA_10_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_3_REF_2_LNA_9_THRSET_0_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_3_REF_2_LNA_9_THRSET_0_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_3_REF_2_LNA_9_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_3_REF_2_LNA_8_THRSET_0_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_3_REF_2_LNA_8_THRSET_0_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_3_REF_2_LNA_8_THRSET_0_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_3_REF_2_LNA_11_THRSET_0_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_3_REF_2_LNA_10_THRSET_0_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_3_REF_2_LNA_9_THRSET_0_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_3_REF_2_LNA_8_THRSET_0_DB_RST    0x3a

static inline void riu_rwnxagclnathrset_3_ref_2_pack(struct cl_chip *chip, u8 lna11_thrset0_db, u8 lna10_thrset0_db, u8 lna9_thrset0_db, u8 lna8_thrset0_db)
{
	ASSERT_ERR_CHIP((((u32)lna11_thrset0_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna10_thrset0_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna9_thrset0_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna8_thrset0_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR, ((u32)lna11_thrset0_db << 24) | ((u32)lna10_thrset0_db << 16) | ((u32)lna9_thrset0_db << 8) | ((u32)lna8_thrset0_db << 0));
}

static inline void riu_rwnxagclnathrset_3_ref_2_unpack(struct cl_chip *chip, u8 *lna11_thrset0_db, u8 *lna10_thrset0_db, u8 *lna9_thrset0_db, u8 *lna8_thrset0_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR);

	*lna11_thrset0_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna10_thrset0_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna9_thrset0_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna8_thrset0_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_3_ref_2_lna_11_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_3_ref_2_lna_11_thrset_0_db_setf(struct cl_chip *chip, u8 lna11thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna11thrset0db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR) & ~((u32)0xFF000000)) | ((u32)lna11thrset0db << 24));
}

static inline u8 riu_rwnxagclnathrset_3_ref_2_lna_10_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_3_ref_2_lna_10_thrset_0_db_setf(struct cl_chip *chip, u8 lna10thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna10thrset0db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna10thrset0db << 16));
}

static inline u8 riu_rwnxagclnathrset_3_ref_2_lna_9_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_3_ref_2_lna_9_thrset_0_db_setf(struct cl_chip *chip, u8 lna9thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna9thrset0db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna9thrset0db << 8));
}

static inline u8 riu_rwnxagclnathrset_3_ref_2_lna_8_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_3_ref_2_lna_8_thrset_0_db_setf(struct cl_chip *chip, u8 lna8thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna8thrset0db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_2_ADDR) & ~((u32)0x000000FF)) | ((u32)lna8thrset0db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_3_REF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:16 LNA14_THRSET0_DB          0x3a
 *    15:08 LNA13_THRSET0_DB          0x3a
 *    07:00 LNA12_THRSET0_DB          0x3a
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_3_REF_3_ADDR        (REG_RIU_BASE_ADDR + 0x000005CC)
#define RIU_RWNXAGCLNATHRSET_3_REF_3_OFFSET      0x000005CC
#define RIU_RWNXAGCLNATHRSET_3_REF_3_INDEX       0x00000173
#define RIU_RWNXAGCLNATHRSET_3_REF_3_RESET       0x003A3A3A

static inline u32 riu_rwnxagclnathrset_3_ref_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_3_ADDR);
}

static inline void riu_rwnxagclnathrset_3_ref_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_3_REF_3_LNA_14_THRSET_0_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_3_REF_3_LNA_14_THRSET_0_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_3_REF_3_LNA_14_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_3_REF_3_LNA_13_THRSET_0_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_3_REF_3_LNA_13_THRSET_0_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_3_REF_3_LNA_13_THRSET_0_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_3_REF_3_LNA_12_THRSET_0_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_3_REF_3_LNA_12_THRSET_0_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_3_REF_3_LNA_12_THRSET_0_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_3_REF_3_LNA_14_THRSET_0_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_3_REF_3_LNA_13_THRSET_0_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_3_REF_3_LNA_12_THRSET_0_DB_RST    0x3a

static inline void riu_rwnxagclnathrset_3_ref_3_pack(struct cl_chip *chip, u8 lna14_thrset0_db, u8 lna13_thrset0_db, u8 lna12_thrset0_db)
{
	ASSERT_ERR_CHIP((((u32)lna14_thrset0_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna13_thrset0_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna12_thrset0_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_3_ADDR, ((u32)lna14_thrset0_db << 16) | ((u32)lna13_thrset0_db << 8) | ((u32)lna12_thrset0_db << 0));
}

static inline void riu_rwnxagclnathrset_3_ref_3_unpack(struct cl_chip *chip, u8 *lna14_thrset0_db, u8 *lna13_thrset0_db, u8 *lna12_thrset0_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_3_ADDR);

	*lna14_thrset0_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna13_thrset0_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna12_thrset0_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_3_ref_3_lna_14_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_3_ref_3_lna_14_thrset_0_db_setf(struct cl_chip *chip, u8 lna14thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna14thrset0db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_3_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna14thrset0db << 16));
}

static inline u8 riu_rwnxagclnathrset_3_ref_3_lna_13_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_3_ref_3_lna_13_thrset_0_db_setf(struct cl_chip *chip, u8 lna13thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna13thrset0db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_3_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna13thrset0db << 8));
}

static inline u8 riu_rwnxagclnathrset_3_ref_3_lna_12_thrset_0_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_3_ref_3_lna_12_thrset_0_db_setf(struct cl_chip *chip, u8 lna12thrset0db)
{
	ASSERT_ERR_CHIP((((u32)lna12thrset0db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_3_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_3_REF_3_ADDR) & ~((u32)0x000000FF)) | ((u32)lna12thrset0db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_4_REF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA3_THRSET1_DB           0x31
 *    23:16 LNA2_THRSET1_DB           0x2B
 *    15:08 LNA1_THRSET1_DB           0x1C
 *    07:00 LNA0_THRSET1_DB           0x11
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR        (REG_RIU_BASE_ADDR + 0x000005D0)
#define RIU_RWNXAGCLNATHRSET_4_REF_0_OFFSET      0x000005D0
#define RIU_RWNXAGCLNATHRSET_4_REF_0_INDEX       0x00000174
#define RIU_RWNXAGCLNATHRSET_4_REF_0_RESET       0x312B1C11

static inline u32 riu_rwnxagclnathrset_4_ref_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR);
}

static inline void riu_rwnxagclnathrset_4_ref_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_4_REF_0_LNA_3_THRSET_1_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_4_REF_0_LNA_3_THRSET_1_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_4_REF_0_LNA_3_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_4_REF_0_LNA_2_THRSET_1_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_4_REF_0_LNA_2_THRSET_1_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_4_REF_0_LNA_2_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_4_REF_0_LNA_1_THRSET_1_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_4_REF_0_LNA_1_THRSET_1_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_4_REF_0_LNA_1_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_4_REF_0_LNA_0_THRSET_1_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_4_REF_0_LNA_0_THRSET_1_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_4_REF_0_LNA_0_THRSET_1_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_4_REF_0_LNA_3_THRSET_1_DB_RST    0x31
#define RIU_RWNXAGCLNATHRSET_4_REF_0_LNA_2_THRSET_1_DB_RST    0x2B
#define RIU_RWNXAGCLNATHRSET_4_REF_0_LNA_1_THRSET_1_DB_RST    0x1C
#define RIU_RWNXAGCLNATHRSET_4_REF_0_LNA_0_THRSET_1_DB_RST    0x11

static inline void riu_rwnxagclnathrset_4_ref_0_pack(struct cl_chip *chip, u8 lna3_thrset1_db, u8 lna2_thrset1_db, u8 lna1_thrset1_db, u8 lna0_thrset1_db)
{
	ASSERT_ERR_CHIP((((u32)lna3_thrset1_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna2_thrset1_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna1_thrset1_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna0_thrset1_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR, ((u32)lna3_thrset1_db << 24) | ((u32)lna2_thrset1_db << 16) | ((u32)lna1_thrset1_db << 8) | ((u32)lna0_thrset1_db << 0));
}

static inline void riu_rwnxagclnathrset_4_ref_0_unpack(struct cl_chip *chip, u8 *lna3_thrset1_db, u8 *lna2_thrset1_db, u8 *lna1_thrset1_db, u8 *lna0_thrset1_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR);

	*lna3_thrset1_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna2_thrset1_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna1_thrset1_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna0_thrset1_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_4_ref_0_lna_3_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_4_ref_0_lna_3_thrset_1_db_setf(struct cl_chip *chip, u8 lna3thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna3thrset1db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR) & ~((u32)0xFF000000)) | ((u32)lna3thrset1db << 24));
}

static inline u8 riu_rwnxagclnathrset_4_ref_0_lna_2_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_4_ref_0_lna_2_thrset_1_db_setf(struct cl_chip *chip, u8 lna2thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna2thrset1db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna2thrset1db << 16));
}

static inline u8 riu_rwnxagclnathrset_4_ref_0_lna_1_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_4_ref_0_lna_1_thrset_1_db_setf(struct cl_chip *chip, u8 lna1thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna1thrset1db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna1thrset1db << 8));
}

static inline u8 riu_rwnxagclnathrset_4_ref_0_lna_0_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_4_ref_0_lna_0_thrset_1_db_setf(struct cl_chip *chip, u8 lna0thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna0thrset1db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_0_ADDR) & ~((u32)0x000000FF)) | ((u32)lna0thrset1db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_4_REF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA7_THRSET1_DB           0x4b
 *    23:16 LNA6_THRSET1_DB           0x4b
 *    15:08 LNA5_THRSET1_DB           0x4B
 *    07:00 LNA4_THRSET1_DB           0x46
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR        (REG_RIU_BASE_ADDR + 0x000005D4)
#define RIU_RWNXAGCLNATHRSET_4_REF_1_OFFSET      0x000005D4
#define RIU_RWNXAGCLNATHRSET_4_REF_1_INDEX       0x00000175
#define RIU_RWNXAGCLNATHRSET_4_REF_1_RESET       0x4B4B4B46

static inline u32 riu_rwnxagclnathrset_4_ref_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR);
}

static inline void riu_rwnxagclnathrset_4_ref_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_4_REF_1_LNA_7_THRSET_1_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_4_REF_1_LNA_7_THRSET_1_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_4_REF_1_LNA_7_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_4_REF_1_LNA_6_THRSET_1_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_4_REF_1_LNA_6_THRSET_1_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_4_REF_1_LNA_6_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_4_REF_1_LNA_5_THRSET_1_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_4_REF_1_LNA_5_THRSET_1_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_4_REF_1_LNA_5_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_4_REF_1_LNA_4_THRSET_1_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_4_REF_1_LNA_4_THRSET_1_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_4_REF_1_LNA_4_THRSET_1_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_4_REF_1_LNA_7_THRSET_1_DB_RST    0x4b
#define RIU_RWNXAGCLNATHRSET_4_REF_1_LNA_6_THRSET_1_DB_RST    0x4b
#define RIU_RWNXAGCLNATHRSET_4_REF_1_LNA_5_THRSET_1_DB_RST    0x4B
#define RIU_RWNXAGCLNATHRSET_4_REF_1_LNA_4_THRSET_1_DB_RST    0x46

static inline void riu_rwnxagclnathrset_4_ref_1_pack(struct cl_chip *chip, u8 lna7_thrset1_db, u8 lna6_thrset1_db, u8 lna5_thrset1_db, u8 lna4_thrset1_db)
{
	ASSERT_ERR_CHIP((((u32)lna7_thrset1_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna6_thrset1_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna5_thrset1_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna4_thrset1_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR, ((u32)lna7_thrset1_db << 24) | ((u32)lna6_thrset1_db << 16) | ((u32)lna5_thrset1_db << 8) | ((u32)lna4_thrset1_db << 0));
}

static inline void riu_rwnxagclnathrset_4_ref_1_unpack(struct cl_chip *chip, u8 *lna7_thrset1_db, u8 *lna6_thrset1_db, u8 *lna5_thrset1_db, u8 *lna4_thrset1_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR);

	*lna7_thrset1_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna6_thrset1_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna5_thrset1_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna4_thrset1_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_4_ref_1_lna_7_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_4_ref_1_lna_7_thrset_1_db_setf(struct cl_chip *chip, u8 lna7thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna7thrset1db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR) & ~((u32)0xFF000000)) | ((u32)lna7thrset1db << 24));
}

static inline u8 riu_rwnxagclnathrset_4_ref_1_lna_6_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_4_ref_1_lna_6_thrset_1_db_setf(struct cl_chip *chip, u8 lna6thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna6thrset1db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna6thrset1db << 16));
}

static inline u8 riu_rwnxagclnathrset_4_ref_1_lna_5_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_4_ref_1_lna_5_thrset_1_db_setf(struct cl_chip *chip, u8 lna5thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna5thrset1db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna5thrset1db << 8));
}

static inline u8 riu_rwnxagclnathrset_4_ref_1_lna_4_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_4_ref_1_lna_4_thrset_1_db_setf(struct cl_chip *chip, u8 lna4thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna4thrset1db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_1_ADDR) & ~((u32)0x000000FF)) | ((u32)lna4thrset1db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_4_REF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA11_THRSET1_DB          0x3a
 *    23:16 LNA10_THRSET1_DB          0x3a
 *    15:08 LNA9_THRSET1_DB           0x3a
 *    07:00 LNA8_THRSET1_DB           0x3a
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR        (REG_RIU_BASE_ADDR + 0x000005D8)
#define RIU_RWNXAGCLNATHRSET_4_REF_2_OFFSET      0x000005D8
#define RIU_RWNXAGCLNATHRSET_4_REF_2_INDEX       0x00000176
#define RIU_RWNXAGCLNATHRSET_4_REF_2_RESET       0x3A3A3A3A

static inline u32 riu_rwnxagclnathrset_4_ref_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR);
}

static inline void riu_rwnxagclnathrset_4_ref_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_4_REF_2_LNA_11_THRSET_1_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_4_REF_2_LNA_11_THRSET_1_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_4_REF_2_LNA_11_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_4_REF_2_LNA_10_THRSET_1_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_4_REF_2_LNA_10_THRSET_1_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_4_REF_2_LNA_10_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_4_REF_2_LNA_9_THRSET_1_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_4_REF_2_LNA_9_THRSET_1_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_4_REF_2_LNA_9_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_4_REF_2_LNA_8_THRSET_1_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_4_REF_2_LNA_8_THRSET_1_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_4_REF_2_LNA_8_THRSET_1_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_4_REF_2_LNA_11_THRSET_1_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_4_REF_2_LNA_10_THRSET_1_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_4_REF_2_LNA_9_THRSET_1_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_4_REF_2_LNA_8_THRSET_1_DB_RST    0x3a

static inline void riu_rwnxagclnathrset_4_ref_2_pack(struct cl_chip *chip, u8 lna11_thrset1_db, u8 lna10_thrset1_db, u8 lna9_thrset1_db, u8 lna8_thrset1_db)
{
	ASSERT_ERR_CHIP((((u32)lna11_thrset1_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna10_thrset1_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna9_thrset1_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna8_thrset1_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR, ((u32)lna11_thrset1_db << 24) | ((u32)lna10_thrset1_db << 16) | ((u32)lna9_thrset1_db << 8) | ((u32)lna8_thrset1_db << 0));
}

static inline void riu_rwnxagclnathrset_4_ref_2_unpack(struct cl_chip *chip, u8 *lna11_thrset1_db, u8 *lna10_thrset1_db, u8 *lna9_thrset1_db, u8 *lna8_thrset1_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR);

	*lna11_thrset1_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna10_thrset1_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna9_thrset1_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna8_thrset1_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_4_ref_2_lna_11_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_4_ref_2_lna_11_thrset_1_db_setf(struct cl_chip *chip, u8 lna11thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna11thrset1db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR) & ~((u32)0xFF000000)) | ((u32)lna11thrset1db << 24));
}

static inline u8 riu_rwnxagclnathrset_4_ref_2_lna_10_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_4_ref_2_lna_10_thrset_1_db_setf(struct cl_chip *chip, u8 lna10thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna10thrset1db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna10thrset1db << 16));
}

static inline u8 riu_rwnxagclnathrset_4_ref_2_lna_9_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_4_ref_2_lna_9_thrset_1_db_setf(struct cl_chip *chip, u8 lna9thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna9thrset1db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna9thrset1db << 8));
}

static inline u8 riu_rwnxagclnathrset_4_ref_2_lna_8_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_4_ref_2_lna_8_thrset_1_db_setf(struct cl_chip *chip, u8 lna8thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna8thrset1db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_2_ADDR) & ~((u32)0x000000FF)) | ((u32)lna8thrset1db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_4_REF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:16 LNA14_THRSET1_DB          0x3a
 *    15:08 LNA13_THRSET1_DB          0x3a
 *    07:00 LNA12_THRSET1_DB          0x3a
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_4_REF_3_ADDR        (REG_RIU_BASE_ADDR + 0x000005DC)
#define RIU_RWNXAGCLNATHRSET_4_REF_3_OFFSET      0x000005DC
#define RIU_RWNXAGCLNATHRSET_4_REF_3_INDEX       0x00000177
#define RIU_RWNXAGCLNATHRSET_4_REF_3_RESET       0x003A3A3A

static inline u32 riu_rwnxagclnathrset_4_ref_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_3_ADDR);
}

static inline void riu_rwnxagclnathrset_4_ref_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_4_REF_3_LNA_14_THRSET_1_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_4_REF_3_LNA_14_THRSET_1_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_4_REF_3_LNA_14_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_4_REF_3_LNA_13_THRSET_1_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_4_REF_3_LNA_13_THRSET_1_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_4_REF_3_LNA_13_THRSET_1_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_4_REF_3_LNA_12_THRSET_1_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_4_REF_3_LNA_12_THRSET_1_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_4_REF_3_LNA_12_THRSET_1_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_4_REF_3_LNA_14_THRSET_1_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_4_REF_3_LNA_13_THRSET_1_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_4_REF_3_LNA_12_THRSET_1_DB_RST    0x3a

static inline void riu_rwnxagclnathrset_4_ref_3_pack(struct cl_chip *chip, u8 lna14_thrset1_db, u8 lna13_thrset1_db, u8 lna12_thrset1_db)
{
	ASSERT_ERR_CHIP((((u32)lna14_thrset1_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna13_thrset1_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna12_thrset1_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_3_ADDR, ((u32)lna14_thrset1_db << 16) | ((u32)lna13_thrset1_db << 8) | ((u32)lna12_thrset1_db << 0));
}

static inline void riu_rwnxagclnathrset_4_ref_3_unpack(struct cl_chip *chip, u8 *lna14_thrset1_db, u8 *lna13_thrset1_db, u8 *lna12_thrset1_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_3_ADDR);

	*lna14_thrset1_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna13_thrset1_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna12_thrset1_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_4_ref_3_lna_14_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_4_ref_3_lna_14_thrset_1_db_setf(struct cl_chip *chip, u8 lna14thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna14thrset1db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_3_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna14thrset1db << 16));
}

static inline u8 riu_rwnxagclnathrset_4_ref_3_lna_13_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_4_ref_3_lna_13_thrset_1_db_setf(struct cl_chip *chip, u8 lna13thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna13thrset1db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_3_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna13thrset1db << 8));
}

static inline u8 riu_rwnxagclnathrset_4_ref_3_lna_12_thrset_1_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_4_ref_3_lna_12_thrset_1_db_setf(struct cl_chip *chip, u8 lna12thrset1db)
{
	ASSERT_ERR_CHIP((((u32)lna12thrset1db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_4_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_4_REF_3_ADDR) & ~((u32)0x000000FF)) | ((u32)lna12thrset1db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_5_REF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA3_THRSET2_DB           0x5F
 *    23:16 LNA2_THRSET2_DB           0x41
 *    15:08 LNA1_THRSET2_DB           0x2D
 *    07:00 LNA0_THRSET2_DB           0x11
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR        (REG_RIU_BASE_ADDR + 0x000005E0)
#define RIU_RWNXAGCLNATHRSET_5_REF_0_OFFSET      0x000005E0
#define RIU_RWNXAGCLNATHRSET_5_REF_0_INDEX       0x00000178
#define RIU_RWNXAGCLNATHRSET_5_REF_0_RESET       0x5F412D11

static inline u32 riu_rwnxagclnathrset_5_ref_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR);
}

static inline void riu_rwnxagclnathrset_5_ref_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_5_REF_0_LNA_3_THRSET_2_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_5_REF_0_LNA_3_THRSET_2_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_5_REF_0_LNA_3_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_5_REF_0_LNA_2_THRSET_2_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_5_REF_0_LNA_2_THRSET_2_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_5_REF_0_LNA_2_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_5_REF_0_LNA_1_THRSET_2_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_5_REF_0_LNA_1_THRSET_2_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_5_REF_0_LNA_1_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_5_REF_0_LNA_0_THRSET_2_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_5_REF_0_LNA_0_THRSET_2_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_5_REF_0_LNA_0_THRSET_2_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_5_REF_0_LNA_3_THRSET_2_DB_RST    0x5F
#define RIU_RWNXAGCLNATHRSET_5_REF_0_LNA_2_THRSET_2_DB_RST    0x41
#define RIU_RWNXAGCLNATHRSET_5_REF_0_LNA_1_THRSET_2_DB_RST    0x2D
#define RIU_RWNXAGCLNATHRSET_5_REF_0_LNA_0_THRSET_2_DB_RST    0x11

static inline void riu_rwnxagclnathrset_5_ref_0_pack(struct cl_chip *chip, u8 lna3_thrset2_db, u8 lna2_thrset2_db, u8 lna1_thrset2_db, u8 lna0_thrset2_db)
{
	ASSERT_ERR_CHIP((((u32)lna3_thrset2_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna2_thrset2_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna1_thrset2_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna0_thrset2_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR, ((u32)lna3_thrset2_db << 24) | ((u32)lna2_thrset2_db << 16) | ((u32)lna1_thrset2_db << 8) | ((u32)lna0_thrset2_db << 0));
}

static inline void riu_rwnxagclnathrset_5_ref_0_unpack(struct cl_chip *chip, u8 *lna3_thrset2_db, u8 *lna2_thrset2_db, u8 *lna1_thrset2_db, u8 *lna0_thrset2_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR);

	*lna3_thrset2_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna2_thrset2_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna1_thrset2_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna0_thrset2_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_5_ref_0_lna_3_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_5_ref_0_lna_3_thrset_2_db_setf(struct cl_chip *chip, u8 lna3thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna3thrset2db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR) & ~((u32)0xFF000000)) | ((u32)lna3thrset2db << 24));
}

static inline u8 riu_rwnxagclnathrset_5_ref_0_lna_2_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_5_ref_0_lna_2_thrset_2_db_setf(struct cl_chip *chip, u8 lna2thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna2thrset2db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna2thrset2db << 16));
}

static inline u8 riu_rwnxagclnathrset_5_ref_0_lna_1_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_5_ref_0_lna_1_thrset_2_db_setf(struct cl_chip *chip, u8 lna1thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna1thrset2db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna1thrset2db << 8));
}

static inline u8 riu_rwnxagclnathrset_5_ref_0_lna_0_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_5_ref_0_lna_0_thrset_2_db_setf(struct cl_chip *chip, u8 lna0thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna0thrset2db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_0_ADDR) & ~((u32)0x000000FF)) | ((u32)lna0thrset2db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_5_REF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA7_THRSET2_DB           0x5f
 *    23:16 LNA6_THRSET2_DB           0x5f
 *    15:08 LNA5_THRSET2_DB           0x5F
 *    07:00 LNA4_THRSET2_DB           0x5F
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR        (REG_RIU_BASE_ADDR + 0x000005E4)
#define RIU_RWNXAGCLNATHRSET_5_REF_1_OFFSET      0x000005E4
#define RIU_RWNXAGCLNATHRSET_5_REF_1_INDEX       0x00000179
#define RIU_RWNXAGCLNATHRSET_5_REF_1_RESET       0x5F5F5F5F

static inline u32 riu_rwnxagclnathrset_5_ref_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR);
}

static inline void riu_rwnxagclnathrset_5_ref_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_5_REF_1_LNA_7_THRSET_2_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_5_REF_1_LNA_7_THRSET_2_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_5_REF_1_LNA_7_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_5_REF_1_LNA_6_THRSET_2_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_5_REF_1_LNA_6_THRSET_2_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_5_REF_1_LNA_6_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_5_REF_1_LNA_5_THRSET_2_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_5_REF_1_LNA_5_THRSET_2_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_5_REF_1_LNA_5_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_5_REF_1_LNA_4_THRSET_2_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_5_REF_1_LNA_4_THRSET_2_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_5_REF_1_LNA_4_THRSET_2_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_5_REF_1_LNA_7_THRSET_2_DB_RST    0x5f
#define RIU_RWNXAGCLNATHRSET_5_REF_1_LNA_6_THRSET_2_DB_RST    0x5f
#define RIU_RWNXAGCLNATHRSET_5_REF_1_LNA_5_THRSET_2_DB_RST    0x5F
#define RIU_RWNXAGCLNATHRSET_5_REF_1_LNA_4_THRSET_2_DB_RST    0x5F

static inline void riu_rwnxagclnathrset_5_ref_1_pack(struct cl_chip *chip, u8 lna7_thrset2_db, u8 lna6_thrset2_db, u8 lna5_thrset2_db, u8 lna4_thrset2_db)
{
	ASSERT_ERR_CHIP((((u32)lna7_thrset2_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna6_thrset2_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna5_thrset2_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna4_thrset2_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR, ((u32)lna7_thrset2_db << 24) | ((u32)lna6_thrset2_db << 16) | ((u32)lna5_thrset2_db << 8) | ((u32)lna4_thrset2_db << 0));
}

static inline void riu_rwnxagclnathrset_5_ref_1_unpack(struct cl_chip *chip, u8 *lna7_thrset2_db, u8 *lna6_thrset2_db, u8 *lna5_thrset2_db, u8 *lna4_thrset2_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR);

	*lna7_thrset2_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna6_thrset2_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna5_thrset2_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna4_thrset2_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_5_ref_1_lna_7_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_5_ref_1_lna_7_thrset_2_db_setf(struct cl_chip *chip, u8 lna7thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna7thrset2db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR) & ~((u32)0xFF000000)) | ((u32)lna7thrset2db << 24));
}

static inline u8 riu_rwnxagclnathrset_5_ref_1_lna_6_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_5_ref_1_lna_6_thrset_2_db_setf(struct cl_chip *chip, u8 lna6thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna6thrset2db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna6thrset2db << 16));
}

static inline u8 riu_rwnxagclnathrset_5_ref_1_lna_5_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_5_ref_1_lna_5_thrset_2_db_setf(struct cl_chip *chip, u8 lna5thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna5thrset2db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna5thrset2db << 8));
}

static inline u8 riu_rwnxagclnathrset_5_ref_1_lna_4_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_5_ref_1_lna_4_thrset_2_db_setf(struct cl_chip *chip, u8 lna4thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna4thrset2db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_1_ADDR) & ~((u32)0x000000FF)) | ((u32)lna4thrset2db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_5_REF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 LNA11_THRSET2_DB          0x3a
 *    23:16 LNA10_THRSET2_DB          0x3a
 *    15:08 LNA9_THRSET2_DB           0x3a
 *    07:00 LNA8_THRSET2_DB           0x3a
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR        (REG_RIU_BASE_ADDR + 0x000005E8)
#define RIU_RWNXAGCLNATHRSET_5_REF_2_OFFSET      0x000005E8
#define RIU_RWNXAGCLNATHRSET_5_REF_2_INDEX       0x0000017A
#define RIU_RWNXAGCLNATHRSET_5_REF_2_RESET       0x3A3A3A3A

static inline u32 riu_rwnxagclnathrset_5_ref_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR);
}

static inline void riu_rwnxagclnathrset_5_ref_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_5_REF_2_LNA_11_THRSET_2_DB_MASK    ((u32)0xFF000000)
#define RIU_RWNXAGCLNATHRSET_5_REF_2_LNA_11_THRSET_2_DB_LSB    24
#define RIU_RWNXAGCLNATHRSET_5_REF_2_LNA_11_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_5_REF_2_LNA_10_THRSET_2_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_5_REF_2_LNA_10_THRSET_2_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_5_REF_2_LNA_10_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_5_REF_2_LNA_9_THRSET_2_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_5_REF_2_LNA_9_THRSET_2_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_5_REF_2_LNA_9_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_5_REF_2_LNA_8_THRSET_2_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_5_REF_2_LNA_8_THRSET_2_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_5_REF_2_LNA_8_THRSET_2_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_5_REF_2_LNA_11_THRSET_2_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_5_REF_2_LNA_10_THRSET_2_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_5_REF_2_LNA_9_THRSET_2_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_5_REF_2_LNA_8_THRSET_2_DB_RST    0x3a

static inline void riu_rwnxagclnathrset_5_ref_2_pack(struct cl_chip *chip, u8 lna11_thrset2_db, u8 lna10_thrset2_db, u8 lna9_thrset2_db, u8 lna8_thrset2_db)
{
	ASSERT_ERR_CHIP((((u32)lna11_thrset2_db << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna10_thrset2_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna9_thrset2_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna8_thrset2_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR, ((u32)lna11_thrset2_db << 24) | ((u32)lna10_thrset2_db << 16) | ((u32)lna9_thrset2_db << 8) | ((u32)lna8_thrset2_db << 0));
}

static inline void riu_rwnxagclnathrset_5_ref_2_unpack(struct cl_chip *chip, u8 *lna11_thrset2_db, u8 *lna10_thrset2_db, u8 *lna9_thrset2_db, u8 *lna8_thrset2_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR);

	*lna11_thrset2_db = (local_val & ((u32)0xFF000000)) >> 24;
	*lna10_thrset2_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna9_thrset2_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna8_thrset2_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_5_ref_2_lna_11_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_rwnxagclnathrset_5_ref_2_lna_11_thrset_2_db_setf(struct cl_chip *chip, u8 lna11thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna11thrset2db << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR) & ~((u32)0xFF000000)) | ((u32)lna11thrset2db << 24));
}

static inline u8 riu_rwnxagclnathrset_5_ref_2_lna_10_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_5_ref_2_lna_10_thrset_2_db_setf(struct cl_chip *chip, u8 lna10thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna10thrset2db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna10thrset2db << 16));
}

static inline u8 riu_rwnxagclnathrset_5_ref_2_lna_9_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_5_ref_2_lna_9_thrset_2_db_setf(struct cl_chip *chip, u8 lna9thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna9thrset2db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna9thrset2db << 8));
}

static inline u8 riu_rwnxagclnathrset_5_ref_2_lna_8_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_5_ref_2_lna_8_thrset_2_db_setf(struct cl_chip *chip, u8 lna8thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna8thrset2db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_2_ADDR) & ~((u32)0x000000FF)) | ((u32)lna8thrset2db << 0));
}

/**
 * @brief RWNXAGCLNATHRSET_5_REF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:16 LNA14_THRSET2_DB          0x3a
 *    15:08 LNA13_THRSET2_DB          0x3a
 *    07:00 LNA12_THRSET2_DB          0x3a
 * </pre>
 */
#define RIU_RWNXAGCLNATHRSET_5_REF_3_ADDR        (REG_RIU_BASE_ADDR + 0x000005EC)
#define RIU_RWNXAGCLNATHRSET_5_REF_3_OFFSET      0x000005EC
#define RIU_RWNXAGCLNATHRSET_5_REF_3_INDEX       0x0000017B
#define RIU_RWNXAGCLNATHRSET_5_REF_3_RESET       0x003A3A3A

static inline u32 riu_rwnxagclnathrset_5_ref_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_3_ADDR);
}

static inline void riu_rwnxagclnathrset_5_ref_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_3_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNATHRSET_5_REF_3_LNA_14_THRSET_2_DB_MASK    ((u32)0x00FF0000)
#define RIU_RWNXAGCLNATHRSET_5_REF_3_LNA_14_THRSET_2_DB_LSB    16
#define RIU_RWNXAGCLNATHRSET_5_REF_3_LNA_14_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_5_REF_3_LNA_13_THRSET_2_DB_MASK    ((u32)0x0000FF00)
#define RIU_RWNXAGCLNATHRSET_5_REF_3_LNA_13_THRSET_2_DB_LSB    8
#define RIU_RWNXAGCLNATHRSET_5_REF_3_LNA_13_THRSET_2_DB_WIDTH    ((u32)0x00000008)
#define RIU_RWNXAGCLNATHRSET_5_REF_3_LNA_12_THRSET_2_DB_MASK    ((u32)0x000000FF)
#define RIU_RWNXAGCLNATHRSET_5_REF_3_LNA_12_THRSET_2_DB_LSB    0
#define RIU_RWNXAGCLNATHRSET_5_REF_3_LNA_12_THRSET_2_DB_WIDTH    ((u32)0x00000008)

#define RIU_RWNXAGCLNATHRSET_5_REF_3_LNA_14_THRSET_2_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_5_REF_3_LNA_13_THRSET_2_DB_RST    0x3a
#define RIU_RWNXAGCLNATHRSET_5_REF_3_LNA_12_THRSET_2_DB_RST    0x3a

static inline void riu_rwnxagclnathrset_5_ref_3_pack(struct cl_chip *chip, u8 lna14_thrset2_db, u8 lna13_thrset2_db, u8 lna12_thrset2_db)
{
	ASSERT_ERR_CHIP((((u32)lna14_thrset2_db << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna13_thrset2_db << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)lna12_thrset2_db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_3_ADDR, ((u32)lna14_thrset2_db << 16) | ((u32)lna13_thrset2_db << 8) | ((u32)lna12_thrset2_db << 0));
}

static inline void riu_rwnxagclnathrset_5_ref_3_unpack(struct cl_chip *chip, u8 *lna14_thrset2_db, u8 *lna13_thrset2_db, u8 *lna12_thrset2_db)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_3_ADDR);

	*lna14_thrset2_db = (local_val & ((u32)0x00FF0000)) >> 16;
	*lna13_thrset2_db = (local_val & ((u32)0x0000FF00)) >> 8;
	*lna12_thrset2_db = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_rwnxagclnathrset_5_ref_3_lna_14_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxagclnathrset_5_ref_3_lna_14_thrset_2_db_setf(struct cl_chip *chip, u8 lna14thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna14thrset2db << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_3_ADDR) & ~((u32)0x00FF0000)) | ((u32)lna14thrset2db << 16));
}

static inline u8 riu_rwnxagclnathrset_5_ref_3_lna_13_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_rwnxagclnathrset_5_ref_3_lna_13_thrset_2_db_setf(struct cl_chip *chip, u8 lna13thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna13thrset2db << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_3_ADDR) & ~((u32)0x0000FF00)) | ((u32)lna13thrset2db << 8));
}

static inline u8 riu_rwnxagclnathrset_5_ref_3_lna_12_thrset_2_db_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_3_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_rwnxagclnathrset_5_ref_3_lna_12_thrset_2_db_setf(struct cl_chip *chip, u8 lna12thrset2db)
{
	ASSERT_ERR_CHIP((((u32)lna12thrset2db << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNATHRSET_5_REF_3_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNATHRSET_5_REF_3_ADDR) & ~((u32)0x000000FF)) | ((u32)lna12thrset2db << 0));
}

/**
 * @brief RWNXAGCLNAGAPSET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SDRx2                     0
 *    30:28 LNA3_MAX                  0x7
 *    22:16 SNRGAPDB                  0x7D
 *    06:00 SDRGAPDB                  0x2
 * </pre>
 */
#define RIU_RWNXAGCLNAGAPSET_1_ADDR        (REG_RIU_BASE_ADDR + 0x000005F0)
#define RIU_RWNXAGCLNAGAPSET_1_OFFSET      0x000005F0
#define RIU_RWNXAGCLNAGAPSET_1_INDEX       0x0000017C
#define RIU_RWNXAGCLNAGAPSET_1_RESET       0x707D0002

static inline u32 riu_rwnxagclnagapset_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_1_ADDR);
}

static inline void riu_rwnxagclnagapset_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCLNAGAPSET_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCLNAGAPSET_1_SDRX_2_BIT    ((u32)0x80000000)
#define RIU_RWNXAGCLNAGAPSET_1_SDRX_2_POS    31
#define RIU_RWNXAGCLNAGAPSET_1_LNA_3_MAX_MASK    ((u32)0x70000000)
#define RIU_RWNXAGCLNAGAPSET_1_LNA_3_MAX_LSB    28
#define RIU_RWNXAGCLNAGAPSET_1_LNA_3_MAX_WIDTH    ((u32)0x00000003)
#define RIU_RWNXAGCLNAGAPSET_1_SNRGAPDB_MASK    ((u32)0x007F0000)
#define RIU_RWNXAGCLNAGAPSET_1_SNRGAPDB_LSB    16
#define RIU_RWNXAGCLNAGAPSET_1_SNRGAPDB_WIDTH    ((u32)0x00000007)
#define RIU_RWNXAGCLNAGAPSET_1_SDRGAPDB_MASK    ((u32)0x0000007F)
#define RIU_RWNXAGCLNAGAPSET_1_SDRGAPDB_LSB    0
#define RIU_RWNXAGCLNAGAPSET_1_SDRGAPDB_WIDTH    ((u32)0x00000007)

#define RIU_RWNXAGCLNAGAPSET_1_SDRX_2_RST    0x0
#define RIU_RWNXAGCLNAGAPSET_1_LNA_3_MAX_RST    0x7
#define RIU_RWNXAGCLNAGAPSET_1_SNRGAPDB_RST    0x7D
#define RIU_RWNXAGCLNAGAPSET_1_SDRGAPDB_RST    0x2

static inline void riu_rwnxagclnagapset_1_pack(struct cl_chip *chip, u8 sdrx2, u8 lna3_max, u8 snrgapdb, u8 sdrgapdb)
{
	ASSERT_ERR_CHIP((((u32)sdrx2 << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)lna3_max << 28) & ~((u32)0x70000000)) == 0);
	ASSERT_ERR_CHIP((((u32)snrgapdb << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)sdrgapdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAPSET_1_ADDR, ((u32)sdrx2 << 31) | ((u32)lna3_max << 28) | ((u32)snrgapdb << 16) | ((u32)sdrgapdb << 0));
}

static inline void riu_rwnxagclnagapset_1_unpack(struct cl_chip *chip, u8 *sdrx2, u8 *lna3_max, u8 *snrgapdb, u8 *sdrgapdb)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_1_ADDR);

	*sdrx2 = (local_val & ((u32)0x80000000)) >> 31;
	*lna3_max = (local_val & ((u32)0x70000000)) >> 28;
	*snrgapdb = (local_val & ((u32)0x007F0000)) >> 16;
	*sdrgapdb = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxagclnagapset_1_sdrx_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_1_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_rwnxagclnagapset_1_sdrx_2_setf(struct cl_chip *chip, u8 sdrx2)
{
	ASSERT_ERR_CHIP((((u32)sdrx2 << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAPSET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_1_ADDR) & ~((u32)0x80000000)) | ((u32)sdrx2 << 31));
}

static inline u8 riu_rwnxagclnagapset_1_lna_3_max_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_1_ADDR);

	return (u8)((local_val & ((u32)0x70000000)) >> 28);
}

static inline void riu_rwnxagclnagapset_1_lna_3_max_setf(struct cl_chip *chip, u8 lna3max)
{
	ASSERT_ERR_CHIP((((u32)lna3max << 28) & ~((u32)0x70000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAPSET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_1_ADDR) & ~((u32)0x70000000)) | ((u32)lna3max << 28));
}

static inline u8 riu_rwnxagclnagapset_1_snrgapdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_1_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxagclnagapset_1_snrgapdb_setf(struct cl_chip *chip, u8 snrgapdb)
{
	ASSERT_ERR_CHIP((((u32)snrgapdb << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAPSET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_1_ADDR) & ~((u32)0x007F0000)) | ((u32)snrgapdb << 16));
}

static inline u8 riu_rwnxagclnagapset_1_sdrgapdb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_1_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxagclnagapset_1_sdrgapdb_setf(struct cl_chip *chip, u8 sdrgapdb)
{
	ASSERT_ERR_CHIP((((u32)sdrgapdb << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCLNAGAPSET_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCLNAGAPSET_1_ADDR) & ~((u32)0x0000007F)) | ((u32)sdrgapdb << 0));
}

/**
 * @brief DIGGAININBDDIFFTABLE_01 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    22:12 Dig_Gain_Inbd_Diff_Table1 0x10
 *    10:00 Dig_Gain_Inbd_Diff_Table0 0x4
 * </pre>
 */
#define RIU_DIGGAININBDDIFFTABLE_01_ADDR        (REG_RIU_BASE_ADDR + 0x000005F4)
#define RIU_DIGGAININBDDIFFTABLE_01_OFFSET      0x000005F4
#define RIU_DIGGAININBDDIFFTABLE_01_INDEX       0x0000017D
#define RIU_DIGGAININBDDIFFTABLE_01_RESET       0x00010004

static inline u32 riu_diggaininbddifftable_01_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DIGGAININBDDIFFTABLE_01_ADDR);
}

static inline void riu_diggaininbddifftable_01_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_DIGGAININBDDIFFTABLE_01_ADDR, value);
}

/* Field definitions */
#define RIU_DIGGAININBDDIFFTABLE_01_DIG_GAIN_INBD_DIFF_TABLE_1_MASK    ((u32)0x007FF000)
#define RIU_DIGGAININBDDIFFTABLE_01_DIG_GAIN_INBD_DIFF_TABLE_1_LSB    12
#define RIU_DIGGAININBDDIFFTABLE_01_DIG_GAIN_INBD_DIFF_TABLE_1_WIDTH    ((u32)0x0000000B)
#define RIU_DIGGAININBDDIFFTABLE_01_DIG_GAIN_INBD_DIFF_TABLE_0_MASK    ((u32)0x000007FF)
#define RIU_DIGGAININBDDIFFTABLE_01_DIG_GAIN_INBD_DIFF_TABLE_0_LSB    0
#define RIU_DIGGAININBDDIFFTABLE_01_DIG_GAIN_INBD_DIFF_TABLE_0_WIDTH    ((u32)0x0000000B)

#define RIU_DIGGAININBDDIFFTABLE_01_DIG_GAIN_INBD_DIFF_TABLE_1_RST    0x10
#define RIU_DIGGAININBDDIFFTABLE_01_DIG_GAIN_INBD_DIFF_TABLE_0_RST    0x4

static inline void riu_diggaininbddifftable_01_pack(struct cl_chip *chip, u16 dig_gain_inbd_diff_table1, u16 dig_gain_inbd_diff_table0)
{
	ASSERT_ERR_CHIP((((u32)dig_gain_inbd_diff_table1 << 12) & ~((u32)0x007FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)dig_gain_inbd_diff_table0 << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_DIGGAININBDDIFFTABLE_01_ADDR, ((u32)dig_gain_inbd_diff_table1 << 12) | ((u32)dig_gain_inbd_diff_table0 << 0));
}

static inline void riu_diggaininbddifftable_01_unpack(struct cl_chip *chip, u16 *dig_gain_inbd_diff_table1, u16 *dig_gain_inbd_diff_table0)
{
	u32 local_val = cl_reg_read(chip, RIU_DIGGAININBDDIFFTABLE_01_ADDR);

	*dig_gain_inbd_diff_table1 = (local_val & ((u32)0x007FF000)) >> 12;
	*dig_gain_inbd_diff_table0 = (local_val & ((u32)0x000007FF)) >> 0;
}

static inline u16 riu_diggaininbddifftable_01_dig_gain_inbd_diff_table_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DIGGAININBDDIFFTABLE_01_ADDR);

	return (u16)((local_val & ((u32)0x007FF000)) >> 12);
}

static inline void riu_diggaininbddifftable_01_dig_gain_inbd_diff_table_1_setf(struct cl_chip *chip, u16 diggaininbddifftable1)
{
	ASSERT_ERR_CHIP((((u32)diggaininbddifftable1 << 12) & ~((u32)0x007FF000)) == 0);
	cl_reg_write(chip, RIU_DIGGAININBDDIFFTABLE_01_ADDR, (cl_reg_read(chip, RIU_DIGGAININBDDIFFTABLE_01_ADDR) & ~((u32)0x007FF000)) | ((u32)diggaininbddifftable1 << 12));
}

static inline u16 riu_diggaininbddifftable_01_dig_gain_inbd_diff_table_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DIGGAININBDDIFFTABLE_01_ADDR);

	return (u16)((local_val & ((u32)0x000007FF)) >> 0);
}

static inline void riu_diggaininbddifftable_01_dig_gain_inbd_diff_table_0_setf(struct cl_chip *chip, u16 diggaininbddifftable0)
{
	ASSERT_ERR_CHIP((((u32)diggaininbddifftable0 << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_DIGGAININBDDIFFTABLE_01_ADDR, (cl_reg_read(chip, RIU_DIGGAININBDDIFFTABLE_01_ADDR) & ~((u32)0x000007FF)) | ((u32)diggaininbddifftable0 << 0));
}

/**
 * @brief DIGGAININBDDIFFTABLE_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    10:00 Dig_Gain_Inbd_Diff_Table2 0x24
 * </pre>
 */
#define RIU_DIGGAININBDDIFFTABLE_2_ADDR        (REG_RIU_BASE_ADDR + 0x000005F8)
#define RIU_DIGGAININBDDIFFTABLE_2_OFFSET      0x000005F8
#define RIU_DIGGAININBDDIFFTABLE_2_INDEX       0x0000017E
#define RIU_DIGGAININBDDIFFTABLE_2_RESET       0x00000024

static inline u32 riu_diggaininbddifftable_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DIGGAININBDDIFFTABLE_2_ADDR);
}

static inline void riu_diggaininbddifftable_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_DIGGAININBDDIFFTABLE_2_ADDR, value);
}

/* Field definitions */
#define RIU_DIGGAININBDDIFFTABLE_2_DIG_GAIN_INBD_DIFF_TABLE_2_MASK    ((u32)0x000007FF)
#define RIU_DIGGAININBDDIFFTABLE_2_DIG_GAIN_INBD_DIFF_TABLE_2_LSB    0
#define RIU_DIGGAININBDDIFFTABLE_2_DIG_GAIN_INBD_DIFF_TABLE_2_WIDTH    ((u32)0x0000000B)

#define RIU_DIGGAININBDDIFFTABLE_2_DIG_GAIN_INBD_DIFF_TABLE_2_RST    0x24

static inline u16 riu_diggaininbddifftable_2_dig_gain_inbd_diff_table_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DIGGAININBDDIFFTABLE_2_ADDR);

	return (u16)(local_val >> 0);
}

static inline void riu_diggaininbddifftable_2_dig_gain_inbd_diff_table_2_setf(struct cl_chip *chip, u16 diggaininbddifftable2)
{
	ASSERT_ERR_CHIP((((u32)diggaininbddifftable2 << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_DIGGAININBDDIFFTABLE_2_ADDR, (u32)diggaininbddifftable2 << 0);
}

/**
 * @brief RWNXAGCACIMARGLATE register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 ACI160_MARGLATE           0x0
 *    21:16 ACI80_MARGLATE            0x0
 *    13:08 ACI40_MARGLATE            0x0
 *    05:00 ACI20_MARGLATE            0x0
 * </pre>
 */
#define RIU_RWNXAGCACIMARGLATE_ADDR        (REG_RIU_BASE_ADDR + 0x00000600)
#define RIU_RWNXAGCACIMARGLATE_OFFSET      0x00000600
#define RIU_RWNXAGCACIMARGLATE_INDEX       0x00000180
#define RIU_RWNXAGCACIMARGLATE_RESET       0x00000000

static inline u32 riu_rwnxagcacimarglate_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCACIMARGLATE_ADDR);
}

static inline void riu_rwnxagcacimarglate_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCACIMARGLATE_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCACIMARGLATE_ACI_160_MARGLATE_MASK    ((u32)0x3F000000)
#define RIU_RWNXAGCACIMARGLATE_ACI_160_MARGLATE_LSB    24
#define RIU_RWNXAGCACIMARGLATE_ACI_160_MARGLATE_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACIMARGLATE_ACI_80_MARGLATE_MASK    ((u32)0x003F0000)
#define RIU_RWNXAGCACIMARGLATE_ACI_80_MARGLATE_LSB    16
#define RIU_RWNXAGCACIMARGLATE_ACI_80_MARGLATE_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACIMARGLATE_ACI_40_MARGLATE_MASK    ((u32)0x00003F00)
#define RIU_RWNXAGCACIMARGLATE_ACI_40_MARGLATE_LSB    8
#define RIU_RWNXAGCACIMARGLATE_ACI_40_MARGLATE_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACIMARGLATE_ACI_20_MARGLATE_MASK    ((u32)0x0000003F)
#define RIU_RWNXAGCACIMARGLATE_ACI_20_MARGLATE_LSB    0
#define RIU_RWNXAGCACIMARGLATE_ACI_20_MARGLATE_WIDTH    ((u32)0x00000006)

#define RIU_RWNXAGCACIMARGLATE_ACI_160_MARGLATE_RST    0x0
#define RIU_RWNXAGCACIMARGLATE_ACI_80_MARGLATE_RST    0x0
#define RIU_RWNXAGCACIMARGLATE_ACI_40_MARGLATE_RST    0x0
#define RIU_RWNXAGCACIMARGLATE_ACI_20_MARGLATE_RST    0x0

static inline void riu_rwnxagcacimarglate_pack(struct cl_chip *chip, u8 aci160_marglate, u8 aci80_marglate, u8 aci40_marglate, u8 aci20_marglate)
{
	ASSERT_ERR_CHIP((((u32)aci160_marglate << 24) & ~((u32)0x3F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci80_marglate << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci40_marglate << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)aci20_marglate << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACIMARGLATE_ADDR, ((u32)aci160_marglate << 24) | ((u32)aci80_marglate << 16) | ((u32)aci40_marglate << 8) | ((u32)aci20_marglate << 0));
}

static inline void riu_rwnxagcacimarglate_unpack(struct cl_chip *chip, u8 *aci160_marglate, u8 *aci80_marglate, u8 *aci40_marglate, u8 *aci20_marglate)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACIMARGLATE_ADDR);

	*aci160_marglate = (local_val & ((u32)0x3F000000)) >> 24;
	*aci80_marglate = (local_val & ((u32)0x003F0000)) >> 16;
	*aci40_marglate = (local_val & ((u32)0x00003F00)) >> 8;
	*aci20_marglate = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxagcacimarglate_aci_160_marglate_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACIMARGLATE_ADDR);

	return (u8)((local_val & ((u32)0x3F000000)) >> 24);
}

static inline void riu_rwnxagcacimarglate_aci_160_marglate_setf(struct cl_chip *chip, u8 aci160marglate)
{
	ASSERT_ERR_CHIP((((u32)aci160marglate << 24) & ~((u32)0x3F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACIMARGLATE_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACIMARGLATE_ADDR) & ~((u32)0x3F000000)) | ((u32)aci160marglate << 24));
}

static inline u8 riu_rwnxagcacimarglate_aci_80_marglate_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACIMARGLATE_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void riu_rwnxagcacimarglate_aci_80_marglate_setf(struct cl_chip *chip, u8 aci80marglate)
{
	ASSERT_ERR_CHIP((((u32)aci80marglate << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACIMARGLATE_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACIMARGLATE_ADDR) & ~((u32)0x003F0000)) | ((u32)aci80marglate << 16));
}

static inline u8 riu_rwnxagcacimarglate_aci_40_marglate_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACIMARGLATE_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_rwnxagcacimarglate_aci_40_marglate_setf(struct cl_chip *chip, u8 aci40marglate)
{
	ASSERT_ERR_CHIP((((u32)aci40marglate << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACIMARGLATE_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACIMARGLATE_ADDR) & ~((u32)0x00003F00)) | ((u32)aci40marglate << 8));
}

static inline u8 riu_rwnxagcacimarglate_aci_20_marglate_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACIMARGLATE_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxagcacimarglate_aci_20_marglate_setf(struct cl_chip *chip, u8 aci20marglate)
{
	ASSERT_ERR_CHIP((((u32)aci20marglate << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACIMARGLATE_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACIMARGLATE_ADDR) & ~((u32)0x0000003F)) | ((u32)aci20marglate << 0));
}

/**
 * @brief RWNXAGCACI_160_MARG_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 ACI160_MARGMCS3           0x0
 *    21:16 ACI160_MARGMCS2           0x0
 *    13:08 ACI160_MARGMCS1           0x0
 *    05:00 ACI160_MARGMCS0           0x0
 * </pre>
 */
#define RIU_RWNXAGCACI_160_MARG_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000604)
#define RIU_RWNXAGCACI_160_MARG_0_OFFSET      0x00000604
#define RIU_RWNXAGCACI_160_MARG_0_INDEX       0x00000181
#define RIU_RWNXAGCACI_160_MARG_0_RESET       0x00000000

static inline u32 riu_rwnxagcaci_160_marg_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_0_ADDR);
}

static inline void riu_rwnxagcaci_160_marg_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_0_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCACI_160_MARG_0_ACI_160_MARGMCS_3_MASK    ((u32)0x3F000000)
#define RIU_RWNXAGCACI_160_MARG_0_ACI_160_MARGMCS_3_LSB    24
#define RIU_RWNXAGCACI_160_MARG_0_ACI_160_MARGMCS_3_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_160_MARG_0_ACI_160_MARGMCS_2_MASK    ((u32)0x003F0000)
#define RIU_RWNXAGCACI_160_MARG_0_ACI_160_MARGMCS_2_LSB    16
#define RIU_RWNXAGCACI_160_MARG_0_ACI_160_MARGMCS_2_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_160_MARG_0_ACI_160_MARGMCS_1_MASK    ((u32)0x00003F00)
#define RIU_RWNXAGCACI_160_MARG_0_ACI_160_MARGMCS_1_LSB    8
#define RIU_RWNXAGCACI_160_MARG_0_ACI_160_MARGMCS_1_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_160_MARG_0_ACI_160_MARGMCS_0_MASK    ((u32)0x0000003F)
#define RIU_RWNXAGCACI_160_MARG_0_ACI_160_MARGMCS_0_LSB    0
#define RIU_RWNXAGCACI_160_MARG_0_ACI_160_MARGMCS_0_WIDTH    ((u32)0x00000006)

#define RIU_RWNXAGCACI_160_MARG_0_ACI_160_MARGMCS_3_RST    0x0
#define RIU_RWNXAGCACI_160_MARG_0_ACI_160_MARGMCS_2_RST    0x0
#define RIU_RWNXAGCACI_160_MARG_0_ACI_160_MARGMCS_1_RST    0x0
#define RIU_RWNXAGCACI_160_MARG_0_ACI_160_MARGMCS_0_RST    0x0

static inline void riu_rwnxagcaci_160_marg_0_pack(struct cl_chip *chip, u8 aci160_margmcs3, u8 aci160_margmcs2, u8 aci160_margmcs1, u8 aci160_margmcs0)
{
	ASSERT_ERR_CHIP((((u32)aci160_margmcs3 << 24) & ~((u32)0x3F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci160_margmcs2 << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci160_margmcs1 << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)aci160_margmcs0 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_0_ADDR, ((u32)aci160_margmcs3 << 24) | ((u32)aci160_margmcs2 << 16) | ((u32)aci160_margmcs1 << 8) | ((u32)aci160_margmcs0 << 0));
}

static inline void riu_rwnxagcaci_160_marg_0_unpack(struct cl_chip *chip, u8 *aci160_margmcs3, u8 *aci160_margmcs2, u8 *aci160_margmcs1, u8 *aci160_margmcs0)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_0_ADDR);

	*aci160_margmcs3 = (local_val & ((u32)0x3F000000)) >> 24;
	*aci160_margmcs2 = (local_val & ((u32)0x003F0000)) >> 16;
	*aci160_margmcs1 = (local_val & ((u32)0x00003F00)) >> 8;
	*aci160_margmcs0 = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxagcaci_160_marg_0_aci_160_margmcs_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_0_ADDR);

	return (u8)((local_val & ((u32)0x3F000000)) >> 24);
}

static inline void riu_rwnxagcaci_160_marg_0_aci_160_margmcs_3_setf(struct cl_chip *chip, u8 aci160margmcs3)
{
	ASSERT_ERR_CHIP((((u32)aci160margmcs3 << 24) & ~((u32)0x3F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_0_ADDR) & ~((u32)0x3F000000)) | ((u32)aci160margmcs3 << 24));
}

static inline u8 riu_rwnxagcaci_160_marg_0_aci_160_margmcs_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_0_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void riu_rwnxagcaci_160_marg_0_aci_160_margmcs_2_setf(struct cl_chip *chip, u8 aci160margmcs2)
{
	ASSERT_ERR_CHIP((((u32)aci160margmcs2 << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_0_ADDR) & ~((u32)0x003F0000)) | ((u32)aci160margmcs2 << 16));
}

static inline u8 riu_rwnxagcaci_160_marg_0_aci_160_margmcs_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_0_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_rwnxagcaci_160_marg_0_aci_160_margmcs_1_setf(struct cl_chip *chip, u8 aci160margmcs1)
{
	ASSERT_ERR_CHIP((((u32)aci160margmcs1 << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_0_ADDR) & ~((u32)0x00003F00)) | ((u32)aci160margmcs1 << 8));
}

static inline u8 riu_rwnxagcaci_160_marg_0_aci_160_margmcs_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_0_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxagcaci_160_marg_0_aci_160_margmcs_0_setf(struct cl_chip *chip, u8 aci160margmcs0)
{
	ASSERT_ERR_CHIP((((u32)aci160margmcs0 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_0_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_0_ADDR) & ~((u32)0x0000003F)) | ((u32)aci160margmcs0 << 0));
}

/**
 * @brief RWNXAGCACI_160_MARG_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 ACI160_MARGMCS7           0x0
 *    21:16 ACI160_MARGMCS6           0x0
 *    13:08 ACI160_MARGMCS5           0x0
 *    05:00 ACI160_MARGMCS4           0x0
 * </pre>
 */
#define RIU_RWNXAGCACI_160_MARG_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000608)
#define RIU_RWNXAGCACI_160_MARG_1_OFFSET      0x00000608
#define RIU_RWNXAGCACI_160_MARG_1_INDEX       0x00000182
#define RIU_RWNXAGCACI_160_MARG_1_RESET       0x00000000

static inline u32 riu_rwnxagcaci_160_marg_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_1_ADDR);
}

static inline void riu_rwnxagcaci_160_marg_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_1_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCACI_160_MARG_1_ACI_160_MARGMCS_7_MASK    ((u32)0x3F000000)
#define RIU_RWNXAGCACI_160_MARG_1_ACI_160_MARGMCS_7_LSB    24
#define RIU_RWNXAGCACI_160_MARG_1_ACI_160_MARGMCS_7_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_160_MARG_1_ACI_160_MARGMCS_6_MASK    ((u32)0x003F0000)
#define RIU_RWNXAGCACI_160_MARG_1_ACI_160_MARGMCS_6_LSB    16
#define RIU_RWNXAGCACI_160_MARG_1_ACI_160_MARGMCS_6_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_160_MARG_1_ACI_160_MARGMCS_5_MASK    ((u32)0x00003F00)
#define RIU_RWNXAGCACI_160_MARG_1_ACI_160_MARGMCS_5_LSB    8
#define RIU_RWNXAGCACI_160_MARG_1_ACI_160_MARGMCS_5_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_160_MARG_1_ACI_160_MARGMCS_4_MASK    ((u32)0x0000003F)
#define RIU_RWNXAGCACI_160_MARG_1_ACI_160_MARGMCS_4_LSB    0
#define RIU_RWNXAGCACI_160_MARG_1_ACI_160_MARGMCS_4_WIDTH    ((u32)0x00000006)

#define RIU_RWNXAGCACI_160_MARG_1_ACI_160_MARGMCS_7_RST    0x0
#define RIU_RWNXAGCACI_160_MARG_1_ACI_160_MARGMCS_6_RST    0x0
#define RIU_RWNXAGCACI_160_MARG_1_ACI_160_MARGMCS_5_RST    0x0
#define RIU_RWNXAGCACI_160_MARG_1_ACI_160_MARGMCS_4_RST    0x0

static inline void riu_rwnxagcaci_160_marg_1_pack(struct cl_chip *chip, u8 aci160_margmcs7, u8 aci160_margmcs6, u8 aci160_margmcs5, u8 aci160_margmcs4)
{
	ASSERT_ERR_CHIP((((u32)aci160_margmcs7 << 24) & ~((u32)0x3F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci160_margmcs6 << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci160_margmcs5 << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)aci160_margmcs4 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_1_ADDR, ((u32)aci160_margmcs7 << 24) | ((u32)aci160_margmcs6 << 16) | ((u32)aci160_margmcs5 << 8) | ((u32)aci160_margmcs4 << 0));
}

static inline void riu_rwnxagcaci_160_marg_1_unpack(struct cl_chip *chip, u8 *aci160_margmcs7, u8 *aci160_margmcs6, u8 *aci160_margmcs5, u8 *aci160_margmcs4)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_1_ADDR);

	*aci160_margmcs7 = (local_val & ((u32)0x3F000000)) >> 24;
	*aci160_margmcs6 = (local_val & ((u32)0x003F0000)) >> 16;
	*aci160_margmcs5 = (local_val & ((u32)0x00003F00)) >> 8;
	*aci160_margmcs4 = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxagcaci_160_marg_1_aci_160_margmcs_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_1_ADDR);

	return (u8)((local_val & ((u32)0x3F000000)) >> 24);
}

static inline void riu_rwnxagcaci_160_marg_1_aci_160_margmcs_7_setf(struct cl_chip *chip, u8 aci160margmcs7)
{
	ASSERT_ERR_CHIP((((u32)aci160margmcs7 << 24) & ~((u32)0x3F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_1_ADDR) & ~((u32)0x3F000000)) | ((u32)aci160margmcs7 << 24));
}

static inline u8 riu_rwnxagcaci_160_marg_1_aci_160_margmcs_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_1_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void riu_rwnxagcaci_160_marg_1_aci_160_margmcs_6_setf(struct cl_chip *chip, u8 aci160margmcs6)
{
	ASSERT_ERR_CHIP((((u32)aci160margmcs6 << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_1_ADDR) & ~((u32)0x003F0000)) | ((u32)aci160margmcs6 << 16));
}

static inline u8 riu_rwnxagcaci_160_marg_1_aci_160_margmcs_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_1_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_rwnxagcaci_160_marg_1_aci_160_margmcs_5_setf(struct cl_chip *chip, u8 aci160margmcs5)
{
	ASSERT_ERR_CHIP((((u32)aci160margmcs5 << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_1_ADDR) & ~((u32)0x00003F00)) | ((u32)aci160margmcs5 << 8));
}

static inline u8 riu_rwnxagcaci_160_marg_1_aci_160_margmcs_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_1_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxagcaci_160_marg_1_aci_160_margmcs_4_setf(struct cl_chip *chip, u8 aci160margmcs4)
{
	ASSERT_ERR_CHIP((((u32)aci160margmcs4 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_1_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_1_ADDR) & ~((u32)0x0000003F)) | ((u32)aci160margmcs4 << 0));
}

/**
 * @brief RWNXAGCACI_160_MARG_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 ACI160_MARGMCS11          0x0
 *    21:16 ACI160_MARGMCS10          0x0
 *    13:08 ACI160_MARGMCS9           0x0
 *    05:00 ACI160_MARGMCS8           0x0
 * </pre>
 */
#define RIU_RWNXAGCACI_160_MARG_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000060C)
#define RIU_RWNXAGCACI_160_MARG_2_OFFSET      0x0000060C
#define RIU_RWNXAGCACI_160_MARG_2_INDEX       0x00000183
#define RIU_RWNXAGCACI_160_MARG_2_RESET       0x00000000

static inline u32 riu_rwnxagcaci_160_marg_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_2_ADDR);
}

static inline void riu_rwnxagcaci_160_marg_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXAGCACI_160_MARG_2_ACI_160_MARGMCS_11_MASK    ((u32)0x3F000000)
#define RIU_RWNXAGCACI_160_MARG_2_ACI_160_MARGMCS_11_LSB    24
#define RIU_RWNXAGCACI_160_MARG_2_ACI_160_MARGMCS_11_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_160_MARG_2_ACI_160_MARGMCS_10_MASK    ((u32)0x003F0000)
#define RIU_RWNXAGCACI_160_MARG_2_ACI_160_MARGMCS_10_LSB    16
#define RIU_RWNXAGCACI_160_MARG_2_ACI_160_MARGMCS_10_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_160_MARG_2_ACI_160_MARGMCS_9_MASK    ((u32)0x00003F00)
#define RIU_RWNXAGCACI_160_MARG_2_ACI_160_MARGMCS_9_LSB    8
#define RIU_RWNXAGCACI_160_MARG_2_ACI_160_MARGMCS_9_WIDTH    ((u32)0x00000006)
#define RIU_RWNXAGCACI_160_MARG_2_ACI_160_MARGMCS_8_MASK    ((u32)0x0000003F)
#define RIU_RWNXAGCACI_160_MARG_2_ACI_160_MARGMCS_8_LSB    0
#define RIU_RWNXAGCACI_160_MARG_2_ACI_160_MARGMCS_8_WIDTH    ((u32)0x00000006)

#define RIU_RWNXAGCACI_160_MARG_2_ACI_160_MARGMCS_11_RST    0x0
#define RIU_RWNXAGCACI_160_MARG_2_ACI_160_MARGMCS_10_RST    0x0
#define RIU_RWNXAGCACI_160_MARG_2_ACI_160_MARGMCS_9_RST    0x0
#define RIU_RWNXAGCACI_160_MARG_2_ACI_160_MARGMCS_8_RST    0x0

static inline void riu_rwnxagcaci_160_marg_2_pack(struct cl_chip *chip, u8 aci160_margmcs11, u8 aci160_margmcs10, u8 aci160_margmcs9, u8 aci160_margmcs8)
{
	ASSERT_ERR_CHIP((((u32)aci160_margmcs11 << 24) & ~((u32)0x3F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci160_margmcs10 << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)aci160_margmcs9 << 8) & ~((u32)0x00003F00)) == 0);
	ASSERT_ERR_CHIP((((u32)aci160_margmcs8 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_2_ADDR, ((u32)aci160_margmcs11 << 24) | ((u32)aci160_margmcs10 << 16) | ((u32)aci160_margmcs9 << 8) | ((u32)aci160_margmcs8 << 0));
}

static inline void riu_rwnxagcaci_160_marg_2_unpack(struct cl_chip *chip, u8 *aci160_margmcs11, u8 *aci160_margmcs10, u8 *aci160_margmcs9, u8 *aci160_margmcs8)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_2_ADDR);

	*aci160_margmcs11 = (local_val & ((u32)0x3F000000)) >> 24;
	*aci160_margmcs10 = (local_val & ((u32)0x003F0000)) >> 16;
	*aci160_margmcs9 = (local_val & ((u32)0x00003F00)) >> 8;
	*aci160_margmcs8 = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 riu_rwnxagcaci_160_marg_2_aci_160_margmcs_11_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_2_ADDR);

	return (u8)((local_val & ((u32)0x3F000000)) >> 24);
}

static inline void riu_rwnxagcaci_160_marg_2_aci_160_margmcs_11_setf(struct cl_chip *chip, u8 aci160margmcs11)
{
	ASSERT_ERR_CHIP((((u32)aci160margmcs11 << 24) & ~((u32)0x3F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_2_ADDR) & ~((u32)0x3F000000)) | ((u32)aci160margmcs11 << 24));
}

static inline u8 riu_rwnxagcaci_160_marg_2_aci_160_margmcs_10_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_2_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void riu_rwnxagcaci_160_marg_2_aci_160_margmcs_10_setf(struct cl_chip *chip, u8 aci160margmcs10)
{
	ASSERT_ERR_CHIP((((u32)aci160margmcs10 << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_2_ADDR) & ~((u32)0x003F0000)) | ((u32)aci160margmcs10 << 16));
}

static inline u8 riu_rwnxagcaci_160_marg_2_aci_160_margmcs_9_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_2_ADDR);

	return (u8)((local_val & ((u32)0x00003F00)) >> 8);
}

static inline void riu_rwnxagcaci_160_marg_2_aci_160_margmcs_9_setf(struct cl_chip *chip, u8 aci160margmcs9)
{
	ASSERT_ERR_CHIP((((u32)aci160margmcs9 << 8) & ~((u32)0x00003F00)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_2_ADDR) & ~((u32)0x00003F00)) | ((u32)aci160margmcs9 << 8));
}

static inline u8 riu_rwnxagcaci_160_marg_2_aci_160_margmcs_8_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_2_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void riu_rwnxagcaci_160_marg_2_aci_160_margmcs_8_setf(struct cl_chip *chip, u8 aci160margmcs8)
{
	ASSERT_ERR_CHIP((((u32)aci160margmcs8 << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RIU_RWNXAGCACI_160_MARG_2_ADDR, (cl_reg_read(chip, RIU_RWNXAGCACI_160_MARG_2_ADDR) & ~((u32)0x0000003F)) | ((u32)aci160margmcs8 << 0));
}

/**
 * @brief HBF_SEL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:27 HBF160_SEL_TX             0x0
 *    26:24 HBF80_SEL_TX              0x0
 *    23:21 HBF80_SEL_RX_1            0x0
 *    20:18 HBF80_SEL_RX_0            0x0
 *    17:15 HBF40_SEL_TX              0x0
 *    14:12 HBF40_SEL_RX_1            0x0
 *    11:09 HBF40_SEL_RX_0            0x0
 *    08:06 HBF20_SEL_TX              0x0
 *    05:03 HBF20_SEL_RX_1            0x0
 *    02:00 HBF20_SEL_RX_0            0x0
 * </pre>
 */
#define RIU_HBF_SEL_ADDR        (REG_RIU_BASE_ADDR + 0x00000610)
#define RIU_HBF_SEL_OFFSET      0x00000610
#define RIU_HBF_SEL_INDEX       0x00000184
#define RIU_HBF_SEL_RESET       0x00000000

static inline u32 riu_hbf_sel_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_HBF_SEL_ADDR);
}

static inline void riu_hbf_sel_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_HBF_SEL_ADDR, value);
}

/* Field definitions */
#define RIU_HBF_SEL_HBF_160_SEL_TX_MASK     ((u32)0x38000000)
#define RIU_HBF_SEL_HBF_160_SEL_TX_LSB      27
#define RIU_HBF_SEL_HBF_160_SEL_TX_WIDTH    ((u32)0x00000003)
#define RIU_HBF_SEL_HBF_80_SEL_TX_MASK      ((u32)0x07000000)
#define RIU_HBF_SEL_HBF_80_SEL_TX_LSB       24
#define RIU_HBF_SEL_HBF_80_SEL_TX_WIDTH     ((u32)0x00000003)
#define RIU_HBF_SEL_HBF_80_SEL_RX_1_MASK    ((u32)0x00E00000)
#define RIU_HBF_SEL_HBF_80_SEL_RX_1_LSB     21
#define RIU_HBF_SEL_HBF_80_SEL_RX_1_WIDTH    ((u32)0x00000003)
#define RIU_HBF_SEL_HBF_80_SEL_RX_0_MASK    ((u32)0x001C0000)
#define RIU_HBF_SEL_HBF_80_SEL_RX_0_LSB     18
#define RIU_HBF_SEL_HBF_80_SEL_RX_0_WIDTH    ((u32)0x00000003)
#define RIU_HBF_SEL_HBF_40_SEL_TX_MASK      ((u32)0x00038000)
#define RIU_HBF_SEL_HBF_40_SEL_TX_LSB       15
#define RIU_HBF_SEL_HBF_40_SEL_TX_WIDTH     ((u32)0x00000003)
#define RIU_HBF_SEL_HBF_40_SEL_RX_1_MASK    ((u32)0x00007000)
#define RIU_HBF_SEL_HBF_40_SEL_RX_1_LSB     12
#define RIU_HBF_SEL_HBF_40_SEL_RX_1_WIDTH    ((u32)0x00000003)
#define RIU_HBF_SEL_HBF_40_SEL_RX_0_MASK    ((u32)0x00000E00)
#define RIU_HBF_SEL_HBF_40_SEL_RX_0_LSB     9
#define RIU_HBF_SEL_HBF_40_SEL_RX_0_WIDTH    ((u32)0x00000003)
#define RIU_HBF_SEL_HBF_20_SEL_TX_MASK      ((u32)0x000001C0)
#define RIU_HBF_SEL_HBF_20_SEL_TX_LSB       6
#define RIU_HBF_SEL_HBF_20_SEL_TX_WIDTH     ((u32)0x00000003)
#define RIU_HBF_SEL_HBF_20_SEL_RX_1_MASK    ((u32)0x00000038)
#define RIU_HBF_SEL_HBF_20_SEL_RX_1_LSB     3
#define RIU_HBF_SEL_HBF_20_SEL_RX_1_WIDTH    ((u32)0x00000003)
#define RIU_HBF_SEL_HBF_20_SEL_RX_0_MASK    ((u32)0x00000007)
#define RIU_HBF_SEL_HBF_20_SEL_RX_0_LSB     0
#define RIU_HBF_SEL_HBF_20_SEL_RX_0_WIDTH    ((u32)0x00000003)

#define RIU_HBF_SEL_HBF_160_SEL_TX_RST      0x0
#define RIU_HBF_SEL_HBF_80_SEL_TX_RST       0x0
#define RIU_HBF_SEL_HBF_80_SEL_RX_1_RST     0x0
#define RIU_HBF_SEL_HBF_80_SEL_RX_0_RST     0x0
#define RIU_HBF_SEL_HBF_40_SEL_TX_RST       0x0
#define RIU_HBF_SEL_HBF_40_SEL_RX_1_RST     0x0
#define RIU_HBF_SEL_HBF_40_SEL_RX_0_RST     0x0
#define RIU_HBF_SEL_HBF_20_SEL_TX_RST       0x0
#define RIU_HBF_SEL_HBF_20_SEL_RX_1_RST     0x0
#define RIU_HBF_SEL_HBF_20_SEL_RX_0_RST     0x0

static inline void riu_hbf_sel_pack(struct cl_chip *chip, u8 hbf160_sel_tx, u8 hbf80_sel_tx, u8 hbf80_sel_rx_1, u8 hbf80_sel_rx_0, u8 hbf40_sel_tx, u8 hbf40_sel_rx_1, u8 hbf40_sel_rx_0, u8 hbf20_sel_tx, u8 hbf20_sel_rx_1, u8 hbf20_sel_rx_0)
{
	ASSERT_ERR_CHIP((((u32)hbf160_sel_tx << 27) & ~((u32)0x38000000)) == 0);
	ASSERT_ERR_CHIP((((u32)hbf80_sel_tx << 24) & ~((u32)0x07000000)) == 0);
	ASSERT_ERR_CHIP((((u32)hbf80_sel_rx_1 << 21) & ~((u32)0x00E00000)) == 0);
	ASSERT_ERR_CHIP((((u32)hbf80_sel_rx_0 << 18) & ~((u32)0x001C0000)) == 0);
	ASSERT_ERR_CHIP((((u32)hbf40_sel_tx << 15) & ~((u32)0x00038000)) == 0);
	ASSERT_ERR_CHIP((((u32)hbf40_sel_rx_1 << 12) & ~((u32)0x00007000)) == 0);
	ASSERT_ERR_CHIP((((u32)hbf40_sel_rx_0 << 9) & ~((u32)0x00000E00)) == 0);
	ASSERT_ERR_CHIP((((u32)hbf20_sel_tx << 6) & ~((u32)0x000001C0)) == 0);
	ASSERT_ERR_CHIP((((u32)hbf20_sel_rx_1 << 3) & ~((u32)0x00000038)) == 0);
	ASSERT_ERR_CHIP((((u32)hbf20_sel_rx_0 << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RIU_HBF_SEL_ADDR, ((u32)hbf160_sel_tx << 27) | ((u32)hbf80_sel_tx << 24) | ((u32)hbf80_sel_rx_1 << 21) | ((u32)hbf80_sel_rx_0 << 18) | ((u32)hbf40_sel_tx << 15) | ((u32)hbf40_sel_rx_1 << 12) | ((u32)hbf40_sel_rx_0 << 9) | ((u32)hbf20_sel_tx << 6) | ((u32)hbf20_sel_rx_1 << 3) | ((u32)hbf20_sel_rx_0 << 0));
}

static inline void riu_hbf_sel_unpack(struct cl_chip *chip, u8 *hbf160_sel_tx, u8 *hbf80_sel_tx, u8 *hbf80_sel_rx_1, u8 *hbf80_sel_rx_0, u8 *hbf40_sel_tx, u8 *hbf40_sel_rx_1, u8 *hbf40_sel_rx_0, u8 *hbf20_sel_tx, u8 *hbf20_sel_rx_1, u8 *hbf20_sel_rx_0)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_SEL_ADDR);

	*hbf160_sel_tx = (local_val & ((u32)0x38000000)) >> 27;
	*hbf80_sel_tx = (local_val & ((u32)0x07000000)) >> 24;
	*hbf80_sel_rx_1 = (local_val & ((u32)0x00E00000)) >> 21;
	*hbf80_sel_rx_0 = (local_val & ((u32)0x001C0000)) >> 18;
	*hbf40_sel_tx = (local_val & ((u32)0x00038000)) >> 15;
	*hbf40_sel_rx_1 = (local_val & ((u32)0x00007000)) >> 12;
	*hbf40_sel_rx_0 = (local_val & ((u32)0x00000E00)) >> 9;
	*hbf20_sel_tx = (local_val & ((u32)0x000001C0)) >> 6;
	*hbf20_sel_rx_1 = (local_val & ((u32)0x00000038)) >> 3;
	*hbf20_sel_rx_0 = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 riu_hbf_sel_hbf_160_sel_tx_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_SEL_ADDR);

	return (u8)((local_val & ((u32)0x38000000)) >> 27);
}

static inline void riu_hbf_sel_hbf_160_sel_tx_setf(struct cl_chip *chip, u8 hbf160seltx)
{
	ASSERT_ERR_CHIP((((u32)hbf160seltx << 27) & ~((u32)0x38000000)) == 0);
	cl_reg_write(chip, RIU_HBF_SEL_ADDR, (cl_reg_read(chip, RIU_HBF_SEL_ADDR) & ~((u32)0x38000000)) | ((u32)hbf160seltx << 27));
}

static inline u8 riu_hbf_sel_hbf_80_sel_tx_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_SEL_ADDR);

	return (u8)((local_val & ((u32)0x07000000)) >> 24);
}

static inline void riu_hbf_sel_hbf_80_sel_tx_setf(struct cl_chip *chip, u8 hbf80seltx)
{
	ASSERT_ERR_CHIP((((u32)hbf80seltx << 24) & ~((u32)0x07000000)) == 0);
	cl_reg_write(chip, RIU_HBF_SEL_ADDR, (cl_reg_read(chip, RIU_HBF_SEL_ADDR) & ~((u32)0x07000000)) | ((u32)hbf80seltx << 24));
}

static inline u8 riu_hbf_sel_hbf_80_sel_rx_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_SEL_ADDR);

	return (u8)((local_val & ((u32)0x00E00000)) >> 21);
}

static inline void riu_hbf_sel_hbf_80_sel_rx_1_setf(struct cl_chip *chip, u8 hbf80selrx1)
{
	ASSERT_ERR_CHIP((((u32)hbf80selrx1 << 21) & ~((u32)0x00E00000)) == 0);
	cl_reg_write(chip, RIU_HBF_SEL_ADDR, (cl_reg_read(chip, RIU_HBF_SEL_ADDR) & ~((u32)0x00E00000)) | ((u32)hbf80selrx1 << 21));
}

static inline u8 riu_hbf_sel_hbf_80_sel_rx_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_SEL_ADDR);

	return (u8)((local_val & ((u32)0x001C0000)) >> 18);
}

static inline void riu_hbf_sel_hbf_80_sel_rx_0_setf(struct cl_chip *chip, u8 hbf80selrx0)
{
	ASSERT_ERR_CHIP((((u32)hbf80selrx0 << 18) & ~((u32)0x001C0000)) == 0);
	cl_reg_write(chip, RIU_HBF_SEL_ADDR, (cl_reg_read(chip, RIU_HBF_SEL_ADDR) & ~((u32)0x001C0000)) | ((u32)hbf80selrx0 << 18));
}

static inline u8 riu_hbf_sel_hbf_40_sel_tx_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_SEL_ADDR);

	return (u8)((local_val & ((u32)0x00038000)) >> 15);
}

static inline void riu_hbf_sel_hbf_40_sel_tx_setf(struct cl_chip *chip, u8 hbf40seltx)
{
	ASSERT_ERR_CHIP((((u32)hbf40seltx << 15) & ~((u32)0x00038000)) == 0);
	cl_reg_write(chip, RIU_HBF_SEL_ADDR, (cl_reg_read(chip, RIU_HBF_SEL_ADDR) & ~((u32)0x00038000)) | ((u32)hbf40seltx << 15));
}

static inline u8 riu_hbf_sel_hbf_40_sel_rx_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_SEL_ADDR);

	return (u8)((local_val & ((u32)0x00007000)) >> 12);
}

static inline void riu_hbf_sel_hbf_40_sel_rx_1_setf(struct cl_chip *chip, u8 hbf40selrx1)
{
	ASSERT_ERR_CHIP((((u32)hbf40selrx1 << 12) & ~((u32)0x00007000)) == 0);
	cl_reg_write(chip, RIU_HBF_SEL_ADDR, (cl_reg_read(chip, RIU_HBF_SEL_ADDR) & ~((u32)0x00007000)) | ((u32)hbf40selrx1 << 12));
}

static inline u8 riu_hbf_sel_hbf_40_sel_rx_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_SEL_ADDR);

	return (u8)((local_val & ((u32)0x00000E00)) >> 9);
}

static inline void riu_hbf_sel_hbf_40_sel_rx_0_setf(struct cl_chip *chip, u8 hbf40selrx0)
{
	ASSERT_ERR_CHIP((((u32)hbf40selrx0 << 9) & ~((u32)0x00000E00)) == 0);
	cl_reg_write(chip, RIU_HBF_SEL_ADDR, (cl_reg_read(chip, RIU_HBF_SEL_ADDR) & ~((u32)0x00000E00)) | ((u32)hbf40selrx0 << 9));
}

static inline u8 riu_hbf_sel_hbf_20_sel_tx_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_SEL_ADDR);

	return (u8)((local_val & ((u32)0x000001C0)) >> 6);
}

static inline void riu_hbf_sel_hbf_20_sel_tx_setf(struct cl_chip *chip, u8 hbf20seltx)
{
	ASSERT_ERR_CHIP((((u32)hbf20seltx << 6) & ~((u32)0x000001C0)) == 0);
	cl_reg_write(chip, RIU_HBF_SEL_ADDR, (cl_reg_read(chip, RIU_HBF_SEL_ADDR) & ~((u32)0x000001C0)) | ((u32)hbf20seltx << 6));
}

static inline u8 riu_hbf_sel_hbf_20_sel_rx_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_SEL_ADDR);

	return (u8)((local_val & ((u32)0x00000038)) >> 3);
}

static inline void riu_hbf_sel_hbf_20_sel_rx_1_setf(struct cl_chip *chip, u8 hbf20selrx1)
{
	ASSERT_ERR_CHIP((((u32)hbf20selrx1 << 3) & ~((u32)0x00000038)) == 0);
	cl_reg_write(chip, RIU_HBF_SEL_ADDR, (cl_reg_read(chip, RIU_HBF_SEL_ADDR) & ~((u32)0x00000038)) | ((u32)hbf20selrx1 << 3));
}

static inline u8 riu_hbf_sel_hbf_20_sel_rx_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_HBF_SEL_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void riu_hbf_sel_hbf_20_sel_rx_0_setf(struct cl_chip *chip, u8 hbf20selrx0)
{
	ASSERT_ERR_CHIP((((u32)hbf20selrx0 << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RIU_HBF_SEL_ADDR, (cl_reg_read(chip, RIU_HBF_SEL_ADDR) & ~((u32)0x00000007)) | ((u32)hbf20selrx0 << 0));
}

/**
 * @brief DC_SCALE_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 DC_SCALE_SET1_160         0xEA
 *    23:16 DC_SCALE_SET1_80          0xEA
 *    15:08 DC_SCALE_SET1_40          0x44
 *    07:00 DC_SCALE_SET1_20          0x38
 * </pre>
 */
#define RIU_DC_SCALE_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000614)
#define RIU_DC_SCALE_1_OFFSET      0x00000614
#define RIU_DC_SCALE_1_INDEX       0x00000185
#define RIU_DC_SCALE_1_RESET       0xEAEA4438

static inline u32 riu_dc_scale_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DC_SCALE_1_ADDR);
}

static inline void riu_dc_scale_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_DC_SCALE_1_ADDR, value);
}

/* Field definitions */
#define RIU_DC_SCALE_1_DC_SCALE_SET_1_160_MASK    ((u32)0xFF000000)
#define RIU_DC_SCALE_1_DC_SCALE_SET_1_160_LSB    24
#define RIU_DC_SCALE_1_DC_SCALE_SET_1_160_WIDTH    ((u32)0x00000008)
#define RIU_DC_SCALE_1_DC_SCALE_SET_1_80_MASK    ((u32)0x00FF0000)
#define RIU_DC_SCALE_1_DC_SCALE_SET_1_80_LSB    16
#define RIU_DC_SCALE_1_DC_SCALE_SET_1_80_WIDTH    ((u32)0x00000008)
#define RIU_DC_SCALE_1_DC_SCALE_SET_1_40_MASK    ((u32)0x0000FF00)
#define RIU_DC_SCALE_1_DC_SCALE_SET_1_40_LSB    8
#define RIU_DC_SCALE_1_DC_SCALE_SET_1_40_WIDTH    ((u32)0x00000008)
#define RIU_DC_SCALE_1_DC_SCALE_SET_1_20_MASK    ((u32)0x000000FF)
#define RIU_DC_SCALE_1_DC_SCALE_SET_1_20_LSB    0
#define RIU_DC_SCALE_1_DC_SCALE_SET_1_20_WIDTH    ((u32)0x00000008)

#define RIU_DC_SCALE_1_DC_SCALE_SET_1_160_RST    0xEA
#define RIU_DC_SCALE_1_DC_SCALE_SET_1_80_RST    0xEA
#define RIU_DC_SCALE_1_DC_SCALE_SET_1_40_RST    0x44
#define RIU_DC_SCALE_1_DC_SCALE_SET_1_20_RST    0x38

static inline void riu_dc_scale_1_pack(struct cl_chip *chip, u8 dc_scale_set1_160, u8 dc_scale_set1_80, u8 dc_scale_set1_40, u8 dc_scale_set1_20)
{
	ASSERT_ERR_CHIP((((u32)dc_scale_set1_160 << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)dc_scale_set1_80 << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)dc_scale_set1_40 << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)dc_scale_set1_20 << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_DC_SCALE_1_ADDR, ((u32)dc_scale_set1_160 << 24) | ((u32)dc_scale_set1_80 << 16) | ((u32)dc_scale_set1_40 << 8) | ((u32)dc_scale_set1_20 << 0));
}

static inline void riu_dc_scale_1_unpack(struct cl_chip *chip, u8 *dc_scale_set1_160, u8 *dc_scale_set1_80, u8 *dc_scale_set1_40, u8 *dc_scale_set1_20)
{
	u32 local_val = cl_reg_read(chip, RIU_DC_SCALE_1_ADDR);

	*dc_scale_set1_160 = (local_val & ((u32)0xFF000000)) >> 24;
	*dc_scale_set1_80 = (local_val & ((u32)0x00FF0000)) >> 16;
	*dc_scale_set1_40 = (local_val & ((u32)0x0000FF00)) >> 8;
	*dc_scale_set1_20 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_dc_scale_1_dc_scale_set_1_160_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DC_SCALE_1_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_dc_scale_1_dc_scale_set_1_160_setf(struct cl_chip *chip, u8 dcscaleset1160)
{
	ASSERT_ERR_CHIP((((u32)dcscaleset1160 << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_DC_SCALE_1_ADDR, (cl_reg_read(chip, RIU_DC_SCALE_1_ADDR) & ~((u32)0xFF000000)) | ((u32)dcscaleset1160 << 24));
}

static inline u8 riu_dc_scale_1_dc_scale_set_1_80_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DC_SCALE_1_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_dc_scale_1_dc_scale_set_1_80_setf(struct cl_chip *chip, u8 dcscaleset180)
{
	ASSERT_ERR_CHIP((((u32)dcscaleset180 << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_DC_SCALE_1_ADDR, (cl_reg_read(chip, RIU_DC_SCALE_1_ADDR) & ~((u32)0x00FF0000)) | ((u32)dcscaleset180 << 16));
}

static inline u8 riu_dc_scale_1_dc_scale_set_1_40_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DC_SCALE_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_dc_scale_1_dc_scale_set_1_40_setf(struct cl_chip *chip, u8 dcscaleset140)
{
	ASSERT_ERR_CHIP((((u32)dcscaleset140 << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_DC_SCALE_1_ADDR, (cl_reg_read(chip, RIU_DC_SCALE_1_ADDR) & ~((u32)0x0000FF00)) | ((u32)dcscaleset140 << 8));
}

static inline u8 riu_dc_scale_1_dc_scale_set_1_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DC_SCALE_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_dc_scale_1_dc_scale_set_1_20_setf(struct cl_chip *chip, u8 dcscaleset120)
{
	ASSERT_ERR_CHIP((((u32)dcscaleset120 << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_DC_SCALE_1_ADDR, (cl_reg_read(chip, RIU_DC_SCALE_1_ADDR) & ~((u32)0x000000FF)) | ((u32)dcscaleset120 << 0));
}

/**
 * @brief SW_TO_AGC_FSM_IND register definition
 *  indications from the FW to the AGC FSM register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 SW_TO_AGC_FSM_IND         0x0
 * </pre>
 */
#define RIU_SW_TO_AGC_FSM_IND_ADDR        (REG_RIU_BASE_ADDR + 0x00000618)
#define RIU_SW_TO_AGC_FSM_IND_OFFSET      0x00000618
#define RIU_SW_TO_AGC_FSM_IND_INDEX       0x00000186
#define RIU_SW_TO_AGC_FSM_IND_RESET       0x00000000

static inline u32 riu_sw_to_agc_fsm_ind_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_SW_TO_AGC_FSM_IND_ADDR);
}

static inline void riu_sw_to_agc_fsm_ind_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_SW_TO_AGC_FSM_IND_ADDR, value);
}

/* Field definitions */
#define RIU_SW_TO_AGC_FSM_IND_SW_TO_AGC_FSM_IND_MASK    ((u32)0x00FFFFFF)
#define RIU_SW_TO_AGC_FSM_IND_SW_TO_AGC_FSM_IND_LSB    0
#define RIU_SW_TO_AGC_FSM_IND_SW_TO_AGC_FSM_IND_WIDTH    ((u32)0x00000018)

#define RIU_SW_TO_AGC_FSM_IND_SW_TO_AGC_FSM_IND_RST    0x0

static inline u32 riu_sw_to_agc_fsm_ind_sw_to_agc_fsm_ind_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_SW_TO_AGC_FSM_IND_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_sw_to_agc_fsm_ind_sw_to_agc_fsm_ind_setf(struct cl_chip *chip, u32 swtoagcfsmind)
{
	ASSERT_ERR_CHIP((((u32)swtoagcfsmind << 0) & ~((u32)0x00FFFFFF)) == 0);
	cl_reg_write(chip, RIU_SW_TO_AGC_FSM_IND_ADDR, (u32)swtoagcfsmind << 0);
}

/**
 * @brief AGC_FSM_TO_SW_IND register definition
 *  Indications from the AGC FSM (command 55) register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 AGC_FSM_TO_SW_IND         0x0
 * </pre>
 */
#define RIU_AGC_FSM_TO_SW_IND_ADDR        (REG_RIU_BASE_ADDR + 0x0000061C)
#define RIU_AGC_FSM_TO_SW_IND_OFFSET      0x0000061C
#define RIU_AGC_FSM_TO_SW_IND_INDEX       0x00000187
#define RIU_AGC_FSM_TO_SW_IND_RESET       0x00000000

static inline u32 riu_agc_fsm_to_sw_ind_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGC_FSM_TO_SW_IND_ADDR);
}

/* Field definitions */
#define RIU_AGC_FSM_TO_SW_IND_AGC_FSM_TO_SW_IND_MASK    ((u32)0x00FFFFFF)
#define RIU_AGC_FSM_TO_SW_IND_AGC_FSM_TO_SW_IND_LSB    0
#define RIU_AGC_FSM_TO_SW_IND_AGC_FSM_TO_SW_IND_WIDTH    ((u32)0x00000018)

#define RIU_AGC_FSM_TO_SW_IND_AGC_FSM_TO_SW_IND_RST    0x0

static inline u32 riu_agc_fsm_to_sw_ind_agc_fsm_to_sw_ind_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGC_FSM_TO_SW_IND_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief FRC_AGC_GP_LO register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    FRC_AGC_GP_CC             0
 *    30    FRC_AGC_GP_MORE           1
 *    29:00 FRC_AGC_GP_29_0           0x0
 * </pre>
 */
#define RIU_FRC_AGC_GP_LO_ADDR        (REG_RIU_BASE_ADDR + 0x00000620)
#define RIU_FRC_AGC_GP_LO_OFFSET      0x00000620
#define RIU_FRC_AGC_GP_LO_INDEX       0x00000188
#define RIU_FRC_AGC_GP_LO_RESET       0x40000000

static inline u32 riu_frc_agc_gp_lo_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FRC_AGC_GP_LO_ADDR);
}

/* Field definitions */
#define RIU_FRC_AGC_GP_LO_FRC_AGC_GP_CC_BIT    ((u32)0x80000000)
#define RIU_FRC_AGC_GP_LO_FRC_AGC_GP_CC_POS    31
#define RIU_FRC_AGC_GP_LO_FRC_AGC_GP_MORE_BIT    ((u32)0x40000000)
#define RIU_FRC_AGC_GP_LO_FRC_AGC_GP_MORE_POS    30
#define RIU_FRC_AGC_GP_LO_FRC_AGC_GP_29_0_MASK    ((u32)0x3FFFFFFF)
#define RIU_FRC_AGC_GP_LO_FRC_AGC_GP_29_0_LSB    0
#define RIU_FRC_AGC_GP_LO_FRC_AGC_GP_29_0_WIDTH    ((u32)0x0000001E)

#define RIU_FRC_AGC_GP_LO_FRC_AGC_GP_CC_RST    0x0
#define RIU_FRC_AGC_GP_LO_FRC_AGC_GP_MORE_RST    0x1
#define RIU_FRC_AGC_GP_LO_FRC_AGC_GP_29_0_RST    0x0

static inline void riu_frc_agc_gp_lo_unpack(struct cl_chip *chip, u8 *frc_agc_gp_cc, u8 *frc_agc_gp_more, u32 *frc_agc_gp_29_0)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_AGC_GP_LO_ADDR);

	*frc_agc_gp_cc = (local_val & ((u32)0x80000000)) >> 31;
	*frc_agc_gp_more = (local_val & ((u32)0x40000000)) >> 30;
	*frc_agc_gp_29_0 = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_frc_agc_gp_lo_frc_agc_gp_cc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_AGC_GP_LO_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline u8 riu_frc_agc_gp_lo_frc_agc_gp_more_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_AGC_GP_LO_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline u32 riu_frc_agc_gp_lo_frc_agc_gp_29_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_AGC_GP_LO_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

/**
 * @brief FTM_RXEND_LO register definition
 *  FTM Rx End timestamp 32b LSB register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    RXEND_LO_CC               0
 *    30    RXEND_MORE                1
 *    29:00 RXEND_29_0                0x0
 * </pre>
 */
#define RIU_FTM_RXEND_LO_ADDR        (REG_RIU_BASE_ADDR + 0x00000624)
#define RIU_FTM_RXEND_LO_OFFSET      0x00000624
#define RIU_FTM_RXEND_LO_INDEX       0x00000189
#define RIU_FTM_RXEND_LO_RESET       0x40000000

static inline u32 riu_ftm_rxend_lo_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FTM_RXEND_LO_ADDR);
}

/* Field definitions */
#define RIU_FTM_RXEND_LO_RXEND_LO_CC_BIT    ((u32)0x80000000)
#define RIU_FTM_RXEND_LO_RXEND_LO_CC_POS    31
#define RIU_FTM_RXEND_LO_RXEND_MORE_BIT     ((u32)0x40000000)
#define RIU_FTM_RXEND_LO_RXEND_MORE_POS     30
#define RIU_FTM_RXEND_LO_RXEND_29_0_MASK    ((u32)0x3FFFFFFF)
#define RIU_FTM_RXEND_LO_RXEND_29_0_LSB     0
#define RIU_FTM_RXEND_LO_RXEND_29_0_WIDTH    ((u32)0x0000001E)

#define RIU_FTM_RXEND_LO_RXEND_LO_CC_RST    0x0
#define RIU_FTM_RXEND_LO_RXEND_MORE_RST     0x1
#define RIU_FTM_RXEND_LO_RXEND_29_0_RST     0x0

static inline void riu_ftm_rxend_lo_unpack(struct cl_chip *chip, u8 *rxend_lo_cc, u8 *rxend_more, u32 *rxend_29_0)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_RXEND_LO_ADDR);

	*rxend_lo_cc = (local_val & ((u32)0x80000000)) >> 31;
	*rxend_more = (local_val & ((u32)0x40000000)) >> 30;
	*rxend_29_0 = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_ftm_rxend_lo_rxend_lo_cc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_RXEND_LO_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline u8 riu_ftm_rxend_lo_rxend_more_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_RXEND_LO_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline u32 riu_ftm_rxend_lo_rxend_29_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_RXEND_LO_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

/**
 * @brief FTM_TXREQ_LO register definition
 *  FTM Tx Req 32b lsb register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    TXREQ_LO_CC               0
 *    30    TXREQ_MORE                1
 *    29:00 TXREQ_29_0                0x0
 * </pre>
 */
#define RIU_FTM_TXREQ_LO_ADDR        (REG_RIU_BASE_ADDR + 0x00000628)
#define RIU_FTM_TXREQ_LO_OFFSET      0x00000628
#define RIU_FTM_TXREQ_LO_INDEX       0x0000018A
#define RIU_FTM_TXREQ_LO_RESET       0x40000000

static inline u32 riu_ftm_txreq_lo_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FTM_TXREQ_LO_ADDR);
}

/* Field definitions */
#define RIU_FTM_TXREQ_LO_TXREQ_LO_CC_BIT    ((u32)0x80000000)
#define RIU_FTM_TXREQ_LO_TXREQ_LO_CC_POS    31
#define RIU_FTM_TXREQ_LO_TXREQ_MORE_BIT     ((u32)0x40000000)
#define RIU_FTM_TXREQ_LO_TXREQ_MORE_POS     30
#define RIU_FTM_TXREQ_LO_TXREQ_29_0_MASK    ((u32)0x3FFFFFFF)
#define RIU_FTM_TXREQ_LO_TXREQ_29_0_LSB     0
#define RIU_FTM_TXREQ_LO_TXREQ_29_0_WIDTH    ((u32)0x0000001E)

#define RIU_FTM_TXREQ_LO_TXREQ_LO_CC_RST    0x0
#define RIU_FTM_TXREQ_LO_TXREQ_MORE_RST     0x1
#define RIU_FTM_TXREQ_LO_TXREQ_29_0_RST     0x0

static inline void riu_ftm_txreq_lo_unpack(struct cl_chip *chip, u8 *txreq_lo_cc, u8 *txreq_more, u32 *txreq_29_0)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TXREQ_LO_ADDR);

	*txreq_lo_cc = (local_val & ((u32)0x80000000)) >> 31;
	*txreq_more = (local_val & ((u32)0x40000000)) >> 30;
	*txreq_29_0 = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_ftm_txreq_lo_txreq_lo_cc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TXREQ_LO_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline u8 riu_ftm_txreq_lo_txreq_more_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TXREQ_LO_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline u32 riu_ftm_txreq_lo_txreq_29_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TXREQ_LO_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

/**
 * @brief FRC_UNLOCK_LO register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    FRC_UNLOCK_CC             0
 *    30    FRC_UNLOCK_MORE           1
 *    29:00 FRC_UNLOCK_29_0           0x0
 * </pre>
 */
#define RIU_FRC_UNLOCK_LO_ADDR        (REG_RIU_BASE_ADDR + 0x0000062C)
#define RIU_FRC_UNLOCK_LO_OFFSET      0x0000062C
#define RIU_FRC_UNLOCK_LO_INDEX       0x0000018B
#define RIU_FRC_UNLOCK_LO_RESET       0x40000000

static inline u32 riu_frc_unlock_lo_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FRC_UNLOCK_LO_ADDR);
}

/* Field definitions */
#define RIU_FRC_UNLOCK_LO_FRC_UNLOCK_CC_BIT    ((u32)0x80000000)
#define RIU_FRC_UNLOCK_LO_FRC_UNLOCK_CC_POS    31
#define RIU_FRC_UNLOCK_LO_FRC_UNLOCK_MORE_BIT    ((u32)0x40000000)
#define RIU_FRC_UNLOCK_LO_FRC_UNLOCK_MORE_POS    30
#define RIU_FRC_UNLOCK_LO_FRC_UNLOCK_29_0_MASK    ((u32)0x3FFFFFFF)
#define RIU_FRC_UNLOCK_LO_FRC_UNLOCK_29_0_LSB    0
#define RIU_FRC_UNLOCK_LO_FRC_UNLOCK_29_0_WIDTH    ((u32)0x0000001E)

#define RIU_FRC_UNLOCK_LO_FRC_UNLOCK_CC_RST    0x0
#define RIU_FRC_UNLOCK_LO_FRC_UNLOCK_MORE_RST    0x1
#define RIU_FRC_UNLOCK_LO_FRC_UNLOCK_29_0_RST    0x0

static inline void riu_frc_unlock_lo_unpack(struct cl_chip *chip, u8 *frc_unlock_cc, u8 *frc_unlock_more, u32 *frc_unlock_29_0)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_UNLOCK_LO_ADDR);

	*frc_unlock_cc = (local_val & ((u32)0x80000000)) >> 31;
	*frc_unlock_more = (local_val & ((u32)0x40000000)) >> 30;
	*frc_unlock_29_0 = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_frc_unlock_lo_frc_unlock_cc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_UNLOCK_LO_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline u8 riu_frc_unlock_lo_frc_unlock_more_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_UNLOCK_LO_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline u32 riu_frc_unlock_lo_frc_unlock_29_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_UNLOCK_LO_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

/**
 * @brief FRC_40_MHZ_LO register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    FRC_40_MHZ_CC             0
 *    29:00 FRC_40_MHZ_29_0           0x0
 * </pre>
 */
#define RIU_FRC_40_MHZ_LO_ADDR        (REG_RIU_BASE_ADDR + 0x00000630)
#define RIU_FRC_40_MHZ_LO_OFFSET      0x00000630
#define RIU_FRC_40_MHZ_LO_INDEX       0x0000018C
#define RIU_FRC_40_MHZ_LO_RESET       0x00000000

static inline u32 riu_frc_40_mhz_lo_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FRC_40_MHZ_LO_ADDR);
}

/* Field definitions */
#define RIU_FRC_40_MHZ_LO_FRC_40_MHZ_CC_BIT    ((u32)0x80000000)
#define RIU_FRC_40_MHZ_LO_FRC_40_MHZ_CC_POS    31
#define RIU_FRC_40_MHZ_LO_FRC_40_MHZ_29_0_MASK    ((u32)0x3FFFFFFF)
#define RIU_FRC_40_MHZ_LO_FRC_40_MHZ_29_0_LSB    0
#define RIU_FRC_40_MHZ_LO_FRC_40_MHZ_29_0_WIDTH    ((u32)0x0000001E)

#define RIU_FRC_40_MHZ_LO_FRC_40_MHZ_CC_RST    0x0
#define RIU_FRC_40_MHZ_LO_FRC_40_MHZ_29_0_RST    0x0

static inline void riu_frc_40_mhz_lo_unpack(struct cl_chip *chip, u8 *frc_40_mhz_cc, u32 *frc_40_mhz_29_0)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_40_MHZ_LO_ADDR);

	*frc_40_mhz_cc = (local_val & ((u32)0x80000000)) >> 31;
	*frc_40_mhz_29_0 = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_frc_40_mhz_lo_frc_40_mhz_cc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_40_MHZ_LO_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline u32 riu_frc_40_mhz_lo_frc_40_mhz_29_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_40_MHZ_LO_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

/**
 * @brief FTM_TXEND_TRGT register definition
 *  FTM Tx End target register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    TXEND_CANCEL              0
 *    29:00 TXEND_TARGET              0x0
 * </pre>
 */
#define RIU_FTM_TXEND_TRGT_ADDR        (REG_RIU_BASE_ADDR + 0x00000634)
#define RIU_FTM_TXEND_TRGT_OFFSET      0x00000634
#define RIU_FTM_TXEND_TRGT_INDEX       0x0000018D
#define RIU_FTM_TXEND_TRGT_RESET       0x00000000

static inline u32 riu_ftm_txend_trgt_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FTM_TXEND_TRGT_ADDR);
}

static inline void riu_ftm_txend_trgt_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_FTM_TXEND_TRGT_ADDR, value);
}

/* Field definitions */
#define RIU_FTM_TXEND_TRGT_TXEND_CANCEL_BIT    ((u32)0x80000000)
#define RIU_FTM_TXEND_TRGT_TXEND_CANCEL_POS    31
#define RIU_FTM_TXEND_TRGT_TXEND_TARGET_MASK    ((u32)0x3FFFFFFF)
#define RIU_FTM_TXEND_TRGT_TXEND_TARGET_LSB    0
#define RIU_FTM_TXEND_TRGT_TXEND_TARGET_WIDTH    ((u32)0x0000001E)

#define RIU_FTM_TXEND_TRGT_TXEND_CANCEL_RST    0x0
#define RIU_FTM_TXEND_TRGT_TXEND_TARGET_RST    0x0

static inline void riu_ftm_txend_trgt_pack(struct cl_chip *chip, u8 txend_cancel, u32 txend_target)
{
	ASSERT_ERR_CHIP((((u32)txend_cancel << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)txend_target << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_FTM_TXEND_TRGT_ADDR, ((u32)txend_cancel << 31) | ((u32)txend_target << 0));
}

static inline void riu_ftm_txend_trgt_unpack(struct cl_chip *chip, u8 *txend_cancel, u32 *txend_target)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TXEND_TRGT_ADDR);

	*txend_cancel = (local_val & ((u32)0x80000000)) >> 31;
	*txend_target = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_ftm_txend_trgt_txend_cancel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TXEND_TRGT_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_ftm_txend_trgt_txend_cancel_setf(struct cl_chip *chip, u8 txendcancel)
{
	ASSERT_ERR_CHIP((((u32)txendcancel << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_FTM_TXEND_TRGT_ADDR, (cl_reg_read(chip, RIU_FTM_TXEND_TRGT_ADDR) & ~((u32)0x80000000)) | ((u32)txendcancel << 31));
}

static inline u32 riu_ftm_txend_trgt_txend_target_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TXEND_TRGT_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

static inline void riu_ftm_txend_trgt_txend_target_setf(struct cl_chip *chip, u32 txendtarget)
{
	ASSERT_ERR_CHIP((((u32)txendtarget << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_FTM_TXEND_TRGT_ADDR, (cl_reg_read(chip, RIU_FTM_TXEND_TRGT_ADDR) & ~((u32)0x3FFFFFFF)) | ((u32)txendtarget << 0));
}

/**
 * @brief FTM_TXREQ_FALL_LO register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    TXREQ_FALL_LO_CC          0
 *    30    TXREQ_FALL_MORE           1
 *    29:00 TXREQ_FALL_29_0           0x0
 * </pre>
 */
#define RIU_FTM_TXREQ_FALL_LO_ADDR        (REG_RIU_BASE_ADDR + 0x00000638)
#define RIU_FTM_TXREQ_FALL_LO_OFFSET      0x00000638
#define RIU_FTM_TXREQ_FALL_LO_INDEX       0x0000018E
#define RIU_FTM_TXREQ_FALL_LO_RESET       0x40000000

static inline u32 riu_ftm_txreq_fall_lo_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FTM_TXREQ_FALL_LO_ADDR);
}

/* Field definitions */
#define RIU_FTM_TXREQ_FALL_LO_TXREQ_FALL_LO_CC_BIT    ((u32)0x80000000)
#define RIU_FTM_TXREQ_FALL_LO_TXREQ_FALL_LO_CC_POS    31
#define RIU_FTM_TXREQ_FALL_LO_TXREQ_FALL_MORE_BIT    ((u32)0x40000000)
#define RIU_FTM_TXREQ_FALL_LO_TXREQ_FALL_MORE_POS    30
#define RIU_FTM_TXREQ_FALL_LO_TXREQ_FALL_29_0_MASK    ((u32)0x3FFFFFFF)
#define RIU_FTM_TXREQ_FALL_LO_TXREQ_FALL_29_0_LSB    0
#define RIU_FTM_TXREQ_FALL_LO_TXREQ_FALL_29_0_WIDTH    ((u32)0x0000001E)

#define RIU_FTM_TXREQ_FALL_LO_TXREQ_FALL_LO_CC_RST    0x0
#define RIU_FTM_TXREQ_FALL_LO_TXREQ_FALL_MORE_RST    0x1
#define RIU_FTM_TXREQ_FALL_LO_TXREQ_FALL_29_0_RST    0x0

static inline void riu_ftm_txreq_fall_lo_unpack(struct cl_chip *chip, u8 *txreq_fall_lo_cc, u8 *txreq_fall_more, u32 *txreq_fall_29_0)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TXREQ_FALL_LO_ADDR);

	*txreq_fall_lo_cc = (local_val & ((u32)0x80000000)) >> 31;
	*txreq_fall_more = (local_val & ((u32)0x40000000)) >> 30;
	*txreq_fall_29_0 = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_ftm_txreq_fall_lo_txreq_fall_lo_cc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TXREQ_FALL_LO_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline u8 riu_ftm_txreq_fall_lo_txreq_fall_more_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TXREQ_FALL_LO_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline u32 riu_ftm_txreq_fall_lo_txreq_fall_29_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TXREQ_FALL_LO_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

/**
 * @brief FTM_RXREQ_FALL_LO register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    RXREQ_FALL_LO_CC          0
 *    30    RXREQ_FALL_MORE           1
 *    29:00 RXREQ_FALL_29_0           0x0
 * </pre>
 */
#define RIU_FTM_RXREQ_FALL_LO_ADDR        (REG_RIU_BASE_ADDR + 0x0000063C)
#define RIU_FTM_RXREQ_FALL_LO_OFFSET      0x0000063C
#define RIU_FTM_RXREQ_FALL_LO_INDEX       0x0000018F
#define RIU_FTM_RXREQ_FALL_LO_RESET       0x40000000

static inline u32 riu_ftm_rxreq_fall_lo_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FTM_RXREQ_FALL_LO_ADDR);
}

/* Field definitions */
#define RIU_FTM_RXREQ_FALL_LO_RXREQ_FALL_LO_CC_BIT    ((u32)0x80000000)
#define RIU_FTM_RXREQ_FALL_LO_RXREQ_FALL_LO_CC_POS    31
#define RIU_FTM_RXREQ_FALL_LO_RXREQ_FALL_MORE_BIT    ((u32)0x40000000)
#define RIU_FTM_RXREQ_FALL_LO_RXREQ_FALL_MORE_POS    30
#define RIU_FTM_RXREQ_FALL_LO_RXREQ_FALL_29_0_MASK    ((u32)0x3FFFFFFF)
#define RIU_FTM_RXREQ_FALL_LO_RXREQ_FALL_29_0_LSB    0
#define RIU_FTM_RXREQ_FALL_LO_RXREQ_FALL_29_0_WIDTH    ((u32)0x0000001E)

#define RIU_FTM_RXREQ_FALL_LO_RXREQ_FALL_LO_CC_RST    0x0
#define RIU_FTM_RXREQ_FALL_LO_RXREQ_FALL_MORE_RST    0x1
#define RIU_FTM_RXREQ_FALL_LO_RXREQ_FALL_29_0_RST    0x0

static inline void riu_ftm_rxreq_fall_lo_unpack(struct cl_chip *chip, u8 *rxreq_fall_lo_cc, u8 *rxreq_fall_more, u32 *rxreq_fall_29_0)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_RXREQ_FALL_LO_ADDR);

	*rxreq_fall_lo_cc = (local_val & ((u32)0x80000000)) >> 31;
	*rxreq_fall_more = (local_val & ((u32)0x40000000)) >> 30;
	*rxreq_fall_29_0 = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_ftm_rxreq_fall_lo_rxreq_fall_lo_cc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_RXREQ_FALL_LO_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline u8 riu_ftm_rxreq_fall_lo_rxreq_fall_more_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_RXREQ_FALL_LO_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline u32 riu_ftm_rxreq_fall_lo_rxreq_fall_29_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_RXREQ_FALL_LO_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

/**
 * @brief RWNXTXFEDELAY_160 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 TXENDDELAY160             0x0
 *    14    DSPFEDCNODELAYEN          0
 *    13    FEDCNODELAYHBF160         0
 *    12    FEDCNODELAYHBF80          0
 *    11    FEDCNODELAYHBF40          0
 *    10    FEDCNODELAYHBF20          0
 *    09:00 TXFEDELAY160              0xdb
 * </pre>
 */
#define RIU_RWNXTXFEDELAY_160_ADDR        (REG_RIU_BASE_ADDR + 0x00000640)
#define RIU_RWNXTXFEDELAY_160_OFFSET      0x00000640
#define RIU_RWNXTXFEDELAY_160_INDEX       0x00000190
#define RIU_RWNXTXFEDELAY_160_RESET       0x000000DB

static inline u32 riu_rwnxtxfedelay_160_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXTXFEDELAY_160_ADDR);
}

static inline void riu_rwnxtxfedelay_160_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_160_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXTXFEDELAY_160_TXENDDELAY_160_MASK    ((u32)0xFF800000)
#define RIU_RWNXTXFEDELAY_160_TXENDDELAY_160_LSB    23
#define RIU_RWNXTXFEDELAY_160_TXENDDELAY_160_WIDTH    ((u32)0x00000009)
#define RIU_RWNXTXFEDELAY_160_DSPFEDCNODELAYEN_BIT    ((u32)0x00004000)
#define RIU_RWNXTXFEDELAY_160_DSPFEDCNODELAYEN_POS    14
#define RIU_RWNXTXFEDELAY_160_FEDCNODELAYHBF_160_BIT    ((u32)0x00002000)
#define RIU_RWNXTXFEDELAY_160_FEDCNODELAYHBF_160_POS    13
#define RIU_RWNXTXFEDELAY_160_FEDCNODELAYHBF_80_BIT    ((u32)0x00001000)
#define RIU_RWNXTXFEDELAY_160_FEDCNODELAYHBF_80_POS    12
#define RIU_RWNXTXFEDELAY_160_FEDCNODELAYHBF_40_BIT    ((u32)0x00000800)
#define RIU_RWNXTXFEDELAY_160_FEDCNODELAYHBF_40_POS    11
#define RIU_RWNXTXFEDELAY_160_FEDCNODELAYHBF_20_BIT    ((u32)0x00000400)
#define RIU_RWNXTXFEDELAY_160_FEDCNODELAYHBF_20_POS    10
#define RIU_RWNXTXFEDELAY_160_TXFEDELAY_160_MASK    ((u32)0x000003FF)
#define RIU_RWNXTXFEDELAY_160_TXFEDELAY_160_LSB    0
#define RIU_RWNXTXFEDELAY_160_TXFEDELAY_160_WIDTH    ((u32)0x0000000A)

#define RIU_RWNXTXFEDELAY_160_TXENDDELAY_160_RST    0x0
#define RIU_RWNXTXFEDELAY_160_DSPFEDCNODELAYEN_RST    0x0
#define RIU_RWNXTXFEDELAY_160_FEDCNODELAYHBF_160_RST    0x0
#define RIU_RWNXTXFEDELAY_160_FEDCNODELAYHBF_80_RST    0x0
#define RIU_RWNXTXFEDELAY_160_FEDCNODELAYHBF_40_RST    0x0
#define RIU_RWNXTXFEDELAY_160_FEDCNODELAYHBF_20_RST    0x0
#define RIU_RWNXTXFEDELAY_160_TXFEDELAY_160_RST    0xdb

static inline void riu_rwnxtxfedelay_160_pack(struct cl_chip *chip, u16 txenddelay160, u8 dspfedcnodelayen, u8 fedcnodelayhbf160, u8 fedcnodelayhbf80, u8 fedcnodelayhbf40, u8 fedcnodelayhbf20, u16 txfedelay160)
{
	ASSERT_ERR_CHIP((((u32)txenddelay160 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)dspfedcnodelayen << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)fedcnodelayhbf160 << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)fedcnodelayhbf80 << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)fedcnodelayhbf40 << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)fedcnodelayhbf20 << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)txfedelay160 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_160_ADDR, ((u32)txenddelay160 << 23) | ((u32)dspfedcnodelayen << 14) | ((u32)fedcnodelayhbf160 << 13) | ((u32)fedcnodelayhbf80 << 12) | ((u32)fedcnodelayhbf40 << 11) | ((u32)fedcnodelayhbf20 << 10) | ((u32)txfedelay160 << 0));
}

static inline void riu_rwnxtxfedelay_160_unpack(struct cl_chip *chip, u16 *txenddelay160, u8 *dspfedcnodelayen, u8 *fedcnodelayhbf160, u8 *fedcnodelayhbf80, u8 *fedcnodelayhbf40, u8 *fedcnodelayhbf20, u16 *txfedelay160)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_160_ADDR);

	*txenddelay160 = (local_val & ((u32)0xFF800000)) >> 23;
	*dspfedcnodelayen = (local_val & ((u32)0x00004000)) >> 14;
	*fedcnodelayhbf160 = (local_val & ((u32)0x00002000)) >> 13;
	*fedcnodelayhbf80 = (local_val & ((u32)0x00001000)) >> 12;
	*fedcnodelayhbf40 = (local_val & ((u32)0x00000800)) >> 11;
	*fedcnodelayhbf20 = (local_val & ((u32)0x00000400)) >> 10;
	*txfedelay160 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_rwnxtxfedelay_160_txenddelay_160_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_160_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_rwnxtxfedelay_160_txenddelay_160_setf(struct cl_chip *chip, u16 txenddelay160)
{
	ASSERT_ERR_CHIP((((u32)txenddelay160 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_160_ADDR, (cl_reg_read(chip, RIU_RWNXTXFEDELAY_160_ADDR) & ~((u32)0xFF800000)) | ((u32)txenddelay160 << 23));
}

static inline u8 riu_rwnxtxfedelay_160_dspfedcnodelayen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_160_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void riu_rwnxtxfedelay_160_dspfedcnodelayen_setf(struct cl_chip *chip, u8 dspfedcnodelayen)
{
	ASSERT_ERR_CHIP((((u32)dspfedcnodelayen << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_160_ADDR, (cl_reg_read(chip, RIU_RWNXTXFEDELAY_160_ADDR) & ~((u32)0x00004000)) | ((u32)dspfedcnodelayen << 14));
}

static inline u8 riu_rwnxtxfedelay_160_fedcnodelayhbf_160_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_160_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_rwnxtxfedelay_160_fedcnodelayhbf_160_setf(struct cl_chip *chip, u8 fedcnodelayhbf160)
{
	ASSERT_ERR_CHIP((((u32)fedcnodelayhbf160 << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_160_ADDR, (cl_reg_read(chip, RIU_RWNXTXFEDELAY_160_ADDR) & ~((u32)0x00002000)) | ((u32)fedcnodelayhbf160 << 13));
}

static inline u8 riu_rwnxtxfedelay_160_fedcnodelayhbf_80_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_160_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void riu_rwnxtxfedelay_160_fedcnodelayhbf_80_setf(struct cl_chip *chip, u8 fedcnodelayhbf80)
{
	ASSERT_ERR_CHIP((((u32)fedcnodelayhbf80 << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_160_ADDR, (cl_reg_read(chip, RIU_RWNXTXFEDELAY_160_ADDR) & ~((u32)0x00001000)) | ((u32)fedcnodelayhbf80 << 12));
}

static inline u8 riu_rwnxtxfedelay_160_fedcnodelayhbf_40_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_160_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void riu_rwnxtxfedelay_160_fedcnodelayhbf_40_setf(struct cl_chip *chip, u8 fedcnodelayhbf40)
{
	ASSERT_ERR_CHIP((((u32)fedcnodelayhbf40 << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_160_ADDR, (cl_reg_read(chip, RIU_RWNXTXFEDELAY_160_ADDR) & ~((u32)0x00000800)) | ((u32)fedcnodelayhbf40 << 11));
}

static inline u8 riu_rwnxtxfedelay_160_fedcnodelayhbf_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_160_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void riu_rwnxtxfedelay_160_fedcnodelayhbf_20_setf(struct cl_chip *chip, u8 fedcnodelayhbf20)
{
	ASSERT_ERR_CHIP((((u32)fedcnodelayhbf20 << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_160_ADDR, (cl_reg_read(chip, RIU_RWNXTXFEDELAY_160_ADDR) & ~((u32)0x00000400)) | ((u32)fedcnodelayhbf20 << 10));
}

static inline u16 riu_rwnxtxfedelay_160_txfedelay_160_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXTXFEDELAY_160_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_rwnxtxfedelay_160_txfedelay_160_setf(struct cl_chip *chip, u16 txfedelay160)
{
	ASSERT_ERR_CHIP((((u32)txfedelay160 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RWNXTXFEDELAY_160_ADDR, (cl_reg_read(chip, RIU_RWNXTXFEDELAY_160_ADDR) & ~((u32)0x000003FF)) | ((u32)txfedelay160 << 0));
}

/**
 * @brief RWNXDSPINTSTATREV register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30    REV_IRQDSPAGCOFDMUNLOCKMASKED 0
 *    29    REV_IRQDSPAGCOFDMLOCKMASKED 0
 *    28    REV_IRQDSPAGCOFDMUNLOCKTIMERMASKED 0
 *    27    REV_IRQDSPMPUTXENDMASKED  0
 *    26    REV_IRQDSPBTC0_MASKED     0
 *    25    REV_IRQDSPBTC1_MASKED     0
 *    24    REV_IRQDSPBTC2_MASKED     0
 *    23    REV_IRQDSPBTC3_MASKED     0
 *    22    REV_IRQDSPCCATIMEOUTMASKED 0
 *    21    REV_IRQDSP_AGC_FSM0_MASKED 0
 *    20    REV_IRQDSP_AGC_FSM1_MASKED 0
 *    19    REV_IRQDSP_AGC_FSM2_MASKED 0
 *    18    REV_IRQDSPRADARDETMASKED  0
 *    17    REV_IRQDSPRADARTRIGGERMASKED 0
 *    16    REV_IRQDSP_AGC_FSM3_MASKED 0
 *    14    REV_IRQDSPAGCDSSSUNLOCKMASKED 0
 *    13    REV_IRQDSPAGCDSSSLOCKMASKED 0
 *    10    REV_IRQDSPLBCAPTUREDONEMASKED 0
 *    09    REV_IRQDSP_FRC_RX_PHY_PROC_LIM_MASKED 0
 *    08    REV_IRQDSP_FRC_RX_SIG_END_MASKED 0
 *    07    REV_IRQDSP_FRC_RX_END4_T_MASKED 0
 *    06    REV_IRQDSPRXVECTORMDMBMASKED 0
 *    05    REV_IRQDSPRXENDMDMBMASKED 0
 *    04    REV_IRQDSPTXENDMDMBMASKED 0
 *    03    REV_IRQDSPERRORMDMBMASKED 0
 *    02    REV_IRQDSPRCTXENDMASKED   0
 *    01    REV_IRQDSPRCRXENDMASKED   0
 * </pre>
 */
#define RIU_RWNXDSPINTSTATREV_ADDR        (REG_RIU_BASE_ADDR + 0x00000644)
#define RIU_RWNXDSPINTSTATREV_OFFSET      0x00000644
#define RIU_RWNXDSPINTSTATREV_INDEX       0x00000191
#define RIU_RWNXDSPINTSTATREV_RESET       0x00000000

static inline u32 riu_rwnxdspintstatrev_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);
}

/* Field definitions */
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPAGCOFDMUNLOCKMASKED_BIT    ((u32)0x40000000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPAGCOFDMUNLOCKMASKED_POS    30
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPAGCOFDMLOCKMASKED_BIT    ((u32)0x20000000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPAGCOFDMLOCKMASKED_POS    29
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPAGCOFDMUNLOCKTIMERMASKED_BIT    ((u32)0x10000000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPAGCOFDMUNLOCKTIMERMASKED_POS    28
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPMPUTXENDMASKED_BIT    ((u32)0x08000000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPMPUTXENDMASKED_POS    27
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPBTC_0_MASKED_BIT    ((u32)0x04000000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPBTC_0_MASKED_POS    26
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPBTC_1_MASKED_BIT    ((u32)0x02000000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPBTC_1_MASKED_POS    25
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPBTC_2_MASKED_BIT    ((u32)0x01000000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPBTC_2_MASKED_POS    24
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPBTC_3_MASKED_BIT    ((u32)0x00800000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPBTC_3_MASKED_POS    23
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPCCATIMEOUTMASKED_BIT    ((u32)0x00400000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPCCATIMEOUTMASKED_POS    22
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_AGC_FSM_0_MASKED_BIT    ((u32)0x00200000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_AGC_FSM_0_MASKED_POS    21
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_AGC_FSM_1_MASKED_BIT    ((u32)0x00100000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_AGC_FSM_1_MASKED_POS    20
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_AGC_FSM_2_MASKED_BIT    ((u32)0x00080000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_AGC_FSM_2_MASKED_POS    19
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRADARDETMASKED_BIT    ((u32)0x00040000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRADARDETMASKED_POS    18
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRADARTRIGGERMASKED_BIT    ((u32)0x00020000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRADARTRIGGERMASKED_POS    17
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_AGC_FSM_3_MASKED_BIT    ((u32)0x00010000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_AGC_FSM_3_MASKED_POS    16
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPAGCDSSSUNLOCKMASKED_BIT    ((u32)0x00004000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPAGCDSSSUNLOCKMASKED_POS    14
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPAGCDSSSLOCKMASKED_BIT    ((u32)0x00002000)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPAGCDSSSLOCKMASKED_POS    13
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPLBCAPTUREDONEMASKED_BIT    ((u32)0x00000400)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPLBCAPTUREDONEMASKED_POS    10
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_FRC_RX_PHY_PROC_LIM_MASKED_BIT    ((u32)0x00000200)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_FRC_RX_PHY_PROC_LIM_MASKED_POS    9
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_FRC_RX_SIG_END_MASKED_BIT    ((u32)0x00000100)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_FRC_RX_SIG_END_MASKED_POS    8
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_FRC_RX_END_4_T_MASKED_BIT    ((u32)0x00000080)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_FRC_RX_END_4_T_MASKED_POS    7
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRXVECTORMDMBMASKED_BIT    ((u32)0x00000040)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRXVECTORMDMBMASKED_POS    6
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRXENDMDMBMASKED_BIT    ((u32)0x00000020)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRXENDMDMBMASKED_POS    5
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPTXENDMDMBMASKED_BIT    ((u32)0x00000010)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPTXENDMDMBMASKED_POS    4
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPERRORMDMBMASKED_BIT    ((u32)0x00000008)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPERRORMDMBMASKED_POS    3
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRCTXENDMASKED_BIT    ((u32)0x00000004)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRCTXENDMASKED_POS    2
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRCRXENDMASKED_BIT    ((u32)0x00000002)
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRCRXENDMASKED_POS    1

#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPAGCOFDMUNLOCKMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPAGCOFDMLOCKMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPAGCOFDMUNLOCKTIMERMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPMPUTXENDMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPBTC_0_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPBTC_1_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPBTC_2_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPBTC_3_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPCCATIMEOUTMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_AGC_FSM_0_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_AGC_FSM_1_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_AGC_FSM_2_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRADARDETMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRADARTRIGGERMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_AGC_FSM_3_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPAGCDSSSUNLOCKMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPAGCDSSSLOCKMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPLBCAPTUREDONEMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_FRC_RX_PHY_PROC_LIM_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_FRC_RX_SIG_END_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSP_FRC_RX_END_4_T_MASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRXVECTORMDMBMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRXENDMDMBMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPTXENDMDMBMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPERRORMDMBMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRCTXENDMASKED_RST    0x0
#define RIU_RWNXDSPINTSTATREV_REV_IRQDSPRCRXENDMASKED_RST    0x0

static inline void riu_rwnxdspintstatrev_unpack(struct cl_chip *chip, u8 *rev_irqdspagcofdmunlockmasked, u8 *rev_irqdspagcofdmlockmasked, u8 *rev_irqdspagcofdmunlocktimermasked, u8 *rev_irqdspmputxendmasked, u8 *rev_irqdspbtc0_masked, u8 *rev_irqdspbtc1_masked, u8 *rev_irqdspbtc2_masked, u8 *rev_irqdspbtc3_masked, u8 *rev_irqdspccatimeoutmasked, u8 *rev_irqdsp_agc_fsm0_masked, u8 *rev_irqdsp_agc_fsm1_masked, u8 *rev_irqdsp_agc_fsm2_masked, u8 *rev_irqdspradardetmasked, u8 *rev_irqdspradartriggermasked, u8 *rev_irqdsp_agc_fsm3_masked, u8 *rev_irqdspagcdsssunlockmasked, u8 *rev_irqdspagcdssslockmasked, u8 *rev_irqdsplbcapturedonemasked, u8 *rev_irqdsp_frc_rx_phy_proc_lim_masked, u8 *rev_irqdsp_frc_rx_sig_end_masked, u8 *rev_irqdsp_frc_rx_end4_t_masked, u8 *rev_irqdsprxvectormdmbmasked, u8 *rev_irqdsprxendmdmbmasked, u8 *rev_irqdsptxendmdmbmasked, u8 *rev_irqdsperrormdmbmasked, u8 *rev_irqdsprctxendmasked, u8 *rev_irqdsprcrxendmasked)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	*rev_irqdspagcofdmunlockmasked = (local_val & ((u32)0x40000000)) >> 30;
	*rev_irqdspagcofdmlockmasked = (local_val & ((u32)0x20000000)) >> 29;
	*rev_irqdspagcofdmunlocktimermasked = (local_val & ((u32)0x10000000)) >> 28;
	*rev_irqdspmputxendmasked = (local_val & ((u32)0x08000000)) >> 27;
	*rev_irqdspbtc0_masked = (local_val & ((u32)0x04000000)) >> 26;
	*rev_irqdspbtc1_masked = (local_val & ((u32)0x02000000)) >> 25;
	*rev_irqdspbtc2_masked = (local_val & ((u32)0x01000000)) >> 24;
	*rev_irqdspbtc3_masked = (local_val & ((u32)0x00800000)) >> 23;
	*rev_irqdspccatimeoutmasked = (local_val & ((u32)0x00400000)) >> 22;
	*rev_irqdsp_agc_fsm0_masked = (local_val & ((u32)0x00200000)) >> 21;
	*rev_irqdsp_agc_fsm1_masked = (local_val & ((u32)0x00100000)) >> 20;
	*rev_irqdsp_agc_fsm2_masked = (local_val & ((u32)0x00080000)) >> 19;
	*rev_irqdspradardetmasked = (local_val & ((u32)0x00040000)) >> 18;
	*rev_irqdspradartriggermasked = (local_val & ((u32)0x00020000)) >> 17;
	*rev_irqdsp_agc_fsm3_masked = (local_val & ((u32)0x00010000)) >> 16;
	*rev_irqdspagcdsssunlockmasked = (local_val & ((u32)0x00004000)) >> 14;
	*rev_irqdspagcdssslockmasked = (local_val & ((u32)0x00002000)) >> 13;
	*rev_irqdsplbcapturedonemasked = (local_val & ((u32)0x00000400)) >> 10;
	*rev_irqdsp_frc_rx_phy_proc_lim_masked = (local_val & ((u32)0x00000200)) >> 9;
	*rev_irqdsp_frc_rx_sig_end_masked = (local_val & ((u32)0x00000100)) >> 8;
	*rev_irqdsp_frc_rx_end4_t_masked = (local_val & ((u32)0x00000080)) >> 7;
	*rev_irqdsprxvectormdmbmasked = (local_val & ((u32)0x00000040)) >> 6;
	*rev_irqdsprxendmdmbmasked = (local_val & ((u32)0x00000020)) >> 5;
	*rev_irqdsptxendmdmbmasked = (local_val & ((u32)0x00000010)) >> 4;
	*rev_irqdsperrormdmbmasked = (local_val & ((u32)0x00000008)) >> 3;
	*rev_irqdsprctxendmasked = (local_val & ((u32)0x00000004)) >> 2;
	*rev_irqdsprcrxendmasked = (local_val & ((u32)0x00000002)) >> 1;
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdspagcofdmunlockmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdspagcofdmlockmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdspagcofdmunlocktimermasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdspmputxendmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdspbtc_0_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdspbtc_1_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdspbtc_2_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdspbtc_3_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdspccatimeoutmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdsp_agc_fsm_0_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdsp_agc_fsm_1_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdsp_agc_fsm_2_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdspradardetmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdspradartriggermasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdsp_agc_fsm_3_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdspagcdsssunlockmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdspagcdssslockmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdsplbcapturedonemasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdsp_frc_rx_phy_proc_lim_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdsp_frc_rx_sig_end_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdsp_frc_rx_end_4_t_masked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdsprxvectormdmbmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdsprxendmdmbmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdsptxendmdmbmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdsperrormdmbmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdsprctxendmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline u8 riu_rwnxdspintstatrev_rev_irqdsprcrxendmasked_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXDSPINTSTATREV_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

/**
 * @brief AGCGAINSTAT_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    28    AGCRFGAIN5_EXTLNA         0
 *    27:25 AGCRFGAIN5_LNA            0x0
 *    24:20 AGCRFGAIN5_VGA            0x0
 *    18    AGCRFGAIN4_EXTLNA         0
 *    17:15 AGCRFGAIN4_LNA            0x0
 *    14:10 AGCRFGAIN4_VGA            0x0
 *    08    AGCRFGAIN3_EXTLNA         0
 *    07:05 AGCRFGAIN3_LNA            0x0
 *    04:00 AGCRFGAIN3_VGA            0x0
 * </pre>
 */
#define RIU_AGCGAINSTAT_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000648)
#define RIU_AGCGAINSTAT_3_OFFSET      0x00000648
#define RIU_AGCGAINSTAT_3_INDEX       0x00000192
#define RIU_AGCGAINSTAT_3_RESET       0x00000000

static inline u32 riu_agcgainstat_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCGAINSTAT_3_ADDR);
}

/* Field definitions */
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_5_EXTLNA_BIT    ((u32)0x10000000)
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_5_EXTLNA_POS    28
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_5_LNA_MASK    ((u32)0x0E000000)
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_5_LNA_LSB    25
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_5_LNA_WIDTH    ((u32)0x00000003)
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_5_VGA_MASK    ((u32)0x01F00000)
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_5_VGA_LSB    20
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_5_VGA_WIDTH    ((u32)0x00000005)
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_4_EXTLNA_BIT    ((u32)0x00040000)
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_4_EXTLNA_POS    18
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_4_LNA_MASK    ((u32)0x00038000)
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_4_LNA_LSB    15
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_4_LNA_WIDTH    ((u32)0x00000003)
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_4_VGA_MASK    ((u32)0x00007C00)
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_4_VGA_LSB    10
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_4_VGA_WIDTH    ((u32)0x00000005)
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_3_EXTLNA_BIT    ((u32)0x00000100)
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_3_EXTLNA_POS    8
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_3_LNA_MASK    ((u32)0x000000E0)
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_3_LNA_LSB    5
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_3_LNA_WIDTH    ((u32)0x00000003)
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_3_VGA_MASK    ((u32)0x0000001F)
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_3_VGA_LSB    0
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_3_VGA_WIDTH    ((u32)0x00000005)

#define RIU_AGCGAINSTAT_3_AGCRFGAIN_5_EXTLNA_RST    0x0
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_5_LNA_RST    0x0
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_5_VGA_RST    0x0
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_4_EXTLNA_RST    0x0
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_4_LNA_RST    0x0
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_4_VGA_RST    0x0
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_3_EXTLNA_RST    0x0
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_3_LNA_RST    0x0
#define RIU_AGCGAINSTAT_3_AGCRFGAIN_3_VGA_RST    0x0

static inline void riu_agcgainstat_3_unpack(struct cl_chip *chip, u8 *agcrfgain5_extlna, u8 *agcrfgain5_lna, u8 *agcrfgain5_vga, u8 *agcrfgain4_extlna, u8 *agcrfgain4_lna, u8 *agcrfgain4_vga, u8 *agcrfgain3_extlna, u8 *agcrfgain3_lna, u8 *agcrfgain3_vga)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_3_ADDR);

	*agcrfgain5_extlna = (local_val & ((u32)0x10000000)) >> 28;
	*agcrfgain5_lna = (local_val & ((u32)0x0E000000)) >> 25;
	*agcrfgain5_vga = (local_val & ((u32)0x01F00000)) >> 20;
	*agcrfgain4_extlna = (local_val & ((u32)0x00040000)) >> 18;
	*agcrfgain4_lna = (local_val & ((u32)0x00038000)) >> 15;
	*agcrfgain4_vga = (local_val & ((u32)0x00007C00)) >> 10;
	*agcrfgain3_extlna = (local_val & ((u32)0x00000100)) >> 8;
	*agcrfgain3_lna = (local_val & ((u32)0x000000E0)) >> 5;
	*agcrfgain3_vga = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u8 riu_agcgainstat_3_agcrfgain_5_extlna_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_3_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline u8 riu_agcgainstat_3_agcrfgain_5_lna_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_3_ADDR);

	return (u8)((local_val & ((u32)0x0E000000)) >> 25);
}

static inline u8 riu_agcgainstat_3_agcrfgain_5_vga_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_3_ADDR);

	return (u8)((local_val & ((u32)0x01F00000)) >> 20);
}

static inline u8 riu_agcgainstat_3_agcrfgain_4_extlna_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_3_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline u8 riu_agcgainstat_3_agcrfgain_4_lna_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_3_ADDR);

	return (u8)((local_val & ((u32)0x00038000)) >> 15);
}

static inline u8 riu_agcgainstat_3_agcrfgain_4_vga_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_3_ADDR);

	return (u8)((local_val & ((u32)0x00007C00)) >> 10);
}

static inline u8 riu_agcgainstat_3_agcrfgain_3_extlna_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_3_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline u8 riu_agcgainstat_3_agcrfgain_3_lna_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_3_ADDR);

	return (u8)((local_val & ((u32)0x000000E0)) >> 5);
}

static inline u8 riu_agcgainstat_3_agcrfgain_3_vga_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_3_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

/**
 * @brief DC_SCALE_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 DC_SCALE_SET2_160         0xEA
 *    23:16 DC_SCALE_SET2_80          0xEA
 *    15:08 DC_SCALE_SET2_40          0x44
 *    07:00 DC_SCALE_SET2_20          0x38
 * </pre>
 */
#define RIU_DC_SCALE_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000064C)
#define RIU_DC_SCALE_2_OFFSET      0x0000064C
#define RIU_DC_SCALE_2_INDEX       0x00000193
#define RIU_DC_SCALE_2_RESET       0xEAEA4438

static inline u32 riu_dc_scale_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DC_SCALE_2_ADDR);
}

static inline void riu_dc_scale_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_DC_SCALE_2_ADDR, value);
}

/* Field definitions */
#define RIU_DC_SCALE_2_DC_SCALE_SET_2_160_MASK    ((u32)0xFF000000)
#define RIU_DC_SCALE_2_DC_SCALE_SET_2_160_LSB    24
#define RIU_DC_SCALE_2_DC_SCALE_SET_2_160_WIDTH    ((u32)0x00000008)
#define RIU_DC_SCALE_2_DC_SCALE_SET_2_80_MASK    ((u32)0x00FF0000)
#define RIU_DC_SCALE_2_DC_SCALE_SET_2_80_LSB    16
#define RIU_DC_SCALE_2_DC_SCALE_SET_2_80_WIDTH    ((u32)0x00000008)
#define RIU_DC_SCALE_2_DC_SCALE_SET_2_40_MASK    ((u32)0x0000FF00)
#define RIU_DC_SCALE_2_DC_SCALE_SET_2_40_LSB    8
#define RIU_DC_SCALE_2_DC_SCALE_SET_2_40_WIDTH    ((u32)0x00000008)
#define RIU_DC_SCALE_2_DC_SCALE_SET_2_20_MASK    ((u32)0x000000FF)
#define RIU_DC_SCALE_2_DC_SCALE_SET_2_20_LSB    0
#define RIU_DC_SCALE_2_DC_SCALE_SET_2_20_WIDTH    ((u32)0x00000008)

#define RIU_DC_SCALE_2_DC_SCALE_SET_2_160_RST    0xEA
#define RIU_DC_SCALE_2_DC_SCALE_SET_2_80_RST    0xEA
#define RIU_DC_SCALE_2_DC_SCALE_SET_2_40_RST    0x44
#define RIU_DC_SCALE_2_DC_SCALE_SET_2_20_RST    0x38

static inline void riu_dc_scale_2_pack(struct cl_chip *chip, u8 dc_scale_set2_160, u8 dc_scale_set2_80, u8 dc_scale_set2_40, u8 dc_scale_set2_20)
{
	ASSERT_ERR_CHIP((((u32)dc_scale_set2_160 << 24) & ~((u32)0xFF000000)) == 0);
	ASSERT_ERR_CHIP((((u32)dc_scale_set2_80 << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)dc_scale_set2_40 << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)dc_scale_set2_20 << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_DC_SCALE_2_ADDR, ((u32)dc_scale_set2_160 << 24) | ((u32)dc_scale_set2_80 << 16) | ((u32)dc_scale_set2_40 << 8) | ((u32)dc_scale_set2_20 << 0));
}

static inline void riu_dc_scale_2_unpack(struct cl_chip *chip, u8 *dc_scale_set2_160, u8 *dc_scale_set2_80, u8 *dc_scale_set2_40, u8 *dc_scale_set2_20)
{
	u32 local_val = cl_reg_read(chip, RIU_DC_SCALE_2_ADDR);

	*dc_scale_set2_160 = (local_val & ((u32)0xFF000000)) >> 24;
	*dc_scale_set2_80 = (local_val & ((u32)0x00FF0000)) >> 16;
	*dc_scale_set2_40 = (local_val & ((u32)0x0000FF00)) >> 8;
	*dc_scale_set2_20 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_dc_scale_2_dc_scale_set_2_160_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DC_SCALE_2_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline void riu_dc_scale_2_dc_scale_set_2_160_setf(struct cl_chip *chip, u8 dcscaleset2160)
{
	ASSERT_ERR_CHIP((((u32)dcscaleset2160 << 24) & ~((u32)0xFF000000)) == 0);
	cl_reg_write(chip, RIU_DC_SCALE_2_ADDR, (cl_reg_read(chip, RIU_DC_SCALE_2_ADDR) & ~((u32)0xFF000000)) | ((u32)dcscaleset2160 << 24));
}

static inline u8 riu_dc_scale_2_dc_scale_set_2_80_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DC_SCALE_2_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_dc_scale_2_dc_scale_set_2_80_setf(struct cl_chip *chip, u8 dcscaleset280)
{
	ASSERT_ERR_CHIP((((u32)dcscaleset280 << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_DC_SCALE_2_ADDR, (cl_reg_read(chip, RIU_DC_SCALE_2_ADDR) & ~((u32)0x00FF0000)) | ((u32)dcscaleset280 << 16));
}

static inline u8 riu_dc_scale_2_dc_scale_set_2_40_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DC_SCALE_2_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_dc_scale_2_dc_scale_set_2_40_setf(struct cl_chip *chip, u8 dcscaleset240)
{
	ASSERT_ERR_CHIP((((u32)dcscaleset240 << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_DC_SCALE_2_ADDR, (cl_reg_read(chip, RIU_DC_SCALE_2_ADDR) & ~((u32)0x0000FF00)) | ((u32)dcscaleset240 << 8));
}

static inline u8 riu_dc_scale_2_dc_scale_set_2_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DC_SCALE_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_dc_scale_2_dc_scale_set_2_20_setf(struct cl_chip *chip, u8 dcscaleset220)
{
	ASSERT_ERR_CHIP((((u32)dcscaleset220 << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_DC_SCALE_2_ADDR, (cl_reg_read(chip, RIU_DC_SCALE_2_ADDR) & ~((u32)0x000000FF)) | ((u32)dcscaleset220 << 0));
}

/**
 * @brief TXFE_DELAY_LUT_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 TXFE_11_B_DLY_CHBW80      0xc0
 *    19:10 TXFE_11_B_DLY_CHBW40      0xc0
 *    09:00 TXFE_11_B_DLY_CHBW20      0xc0
 * </pre>
 */
#define RIU_TXFE_DELAY_LUT_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000650)
#define RIU_TXFE_DELAY_LUT_0_OFFSET      0x00000650
#define RIU_TXFE_DELAY_LUT_0_INDEX       0x00000194
#define RIU_TXFE_DELAY_LUT_0_RESET       0x0C0300C0

static inline u32 riu_txfe_delay_lut_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_TXFE_DELAY_LUT_0_ADDR);
}

static inline void riu_txfe_delay_lut_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_TXFE_DELAY_LUT_0_ADDR, value);
}

/* Field definitions */
#define RIU_TXFE_DELAY_LUT_0_TXFE_11_B_DLY_CHBW_80_MASK    ((u32)0x3FF00000)
#define RIU_TXFE_DELAY_LUT_0_TXFE_11_B_DLY_CHBW_80_LSB    20
#define RIU_TXFE_DELAY_LUT_0_TXFE_11_B_DLY_CHBW_80_WIDTH    ((u32)0x0000000A)
#define RIU_TXFE_DELAY_LUT_0_TXFE_11_B_DLY_CHBW_40_MASK    ((u32)0x000FFC00)
#define RIU_TXFE_DELAY_LUT_0_TXFE_11_B_DLY_CHBW_40_LSB    10
#define RIU_TXFE_DELAY_LUT_0_TXFE_11_B_DLY_CHBW_40_WIDTH    ((u32)0x0000000A)
#define RIU_TXFE_DELAY_LUT_0_TXFE_11_B_DLY_CHBW_20_MASK    ((u32)0x000003FF)
#define RIU_TXFE_DELAY_LUT_0_TXFE_11_B_DLY_CHBW_20_LSB    0
#define RIU_TXFE_DELAY_LUT_0_TXFE_11_B_DLY_CHBW_20_WIDTH    ((u32)0x0000000A)

#define RIU_TXFE_DELAY_LUT_0_TXFE_11_B_DLY_CHBW_80_RST    0xc0
#define RIU_TXFE_DELAY_LUT_0_TXFE_11_B_DLY_CHBW_40_RST    0xc0
#define RIU_TXFE_DELAY_LUT_0_TXFE_11_B_DLY_CHBW_20_RST    0xc0

static inline void riu_txfe_delay_lut_0_pack(struct cl_chip *chip, u16 txfe_11_b_dly_chbw80, u16 txfe_11_b_dly_chbw40, u16 txfe_11_b_dly_chbw20)
{
	ASSERT_ERR_CHIP((((u32)txfe_11_b_dly_chbw80 << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)txfe_11_b_dly_chbw40 << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)txfe_11_b_dly_chbw20 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_TXFE_DELAY_LUT_0_ADDR, ((u32)txfe_11_b_dly_chbw80 << 20) | ((u32)txfe_11_b_dly_chbw40 << 10) | ((u32)txfe_11_b_dly_chbw20 << 0));
}

static inline void riu_txfe_delay_lut_0_unpack(struct cl_chip *chip, u16 *txfe_11_b_dly_chbw80, u16 *txfe_11_b_dly_chbw40, u16 *txfe_11_b_dly_chbw20)
{
	u32 local_val = cl_reg_read(chip, RIU_TXFE_DELAY_LUT_0_ADDR);

	*txfe_11_b_dly_chbw80 = (local_val & ((u32)0x3FF00000)) >> 20;
	*txfe_11_b_dly_chbw40 = (local_val & ((u32)0x000FFC00)) >> 10;
	*txfe_11_b_dly_chbw20 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_txfe_delay_lut_0_txfe_11_b_dly_chbw_80_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_TXFE_DELAY_LUT_0_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_txfe_delay_lut_0_txfe_11_b_dly_chbw_80_setf(struct cl_chip *chip, u16 txfe11bdlychbw80)
{
	ASSERT_ERR_CHIP((((u32)txfe11bdlychbw80 << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_TXFE_DELAY_LUT_0_ADDR, (cl_reg_read(chip, RIU_TXFE_DELAY_LUT_0_ADDR) & ~((u32)0x3FF00000)) | ((u32)txfe11bdlychbw80 << 20));
}

static inline u16 riu_txfe_delay_lut_0_txfe_11_b_dly_chbw_40_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_TXFE_DELAY_LUT_0_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_txfe_delay_lut_0_txfe_11_b_dly_chbw_40_setf(struct cl_chip *chip, u16 txfe11bdlychbw40)
{
	ASSERT_ERR_CHIP((((u32)txfe11bdlychbw40 << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_TXFE_DELAY_LUT_0_ADDR, (cl_reg_read(chip, RIU_TXFE_DELAY_LUT_0_ADDR) & ~((u32)0x000FFC00)) | ((u32)txfe11bdlychbw40 << 10));
}

static inline u16 riu_txfe_delay_lut_0_txfe_11_b_dly_chbw_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_TXFE_DELAY_LUT_0_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_txfe_delay_lut_0_txfe_11_b_dly_chbw_20_setf(struct cl_chip *chip, u16 txfe11bdlychbw20)
{
	ASSERT_ERR_CHIP((((u32)txfe11bdlychbw20 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_TXFE_DELAY_LUT_0_ADDR, (cl_reg_read(chip, RIU_TXFE_DELAY_LUT_0_ADDR) & ~((u32)0x000003FF)) | ((u32)txfe11bdlychbw20 << 0));
}

/**
 * @brief TXFE_DELAY_LUT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 TXFE20_DLY_CHBW80         0x346
 *    19:10 TXFE20_DLY_CHBW40         0x320
 *    09:00 TXFE20_DLY_CHBW20         0x35c
 * </pre>
 */
#define RIU_TXFE_DELAY_LUT_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000654)
#define RIU_TXFE_DELAY_LUT_1_OFFSET      0x00000654
#define RIU_TXFE_DELAY_LUT_1_INDEX       0x00000195
#define RIU_TXFE_DELAY_LUT_1_RESET       0x346C835C

static inline u32 riu_txfe_delay_lut_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_TXFE_DELAY_LUT_1_ADDR);
}

static inline void riu_txfe_delay_lut_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_TXFE_DELAY_LUT_1_ADDR, value);
}

/* Field definitions */
#define RIU_TXFE_DELAY_LUT_1_TXFE_20_DLY_CHBW_80_MASK    ((u32)0x3FF00000)
#define RIU_TXFE_DELAY_LUT_1_TXFE_20_DLY_CHBW_80_LSB    20
#define RIU_TXFE_DELAY_LUT_1_TXFE_20_DLY_CHBW_80_WIDTH    ((u32)0x0000000A)
#define RIU_TXFE_DELAY_LUT_1_TXFE_20_DLY_CHBW_40_MASK    ((u32)0x000FFC00)
#define RIU_TXFE_DELAY_LUT_1_TXFE_20_DLY_CHBW_40_LSB    10
#define RIU_TXFE_DELAY_LUT_1_TXFE_20_DLY_CHBW_40_WIDTH    ((u32)0x0000000A)
#define RIU_TXFE_DELAY_LUT_1_TXFE_20_DLY_CHBW_20_MASK    ((u32)0x000003FF)
#define RIU_TXFE_DELAY_LUT_1_TXFE_20_DLY_CHBW_20_LSB    0
#define RIU_TXFE_DELAY_LUT_1_TXFE_20_DLY_CHBW_20_WIDTH    ((u32)0x0000000A)

#define RIU_TXFE_DELAY_LUT_1_TXFE_20_DLY_CHBW_80_RST    0x346
#define RIU_TXFE_DELAY_LUT_1_TXFE_20_DLY_CHBW_40_RST    0x320
#define RIU_TXFE_DELAY_LUT_1_TXFE_20_DLY_CHBW_20_RST    0x35c

static inline void riu_txfe_delay_lut_1_pack(struct cl_chip *chip, u16 txfe20_dly_chbw80, u16 txfe20_dly_chbw40, u16 txfe20_dly_chbw20)
{
	ASSERT_ERR_CHIP((((u32)txfe20_dly_chbw80 << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)txfe20_dly_chbw40 << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)txfe20_dly_chbw20 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_TXFE_DELAY_LUT_1_ADDR, ((u32)txfe20_dly_chbw80 << 20) | ((u32)txfe20_dly_chbw40 << 10) | ((u32)txfe20_dly_chbw20 << 0));
}

static inline void riu_txfe_delay_lut_1_unpack(struct cl_chip *chip, u16 *txfe20_dly_chbw80, u16 *txfe20_dly_chbw40, u16 *txfe20_dly_chbw20)
{
	u32 local_val = cl_reg_read(chip, RIU_TXFE_DELAY_LUT_1_ADDR);

	*txfe20_dly_chbw80 = (local_val & ((u32)0x3FF00000)) >> 20;
	*txfe20_dly_chbw40 = (local_val & ((u32)0x000FFC00)) >> 10;
	*txfe20_dly_chbw20 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_txfe_delay_lut_1_txfe_20_dly_chbw_80_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_TXFE_DELAY_LUT_1_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_txfe_delay_lut_1_txfe_20_dly_chbw_80_setf(struct cl_chip *chip, u16 txfe20dlychbw80)
{
	ASSERT_ERR_CHIP((((u32)txfe20dlychbw80 << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_TXFE_DELAY_LUT_1_ADDR, (cl_reg_read(chip, RIU_TXFE_DELAY_LUT_1_ADDR) & ~((u32)0x3FF00000)) | ((u32)txfe20dlychbw80 << 20));
}

static inline u16 riu_txfe_delay_lut_1_txfe_20_dly_chbw_40_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_TXFE_DELAY_LUT_1_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_txfe_delay_lut_1_txfe_20_dly_chbw_40_setf(struct cl_chip *chip, u16 txfe20dlychbw40)
{
	ASSERT_ERR_CHIP((((u32)txfe20dlychbw40 << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_TXFE_DELAY_LUT_1_ADDR, (cl_reg_read(chip, RIU_TXFE_DELAY_LUT_1_ADDR) & ~((u32)0x000FFC00)) | ((u32)txfe20dlychbw40 << 10));
}

static inline u16 riu_txfe_delay_lut_1_txfe_20_dly_chbw_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_TXFE_DELAY_LUT_1_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_txfe_delay_lut_1_txfe_20_dly_chbw_20_setf(struct cl_chip *chip, u16 txfe20dlychbw20)
{
	ASSERT_ERR_CHIP((((u32)txfe20dlychbw20 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_TXFE_DELAY_LUT_1_ADDR, (cl_reg_read(chip, RIU_TXFE_DELAY_LUT_1_ADDR) & ~((u32)0x000003FF)) | ((u32)txfe20dlychbw20 << 0));
}

/**
 * @brief TXFE_DELAY_LUT_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 TXFE80_DLY_CHBW80         0x131
 *    19:10 TXFE40_DLY_CHBW80         0x202
 *    09:00 TXFE40_DLY_CHBW40         0x1db
 * </pre>
 */
#define RIU_TXFE_DELAY_LUT_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000658)
#define RIU_TXFE_DELAY_LUT_2_OFFSET      0x00000658
#define RIU_TXFE_DELAY_LUT_2_INDEX       0x00000196
#define RIU_TXFE_DELAY_LUT_2_RESET       0x131809DB

static inline u32 riu_txfe_delay_lut_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_TXFE_DELAY_LUT_2_ADDR);
}

static inline void riu_txfe_delay_lut_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_TXFE_DELAY_LUT_2_ADDR, value);
}

/* Field definitions */
#define RIU_TXFE_DELAY_LUT_2_TXFE_80_DLY_CHBW_80_MASK    ((u32)0x3FF00000)
#define RIU_TXFE_DELAY_LUT_2_TXFE_80_DLY_CHBW_80_LSB    20
#define RIU_TXFE_DELAY_LUT_2_TXFE_80_DLY_CHBW_80_WIDTH    ((u32)0x0000000A)
#define RIU_TXFE_DELAY_LUT_2_TXFE_40_DLY_CHBW_80_MASK    ((u32)0x000FFC00)
#define RIU_TXFE_DELAY_LUT_2_TXFE_40_DLY_CHBW_80_LSB    10
#define RIU_TXFE_DELAY_LUT_2_TXFE_40_DLY_CHBW_80_WIDTH    ((u32)0x0000000A)
#define RIU_TXFE_DELAY_LUT_2_TXFE_40_DLY_CHBW_40_MASK    ((u32)0x000003FF)
#define RIU_TXFE_DELAY_LUT_2_TXFE_40_DLY_CHBW_40_LSB    0
#define RIU_TXFE_DELAY_LUT_2_TXFE_40_DLY_CHBW_40_WIDTH    ((u32)0x0000000A)

#define RIU_TXFE_DELAY_LUT_2_TXFE_80_DLY_CHBW_80_RST    0x131
#define RIU_TXFE_DELAY_LUT_2_TXFE_40_DLY_CHBW_80_RST    0x202
#define RIU_TXFE_DELAY_LUT_2_TXFE_40_DLY_CHBW_40_RST    0x1db

static inline void riu_txfe_delay_lut_2_pack(struct cl_chip *chip, u16 txfe80_dly_chbw80, u16 txfe40_dly_chbw80, u16 txfe40_dly_chbw40)
{
	ASSERT_ERR_CHIP((((u32)txfe80_dly_chbw80 << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)txfe40_dly_chbw80 << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)txfe40_dly_chbw40 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_TXFE_DELAY_LUT_2_ADDR, ((u32)txfe80_dly_chbw80 << 20) | ((u32)txfe40_dly_chbw80 << 10) | ((u32)txfe40_dly_chbw40 << 0));
}

static inline void riu_txfe_delay_lut_2_unpack(struct cl_chip *chip, u16 *txfe80_dly_chbw80, u16 *txfe40_dly_chbw80, u16 *txfe40_dly_chbw40)
{
	u32 local_val = cl_reg_read(chip, RIU_TXFE_DELAY_LUT_2_ADDR);

	*txfe80_dly_chbw80 = (local_val & ((u32)0x3FF00000)) >> 20;
	*txfe40_dly_chbw80 = (local_val & ((u32)0x000FFC00)) >> 10;
	*txfe40_dly_chbw40 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_txfe_delay_lut_2_txfe_80_dly_chbw_80_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_TXFE_DELAY_LUT_2_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_txfe_delay_lut_2_txfe_80_dly_chbw_80_setf(struct cl_chip *chip, u16 txfe80dlychbw80)
{
	ASSERT_ERR_CHIP((((u32)txfe80dlychbw80 << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_TXFE_DELAY_LUT_2_ADDR, (cl_reg_read(chip, RIU_TXFE_DELAY_LUT_2_ADDR) & ~((u32)0x3FF00000)) | ((u32)txfe80dlychbw80 << 20));
}

static inline u16 riu_txfe_delay_lut_2_txfe_40_dly_chbw_80_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_TXFE_DELAY_LUT_2_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_txfe_delay_lut_2_txfe_40_dly_chbw_80_setf(struct cl_chip *chip, u16 txfe40dlychbw80)
{
	ASSERT_ERR_CHIP((((u32)txfe40dlychbw80 << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_TXFE_DELAY_LUT_2_ADDR, (cl_reg_read(chip, RIU_TXFE_DELAY_LUT_2_ADDR) & ~((u32)0x000FFC00)) | ((u32)txfe40dlychbw80 << 10));
}

static inline u16 riu_txfe_delay_lut_2_txfe_40_dly_chbw_40_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_TXFE_DELAY_LUT_2_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_txfe_delay_lut_2_txfe_40_dly_chbw_40_setf(struct cl_chip *chip, u16 txfe40dlychbw40)
{
	ASSERT_ERR_CHIP((((u32)txfe40dlychbw40 << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_TXFE_DELAY_LUT_2_ADDR, (cl_reg_read(chip, RIU_TXFE_DELAY_LUT_2_ADDR) & ~((u32)0x000003FF)) | ((u32)txfe40dlychbw40 << 0));
}

/**
 * @brief RWNXIQCTRL_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    13    TXIQSWAPPATH4             0
 *    12    TXIQSWAPPATH5             0
 *    08    RXIQSWAPPATH5             0
 *    07    TXIQDELPATHQ5             0
 *    06    TXIQDELPATHI5             0
 *    05    TXIQDELPATHQ4             0
 *    04    TXIQDELPATHI4             0
 *    01    RXIQDELPATHQ5             0
 *    00    RXIQDELPATHI5             0
 * </pre>
 */
#define RIU_RWNXIQCTRL_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000065C)
#define RIU_RWNXIQCTRL_2_OFFSET      0x0000065C
#define RIU_RWNXIQCTRL_2_INDEX       0x00000197
#define RIU_RWNXIQCTRL_2_RESET       0x00000000

static inline u32 riu_rwnxiqctrl_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR);
}

static inline void riu_rwnxiqctrl_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXIQCTRL_2_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXIQCTRL_2_TXIQSWAPPATH_4_BIT    ((u32)0x00002000)
#define RIU_RWNXIQCTRL_2_TXIQSWAPPATH_4_POS    13
#define RIU_RWNXIQCTRL_2_TXIQSWAPPATH_5_BIT    ((u32)0x00001000)
#define RIU_RWNXIQCTRL_2_TXIQSWAPPATH_5_POS    12
#define RIU_RWNXIQCTRL_2_RXIQSWAPPATH_5_BIT    ((u32)0x00000100)
#define RIU_RWNXIQCTRL_2_RXIQSWAPPATH_5_POS    8
#define RIU_RWNXIQCTRL_2_TXIQDELPATHQ_5_BIT    ((u32)0x00000080)
#define RIU_RWNXIQCTRL_2_TXIQDELPATHQ_5_POS    7
#define RIU_RWNXIQCTRL_2_TXIQDELPATHI_5_BIT    ((u32)0x00000040)
#define RIU_RWNXIQCTRL_2_TXIQDELPATHI_5_POS    6
#define RIU_RWNXIQCTRL_2_TXIQDELPATHQ_4_BIT    ((u32)0x00000020)
#define RIU_RWNXIQCTRL_2_TXIQDELPATHQ_4_POS    5
#define RIU_RWNXIQCTRL_2_TXIQDELPATHI_4_BIT    ((u32)0x00000010)
#define RIU_RWNXIQCTRL_2_TXIQDELPATHI_4_POS    4
#define RIU_RWNXIQCTRL_2_RXIQDELPATHQ_5_BIT    ((u32)0x00000002)
#define RIU_RWNXIQCTRL_2_RXIQDELPATHQ_5_POS    1
#define RIU_RWNXIQCTRL_2_RXIQDELPATHI_5_BIT    ((u32)0x00000001)
#define RIU_RWNXIQCTRL_2_RXIQDELPATHI_5_POS    0

#define RIU_RWNXIQCTRL_2_TXIQSWAPPATH_4_RST    0x0
#define RIU_RWNXIQCTRL_2_TXIQSWAPPATH_5_RST    0x0
#define RIU_RWNXIQCTRL_2_RXIQSWAPPATH_5_RST    0x0
#define RIU_RWNXIQCTRL_2_TXIQDELPATHQ_5_RST    0x0
#define RIU_RWNXIQCTRL_2_TXIQDELPATHI_5_RST    0x0
#define RIU_RWNXIQCTRL_2_TXIQDELPATHQ_4_RST    0x0
#define RIU_RWNXIQCTRL_2_TXIQDELPATHI_4_RST    0x0
#define RIU_RWNXIQCTRL_2_RXIQDELPATHQ_5_RST    0x0
#define RIU_RWNXIQCTRL_2_RXIQDELPATHI_5_RST    0x0

static inline void riu_rwnxiqctrl_2_pack(struct cl_chip *chip, u8 txiqswappath4, u8 txiqswappath5, u8 rxiqswappath5, u8 txiqdelpathq5, u8 txiqdelpathi5, u8 txiqdelpathq4, u8 txiqdelpathi4, u8 rxiqdelpathq5, u8 rxiqdelpathi5)
{
	ASSERT_ERR_CHIP((((u32)txiqswappath4 << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqswappath5 << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqswappath5 << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqdelpathq5 << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqdelpathi5 << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqdelpathq4 << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)txiqdelpathi4 << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqdelpathq5 << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)rxiqdelpathi5 << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_2_ADDR, ((u32)txiqswappath4 << 13) | ((u32)txiqswappath5 << 12) | ((u32)rxiqswappath5 << 8) | ((u32)txiqdelpathq5 << 7) | ((u32)txiqdelpathi5 << 6) | ((u32)txiqdelpathq4 << 5) | ((u32)txiqdelpathi4 << 4) | ((u32)rxiqdelpathq5 << 1) | ((u32)rxiqdelpathi5 << 0));
}

static inline void riu_rwnxiqctrl_2_unpack(struct cl_chip *chip, u8 *txiqswappath4, u8 *txiqswappath5, u8 *rxiqswappath5, u8 *txiqdelpathq5, u8 *txiqdelpathi5, u8 *txiqdelpathq4, u8 *txiqdelpathi4, u8 *rxiqdelpathq5, u8 *rxiqdelpathi5)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR);

	*txiqswappath4 = (local_val & ((u32)0x00002000)) >> 13;
	*txiqswappath5 = (local_val & ((u32)0x00001000)) >> 12;
	*rxiqswappath5 = (local_val & ((u32)0x00000100)) >> 8;
	*txiqdelpathq5 = (local_val & ((u32)0x00000080)) >> 7;
	*txiqdelpathi5 = (local_val & ((u32)0x00000040)) >> 6;
	*txiqdelpathq4 = (local_val & ((u32)0x00000020)) >> 5;
	*txiqdelpathi4 = (local_val & ((u32)0x00000010)) >> 4;
	*rxiqdelpathq5 = (local_val & ((u32)0x00000002)) >> 1;
	*rxiqdelpathi5 = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_rwnxiqctrl_2_txiqswappath_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_rwnxiqctrl_2_txiqswappath_4_setf(struct cl_chip *chip, u8 txiqswappath4)
{
	ASSERT_ERR_CHIP((((u32)txiqswappath4 << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_2_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR) & ~((u32)0x00002000)) | ((u32)txiqswappath4 << 13));
}

static inline u8 riu_rwnxiqctrl_2_txiqswappath_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void riu_rwnxiqctrl_2_txiqswappath_5_setf(struct cl_chip *chip, u8 txiqswappath5)
{
	ASSERT_ERR_CHIP((((u32)txiqswappath5 << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_2_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR) & ~((u32)0x00001000)) | ((u32)txiqswappath5 << 12));
}

static inline u8 riu_rwnxiqctrl_2_rxiqswappath_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void riu_rwnxiqctrl_2_rxiqswappath_5_setf(struct cl_chip *chip, u8 rxiqswappath5)
{
	ASSERT_ERR_CHIP((((u32)rxiqswappath5 << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_2_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR) & ~((u32)0x00000100)) | ((u32)rxiqswappath5 << 8));
}

static inline u8 riu_rwnxiqctrl_2_txiqdelpathq_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void riu_rwnxiqctrl_2_txiqdelpathq_5_setf(struct cl_chip *chip, u8 txiqdelpathq5)
{
	ASSERT_ERR_CHIP((((u32)txiqdelpathq5 << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_2_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR) & ~((u32)0x00000080)) | ((u32)txiqdelpathq5 << 7));
}

static inline u8 riu_rwnxiqctrl_2_txiqdelpathi_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void riu_rwnxiqctrl_2_txiqdelpathi_5_setf(struct cl_chip *chip, u8 txiqdelpathi5)
{
	ASSERT_ERR_CHIP((((u32)txiqdelpathi5 << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_2_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR) & ~((u32)0x00000040)) | ((u32)txiqdelpathi5 << 6));
}

static inline u8 riu_rwnxiqctrl_2_txiqdelpathq_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void riu_rwnxiqctrl_2_txiqdelpathq_4_setf(struct cl_chip *chip, u8 txiqdelpathq4)
{
	ASSERT_ERR_CHIP((((u32)txiqdelpathq4 << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_2_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR) & ~((u32)0x00000020)) | ((u32)txiqdelpathq4 << 5));
}

static inline u8 riu_rwnxiqctrl_2_txiqdelpathi_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void riu_rwnxiqctrl_2_txiqdelpathi_4_setf(struct cl_chip *chip, u8 txiqdelpathi4)
{
	ASSERT_ERR_CHIP((((u32)txiqdelpathi4 << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_2_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR) & ~((u32)0x00000010)) | ((u32)txiqdelpathi4 << 4));
}

static inline u8 riu_rwnxiqctrl_2_rxiqdelpathq_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void riu_rwnxiqctrl_2_rxiqdelpathq_5_setf(struct cl_chip *chip, u8 rxiqdelpathq5)
{
	ASSERT_ERR_CHIP((((u32)rxiqdelpathq5 << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_2_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR) & ~((u32)0x00000002)) | ((u32)rxiqdelpathq5 << 1));
}

static inline u8 riu_rwnxiqctrl_2_rxiqdelpathi_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_rwnxiqctrl_2_rxiqdelpathi_5_setf(struct cl_chip *chip, u8 rxiqdelpathi5)
{
	ASSERT_ERR_CHIP((((u32)rxiqdelpathi5 << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RWNXIQCTRL_2_ADDR, (cl_reg_read(chip, RIU_RWNXIQCTRL_2_ADDR) & ~((u32)0x00000001)) | ((u32)rxiqdelpathi5 << 0));
}

/**
 * @brief RWNXFECTRL_5 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 TX160_DIGGAINLIN4         0x20
 *    22:16 TX80_DIGGAINLIN4          0x20
 *    14:08 TX40_DIGGAINLIN4          0x20
 *    06:00 TX20_DIGGAINLIN4          0x20
 * </pre>
 */
#define RIU_RWNXFECTRL_5_ADDR        (REG_RIU_BASE_ADDR + 0x00000660)
#define RIU_RWNXFECTRL_5_OFFSET      0x00000660
#define RIU_RWNXFECTRL_5_INDEX       0x00000198
#define RIU_RWNXFECTRL_5_RESET       0x20202020

static inline u32 riu_rwnxfectrl_5_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXFECTRL_5_ADDR);
}

static inline void riu_rwnxfectrl_5_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXFECTRL_5_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXFECTRL_5_TX_160_DIGGAINLIN_4_MASK    ((u32)0x7F000000)
#define RIU_RWNXFECTRL_5_TX_160_DIGGAINLIN_4_LSB    24
#define RIU_RWNXFECTRL_5_TX_160_DIGGAINLIN_4_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_5_TX_80_DIGGAINLIN_4_MASK    ((u32)0x007F0000)
#define RIU_RWNXFECTRL_5_TX_80_DIGGAINLIN_4_LSB    16
#define RIU_RWNXFECTRL_5_TX_80_DIGGAINLIN_4_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_5_TX_40_DIGGAINLIN_4_MASK    ((u32)0x00007F00)
#define RIU_RWNXFECTRL_5_TX_40_DIGGAINLIN_4_LSB    8
#define RIU_RWNXFECTRL_5_TX_40_DIGGAINLIN_4_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_5_TX_20_DIGGAINLIN_4_MASK    ((u32)0x0000007F)
#define RIU_RWNXFECTRL_5_TX_20_DIGGAINLIN_4_LSB    0
#define RIU_RWNXFECTRL_5_TX_20_DIGGAINLIN_4_WIDTH    ((u32)0x00000007)

#define RIU_RWNXFECTRL_5_TX_160_DIGGAINLIN_4_RST    0x20
#define RIU_RWNXFECTRL_5_TX_80_DIGGAINLIN_4_RST    0x20
#define RIU_RWNXFECTRL_5_TX_40_DIGGAINLIN_4_RST    0x20
#define RIU_RWNXFECTRL_5_TX_20_DIGGAINLIN_4_RST    0x20

static inline void riu_rwnxfectrl_5_pack(struct cl_chip *chip, u8 tx160_diggainlin4, u8 tx80_diggainlin4, u8 tx40_diggainlin4, u8 tx20_diggainlin4)
{
	ASSERT_ERR_CHIP((((u32)tx160_diggainlin4 << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)tx80_diggainlin4 << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)tx40_diggainlin4 << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)tx20_diggainlin4 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_5_ADDR, ((u32)tx160_diggainlin4 << 24) | ((u32)tx80_diggainlin4 << 16) | ((u32)tx40_diggainlin4 << 8) | ((u32)tx20_diggainlin4 << 0));
}

static inline void riu_rwnxfectrl_5_unpack(struct cl_chip *chip, u8 *tx160_diggainlin4, u8 *tx80_diggainlin4, u8 *tx40_diggainlin4, u8 *tx20_diggainlin4)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_5_ADDR);

	*tx160_diggainlin4 = (local_val & ((u32)0x7F000000)) >> 24;
	*tx80_diggainlin4 = (local_val & ((u32)0x007F0000)) >> 16;
	*tx40_diggainlin4 = (local_val & ((u32)0x00007F00)) >> 8;
	*tx20_diggainlin4 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxfectrl_5_tx_160_diggainlin_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_5_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxfectrl_5_tx_160_diggainlin_4_setf(struct cl_chip *chip, u8 tx160diggainlin4)
{
	ASSERT_ERR_CHIP((((u32)tx160diggainlin4 << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_5_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_5_ADDR) & ~((u32)0x7F000000)) | ((u32)tx160diggainlin4 << 24));
}

static inline u8 riu_rwnxfectrl_5_tx_80_diggainlin_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_5_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxfectrl_5_tx_80_diggainlin_4_setf(struct cl_chip *chip, u8 tx80diggainlin4)
{
	ASSERT_ERR_CHIP((((u32)tx80diggainlin4 << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_5_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_5_ADDR) & ~((u32)0x007F0000)) | ((u32)tx80diggainlin4 << 16));
}

static inline u8 riu_rwnxfectrl_5_tx_40_diggainlin_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_5_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxfectrl_5_tx_40_diggainlin_4_setf(struct cl_chip *chip, u8 tx40diggainlin4)
{
	ASSERT_ERR_CHIP((((u32)tx40diggainlin4 << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_5_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_5_ADDR) & ~((u32)0x00007F00)) | ((u32)tx40diggainlin4 << 8));
}

static inline u8 riu_rwnxfectrl_5_tx_20_diggainlin_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_5_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxfectrl_5_tx_20_diggainlin_4_setf(struct cl_chip *chip, u8 tx20diggainlin4)
{
	ASSERT_ERR_CHIP((((u32)tx20diggainlin4 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_5_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_5_ADDR) & ~((u32)0x0000007F)) | ((u32)tx20diggainlin4 << 0));
}

/**
 * @brief RWNXFECTRL_6 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 TX160_DIGGAINLIN5         0x20
 *    22:16 TX80_DIGGAINLIN5          0x20
 *    14:08 TX40_DIGGAINLIN5          0x20
 *    06:00 TX20_DIGGAINLIN5          0x20
 * </pre>
 */
#define RIU_RWNXFECTRL_6_ADDR        (REG_RIU_BASE_ADDR + 0x00000664)
#define RIU_RWNXFECTRL_6_OFFSET      0x00000664
#define RIU_RWNXFECTRL_6_INDEX       0x00000199
#define RIU_RWNXFECTRL_6_RESET       0x20202020

static inline u32 riu_rwnxfectrl_6_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXFECTRL_6_ADDR);
}

static inline void riu_rwnxfectrl_6_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXFECTRL_6_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXFECTRL_6_TX_160_DIGGAINLIN_5_MASK    ((u32)0x7F000000)
#define RIU_RWNXFECTRL_6_TX_160_DIGGAINLIN_5_LSB    24
#define RIU_RWNXFECTRL_6_TX_160_DIGGAINLIN_5_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_6_TX_80_DIGGAINLIN_5_MASK    ((u32)0x007F0000)
#define RIU_RWNXFECTRL_6_TX_80_DIGGAINLIN_5_LSB    16
#define RIU_RWNXFECTRL_6_TX_80_DIGGAINLIN_5_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_6_TX_40_DIGGAINLIN_5_MASK    ((u32)0x00007F00)
#define RIU_RWNXFECTRL_6_TX_40_DIGGAINLIN_5_LSB    8
#define RIU_RWNXFECTRL_6_TX_40_DIGGAINLIN_5_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_6_TX_20_DIGGAINLIN_5_MASK    ((u32)0x0000007F)
#define RIU_RWNXFECTRL_6_TX_20_DIGGAINLIN_5_LSB    0
#define RIU_RWNXFECTRL_6_TX_20_DIGGAINLIN_5_WIDTH    ((u32)0x00000007)

#define RIU_RWNXFECTRL_6_TX_160_DIGGAINLIN_5_RST    0x20
#define RIU_RWNXFECTRL_6_TX_80_DIGGAINLIN_5_RST    0x20
#define RIU_RWNXFECTRL_6_TX_40_DIGGAINLIN_5_RST    0x20
#define RIU_RWNXFECTRL_6_TX_20_DIGGAINLIN_5_RST    0x20

static inline void riu_rwnxfectrl_6_pack(struct cl_chip *chip, u8 tx160_diggainlin5, u8 tx80_diggainlin5, u8 tx40_diggainlin5, u8 tx20_diggainlin5)
{
	ASSERT_ERR_CHIP((((u32)tx160_diggainlin5 << 24) & ~((u32)0x7F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)tx80_diggainlin5 << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)tx40_diggainlin5 << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)tx20_diggainlin5 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_6_ADDR, ((u32)tx160_diggainlin5 << 24) | ((u32)tx80_diggainlin5 << 16) | ((u32)tx40_diggainlin5 << 8) | ((u32)tx20_diggainlin5 << 0));
}

static inline void riu_rwnxfectrl_6_unpack(struct cl_chip *chip, u8 *tx160_diggainlin5, u8 *tx80_diggainlin5, u8 *tx40_diggainlin5, u8 *tx20_diggainlin5)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_6_ADDR);

	*tx160_diggainlin5 = (local_val & ((u32)0x7F000000)) >> 24;
	*tx80_diggainlin5 = (local_val & ((u32)0x007F0000)) >> 16;
	*tx40_diggainlin5 = (local_val & ((u32)0x00007F00)) >> 8;
	*tx20_diggainlin5 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxfectrl_6_tx_160_diggainlin_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_6_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline void riu_rwnxfectrl_6_tx_160_diggainlin_5_setf(struct cl_chip *chip, u8 tx160diggainlin5)
{
	ASSERT_ERR_CHIP((((u32)tx160diggainlin5 << 24) & ~((u32)0x7F000000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_6_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_6_ADDR) & ~((u32)0x7F000000)) | ((u32)tx160diggainlin5 << 24));
}

static inline u8 riu_rwnxfectrl_6_tx_80_diggainlin_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_6_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_rwnxfectrl_6_tx_80_diggainlin_5_setf(struct cl_chip *chip, u8 tx80diggainlin5)
{
	ASSERT_ERR_CHIP((((u32)tx80diggainlin5 << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_6_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_6_ADDR) & ~((u32)0x007F0000)) | ((u32)tx80diggainlin5 << 16));
}

static inline u8 riu_rwnxfectrl_6_tx_40_diggainlin_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_6_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxfectrl_6_tx_40_diggainlin_5_setf(struct cl_chip *chip, u8 tx40diggainlin5)
{
	ASSERT_ERR_CHIP((((u32)tx40diggainlin5 << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_6_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_6_ADDR) & ~((u32)0x00007F00)) | ((u32)tx40diggainlin5 << 8));
}

static inline u8 riu_rwnxfectrl_6_tx_20_diggainlin_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_6_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxfectrl_6_tx_20_diggainlin_5_setf(struct cl_chip *chip, u8 tx20diggainlin5)
{
	ASSERT_ERR_CHIP((((u32)tx20diggainlin5 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_6_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_6_ADDR) & ~((u32)0x0000007F)) | ((u32)tx20diggainlin5 << 0));
}

/**
 * @brief RWNXFECTRL_7 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:25 FECFSCTRL                 0x0
 *    24    DSPEXTCTRLEN              0
 *    23:16 EXTFECTRL                 0x0
 *    15    DSPCFSCTRLEN              0
 *    14:08 BTXDIGGAINLIN5            0x20
 *    06:00 BTXDIGGAINLIN4            0x20
 * </pre>
 */
#define RIU_RWNXFECTRL_7_ADDR        (REG_RIU_BASE_ADDR + 0x00000668)
#define RIU_RWNXFECTRL_7_OFFSET      0x00000668
#define RIU_RWNXFECTRL_7_INDEX       0x0000019A
#define RIU_RWNXFECTRL_7_RESET       0x00002020

static inline u32 riu_rwnxfectrl_7_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RWNXFECTRL_7_ADDR);
}

static inline void riu_rwnxfectrl_7_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RWNXFECTRL_7_ADDR, value);
}

/* Field definitions */
#define RIU_RWNXFECTRL_7_FECFSCTRL_MASK     ((u32)0xFE000000)
#define RIU_RWNXFECTRL_7_FECFSCTRL_LSB      25
#define RIU_RWNXFECTRL_7_FECFSCTRL_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_7_DSPEXTCTRLEN_BIT    ((u32)0x01000000)
#define RIU_RWNXFECTRL_7_DSPEXTCTRLEN_POS    24
#define RIU_RWNXFECTRL_7_EXTFECTRL_MASK     ((u32)0x00FF0000)
#define RIU_RWNXFECTRL_7_EXTFECTRL_LSB      16
#define RIU_RWNXFECTRL_7_EXTFECTRL_WIDTH    ((u32)0x00000008)
#define RIU_RWNXFECTRL_7_DSPCFSCTRLEN_BIT    ((u32)0x00008000)
#define RIU_RWNXFECTRL_7_DSPCFSCTRLEN_POS    15
#define RIU_RWNXFECTRL_7_BTXDIGGAINLIN_5_MASK    ((u32)0x00007F00)
#define RIU_RWNXFECTRL_7_BTXDIGGAINLIN_5_LSB    8
#define RIU_RWNXFECTRL_7_BTXDIGGAINLIN_5_WIDTH    ((u32)0x00000007)
#define RIU_RWNXFECTRL_7_BTXDIGGAINLIN_4_MASK    ((u32)0x0000007F)
#define RIU_RWNXFECTRL_7_BTXDIGGAINLIN_4_LSB    0
#define RIU_RWNXFECTRL_7_BTXDIGGAINLIN_4_WIDTH    ((u32)0x00000007)

#define RIU_RWNXFECTRL_7_FECFSCTRL_RST      0x0
#define RIU_RWNXFECTRL_7_DSPEXTCTRLEN_RST    0x0
#define RIU_RWNXFECTRL_7_EXTFECTRL_RST      0x0
#define RIU_RWNXFECTRL_7_DSPCFSCTRLEN_RST    0x0
#define RIU_RWNXFECTRL_7_BTXDIGGAINLIN_5_RST    0x20
#define RIU_RWNXFECTRL_7_BTXDIGGAINLIN_4_RST    0x20

static inline void riu_rwnxfectrl_7_pack(struct cl_chip *chip, u8 fecfsctrl, u8 dspextctrlen, u8 extfectrl, u8 dspcfsctrlen, u8 btxdiggainlin5, u8 btxdiggainlin4)
{
	ASSERT_ERR_CHIP((((u32)fecfsctrl << 25) & ~((u32)0xFE000000)) == 0);
	ASSERT_ERR_CHIP((((u32)dspextctrlen << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)extfectrl << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)dspcfsctrlen << 15) & ~((u32)0x00008000)) == 0);
	ASSERT_ERR_CHIP((((u32)btxdiggainlin5 << 8) & ~((u32)0x00007F00)) == 0);
	ASSERT_ERR_CHIP((((u32)btxdiggainlin4 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_7_ADDR, ((u32)fecfsctrl << 25) | ((u32)dspextctrlen << 24) | ((u32)extfectrl << 16) | ((u32)dspcfsctrlen << 15) | ((u32)btxdiggainlin5 << 8) | ((u32)btxdiggainlin4 << 0));
}

static inline void riu_rwnxfectrl_7_unpack(struct cl_chip *chip, u8 *fecfsctrl, u8 *dspextctrlen, u8 *extfectrl, u8 *dspcfsctrlen, u8 *btxdiggainlin5, u8 *btxdiggainlin4)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_7_ADDR);

	*fecfsctrl = (local_val & ((u32)0xFE000000)) >> 25;
	*dspextctrlen = (local_val & ((u32)0x01000000)) >> 24;
	*extfectrl = (local_val & ((u32)0x00FF0000)) >> 16;
	*dspcfsctrlen = (local_val & ((u32)0x00008000)) >> 15;
	*btxdiggainlin5 = (local_val & ((u32)0x00007F00)) >> 8;
	*btxdiggainlin4 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_rwnxfectrl_7_fecfsctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_7_ADDR);

	return (u8)((local_val & ((u32)0xFE000000)) >> 25);
}

static inline void riu_rwnxfectrl_7_fecfsctrl_setf(struct cl_chip *chip, u8 fecfsctrl)
{
	ASSERT_ERR_CHIP((((u32)fecfsctrl << 25) & ~((u32)0xFE000000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_7_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_7_ADDR) & ~((u32)0xFE000000)) | ((u32)fecfsctrl << 25));
}

static inline u8 riu_rwnxfectrl_7_dspextctrlen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_7_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void riu_rwnxfectrl_7_dspextctrlen_setf(struct cl_chip *chip, u8 dspextctrlen)
{
	ASSERT_ERR_CHIP((((u32)dspextctrlen << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_7_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_7_ADDR) & ~((u32)0x01000000)) | ((u32)dspextctrlen << 24));
}

static inline u8 riu_rwnxfectrl_7_extfectrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_7_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_rwnxfectrl_7_extfectrl_setf(struct cl_chip *chip, u8 extfectrl)
{
	ASSERT_ERR_CHIP((((u32)extfectrl << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_7_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_7_ADDR) & ~((u32)0x00FF0000)) | ((u32)extfectrl << 16));
}

static inline u8 riu_rwnxfectrl_7_dspcfsctrlen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_7_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline void riu_rwnxfectrl_7_dspcfsctrlen_setf(struct cl_chip *chip, u8 dspcfsctrlen)
{
	ASSERT_ERR_CHIP((((u32)dspcfsctrlen << 15) & ~((u32)0x00008000)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_7_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_7_ADDR) & ~((u32)0x00008000)) | ((u32)dspcfsctrlen << 15));
}

static inline u8 riu_rwnxfectrl_7_btxdiggainlin_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_7_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline void riu_rwnxfectrl_7_btxdiggainlin_5_setf(struct cl_chip *chip, u8 btxdiggainlin5)
{
	ASSERT_ERR_CHIP((((u32)btxdiggainlin5 << 8) & ~((u32)0x00007F00)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_7_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_7_ADDR) & ~((u32)0x00007F00)) | ((u32)btxdiggainlin5 << 8));
}

static inline u8 riu_rwnxfectrl_7_btxdiggainlin_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RWNXFECTRL_7_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_rwnxfectrl_7_btxdiggainlin_4_setf(struct cl_chip *chip, u8 btxdiggainlin4)
{
	ASSERT_ERR_CHIP((((u32)btxdiggainlin4 << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_RWNXFECTRL_7_ADDR, (cl_reg_read(chip, RIU_RWNXFECTRL_7_ADDR) & ~((u32)0x0000007F)) | ((u32)btxdiggainlin4 << 0));
}

/**
 * @brief AGCGAINSTAT_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 AGCRFGAIN5                0x0
 *    23:16 AGCRFGAIN4                0x0
 *    15:08 AGCGAIN5                  0x0
 *    07:00 AGCGAIN4                  0x0
 * </pre>
 */
#define RIU_AGCGAINSTAT_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000066C)
#define RIU_AGCGAINSTAT_2_OFFSET      0x0000066C
#define RIU_AGCGAINSTAT_2_INDEX       0x0000019B
#define RIU_AGCGAINSTAT_2_RESET       0x00000000

static inline u32 riu_agcgainstat_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCGAINSTAT_2_ADDR);
}

/* Field definitions */
#define RIU_AGCGAINSTAT_2_AGCRFGAIN_5_MASK    ((u32)0xFF000000)
#define RIU_AGCGAINSTAT_2_AGCRFGAIN_5_LSB    24
#define RIU_AGCGAINSTAT_2_AGCRFGAIN_5_WIDTH    ((u32)0x00000008)
#define RIU_AGCGAINSTAT_2_AGCRFGAIN_4_MASK    ((u32)0x00FF0000)
#define RIU_AGCGAINSTAT_2_AGCRFGAIN_4_LSB    16
#define RIU_AGCGAINSTAT_2_AGCRFGAIN_4_WIDTH    ((u32)0x00000008)
#define RIU_AGCGAINSTAT_2_AGCGAIN_5_MASK    ((u32)0x0000FF00)
#define RIU_AGCGAINSTAT_2_AGCGAIN_5_LSB     8
#define RIU_AGCGAINSTAT_2_AGCGAIN_5_WIDTH    ((u32)0x00000008)
#define RIU_AGCGAINSTAT_2_AGCGAIN_4_MASK    ((u32)0x000000FF)
#define RIU_AGCGAINSTAT_2_AGCGAIN_4_LSB     0
#define RIU_AGCGAINSTAT_2_AGCGAIN_4_WIDTH    ((u32)0x00000008)

#define RIU_AGCGAINSTAT_2_AGCRFGAIN_5_RST    0x0
#define RIU_AGCGAINSTAT_2_AGCRFGAIN_4_RST    0x0
#define RIU_AGCGAINSTAT_2_AGCGAIN_5_RST     0x0
#define RIU_AGCGAINSTAT_2_AGCGAIN_4_RST     0x0

static inline void riu_agcgainstat_2_unpack(struct cl_chip *chip, u8 *agcrfgain5, u8 *agcrfgain4, u8 *agcgain5, u8 *agcgain4)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_2_ADDR);

	*agcrfgain5 = (local_val & ((u32)0xFF000000)) >> 24;
	*agcrfgain4 = (local_val & ((u32)0x00FF0000)) >> 16;
	*agcgain5 = (local_val & ((u32)0x0000FF00)) >> 8;
	*agcgain4 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_agcgainstat_2_agcrfgain_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_agcgainstat_2_agcrfgain_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_agcgainstat_2_agcgain_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_agcgainstat_2_agcgain_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCGAINSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief AGCADCPOWSTAT_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 INBDPOW20_PDBM5           0x0
 *    23:16 INBDPOW20_PDBM4           0x0
 *    14:08 ADCPOWDBV5                0x0
 *    06:00 ADCPOWDBV4                0x0
 * </pre>
 */
#define RIU_AGCADCPOWSTAT_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000670)
#define RIU_AGCADCPOWSTAT_2_OFFSET      0x00000670
#define RIU_AGCADCPOWSTAT_2_INDEX       0x0000019C
#define RIU_AGCADCPOWSTAT_2_RESET       0x00000000

static inline u32 riu_agcadcpowstat_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCADCPOWSTAT_2_ADDR);
}

/* Field definitions */
#define RIU_AGCADCPOWSTAT_2_INBDPOW_20_PDBM_5_MASK    ((u32)0xFF000000)
#define RIU_AGCADCPOWSTAT_2_INBDPOW_20_PDBM_5_LSB    24
#define RIU_AGCADCPOWSTAT_2_INBDPOW_20_PDBM_5_WIDTH    ((u32)0x00000008)
#define RIU_AGCADCPOWSTAT_2_INBDPOW_20_PDBM_4_MASK    ((u32)0x00FF0000)
#define RIU_AGCADCPOWSTAT_2_INBDPOW_20_PDBM_4_LSB    16
#define RIU_AGCADCPOWSTAT_2_INBDPOW_20_PDBM_4_WIDTH    ((u32)0x00000008)
#define RIU_AGCADCPOWSTAT_2_ADCPOWDBV_5_MASK    ((u32)0x00007F00)
#define RIU_AGCADCPOWSTAT_2_ADCPOWDBV_5_LSB    8
#define RIU_AGCADCPOWSTAT_2_ADCPOWDBV_5_WIDTH    ((u32)0x00000007)
#define RIU_AGCADCPOWSTAT_2_ADCPOWDBV_4_MASK    ((u32)0x0000007F)
#define RIU_AGCADCPOWSTAT_2_ADCPOWDBV_4_LSB    0
#define RIU_AGCADCPOWSTAT_2_ADCPOWDBV_4_WIDTH    ((u32)0x00000007)

#define RIU_AGCADCPOWSTAT_2_INBDPOW_20_PDBM_5_RST    0x0
#define RIU_AGCADCPOWSTAT_2_INBDPOW_20_PDBM_4_RST    0x0
#define RIU_AGCADCPOWSTAT_2_ADCPOWDBV_5_RST    0x0
#define RIU_AGCADCPOWSTAT_2_ADCPOWDBV_4_RST    0x0

static inline void riu_agcadcpowstat_2_unpack(struct cl_chip *chip, u8 *inbdpow20_pdbm5, u8 *inbdpow20_pdbm4, u8 *adcpowdbv5, u8 *adcpowdbv4)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCADCPOWSTAT_2_ADDR);

	*inbdpow20_pdbm5 = (local_val & ((u32)0xFF000000)) >> 24;
	*inbdpow20_pdbm4 = (local_val & ((u32)0x00FF0000)) >> 16;
	*adcpowdbv5 = (local_val & ((u32)0x00007F00)) >> 8;
	*adcpowdbv4 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_agcadcpowstat_2_inbdpow_20_pdbm_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCADCPOWSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_agcadcpowstat_2_inbdpow_20_pdbm_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCADCPOWSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_agcadcpowstat_2_adcpowdbv_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCADCPOWSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline u8 riu_agcadcpowstat_2_adcpowdbv_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCADCPOWSTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

/**
 * @brief AGCDIGGAIN_4_STAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 DIGGAIN160_ANT4           0x0
 *    22:16 DIGGAIN80_ANT4            0x0
 *    14:08 DIGGAIN40_ANT4            0x0
 *    06:00 DIGGAIN20_ANT4            0x0
 * </pre>
 */
#define RIU_AGCDIGGAIN_4_STAT_ADDR        (REG_RIU_BASE_ADDR + 0x00000674)
#define RIU_AGCDIGGAIN_4_STAT_OFFSET      0x00000674
#define RIU_AGCDIGGAIN_4_STAT_INDEX       0x0000019D
#define RIU_AGCDIGGAIN_4_STAT_RESET       0x00000000

static inline u32 riu_agcdiggain_4_stat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCDIGGAIN_4_STAT_ADDR);
}

/* Field definitions */
#define RIU_AGCDIGGAIN_4_STAT_DIGGAIN_160_ANT_4_MASK    ((u32)0x7F000000)
#define RIU_AGCDIGGAIN_4_STAT_DIGGAIN_160_ANT_4_LSB    24
#define RIU_AGCDIGGAIN_4_STAT_DIGGAIN_160_ANT_4_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_4_STAT_DIGGAIN_80_ANT_4_MASK    ((u32)0x007F0000)
#define RIU_AGCDIGGAIN_4_STAT_DIGGAIN_80_ANT_4_LSB    16
#define RIU_AGCDIGGAIN_4_STAT_DIGGAIN_80_ANT_4_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_4_STAT_DIGGAIN_40_ANT_4_MASK    ((u32)0x00007F00)
#define RIU_AGCDIGGAIN_4_STAT_DIGGAIN_40_ANT_4_LSB    8
#define RIU_AGCDIGGAIN_4_STAT_DIGGAIN_40_ANT_4_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_4_STAT_DIGGAIN_20_ANT_4_MASK    ((u32)0x0000007F)
#define RIU_AGCDIGGAIN_4_STAT_DIGGAIN_20_ANT_4_LSB    0
#define RIU_AGCDIGGAIN_4_STAT_DIGGAIN_20_ANT_4_WIDTH    ((u32)0x00000007)

#define RIU_AGCDIGGAIN_4_STAT_DIGGAIN_160_ANT_4_RST    0x0
#define RIU_AGCDIGGAIN_4_STAT_DIGGAIN_80_ANT_4_RST    0x0
#define RIU_AGCDIGGAIN_4_STAT_DIGGAIN_40_ANT_4_RST    0x0
#define RIU_AGCDIGGAIN_4_STAT_DIGGAIN_20_ANT_4_RST    0x0

static inline void riu_agcdiggain_4_stat_unpack(struct cl_chip *chip, u8 *diggain160_ant4, u8 *diggain80_ant4, u8 *diggain40_ant4, u8 *diggain20_ant4)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_4_STAT_ADDR);

	*diggain160_ant4 = (local_val & ((u32)0x7F000000)) >> 24;
	*diggain80_ant4 = (local_val & ((u32)0x007F0000)) >> 16;
	*diggain40_ant4 = (local_val & ((u32)0x00007F00)) >> 8;
	*diggain20_ant4 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_agcdiggain_4_stat_diggain_160_ant_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_4_STAT_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline u8 riu_agcdiggain_4_stat_diggain_80_ant_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_4_STAT_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline u8 riu_agcdiggain_4_stat_diggain_40_ant_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_4_STAT_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline u8 riu_agcdiggain_4_stat_diggain_20_ant_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_4_STAT_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

/**
 * @brief AGCDIGGAIN_5_STAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 DIGGAIN160_ANT5           0x0
 *    22:16 DIGGAIN80_ANT5            0x0
 *    14:08 DIGGAIN40_ANT5            0x0
 *    06:00 DIGGAIN20_ANT5            0x0
 * </pre>
 */
#define RIU_AGCDIGGAIN_5_STAT_ADDR        (REG_RIU_BASE_ADDR + 0x00000678)
#define RIU_AGCDIGGAIN_5_STAT_OFFSET      0x00000678
#define RIU_AGCDIGGAIN_5_STAT_INDEX       0x0000019E
#define RIU_AGCDIGGAIN_5_STAT_RESET       0x00000000

static inline u32 riu_agcdiggain_5_stat_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCDIGGAIN_5_STAT_ADDR);
}

/* Field definitions */
#define RIU_AGCDIGGAIN_5_STAT_DIGGAIN_160_ANT_5_MASK    ((u32)0x7F000000)
#define RIU_AGCDIGGAIN_5_STAT_DIGGAIN_160_ANT_5_LSB    24
#define RIU_AGCDIGGAIN_5_STAT_DIGGAIN_160_ANT_5_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_5_STAT_DIGGAIN_80_ANT_5_MASK    ((u32)0x007F0000)
#define RIU_AGCDIGGAIN_5_STAT_DIGGAIN_80_ANT_5_LSB    16
#define RIU_AGCDIGGAIN_5_STAT_DIGGAIN_80_ANT_5_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_5_STAT_DIGGAIN_40_ANT_5_MASK    ((u32)0x00007F00)
#define RIU_AGCDIGGAIN_5_STAT_DIGGAIN_40_ANT_5_LSB    8
#define RIU_AGCDIGGAIN_5_STAT_DIGGAIN_40_ANT_5_WIDTH    ((u32)0x00000007)
#define RIU_AGCDIGGAIN_5_STAT_DIGGAIN_20_ANT_5_MASK    ((u32)0x0000007F)
#define RIU_AGCDIGGAIN_5_STAT_DIGGAIN_20_ANT_5_LSB    0
#define RIU_AGCDIGGAIN_5_STAT_DIGGAIN_20_ANT_5_WIDTH    ((u32)0x00000007)

#define RIU_AGCDIGGAIN_5_STAT_DIGGAIN_160_ANT_5_RST    0x0
#define RIU_AGCDIGGAIN_5_STAT_DIGGAIN_80_ANT_5_RST    0x0
#define RIU_AGCDIGGAIN_5_STAT_DIGGAIN_40_ANT_5_RST    0x0
#define RIU_AGCDIGGAIN_5_STAT_DIGGAIN_20_ANT_5_RST    0x0

static inline void riu_agcdiggain_5_stat_unpack(struct cl_chip *chip, u8 *diggain160_ant5, u8 *diggain80_ant5, u8 *diggain40_ant5, u8 *diggain20_ant5)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_5_STAT_ADDR);

	*diggain160_ant5 = (local_val & ((u32)0x7F000000)) >> 24;
	*diggain80_ant5 = (local_val & ((u32)0x007F0000)) >> 16;
	*diggain40_ant5 = (local_val & ((u32)0x00007F00)) >> 8;
	*diggain20_ant5 = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_agcdiggain_5_stat_diggain_160_ant_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_5_STAT_ADDR);

	return (u8)((local_val & ((u32)0x7F000000)) >> 24);
}

static inline u8 riu_agcdiggain_5_stat_diggain_80_ant_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_5_STAT_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline u8 riu_agcdiggain_5_stat_diggain_40_ant_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_5_STAT_ADDR);

	return (u8)((local_val & ((u32)0x00007F00)) >> 8);
}

static inline u8 riu_agcdiggain_5_stat_diggain_20_ant_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCDIGGAIN_5_STAT_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

/**
 * @brief AGCINBDPOW_20_PNOISESTAT_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 INBDPOW20_PNOISEDBM5      0x0
 *    23:16 INBDPOW20_PNOISEDBM4      0x0
 *    15:08 ADCPOWDBM5                0x0
 *    07:00 ADCPOWDBM4                0x0
 * </pre>
 */
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000067C)
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_OFFSET      0x0000067C
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_INDEX       0x0000019F
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_RESET       0x00000000

static inline u32 riu_agcinbdpow_20_pnoisestat_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_AGCINBDPOW_20_PNOISESTAT_2_ADDR);
}

/* Field definitions */
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_INBDPOW_20_PNOISEDBM_5_MASK    ((u32)0xFF000000)
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_INBDPOW_20_PNOISEDBM_5_LSB    24
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_INBDPOW_20_PNOISEDBM_5_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_INBDPOW_20_PNOISEDBM_4_MASK    ((u32)0x00FF0000)
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_INBDPOW_20_PNOISEDBM_4_LSB    16
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_INBDPOW_20_PNOISEDBM_4_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_ADCPOWDBM_5_MASK    ((u32)0x0000FF00)
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_ADCPOWDBM_5_LSB    8
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_ADCPOWDBM_5_WIDTH    ((u32)0x00000008)
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_ADCPOWDBM_4_MASK    ((u32)0x000000FF)
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_ADCPOWDBM_4_LSB    0
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_ADCPOWDBM_4_WIDTH    ((u32)0x00000008)

#define RIU_AGCINBDPOW_20_PNOISESTAT_2_INBDPOW_20_PNOISEDBM_5_RST    0x0
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_INBDPOW_20_PNOISEDBM_4_RST    0x0
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_ADCPOWDBM_5_RST    0x0
#define RIU_AGCINBDPOW_20_PNOISESTAT_2_ADCPOWDBM_4_RST    0x0

static inline void riu_agcinbdpow_20_pnoisestat_2_unpack(struct cl_chip *chip, u8 *inbdpow20_pnoisedbm5, u8 *inbdpow20_pnoisedbm4, u8 *adcpowdbm5, u8 *adcpowdbm4)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOW_20_PNOISESTAT_2_ADDR);

	*inbdpow20_pnoisedbm5 = (local_val & ((u32)0xFF000000)) >> 24;
	*inbdpow20_pnoisedbm4 = (local_val & ((u32)0x00FF0000)) >> 16;
	*adcpowdbm5 = (local_val & ((u32)0x0000FF00)) >> 8;
	*adcpowdbm4 = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_agcinbdpow_20_pnoisestat_2_inbdpow_20_pnoisedbm_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOW_20_PNOISESTAT_2_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_agcinbdpow_20_pnoisestat_2_inbdpow_20_pnoisedbm_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOW_20_PNOISESTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_agcinbdpow_20_pnoisestat_2_adcpowdbm_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOW_20_PNOISESTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_agcinbdpow_20_pnoisestat_2_adcpowdbm_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_AGCINBDPOW_20_PNOISESTAT_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief IQDC_RX_0_COEF_4_SET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_14     0x0
 *    20:12 iqdc_rx0_fir_coeff_13     0x0
 *    08:00 iqdc_rx0_fir_coeff_12     0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_4_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000680)
#define RIU_IQDC_RX_0_COEF_4_SET_1_OFFSET      0x00000680
#define RIU_IQDC_RX_0_COEF_4_SET_1_INDEX       0x000001A0
#define RIU_IQDC_RX_0_COEF_4_SET_1_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_4_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_1_ADDR);
}

static inline void riu_iqdc_rx_0_coef_4_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_4_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_4_SET_1_IQDC_RX_0_FIR_COEFF_14_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_4_SET_1_IQDC_RX_0_FIR_COEFF_14_LSB    23
#define RIU_IQDC_RX_0_COEF_4_SET_1_IQDC_RX_0_FIR_COEFF_14_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_4_SET_1_IQDC_RX_0_FIR_COEFF_13_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_4_SET_1_IQDC_RX_0_FIR_COEFF_13_LSB    12
#define RIU_IQDC_RX_0_COEF_4_SET_1_IQDC_RX_0_FIR_COEFF_13_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_4_SET_1_IQDC_RX_0_FIR_COEFF_12_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_4_SET_1_IQDC_RX_0_FIR_COEFF_12_LSB    0
#define RIU_IQDC_RX_0_COEF_4_SET_1_IQDC_RX_0_FIR_COEFF_12_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_4_SET_1_IQDC_RX_0_FIR_COEFF_14_RST    0x0
#define RIU_IQDC_RX_0_COEF_4_SET_1_IQDC_RX_0_FIR_COEFF_13_RST    0x0
#define RIU_IQDC_RX_0_COEF_4_SET_1_IQDC_RX_0_FIR_COEFF_12_RST    0x0

static inline void riu_iqdc_rx_0_coef_4_set_1_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_14, u16 iqdc_rx0_fir_coeff_13, u16 iqdc_rx0_fir_coeff_12)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_14 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_13 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_12 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_4_SET_1_ADDR, ((u32)iqdc_rx0_fir_coeff_14 << 23) | ((u32)iqdc_rx0_fir_coeff_13 << 12) | ((u32)iqdc_rx0_fir_coeff_12 << 0));
}

static inline void riu_iqdc_rx_0_coef_4_set_1_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_14, u16 *iqdc_rx0_fir_coeff_13, u16 *iqdc_rx0_fir_coeff_12)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_1_ADDR);

	*iqdc_rx0_fir_coeff_14 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_13 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_12 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_4_set_1_iqdc_rx_0_fir_coeff_14_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_1_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_4_set_1_iqdc_rx_0_fir_coeff_14_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff14)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff14 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_4_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_1_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff14 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_4_set_1_iqdc_rx_0_fir_coeff_13_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_4_set_1_iqdc_rx_0_fir_coeff_13_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff13)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff13 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_4_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_1_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff13 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_4_set_1_iqdc_rx_0_fir_coeff_12_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_4_set_1_iqdc_rx_0_fir_coeff_12_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff12)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff12 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_4_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_1_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff12 << 0));
}

/**
 * @brief IQDC_RX_0_COEF_5_SET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_17     0x0
 *    20:12 iqdc_rx0_fir_coeff_16     0x0
 *    08:00 iqdc_rx0_fir_coeff_15     0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_5_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000684)
#define RIU_IQDC_RX_0_COEF_5_SET_1_OFFSET      0x00000684
#define RIU_IQDC_RX_0_COEF_5_SET_1_INDEX       0x000001A1
#define RIU_IQDC_RX_0_COEF_5_SET_1_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_5_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_1_ADDR);
}

static inline void riu_iqdc_rx_0_coef_5_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_5_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_5_SET_1_IQDC_RX_0_FIR_COEFF_17_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_5_SET_1_IQDC_RX_0_FIR_COEFF_17_LSB    23
#define RIU_IQDC_RX_0_COEF_5_SET_1_IQDC_RX_0_FIR_COEFF_17_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_5_SET_1_IQDC_RX_0_FIR_COEFF_16_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_5_SET_1_IQDC_RX_0_FIR_COEFF_16_LSB    12
#define RIU_IQDC_RX_0_COEF_5_SET_1_IQDC_RX_0_FIR_COEFF_16_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_5_SET_1_IQDC_RX_0_FIR_COEFF_15_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_5_SET_1_IQDC_RX_0_FIR_COEFF_15_LSB    0
#define RIU_IQDC_RX_0_COEF_5_SET_1_IQDC_RX_0_FIR_COEFF_15_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_5_SET_1_IQDC_RX_0_FIR_COEFF_17_RST    0x0
#define RIU_IQDC_RX_0_COEF_5_SET_1_IQDC_RX_0_FIR_COEFF_16_RST    0x0
#define RIU_IQDC_RX_0_COEF_5_SET_1_IQDC_RX_0_FIR_COEFF_15_RST    0x0

static inline void riu_iqdc_rx_0_coef_5_set_1_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_17, u16 iqdc_rx0_fir_coeff_16, u16 iqdc_rx0_fir_coeff_15)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_17 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_16 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_15 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_5_SET_1_ADDR, ((u32)iqdc_rx0_fir_coeff_17 << 23) | ((u32)iqdc_rx0_fir_coeff_16 << 12) | ((u32)iqdc_rx0_fir_coeff_15 << 0));
}

static inline void riu_iqdc_rx_0_coef_5_set_1_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_17, u16 *iqdc_rx0_fir_coeff_16, u16 *iqdc_rx0_fir_coeff_15)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_1_ADDR);

	*iqdc_rx0_fir_coeff_17 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_16 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_15 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_5_set_1_iqdc_rx_0_fir_coeff_17_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_1_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_5_set_1_iqdc_rx_0_fir_coeff_17_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff17)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff17 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_5_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_1_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff17 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_5_set_1_iqdc_rx_0_fir_coeff_16_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_5_set_1_iqdc_rx_0_fir_coeff_16_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff16)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff16 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_5_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_1_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff16 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_5_set_1_iqdc_rx_0_fir_coeff_15_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_5_set_1_iqdc_rx_0_fir_coeff_15_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff15)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff15 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_5_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_1_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff15 << 0));
}

/**
 * @brief IQDC_RX_0_COEF_6_SET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_20     0x0
 *    20:12 iqdc_rx0_fir_coeff_19     0x0
 *    08:00 iqdc_rx0_fir_coeff_18     0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_6_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000688)
#define RIU_IQDC_RX_0_COEF_6_SET_1_OFFSET      0x00000688
#define RIU_IQDC_RX_0_COEF_6_SET_1_INDEX       0x000001A2
#define RIU_IQDC_RX_0_COEF_6_SET_1_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_6_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_1_ADDR);
}

static inline void riu_iqdc_rx_0_coef_6_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_6_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_6_SET_1_IQDC_RX_0_FIR_COEFF_20_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_6_SET_1_IQDC_RX_0_FIR_COEFF_20_LSB    23
#define RIU_IQDC_RX_0_COEF_6_SET_1_IQDC_RX_0_FIR_COEFF_20_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_6_SET_1_IQDC_RX_0_FIR_COEFF_19_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_6_SET_1_IQDC_RX_0_FIR_COEFF_19_LSB    12
#define RIU_IQDC_RX_0_COEF_6_SET_1_IQDC_RX_0_FIR_COEFF_19_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_6_SET_1_IQDC_RX_0_FIR_COEFF_18_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_6_SET_1_IQDC_RX_0_FIR_COEFF_18_LSB    0
#define RIU_IQDC_RX_0_COEF_6_SET_1_IQDC_RX_0_FIR_COEFF_18_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_6_SET_1_IQDC_RX_0_FIR_COEFF_20_RST    0x0
#define RIU_IQDC_RX_0_COEF_6_SET_1_IQDC_RX_0_FIR_COEFF_19_RST    0x0
#define RIU_IQDC_RX_0_COEF_6_SET_1_IQDC_RX_0_FIR_COEFF_18_RST    0x0

static inline void riu_iqdc_rx_0_coef_6_set_1_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_20, u16 iqdc_rx0_fir_coeff_19, u16 iqdc_rx0_fir_coeff_18)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_20 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_19 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_18 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_6_SET_1_ADDR, ((u32)iqdc_rx0_fir_coeff_20 << 23) | ((u32)iqdc_rx0_fir_coeff_19 << 12) | ((u32)iqdc_rx0_fir_coeff_18 << 0));
}

static inline void riu_iqdc_rx_0_coef_6_set_1_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_20, u16 *iqdc_rx0_fir_coeff_19, u16 *iqdc_rx0_fir_coeff_18)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_1_ADDR);

	*iqdc_rx0_fir_coeff_20 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_19 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_18 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_6_set_1_iqdc_rx_0_fir_coeff_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_1_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_6_set_1_iqdc_rx_0_fir_coeff_20_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff20)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff20 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_6_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_1_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff20 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_6_set_1_iqdc_rx_0_fir_coeff_19_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_6_set_1_iqdc_rx_0_fir_coeff_19_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff19)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff19 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_6_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_1_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff19 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_6_set_1_iqdc_rx_0_fir_coeff_18_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_6_set_1_iqdc_rx_0_fir_coeff_18_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff18)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff18 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_6_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_1_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff18 << 0));
}

/**
 * @brief IQDC_RX_0_COEF_4_SET_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_14     0x0
 *    20:12 iqdc_rx0_fir_coeff_13     0x0
 *    08:00 iqdc_rx0_fir_coeff_12     0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_4_SET_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000068C)
#define RIU_IQDC_RX_0_COEF_4_SET_2_OFFSET      0x0000068C
#define RIU_IQDC_RX_0_COEF_4_SET_2_INDEX       0x000001A3
#define RIU_IQDC_RX_0_COEF_4_SET_2_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_4_set_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_2_ADDR);
}

static inline void riu_iqdc_rx_0_coef_4_set_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_4_SET_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_4_SET_2_IQDC_RX_0_FIR_COEFF_14_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_4_SET_2_IQDC_RX_0_FIR_COEFF_14_LSB    23
#define RIU_IQDC_RX_0_COEF_4_SET_2_IQDC_RX_0_FIR_COEFF_14_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_4_SET_2_IQDC_RX_0_FIR_COEFF_13_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_4_SET_2_IQDC_RX_0_FIR_COEFF_13_LSB    12
#define RIU_IQDC_RX_0_COEF_4_SET_2_IQDC_RX_0_FIR_COEFF_13_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_4_SET_2_IQDC_RX_0_FIR_COEFF_12_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_4_SET_2_IQDC_RX_0_FIR_COEFF_12_LSB    0
#define RIU_IQDC_RX_0_COEF_4_SET_2_IQDC_RX_0_FIR_COEFF_12_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_4_SET_2_IQDC_RX_0_FIR_COEFF_14_RST    0x0
#define RIU_IQDC_RX_0_COEF_4_SET_2_IQDC_RX_0_FIR_COEFF_13_RST    0x0
#define RIU_IQDC_RX_0_COEF_4_SET_2_IQDC_RX_0_FIR_COEFF_12_RST    0x0

static inline void riu_iqdc_rx_0_coef_4_set_2_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_14, u16 iqdc_rx0_fir_coeff_13, u16 iqdc_rx0_fir_coeff_12)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_14 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_13 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_12 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_4_SET_2_ADDR, ((u32)iqdc_rx0_fir_coeff_14 << 23) | ((u32)iqdc_rx0_fir_coeff_13 << 12) | ((u32)iqdc_rx0_fir_coeff_12 << 0));
}

static inline void riu_iqdc_rx_0_coef_4_set_2_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_14, u16 *iqdc_rx0_fir_coeff_13, u16 *iqdc_rx0_fir_coeff_12)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_2_ADDR);

	*iqdc_rx0_fir_coeff_14 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_13 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_12 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_4_set_2_iqdc_rx_0_fir_coeff_14_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_2_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_4_set_2_iqdc_rx_0_fir_coeff_14_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff14)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff14 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_4_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_2_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff14 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_4_set_2_iqdc_rx_0_fir_coeff_13_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_4_set_2_iqdc_rx_0_fir_coeff_13_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff13)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff13 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_4_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_2_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff13 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_4_set_2_iqdc_rx_0_fir_coeff_12_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_4_set_2_iqdc_rx_0_fir_coeff_12_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff12)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff12 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_4_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_2_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff12 << 0));
}

/**
 * @brief IQDC_RX_0_COEF_5_SET_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_17     0x0
 *    20:12 iqdc_rx0_fir_coeff_16     0x0
 *    08:00 iqdc_rx0_fir_coeff_15     0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_5_SET_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000690)
#define RIU_IQDC_RX_0_COEF_5_SET_2_OFFSET      0x00000690
#define RIU_IQDC_RX_0_COEF_5_SET_2_INDEX       0x000001A4
#define RIU_IQDC_RX_0_COEF_5_SET_2_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_5_set_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_2_ADDR);
}

static inline void riu_iqdc_rx_0_coef_5_set_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_5_SET_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_5_SET_2_IQDC_RX_0_FIR_COEFF_17_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_5_SET_2_IQDC_RX_0_FIR_COEFF_17_LSB    23
#define RIU_IQDC_RX_0_COEF_5_SET_2_IQDC_RX_0_FIR_COEFF_17_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_5_SET_2_IQDC_RX_0_FIR_COEFF_16_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_5_SET_2_IQDC_RX_0_FIR_COEFF_16_LSB    12
#define RIU_IQDC_RX_0_COEF_5_SET_2_IQDC_RX_0_FIR_COEFF_16_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_5_SET_2_IQDC_RX_0_FIR_COEFF_15_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_5_SET_2_IQDC_RX_0_FIR_COEFF_15_LSB    0
#define RIU_IQDC_RX_0_COEF_5_SET_2_IQDC_RX_0_FIR_COEFF_15_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_5_SET_2_IQDC_RX_0_FIR_COEFF_17_RST    0x0
#define RIU_IQDC_RX_0_COEF_5_SET_2_IQDC_RX_0_FIR_COEFF_16_RST    0x0
#define RIU_IQDC_RX_0_COEF_5_SET_2_IQDC_RX_0_FIR_COEFF_15_RST    0x0

static inline void riu_iqdc_rx_0_coef_5_set_2_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_17, u16 iqdc_rx0_fir_coeff_16, u16 iqdc_rx0_fir_coeff_15)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_17 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_16 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_15 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_5_SET_2_ADDR, ((u32)iqdc_rx0_fir_coeff_17 << 23) | ((u32)iqdc_rx0_fir_coeff_16 << 12) | ((u32)iqdc_rx0_fir_coeff_15 << 0));
}

static inline void riu_iqdc_rx_0_coef_5_set_2_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_17, u16 *iqdc_rx0_fir_coeff_16, u16 *iqdc_rx0_fir_coeff_15)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_2_ADDR);

	*iqdc_rx0_fir_coeff_17 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_16 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_15 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_5_set_2_iqdc_rx_0_fir_coeff_17_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_2_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_5_set_2_iqdc_rx_0_fir_coeff_17_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff17)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff17 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_5_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_2_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff17 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_5_set_2_iqdc_rx_0_fir_coeff_16_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_5_set_2_iqdc_rx_0_fir_coeff_16_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff16)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff16 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_5_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_2_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff16 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_5_set_2_iqdc_rx_0_fir_coeff_15_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_5_set_2_iqdc_rx_0_fir_coeff_15_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff15)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff15 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_5_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_2_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff15 << 0));
}

/**
 * @brief IQDC_RX_0_COEF_6_SET_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_20     0x0
 *    20:12 iqdc_rx0_fir_coeff_19     0x0
 *    08:00 iqdc_rx0_fir_coeff_18     0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_6_SET_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000694)
#define RIU_IQDC_RX_0_COEF_6_SET_2_OFFSET      0x00000694
#define RIU_IQDC_RX_0_COEF_6_SET_2_INDEX       0x000001A5
#define RIU_IQDC_RX_0_COEF_6_SET_2_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_6_set_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_2_ADDR);
}

static inline void riu_iqdc_rx_0_coef_6_set_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_6_SET_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_6_SET_2_IQDC_RX_0_FIR_COEFF_20_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_6_SET_2_IQDC_RX_0_FIR_COEFF_20_LSB    23
#define RIU_IQDC_RX_0_COEF_6_SET_2_IQDC_RX_0_FIR_COEFF_20_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_6_SET_2_IQDC_RX_0_FIR_COEFF_19_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_6_SET_2_IQDC_RX_0_FIR_COEFF_19_LSB    12
#define RIU_IQDC_RX_0_COEF_6_SET_2_IQDC_RX_0_FIR_COEFF_19_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_6_SET_2_IQDC_RX_0_FIR_COEFF_18_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_6_SET_2_IQDC_RX_0_FIR_COEFF_18_LSB    0
#define RIU_IQDC_RX_0_COEF_6_SET_2_IQDC_RX_0_FIR_COEFF_18_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_6_SET_2_IQDC_RX_0_FIR_COEFF_20_RST    0x0
#define RIU_IQDC_RX_0_COEF_6_SET_2_IQDC_RX_0_FIR_COEFF_19_RST    0x0
#define RIU_IQDC_RX_0_COEF_6_SET_2_IQDC_RX_0_FIR_COEFF_18_RST    0x0

static inline void riu_iqdc_rx_0_coef_6_set_2_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_20, u16 iqdc_rx0_fir_coeff_19, u16 iqdc_rx0_fir_coeff_18)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_20 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_19 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_18 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_6_SET_2_ADDR, ((u32)iqdc_rx0_fir_coeff_20 << 23) | ((u32)iqdc_rx0_fir_coeff_19 << 12) | ((u32)iqdc_rx0_fir_coeff_18 << 0));
}

static inline void riu_iqdc_rx_0_coef_6_set_2_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_20, u16 *iqdc_rx0_fir_coeff_19, u16 *iqdc_rx0_fir_coeff_18)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_2_ADDR);

	*iqdc_rx0_fir_coeff_20 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_19 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_18 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_6_set_2_iqdc_rx_0_fir_coeff_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_2_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_6_set_2_iqdc_rx_0_fir_coeff_20_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff20)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff20 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_6_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_2_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff20 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_6_set_2_iqdc_rx_0_fir_coeff_19_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_6_set_2_iqdc_rx_0_fir_coeff_19_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff19)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff19 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_6_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_2_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff19 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_6_set_2_iqdc_rx_0_fir_coeff_18_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_6_set_2_iqdc_rx_0_fir_coeff_18_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff18)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff18 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_6_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_2_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff18 << 0));
}

/**
 * @brief IQDC_RX_0_COEF_4_SET_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_14     0x0
 *    20:12 iqdc_rx0_fir_coeff_13     0x0
 *    08:00 iqdc_rx0_fir_coeff_12     0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_4_SET_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000698)
#define RIU_IQDC_RX_0_COEF_4_SET_3_OFFSET      0x00000698
#define RIU_IQDC_RX_0_COEF_4_SET_3_INDEX       0x000001A6
#define RIU_IQDC_RX_0_COEF_4_SET_3_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_4_set_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_3_ADDR);
}

static inline void riu_iqdc_rx_0_coef_4_set_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_4_SET_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_4_SET_3_IQDC_RX_0_FIR_COEFF_14_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_4_SET_3_IQDC_RX_0_FIR_COEFF_14_LSB    23
#define RIU_IQDC_RX_0_COEF_4_SET_3_IQDC_RX_0_FIR_COEFF_14_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_4_SET_3_IQDC_RX_0_FIR_COEFF_13_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_4_SET_3_IQDC_RX_0_FIR_COEFF_13_LSB    12
#define RIU_IQDC_RX_0_COEF_4_SET_3_IQDC_RX_0_FIR_COEFF_13_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_4_SET_3_IQDC_RX_0_FIR_COEFF_12_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_4_SET_3_IQDC_RX_0_FIR_COEFF_12_LSB    0
#define RIU_IQDC_RX_0_COEF_4_SET_3_IQDC_RX_0_FIR_COEFF_12_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_4_SET_3_IQDC_RX_0_FIR_COEFF_14_RST    0x0
#define RIU_IQDC_RX_0_COEF_4_SET_3_IQDC_RX_0_FIR_COEFF_13_RST    0x0
#define RIU_IQDC_RX_0_COEF_4_SET_3_IQDC_RX_0_FIR_COEFF_12_RST    0x0

static inline void riu_iqdc_rx_0_coef_4_set_3_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_14, u16 iqdc_rx0_fir_coeff_13, u16 iqdc_rx0_fir_coeff_12)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_14 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_13 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_12 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_4_SET_3_ADDR, ((u32)iqdc_rx0_fir_coeff_14 << 23) | ((u32)iqdc_rx0_fir_coeff_13 << 12) | ((u32)iqdc_rx0_fir_coeff_12 << 0));
}

static inline void riu_iqdc_rx_0_coef_4_set_3_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_14, u16 *iqdc_rx0_fir_coeff_13, u16 *iqdc_rx0_fir_coeff_12)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_3_ADDR);

	*iqdc_rx0_fir_coeff_14 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_13 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_12 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_4_set_3_iqdc_rx_0_fir_coeff_14_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_3_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_4_set_3_iqdc_rx_0_fir_coeff_14_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff14)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff14 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_4_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_3_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff14 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_4_set_3_iqdc_rx_0_fir_coeff_13_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_4_set_3_iqdc_rx_0_fir_coeff_13_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff13)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff13 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_4_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_3_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff13 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_4_set_3_iqdc_rx_0_fir_coeff_12_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_4_set_3_iqdc_rx_0_fir_coeff_12_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff12)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff12 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_4_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_4_SET_3_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff12 << 0));
}

/**
 * @brief IQDC_RX_0_COEF_5_SET_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_17     0x0
 *    20:12 iqdc_rx0_fir_coeff_16     0x0
 *    08:00 iqdc_rx0_fir_coeff_15     0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_5_SET_3_ADDR        (REG_RIU_BASE_ADDR + 0x0000069C)
#define RIU_IQDC_RX_0_COEF_5_SET_3_OFFSET      0x0000069C
#define RIU_IQDC_RX_0_COEF_5_SET_3_INDEX       0x000001A7
#define RIU_IQDC_RX_0_COEF_5_SET_3_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_5_set_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_3_ADDR);
}

static inline void riu_iqdc_rx_0_coef_5_set_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_5_SET_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_5_SET_3_IQDC_RX_0_FIR_COEFF_17_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_5_SET_3_IQDC_RX_0_FIR_COEFF_17_LSB    23
#define RIU_IQDC_RX_0_COEF_5_SET_3_IQDC_RX_0_FIR_COEFF_17_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_5_SET_3_IQDC_RX_0_FIR_COEFF_16_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_5_SET_3_IQDC_RX_0_FIR_COEFF_16_LSB    12
#define RIU_IQDC_RX_0_COEF_5_SET_3_IQDC_RX_0_FIR_COEFF_16_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_5_SET_3_IQDC_RX_0_FIR_COEFF_15_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_5_SET_3_IQDC_RX_0_FIR_COEFF_15_LSB    0
#define RIU_IQDC_RX_0_COEF_5_SET_3_IQDC_RX_0_FIR_COEFF_15_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_5_SET_3_IQDC_RX_0_FIR_COEFF_17_RST    0x0
#define RIU_IQDC_RX_0_COEF_5_SET_3_IQDC_RX_0_FIR_COEFF_16_RST    0x0
#define RIU_IQDC_RX_0_COEF_5_SET_3_IQDC_RX_0_FIR_COEFF_15_RST    0x0

static inline void riu_iqdc_rx_0_coef_5_set_3_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_17, u16 iqdc_rx0_fir_coeff_16, u16 iqdc_rx0_fir_coeff_15)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_17 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_16 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_15 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_5_SET_3_ADDR, ((u32)iqdc_rx0_fir_coeff_17 << 23) | ((u32)iqdc_rx0_fir_coeff_16 << 12) | ((u32)iqdc_rx0_fir_coeff_15 << 0));
}

static inline void riu_iqdc_rx_0_coef_5_set_3_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_17, u16 *iqdc_rx0_fir_coeff_16, u16 *iqdc_rx0_fir_coeff_15)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_3_ADDR);

	*iqdc_rx0_fir_coeff_17 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_16 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_15 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_5_set_3_iqdc_rx_0_fir_coeff_17_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_3_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_5_set_3_iqdc_rx_0_fir_coeff_17_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff17)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff17 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_5_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_3_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff17 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_5_set_3_iqdc_rx_0_fir_coeff_16_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_5_set_3_iqdc_rx_0_fir_coeff_16_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff16)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff16 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_5_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_3_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff16 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_5_set_3_iqdc_rx_0_fir_coeff_15_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_5_set_3_iqdc_rx_0_fir_coeff_15_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff15)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff15 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_5_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_5_SET_3_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff15 << 0));
}

/**
 * @brief IQDC_RX_0_COEF_6_SET_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_20     0x0
 *    20:12 iqdc_rx0_fir_coeff_19     0x0
 *    08:00 iqdc_rx0_fir_coeff_18     0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_6_SET_3_ADDR        (REG_RIU_BASE_ADDR + 0x000006A0)
#define RIU_IQDC_RX_0_COEF_6_SET_3_OFFSET      0x000006A0
#define RIU_IQDC_RX_0_COEF_6_SET_3_INDEX       0x000001A8
#define RIU_IQDC_RX_0_COEF_6_SET_3_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_6_set_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_3_ADDR);
}

static inline void riu_iqdc_rx_0_coef_6_set_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_6_SET_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_6_SET_3_IQDC_RX_0_FIR_COEFF_20_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_6_SET_3_IQDC_RX_0_FIR_COEFF_20_LSB    23
#define RIU_IQDC_RX_0_COEF_6_SET_3_IQDC_RX_0_FIR_COEFF_20_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_6_SET_3_IQDC_RX_0_FIR_COEFF_19_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_6_SET_3_IQDC_RX_0_FIR_COEFF_19_LSB    12
#define RIU_IQDC_RX_0_COEF_6_SET_3_IQDC_RX_0_FIR_COEFF_19_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_6_SET_3_IQDC_RX_0_FIR_COEFF_18_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_6_SET_3_IQDC_RX_0_FIR_COEFF_18_LSB    0
#define RIU_IQDC_RX_0_COEF_6_SET_3_IQDC_RX_0_FIR_COEFF_18_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_6_SET_3_IQDC_RX_0_FIR_COEFF_20_RST    0x0
#define RIU_IQDC_RX_0_COEF_6_SET_3_IQDC_RX_0_FIR_COEFF_19_RST    0x0
#define RIU_IQDC_RX_0_COEF_6_SET_3_IQDC_RX_0_FIR_COEFF_18_RST    0x0

static inline void riu_iqdc_rx_0_coef_6_set_3_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_20, u16 iqdc_rx0_fir_coeff_19, u16 iqdc_rx0_fir_coeff_18)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_20 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_19 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_18 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_6_SET_3_ADDR, ((u32)iqdc_rx0_fir_coeff_20 << 23) | ((u32)iqdc_rx0_fir_coeff_19 << 12) | ((u32)iqdc_rx0_fir_coeff_18 << 0));
}

static inline void riu_iqdc_rx_0_coef_6_set_3_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_20, u16 *iqdc_rx0_fir_coeff_19, u16 *iqdc_rx0_fir_coeff_18)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_3_ADDR);

	*iqdc_rx0_fir_coeff_20 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_19 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_18 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_6_set_3_iqdc_rx_0_fir_coeff_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_3_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_6_set_3_iqdc_rx_0_fir_coeff_20_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff20)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff20 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_6_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_3_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff20 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_6_set_3_iqdc_rx_0_fir_coeff_19_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_6_set_3_iqdc_rx_0_fir_coeff_19_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff19)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff19 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_6_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_3_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff19 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_6_set_3_iqdc_rx_0_fir_coeff_18_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_6_set_3_iqdc_rx_0_fir_coeff_18_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff18)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff18 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_6_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_6_SET_3_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff18 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_0_SET_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_2      0x0
 *    20:12 iqdc_rx1_fir_coeff_1      0x0
 *    08:00 iqdc_rx1_fir_coeff_0      0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_0_SET_2_ADDR        (REG_RIU_BASE_ADDR + 0x000006A8)
#define RIU_IQDC_RX_1_COEF_0_SET_2_OFFSET      0x000006A8
#define RIU_IQDC_RX_1_COEF_0_SET_2_INDEX       0x000001AA
#define RIU_IQDC_RX_1_COEF_0_SET_2_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_0_set_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_2_ADDR);
}

static inline void riu_iqdc_rx_1_coef_0_set_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_0_SET_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_0_SET_2_IQDC_RX_1_FIR_COEFF_2_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_0_SET_2_IQDC_RX_1_FIR_COEFF_2_LSB    23
#define RIU_IQDC_RX_1_COEF_0_SET_2_IQDC_RX_1_FIR_COEFF_2_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_0_SET_2_IQDC_RX_1_FIR_COEFF_1_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_0_SET_2_IQDC_RX_1_FIR_COEFF_1_LSB    12
#define RIU_IQDC_RX_1_COEF_0_SET_2_IQDC_RX_1_FIR_COEFF_1_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_0_SET_2_IQDC_RX_1_FIR_COEFF_0_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_0_SET_2_IQDC_RX_1_FIR_COEFF_0_LSB    0
#define RIU_IQDC_RX_1_COEF_0_SET_2_IQDC_RX_1_FIR_COEFF_0_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_0_SET_2_IQDC_RX_1_FIR_COEFF_2_RST    0x0
#define RIU_IQDC_RX_1_COEF_0_SET_2_IQDC_RX_1_FIR_COEFF_1_RST    0x0
#define RIU_IQDC_RX_1_COEF_0_SET_2_IQDC_RX_1_FIR_COEFF_0_RST    0x0

static inline void riu_iqdc_rx_1_coef_0_set_2_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_2, u16 iqdc_rx1_fir_coeff_1, u16 iqdc_rx1_fir_coeff_0)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_2 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_1 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_0 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_0_SET_2_ADDR, ((u32)iqdc_rx1_fir_coeff_2 << 23) | ((u32)iqdc_rx1_fir_coeff_1 << 12) | ((u32)iqdc_rx1_fir_coeff_0 << 0));
}

static inline void riu_iqdc_rx_1_coef_0_set_2_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_2, u16 *iqdc_rx1_fir_coeff_1, u16 *iqdc_rx1_fir_coeff_0)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_2_ADDR);

	*iqdc_rx1_fir_coeff_2 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_1 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_0 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_0_set_2_iqdc_rx_1_fir_coeff_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_2_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_0_set_2_iqdc_rx_1_fir_coeff_2_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff2)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff2 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_0_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_2_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff2 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_0_set_2_iqdc_rx_1_fir_coeff_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_0_set_2_iqdc_rx_1_fir_coeff_1_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff1)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff1 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_0_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_2_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff1 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_0_set_2_iqdc_rx_1_fir_coeff_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_0_set_2_iqdc_rx_1_fir_coeff_0_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff0)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff0 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_0_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_2_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff0 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_1_SET_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_5      0x0
 *    20:12 iqdc_rx1_fir_coeff_4      0x0
 *    08:00 iqdc_rx1_fir_coeff_3      0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_1_SET_2_ADDR        (REG_RIU_BASE_ADDR + 0x000006AC)
#define RIU_IQDC_RX_1_COEF_1_SET_2_OFFSET      0x000006AC
#define RIU_IQDC_RX_1_COEF_1_SET_2_INDEX       0x000001AB
#define RIU_IQDC_RX_1_COEF_1_SET_2_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_1_set_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_2_ADDR);
}

static inline void riu_iqdc_rx_1_coef_1_set_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_1_SET_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_1_SET_2_IQDC_RX_1_FIR_COEFF_5_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_1_SET_2_IQDC_RX_1_FIR_COEFF_5_LSB    23
#define RIU_IQDC_RX_1_COEF_1_SET_2_IQDC_RX_1_FIR_COEFF_5_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_1_SET_2_IQDC_RX_1_FIR_COEFF_4_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_1_SET_2_IQDC_RX_1_FIR_COEFF_4_LSB    12
#define RIU_IQDC_RX_1_COEF_1_SET_2_IQDC_RX_1_FIR_COEFF_4_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_1_SET_2_IQDC_RX_1_FIR_COEFF_3_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_1_SET_2_IQDC_RX_1_FIR_COEFF_3_LSB    0
#define RIU_IQDC_RX_1_COEF_1_SET_2_IQDC_RX_1_FIR_COEFF_3_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_1_SET_2_IQDC_RX_1_FIR_COEFF_5_RST    0x0
#define RIU_IQDC_RX_1_COEF_1_SET_2_IQDC_RX_1_FIR_COEFF_4_RST    0x0
#define RIU_IQDC_RX_1_COEF_1_SET_2_IQDC_RX_1_FIR_COEFF_3_RST    0x0

static inline void riu_iqdc_rx_1_coef_1_set_2_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_5, u16 iqdc_rx1_fir_coeff_4, u16 iqdc_rx1_fir_coeff_3)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_5 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_4 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_3 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_1_SET_2_ADDR, ((u32)iqdc_rx1_fir_coeff_5 << 23) | ((u32)iqdc_rx1_fir_coeff_4 << 12) | ((u32)iqdc_rx1_fir_coeff_3 << 0));
}

static inline void riu_iqdc_rx_1_coef_1_set_2_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_5, u16 *iqdc_rx1_fir_coeff_4, u16 *iqdc_rx1_fir_coeff_3)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_2_ADDR);

	*iqdc_rx1_fir_coeff_5 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_4 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_3 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_1_set_2_iqdc_rx_1_fir_coeff_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_2_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_1_set_2_iqdc_rx_1_fir_coeff_5_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff5)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff5 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_1_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_2_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff5 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_1_set_2_iqdc_rx_1_fir_coeff_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_1_set_2_iqdc_rx_1_fir_coeff_4_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff4)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff4 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_1_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_2_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff4 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_1_set_2_iqdc_rx_1_fir_coeff_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_1_set_2_iqdc_rx_1_fir_coeff_3_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff3)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff3 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_1_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_2_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff3 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_2_SET_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_8      0x0
 *    20:12 iqdc_rx1_fir_coeff_7      0x0
 *    08:00 iqdc_rx1_fir_coeff_6      0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_2_SET_2_ADDR        (REG_RIU_BASE_ADDR + 0x000006B0)
#define RIU_IQDC_RX_1_COEF_2_SET_2_OFFSET      0x000006B0
#define RIU_IQDC_RX_1_COEF_2_SET_2_INDEX       0x000001AC
#define RIU_IQDC_RX_1_COEF_2_SET_2_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_2_set_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_2_ADDR);
}

static inline void riu_iqdc_rx_1_coef_2_set_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_2_SET_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_2_SET_2_IQDC_RX_1_FIR_COEFF_8_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_2_SET_2_IQDC_RX_1_FIR_COEFF_8_LSB    23
#define RIU_IQDC_RX_1_COEF_2_SET_2_IQDC_RX_1_FIR_COEFF_8_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_2_SET_2_IQDC_RX_1_FIR_COEFF_7_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_2_SET_2_IQDC_RX_1_FIR_COEFF_7_LSB    12
#define RIU_IQDC_RX_1_COEF_2_SET_2_IQDC_RX_1_FIR_COEFF_7_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_2_SET_2_IQDC_RX_1_FIR_COEFF_6_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_2_SET_2_IQDC_RX_1_FIR_COEFF_6_LSB    0
#define RIU_IQDC_RX_1_COEF_2_SET_2_IQDC_RX_1_FIR_COEFF_6_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_2_SET_2_IQDC_RX_1_FIR_COEFF_8_RST    0x0
#define RIU_IQDC_RX_1_COEF_2_SET_2_IQDC_RX_1_FIR_COEFF_7_RST    0x0
#define RIU_IQDC_RX_1_COEF_2_SET_2_IQDC_RX_1_FIR_COEFF_6_RST    0x0

static inline void riu_iqdc_rx_1_coef_2_set_2_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_8, u16 iqdc_rx1_fir_coeff_7, u16 iqdc_rx1_fir_coeff_6)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_8 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_7 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_6 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_2_SET_2_ADDR, ((u32)iqdc_rx1_fir_coeff_8 << 23) | ((u32)iqdc_rx1_fir_coeff_7 << 12) | ((u32)iqdc_rx1_fir_coeff_6 << 0));
}

static inline void riu_iqdc_rx_1_coef_2_set_2_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_8, u16 *iqdc_rx1_fir_coeff_7, u16 *iqdc_rx1_fir_coeff_6)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_2_ADDR);

	*iqdc_rx1_fir_coeff_8 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_7 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_6 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_2_set_2_iqdc_rx_1_fir_coeff_8_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_2_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_2_set_2_iqdc_rx_1_fir_coeff_8_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff8)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff8 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_2_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_2_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff8 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_2_set_2_iqdc_rx_1_fir_coeff_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_2_set_2_iqdc_rx_1_fir_coeff_7_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff7)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff7 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_2_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_2_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff7 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_2_set_2_iqdc_rx_1_fir_coeff_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_2_set_2_iqdc_rx_1_fir_coeff_6_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff6)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff6 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_2_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_2_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff6 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_3_SET_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_11     0x0
 *    20:12 iqdc_rx1_fir_coeff_10     0x0
 *    08:00 iqdc_rx1_fir_coeff_9      0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_3_SET_2_ADDR        (REG_RIU_BASE_ADDR + 0x000006B4)
#define RIU_IQDC_RX_1_COEF_3_SET_2_OFFSET      0x000006B4
#define RIU_IQDC_RX_1_COEF_3_SET_2_INDEX       0x000001AD
#define RIU_IQDC_RX_1_COEF_3_SET_2_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_3_set_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_2_ADDR);
}

static inline void riu_iqdc_rx_1_coef_3_set_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_3_SET_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_3_SET_2_IQDC_RX_1_FIR_COEFF_11_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_3_SET_2_IQDC_RX_1_FIR_COEFF_11_LSB    23
#define RIU_IQDC_RX_1_COEF_3_SET_2_IQDC_RX_1_FIR_COEFF_11_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_3_SET_2_IQDC_RX_1_FIR_COEFF_10_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_3_SET_2_IQDC_RX_1_FIR_COEFF_10_LSB    12
#define RIU_IQDC_RX_1_COEF_3_SET_2_IQDC_RX_1_FIR_COEFF_10_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_3_SET_2_IQDC_RX_1_FIR_COEFF_9_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_3_SET_2_IQDC_RX_1_FIR_COEFF_9_LSB    0
#define RIU_IQDC_RX_1_COEF_3_SET_2_IQDC_RX_1_FIR_COEFF_9_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_3_SET_2_IQDC_RX_1_FIR_COEFF_11_RST    0x0
#define RIU_IQDC_RX_1_COEF_3_SET_2_IQDC_RX_1_FIR_COEFF_10_RST    0x0
#define RIU_IQDC_RX_1_COEF_3_SET_2_IQDC_RX_1_FIR_COEFF_9_RST    0x0

static inline void riu_iqdc_rx_1_coef_3_set_2_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_11, u16 iqdc_rx1_fir_coeff_10, u16 iqdc_rx1_fir_coeff_9)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_11 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_10 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_9 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_3_SET_2_ADDR, ((u32)iqdc_rx1_fir_coeff_11 << 23) | ((u32)iqdc_rx1_fir_coeff_10 << 12) | ((u32)iqdc_rx1_fir_coeff_9 << 0));
}

static inline void riu_iqdc_rx_1_coef_3_set_2_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_11, u16 *iqdc_rx1_fir_coeff_10, u16 *iqdc_rx1_fir_coeff_9)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_2_ADDR);

	*iqdc_rx1_fir_coeff_11 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_10 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_9 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_3_set_2_iqdc_rx_1_fir_coeff_11_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_2_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_3_set_2_iqdc_rx_1_fir_coeff_11_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff11)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff11 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_3_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_2_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff11 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_3_set_2_iqdc_rx_1_fir_coeff_10_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_3_set_2_iqdc_rx_1_fir_coeff_10_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff10)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff10 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_3_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_2_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff10 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_3_set_2_iqdc_rx_1_fir_coeff_9_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_3_set_2_iqdc_rx_1_fir_coeff_9_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff9)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff9 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_3_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_2_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff9 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_0_SET_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_2      0x0
 *    20:12 iqdc_rx1_fir_coeff_1      0x0
 *    08:00 iqdc_rx1_fir_coeff_0      0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_0_SET_3_ADDR        (REG_RIU_BASE_ADDR + 0x000006B8)
#define RIU_IQDC_RX_1_COEF_0_SET_3_OFFSET      0x000006B8
#define RIU_IQDC_RX_1_COEF_0_SET_3_INDEX       0x000001AE
#define RIU_IQDC_RX_1_COEF_0_SET_3_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_0_set_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_3_ADDR);
}

static inline void riu_iqdc_rx_1_coef_0_set_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_0_SET_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_0_SET_3_IQDC_RX_1_FIR_COEFF_2_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_0_SET_3_IQDC_RX_1_FIR_COEFF_2_LSB    23
#define RIU_IQDC_RX_1_COEF_0_SET_3_IQDC_RX_1_FIR_COEFF_2_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_0_SET_3_IQDC_RX_1_FIR_COEFF_1_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_0_SET_3_IQDC_RX_1_FIR_COEFF_1_LSB    12
#define RIU_IQDC_RX_1_COEF_0_SET_3_IQDC_RX_1_FIR_COEFF_1_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_0_SET_3_IQDC_RX_1_FIR_COEFF_0_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_0_SET_3_IQDC_RX_1_FIR_COEFF_0_LSB    0
#define RIU_IQDC_RX_1_COEF_0_SET_3_IQDC_RX_1_FIR_COEFF_0_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_0_SET_3_IQDC_RX_1_FIR_COEFF_2_RST    0x0
#define RIU_IQDC_RX_1_COEF_0_SET_3_IQDC_RX_1_FIR_COEFF_1_RST    0x0
#define RIU_IQDC_RX_1_COEF_0_SET_3_IQDC_RX_1_FIR_COEFF_0_RST    0x0

static inline void riu_iqdc_rx_1_coef_0_set_3_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_2, u16 iqdc_rx1_fir_coeff_1, u16 iqdc_rx1_fir_coeff_0)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_2 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_1 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_0 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_0_SET_3_ADDR, ((u32)iqdc_rx1_fir_coeff_2 << 23) | ((u32)iqdc_rx1_fir_coeff_1 << 12) | ((u32)iqdc_rx1_fir_coeff_0 << 0));
}

static inline void riu_iqdc_rx_1_coef_0_set_3_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_2, u16 *iqdc_rx1_fir_coeff_1, u16 *iqdc_rx1_fir_coeff_0)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_3_ADDR);

	*iqdc_rx1_fir_coeff_2 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_1 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_0 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_0_set_3_iqdc_rx_1_fir_coeff_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_3_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_0_set_3_iqdc_rx_1_fir_coeff_2_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff2)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff2 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_0_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_3_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff2 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_0_set_3_iqdc_rx_1_fir_coeff_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_0_set_3_iqdc_rx_1_fir_coeff_1_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff1)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff1 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_0_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_3_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff1 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_0_set_3_iqdc_rx_1_fir_coeff_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_0_set_3_iqdc_rx_1_fir_coeff_0_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff0)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff0 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_0_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_3_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff0 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_1_SET_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_5      0x0
 *    20:12 iqdc_rx1_fir_coeff_4      0x0
 *    08:00 iqdc_rx1_fir_coeff_3      0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_1_SET_3_ADDR        (REG_RIU_BASE_ADDR + 0x000006BC)
#define RIU_IQDC_RX_1_COEF_1_SET_3_OFFSET      0x000006BC
#define RIU_IQDC_RX_1_COEF_1_SET_3_INDEX       0x000001AF
#define RIU_IQDC_RX_1_COEF_1_SET_3_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_1_set_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_3_ADDR);
}

static inline void riu_iqdc_rx_1_coef_1_set_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_1_SET_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_1_SET_3_IQDC_RX_1_FIR_COEFF_5_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_1_SET_3_IQDC_RX_1_FIR_COEFF_5_LSB    23
#define RIU_IQDC_RX_1_COEF_1_SET_3_IQDC_RX_1_FIR_COEFF_5_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_1_SET_3_IQDC_RX_1_FIR_COEFF_4_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_1_SET_3_IQDC_RX_1_FIR_COEFF_4_LSB    12
#define RIU_IQDC_RX_1_COEF_1_SET_3_IQDC_RX_1_FIR_COEFF_4_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_1_SET_3_IQDC_RX_1_FIR_COEFF_3_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_1_SET_3_IQDC_RX_1_FIR_COEFF_3_LSB    0
#define RIU_IQDC_RX_1_COEF_1_SET_3_IQDC_RX_1_FIR_COEFF_3_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_1_SET_3_IQDC_RX_1_FIR_COEFF_5_RST    0x0
#define RIU_IQDC_RX_1_COEF_1_SET_3_IQDC_RX_1_FIR_COEFF_4_RST    0x0
#define RIU_IQDC_RX_1_COEF_1_SET_3_IQDC_RX_1_FIR_COEFF_3_RST    0x0

static inline void riu_iqdc_rx_1_coef_1_set_3_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_5, u16 iqdc_rx1_fir_coeff_4, u16 iqdc_rx1_fir_coeff_3)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_5 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_4 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_3 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_1_SET_3_ADDR, ((u32)iqdc_rx1_fir_coeff_5 << 23) | ((u32)iqdc_rx1_fir_coeff_4 << 12) | ((u32)iqdc_rx1_fir_coeff_3 << 0));
}

static inline void riu_iqdc_rx_1_coef_1_set_3_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_5, u16 *iqdc_rx1_fir_coeff_4, u16 *iqdc_rx1_fir_coeff_3)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_3_ADDR);

	*iqdc_rx1_fir_coeff_5 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_4 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_3 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_1_set_3_iqdc_rx_1_fir_coeff_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_3_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_1_set_3_iqdc_rx_1_fir_coeff_5_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff5)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff5 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_1_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_3_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff5 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_1_set_3_iqdc_rx_1_fir_coeff_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_1_set_3_iqdc_rx_1_fir_coeff_4_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff4)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff4 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_1_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_3_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff4 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_1_set_3_iqdc_rx_1_fir_coeff_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_1_set_3_iqdc_rx_1_fir_coeff_3_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff3)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff3 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_1_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_3_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff3 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_2_SET_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_8      0x0
 *    20:12 iqdc_rx1_fir_coeff_7      0x0
 *    08:00 iqdc_rx1_fir_coeff_6      0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_2_SET_3_ADDR        (REG_RIU_BASE_ADDR + 0x000006C0)
#define RIU_IQDC_RX_1_COEF_2_SET_3_OFFSET      0x000006C0
#define RIU_IQDC_RX_1_COEF_2_SET_3_INDEX       0x000001B0
#define RIU_IQDC_RX_1_COEF_2_SET_3_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_2_set_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_3_ADDR);
}

static inline void riu_iqdc_rx_1_coef_2_set_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_2_SET_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_2_SET_3_IQDC_RX_1_FIR_COEFF_8_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_2_SET_3_IQDC_RX_1_FIR_COEFF_8_LSB    23
#define RIU_IQDC_RX_1_COEF_2_SET_3_IQDC_RX_1_FIR_COEFF_8_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_2_SET_3_IQDC_RX_1_FIR_COEFF_7_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_2_SET_3_IQDC_RX_1_FIR_COEFF_7_LSB    12
#define RIU_IQDC_RX_1_COEF_2_SET_3_IQDC_RX_1_FIR_COEFF_7_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_2_SET_3_IQDC_RX_1_FIR_COEFF_6_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_2_SET_3_IQDC_RX_1_FIR_COEFF_6_LSB    0
#define RIU_IQDC_RX_1_COEF_2_SET_3_IQDC_RX_1_FIR_COEFF_6_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_2_SET_3_IQDC_RX_1_FIR_COEFF_8_RST    0x0
#define RIU_IQDC_RX_1_COEF_2_SET_3_IQDC_RX_1_FIR_COEFF_7_RST    0x0
#define RIU_IQDC_RX_1_COEF_2_SET_3_IQDC_RX_1_FIR_COEFF_6_RST    0x0

static inline void riu_iqdc_rx_1_coef_2_set_3_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_8, u16 iqdc_rx1_fir_coeff_7, u16 iqdc_rx1_fir_coeff_6)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_8 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_7 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_6 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_2_SET_3_ADDR, ((u32)iqdc_rx1_fir_coeff_8 << 23) | ((u32)iqdc_rx1_fir_coeff_7 << 12) | ((u32)iqdc_rx1_fir_coeff_6 << 0));
}

static inline void riu_iqdc_rx_1_coef_2_set_3_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_8, u16 *iqdc_rx1_fir_coeff_7, u16 *iqdc_rx1_fir_coeff_6)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_3_ADDR);

	*iqdc_rx1_fir_coeff_8 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_7 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_6 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_2_set_3_iqdc_rx_1_fir_coeff_8_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_3_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_2_set_3_iqdc_rx_1_fir_coeff_8_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff8)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff8 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_2_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_3_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff8 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_2_set_3_iqdc_rx_1_fir_coeff_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_2_set_3_iqdc_rx_1_fir_coeff_7_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff7)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff7 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_2_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_3_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff7 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_2_set_3_iqdc_rx_1_fir_coeff_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_2_set_3_iqdc_rx_1_fir_coeff_6_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff6)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff6 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_2_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_3_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff6 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_3_SET_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_11     0x0
 *    20:12 iqdc_rx1_fir_coeff_10     0x0
 *    08:00 iqdc_rx1_fir_coeff_9      0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_3_SET_3_ADDR        (REG_RIU_BASE_ADDR + 0x000006C4)
#define RIU_IQDC_RX_1_COEF_3_SET_3_OFFSET      0x000006C4
#define RIU_IQDC_RX_1_COEF_3_SET_3_INDEX       0x000001B1
#define RIU_IQDC_RX_1_COEF_3_SET_3_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_3_set_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_3_ADDR);
}

static inline void riu_iqdc_rx_1_coef_3_set_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_3_SET_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_3_SET_3_IQDC_RX_1_FIR_COEFF_11_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_3_SET_3_IQDC_RX_1_FIR_COEFF_11_LSB    23
#define RIU_IQDC_RX_1_COEF_3_SET_3_IQDC_RX_1_FIR_COEFF_11_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_3_SET_3_IQDC_RX_1_FIR_COEFF_10_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_3_SET_3_IQDC_RX_1_FIR_COEFF_10_LSB    12
#define RIU_IQDC_RX_1_COEF_3_SET_3_IQDC_RX_1_FIR_COEFF_10_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_3_SET_3_IQDC_RX_1_FIR_COEFF_9_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_3_SET_3_IQDC_RX_1_FIR_COEFF_9_LSB    0
#define RIU_IQDC_RX_1_COEF_3_SET_3_IQDC_RX_1_FIR_COEFF_9_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_3_SET_3_IQDC_RX_1_FIR_COEFF_11_RST    0x0
#define RIU_IQDC_RX_1_COEF_3_SET_3_IQDC_RX_1_FIR_COEFF_10_RST    0x0
#define RIU_IQDC_RX_1_COEF_3_SET_3_IQDC_RX_1_FIR_COEFF_9_RST    0x0

static inline void riu_iqdc_rx_1_coef_3_set_3_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_11, u16 iqdc_rx1_fir_coeff_10, u16 iqdc_rx1_fir_coeff_9)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_11 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_10 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_9 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_3_SET_3_ADDR, ((u32)iqdc_rx1_fir_coeff_11 << 23) | ((u32)iqdc_rx1_fir_coeff_10 << 12) | ((u32)iqdc_rx1_fir_coeff_9 << 0));
}

static inline void riu_iqdc_rx_1_coef_3_set_3_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_11, u16 *iqdc_rx1_fir_coeff_10, u16 *iqdc_rx1_fir_coeff_9)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_3_ADDR);

	*iqdc_rx1_fir_coeff_11 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_10 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_9 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_3_set_3_iqdc_rx_1_fir_coeff_11_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_3_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_3_set_3_iqdc_rx_1_fir_coeff_11_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff11)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff11 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_3_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_3_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff11 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_3_set_3_iqdc_rx_1_fir_coeff_10_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_3_set_3_iqdc_rx_1_fir_coeff_10_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff10)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff10 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_3_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_3_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff10 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_3_set_3_iqdc_rx_1_fir_coeff_9_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_3_set_3_iqdc_rx_1_fir_coeff_9_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff9)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff9 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_3_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_3_SET_3_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff9 << 0));
}

/**
 * @brief IQDC_RX_0_DC register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 iqdc_rx0_dcq              0x0
 *    11:00 iqdc_rx0_dci              0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_DC_ADDR        (REG_RIU_BASE_ADDR + 0x000006C8)
#define RIU_IQDC_RX_0_DC_OFFSET      0x000006C8
#define RIU_IQDC_RX_0_DC_INDEX       0x000001B2
#define RIU_IQDC_RX_0_DC_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_dc_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_DC_ADDR);
}

static inline void riu_iqdc_rx_0_dc_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_DC_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_DC_IQDC_RX_0_DCQ_MASK    ((u32)0x0FFF0000)
#define RIU_IQDC_RX_0_DC_IQDC_RX_0_DCQ_LSB    16
#define RIU_IQDC_RX_0_DC_IQDC_RX_0_DCQ_WIDTH    ((u32)0x0000000C)
#define RIU_IQDC_RX_0_DC_IQDC_RX_0_DCI_MASK    ((u32)0x00000FFF)
#define RIU_IQDC_RX_0_DC_IQDC_RX_0_DCI_LSB    0
#define RIU_IQDC_RX_0_DC_IQDC_RX_0_DCI_WIDTH    ((u32)0x0000000C)

#define RIU_IQDC_RX_0_DC_IQDC_RX_0_DCQ_RST    0x0
#define RIU_IQDC_RX_0_DC_IQDC_RX_0_DCI_RST    0x0

static inline void riu_iqdc_rx_0_dc_pack(struct cl_chip *chip, u16 iqdc_rx0_dcq, u16 iqdc_rx0_dci)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_dcq << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_dci << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_DC_ADDR, ((u32)iqdc_rx0_dcq << 16) | ((u32)iqdc_rx0_dci << 0));
}

static inline void riu_iqdc_rx_0_dc_unpack(struct cl_chip *chip, u16 *iqdc_rx0_dcq, u16 *iqdc_rx0_dci)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_DC_ADDR);

	*iqdc_rx0_dcq = (local_val & ((u32)0x0FFF0000)) >> 16;
	*iqdc_rx0_dci = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_dc_iqdc_rx_0_dcq_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_DC_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_iqdc_rx_0_dc_iqdc_rx_0_dcq_setf(struct cl_chip *chip, u16 iqdcrx0dcq)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0dcq << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_DC_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_DC_ADDR) & ~((u32)0x0FFF0000)) | ((u32)iqdcrx0dcq << 16));
}

static inline u16 riu_iqdc_rx_0_dc_iqdc_rx_0_dci_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_DC_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

static inline void riu_iqdc_rx_0_dc_iqdc_rx_0_dci_setf(struct cl_chip *chip, u16 iqdcrx0dci)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0dci << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_DC_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_DC_ADDR) & ~((u32)0x00000FFF)) | ((u32)iqdcrx0dci << 0));
}

/**
 * @brief IQDC_RX_1_DC register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 iqdc_rx1_dcq              0x0
 *    11:00 iqdc_rx1_dci              0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_DC_ADDR        (REG_RIU_BASE_ADDR + 0x000006CC)
#define RIU_IQDC_RX_1_DC_OFFSET      0x000006CC
#define RIU_IQDC_RX_1_DC_INDEX       0x000001B3
#define RIU_IQDC_RX_1_DC_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_dc_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_DC_ADDR);
}

static inline void riu_iqdc_rx_1_dc_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_DC_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_DC_IQDC_RX_1_DCQ_MASK    ((u32)0x0FFF0000)
#define RIU_IQDC_RX_1_DC_IQDC_RX_1_DCQ_LSB    16
#define RIU_IQDC_RX_1_DC_IQDC_RX_1_DCQ_WIDTH    ((u32)0x0000000C)
#define RIU_IQDC_RX_1_DC_IQDC_RX_1_DCI_MASK    ((u32)0x00000FFF)
#define RIU_IQDC_RX_1_DC_IQDC_RX_1_DCI_LSB    0
#define RIU_IQDC_RX_1_DC_IQDC_RX_1_DCI_WIDTH    ((u32)0x0000000C)

#define RIU_IQDC_RX_1_DC_IQDC_RX_1_DCQ_RST    0x0
#define RIU_IQDC_RX_1_DC_IQDC_RX_1_DCI_RST    0x0

static inline void riu_iqdc_rx_1_dc_pack(struct cl_chip *chip, u16 iqdc_rx1_dcq, u16 iqdc_rx1_dci)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_dcq << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_dci << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_DC_ADDR, ((u32)iqdc_rx1_dcq << 16) | ((u32)iqdc_rx1_dci << 0));
}

static inline void riu_iqdc_rx_1_dc_unpack(struct cl_chip *chip, u16 *iqdc_rx1_dcq, u16 *iqdc_rx1_dci)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_DC_ADDR);

	*iqdc_rx1_dcq = (local_val & ((u32)0x0FFF0000)) >> 16;
	*iqdc_rx1_dci = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_dc_iqdc_rx_1_dcq_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_DC_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_iqdc_rx_1_dc_iqdc_rx_1_dcq_setf(struct cl_chip *chip, u16 iqdcrx1dcq)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1dcq << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_DC_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_DC_ADDR) & ~((u32)0x0FFF0000)) | ((u32)iqdcrx1dcq << 16));
}

static inline u16 riu_iqdc_rx_1_dc_iqdc_rx_1_dci_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_DC_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

static inline void riu_iqdc_rx_1_dc_iqdc_rx_1_dci_setf(struct cl_chip *chip, u16 iqdcrx1dci)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1dci << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_DC_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_DC_ADDR) & ~((u32)0x00000FFF)) | ((u32)iqdcrx1dci << 0));
}

/**
 * @brief LBRXSEL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    01    LBRXSELMSB                0
 *    00    LBRXSELLSB                0
 * </pre>
 */
#define RIU_LBRXSEL_ADDR        (REG_RIU_BASE_ADDR + 0x000006D0)
#define RIU_LBRXSEL_OFFSET      0x000006D0
#define RIU_LBRXSEL_INDEX       0x000001B4
#define RIU_LBRXSEL_RESET       0x00000000

static inline u32 riu_lbrxsel_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_LBRXSEL_ADDR);
}

static inline void riu_lbrxsel_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_LBRXSEL_ADDR, value);
}

/* Field definitions */
#define RIU_LBRXSEL_LBRXSELMSB_BIT          ((u32)0x00000002)
#define RIU_LBRXSEL_LBRXSELMSB_POS          1
#define RIU_LBRXSEL_LBRXSELLSB_BIT          ((u32)0x00000001)
#define RIU_LBRXSEL_LBRXSELLSB_POS          0

#define RIU_LBRXSEL_LBRXSELMSB_RST          0x0
#define RIU_LBRXSEL_LBRXSELLSB_RST          0x0

static inline void riu_lbrxsel_pack(struct cl_chip *chip, u8 lbrxselmsb, u8 lbrxsellsb)
{
	ASSERT_ERR_CHIP((((u32)lbrxselmsb << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)lbrxsellsb << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_LBRXSEL_ADDR, ((u32)lbrxselmsb << 1) | ((u32)lbrxsellsb << 0));
}

static inline void riu_lbrxsel_unpack(struct cl_chip *chip, u8 *lbrxselmsb, u8 *lbrxsellsb)
{
	u32 local_val = cl_reg_read(chip, RIU_LBRXSEL_ADDR);

	*lbrxselmsb = (local_val & ((u32)0x00000002)) >> 1;
	*lbrxsellsb = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_lbrxsel_lbrxselmsb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LBRXSEL_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void riu_lbrxsel_lbrxselmsb_setf(struct cl_chip *chip, u8 lbrxselmsb)
{
	ASSERT_ERR_CHIP((((u32)lbrxselmsb << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_LBRXSEL_ADDR, (cl_reg_read(chip, RIU_LBRXSEL_ADDR) & ~((u32)0x00000002)) | ((u32)lbrxselmsb << 1));
}

static inline u8 riu_lbrxsel_lbrxsellsb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_LBRXSEL_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_lbrxsel_lbrxsellsb_setf(struct cl_chip *chip, u8 lbrxsellsb)
{
	ASSERT_ERR_CHIP((((u32)lbrxsellsb << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_LBRXSEL_ADDR, (cl_reg_read(chip, RIU_LBRXSEL_ADDR) & ~((u32)0x00000001)) | ((u32)lbrxsellsb << 0));
}

/**
 * @brief START_ESTIM_FRC register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    START_ESTIM_FRC_CANCEL    0
 *    29:00 START_ESTIM_FRC_TARGET    0x0
 * </pre>
 */
#define RIU_START_ESTIM_FRC_ADDR        (REG_RIU_BASE_ADDR + 0x000006D4)
#define RIU_START_ESTIM_FRC_OFFSET      0x000006D4
#define RIU_START_ESTIM_FRC_INDEX       0x000001B5
#define RIU_START_ESTIM_FRC_RESET       0x00000000

static inline u32 riu_start_estim_frc_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_START_ESTIM_FRC_ADDR);
}

static inline void riu_start_estim_frc_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_START_ESTIM_FRC_ADDR, value);
}

/* Field definitions */
#define RIU_START_ESTIM_FRC_START_ESTIM_FRC_CANCEL_BIT    ((u32)0x80000000)
#define RIU_START_ESTIM_FRC_START_ESTIM_FRC_CANCEL_POS    31
#define RIU_START_ESTIM_FRC_START_ESTIM_FRC_TARGET_MASK    ((u32)0x3FFFFFFF)
#define RIU_START_ESTIM_FRC_START_ESTIM_FRC_TARGET_LSB    0
#define RIU_START_ESTIM_FRC_START_ESTIM_FRC_TARGET_WIDTH    ((u32)0x0000001E)

#define RIU_START_ESTIM_FRC_START_ESTIM_FRC_CANCEL_RST    0x0
#define RIU_START_ESTIM_FRC_START_ESTIM_FRC_TARGET_RST    0x0

static inline void riu_start_estim_frc_pack(struct cl_chip *chip, u8 start_estim_frc_cancel, u32 start_estim_frc_target)
{
	ASSERT_ERR_CHIP((((u32)start_estim_frc_cancel << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)start_estim_frc_target << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_START_ESTIM_FRC_ADDR, ((u32)start_estim_frc_cancel << 31) | ((u32)start_estim_frc_target << 0));
}

static inline void riu_start_estim_frc_unpack(struct cl_chip *chip, u8 *start_estim_frc_cancel, u32 *start_estim_frc_target)
{
	u32 local_val = cl_reg_read(chip, RIU_START_ESTIM_FRC_ADDR);

	*start_estim_frc_cancel = (local_val & ((u32)0x80000000)) >> 31;
	*start_estim_frc_target = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_start_estim_frc_start_estim_frc_cancel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_START_ESTIM_FRC_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_start_estim_frc_start_estim_frc_cancel_setf(struct cl_chip *chip, u8 startestimfrccancel)
{
	ASSERT_ERR_CHIP((((u32)startestimfrccancel << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_START_ESTIM_FRC_ADDR, (cl_reg_read(chip, RIU_START_ESTIM_FRC_ADDR) & ~((u32)0x80000000)) | ((u32)startestimfrccancel << 31));
}

static inline u32 riu_start_estim_frc_start_estim_frc_target_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_START_ESTIM_FRC_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

static inline void riu_start_estim_frc_start_estim_frc_target_setf(struct cl_chip *chip, u32 startestimfrctarget)
{
	ASSERT_ERR_CHIP((((u32)startestimfrctarget << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_START_ESTIM_FRC_ADDR, (cl_reg_read(chip, RIU_START_ESTIM_FRC_ADDR) & ~((u32)0x3FFFFFFF)) | ((u32)startestimfrctarget << 0));
}

/**
 * @brief GAIN_UP_FRC register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    GAIN_UP_FRC_CANCEL        0
 *    29:00 GAIN_UP_FRC_TARGET        0x0
 * </pre>
 */
#define RIU_GAIN_UP_FRC_ADDR        (REG_RIU_BASE_ADDR + 0x000006D8)
#define RIU_GAIN_UP_FRC_OFFSET      0x000006D8
#define RIU_GAIN_UP_FRC_INDEX       0x000001B6
#define RIU_GAIN_UP_FRC_RESET       0x00000000

static inline u32 riu_gain_up_frc_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_GAIN_UP_FRC_ADDR);
}

static inline void riu_gain_up_frc_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_GAIN_UP_FRC_ADDR, value);
}

/* Field definitions */
#define RIU_GAIN_UP_FRC_GAIN_UP_FRC_CANCEL_BIT    ((u32)0x80000000)
#define RIU_GAIN_UP_FRC_GAIN_UP_FRC_CANCEL_POS    31
#define RIU_GAIN_UP_FRC_GAIN_UP_FRC_TARGET_MASK    ((u32)0x3FFFFFFF)
#define RIU_GAIN_UP_FRC_GAIN_UP_FRC_TARGET_LSB    0
#define RIU_GAIN_UP_FRC_GAIN_UP_FRC_TARGET_WIDTH    ((u32)0x0000001E)

#define RIU_GAIN_UP_FRC_GAIN_UP_FRC_CANCEL_RST    0x0
#define RIU_GAIN_UP_FRC_GAIN_UP_FRC_TARGET_RST    0x0

static inline void riu_gain_up_frc_pack(struct cl_chip *chip, u8 gain_up_frc_cancel, u32 gain_up_frc_target)
{
	ASSERT_ERR_CHIP((((u32)gain_up_frc_cancel << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)gain_up_frc_target << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_GAIN_UP_FRC_ADDR, ((u32)gain_up_frc_cancel << 31) | ((u32)gain_up_frc_target << 0));
}

static inline void riu_gain_up_frc_unpack(struct cl_chip *chip, u8 *gain_up_frc_cancel, u32 *gain_up_frc_target)
{
	u32 local_val = cl_reg_read(chip, RIU_GAIN_UP_FRC_ADDR);

	*gain_up_frc_cancel = (local_val & ((u32)0x80000000)) >> 31;
	*gain_up_frc_target = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_gain_up_frc_gain_up_frc_cancel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_GAIN_UP_FRC_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_gain_up_frc_gain_up_frc_cancel_setf(struct cl_chip *chip, u8 gainupfrccancel)
{
	ASSERT_ERR_CHIP((((u32)gainupfrccancel << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_GAIN_UP_FRC_ADDR, (cl_reg_read(chip, RIU_GAIN_UP_FRC_ADDR) & ~((u32)0x80000000)) | ((u32)gainupfrccancel << 31));
}

static inline u32 riu_gain_up_frc_gain_up_frc_target_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_GAIN_UP_FRC_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

static inline void riu_gain_up_frc_gain_up_frc_target_setf(struct cl_chip *chip, u32 gainupfrctarget)
{
	ASSERT_ERR_CHIP((((u32)gainupfrctarget << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_GAIN_UP_FRC_ADDR, (cl_reg_read(chip, RIU_GAIN_UP_FRC_ADDR) & ~((u32)0x3FFFFFFF)) | ((u32)gainupfrctarget << 0));
}

/**
 * @brief RX_END_4_T_FRC register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    RX_END4_T_FRC_CANCEL      0
 *    29:00 RX_END4_T_FRC_TARGET      0x0
 * </pre>
 */
#define RIU_RX_END_4_T_FRC_ADDR        (REG_RIU_BASE_ADDR + 0x000006DC)
#define RIU_RX_END_4_T_FRC_OFFSET      0x000006DC
#define RIU_RX_END_4_T_FRC_INDEX       0x000001B7
#define RIU_RX_END_4_T_FRC_RESET       0x00000000

static inline u32 riu_rx_end_4_t_frc_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RX_END_4_T_FRC_ADDR);
}

static inline void riu_rx_end_4_t_frc_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RX_END_4_T_FRC_ADDR, value);
}

/* Field definitions */
#define RIU_RX_END_4_T_FRC_RX_END_4_T_FRC_CANCEL_BIT    ((u32)0x80000000)
#define RIU_RX_END_4_T_FRC_RX_END_4_T_FRC_CANCEL_POS    31
#define RIU_RX_END_4_T_FRC_RX_END_4_T_FRC_TARGET_MASK    ((u32)0x3FFFFFFF)
#define RIU_RX_END_4_T_FRC_RX_END_4_T_FRC_TARGET_LSB    0
#define RIU_RX_END_4_T_FRC_RX_END_4_T_FRC_TARGET_WIDTH    ((u32)0x0000001E)

#define RIU_RX_END_4_T_FRC_RX_END_4_T_FRC_CANCEL_RST    0x0
#define RIU_RX_END_4_T_FRC_RX_END_4_T_FRC_TARGET_RST    0x0

static inline void riu_rx_end_4_t_frc_pack(struct cl_chip *chip, u8 rx_end4_t_frc_cancel, u32 rx_end4_t_frc_target)
{
	ASSERT_ERR_CHIP((((u32)rx_end4_t_frc_cancel << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rx_end4_t_frc_target << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_RX_END_4_T_FRC_ADDR, ((u32)rx_end4_t_frc_cancel << 31) | ((u32)rx_end4_t_frc_target << 0));
}

static inline void riu_rx_end_4_t_frc_unpack(struct cl_chip *chip, u8 *rx_end4_t_frc_cancel, u32 *rx_end4_t_frc_target)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_END_4_T_FRC_ADDR);

	*rx_end4_t_frc_cancel = (local_val & ((u32)0x80000000)) >> 31;
	*rx_end4_t_frc_target = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_rx_end_4_t_frc_rx_end_4_t_frc_cancel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_END_4_T_FRC_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_rx_end_4_t_frc_rx_end_4_t_frc_cancel_setf(struct cl_chip *chip, u8 rxend4tfrccancel)
{
	ASSERT_ERR_CHIP((((u32)rxend4tfrccancel << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_RX_END_4_T_FRC_ADDR, (cl_reg_read(chip, RIU_RX_END_4_T_FRC_ADDR) & ~((u32)0x80000000)) | ((u32)rxend4tfrccancel << 31));
}

static inline u32 riu_rx_end_4_t_frc_rx_end_4_t_frc_target_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_END_4_T_FRC_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

static inline void riu_rx_end_4_t_frc_rx_end_4_t_frc_target_setf(struct cl_chip *chip, u32 rxend4tfrctarget)
{
	ASSERT_ERR_CHIP((((u32)rxend4tfrctarget << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_RX_END_4_T_FRC_ADDR, (cl_reg_read(chip, RIU_RX_END_4_T_FRC_ADDR) & ~((u32)0x3FFFFFFF)) | ((u32)rxend4tfrctarget << 0));
}

/**
 * @brief RX_PHY_PROC_LIM_FRC register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    RX_PHY_PROC_LIM_FRC_CANCEL 0
 *    29:00 RX_PHY_PROC_LIM_FRC_TARGET 0x0
 * </pre>
 */
#define RIU_RX_PHY_PROC_LIM_FRC_ADDR        (REG_RIU_BASE_ADDR + 0x000006E0)
#define RIU_RX_PHY_PROC_LIM_FRC_OFFSET      0x000006E0
#define RIU_RX_PHY_PROC_LIM_FRC_INDEX       0x000001B8
#define RIU_RX_PHY_PROC_LIM_FRC_RESET       0x00000000

static inline u32 riu_rx_phy_proc_lim_frc_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RX_PHY_PROC_LIM_FRC_ADDR);
}

static inline void riu_rx_phy_proc_lim_frc_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RX_PHY_PROC_LIM_FRC_ADDR, value);
}

/* Field definitions */
#define RIU_RX_PHY_PROC_LIM_FRC_RX_PHY_PROC_LIM_FRC_CANCEL_BIT    ((u32)0x80000000)
#define RIU_RX_PHY_PROC_LIM_FRC_RX_PHY_PROC_LIM_FRC_CANCEL_POS    31
#define RIU_RX_PHY_PROC_LIM_FRC_RX_PHY_PROC_LIM_FRC_TARGET_MASK    ((u32)0x3FFFFFFF)
#define RIU_RX_PHY_PROC_LIM_FRC_RX_PHY_PROC_LIM_FRC_TARGET_LSB    0
#define RIU_RX_PHY_PROC_LIM_FRC_RX_PHY_PROC_LIM_FRC_TARGET_WIDTH    ((u32)0x0000001E)

#define RIU_RX_PHY_PROC_LIM_FRC_RX_PHY_PROC_LIM_FRC_CANCEL_RST    0x0
#define RIU_RX_PHY_PROC_LIM_FRC_RX_PHY_PROC_LIM_FRC_TARGET_RST    0x0

static inline void riu_rx_phy_proc_lim_frc_pack(struct cl_chip *chip, u8 rx_phy_proc_lim_frc_cancel, u32 rx_phy_proc_lim_frc_target)
{
	ASSERT_ERR_CHIP((((u32)rx_phy_proc_lim_frc_cancel << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rx_phy_proc_lim_frc_target << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_RX_PHY_PROC_LIM_FRC_ADDR, ((u32)rx_phy_proc_lim_frc_cancel << 31) | ((u32)rx_phy_proc_lim_frc_target << 0));
}

static inline void riu_rx_phy_proc_lim_frc_unpack(struct cl_chip *chip, u8 *rx_phy_proc_lim_frc_cancel, u32 *rx_phy_proc_lim_frc_target)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_PHY_PROC_LIM_FRC_ADDR);

	*rx_phy_proc_lim_frc_cancel = (local_val & ((u32)0x80000000)) >> 31;
	*rx_phy_proc_lim_frc_target = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_rx_phy_proc_lim_frc_rx_phy_proc_lim_frc_cancel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_PHY_PROC_LIM_FRC_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_rx_phy_proc_lim_frc_rx_phy_proc_lim_frc_cancel_setf(struct cl_chip *chip, u8 rxphyproclimfrccancel)
{
	ASSERT_ERR_CHIP((((u32)rxphyproclimfrccancel << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_RX_PHY_PROC_LIM_FRC_ADDR, (cl_reg_read(chip, RIU_RX_PHY_PROC_LIM_FRC_ADDR) & ~((u32)0x80000000)) | ((u32)rxphyproclimfrccancel << 31));
}

static inline u32 riu_rx_phy_proc_lim_frc_rx_phy_proc_lim_frc_target_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_PHY_PROC_LIM_FRC_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

static inline void riu_rx_phy_proc_lim_frc_rx_phy_proc_lim_frc_target_setf(struct cl_chip *chip, u32 rxphyproclimfrctarget)
{
	ASSERT_ERR_CHIP((((u32)rxphyproclimfrctarget << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_RX_PHY_PROC_LIM_FRC_ADDR, (cl_reg_read(chip, RIU_RX_PHY_PROC_LIM_FRC_ADDR) & ~((u32)0x3FFFFFFF)) | ((u32)rxphyproclimfrctarget << 0));
}

/**
 * @brief RX_SIG_END_FRC register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    RX_SIG_END_FRC_CANCEL     0
 *    29:00 RX_SIG_END_FRC_TARGET     0x0
 * </pre>
 */
#define RIU_RX_SIG_END_FRC_ADDR        (REG_RIU_BASE_ADDR + 0x000006E4)
#define RIU_RX_SIG_END_FRC_OFFSET      0x000006E4
#define RIU_RX_SIG_END_FRC_INDEX       0x000001B9
#define RIU_RX_SIG_END_FRC_RESET       0x00000000

static inline u32 riu_rx_sig_end_frc_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RX_SIG_END_FRC_ADDR);
}

static inline void riu_rx_sig_end_frc_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RX_SIG_END_FRC_ADDR, value);
}

/* Field definitions */
#define RIU_RX_SIG_END_FRC_RX_SIG_END_FRC_CANCEL_BIT    ((u32)0x80000000)
#define RIU_RX_SIG_END_FRC_RX_SIG_END_FRC_CANCEL_POS    31
#define RIU_RX_SIG_END_FRC_RX_SIG_END_FRC_TARGET_MASK    ((u32)0x3FFFFFFF)
#define RIU_RX_SIG_END_FRC_RX_SIG_END_FRC_TARGET_LSB    0
#define RIU_RX_SIG_END_FRC_RX_SIG_END_FRC_TARGET_WIDTH    ((u32)0x0000001E)

#define RIU_RX_SIG_END_FRC_RX_SIG_END_FRC_CANCEL_RST    0x0
#define RIU_RX_SIG_END_FRC_RX_SIG_END_FRC_TARGET_RST    0x0

static inline void riu_rx_sig_end_frc_pack(struct cl_chip *chip, u8 rx_sig_end_frc_cancel, u32 rx_sig_end_frc_target)
{
	ASSERT_ERR_CHIP((((u32)rx_sig_end_frc_cancel << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rx_sig_end_frc_target << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_RX_SIG_END_FRC_ADDR, ((u32)rx_sig_end_frc_cancel << 31) | ((u32)rx_sig_end_frc_target << 0));
}

static inline void riu_rx_sig_end_frc_unpack(struct cl_chip *chip, u8 *rx_sig_end_frc_cancel, u32 *rx_sig_end_frc_target)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_SIG_END_FRC_ADDR);

	*rx_sig_end_frc_cancel = (local_val & ((u32)0x80000000)) >> 31;
	*rx_sig_end_frc_target = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_rx_sig_end_frc_rx_sig_end_frc_cancel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_SIG_END_FRC_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_rx_sig_end_frc_rx_sig_end_frc_cancel_setf(struct cl_chip *chip, u8 rxsigendfrccancel)
{
	ASSERT_ERR_CHIP((((u32)rxsigendfrccancel << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_RX_SIG_END_FRC_ADDR, (cl_reg_read(chip, RIU_RX_SIG_END_FRC_ADDR) & ~((u32)0x80000000)) | ((u32)rxsigendfrccancel << 31));
}

static inline u32 riu_rx_sig_end_frc_rx_sig_end_frc_target_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_SIG_END_FRC_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

static inline void riu_rx_sig_end_frc_rx_sig_end_frc_target_setf(struct cl_chip *chip, u32 rxsigendfrctarget)
{
	ASSERT_ERR_CHIP((((u32)rxsigendfrctarget << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_RX_SIG_END_FRC_ADDR, (cl_reg_read(chip, RIU_RX_SIG_END_FRC_ADDR) & ~((u32)0x3FFFFFFF)) | ((u32)rxsigendfrctarget << 0));
}

/**
 * @brief RX_AGC_BLOCK_END_FRC register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    RX_AGC_BLOCK_END_FRC_CANCEL 0
 *    29:00 RX_AGC_BLOCK_END_FRC_TARGET 0x0
 * </pre>
 */
#define RIU_RX_AGC_BLOCK_END_FRC_ADDR        (REG_RIU_BASE_ADDR + 0x000006E8)
#define RIU_RX_AGC_BLOCK_END_FRC_OFFSET      0x000006E8
#define RIU_RX_AGC_BLOCK_END_FRC_INDEX       0x000001BA
#define RIU_RX_AGC_BLOCK_END_FRC_RESET       0x00000000

static inline u32 riu_rx_agc_block_end_frc_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RX_AGC_BLOCK_END_FRC_ADDR);
}

static inline void riu_rx_agc_block_end_frc_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RX_AGC_BLOCK_END_FRC_ADDR, value);
}

/* Field definitions */
#define RIU_RX_AGC_BLOCK_END_FRC_RX_AGC_BLOCK_END_FRC_CANCEL_BIT    ((u32)0x80000000)
#define RIU_RX_AGC_BLOCK_END_FRC_RX_AGC_BLOCK_END_FRC_CANCEL_POS    31
#define RIU_RX_AGC_BLOCK_END_FRC_RX_AGC_BLOCK_END_FRC_TARGET_MASK    ((u32)0x3FFFFFFF)
#define RIU_RX_AGC_BLOCK_END_FRC_RX_AGC_BLOCK_END_FRC_TARGET_LSB    0
#define RIU_RX_AGC_BLOCK_END_FRC_RX_AGC_BLOCK_END_FRC_TARGET_WIDTH    ((u32)0x0000001E)

#define RIU_RX_AGC_BLOCK_END_FRC_RX_AGC_BLOCK_END_FRC_CANCEL_RST    0x0
#define RIU_RX_AGC_BLOCK_END_FRC_RX_AGC_BLOCK_END_FRC_TARGET_RST    0x0

static inline void riu_rx_agc_block_end_frc_pack(struct cl_chip *chip, u8 rx_agc_block_end_frc_cancel, u32 rx_agc_block_end_frc_target)
{
	ASSERT_ERR_CHIP((((u32)rx_agc_block_end_frc_cancel << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rx_agc_block_end_frc_target << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_RX_AGC_BLOCK_END_FRC_ADDR, ((u32)rx_agc_block_end_frc_cancel << 31) | ((u32)rx_agc_block_end_frc_target << 0));
}

static inline void riu_rx_agc_block_end_frc_unpack(struct cl_chip *chip, u8 *rx_agc_block_end_frc_cancel, u32 *rx_agc_block_end_frc_target)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_AGC_BLOCK_END_FRC_ADDR);

	*rx_agc_block_end_frc_cancel = (local_val & ((u32)0x80000000)) >> 31;
	*rx_agc_block_end_frc_target = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_rx_agc_block_end_frc_rx_agc_block_end_frc_cancel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_AGC_BLOCK_END_FRC_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_rx_agc_block_end_frc_rx_agc_block_end_frc_cancel_setf(struct cl_chip *chip, u8 rxagcblockendfrccancel)
{
	ASSERT_ERR_CHIP((((u32)rxagcblockendfrccancel << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_RX_AGC_BLOCK_END_FRC_ADDR, (cl_reg_read(chip, RIU_RX_AGC_BLOCK_END_FRC_ADDR) & ~((u32)0x80000000)) | ((u32)rxagcblockendfrccancel << 31));
}

static inline u32 riu_rx_agc_block_end_frc_rx_agc_block_end_frc_target_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_AGC_BLOCK_END_FRC_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

static inline void riu_rx_agc_block_end_frc_rx_agc_block_end_frc_target_setf(struct cl_chip *chip, u32 rxagcblockendfrctarget)
{
	ASSERT_ERR_CHIP((((u32)rxagcblockendfrctarget << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_RX_AGC_BLOCK_END_FRC_ADDR, (cl_reg_read(chip, RIU_RX_AGC_BLOCK_END_FRC_ADDR) & ~((u32)0x3FFFFFFF)) | ((u32)rxagcblockendfrctarget << 0));
}

/**
 * @brief RX_AGC_EVENT_FRC register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    RX_AGC_EVENT_FRC_CANCEL   0
 *    29:00 RX_AGC_EVENT_FRC_TARGET   0x0
 * </pre>
 */
#define RIU_RX_AGC_EVENT_FRC_ADDR        (REG_RIU_BASE_ADDR + 0x000006EC)
#define RIU_RX_AGC_EVENT_FRC_OFFSET      0x000006EC
#define RIU_RX_AGC_EVENT_FRC_INDEX       0x000001BB
#define RIU_RX_AGC_EVENT_FRC_RESET       0x00000000

static inline u32 riu_rx_agc_event_frc_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RX_AGC_EVENT_FRC_ADDR);
}

static inline void riu_rx_agc_event_frc_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RX_AGC_EVENT_FRC_ADDR, value);
}

/* Field definitions */
#define RIU_RX_AGC_EVENT_FRC_RX_AGC_EVENT_FRC_CANCEL_BIT    ((u32)0x80000000)
#define RIU_RX_AGC_EVENT_FRC_RX_AGC_EVENT_FRC_CANCEL_POS    31
#define RIU_RX_AGC_EVENT_FRC_RX_AGC_EVENT_FRC_TARGET_MASK    ((u32)0x3FFFFFFF)
#define RIU_RX_AGC_EVENT_FRC_RX_AGC_EVENT_FRC_TARGET_LSB    0
#define RIU_RX_AGC_EVENT_FRC_RX_AGC_EVENT_FRC_TARGET_WIDTH    ((u32)0x0000001E)

#define RIU_RX_AGC_EVENT_FRC_RX_AGC_EVENT_FRC_CANCEL_RST    0x0
#define RIU_RX_AGC_EVENT_FRC_RX_AGC_EVENT_FRC_TARGET_RST    0x0

static inline void riu_rx_agc_event_frc_pack(struct cl_chip *chip, u8 rx_agc_event_frc_cancel, u32 rx_agc_event_frc_target)
{
	ASSERT_ERR_CHIP((((u32)rx_agc_event_frc_cancel << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)rx_agc_event_frc_target << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_RX_AGC_EVENT_FRC_ADDR, ((u32)rx_agc_event_frc_cancel << 31) | ((u32)rx_agc_event_frc_target << 0));
}

static inline void riu_rx_agc_event_frc_unpack(struct cl_chip *chip, u8 *rx_agc_event_frc_cancel, u32 *rx_agc_event_frc_target)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_AGC_EVENT_FRC_ADDR);

	*rx_agc_event_frc_cancel = (local_val & ((u32)0x80000000)) >> 31;
	*rx_agc_event_frc_target = (local_val & ((u32)0x3FFFFFFF)) >> 0;
}

static inline u8 riu_rx_agc_event_frc_rx_agc_event_frc_cancel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_AGC_EVENT_FRC_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_rx_agc_event_frc_rx_agc_event_frc_cancel_setf(struct cl_chip *chip, u8 rxagceventfrccancel)
{
	ASSERT_ERR_CHIP((((u32)rxagceventfrccancel << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_RX_AGC_EVENT_FRC_ADDR, (cl_reg_read(chip, RIU_RX_AGC_EVENT_FRC_ADDR) & ~((u32)0x80000000)) | ((u32)rxagceventfrccancel << 31));
}

static inline u32 riu_rx_agc_event_frc_rx_agc_event_frc_target_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RX_AGC_EVENT_FRC_ADDR);

	return (u32)((local_val & ((u32)0x3FFFFFFF)) >> 0);
}

static inline void riu_rx_agc_event_frc_rx_agc_event_frc_target_setf(struct cl_chip *chip, u32 rxagceventfrctarget)
{
	ASSERT_ERR_CHIP((((u32)rxagceventfrctarget << 0) & ~((u32)0x3FFFFFFF)) == 0);
	cl_reg_write(chip, RIU_RX_AGC_EVENT_FRC_ADDR, (cl_reg_read(chip, RIU_RX_AGC_EVENT_FRC_ADDR) & ~((u32)0x3FFFFFFF)) | ((u32)rxagceventfrctarget << 0));
}

/**
 * @brief FRC_COMP_STAT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:24 FRC_AGC_EVENT_CNT         0x0
 *    23:20 FRC_AGC_BLOCK_END_CNT     0x0
 *    19:16 FRC_RX_SIG_END_CNT        0x0
 *    15:12 FRC_RX_PHY_PROC_LIM_CNT   0x0
 *    11:08 FRC_RX_END4_T_CNT         0x0
 *    07:04 FRC_GAIN_UP_CNT           0x0
 *    03:00 FRC_START_ESTIM_CNT       0x0
 * </pre>
 */
#define RIU_FRC_COMP_STAT_1_ADDR        (REG_RIU_BASE_ADDR + 0x000006F0)
#define RIU_FRC_COMP_STAT_1_OFFSET      0x000006F0
#define RIU_FRC_COMP_STAT_1_INDEX       0x000001BC
#define RIU_FRC_COMP_STAT_1_RESET       0x00000000

static inline u32 riu_frc_comp_stat_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FRC_COMP_STAT_1_ADDR);
}

/* Field definitions */
#define RIU_FRC_COMP_STAT_1_FRC_AGC_EVENT_CNT_MASK    ((u32)0x0F000000)
#define RIU_FRC_COMP_STAT_1_FRC_AGC_EVENT_CNT_LSB    24
#define RIU_FRC_COMP_STAT_1_FRC_AGC_EVENT_CNT_WIDTH    ((u32)0x00000004)
#define RIU_FRC_COMP_STAT_1_FRC_AGC_BLOCK_END_CNT_MASK    ((u32)0x00F00000)
#define RIU_FRC_COMP_STAT_1_FRC_AGC_BLOCK_END_CNT_LSB    20
#define RIU_FRC_COMP_STAT_1_FRC_AGC_BLOCK_END_CNT_WIDTH    ((u32)0x00000004)
#define RIU_FRC_COMP_STAT_1_FRC_RX_SIG_END_CNT_MASK    ((u32)0x000F0000)
#define RIU_FRC_COMP_STAT_1_FRC_RX_SIG_END_CNT_LSB    16
#define RIU_FRC_COMP_STAT_1_FRC_RX_SIG_END_CNT_WIDTH    ((u32)0x00000004)
#define RIU_FRC_COMP_STAT_1_FRC_RX_PHY_PROC_LIM_CNT_MASK    ((u32)0x0000F000)
#define RIU_FRC_COMP_STAT_1_FRC_RX_PHY_PROC_LIM_CNT_LSB    12
#define RIU_FRC_COMP_STAT_1_FRC_RX_PHY_PROC_LIM_CNT_WIDTH    ((u32)0x00000004)
#define RIU_FRC_COMP_STAT_1_FRC_RX_END_4_T_CNT_MASK    ((u32)0x00000F00)
#define RIU_FRC_COMP_STAT_1_FRC_RX_END_4_T_CNT_LSB    8
#define RIU_FRC_COMP_STAT_1_FRC_RX_END_4_T_CNT_WIDTH    ((u32)0x00000004)
#define RIU_FRC_COMP_STAT_1_FRC_GAIN_UP_CNT_MASK    ((u32)0x000000F0)
#define RIU_FRC_COMP_STAT_1_FRC_GAIN_UP_CNT_LSB    4
#define RIU_FRC_COMP_STAT_1_FRC_GAIN_UP_CNT_WIDTH    ((u32)0x00000004)
#define RIU_FRC_COMP_STAT_1_FRC_START_ESTIM_CNT_MASK    ((u32)0x0000000F)
#define RIU_FRC_COMP_STAT_1_FRC_START_ESTIM_CNT_LSB    0
#define RIU_FRC_COMP_STAT_1_FRC_START_ESTIM_CNT_WIDTH    ((u32)0x00000004)

#define RIU_FRC_COMP_STAT_1_FRC_AGC_EVENT_CNT_RST    0x0
#define RIU_FRC_COMP_STAT_1_FRC_AGC_BLOCK_END_CNT_RST    0x0
#define RIU_FRC_COMP_STAT_1_FRC_RX_SIG_END_CNT_RST    0x0
#define RIU_FRC_COMP_STAT_1_FRC_RX_PHY_PROC_LIM_CNT_RST    0x0
#define RIU_FRC_COMP_STAT_1_FRC_RX_END_4_T_CNT_RST    0x0
#define RIU_FRC_COMP_STAT_1_FRC_GAIN_UP_CNT_RST    0x0
#define RIU_FRC_COMP_STAT_1_FRC_START_ESTIM_CNT_RST    0x0

static inline void riu_frc_comp_stat_1_unpack(struct cl_chip *chip, u8 *frc_agc_event_cnt, u8 *frc_agc_block_end_cnt, u8 *frc_rx_sig_end_cnt, u8 *frc_rx_phy_proc_lim_cnt, u8 *frc_rx_end4_t_cnt, u8 *frc_gain_up_cnt, u8 *frc_start_estim_cnt)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_1_ADDR);

	*frc_agc_event_cnt = (local_val & ((u32)0x0F000000)) >> 24;
	*frc_agc_block_end_cnt = (local_val & ((u32)0x00F00000)) >> 20;
	*frc_rx_sig_end_cnt = (local_val & ((u32)0x000F0000)) >> 16;
	*frc_rx_phy_proc_lim_cnt = (local_val & ((u32)0x0000F000)) >> 12;
	*frc_rx_end4_t_cnt = (local_val & ((u32)0x00000F00)) >> 8;
	*frc_gain_up_cnt = (local_val & ((u32)0x000000F0)) >> 4;
	*frc_start_estim_cnt = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 riu_frc_comp_stat_1_frc_agc_event_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_1_ADDR);

	return (u8)((local_val & ((u32)0x0F000000)) >> 24);
}

static inline u8 riu_frc_comp_stat_1_frc_agc_block_end_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_1_ADDR);

	return (u8)((local_val & ((u32)0x00F00000)) >> 20);
}

static inline u8 riu_frc_comp_stat_1_frc_rx_sig_end_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_1_ADDR);

	return (u8)((local_val & ((u32)0x000F0000)) >> 16);
}

static inline u8 riu_frc_comp_stat_1_frc_rx_phy_proc_lim_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_1_ADDR);

	return (u8)((local_val & ((u32)0x0000F000)) >> 12);
}

static inline u8 riu_frc_comp_stat_1_frc_rx_end_4_t_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_1_ADDR);

	return (u8)((local_val & ((u32)0x00000F00)) >> 8);
}

static inline u8 riu_frc_comp_stat_1_frc_gain_up_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_1_ADDR);

	return (u8)((local_val & ((u32)0x000000F0)) >> 4);
}

static inline u8 riu_frc_comp_stat_1_frc_start_estim_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_1_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

/**
 * @brief FRC_COMP_STAT_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    18:15 FRC_START_HE_LTF_RX_CNT   0x0
 *    10    FRC_START_HE_LTF_RX_MISS  0
 *    08    FRC_AGC_EVENT_MISS        0
 *    07    FRC_AGC_BLOCK_END_MISS    0
 *    06    FRC_RX_SIG_END_MISS       0
 *    05    FRC_RX_PHY_PROC_LIM_MISS  0
 *    04    FRC_RX_END4_T_MISS        0
 *    03    FRC_GAIN_UP_MISS          0
 *    02    FRC_START_ESTIM_MISS      0
 *    01    FRC_TXSTART_MISS          0
 *    00    FRC_TXEND_MISS            0
 * </pre>
 */
#define RIU_FRC_COMP_STAT_2_ADDR        (REG_RIU_BASE_ADDR + 0x000006F4)
#define RIU_FRC_COMP_STAT_2_OFFSET      0x000006F4
#define RIU_FRC_COMP_STAT_2_INDEX       0x000001BD
#define RIU_FRC_COMP_STAT_2_RESET       0x00000000

static inline u32 riu_frc_comp_stat_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FRC_COMP_STAT_2_ADDR);
}

/* Field definitions */
#define RIU_FRC_COMP_STAT_2_FRC_START_HE_LTF_RX_CNT_MASK    ((u32)0x00078000)
#define RIU_FRC_COMP_STAT_2_FRC_START_HE_LTF_RX_CNT_LSB    15
#define RIU_FRC_COMP_STAT_2_FRC_START_HE_LTF_RX_CNT_WIDTH    ((u32)0x00000004)
#define RIU_FRC_COMP_STAT_2_FRC_START_HE_LTF_RX_MISS_BIT    ((u32)0x00000400)
#define RIU_FRC_COMP_STAT_2_FRC_START_HE_LTF_RX_MISS_POS    10
#define RIU_FRC_COMP_STAT_2_FRC_AGC_EVENT_MISS_BIT    ((u32)0x00000100)
#define RIU_FRC_COMP_STAT_2_FRC_AGC_EVENT_MISS_POS    8
#define RIU_FRC_COMP_STAT_2_FRC_AGC_BLOCK_END_MISS_BIT    ((u32)0x00000080)
#define RIU_FRC_COMP_STAT_2_FRC_AGC_BLOCK_END_MISS_POS    7
#define RIU_FRC_COMP_STAT_2_FRC_RX_SIG_END_MISS_BIT    ((u32)0x00000040)
#define RIU_FRC_COMP_STAT_2_FRC_RX_SIG_END_MISS_POS    6
#define RIU_FRC_COMP_STAT_2_FRC_RX_PHY_PROC_LIM_MISS_BIT    ((u32)0x00000020)
#define RIU_FRC_COMP_STAT_2_FRC_RX_PHY_PROC_LIM_MISS_POS    5
#define RIU_FRC_COMP_STAT_2_FRC_RX_END_4_T_MISS_BIT    ((u32)0x00000010)
#define RIU_FRC_COMP_STAT_2_FRC_RX_END_4_T_MISS_POS    4
#define RIU_FRC_COMP_STAT_2_FRC_GAIN_UP_MISS_BIT    ((u32)0x00000008)
#define RIU_FRC_COMP_STAT_2_FRC_GAIN_UP_MISS_POS    3
#define RIU_FRC_COMP_STAT_2_FRC_START_ESTIM_MISS_BIT    ((u32)0x00000004)
#define RIU_FRC_COMP_STAT_2_FRC_START_ESTIM_MISS_POS    2
#define RIU_FRC_COMP_STAT_2_FRC_TXSTART_MISS_BIT    ((u32)0x00000002)
#define RIU_FRC_COMP_STAT_2_FRC_TXSTART_MISS_POS    1
#define RIU_FRC_COMP_STAT_2_FRC_TXEND_MISS_BIT    ((u32)0x00000001)
#define RIU_FRC_COMP_STAT_2_FRC_TXEND_MISS_POS    0

#define RIU_FRC_COMP_STAT_2_FRC_START_HE_LTF_RX_CNT_RST    0x0
#define RIU_FRC_COMP_STAT_2_FRC_START_HE_LTF_RX_MISS_RST    0x0
#define RIU_FRC_COMP_STAT_2_FRC_AGC_EVENT_MISS_RST    0x0
#define RIU_FRC_COMP_STAT_2_FRC_AGC_BLOCK_END_MISS_RST    0x0
#define RIU_FRC_COMP_STAT_2_FRC_RX_SIG_END_MISS_RST    0x0
#define RIU_FRC_COMP_STAT_2_FRC_RX_PHY_PROC_LIM_MISS_RST    0x0
#define RIU_FRC_COMP_STAT_2_FRC_RX_END_4_T_MISS_RST    0x0
#define RIU_FRC_COMP_STAT_2_FRC_GAIN_UP_MISS_RST    0x0
#define RIU_FRC_COMP_STAT_2_FRC_START_ESTIM_MISS_RST    0x0
#define RIU_FRC_COMP_STAT_2_FRC_TXSTART_MISS_RST    0x0
#define RIU_FRC_COMP_STAT_2_FRC_TXEND_MISS_RST    0x0

static inline void riu_frc_comp_stat_2_unpack(struct cl_chip *chip, u8 *frc_start_he_ltf_rx_cnt, u8 *frc_start_he_ltf_rx_miss, u8 *frc_agc_event_miss, u8 *frc_agc_block_end_miss, u8 *frc_rx_sig_end_miss, u8 *frc_rx_phy_proc_lim_miss, u8 *frc_rx_end4_t_miss, u8 *frc_gain_up_miss, u8 *frc_start_estim_miss, u8 *frc_txstart_miss, u8 *frc_txend_miss)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_2_ADDR);

	*frc_start_he_ltf_rx_cnt = (local_val & ((u32)0x00078000)) >> 15;
	*frc_start_he_ltf_rx_miss = (local_val & ((u32)0x00000400)) >> 10;
	*frc_agc_event_miss = (local_val & ((u32)0x00000100)) >> 8;
	*frc_agc_block_end_miss = (local_val & ((u32)0x00000080)) >> 7;
	*frc_rx_sig_end_miss = (local_val & ((u32)0x00000040)) >> 6;
	*frc_rx_phy_proc_lim_miss = (local_val & ((u32)0x00000020)) >> 5;
	*frc_rx_end4_t_miss = (local_val & ((u32)0x00000010)) >> 4;
	*frc_gain_up_miss = (local_val & ((u32)0x00000008)) >> 3;
	*frc_start_estim_miss = (local_val & ((u32)0x00000004)) >> 2;
	*frc_txstart_miss = (local_val & ((u32)0x00000002)) >> 1;
	*frc_txend_miss = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_frc_comp_stat_2_frc_start_he_ltf_rx_cnt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00078000)) >> 15);
}

static inline u8 riu_frc_comp_stat_2_frc_start_he_ltf_rx_miss_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline u8 riu_frc_comp_stat_2_frc_agc_event_miss_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline u8 riu_frc_comp_stat_2_frc_agc_block_end_miss_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline u8 riu_frc_comp_stat_2_frc_rx_sig_end_miss_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline u8 riu_frc_comp_stat_2_frc_rx_phy_proc_lim_miss_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline u8 riu_frc_comp_stat_2_frc_rx_end_4_t_miss_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline u8 riu_frc_comp_stat_2_frc_gain_up_miss_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline u8 riu_frc_comp_stat_2_frc_start_estim_miss_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline u8 riu_frc_comp_stat_2_frc_txstart_miss_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline u8 riu_frc_comp_stat_2_frc_txend_miss_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FRC_COMP_STAT_2_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

/**
 * @brief IQDC_TX_0_COEF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_tx0_fir_coeff_2      0x0
 *    20:12 iqdc_tx0_fir_coeff_1      0x0
 *    08:00 iqdc_tx0_fir_coeff_0      0x0
 * </pre>
 */
#define RIU_IQDC_TX_0_COEF_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000700)
#define RIU_IQDC_TX_0_COEF_0_OFFSET      0x00000700
#define RIU_IQDC_TX_0_COEF_0_INDEX       0x000001C0
#define RIU_IQDC_TX_0_COEF_0_RESET       0x00000000

static inline u32 riu_iqdc_tx_0_coef_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_0_COEF_0_ADDR);
}

static inline void riu_iqdc_tx_0_coef_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_0_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_0_COEF_0_IQDC_TX_0_FIR_COEFF_2_MASK    ((u32)0xFF800000)
#define RIU_IQDC_TX_0_COEF_0_IQDC_TX_0_FIR_COEFF_2_LSB    23
#define RIU_IQDC_TX_0_COEF_0_IQDC_TX_0_FIR_COEFF_2_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_0_COEF_0_IQDC_TX_0_FIR_COEFF_1_MASK    ((u32)0x001FF000)
#define RIU_IQDC_TX_0_COEF_0_IQDC_TX_0_FIR_COEFF_1_LSB    12
#define RIU_IQDC_TX_0_COEF_0_IQDC_TX_0_FIR_COEFF_1_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_0_COEF_0_IQDC_TX_0_FIR_COEFF_0_MASK    ((u32)0x000001FF)
#define RIU_IQDC_TX_0_COEF_0_IQDC_TX_0_FIR_COEFF_0_LSB    0
#define RIU_IQDC_TX_0_COEF_0_IQDC_TX_0_FIR_COEFF_0_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_TX_0_COEF_0_IQDC_TX_0_FIR_COEFF_2_RST    0x0
#define RIU_IQDC_TX_0_COEF_0_IQDC_TX_0_FIR_COEFF_1_RST    0x0
#define RIU_IQDC_TX_0_COEF_0_IQDC_TX_0_FIR_COEFF_0_RST    0x0

static inline void riu_iqdc_tx_0_coef_0_pack(struct cl_chip *chip, u16 iqdc_tx0_fir_coeff_2, u16 iqdc_tx0_fir_coeff_1, u16 iqdc_tx0_fir_coeff_0)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_2 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_1 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_0 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_0_ADDR, ((u32)iqdc_tx0_fir_coeff_2 << 23) | ((u32)iqdc_tx0_fir_coeff_1 << 12) | ((u32)iqdc_tx0_fir_coeff_0 << 0));
}

static inline void riu_iqdc_tx_0_coef_0_unpack(struct cl_chip *chip, u16 *iqdc_tx0_fir_coeff_2, u16 *iqdc_tx0_fir_coeff_1, u16 *iqdc_tx0_fir_coeff_0)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_0_ADDR);

	*iqdc_tx0_fir_coeff_2 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_tx0_fir_coeff_1 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_tx0_fir_coeff_0 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_tx_0_coef_0_iqdc_tx_0_fir_coeff_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_0_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_tx_0_coef_0_iqdc_tx_0_fir_coeff_2_setf(struct cl_chip *chip, u16 iqdctx0fircoeff2)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff2 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_0_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_0_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdctx0fircoeff2 << 23));
}

static inline u16 riu_iqdc_tx_0_coef_0_iqdc_tx_0_fir_coeff_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_0_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_tx_0_coef_0_iqdc_tx_0_fir_coeff_1_setf(struct cl_chip *chip, u16 iqdctx0fircoeff1)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff1 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_0_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_0_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdctx0fircoeff1 << 12));
}

static inline u16 riu_iqdc_tx_0_coef_0_iqdc_tx_0_fir_coeff_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_0_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_tx_0_coef_0_iqdc_tx_0_fir_coeff_0_setf(struct cl_chip *chip, u16 iqdctx0fircoeff0)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff0 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_0_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_0_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdctx0fircoeff0 << 0));
}

/**
 * @brief IQDC_TX_0_COEF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_tx0_fir_coeff_5      0x0
 *    20:12 iqdc_tx0_fir_coeff_4      0x0
 *    08:00 iqdc_tx0_fir_coeff_3      0x0
 * </pre>
 */
#define RIU_IQDC_TX_0_COEF_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000704)
#define RIU_IQDC_TX_0_COEF_1_OFFSET      0x00000704
#define RIU_IQDC_TX_0_COEF_1_INDEX       0x000001C1
#define RIU_IQDC_TX_0_COEF_1_RESET       0x00000000

static inline u32 riu_iqdc_tx_0_coef_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_0_COEF_1_ADDR);
}

static inline void riu_iqdc_tx_0_coef_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_0_COEF_1_IQDC_TX_0_FIR_COEFF_5_MASK    ((u32)0xFF800000)
#define RIU_IQDC_TX_0_COEF_1_IQDC_TX_0_FIR_COEFF_5_LSB    23
#define RIU_IQDC_TX_0_COEF_1_IQDC_TX_0_FIR_COEFF_5_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_0_COEF_1_IQDC_TX_0_FIR_COEFF_4_MASK    ((u32)0x001FF000)
#define RIU_IQDC_TX_0_COEF_1_IQDC_TX_0_FIR_COEFF_4_LSB    12
#define RIU_IQDC_TX_0_COEF_1_IQDC_TX_0_FIR_COEFF_4_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_0_COEF_1_IQDC_TX_0_FIR_COEFF_3_MASK    ((u32)0x000001FF)
#define RIU_IQDC_TX_0_COEF_1_IQDC_TX_0_FIR_COEFF_3_LSB    0
#define RIU_IQDC_TX_0_COEF_1_IQDC_TX_0_FIR_COEFF_3_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_TX_0_COEF_1_IQDC_TX_0_FIR_COEFF_5_RST    0x0
#define RIU_IQDC_TX_0_COEF_1_IQDC_TX_0_FIR_COEFF_4_RST    0x0
#define RIU_IQDC_TX_0_COEF_1_IQDC_TX_0_FIR_COEFF_3_RST    0x0

static inline void riu_iqdc_tx_0_coef_1_pack(struct cl_chip *chip, u16 iqdc_tx0_fir_coeff_5, u16 iqdc_tx0_fir_coeff_4, u16 iqdc_tx0_fir_coeff_3)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_5 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_4 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_3 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_1_ADDR, ((u32)iqdc_tx0_fir_coeff_5 << 23) | ((u32)iqdc_tx0_fir_coeff_4 << 12) | ((u32)iqdc_tx0_fir_coeff_3 << 0));
}

static inline void riu_iqdc_tx_0_coef_1_unpack(struct cl_chip *chip, u16 *iqdc_tx0_fir_coeff_5, u16 *iqdc_tx0_fir_coeff_4, u16 *iqdc_tx0_fir_coeff_3)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_1_ADDR);

	*iqdc_tx0_fir_coeff_5 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_tx0_fir_coeff_4 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_tx0_fir_coeff_3 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_tx_0_coef_1_iqdc_tx_0_fir_coeff_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_1_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_tx_0_coef_1_iqdc_tx_0_fir_coeff_5_setf(struct cl_chip *chip, u16 iqdctx0fircoeff5)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff5 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_1_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_1_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdctx0fircoeff5 << 23));
}

static inline u16 riu_iqdc_tx_0_coef_1_iqdc_tx_0_fir_coeff_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_1_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_tx_0_coef_1_iqdc_tx_0_fir_coeff_4_setf(struct cl_chip *chip, u16 iqdctx0fircoeff4)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff4 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_1_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_1_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdctx0fircoeff4 << 12));
}

static inline u16 riu_iqdc_tx_0_coef_1_iqdc_tx_0_fir_coeff_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_1_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_tx_0_coef_1_iqdc_tx_0_fir_coeff_3_setf(struct cl_chip *chip, u16 iqdctx0fircoeff3)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff3 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_1_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_1_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdctx0fircoeff3 << 0));
}

/**
 * @brief IQDC_TX_0_COEF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_tx0_fir_coeff_8      0x0
 *    20:12 iqdc_tx0_fir_coeff_7      0x0
 *    08:00 iqdc_tx0_fir_coeff_6      0x0
 * </pre>
 */
#define RIU_IQDC_TX_0_COEF_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000708)
#define RIU_IQDC_TX_0_COEF_2_OFFSET      0x00000708
#define RIU_IQDC_TX_0_COEF_2_INDEX       0x000001C2
#define RIU_IQDC_TX_0_COEF_2_RESET       0x00000000

static inline u32 riu_iqdc_tx_0_coef_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_0_COEF_2_ADDR);
}

static inline void riu_iqdc_tx_0_coef_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_0_COEF_2_IQDC_TX_0_FIR_COEFF_8_MASK    ((u32)0xFF800000)
#define RIU_IQDC_TX_0_COEF_2_IQDC_TX_0_FIR_COEFF_8_LSB    23
#define RIU_IQDC_TX_0_COEF_2_IQDC_TX_0_FIR_COEFF_8_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_0_COEF_2_IQDC_TX_0_FIR_COEFF_7_MASK    ((u32)0x001FF000)
#define RIU_IQDC_TX_0_COEF_2_IQDC_TX_0_FIR_COEFF_7_LSB    12
#define RIU_IQDC_TX_0_COEF_2_IQDC_TX_0_FIR_COEFF_7_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_0_COEF_2_IQDC_TX_0_FIR_COEFF_6_MASK    ((u32)0x000001FF)
#define RIU_IQDC_TX_0_COEF_2_IQDC_TX_0_FIR_COEFF_6_LSB    0
#define RIU_IQDC_TX_0_COEF_2_IQDC_TX_0_FIR_COEFF_6_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_TX_0_COEF_2_IQDC_TX_0_FIR_COEFF_8_RST    0x0
#define RIU_IQDC_TX_0_COEF_2_IQDC_TX_0_FIR_COEFF_7_RST    0x0
#define RIU_IQDC_TX_0_COEF_2_IQDC_TX_0_FIR_COEFF_6_RST    0x0

static inline void riu_iqdc_tx_0_coef_2_pack(struct cl_chip *chip, u16 iqdc_tx0_fir_coeff_8, u16 iqdc_tx0_fir_coeff_7, u16 iqdc_tx0_fir_coeff_6)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_8 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_7 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_6 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_2_ADDR, ((u32)iqdc_tx0_fir_coeff_8 << 23) | ((u32)iqdc_tx0_fir_coeff_7 << 12) | ((u32)iqdc_tx0_fir_coeff_6 << 0));
}

static inline void riu_iqdc_tx_0_coef_2_unpack(struct cl_chip *chip, u16 *iqdc_tx0_fir_coeff_8, u16 *iqdc_tx0_fir_coeff_7, u16 *iqdc_tx0_fir_coeff_6)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_2_ADDR);

	*iqdc_tx0_fir_coeff_8 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_tx0_fir_coeff_7 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_tx0_fir_coeff_6 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_tx_0_coef_2_iqdc_tx_0_fir_coeff_8_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_2_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_tx_0_coef_2_iqdc_tx_0_fir_coeff_8_setf(struct cl_chip *chip, u16 iqdctx0fircoeff8)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff8 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_2_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_2_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdctx0fircoeff8 << 23));
}

static inline u16 riu_iqdc_tx_0_coef_2_iqdc_tx_0_fir_coeff_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_2_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_tx_0_coef_2_iqdc_tx_0_fir_coeff_7_setf(struct cl_chip *chip, u16 iqdctx0fircoeff7)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff7 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_2_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_2_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdctx0fircoeff7 << 12));
}

static inline u16 riu_iqdc_tx_0_coef_2_iqdc_tx_0_fir_coeff_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_2_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_tx_0_coef_2_iqdc_tx_0_fir_coeff_6_setf(struct cl_chip *chip, u16 iqdctx0fircoeff6)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff6 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_2_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_2_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdctx0fircoeff6 << 0));
}

/**
 * @brief IQDC_RX_1_GAIN_SET_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 iqdc_rx1_phase_gain       0x0
 *    10:00 iqdc_rx1_amp_gain         0x400
 * </pre>
 */
#define RIU_IQDC_RX_1_GAIN_SET_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000070C)
#define RIU_IQDC_RX_1_GAIN_SET_2_OFFSET      0x0000070C
#define RIU_IQDC_RX_1_GAIN_SET_2_INDEX       0x000001C3
#define RIU_IQDC_RX_1_GAIN_SET_2_RESET       0x00000400

static inline u32 riu_iqdc_rx_1_gain_set_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_2_ADDR);
}

static inline void riu_iqdc_rx_1_gain_set_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_GAIN_SET_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_GAIN_SET_2_IQDC_RX_1_PHASE_GAIN_MASK    ((u32)0x0FFF0000)
#define RIU_IQDC_RX_1_GAIN_SET_2_IQDC_RX_1_PHASE_GAIN_LSB    16
#define RIU_IQDC_RX_1_GAIN_SET_2_IQDC_RX_1_PHASE_GAIN_WIDTH    ((u32)0x0000000C)
#define RIU_IQDC_RX_1_GAIN_SET_2_IQDC_RX_1_AMP_GAIN_MASK    ((u32)0x000007FF)
#define RIU_IQDC_RX_1_GAIN_SET_2_IQDC_RX_1_AMP_GAIN_LSB    0
#define RIU_IQDC_RX_1_GAIN_SET_2_IQDC_RX_1_AMP_GAIN_WIDTH    ((u32)0x0000000B)

#define RIU_IQDC_RX_1_GAIN_SET_2_IQDC_RX_1_PHASE_GAIN_RST    0x0
#define RIU_IQDC_RX_1_GAIN_SET_2_IQDC_RX_1_AMP_GAIN_RST    0x400

static inline void riu_iqdc_rx_1_gain_set_2_pack(struct cl_chip *chip, u16 iqdc_rx1_phase_gain, u16 iqdc_rx1_amp_gain)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_phase_gain << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_amp_gain << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_GAIN_SET_2_ADDR, ((u32)iqdc_rx1_phase_gain << 16) | ((u32)iqdc_rx1_amp_gain << 0));
}

static inline void riu_iqdc_rx_1_gain_set_2_unpack(struct cl_chip *chip, u16 *iqdc_rx1_phase_gain, u16 *iqdc_rx1_amp_gain)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_2_ADDR);

	*iqdc_rx1_phase_gain = (local_val & ((u32)0x0FFF0000)) >> 16;
	*iqdc_rx1_amp_gain = (local_val & ((u32)0x000007FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_gain_set_2_iqdc_rx_1_phase_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_iqdc_rx_1_gain_set_2_iqdc_rx_1_phase_gain_setf(struct cl_chip *chip, u16 iqdcrx1phasegain)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1phasegain << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_GAIN_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_2_ADDR) & ~((u32)0x0FFF0000)) | ((u32)iqdcrx1phasegain << 16));
}

static inline u16 riu_iqdc_rx_1_gain_set_2_iqdc_rx_1_amp_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x000007FF)) >> 0);
}

static inline void riu_iqdc_rx_1_gain_set_2_iqdc_rx_1_amp_gain_setf(struct cl_chip *chip, u16 iqdcrx1ampgain)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1ampgain << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_GAIN_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_2_ADDR) & ~((u32)0x000007FF)) | ((u32)iqdcrx1ampgain << 0));
}

/**
 * @brief IQDC_RX_1_GAIN_SET_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 iqdc_rx1_phase_gain       0x0
 *    10:00 iqdc_rx1_amp_gain         0x400
 * </pre>
 */
#define RIU_IQDC_RX_1_GAIN_SET_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000710)
#define RIU_IQDC_RX_1_GAIN_SET_3_OFFSET      0x00000710
#define RIU_IQDC_RX_1_GAIN_SET_3_INDEX       0x000001C4
#define RIU_IQDC_RX_1_GAIN_SET_3_RESET       0x00000400

static inline u32 riu_iqdc_rx_1_gain_set_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_3_ADDR);
}

static inline void riu_iqdc_rx_1_gain_set_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_GAIN_SET_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_GAIN_SET_3_IQDC_RX_1_PHASE_GAIN_MASK    ((u32)0x0FFF0000)
#define RIU_IQDC_RX_1_GAIN_SET_3_IQDC_RX_1_PHASE_GAIN_LSB    16
#define RIU_IQDC_RX_1_GAIN_SET_3_IQDC_RX_1_PHASE_GAIN_WIDTH    ((u32)0x0000000C)
#define RIU_IQDC_RX_1_GAIN_SET_3_IQDC_RX_1_AMP_GAIN_MASK    ((u32)0x000007FF)
#define RIU_IQDC_RX_1_GAIN_SET_3_IQDC_RX_1_AMP_GAIN_LSB    0
#define RIU_IQDC_RX_1_GAIN_SET_3_IQDC_RX_1_AMP_GAIN_WIDTH    ((u32)0x0000000B)

#define RIU_IQDC_RX_1_GAIN_SET_3_IQDC_RX_1_PHASE_GAIN_RST    0x0
#define RIU_IQDC_RX_1_GAIN_SET_3_IQDC_RX_1_AMP_GAIN_RST    0x400

static inline void riu_iqdc_rx_1_gain_set_3_pack(struct cl_chip *chip, u16 iqdc_rx1_phase_gain, u16 iqdc_rx1_amp_gain)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_phase_gain << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_amp_gain << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_GAIN_SET_3_ADDR, ((u32)iqdc_rx1_phase_gain << 16) | ((u32)iqdc_rx1_amp_gain << 0));
}

static inline void riu_iqdc_rx_1_gain_set_3_unpack(struct cl_chip *chip, u16 *iqdc_rx1_phase_gain, u16 *iqdc_rx1_amp_gain)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_3_ADDR);

	*iqdc_rx1_phase_gain = (local_val & ((u32)0x0FFF0000)) >> 16;
	*iqdc_rx1_amp_gain = (local_val & ((u32)0x000007FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_gain_set_3_iqdc_rx_1_phase_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_iqdc_rx_1_gain_set_3_iqdc_rx_1_phase_gain_setf(struct cl_chip *chip, u16 iqdcrx1phasegain)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1phasegain << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_GAIN_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_3_ADDR) & ~((u32)0x0FFF0000)) | ((u32)iqdcrx1phasegain << 16));
}

static inline u16 riu_iqdc_rx_1_gain_set_3_iqdc_rx_1_amp_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x000007FF)) >> 0);
}

static inline void riu_iqdc_rx_1_gain_set_3_iqdc_rx_1_amp_gain_setf(struct cl_chip *chip, u16 iqdcrx1ampgain)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1ampgain << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_GAIN_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_3_ADDR) & ~((u32)0x000007FF)) | ((u32)iqdcrx1ampgain << 0));
}

/**
 * @brief IQDC_TX_0_GAIN register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 iqdc_tx0_phase_gain       0x0
 *    10:00 iqdc_tx0_amp_gain         0x400
 * </pre>
 */
#define RIU_IQDC_TX_0_GAIN_ADDR        (REG_RIU_BASE_ADDR + 0x00000714)
#define RIU_IQDC_TX_0_GAIN_OFFSET      0x00000714
#define RIU_IQDC_TX_0_GAIN_INDEX       0x000001C5
#define RIU_IQDC_TX_0_GAIN_RESET       0x00000400

static inline u32 riu_iqdc_tx_0_gain_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_0_GAIN_ADDR);
}

static inline void riu_iqdc_tx_0_gain_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_0_GAIN_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_0_GAIN_IQDC_TX_0_PHASE_GAIN_MASK    ((u32)0x0FFF0000)
#define RIU_IQDC_TX_0_GAIN_IQDC_TX_0_PHASE_GAIN_LSB    16
#define RIU_IQDC_TX_0_GAIN_IQDC_TX_0_PHASE_GAIN_WIDTH    ((u32)0x0000000C)
#define RIU_IQDC_TX_0_GAIN_IQDC_TX_0_AMP_GAIN_MASK    ((u32)0x000007FF)
#define RIU_IQDC_TX_0_GAIN_IQDC_TX_0_AMP_GAIN_LSB    0
#define RIU_IQDC_TX_0_GAIN_IQDC_TX_0_AMP_GAIN_WIDTH    ((u32)0x0000000B)

#define RIU_IQDC_TX_0_GAIN_IQDC_TX_0_PHASE_GAIN_RST    0x0
#define RIU_IQDC_TX_0_GAIN_IQDC_TX_0_AMP_GAIN_RST    0x400

static inline void riu_iqdc_tx_0_gain_pack(struct cl_chip *chip, u16 iqdc_tx0_phase_gain, u16 iqdc_tx0_amp_gain)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_phase_gain << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_amp_gain << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_GAIN_ADDR, ((u32)iqdc_tx0_phase_gain << 16) | ((u32)iqdc_tx0_amp_gain << 0));
}

static inline void riu_iqdc_tx_0_gain_unpack(struct cl_chip *chip, u16 *iqdc_tx0_phase_gain, u16 *iqdc_tx0_amp_gain)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_GAIN_ADDR);

	*iqdc_tx0_phase_gain = (local_val & ((u32)0x0FFF0000)) >> 16;
	*iqdc_tx0_amp_gain = (local_val & ((u32)0x000007FF)) >> 0;
}

static inline u16 riu_iqdc_tx_0_gain_iqdc_tx_0_phase_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_GAIN_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_iqdc_tx_0_gain_iqdc_tx_0_phase_gain_setf(struct cl_chip *chip, u16 iqdctx0phasegain)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0phasegain << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_GAIN_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_GAIN_ADDR) & ~((u32)0x0FFF0000)) | ((u32)iqdctx0phasegain << 16));
}

static inline u16 riu_iqdc_tx_0_gain_iqdc_tx_0_amp_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_GAIN_ADDR);

	return (u16)((local_val & ((u32)0x000007FF)) >> 0);
}

static inline void riu_iqdc_tx_0_gain_iqdc_tx_0_amp_gain_setf(struct cl_chip *chip, u16 iqdctx0ampgain)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0ampgain << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_GAIN_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_GAIN_ADDR) & ~((u32)0x000007FF)) | ((u32)iqdctx0ampgain << 0));
}

/**
 * @brief IQDC_TX_0_DC register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 iqdc_tx0_dcq              0x0
 *    11:00 iqdc_tx0_dci              0x0
 * </pre>
 */
#define RIU_IQDC_TX_0_DC_ADDR        (REG_RIU_BASE_ADDR + 0x00000718)
#define RIU_IQDC_TX_0_DC_OFFSET      0x00000718
#define RIU_IQDC_TX_0_DC_INDEX       0x000001C6
#define RIU_IQDC_TX_0_DC_RESET       0x00000000

static inline u32 riu_iqdc_tx_0_dc_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_0_DC_ADDR);
}

static inline void riu_iqdc_tx_0_dc_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_0_DC_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_0_DC_IQDC_TX_0_DCQ_MASK    ((u32)0x0FFF0000)
#define RIU_IQDC_TX_0_DC_IQDC_TX_0_DCQ_LSB    16
#define RIU_IQDC_TX_0_DC_IQDC_TX_0_DCQ_WIDTH    ((u32)0x0000000C)
#define RIU_IQDC_TX_0_DC_IQDC_TX_0_DCI_MASK    ((u32)0x00000FFF)
#define RIU_IQDC_TX_0_DC_IQDC_TX_0_DCI_LSB    0
#define RIU_IQDC_TX_0_DC_IQDC_TX_0_DCI_WIDTH    ((u32)0x0000000C)

#define RIU_IQDC_TX_0_DC_IQDC_TX_0_DCQ_RST    0x0
#define RIU_IQDC_TX_0_DC_IQDC_TX_0_DCI_RST    0x0

static inline void riu_iqdc_tx_0_dc_pack(struct cl_chip *chip, u16 iqdc_tx0_dcq, u16 iqdc_tx0_dci)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_dcq << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_dci << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_DC_ADDR, ((u32)iqdc_tx0_dcq << 16) | ((u32)iqdc_tx0_dci << 0));
}

static inline void riu_iqdc_tx_0_dc_unpack(struct cl_chip *chip, u16 *iqdc_tx0_dcq, u16 *iqdc_tx0_dci)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_DC_ADDR);

	*iqdc_tx0_dcq = (local_val & ((u32)0x0FFF0000)) >> 16;
	*iqdc_tx0_dci = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u16 riu_iqdc_tx_0_dc_iqdc_tx_0_dcq_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_DC_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_iqdc_tx_0_dc_iqdc_tx_0_dcq_setf(struct cl_chip *chip, u16 iqdctx0dcq)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0dcq << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_DC_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_DC_ADDR) & ~((u32)0x0FFF0000)) | ((u32)iqdctx0dcq << 16));
}

static inline u16 riu_iqdc_tx_0_dc_iqdc_tx_0_dci_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_DC_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

static inline void riu_iqdc_tx_0_dc_iqdc_tx_0_dci_setf(struct cl_chip *chip, u16 iqdctx0dci)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0dci << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_DC_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_DC_ADDR) & ~((u32)0x00000FFF)) | ((u32)iqdctx0dci << 0));
}

/**
 * @brief IQDC_TX_1_COEF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_tx1_fir_coeff_2      0x0
 *    20:12 iqdc_tx1_fir_coeff_1      0x0
 *    08:00 iqdc_tx1_fir_coeff_0      0x0
 * </pre>
 */
#define RIU_IQDC_TX_1_COEF_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000720)
#define RIU_IQDC_TX_1_COEF_0_OFFSET      0x00000720
#define RIU_IQDC_TX_1_COEF_0_INDEX       0x000001C8
#define RIU_IQDC_TX_1_COEF_0_RESET       0x00000000

static inline u32 riu_iqdc_tx_1_coef_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_1_COEF_0_ADDR);
}

static inline void riu_iqdc_tx_1_coef_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_0_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_1_COEF_0_IQDC_TX_1_FIR_COEFF_2_MASK    ((u32)0xFF800000)
#define RIU_IQDC_TX_1_COEF_0_IQDC_TX_1_FIR_COEFF_2_LSB    23
#define RIU_IQDC_TX_1_COEF_0_IQDC_TX_1_FIR_COEFF_2_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_1_COEF_0_IQDC_TX_1_FIR_COEFF_1_MASK    ((u32)0x001FF000)
#define RIU_IQDC_TX_1_COEF_0_IQDC_TX_1_FIR_COEFF_1_LSB    12
#define RIU_IQDC_TX_1_COEF_0_IQDC_TX_1_FIR_COEFF_1_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_1_COEF_0_IQDC_TX_1_FIR_COEFF_0_MASK    ((u32)0x000001FF)
#define RIU_IQDC_TX_1_COEF_0_IQDC_TX_1_FIR_COEFF_0_LSB    0
#define RIU_IQDC_TX_1_COEF_0_IQDC_TX_1_FIR_COEFF_0_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_TX_1_COEF_0_IQDC_TX_1_FIR_COEFF_2_RST    0x0
#define RIU_IQDC_TX_1_COEF_0_IQDC_TX_1_FIR_COEFF_1_RST    0x0
#define RIU_IQDC_TX_1_COEF_0_IQDC_TX_1_FIR_COEFF_0_RST    0x0

static inline void riu_iqdc_tx_1_coef_0_pack(struct cl_chip *chip, u16 iqdc_tx1_fir_coeff_2, u16 iqdc_tx1_fir_coeff_1, u16 iqdc_tx1_fir_coeff_0)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_2 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_1 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_0 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_0_ADDR, ((u32)iqdc_tx1_fir_coeff_2 << 23) | ((u32)iqdc_tx1_fir_coeff_1 << 12) | ((u32)iqdc_tx1_fir_coeff_0 << 0));
}

static inline void riu_iqdc_tx_1_coef_0_unpack(struct cl_chip *chip, u16 *iqdc_tx1_fir_coeff_2, u16 *iqdc_tx1_fir_coeff_1, u16 *iqdc_tx1_fir_coeff_0)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_0_ADDR);

	*iqdc_tx1_fir_coeff_2 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_tx1_fir_coeff_1 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_tx1_fir_coeff_0 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_tx_1_coef_0_iqdc_tx_1_fir_coeff_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_0_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_tx_1_coef_0_iqdc_tx_1_fir_coeff_2_setf(struct cl_chip *chip, u16 iqdctx1fircoeff2)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff2 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_0_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_0_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdctx1fircoeff2 << 23));
}

static inline u16 riu_iqdc_tx_1_coef_0_iqdc_tx_1_fir_coeff_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_0_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_tx_1_coef_0_iqdc_tx_1_fir_coeff_1_setf(struct cl_chip *chip, u16 iqdctx1fircoeff1)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff1 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_0_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_0_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdctx1fircoeff1 << 12));
}

static inline u16 riu_iqdc_tx_1_coef_0_iqdc_tx_1_fir_coeff_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_0_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_tx_1_coef_0_iqdc_tx_1_fir_coeff_0_setf(struct cl_chip *chip, u16 iqdctx1fircoeff0)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff0 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_0_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_0_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdctx1fircoeff0 << 0));
}

/**
 * @brief IQDC_TX_1_COEF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_tx1_fir_coeff_5      0x0
 *    20:12 iqdc_tx1_fir_coeff_4      0x0
 *    08:00 iqdc_tx1_fir_coeff_3      0x0
 * </pre>
 */
#define RIU_IQDC_TX_1_COEF_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000724)
#define RIU_IQDC_TX_1_COEF_1_OFFSET      0x00000724
#define RIU_IQDC_TX_1_COEF_1_INDEX       0x000001C9
#define RIU_IQDC_TX_1_COEF_1_RESET       0x00000000

static inline u32 riu_iqdc_tx_1_coef_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_1_COEF_1_ADDR);
}

static inline void riu_iqdc_tx_1_coef_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_1_COEF_1_IQDC_TX_1_FIR_COEFF_5_MASK    ((u32)0xFF800000)
#define RIU_IQDC_TX_1_COEF_1_IQDC_TX_1_FIR_COEFF_5_LSB    23
#define RIU_IQDC_TX_1_COEF_1_IQDC_TX_1_FIR_COEFF_5_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_1_COEF_1_IQDC_TX_1_FIR_COEFF_4_MASK    ((u32)0x001FF000)
#define RIU_IQDC_TX_1_COEF_1_IQDC_TX_1_FIR_COEFF_4_LSB    12
#define RIU_IQDC_TX_1_COEF_1_IQDC_TX_1_FIR_COEFF_4_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_1_COEF_1_IQDC_TX_1_FIR_COEFF_3_MASK    ((u32)0x000001FF)
#define RIU_IQDC_TX_1_COEF_1_IQDC_TX_1_FIR_COEFF_3_LSB    0
#define RIU_IQDC_TX_1_COEF_1_IQDC_TX_1_FIR_COEFF_3_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_TX_1_COEF_1_IQDC_TX_1_FIR_COEFF_5_RST    0x0
#define RIU_IQDC_TX_1_COEF_1_IQDC_TX_1_FIR_COEFF_4_RST    0x0
#define RIU_IQDC_TX_1_COEF_1_IQDC_TX_1_FIR_COEFF_3_RST    0x0

static inline void riu_iqdc_tx_1_coef_1_pack(struct cl_chip *chip, u16 iqdc_tx1_fir_coeff_5, u16 iqdc_tx1_fir_coeff_4, u16 iqdc_tx1_fir_coeff_3)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_5 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_4 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_3 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_1_ADDR, ((u32)iqdc_tx1_fir_coeff_5 << 23) | ((u32)iqdc_tx1_fir_coeff_4 << 12) | ((u32)iqdc_tx1_fir_coeff_3 << 0));
}

static inline void riu_iqdc_tx_1_coef_1_unpack(struct cl_chip *chip, u16 *iqdc_tx1_fir_coeff_5, u16 *iqdc_tx1_fir_coeff_4, u16 *iqdc_tx1_fir_coeff_3)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_1_ADDR);

	*iqdc_tx1_fir_coeff_5 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_tx1_fir_coeff_4 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_tx1_fir_coeff_3 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_tx_1_coef_1_iqdc_tx_1_fir_coeff_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_1_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_tx_1_coef_1_iqdc_tx_1_fir_coeff_5_setf(struct cl_chip *chip, u16 iqdctx1fircoeff5)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff5 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_1_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_1_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdctx1fircoeff5 << 23));
}

static inline u16 riu_iqdc_tx_1_coef_1_iqdc_tx_1_fir_coeff_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_1_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_tx_1_coef_1_iqdc_tx_1_fir_coeff_4_setf(struct cl_chip *chip, u16 iqdctx1fircoeff4)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff4 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_1_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_1_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdctx1fircoeff4 << 12));
}

static inline u16 riu_iqdc_tx_1_coef_1_iqdc_tx_1_fir_coeff_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_1_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_tx_1_coef_1_iqdc_tx_1_fir_coeff_3_setf(struct cl_chip *chip, u16 iqdctx1fircoeff3)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff3 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_1_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_1_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdctx1fircoeff3 << 0));
}

/**
 * @brief IQDC_TX_1_COEF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_tx1_fir_coeff_8      0x0
 *    20:12 iqdc_tx1_fir_coeff_7      0x0
 *    08:00 iqdc_tx1_fir_coeff_6      0x0
 * </pre>
 */
#define RIU_IQDC_TX_1_COEF_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000728)
#define RIU_IQDC_TX_1_COEF_2_OFFSET      0x00000728
#define RIU_IQDC_TX_1_COEF_2_INDEX       0x000001CA
#define RIU_IQDC_TX_1_COEF_2_RESET       0x00000000

static inline u32 riu_iqdc_tx_1_coef_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_1_COEF_2_ADDR);
}

static inline void riu_iqdc_tx_1_coef_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_1_COEF_2_IQDC_TX_1_FIR_COEFF_8_MASK    ((u32)0xFF800000)
#define RIU_IQDC_TX_1_COEF_2_IQDC_TX_1_FIR_COEFF_8_LSB    23
#define RIU_IQDC_TX_1_COEF_2_IQDC_TX_1_FIR_COEFF_8_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_1_COEF_2_IQDC_TX_1_FIR_COEFF_7_MASK    ((u32)0x001FF000)
#define RIU_IQDC_TX_1_COEF_2_IQDC_TX_1_FIR_COEFF_7_LSB    12
#define RIU_IQDC_TX_1_COEF_2_IQDC_TX_1_FIR_COEFF_7_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_1_COEF_2_IQDC_TX_1_FIR_COEFF_6_MASK    ((u32)0x000001FF)
#define RIU_IQDC_TX_1_COEF_2_IQDC_TX_1_FIR_COEFF_6_LSB    0
#define RIU_IQDC_TX_1_COEF_2_IQDC_TX_1_FIR_COEFF_6_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_TX_1_COEF_2_IQDC_TX_1_FIR_COEFF_8_RST    0x0
#define RIU_IQDC_TX_1_COEF_2_IQDC_TX_1_FIR_COEFF_7_RST    0x0
#define RIU_IQDC_TX_1_COEF_2_IQDC_TX_1_FIR_COEFF_6_RST    0x0

static inline void riu_iqdc_tx_1_coef_2_pack(struct cl_chip *chip, u16 iqdc_tx1_fir_coeff_8, u16 iqdc_tx1_fir_coeff_7, u16 iqdc_tx1_fir_coeff_6)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_8 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_7 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_6 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_2_ADDR, ((u32)iqdc_tx1_fir_coeff_8 << 23) | ((u32)iqdc_tx1_fir_coeff_7 << 12) | ((u32)iqdc_tx1_fir_coeff_6 << 0));
}

static inline void riu_iqdc_tx_1_coef_2_unpack(struct cl_chip *chip, u16 *iqdc_tx1_fir_coeff_8, u16 *iqdc_tx1_fir_coeff_7, u16 *iqdc_tx1_fir_coeff_6)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_2_ADDR);

	*iqdc_tx1_fir_coeff_8 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_tx1_fir_coeff_7 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_tx1_fir_coeff_6 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_tx_1_coef_2_iqdc_tx_1_fir_coeff_8_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_2_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_tx_1_coef_2_iqdc_tx_1_fir_coeff_8_setf(struct cl_chip *chip, u16 iqdctx1fircoeff8)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff8 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_2_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_2_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdctx1fircoeff8 << 23));
}

static inline u16 riu_iqdc_tx_1_coef_2_iqdc_tx_1_fir_coeff_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_2_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_tx_1_coef_2_iqdc_tx_1_fir_coeff_7_setf(struct cl_chip *chip, u16 iqdctx1fircoeff7)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff7 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_2_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_2_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdctx1fircoeff7 << 12));
}

static inline u16 riu_iqdc_tx_1_coef_2_iqdc_tx_1_fir_coeff_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_2_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_tx_1_coef_2_iqdc_tx_1_fir_coeff_6_setf(struct cl_chip *chip, u16 iqdctx1fircoeff6)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff6 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_2_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_2_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdctx1fircoeff6 << 0));
}

/**
 * @brief IQDC_TX_1_GAIN register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 iqdc_tx1_phase_gain       0x0
 *    10:00 iqdc_tx1_amp_gain         0x400
 * </pre>
 */
#define RIU_IQDC_TX_1_GAIN_ADDR        (REG_RIU_BASE_ADDR + 0x00000734)
#define RIU_IQDC_TX_1_GAIN_OFFSET      0x00000734
#define RIU_IQDC_TX_1_GAIN_INDEX       0x000001CD
#define RIU_IQDC_TX_1_GAIN_RESET       0x00000400

static inline u32 riu_iqdc_tx_1_gain_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_1_GAIN_ADDR);
}

static inline void riu_iqdc_tx_1_gain_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_1_GAIN_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_1_GAIN_IQDC_TX_1_PHASE_GAIN_MASK    ((u32)0x0FFF0000)
#define RIU_IQDC_TX_1_GAIN_IQDC_TX_1_PHASE_GAIN_LSB    16
#define RIU_IQDC_TX_1_GAIN_IQDC_TX_1_PHASE_GAIN_WIDTH    ((u32)0x0000000C)
#define RIU_IQDC_TX_1_GAIN_IQDC_TX_1_AMP_GAIN_MASK    ((u32)0x000007FF)
#define RIU_IQDC_TX_1_GAIN_IQDC_TX_1_AMP_GAIN_LSB    0
#define RIU_IQDC_TX_1_GAIN_IQDC_TX_1_AMP_GAIN_WIDTH    ((u32)0x0000000B)

#define RIU_IQDC_TX_1_GAIN_IQDC_TX_1_PHASE_GAIN_RST    0x0
#define RIU_IQDC_TX_1_GAIN_IQDC_TX_1_AMP_GAIN_RST    0x400

static inline void riu_iqdc_tx_1_gain_pack(struct cl_chip *chip, u16 iqdc_tx1_phase_gain, u16 iqdc_tx1_amp_gain)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_phase_gain << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_amp_gain << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_GAIN_ADDR, ((u32)iqdc_tx1_phase_gain << 16) | ((u32)iqdc_tx1_amp_gain << 0));
}

static inline void riu_iqdc_tx_1_gain_unpack(struct cl_chip *chip, u16 *iqdc_tx1_phase_gain, u16 *iqdc_tx1_amp_gain)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_GAIN_ADDR);

	*iqdc_tx1_phase_gain = (local_val & ((u32)0x0FFF0000)) >> 16;
	*iqdc_tx1_amp_gain = (local_val & ((u32)0x000007FF)) >> 0;
}

static inline u16 riu_iqdc_tx_1_gain_iqdc_tx_1_phase_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_GAIN_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_iqdc_tx_1_gain_iqdc_tx_1_phase_gain_setf(struct cl_chip *chip, u16 iqdctx1phasegain)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1phasegain << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_GAIN_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_GAIN_ADDR) & ~((u32)0x0FFF0000)) | ((u32)iqdctx1phasegain << 16));
}

static inline u16 riu_iqdc_tx_1_gain_iqdc_tx_1_amp_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_GAIN_ADDR);

	return (u16)((local_val & ((u32)0x000007FF)) >> 0);
}

static inline void riu_iqdc_tx_1_gain_iqdc_tx_1_amp_gain_setf(struct cl_chip *chip, u16 iqdctx1ampgain)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1ampgain << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_GAIN_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_GAIN_ADDR) & ~((u32)0x000007FF)) | ((u32)iqdctx1ampgain << 0));
}

/**
 * @brief IQDC_TX_1_DC register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 iqdc_tx1_dcq              0x0
 *    11:00 iqdc_tx1_dci              0x0
 * </pre>
 */
#define RIU_IQDC_TX_1_DC_ADDR        (REG_RIU_BASE_ADDR + 0x00000738)
#define RIU_IQDC_TX_1_DC_OFFSET      0x00000738
#define RIU_IQDC_TX_1_DC_INDEX       0x000001CE
#define RIU_IQDC_TX_1_DC_RESET       0x00000000

static inline u32 riu_iqdc_tx_1_dc_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_1_DC_ADDR);
}

static inline void riu_iqdc_tx_1_dc_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_1_DC_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_1_DC_IQDC_TX_1_DCQ_MASK    ((u32)0x0FFF0000)
#define RIU_IQDC_TX_1_DC_IQDC_TX_1_DCQ_LSB    16
#define RIU_IQDC_TX_1_DC_IQDC_TX_1_DCQ_WIDTH    ((u32)0x0000000C)
#define RIU_IQDC_TX_1_DC_IQDC_TX_1_DCI_MASK    ((u32)0x00000FFF)
#define RIU_IQDC_TX_1_DC_IQDC_TX_1_DCI_LSB    0
#define RIU_IQDC_TX_1_DC_IQDC_TX_1_DCI_WIDTH    ((u32)0x0000000C)

#define RIU_IQDC_TX_1_DC_IQDC_TX_1_DCQ_RST    0x0
#define RIU_IQDC_TX_1_DC_IQDC_TX_1_DCI_RST    0x0

static inline void riu_iqdc_tx_1_dc_pack(struct cl_chip *chip, u16 iqdc_tx1_dcq, u16 iqdc_tx1_dci)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_dcq << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_dci << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_DC_ADDR, ((u32)iqdc_tx1_dcq << 16) | ((u32)iqdc_tx1_dci << 0));
}

static inline void riu_iqdc_tx_1_dc_unpack(struct cl_chip *chip, u16 *iqdc_tx1_dcq, u16 *iqdc_tx1_dci)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_DC_ADDR);

	*iqdc_tx1_dcq = (local_val & ((u32)0x0FFF0000)) >> 16;
	*iqdc_tx1_dci = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u16 riu_iqdc_tx_1_dc_iqdc_tx_1_dcq_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_DC_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_iqdc_tx_1_dc_iqdc_tx_1_dcq_setf(struct cl_chip *chip, u16 iqdctx1dcq)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1dcq << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_DC_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_DC_ADDR) & ~((u32)0x0FFF0000)) | ((u32)iqdctx1dcq << 16));
}

static inline u16 riu_iqdc_tx_1_dc_iqdc_tx_1_dci_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_DC_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

static inline void riu_iqdc_tx_1_dc_iqdc_tx_1_dci_setf(struct cl_chip *chip, u16 iqdctx1dci)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1dci << 0) & ~((u32)0x00000FFF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_DC_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_DC_ADDR) & ~((u32)0x00000FFF)) | ((u32)iqdctx1dci << 0));
}

/**
 * @brief IQDC_RX_1_COEF_4_SET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_14     0x0
 *    20:12 iqdc_rx1_fir_coeff_13     0x0
 *    08:00 iqdc_rx1_fir_coeff_12     0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_4_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x0000073C)
#define RIU_IQDC_RX_1_COEF_4_SET_1_OFFSET      0x0000073C
#define RIU_IQDC_RX_1_COEF_4_SET_1_INDEX       0x000001CF
#define RIU_IQDC_RX_1_COEF_4_SET_1_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_4_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_1_ADDR);
}

static inline void riu_iqdc_rx_1_coef_4_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_4_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_4_SET_1_IQDC_RX_1_FIR_COEFF_14_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_4_SET_1_IQDC_RX_1_FIR_COEFF_14_LSB    23
#define RIU_IQDC_RX_1_COEF_4_SET_1_IQDC_RX_1_FIR_COEFF_14_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_4_SET_1_IQDC_RX_1_FIR_COEFF_13_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_4_SET_1_IQDC_RX_1_FIR_COEFF_13_LSB    12
#define RIU_IQDC_RX_1_COEF_4_SET_1_IQDC_RX_1_FIR_COEFF_13_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_4_SET_1_IQDC_RX_1_FIR_COEFF_12_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_4_SET_1_IQDC_RX_1_FIR_COEFF_12_LSB    0
#define RIU_IQDC_RX_1_COEF_4_SET_1_IQDC_RX_1_FIR_COEFF_12_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_4_SET_1_IQDC_RX_1_FIR_COEFF_14_RST    0x0
#define RIU_IQDC_RX_1_COEF_4_SET_1_IQDC_RX_1_FIR_COEFF_13_RST    0x0
#define RIU_IQDC_RX_1_COEF_4_SET_1_IQDC_RX_1_FIR_COEFF_12_RST    0x0

static inline void riu_iqdc_rx_1_coef_4_set_1_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_14, u16 iqdc_rx1_fir_coeff_13, u16 iqdc_rx1_fir_coeff_12)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_14 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_13 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_12 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_4_SET_1_ADDR, ((u32)iqdc_rx1_fir_coeff_14 << 23) | ((u32)iqdc_rx1_fir_coeff_13 << 12) | ((u32)iqdc_rx1_fir_coeff_12 << 0));
}

static inline void riu_iqdc_rx_1_coef_4_set_1_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_14, u16 *iqdc_rx1_fir_coeff_13, u16 *iqdc_rx1_fir_coeff_12)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_1_ADDR);

	*iqdc_rx1_fir_coeff_14 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_13 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_12 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_4_set_1_iqdc_rx_1_fir_coeff_14_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_1_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_4_set_1_iqdc_rx_1_fir_coeff_14_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff14)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff14 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_4_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_1_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff14 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_4_set_1_iqdc_rx_1_fir_coeff_13_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_4_set_1_iqdc_rx_1_fir_coeff_13_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff13)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff13 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_4_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_1_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff13 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_4_set_1_iqdc_rx_1_fir_coeff_12_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_4_set_1_iqdc_rx_1_fir_coeff_12_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff12)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff12 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_4_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_1_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff12 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_5_SET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_17     0x0
 *    20:12 iqdc_rx1_fir_coeff_16     0x0
 *    08:00 iqdc_rx1_fir_coeff_15     0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_5_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000740)
#define RIU_IQDC_RX_1_COEF_5_SET_1_OFFSET      0x00000740
#define RIU_IQDC_RX_1_COEF_5_SET_1_INDEX       0x000001D0
#define RIU_IQDC_RX_1_COEF_5_SET_1_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_5_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_1_ADDR);
}

static inline void riu_iqdc_rx_1_coef_5_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_5_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_5_SET_1_IQDC_RX_1_FIR_COEFF_17_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_5_SET_1_IQDC_RX_1_FIR_COEFF_17_LSB    23
#define RIU_IQDC_RX_1_COEF_5_SET_1_IQDC_RX_1_FIR_COEFF_17_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_5_SET_1_IQDC_RX_1_FIR_COEFF_16_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_5_SET_1_IQDC_RX_1_FIR_COEFF_16_LSB    12
#define RIU_IQDC_RX_1_COEF_5_SET_1_IQDC_RX_1_FIR_COEFF_16_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_5_SET_1_IQDC_RX_1_FIR_COEFF_15_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_5_SET_1_IQDC_RX_1_FIR_COEFF_15_LSB    0
#define RIU_IQDC_RX_1_COEF_5_SET_1_IQDC_RX_1_FIR_COEFF_15_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_5_SET_1_IQDC_RX_1_FIR_COEFF_17_RST    0x0
#define RIU_IQDC_RX_1_COEF_5_SET_1_IQDC_RX_1_FIR_COEFF_16_RST    0x0
#define RIU_IQDC_RX_1_COEF_5_SET_1_IQDC_RX_1_FIR_COEFF_15_RST    0x0

static inline void riu_iqdc_rx_1_coef_5_set_1_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_17, u16 iqdc_rx1_fir_coeff_16, u16 iqdc_rx1_fir_coeff_15)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_17 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_16 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_15 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_5_SET_1_ADDR, ((u32)iqdc_rx1_fir_coeff_17 << 23) | ((u32)iqdc_rx1_fir_coeff_16 << 12) | ((u32)iqdc_rx1_fir_coeff_15 << 0));
}

static inline void riu_iqdc_rx_1_coef_5_set_1_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_17, u16 *iqdc_rx1_fir_coeff_16, u16 *iqdc_rx1_fir_coeff_15)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_1_ADDR);

	*iqdc_rx1_fir_coeff_17 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_16 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_15 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_5_set_1_iqdc_rx_1_fir_coeff_17_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_1_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_5_set_1_iqdc_rx_1_fir_coeff_17_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff17)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff17 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_5_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_1_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff17 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_5_set_1_iqdc_rx_1_fir_coeff_16_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_5_set_1_iqdc_rx_1_fir_coeff_16_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff16)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff16 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_5_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_1_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff16 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_5_set_1_iqdc_rx_1_fir_coeff_15_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_5_set_1_iqdc_rx_1_fir_coeff_15_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff15)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff15 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_5_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_1_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff15 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_6_SET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_20     0x0
 *    20:12 iqdc_rx1_fir_coeff_19     0x0
 *    08:00 iqdc_rx1_fir_coeff_18     0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_6_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000744)
#define RIU_IQDC_RX_1_COEF_6_SET_1_OFFSET      0x00000744
#define RIU_IQDC_RX_1_COEF_6_SET_1_INDEX       0x000001D1
#define RIU_IQDC_RX_1_COEF_6_SET_1_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_6_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_1_ADDR);
}

static inline void riu_iqdc_rx_1_coef_6_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_6_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_6_SET_1_IQDC_RX_1_FIR_COEFF_20_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_6_SET_1_IQDC_RX_1_FIR_COEFF_20_LSB    23
#define RIU_IQDC_RX_1_COEF_6_SET_1_IQDC_RX_1_FIR_COEFF_20_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_6_SET_1_IQDC_RX_1_FIR_COEFF_19_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_6_SET_1_IQDC_RX_1_FIR_COEFF_19_LSB    12
#define RIU_IQDC_RX_1_COEF_6_SET_1_IQDC_RX_1_FIR_COEFF_19_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_6_SET_1_IQDC_RX_1_FIR_COEFF_18_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_6_SET_1_IQDC_RX_1_FIR_COEFF_18_LSB    0
#define RIU_IQDC_RX_1_COEF_6_SET_1_IQDC_RX_1_FIR_COEFF_18_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_6_SET_1_IQDC_RX_1_FIR_COEFF_20_RST    0x0
#define RIU_IQDC_RX_1_COEF_6_SET_1_IQDC_RX_1_FIR_COEFF_19_RST    0x0
#define RIU_IQDC_RX_1_COEF_6_SET_1_IQDC_RX_1_FIR_COEFF_18_RST    0x0

static inline void riu_iqdc_rx_1_coef_6_set_1_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_20, u16 iqdc_rx1_fir_coeff_19, u16 iqdc_rx1_fir_coeff_18)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_20 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_19 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_18 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_6_SET_1_ADDR, ((u32)iqdc_rx1_fir_coeff_20 << 23) | ((u32)iqdc_rx1_fir_coeff_19 << 12) | ((u32)iqdc_rx1_fir_coeff_18 << 0));
}

static inline void riu_iqdc_rx_1_coef_6_set_1_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_20, u16 *iqdc_rx1_fir_coeff_19, u16 *iqdc_rx1_fir_coeff_18)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_1_ADDR);

	*iqdc_rx1_fir_coeff_20 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_19 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_18 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_6_set_1_iqdc_rx_1_fir_coeff_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_1_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_6_set_1_iqdc_rx_1_fir_coeff_20_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff20)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff20 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_6_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_1_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff20 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_6_set_1_iqdc_rx_1_fir_coeff_19_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_6_set_1_iqdc_rx_1_fir_coeff_19_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff19)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff19 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_6_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_1_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff19 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_6_set_1_iqdc_rx_1_fir_coeff_18_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_6_set_1_iqdc_rx_1_fir_coeff_18_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff18)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff18 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_6_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_1_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff18 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_4_SET_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_14     0x0
 *    20:12 iqdc_rx1_fir_coeff_13     0x0
 *    08:00 iqdc_rx1_fir_coeff_12     0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_4_SET_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000748)
#define RIU_IQDC_RX_1_COEF_4_SET_2_OFFSET      0x00000748
#define RIU_IQDC_RX_1_COEF_4_SET_2_INDEX       0x000001D2
#define RIU_IQDC_RX_1_COEF_4_SET_2_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_4_set_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_2_ADDR);
}

static inline void riu_iqdc_rx_1_coef_4_set_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_4_SET_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_4_SET_2_IQDC_RX_1_FIR_COEFF_14_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_4_SET_2_IQDC_RX_1_FIR_COEFF_14_LSB    23
#define RIU_IQDC_RX_1_COEF_4_SET_2_IQDC_RX_1_FIR_COEFF_14_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_4_SET_2_IQDC_RX_1_FIR_COEFF_13_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_4_SET_2_IQDC_RX_1_FIR_COEFF_13_LSB    12
#define RIU_IQDC_RX_1_COEF_4_SET_2_IQDC_RX_1_FIR_COEFF_13_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_4_SET_2_IQDC_RX_1_FIR_COEFF_12_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_4_SET_2_IQDC_RX_1_FIR_COEFF_12_LSB    0
#define RIU_IQDC_RX_1_COEF_4_SET_2_IQDC_RX_1_FIR_COEFF_12_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_4_SET_2_IQDC_RX_1_FIR_COEFF_14_RST    0x0
#define RIU_IQDC_RX_1_COEF_4_SET_2_IQDC_RX_1_FIR_COEFF_13_RST    0x0
#define RIU_IQDC_RX_1_COEF_4_SET_2_IQDC_RX_1_FIR_COEFF_12_RST    0x0

static inline void riu_iqdc_rx_1_coef_4_set_2_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_14, u16 iqdc_rx1_fir_coeff_13, u16 iqdc_rx1_fir_coeff_12)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_14 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_13 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_12 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_4_SET_2_ADDR, ((u32)iqdc_rx1_fir_coeff_14 << 23) | ((u32)iqdc_rx1_fir_coeff_13 << 12) | ((u32)iqdc_rx1_fir_coeff_12 << 0));
}

static inline void riu_iqdc_rx_1_coef_4_set_2_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_14, u16 *iqdc_rx1_fir_coeff_13, u16 *iqdc_rx1_fir_coeff_12)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_2_ADDR);

	*iqdc_rx1_fir_coeff_14 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_13 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_12 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_4_set_2_iqdc_rx_1_fir_coeff_14_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_2_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_4_set_2_iqdc_rx_1_fir_coeff_14_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff14)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff14 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_4_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_2_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff14 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_4_set_2_iqdc_rx_1_fir_coeff_13_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_4_set_2_iqdc_rx_1_fir_coeff_13_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff13)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff13 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_4_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_2_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff13 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_4_set_2_iqdc_rx_1_fir_coeff_12_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_4_set_2_iqdc_rx_1_fir_coeff_12_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff12)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff12 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_4_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_2_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff12 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_5_SET_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_17     0x0
 *    20:12 iqdc_rx1_fir_coeff_16     0x0
 *    08:00 iqdc_rx1_fir_coeff_15     0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_5_SET_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000074C)
#define RIU_IQDC_RX_1_COEF_5_SET_2_OFFSET      0x0000074C
#define RIU_IQDC_RX_1_COEF_5_SET_2_INDEX       0x000001D3
#define RIU_IQDC_RX_1_COEF_5_SET_2_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_5_set_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_2_ADDR);
}

static inline void riu_iqdc_rx_1_coef_5_set_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_5_SET_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_5_SET_2_IQDC_RX_1_FIR_COEFF_17_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_5_SET_2_IQDC_RX_1_FIR_COEFF_17_LSB    23
#define RIU_IQDC_RX_1_COEF_5_SET_2_IQDC_RX_1_FIR_COEFF_17_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_5_SET_2_IQDC_RX_1_FIR_COEFF_16_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_5_SET_2_IQDC_RX_1_FIR_COEFF_16_LSB    12
#define RIU_IQDC_RX_1_COEF_5_SET_2_IQDC_RX_1_FIR_COEFF_16_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_5_SET_2_IQDC_RX_1_FIR_COEFF_15_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_5_SET_2_IQDC_RX_1_FIR_COEFF_15_LSB    0
#define RIU_IQDC_RX_1_COEF_5_SET_2_IQDC_RX_1_FIR_COEFF_15_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_5_SET_2_IQDC_RX_1_FIR_COEFF_17_RST    0x0
#define RIU_IQDC_RX_1_COEF_5_SET_2_IQDC_RX_1_FIR_COEFF_16_RST    0x0
#define RIU_IQDC_RX_1_COEF_5_SET_2_IQDC_RX_1_FIR_COEFF_15_RST    0x0

static inline void riu_iqdc_rx_1_coef_5_set_2_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_17, u16 iqdc_rx1_fir_coeff_16, u16 iqdc_rx1_fir_coeff_15)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_17 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_16 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_15 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_5_SET_2_ADDR, ((u32)iqdc_rx1_fir_coeff_17 << 23) | ((u32)iqdc_rx1_fir_coeff_16 << 12) | ((u32)iqdc_rx1_fir_coeff_15 << 0));
}

static inline void riu_iqdc_rx_1_coef_5_set_2_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_17, u16 *iqdc_rx1_fir_coeff_16, u16 *iqdc_rx1_fir_coeff_15)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_2_ADDR);

	*iqdc_rx1_fir_coeff_17 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_16 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_15 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_5_set_2_iqdc_rx_1_fir_coeff_17_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_2_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_5_set_2_iqdc_rx_1_fir_coeff_17_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff17)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff17 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_5_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_2_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff17 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_5_set_2_iqdc_rx_1_fir_coeff_16_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_5_set_2_iqdc_rx_1_fir_coeff_16_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff16)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff16 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_5_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_2_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff16 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_5_set_2_iqdc_rx_1_fir_coeff_15_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_5_set_2_iqdc_rx_1_fir_coeff_15_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff15)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff15 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_5_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_2_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff15 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_6_SET_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_20     0x0
 *    20:12 iqdc_rx1_fir_coeff_19     0x0
 *    08:00 iqdc_rx1_fir_coeff_18     0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_6_SET_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000750)
#define RIU_IQDC_RX_1_COEF_6_SET_2_OFFSET      0x00000750
#define RIU_IQDC_RX_1_COEF_6_SET_2_INDEX       0x000001D4
#define RIU_IQDC_RX_1_COEF_6_SET_2_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_6_set_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_2_ADDR);
}

static inline void riu_iqdc_rx_1_coef_6_set_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_6_SET_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_6_SET_2_IQDC_RX_1_FIR_COEFF_20_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_6_SET_2_IQDC_RX_1_FIR_COEFF_20_LSB    23
#define RIU_IQDC_RX_1_COEF_6_SET_2_IQDC_RX_1_FIR_COEFF_20_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_6_SET_2_IQDC_RX_1_FIR_COEFF_19_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_6_SET_2_IQDC_RX_1_FIR_COEFF_19_LSB    12
#define RIU_IQDC_RX_1_COEF_6_SET_2_IQDC_RX_1_FIR_COEFF_19_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_6_SET_2_IQDC_RX_1_FIR_COEFF_18_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_6_SET_2_IQDC_RX_1_FIR_COEFF_18_LSB    0
#define RIU_IQDC_RX_1_COEF_6_SET_2_IQDC_RX_1_FIR_COEFF_18_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_6_SET_2_IQDC_RX_1_FIR_COEFF_20_RST    0x0
#define RIU_IQDC_RX_1_COEF_6_SET_2_IQDC_RX_1_FIR_COEFF_19_RST    0x0
#define RIU_IQDC_RX_1_COEF_6_SET_2_IQDC_RX_1_FIR_COEFF_18_RST    0x0

static inline void riu_iqdc_rx_1_coef_6_set_2_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_20, u16 iqdc_rx1_fir_coeff_19, u16 iqdc_rx1_fir_coeff_18)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_20 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_19 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_18 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_6_SET_2_ADDR, ((u32)iqdc_rx1_fir_coeff_20 << 23) | ((u32)iqdc_rx1_fir_coeff_19 << 12) | ((u32)iqdc_rx1_fir_coeff_18 << 0));
}

static inline void riu_iqdc_rx_1_coef_6_set_2_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_20, u16 *iqdc_rx1_fir_coeff_19, u16 *iqdc_rx1_fir_coeff_18)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_2_ADDR);

	*iqdc_rx1_fir_coeff_20 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_19 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_18 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_6_set_2_iqdc_rx_1_fir_coeff_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_2_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_6_set_2_iqdc_rx_1_fir_coeff_20_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff20)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff20 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_6_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_2_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff20 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_6_set_2_iqdc_rx_1_fir_coeff_19_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_6_set_2_iqdc_rx_1_fir_coeff_19_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff19)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff19 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_6_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_2_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff19 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_6_set_2_iqdc_rx_1_fir_coeff_18_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_6_set_2_iqdc_rx_1_fir_coeff_18_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff18)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff18 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_6_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_2_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff18 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_4_SET_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_14     0x0
 *    20:12 iqdc_rx1_fir_coeff_13     0x0
 *    08:00 iqdc_rx1_fir_coeff_12     0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_4_SET_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000754)
#define RIU_IQDC_RX_1_COEF_4_SET_3_OFFSET      0x00000754
#define RIU_IQDC_RX_1_COEF_4_SET_3_INDEX       0x000001D5
#define RIU_IQDC_RX_1_COEF_4_SET_3_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_4_set_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_3_ADDR);
}

static inline void riu_iqdc_rx_1_coef_4_set_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_4_SET_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_4_SET_3_IQDC_RX_1_FIR_COEFF_14_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_4_SET_3_IQDC_RX_1_FIR_COEFF_14_LSB    23
#define RIU_IQDC_RX_1_COEF_4_SET_3_IQDC_RX_1_FIR_COEFF_14_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_4_SET_3_IQDC_RX_1_FIR_COEFF_13_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_4_SET_3_IQDC_RX_1_FIR_COEFF_13_LSB    12
#define RIU_IQDC_RX_1_COEF_4_SET_3_IQDC_RX_1_FIR_COEFF_13_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_4_SET_3_IQDC_RX_1_FIR_COEFF_12_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_4_SET_3_IQDC_RX_1_FIR_COEFF_12_LSB    0
#define RIU_IQDC_RX_1_COEF_4_SET_3_IQDC_RX_1_FIR_COEFF_12_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_4_SET_3_IQDC_RX_1_FIR_COEFF_14_RST    0x0
#define RIU_IQDC_RX_1_COEF_4_SET_3_IQDC_RX_1_FIR_COEFF_13_RST    0x0
#define RIU_IQDC_RX_1_COEF_4_SET_3_IQDC_RX_1_FIR_COEFF_12_RST    0x0

static inline void riu_iqdc_rx_1_coef_4_set_3_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_14, u16 iqdc_rx1_fir_coeff_13, u16 iqdc_rx1_fir_coeff_12)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_14 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_13 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_12 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_4_SET_3_ADDR, ((u32)iqdc_rx1_fir_coeff_14 << 23) | ((u32)iqdc_rx1_fir_coeff_13 << 12) | ((u32)iqdc_rx1_fir_coeff_12 << 0));
}

static inline void riu_iqdc_rx_1_coef_4_set_3_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_14, u16 *iqdc_rx1_fir_coeff_13, u16 *iqdc_rx1_fir_coeff_12)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_3_ADDR);

	*iqdc_rx1_fir_coeff_14 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_13 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_12 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_4_set_3_iqdc_rx_1_fir_coeff_14_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_3_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_4_set_3_iqdc_rx_1_fir_coeff_14_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff14)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff14 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_4_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_3_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff14 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_4_set_3_iqdc_rx_1_fir_coeff_13_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_4_set_3_iqdc_rx_1_fir_coeff_13_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff13)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff13 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_4_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_3_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff13 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_4_set_3_iqdc_rx_1_fir_coeff_12_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_4_set_3_iqdc_rx_1_fir_coeff_12_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff12)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff12 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_4_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_4_SET_3_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff12 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_5_SET_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_17     0x0
 *    20:12 iqdc_rx1_fir_coeff_16     0x0
 *    08:00 iqdc_rx1_fir_coeff_15     0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_5_SET_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000758)
#define RIU_IQDC_RX_1_COEF_5_SET_3_OFFSET      0x00000758
#define RIU_IQDC_RX_1_COEF_5_SET_3_INDEX       0x000001D6
#define RIU_IQDC_RX_1_COEF_5_SET_3_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_5_set_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_3_ADDR);
}

static inline void riu_iqdc_rx_1_coef_5_set_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_5_SET_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_5_SET_3_IQDC_RX_1_FIR_COEFF_17_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_5_SET_3_IQDC_RX_1_FIR_COEFF_17_LSB    23
#define RIU_IQDC_RX_1_COEF_5_SET_3_IQDC_RX_1_FIR_COEFF_17_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_5_SET_3_IQDC_RX_1_FIR_COEFF_16_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_5_SET_3_IQDC_RX_1_FIR_COEFF_16_LSB    12
#define RIU_IQDC_RX_1_COEF_5_SET_3_IQDC_RX_1_FIR_COEFF_16_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_5_SET_3_IQDC_RX_1_FIR_COEFF_15_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_5_SET_3_IQDC_RX_1_FIR_COEFF_15_LSB    0
#define RIU_IQDC_RX_1_COEF_5_SET_3_IQDC_RX_1_FIR_COEFF_15_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_5_SET_3_IQDC_RX_1_FIR_COEFF_17_RST    0x0
#define RIU_IQDC_RX_1_COEF_5_SET_3_IQDC_RX_1_FIR_COEFF_16_RST    0x0
#define RIU_IQDC_RX_1_COEF_5_SET_3_IQDC_RX_1_FIR_COEFF_15_RST    0x0

static inline void riu_iqdc_rx_1_coef_5_set_3_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_17, u16 iqdc_rx1_fir_coeff_16, u16 iqdc_rx1_fir_coeff_15)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_17 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_16 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_15 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_5_SET_3_ADDR, ((u32)iqdc_rx1_fir_coeff_17 << 23) | ((u32)iqdc_rx1_fir_coeff_16 << 12) | ((u32)iqdc_rx1_fir_coeff_15 << 0));
}

static inline void riu_iqdc_rx_1_coef_5_set_3_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_17, u16 *iqdc_rx1_fir_coeff_16, u16 *iqdc_rx1_fir_coeff_15)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_3_ADDR);

	*iqdc_rx1_fir_coeff_17 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_16 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_15 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_5_set_3_iqdc_rx_1_fir_coeff_17_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_3_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_5_set_3_iqdc_rx_1_fir_coeff_17_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff17)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff17 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_5_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_3_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff17 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_5_set_3_iqdc_rx_1_fir_coeff_16_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_5_set_3_iqdc_rx_1_fir_coeff_16_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff16)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff16 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_5_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_3_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff16 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_5_set_3_iqdc_rx_1_fir_coeff_15_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_5_set_3_iqdc_rx_1_fir_coeff_15_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff15)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff15 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_5_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_5_SET_3_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff15 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_6_SET_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_20     0x0
 *    20:12 iqdc_rx1_fir_coeff_19     0x0
 *    08:00 iqdc_rx1_fir_coeff_18     0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_6_SET_3_ADDR        (REG_RIU_BASE_ADDR + 0x0000075C)
#define RIU_IQDC_RX_1_COEF_6_SET_3_OFFSET      0x0000075C
#define RIU_IQDC_RX_1_COEF_6_SET_3_INDEX       0x000001D7
#define RIU_IQDC_RX_1_COEF_6_SET_3_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_6_set_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_3_ADDR);
}

static inline void riu_iqdc_rx_1_coef_6_set_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_6_SET_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_6_SET_3_IQDC_RX_1_FIR_COEFF_20_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_6_SET_3_IQDC_RX_1_FIR_COEFF_20_LSB    23
#define RIU_IQDC_RX_1_COEF_6_SET_3_IQDC_RX_1_FIR_COEFF_20_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_6_SET_3_IQDC_RX_1_FIR_COEFF_19_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_6_SET_3_IQDC_RX_1_FIR_COEFF_19_LSB    12
#define RIU_IQDC_RX_1_COEF_6_SET_3_IQDC_RX_1_FIR_COEFF_19_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_6_SET_3_IQDC_RX_1_FIR_COEFF_18_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_6_SET_3_IQDC_RX_1_FIR_COEFF_18_LSB    0
#define RIU_IQDC_RX_1_COEF_6_SET_3_IQDC_RX_1_FIR_COEFF_18_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_6_SET_3_IQDC_RX_1_FIR_COEFF_20_RST    0x0
#define RIU_IQDC_RX_1_COEF_6_SET_3_IQDC_RX_1_FIR_COEFF_19_RST    0x0
#define RIU_IQDC_RX_1_COEF_6_SET_3_IQDC_RX_1_FIR_COEFF_18_RST    0x0

static inline void riu_iqdc_rx_1_coef_6_set_3_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_20, u16 iqdc_rx1_fir_coeff_19, u16 iqdc_rx1_fir_coeff_18)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_20 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_19 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_18 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_6_SET_3_ADDR, ((u32)iqdc_rx1_fir_coeff_20 << 23) | ((u32)iqdc_rx1_fir_coeff_19 << 12) | ((u32)iqdc_rx1_fir_coeff_18 << 0));
}

static inline void riu_iqdc_rx_1_coef_6_set_3_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_20, u16 *iqdc_rx1_fir_coeff_19, u16 *iqdc_rx1_fir_coeff_18)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_3_ADDR);

	*iqdc_rx1_fir_coeff_20 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_19 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_18 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_6_set_3_iqdc_rx_1_fir_coeff_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_3_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_6_set_3_iqdc_rx_1_fir_coeff_20_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff20)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff20 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_6_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_3_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff20 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_6_set_3_iqdc_rx_1_fir_coeff_19_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_6_set_3_iqdc_rx_1_fir_coeff_19_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff19)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff19 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_6_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_3_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff19 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_6_set_3_iqdc_rx_1_fir_coeff_18_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_6_set_3_iqdc_rx_1_fir_coeff_18_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff18)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff18 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_6_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_6_SET_3_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff18 << 0));
}

/**
 * @brief FTM_TXREQ_MOD_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 FTM_TXREQ_MOD3            0x0
 * </pre>
 */
#define RIU_FTM_TXREQ_MOD_3_ADDR        (REG_RIU_BASE_ADDR + 0x0000077C)
#define RIU_FTM_TXREQ_MOD_3_OFFSET      0x0000077C
#define RIU_FTM_TXREQ_MOD_3_INDEX       0x000001DF
#define RIU_FTM_TXREQ_MOD_3_RESET       0x00000000

static inline u32 riu_ftm_txreq_mod_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_FTM_TXREQ_MOD_3_ADDR);
}

/* Field definitions */
#define RIU_FTM_TXREQ_MOD_3_FTM_TXREQ_MOD_3_MASK    ((u32)0xFFFFFFFF)
#define RIU_FTM_TXREQ_MOD_3_FTM_TXREQ_MOD_3_LSB    0
#define RIU_FTM_TXREQ_MOD_3_FTM_TXREQ_MOD_3_WIDTH    ((u32)0x00000020)

#define RIU_FTM_TXREQ_MOD_3_FTM_TXREQ_MOD_3_RST    0x0

static inline u32 riu_ftm_txreq_mod_3_ftm_txreq_mod_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_FTM_TXREQ_MOD_3_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief IQDC_RX_0_COEF_0_SET_1 register definition
 *  IQDC RX0 Coefficients  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_2      0x0
 *    20:12 iqdc_rx0_fir_coeff_1      0x0
 *    08:00 iqdc_rx0_fir_coeff_0      0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_0_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000780)
#define RIU_IQDC_RX_0_COEF_0_SET_1_OFFSET      0x00000780
#define RIU_IQDC_RX_0_COEF_0_SET_1_INDEX       0x000001E0
#define RIU_IQDC_RX_0_COEF_0_SET_1_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_0_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_1_ADDR);
}

static inline void riu_iqdc_rx_0_coef_0_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_0_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_0_SET_1_IQDC_RX_0_FIR_COEFF_2_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_0_SET_1_IQDC_RX_0_FIR_COEFF_2_LSB    23
#define RIU_IQDC_RX_0_COEF_0_SET_1_IQDC_RX_0_FIR_COEFF_2_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_0_SET_1_IQDC_RX_0_FIR_COEFF_1_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_0_SET_1_IQDC_RX_0_FIR_COEFF_1_LSB    12
#define RIU_IQDC_RX_0_COEF_0_SET_1_IQDC_RX_0_FIR_COEFF_1_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_0_SET_1_IQDC_RX_0_FIR_COEFF_0_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_0_SET_1_IQDC_RX_0_FIR_COEFF_0_LSB    0
#define RIU_IQDC_RX_0_COEF_0_SET_1_IQDC_RX_0_FIR_COEFF_0_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_0_SET_1_IQDC_RX_0_FIR_COEFF_2_RST    0x0
#define RIU_IQDC_RX_0_COEF_0_SET_1_IQDC_RX_0_FIR_COEFF_1_RST    0x0
#define RIU_IQDC_RX_0_COEF_0_SET_1_IQDC_RX_0_FIR_COEFF_0_RST    0x0

static inline void riu_iqdc_rx_0_coef_0_set_1_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_2, u16 iqdc_rx0_fir_coeff_1, u16 iqdc_rx0_fir_coeff_0)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_2 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_1 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_0 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_0_SET_1_ADDR, ((u32)iqdc_rx0_fir_coeff_2 << 23) | ((u32)iqdc_rx0_fir_coeff_1 << 12) | ((u32)iqdc_rx0_fir_coeff_0 << 0));
}

static inline void riu_iqdc_rx_0_coef_0_set_1_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_2, u16 *iqdc_rx0_fir_coeff_1, u16 *iqdc_rx0_fir_coeff_0)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_1_ADDR);

	*iqdc_rx0_fir_coeff_2 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_1 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_0 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_0_set_1_iqdc_rx_0_fir_coeff_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_1_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_0_set_1_iqdc_rx_0_fir_coeff_2_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff2)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff2 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_0_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_1_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff2 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_0_set_1_iqdc_rx_0_fir_coeff_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_0_set_1_iqdc_rx_0_fir_coeff_1_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff1)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff1 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_0_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_1_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff1 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_0_set_1_iqdc_rx_0_fir_coeff_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_0_set_1_iqdc_rx_0_fir_coeff_0_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff0)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff0 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_0_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_1_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff0 << 0));
}

/**
 * @brief IQDC_RX_0_COEF_1_SET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_5      0x0
 *    20:12 iqdc_rx0_fir_coeff_4      0x0
 *    08:00 iqdc_rx0_fir_coeff_3      0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_1_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000784)
#define RIU_IQDC_RX_0_COEF_1_SET_1_OFFSET      0x00000784
#define RIU_IQDC_RX_0_COEF_1_SET_1_INDEX       0x000001E1
#define RIU_IQDC_RX_0_COEF_1_SET_1_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_1_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_1_ADDR);
}

static inline void riu_iqdc_rx_0_coef_1_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_1_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_1_SET_1_IQDC_RX_0_FIR_COEFF_5_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_1_SET_1_IQDC_RX_0_FIR_COEFF_5_LSB    23
#define RIU_IQDC_RX_0_COEF_1_SET_1_IQDC_RX_0_FIR_COEFF_5_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_1_SET_1_IQDC_RX_0_FIR_COEFF_4_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_1_SET_1_IQDC_RX_0_FIR_COEFF_4_LSB    12
#define RIU_IQDC_RX_0_COEF_1_SET_1_IQDC_RX_0_FIR_COEFF_4_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_1_SET_1_IQDC_RX_0_FIR_COEFF_3_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_1_SET_1_IQDC_RX_0_FIR_COEFF_3_LSB    0
#define RIU_IQDC_RX_0_COEF_1_SET_1_IQDC_RX_0_FIR_COEFF_3_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_1_SET_1_IQDC_RX_0_FIR_COEFF_5_RST    0x0
#define RIU_IQDC_RX_0_COEF_1_SET_1_IQDC_RX_0_FIR_COEFF_4_RST    0x0
#define RIU_IQDC_RX_0_COEF_1_SET_1_IQDC_RX_0_FIR_COEFF_3_RST    0x0

static inline void riu_iqdc_rx_0_coef_1_set_1_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_5, u16 iqdc_rx0_fir_coeff_4, u16 iqdc_rx0_fir_coeff_3)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_5 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_4 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_3 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_1_SET_1_ADDR, ((u32)iqdc_rx0_fir_coeff_5 << 23) | ((u32)iqdc_rx0_fir_coeff_4 << 12) | ((u32)iqdc_rx0_fir_coeff_3 << 0));
}

static inline void riu_iqdc_rx_0_coef_1_set_1_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_5, u16 *iqdc_rx0_fir_coeff_4, u16 *iqdc_rx0_fir_coeff_3)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_1_ADDR);

	*iqdc_rx0_fir_coeff_5 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_4 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_3 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_1_set_1_iqdc_rx_0_fir_coeff_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_1_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_1_set_1_iqdc_rx_0_fir_coeff_5_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff5)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff5 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_1_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_1_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff5 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_1_set_1_iqdc_rx_0_fir_coeff_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_1_set_1_iqdc_rx_0_fir_coeff_4_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff4)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff4 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_1_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_1_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff4 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_1_set_1_iqdc_rx_0_fir_coeff_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_1_set_1_iqdc_rx_0_fir_coeff_3_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff3)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff3 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_1_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_1_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff3 << 0));
}

/**
 * @brief IQDC_RX_0_COEF_2_SET_1 register definition
 *  IQDC RX0 Coefficients register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_8      0x0
 *    20:12 iqdc_rx0_fir_coeff_7      0x0
 *    08:00 iqdc_rx0_fir_coeff_6      0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_2_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000788)
#define RIU_IQDC_RX_0_COEF_2_SET_1_OFFSET      0x00000788
#define RIU_IQDC_RX_0_COEF_2_SET_1_INDEX       0x000001E2
#define RIU_IQDC_RX_0_COEF_2_SET_1_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_2_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_1_ADDR);
}

static inline void riu_iqdc_rx_0_coef_2_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_2_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_2_SET_1_IQDC_RX_0_FIR_COEFF_8_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_2_SET_1_IQDC_RX_0_FIR_COEFF_8_LSB    23
#define RIU_IQDC_RX_0_COEF_2_SET_1_IQDC_RX_0_FIR_COEFF_8_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_2_SET_1_IQDC_RX_0_FIR_COEFF_7_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_2_SET_1_IQDC_RX_0_FIR_COEFF_7_LSB    12
#define RIU_IQDC_RX_0_COEF_2_SET_1_IQDC_RX_0_FIR_COEFF_7_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_2_SET_1_IQDC_RX_0_FIR_COEFF_6_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_2_SET_1_IQDC_RX_0_FIR_COEFF_6_LSB    0
#define RIU_IQDC_RX_0_COEF_2_SET_1_IQDC_RX_0_FIR_COEFF_6_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_2_SET_1_IQDC_RX_0_FIR_COEFF_8_RST    0x0
#define RIU_IQDC_RX_0_COEF_2_SET_1_IQDC_RX_0_FIR_COEFF_7_RST    0x0
#define RIU_IQDC_RX_0_COEF_2_SET_1_IQDC_RX_0_FIR_COEFF_6_RST    0x0

static inline void riu_iqdc_rx_0_coef_2_set_1_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_8, u16 iqdc_rx0_fir_coeff_7, u16 iqdc_rx0_fir_coeff_6)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_8 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_7 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_6 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_2_SET_1_ADDR, ((u32)iqdc_rx0_fir_coeff_8 << 23) | ((u32)iqdc_rx0_fir_coeff_7 << 12) | ((u32)iqdc_rx0_fir_coeff_6 << 0));
}

static inline void riu_iqdc_rx_0_coef_2_set_1_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_8, u16 *iqdc_rx0_fir_coeff_7, u16 *iqdc_rx0_fir_coeff_6)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_1_ADDR);

	*iqdc_rx0_fir_coeff_8 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_7 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_6 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_2_set_1_iqdc_rx_0_fir_coeff_8_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_1_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_2_set_1_iqdc_rx_0_fir_coeff_8_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff8)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff8 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_2_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_1_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff8 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_2_set_1_iqdc_rx_0_fir_coeff_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_2_set_1_iqdc_rx_0_fir_coeff_7_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff7)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff7 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_2_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_1_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff7 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_2_set_1_iqdc_rx_0_fir_coeff_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_2_set_1_iqdc_rx_0_fir_coeff_6_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff6)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff6 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_2_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_1_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff6 << 0));
}

/**
 * @brief CCA_GLITCH_FILTER_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    CCA_GLITCH_FILTER_SW_RESET 0
 *    27:21 CCA_GLITCH_FILTER_TH_20_S 0x0
 *    20:14 CCA_GLITCH_FILTER_TH_20_P 0x0
 *    13:07 CCA_GLITCH_FILTER_TH_PER20 0x0
 *    06:00 CCA_GLITCH_FILTER_WINDOW_SIZE 0x1
 * </pre>
 */
#define RIU_CCA_GLITCH_FILTER_0_ADDR        (REG_RIU_BASE_ADDR + 0x0000078C)
#define RIU_CCA_GLITCH_FILTER_0_OFFSET      0x0000078C
#define RIU_CCA_GLITCH_FILTER_0_INDEX       0x000001E3
#define RIU_CCA_GLITCH_FILTER_0_RESET       0x00000001

static inline u32 riu_cca_glitch_filter_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_0_ADDR);
}

static inline void riu_cca_glitch_filter_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_CCA_GLITCH_FILTER_0_ADDR, value);
}

/* Field definitions */
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_SW_RESET_BIT    ((u32)0x80000000)
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_SW_RESET_POS    31
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_TH_20_S_MASK    ((u32)0x0FE00000)
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_TH_20_S_LSB    21
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_TH_20_S_WIDTH    ((u32)0x00000007)
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_TH_20_P_MASK    ((u32)0x001FC000)
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_TH_20_P_LSB    14
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_TH_20_P_WIDTH    ((u32)0x00000007)
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_TH_PER_20_MASK    ((u32)0x00003F80)
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_TH_PER_20_LSB    7
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_TH_PER_20_WIDTH    ((u32)0x00000007)
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_WINDOW_SIZE_MASK    ((u32)0x0000007F)
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_WINDOW_SIZE_LSB    0
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_WINDOW_SIZE_WIDTH    ((u32)0x00000007)

#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_SW_RESET_RST    0x0
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_TH_20_S_RST    0x0
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_TH_20_P_RST    0x0
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_TH_PER_20_RST    0x0
#define RIU_CCA_GLITCH_FILTER_0_CCA_GLITCH_FILTER_WINDOW_SIZE_RST    0x1

static inline void riu_cca_glitch_filter_0_pack(struct cl_chip *chip, u8 cca_glitch_filter_sw_reset, u8 cca_glitch_filter_th_20_s, u8 cca_glitch_filter_th_20_p, u8 cca_glitch_filter_th_per20, u8 cca_glitch_filter_window_size)
{
	ASSERT_ERR_CHIP((((u32)cca_glitch_filter_sw_reset << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)cca_glitch_filter_th_20_s << 21) & ~((u32)0x0FE00000)) == 0);
	ASSERT_ERR_CHIP((((u32)cca_glitch_filter_th_20_p << 14) & ~((u32)0x001FC000)) == 0);
	ASSERT_ERR_CHIP((((u32)cca_glitch_filter_th_per20 << 7) & ~((u32)0x00003F80)) == 0);
	ASSERT_ERR_CHIP((((u32)cca_glitch_filter_window_size << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_CCA_GLITCH_FILTER_0_ADDR, ((u32)cca_glitch_filter_sw_reset << 31) | ((u32)cca_glitch_filter_th_20_s << 21) | ((u32)cca_glitch_filter_th_20_p << 14) | ((u32)cca_glitch_filter_th_per20 << 7) | ((u32)cca_glitch_filter_window_size << 0));
}

static inline void riu_cca_glitch_filter_0_unpack(struct cl_chip *chip, u8 *cca_glitch_filter_sw_reset, u8 *cca_glitch_filter_th_20_s, u8 *cca_glitch_filter_th_20_p, u8 *cca_glitch_filter_th_per20, u8 *cca_glitch_filter_window_size)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_0_ADDR);

	*cca_glitch_filter_sw_reset = (local_val & ((u32)0x80000000)) >> 31;
	*cca_glitch_filter_th_20_s = (local_val & ((u32)0x0FE00000)) >> 21;
	*cca_glitch_filter_th_20_p = (local_val & ((u32)0x001FC000)) >> 14;
	*cca_glitch_filter_th_per20 = (local_val & ((u32)0x00003F80)) >> 7;
	*cca_glitch_filter_window_size = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_cca_glitch_filter_0_cca_glitch_filter_sw_reset_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_0_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void riu_cca_glitch_filter_0_cca_glitch_filter_sw_reset_setf(struct cl_chip *chip, u8 ccaglitchfilterswreset)
{
	ASSERT_ERR_CHIP((((u32)ccaglitchfilterswreset << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RIU_CCA_GLITCH_FILTER_0_ADDR, (cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_0_ADDR) & ~((u32)0x80000000)) | ((u32)ccaglitchfilterswreset << 31));
}

static inline u8 riu_cca_glitch_filter_0_cca_glitch_filter_th_20_s_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_0_ADDR);

	return (u8)((local_val & ((u32)0x0FE00000)) >> 21);
}

static inline void riu_cca_glitch_filter_0_cca_glitch_filter_th_20_s_setf(struct cl_chip *chip, u8 ccaglitchfilterth20s)
{
	ASSERT_ERR_CHIP((((u32)ccaglitchfilterth20s << 21) & ~((u32)0x0FE00000)) == 0);
	cl_reg_write(chip, RIU_CCA_GLITCH_FILTER_0_ADDR, (cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_0_ADDR) & ~((u32)0x0FE00000)) | ((u32)ccaglitchfilterth20s << 21));
}

static inline u8 riu_cca_glitch_filter_0_cca_glitch_filter_th_20_p_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_0_ADDR);

	return (u8)((local_val & ((u32)0x001FC000)) >> 14);
}

static inline void riu_cca_glitch_filter_0_cca_glitch_filter_th_20_p_setf(struct cl_chip *chip, u8 ccaglitchfilterth20p)
{
	ASSERT_ERR_CHIP((((u32)ccaglitchfilterth20p << 14) & ~((u32)0x001FC000)) == 0);
	cl_reg_write(chip, RIU_CCA_GLITCH_FILTER_0_ADDR, (cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_0_ADDR) & ~((u32)0x001FC000)) | ((u32)ccaglitchfilterth20p << 14));
}

static inline u8 riu_cca_glitch_filter_0_cca_glitch_filter_th_per_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_0_ADDR);

	return (u8)((local_val & ((u32)0x00003F80)) >> 7);
}

static inline void riu_cca_glitch_filter_0_cca_glitch_filter_th_per_20_setf(struct cl_chip *chip, u8 ccaglitchfilterthper20)
{
	ASSERT_ERR_CHIP((((u32)ccaglitchfilterthper20 << 7) & ~((u32)0x00003F80)) == 0);
	cl_reg_write(chip, RIU_CCA_GLITCH_FILTER_0_ADDR, (cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_0_ADDR) & ~((u32)0x00003F80)) | ((u32)ccaglitchfilterthper20 << 7));
}

static inline u8 riu_cca_glitch_filter_0_cca_glitch_filter_window_size_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_0_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_cca_glitch_filter_0_cca_glitch_filter_window_size_setf(struct cl_chip *chip, u8 ccaglitchfilterwindowsize)
{
	ASSERT_ERR_CHIP((((u32)ccaglitchfilterwindowsize << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_CCA_GLITCH_FILTER_0_ADDR, (cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_0_ADDR) & ~((u32)0x0000007F)) | ((u32)ccaglitchfilterwindowsize << 0));
}

/**
 * @brief CCA_GLITCH_FILTER_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    13:07 CCA_GLITCH_FILTER_TH_80_S 0x0
 *    06:00 CCA_GLITCH_FILTER_TH_40_S 0x0
 * </pre>
 */
#define RIU_CCA_GLITCH_FILTER_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000790)
#define RIU_CCA_GLITCH_FILTER_1_OFFSET      0x00000790
#define RIU_CCA_GLITCH_FILTER_1_INDEX       0x000001E4
#define RIU_CCA_GLITCH_FILTER_1_RESET       0x00000000

static inline u32 riu_cca_glitch_filter_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_1_ADDR);
}

static inline void riu_cca_glitch_filter_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_CCA_GLITCH_FILTER_1_ADDR, value);
}

/* Field definitions */
#define RIU_CCA_GLITCH_FILTER_1_CCA_GLITCH_FILTER_TH_80_S_MASK    ((u32)0x00003F80)
#define RIU_CCA_GLITCH_FILTER_1_CCA_GLITCH_FILTER_TH_80_S_LSB    7
#define RIU_CCA_GLITCH_FILTER_1_CCA_GLITCH_FILTER_TH_80_S_WIDTH    ((u32)0x00000007)
#define RIU_CCA_GLITCH_FILTER_1_CCA_GLITCH_FILTER_TH_40_S_MASK    ((u32)0x0000007F)
#define RIU_CCA_GLITCH_FILTER_1_CCA_GLITCH_FILTER_TH_40_S_LSB    0
#define RIU_CCA_GLITCH_FILTER_1_CCA_GLITCH_FILTER_TH_40_S_WIDTH    ((u32)0x00000007)

#define RIU_CCA_GLITCH_FILTER_1_CCA_GLITCH_FILTER_TH_80_S_RST    0x0
#define RIU_CCA_GLITCH_FILTER_1_CCA_GLITCH_FILTER_TH_40_S_RST    0x0

static inline void riu_cca_glitch_filter_1_pack(struct cl_chip *chip, u8 cca_glitch_filter_th_80_s, u8 cca_glitch_filter_th_40_s)
{
	ASSERT_ERR_CHIP((((u32)cca_glitch_filter_th_80_s << 7) & ~((u32)0x00003F80)) == 0);
	ASSERT_ERR_CHIP((((u32)cca_glitch_filter_th_40_s << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_CCA_GLITCH_FILTER_1_ADDR, ((u32)cca_glitch_filter_th_80_s << 7) | ((u32)cca_glitch_filter_th_40_s << 0));
}

static inline void riu_cca_glitch_filter_1_unpack(struct cl_chip *chip, u8 *cca_glitch_filter_th_80_s, u8 *cca_glitch_filter_th_40_s)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_1_ADDR);

	*cca_glitch_filter_th_80_s = (local_val & ((u32)0x00003F80)) >> 7;
	*cca_glitch_filter_th_40_s = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_cca_glitch_filter_1_cca_glitch_filter_th_80_s_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_1_ADDR);

	return (u8)((local_val & ((u32)0x00003F80)) >> 7);
}

static inline void riu_cca_glitch_filter_1_cca_glitch_filter_th_80_s_setf(struct cl_chip *chip, u8 ccaglitchfilterth80s)
{
	ASSERT_ERR_CHIP((((u32)ccaglitchfilterth80s << 7) & ~((u32)0x00003F80)) == 0);
	cl_reg_write(chip, RIU_CCA_GLITCH_FILTER_1_ADDR, (cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_1_ADDR) & ~((u32)0x00003F80)) | ((u32)ccaglitchfilterth80s << 7));
}

static inline u8 riu_cca_glitch_filter_1_cca_glitch_filter_th_40_s_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_1_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_cca_glitch_filter_1_cca_glitch_filter_th_40_s_setf(struct cl_chip *chip, u8 ccaglitchfilterth40s)
{
	ASSERT_ERR_CHIP((((u32)ccaglitchfilterth40s << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_CCA_GLITCH_FILTER_1_ADDR, (cl_reg_read(chip, RIU_CCA_GLITCH_FILTER_1_ADDR) & ~((u32)0x0000007F)) | ((u32)ccaglitchfilterth40s << 0));
}

/**
 * @brief IQDC_RX_0_GAIN_SET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 iqdc_rx0_phase_gain       0x0
 *    10:00 iqdc_rx0_amp_gain         0x400
 * </pre>
 */
#define RIU_IQDC_RX_0_GAIN_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000794)
#define RIU_IQDC_RX_0_GAIN_SET_1_OFFSET      0x00000794
#define RIU_IQDC_RX_0_GAIN_SET_1_INDEX       0x000001E5
#define RIU_IQDC_RX_0_GAIN_SET_1_RESET       0x00000400

static inline u32 riu_iqdc_rx_0_gain_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_1_ADDR);
}

static inline void riu_iqdc_rx_0_gain_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_GAIN_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_GAIN_SET_1_IQDC_RX_0_PHASE_GAIN_MASK    ((u32)0x0FFF0000)
#define RIU_IQDC_RX_0_GAIN_SET_1_IQDC_RX_0_PHASE_GAIN_LSB    16
#define RIU_IQDC_RX_0_GAIN_SET_1_IQDC_RX_0_PHASE_GAIN_WIDTH    ((u32)0x0000000C)
#define RIU_IQDC_RX_0_GAIN_SET_1_IQDC_RX_0_AMP_GAIN_MASK    ((u32)0x000007FF)
#define RIU_IQDC_RX_0_GAIN_SET_1_IQDC_RX_0_AMP_GAIN_LSB    0
#define RIU_IQDC_RX_0_GAIN_SET_1_IQDC_RX_0_AMP_GAIN_WIDTH    ((u32)0x0000000B)

#define RIU_IQDC_RX_0_GAIN_SET_1_IQDC_RX_0_PHASE_GAIN_RST    0x0
#define RIU_IQDC_RX_0_GAIN_SET_1_IQDC_RX_0_AMP_GAIN_RST    0x400

static inline void riu_iqdc_rx_0_gain_set_1_pack(struct cl_chip *chip, u16 iqdc_rx0_phase_gain, u16 iqdc_rx0_amp_gain)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_phase_gain << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_amp_gain << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_GAIN_SET_1_ADDR, ((u32)iqdc_rx0_phase_gain << 16) | ((u32)iqdc_rx0_amp_gain << 0));
}

static inline void riu_iqdc_rx_0_gain_set_1_unpack(struct cl_chip *chip, u16 *iqdc_rx0_phase_gain, u16 *iqdc_rx0_amp_gain)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_1_ADDR);

	*iqdc_rx0_phase_gain = (local_val & ((u32)0x0FFF0000)) >> 16;
	*iqdc_rx0_amp_gain = (local_val & ((u32)0x000007FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_gain_set_1_iqdc_rx_0_phase_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_iqdc_rx_0_gain_set_1_iqdc_rx_0_phase_gain_setf(struct cl_chip *chip, u16 iqdcrx0phasegain)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0phasegain << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_GAIN_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_1_ADDR) & ~((u32)0x0FFF0000)) | ((u32)iqdcrx0phasegain << 16));
}

static inline u16 riu_iqdc_rx_0_gain_set_1_iqdc_rx_0_amp_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x000007FF)) >> 0);
}

static inline void riu_iqdc_rx_0_gain_set_1_iqdc_rx_0_amp_gain_setf(struct cl_chip *chip, u16 iqdcrx0ampgain)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0ampgain << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_GAIN_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_1_ADDR) & ~((u32)0x000007FF)) | ((u32)iqdcrx0ampgain << 0));
}

/**
 * @brief IQDC_RX_1_COEF_0_SET_1 register definition
 *  IQDC RX1 Coefficients  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 qdc_rx1_fir_coeff_2       0x0
 *    20:12 qdc_rx1_fir_coeff_1       0x0
 *    08:00 qdc_rx1_fir_coeff_0       0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_0_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x000007A0)
#define RIU_IQDC_RX_1_COEF_0_SET_1_OFFSET      0x000007A0
#define RIU_IQDC_RX_1_COEF_0_SET_1_INDEX       0x000001E8
#define RIU_IQDC_RX_1_COEF_0_SET_1_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_0_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_1_ADDR);
}

static inline void riu_iqdc_rx_1_coef_0_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_0_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_0_SET_1_QDC_RX_1_FIR_COEFF_2_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_0_SET_1_QDC_RX_1_FIR_COEFF_2_LSB    23
#define RIU_IQDC_RX_1_COEF_0_SET_1_QDC_RX_1_FIR_COEFF_2_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_0_SET_1_QDC_RX_1_FIR_COEFF_1_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_0_SET_1_QDC_RX_1_FIR_COEFF_1_LSB    12
#define RIU_IQDC_RX_1_COEF_0_SET_1_QDC_RX_1_FIR_COEFF_1_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_0_SET_1_QDC_RX_1_FIR_COEFF_0_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_0_SET_1_QDC_RX_1_FIR_COEFF_0_LSB    0
#define RIU_IQDC_RX_1_COEF_0_SET_1_QDC_RX_1_FIR_COEFF_0_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_0_SET_1_QDC_RX_1_FIR_COEFF_2_RST    0x0
#define RIU_IQDC_RX_1_COEF_0_SET_1_QDC_RX_1_FIR_COEFF_1_RST    0x0
#define RIU_IQDC_RX_1_COEF_0_SET_1_QDC_RX_1_FIR_COEFF_0_RST    0x0

static inline void riu_iqdc_rx_1_coef_0_set_1_pack(struct cl_chip *chip, u16 qdc_rx1_fir_coeff_2, u16 qdc_rx1_fir_coeff_1, u16 qdc_rx1_fir_coeff_0)
{
	ASSERT_ERR_CHIP((((u32)qdc_rx1_fir_coeff_2 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)qdc_rx1_fir_coeff_1 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)qdc_rx1_fir_coeff_0 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_0_SET_1_ADDR, ((u32)qdc_rx1_fir_coeff_2 << 23) | ((u32)qdc_rx1_fir_coeff_1 << 12) | ((u32)qdc_rx1_fir_coeff_0 << 0));
}

static inline void riu_iqdc_rx_1_coef_0_set_1_unpack(struct cl_chip *chip, u16 *qdc_rx1_fir_coeff_2, u16 *qdc_rx1_fir_coeff_1, u16 *qdc_rx1_fir_coeff_0)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_1_ADDR);

	*qdc_rx1_fir_coeff_2 = (local_val & ((u32)0xFF800000)) >> 23;
	*qdc_rx1_fir_coeff_1 = (local_val & ((u32)0x001FF000)) >> 12;
	*qdc_rx1_fir_coeff_0 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_0_set_1_qdc_rx_1_fir_coeff_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_1_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_0_set_1_qdc_rx_1_fir_coeff_2_setf(struct cl_chip *chip, u16 qdcrx1fircoeff2)
{
	ASSERT_ERR_CHIP((((u32)qdcrx1fircoeff2 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_0_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_1_ADDR) & ~((u32)0xFF800000)) | ((u32)qdcrx1fircoeff2 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_0_set_1_qdc_rx_1_fir_coeff_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_0_set_1_qdc_rx_1_fir_coeff_1_setf(struct cl_chip *chip, u16 qdcrx1fircoeff1)
{
	ASSERT_ERR_CHIP((((u32)qdcrx1fircoeff1 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_0_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_1_ADDR) & ~((u32)0x001FF000)) | ((u32)qdcrx1fircoeff1 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_0_set_1_qdc_rx_1_fir_coeff_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_0_set_1_qdc_rx_1_fir_coeff_0_setf(struct cl_chip *chip, u16 qdcrx1fircoeff0)
{
	ASSERT_ERR_CHIP((((u32)qdcrx1fircoeff0 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_0_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_0_SET_1_ADDR) & ~((u32)0x000001FF)) | ((u32)qdcrx1fircoeff0 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_1_SET_1 register definition
 *  IQDC RX1 Coefficients  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_5      0x0
 *    20:12 iqdc_rx1_fir_coeff_4      0x0
 *    08:00 iqdc_rx1_fir_coeff_3      0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_1_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x000007A4)
#define RIU_IQDC_RX_1_COEF_1_SET_1_OFFSET      0x000007A4
#define RIU_IQDC_RX_1_COEF_1_SET_1_INDEX       0x000001E9
#define RIU_IQDC_RX_1_COEF_1_SET_1_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_1_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_1_ADDR);
}

static inline void riu_iqdc_rx_1_coef_1_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_1_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_1_SET_1_IQDC_RX_1_FIR_COEFF_5_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_1_SET_1_IQDC_RX_1_FIR_COEFF_5_LSB    23
#define RIU_IQDC_RX_1_COEF_1_SET_1_IQDC_RX_1_FIR_COEFF_5_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_1_SET_1_IQDC_RX_1_FIR_COEFF_4_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_1_SET_1_IQDC_RX_1_FIR_COEFF_4_LSB    12
#define RIU_IQDC_RX_1_COEF_1_SET_1_IQDC_RX_1_FIR_COEFF_4_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_1_SET_1_IQDC_RX_1_FIR_COEFF_3_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_1_SET_1_IQDC_RX_1_FIR_COEFF_3_LSB    0
#define RIU_IQDC_RX_1_COEF_1_SET_1_IQDC_RX_1_FIR_COEFF_3_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_1_SET_1_IQDC_RX_1_FIR_COEFF_5_RST    0x0
#define RIU_IQDC_RX_1_COEF_1_SET_1_IQDC_RX_1_FIR_COEFF_4_RST    0x0
#define RIU_IQDC_RX_1_COEF_1_SET_1_IQDC_RX_1_FIR_COEFF_3_RST    0x0

static inline void riu_iqdc_rx_1_coef_1_set_1_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_5, u16 iqdc_rx1_fir_coeff_4, u16 iqdc_rx1_fir_coeff_3)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_5 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_4 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_3 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_1_SET_1_ADDR, ((u32)iqdc_rx1_fir_coeff_5 << 23) | ((u32)iqdc_rx1_fir_coeff_4 << 12) | ((u32)iqdc_rx1_fir_coeff_3 << 0));
}

static inline void riu_iqdc_rx_1_coef_1_set_1_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_5, u16 *iqdc_rx1_fir_coeff_4, u16 *iqdc_rx1_fir_coeff_3)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_1_ADDR);

	*iqdc_rx1_fir_coeff_5 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_4 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_3 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_1_set_1_iqdc_rx_1_fir_coeff_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_1_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_1_set_1_iqdc_rx_1_fir_coeff_5_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff5)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff5 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_1_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_1_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff5 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_1_set_1_iqdc_rx_1_fir_coeff_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_1_set_1_iqdc_rx_1_fir_coeff_4_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff4)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff4 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_1_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_1_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff4 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_1_set_1_iqdc_rx_1_fir_coeff_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_1_set_1_iqdc_rx_1_fir_coeff_3_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff3)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff3 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_1_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_1_SET_1_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff3 << 0));
}

/**
 * @brief IQDC_RX_1_COEF_2_SET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx1_fir_coeff_8      0x0
 *    20:12 iqdc_rx1_fir_coeff_7      0x0
 *    08:00 iqdc_rx1_fir_coeff_6      0x0
 * </pre>
 */
#define RIU_IQDC_RX_1_COEF_2_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x000007A8)
#define RIU_IQDC_RX_1_COEF_2_SET_1_OFFSET      0x000007A8
#define RIU_IQDC_RX_1_COEF_2_SET_1_INDEX       0x000001EA
#define RIU_IQDC_RX_1_COEF_2_SET_1_RESET       0x00000000

static inline u32 riu_iqdc_rx_1_coef_2_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_1_ADDR);
}

static inline void riu_iqdc_rx_1_coef_2_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_2_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_COEF_2_SET_1_IQDC_RX_1_FIR_COEFF_8_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_1_COEF_2_SET_1_IQDC_RX_1_FIR_COEFF_8_LSB    23
#define RIU_IQDC_RX_1_COEF_2_SET_1_IQDC_RX_1_FIR_COEFF_8_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_2_SET_1_IQDC_RX_1_FIR_COEFF_7_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_1_COEF_2_SET_1_IQDC_RX_1_FIR_COEFF_7_LSB    12
#define RIU_IQDC_RX_1_COEF_2_SET_1_IQDC_RX_1_FIR_COEFF_7_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_1_COEF_2_SET_1_IQDC_RX_1_FIR_COEFF_6_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_1_COEF_2_SET_1_IQDC_RX_1_FIR_COEFF_6_LSB    0
#define RIU_IQDC_RX_1_COEF_2_SET_1_IQDC_RX_1_FIR_COEFF_6_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_1_COEF_2_SET_1_IQDC_RX_1_FIR_COEFF_8_RST    0x0
#define RIU_IQDC_RX_1_COEF_2_SET_1_IQDC_RX_1_FIR_COEFF_7_RST    0x0
#define RIU_IQDC_RX_1_COEF_2_SET_1_IQDC_RX_1_FIR_COEFF_6_RST    0x0

static inline void riu_iqdc_rx_1_coef_2_set_1_pack(struct cl_chip *chip, u16 iqdc_rx1_fir_coeff_8, u16 iqdc_rx1_fir_coeff_7, u16 iqdc_rx1_fir_coeff_6)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_8 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_7 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_fir_coeff_6 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_2_SET_1_ADDR, ((u32)iqdc_rx1_fir_coeff_8 << 23) | ((u32)iqdc_rx1_fir_coeff_7 << 12) | ((u32)iqdc_rx1_fir_coeff_6 << 0));
}

static inline void riu_iqdc_rx_1_coef_2_set_1_unpack(struct cl_chip *chip, u16 *iqdc_rx1_fir_coeff_8, u16 *iqdc_rx1_fir_coeff_7, u16 *iqdc_rx1_fir_coeff_6)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_1_ADDR);

	*iqdc_rx1_fir_coeff_8 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx1_fir_coeff_7 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx1_fir_coeff_6 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_coef_2_set_1_iqdc_rx_1_fir_coeff_8_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_1_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_1_coef_2_set_1_iqdc_rx_1_fir_coeff_8_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff8)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff8 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_2_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_1_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx1fircoeff8 << 23));
}

static inline u16 riu_iqdc_rx_1_coef_2_set_1_iqdc_rx_1_fir_coeff_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_1_coef_2_set_1_iqdc_rx_1_fir_coeff_7_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff7)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff7 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_2_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_1_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx1fircoeff7 << 12));
}

static inline u16 riu_iqdc_rx_1_coef_2_set_1_iqdc_rx_1_fir_coeff_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_1_coef_2_set_1_iqdc_rx_1_fir_coeff_6_setf(struct cl_chip *chip, u16 iqdcrx1fircoeff6)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1fircoeff6 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_COEF_2_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_COEF_2_SET_1_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx1fircoeff6 << 0));
}

/**
 * @brief IQDC_RX_1_GAIN_SET_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 iqdc_rx1_phase_gain       0x0
 *    10:00 iqdc_rx1_amp_gain         0x400
 * </pre>
 */
#define RIU_IQDC_RX_1_GAIN_SET_1_ADDR        (REG_RIU_BASE_ADDR + 0x000007B4)
#define RIU_IQDC_RX_1_GAIN_SET_1_OFFSET      0x000007B4
#define RIU_IQDC_RX_1_GAIN_SET_1_INDEX       0x000001ED
#define RIU_IQDC_RX_1_GAIN_SET_1_RESET       0x00000400

static inline u32 riu_iqdc_rx_1_gain_set_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_1_ADDR);
}

static inline void riu_iqdc_rx_1_gain_set_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_1_GAIN_SET_1_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_1_GAIN_SET_1_IQDC_RX_1_PHASE_GAIN_MASK    ((u32)0x0FFF0000)
#define RIU_IQDC_RX_1_GAIN_SET_1_IQDC_RX_1_PHASE_GAIN_LSB    16
#define RIU_IQDC_RX_1_GAIN_SET_1_IQDC_RX_1_PHASE_GAIN_WIDTH    ((u32)0x0000000C)
#define RIU_IQDC_RX_1_GAIN_SET_1_IQDC_RX_1_AMP_GAIN_MASK    ((u32)0x000007FF)
#define RIU_IQDC_RX_1_GAIN_SET_1_IQDC_RX_1_AMP_GAIN_LSB    0
#define RIU_IQDC_RX_1_GAIN_SET_1_IQDC_RX_1_AMP_GAIN_WIDTH    ((u32)0x0000000B)

#define RIU_IQDC_RX_1_GAIN_SET_1_IQDC_RX_1_PHASE_GAIN_RST    0x0
#define RIU_IQDC_RX_1_GAIN_SET_1_IQDC_RX_1_AMP_GAIN_RST    0x400

static inline void riu_iqdc_rx_1_gain_set_1_pack(struct cl_chip *chip, u16 iqdc_rx1_phase_gain, u16 iqdc_rx1_amp_gain)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_phase_gain << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx1_amp_gain << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_GAIN_SET_1_ADDR, ((u32)iqdc_rx1_phase_gain << 16) | ((u32)iqdc_rx1_amp_gain << 0));
}

static inline void riu_iqdc_rx_1_gain_set_1_unpack(struct cl_chip *chip, u16 *iqdc_rx1_phase_gain, u16 *iqdc_rx1_amp_gain)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_1_ADDR);

	*iqdc_rx1_phase_gain = (local_val & ((u32)0x0FFF0000)) >> 16;
	*iqdc_rx1_amp_gain = (local_val & ((u32)0x000007FF)) >> 0;
}

static inline u16 riu_iqdc_rx_1_gain_set_1_iqdc_rx_1_phase_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_iqdc_rx_1_gain_set_1_iqdc_rx_1_phase_gain_setf(struct cl_chip *chip, u16 iqdcrx1phasegain)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1phasegain << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_GAIN_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_1_ADDR) & ~((u32)0x0FFF0000)) | ((u32)iqdcrx1phasegain << 16));
}

static inline u16 riu_iqdc_rx_1_gain_set_1_iqdc_rx_1_amp_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_1_ADDR);

	return (u16)((local_val & ((u32)0x000007FF)) >> 0);
}

static inline void riu_iqdc_rx_1_gain_set_1_iqdc_rx_1_amp_gain_setf(struct cl_chip *chip, u16 iqdcrx1ampgain)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx1ampgain << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_1_GAIN_SET_1_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_1_GAIN_SET_1_ADDR) & ~((u32)0x000007FF)) | ((u32)iqdcrx1ampgain << 0));
}

/**
 * @brief IQDC_RX_0_COEF_0_SET_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_2      0x0
 *    20:12 iqdc_rx0_fir_coeff_1      0x0
 *    08:00 iqdc_rx0_fir_coeff_0      0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_0_SET_2_ADDR        (REG_RIU_BASE_ADDR + 0x000007C0)
#define RIU_IQDC_RX_0_COEF_0_SET_2_OFFSET      0x000007C0
#define RIU_IQDC_RX_0_COEF_0_SET_2_INDEX       0x000001F0
#define RIU_IQDC_RX_0_COEF_0_SET_2_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_0_set_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_2_ADDR);
}

static inline void riu_iqdc_rx_0_coef_0_set_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_0_SET_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_0_SET_2_IQDC_RX_0_FIR_COEFF_2_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_0_SET_2_IQDC_RX_0_FIR_COEFF_2_LSB    23
#define RIU_IQDC_RX_0_COEF_0_SET_2_IQDC_RX_0_FIR_COEFF_2_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_0_SET_2_IQDC_RX_0_FIR_COEFF_1_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_0_SET_2_IQDC_RX_0_FIR_COEFF_1_LSB    12
#define RIU_IQDC_RX_0_COEF_0_SET_2_IQDC_RX_0_FIR_COEFF_1_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_0_SET_2_IQDC_RX_0_FIR_COEFF_0_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_0_SET_2_IQDC_RX_0_FIR_COEFF_0_LSB    0
#define RIU_IQDC_RX_0_COEF_0_SET_2_IQDC_RX_0_FIR_COEFF_0_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_0_SET_2_IQDC_RX_0_FIR_COEFF_2_RST    0x0
#define RIU_IQDC_RX_0_COEF_0_SET_2_IQDC_RX_0_FIR_COEFF_1_RST    0x0
#define RIU_IQDC_RX_0_COEF_0_SET_2_IQDC_RX_0_FIR_COEFF_0_RST    0x0

static inline void riu_iqdc_rx_0_coef_0_set_2_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_2, u16 iqdc_rx0_fir_coeff_1, u16 iqdc_rx0_fir_coeff_0)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_2 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_1 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_0 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_0_SET_2_ADDR, ((u32)iqdc_rx0_fir_coeff_2 << 23) | ((u32)iqdc_rx0_fir_coeff_1 << 12) | ((u32)iqdc_rx0_fir_coeff_0 << 0));
}

static inline void riu_iqdc_rx_0_coef_0_set_2_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_2, u16 *iqdc_rx0_fir_coeff_1, u16 *iqdc_rx0_fir_coeff_0)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_2_ADDR);

	*iqdc_rx0_fir_coeff_2 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_1 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_0 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_0_set_2_iqdc_rx_0_fir_coeff_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_2_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_0_set_2_iqdc_rx_0_fir_coeff_2_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff2)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff2 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_0_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_2_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff2 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_0_set_2_iqdc_rx_0_fir_coeff_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_0_set_2_iqdc_rx_0_fir_coeff_1_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff1)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff1 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_0_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_2_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff1 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_0_set_2_iqdc_rx_0_fir_coeff_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_0_set_2_iqdc_rx_0_fir_coeff_0_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff0)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff0 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_0_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_2_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff0 << 0));
}

/**
 * @brief IQDC_RX_0_COEF_1_SET_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_5      0x0
 *    20:12 iqdc_rx0_fir_coeff_4      0x0
 *    08:00 iqdc_rx0_fir_coeff_3      0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_1_SET_2_ADDR        (REG_RIU_BASE_ADDR + 0x000007C4)
#define RIU_IQDC_RX_0_COEF_1_SET_2_OFFSET      0x000007C4
#define RIU_IQDC_RX_0_COEF_1_SET_2_INDEX       0x000001F1
#define RIU_IQDC_RX_0_COEF_1_SET_2_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_1_set_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_2_ADDR);
}

static inline void riu_iqdc_rx_0_coef_1_set_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_1_SET_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_1_SET_2_IQDC_RX_0_FIR_COEFF_5_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_1_SET_2_IQDC_RX_0_FIR_COEFF_5_LSB    23
#define RIU_IQDC_RX_0_COEF_1_SET_2_IQDC_RX_0_FIR_COEFF_5_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_1_SET_2_IQDC_RX_0_FIR_COEFF_4_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_1_SET_2_IQDC_RX_0_FIR_COEFF_4_LSB    12
#define RIU_IQDC_RX_0_COEF_1_SET_2_IQDC_RX_0_FIR_COEFF_4_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_1_SET_2_IQDC_RX_0_FIR_COEFF_3_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_1_SET_2_IQDC_RX_0_FIR_COEFF_3_LSB    0
#define RIU_IQDC_RX_0_COEF_1_SET_2_IQDC_RX_0_FIR_COEFF_3_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_1_SET_2_IQDC_RX_0_FIR_COEFF_5_RST    0x0
#define RIU_IQDC_RX_0_COEF_1_SET_2_IQDC_RX_0_FIR_COEFF_4_RST    0x0
#define RIU_IQDC_RX_0_COEF_1_SET_2_IQDC_RX_0_FIR_COEFF_3_RST    0x0

static inline void riu_iqdc_rx_0_coef_1_set_2_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_5, u16 iqdc_rx0_fir_coeff_4, u16 iqdc_rx0_fir_coeff_3)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_5 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_4 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_3 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_1_SET_2_ADDR, ((u32)iqdc_rx0_fir_coeff_5 << 23) | ((u32)iqdc_rx0_fir_coeff_4 << 12) | ((u32)iqdc_rx0_fir_coeff_3 << 0));
}

static inline void riu_iqdc_rx_0_coef_1_set_2_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_5, u16 *iqdc_rx0_fir_coeff_4, u16 *iqdc_rx0_fir_coeff_3)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_2_ADDR);

	*iqdc_rx0_fir_coeff_5 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_4 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_3 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_1_set_2_iqdc_rx_0_fir_coeff_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_2_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_1_set_2_iqdc_rx_0_fir_coeff_5_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff5)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff5 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_1_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_2_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff5 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_1_set_2_iqdc_rx_0_fir_coeff_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_1_set_2_iqdc_rx_0_fir_coeff_4_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff4)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff4 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_1_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_2_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff4 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_1_set_2_iqdc_rx_0_fir_coeff_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_1_set_2_iqdc_rx_0_fir_coeff_3_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff3)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff3 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_1_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_2_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff3 << 0));
}

/**
 * @brief IQDC_RX_0_COEF_2_SET_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_8      0x0
 *    20:12 iqdc_rx0_fir_coeff_7      0x0
 *    08:00 iqdc_rx0_fir_coeff_6      0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_2_SET_2_ADDR        (REG_RIU_BASE_ADDR + 0x000007C8)
#define RIU_IQDC_RX_0_COEF_2_SET_2_OFFSET      0x000007C8
#define RIU_IQDC_RX_0_COEF_2_SET_2_INDEX       0x000001F2
#define RIU_IQDC_RX_0_COEF_2_SET_2_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_2_set_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_2_ADDR);
}

static inline void riu_iqdc_rx_0_coef_2_set_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_2_SET_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_2_SET_2_IQDC_RX_0_FIR_COEFF_8_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_2_SET_2_IQDC_RX_0_FIR_COEFF_8_LSB    23
#define RIU_IQDC_RX_0_COEF_2_SET_2_IQDC_RX_0_FIR_COEFF_8_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_2_SET_2_IQDC_RX_0_FIR_COEFF_7_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_2_SET_2_IQDC_RX_0_FIR_COEFF_7_LSB    12
#define RIU_IQDC_RX_0_COEF_2_SET_2_IQDC_RX_0_FIR_COEFF_7_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_2_SET_2_IQDC_RX_0_FIR_COEFF_6_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_2_SET_2_IQDC_RX_0_FIR_COEFF_6_LSB    0
#define RIU_IQDC_RX_0_COEF_2_SET_2_IQDC_RX_0_FIR_COEFF_6_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_2_SET_2_IQDC_RX_0_FIR_COEFF_8_RST    0x0
#define RIU_IQDC_RX_0_COEF_2_SET_2_IQDC_RX_0_FIR_COEFF_7_RST    0x0
#define RIU_IQDC_RX_0_COEF_2_SET_2_IQDC_RX_0_FIR_COEFF_6_RST    0x0

static inline void riu_iqdc_rx_0_coef_2_set_2_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_8, u16 iqdc_rx0_fir_coeff_7, u16 iqdc_rx0_fir_coeff_6)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_8 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_7 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_6 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_2_SET_2_ADDR, ((u32)iqdc_rx0_fir_coeff_8 << 23) | ((u32)iqdc_rx0_fir_coeff_7 << 12) | ((u32)iqdc_rx0_fir_coeff_6 << 0));
}

static inline void riu_iqdc_rx_0_coef_2_set_2_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_8, u16 *iqdc_rx0_fir_coeff_7, u16 *iqdc_rx0_fir_coeff_6)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_2_ADDR);

	*iqdc_rx0_fir_coeff_8 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_7 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_6 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_2_set_2_iqdc_rx_0_fir_coeff_8_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_2_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_2_set_2_iqdc_rx_0_fir_coeff_8_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff8)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff8 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_2_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_2_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff8 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_2_set_2_iqdc_rx_0_fir_coeff_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_2_set_2_iqdc_rx_0_fir_coeff_7_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff7)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff7 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_2_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_2_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff7 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_2_set_2_iqdc_rx_0_fir_coeff_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_2_set_2_iqdc_rx_0_fir_coeff_6_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff6)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff6 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_2_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_2_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff6 << 0));
}

/**
 * @brief IQDC_RX_0_COEF_3_SET_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_11     0x0
 *    20:12 iqdc_rx0_fir_coeff_10     0x0
 *    08:00 iqdc_rx0_fir_coeff_9      0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_3_SET_2_ADDR        (REG_RIU_BASE_ADDR + 0x000007CC)
#define RIU_IQDC_RX_0_COEF_3_SET_2_OFFSET      0x000007CC
#define RIU_IQDC_RX_0_COEF_3_SET_2_INDEX       0x000001F3
#define RIU_IQDC_RX_0_COEF_3_SET_2_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_3_set_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_2_ADDR);
}

static inline void riu_iqdc_rx_0_coef_3_set_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_3_SET_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_3_SET_2_IQDC_RX_0_FIR_COEFF_11_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_3_SET_2_IQDC_RX_0_FIR_COEFF_11_LSB    23
#define RIU_IQDC_RX_0_COEF_3_SET_2_IQDC_RX_0_FIR_COEFF_11_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_3_SET_2_IQDC_RX_0_FIR_COEFF_10_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_3_SET_2_IQDC_RX_0_FIR_COEFF_10_LSB    12
#define RIU_IQDC_RX_0_COEF_3_SET_2_IQDC_RX_0_FIR_COEFF_10_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_3_SET_2_IQDC_RX_0_FIR_COEFF_9_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_3_SET_2_IQDC_RX_0_FIR_COEFF_9_LSB    0
#define RIU_IQDC_RX_0_COEF_3_SET_2_IQDC_RX_0_FIR_COEFF_9_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_3_SET_2_IQDC_RX_0_FIR_COEFF_11_RST    0x0
#define RIU_IQDC_RX_0_COEF_3_SET_2_IQDC_RX_0_FIR_COEFF_10_RST    0x0
#define RIU_IQDC_RX_0_COEF_3_SET_2_IQDC_RX_0_FIR_COEFF_9_RST    0x0

static inline void riu_iqdc_rx_0_coef_3_set_2_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_11, u16 iqdc_rx0_fir_coeff_10, u16 iqdc_rx0_fir_coeff_9)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_11 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_10 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_9 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_3_SET_2_ADDR, ((u32)iqdc_rx0_fir_coeff_11 << 23) | ((u32)iqdc_rx0_fir_coeff_10 << 12) | ((u32)iqdc_rx0_fir_coeff_9 << 0));
}

static inline void riu_iqdc_rx_0_coef_3_set_2_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_11, u16 *iqdc_rx0_fir_coeff_10, u16 *iqdc_rx0_fir_coeff_9)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_2_ADDR);

	*iqdc_rx0_fir_coeff_11 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_10 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_9 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_3_set_2_iqdc_rx_0_fir_coeff_11_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_2_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_3_set_2_iqdc_rx_0_fir_coeff_11_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff11)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff11 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_3_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_2_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff11 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_3_set_2_iqdc_rx_0_fir_coeff_10_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_3_set_2_iqdc_rx_0_fir_coeff_10_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff10)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff10 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_3_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_2_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff10 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_3_set_2_iqdc_rx_0_fir_coeff_9_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_3_set_2_iqdc_rx_0_fir_coeff_9_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff9)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff9 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_3_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_2_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff9 << 0));
}

/**
 * @brief IQDC_RX_0_GAIN_SET_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 iqdc_rx0_phase_gain       0x0
 *    10:00 iqdc_rx0_amp_gain         0x400
 * </pre>
 */
#define RIU_IQDC_RX_0_GAIN_SET_2_ADDR        (REG_RIU_BASE_ADDR + 0x000007D0)
#define RIU_IQDC_RX_0_GAIN_SET_2_OFFSET      0x000007D0
#define RIU_IQDC_RX_0_GAIN_SET_2_INDEX       0x000001F4
#define RIU_IQDC_RX_0_GAIN_SET_2_RESET       0x00000400

static inline u32 riu_iqdc_rx_0_gain_set_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_2_ADDR);
}

static inline void riu_iqdc_rx_0_gain_set_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_GAIN_SET_2_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_GAIN_SET_2_IQDC_RX_0_PHASE_GAIN_MASK    ((u32)0x0FFF0000)
#define RIU_IQDC_RX_0_GAIN_SET_2_IQDC_RX_0_PHASE_GAIN_LSB    16
#define RIU_IQDC_RX_0_GAIN_SET_2_IQDC_RX_0_PHASE_GAIN_WIDTH    ((u32)0x0000000C)
#define RIU_IQDC_RX_0_GAIN_SET_2_IQDC_RX_0_AMP_GAIN_MASK    ((u32)0x000007FF)
#define RIU_IQDC_RX_0_GAIN_SET_2_IQDC_RX_0_AMP_GAIN_LSB    0
#define RIU_IQDC_RX_0_GAIN_SET_2_IQDC_RX_0_AMP_GAIN_WIDTH    ((u32)0x0000000B)

#define RIU_IQDC_RX_0_GAIN_SET_2_IQDC_RX_0_PHASE_GAIN_RST    0x0
#define RIU_IQDC_RX_0_GAIN_SET_2_IQDC_RX_0_AMP_GAIN_RST    0x400

static inline void riu_iqdc_rx_0_gain_set_2_pack(struct cl_chip *chip, u16 iqdc_rx0_phase_gain, u16 iqdc_rx0_amp_gain)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_phase_gain << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_amp_gain << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_GAIN_SET_2_ADDR, ((u32)iqdc_rx0_phase_gain << 16) | ((u32)iqdc_rx0_amp_gain << 0));
}

static inline void riu_iqdc_rx_0_gain_set_2_unpack(struct cl_chip *chip, u16 *iqdc_rx0_phase_gain, u16 *iqdc_rx0_amp_gain)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_2_ADDR);

	*iqdc_rx0_phase_gain = (local_val & ((u32)0x0FFF0000)) >> 16;
	*iqdc_rx0_amp_gain = (local_val & ((u32)0x000007FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_gain_set_2_iqdc_rx_0_phase_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_iqdc_rx_0_gain_set_2_iqdc_rx_0_phase_gain_setf(struct cl_chip *chip, u16 iqdcrx0phasegain)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0phasegain << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_GAIN_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_2_ADDR) & ~((u32)0x0FFF0000)) | ((u32)iqdcrx0phasegain << 16));
}

static inline u16 riu_iqdc_rx_0_gain_set_2_iqdc_rx_0_amp_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_2_ADDR);

	return (u16)((local_val & ((u32)0x000007FF)) >> 0);
}

static inline void riu_iqdc_rx_0_gain_set_2_iqdc_rx_0_amp_gain_setf(struct cl_chip *chip, u16 iqdcrx0ampgain)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0ampgain << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_GAIN_SET_2_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_2_ADDR) & ~((u32)0x000007FF)) | ((u32)iqdcrx0ampgain << 0));
}

/**
 * @brief IQDC_RX_0_GAIN_SET_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 iqdc_rx0_phase_gain       0x0
 *    10:00 iqdc_rx0_amp_gain         0x400
 * </pre>
 */
#define RIU_IQDC_RX_0_GAIN_SET_3_ADDR        (REG_RIU_BASE_ADDR + 0x000007DC)
#define RIU_IQDC_RX_0_GAIN_SET_3_OFFSET      0x000007DC
#define RIU_IQDC_RX_0_GAIN_SET_3_INDEX       0x000001F7
#define RIU_IQDC_RX_0_GAIN_SET_3_RESET       0x00000400

static inline u32 riu_iqdc_rx_0_gain_set_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_3_ADDR);
}

static inline void riu_iqdc_rx_0_gain_set_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_GAIN_SET_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_GAIN_SET_3_IQDC_RX_0_PHASE_GAIN_MASK    ((u32)0x0FFF0000)
#define RIU_IQDC_RX_0_GAIN_SET_3_IQDC_RX_0_PHASE_GAIN_LSB    16
#define RIU_IQDC_RX_0_GAIN_SET_3_IQDC_RX_0_PHASE_GAIN_WIDTH    ((u32)0x0000000C)
#define RIU_IQDC_RX_0_GAIN_SET_3_IQDC_RX_0_AMP_GAIN_MASK    ((u32)0x000007FF)
#define RIU_IQDC_RX_0_GAIN_SET_3_IQDC_RX_0_AMP_GAIN_LSB    0
#define RIU_IQDC_RX_0_GAIN_SET_3_IQDC_RX_0_AMP_GAIN_WIDTH    ((u32)0x0000000B)

#define RIU_IQDC_RX_0_GAIN_SET_3_IQDC_RX_0_PHASE_GAIN_RST    0x0
#define RIU_IQDC_RX_0_GAIN_SET_3_IQDC_RX_0_AMP_GAIN_RST    0x400

static inline void riu_iqdc_rx_0_gain_set_3_pack(struct cl_chip *chip, u16 iqdc_rx0_phase_gain, u16 iqdc_rx0_amp_gain)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_phase_gain << 16) & ~((u32)0x0FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_amp_gain << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_GAIN_SET_3_ADDR, ((u32)iqdc_rx0_phase_gain << 16) | ((u32)iqdc_rx0_amp_gain << 0));
}

static inline void riu_iqdc_rx_0_gain_set_3_unpack(struct cl_chip *chip, u16 *iqdc_rx0_phase_gain, u16 *iqdc_rx0_amp_gain)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_3_ADDR);

	*iqdc_rx0_phase_gain = (local_val & ((u32)0x0FFF0000)) >> 16;
	*iqdc_rx0_amp_gain = (local_val & ((u32)0x000007FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_gain_set_3_iqdc_rx_0_phase_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x0FFF0000)) >> 16);
}

static inline void riu_iqdc_rx_0_gain_set_3_iqdc_rx_0_phase_gain_setf(struct cl_chip *chip, u16 iqdcrx0phasegain)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0phasegain << 16) & ~((u32)0x0FFF0000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_GAIN_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_3_ADDR) & ~((u32)0x0FFF0000)) | ((u32)iqdcrx0phasegain << 16));
}

static inline u16 riu_iqdc_rx_0_gain_set_3_iqdc_rx_0_amp_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x000007FF)) >> 0);
}

static inline void riu_iqdc_rx_0_gain_set_3_iqdc_rx_0_amp_gain_setf(struct cl_chip *chip, u16 iqdcrx0ampgain)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0ampgain << 0) & ~((u32)0x000007FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_GAIN_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_GAIN_SET_3_ADDR) & ~((u32)0x000007FF)) | ((u32)iqdcrx0ampgain << 0));
}

/**
 * @brief IQDC_RX_0_COEF_0_SET_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_2      0x0
 *    20:12 iqdc_rx0_fir_coeff_1      0x0
 *    08:00 iqdc_rx0_fir_coeff_0      0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_0_SET_3_ADDR        (REG_RIU_BASE_ADDR + 0x000007E0)
#define RIU_IQDC_RX_0_COEF_0_SET_3_OFFSET      0x000007E0
#define RIU_IQDC_RX_0_COEF_0_SET_3_INDEX       0x000001F8
#define RIU_IQDC_RX_0_COEF_0_SET_3_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_0_set_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_3_ADDR);
}

static inline void riu_iqdc_rx_0_coef_0_set_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_0_SET_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_0_SET_3_IQDC_RX_0_FIR_COEFF_2_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_0_SET_3_IQDC_RX_0_FIR_COEFF_2_LSB    23
#define RIU_IQDC_RX_0_COEF_0_SET_3_IQDC_RX_0_FIR_COEFF_2_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_0_SET_3_IQDC_RX_0_FIR_COEFF_1_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_0_SET_3_IQDC_RX_0_FIR_COEFF_1_LSB    12
#define RIU_IQDC_RX_0_COEF_0_SET_3_IQDC_RX_0_FIR_COEFF_1_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_0_SET_3_IQDC_RX_0_FIR_COEFF_0_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_0_SET_3_IQDC_RX_0_FIR_COEFF_0_LSB    0
#define RIU_IQDC_RX_0_COEF_0_SET_3_IQDC_RX_0_FIR_COEFF_0_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_0_SET_3_IQDC_RX_0_FIR_COEFF_2_RST    0x0
#define RIU_IQDC_RX_0_COEF_0_SET_3_IQDC_RX_0_FIR_COEFF_1_RST    0x0
#define RIU_IQDC_RX_0_COEF_0_SET_3_IQDC_RX_0_FIR_COEFF_0_RST    0x0

static inline void riu_iqdc_rx_0_coef_0_set_3_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_2, u16 iqdc_rx0_fir_coeff_1, u16 iqdc_rx0_fir_coeff_0)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_2 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_1 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_0 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_0_SET_3_ADDR, ((u32)iqdc_rx0_fir_coeff_2 << 23) | ((u32)iqdc_rx0_fir_coeff_1 << 12) | ((u32)iqdc_rx0_fir_coeff_0 << 0));
}

static inline void riu_iqdc_rx_0_coef_0_set_3_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_2, u16 *iqdc_rx0_fir_coeff_1, u16 *iqdc_rx0_fir_coeff_0)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_3_ADDR);

	*iqdc_rx0_fir_coeff_2 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_1 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_0 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_0_set_3_iqdc_rx_0_fir_coeff_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_3_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_0_set_3_iqdc_rx_0_fir_coeff_2_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff2)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff2 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_0_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_3_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff2 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_0_set_3_iqdc_rx_0_fir_coeff_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_0_set_3_iqdc_rx_0_fir_coeff_1_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff1)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff1 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_0_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_3_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff1 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_0_set_3_iqdc_rx_0_fir_coeff_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_0_set_3_iqdc_rx_0_fir_coeff_0_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff0)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff0 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_0_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_0_SET_3_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff0 << 0));
}

/**
 * @brief IQDC_RX_0_COEF_1_SET_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_5      0x0
 *    20:12 iqdc_rx0_fir_coeff_4      0x0
 *    08:00 iqdc_rx0_fir_coeff_3      0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_1_SET_3_ADDR        (REG_RIU_BASE_ADDR + 0x000007E4)
#define RIU_IQDC_RX_0_COEF_1_SET_3_OFFSET      0x000007E4
#define RIU_IQDC_RX_0_COEF_1_SET_3_INDEX       0x000001F9
#define RIU_IQDC_RX_0_COEF_1_SET_3_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_1_set_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_3_ADDR);
}

static inline void riu_iqdc_rx_0_coef_1_set_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_1_SET_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_1_SET_3_IQDC_RX_0_FIR_COEFF_5_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_1_SET_3_IQDC_RX_0_FIR_COEFF_5_LSB    23
#define RIU_IQDC_RX_0_COEF_1_SET_3_IQDC_RX_0_FIR_COEFF_5_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_1_SET_3_IQDC_RX_0_FIR_COEFF_4_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_1_SET_3_IQDC_RX_0_FIR_COEFF_4_LSB    12
#define RIU_IQDC_RX_0_COEF_1_SET_3_IQDC_RX_0_FIR_COEFF_4_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_1_SET_3_IQDC_RX_0_FIR_COEFF_3_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_1_SET_3_IQDC_RX_0_FIR_COEFF_3_LSB    0
#define RIU_IQDC_RX_0_COEF_1_SET_3_IQDC_RX_0_FIR_COEFF_3_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_1_SET_3_IQDC_RX_0_FIR_COEFF_5_RST    0x0
#define RIU_IQDC_RX_0_COEF_1_SET_3_IQDC_RX_0_FIR_COEFF_4_RST    0x0
#define RIU_IQDC_RX_0_COEF_1_SET_3_IQDC_RX_0_FIR_COEFF_3_RST    0x0

static inline void riu_iqdc_rx_0_coef_1_set_3_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_5, u16 iqdc_rx0_fir_coeff_4, u16 iqdc_rx0_fir_coeff_3)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_5 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_4 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_3 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_1_SET_3_ADDR, ((u32)iqdc_rx0_fir_coeff_5 << 23) | ((u32)iqdc_rx0_fir_coeff_4 << 12) | ((u32)iqdc_rx0_fir_coeff_3 << 0));
}

static inline void riu_iqdc_rx_0_coef_1_set_3_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_5, u16 *iqdc_rx0_fir_coeff_4, u16 *iqdc_rx0_fir_coeff_3)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_3_ADDR);

	*iqdc_rx0_fir_coeff_5 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_4 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_3 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_1_set_3_iqdc_rx_0_fir_coeff_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_3_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_1_set_3_iqdc_rx_0_fir_coeff_5_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff5)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff5 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_1_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_3_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff5 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_1_set_3_iqdc_rx_0_fir_coeff_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_1_set_3_iqdc_rx_0_fir_coeff_4_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff4)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff4 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_1_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_3_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff4 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_1_set_3_iqdc_rx_0_fir_coeff_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_1_set_3_iqdc_rx_0_fir_coeff_3_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff3)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff3 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_1_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_1_SET_3_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff3 << 0));
}

/**
 * @brief IQDC_RX_0_COEF_2_SET_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_8      0x0
 *    20:12 iqdc_rx0_fir_coeff_7      0x0
 *    08:00 iqdc_rx0_fir_coeff_6      0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_2_SET_3_ADDR        (REG_RIU_BASE_ADDR + 0x000007E8)
#define RIU_IQDC_RX_0_COEF_2_SET_3_OFFSET      0x000007E8
#define RIU_IQDC_RX_0_COEF_2_SET_3_INDEX       0x000001FA
#define RIU_IQDC_RX_0_COEF_2_SET_3_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_2_set_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_3_ADDR);
}

static inline void riu_iqdc_rx_0_coef_2_set_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_2_SET_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_2_SET_3_IQDC_RX_0_FIR_COEFF_8_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_2_SET_3_IQDC_RX_0_FIR_COEFF_8_LSB    23
#define RIU_IQDC_RX_0_COEF_2_SET_3_IQDC_RX_0_FIR_COEFF_8_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_2_SET_3_IQDC_RX_0_FIR_COEFF_7_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_2_SET_3_IQDC_RX_0_FIR_COEFF_7_LSB    12
#define RIU_IQDC_RX_0_COEF_2_SET_3_IQDC_RX_0_FIR_COEFF_7_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_2_SET_3_IQDC_RX_0_FIR_COEFF_6_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_2_SET_3_IQDC_RX_0_FIR_COEFF_6_LSB    0
#define RIU_IQDC_RX_0_COEF_2_SET_3_IQDC_RX_0_FIR_COEFF_6_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_2_SET_3_IQDC_RX_0_FIR_COEFF_8_RST    0x0
#define RIU_IQDC_RX_0_COEF_2_SET_3_IQDC_RX_0_FIR_COEFF_7_RST    0x0
#define RIU_IQDC_RX_0_COEF_2_SET_3_IQDC_RX_0_FIR_COEFF_6_RST    0x0

static inline void riu_iqdc_rx_0_coef_2_set_3_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_8, u16 iqdc_rx0_fir_coeff_7, u16 iqdc_rx0_fir_coeff_6)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_8 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_7 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_6 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_2_SET_3_ADDR, ((u32)iqdc_rx0_fir_coeff_8 << 23) | ((u32)iqdc_rx0_fir_coeff_7 << 12) | ((u32)iqdc_rx0_fir_coeff_6 << 0));
}

static inline void riu_iqdc_rx_0_coef_2_set_3_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_8, u16 *iqdc_rx0_fir_coeff_7, u16 *iqdc_rx0_fir_coeff_6)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_3_ADDR);

	*iqdc_rx0_fir_coeff_8 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_7 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_6 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_2_set_3_iqdc_rx_0_fir_coeff_8_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_3_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_2_set_3_iqdc_rx_0_fir_coeff_8_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff8)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff8 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_2_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_3_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff8 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_2_set_3_iqdc_rx_0_fir_coeff_7_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_2_set_3_iqdc_rx_0_fir_coeff_7_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff7)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff7 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_2_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_3_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff7 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_2_set_3_iqdc_rx_0_fir_coeff_6_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_2_set_3_iqdc_rx_0_fir_coeff_6_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff6)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff6 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_2_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_2_SET_3_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff6 << 0));
}

/**
 * @brief IQDC_RX_0_COEF_3_SET_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_rx0_fir_coeff_11     0x0
 *    20:12 iqdc_rx0_fir_coeff_10     0x0
 *    08:00 iqdc_rx0_fir_coeff_9      0x0
 * </pre>
 */
#define RIU_IQDC_RX_0_COEF_3_SET_3_ADDR        (REG_RIU_BASE_ADDR + 0x000007EC)
#define RIU_IQDC_RX_0_COEF_3_SET_3_OFFSET      0x000007EC
#define RIU_IQDC_RX_0_COEF_3_SET_3_INDEX       0x000001FB
#define RIU_IQDC_RX_0_COEF_3_SET_3_RESET       0x00000000

static inline u32 riu_iqdc_rx_0_coef_3_set_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_3_ADDR);
}

static inline void riu_iqdc_rx_0_coef_3_set_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_3_SET_3_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_0_COEF_3_SET_3_IQDC_RX_0_FIR_COEFF_11_MASK    ((u32)0xFF800000)
#define RIU_IQDC_RX_0_COEF_3_SET_3_IQDC_RX_0_FIR_COEFF_11_LSB    23
#define RIU_IQDC_RX_0_COEF_3_SET_3_IQDC_RX_0_FIR_COEFF_11_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_3_SET_3_IQDC_RX_0_FIR_COEFF_10_MASK    ((u32)0x001FF000)
#define RIU_IQDC_RX_0_COEF_3_SET_3_IQDC_RX_0_FIR_COEFF_10_LSB    12
#define RIU_IQDC_RX_0_COEF_3_SET_3_IQDC_RX_0_FIR_COEFF_10_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_RX_0_COEF_3_SET_3_IQDC_RX_0_FIR_COEFF_9_MASK    ((u32)0x000001FF)
#define RIU_IQDC_RX_0_COEF_3_SET_3_IQDC_RX_0_FIR_COEFF_9_LSB    0
#define RIU_IQDC_RX_0_COEF_3_SET_3_IQDC_RX_0_FIR_COEFF_9_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_RX_0_COEF_3_SET_3_IQDC_RX_0_FIR_COEFF_11_RST    0x0
#define RIU_IQDC_RX_0_COEF_3_SET_3_IQDC_RX_0_FIR_COEFF_10_RST    0x0
#define RIU_IQDC_RX_0_COEF_3_SET_3_IQDC_RX_0_FIR_COEFF_9_RST    0x0

static inline void riu_iqdc_rx_0_coef_3_set_3_pack(struct cl_chip *chip, u16 iqdc_rx0_fir_coeff_11, u16 iqdc_rx0_fir_coeff_10, u16 iqdc_rx0_fir_coeff_9)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_11 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_10 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx0_fir_coeff_9 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_3_SET_3_ADDR, ((u32)iqdc_rx0_fir_coeff_11 << 23) | ((u32)iqdc_rx0_fir_coeff_10 << 12) | ((u32)iqdc_rx0_fir_coeff_9 << 0));
}

static inline void riu_iqdc_rx_0_coef_3_set_3_unpack(struct cl_chip *chip, u16 *iqdc_rx0_fir_coeff_11, u16 *iqdc_rx0_fir_coeff_10, u16 *iqdc_rx0_fir_coeff_9)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_3_ADDR);

	*iqdc_rx0_fir_coeff_11 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_rx0_fir_coeff_10 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_rx0_fir_coeff_9 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_rx_0_coef_3_set_3_iqdc_rx_0_fir_coeff_11_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_3_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_rx_0_coef_3_set_3_iqdc_rx_0_fir_coeff_11_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff11)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff11 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_3_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_3_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdcrx0fircoeff11 << 23));
}

static inline u16 riu_iqdc_rx_0_coef_3_set_3_iqdc_rx_0_fir_coeff_10_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_rx_0_coef_3_set_3_iqdc_rx_0_fir_coeff_10_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff10)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff10 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_3_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_3_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdcrx0fircoeff10 << 12));
}

static inline u16 riu_iqdc_rx_0_coef_3_set_3_iqdc_rx_0_fir_coeff_9_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_3_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_rx_0_coef_3_set_3_iqdc_rx_0_fir_coeff_9_setf(struct cl_chip *chip, u16 iqdcrx0fircoeff9)
{
	ASSERT_ERR_CHIP((((u32)iqdcrx0fircoeff9 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_0_COEF_3_SET_3_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_0_COEF_3_SET_3_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdcrx0fircoeff9 << 0));
}

/**
 * @brief IQDC_11_TX_CONTROL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:14 iqdc_tx_fir_scale         0x0
 *    10:09 iqdc_tx_bypass_type       0x0
 *    08    iqdc_tx_bypass_mode       0
 *    00    iqdc_tx_start             0
 * </pre>
 */
#define RIU_IQDC_11_TX_CONTROL_ADDR        (REG_RIU_BASE_ADDR + 0x000007F0)
#define RIU_IQDC_11_TX_CONTROL_OFFSET      0x000007F0
#define RIU_IQDC_11_TX_CONTROL_INDEX       0x000001FC
#define RIU_IQDC_11_TX_CONTROL_RESET       0x00000000

static inline u32 riu_iqdc_11_tx_control_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_11_TX_CONTROL_ADDR);
}

static inline void riu_iqdc_11_tx_control_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_11_TX_CONTROL_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_11_TX_CONTROL_IQDC_TX_FIR_SCALE_MASK    ((u32)0x0000C000)
#define RIU_IQDC_11_TX_CONTROL_IQDC_TX_FIR_SCALE_LSB    14
#define RIU_IQDC_11_TX_CONTROL_IQDC_TX_FIR_SCALE_WIDTH    ((u32)0x00000002)
#define RIU_IQDC_11_TX_CONTROL_IQDC_TX_BYPASS_TYPE_MASK    ((u32)0x00000600)
#define RIU_IQDC_11_TX_CONTROL_IQDC_TX_BYPASS_TYPE_LSB    9
#define RIU_IQDC_11_TX_CONTROL_IQDC_TX_BYPASS_TYPE_WIDTH    ((u32)0x00000002)
#define RIU_IQDC_11_TX_CONTROL_IQDC_TX_BYPASS_MODE_BIT    ((u32)0x00000100)
#define RIU_IQDC_11_TX_CONTROL_IQDC_TX_BYPASS_MODE_POS    8
#define RIU_IQDC_11_TX_CONTROL_IQDC_TX_START_BIT    ((u32)0x00000001)
#define RIU_IQDC_11_TX_CONTROL_IQDC_TX_START_POS    0

#define RIU_IQDC_11_TX_CONTROL_IQDC_TX_FIR_SCALE_RST    0x0
#define RIU_IQDC_11_TX_CONTROL_IQDC_TX_BYPASS_TYPE_RST    0x0
#define RIU_IQDC_11_TX_CONTROL_IQDC_TX_BYPASS_MODE_RST    0x0
#define RIU_IQDC_11_TX_CONTROL_IQDC_TX_START_RST    0x0

static inline void riu_iqdc_11_tx_control_pack(struct cl_chip *chip, u8 iqdc_tx_fir_scale, u8 iqdc_tx_bypass_type, u8 iqdc_tx_bypass_mode, u8 iqdc_tx_start)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx_fir_scale << 14) & ~((u32)0x0000C000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx_bypass_type << 9) & ~((u32)0x00000600)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx_bypass_mode << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx_start << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_IQDC_11_TX_CONTROL_ADDR, ((u32)iqdc_tx_fir_scale << 14) | ((u32)iqdc_tx_bypass_type << 9) | ((u32)iqdc_tx_bypass_mode << 8) | ((u32)iqdc_tx_start << 0));
}

static inline void riu_iqdc_11_tx_control_unpack(struct cl_chip *chip, u8 *iqdc_tx_fir_scale, u8 *iqdc_tx_bypass_type, u8 *iqdc_tx_bypass_mode, u8 *iqdc_tx_start)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_11_TX_CONTROL_ADDR);

	*iqdc_tx_fir_scale = (local_val & ((u32)0x0000C000)) >> 14;
	*iqdc_tx_bypass_type = (local_val & ((u32)0x00000600)) >> 9;
	*iqdc_tx_bypass_mode = (local_val & ((u32)0x00000100)) >> 8;
	*iqdc_tx_start = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_iqdc_11_tx_control_iqdc_tx_fir_scale_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_11_TX_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x0000C000)) >> 14);
}

static inline void riu_iqdc_11_tx_control_iqdc_tx_fir_scale_setf(struct cl_chip *chip, u8 iqdctxfirscale)
{
	ASSERT_ERR_CHIP((((u32)iqdctxfirscale << 14) & ~((u32)0x0000C000)) == 0);
	cl_reg_write(chip, RIU_IQDC_11_TX_CONTROL_ADDR, (cl_reg_read(chip, RIU_IQDC_11_TX_CONTROL_ADDR) & ~((u32)0x0000C000)) | ((u32)iqdctxfirscale << 14));
}

static inline u8 riu_iqdc_11_tx_control_iqdc_tx_bypass_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_11_TX_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x00000600)) >> 9);
}

static inline void riu_iqdc_11_tx_control_iqdc_tx_bypass_type_setf(struct cl_chip *chip, u8 iqdctxbypasstype)
{
	ASSERT_ERR_CHIP((((u32)iqdctxbypasstype << 9) & ~((u32)0x00000600)) == 0);
	cl_reg_write(chip, RIU_IQDC_11_TX_CONTROL_ADDR, (cl_reg_read(chip, RIU_IQDC_11_TX_CONTROL_ADDR) & ~((u32)0x00000600)) | ((u32)iqdctxbypasstype << 9));
}

static inline u8 riu_iqdc_11_tx_control_iqdc_tx_bypass_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_11_TX_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void riu_iqdc_11_tx_control_iqdc_tx_bypass_mode_setf(struct cl_chip *chip, u8 iqdctxbypassmode)
{
	ASSERT_ERR_CHIP((((u32)iqdctxbypassmode << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_IQDC_11_TX_CONTROL_ADDR, (cl_reg_read(chip, RIU_IQDC_11_TX_CONTROL_ADDR) & ~((u32)0x00000100)) | ((u32)iqdctxbypassmode << 8));
}

static inline void riu_iqdc_11_tx_control_iqdc_tx_start_setf(struct cl_chip *chip, u8 iqdctxstart)
{
	ASSERT_ERR_CHIP((((u32)iqdctxstart << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_IQDC_11_TX_CONTROL_ADDR, (cl_reg_read(chip, RIU_IQDC_11_TX_CONTROL_ADDR) & ~((u32)0x00000001)) | ((u32)iqdctxstart << 0));
}

/**
 * @brief IQDC_RX_CONTROL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:14 iqdc_rx_fir_scale         0x0
 *    12    iqdc_rx_length            0
 *    11    iqdc_rx_bypass_en_source  1
 *    10:09 iqdc_rx_bypass_type       0x0
 *    08    iqdc_rx_bypass_mode       0
 *    00    iqdc_rx_start             0
 * </pre>
 */
#define RIU_IQDC_RX_CONTROL_ADDR        (REG_RIU_BASE_ADDR + 0x000007F4)
#define RIU_IQDC_RX_CONTROL_OFFSET      0x000007F4
#define RIU_IQDC_RX_CONTROL_INDEX       0x000001FD
#define RIU_IQDC_RX_CONTROL_RESET       0x00000800

static inline u32 riu_iqdc_rx_control_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_RX_CONTROL_ADDR);
}

static inline void riu_iqdc_rx_control_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_RX_CONTROL_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_RX_CONTROL_IQDC_RX_FIR_SCALE_MASK    ((u32)0x0000C000)
#define RIU_IQDC_RX_CONTROL_IQDC_RX_FIR_SCALE_LSB    14
#define RIU_IQDC_RX_CONTROL_IQDC_RX_FIR_SCALE_WIDTH    ((u32)0x00000002)
#define RIU_IQDC_RX_CONTROL_IQDC_RX_LENGTH_BIT    ((u32)0x00001000)
#define RIU_IQDC_RX_CONTROL_IQDC_RX_LENGTH_POS    12
#define RIU_IQDC_RX_CONTROL_IQDC_RX_BYPASS_EN_SOURCE_BIT    ((u32)0x00000800)
#define RIU_IQDC_RX_CONTROL_IQDC_RX_BYPASS_EN_SOURCE_POS    11
#define RIU_IQDC_RX_CONTROL_IQDC_RX_BYPASS_TYPE_MASK    ((u32)0x00000600)
#define RIU_IQDC_RX_CONTROL_IQDC_RX_BYPASS_TYPE_LSB    9
#define RIU_IQDC_RX_CONTROL_IQDC_RX_BYPASS_TYPE_WIDTH    ((u32)0x00000002)
#define RIU_IQDC_RX_CONTROL_IQDC_RX_BYPASS_MODE_BIT    ((u32)0x00000100)
#define RIU_IQDC_RX_CONTROL_IQDC_RX_BYPASS_MODE_POS    8
#define RIU_IQDC_RX_CONTROL_IQDC_RX_START_BIT    ((u32)0x00000001)
#define RIU_IQDC_RX_CONTROL_IQDC_RX_START_POS    0

#define RIU_IQDC_RX_CONTROL_IQDC_RX_FIR_SCALE_RST    0x0
#define RIU_IQDC_RX_CONTROL_IQDC_RX_LENGTH_RST    0x0
#define RIU_IQDC_RX_CONTROL_IQDC_RX_BYPASS_EN_SOURCE_RST    0x1
#define RIU_IQDC_RX_CONTROL_IQDC_RX_BYPASS_TYPE_RST    0x0
#define RIU_IQDC_RX_CONTROL_IQDC_RX_BYPASS_MODE_RST    0x0
#define RIU_IQDC_RX_CONTROL_IQDC_RX_START_RST    0x0

static inline void riu_iqdc_rx_control_pack(struct cl_chip *chip, u8 iqdc_rx_fir_scale, u8 iqdc_rx_length, u8 iqdc_rx_bypass_en_source, u8 iqdc_rx_bypass_type, u8 iqdc_rx_bypass_mode, u8 iqdc_rx_start)
{
	ASSERT_ERR_CHIP((((u32)iqdc_rx_fir_scale << 14) & ~((u32)0x0000C000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx_length << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx_bypass_en_source << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx_bypass_type << 9) & ~((u32)0x00000600)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx_bypass_mode << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_rx_start << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_CONTROL_ADDR, ((u32)iqdc_rx_fir_scale << 14) | ((u32)iqdc_rx_length << 12) | ((u32)iqdc_rx_bypass_en_source << 11) | ((u32)iqdc_rx_bypass_type << 9) | ((u32)iqdc_rx_bypass_mode << 8) | ((u32)iqdc_rx_start << 0));
}

static inline void riu_iqdc_rx_control_unpack(struct cl_chip *chip, u8 *iqdc_rx_fir_scale, u8 *iqdc_rx_length, u8 *iqdc_rx_bypass_en_source, u8 *iqdc_rx_bypass_type, u8 *iqdc_rx_bypass_mode, u8 *iqdc_rx_start)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_CONTROL_ADDR);

	*iqdc_rx_fir_scale = (local_val & ((u32)0x0000C000)) >> 14;
	*iqdc_rx_length = (local_val & ((u32)0x00001000)) >> 12;
	*iqdc_rx_bypass_en_source = (local_val & ((u32)0x00000800)) >> 11;
	*iqdc_rx_bypass_type = (local_val & ((u32)0x00000600)) >> 9;
	*iqdc_rx_bypass_mode = (local_val & ((u32)0x00000100)) >> 8;
	*iqdc_rx_start = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_iqdc_rx_control_iqdc_rx_fir_scale_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x0000C000)) >> 14);
}

static inline void riu_iqdc_rx_control_iqdc_rx_fir_scale_setf(struct cl_chip *chip, u8 iqdcrxfirscale)
{
	ASSERT_ERR_CHIP((((u32)iqdcrxfirscale << 14) & ~((u32)0x0000C000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_CONTROL_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_CONTROL_ADDR) & ~((u32)0x0000C000)) | ((u32)iqdcrxfirscale << 14));
}

static inline u8 riu_iqdc_rx_control_iqdc_rx_length_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void riu_iqdc_rx_control_iqdc_rx_length_setf(struct cl_chip *chip, u8 iqdcrxlength)
{
	ASSERT_ERR_CHIP((((u32)iqdcrxlength << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_CONTROL_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_CONTROL_ADDR) & ~((u32)0x00001000)) | ((u32)iqdcrxlength << 12));
}

static inline u8 riu_iqdc_rx_control_iqdc_rx_bypass_en_source_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void riu_iqdc_rx_control_iqdc_rx_bypass_en_source_setf(struct cl_chip *chip, u8 iqdcrxbypassensource)
{
	ASSERT_ERR_CHIP((((u32)iqdcrxbypassensource << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_CONTROL_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_CONTROL_ADDR) & ~((u32)0x00000800)) | ((u32)iqdcrxbypassensource << 11));
}

static inline u8 riu_iqdc_rx_control_iqdc_rx_bypass_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x00000600)) >> 9);
}

static inline void riu_iqdc_rx_control_iqdc_rx_bypass_type_setf(struct cl_chip *chip, u8 iqdcrxbypasstype)
{
	ASSERT_ERR_CHIP((((u32)iqdcrxbypasstype << 9) & ~((u32)0x00000600)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_CONTROL_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_CONTROL_ADDR) & ~((u32)0x00000600)) | ((u32)iqdcrxbypasstype << 9));
}

static inline u8 riu_iqdc_rx_control_iqdc_rx_bypass_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_RX_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void riu_iqdc_rx_control_iqdc_rx_bypass_mode_setf(struct cl_chip *chip, u8 iqdcrxbypassmode)
{
	ASSERT_ERR_CHIP((((u32)iqdcrxbypassmode << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_CONTROL_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_CONTROL_ADDR) & ~((u32)0x00000100)) | ((u32)iqdcrxbypassmode << 8));
}

static inline void riu_iqdc_rx_control_iqdc_rx_start_setf(struct cl_chip *chip, u8 iqdcrxstart)
{
	ASSERT_ERR_CHIP((((u32)iqdcrxstart << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_IQDC_RX_CONTROL_ADDR, (cl_reg_read(chip, RIU_IQDC_RX_CONTROL_ADDR) & ~((u32)0x00000001)) | ((u32)iqdcrxstart << 0));
}

/**
 * @brief IQDC_21_TX_CONTROL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:14 iqdc_tx_fir_scale         0x0
 *    11    iqdc_tx_location          0
 *    10:09 iqdc_tx_bypass_type       0x3
 *    08    iqdc_tx_bypass_mode       1
 *    00    iqdc_tx_start             0
 * </pre>
 */
#define RIU_IQDC_21_TX_CONTROL_ADDR        (REG_RIU_BASE_ADDR + 0x000007F8)
#define RIU_IQDC_21_TX_CONTROL_OFFSET      0x000007F8
#define RIU_IQDC_21_TX_CONTROL_INDEX       0x000001FE
#define RIU_IQDC_21_TX_CONTROL_RESET       0x00000700

static inline u32 riu_iqdc_21_tx_control_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_21_TX_CONTROL_ADDR);
}

static inline void riu_iqdc_21_tx_control_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_21_TX_CONTROL_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_FIR_SCALE_MASK    ((u32)0x0000C000)
#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_FIR_SCALE_LSB    14
#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_FIR_SCALE_WIDTH    ((u32)0x00000002)
#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_LOCATION_BIT    ((u32)0x00000800)
#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_LOCATION_POS    11
#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_BYPASS_TYPE_MASK    ((u32)0x00000600)
#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_BYPASS_TYPE_LSB    9
#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_BYPASS_TYPE_WIDTH    ((u32)0x00000002)
#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_BYPASS_MODE_BIT    ((u32)0x00000100)
#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_BYPASS_MODE_POS    8
#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_START_BIT    ((u32)0x00000001)
#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_START_POS    0

#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_FIR_SCALE_RST    0x0
#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_LOCATION_RST    0x0
#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_BYPASS_TYPE_RST    0x3
#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_BYPASS_MODE_RST    0x1
#define RIU_IQDC_21_TX_CONTROL_IQDC_TX_START_RST    0x0

static inline void riu_iqdc_21_tx_control_pack(struct cl_chip *chip, u8 iqdc_tx_fir_scale, u8 iqdc_tx_location, u8 iqdc_tx_bypass_type, u8 iqdc_tx_bypass_mode, u8 iqdc_tx_start)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx_fir_scale << 14) & ~((u32)0x0000C000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx_location << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx_bypass_type << 9) & ~((u32)0x00000600)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx_bypass_mode << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx_start << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_IQDC_21_TX_CONTROL_ADDR, ((u32)iqdc_tx_fir_scale << 14) | ((u32)iqdc_tx_location << 11) | ((u32)iqdc_tx_bypass_type << 9) | ((u32)iqdc_tx_bypass_mode << 8) | ((u32)iqdc_tx_start << 0));
}

static inline void riu_iqdc_21_tx_control_unpack(struct cl_chip *chip, u8 *iqdc_tx_fir_scale, u8 *iqdc_tx_location, u8 *iqdc_tx_bypass_type, u8 *iqdc_tx_bypass_mode, u8 *iqdc_tx_start)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_21_TX_CONTROL_ADDR);

	*iqdc_tx_fir_scale = (local_val & ((u32)0x0000C000)) >> 14;
	*iqdc_tx_location = (local_val & ((u32)0x00000800)) >> 11;
	*iqdc_tx_bypass_type = (local_val & ((u32)0x00000600)) >> 9;
	*iqdc_tx_bypass_mode = (local_val & ((u32)0x00000100)) >> 8;
	*iqdc_tx_start = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_iqdc_21_tx_control_iqdc_tx_fir_scale_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_21_TX_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x0000C000)) >> 14);
}

static inline void riu_iqdc_21_tx_control_iqdc_tx_fir_scale_setf(struct cl_chip *chip, u8 iqdctxfirscale)
{
	ASSERT_ERR_CHIP((((u32)iqdctxfirscale << 14) & ~((u32)0x0000C000)) == 0);
	cl_reg_write(chip, RIU_IQDC_21_TX_CONTROL_ADDR, (cl_reg_read(chip, RIU_IQDC_21_TX_CONTROL_ADDR) & ~((u32)0x0000C000)) | ((u32)iqdctxfirscale << 14));
}

static inline u8 riu_iqdc_21_tx_control_iqdc_tx_location_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_21_TX_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void riu_iqdc_21_tx_control_iqdc_tx_location_setf(struct cl_chip *chip, u8 iqdctxlocation)
{
	ASSERT_ERR_CHIP((((u32)iqdctxlocation << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RIU_IQDC_21_TX_CONTROL_ADDR, (cl_reg_read(chip, RIU_IQDC_21_TX_CONTROL_ADDR) & ~((u32)0x00000800)) | ((u32)iqdctxlocation << 11));
}

static inline u8 riu_iqdc_21_tx_control_iqdc_tx_bypass_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_21_TX_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x00000600)) >> 9);
}

static inline void riu_iqdc_21_tx_control_iqdc_tx_bypass_type_setf(struct cl_chip *chip, u8 iqdctxbypasstype)
{
	ASSERT_ERR_CHIP((((u32)iqdctxbypasstype << 9) & ~((u32)0x00000600)) == 0);
	cl_reg_write(chip, RIU_IQDC_21_TX_CONTROL_ADDR, (cl_reg_read(chip, RIU_IQDC_21_TX_CONTROL_ADDR) & ~((u32)0x00000600)) | ((u32)iqdctxbypasstype << 9));
}

static inline u8 riu_iqdc_21_tx_control_iqdc_tx_bypass_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_21_TX_CONTROL_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void riu_iqdc_21_tx_control_iqdc_tx_bypass_mode_setf(struct cl_chip *chip, u8 iqdctxbypassmode)
{
	ASSERT_ERR_CHIP((((u32)iqdctxbypassmode << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_IQDC_21_TX_CONTROL_ADDR, (cl_reg_read(chip, RIU_IQDC_21_TX_CONTROL_ADDR) & ~((u32)0x00000100)) | ((u32)iqdctxbypassmode << 8));
}

static inline void riu_iqdc_21_tx_control_iqdc_tx_start_setf(struct cl_chip *chip, u8 iqdctxstart)
{
	ASSERT_ERR_CHIP((((u32)iqdctxstart << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_IQDC_21_TX_CONTROL_ADDR, (cl_reg_read(chip, RIU_IQDC_21_TX_CONTROL_ADDR) & ~((u32)0x00000001)) | ((u32)iqdctxstart << 0));
}

/**
 * @brief ADC_LB_MUX register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    13    lb_i_mode5                0
 *    12    lb_i_mode4                0
 *    11    lb_i_mode3                0
 *    10    lb_i_mode2                0
 *    09    lb_i_mode1                0
 *    08    lb_i_mode0                0
 *    00    lb_cyclic_mode            0
 * </pre>
 */
#define RIU_ADC_LB_MUX_ADDR        (REG_RIU_BASE_ADDR + 0x000007FC)
#define RIU_ADC_LB_MUX_OFFSET      0x000007FC
#define RIU_ADC_LB_MUX_INDEX       0x000001FF
#define RIU_ADC_LB_MUX_RESET       0x00000000

static inline u32 riu_adc_lb_mux_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_ADC_LB_MUX_ADDR);
}

static inline void riu_adc_lb_mux_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_ADC_LB_MUX_ADDR, value);
}

/* Field definitions */
#define RIU_ADC_LB_MUX_LB_I_MODE_5_BIT      ((u32)0x00002000)
#define RIU_ADC_LB_MUX_LB_I_MODE_5_POS      13
#define RIU_ADC_LB_MUX_LB_I_MODE_4_BIT      ((u32)0x00001000)
#define RIU_ADC_LB_MUX_LB_I_MODE_4_POS      12
#define RIU_ADC_LB_MUX_LB_I_MODE_3_BIT      ((u32)0x00000800)
#define RIU_ADC_LB_MUX_LB_I_MODE_3_POS      11
#define RIU_ADC_LB_MUX_LB_I_MODE_2_BIT      ((u32)0x00000400)
#define RIU_ADC_LB_MUX_LB_I_MODE_2_POS      10
#define RIU_ADC_LB_MUX_LB_I_MODE_1_BIT      ((u32)0x00000200)
#define RIU_ADC_LB_MUX_LB_I_MODE_1_POS      9
#define RIU_ADC_LB_MUX_LB_I_MODE_0_BIT      ((u32)0x00000100)
#define RIU_ADC_LB_MUX_LB_I_MODE_0_POS      8
#define RIU_ADC_LB_MUX_LB_CYCLIC_MODE_BIT    ((u32)0x00000001)
#define RIU_ADC_LB_MUX_LB_CYCLIC_MODE_POS    0

#define RIU_ADC_LB_MUX_LB_I_MODE_5_RST      0x0
#define RIU_ADC_LB_MUX_LB_I_MODE_4_RST      0x0
#define RIU_ADC_LB_MUX_LB_I_MODE_3_RST      0x0
#define RIU_ADC_LB_MUX_LB_I_MODE_2_RST      0x0
#define RIU_ADC_LB_MUX_LB_I_MODE_1_RST      0x0
#define RIU_ADC_LB_MUX_LB_I_MODE_0_RST      0x0
#define RIU_ADC_LB_MUX_LB_CYCLIC_MODE_RST    0x0

static inline void riu_adc_lb_mux_pack(struct cl_chip *chip, u8 lb_i_mode5, u8 lb_i_mode4, u8 lb_i_mode3, u8 lb_i_mode2, u8 lb_i_mode1, u8 lb_i_mode0, u8 lb_cyclic_mode)
{
	ASSERT_ERR_CHIP((((u32)lb_i_mode5 << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)lb_i_mode4 << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)lb_i_mode3 << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)lb_i_mode2 << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)lb_i_mode1 << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)lb_i_mode0 << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)lb_cyclic_mode << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_ADC_LB_MUX_ADDR, ((u32)lb_i_mode5 << 13) | ((u32)lb_i_mode4 << 12) | ((u32)lb_i_mode3 << 11) | ((u32)lb_i_mode2 << 10) | ((u32)lb_i_mode1 << 9) | ((u32)lb_i_mode0 << 8) | ((u32)lb_cyclic_mode << 0));
}

static inline void riu_adc_lb_mux_unpack(struct cl_chip *chip, u8 *lb_i_mode5, u8 *lb_i_mode4, u8 *lb_i_mode3, u8 *lb_i_mode2, u8 *lb_i_mode1, u8 *lb_i_mode0, u8 *lb_cyclic_mode)
{
	u32 local_val = cl_reg_read(chip, RIU_ADC_LB_MUX_ADDR);

	*lb_i_mode5 = (local_val & ((u32)0x00002000)) >> 13;
	*lb_i_mode4 = (local_val & ((u32)0x00001000)) >> 12;
	*lb_i_mode3 = (local_val & ((u32)0x00000800)) >> 11;
	*lb_i_mode2 = (local_val & ((u32)0x00000400)) >> 10;
	*lb_i_mode1 = (local_val & ((u32)0x00000200)) >> 9;
	*lb_i_mode0 = (local_val & ((u32)0x00000100)) >> 8;
	*lb_cyclic_mode = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_adc_lb_mux_lb_i_mode_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_ADC_LB_MUX_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_adc_lb_mux_lb_i_mode_5_setf(struct cl_chip *chip, u8 lbimode5)
{
	ASSERT_ERR_CHIP((((u32)lbimode5 << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_ADC_LB_MUX_ADDR, (cl_reg_read(chip, RIU_ADC_LB_MUX_ADDR) & ~((u32)0x00002000)) | ((u32)lbimode5 << 13));
}

static inline u8 riu_adc_lb_mux_lb_i_mode_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_ADC_LB_MUX_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void riu_adc_lb_mux_lb_i_mode_4_setf(struct cl_chip *chip, u8 lbimode4)
{
	ASSERT_ERR_CHIP((((u32)lbimode4 << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RIU_ADC_LB_MUX_ADDR, (cl_reg_read(chip, RIU_ADC_LB_MUX_ADDR) & ~((u32)0x00001000)) | ((u32)lbimode4 << 12));
}

static inline u8 riu_adc_lb_mux_lb_i_mode_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_ADC_LB_MUX_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void riu_adc_lb_mux_lb_i_mode_3_setf(struct cl_chip *chip, u8 lbimode3)
{
	ASSERT_ERR_CHIP((((u32)lbimode3 << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RIU_ADC_LB_MUX_ADDR, (cl_reg_read(chip, RIU_ADC_LB_MUX_ADDR) & ~((u32)0x00000800)) | ((u32)lbimode3 << 11));
}

static inline u8 riu_adc_lb_mux_lb_i_mode_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_ADC_LB_MUX_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void riu_adc_lb_mux_lb_i_mode_2_setf(struct cl_chip *chip, u8 lbimode2)
{
	ASSERT_ERR_CHIP((((u32)lbimode2 << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RIU_ADC_LB_MUX_ADDR, (cl_reg_read(chip, RIU_ADC_LB_MUX_ADDR) & ~((u32)0x00000400)) | ((u32)lbimode2 << 10));
}

static inline u8 riu_adc_lb_mux_lb_i_mode_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_ADC_LB_MUX_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void riu_adc_lb_mux_lb_i_mode_1_setf(struct cl_chip *chip, u8 lbimode1)
{
	ASSERT_ERR_CHIP((((u32)lbimode1 << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RIU_ADC_LB_MUX_ADDR, (cl_reg_read(chip, RIU_ADC_LB_MUX_ADDR) & ~((u32)0x00000200)) | ((u32)lbimode1 << 9));
}

static inline u8 riu_adc_lb_mux_lb_i_mode_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_ADC_LB_MUX_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void riu_adc_lb_mux_lb_i_mode_0_setf(struct cl_chip *chip, u8 lbimode0)
{
	ASSERT_ERR_CHIP((((u32)lbimode0 << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_ADC_LB_MUX_ADDR, (cl_reg_read(chip, RIU_ADC_LB_MUX_ADDR) & ~((u32)0x00000100)) | ((u32)lbimode0 << 8));
}

static inline u8 riu_adc_lb_mux_lb_cyclic_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_ADC_LB_MUX_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_adc_lb_mux_lb_cyclic_mode_setf(struct cl_chip *chip, u8 lbcyclicmode)
{
	ASSERT_ERR_CHIP((((u32)lbcyclicmode << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_ADC_LB_MUX_ADDR, (cl_reg_read(chip, RIU_ADC_LB_MUX_ADDR) & ~((u32)0x00000001)) | ((u32)lbcyclicmode << 0));
}

/**
 * @brief RADAR_PULSE_FIFO register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RADAR_PULSE_FIFO          0x0
 * </pre>
 */
#define RIU_RADAR_PULSE_FIFO_ADDR        (REG_RIU_BASE_ADDR + 0x00000800)
#define RIU_RADAR_PULSE_FIFO_OFFSET      0x00000800
#define RIU_RADAR_PULSE_FIFO_INDEX       0x00000200
#define RIU_RADAR_PULSE_FIFO_RESET       0x00000000

static inline u32 riu_radar_pulse_fifo_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADAR_PULSE_FIFO_ADDR);
}

/* Field definitions */
#define RIU_RADAR_PULSE_FIFO_RADAR_PULSE_FIFO_MASK    ((u32)0xFFFFFFFF)
#define RIU_RADAR_PULSE_FIFO_RADAR_PULSE_FIFO_LSB    0
#define RIU_RADAR_PULSE_FIFO_RADAR_PULSE_FIFO_WIDTH    ((u32)0x00000020)

#define RIU_RADAR_PULSE_FIFO_RADAR_PULSE_FIFO_RST    0x0

static inline u32 riu_radar_pulse_fifo_radar_pulse_fifo_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_PULSE_FIFO_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief RADAR_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    11    SEC_PATH_EST_ANT_MRC_FLOW 1
 *    10    SEC_PATH_EST_MRC_FLOW_EN  1
 *    09    ANT_NUM_TO_PROC           0
 *    08    MRC_EN                    0
 *    07:05 SEC_ANT_SEL               0x0
 *    04:02 MAIN_ANT_SEL              0x0
 *    01:00 RADAR_SAMPLE_RATE         0x0
 * </pre>
 */
#define RIU_RADAR_CTRL_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000804)
#define RIU_RADAR_CTRL_0_OFFSET      0x00000804
#define RIU_RADAR_CTRL_0_INDEX       0x00000201
#define RIU_RADAR_CTRL_0_RESET       0x00000C00

static inline u32 riu_radar_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADAR_CTRL_0_ADDR);
}

static inline void riu_radar_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RADAR_CTRL_0_ADDR, value);
}

/* Field definitions */
#define RIU_RADAR_CTRL_0_SEC_PATH_EST_ANT_MRC_FLOW_BIT    ((u32)0x00000800)
#define RIU_RADAR_CTRL_0_SEC_PATH_EST_ANT_MRC_FLOW_POS    11
#define RIU_RADAR_CTRL_0_SEC_PATH_EST_MRC_FLOW_EN_BIT    ((u32)0x00000400)
#define RIU_RADAR_CTRL_0_SEC_PATH_EST_MRC_FLOW_EN_POS    10
#define RIU_RADAR_CTRL_0_ANT_NUM_TO_PROC_BIT    ((u32)0x00000200)
#define RIU_RADAR_CTRL_0_ANT_NUM_TO_PROC_POS    9
#define RIU_RADAR_CTRL_0_MRC_EN_BIT         ((u32)0x00000100)
#define RIU_RADAR_CTRL_0_MRC_EN_POS         8
#define RIU_RADAR_CTRL_0_SEC_ANT_SEL_MASK    ((u32)0x000000E0)
#define RIU_RADAR_CTRL_0_SEC_ANT_SEL_LSB    5
#define RIU_RADAR_CTRL_0_SEC_ANT_SEL_WIDTH    ((u32)0x00000003)
#define RIU_RADAR_CTRL_0_MAIN_ANT_SEL_MASK    ((u32)0x0000001C)
#define RIU_RADAR_CTRL_0_MAIN_ANT_SEL_LSB    2
#define RIU_RADAR_CTRL_0_MAIN_ANT_SEL_WIDTH    ((u32)0x00000003)
#define RIU_RADAR_CTRL_0_RADAR_SAMPLE_RATE_MASK    ((u32)0x00000003)
#define RIU_RADAR_CTRL_0_RADAR_SAMPLE_RATE_LSB    0
#define RIU_RADAR_CTRL_0_RADAR_SAMPLE_RATE_WIDTH    ((u32)0x00000002)

#define RIU_RADAR_CTRL_0_SEC_PATH_EST_ANT_MRC_FLOW_RST    0x1
#define RIU_RADAR_CTRL_0_SEC_PATH_EST_MRC_FLOW_EN_RST    0x1
#define RIU_RADAR_CTRL_0_ANT_NUM_TO_PROC_RST    0x0
#define RIU_RADAR_CTRL_0_MRC_EN_RST         0x0
#define RIU_RADAR_CTRL_0_SEC_ANT_SEL_RST    0x0
#define RIU_RADAR_CTRL_0_MAIN_ANT_SEL_RST    0x0
#define RIU_RADAR_CTRL_0_RADAR_SAMPLE_RATE_RST    0x0

static inline void riu_radar_ctrl_0_pack(struct cl_chip *chip, u8 sec_path_est_ant_mrc_flow, u8 sec_path_est_mrc_flow_en, u8 ant_num_to_proc, u8 mrc_en, u8 sec_ant_sel, u8 main_ant_sel, u8 radar_sample_rate)
{
	ASSERT_ERR_CHIP((((u32)sec_path_est_ant_mrc_flow << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)sec_path_est_mrc_flow_en << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)ant_num_to_proc << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)mrc_en << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)sec_ant_sel << 5) & ~((u32)0x000000E0)) == 0);
	ASSERT_ERR_CHIP((((u32)main_ant_sel << 2) & ~((u32)0x0000001C)) == 0);
	ASSERT_ERR_CHIP((((u32)radar_sample_rate << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_0_ADDR, ((u32)sec_path_est_ant_mrc_flow << 11) | ((u32)sec_path_est_mrc_flow_en << 10) | ((u32)ant_num_to_proc << 9) | ((u32)mrc_en << 8) | ((u32)sec_ant_sel << 5) | ((u32)main_ant_sel << 2) | ((u32)radar_sample_rate << 0));
}

static inline void riu_radar_ctrl_0_unpack(struct cl_chip *chip, u8 *sec_path_est_ant_mrc_flow, u8 *sec_path_est_mrc_flow_en, u8 *ant_num_to_proc, u8 *mrc_en, u8 *sec_ant_sel, u8 *main_ant_sel, u8 *radar_sample_rate)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_0_ADDR);

	*sec_path_est_ant_mrc_flow = (local_val & ((u32)0x00000800)) >> 11;
	*sec_path_est_mrc_flow_en = (local_val & ((u32)0x00000400)) >> 10;
	*ant_num_to_proc = (local_val & ((u32)0x00000200)) >> 9;
	*mrc_en = (local_val & ((u32)0x00000100)) >> 8;
	*sec_ant_sel = (local_val & ((u32)0x000000E0)) >> 5;
	*main_ant_sel = (local_val & ((u32)0x0000001C)) >> 2;
	*radar_sample_rate = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 riu_radar_ctrl_0_sec_path_est_ant_mrc_flow_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void riu_radar_ctrl_0_sec_path_est_ant_mrc_flow_setf(struct cl_chip *chip, u8 secpathestantmrcflow)
{
	ASSERT_ERR_CHIP((((u32)secpathestantmrcflow << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_0_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_0_ADDR) & ~((u32)0x00000800)) | ((u32)secpathestantmrcflow << 11));
}

static inline u8 riu_radar_ctrl_0_sec_path_est_mrc_flow_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void riu_radar_ctrl_0_sec_path_est_mrc_flow_en_setf(struct cl_chip *chip, u8 secpathestmrcflowen)
{
	ASSERT_ERR_CHIP((((u32)secpathestmrcflowen << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_0_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_0_ADDR) & ~((u32)0x00000400)) | ((u32)secpathestmrcflowen << 10));
}

static inline u8 riu_radar_ctrl_0_ant_num_to_proc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void riu_radar_ctrl_0_ant_num_to_proc_setf(struct cl_chip *chip, u8 antnumtoproc)
{
	ASSERT_ERR_CHIP((((u32)antnumtoproc << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_0_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_0_ADDR) & ~((u32)0x00000200)) | ((u32)antnumtoproc << 9));
}

static inline u8 riu_radar_ctrl_0_mrc_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void riu_radar_ctrl_0_mrc_en_setf(struct cl_chip *chip, u8 mrcen)
{
	ASSERT_ERR_CHIP((((u32)mrcen << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_0_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_0_ADDR) & ~((u32)0x00000100)) | ((u32)mrcen << 8));
}

static inline u8 riu_radar_ctrl_0_sec_ant_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x000000E0)) >> 5);
}

static inline void riu_radar_ctrl_0_sec_ant_sel_setf(struct cl_chip *chip, u8 secantsel)
{
	ASSERT_ERR_CHIP((((u32)secantsel << 5) & ~((u32)0x000000E0)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_0_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_0_ADDR) & ~((u32)0x000000E0)) | ((u32)secantsel << 5));
}

static inline u8 riu_radar_ctrl_0_main_ant_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000001C)) >> 2);
}

static inline void riu_radar_ctrl_0_main_ant_sel_setf(struct cl_chip *chip, u8 mainantsel)
{
	ASSERT_ERR_CHIP((((u32)mainantsel << 2) & ~((u32)0x0000001C)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_0_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_0_ADDR) & ~((u32)0x0000001C)) | ((u32)mainantsel << 2));
}

static inline u8 riu_radar_ctrl_0_radar_sample_rate_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void riu_radar_ctrl_0_radar_sample_rate_setf(struct cl_chip *chip, u8 radarsamplerate)
{
	ASSERT_ERR_CHIP((((u32)radarsamplerate << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_0_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_0_ADDR) & ~((u32)0x00000003)) | ((u32)radarsamplerate << 0));
}

/**
 * @brief RADAR_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:16 GAIN_SEC_PATH_EST_MRC_EN  0x20
 *    15:08 GAIN_SEC_ANT              0x20
 *    07:00 GAIN_MAIN_ANT             0x20
 * </pre>
 */
#define RIU_RADAR_CTRL_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000808)
#define RIU_RADAR_CTRL_1_OFFSET      0x00000808
#define RIU_RADAR_CTRL_1_INDEX       0x00000202
#define RIU_RADAR_CTRL_1_RESET       0x00202020

static inline u32 riu_radar_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADAR_CTRL_1_ADDR);
}

static inline void riu_radar_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RADAR_CTRL_1_ADDR, value);
}

/* Field definitions */
#define RIU_RADAR_CTRL_1_GAIN_SEC_PATH_EST_MRC_EN_MASK    ((u32)0x00FF0000)
#define RIU_RADAR_CTRL_1_GAIN_SEC_PATH_EST_MRC_EN_LSB    16
#define RIU_RADAR_CTRL_1_GAIN_SEC_PATH_EST_MRC_EN_WIDTH    ((u32)0x00000008)
#define RIU_RADAR_CTRL_1_GAIN_SEC_ANT_MASK    ((u32)0x0000FF00)
#define RIU_RADAR_CTRL_1_GAIN_SEC_ANT_LSB    8
#define RIU_RADAR_CTRL_1_GAIN_SEC_ANT_WIDTH    ((u32)0x00000008)
#define RIU_RADAR_CTRL_1_GAIN_MAIN_ANT_MASK    ((u32)0x000000FF)
#define RIU_RADAR_CTRL_1_GAIN_MAIN_ANT_LSB    0
#define RIU_RADAR_CTRL_1_GAIN_MAIN_ANT_WIDTH    ((u32)0x00000008)

#define RIU_RADAR_CTRL_1_GAIN_SEC_PATH_EST_MRC_EN_RST    0x20
#define RIU_RADAR_CTRL_1_GAIN_SEC_ANT_RST    0x20
#define RIU_RADAR_CTRL_1_GAIN_MAIN_ANT_RST    0x20

static inline void riu_radar_ctrl_1_pack(struct cl_chip *chip, u8 gain_sec_path_est_mrc_en, u8 gain_sec_ant, u8 gain_main_ant)
{
	ASSERT_ERR_CHIP((((u32)gain_sec_path_est_mrc_en << 16) & ~((u32)0x00FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)gain_sec_ant << 8) & ~((u32)0x0000FF00)) == 0);
	ASSERT_ERR_CHIP((((u32)gain_main_ant << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_1_ADDR, ((u32)gain_sec_path_est_mrc_en << 16) | ((u32)gain_sec_ant << 8) | ((u32)gain_main_ant << 0));
}

static inline void riu_radar_ctrl_1_unpack(struct cl_chip *chip, u8 *gain_sec_path_est_mrc_en, u8 *gain_sec_ant, u8 *gain_main_ant)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_1_ADDR);

	*gain_sec_path_est_mrc_en = (local_val & ((u32)0x00FF0000)) >> 16;
	*gain_sec_ant = (local_val & ((u32)0x0000FF00)) >> 8;
	*gain_main_ant = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_radar_ctrl_1_gain_sec_path_est_mrc_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline void riu_radar_ctrl_1_gain_sec_path_est_mrc_en_setf(struct cl_chip *chip, u8 gainsecpathestmrcen)
{
	ASSERT_ERR_CHIP((((u32)gainsecpathestmrcen << 16) & ~((u32)0x00FF0000)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_1_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_1_ADDR) & ~((u32)0x00FF0000)) | ((u32)gainsecpathestmrcen << 16));
}

static inline u8 riu_radar_ctrl_1_gain_sec_ant_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline void riu_radar_ctrl_1_gain_sec_ant_setf(struct cl_chip *chip, u8 gainsecant)
{
	ASSERT_ERR_CHIP((((u32)gainsecant << 8) & ~((u32)0x0000FF00)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_1_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_1_ADDR) & ~((u32)0x0000FF00)) | ((u32)gainsecant << 8));
}

static inline u8 riu_radar_ctrl_1_gain_main_ant_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_radar_ctrl_1_gain_main_ant_setf(struct cl_chip *chip, u8 gainmainant)
{
	ASSERT_ERR_CHIP((((u32)gainmainant << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_1_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_1_ADDR) & ~((u32)0x000000FF)) | ((u32)gainmainant << 0));
}

/**
 * @brief RADAR_CTRL_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:20 N_CP2_PARAM               0x12
 *    17:10 N_CP1_PARAM               0x8
 *    07:00 N_CP0_PARAM               0x4
 * </pre>
 */
#define RIU_RADAR_CTRL_2_ADDR        (REG_RIU_BASE_ADDR + 0x0000080C)
#define RIU_RADAR_CTRL_2_OFFSET      0x0000080C
#define RIU_RADAR_CTRL_2_INDEX       0x00000203
#define RIU_RADAR_CTRL_2_RESET       0x01202004

static inline u32 riu_radar_ctrl_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADAR_CTRL_2_ADDR);
}

static inline void riu_radar_ctrl_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RADAR_CTRL_2_ADDR, value);
}

/* Field definitions */
#define RIU_RADAR_CTRL_2_N_CP_2_PARAM_MASK    ((u32)0x0FF00000)
#define RIU_RADAR_CTRL_2_N_CP_2_PARAM_LSB    20
#define RIU_RADAR_CTRL_2_N_CP_2_PARAM_WIDTH    ((u32)0x00000008)
#define RIU_RADAR_CTRL_2_N_CP_1_PARAM_MASK    ((u32)0x0003FC00)
#define RIU_RADAR_CTRL_2_N_CP_1_PARAM_LSB    10
#define RIU_RADAR_CTRL_2_N_CP_1_PARAM_WIDTH    ((u32)0x00000008)
#define RIU_RADAR_CTRL_2_N_CP_0_PARAM_MASK    ((u32)0x000000FF)
#define RIU_RADAR_CTRL_2_N_CP_0_PARAM_LSB    0
#define RIU_RADAR_CTRL_2_N_CP_0_PARAM_WIDTH    ((u32)0x00000008)

#define RIU_RADAR_CTRL_2_N_CP_2_PARAM_RST    0x12
#define RIU_RADAR_CTRL_2_N_CP_1_PARAM_RST    0x8
#define RIU_RADAR_CTRL_2_N_CP_0_PARAM_RST    0x4

static inline void riu_radar_ctrl_2_pack(struct cl_chip *chip, u8 n_cp2_param, u8 n_cp1_param, u8 n_cp0_param)
{
	ASSERT_ERR_CHIP((((u32)n_cp2_param << 20) & ~((u32)0x0FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)n_cp1_param << 10) & ~((u32)0x0003FC00)) == 0);
	ASSERT_ERR_CHIP((((u32)n_cp0_param << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_2_ADDR, ((u32)n_cp2_param << 20) | ((u32)n_cp1_param << 10) | ((u32)n_cp0_param << 0));
}

static inline void riu_radar_ctrl_2_unpack(struct cl_chip *chip, u8 *n_cp2_param, u8 *n_cp1_param, u8 *n_cp0_param)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_2_ADDR);

	*n_cp2_param = (local_val & ((u32)0x0FF00000)) >> 20;
	*n_cp1_param = (local_val & ((u32)0x0003FC00)) >> 10;
	*n_cp0_param = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_radar_ctrl_2_n_cp_2_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x0FF00000)) >> 20);
}

static inline void riu_radar_ctrl_2_n_cp_2_param_setf(struct cl_chip *chip, u8 ncp2param)
{
	ASSERT_ERR_CHIP((((u32)ncp2param << 20) & ~((u32)0x0FF00000)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_2_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_2_ADDR) & ~((u32)0x0FF00000)) | ((u32)ncp2param << 20));
}

static inline u8 riu_radar_ctrl_2_n_cp_1_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x0003FC00)) >> 10);
}

static inline void riu_radar_ctrl_2_n_cp_1_param_setf(struct cl_chip *chip, u8 ncp1param)
{
	ASSERT_ERR_CHIP((((u32)ncp1param << 10) & ~((u32)0x0003FC00)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_2_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_2_ADDR) & ~((u32)0x0003FC00)) | ((u32)ncp1param << 10));
}

static inline u8 riu_radar_ctrl_2_n_cp_0_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_radar_ctrl_2_n_cp_0_param_setf(struct cl_chip *chip, u8 ncp0param)
{
	ASSERT_ERR_CHIP((((u32)ncp0param << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_2_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_2_ADDR) & ~((u32)0x000000FF)) | ((u32)ncp0param << 0));
}

/**
 * @brief RADAR_CTRL_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    28:20 Two_Nplus1_CP0_PARAM      0x9
 *    17:10 N_CP4_PARAM               0x4e
 *    07:00 N_CP3_PARAM               0x26
 * </pre>
 */
#define RIU_RADAR_CTRL_3_ADDR        (REG_RIU_BASE_ADDR + 0x00000810)
#define RIU_RADAR_CTRL_3_OFFSET      0x00000810
#define RIU_RADAR_CTRL_3_INDEX       0x00000204
#define RIU_RADAR_CTRL_3_RESET       0x00913826

static inline u32 riu_radar_ctrl_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADAR_CTRL_3_ADDR);
}

static inline void riu_radar_ctrl_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RADAR_CTRL_3_ADDR, value);
}

/* Field definitions */
#define RIU_RADAR_CTRL_3_TWO_NPLUS_1_CP_0_PARAM_MASK    ((u32)0x1FF00000)
#define RIU_RADAR_CTRL_3_TWO_NPLUS_1_CP_0_PARAM_LSB    20
#define RIU_RADAR_CTRL_3_TWO_NPLUS_1_CP_0_PARAM_WIDTH    ((u32)0x00000009)
#define RIU_RADAR_CTRL_3_N_CP_4_PARAM_MASK    ((u32)0x0003FC00)
#define RIU_RADAR_CTRL_3_N_CP_4_PARAM_LSB    10
#define RIU_RADAR_CTRL_3_N_CP_4_PARAM_WIDTH    ((u32)0x00000008)
#define RIU_RADAR_CTRL_3_N_CP_3_PARAM_MASK    ((u32)0x000000FF)
#define RIU_RADAR_CTRL_3_N_CP_3_PARAM_LSB    0
#define RIU_RADAR_CTRL_3_N_CP_3_PARAM_WIDTH    ((u32)0x00000008)

#define RIU_RADAR_CTRL_3_TWO_NPLUS_1_CP_0_PARAM_RST    0x9
#define RIU_RADAR_CTRL_3_N_CP_4_PARAM_RST    0x4e
#define RIU_RADAR_CTRL_3_N_CP_3_PARAM_RST    0x26

static inline void riu_radar_ctrl_3_pack(struct cl_chip *chip, u16 two_nplus1_cp0_param, u8 n_cp4_param, u8 n_cp3_param)
{
	ASSERT_ERR_CHIP((((u32)two_nplus1_cp0_param << 20) & ~((u32)0x1FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)n_cp4_param << 10) & ~((u32)0x0003FC00)) == 0);
	ASSERT_ERR_CHIP((((u32)n_cp3_param << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_3_ADDR, ((u32)two_nplus1_cp0_param << 20) | ((u32)n_cp4_param << 10) | ((u32)n_cp3_param << 0));
}

static inline void riu_radar_ctrl_3_unpack(struct cl_chip *chip, u16 *two_nplus1_cp0_param, u8 *n_cp4_param, u8 *n_cp3_param)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_3_ADDR);

	*two_nplus1_cp0_param = (local_val & ((u32)0x1FF00000)) >> 20;
	*n_cp4_param = (local_val & ((u32)0x0003FC00)) >> 10;
	*n_cp3_param = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u16 riu_radar_ctrl_3_two_nplus_1_cp_0_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_3_ADDR);

	return (u16)((local_val & ((u32)0x1FF00000)) >> 20);
}

static inline void riu_radar_ctrl_3_two_nplus_1_cp_0_param_setf(struct cl_chip *chip, u16 twonplus1cp0param)
{
	ASSERT_ERR_CHIP((((u32)twonplus1cp0param << 20) & ~((u32)0x1FF00000)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_3_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_3_ADDR) & ~((u32)0x1FF00000)) | ((u32)twonplus1cp0param << 20));
}

static inline u8 riu_radar_ctrl_3_n_cp_4_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x0003FC00)) >> 10);
}

static inline void riu_radar_ctrl_3_n_cp_4_param_setf(struct cl_chip *chip, u8 ncp4param)
{
	ASSERT_ERR_CHIP((((u32)ncp4param << 10) & ~((u32)0x0003FC00)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_3_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_3_ADDR) & ~((u32)0x0003FC00)) | ((u32)ncp4param << 10));
}

static inline u8 riu_radar_ctrl_3_n_cp_3_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void riu_radar_ctrl_3_n_cp_3_param_setf(struct cl_chip *chip, u8 ncp3param)
{
	ASSERT_ERR_CHIP((((u32)ncp3param << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_3_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_3_ADDR) & ~((u32)0x000000FF)) | ((u32)ncp3param << 0));
}

/**
 * @brief RADAR_CTRL_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    28:20 Two_Nplus1_CP3_PARAM      0x4d
 *    18:10 Two_Nplus1_CP2_PARAM      0x25
 *    08:00 Two_Nplus1_CP1_PARAM      0x11
 * </pre>
 */
#define RIU_RADAR_CTRL_4_ADDR        (REG_RIU_BASE_ADDR + 0x00000814)
#define RIU_RADAR_CTRL_4_OFFSET      0x00000814
#define RIU_RADAR_CTRL_4_INDEX       0x00000205
#define RIU_RADAR_CTRL_4_RESET       0x04D09411

static inline u32 riu_radar_ctrl_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADAR_CTRL_4_ADDR);
}

static inline void riu_radar_ctrl_4_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RADAR_CTRL_4_ADDR, value);
}

/* Field definitions */
#define RIU_RADAR_CTRL_4_TWO_NPLUS_1_CP_3_PARAM_MASK    ((u32)0x1FF00000)
#define RIU_RADAR_CTRL_4_TWO_NPLUS_1_CP_3_PARAM_LSB    20
#define RIU_RADAR_CTRL_4_TWO_NPLUS_1_CP_3_PARAM_WIDTH    ((u32)0x00000009)
#define RIU_RADAR_CTRL_4_TWO_NPLUS_1_CP_2_PARAM_MASK    ((u32)0x0007FC00)
#define RIU_RADAR_CTRL_4_TWO_NPLUS_1_CP_2_PARAM_LSB    10
#define RIU_RADAR_CTRL_4_TWO_NPLUS_1_CP_2_PARAM_WIDTH    ((u32)0x00000009)
#define RIU_RADAR_CTRL_4_TWO_NPLUS_1_CP_1_PARAM_MASK    ((u32)0x000001FF)
#define RIU_RADAR_CTRL_4_TWO_NPLUS_1_CP_1_PARAM_LSB    0
#define RIU_RADAR_CTRL_4_TWO_NPLUS_1_CP_1_PARAM_WIDTH    ((u32)0x00000009)

#define RIU_RADAR_CTRL_4_TWO_NPLUS_1_CP_3_PARAM_RST    0x4d
#define RIU_RADAR_CTRL_4_TWO_NPLUS_1_CP_2_PARAM_RST    0x25
#define RIU_RADAR_CTRL_4_TWO_NPLUS_1_CP_1_PARAM_RST    0x11

static inline void riu_radar_ctrl_4_pack(struct cl_chip *chip, u16 two_nplus1_cp3_param, u16 two_nplus1_cp2_param, u16 two_nplus1_cp1_param)
{
	ASSERT_ERR_CHIP((((u32)two_nplus1_cp3_param << 20) & ~((u32)0x1FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)two_nplus1_cp2_param << 10) & ~((u32)0x0007FC00)) == 0);
	ASSERT_ERR_CHIP((((u32)two_nplus1_cp1_param << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_4_ADDR, ((u32)two_nplus1_cp3_param << 20) | ((u32)two_nplus1_cp2_param << 10) | ((u32)two_nplus1_cp1_param << 0));
}

static inline void riu_radar_ctrl_4_unpack(struct cl_chip *chip, u16 *two_nplus1_cp3_param, u16 *two_nplus1_cp2_param, u16 *two_nplus1_cp1_param)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_4_ADDR);

	*two_nplus1_cp3_param = (local_val & ((u32)0x1FF00000)) >> 20;
	*two_nplus1_cp2_param = (local_val & ((u32)0x0007FC00)) >> 10;
	*two_nplus1_cp1_param = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_radar_ctrl_4_two_nplus_1_cp_3_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_4_ADDR);

	return (u16)((local_val & ((u32)0x1FF00000)) >> 20);
}

static inline void riu_radar_ctrl_4_two_nplus_1_cp_3_param_setf(struct cl_chip *chip, u16 twonplus1cp3param)
{
	ASSERT_ERR_CHIP((((u32)twonplus1cp3param << 20) & ~((u32)0x1FF00000)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_4_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_4_ADDR) & ~((u32)0x1FF00000)) | ((u32)twonplus1cp3param << 20));
}

static inline u16 riu_radar_ctrl_4_two_nplus_1_cp_2_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_4_ADDR);

	return (u16)((local_val & ((u32)0x0007FC00)) >> 10);
}

static inline void riu_radar_ctrl_4_two_nplus_1_cp_2_param_setf(struct cl_chip *chip, u16 twonplus1cp2param)
{
	ASSERT_ERR_CHIP((((u32)twonplus1cp2param << 10) & ~((u32)0x0007FC00)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_4_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_4_ADDR) & ~((u32)0x0007FC00)) | ((u32)twonplus1cp2param << 10));
}

static inline u16 riu_radar_ctrl_4_two_nplus_1_cp_1_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_4_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_radar_ctrl_4_two_nplus_1_cp_1_param_setf(struct cl_chip *chip, u16 twonplus1cp1param)
{
	ASSERT_ERR_CHIP((((u32)twonplus1cp1param << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_4_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_4_ADDR) & ~((u32)0x000001FF)) | ((u32)twonplus1cp1param << 0));
}

/**
 * @brief RADAR_CTRL_5 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 D1_CP1_PARAM              0x283
 *    19:10 D1_CP0_PARAM              0x222
 *    08:00 Two_Nplus1_CP4_PARAM      0x9d
 * </pre>
 */
#define RIU_RADAR_CTRL_5_ADDR        (REG_RIU_BASE_ADDR + 0x00000818)
#define RIU_RADAR_CTRL_5_OFFSET      0x00000818
#define RIU_RADAR_CTRL_5_INDEX       0x00000206
#define RIU_RADAR_CTRL_5_RESET       0x2838889D

static inline u32 riu_radar_ctrl_5_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADAR_CTRL_5_ADDR);
}

static inline void riu_radar_ctrl_5_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RADAR_CTRL_5_ADDR, value);
}

/* Field definitions */
#define RIU_RADAR_CTRL_5_D_1_CP_1_PARAM_MASK    ((u32)0x3FF00000)
#define RIU_RADAR_CTRL_5_D_1_CP_1_PARAM_LSB    20
#define RIU_RADAR_CTRL_5_D_1_CP_1_PARAM_WIDTH    ((u32)0x0000000A)
#define RIU_RADAR_CTRL_5_D_1_CP_0_PARAM_MASK    ((u32)0x000FFC00)
#define RIU_RADAR_CTRL_5_D_1_CP_0_PARAM_LSB    10
#define RIU_RADAR_CTRL_5_D_1_CP_0_PARAM_WIDTH    ((u32)0x0000000A)
#define RIU_RADAR_CTRL_5_TWO_NPLUS_1_CP_4_PARAM_MASK    ((u32)0x000001FF)
#define RIU_RADAR_CTRL_5_TWO_NPLUS_1_CP_4_PARAM_LSB    0
#define RIU_RADAR_CTRL_5_TWO_NPLUS_1_CP_4_PARAM_WIDTH    ((u32)0x00000009)

#define RIU_RADAR_CTRL_5_D_1_CP_1_PARAM_RST    0x283
#define RIU_RADAR_CTRL_5_D_1_CP_0_PARAM_RST    0x222
#define RIU_RADAR_CTRL_5_TWO_NPLUS_1_CP_4_PARAM_RST    0x9d

static inline void riu_radar_ctrl_5_pack(struct cl_chip *chip, u16 d1_cp1_param, u16 d1_cp0_param, u16 two_nplus1_cp4_param)
{
	ASSERT_ERR_CHIP((((u32)d1_cp1_param << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)d1_cp0_param << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)two_nplus1_cp4_param << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_5_ADDR, ((u32)d1_cp1_param << 20) | ((u32)d1_cp0_param << 10) | ((u32)two_nplus1_cp4_param << 0));
}

static inline void riu_radar_ctrl_5_unpack(struct cl_chip *chip, u16 *d1_cp1_param, u16 *d1_cp0_param, u16 *two_nplus1_cp4_param)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_5_ADDR);

	*d1_cp1_param = (local_val & ((u32)0x3FF00000)) >> 20;
	*d1_cp0_param = (local_val & ((u32)0x000FFC00)) >> 10;
	*two_nplus1_cp4_param = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_radar_ctrl_5_d_1_cp_1_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_5_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_radar_ctrl_5_d_1_cp_1_param_setf(struct cl_chip *chip, u16 d1cp1param)
{
	ASSERT_ERR_CHIP((((u32)d1cp1param << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_5_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_5_ADDR) & ~((u32)0x3FF00000)) | ((u32)d1cp1param << 20));
}

static inline u16 riu_radar_ctrl_5_d_1_cp_0_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_5_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_radar_ctrl_5_d_1_cp_0_param_setf(struct cl_chip *chip, u16 d1cp0param)
{
	ASSERT_ERR_CHIP((((u32)d1cp0param << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_5_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_5_ADDR) & ~((u32)0x000FFC00)) | ((u32)d1cp0param << 10));
}

static inline u16 riu_radar_ctrl_5_two_nplus_1_cp_4_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_5_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_radar_ctrl_5_two_nplus_1_cp_4_param_setf(struct cl_chip *chip, u16 twonplus1cp4param)
{
	ASSERT_ERR_CHIP((((u32)twonplus1cp4param << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_5_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_5_ADDR) & ~((u32)0x000001FF)) | ((u32)twonplus1cp4param << 0));
}

/**
 * @brief RADAR_CTRL_6 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 D1_CP4_PARAM              0x1a0
 *    19:10 D1_CP3_PARAM              0x1b9
 *    09:00 D1_CP2_PARAM              0x1f1
 * </pre>
 */
#define RIU_RADAR_CTRL_6_ADDR        (REG_RIU_BASE_ADDR + 0x0000081C)
#define RIU_RADAR_CTRL_6_OFFSET      0x0000081C
#define RIU_RADAR_CTRL_6_INDEX       0x00000207
#define RIU_RADAR_CTRL_6_RESET       0x1A06E5F1

static inline u32 riu_radar_ctrl_6_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADAR_CTRL_6_ADDR);
}

static inline void riu_radar_ctrl_6_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RADAR_CTRL_6_ADDR, value);
}

/* Field definitions */
#define RIU_RADAR_CTRL_6_D_1_CP_4_PARAM_MASK    ((u32)0x3FF00000)
#define RIU_RADAR_CTRL_6_D_1_CP_4_PARAM_LSB    20
#define RIU_RADAR_CTRL_6_D_1_CP_4_PARAM_WIDTH    ((u32)0x0000000A)
#define RIU_RADAR_CTRL_6_D_1_CP_3_PARAM_MASK    ((u32)0x000FFC00)
#define RIU_RADAR_CTRL_6_D_1_CP_3_PARAM_LSB    10
#define RIU_RADAR_CTRL_6_D_1_CP_3_PARAM_WIDTH    ((u32)0x0000000A)
#define RIU_RADAR_CTRL_6_D_1_CP_2_PARAM_MASK    ((u32)0x000003FF)
#define RIU_RADAR_CTRL_6_D_1_CP_2_PARAM_LSB    0
#define RIU_RADAR_CTRL_6_D_1_CP_2_PARAM_WIDTH    ((u32)0x0000000A)

#define RIU_RADAR_CTRL_6_D_1_CP_4_PARAM_RST    0x1a0
#define RIU_RADAR_CTRL_6_D_1_CP_3_PARAM_RST    0x1b9
#define RIU_RADAR_CTRL_6_D_1_CP_2_PARAM_RST    0x1f1

static inline void riu_radar_ctrl_6_pack(struct cl_chip *chip, u16 d1_cp4_param, u16 d1_cp3_param, u16 d1_cp2_param)
{
	ASSERT_ERR_CHIP((((u32)d1_cp4_param << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)d1_cp3_param << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)d1_cp2_param << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_6_ADDR, ((u32)d1_cp4_param << 20) | ((u32)d1_cp3_param << 10) | ((u32)d1_cp2_param << 0));
}

static inline void riu_radar_ctrl_6_unpack(struct cl_chip *chip, u16 *d1_cp4_param, u16 *d1_cp3_param, u16 *d1_cp2_param)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_6_ADDR);

	*d1_cp4_param = (local_val & ((u32)0x3FF00000)) >> 20;
	*d1_cp3_param = (local_val & ((u32)0x000FFC00)) >> 10;
	*d1_cp2_param = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_radar_ctrl_6_d_1_cp_4_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_6_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_radar_ctrl_6_d_1_cp_4_param_setf(struct cl_chip *chip, u16 d1cp4param)
{
	ASSERT_ERR_CHIP((((u32)d1cp4param << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_6_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_6_ADDR) & ~((u32)0x3FF00000)) | ((u32)d1cp4param << 20));
}

static inline u16 riu_radar_ctrl_6_d_1_cp_3_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_6_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_radar_ctrl_6_d_1_cp_3_param_setf(struct cl_chip *chip, u16 d1cp3param)
{
	ASSERT_ERR_CHIP((((u32)d1cp3param << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_6_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_6_ADDR) & ~((u32)0x000FFC00)) | ((u32)d1cp3param << 10));
}

static inline u16 riu_radar_ctrl_6_d_1_cp_2_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_6_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_radar_ctrl_6_d_1_cp_2_param_setf(struct cl_chip *chip, u16 d1cp2param)
{
	ASSERT_ERR_CHIP((((u32)d1cp2param << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_6_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_6_ADDR) & ~((u32)0x000003FF)) | ((u32)d1cp2param << 0));
}

/**
 * @brief RADAR_CTRL_7 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 D2_CP2_PARAM              0x376
 *    19:10 D2_CP1_PARAM              0x3c4
 *    09:00 D2_CP0_PARAM              0x38e
 * </pre>
 */
#define RIU_RADAR_CTRL_7_ADDR        (REG_RIU_BASE_ADDR + 0x00000820)
#define RIU_RADAR_CTRL_7_OFFSET      0x00000820
#define RIU_RADAR_CTRL_7_INDEX       0x00000208
#define RIU_RADAR_CTRL_7_RESET       0x376F138E

static inline u32 riu_radar_ctrl_7_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADAR_CTRL_7_ADDR);
}

static inline void riu_radar_ctrl_7_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RADAR_CTRL_7_ADDR, value);
}

/* Field definitions */
#define RIU_RADAR_CTRL_7_D_2_CP_2_PARAM_MASK    ((u32)0x3FF00000)
#define RIU_RADAR_CTRL_7_D_2_CP_2_PARAM_LSB    20
#define RIU_RADAR_CTRL_7_D_2_CP_2_PARAM_WIDTH    ((u32)0x0000000A)
#define RIU_RADAR_CTRL_7_D_2_CP_1_PARAM_MASK    ((u32)0x000FFC00)
#define RIU_RADAR_CTRL_7_D_2_CP_1_PARAM_LSB    10
#define RIU_RADAR_CTRL_7_D_2_CP_1_PARAM_WIDTH    ((u32)0x0000000A)
#define RIU_RADAR_CTRL_7_D_2_CP_0_PARAM_MASK    ((u32)0x000003FF)
#define RIU_RADAR_CTRL_7_D_2_CP_0_PARAM_LSB    0
#define RIU_RADAR_CTRL_7_D_2_CP_0_PARAM_WIDTH    ((u32)0x0000000A)

#define RIU_RADAR_CTRL_7_D_2_CP_2_PARAM_RST    0x376
#define RIU_RADAR_CTRL_7_D_2_CP_1_PARAM_RST    0x3c4
#define RIU_RADAR_CTRL_7_D_2_CP_0_PARAM_RST    0x38e

static inline void riu_radar_ctrl_7_pack(struct cl_chip *chip, u16 d2_cp2_param, u16 d2_cp1_param, u16 d2_cp0_param)
{
	ASSERT_ERR_CHIP((((u32)d2_cp2_param << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)d2_cp1_param << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)d2_cp0_param << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_7_ADDR, ((u32)d2_cp2_param << 20) | ((u32)d2_cp1_param << 10) | ((u32)d2_cp0_param << 0));
}

static inline void riu_radar_ctrl_7_unpack(struct cl_chip *chip, u16 *d2_cp2_param, u16 *d2_cp1_param, u16 *d2_cp0_param)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_7_ADDR);

	*d2_cp2_param = (local_val & ((u32)0x3FF00000)) >> 20;
	*d2_cp1_param = (local_val & ((u32)0x000FFC00)) >> 10;
	*d2_cp0_param = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_radar_ctrl_7_d_2_cp_2_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_7_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_radar_ctrl_7_d_2_cp_2_param_setf(struct cl_chip *chip, u16 d2cp2param)
{
	ASSERT_ERR_CHIP((((u32)d2cp2param << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_7_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_7_ADDR) & ~((u32)0x3FF00000)) | ((u32)d2cp2param << 20));
}

static inline u16 riu_radar_ctrl_7_d_2_cp_1_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_7_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_radar_ctrl_7_d_2_cp_1_param_setf(struct cl_chip *chip, u16 d2cp1param)
{
	ASSERT_ERR_CHIP((((u32)d2cp1param << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_7_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_7_ADDR) & ~((u32)0x000FFC00)) | ((u32)d2cp1param << 10));
}

static inline u16 riu_radar_ctrl_7_d_2_cp_0_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_7_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_radar_ctrl_7_d_2_cp_0_param_setf(struct cl_chip *chip, u16 d2cp0param)
{
	ASSERT_ERR_CHIP((((u32)d2cp0param << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_7_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_7_ADDR) & ~((u32)0x000003FF)) | ((u32)d2cp0param << 0));
}

/**
 * @brief RADAR_CTRL_8 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 S_CP0_PARAM               0xe4
 *    19:10 D2_CP4_PARAM              0x343
 *    09:00 D2_CP3_PARAM              0x353
 * </pre>
 */
#define RIU_RADAR_CTRL_8_ADDR        (REG_RIU_BASE_ADDR + 0x00000824)
#define RIU_RADAR_CTRL_8_OFFSET      0x00000824
#define RIU_RADAR_CTRL_8_INDEX       0x00000209
#define RIU_RADAR_CTRL_8_RESET       0x0E4D0F53

static inline u32 riu_radar_ctrl_8_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADAR_CTRL_8_ADDR);
}

static inline void riu_radar_ctrl_8_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RADAR_CTRL_8_ADDR, value);
}

/* Field definitions */
#define RIU_RADAR_CTRL_8_S_CP_0_PARAM_MASK    ((u32)0x3FF00000)
#define RIU_RADAR_CTRL_8_S_CP_0_PARAM_LSB    20
#define RIU_RADAR_CTRL_8_S_CP_0_PARAM_WIDTH    ((u32)0x0000000A)
#define RIU_RADAR_CTRL_8_D_2_CP_4_PARAM_MASK    ((u32)0x000FFC00)
#define RIU_RADAR_CTRL_8_D_2_CP_4_PARAM_LSB    10
#define RIU_RADAR_CTRL_8_D_2_CP_4_PARAM_WIDTH    ((u32)0x0000000A)
#define RIU_RADAR_CTRL_8_D_2_CP_3_PARAM_MASK    ((u32)0x000003FF)
#define RIU_RADAR_CTRL_8_D_2_CP_3_PARAM_LSB    0
#define RIU_RADAR_CTRL_8_D_2_CP_3_PARAM_WIDTH    ((u32)0x0000000A)

#define RIU_RADAR_CTRL_8_S_CP_0_PARAM_RST    0xe4
#define RIU_RADAR_CTRL_8_D_2_CP_4_PARAM_RST    0x343
#define RIU_RADAR_CTRL_8_D_2_CP_3_PARAM_RST    0x353

static inline void riu_radar_ctrl_8_pack(struct cl_chip *chip, u16 s_cp0_param, u16 d2_cp4_param, u16 d2_cp3_param)
{
	ASSERT_ERR_CHIP((((u32)s_cp0_param << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)d2_cp4_param << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)d2_cp3_param << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_8_ADDR, ((u32)s_cp0_param << 20) | ((u32)d2_cp4_param << 10) | ((u32)d2_cp3_param << 0));
}

static inline void riu_radar_ctrl_8_unpack(struct cl_chip *chip, u16 *s_cp0_param, u16 *d2_cp4_param, u16 *d2_cp3_param)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_8_ADDR);

	*s_cp0_param = (local_val & ((u32)0x3FF00000)) >> 20;
	*d2_cp4_param = (local_val & ((u32)0x000FFC00)) >> 10;
	*d2_cp3_param = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_radar_ctrl_8_s_cp_0_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_8_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_radar_ctrl_8_s_cp_0_param_setf(struct cl_chip *chip, u16 scp0param)
{
	ASSERT_ERR_CHIP((((u32)scp0param << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_8_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_8_ADDR) & ~((u32)0x3FF00000)) | ((u32)scp0param << 20));
}

static inline u16 riu_radar_ctrl_8_d_2_cp_4_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_8_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_radar_ctrl_8_d_2_cp_4_param_setf(struct cl_chip *chip, u16 d2cp4param)
{
	ASSERT_ERR_CHIP((((u32)d2cp4param << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_8_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_8_ADDR) & ~((u32)0x000FFC00)) | ((u32)d2cp4param << 10));
}

static inline u16 riu_radar_ctrl_8_d_2_cp_3_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_8_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_radar_ctrl_8_d_2_cp_3_param_setf(struct cl_chip *chip, u16 d2cp3param)
{
	ASSERT_ERR_CHIP((((u32)d2cp3param << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_8_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_8_ADDR) & ~((u32)0x000003FF)) | ((u32)d2cp3param << 0));
}

/**
 * @brief RADAR_CTRL_9 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 S_CP3_PARAM               0x1B
 *    19:10 S_CP2_PARAM               0x37
 *    09:00 S_CP1_PARAM               0x78
 * </pre>
 */
#define RIU_RADAR_CTRL_9_ADDR        (REG_RIU_BASE_ADDR + 0x00000828)
#define RIU_RADAR_CTRL_9_OFFSET      0x00000828
#define RIU_RADAR_CTRL_9_INDEX       0x0000020A
#define RIU_RADAR_CTRL_9_RESET       0x01B0DC78

static inline u32 riu_radar_ctrl_9_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADAR_CTRL_9_ADDR);
}

static inline void riu_radar_ctrl_9_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RADAR_CTRL_9_ADDR, value);
}

/* Field definitions */
#define RIU_RADAR_CTRL_9_S_CP_3_PARAM_MASK    ((u32)0x3FF00000)
#define RIU_RADAR_CTRL_9_S_CP_3_PARAM_LSB    20
#define RIU_RADAR_CTRL_9_S_CP_3_PARAM_WIDTH    ((u32)0x0000000A)
#define RIU_RADAR_CTRL_9_S_CP_2_PARAM_MASK    ((u32)0x000FFC00)
#define RIU_RADAR_CTRL_9_S_CP_2_PARAM_LSB    10
#define RIU_RADAR_CTRL_9_S_CP_2_PARAM_WIDTH    ((u32)0x0000000A)
#define RIU_RADAR_CTRL_9_S_CP_1_PARAM_MASK    ((u32)0x000003FF)
#define RIU_RADAR_CTRL_9_S_CP_1_PARAM_LSB    0
#define RIU_RADAR_CTRL_9_S_CP_1_PARAM_WIDTH    ((u32)0x0000000A)

#define RIU_RADAR_CTRL_9_S_CP_3_PARAM_RST    0x1B
#define RIU_RADAR_CTRL_9_S_CP_2_PARAM_RST    0x37
#define RIU_RADAR_CTRL_9_S_CP_1_PARAM_RST    0x78

static inline void riu_radar_ctrl_9_pack(struct cl_chip *chip, u16 s_cp3_param, u16 s_cp2_param, u16 s_cp1_param)
{
	ASSERT_ERR_CHIP((((u32)s_cp3_param << 20) & ~((u32)0x3FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)s_cp2_param << 10) & ~((u32)0x000FFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)s_cp1_param << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_9_ADDR, ((u32)s_cp3_param << 20) | ((u32)s_cp2_param << 10) | ((u32)s_cp1_param << 0));
}

static inline void riu_radar_ctrl_9_unpack(struct cl_chip *chip, u16 *s_cp3_param, u16 *s_cp2_param, u16 *s_cp1_param)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_9_ADDR);

	*s_cp3_param = (local_val & ((u32)0x3FF00000)) >> 20;
	*s_cp2_param = (local_val & ((u32)0x000FFC00)) >> 10;
	*s_cp1_param = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_radar_ctrl_9_s_cp_3_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_9_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

static inline void riu_radar_ctrl_9_s_cp_3_param_setf(struct cl_chip *chip, u16 scp3param)
{
	ASSERT_ERR_CHIP((((u32)scp3param << 20) & ~((u32)0x3FF00000)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_9_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_9_ADDR) & ~((u32)0x3FF00000)) | ((u32)scp3param << 20));
}

static inline u16 riu_radar_ctrl_9_s_cp_2_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_9_ADDR);

	return (u16)((local_val & ((u32)0x000FFC00)) >> 10);
}

static inline void riu_radar_ctrl_9_s_cp_2_param_setf(struct cl_chip *chip, u16 scp2param)
{
	ASSERT_ERR_CHIP((((u32)scp2param << 10) & ~((u32)0x000FFC00)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_9_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_9_ADDR) & ~((u32)0x000FFC00)) | ((u32)scp2param << 10));
}

static inline u16 riu_radar_ctrl_9_s_cp_1_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_9_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_radar_ctrl_9_s_cp_1_param_setf(struct cl_chip *chip, u16 scp1param)
{
	ASSERT_ERR_CHIP((((u32)scp1param << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_9_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_9_ADDR) & ~((u32)0x000003FF)) | ((u32)scp1param << 0));
}

/**
 * @brief RADAR_CTRL_10 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    18:10 UNWRAP_THRESH             0x1EC
 *    09:00 S_CP4_PARAM               0xD
 * </pre>
 */
#define RIU_RADAR_CTRL_10_ADDR        (REG_RIU_BASE_ADDR + 0x0000082C)
#define RIU_RADAR_CTRL_10_OFFSET      0x0000082C
#define RIU_RADAR_CTRL_10_INDEX       0x0000020B
#define RIU_RADAR_CTRL_10_RESET       0x0007B00D

static inline u32 riu_radar_ctrl_10_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADAR_CTRL_10_ADDR);
}

static inline void riu_radar_ctrl_10_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RADAR_CTRL_10_ADDR, value);
}

/* Field definitions */
#define RIU_RADAR_CTRL_10_UNWRAP_THRESH_MASK    ((u32)0x0007FC00)
#define RIU_RADAR_CTRL_10_UNWRAP_THRESH_LSB    10
#define RIU_RADAR_CTRL_10_UNWRAP_THRESH_WIDTH    ((u32)0x00000009)
#define RIU_RADAR_CTRL_10_S_CP_4_PARAM_MASK    ((u32)0x000003FF)
#define RIU_RADAR_CTRL_10_S_CP_4_PARAM_LSB    0
#define RIU_RADAR_CTRL_10_S_CP_4_PARAM_WIDTH    ((u32)0x0000000A)

#define RIU_RADAR_CTRL_10_UNWRAP_THRESH_RST    0x1EC
#define RIU_RADAR_CTRL_10_S_CP_4_PARAM_RST    0xD

static inline void riu_radar_ctrl_10_pack(struct cl_chip *chip, u16 unwrap_thresh, u16 s_cp4_param)
{
	ASSERT_ERR_CHIP((((u32)unwrap_thresh << 10) & ~((u32)0x0007FC00)) == 0);
	ASSERT_ERR_CHIP((((u32)s_cp4_param << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_10_ADDR, ((u32)unwrap_thresh << 10) | ((u32)s_cp4_param << 0));
}

static inline void riu_radar_ctrl_10_unpack(struct cl_chip *chip, u16 *unwrap_thresh, u16 *s_cp4_param)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_10_ADDR);

	*unwrap_thresh = (local_val & ((u32)0x0007FC00)) >> 10;
	*s_cp4_param = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u16 riu_radar_ctrl_10_unwrap_thresh_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_10_ADDR);

	return (u16)((local_val & ((u32)0x0007FC00)) >> 10);
}

static inline void riu_radar_ctrl_10_unwrap_thresh_setf(struct cl_chip *chip, u16 unwrapthresh)
{
	ASSERT_ERR_CHIP((((u32)unwrapthresh << 10) & ~((u32)0x0007FC00)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_10_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_10_ADDR) & ~((u32)0x0007FC00)) | ((u32)unwrapthresh << 10));
}

static inline u16 riu_radar_ctrl_10_s_cp_4_param_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_CTRL_10_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

static inline void riu_radar_ctrl_10_s_cp_4_param_setf(struct cl_chip *chip, u16 scp4param)
{
	ASSERT_ERR_CHIP((((u32)scp4param << 0) & ~((u32)0x000003FF)) == 0);
	cl_reg_write(chip, RIU_RADAR_CTRL_10_ADDR, (cl_reg_read(chip, RIU_RADAR_CTRL_10_ADDR) & ~((u32)0x000003FF)) | ((u32)scp4param << 0));
}

/**
 * @brief RADAR_SW_CTRL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    02    RX_RAD_PAUSE              0
 *    01    RX_RAD_FIFO_WR_STOP       0
 *    00    SW_CTRL_EN                0
 * </pre>
 */
#define RIU_RADAR_SW_CTRL_ADDR        (REG_RIU_BASE_ADDR + 0x00000830)
#define RIU_RADAR_SW_CTRL_OFFSET      0x00000830
#define RIU_RADAR_SW_CTRL_INDEX       0x0000020C
#define RIU_RADAR_SW_CTRL_RESET       0x00000000

static inline u32 riu_radar_sw_ctrl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADAR_SW_CTRL_ADDR);
}

static inline void riu_radar_sw_ctrl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RADAR_SW_CTRL_ADDR, value);
}

/* Field definitions */
#define RIU_RADAR_SW_CTRL_RX_RAD_PAUSE_BIT    ((u32)0x00000004)
#define RIU_RADAR_SW_CTRL_RX_RAD_PAUSE_POS    2
#define RIU_RADAR_SW_CTRL_RX_RAD_FIFO_WR_STOP_BIT    ((u32)0x00000002)
#define RIU_RADAR_SW_CTRL_RX_RAD_FIFO_WR_STOP_POS    1
#define RIU_RADAR_SW_CTRL_SW_CTRL_EN_BIT    ((u32)0x00000001)
#define RIU_RADAR_SW_CTRL_SW_CTRL_EN_POS    0

#define RIU_RADAR_SW_CTRL_RX_RAD_PAUSE_RST    0x0
#define RIU_RADAR_SW_CTRL_RX_RAD_FIFO_WR_STOP_RST    0x0
#define RIU_RADAR_SW_CTRL_SW_CTRL_EN_RST    0x0

static inline void riu_radar_sw_ctrl_pack(struct cl_chip *chip, u8 rx_rad_pause, u8 rx_rad_fifo_wr_stop, u8 sw_ctrl_en)
{
	ASSERT_ERR_CHIP((((u32)rx_rad_pause << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)rx_rad_fifo_wr_stop << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)sw_ctrl_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RADAR_SW_CTRL_ADDR, ((u32)rx_rad_pause << 2) | ((u32)rx_rad_fifo_wr_stop << 1) | ((u32)sw_ctrl_en << 0));
}

static inline void riu_radar_sw_ctrl_unpack(struct cl_chip *chip, u8 *rx_rad_pause, u8 *rx_rad_fifo_wr_stop, u8 *sw_ctrl_en)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_SW_CTRL_ADDR);

	*rx_rad_pause = (local_val & ((u32)0x00000004)) >> 2;
	*rx_rad_fifo_wr_stop = (local_val & ((u32)0x00000002)) >> 1;
	*sw_ctrl_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_radar_sw_ctrl_rx_rad_pause_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_SW_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void riu_radar_sw_ctrl_rx_rad_pause_setf(struct cl_chip *chip, u8 rxradpause)
{
	ASSERT_ERR_CHIP((((u32)rxradpause << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RIU_RADAR_SW_CTRL_ADDR, (cl_reg_read(chip, RIU_RADAR_SW_CTRL_ADDR) & ~((u32)0x00000004)) | ((u32)rxradpause << 2));
}

static inline u8 riu_radar_sw_ctrl_rx_rad_fifo_wr_stop_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_SW_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void riu_radar_sw_ctrl_rx_rad_fifo_wr_stop_setf(struct cl_chip *chip, u8 rxradfifowrstop)
{
	ASSERT_ERR_CHIP((((u32)rxradfifowrstop << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_RADAR_SW_CTRL_ADDR, (cl_reg_read(chip, RIU_RADAR_SW_CTRL_ADDR) & ~((u32)0x00000002)) | ((u32)rxradfifowrstop << 1));
}

static inline u8 riu_radar_sw_ctrl_sw_ctrl_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_SW_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_radar_sw_ctrl_sw_ctrl_en_setf(struct cl_chip *chip, u8 swctrlen)
{
	ASSERT_ERR_CHIP((((u32)swctrlen << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RADAR_SW_CTRL_ADDR, (cl_reg_read(chip, RIU_RADAR_SW_CTRL_ADDR) & ~((u32)0x00000001)) | ((u32)swctrlen << 0));
}

/**
 * @brief RADARSTAT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 SECOND_PASS_EST_FREQ      0x0
 *    23:16 FIRST_PASS_EST_FREQ       0x0
 *    15:08 SECOND_PASS_EST_FOM       0x0
 *    07:00 FIRST_PASS_EST_FOM        0x0
 * </pre>
 */
#define RIU_RADARSTAT_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000834)
#define RIU_RADARSTAT_1_OFFSET      0x00000834
#define RIU_RADARSTAT_1_INDEX       0x0000020D
#define RIU_RADARSTAT_1_RESET       0x00000000

static inline u32 riu_radarstat_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADARSTAT_1_ADDR);
}

/* Field definitions */
#define RIU_RADARSTAT_1_SECOND_PASS_EST_FREQ_MASK    ((u32)0xFF000000)
#define RIU_RADARSTAT_1_SECOND_PASS_EST_FREQ_LSB    24
#define RIU_RADARSTAT_1_SECOND_PASS_EST_FREQ_WIDTH    ((u32)0x00000008)
#define RIU_RADARSTAT_1_FIRST_PASS_EST_FREQ_MASK    ((u32)0x00FF0000)
#define RIU_RADARSTAT_1_FIRST_PASS_EST_FREQ_LSB    16
#define RIU_RADARSTAT_1_FIRST_PASS_EST_FREQ_WIDTH    ((u32)0x00000008)
#define RIU_RADARSTAT_1_SECOND_PASS_EST_FOM_MASK    ((u32)0x0000FF00)
#define RIU_RADARSTAT_1_SECOND_PASS_EST_FOM_LSB    8
#define RIU_RADARSTAT_1_SECOND_PASS_EST_FOM_WIDTH    ((u32)0x00000008)
#define RIU_RADARSTAT_1_FIRST_PASS_EST_FOM_MASK    ((u32)0x000000FF)
#define RIU_RADARSTAT_1_FIRST_PASS_EST_FOM_LSB    0
#define RIU_RADARSTAT_1_FIRST_PASS_EST_FOM_WIDTH    ((u32)0x00000008)

#define RIU_RADARSTAT_1_SECOND_PASS_EST_FREQ_RST    0x0
#define RIU_RADARSTAT_1_FIRST_PASS_EST_FREQ_RST    0x0
#define RIU_RADARSTAT_1_SECOND_PASS_EST_FOM_RST    0x0
#define RIU_RADARSTAT_1_FIRST_PASS_EST_FOM_RST    0x0

static inline void riu_radarstat_1_unpack(struct cl_chip *chip, u8 *second_pass_est_freq, u8 *first_pass_est_freq, u8 *second_pass_est_fom, u8 *first_pass_est_fom)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_1_ADDR);

	*second_pass_est_freq = (local_val & ((u32)0xFF000000)) >> 24;
	*first_pass_est_freq = (local_val & ((u32)0x00FF0000)) >> 16;
	*second_pass_est_fom = (local_val & ((u32)0x0000FF00)) >> 8;
	*first_pass_est_fom = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 riu_radarstat_1_second_pass_est_freq_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_1_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

static inline u8 riu_radarstat_1_first_pass_est_freq_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_1_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

static inline u8 riu_radarstat_1_second_pass_est_fom_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_1_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

static inline u8 riu_radarstat_1_first_pass_est_fom_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

/**
 * @brief RADARSTAT_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    08:00 RX_RAD_FIFO_WR_PTR        0x0
 * </pre>
 */
#define RIU_RADARSTAT_2_ADDR        (REG_RIU_BASE_ADDR + 0x00000838)
#define RIU_RADARSTAT_2_OFFSET      0x00000838
#define RIU_RADARSTAT_2_INDEX       0x0000020E
#define RIU_RADARSTAT_2_RESET       0x00000000

static inline u32 riu_radarstat_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADARSTAT_2_ADDR);
}

/* Field definitions */
#define RIU_RADARSTAT_2_RX_RAD_FIFO_WR_PTR_MASK    ((u32)0x000001FF)
#define RIU_RADARSTAT_2_RX_RAD_FIFO_WR_PTR_LSB    0
#define RIU_RADARSTAT_2_RX_RAD_FIFO_WR_PTR_WIDTH    ((u32)0x00000009)

#define RIU_RADARSTAT_2_RX_RAD_FIFO_WR_PTR_RST    0x0

static inline u16 riu_radarstat_2_rx_rad_fifo_wr_ptr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_2_ADDR);

	return (u16)(local_val >> 0);
}

/**
 * @brief RADARSTAT_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    09:00 MRC_PHASE                 0x0
 * </pre>
 */
#define RIU_RADARSTAT_3_ADDR        (REG_RIU_BASE_ADDR + 0x0000084C)
#define RIU_RADARSTAT_3_OFFSET      0x0000084C
#define RIU_RADARSTAT_3_INDEX       0x00000213
#define RIU_RADARSTAT_3_RESET       0x00000000

static inline u32 riu_radarstat_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADARSTAT_3_ADDR);
}

/* Field definitions */
#define RIU_RADARSTAT_3_MRC_PHASE_MASK      ((u32)0x000003FF)
#define RIU_RADARSTAT_3_MRC_PHASE_LSB       0
#define RIU_RADARSTAT_3_MRC_PHASE_WIDTH     ((u32)0x0000000A)

#define RIU_RADARSTAT_3_MRC_PHASE_RST       0x0

static inline u16 riu_radarstat_3_mrc_phase_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_3_ADDR);

	return (u16)(local_val >> 0);
}

/**
 * @brief RADARSTAT_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    05:00 PULSE_FIFO_WR_PTR         0x0
 * </pre>
 */
#define RIU_RADARSTAT_4_ADDR        (REG_RIU_BASE_ADDR + 0x00000850)
#define RIU_RADARSTAT_4_OFFSET      0x00000850
#define RIU_RADARSTAT_4_INDEX       0x00000214
#define RIU_RADARSTAT_4_RESET       0x00000000

static inline u32 riu_radarstat_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADARSTAT_4_ADDR);
}

/* Field definitions */
#define RIU_RADARSTAT_4_PULSE_FIFO_WR_PTR_MASK    ((u32)0x0000003F)
#define RIU_RADARSTAT_4_PULSE_FIFO_WR_PTR_LSB    0
#define RIU_RADARSTAT_4_PULSE_FIFO_WR_PTR_WIDTH    ((u32)0x00000006)

#define RIU_RADARSTAT_4_PULSE_FIFO_WR_PTR_RST    0x0

static inline u8 riu_radarstat_4_pulse_fifo_wr_ptr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADARSTAT_4_ADDR);

	return (u8)(local_val >> 0);
}

/**
 * @brief RADAR_IMPLEMENTATION register definition
 *  Radar ASIC implementation settings register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    07    UNWRAP_ENHANCEMENT        0
 *    06:01 LATENCY_CORR              0x8
 *    00    DISABLE_CLKGATE           0
 * </pre>
 */
#define RIU_RADAR_IMPLEMENTATION_ADDR        (REG_RIU_BASE_ADDR + 0x00000854)
#define RIU_RADAR_IMPLEMENTATION_OFFSET      0x00000854
#define RIU_RADAR_IMPLEMENTATION_INDEX       0x00000215
#define RIU_RADAR_IMPLEMENTATION_RESET       0x00000010

static inline u32 riu_radar_implementation_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RADAR_IMPLEMENTATION_ADDR);
}

static inline void riu_radar_implementation_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_RADAR_IMPLEMENTATION_ADDR, value);
}

/* Field definitions */
#define RIU_RADAR_IMPLEMENTATION_UNWRAP_ENHANCEMENT_BIT    ((u32)0x00000080)
#define RIU_RADAR_IMPLEMENTATION_UNWRAP_ENHANCEMENT_POS    7
#define RIU_RADAR_IMPLEMENTATION_LATENCY_CORR_MASK    ((u32)0x0000007E)
#define RIU_RADAR_IMPLEMENTATION_LATENCY_CORR_LSB    1
#define RIU_RADAR_IMPLEMENTATION_LATENCY_CORR_WIDTH    ((u32)0x00000006)
#define RIU_RADAR_IMPLEMENTATION_DISABLE_CLKGATE_BIT    ((u32)0x00000001)
#define RIU_RADAR_IMPLEMENTATION_DISABLE_CLKGATE_POS    0

#define RIU_RADAR_IMPLEMENTATION_UNWRAP_ENHANCEMENT_RST    0x0
#define RIU_RADAR_IMPLEMENTATION_LATENCY_CORR_RST    0x8
#define RIU_RADAR_IMPLEMENTATION_DISABLE_CLKGATE_RST    0x0

static inline void riu_radar_implementation_pack(struct cl_chip *chip, u8 unwrap_enhancement, u8 latency_corr, u8 disable_clkgate)
{
	ASSERT_ERR_CHIP((((u32)unwrap_enhancement << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)latency_corr << 1) & ~((u32)0x0000007E)) == 0);
	ASSERT_ERR_CHIP((((u32)disable_clkgate << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RADAR_IMPLEMENTATION_ADDR, ((u32)unwrap_enhancement << 7) | ((u32)latency_corr << 1) | ((u32)disable_clkgate << 0));
}

static inline void riu_radar_implementation_unpack(struct cl_chip *chip, u8 *unwrap_enhancement, u8 *latency_corr, u8 *disable_clkgate)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_IMPLEMENTATION_ADDR);

	*unwrap_enhancement = (local_val & ((u32)0x00000080)) >> 7;
	*latency_corr = (local_val & ((u32)0x0000007E)) >> 1;
	*disable_clkgate = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_radar_implementation_unwrap_enhancement_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_IMPLEMENTATION_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void riu_radar_implementation_unwrap_enhancement_setf(struct cl_chip *chip, u8 unwrapenhancement)
{
	ASSERT_ERR_CHIP((((u32)unwrapenhancement << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RIU_RADAR_IMPLEMENTATION_ADDR, (cl_reg_read(chip, RIU_RADAR_IMPLEMENTATION_ADDR) & ~((u32)0x00000080)) | ((u32)unwrapenhancement << 7));
}

static inline u8 riu_radar_implementation_latency_corr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_IMPLEMENTATION_ADDR);

	return (u8)((local_val & ((u32)0x0000007E)) >> 1);
}

static inline void riu_radar_implementation_latency_corr_setf(struct cl_chip *chip, u8 latencycorr)
{
	ASSERT_ERR_CHIP((((u32)latencycorr << 1) & ~((u32)0x0000007E)) == 0);
	cl_reg_write(chip, RIU_RADAR_IMPLEMENTATION_ADDR, (cl_reg_read(chip, RIU_RADAR_IMPLEMENTATION_ADDR) & ~((u32)0x0000007E)) | ((u32)latencycorr << 1));
}

static inline u8 riu_radar_implementation_disable_clkgate_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RADAR_IMPLEMENTATION_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_radar_implementation_disable_clkgate_setf(struct cl_chip *chip, u8 disableclkgate)
{
	ASSERT_ERR_CHIP((((u32)disableclkgate << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_RADAR_IMPLEMENTATION_ADDR, (cl_reg_read(chip, RIU_RADAR_IMPLEMENTATION_ADDR) & ~((u32)0x00000001)) | ((u32)disableclkgate << 0));
}

/**
 * @brief IQDC_TX_0_COEF_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_tx0_fir_coeff_14     0x0
 *    20:12 iqdc_tx0_fir_coeff_13     0x0
 *    08:00 iqdc_tx0_fir_coeff_12     0x0
 * </pre>
 */
#define RIU_IQDC_TX_0_COEF_4_ADDR        (REG_RIU_BASE_ADDR + 0x00000858)
#define RIU_IQDC_TX_0_COEF_4_OFFSET      0x00000858
#define RIU_IQDC_TX_0_COEF_4_INDEX       0x00000216
#define RIU_IQDC_TX_0_COEF_4_RESET       0x00000000

static inline u32 riu_iqdc_tx_0_coef_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_0_COEF_4_ADDR);
}

static inline void riu_iqdc_tx_0_coef_4_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_4_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_0_COEF_4_IQDC_TX_0_FIR_COEFF_14_MASK    ((u32)0xFF800000)
#define RIU_IQDC_TX_0_COEF_4_IQDC_TX_0_FIR_COEFF_14_LSB    23
#define RIU_IQDC_TX_0_COEF_4_IQDC_TX_0_FIR_COEFF_14_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_0_COEF_4_IQDC_TX_0_FIR_COEFF_13_MASK    ((u32)0x001FF000)
#define RIU_IQDC_TX_0_COEF_4_IQDC_TX_0_FIR_COEFF_13_LSB    12
#define RIU_IQDC_TX_0_COEF_4_IQDC_TX_0_FIR_COEFF_13_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_0_COEF_4_IQDC_TX_0_FIR_COEFF_12_MASK    ((u32)0x000001FF)
#define RIU_IQDC_TX_0_COEF_4_IQDC_TX_0_FIR_COEFF_12_LSB    0
#define RIU_IQDC_TX_0_COEF_4_IQDC_TX_0_FIR_COEFF_12_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_TX_0_COEF_4_IQDC_TX_0_FIR_COEFF_14_RST    0x0
#define RIU_IQDC_TX_0_COEF_4_IQDC_TX_0_FIR_COEFF_13_RST    0x0
#define RIU_IQDC_TX_0_COEF_4_IQDC_TX_0_FIR_COEFF_12_RST    0x0

static inline void riu_iqdc_tx_0_coef_4_pack(struct cl_chip *chip, u16 iqdc_tx0_fir_coeff_14, u16 iqdc_tx0_fir_coeff_13, u16 iqdc_tx0_fir_coeff_12)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_14 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_13 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_12 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_4_ADDR, ((u32)iqdc_tx0_fir_coeff_14 << 23) | ((u32)iqdc_tx0_fir_coeff_13 << 12) | ((u32)iqdc_tx0_fir_coeff_12 << 0));
}

static inline void riu_iqdc_tx_0_coef_4_unpack(struct cl_chip *chip, u16 *iqdc_tx0_fir_coeff_14, u16 *iqdc_tx0_fir_coeff_13, u16 *iqdc_tx0_fir_coeff_12)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_4_ADDR);

	*iqdc_tx0_fir_coeff_14 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_tx0_fir_coeff_13 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_tx0_fir_coeff_12 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_tx_0_coef_4_iqdc_tx_0_fir_coeff_14_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_4_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_tx_0_coef_4_iqdc_tx_0_fir_coeff_14_setf(struct cl_chip *chip, u16 iqdctx0fircoeff14)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff14 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_4_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_4_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdctx0fircoeff14 << 23));
}

static inline u16 riu_iqdc_tx_0_coef_4_iqdc_tx_0_fir_coeff_13_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_4_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_tx_0_coef_4_iqdc_tx_0_fir_coeff_13_setf(struct cl_chip *chip, u16 iqdctx0fircoeff13)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff13 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_4_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_4_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdctx0fircoeff13 << 12));
}

static inline u16 riu_iqdc_tx_0_coef_4_iqdc_tx_0_fir_coeff_12_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_4_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_tx_0_coef_4_iqdc_tx_0_fir_coeff_12_setf(struct cl_chip *chip, u16 iqdctx0fircoeff12)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff12 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_4_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_4_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdctx0fircoeff12 << 0));
}

/**
 * @brief IQDC_TX_0_COEF_5 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_tx0_fir_coeff_17     0x0
 *    20:12 iqdc_tx0_fir_coeff_16     0x0
 *    08:00 iqdc_tx0_fir_coeff_15     0x0
 * </pre>
 */
#define RIU_IQDC_TX_0_COEF_5_ADDR        (REG_RIU_BASE_ADDR + 0x0000085C)
#define RIU_IQDC_TX_0_COEF_5_OFFSET      0x0000085C
#define RIU_IQDC_TX_0_COEF_5_INDEX       0x00000217
#define RIU_IQDC_TX_0_COEF_5_RESET       0x00000000

static inline u32 riu_iqdc_tx_0_coef_5_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_0_COEF_5_ADDR);
}

static inline void riu_iqdc_tx_0_coef_5_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_5_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_0_COEF_5_IQDC_TX_0_FIR_COEFF_17_MASK    ((u32)0xFF800000)
#define RIU_IQDC_TX_0_COEF_5_IQDC_TX_0_FIR_COEFF_17_LSB    23
#define RIU_IQDC_TX_0_COEF_5_IQDC_TX_0_FIR_COEFF_17_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_0_COEF_5_IQDC_TX_0_FIR_COEFF_16_MASK    ((u32)0x001FF000)
#define RIU_IQDC_TX_0_COEF_5_IQDC_TX_0_FIR_COEFF_16_LSB    12
#define RIU_IQDC_TX_0_COEF_5_IQDC_TX_0_FIR_COEFF_16_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_0_COEF_5_IQDC_TX_0_FIR_COEFF_15_MASK    ((u32)0x000001FF)
#define RIU_IQDC_TX_0_COEF_5_IQDC_TX_0_FIR_COEFF_15_LSB    0
#define RIU_IQDC_TX_0_COEF_5_IQDC_TX_0_FIR_COEFF_15_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_TX_0_COEF_5_IQDC_TX_0_FIR_COEFF_17_RST    0x0
#define RIU_IQDC_TX_0_COEF_5_IQDC_TX_0_FIR_COEFF_16_RST    0x0
#define RIU_IQDC_TX_0_COEF_5_IQDC_TX_0_FIR_COEFF_15_RST    0x0

static inline void riu_iqdc_tx_0_coef_5_pack(struct cl_chip *chip, u16 iqdc_tx0_fir_coeff_17, u16 iqdc_tx0_fir_coeff_16, u16 iqdc_tx0_fir_coeff_15)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_17 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_16 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_15 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_5_ADDR, ((u32)iqdc_tx0_fir_coeff_17 << 23) | ((u32)iqdc_tx0_fir_coeff_16 << 12) | ((u32)iqdc_tx0_fir_coeff_15 << 0));
}

static inline void riu_iqdc_tx_0_coef_5_unpack(struct cl_chip *chip, u16 *iqdc_tx0_fir_coeff_17, u16 *iqdc_tx0_fir_coeff_16, u16 *iqdc_tx0_fir_coeff_15)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_5_ADDR);

	*iqdc_tx0_fir_coeff_17 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_tx0_fir_coeff_16 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_tx0_fir_coeff_15 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_tx_0_coef_5_iqdc_tx_0_fir_coeff_17_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_5_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_tx_0_coef_5_iqdc_tx_0_fir_coeff_17_setf(struct cl_chip *chip, u16 iqdctx0fircoeff17)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff17 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_5_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_5_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdctx0fircoeff17 << 23));
}

static inline u16 riu_iqdc_tx_0_coef_5_iqdc_tx_0_fir_coeff_16_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_5_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_tx_0_coef_5_iqdc_tx_0_fir_coeff_16_setf(struct cl_chip *chip, u16 iqdctx0fircoeff16)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff16 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_5_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_5_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdctx0fircoeff16 << 12));
}

static inline u16 riu_iqdc_tx_0_coef_5_iqdc_tx_0_fir_coeff_15_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_5_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_tx_0_coef_5_iqdc_tx_0_fir_coeff_15_setf(struct cl_chip *chip, u16 iqdctx0fircoeff15)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff15 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_5_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_5_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdctx0fircoeff15 << 0));
}

/**
 * @brief IQDC_TX_0_COEF_6 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_tx0_fir_coeff_20     0x0
 *    20:12 iqdc_tx0_fir_coeff_19     0x0
 *    08:00 iqdc_tx0_fir_coeff_18     0x0
 * </pre>
 */
#define RIU_IQDC_TX_0_COEF_6_ADDR        (REG_RIU_BASE_ADDR + 0x00000860)
#define RIU_IQDC_TX_0_COEF_6_OFFSET      0x00000860
#define RIU_IQDC_TX_0_COEF_6_INDEX       0x00000218
#define RIU_IQDC_TX_0_COEF_6_RESET       0x00000000

static inline u32 riu_iqdc_tx_0_coef_6_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_0_COEF_6_ADDR);
}

static inline void riu_iqdc_tx_0_coef_6_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_6_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_0_COEF_6_IQDC_TX_0_FIR_COEFF_20_MASK    ((u32)0xFF800000)
#define RIU_IQDC_TX_0_COEF_6_IQDC_TX_0_FIR_COEFF_20_LSB    23
#define RIU_IQDC_TX_0_COEF_6_IQDC_TX_0_FIR_COEFF_20_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_0_COEF_6_IQDC_TX_0_FIR_COEFF_19_MASK    ((u32)0x001FF000)
#define RIU_IQDC_TX_0_COEF_6_IQDC_TX_0_FIR_COEFF_19_LSB    12
#define RIU_IQDC_TX_0_COEF_6_IQDC_TX_0_FIR_COEFF_19_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_0_COEF_6_IQDC_TX_0_FIR_COEFF_18_MASK    ((u32)0x000001FF)
#define RIU_IQDC_TX_0_COEF_6_IQDC_TX_0_FIR_COEFF_18_LSB    0
#define RIU_IQDC_TX_0_COEF_6_IQDC_TX_0_FIR_COEFF_18_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_TX_0_COEF_6_IQDC_TX_0_FIR_COEFF_20_RST    0x0
#define RIU_IQDC_TX_0_COEF_6_IQDC_TX_0_FIR_COEFF_19_RST    0x0
#define RIU_IQDC_TX_0_COEF_6_IQDC_TX_0_FIR_COEFF_18_RST    0x0

static inline void riu_iqdc_tx_0_coef_6_pack(struct cl_chip *chip, u16 iqdc_tx0_fir_coeff_20, u16 iqdc_tx0_fir_coeff_19, u16 iqdc_tx0_fir_coeff_18)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_20 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_19 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx0_fir_coeff_18 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_6_ADDR, ((u32)iqdc_tx0_fir_coeff_20 << 23) | ((u32)iqdc_tx0_fir_coeff_19 << 12) | ((u32)iqdc_tx0_fir_coeff_18 << 0));
}

static inline void riu_iqdc_tx_0_coef_6_unpack(struct cl_chip *chip, u16 *iqdc_tx0_fir_coeff_20, u16 *iqdc_tx0_fir_coeff_19, u16 *iqdc_tx0_fir_coeff_18)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_6_ADDR);

	*iqdc_tx0_fir_coeff_20 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_tx0_fir_coeff_19 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_tx0_fir_coeff_18 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_tx_0_coef_6_iqdc_tx_0_fir_coeff_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_6_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_tx_0_coef_6_iqdc_tx_0_fir_coeff_20_setf(struct cl_chip *chip, u16 iqdctx0fircoeff20)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff20 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_6_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_6_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdctx0fircoeff20 << 23));
}

static inline u16 riu_iqdc_tx_0_coef_6_iqdc_tx_0_fir_coeff_19_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_6_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_tx_0_coef_6_iqdc_tx_0_fir_coeff_19_setf(struct cl_chip *chip, u16 iqdctx0fircoeff19)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff19 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_6_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_6_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdctx0fircoeff19 << 12));
}

static inline u16 riu_iqdc_tx_0_coef_6_iqdc_tx_0_fir_coeff_18_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_0_COEF_6_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_tx_0_coef_6_iqdc_tx_0_fir_coeff_18_setf(struct cl_chip *chip, u16 iqdctx0fircoeff18)
{
	ASSERT_ERR_CHIP((((u32)iqdctx0fircoeff18 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_0_COEF_6_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_0_COEF_6_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdctx0fircoeff18 << 0));
}

/**
 * @brief IQDC_TX_1_COEF_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_tx1_fir_coeff_14     0x0
 *    20:12 iqdc_tx1_fir_coeff_13     0x0
 *    08:00 iqdc_tx1_fir_coeff_12     0x0
 * </pre>
 */
#define RIU_IQDC_TX_1_COEF_4_ADDR        (REG_RIU_BASE_ADDR + 0x00000878)
#define RIU_IQDC_TX_1_COEF_4_OFFSET      0x00000878
#define RIU_IQDC_TX_1_COEF_4_INDEX       0x0000021E
#define RIU_IQDC_TX_1_COEF_4_RESET       0x00000000

static inline u32 riu_iqdc_tx_1_coef_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_1_COEF_4_ADDR);
}

static inline void riu_iqdc_tx_1_coef_4_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_4_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_1_COEF_4_IQDC_TX_1_FIR_COEFF_14_MASK    ((u32)0xFF800000)
#define RIU_IQDC_TX_1_COEF_4_IQDC_TX_1_FIR_COEFF_14_LSB    23
#define RIU_IQDC_TX_1_COEF_4_IQDC_TX_1_FIR_COEFF_14_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_1_COEF_4_IQDC_TX_1_FIR_COEFF_13_MASK    ((u32)0x001FF000)
#define RIU_IQDC_TX_1_COEF_4_IQDC_TX_1_FIR_COEFF_13_LSB    12
#define RIU_IQDC_TX_1_COEF_4_IQDC_TX_1_FIR_COEFF_13_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_1_COEF_4_IQDC_TX_1_FIR_COEFF_12_MASK    ((u32)0x000001FF)
#define RIU_IQDC_TX_1_COEF_4_IQDC_TX_1_FIR_COEFF_12_LSB    0
#define RIU_IQDC_TX_1_COEF_4_IQDC_TX_1_FIR_COEFF_12_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_TX_1_COEF_4_IQDC_TX_1_FIR_COEFF_14_RST    0x0
#define RIU_IQDC_TX_1_COEF_4_IQDC_TX_1_FIR_COEFF_13_RST    0x0
#define RIU_IQDC_TX_1_COEF_4_IQDC_TX_1_FIR_COEFF_12_RST    0x0

static inline void riu_iqdc_tx_1_coef_4_pack(struct cl_chip *chip, u16 iqdc_tx1_fir_coeff_14, u16 iqdc_tx1_fir_coeff_13, u16 iqdc_tx1_fir_coeff_12)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_14 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_13 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_12 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_4_ADDR, ((u32)iqdc_tx1_fir_coeff_14 << 23) | ((u32)iqdc_tx1_fir_coeff_13 << 12) | ((u32)iqdc_tx1_fir_coeff_12 << 0));
}

static inline void riu_iqdc_tx_1_coef_4_unpack(struct cl_chip *chip, u16 *iqdc_tx1_fir_coeff_14, u16 *iqdc_tx1_fir_coeff_13, u16 *iqdc_tx1_fir_coeff_12)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_4_ADDR);

	*iqdc_tx1_fir_coeff_14 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_tx1_fir_coeff_13 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_tx1_fir_coeff_12 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_tx_1_coef_4_iqdc_tx_1_fir_coeff_14_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_4_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_tx_1_coef_4_iqdc_tx_1_fir_coeff_14_setf(struct cl_chip *chip, u16 iqdctx1fircoeff14)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff14 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_4_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_4_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdctx1fircoeff14 << 23));
}

static inline u16 riu_iqdc_tx_1_coef_4_iqdc_tx_1_fir_coeff_13_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_4_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_tx_1_coef_4_iqdc_tx_1_fir_coeff_13_setf(struct cl_chip *chip, u16 iqdctx1fircoeff13)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff13 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_4_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_4_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdctx1fircoeff13 << 12));
}

static inline u16 riu_iqdc_tx_1_coef_4_iqdc_tx_1_fir_coeff_12_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_4_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_tx_1_coef_4_iqdc_tx_1_fir_coeff_12_setf(struct cl_chip *chip, u16 iqdctx1fircoeff12)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff12 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_4_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_4_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdctx1fircoeff12 << 0));
}

/**
 * @brief IQDC_TX_1_COEF_5 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_tx1_fir_coeff_17     0x0
 *    20:12 iqdc_tx1_fir_coeff_16     0x0
 *    08:00 iqdc_tx1_fir_coeff_15     0x0
 * </pre>
 */
#define RIU_IQDC_TX_1_COEF_5_ADDR        (REG_RIU_BASE_ADDR + 0x0000087C)
#define RIU_IQDC_TX_1_COEF_5_OFFSET      0x0000087C
#define RIU_IQDC_TX_1_COEF_5_INDEX       0x0000021F
#define RIU_IQDC_TX_1_COEF_5_RESET       0x00000000

static inline u32 riu_iqdc_tx_1_coef_5_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_1_COEF_5_ADDR);
}

static inline void riu_iqdc_tx_1_coef_5_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_5_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_1_COEF_5_IQDC_TX_1_FIR_COEFF_17_MASK    ((u32)0xFF800000)
#define RIU_IQDC_TX_1_COEF_5_IQDC_TX_1_FIR_COEFF_17_LSB    23
#define RIU_IQDC_TX_1_COEF_5_IQDC_TX_1_FIR_COEFF_17_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_1_COEF_5_IQDC_TX_1_FIR_COEFF_16_MASK    ((u32)0x001FF000)
#define RIU_IQDC_TX_1_COEF_5_IQDC_TX_1_FIR_COEFF_16_LSB    12
#define RIU_IQDC_TX_1_COEF_5_IQDC_TX_1_FIR_COEFF_16_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_1_COEF_5_IQDC_TX_1_FIR_COEFF_15_MASK    ((u32)0x000001FF)
#define RIU_IQDC_TX_1_COEF_5_IQDC_TX_1_FIR_COEFF_15_LSB    0
#define RIU_IQDC_TX_1_COEF_5_IQDC_TX_1_FIR_COEFF_15_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_TX_1_COEF_5_IQDC_TX_1_FIR_COEFF_17_RST    0x0
#define RIU_IQDC_TX_1_COEF_5_IQDC_TX_1_FIR_COEFF_16_RST    0x0
#define RIU_IQDC_TX_1_COEF_5_IQDC_TX_1_FIR_COEFF_15_RST    0x0

static inline void riu_iqdc_tx_1_coef_5_pack(struct cl_chip *chip, u16 iqdc_tx1_fir_coeff_17, u16 iqdc_tx1_fir_coeff_16, u16 iqdc_tx1_fir_coeff_15)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_17 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_16 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_15 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_5_ADDR, ((u32)iqdc_tx1_fir_coeff_17 << 23) | ((u32)iqdc_tx1_fir_coeff_16 << 12) | ((u32)iqdc_tx1_fir_coeff_15 << 0));
}

static inline void riu_iqdc_tx_1_coef_5_unpack(struct cl_chip *chip, u16 *iqdc_tx1_fir_coeff_17, u16 *iqdc_tx1_fir_coeff_16, u16 *iqdc_tx1_fir_coeff_15)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_5_ADDR);

	*iqdc_tx1_fir_coeff_17 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_tx1_fir_coeff_16 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_tx1_fir_coeff_15 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_tx_1_coef_5_iqdc_tx_1_fir_coeff_17_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_5_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_tx_1_coef_5_iqdc_tx_1_fir_coeff_17_setf(struct cl_chip *chip, u16 iqdctx1fircoeff17)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff17 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_5_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_5_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdctx1fircoeff17 << 23));
}

static inline u16 riu_iqdc_tx_1_coef_5_iqdc_tx_1_fir_coeff_16_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_5_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_tx_1_coef_5_iqdc_tx_1_fir_coeff_16_setf(struct cl_chip *chip, u16 iqdctx1fircoeff16)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff16 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_5_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_5_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdctx1fircoeff16 << 12));
}

static inline u16 riu_iqdc_tx_1_coef_5_iqdc_tx_1_fir_coeff_15_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_5_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_tx_1_coef_5_iqdc_tx_1_fir_coeff_15_setf(struct cl_chip *chip, u16 iqdctx1fircoeff15)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff15 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_5_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_5_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdctx1fircoeff15 << 0));
}

/**
 * @brief IQDC_TX_1_COEF_6 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 iqdc_tx1_fir_coeff_20     0x0
 *    20:12 iqdc_tx1_fir_coeff_19     0x0
 *    08:00 iqdc_tx1_fir_coeff_18     0x0
 * </pre>
 */
#define RIU_IQDC_TX_1_COEF_6_ADDR        (REG_RIU_BASE_ADDR + 0x00000880)
#define RIU_IQDC_TX_1_COEF_6_OFFSET      0x00000880
#define RIU_IQDC_TX_1_COEF_6_INDEX       0x00000220
#define RIU_IQDC_TX_1_COEF_6_RESET       0x00000000

static inline u32 riu_iqdc_tx_1_coef_6_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_IQDC_TX_1_COEF_6_ADDR);
}

static inline void riu_iqdc_tx_1_coef_6_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_6_ADDR, value);
}

/* Field definitions */
#define RIU_IQDC_TX_1_COEF_6_IQDC_TX_1_FIR_COEFF_20_MASK    ((u32)0xFF800000)
#define RIU_IQDC_TX_1_COEF_6_IQDC_TX_1_FIR_COEFF_20_LSB    23
#define RIU_IQDC_TX_1_COEF_6_IQDC_TX_1_FIR_COEFF_20_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_1_COEF_6_IQDC_TX_1_FIR_COEFF_19_MASK    ((u32)0x001FF000)
#define RIU_IQDC_TX_1_COEF_6_IQDC_TX_1_FIR_COEFF_19_LSB    12
#define RIU_IQDC_TX_1_COEF_6_IQDC_TX_1_FIR_COEFF_19_WIDTH    ((u32)0x00000009)
#define RIU_IQDC_TX_1_COEF_6_IQDC_TX_1_FIR_COEFF_18_MASK    ((u32)0x000001FF)
#define RIU_IQDC_TX_1_COEF_6_IQDC_TX_1_FIR_COEFF_18_LSB    0
#define RIU_IQDC_TX_1_COEF_6_IQDC_TX_1_FIR_COEFF_18_WIDTH    ((u32)0x00000009)

#define RIU_IQDC_TX_1_COEF_6_IQDC_TX_1_FIR_COEFF_20_RST    0x0
#define RIU_IQDC_TX_1_COEF_6_IQDC_TX_1_FIR_COEFF_19_RST    0x0
#define RIU_IQDC_TX_1_COEF_6_IQDC_TX_1_FIR_COEFF_18_RST    0x0

static inline void riu_iqdc_tx_1_coef_6_pack(struct cl_chip *chip, u16 iqdc_tx1_fir_coeff_20, u16 iqdc_tx1_fir_coeff_19, u16 iqdc_tx1_fir_coeff_18)
{
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_20 << 23) & ~((u32)0xFF800000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_19 << 12) & ~((u32)0x001FF000)) == 0);
	ASSERT_ERR_CHIP((((u32)iqdc_tx1_fir_coeff_18 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_6_ADDR, ((u32)iqdc_tx1_fir_coeff_20 << 23) | ((u32)iqdc_tx1_fir_coeff_19 << 12) | ((u32)iqdc_tx1_fir_coeff_18 << 0));
}

static inline void riu_iqdc_tx_1_coef_6_unpack(struct cl_chip *chip, u16 *iqdc_tx1_fir_coeff_20, u16 *iqdc_tx1_fir_coeff_19, u16 *iqdc_tx1_fir_coeff_18)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_6_ADDR);

	*iqdc_tx1_fir_coeff_20 = (local_val & ((u32)0xFF800000)) >> 23;
	*iqdc_tx1_fir_coeff_19 = (local_val & ((u32)0x001FF000)) >> 12;
	*iqdc_tx1_fir_coeff_18 = (local_val & ((u32)0x000001FF)) >> 0;
}

static inline u16 riu_iqdc_tx_1_coef_6_iqdc_tx_1_fir_coeff_20_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_6_ADDR);

	return (u16)((local_val & ((u32)0xFF800000)) >> 23);
}

static inline void riu_iqdc_tx_1_coef_6_iqdc_tx_1_fir_coeff_20_setf(struct cl_chip *chip, u16 iqdctx1fircoeff20)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff20 << 23) & ~((u32)0xFF800000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_6_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_6_ADDR) & ~((u32)0xFF800000)) | ((u32)iqdctx1fircoeff20 << 23));
}

static inline u16 riu_iqdc_tx_1_coef_6_iqdc_tx_1_fir_coeff_19_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_6_ADDR);

	return (u16)((local_val & ((u32)0x001FF000)) >> 12);
}

static inline void riu_iqdc_tx_1_coef_6_iqdc_tx_1_fir_coeff_19_setf(struct cl_chip *chip, u16 iqdctx1fircoeff19)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff19 << 12) & ~((u32)0x001FF000)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_6_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_6_ADDR) & ~((u32)0x001FF000)) | ((u32)iqdctx1fircoeff19 << 12));
}

static inline u16 riu_iqdc_tx_1_coef_6_iqdc_tx_1_fir_coeff_18_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_IQDC_TX_1_COEF_6_ADDR);

	return (u16)((local_val & ((u32)0x000001FF)) >> 0);
}

static inline void riu_iqdc_tx_1_coef_6_iqdc_tx_1_fir_coeff_18_setf(struct cl_chip *chip, u16 iqdctx1fircoeff18)
{
	ASSERT_ERR_CHIP((((u32)iqdctx1fircoeff18 << 0) & ~((u32)0x000001FF)) == 0);
	cl_reg_write(chip, RIU_IQDC_TX_1_COEF_6_ADDR, (cl_reg_read(chip, RIU_IQDC_TX_1_COEF_6_ADDR) & ~((u32)0x000001FF)) | ((u32)iqdctx1fircoeff18 << 0));
}

/**
 * @brief RIU_TFU_SAT_CNT_20_P_STAT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RIU_TFU_SAT_CNT_20_P_STAT_1 0x0
 * </pre>
 */
#define RIU_RIU_TFU_SAT_CNT_20_P_STAT_1_ADDR        (REG_RIU_BASE_ADDR + 0x0000089C)
#define RIU_RIU_TFU_SAT_CNT_20_P_STAT_1_OFFSET      0x0000089C
#define RIU_RIU_TFU_SAT_CNT_20_P_STAT_1_INDEX       0x00000227
#define RIU_RIU_TFU_SAT_CNT_20_P_STAT_1_RESET       0x00000000

static inline u32 riu_riu_tfu_sat_cnt_20_p_stat_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_20_P_STAT_1_ADDR);
}

/* Field definitions */
#define RIU_RIU_TFU_SAT_CNT_20_P_STAT_1_RIU_TFU_SAT_CNT_20_P_STAT_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_RIU_TFU_SAT_CNT_20_P_STAT_1_RIU_TFU_SAT_CNT_20_P_STAT_1_LSB    0
#define RIU_RIU_TFU_SAT_CNT_20_P_STAT_1_RIU_TFU_SAT_CNT_20_P_STAT_1_WIDTH    ((u32)0x00000020)

#define RIU_RIU_TFU_SAT_CNT_20_P_STAT_1_RIU_TFU_SAT_CNT_20_P_STAT_1_RST    0x0

static inline u32 riu_riu_tfu_sat_cnt_20_p_stat_1_riu_tfu_sat_cnt_20_p_stat_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_20_P_STAT_1_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief RIU_TFU_SAT_CNT_20_S_STAT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RIU_TFU_SAT_CNT_20_S_STAT_1 0x0
 * </pre>
 */
#define RIU_RIU_TFU_SAT_CNT_20_S_STAT_1_ADDR        (REG_RIU_BASE_ADDR + 0x000008A0)
#define RIU_RIU_TFU_SAT_CNT_20_S_STAT_1_OFFSET      0x000008A0
#define RIU_RIU_TFU_SAT_CNT_20_S_STAT_1_INDEX       0x00000228
#define RIU_RIU_TFU_SAT_CNT_20_S_STAT_1_RESET       0x00000000

static inline u32 riu_riu_tfu_sat_cnt_20_s_stat_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_20_S_STAT_1_ADDR);
}

/* Field definitions */
#define RIU_RIU_TFU_SAT_CNT_20_S_STAT_1_RIU_TFU_SAT_CNT_20_S_STAT_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_RIU_TFU_SAT_CNT_20_S_STAT_1_RIU_TFU_SAT_CNT_20_S_STAT_1_LSB    0
#define RIU_RIU_TFU_SAT_CNT_20_S_STAT_1_RIU_TFU_SAT_CNT_20_S_STAT_1_WIDTH    ((u32)0x00000020)

#define RIU_RIU_TFU_SAT_CNT_20_S_STAT_1_RIU_TFU_SAT_CNT_20_S_STAT_1_RST    0x0

static inline u32 riu_riu_tfu_sat_cnt_20_s_stat_1_riu_tfu_sat_cnt_20_s_stat_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_20_S_STAT_1_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief RIU_TFU_SAT_CNT_40_STAT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RIU_TFU_SAT_CNT_40_STAT_1 0x0
 * </pre>
 */
#define RIU_RIU_TFU_SAT_CNT_40_STAT_1_ADDR        (REG_RIU_BASE_ADDR + 0x000008A4)
#define RIU_RIU_TFU_SAT_CNT_40_STAT_1_OFFSET      0x000008A4
#define RIU_RIU_TFU_SAT_CNT_40_STAT_1_INDEX       0x00000229
#define RIU_RIU_TFU_SAT_CNT_40_STAT_1_RESET       0x00000000

static inline u32 riu_riu_tfu_sat_cnt_40_stat_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_40_STAT_1_ADDR);
}

/* Field definitions */
#define RIU_RIU_TFU_SAT_CNT_40_STAT_1_RIU_TFU_SAT_CNT_40_STAT_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_RIU_TFU_SAT_CNT_40_STAT_1_RIU_TFU_SAT_CNT_40_STAT_1_LSB    0
#define RIU_RIU_TFU_SAT_CNT_40_STAT_1_RIU_TFU_SAT_CNT_40_STAT_1_WIDTH    ((u32)0x00000020)

#define RIU_RIU_TFU_SAT_CNT_40_STAT_1_RIU_TFU_SAT_CNT_40_STAT_1_RST    0x0

static inline u32 riu_riu_tfu_sat_cnt_40_stat_1_riu_tfu_sat_cnt_40_stat_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_40_STAT_1_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief RIU_TFU_SAT_CNT_80_STAT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RIU_TFU_SAT_CNT_80_STAT_1 0x0
 * </pre>
 */
#define RIU_RIU_TFU_SAT_CNT_80_STAT_1_ADDR        (REG_RIU_BASE_ADDR + 0x000008A8)
#define RIU_RIU_TFU_SAT_CNT_80_STAT_1_OFFSET      0x000008A8
#define RIU_RIU_TFU_SAT_CNT_80_STAT_1_INDEX       0x0000022A
#define RIU_RIU_TFU_SAT_CNT_80_STAT_1_RESET       0x00000000

static inline u32 riu_riu_tfu_sat_cnt_80_stat_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_80_STAT_1_ADDR);
}

/* Field definitions */
#define RIU_RIU_TFU_SAT_CNT_80_STAT_1_RIU_TFU_SAT_CNT_80_STAT_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_RIU_TFU_SAT_CNT_80_STAT_1_RIU_TFU_SAT_CNT_80_STAT_1_LSB    0
#define RIU_RIU_TFU_SAT_CNT_80_STAT_1_RIU_TFU_SAT_CNT_80_STAT_1_WIDTH    ((u32)0x00000020)

#define RIU_RIU_TFU_SAT_CNT_80_STAT_1_RIU_TFU_SAT_CNT_80_STAT_1_RST    0x0

static inline u32 riu_riu_tfu_sat_cnt_80_stat_1_riu_tfu_sat_cnt_80_stat_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_80_STAT_1_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief RIU_TFU_SAT_CNT_160_STAT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RIU_TFU_SAT_CNT_160_STAT_1 0x0
 * </pre>
 */
#define RIU_RIU_TFU_SAT_CNT_160_STAT_1_ADDR        (REG_RIU_BASE_ADDR + 0x000008AC)
#define RIU_RIU_TFU_SAT_CNT_160_STAT_1_OFFSET      0x000008AC
#define RIU_RIU_TFU_SAT_CNT_160_STAT_1_INDEX       0x0000022B
#define RIU_RIU_TFU_SAT_CNT_160_STAT_1_RESET       0x00000000

static inline u32 riu_riu_tfu_sat_cnt_160_stat_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_160_STAT_1_ADDR);
}

/* Field definitions */
#define RIU_RIU_TFU_SAT_CNT_160_STAT_1_RIU_TFU_SAT_CNT_160_STAT_1_MASK    ((u32)0xFFFFFFFF)
#define RIU_RIU_TFU_SAT_CNT_160_STAT_1_RIU_TFU_SAT_CNT_160_STAT_1_LSB    0
#define RIU_RIU_TFU_SAT_CNT_160_STAT_1_RIU_TFU_SAT_CNT_160_STAT_1_WIDTH    ((u32)0x00000020)

#define RIU_RIU_TFU_SAT_CNT_160_STAT_1_RIU_TFU_SAT_CNT_160_STAT_1_RST    0x0

static inline u32 riu_riu_tfu_sat_cnt_160_stat_1_riu_tfu_sat_cnt_160_stat_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_RIU_TFU_SAT_CNT_160_STAT_1_ADDR);

	return (u32)(local_val >> 0);
}

/**
 * @brief DPD_CONTROL_0 register definition
 *  DPD control of antenna 0 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    04    ROUND_TO_MAX_LATENCY      0
 *    03:02 SELECTED_CONF_GROUP       0x0
 *    01    BYPASS_TYPE               0
 *    00    EN                        0
 * </pre>
 */
#define RIU_DPD_CONTROL_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000900)
#define RIU_DPD_CONTROL_0_OFFSET      0x00000900
#define RIU_DPD_CONTROL_0_INDEX       0x00000240
#define RIU_DPD_CONTROL_0_RESET       0x00000000

static inline u32 riu_dpd_control_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DPD_CONTROL_0_ADDR);
}

static inline void riu_dpd_control_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_DPD_CONTROL_0_ADDR, value);
}

/* Field definitions */
#define RIU_DPD_CONTROL_0_ROUND_TO_MAX_LATENCY_BIT    ((u32)0x00000010)
#define RIU_DPD_CONTROL_0_ROUND_TO_MAX_LATENCY_POS    4
#define RIU_DPD_CONTROL_0_SELECTED_CONF_GROUP_MASK    ((u32)0x0000000C)
#define RIU_DPD_CONTROL_0_SELECTED_CONF_GROUP_LSB    2
#define RIU_DPD_CONTROL_0_SELECTED_CONF_GROUP_WIDTH    ((u32)0x00000002)
#define RIU_DPD_CONTROL_0_BYPASS_TYPE_BIT    ((u32)0x00000002)
#define RIU_DPD_CONTROL_0_BYPASS_TYPE_POS    1
#define RIU_DPD_CONTROL_0_EN_BIT            ((u32)0x00000001)
#define RIU_DPD_CONTROL_0_EN_POS            0

#define RIU_DPD_CONTROL_0_ROUND_TO_MAX_LATENCY_RST    0x0
#define RIU_DPD_CONTROL_0_SELECTED_CONF_GROUP_RST    0x0
#define RIU_DPD_CONTROL_0_BYPASS_TYPE_RST    0x0
#define RIU_DPD_CONTROL_0_EN_RST            0x0

static inline void riu_dpd_control_0_pack(struct cl_chip *chip, u8 round_to_max_latency, u8 selected_conf_group, u8 bypass_type, u8 en)
{
	ASSERT_ERR_CHIP((((u32)round_to_max_latency << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)selected_conf_group << 2) & ~((u32)0x0000000C)) == 0);
	ASSERT_ERR_CHIP((((u32)bypass_type << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_DPD_CONTROL_0_ADDR, ((u32)round_to_max_latency << 4) | ((u32)selected_conf_group << 2) | ((u32)bypass_type << 1) | ((u32)en << 0));
}

static inline void riu_dpd_control_0_unpack(struct cl_chip *chip, u8 *round_to_max_latency, u8 *selected_conf_group, u8 *bypass_type, u8 *en)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CONTROL_0_ADDR);

	*round_to_max_latency = (local_val & ((u32)0x00000010)) >> 4;
	*selected_conf_group = (local_val & ((u32)0x0000000C)) >> 2;
	*bypass_type = (local_val & ((u32)0x00000002)) >> 1;
	*en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_dpd_control_0_round_to_max_latency_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CONTROL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void riu_dpd_control_0_round_to_max_latency_setf(struct cl_chip *chip, u8 roundtomaxlatency)
{
	ASSERT_ERR_CHIP((((u32)roundtomaxlatency << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RIU_DPD_CONTROL_0_ADDR, (cl_reg_read(chip, RIU_DPD_CONTROL_0_ADDR) & ~((u32)0x00000010)) | ((u32)roundtomaxlatency << 4));
}

static inline u8 riu_dpd_control_0_selected_conf_group_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CONTROL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000000C)) >> 2);
}

static inline void riu_dpd_control_0_selected_conf_group_setf(struct cl_chip *chip, u8 selectedconfgroup)
{
	ASSERT_ERR_CHIP((((u32)selectedconfgroup << 2) & ~((u32)0x0000000C)) == 0);
	cl_reg_write(chip, RIU_DPD_CONTROL_0_ADDR, (cl_reg_read(chip, RIU_DPD_CONTROL_0_ADDR) & ~((u32)0x0000000C)) | ((u32)selectedconfgroup << 2));
}

static inline u8 riu_dpd_control_0_bypass_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CONTROL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void riu_dpd_control_0_bypass_type_setf(struct cl_chip *chip, u8 bypasstype)
{
	ASSERT_ERR_CHIP((((u32)bypasstype << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_DPD_CONTROL_0_ADDR, (cl_reg_read(chip, RIU_DPD_CONTROL_0_ADDR) & ~((u32)0x00000002)) | ((u32)bypasstype << 1));
}

static inline u8 riu_dpd_control_0_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CONTROL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_dpd_control_0_en_setf(struct cl_chip *chip, u8 en)
{
	ASSERT_ERR_CHIP((((u32)en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_DPD_CONTROL_0_ADDR, (cl_reg_read(chip, RIU_DPD_CONTROL_0_ADDR) & ~((u32)0x00000001)) | ((u32)en << 0));
}

/**
 * @brief DPD_CONTROL_1 register definition
 *  DPD control of antenna 1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    04    ROUND_TO_MAX_LATENCY      0
 *    03:02 SELECTED_CONF_GROUP       0x0
 *    01    BYPASS_TYPE               0
 *    00    EN                        0
 * </pre>
 */
#define RIU_DPD_CONTROL_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000904)
#define RIU_DPD_CONTROL_1_OFFSET      0x00000904
#define RIU_DPD_CONTROL_1_INDEX       0x00000241
#define RIU_DPD_CONTROL_1_RESET       0x00000000

static inline u32 riu_dpd_control_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DPD_CONTROL_1_ADDR);
}

static inline void riu_dpd_control_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_DPD_CONTROL_1_ADDR, value);
}

/* Field definitions */
#define RIU_DPD_CONTROL_1_ROUND_TO_MAX_LATENCY_BIT    ((u32)0x00000010)
#define RIU_DPD_CONTROL_1_ROUND_TO_MAX_LATENCY_POS    4
#define RIU_DPD_CONTROL_1_SELECTED_CONF_GROUP_MASK    ((u32)0x0000000C)
#define RIU_DPD_CONTROL_1_SELECTED_CONF_GROUP_LSB    2
#define RIU_DPD_CONTROL_1_SELECTED_CONF_GROUP_WIDTH    ((u32)0x00000002)
#define RIU_DPD_CONTROL_1_BYPASS_TYPE_BIT    ((u32)0x00000002)
#define RIU_DPD_CONTROL_1_BYPASS_TYPE_POS    1
#define RIU_DPD_CONTROL_1_EN_BIT            ((u32)0x00000001)
#define RIU_DPD_CONTROL_1_EN_POS            0

#define RIU_DPD_CONTROL_1_ROUND_TO_MAX_LATENCY_RST    0x0
#define RIU_DPD_CONTROL_1_SELECTED_CONF_GROUP_RST    0x0
#define RIU_DPD_CONTROL_1_BYPASS_TYPE_RST    0x0
#define RIU_DPD_CONTROL_1_EN_RST            0x0

static inline void riu_dpd_control_1_pack(struct cl_chip *chip, u8 round_to_max_latency, u8 selected_conf_group, u8 bypass_type, u8 en)
{
	ASSERT_ERR_CHIP((((u32)round_to_max_latency << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)selected_conf_group << 2) & ~((u32)0x0000000C)) == 0);
	ASSERT_ERR_CHIP((((u32)bypass_type << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_DPD_CONTROL_1_ADDR, ((u32)round_to_max_latency << 4) | ((u32)selected_conf_group << 2) | ((u32)bypass_type << 1) | ((u32)en << 0));
}

static inline void riu_dpd_control_1_unpack(struct cl_chip *chip, u8 *round_to_max_latency, u8 *selected_conf_group, u8 *bypass_type, u8 *en)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CONTROL_1_ADDR);

	*round_to_max_latency = (local_val & ((u32)0x00000010)) >> 4;
	*selected_conf_group = (local_val & ((u32)0x0000000C)) >> 2;
	*bypass_type = (local_val & ((u32)0x00000002)) >> 1;
	*en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 riu_dpd_control_1_round_to_max_latency_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CONTROL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void riu_dpd_control_1_round_to_max_latency_setf(struct cl_chip *chip, u8 roundtomaxlatency)
{
	ASSERT_ERR_CHIP((((u32)roundtomaxlatency << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RIU_DPD_CONTROL_1_ADDR, (cl_reg_read(chip, RIU_DPD_CONTROL_1_ADDR) & ~((u32)0x00000010)) | ((u32)roundtomaxlatency << 4));
}

static inline u8 riu_dpd_control_1_selected_conf_group_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CONTROL_1_ADDR);

	return (u8)((local_val & ((u32)0x0000000C)) >> 2);
}

static inline void riu_dpd_control_1_selected_conf_group_setf(struct cl_chip *chip, u8 selectedconfgroup)
{
	ASSERT_ERR_CHIP((((u32)selectedconfgroup << 2) & ~((u32)0x0000000C)) == 0);
	cl_reg_write(chip, RIU_DPD_CONTROL_1_ADDR, (cl_reg_read(chip, RIU_DPD_CONTROL_1_ADDR) & ~((u32)0x0000000C)) | ((u32)selectedconfgroup << 2));
}

static inline u8 riu_dpd_control_1_bypass_type_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CONTROL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void riu_dpd_control_1_bypass_type_setf(struct cl_chip *chip, u8 bypasstype)
{
	ASSERT_ERR_CHIP((((u32)bypasstype << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RIU_DPD_CONTROL_1_ADDR, (cl_reg_read(chip, RIU_DPD_CONTROL_1_ADDR) & ~((u32)0x00000002)) | ((u32)bypasstype << 1));
}

static inline u8 riu_dpd_control_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CONTROL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void riu_dpd_control_1_en_setf(struct cl_chip *chip, u8 en)
{
	ASSERT_ERR_CHIP((((u32)en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RIU_DPD_CONTROL_1_ADDR, (cl_reg_read(chip, RIU_DPD_CONTROL_1_ADDR) & ~((u32)0x00000001)) | ((u32)en << 0));
}

/**
 * @brief DPD_GAIN_0 register definition
 *  DPD gain conf of antenna 0 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25:24 OUT_GAIN_SHIFT            0x0
 *    22:16 OUT_GAIN_MULT             0x0
 *    09:08 IN_GAIN_SHIFT             0x0
 *    06:00 IN_GAIN_MULT              0x0
 * </pre>
 */
#define RIU_DPD_GAIN_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000920)
#define RIU_DPD_GAIN_0_OFFSET      0x00000920
#define RIU_DPD_GAIN_0_INDEX       0x00000248
#define RIU_DPD_GAIN_0_RESET       0x00000000

static inline u32 riu_dpd_gain_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DPD_GAIN_0_ADDR);
}

static inline void riu_dpd_gain_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_DPD_GAIN_0_ADDR, value);
}

/* Field definitions */
#define RIU_DPD_GAIN_0_OUT_GAIN_SHIFT_MASK    ((u32)0x03000000)
#define RIU_DPD_GAIN_0_OUT_GAIN_SHIFT_LSB    24
#define RIU_DPD_GAIN_0_OUT_GAIN_SHIFT_WIDTH    ((u32)0x00000002)
#define RIU_DPD_GAIN_0_OUT_GAIN_MULT_MASK    ((u32)0x007F0000)
#define RIU_DPD_GAIN_0_OUT_GAIN_MULT_LSB    16
#define RIU_DPD_GAIN_0_OUT_GAIN_MULT_WIDTH    ((u32)0x00000007)
#define RIU_DPD_GAIN_0_IN_GAIN_SHIFT_MASK    ((u32)0x00000300)
#define RIU_DPD_GAIN_0_IN_GAIN_SHIFT_LSB    8
#define RIU_DPD_GAIN_0_IN_GAIN_SHIFT_WIDTH    ((u32)0x00000002)
#define RIU_DPD_GAIN_0_IN_GAIN_MULT_MASK    ((u32)0x0000007F)
#define RIU_DPD_GAIN_0_IN_GAIN_MULT_LSB     0
#define RIU_DPD_GAIN_0_IN_GAIN_MULT_WIDTH    ((u32)0x00000007)

#define RIU_DPD_GAIN_0_OUT_GAIN_SHIFT_RST    0x0
#define RIU_DPD_GAIN_0_OUT_GAIN_MULT_RST    0x0
#define RIU_DPD_GAIN_0_IN_GAIN_SHIFT_RST    0x0
#define RIU_DPD_GAIN_0_IN_GAIN_MULT_RST     0x0

static inline void riu_dpd_gain_0_pack(struct cl_chip *chip, u8 out_gain_shift, u8 out_gain_mult, u8 in_gain_shift, u8 in_gain_mult)
{
	ASSERT_ERR_CHIP((((u32)out_gain_shift << 24) & ~((u32)0x03000000)) == 0);
	ASSERT_ERR_CHIP((((u32)out_gain_mult << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)in_gain_shift << 8) & ~((u32)0x00000300)) == 0);
	ASSERT_ERR_CHIP((((u32)in_gain_mult << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_DPD_GAIN_0_ADDR, ((u32)out_gain_shift << 24) | ((u32)out_gain_mult << 16) | ((u32)in_gain_shift << 8) | ((u32)in_gain_mult << 0));
}

static inline void riu_dpd_gain_0_unpack(struct cl_chip *chip, u8 *out_gain_shift, u8 *out_gain_mult, u8 *in_gain_shift, u8 *in_gain_mult)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GAIN_0_ADDR);

	*out_gain_shift = (local_val & ((u32)0x03000000)) >> 24;
	*out_gain_mult = (local_val & ((u32)0x007F0000)) >> 16;
	*in_gain_shift = (local_val & ((u32)0x00000300)) >> 8;
	*in_gain_mult = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_dpd_gain_0_out_gain_shift_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GAIN_0_ADDR);

	return (u8)((local_val & ((u32)0x03000000)) >> 24);
}

static inline void riu_dpd_gain_0_out_gain_shift_setf(struct cl_chip *chip, u8 outgainshift)
{
	ASSERT_ERR_CHIP((((u32)outgainshift << 24) & ~((u32)0x03000000)) == 0);
	cl_reg_write(chip, RIU_DPD_GAIN_0_ADDR, (cl_reg_read(chip, RIU_DPD_GAIN_0_ADDR) & ~((u32)0x03000000)) | ((u32)outgainshift << 24));
}

static inline u8 riu_dpd_gain_0_out_gain_mult_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GAIN_0_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_dpd_gain_0_out_gain_mult_setf(struct cl_chip *chip, u8 outgainmult)
{
	ASSERT_ERR_CHIP((((u32)outgainmult << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_DPD_GAIN_0_ADDR, (cl_reg_read(chip, RIU_DPD_GAIN_0_ADDR) & ~((u32)0x007F0000)) | ((u32)outgainmult << 16));
}

static inline u8 riu_dpd_gain_0_in_gain_shift_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GAIN_0_ADDR);

	return (u8)((local_val & ((u32)0x00000300)) >> 8);
}

static inline void riu_dpd_gain_0_in_gain_shift_setf(struct cl_chip *chip, u8 ingainshift)
{
	ASSERT_ERR_CHIP((((u32)ingainshift << 8) & ~((u32)0x00000300)) == 0);
	cl_reg_write(chip, RIU_DPD_GAIN_0_ADDR, (cl_reg_read(chip, RIU_DPD_GAIN_0_ADDR) & ~((u32)0x00000300)) | ((u32)ingainshift << 8));
}

static inline u8 riu_dpd_gain_0_in_gain_mult_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GAIN_0_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_dpd_gain_0_in_gain_mult_setf(struct cl_chip *chip, u8 ingainmult)
{
	ASSERT_ERR_CHIP((((u32)ingainmult << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_DPD_GAIN_0_ADDR, (cl_reg_read(chip, RIU_DPD_GAIN_0_ADDR) & ~((u32)0x0000007F)) | ((u32)ingainmult << 0));
}

/**
 * @brief DPD_GAIN_1 register definition
 *  DPD gain conf of antenna 1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25:24 OUT_GAIN_SHIFT            0x0
 *    22:16 OUT_GAIN_MULT             0x0
 *    09:08 IN_GAIN_SHIFT             0x0
 *    06:00 IN_GAIN_MULT              0x0
 * </pre>
 */
#define RIU_DPD_GAIN_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000924)
#define RIU_DPD_GAIN_1_OFFSET      0x00000924
#define RIU_DPD_GAIN_1_INDEX       0x00000249
#define RIU_DPD_GAIN_1_RESET       0x00000000

static inline u32 riu_dpd_gain_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DPD_GAIN_1_ADDR);
}

static inline void riu_dpd_gain_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_DPD_GAIN_1_ADDR, value);
}

/* Field definitions */
#define RIU_DPD_GAIN_1_OUT_GAIN_SHIFT_MASK    ((u32)0x03000000)
#define RIU_DPD_GAIN_1_OUT_GAIN_SHIFT_LSB    24
#define RIU_DPD_GAIN_1_OUT_GAIN_SHIFT_WIDTH    ((u32)0x00000002)
#define RIU_DPD_GAIN_1_OUT_GAIN_MULT_MASK    ((u32)0x007F0000)
#define RIU_DPD_GAIN_1_OUT_GAIN_MULT_LSB    16
#define RIU_DPD_GAIN_1_OUT_GAIN_MULT_WIDTH    ((u32)0x00000007)
#define RIU_DPD_GAIN_1_IN_GAIN_SHIFT_MASK    ((u32)0x00000300)
#define RIU_DPD_GAIN_1_IN_GAIN_SHIFT_LSB    8
#define RIU_DPD_GAIN_1_IN_GAIN_SHIFT_WIDTH    ((u32)0x00000002)
#define RIU_DPD_GAIN_1_IN_GAIN_MULT_MASK    ((u32)0x0000007F)
#define RIU_DPD_GAIN_1_IN_GAIN_MULT_LSB     0
#define RIU_DPD_GAIN_1_IN_GAIN_MULT_WIDTH    ((u32)0x00000007)

#define RIU_DPD_GAIN_1_OUT_GAIN_SHIFT_RST    0x0
#define RIU_DPD_GAIN_1_OUT_GAIN_MULT_RST    0x0
#define RIU_DPD_GAIN_1_IN_GAIN_SHIFT_RST    0x0
#define RIU_DPD_GAIN_1_IN_GAIN_MULT_RST     0x0

static inline void riu_dpd_gain_1_pack(struct cl_chip *chip, u8 out_gain_shift, u8 out_gain_mult, u8 in_gain_shift, u8 in_gain_mult)
{
	ASSERT_ERR_CHIP((((u32)out_gain_shift << 24) & ~((u32)0x03000000)) == 0);
	ASSERT_ERR_CHIP((((u32)out_gain_mult << 16) & ~((u32)0x007F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)in_gain_shift << 8) & ~((u32)0x00000300)) == 0);
	ASSERT_ERR_CHIP((((u32)in_gain_mult << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_DPD_GAIN_1_ADDR, ((u32)out_gain_shift << 24) | ((u32)out_gain_mult << 16) | ((u32)in_gain_shift << 8) | ((u32)in_gain_mult << 0));
}

static inline void riu_dpd_gain_1_unpack(struct cl_chip *chip, u8 *out_gain_shift, u8 *out_gain_mult, u8 *in_gain_shift, u8 *in_gain_mult)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GAIN_1_ADDR);

	*out_gain_shift = (local_val & ((u32)0x03000000)) >> 24;
	*out_gain_mult = (local_val & ((u32)0x007F0000)) >> 16;
	*in_gain_shift = (local_val & ((u32)0x00000300)) >> 8;
	*in_gain_mult = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_dpd_gain_1_out_gain_shift_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GAIN_1_ADDR);

	return (u8)((local_val & ((u32)0x03000000)) >> 24);
}

static inline void riu_dpd_gain_1_out_gain_shift_setf(struct cl_chip *chip, u8 outgainshift)
{
	ASSERT_ERR_CHIP((((u32)outgainshift << 24) & ~((u32)0x03000000)) == 0);
	cl_reg_write(chip, RIU_DPD_GAIN_1_ADDR, (cl_reg_read(chip, RIU_DPD_GAIN_1_ADDR) & ~((u32)0x03000000)) | ((u32)outgainshift << 24));
}

static inline u8 riu_dpd_gain_1_out_gain_mult_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GAIN_1_ADDR);

	return (u8)((local_val & ((u32)0x007F0000)) >> 16);
}

static inline void riu_dpd_gain_1_out_gain_mult_setf(struct cl_chip *chip, u8 outgainmult)
{
	ASSERT_ERR_CHIP((((u32)outgainmult << 16) & ~((u32)0x007F0000)) == 0);
	cl_reg_write(chip, RIU_DPD_GAIN_1_ADDR, (cl_reg_read(chip, RIU_DPD_GAIN_1_ADDR) & ~((u32)0x007F0000)) | ((u32)outgainmult << 16));
}

static inline u8 riu_dpd_gain_1_in_gain_shift_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GAIN_1_ADDR);

	return (u8)((local_val & ((u32)0x00000300)) >> 8);
}

static inline void riu_dpd_gain_1_in_gain_shift_setf(struct cl_chip *chip, u8 ingainshift)
{
	ASSERT_ERR_CHIP((((u32)ingainshift << 8) & ~((u32)0x00000300)) == 0);
	cl_reg_write(chip, RIU_DPD_GAIN_1_ADDR, (cl_reg_read(chip, RIU_DPD_GAIN_1_ADDR) & ~((u32)0x00000300)) | ((u32)ingainshift << 8));
}

static inline u8 riu_dpd_gain_1_in_gain_mult_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GAIN_1_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_dpd_gain_1_in_gain_mult_setf(struct cl_chip *chip, u8 ingainmult)
{
	ASSERT_ERR_CHIP((((u32)ingainmult << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_DPD_GAIN_1_ADDR, (cl_reg_read(chip, RIU_DPD_GAIN_1_ADDR) & ~((u32)0x0000007F)) | ((u32)ingainmult << 0));
}

/**
 * @brief DPD_CHAIN_SIZE_0 register definition
 *  DPD G chain size four conf groups of antenna 0 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 G_CHAIN_MAJOR_NODE_CONF_GROUP_3 0x0
 *    27:24 G_CHAIN_MAJOR_NODE_CONF_GROUP_2 0x0
 *    23:20 G_CHAIN_MAJOR_NODE_CONF_GROUP_1 0x0
 *    19:16 G_CHAIN_MAJOR_NODE_CONF_GROUP_0 0x0
 *    15:12 G_CHAIN_EXIT_NODE_CONF_GROUP_3 0x0
 *    11:08 G_CHAIN_EXIT_NODE_CONF_GROUP_2 0x0
 *    07:04 G_CHAIN_EXIT_NODE_CONF_GROUP_1 0x0
 *    03:00 G_CHAIN_EXIT_NODE_CONF_GROUP_0 0x0
 * </pre>
 */
#define RIU_DPD_CHAIN_SIZE_0_ADDR        (REG_RIU_BASE_ADDR + 0x00000940)
#define RIU_DPD_CHAIN_SIZE_0_OFFSET      0x00000940
#define RIU_DPD_CHAIN_SIZE_0_INDEX       0x00000250
#define RIU_DPD_CHAIN_SIZE_0_RESET       0x00000000

static inline u32 riu_dpd_chain_size_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR);
}

static inline void riu_dpd_chain_size_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_0_ADDR, value);
}

/* Field definitions */
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_MAJOR_NODE_CONF_GROUP_3_MASK    ((u32)0xF0000000)
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_MAJOR_NODE_CONF_GROUP_3_LSB    28
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_MAJOR_NODE_CONF_GROUP_3_WIDTH    ((u32)0x00000004)
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_MAJOR_NODE_CONF_GROUP_2_MASK    ((u32)0x0F000000)
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_MAJOR_NODE_CONF_GROUP_2_LSB    24
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_MAJOR_NODE_CONF_GROUP_2_WIDTH    ((u32)0x00000004)
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_MAJOR_NODE_CONF_GROUP_1_MASK    ((u32)0x00F00000)
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_MAJOR_NODE_CONF_GROUP_1_LSB    20
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_MAJOR_NODE_CONF_GROUP_1_WIDTH    ((u32)0x00000004)
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_MAJOR_NODE_CONF_GROUP_0_MASK    ((u32)0x000F0000)
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_MAJOR_NODE_CONF_GROUP_0_LSB    16
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_MAJOR_NODE_CONF_GROUP_0_WIDTH    ((u32)0x00000004)
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_EXIT_NODE_CONF_GROUP_3_MASK    ((u32)0x0000F000)
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_EXIT_NODE_CONF_GROUP_3_LSB    12
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_EXIT_NODE_CONF_GROUP_3_WIDTH    ((u32)0x00000004)
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_EXIT_NODE_CONF_GROUP_2_MASK    ((u32)0x00000F00)
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_EXIT_NODE_CONF_GROUP_2_LSB    8
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_EXIT_NODE_CONF_GROUP_2_WIDTH    ((u32)0x00000004)
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_EXIT_NODE_CONF_GROUP_1_MASK    ((u32)0x000000F0)
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_EXIT_NODE_CONF_GROUP_1_LSB    4
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_EXIT_NODE_CONF_GROUP_1_WIDTH    ((u32)0x00000004)
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_EXIT_NODE_CONF_GROUP_0_MASK    ((u32)0x0000000F)
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_EXIT_NODE_CONF_GROUP_0_LSB    0
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_EXIT_NODE_CONF_GROUP_0_WIDTH    ((u32)0x00000004)

#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_MAJOR_NODE_CONF_GROUP_3_RST    0x0
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_MAJOR_NODE_CONF_GROUP_2_RST    0x0
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_MAJOR_NODE_CONF_GROUP_1_RST    0x0
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_MAJOR_NODE_CONF_GROUP_0_RST    0x0
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_EXIT_NODE_CONF_GROUP_3_RST    0x0
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_EXIT_NODE_CONF_GROUP_2_RST    0x0
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_EXIT_NODE_CONF_GROUP_1_RST    0x0
#define RIU_DPD_CHAIN_SIZE_0_G_CHAIN_EXIT_NODE_CONF_GROUP_0_RST    0x0

static inline void riu_dpd_chain_size_0_pack(struct cl_chip *chip, u8 g_chain_major_node_conf_group_3, u8 g_chain_major_node_conf_group_2, u8 g_chain_major_node_conf_group_1, u8 g_chain_major_node_conf_group_0, u8 g_chain_exit_node_conf_group_3, u8 g_chain_exit_node_conf_group_2, u8 g_chain_exit_node_conf_group_1, u8 g_chain_exit_node_conf_group_0)
{
	ASSERT_ERR_CHIP((((u32)g_chain_major_node_conf_group_3 << 28) & ~((u32)0xF0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)g_chain_major_node_conf_group_2 << 24) & ~((u32)0x0F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)g_chain_major_node_conf_group_1 << 20) & ~((u32)0x00F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)g_chain_major_node_conf_group_0 << 16) & ~((u32)0x000F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)g_chain_exit_node_conf_group_3 << 12) & ~((u32)0x0000F000)) == 0);
	ASSERT_ERR_CHIP((((u32)g_chain_exit_node_conf_group_2 << 8) & ~((u32)0x00000F00)) == 0);
	ASSERT_ERR_CHIP((((u32)g_chain_exit_node_conf_group_1 << 4) & ~((u32)0x000000F0)) == 0);
	ASSERT_ERR_CHIP((((u32)g_chain_exit_node_conf_group_0 << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_0_ADDR, ((u32)g_chain_major_node_conf_group_3 << 28) | ((u32)g_chain_major_node_conf_group_2 << 24) | ((u32)g_chain_major_node_conf_group_1 << 20) | ((u32)g_chain_major_node_conf_group_0 << 16) | ((u32)g_chain_exit_node_conf_group_3 << 12) | ((u32)g_chain_exit_node_conf_group_2 << 8) | ((u32)g_chain_exit_node_conf_group_1 << 4) | ((u32)g_chain_exit_node_conf_group_0 << 0));
}

static inline void riu_dpd_chain_size_0_unpack(struct cl_chip *chip, u8 *g_chain_major_node_conf_group_3, u8 *g_chain_major_node_conf_group_2, u8 *g_chain_major_node_conf_group_1, u8 *g_chain_major_node_conf_group_0, u8 *g_chain_exit_node_conf_group_3, u8 *g_chain_exit_node_conf_group_2, u8 *g_chain_exit_node_conf_group_1, u8 *g_chain_exit_node_conf_group_0)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR);

	*g_chain_major_node_conf_group_3 = (local_val & ((u32)0xF0000000)) >> 28;
	*g_chain_major_node_conf_group_2 = (local_val & ((u32)0x0F000000)) >> 24;
	*g_chain_major_node_conf_group_1 = (local_val & ((u32)0x00F00000)) >> 20;
	*g_chain_major_node_conf_group_0 = (local_val & ((u32)0x000F0000)) >> 16;
	*g_chain_exit_node_conf_group_3 = (local_val & ((u32)0x0000F000)) >> 12;
	*g_chain_exit_node_conf_group_2 = (local_val & ((u32)0x00000F00)) >> 8;
	*g_chain_exit_node_conf_group_1 = (local_val & ((u32)0x000000F0)) >> 4;
	*g_chain_exit_node_conf_group_0 = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 riu_dpd_chain_size_0_g_chain_major_node_conf_group_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR);

	return (u8)((local_val & ((u32)0xF0000000)) >> 28);
}

static inline void riu_dpd_chain_size_0_g_chain_major_node_conf_group_3_setf(struct cl_chip *chip, u8 gchainmajornodeconfgroup3)
{
	ASSERT_ERR_CHIP((((u32)gchainmajornodeconfgroup3 << 28) & ~((u32)0xF0000000)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_0_ADDR, (cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR) & ~((u32)0xF0000000)) | ((u32)gchainmajornodeconfgroup3 << 28));
}

static inline u8 riu_dpd_chain_size_0_g_chain_major_node_conf_group_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR);

	return (u8)((local_val & ((u32)0x0F000000)) >> 24);
}

static inline void riu_dpd_chain_size_0_g_chain_major_node_conf_group_2_setf(struct cl_chip *chip, u8 gchainmajornodeconfgroup2)
{
	ASSERT_ERR_CHIP((((u32)gchainmajornodeconfgroup2 << 24) & ~((u32)0x0F000000)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_0_ADDR, (cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR) & ~((u32)0x0F000000)) | ((u32)gchainmajornodeconfgroup2 << 24));
}

static inline u8 riu_dpd_chain_size_0_g_chain_major_node_conf_group_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR);

	return (u8)((local_val & ((u32)0x00F00000)) >> 20);
}

static inline void riu_dpd_chain_size_0_g_chain_major_node_conf_group_1_setf(struct cl_chip *chip, u8 gchainmajornodeconfgroup1)
{
	ASSERT_ERR_CHIP((((u32)gchainmajornodeconfgroup1 << 20) & ~((u32)0x00F00000)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_0_ADDR, (cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR) & ~((u32)0x00F00000)) | ((u32)gchainmajornodeconfgroup1 << 20));
}

static inline u8 riu_dpd_chain_size_0_g_chain_major_node_conf_group_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR);

	return (u8)((local_val & ((u32)0x000F0000)) >> 16);
}

static inline void riu_dpd_chain_size_0_g_chain_major_node_conf_group_0_setf(struct cl_chip *chip, u8 gchainmajornodeconfgroup0)
{
	ASSERT_ERR_CHIP((((u32)gchainmajornodeconfgroup0 << 16) & ~((u32)0x000F0000)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_0_ADDR, (cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR) & ~((u32)0x000F0000)) | ((u32)gchainmajornodeconfgroup0 << 16));
}

static inline u8 riu_dpd_chain_size_0_g_chain_exit_node_conf_group_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR);

	return (u8)((local_val & ((u32)0x0000F000)) >> 12);
}

static inline void riu_dpd_chain_size_0_g_chain_exit_node_conf_group_3_setf(struct cl_chip *chip, u8 gchainexitnodeconfgroup3)
{
	ASSERT_ERR_CHIP((((u32)gchainexitnodeconfgroup3 << 12) & ~((u32)0x0000F000)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_0_ADDR, (cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR) & ~((u32)0x0000F000)) | ((u32)gchainexitnodeconfgroup3 << 12));
}

static inline u8 riu_dpd_chain_size_0_g_chain_exit_node_conf_group_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR);

	return (u8)((local_val & ((u32)0x00000F00)) >> 8);
}

static inline void riu_dpd_chain_size_0_g_chain_exit_node_conf_group_2_setf(struct cl_chip *chip, u8 gchainexitnodeconfgroup2)
{
	ASSERT_ERR_CHIP((((u32)gchainexitnodeconfgroup2 << 8) & ~((u32)0x00000F00)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_0_ADDR, (cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR) & ~((u32)0x00000F00)) | ((u32)gchainexitnodeconfgroup2 << 8));
}

static inline u8 riu_dpd_chain_size_0_g_chain_exit_node_conf_group_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR);

	return (u8)((local_val & ((u32)0x000000F0)) >> 4);
}

static inline void riu_dpd_chain_size_0_g_chain_exit_node_conf_group_1_setf(struct cl_chip *chip, u8 gchainexitnodeconfgroup1)
{
	ASSERT_ERR_CHIP((((u32)gchainexitnodeconfgroup1 << 4) & ~((u32)0x000000F0)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_0_ADDR, (cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR) & ~((u32)0x000000F0)) | ((u32)gchainexitnodeconfgroup1 << 4));
}

static inline u8 riu_dpd_chain_size_0_g_chain_exit_node_conf_group_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

static inline void riu_dpd_chain_size_0_g_chain_exit_node_conf_group_0_setf(struct cl_chip *chip, u8 gchainexitnodeconfgroup0)
{
	ASSERT_ERR_CHIP((((u32)gchainexitnodeconfgroup0 << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_0_ADDR, (cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_0_ADDR) & ~((u32)0x0000000F)) | ((u32)gchainexitnodeconfgroup0 << 0));
}

/**
 * @brief DPD_CHAIN_SIZE_1 register definition
 *  DPD G chain size four conf groups of antenna 1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 G_CHAIN_MAJOR_NODE_CONF_GROUP_3 0x0
 *    27:24 G_CHAIN_MAJOR_NODE_CONF_GROUP_2 0x0
 *    23:20 G_CHAIN_MAJOR_NODE_CONF_GROUP_1 0x0
 *    19:16 G_CHAIN_MAJOR_NODE_CONF_GROUP_0 0x0
 *    15:12 G_CHAIN_EXIT_NODE_CONF_GROUP_3 0x0
 *    11:08 G_CHAIN_EXIT_NODE_CONF_GROUP_2 0x0
 *    07:04 G_CHAIN_EXIT_NODE_CONF_GROUP_1 0x0
 *    03:00 G_CHAIN_EXIT_NODE_CONF_GROUP_0 0x0
 * </pre>
 */
#define RIU_DPD_CHAIN_SIZE_1_ADDR        (REG_RIU_BASE_ADDR + 0x00000944)
#define RIU_DPD_CHAIN_SIZE_1_OFFSET      0x00000944
#define RIU_DPD_CHAIN_SIZE_1_INDEX       0x00000251
#define RIU_DPD_CHAIN_SIZE_1_RESET       0x00000000

static inline u32 riu_dpd_chain_size_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR);
}

static inline void riu_dpd_chain_size_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_1_ADDR, value);
}

/* Field definitions */
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_MAJOR_NODE_CONF_GROUP_3_MASK    ((u32)0xF0000000)
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_MAJOR_NODE_CONF_GROUP_3_LSB    28
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_MAJOR_NODE_CONF_GROUP_3_WIDTH    ((u32)0x00000004)
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_MAJOR_NODE_CONF_GROUP_2_MASK    ((u32)0x0F000000)
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_MAJOR_NODE_CONF_GROUP_2_LSB    24
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_MAJOR_NODE_CONF_GROUP_2_WIDTH    ((u32)0x00000004)
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_MAJOR_NODE_CONF_GROUP_1_MASK    ((u32)0x00F00000)
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_MAJOR_NODE_CONF_GROUP_1_LSB    20
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_MAJOR_NODE_CONF_GROUP_1_WIDTH    ((u32)0x00000004)
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_MAJOR_NODE_CONF_GROUP_0_MASK    ((u32)0x000F0000)
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_MAJOR_NODE_CONF_GROUP_0_LSB    16
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_MAJOR_NODE_CONF_GROUP_0_WIDTH    ((u32)0x00000004)
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_EXIT_NODE_CONF_GROUP_3_MASK    ((u32)0x0000F000)
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_EXIT_NODE_CONF_GROUP_3_LSB    12
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_EXIT_NODE_CONF_GROUP_3_WIDTH    ((u32)0x00000004)
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_EXIT_NODE_CONF_GROUP_2_MASK    ((u32)0x00000F00)
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_EXIT_NODE_CONF_GROUP_2_LSB    8
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_EXIT_NODE_CONF_GROUP_2_WIDTH    ((u32)0x00000004)
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_EXIT_NODE_CONF_GROUP_1_MASK    ((u32)0x000000F0)
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_EXIT_NODE_CONF_GROUP_1_LSB    4
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_EXIT_NODE_CONF_GROUP_1_WIDTH    ((u32)0x00000004)
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_EXIT_NODE_CONF_GROUP_0_MASK    ((u32)0x0000000F)
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_EXIT_NODE_CONF_GROUP_0_LSB    0
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_EXIT_NODE_CONF_GROUP_0_WIDTH    ((u32)0x00000004)

#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_MAJOR_NODE_CONF_GROUP_3_RST    0x0
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_MAJOR_NODE_CONF_GROUP_2_RST    0x0
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_MAJOR_NODE_CONF_GROUP_1_RST    0x0
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_MAJOR_NODE_CONF_GROUP_0_RST    0x0
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_EXIT_NODE_CONF_GROUP_3_RST    0x0
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_EXIT_NODE_CONF_GROUP_2_RST    0x0
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_EXIT_NODE_CONF_GROUP_1_RST    0x0
#define RIU_DPD_CHAIN_SIZE_1_G_CHAIN_EXIT_NODE_CONF_GROUP_0_RST    0x0

static inline void riu_dpd_chain_size_1_pack(struct cl_chip *chip, u8 g_chain_major_node_conf_group_3, u8 g_chain_major_node_conf_group_2, u8 g_chain_major_node_conf_group_1, u8 g_chain_major_node_conf_group_0, u8 g_chain_exit_node_conf_group_3, u8 g_chain_exit_node_conf_group_2, u8 g_chain_exit_node_conf_group_1, u8 g_chain_exit_node_conf_group_0)
{
	ASSERT_ERR_CHIP((((u32)g_chain_major_node_conf_group_3 << 28) & ~((u32)0xF0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)g_chain_major_node_conf_group_2 << 24) & ~((u32)0x0F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)g_chain_major_node_conf_group_1 << 20) & ~((u32)0x00F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)g_chain_major_node_conf_group_0 << 16) & ~((u32)0x000F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)g_chain_exit_node_conf_group_3 << 12) & ~((u32)0x0000F000)) == 0);
	ASSERT_ERR_CHIP((((u32)g_chain_exit_node_conf_group_2 << 8) & ~((u32)0x00000F00)) == 0);
	ASSERT_ERR_CHIP((((u32)g_chain_exit_node_conf_group_1 << 4) & ~((u32)0x000000F0)) == 0);
	ASSERT_ERR_CHIP((((u32)g_chain_exit_node_conf_group_0 << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_1_ADDR, ((u32)g_chain_major_node_conf_group_3 << 28) | ((u32)g_chain_major_node_conf_group_2 << 24) | ((u32)g_chain_major_node_conf_group_1 << 20) | ((u32)g_chain_major_node_conf_group_0 << 16) | ((u32)g_chain_exit_node_conf_group_3 << 12) | ((u32)g_chain_exit_node_conf_group_2 << 8) | ((u32)g_chain_exit_node_conf_group_1 << 4) | ((u32)g_chain_exit_node_conf_group_0 << 0));
}

static inline void riu_dpd_chain_size_1_unpack(struct cl_chip *chip, u8 *g_chain_major_node_conf_group_3, u8 *g_chain_major_node_conf_group_2, u8 *g_chain_major_node_conf_group_1, u8 *g_chain_major_node_conf_group_0, u8 *g_chain_exit_node_conf_group_3, u8 *g_chain_exit_node_conf_group_2, u8 *g_chain_exit_node_conf_group_1, u8 *g_chain_exit_node_conf_group_0)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR);

	*g_chain_major_node_conf_group_3 = (local_val & ((u32)0xF0000000)) >> 28;
	*g_chain_major_node_conf_group_2 = (local_val & ((u32)0x0F000000)) >> 24;
	*g_chain_major_node_conf_group_1 = (local_val & ((u32)0x00F00000)) >> 20;
	*g_chain_major_node_conf_group_0 = (local_val & ((u32)0x000F0000)) >> 16;
	*g_chain_exit_node_conf_group_3 = (local_val & ((u32)0x0000F000)) >> 12;
	*g_chain_exit_node_conf_group_2 = (local_val & ((u32)0x00000F00)) >> 8;
	*g_chain_exit_node_conf_group_1 = (local_val & ((u32)0x000000F0)) >> 4;
	*g_chain_exit_node_conf_group_0 = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 riu_dpd_chain_size_1_g_chain_major_node_conf_group_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR);

	return (u8)((local_val & ((u32)0xF0000000)) >> 28);
}

static inline void riu_dpd_chain_size_1_g_chain_major_node_conf_group_3_setf(struct cl_chip *chip, u8 gchainmajornodeconfgroup3)
{
	ASSERT_ERR_CHIP((((u32)gchainmajornodeconfgroup3 << 28) & ~((u32)0xF0000000)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_1_ADDR, (cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR) & ~((u32)0xF0000000)) | ((u32)gchainmajornodeconfgroup3 << 28));
}

static inline u8 riu_dpd_chain_size_1_g_chain_major_node_conf_group_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR);

	return (u8)((local_val & ((u32)0x0F000000)) >> 24);
}

static inline void riu_dpd_chain_size_1_g_chain_major_node_conf_group_2_setf(struct cl_chip *chip, u8 gchainmajornodeconfgroup2)
{
	ASSERT_ERR_CHIP((((u32)gchainmajornodeconfgroup2 << 24) & ~((u32)0x0F000000)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_1_ADDR, (cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR) & ~((u32)0x0F000000)) | ((u32)gchainmajornodeconfgroup2 << 24));
}

static inline u8 riu_dpd_chain_size_1_g_chain_major_node_conf_group_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR);

	return (u8)((local_val & ((u32)0x00F00000)) >> 20);
}

static inline void riu_dpd_chain_size_1_g_chain_major_node_conf_group_1_setf(struct cl_chip *chip, u8 gchainmajornodeconfgroup1)
{
	ASSERT_ERR_CHIP((((u32)gchainmajornodeconfgroup1 << 20) & ~((u32)0x00F00000)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_1_ADDR, (cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR) & ~((u32)0x00F00000)) | ((u32)gchainmajornodeconfgroup1 << 20));
}

static inline u8 riu_dpd_chain_size_1_g_chain_major_node_conf_group_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR);

	return (u8)((local_val & ((u32)0x000F0000)) >> 16);
}

static inline void riu_dpd_chain_size_1_g_chain_major_node_conf_group_0_setf(struct cl_chip *chip, u8 gchainmajornodeconfgroup0)
{
	ASSERT_ERR_CHIP((((u32)gchainmajornodeconfgroup0 << 16) & ~((u32)0x000F0000)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_1_ADDR, (cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR) & ~((u32)0x000F0000)) | ((u32)gchainmajornodeconfgroup0 << 16));
}

static inline u8 riu_dpd_chain_size_1_g_chain_exit_node_conf_group_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR);

	return (u8)((local_val & ((u32)0x0000F000)) >> 12);
}

static inline void riu_dpd_chain_size_1_g_chain_exit_node_conf_group_3_setf(struct cl_chip *chip, u8 gchainexitnodeconfgroup3)
{
	ASSERT_ERR_CHIP((((u32)gchainexitnodeconfgroup3 << 12) & ~((u32)0x0000F000)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_1_ADDR, (cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR) & ~((u32)0x0000F000)) | ((u32)gchainexitnodeconfgroup3 << 12));
}

static inline u8 riu_dpd_chain_size_1_g_chain_exit_node_conf_group_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR);

	return (u8)((local_val & ((u32)0x00000F00)) >> 8);
}

static inline void riu_dpd_chain_size_1_g_chain_exit_node_conf_group_2_setf(struct cl_chip *chip, u8 gchainexitnodeconfgroup2)
{
	ASSERT_ERR_CHIP((((u32)gchainexitnodeconfgroup2 << 8) & ~((u32)0x00000F00)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_1_ADDR, (cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR) & ~((u32)0x00000F00)) | ((u32)gchainexitnodeconfgroup2 << 8));
}

static inline u8 riu_dpd_chain_size_1_g_chain_exit_node_conf_group_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR);

	return (u8)((local_val & ((u32)0x000000F0)) >> 4);
}

static inline void riu_dpd_chain_size_1_g_chain_exit_node_conf_group_1_setf(struct cl_chip *chip, u8 gchainexitnodeconfgroup1)
{
	ASSERT_ERR_CHIP((((u32)gchainexitnodeconfgroup1 << 4) & ~((u32)0x000000F0)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_1_ADDR, (cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR) & ~((u32)0x000000F0)) | ((u32)gchainexitnodeconfgroup1 << 4));
}

static inline u8 riu_dpd_chain_size_1_g_chain_exit_node_conf_group_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

static inline void riu_dpd_chain_size_1_g_chain_exit_node_conf_group_0_setf(struct cl_chip *chip, u8 gchainexitnodeconfgroup0)
{
	ASSERT_ERR_CHIP((((u32)gchainexitnodeconfgroup0 << 0) & ~((u32)0x0000000F)) == 0);
	cl_reg_write(chip, RIU_DPD_CHAIN_SIZE_1_ADDR, (cl_reg_read(chip, RIU_DPD_CHAIN_SIZE_1_ADDR) & ~((u32)0x0000000F)) | ((u32)gchainexitnodeconfgroup0 << 0));
}

/**
 * @brief DPD_GBLOCK_ADDR register definition
 *  DPD indirect interface write address register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    13    ANTENNA_INDEX             0
 *    12:09 G_INDEX                   0x0
 *    08:07 CONF_GROUP_INDEX          0x0
 *    06:00 GMEM_INDEX                0x0
 * </pre>
 */
#define RIU_DPD_GBLOCK_ADDR_ADDR        (REG_RIU_BASE_ADDR + 0x00000960)
#define RIU_DPD_GBLOCK_ADDR_OFFSET      0x00000960
#define RIU_DPD_GBLOCK_ADDR_INDEX       0x00000258
#define RIU_DPD_GBLOCK_ADDR_RESET       0x00000000

static inline u32 riu_dpd_gblock_addr_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DPD_GBLOCK_ADDR_ADDR);
}

static inline void riu_dpd_gblock_addr_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_DPD_GBLOCK_ADDR_ADDR, value);
}

/* Field definitions */
#define RIU_DPD_GBLOCK_ADDR_ANTENNA_INDEX_BIT    ((u32)0x00002000)
#define RIU_DPD_GBLOCK_ADDR_ANTENNA_INDEX_POS    13
#define RIU_DPD_GBLOCK_ADDR_G_INDEX_MASK    ((u32)0x00001E00)
#define RIU_DPD_GBLOCK_ADDR_G_INDEX_LSB     9
#define RIU_DPD_GBLOCK_ADDR_G_INDEX_WIDTH    ((u32)0x00000004)
#define RIU_DPD_GBLOCK_ADDR_CONF_GROUP_INDEX_MASK    ((u32)0x00000180)
#define RIU_DPD_GBLOCK_ADDR_CONF_GROUP_INDEX_LSB    7
#define RIU_DPD_GBLOCK_ADDR_CONF_GROUP_INDEX_WIDTH    ((u32)0x00000002)
#define RIU_DPD_GBLOCK_ADDR_GMEM_INDEX_MASK    ((u32)0x0000007F)
#define RIU_DPD_GBLOCK_ADDR_GMEM_INDEX_LSB    0
#define RIU_DPD_GBLOCK_ADDR_GMEM_INDEX_WIDTH    ((u32)0x00000007)

#define RIU_DPD_GBLOCK_ADDR_ANTENNA_INDEX_RST    0x0
#define RIU_DPD_GBLOCK_ADDR_G_INDEX_RST     0x0
#define RIU_DPD_GBLOCK_ADDR_CONF_GROUP_INDEX_RST    0x0
#define RIU_DPD_GBLOCK_ADDR_GMEM_INDEX_RST    0x0

static inline void riu_dpd_gblock_addr_pack(struct cl_chip *chip, u8 antenna_index, u8 g_index, u8 conf_group_index, u8 gmem_index)
{
	ASSERT_ERR_CHIP((((u32)antenna_index << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)g_index << 9) & ~((u32)0x00001E00)) == 0);
	ASSERT_ERR_CHIP((((u32)conf_group_index << 7) & ~((u32)0x00000180)) == 0);
	ASSERT_ERR_CHIP((((u32)gmem_index << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_DPD_GBLOCK_ADDR_ADDR, ((u32)antenna_index << 13) | ((u32)g_index << 9) | ((u32)conf_group_index << 7) | ((u32)gmem_index << 0));
}

static inline void riu_dpd_gblock_addr_unpack(struct cl_chip *chip, u8 *antenna_index, u8 *g_index, u8 *conf_group_index, u8 *gmem_index)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GBLOCK_ADDR_ADDR);

	*antenna_index = (local_val & ((u32)0x00002000)) >> 13;
	*g_index = (local_val & ((u32)0x00001E00)) >> 9;
	*conf_group_index = (local_val & ((u32)0x00000180)) >> 7;
	*gmem_index = (local_val & ((u32)0x0000007F)) >> 0;
}

static inline u8 riu_dpd_gblock_addr_antenna_index_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GBLOCK_ADDR_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void riu_dpd_gblock_addr_antenna_index_setf(struct cl_chip *chip, u8 antennaindex)
{
	ASSERT_ERR_CHIP((((u32)antennaindex << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RIU_DPD_GBLOCK_ADDR_ADDR, (cl_reg_read(chip, RIU_DPD_GBLOCK_ADDR_ADDR) & ~((u32)0x00002000)) | ((u32)antennaindex << 13));
}

static inline u8 riu_dpd_gblock_addr_g_index_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GBLOCK_ADDR_ADDR);

	return (u8)((local_val & ((u32)0x00001E00)) >> 9);
}

static inline void riu_dpd_gblock_addr_g_index_setf(struct cl_chip *chip, u8 gindex)
{
	ASSERT_ERR_CHIP((((u32)gindex << 9) & ~((u32)0x00001E00)) == 0);
	cl_reg_write(chip, RIU_DPD_GBLOCK_ADDR_ADDR, (cl_reg_read(chip, RIU_DPD_GBLOCK_ADDR_ADDR) & ~((u32)0x00001E00)) | ((u32)gindex << 9));
}

static inline u8 riu_dpd_gblock_addr_conf_group_index_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GBLOCK_ADDR_ADDR);

	return (u8)((local_val & ((u32)0x00000180)) >> 7);
}

static inline void riu_dpd_gblock_addr_conf_group_index_setf(struct cl_chip *chip, u8 confgroupindex)
{
	ASSERT_ERR_CHIP((((u32)confgroupindex << 7) & ~((u32)0x00000180)) == 0);
	cl_reg_write(chip, RIU_DPD_GBLOCK_ADDR_ADDR, (cl_reg_read(chip, RIU_DPD_GBLOCK_ADDR_ADDR) & ~((u32)0x00000180)) | ((u32)confgroupindex << 7));
}

static inline u8 riu_dpd_gblock_addr_gmem_index_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GBLOCK_ADDR_ADDR);

	return (u8)((local_val & ((u32)0x0000007F)) >> 0);
}

static inline void riu_dpd_gblock_addr_gmem_index_setf(struct cl_chip *chip, u8 gmemindex)
{
	ASSERT_ERR_CHIP((((u32)gmemindex << 0) & ~((u32)0x0000007F)) == 0);
	cl_reg_write(chip, RIU_DPD_GBLOCK_ADDR_ADDR, (cl_reg_read(chip, RIU_DPD_GBLOCK_ADDR_ADDR) & ~((u32)0x0000007F)) | ((u32)gmemindex << 0));
}

/**
 * @brief DPD_GBLOCK_WDATA register definition
 *  DPD indirect interface write data register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 WDATA                     0x0
 * </pre>
 */
#define RIU_DPD_GBLOCK_WDATA_ADDR        (REG_RIU_BASE_ADDR + 0x00000964)
#define RIU_DPD_GBLOCK_WDATA_OFFSET      0x00000964
#define RIU_DPD_GBLOCK_WDATA_INDEX       0x00000259
#define RIU_DPD_GBLOCK_WDATA_RESET       0x00000000

static inline u32 riu_dpd_gblock_wdata_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DPD_GBLOCK_WDATA_ADDR);
}

static inline void riu_dpd_gblock_wdata_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RIU_DPD_GBLOCK_WDATA_ADDR, value);
}

/* Field definitions */
#define RIU_DPD_GBLOCK_WDATA_WDATA_MASK     ((u32)0xFFFFFFFF)
#define RIU_DPD_GBLOCK_WDATA_WDATA_LSB      0
#define RIU_DPD_GBLOCK_WDATA_WDATA_WIDTH    ((u32)0x00000020)

#define RIU_DPD_GBLOCK_WDATA_WDATA_RST      0x0

static inline u32 riu_dpd_gblock_wdata_wdata_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GBLOCK_WDATA_ADDR);

	return (u32)(local_val >> 0);
}

static inline void riu_dpd_gblock_wdata_wdata_setf(struct cl_chip *chip, u32 wdata)
{
	ASSERT_ERR_CHIP((((u32)wdata << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RIU_DPD_GBLOCK_WDATA_ADDR, (u32)wdata << 0);
}

/**
 * @brief DPD_GBLOCK_RDATA register definition
 *  DPD indirect interface read data register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RDATA                     0x0
 * </pre>
 */
#define RIU_DPD_GBLOCK_RDATA_ADDR        (REG_RIU_BASE_ADDR + 0x00000968)
#define RIU_DPD_GBLOCK_RDATA_OFFSET      0x00000968
#define RIU_DPD_GBLOCK_RDATA_INDEX       0x0000025A
#define RIU_DPD_GBLOCK_RDATA_RESET       0x00000000

static inline u32 riu_dpd_gblock_rdata_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RIU_DPD_GBLOCK_RDATA_ADDR);
}

/* Field definitions */
#define RIU_DPD_GBLOCK_RDATA_RDATA_MASK     ((u32)0xFFFFFFFF)
#define RIU_DPD_GBLOCK_RDATA_RDATA_LSB      0
#define RIU_DPD_GBLOCK_RDATA_RDATA_WIDTH    ((u32)0x00000020)

#define RIU_DPD_GBLOCK_RDATA_RDATA_RST      0x0

static inline u32 riu_dpd_gblock_rdata_rdata_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RIU_DPD_GBLOCK_RDATA_ADDR);

	return (u32)(local_val >> 0);
}

#endif /* REG_RIU_H */
