/* SPDX-License-Identifier: GPL-2.0 OR BSD-2-Clause */
/* Copyright(c) 2019-2021, Celeno Communications Ltd. */

#ifndef REG_RFIC_REGS_H
#define REG_RFIC_REGS_H

#include "reg_access.h"
#include "chip.h"

#define REG_RFIC_REGS_BASE_ADDR 0x004B4000

/**
 * @brief SX_0_PLL_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SX0_spare5                00000000
 *    30:29 SX0_sdm_out_low_limit_sel 0x00000001
 *    28:27 SX0_sdm_out_high_limit_sel 0x00000003
 *    26    SX0_sdm_order             00000000
 *    25    SX0_fsm_en                00000000
 *    24    SX0_sdm_en                00000000
 *    23    SX0_sdm_dithen            00000000
 *    22    SX0_div_pdiven            00000000
 *    21    SX0_div_mdiven            00000000
 *    20    SX0_div_ldoen             00000000
 *    19    SX0_cp_smplen             00000000
 *    18    SX0_div_cal_clk_en        00000000
 *    17    SX0_cplindel_en           00000000
 *    16:15 SX0_cp_ldoen              0x00000000
 *    14:13 SX0_cp1_cur_sel           0x00000000
 *    12:11 SX0_cp0_cur_sel           0x00000000
 *    10:09 SX0_cp_rdgsel             0x00000000
 *    08:07 SX0_cp_iuptstrdgs         0x00000000
 *    06:05 SX0_cp_idntstrdgs         0x00000000
 *    04    SX0_pfd_tristate          00000000
 *    03    SX0_pfd_syncsel           00000000
 *    02    SX0_pfd_desel             00000000
 *    01:00 SX0_pfd_cp_en             0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_0_PLL_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000400)
#define RFIC_REGS_SX_0_PLL_CTRL_0_OFFSET      0x00000400
#define RFIC_REGS_SX_0_PLL_CTRL_0_INDEX       0x00000100
#define RFIC_REGS_SX_0_PLL_CTRL_0_RESET       0x38000000

static inline u32 rfic_regs_sx_0_pll_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, value);
}

#define RFIC_REGS_SX_0_PLL_CTRL_0 .addr_index = 0x00000100, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SPARE_5_BIT    ((u32)0x80000000)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SPARE_5_POS    31
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_OUT_LOW_LIMIT_SEL_MASK    ((u32)0x60000000)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_OUT_LOW_LIMIT_SEL_LSB    29
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_OUT_LOW_LIMIT_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_OUT_HIGH_LIMIT_SEL_MASK    ((u32)0x18000000)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_OUT_HIGH_LIMIT_SEL_LSB    27
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_OUT_HIGH_LIMIT_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_ORDER_BIT    ((u32)0x04000000)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_ORDER_POS    26
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_FSM_EN_BIT    ((u32)0x02000000)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_FSM_EN_POS    25
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_EN_BIT    ((u32)0x01000000)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_EN_POS    24
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_DITHEN_BIT    ((u32)0x00800000)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_DITHEN_POS    23
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_DIV_PDIVEN_BIT    ((u32)0x00400000)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_DIV_PDIVEN_POS    22
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_DIV_MDIVEN_BIT    ((u32)0x00200000)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_DIV_MDIVEN_POS    21
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_DIV_LDOEN_BIT    ((u32)0x00100000)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_DIV_LDOEN_POS    20
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_SMPLEN_BIT    ((u32)0x00080000)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_SMPLEN_POS    19
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_DIV_CAL_CLK_EN_BIT    ((u32)0x00040000)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_DIV_CAL_CLK_EN_POS    18
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CPLINDEL_EN_BIT    ((u32)0x00020000)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CPLINDEL_EN_POS    17
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_LDOEN_MASK    ((u32)0x00018000)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_LDOEN_LSB    15
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_LDOEN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_1_CUR_SEL_MASK    ((u32)0x00006000)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_1_CUR_SEL_LSB    13
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_1_CUR_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_0_CUR_SEL_MASK    ((u32)0x00001800)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_0_CUR_SEL_LSB    11
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_0_CUR_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_RDGSEL_MASK    ((u32)0x00000600)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_RDGSEL_LSB    9
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_RDGSEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_IUPTSTRDGS_MASK    ((u32)0x00000180)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_IUPTSTRDGS_LSB    7
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_IUPTSTRDGS_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_IDNTSTRDGS_MASK    ((u32)0x00000060)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_IDNTSTRDGS_LSB    5
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_IDNTSTRDGS_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_TRISTATE_BIT    ((u32)0x00000010)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_TRISTATE_POS    4
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_SYNCSEL_BIT    ((u32)0x00000008)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_SYNCSEL_POS    3
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_DESEL_BIT    ((u32)0x00000004)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_DESEL_POS    2
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_CP_EN_MASK    ((u32)0x00000003)
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_CP_EN_LSB    0
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_CP_EN_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SPARE_5_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_OUT_LOW_LIMIT_SEL_RST    0x00000001
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_OUT_HIGH_LIMIT_SEL_RST    0x00000003
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_ORDER_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_FSM_EN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_EN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_DITHEN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_DIV_PDIVEN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_DIV_MDIVEN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_DIV_LDOEN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_SMPLEN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_DIV_CAL_CLK_EN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CPLINDEL_EN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_LDOEN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_1_CUR_SEL_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_0_CUR_SEL_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_RDGSEL_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_IUPTSTRDGS_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_IDNTSTRDGS_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_TRISTATE_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_SYNCSEL_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_DESEL_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_CP_EN_RST    0x00000000

static inline void rfic_regs_sx_0_pll_ctrl_0_pack(struct cl_chip *chip, u8 sx0_spare5, u8 sx0_sdm_out_low_limit_sel, u8 sx0_sdm_out_high_limit_sel, u8 sx0_sdm_order, u8 sx0_fsm_en, u8 sx0_sdm_en, u8 sx0_sdm_dithen, u8 sx0_div_pdiven, u8 sx0_div_mdiven, u8 sx0_div_ldoen, u8 sx0_cp_smplen, u8 sx0_div_cal_clk_en, u8 sx0_cplindel_en, u8 sx0_cp_ldoen, u8 sx0_cp1_cur_sel, u8 sx0_cp0_cur_sel, u8 sx0_cp_rdgsel, u8 sx0_cp_iuptstrdgs, u8 sx0_cp_idntstrdgs, u8 sx0_pfd_tristate, u8 sx0_pfd_syncsel, u8 sx0_pfd_desel, u8 sx0_pfd_cp_en)
{
	ASSERT_ERR_CHIP((((u32)sx0_spare5 << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_sdm_out_low_limit_sel << 29) & ~((u32)0x60000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_sdm_out_high_limit_sel << 27) & ~((u32)0x18000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_sdm_order << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_en << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_sdm_en << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_sdm_dithen << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_div_pdiven << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_div_mdiven << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_div_ldoen << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_cp_smplen << 19) & ~((u32)0x00080000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_div_cal_clk_en << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_cplindel_en << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_cp_ldoen << 15) & ~((u32)0x00018000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_cp1_cur_sel << 13) & ~((u32)0x00006000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_cp0_cur_sel << 11) & ~((u32)0x00001800)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_cp_rdgsel << 9) & ~((u32)0x00000600)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_cp_iuptstrdgs << 7) & ~((u32)0x00000180)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_cp_idntstrdgs << 5) & ~((u32)0x00000060)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_pfd_tristate << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_pfd_syncsel << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_pfd_desel << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_pfd_cp_en << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, ((u32)sx0_spare5 << 31) | ((u32)sx0_sdm_out_low_limit_sel << 29) | ((u32)sx0_sdm_out_high_limit_sel << 27) | ((u32)sx0_sdm_order << 26) | ((u32)sx0_fsm_en << 25) | ((u32)sx0_sdm_en << 24) | ((u32)sx0_sdm_dithen << 23) | ((u32)sx0_div_pdiven << 22) | ((u32)sx0_div_mdiven << 21) | ((u32)sx0_div_ldoen << 20) | ((u32)sx0_cp_smplen << 19) | ((u32)sx0_div_cal_clk_en << 18) | ((u32)sx0_cplindel_en << 17) | ((u32)sx0_cp_ldoen << 15) | ((u32)sx0_cp1_cur_sel << 13) | ((u32)sx0_cp0_cur_sel << 11) | ((u32)sx0_cp_rdgsel << 9) | ((u32)sx0_cp_iuptstrdgs << 7) | ((u32)sx0_cp_idntstrdgs << 5) | ((u32)sx0_pfd_tristate << 4) | ((u32)sx0_pfd_syncsel << 3) | ((u32)sx0_pfd_desel << 2) | ((u32)sx0_pfd_cp_en << 0));
}

static inline void rfic_regs_sx_0_pll_ctrl_0_unpack(struct cl_chip *chip, u8 *sx0_spare5, u8 *sx0_sdm_out_low_limit_sel, u8 *sx0_sdm_out_high_limit_sel, u8 *sx0_sdm_order, u8 *sx0_fsm_en, u8 *sx0_sdm_en, u8 *sx0_sdm_dithen, u8 *sx0_div_pdiven, u8 *sx0_div_mdiven, u8 *sx0_div_ldoen, u8 *sx0_cp_smplen, u8 *sx0_div_cal_clk_en, u8 *sx0_cplindel_en, u8 *sx0_cp_ldoen, u8 *sx0_cp1_cur_sel, u8 *sx0_cp0_cur_sel, u8 *sx0_cp_rdgsel, u8 *sx0_cp_iuptstrdgs, u8 *sx0_cp_idntstrdgs, u8 *sx0_pfd_tristate, u8 *sx0_pfd_syncsel, u8 *sx0_pfd_desel, u8 *sx0_pfd_cp_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	*sx0_spare5 = (local_val & ((u32)0x80000000)) >> 31;
	*sx0_sdm_out_low_limit_sel = (local_val & ((u32)0x60000000)) >> 29;
	*sx0_sdm_out_high_limit_sel = (local_val & ((u32)0x18000000)) >> 27;
	*sx0_sdm_order = (local_val & ((u32)0x04000000)) >> 26;
	*sx0_fsm_en = (local_val & ((u32)0x02000000)) >> 25;
	*sx0_sdm_en = (local_val & ((u32)0x01000000)) >> 24;
	*sx0_sdm_dithen = (local_val & ((u32)0x00800000)) >> 23;
	*sx0_div_pdiven = (local_val & ((u32)0x00400000)) >> 22;
	*sx0_div_mdiven = (local_val & ((u32)0x00200000)) >> 21;
	*sx0_div_ldoen = (local_val & ((u32)0x00100000)) >> 20;
	*sx0_cp_smplen = (local_val & ((u32)0x00080000)) >> 19;
	*sx0_div_cal_clk_en = (local_val & ((u32)0x00040000)) >> 18;
	*sx0_cplindel_en = (local_val & ((u32)0x00020000)) >> 17;
	*sx0_cp_ldoen = (local_val & ((u32)0x00018000)) >> 15;
	*sx0_cp1_cur_sel = (local_val & ((u32)0x00006000)) >> 13;
	*sx0_cp0_cur_sel = (local_val & ((u32)0x00001800)) >> 11;
	*sx0_cp_rdgsel = (local_val & ((u32)0x00000600)) >> 9;
	*sx0_cp_iuptstrdgs = (local_val & ((u32)0x00000180)) >> 7;
	*sx0_cp_idntstrdgs = (local_val & ((u32)0x00000060)) >> 5;
	*sx0_pfd_tristate = (local_val & ((u32)0x00000010)) >> 4;
	*sx0_pfd_syncsel = (local_val & ((u32)0x00000008)) >> 3;
	*sx0_pfd_desel = (local_val & ((u32)0x00000004)) >> 2;
	*sx0_pfd_cp_en = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_spare_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_spare_5_setf(struct cl_chip *chip, u8 sx0spare5)
{
	ASSERT_ERR_CHIP((((u32)sx0spare5 << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x80000000)) | ((u32)sx0spare5 << 31));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SPARE_5 .addr_index = 0x00000100, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_sdm_out_low_limit_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x60000000)) >> 29);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_sdm_out_low_limit_sel_setf(struct cl_chip *chip, u8 sx0sdmoutlowlimitsel)
{
	ASSERT_ERR_CHIP((((u32)sx0sdmoutlowlimitsel << 29) & ~((u32)0x60000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x60000000)) | ((u32)sx0sdmoutlowlimitsel << 29));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_OUT_LOW_LIMIT_SEL .addr_index = 0x00000100, .size_minus_1 = (2 - 1), .shift = 29

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_sdm_out_high_limit_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x18000000)) >> 27);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_sdm_out_high_limit_sel_setf(struct cl_chip *chip, u8 sx0sdmouthighlimitsel)
{
	ASSERT_ERR_CHIP((((u32)sx0sdmouthighlimitsel << 27) & ~((u32)0x18000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x18000000)) | ((u32)sx0sdmouthighlimitsel << 27));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_OUT_HIGH_LIMIT_SEL .addr_index = 0x00000100, .size_minus_1 = (2 - 1), .shift = 27

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_sdm_order_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_sdm_order_setf(struct cl_chip *chip, u8 sx0sdmorder)
{
	ASSERT_ERR_CHIP((((u32)sx0sdmorder << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x04000000)) | ((u32)sx0sdmorder << 26));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_ORDER .addr_index = 0x00000100, .size_minus_1 = (1 - 1), .shift = 26

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_fsm_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_fsm_en_setf(struct cl_chip *chip, u8 sx0fsmen)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmen << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x02000000)) | ((u32)sx0fsmen << 25));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_FSM_EN .addr_index = 0x00000100, .size_minus_1 = (1 - 1), .shift = 25

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_sdm_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_sdm_en_setf(struct cl_chip *chip, u8 sx0sdmen)
{
	ASSERT_ERR_CHIP((((u32)sx0sdmen << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x01000000)) | ((u32)sx0sdmen << 24));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_EN .addr_index = 0x00000100, .size_minus_1 = (1 - 1), .shift = 24

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_sdm_dithen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_sdm_dithen_setf(struct cl_chip *chip, u8 sx0sdmdithen)
{
	ASSERT_ERR_CHIP((((u32)sx0sdmdithen << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00800000)) | ((u32)sx0sdmdithen << 23));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_SDM_DITHEN .addr_index = 0x00000100, .size_minus_1 = (1 - 1), .shift = 23

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_div_pdiven_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_div_pdiven_setf(struct cl_chip *chip, u8 sx0divpdiven)
{
	ASSERT_ERR_CHIP((((u32)sx0divpdiven << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00400000)) | ((u32)sx0divpdiven << 22));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_DIV_PDIVEN .addr_index = 0x00000100, .size_minus_1 = (1 - 1), .shift = 22

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_div_mdiven_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_div_mdiven_setf(struct cl_chip *chip, u8 sx0divmdiven)
{
	ASSERT_ERR_CHIP((((u32)sx0divmdiven << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00200000)) | ((u32)sx0divmdiven << 21));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_DIV_MDIVEN .addr_index = 0x00000100, .size_minus_1 = (1 - 1), .shift = 21

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_div_ldoen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_div_ldoen_setf(struct cl_chip *chip, u8 sx0divldoen)
{
	ASSERT_ERR_CHIP((((u32)sx0divldoen << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00100000)) | ((u32)sx0divldoen << 20));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_DIV_LDOEN .addr_index = 0x00000100, .size_minus_1 = (1 - 1), .shift = 20

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_cp_smplen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_cp_smplen_setf(struct cl_chip *chip, u8 sx0cpsmplen)
{
	ASSERT_ERR_CHIP((((u32)sx0cpsmplen << 19) & ~((u32)0x00080000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00080000)) | ((u32)sx0cpsmplen << 19));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_SMPLEN .addr_index = 0x00000100, .size_minus_1 = (1 - 1), .shift = 19

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_div_cal_clk_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_div_cal_clk_en_setf(struct cl_chip *chip, u8 sx0divcalclken)
{
	ASSERT_ERR_CHIP((((u32)sx0divcalclken << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00040000)) | ((u32)sx0divcalclken << 18));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_DIV_CAL_CLK_EN .addr_index = 0x00000100, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_cplindel_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_cplindel_en_setf(struct cl_chip *chip, u8 sx0cplindelen)
{
	ASSERT_ERR_CHIP((((u32)sx0cplindelen << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00020000)) | ((u32)sx0cplindelen << 17));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CPLINDEL_EN .addr_index = 0x00000100, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_cp_ldoen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00018000)) >> 15);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_cp_ldoen_setf(struct cl_chip *chip, u8 sx0cpldoen)
{
	ASSERT_ERR_CHIP((((u32)sx0cpldoen << 15) & ~((u32)0x00018000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00018000)) | ((u32)sx0cpldoen << 15));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_LDOEN .addr_index = 0x00000100, .size_minus_1 = (2 - 1), .shift = 15

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_cp_1_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00006000)) >> 13);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_cp_1_cur_sel_setf(struct cl_chip *chip, u8 sx0cp1cursel)
{
	ASSERT_ERR_CHIP((((u32)sx0cp1cursel << 13) & ~((u32)0x00006000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00006000)) | ((u32)sx0cp1cursel << 13));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_1_CUR_SEL .addr_index = 0x00000100, .size_minus_1 = (2 - 1), .shift = 13

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_cp_0_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00001800)) >> 11);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_cp_0_cur_sel_setf(struct cl_chip *chip, u8 sx0cp0cursel)
{
	ASSERT_ERR_CHIP((((u32)sx0cp0cursel << 11) & ~((u32)0x00001800)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00001800)) | ((u32)sx0cp0cursel << 11));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_0_CUR_SEL .addr_index = 0x00000100, .size_minus_1 = (2 - 1), .shift = 11

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_cp_rdgsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000600)) >> 9);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_cp_rdgsel_setf(struct cl_chip *chip, u8 sx0cprdgsel)
{
	ASSERT_ERR_CHIP((((u32)sx0cprdgsel << 9) & ~((u32)0x00000600)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00000600)) | ((u32)sx0cprdgsel << 9));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_RDGSEL .addr_index = 0x00000100, .size_minus_1 = (2 - 1), .shift = 9

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_cp_iuptstrdgs_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000180)) >> 7);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_cp_iuptstrdgs_setf(struct cl_chip *chip, u8 sx0cpiuptstrdgs)
{
	ASSERT_ERR_CHIP((((u32)sx0cpiuptstrdgs << 7) & ~((u32)0x00000180)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00000180)) | ((u32)sx0cpiuptstrdgs << 7));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_IUPTSTRDGS .addr_index = 0x00000100, .size_minus_1 = (2 - 1), .shift = 7

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_cp_idntstrdgs_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000060)) >> 5);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_cp_idntstrdgs_setf(struct cl_chip *chip, u8 sx0cpidntstrdgs)
{
	ASSERT_ERR_CHIP((((u32)sx0cpidntstrdgs << 5) & ~((u32)0x00000060)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00000060)) | ((u32)sx0cpidntstrdgs << 5));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_CP_IDNTSTRDGS .addr_index = 0x00000100, .size_minus_1 = (2 - 1), .shift = 5

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_pfd_tristate_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_pfd_tristate_setf(struct cl_chip *chip, u8 sx0pfdtristate)
{
	ASSERT_ERR_CHIP((((u32)sx0pfdtristate << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00000010)) | ((u32)sx0pfdtristate << 4));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_TRISTATE .addr_index = 0x00000100, .size_minus_1 = (1 - 1), .shift = 4

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_pfd_syncsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_pfd_syncsel_setf(struct cl_chip *chip, u8 sx0pfdsyncsel)
{
	ASSERT_ERR_CHIP((((u32)sx0pfdsyncsel << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00000008)) | ((u32)sx0pfdsyncsel << 3));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_SYNCSEL .addr_index = 0x00000100, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_pfd_desel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_pfd_desel_setf(struct cl_chip *chip, u8 sx0pfddesel)
{
	ASSERT_ERR_CHIP((((u32)sx0pfddesel << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00000004)) | ((u32)sx0pfddesel << 2));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_DESEL .addr_index = 0x00000100, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_sx_0_pll_ctrl_0_sx_0_pfd_cp_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_sx_0_pll_ctrl_0_sx_0_pfd_cp_en_setf(struct cl_chip *chip, u8 sx0pfdcpen)
{
	ASSERT_ERR_CHIP((((u32)sx0pfdcpen << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_0_ADDR) & ~((u32)0x00000003)) | ((u32)sx0pfdcpen << 0));
}

#define RFIC_REGS_SX_0_PLL_CTRL_0_SX_0_PFD_CP_EN .addr_index = 0x00000100, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief SX_0_PLL_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SX0_vcobiasfilt_bypass    00000000
 *    30    SX0_vco_ampdet_read       00000000
 *    29    SX0_vco_ampdet_ptat_cur_en 00000000
 *    28    SX0_vco_ampdet_en         00000000
 *    27    SX0_vco_ldo1ven           00000000
 *    26:25 SX0_vcoptat_bias_en       0x00000000
 *    24:17 SX0_vco_ftun              0x00000000
 *    16:12 SX0_vco_cur_sel           0x00000000
 *    11    SX0_vco2_lodrv            00000000
 *    10    SX0_vco2_ldoen            00000000
 *    09    SX0_vco2_en               00000000
 *    08    SX0_vco2_drv              00000000
 *    07    SX0_vco1_lodrv            00000000
 *    06    SX0_vco1_ldoen            00000000
 *    05    SX0_vco1_en               00000000
 *    04    SX0_vco1_drv              00000000
 *    03    SX0_vco0_lodrv            00000000
 *    02    SX0_vco0_ldoen            00000000
 *    01    SX0_vco0_en               00000000
 *    00    SX0_vco0_drv              00000000
 * </pre>
 */
#define RFIC_REGS_SX_0_PLL_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000404)
#define RFIC_REGS_SX_0_PLL_CTRL_1_OFFSET      0x00000404
#define RFIC_REGS_SX_0_PLL_CTRL_1_INDEX       0x00000101
#define RFIC_REGS_SX_0_PLL_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_sx_0_pll_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, value);
}

#define RFIC_REGS_SX_0_PLL_CTRL_1 .addr_index = 0x00000101, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCOBIASFILT_BYPASS_BIT    ((u32)0x80000000)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCOBIASFILT_BYPASS_POS    31
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_AMPDET_READ_BIT    ((u32)0x40000000)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_AMPDET_READ_POS    30
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_AMPDET_PTAT_CUR_EN_BIT    ((u32)0x20000000)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_AMPDET_PTAT_CUR_EN_POS    29
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_AMPDET_EN_BIT    ((u32)0x10000000)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_AMPDET_EN_POS    28
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_LDO_1_VEN_BIT    ((u32)0x08000000)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_LDO_1_VEN_POS    27
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCOPTAT_BIAS_EN_MASK    ((u32)0x06000000)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCOPTAT_BIAS_EN_LSB    25
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCOPTAT_BIAS_EN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_FTUN_MASK    ((u32)0x01FE0000)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_FTUN_LSB    17
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_FTUN_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_CUR_SEL_MASK    ((u32)0x0001F000)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_CUR_SEL_LSB    12
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_CUR_SEL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_2_LODRV_BIT    ((u32)0x00000800)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_2_LODRV_POS    11
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_2_LDOEN_BIT    ((u32)0x00000400)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_2_LDOEN_POS    10
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_2_EN_BIT    ((u32)0x00000200)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_2_EN_POS    9
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_2_DRV_BIT    ((u32)0x00000100)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_2_DRV_POS    8
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_1_LODRV_BIT    ((u32)0x00000080)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_1_LODRV_POS    7
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_1_LDOEN_BIT    ((u32)0x00000040)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_1_LDOEN_POS    6
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_1_EN_BIT    ((u32)0x00000020)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_1_EN_POS    5
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_1_DRV_BIT    ((u32)0x00000010)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_1_DRV_POS    4
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_0_LODRV_BIT    ((u32)0x00000008)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_0_LODRV_POS    3
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_0_LDOEN_BIT    ((u32)0x00000004)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_0_LDOEN_POS    2
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_0_EN_BIT    ((u32)0x00000002)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_0_EN_POS    1
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_0_DRV_BIT    ((u32)0x00000001)
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_0_DRV_POS    0

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCOBIASFILT_BYPASS_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_AMPDET_READ_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_AMPDET_PTAT_CUR_EN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_AMPDET_EN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_LDO_1_VEN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCOPTAT_BIAS_EN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_FTUN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_CUR_SEL_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_2_LODRV_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_2_LDOEN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_2_EN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_2_DRV_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_1_LODRV_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_1_LDOEN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_1_EN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_1_DRV_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_0_LODRV_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_0_LDOEN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_0_EN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_0_DRV_RST    0x00000000

static inline void rfic_regs_sx_0_pll_ctrl_1_pack(struct cl_chip *chip, u8 sx0_vcobiasfilt_bypass, u8 sx0_vco_ampdet_read, u8 sx0_vco_ampdet_ptat_cur_en, u8 sx0_vco_ampdet_en, u8 sx0_vco_ldo1ven, u8 sx0_vcoptat_bias_en, u8 sx0_vco_ftun, u8 sx0_vco_cur_sel, u8 sx0_vco2_lodrv, u8 sx0_vco2_ldoen, u8 sx0_vco2_en, u8 sx0_vco2_drv, u8 sx0_vco1_lodrv, u8 sx0_vco1_ldoen, u8 sx0_vco1_en, u8 sx0_vco1_drv, u8 sx0_vco0_lodrv, u8 sx0_vco0_ldoen, u8 sx0_vco0_en, u8 sx0_vco0_drv)
{
	ASSERT_ERR_CHIP((((u32)sx0_vcobiasfilt_bypass << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco_ampdet_read << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco_ampdet_ptat_cur_en << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco_ampdet_en << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco_ldo1ven << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vcoptat_bias_en << 25) & ~((u32)0x06000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco_ftun << 17) & ~((u32)0x01FE0000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco_cur_sel << 12) & ~((u32)0x0001F000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco2_lodrv << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco2_ldoen << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco2_en << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco2_drv << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco1_lodrv << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco1_ldoen << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco1_en << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco1_drv << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco0_lodrv << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco0_ldoen << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco0_en << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco0_drv << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, ((u32)sx0_vcobiasfilt_bypass << 31) | ((u32)sx0_vco_ampdet_read << 30) | ((u32)sx0_vco_ampdet_ptat_cur_en << 29) | ((u32)sx0_vco_ampdet_en << 28) | ((u32)sx0_vco_ldo1ven << 27) | ((u32)sx0_vcoptat_bias_en << 25) | ((u32)sx0_vco_ftun << 17) | ((u32)sx0_vco_cur_sel << 12) | ((u32)sx0_vco2_lodrv << 11) | ((u32)sx0_vco2_ldoen << 10) | ((u32)sx0_vco2_en << 9) | ((u32)sx0_vco2_drv << 8) | ((u32)sx0_vco1_lodrv << 7) | ((u32)sx0_vco1_ldoen << 6) | ((u32)sx0_vco1_en << 5) | ((u32)sx0_vco1_drv << 4) | ((u32)sx0_vco0_lodrv << 3) | ((u32)sx0_vco0_ldoen << 2) | ((u32)sx0_vco0_en << 1) | ((u32)sx0_vco0_drv << 0));
}

static inline void rfic_regs_sx_0_pll_ctrl_1_unpack(struct cl_chip *chip, u8 *sx0_vcobiasfilt_bypass, u8 *sx0_vco_ampdet_read, u8 *sx0_vco_ampdet_ptat_cur_en, u8 *sx0_vco_ampdet_en, u8 *sx0_vco_ldo1ven, u8 *sx0_vcoptat_bias_en, u8 *sx0_vco_ftun, u8 *sx0_vco_cur_sel, u8 *sx0_vco2_lodrv, u8 *sx0_vco2_ldoen, u8 *sx0_vco2_en, u8 *sx0_vco2_drv, u8 *sx0_vco1_lodrv, u8 *sx0_vco1_ldoen, u8 *sx0_vco1_en, u8 *sx0_vco1_drv, u8 *sx0_vco0_lodrv, u8 *sx0_vco0_ldoen, u8 *sx0_vco0_en, u8 *sx0_vco0_drv)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	*sx0_vcobiasfilt_bypass = (local_val & ((u32)0x80000000)) >> 31;
	*sx0_vco_ampdet_read = (local_val & ((u32)0x40000000)) >> 30;
	*sx0_vco_ampdet_ptat_cur_en = (local_val & ((u32)0x20000000)) >> 29;
	*sx0_vco_ampdet_en = (local_val & ((u32)0x10000000)) >> 28;
	*sx0_vco_ldo1ven = (local_val & ((u32)0x08000000)) >> 27;
	*sx0_vcoptat_bias_en = (local_val & ((u32)0x06000000)) >> 25;
	*sx0_vco_ftun = (local_val & ((u32)0x01FE0000)) >> 17;
	*sx0_vco_cur_sel = (local_val & ((u32)0x0001F000)) >> 12;
	*sx0_vco2_lodrv = (local_val & ((u32)0x00000800)) >> 11;
	*sx0_vco2_ldoen = (local_val & ((u32)0x00000400)) >> 10;
	*sx0_vco2_en = (local_val & ((u32)0x00000200)) >> 9;
	*sx0_vco2_drv = (local_val & ((u32)0x00000100)) >> 8;
	*sx0_vco1_lodrv = (local_val & ((u32)0x00000080)) >> 7;
	*sx0_vco1_ldoen = (local_val & ((u32)0x00000040)) >> 6;
	*sx0_vco1_en = (local_val & ((u32)0x00000020)) >> 5;
	*sx0_vco1_drv = (local_val & ((u32)0x00000010)) >> 4;
	*sx0_vco0_lodrv = (local_val & ((u32)0x00000008)) >> 3;
	*sx0_vco0_ldoen = (local_val & ((u32)0x00000004)) >> 2;
	*sx0_vco0_en = (local_val & ((u32)0x00000002)) >> 1;
	*sx0_vco0_drv = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vcobiasfilt_bypass_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vcobiasfilt_bypass_setf(struct cl_chip *chip, u8 sx0vcobiasfiltbypass)
{
	ASSERT_ERR_CHIP((((u32)sx0vcobiasfiltbypass << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x80000000)) | ((u32)sx0vcobiasfiltbypass << 31));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCOBIASFILT_BYPASS .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_ampdet_read_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_ampdet_read_setf(struct cl_chip *chip, u8 sx0vcoampdetread)
{
	ASSERT_ERR_CHIP((((u32)sx0vcoampdetread << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x40000000)) | ((u32)sx0vcoampdetread << 30));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_AMPDET_READ .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 30

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_ampdet_ptat_cur_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_ampdet_ptat_cur_en_setf(struct cl_chip *chip, u8 sx0vcoampdetptatcuren)
{
	ASSERT_ERR_CHIP((((u32)sx0vcoampdetptatcuren << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x20000000)) | ((u32)sx0vcoampdetptatcuren << 29));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_AMPDET_PTAT_CUR_EN .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 29

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_ampdet_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_ampdet_en_setf(struct cl_chip *chip, u8 sx0vcoampdeten)
{
	ASSERT_ERR_CHIP((((u32)sx0vcoampdeten << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x10000000)) | ((u32)sx0vcoampdeten << 28));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_AMPDET_EN .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 28

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_ldo_1_ven_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_ldo_1_ven_setf(struct cl_chip *chip, u8 sx0vcoldo1ven)
{
	ASSERT_ERR_CHIP((((u32)sx0vcoldo1ven << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x08000000)) | ((u32)sx0vcoldo1ven << 27));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_LDO_1_VEN .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 27

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vcoptat_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x06000000)) >> 25);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vcoptat_bias_en_setf(struct cl_chip *chip, u8 sx0vcoptatbiasen)
{
	ASSERT_ERR_CHIP((((u32)sx0vcoptatbiasen << 25) & ~((u32)0x06000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x06000000)) | ((u32)sx0vcoptatbiasen << 25));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCOPTAT_BIAS_EN .addr_index = 0x00000101, .size_minus_1 = (2 - 1), .shift = 25

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_ftun_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x01FE0000)) >> 17);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_ftun_setf(struct cl_chip *chip, u8 sx0vcoftun)
{
	ASSERT_ERR_CHIP((((u32)sx0vcoftun << 17) & ~((u32)0x01FE0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x01FE0000)) | ((u32)sx0vcoftun << 17));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_FTUN .addr_index = 0x00000101, .size_minus_1 = (8 - 1), .shift = 17

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0001F000)) >> 12);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_cur_sel_setf(struct cl_chip *chip, u8 sx0vcocursel)
{
	ASSERT_ERR_CHIP((((u32)sx0vcocursel << 12) & ~((u32)0x0001F000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x0001F000)) | ((u32)sx0vcocursel << 12));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_CUR_SEL .addr_index = 0x00000101, .size_minus_1 = (5 - 1), .shift = 12

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_2_lodrv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_2_lodrv_setf(struct cl_chip *chip, u8 sx0vco2lodrv)
{
	ASSERT_ERR_CHIP((((u32)sx0vco2lodrv << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x00000800)) | ((u32)sx0vco2lodrv << 11));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_2_LODRV .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_2_ldoen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_2_ldoen_setf(struct cl_chip *chip, u8 sx0vco2ldoen)
{
	ASSERT_ERR_CHIP((((u32)sx0vco2ldoen << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x00000400)) | ((u32)sx0vco2ldoen << 10));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_2_LDOEN .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_2_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_2_en_setf(struct cl_chip *chip, u8 sx0vco2en)
{
	ASSERT_ERR_CHIP((((u32)sx0vco2en << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x00000200)) | ((u32)sx0vco2en << 9));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_2_EN .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_2_drv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_2_drv_setf(struct cl_chip *chip, u8 sx0vco2drv)
{
	ASSERT_ERR_CHIP((((u32)sx0vco2drv << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x00000100)) | ((u32)sx0vco2drv << 8));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_2_DRV .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_1_lodrv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_1_lodrv_setf(struct cl_chip *chip, u8 sx0vco1lodrv)
{
	ASSERT_ERR_CHIP((((u32)sx0vco1lodrv << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x00000080)) | ((u32)sx0vco1lodrv << 7));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_1_LODRV .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_1_ldoen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_1_ldoen_setf(struct cl_chip *chip, u8 sx0vco1ldoen)
{
	ASSERT_ERR_CHIP((((u32)sx0vco1ldoen << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x00000040)) | ((u32)sx0vco1ldoen << 6));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_1_LDOEN .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_1_en_setf(struct cl_chip *chip, u8 sx0vco1en)
{
	ASSERT_ERR_CHIP((((u32)sx0vco1en << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x00000020)) | ((u32)sx0vco1en << 5));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_1_EN .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_1_drv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_1_drv_setf(struct cl_chip *chip, u8 sx0vco1drv)
{
	ASSERT_ERR_CHIP((((u32)sx0vco1drv << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x00000010)) | ((u32)sx0vco1drv << 4));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_1_DRV .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 4

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_0_lodrv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_0_lodrv_setf(struct cl_chip *chip, u8 sx0vco0lodrv)
{
	ASSERT_ERR_CHIP((((u32)sx0vco0lodrv << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x00000008)) | ((u32)sx0vco0lodrv << 3));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_0_LODRV .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_0_ldoen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_0_ldoen_setf(struct cl_chip *chip, u8 sx0vco0ldoen)
{
	ASSERT_ERR_CHIP((((u32)sx0vco0ldoen << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x00000004)) | ((u32)sx0vco0ldoen << 2));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_0_LDOEN .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_0_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_0_en_setf(struct cl_chip *chip, u8 sx0vco0en)
{
	ASSERT_ERR_CHIP((((u32)sx0vco0en << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x00000002)) | ((u32)sx0vco0en << 1));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_0_EN .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_0_drv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_sx_0_pll_ctrl_1_sx_0_vco_0_drv_setf(struct cl_chip *chip, u8 sx0vco0drv)
{
	ASSERT_ERR_CHIP((((u32)sx0vco0drv << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_1_ADDR) & ~((u32)0x00000001)) | ((u32)sx0vco0drv << 0));
}

#define RFIC_REGS_SX_0_PLL_CTRL_1_SX_0_VCO_0_DRV .addr_index = 0x00000101, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief SX_0_PLL_CTRL_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:27 SX0_vco_ampdet_ref_sel    0x00000000
 *    26    SX0_bgren                 00000000
 *    25:21 SX0_clktst_sel            0x00000000
 *    20    SX0_clktsten              00000000
 *    19:15 SX0_lpf_r2                0x00000000
 *    14    SX0_lpf_dcselh            00000000
 *    13    SX0_lpf_cmpen             00000000
 *    12    SX0_lpf_caltst            00000000
 *    11:09 SX0_lpf_selh              0x00000000
 *    08:06 SX0_lpf_sell              0x00000005
 *    05:03 SX0_lpf_c1                0x00000000
 *    02:00 SX0_lpf_c34               0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_0_PLL_CTRL_2_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000408)
#define RFIC_REGS_SX_0_PLL_CTRL_2_OFFSET      0x00000408
#define RFIC_REGS_SX_0_PLL_CTRL_2_INDEX       0x00000102
#define RFIC_REGS_SX_0_PLL_CTRL_2_RESET       0x00000140

static inline u32 rfic_regs_sx_0_pll_ctrl_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR);
}

static inline void rfic_regs_sx_0_pll_ctrl_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR, value);
}

#define RFIC_REGS_SX_0_PLL_CTRL_2 .addr_index = 0x00000102, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_VCO_AMPDET_REF_SEL_MASK    ((u32)0x78000000)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_VCO_AMPDET_REF_SEL_LSB    27
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_VCO_AMPDET_REF_SEL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_BGREN_BIT    ((u32)0x04000000)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_BGREN_POS    26
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_CLKTST_SEL_MASK    ((u32)0x03E00000)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_CLKTST_SEL_LSB    21
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_CLKTST_SEL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_CLKTSTEN_BIT    ((u32)0x00100000)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_CLKTSTEN_POS    20
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_R_2_MASK    ((u32)0x000F8000)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_R_2_LSB    15
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_R_2_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_DCSELH_BIT    ((u32)0x00004000)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_DCSELH_POS    14
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_CMPEN_BIT    ((u32)0x00002000)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_CMPEN_POS    13
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_CALTST_BIT    ((u32)0x00001000)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_CALTST_POS    12
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_SELH_MASK    ((u32)0x00000E00)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_SELH_LSB    9
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_SELH_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_SELL_MASK    ((u32)0x000001C0)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_SELL_LSB    6
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_SELL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_C_1_MASK    ((u32)0x00000038)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_C_1_LSB    3
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_C_1_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_C_34_MASK    ((u32)0x00000007)
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_C_34_LSB    0
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_C_34_WIDTH    ((u32)0x00000003)

#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_VCO_AMPDET_REF_SEL_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_BGREN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_CLKTST_SEL_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_CLKTSTEN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_R_2_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_DCSELH_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_CMPEN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_CALTST_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_SELH_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_SELL_RST    0x00000005
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_C_1_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_C_34_RST    0x00000000

static inline void rfic_regs_sx_0_pll_ctrl_2_pack(struct cl_chip *chip, u8 sx0_vco_ampdet_ref_sel, u8 sx0_bgren, u8 sx0_clktst_sel, u8 sx0_clktsten, u8 sx0_lpf_r2, u8 sx0_lpf_dcselh, u8 sx0_lpf_cmpen, u8 sx0_lpf_caltst, u8 sx0_lpf_selh, u8 sx0_lpf_sell, u8 sx0_lpf_c1, u8 sx0_lpf_c34)
{
	ASSERT_ERR_CHIP((((u32)sx0_vco_ampdet_ref_sel << 27) & ~((u32)0x78000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_bgren << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_clktst_sel << 21) & ~((u32)0x03E00000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_clktsten << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_lpf_r2 << 15) & ~((u32)0x000F8000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_lpf_dcselh << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_lpf_cmpen << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_lpf_caltst << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_lpf_selh << 9) & ~((u32)0x00000E00)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_lpf_sell << 6) & ~((u32)0x000001C0)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_lpf_c1 << 3) & ~((u32)0x00000038)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_lpf_c34 << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR, ((u32)sx0_vco_ampdet_ref_sel << 27) | ((u32)sx0_bgren << 26) | ((u32)sx0_clktst_sel << 21) | ((u32)sx0_clktsten << 20) | ((u32)sx0_lpf_r2 << 15) | ((u32)sx0_lpf_dcselh << 14) | ((u32)sx0_lpf_cmpen << 13) | ((u32)sx0_lpf_caltst << 12) | ((u32)sx0_lpf_selh << 9) | ((u32)sx0_lpf_sell << 6) | ((u32)sx0_lpf_c1 << 3) | ((u32)sx0_lpf_c34 << 0));
}

static inline void rfic_regs_sx_0_pll_ctrl_2_unpack(struct cl_chip *chip, u8 *sx0_vco_ampdet_ref_sel, u8 *sx0_bgren, u8 *sx0_clktst_sel, u8 *sx0_clktsten, u8 *sx0_lpf_r2, u8 *sx0_lpf_dcselh, u8 *sx0_lpf_cmpen, u8 *sx0_lpf_caltst, u8 *sx0_lpf_selh, u8 *sx0_lpf_sell, u8 *sx0_lpf_c1, u8 *sx0_lpf_c34)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR);

	*sx0_vco_ampdet_ref_sel = (local_val & ((u32)0x78000000)) >> 27;
	*sx0_bgren = (local_val & ((u32)0x04000000)) >> 26;
	*sx0_clktst_sel = (local_val & ((u32)0x03E00000)) >> 21;
	*sx0_clktsten = (local_val & ((u32)0x00100000)) >> 20;
	*sx0_lpf_r2 = (local_val & ((u32)0x000F8000)) >> 15;
	*sx0_lpf_dcselh = (local_val & ((u32)0x00004000)) >> 14;
	*sx0_lpf_cmpen = (local_val & ((u32)0x00002000)) >> 13;
	*sx0_lpf_caltst = (local_val & ((u32)0x00001000)) >> 12;
	*sx0_lpf_selh = (local_val & ((u32)0x00000E00)) >> 9;
	*sx0_lpf_sell = (local_val & ((u32)0x000001C0)) >> 6;
	*sx0_lpf_c1 = (local_val & ((u32)0x00000038)) >> 3;
	*sx0_lpf_c34 = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 rfic_regs_sx_0_pll_ctrl_2_sx_0_vco_ampdet_ref_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x78000000)) >> 27);
}

static inline void rfic_regs_sx_0_pll_ctrl_2_sx_0_vco_ampdet_ref_sel_setf(struct cl_chip *chip, u8 sx0vcoampdetrefsel)
{
	ASSERT_ERR_CHIP((((u32)sx0vcoampdetrefsel << 27) & ~((u32)0x78000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR) & ~((u32)0x78000000)) | ((u32)sx0vcoampdetrefsel << 27));
}

#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_VCO_AMPDET_REF_SEL .addr_index = 0x00000102, .size_minus_1 = (4 - 1), .shift = 27

static inline u8 rfic_regs_sx_0_pll_ctrl_2_sx_0_bgren_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void rfic_regs_sx_0_pll_ctrl_2_sx_0_bgren_setf(struct cl_chip *chip, u8 sx0bgren)
{
	ASSERT_ERR_CHIP((((u32)sx0bgren << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR) & ~((u32)0x04000000)) | ((u32)sx0bgren << 26));
}

#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_BGREN .addr_index = 0x00000102, .size_minus_1 = (1 - 1), .shift = 26

static inline u8 rfic_regs_sx_0_pll_ctrl_2_sx_0_clktst_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x03E00000)) >> 21);
}

static inline void rfic_regs_sx_0_pll_ctrl_2_sx_0_clktst_sel_setf(struct cl_chip *chip, u8 sx0clktstsel)
{
	ASSERT_ERR_CHIP((((u32)sx0clktstsel << 21) & ~((u32)0x03E00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR) & ~((u32)0x03E00000)) | ((u32)sx0clktstsel << 21));
}

#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_CLKTST_SEL .addr_index = 0x00000102, .size_minus_1 = (5 - 1), .shift = 21

static inline u8 rfic_regs_sx_0_pll_ctrl_2_sx_0_clktsten_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void rfic_regs_sx_0_pll_ctrl_2_sx_0_clktsten_setf(struct cl_chip *chip, u8 sx0clktsten)
{
	ASSERT_ERR_CHIP((((u32)sx0clktsten << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR) & ~((u32)0x00100000)) | ((u32)sx0clktsten << 20));
}

#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_CLKTSTEN .addr_index = 0x00000102, .size_minus_1 = (1 - 1), .shift = 20

static inline u8 rfic_regs_sx_0_pll_ctrl_2_sx_0_lpf_r_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x000F8000)) >> 15);
}

static inline void rfic_regs_sx_0_pll_ctrl_2_sx_0_lpf_r_2_setf(struct cl_chip *chip, u8 sx0lpfr2)
{
	ASSERT_ERR_CHIP((((u32)sx0lpfr2 << 15) & ~((u32)0x000F8000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR) & ~((u32)0x000F8000)) | ((u32)sx0lpfr2 << 15));
}

#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_R_2 .addr_index = 0x00000102, .size_minus_1 = (5 - 1), .shift = 15

static inline u8 rfic_regs_sx_0_pll_ctrl_2_sx_0_lpf_dcselh_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void rfic_regs_sx_0_pll_ctrl_2_sx_0_lpf_dcselh_setf(struct cl_chip *chip, u8 sx0lpfdcselh)
{
	ASSERT_ERR_CHIP((((u32)sx0lpfdcselh << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR) & ~((u32)0x00004000)) | ((u32)sx0lpfdcselh << 14));
}

#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_DCSELH .addr_index = 0x00000102, .size_minus_1 = (1 - 1), .shift = 14

static inline u8 rfic_regs_sx_0_pll_ctrl_2_sx_0_lpf_cmpen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void rfic_regs_sx_0_pll_ctrl_2_sx_0_lpf_cmpen_setf(struct cl_chip *chip, u8 sx0lpfcmpen)
{
	ASSERT_ERR_CHIP((((u32)sx0lpfcmpen << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR) & ~((u32)0x00002000)) | ((u32)sx0lpfcmpen << 13));
}

#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_CMPEN .addr_index = 0x00000102, .size_minus_1 = (1 - 1), .shift = 13

static inline u8 rfic_regs_sx_0_pll_ctrl_2_sx_0_lpf_caltst_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void rfic_regs_sx_0_pll_ctrl_2_sx_0_lpf_caltst_setf(struct cl_chip *chip, u8 sx0lpfcaltst)
{
	ASSERT_ERR_CHIP((((u32)sx0lpfcaltst << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR) & ~((u32)0x00001000)) | ((u32)sx0lpfcaltst << 12));
}

#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_CALTST .addr_index = 0x00000102, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_sx_0_pll_ctrl_2_sx_0_lpf_selh_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000E00)) >> 9);
}

static inline void rfic_regs_sx_0_pll_ctrl_2_sx_0_lpf_selh_setf(struct cl_chip *chip, u8 sx0lpfselh)
{
	ASSERT_ERR_CHIP((((u32)sx0lpfselh << 9) & ~((u32)0x00000E00)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR) & ~((u32)0x00000E00)) | ((u32)sx0lpfselh << 9));
}

#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_SELH .addr_index = 0x00000102, .size_minus_1 = (3 - 1), .shift = 9

static inline u8 rfic_regs_sx_0_pll_ctrl_2_sx_0_lpf_sell_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x000001C0)) >> 6);
}

static inline void rfic_regs_sx_0_pll_ctrl_2_sx_0_lpf_sell_setf(struct cl_chip *chip, u8 sx0lpfsell)
{
	ASSERT_ERR_CHIP((((u32)sx0lpfsell << 6) & ~((u32)0x000001C0)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR) & ~((u32)0x000001C0)) | ((u32)sx0lpfsell << 6));
}

#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_SELL .addr_index = 0x00000102, .size_minus_1 = (3 - 1), .shift = 6

static inline u8 rfic_regs_sx_0_pll_ctrl_2_sx_0_lpf_c_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000038)) >> 3);
}

static inline void rfic_regs_sx_0_pll_ctrl_2_sx_0_lpf_c_1_setf(struct cl_chip *chip, u8 sx0lpfc1)
{
	ASSERT_ERR_CHIP((((u32)sx0lpfc1 << 3) & ~((u32)0x00000038)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR) & ~((u32)0x00000038)) | ((u32)sx0lpfc1 << 3));
}

#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_C_1 .addr_index = 0x00000102, .size_minus_1 = (3 - 1), .shift = 3

static inline u8 rfic_regs_sx_0_pll_ctrl_2_sx_0_lpf_c_34_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void rfic_regs_sx_0_pll_ctrl_2_sx_0_lpf_c_34_setf(struct cl_chip *chip, u8 sx0lpfc34)
{
	ASSERT_ERR_CHIP((((u32)sx0lpfc34 << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_2_ADDR) & ~((u32)0x00000007)) | ((u32)sx0lpfc34 << 0));
}

#define RFIC_REGS_SX_0_PLL_CTRL_2_SX_0_LPF_C_34 .addr_index = 0x00000102, .size_minus_1 = (3 - 1), .shift = 0

/**
 * @brief SX_0_PLL_CTRL_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SX0_soft_rstn             00000001
 *    30    SX0_freq_cfg_sel          00000000
 *    29    SX0_fsm_pfd_dnsel_man     00000000
 *    28:08 SX0_div_nfrac             0x00000000
 *    07:00 SX0_div_int               0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_0_PLL_CTRL_3_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000040C)
#define RFIC_REGS_SX_0_PLL_CTRL_3_OFFSET      0x0000040C
#define RFIC_REGS_SX_0_PLL_CTRL_3_INDEX       0x00000103
#define RFIC_REGS_SX_0_PLL_CTRL_3_RESET       0x80000000

static inline u32 rfic_regs_sx_0_pll_ctrl_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR);
}

static inline void rfic_regs_sx_0_pll_ctrl_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR, value);
}

#define RFIC_REGS_SX_0_PLL_CTRL_3 .addr_index = 0x00000103, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_SOFT_RSTN_BIT    ((u32)0x80000000)
#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_SOFT_RSTN_POS    31
#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_FREQ_CFG_SEL_BIT    ((u32)0x40000000)
#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_FREQ_CFG_SEL_POS    30
#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_FSM_PFD_DNSEL_MAN_BIT    ((u32)0x20000000)
#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_FSM_PFD_DNSEL_MAN_POS    29
#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_DIV_NFRAC_MASK    ((u32)0x1FFFFF00)
#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_DIV_NFRAC_LSB    8
#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_DIV_NFRAC_WIDTH    ((u32)0x00000015)
#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_DIV_INT_MASK    ((u32)0x000000FF)
#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_DIV_INT_LSB    0
#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_DIV_INT_WIDTH    ((u32)0x00000008)

#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_SOFT_RSTN_RST    0x00000001
#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_FREQ_CFG_SEL_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_FSM_PFD_DNSEL_MAN_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_DIV_NFRAC_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_DIV_INT_RST    0x00000000

static inline void rfic_regs_sx_0_pll_ctrl_3_pack(struct cl_chip *chip, u8 sx0_soft_rstn, u8 sx0_freq_cfg_sel, u8 sx0_fsm_pfd_dnsel_man, u32 sx0_div_nfrac, u8 sx0_div_int)
{
	ASSERT_ERR_CHIP((((u32)sx0_soft_rstn << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_freq_cfg_sel << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_pfd_dnsel_man << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_div_nfrac << 8) & ~((u32)0x1FFFFF00)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_div_int << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR, ((u32)sx0_soft_rstn << 31) | ((u32)sx0_freq_cfg_sel << 30) | ((u32)sx0_fsm_pfd_dnsel_man << 29) | ((u32)sx0_div_nfrac << 8) | ((u32)sx0_div_int << 0));
}

static inline void rfic_regs_sx_0_pll_ctrl_3_unpack(struct cl_chip *chip, u8 *sx0_soft_rstn, u8 *sx0_freq_cfg_sel, u8 *sx0_fsm_pfd_dnsel_man, u32 *sx0_div_nfrac, u8 *sx0_div_int)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR);

	*sx0_soft_rstn = (local_val & ((u32)0x80000000)) >> 31;
	*sx0_freq_cfg_sel = (local_val & ((u32)0x40000000)) >> 30;
	*sx0_fsm_pfd_dnsel_man = (local_val & ((u32)0x20000000)) >> 29;
	*sx0_div_nfrac = (local_val & ((u32)0x1FFFFF00)) >> 8;
	*sx0_div_int = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 rfic_regs_sx_0_pll_ctrl_3_sx_0_soft_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void rfic_regs_sx_0_pll_ctrl_3_sx_0_soft_rstn_setf(struct cl_chip *chip, u8 sx0softrstn)
{
	ASSERT_ERR_CHIP((((u32)sx0softrstn << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR) & ~((u32)0x80000000)) | ((u32)sx0softrstn << 31));
}

#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_SOFT_RSTN .addr_index = 0x00000103, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_sx_0_pll_ctrl_3_sx_0_freq_cfg_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void rfic_regs_sx_0_pll_ctrl_3_sx_0_freq_cfg_sel_setf(struct cl_chip *chip, u8 sx0freqcfgsel)
{
	ASSERT_ERR_CHIP((((u32)sx0freqcfgsel << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR) & ~((u32)0x40000000)) | ((u32)sx0freqcfgsel << 30));
}

#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_FREQ_CFG_SEL .addr_index = 0x00000103, .size_minus_1 = (1 - 1), .shift = 30

static inline u8 rfic_regs_sx_0_pll_ctrl_3_sx_0_fsm_pfd_dnsel_man_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void rfic_regs_sx_0_pll_ctrl_3_sx_0_fsm_pfd_dnsel_man_setf(struct cl_chip *chip, u8 sx0fsmpfddnselman)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmpfddnselman << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR) & ~((u32)0x20000000)) | ((u32)sx0fsmpfddnselman << 29));
}

#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_FSM_PFD_DNSEL_MAN .addr_index = 0x00000103, .size_minus_1 = (1 - 1), .shift = 29

static inline u32 rfic_regs_sx_0_pll_ctrl_3_sx_0_div_nfrac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR);

	return (u32)((local_val & ((u32)0x1FFFFF00)) >> 8);
}

static inline void rfic_regs_sx_0_pll_ctrl_3_sx_0_div_nfrac_setf(struct cl_chip *chip, u32 sx0divnfrac)
{
	ASSERT_ERR_CHIP((((u32)sx0divnfrac << 8) & ~((u32)0x1FFFFF00)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR) & ~((u32)0x1FFFFF00)) | ((u32)sx0divnfrac << 8));
}

#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_DIV_NFRAC .addr_index = 0x00000103, .size_minus_1 = (21 - 1), .shift = 8

static inline u8 rfic_regs_sx_0_pll_ctrl_3_sx_0_div_int_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void rfic_regs_sx_0_pll_ctrl_3_sx_0_div_int_setf(struct cl_chip *chip, u8 sx0divint)
{
	ASSERT_ERR_CHIP((((u32)sx0divint << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_3_ADDR) & ~((u32)0x000000FF)) | ((u32)sx0divint << 0));
}

#define RFIC_REGS_SX_0_PLL_CTRL_3_SX_0_DIV_INT .addr_index = 0x00000103, .size_minus_1 = (8 - 1), .shift = 0

/**
 * @brief SX_0_PLL_CTRL_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21:20 SX0_vco_sel_cal_max_ftune_offset 0x00000000
 *    19:18 SX0_div_ldo_sel           0x00000000
 *    17    SX0_div_ldo_vref_sel      00000000
 *    16    SX0_pfd_dnsel             00000000
 *    15:04 SX0_sdm_lfsr_init_state   0x000004b2
 *    03:02 SX0_vco_sel               0x00000000
 *    01    SX0_sdm_lfsr_ld           00000000
 *    00    SX0_fdiv_sel              00000000
 * </pre>
 */
#define RFIC_REGS_SX_0_PLL_CTRL_4_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000410)
#define RFIC_REGS_SX_0_PLL_CTRL_4_OFFSET      0x00000410
#define RFIC_REGS_SX_0_PLL_CTRL_4_INDEX       0x00000104
#define RFIC_REGS_SX_0_PLL_CTRL_4_RESET       0x00004B20

static inline u32 rfic_regs_sx_0_pll_ctrl_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR);
}

static inline void rfic_regs_sx_0_pll_ctrl_4_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR, value);
}

#define RFIC_REGS_SX_0_PLL_CTRL_4 .addr_index = 0x00000104, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_VCO_SEL_CAL_MAX_FTUNE_OFFSET_MASK    ((u32)0x00300000)
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_VCO_SEL_CAL_MAX_FTUNE_OFFSET_LSB    20
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_VCO_SEL_CAL_MAX_FTUNE_OFFSET_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_DIV_LDO_SEL_MASK    ((u32)0x000C0000)
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_DIV_LDO_SEL_LSB    18
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_DIV_LDO_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_DIV_LDO_VREF_SEL_BIT    ((u32)0x00020000)
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_DIV_LDO_VREF_SEL_POS    17
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_PFD_DNSEL_BIT    ((u32)0x00010000)
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_PFD_DNSEL_POS    16
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_SDM_LFSR_INIT_STATE_MASK    ((u32)0x0000FFF0)
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_SDM_LFSR_INIT_STATE_LSB    4
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_SDM_LFSR_INIT_STATE_WIDTH    ((u32)0x0000000C)
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_VCO_SEL_MASK    ((u32)0x0000000C)
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_VCO_SEL_LSB    2
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_VCO_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_SDM_LFSR_LD_BIT    ((u32)0x00000002)
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_SDM_LFSR_LD_POS    1
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_FDIV_SEL_BIT    ((u32)0x00000001)
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_FDIV_SEL_POS    0

#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_VCO_SEL_CAL_MAX_FTUNE_OFFSET_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_DIV_LDO_SEL_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_DIV_LDO_VREF_SEL_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_PFD_DNSEL_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_SDM_LFSR_INIT_STATE_RST    0x000004b2
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_VCO_SEL_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_SDM_LFSR_LD_RST    0x00000000
#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_FDIV_SEL_RST    0x00000000

static inline void rfic_regs_sx_0_pll_ctrl_4_pack(struct cl_chip *chip, u8 sx0_vco_sel_cal_max_ftune_offset, u8 sx0_div_ldo_sel, u8 sx0_div_ldo_vref_sel, u8 sx0_pfd_dnsel, u16 sx0_sdm_lfsr_init_state, u8 sx0_vco_sel, u8 sx0_sdm_lfsr_ld, u8 sx0_fdiv_sel)
{
	ASSERT_ERR_CHIP((((u32)sx0_vco_sel_cal_max_ftune_offset << 20) & ~((u32)0x00300000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_div_ldo_sel << 18) & ~((u32)0x000C0000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_div_ldo_vref_sel << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_pfd_dnsel << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_sdm_lfsr_init_state << 4) & ~((u32)0x0000FFF0)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_vco_sel << 2) & ~((u32)0x0000000C)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_sdm_lfsr_ld << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fdiv_sel << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR, ((u32)sx0_vco_sel_cal_max_ftune_offset << 20) | ((u32)sx0_div_ldo_sel << 18) | ((u32)sx0_div_ldo_vref_sel << 17) | ((u32)sx0_pfd_dnsel << 16) | ((u32)sx0_sdm_lfsr_init_state << 4) | ((u32)sx0_vco_sel << 2) | ((u32)sx0_sdm_lfsr_ld << 1) | ((u32)sx0_fdiv_sel << 0));
}

static inline void rfic_regs_sx_0_pll_ctrl_4_unpack(struct cl_chip *chip, u8 *sx0_vco_sel_cal_max_ftune_offset, u8 *sx0_div_ldo_sel, u8 *sx0_div_ldo_vref_sel, u8 *sx0_pfd_dnsel, u16 *sx0_sdm_lfsr_init_state, u8 *sx0_vco_sel, u8 *sx0_sdm_lfsr_ld, u8 *sx0_fdiv_sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR);

	*sx0_vco_sel_cal_max_ftune_offset = (local_val & ((u32)0x00300000)) >> 20;
	*sx0_div_ldo_sel = (local_val & ((u32)0x000C0000)) >> 18;
	*sx0_div_ldo_vref_sel = (local_val & ((u32)0x00020000)) >> 17;
	*sx0_pfd_dnsel = (local_val & ((u32)0x00010000)) >> 16;
	*sx0_sdm_lfsr_init_state = (local_val & ((u32)0x0000FFF0)) >> 4;
	*sx0_vco_sel = (local_val & ((u32)0x0000000C)) >> 2;
	*sx0_sdm_lfsr_ld = (local_val & ((u32)0x00000002)) >> 1;
	*sx0_fdiv_sel = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_sx_0_pll_ctrl_4_sx_0_vco_sel_cal_max_ftune_offset_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x00300000)) >> 20);
}

static inline void rfic_regs_sx_0_pll_ctrl_4_sx_0_vco_sel_cal_max_ftune_offset_setf(struct cl_chip *chip, u8 sx0vcoselcalmaxftuneoffset)
{
	ASSERT_ERR_CHIP((((u32)sx0vcoselcalmaxftuneoffset << 20) & ~((u32)0x00300000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR) & ~((u32)0x00300000)) | ((u32)sx0vcoselcalmaxftuneoffset << 20));
}

#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_VCO_SEL_CAL_MAX_FTUNE_OFFSET .addr_index = 0x00000104, .size_minus_1 = (2 - 1), .shift = 20

static inline u8 rfic_regs_sx_0_pll_ctrl_4_sx_0_div_ldo_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x000C0000)) >> 18);
}

static inline void rfic_regs_sx_0_pll_ctrl_4_sx_0_div_ldo_sel_setf(struct cl_chip *chip, u8 sx0divldosel)
{
	ASSERT_ERR_CHIP((((u32)sx0divldosel << 18) & ~((u32)0x000C0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR) & ~((u32)0x000C0000)) | ((u32)sx0divldosel << 18));
}

#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_DIV_LDO_SEL .addr_index = 0x00000104, .size_minus_1 = (2 - 1), .shift = 18

static inline u8 rfic_regs_sx_0_pll_ctrl_4_sx_0_div_ldo_vref_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_sx_0_pll_ctrl_4_sx_0_div_ldo_vref_sel_setf(struct cl_chip *chip, u8 sx0divldovrefsel)
{
	ASSERT_ERR_CHIP((((u32)sx0divldovrefsel << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR) & ~((u32)0x00020000)) | ((u32)sx0divldovrefsel << 17));
}

#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_DIV_LDO_VREF_SEL .addr_index = 0x00000104, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_sx_0_pll_ctrl_4_sx_0_pfd_dnsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void rfic_regs_sx_0_pll_ctrl_4_sx_0_pfd_dnsel_setf(struct cl_chip *chip, u8 sx0pfddnsel)
{
	ASSERT_ERR_CHIP((((u32)sx0pfddnsel << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR) & ~((u32)0x00010000)) | ((u32)sx0pfddnsel << 16));
}

#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_PFD_DNSEL .addr_index = 0x00000104, .size_minus_1 = (1 - 1), .shift = 16

static inline u16 rfic_regs_sx_0_pll_ctrl_4_sx_0_sdm_lfsr_init_state_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR);

	return (u16)((local_val & ((u32)0x0000FFF0)) >> 4);
}

static inline void rfic_regs_sx_0_pll_ctrl_4_sx_0_sdm_lfsr_init_state_setf(struct cl_chip *chip, u16 sx0sdmlfsrinitstate)
{
	ASSERT_ERR_CHIP((((u32)sx0sdmlfsrinitstate << 4) & ~((u32)0x0000FFF0)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR) & ~((u32)0x0000FFF0)) | ((u32)sx0sdmlfsrinitstate << 4));
}

#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_SDM_LFSR_INIT_STATE .addr_index = 0x00000104, .size_minus_1 = (12 - 1), .shift = 4

static inline u8 rfic_regs_sx_0_pll_ctrl_4_sx_0_vco_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x0000000C)) >> 2);
}

static inline void rfic_regs_sx_0_pll_ctrl_4_sx_0_vco_sel_setf(struct cl_chip *chip, u8 sx0vcosel)
{
	ASSERT_ERR_CHIP((((u32)sx0vcosel << 2) & ~((u32)0x0000000C)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR) & ~((u32)0x0000000C)) | ((u32)sx0vcosel << 2));
}

#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_VCO_SEL .addr_index = 0x00000104, .size_minus_1 = (2 - 1), .shift = 2

static inline u8 rfic_regs_sx_0_pll_ctrl_4_sx_0_sdm_lfsr_ld_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_sx_0_pll_ctrl_4_sx_0_sdm_lfsr_ld_setf(struct cl_chip *chip, u8 sx0sdmlfsrld)
{
	ASSERT_ERR_CHIP((((u32)sx0sdmlfsrld << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR) & ~((u32)0x00000002)) | ((u32)sx0sdmlfsrld << 1));
}

#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_SDM_LFSR_LD .addr_index = 0x00000104, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_sx_0_pll_ctrl_4_sx_0_fdiv_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_sx_0_pll_ctrl_4_sx_0_fdiv_sel_setf(struct cl_chip *chip, u8 sx0fdivsel)
{
	ASSERT_ERR_CHIP((((u32)sx0fdivsel << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_4_ADDR) & ~((u32)0x00000001)) | ((u32)sx0fdivsel << 0));
}

#define RFIC_REGS_SX_0_PLL_CTRL_4_SX_0_FDIV_SEL .addr_index = 0x00000104, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief SX_0_PLL_CTRL_5 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    20:00 SX0_alt_div_nfrac         0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_0_PLL_CTRL_5_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000414)
#define RFIC_REGS_SX_0_PLL_CTRL_5_OFFSET      0x00000414
#define RFIC_REGS_SX_0_PLL_CTRL_5_INDEX       0x00000105
#define RFIC_REGS_SX_0_PLL_CTRL_5_RESET       0x00000000

static inline u32 rfic_regs_sx_0_pll_ctrl_5_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_5_ADDR);
}

static inline void rfic_regs_sx_0_pll_ctrl_5_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_5_ADDR, value);
}

#define RFIC_REGS_SX_0_PLL_CTRL_5 .addr_index = 0x00000105, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_PLL_CTRL_5_SX_0_ALT_DIV_NFRAC_MASK    ((u32)0x001FFFFF)
#define RFIC_REGS_SX_0_PLL_CTRL_5_SX_0_ALT_DIV_NFRAC_LSB    0
#define RFIC_REGS_SX_0_PLL_CTRL_5_SX_0_ALT_DIV_NFRAC_WIDTH    ((u32)0x00000015)

#define RFIC_REGS_SX_0_PLL_CTRL_5_SX_0_ALT_DIV_NFRAC_RST    0x00000000

static inline u32 rfic_regs_sx_0_pll_ctrl_5_sx_0_alt_div_nfrac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_PLL_CTRL_5_ADDR);

	return (u32)(local_val >> 0);
}

static inline void rfic_regs_sx_0_pll_ctrl_5_sx_0_alt_div_nfrac_setf(struct cl_chip *chip, u32 sx0altdivnfrac)
{
	ASSERT_ERR_CHIP((((u32)sx0altdivnfrac << 0) & ~((u32)0x001FFFFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_PLL_CTRL_5_ADDR, (u32)sx0altdivnfrac << 0);
}

#define RFIC_REGS_SX_0_PLL_CTRL_5_SX_0_ALT_DIV_NFRAC .addr_index = 0x00000105, .size_minus_1 = (21 - 1), .shift = 0

/**
 * @brief SX_0_FSM_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 SX0_fsm_freq_meas_dur     0x00000000
 *    27:10 SX0_fsm_freq_meas_trgt    0x00000000
 *    09:08 SX0_fsm_lockdet_acc       0x00000000
 *    07:06 SX0_fsm_ld_avgset         0x00000000
 *    05:04 SX0_fsm_lbw_sel           0x00000000
 *    03:02 SX0_fsm_freq_update_per   0x00000000
 *    01    SX0_fsm_cal_clk_off_lock  00000000
 *    00    SX0_fsm_rstn              00000001
 * </pre>
 */
#define RFIC_REGS_SX_0_FSM_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000418)
#define RFIC_REGS_SX_0_FSM_CTRL_0_OFFSET      0x00000418
#define RFIC_REGS_SX_0_FSM_CTRL_0_INDEX       0x00000106
#define RFIC_REGS_SX_0_FSM_CTRL_0_RESET       0x00000001

static inline u32 rfic_regs_sx_0_fsm_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR);
}

static inline void rfic_regs_sx_0_fsm_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR, value);
}

#define RFIC_REGS_SX_0_FSM_CTRL_0 .addr_index = 0x00000106, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_FREQ_MEAS_DUR_MASK    ((u32)0xF0000000)
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_FREQ_MEAS_DUR_LSB    28
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_FREQ_MEAS_DUR_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_FREQ_MEAS_TRGT_MASK    ((u32)0x0FFFFC00)
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_FREQ_MEAS_TRGT_LSB    10
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_FREQ_MEAS_TRGT_WIDTH    ((u32)0x00000012)
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_LOCKDET_ACC_MASK    ((u32)0x00000300)
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_LOCKDET_ACC_LSB    8
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_LOCKDET_ACC_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_LD_AVGSET_MASK    ((u32)0x000000C0)
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_LD_AVGSET_LSB    6
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_LD_AVGSET_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_LBW_SEL_MASK    ((u32)0x00000030)
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_LBW_SEL_LSB    4
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_LBW_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_FREQ_UPDATE_PER_MASK    ((u32)0x0000000C)
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_FREQ_UPDATE_PER_LSB    2
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_FREQ_UPDATE_PER_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_CAL_CLK_OFF_LOCK_BIT    ((u32)0x00000002)
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_CAL_CLK_OFF_LOCK_POS    1
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_RSTN_BIT    ((u32)0x00000001)
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_RSTN_POS    0

#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_FREQ_MEAS_DUR_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_FREQ_MEAS_TRGT_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_LOCKDET_ACC_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_LD_AVGSET_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_LBW_SEL_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_FREQ_UPDATE_PER_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_CAL_CLK_OFF_LOCK_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_RSTN_RST    0x00000001

static inline void rfic_regs_sx_0_fsm_ctrl_0_pack(struct cl_chip *chip, u8 sx0_fsm_freq_meas_dur, u32 sx0_fsm_freq_meas_trgt, u8 sx0_fsm_lockdet_acc, u8 sx0_fsm_ld_avgset, u8 sx0_fsm_lbw_sel, u8 sx0_fsm_freq_update_per, u8 sx0_fsm_cal_clk_off_lock, u8 sx0_fsm_rstn)
{
	ASSERT_ERR_CHIP((((u32)sx0_fsm_freq_meas_dur << 28) & ~((u32)0xF0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_freq_meas_trgt << 10) & ~((u32)0x0FFFFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_lockdet_acc << 8) & ~((u32)0x00000300)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_ld_avgset << 6) & ~((u32)0x000000C0)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_lbw_sel << 4) & ~((u32)0x00000030)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_freq_update_per << 2) & ~((u32)0x0000000C)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_cal_clk_off_lock << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_rstn << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR, ((u32)sx0_fsm_freq_meas_dur << 28) | ((u32)sx0_fsm_freq_meas_trgt << 10) | ((u32)sx0_fsm_lockdet_acc << 8) | ((u32)sx0_fsm_ld_avgset << 6) | ((u32)sx0_fsm_lbw_sel << 4) | ((u32)sx0_fsm_freq_update_per << 2) | ((u32)sx0_fsm_cal_clk_off_lock << 1) | ((u32)sx0_fsm_rstn << 0));
}

static inline void rfic_regs_sx_0_fsm_ctrl_0_unpack(struct cl_chip *chip, u8 *sx0_fsm_freq_meas_dur, u32 *sx0_fsm_freq_meas_trgt, u8 *sx0_fsm_lockdet_acc, u8 *sx0_fsm_ld_avgset, u8 *sx0_fsm_lbw_sel, u8 *sx0_fsm_freq_update_per, u8 *sx0_fsm_cal_clk_off_lock, u8 *sx0_fsm_rstn)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR);

	*sx0_fsm_freq_meas_dur = (local_val & ((u32)0xF0000000)) >> 28;
	*sx0_fsm_freq_meas_trgt = (local_val & ((u32)0x0FFFFC00)) >> 10;
	*sx0_fsm_lockdet_acc = (local_val & ((u32)0x00000300)) >> 8;
	*sx0_fsm_ld_avgset = (local_val & ((u32)0x000000C0)) >> 6;
	*sx0_fsm_lbw_sel = (local_val & ((u32)0x00000030)) >> 4;
	*sx0_fsm_freq_update_per = (local_val & ((u32)0x0000000C)) >> 2;
	*sx0_fsm_cal_clk_off_lock = (local_val & ((u32)0x00000002)) >> 1;
	*sx0_fsm_rstn = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_sx_0_fsm_ctrl_0_sx_0_fsm_freq_meas_dur_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0xF0000000)) >> 28);
}

static inline void rfic_regs_sx_0_fsm_ctrl_0_sx_0_fsm_freq_meas_dur_setf(struct cl_chip *chip, u8 sx0fsmfreqmeasdur)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmfreqmeasdur << 28) & ~((u32)0xF0000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR) & ~((u32)0xF0000000)) | ((u32)sx0fsmfreqmeasdur << 28));
}

#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_FREQ_MEAS_DUR .addr_index = 0x00000106, .size_minus_1 = (4 - 1), .shift = 28

static inline u32 rfic_regs_sx_0_fsm_ctrl_0_sx_0_fsm_freq_meas_trgt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR);

	return (u32)((local_val & ((u32)0x0FFFFC00)) >> 10);
}

static inline void rfic_regs_sx_0_fsm_ctrl_0_sx_0_fsm_freq_meas_trgt_setf(struct cl_chip *chip, u32 sx0fsmfreqmeastrgt)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmfreqmeastrgt << 10) & ~((u32)0x0FFFFC00)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR) & ~((u32)0x0FFFFC00)) | ((u32)sx0fsmfreqmeastrgt << 10));
}

#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_FREQ_MEAS_TRGT .addr_index = 0x00000106, .size_minus_1 = (18 - 1), .shift = 10

static inline u8 rfic_regs_sx_0_fsm_ctrl_0_sx_0_fsm_lockdet_acc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000300)) >> 8);
}

static inline void rfic_regs_sx_0_fsm_ctrl_0_sx_0_fsm_lockdet_acc_setf(struct cl_chip *chip, u8 sx0fsmlockdetacc)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmlockdetacc << 8) & ~((u32)0x00000300)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR) & ~((u32)0x00000300)) | ((u32)sx0fsmlockdetacc << 8));
}

#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_LOCKDET_ACC .addr_index = 0x00000106, .size_minus_1 = (2 - 1), .shift = 8

static inline u8 rfic_regs_sx_0_fsm_ctrl_0_sx_0_fsm_ld_avgset_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x000000C0)) >> 6);
}

static inline void rfic_regs_sx_0_fsm_ctrl_0_sx_0_fsm_ld_avgset_setf(struct cl_chip *chip, u8 sx0fsmldavgset)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmldavgset << 6) & ~((u32)0x000000C0)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR) & ~((u32)0x000000C0)) | ((u32)sx0fsmldavgset << 6));
}

#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_LD_AVGSET .addr_index = 0x00000106, .size_minus_1 = (2 - 1), .shift = 6

static inline u8 rfic_regs_sx_0_fsm_ctrl_0_sx_0_fsm_lbw_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000030)) >> 4);
}

static inline void rfic_regs_sx_0_fsm_ctrl_0_sx_0_fsm_lbw_sel_setf(struct cl_chip *chip, u8 sx0fsmlbwsel)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmlbwsel << 4) & ~((u32)0x00000030)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR) & ~((u32)0x00000030)) | ((u32)sx0fsmlbwsel << 4));
}

#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_LBW_SEL .addr_index = 0x00000106, .size_minus_1 = (2 - 1), .shift = 4

static inline u8 rfic_regs_sx_0_fsm_ctrl_0_sx_0_fsm_freq_update_per_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000000C)) >> 2);
}

static inline void rfic_regs_sx_0_fsm_ctrl_0_sx_0_fsm_freq_update_per_setf(struct cl_chip *chip, u8 sx0fsmfrequpdateper)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmfrequpdateper << 2) & ~((u32)0x0000000C)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR) & ~((u32)0x0000000C)) | ((u32)sx0fsmfrequpdateper << 2));
}

#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_FREQ_UPDATE_PER .addr_index = 0x00000106, .size_minus_1 = (2 - 1), .shift = 2

static inline u8 rfic_regs_sx_0_fsm_ctrl_0_sx_0_fsm_cal_clk_off_lock_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_sx_0_fsm_ctrl_0_sx_0_fsm_cal_clk_off_lock_setf(struct cl_chip *chip, u8 sx0fsmcalclkofflock)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmcalclkofflock << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR) & ~((u32)0x00000002)) | ((u32)sx0fsmcalclkofflock << 1));
}

#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_CAL_CLK_OFF_LOCK .addr_index = 0x00000106, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_sx_0_fsm_ctrl_0_sx_0_fsm_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_sx_0_fsm_ctrl_0_sx_0_fsm_rstn_setf(struct cl_chip *chip, u8 sx0fsmrstn)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmrstn << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)sx0fsmrstn << 0));
}

#define RFIC_REGS_SX_0_FSM_CTRL_0_SX_0_FSM_RSTN .addr_index = 0x00000106, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief SX_0_FSM_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27    SX0_fsm_lpf_vctrl_low_flag_clear 00000000
 *    26    SX0_fsm_lpf_vctrl_high_flag_clear 00000000
 *    25    SX0_fsm_use_ext_vco_sel_en 00000000
 *    24    SX0_fsm_skip_vco_sel_cal  00000000
 *    23    SX0_fsm_cal_standby       00000000
 *    22:21 SX0_fsm_amp_flt_nsamples  0x00000000
 *    20:19 SX0_fsm_ampl_update_per   0x00000000
 *    18    SX0_fsm_use_ext_cp_cur_sel_en 00000000
 *    17    SX0_fsm_use_ext_lpf_r2_en 00000000
 *    16    SX0_fsm_use_ext_lpf_c1_en 00000000
 *    15    SX0_fsm_use_ext_lpf_c34_en 00000000
 *    14    SX0_fsm_use_ext_vco_cur_sel_en 00000000
 *    13    SX0_fsm_use_ext_ftun_en   00000000
 *    12    SX0_fsm_skip_ampcal       00000000
 *    11    SX0_fsm_skip_lbwcal       00000000
 *    10    SX0_fsm_skip_freqcal      00000000
 *    09    SX0_fsm_power_on_seq_start 00000000
 *    08    SX0_fsm_bypass            00000000
 *    07    SX0_fsm_lock_det_en       00000001
 *    06    SX0_fsm_lock_detect_sticky_clear 00000000
 *    05    SX0_fsm_fast_power_on_seq_en 00000000
 *    04    SX0_fsm_cal_en            00000000
 *    03    SX0_spare2_in             00000000
 *    02:00 SX0_fsm_kvco_meas_wait_time 0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_0_FSM_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000041C)
#define RFIC_REGS_SX_0_FSM_CTRL_1_OFFSET      0x0000041C
#define RFIC_REGS_SX_0_FSM_CTRL_1_INDEX       0x00000107
#define RFIC_REGS_SX_0_FSM_CTRL_1_RESET       0x00000080

static inline u32 rfic_regs_sx_0_fsm_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, value);
}

#define RFIC_REGS_SX_0_FSM_CTRL_1 .addr_index = 0x00000107, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_LPF_VCTRL_LOW_FLAG_CLEAR_BIT    ((u32)0x08000000)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_LPF_VCTRL_LOW_FLAG_CLEAR_POS    27
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_LPF_VCTRL_HIGH_FLAG_CLEAR_BIT    ((u32)0x04000000)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_LPF_VCTRL_HIGH_FLAG_CLEAR_POS    26
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_VCO_SEL_EN_BIT    ((u32)0x02000000)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_VCO_SEL_EN_POS    25
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_SKIP_VCO_SEL_CAL_BIT    ((u32)0x01000000)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_SKIP_VCO_SEL_CAL_POS    24
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_CAL_STANDBY_BIT    ((u32)0x00800000)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_CAL_STANDBY_POS    23
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_AMP_FLT_NSAMPLES_MASK    ((u32)0x00600000)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_AMP_FLT_NSAMPLES_LSB    21
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_AMP_FLT_NSAMPLES_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_AMPL_UPDATE_PER_MASK    ((u32)0x00180000)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_AMPL_UPDATE_PER_LSB    19
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_AMPL_UPDATE_PER_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_CP_CUR_SEL_EN_BIT    ((u32)0x00040000)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_CP_CUR_SEL_EN_POS    18
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_LPF_R_2_EN_BIT    ((u32)0x00020000)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_LPF_R_2_EN_POS    17
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_LPF_C_1_EN_BIT    ((u32)0x00010000)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_LPF_C_1_EN_POS    16
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_LPF_C_34_EN_BIT    ((u32)0x00008000)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_LPF_C_34_EN_POS    15
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_VCO_CUR_SEL_EN_BIT    ((u32)0x00004000)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_VCO_CUR_SEL_EN_POS    14
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_FTUN_EN_BIT    ((u32)0x00002000)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_FTUN_EN_POS    13
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_SKIP_AMPCAL_BIT    ((u32)0x00001000)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_SKIP_AMPCAL_POS    12
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_SKIP_LBWCAL_BIT    ((u32)0x00000800)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_SKIP_LBWCAL_POS    11
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_SKIP_FREQCAL_BIT    ((u32)0x00000400)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_SKIP_FREQCAL_POS    10
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_POWER_ON_SEQ_START_BIT    ((u32)0x00000200)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_POWER_ON_SEQ_START_POS    9
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_BYPASS_BIT    ((u32)0x00000100)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_BYPASS_POS    8
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_LOCK_DET_EN_BIT    ((u32)0x00000080)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_LOCK_DET_EN_POS    7
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_LOCK_DETECT_STICKY_CLEAR_BIT    ((u32)0x00000040)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_LOCK_DETECT_STICKY_CLEAR_POS    6
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_FAST_POWER_ON_SEQ_EN_BIT    ((u32)0x00000020)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_FAST_POWER_ON_SEQ_EN_POS    5
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_CAL_EN_BIT    ((u32)0x00000010)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_CAL_EN_POS    4
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_SPARE_2_IN_BIT    ((u32)0x00000008)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_SPARE_2_IN_POS    3
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_KVCO_MEAS_WAIT_TIME_MASK    ((u32)0x00000007)
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_KVCO_MEAS_WAIT_TIME_LSB    0
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_KVCO_MEAS_WAIT_TIME_WIDTH    ((u32)0x00000003)

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_LPF_VCTRL_LOW_FLAG_CLEAR_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_LPF_VCTRL_HIGH_FLAG_CLEAR_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_VCO_SEL_EN_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_SKIP_VCO_SEL_CAL_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_CAL_STANDBY_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_AMP_FLT_NSAMPLES_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_AMPL_UPDATE_PER_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_CP_CUR_SEL_EN_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_LPF_R_2_EN_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_LPF_C_1_EN_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_LPF_C_34_EN_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_VCO_CUR_SEL_EN_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_FTUN_EN_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_SKIP_AMPCAL_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_SKIP_LBWCAL_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_SKIP_FREQCAL_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_POWER_ON_SEQ_START_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_BYPASS_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_LOCK_DET_EN_RST    0x00000001
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_LOCK_DETECT_STICKY_CLEAR_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_FAST_POWER_ON_SEQ_EN_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_CAL_EN_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_SPARE_2_IN_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_KVCO_MEAS_WAIT_TIME_RST    0x00000000

static inline void rfic_regs_sx_0_fsm_ctrl_1_pack(struct cl_chip *chip, u8 sx0_fsm_lpf_vctrl_low_flag_clear, u8 sx0_fsm_lpf_vctrl_high_flag_clear, u8 sx0_fsm_use_ext_vco_sel_en, u8 sx0_fsm_skip_vco_sel_cal, u8 sx0_fsm_cal_standby, u8 sx0_fsm_amp_flt_nsamples, u8 sx0_fsm_ampl_update_per, u8 sx0_fsm_use_ext_cp_cur_sel_en, u8 sx0_fsm_use_ext_lpf_r2_en, u8 sx0_fsm_use_ext_lpf_c1_en, u8 sx0_fsm_use_ext_lpf_c34_en, u8 sx0_fsm_use_ext_vco_cur_sel_en, u8 sx0_fsm_use_ext_ftun_en, u8 sx0_fsm_skip_ampcal, u8 sx0_fsm_skip_lbwcal, u8 sx0_fsm_skip_freqcal, u8 sx0_fsm_power_on_seq_start, u8 sx0_fsm_bypass, u8 sx0_fsm_lock_det_en, u8 sx0_fsm_lock_detect_sticky_clear, u8 sx0_fsm_fast_power_on_seq_en, u8 sx0_fsm_cal_en, u8 sx0_spare2_in, u8 sx0_fsm_kvco_meas_wait_time)
{
	ASSERT_ERR_CHIP((((u32)sx0_fsm_lpf_vctrl_low_flag_clear << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_lpf_vctrl_high_flag_clear << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_use_ext_vco_sel_en << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_skip_vco_sel_cal << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_cal_standby << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_amp_flt_nsamples << 21) & ~((u32)0x00600000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_ampl_update_per << 19) & ~((u32)0x00180000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_use_ext_cp_cur_sel_en << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_use_ext_lpf_r2_en << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_use_ext_lpf_c1_en << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_use_ext_lpf_c34_en << 15) & ~((u32)0x00008000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_use_ext_vco_cur_sel_en << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_use_ext_ftun_en << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_skip_ampcal << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_skip_lbwcal << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_skip_freqcal << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_power_on_seq_start << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_bypass << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_lock_det_en << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_lock_detect_sticky_clear << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_fast_power_on_seq_en << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_cal_en << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_spare2_in << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_fsm_kvco_meas_wait_time << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, ((u32)sx0_fsm_lpf_vctrl_low_flag_clear << 27) | ((u32)sx0_fsm_lpf_vctrl_high_flag_clear << 26) | ((u32)sx0_fsm_use_ext_vco_sel_en << 25) | ((u32)sx0_fsm_skip_vco_sel_cal << 24) | ((u32)sx0_fsm_cal_standby << 23) | ((u32)sx0_fsm_amp_flt_nsamples << 21) | ((u32)sx0_fsm_ampl_update_per << 19) | ((u32)sx0_fsm_use_ext_cp_cur_sel_en << 18) | ((u32)sx0_fsm_use_ext_lpf_r2_en << 17) | ((u32)sx0_fsm_use_ext_lpf_c1_en << 16) | ((u32)sx0_fsm_use_ext_lpf_c34_en << 15) | ((u32)sx0_fsm_use_ext_vco_cur_sel_en << 14) | ((u32)sx0_fsm_use_ext_ftun_en << 13) | ((u32)sx0_fsm_skip_ampcal << 12) | ((u32)sx0_fsm_skip_lbwcal << 11) | ((u32)sx0_fsm_skip_freqcal << 10) | ((u32)sx0_fsm_power_on_seq_start << 9) | ((u32)sx0_fsm_bypass << 8) | ((u32)sx0_fsm_lock_det_en << 7) | ((u32)sx0_fsm_lock_detect_sticky_clear << 6) | ((u32)sx0_fsm_fast_power_on_seq_en << 5) | ((u32)sx0_fsm_cal_en << 4) | ((u32)sx0_spare2_in << 3) | ((u32)sx0_fsm_kvco_meas_wait_time << 0));
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_unpack(struct cl_chip *chip, u8 *sx0_fsm_lpf_vctrl_low_flag_clear, u8 *sx0_fsm_lpf_vctrl_high_flag_clear, u8 *sx0_fsm_use_ext_vco_sel_en, u8 *sx0_fsm_skip_vco_sel_cal, u8 *sx0_fsm_cal_standby, u8 *sx0_fsm_amp_flt_nsamples, u8 *sx0_fsm_ampl_update_per, u8 *sx0_fsm_use_ext_cp_cur_sel_en, u8 *sx0_fsm_use_ext_lpf_r2_en, u8 *sx0_fsm_use_ext_lpf_c1_en, u8 *sx0_fsm_use_ext_lpf_c34_en, u8 *sx0_fsm_use_ext_vco_cur_sel_en, u8 *sx0_fsm_use_ext_ftun_en, u8 *sx0_fsm_skip_ampcal, u8 *sx0_fsm_skip_lbwcal, u8 *sx0_fsm_skip_freqcal, u8 *sx0_fsm_power_on_seq_start, u8 *sx0_fsm_bypass, u8 *sx0_fsm_lock_det_en, u8 *sx0_fsm_lock_detect_sticky_clear, u8 *sx0_fsm_fast_power_on_seq_en, u8 *sx0_fsm_cal_en, u8 *sx0_spare2_in, u8 *sx0_fsm_kvco_meas_wait_time)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	*sx0_fsm_lpf_vctrl_low_flag_clear = (local_val & ((u32)0x08000000)) >> 27;
	*sx0_fsm_lpf_vctrl_high_flag_clear = (local_val & ((u32)0x04000000)) >> 26;
	*sx0_fsm_use_ext_vco_sel_en = (local_val & ((u32)0x02000000)) >> 25;
	*sx0_fsm_skip_vco_sel_cal = (local_val & ((u32)0x01000000)) >> 24;
	*sx0_fsm_cal_standby = (local_val & ((u32)0x00800000)) >> 23;
	*sx0_fsm_amp_flt_nsamples = (local_val & ((u32)0x00600000)) >> 21;
	*sx0_fsm_ampl_update_per = (local_val & ((u32)0x00180000)) >> 19;
	*sx0_fsm_use_ext_cp_cur_sel_en = (local_val & ((u32)0x00040000)) >> 18;
	*sx0_fsm_use_ext_lpf_r2_en = (local_val & ((u32)0x00020000)) >> 17;
	*sx0_fsm_use_ext_lpf_c1_en = (local_val & ((u32)0x00010000)) >> 16;
	*sx0_fsm_use_ext_lpf_c34_en = (local_val & ((u32)0x00008000)) >> 15;
	*sx0_fsm_use_ext_vco_cur_sel_en = (local_val & ((u32)0x00004000)) >> 14;
	*sx0_fsm_use_ext_ftun_en = (local_val & ((u32)0x00002000)) >> 13;
	*sx0_fsm_skip_ampcal = (local_val & ((u32)0x00001000)) >> 12;
	*sx0_fsm_skip_lbwcal = (local_val & ((u32)0x00000800)) >> 11;
	*sx0_fsm_skip_freqcal = (local_val & ((u32)0x00000400)) >> 10;
	*sx0_fsm_power_on_seq_start = (local_val & ((u32)0x00000200)) >> 9;
	*sx0_fsm_bypass = (local_val & ((u32)0x00000100)) >> 8;
	*sx0_fsm_lock_det_en = (local_val & ((u32)0x00000080)) >> 7;
	*sx0_fsm_lock_detect_sticky_clear = (local_val & ((u32)0x00000040)) >> 6;
	*sx0_fsm_fast_power_on_seq_en = (local_val & ((u32)0x00000020)) >> 5;
	*sx0_fsm_cal_en = (local_val & ((u32)0x00000010)) >> 4;
	*sx0_spare2_in = (local_val & ((u32)0x00000008)) >> 3;
	*sx0_fsm_kvco_meas_wait_time = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_lpf_vctrl_low_flag_clear_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_lpf_vctrl_low_flag_clear_setf(struct cl_chip *chip, u8 sx0fsmlpfvctrllowflagclear)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmlpfvctrllowflagclear << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x08000000)) | ((u32)sx0fsmlpfvctrllowflagclear << 27));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_LPF_VCTRL_LOW_FLAG_CLEAR .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 27

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_lpf_vctrl_high_flag_clear_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_lpf_vctrl_high_flag_clear_setf(struct cl_chip *chip, u8 sx0fsmlpfvctrlhighflagclear)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmlpfvctrlhighflagclear << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x04000000)) | ((u32)sx0fsmlpfvctrlhighflagclear << 26));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_LPF_VCTRL_HIGH_FLAG_CLEAR .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 26

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_use_ext_vco_sel_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_use_ext_vco_sel_en_setf(struct cl_chip *chip, u8 sx0fsmuseextvcoselen)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmuseextvcoselen << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x02000000)) | ((u32)sx0fsmuseextvcoselen << 25));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_VCO_SEL_EN .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 25

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_skip_vco_sel_cal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_skip_vco_sel_cal_setf(struct cl_chip *chip, u8 sx0fsmskipvcoselcal)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmskipvcoselcal << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x01000000)) | ((u32)sx0fsmskipvcoselcal << 24));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_SKIP_VCO_SEL_CAL .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 24

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_cal_standby_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_cal_standby_setf(struct cl_chip *chip, u8 sx0fsmcalstandby)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmcalstandby << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00800000)) | ((u32)sx0fsmcalstandby << 23));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_CAL_STANDBY .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 23

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_amp_flt_nsamples_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00600000)) >> 21);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_amp_flt_nsamples_setf(struct cl_chip *chip, u8 sx0fsmampfltnsamples)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmampfltnsamples << 21) & ~((u32)0x00600000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00600000)) | ((u32)sx0fsmampfltnsamples << 21));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_AMP_FLT_NSAMPLES .addr_index = 0x00000107, .size_minus_1 = (2 - 1), .shift = 21

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_ampl_update_per_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00180000)) >> 19);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_ampl_update_per_setf(struct cl_chip *chip, u8 sx0fsmamplupdateper)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmamplupdateper << 19) & ~((u32)0x00180000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00180000)) | ((u32)sx0fsmamplupdateper << 19));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_AMPL_UPDATE_PER .addr_index = 0x00000107, .size_minus_1 = (2 - 1), .shift = 19

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_use_ext_cp_cur_sel_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_use_ext_cp_cur_sel_en_setf(struct cl_chip *chip, u8 sx0fsmuseextcpcurselen)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmuseextcpcurselen << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00040000)) | ((u32)sx0fsmuseextcpcurselen << 18));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_CP_CUR_SEL_EN .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_use_ext_lpf_r_2_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_use_ext_lpf_r_2_en_setf(struct cl_chip *chip, u8 sx0fsmuseextlpfr2en)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmuseextlpfr2en << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00020000)) | ((u32)sx0fsmuseextlpfr2en << 17));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_LPF_R_2_EN .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_use_ext_lpf_c_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_use_ext_lpf_c_1_en_setf(struct cl_chip *chip, u8 sx0fsmuseextlpfc1en)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmuseextlpfc1en << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00010000)) | ((u32)sx0fsmuseextlpfc1en << 16));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_LPF_C_1_EN .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 16

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_use_ext_lpf_c_34_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_use_ext_lpf_c_34_en_setf(struct cl_chip *chip, u8 sx0fsmuseextlpfc34en)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmuseextlpfc34en << 15) & ~((u32)0x00008000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00008000)) | ((u32)sx0fsmuseextlpfc34en << 15));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_LPF_C_34_EN .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 15

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_use_ext_vco_cur_sel_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_use_ext_vco_cur_sel_en_setf(struct cl_chip *chip, u8 sx0fsmuseextvcocurselen)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmuseextvcocurselen << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00004000)) | ((u32)sx0fsmuseextvcocurselen << 14));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_VCO_CUR_SEL_EN .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 14

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_use_ext_ftun_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_use_ext_ftun_en_setf(struct cl_chip *chip, u8 sx0fsmuseextftunen)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmuseextftunen << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00002000)) | ((u32)sx0fsmuseextftunen << 13));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_USE_EXT_FTUN_EN .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 13

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_skip_ampcal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_skip_ampcal_setf(struct cl_chip *chip, u8 sx0fsmskipampcal)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmskipampcal << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00001000)) | ((u32)sx0fsmskipampcal << 12));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_SKIP_AMPCAL .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_skip_lbwcal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_skip_lbwcal_setf(struct cl_chip *chip, u8 sx0fsmskiplbwcal)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmskiplbwcal << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00000800)) | ((u32)sx0fsmskiplbwcal << 11));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_SKIP_LBWCAL .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_skip_freqcal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_skip_freqcal_setf(struct cl_chip *chip, u8 sx0fsmskipfreqcal)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmskipfreqcal << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00000400)) | ((u32)sx0fsmskipfreqcal << 10));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_SKIP_FREQCAL .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_power_on_seq_start_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_power_on_seq_start_setf(struct cl_chip *chip, u8 sx0fsmpoweronseqstart)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmpoweronseqstart << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00000200)) | ((u32)sx0fsmpoweronseqstart << 9));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_POWER_ON_SEQ_START .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_bypass_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_bypass_setf(struct cl_chip *chip, u8 sx0fsmbypass)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmbypass << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00000100)) | ((u32)sx0fsmbypass << 8));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_BYPASS .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_lock_det_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_lock_det_en_setf(struct cl_chip *chip, u8 sx0fsmlockdeten)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmlockdeten << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00000080)) | ((u32)sx0fsmlockdeten << 7));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_LOCK_DET_EN .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_lock_detect_sticky_clear_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_lock_detect_sticky_clear_setf(struct cl_chip *chip, u8 sx0fsmlockdetectstickyclear)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmlockdetectstickyclear << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00000040)) | ((u32)sx0fsmlockdetectstickyclear << 6));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_LOCK_DETECT_STICKY_CLEAR .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_fast_power_on_seq_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_fast_power_on_seq_en_setf(struct cl_chip *chip, u8 sx0fsmfastpoweronseqen)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmfastpoweronseqen << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00000020)) | ((u32)sx0fsmfastpoweronseqen << 5));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_FAST_POWER_ON_SEQ_EN .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_cal_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_cal_en_setf(struct cl_chip *chip, u8 sx0fsmcalen)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmcalen << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00000010)) | ((u32)sx0fsmcalen << 4));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_CAL_EN .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 4

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_spare_2_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_spare_2_in_setf(struct cl_chip *chip, u8 sx0spare2in)
{
	ASSERT_ERR_CHIP((((u32)sx0spare2in << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00000008)) | ((u32)sx0spare2in << 3));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_SPARE_2_IN .addr_index = 0x00000107, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_kvco_meas_wait_time_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void rfic_regs_sx_0_fsm_ctrl_1_sx_0_fsm_kvco_meas_wait_time_setf(struct cl_chip *chip, u8 sx0fsmkvcomeaswaittime)
{
	ASSERT_ERR_CHIP((((u32)sx0fsmkvcomeaswaittime << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_FSM_CTRL_1_ADDR) & ~((u32)0x00000007)) | ((u32)sx0fsmkvcomeaswaittime << 0));
}

#define RFIC_REGS_SX_0_FSM_CTRL_1_SX_0_FSM_KVCO_MEAS_WAIT_TIME .addr_index = 0x00000107, .size_minus_1 = (3 - 1), .shift = 0

/**
 * @brief SX_0_FSM_OUT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SX0_fsm_calend_ackn       00000000
 *    30:26 SX0_fsm_state_out         0x00000000
 *    25:24 SX0_fsm_cal_cp0_cur_sel_out 0x00000000
 *    23:19 SX0_fsm_cal_lpf_r2        0x00000000
 *    18:16 SX0_fsm_cal_lpf_c1        0x00000000
 *    15:13 SX0_fsm_cal_lpf_c34       0x00000000
 *    12:08 SX0_fsm_cal_vco_cur_sel   0x00000000
 *    07:00 SX0_fsm_cal_vco_ftun      0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_0_FSM_OUT_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000420)
#define RFIC_REGS_SX_0_FSM_OUT_1_OFFSET      0x00000420
#define RFIC_REGS_SX_0_FSM_OUT_1_INDEX       0x00000108
#define RFIC_REGS_SX_0_FSM_OUT_1_RESET       0x00000000

static inline u32 rfic_regs_sx_0_fsm_out_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_1_ADDR);
}

#define RFIC_REGS_SX_0_FSM_OUT_1 .addr_index = 0x00000108, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CALEND_ACKN_BIT    ((u32)0x80000000)
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CALEND_ACKN_POS    31
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_STATE_OUT_MASK    ((u32)0x7C000000)
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_STATE_OUT_LSB    26
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_STATE_OUT_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_CP_0_CUR_SEL_OUT_MASK    ((u32)0x03000000)
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_CP_0_CUR_SEL_OUT_LSB    24
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_CP_0_CUR_SEL_OUT_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_LPF_R_2_MASK    ((u32)0x00F80000)
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_LPF_R_2_LSB    19
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_LPF_R_2_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_LPF_C_1_MASK    ((u32)0x00070000)
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_LPF_C_1_LSB    16
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_LPF_C_1_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_LPF_C_34_MASK    ((u32)0x0000E000)
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_LPF_C_34_LSB    13
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_LPF_C_34_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_VCO_CUR_SEL_MASK    ((u32)0x00001F00)
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_VCO_CUR_SEL_LSB    8
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_VCO_CUR_SEL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_VCO_FTUN_MASK    ((u32)0x000000FF)
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_VCO_FTUN_LSB    0
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_VCO_FTUN_WIDTH    ((u32)0x00000008)

#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CALEND_ACKN_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_STATE_OUT_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_CP_0_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_LPF_R_2_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_LPF_C_1_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_LPF_C_34_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_VCO_CUR_SEL_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_VCO_FTUN_RST    0x00000000

static inline void rfic_regs_sx_0_fsm_out_1_unpack(struct cl_chip *chip, u8 *sx0_fsm_calend_ackn, u8 *sx0_fsm_state_out, u8 *sx0_fsm_cal_cp0_cur_sel_out, u8 *sx0_fsm_cal_lpf_r2, u8 *sx0_fsm_cal_lpf_c1, u8 *sx0_fsm_cal_lpf_c34, u8 *sx0_fsm_cal_vco_cur_sel, u8 *sx0_fsm_cal_vco_ftun)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_1_ADDR);

	*sx0_fsm_calend_ackn = (local_val & ((u32)0x80000000)) >> 31;
	*sx0_fsm_state_out = (local_val & ((u32)0x7C000000)) >> 26;
	*sx0_fsm_cal_cp0_cur_sel_out = (local_val & ((u32)0x03000000)) >> 24;
	*sx0_fsm_cal_lpf_r2 = (local_val & ((u32)0x00F80000)) >> 19;
	*sx0_fsm_cal_lpf_c1 = (local_val & ((u32)0x00070000)) >> 16;
	*sx0_fsm_cal_lpf_c34 = (local_val & ((u32)0x0000E000)) >> 13;
	*sx0_fsm_cal_vco_cur_sel = (local_val & ((u32)0x00001F00)) >> 8;
	*sx0_fsm_cal_vco_ftun = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 rfic_regs_sx_0_fsm_out_1_sx_0_fsm_calend_ackn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_1_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CALEND_ACKN .addr_index = 0x00000108, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_sx_0_fsm_out_1_sx_0_fsm_state_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_1_ADDR);

	return (u8)((local_val & ((u32)0x7C000000)) >> 26);
}

#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_STATE_OUT .addr_index = 0x00000108, .size_minus_1 = (5 - 1), .shift = 26

static inline u8 rfic_regs_sx_0_fsm_out_1_sx_0_fsm_cal_cp_0_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_1_ADDR);

	return (u8)((local_val & ((u32)0x03000000)) >> 24);
}

#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_CP_0_CUR_SEL_OUT .addr_index = 0x00000108, .size_minus_1 = (2 - 1), .shift = 24

static inline u8 rfic_regs_sx_0_fsm_out_1_sx_0_fsm_cal_lpf_r_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_1_ADDR);

	return (u8)((local_val & ((u32)0x00F80000)) >> 19);
}

#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_LPF_R_2 .addr_index = 0x00000108, .size_minus_1 = (5 - 1), .shift = 19

static inline u8 rfic_regs_sx_0_fsm_out_1_sx_0_fsm_cal_lpf_c_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_1_ADDR);

	return (u8)((local_val & ((u32)0x00070000)) >> 16);
}

#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_LPF_C_1 .addr_index = 0x00000108, .size_minus_1 = (3 - 1), .shift = 16

static inline u8 rfic_regs_sx_0_fsm_out_1_sx_0_fsm_cal_lpf_c_34_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_1_ADDR);

	return (u8)((local_val & ((u32)0x0000E000)) >> 13);
}

#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_LPF_C_34 .addr_index = 0x00000108, .size_minus_1 = (3 - 1), .shift = 13

static inline u8 rfic_regs_sx_0_fsm_out_1_sx_0_fsm_cal_vco_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_1_ADDR);

	return (u8)((local_val & ((u32)0x00001F00)) >> 8);
}

#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_VCO_CUR_SEL .addr_index = 0x00000108, .size_minus_1 = (5 - 1), .shift = 8

static inline u8 rfic_regs_sx_0_fsm_out_1_sx_0_fsm_cal_vco_ftun_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

#define RFIC_REGS_SX_0_FSM_OUT_1_SX_0_FSM_CAL_VCO_FTUN .addr_index = 0x00000108, .size_minus_1 = (8 - 1), .shift = 0

/**
 * @brief SX_0_FSM_OUT_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SX0_freq_cal_end          00000000
 *    30    SX0_amp_cal_end           00000000
 *    29:28 SX0_cp1_cur_sel_out       0x00000000
 *    27    SX0_fsm_vco_no_osc_det_err 00000000
 *    26    SX0_fsm_vco_no_osc_det    00000000
 *    25:24 SX0_cp0_cur_sel_out       0x00000000
 *    23:19 SX0_lpf_r2_out            0x00000000
 *    18:16 SX0_lpf_c1_out            0x00000000
 *    15:13 SX0_lpf_c34_out           0x00000000
 *    12:08 SX0_vco_cur_sel_out       0x00000000
 *    07:00 SX0_vco_ftun_out          0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_0_FSM_OUT_2_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000424)
#define RFIC_REGS_SX_0_FSM_OUT_2_OFFSET      0x00000424
#define RFIC_REGS_SX_0_FSM_OUT_2_INDEX       0x00000109
#define RFIC_REGS_SX_0_FSM_OUT_2_RESET       0x00000000

static inline u32 rfic_regs_sx_0_fsm_out_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_2_ADDR);
}

#define RFIC_REGS_SX_0_FSM_OUT_2 .addr_index = 0x00000109, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_FREQ_CAL_END_BIT    ((u32)0x80000000)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_FREQ_CAL_END_POS    31
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_AMP_CAL_END_BIT    ((u32)0x40000000)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_AMP_CAL_END_POS    30
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_CP_1_CUR_SEL_OUT_MASK    ((u32)0x30000000)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_CP_1_CUR_SEL_OUT_LSB    28
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_CP_1_CUR_SEL_OUT_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_FSM_VCO_NO_OSC_DET_ERR_BIT    ((u32)0x08000000)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_FSM_VCO_NO_OSC_DET_ERR_POS    27
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_FSM_VCO_NO_OSC_DET_BIT    ((u32)0x04000000)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_FSM_VCO_NO_OSC_DET_POS    26
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_CP_0_CUR_SEL_OUT_MASK    ((u32)0x03000000)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_CP_0_CUR_SEL_OUT_LSB    24
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_CP_0_CUR_SEL_OUT_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_LPF_R_2_OUT_MASK    ((u32)0x00F80000)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_LPF_R_2_OUT_LSB    19
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_LPF_R_2_OUT_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_LPF_C_1_OUT_MASK    ((u32)0x00070000)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_LPF_C_1_OUT_LSB    16
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_LPF_C_1_OUT_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_LPF_C_34_OUT_MASK    ((u32)0x0000E000)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_LPF_C_34_OUT_LSB    13
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_LPF_C_34_OUT_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_VCO_CUR_SEL_OUT_MASK    ((u32)0x00001F00)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_VCO_CUR_SEL_OUT_LSB    8
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_VCO_CUR_SEL_OUT_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_VCO_FTUN_OUT_MASK    ((u32)0x000000FF)
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_VCO_FTUN_OUT_LSB    0
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_VCO_FTUN_OUT_WIDTH    ((u32)0x00000008)

#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_FREQ_CAL_END_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_AMP_CAL_END_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_CP_1_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_FSM_VCO_NO_OSC_DET_ERR_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_FSM_VCO_NO_OSC_DET_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_CP_0_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_LPF_R_2_OUT_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_LPF_C_1_OUT_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_LPF_C_34_OUT_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_VCO_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_VCO_FTUN_OUT_RST    0x00000000

static inline void rfic_regs_sx_0_fsm_out_2_unpack(struct cl_chip *chip, u8 *sx0_freq_cal_end, u8 *sx0_amp_cal_end, u8 *sx0_cp1_cur_sel_out, u8 *sx0_fsm_vco_no_osc_det_err, u8 *sx0_fsm_vco_no_osc_det, u8 *sx0_cp0_cur_sel_out, u8 *sx0_lpf_r2_out, u8 *sx0_lpf_c1_out, u8 *sx0_lpf_c34_out, u8 *sx0_vco_cur_sel_out, u8 *sx0_vco_ftun_out)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_2_ADDR);

	*sx0_freq_cal_end = (local_val & ((u32)0x80000000)) >> 31;
	*sx0_amp_cal_end = (local_val & ((u32)0x40000000)) >> 30;
	*sx0_cp1_cur_sel_out = (local_val & ((u32)0x30000000)) >> 28;
	*sx0_fsm_vco_no_osc_det_err = (local_val & ((u32)0x08000000)) >> 27;
	*sx0_fsm_vco_no_osc_det = (local_val & ((u32)0x04000000)) >> 26;
	*sx0_cp0_cur_sel_out = (local_val & ((u32)0x03000000)) >> 24;
	*sx0_lpf_r2_out = (local_val & ((u32)0x00F80000)) >> 19;
	*sx0_lpf_c1_out = (local_val & ((u32)0x00070000)) >> 16;
	*sx0_lpf_c34_out = (local_val & ((u32)0x0000E000)) >> 13;
	*sx0_vco_cur_sel_out = (local_val & ((u32)0x00001F00)) >> 8;
	*sx0_vco_ftun_out = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 rfic_regs_sx_0_fsm_out_2_sx_0_freq_cal_end_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_FREQ_CAL_END .addr_index = 0x00000109, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_sx_0_fsm_out_2_sx_0_amp_cal_end_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_AMP_CAL_END .addr_index = 0x00000109, .size_minus_1 = (1 - 1), .shift = 30

static inline u8 rfic_regs_sx_0_fsm_out_2_sx_0_cp_1_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x30000000)) >> 28);
}

#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_CP_1_CUR_SEL_OUT .addr_index = 0x00000109, .size_minus_1 = (2 - 1), .shift = 28

static inline u8 rfic_regs_sx_0_fsm_out_2_sx_0_fsm_vco_no_osc_det_err_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_FSM_VCO_NO_OSC_DET_ERR .addr_index = 0x00000109, .size_minus_1 = (1 - 1), .shift = 27

static inline u8 rfic_regs_sx_0_fsm_out_2_sx_0_fsm_vco_no_osc_det_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_FSM_VCO_NO_OSC_DET .addr_index = 0x00000109, .size_minus_1 = (1 - 1), .shift = 26

static inline u8 rfic_regs_sx_0_fsm_out_2_sx_0_cp_0_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x03000000)) >> 24);
}

#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_CP_0_CUR_SEL_OUT .addr_index = 0x00000109, .size_minus_1 = (2 - 1), .shift = 24

static inline u8 rfic_regs_sx_0_fsm_out_2_sx_0_lpf_r_2_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x00F80000)) >> 19);
}

#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_LPF_R_2_OUT .addr_index = 0x00000109, .size_minus_1 = (5 - 1), .shift = 19

static inline u8 rfic_regs_sx_0_fsm_out_2_sx_0_lpf_c_1_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x00070000)) >> 16);
}

#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_LPF_C_1_OUT .addr_index = 0x00000109, .size_minus_1 = (3 - 1), .shift = 16

static inline u8 rfic_regs_sx_0_fsm_out_2_sx_0_lpf_c_34_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x0000E000)) >> 13);
}

#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_LPF_C_34_OUT .addr_index = 0x00000109, .size_minus_1 = (3 - 1), .shift = 13

static inline u8 rfic_regs_sx_0_fsm_out_2_sx_0_vco_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x00001F00)) >> 8);
}

#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_VCO_CUR_SEL_OUT .addr_index = 0x00000109, .size_minus_1 = (5 - 1), .shift = 8

static inline u8 rfic_regs_sx_0_fsm_out_2_sx_0_vco_ftun_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

#define RFIC_REGS_SX_0_FSM_OUT_2_SX_0_VCO_FTUN_OUT .addr_index = 0x00000109, .size_minus_1 = (8 - 1), .shift = 0

/**
 * @brief SX_0_FSM_OUT_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    19    SX0_fsm_lpf_vctrl_low_flag 00000000
 *    18    SX0_fsm_lpf_vctrl_high_flag 00000000
 *    17:16 SX0_vco_sel_out           0x00000000
 *    15:14 SX0_fsm_cal_vco_sel       0x00000000
 *    13    SX_bt_rx_lut_write_ack    00000000
 *    12    SX_bt_tx_lut_write_ack    00000000
 *    11:02 SX0_fsm_kvco_count_diff_out 0x00000000
 *    01    SX0_fsm_lock_det_sticky   00000000
 *    00    SX0_fsm_lock_detect       00000000
 * </pre>
 */
#define RFIC_REGS_SX_0_FSM_OUT_3_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000428)
#define RFIC_REGS_SX_0_FSM_OUT_3_OFFSET      0x00000428
#define RFIC_REGS_SX_0_FSM_OUT_3_INDEX       0x0000010A
#define RFIC_REGS_SX_0_FSM_OUT_3_RESET       0x00000000

static inline u32 rfic_regs_sx_0_fsm_out_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_3_ADDR);
}

#define RFIC_REGS_SX_0_FSM_OUT_3 .addr_index = 0x0000010A, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_LPF_VCTRL_LOW_FLAG_BIT    ((u32)0x00080000)
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_LPF_VCTRL_LOW_FLAG_POS    19
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_LPF_VCTRL_HIGH_FLAG_BIT    ((u32)0x00040000)
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_LPF_VCTRL_HIGH_FLAG_POS    18
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_VCO_SEL_OUT_MASK    ((u32)0x00030000)
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_VCO_SEL_OUT_LSB    16
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_VCO_SEL_OUT_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_CAL_VCO_SEL_MASK    ((u32)0x0000C000)
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_CAL_VCO_SEL_LSB    14
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_CAL_VCO_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_BT_RX_LUT_WRITE_ACK_BIT    ((u32)0x00002000)
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_BT_RX_LUT_WRITE_ACK_POS    13
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_BT_TX_LUT_WRITE_ACK_BIT    ((u32)0x00001000)
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_BT_TX_LUT_WRITE_ACK_POS    12
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_KVCO_COUNT_DIFF_OUT_MASK    ((u32)0x00000FFC)
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_KVCO_COUNT_DIFF_OUT_LSB    2
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_KVCO_COUNT_DIFF_OUT_WIDTH    ((u32)0x0000000A)
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_LOCK_DET_STICKY_BIT    ((u32)0x00000002)
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_LOCK_DET_STICKY_POS    1
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_LOCK_DETECT_BIT    ((u32)0x00000001)
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_LOCK_DETECT_POS    0

#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_LPF_VCTRL_LOW_FLAG_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_LPF_VCTRL_HIGH_FLAG_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_VCO_SEL_OUT_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_CAL_VCO_SEL_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_BT_RX_LUT_WRITE_ACK_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_BT_TX_LUT_WRITE_ACK_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_KVCO_COUNT_DIFF_OUT_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_LOCK_DET_STICKY_RST    0x00000000
#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_LOCK_DETECT_RST    0x00000000

static inline void rfic_regs_sx_0_fsm_out_3_unpack(struct cl_chip *chip, u8 *sx0_fsm_lpf_vctrl_low_flag, u8 *sx0_fsm_lpf_vctrl_high_flag, u8 *sx0_vco_sel_out, u8 *sx0_fsm_cal_vco_sel, u8 *sx_bt_rx_lut_write_ack, u8 *sx_bt_tx_lut_write_ack, u16 *sx0_fsm_kvco_count_diff_out, u8 *sx0_fsm_lock_det_sticky, u8 *sx0_fsm_lock_detect)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_3_ADDR);

	*sx0_fsm_lpf_vctrl_low_flag = (local_val & ((u32)0x00080000)) >> 19;
	*sx0_fsm_lpf_vctrl_high_flag = (local_val & ((u32)0x00040000)) >> 18;
	*sx0_vco_sel_out = (local_val & ((u32)0x00030000)) >> 16;
	*sx0_fsm_cal_vco_sel = (local_val & ((u32)0x0000C000)) >> 14;
	*sx_bt_rx_lut_write_ack = (local_val & ((u32)0x00002000)) >> 13;
	*sx_bt_tx_lut_write_ack = (local_val & ((u32)0x00001000)) >> 12;
	*sx0_fsm_kvco_count_diff_out = (local_val & ((u32)0x00000FFC)) >> 2;
	*sx0_fsm_lock_det_sticky = (local_val & ((u32)0x00000002)) >> 1;
	*sx0_fsm_lock_detect = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_sx_0_fsm_out_3_sx_0_fsm_lpf_vctrl_low_flag_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_3_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_LPF_VCTRL_LOW_FLAG .addr_index = 0x0000010A, .size_minus_1 = (1 - 1), .shift = 19

static inline u8 rfic_regs_sx_0_fsm_out_3_sx_0_fsm_lpf_vctrl_high_flag_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_3_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_LPF_VCTRL_HIGH_FLAG .addr_index = 0x0000010A, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_sx_0_fsm_out_3_sx_0_vco_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_3_ADDR);

	return (u8)((local_val & ((u32)0x00030000)) >> 16);
}

#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_VCO_SEL_OUT .addr_index = 0x0000010A, .size_minus_1 = (2 - 1), .shift = 16

static inline u8 rfic_regs_sx_0_fsm_out_3_sx_0_fsm_cal_vco_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_3_ADDR);

	return (u8)((local_val & ((u32)0x0000C000)) >> 14);
}

#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_CAL_VCO_SEL .addr_index = 0x0000010A, .size_minus_1 = (2 - 1), .shift = 14

static inline u8 rfic_regs_sx_0_fsm_out_3_sx_bt_rx_lut_write_ack_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_3_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

#define RFIC_REGS_SX_0_FSM_OUT_3_SX_BT_RX_LUT_WRITE_ACK .addr_index = 0x0000010A, .size_minus_1 = (1 - 1), .shift = 13

static inline u8 rfic_regs_sx_0_fsm_out_3_sx_bt_tx_lut_write_ack_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_3_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

#define RFIC_REGS_SX_0_FSM_OUT_3_SX_BT_TX_LUT_WRITE_ACK .addr_index = 0x0000010A, .size_minus_1 = (1 - 1), .shift = 12

static inline u16 rfic_regs_sx_0_fsm_out_3_sx_0_fsm_kvco_count_diff_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_3_ADDR);

	return (u16)((local_val & ((u32)0x00000FFC)) >> 2);
}

#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_KVCO_COUNT_DIFF_OUT .addr_index = 0x0000010A, .size_minus_1 = (10 - 1), .shift = 2

static inline u8 rfic_regs_sx_0_fsm_out_3_sx_0_fsm_lock_det_sticky_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_3_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_LOCK_DET_STICKY .addr_index = 0x0000010A, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_sx_0_fsm_out_3_sx_0_fsm_lock_detect_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_3_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

#define RFIC_REGS_SX_0_FSM_OUT_3_SX_0_FSM_LOCK_DETECT .addr_index = 0x0000010A, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief SX_0_FSM_OUT_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    17:00 SX0_fsm_cal_freq_cntr     0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_0_FSM_OUT_4_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000042C)
#define RFIC_REGS_SX_0_FSM_OUT_4_OFFSET      0x0000042C
#define RFIC_REGS_SX_0_FSM_OUT_4_INDEX       0x0000010B
#define RFIC_REGS_SX_0_FSM_OUT_4_RESET       0x00000000

static inline u32 rfic_regs_sx_0_fsm_out_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_4_ADDR);
}

#define RFIC_REGS_SX_0_FSM_OUT_4 .addr_index = 0x0000010B, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_FSM_OUT_4_SX_0_FSM_CAL_FREQ_CNTR_MASK    ((u32)0x0003FFFF)
#define RFIC_REGS_SX_0_FSM_OUT_4_SX_0_FSM_CAL_FREQ_CNTR_LSB    0
#define RFIC_REGS_SX_0_FSM_OUT_4_SX_0_FSM_CAL_FREQ_CNTR_WIDTH    ((u32)0x00000012)

#define RFIC_REGS_SX_0_FSM_OUT_4_SX_0_FSM_CAL_FREQ_CNTR_RST    0x00000000

static inline u32 rfic_regs_sx_0_fsm_out_4_sx_0_fsm_cal_freq_cntr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_FSM_OUT_4_ADDR);

	return (u32)(local_val >> 0);
}

#define RFIC_REGS_SX_0_FSM_OUT_4_SX_0_FSM_CAL_FREQ_CNTR .addr_index = 0x0000010B, .size_minus_1 = (18 - 1), .shift = 0

/**
 * @brief SX_0_LOGEN_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    SX0_losync_sxsel          00000000
 *    28:27 SX0_losync_ldo_vddsel     0x00000000
 *    26    SX0_losync_ldo_en         00000000
 *    25    SX0_losync_rstn_sync_bypass 00000000
 *    24:23 SX0_lobuff_ldo_vdd10_sel  0x00000000
 *    22    SX0_losync_iqdiv_rstn_ext 00000000
 *    21    SX0_lobuff_ldo_en         00000000
 *    20    SX0_lobuff_rep_drv_CH0_LOX1_en 00000000
 *    19    SX0_lobuff_rep_drv_CH0_LOX0_en 00000000
 *    18    SX0_losync_en             00000000
 *    17    SX0_logen_mx_en           00000000
 *    16:14 SX0_logen_mx_cur_sel      0x00000000
 *    13:12 SX0_logen_mx_bias_ctrl_vco_out 0x00000000
 *    11:10 SX0_logen_mx_bias_ctrl_div_out 0x00000000
 *    09:06 SX0_logen_mx_band_sel     0x00000002
 *    05    SX0_logen_lowband_en      00000000
 *    04    SX0_logen_ldo_en          00000000
 *    03    SX0_logen_div2_drv_en     00000000
 *    02:01 SX0_logen_buff_vdd10_sel  0x00000003
 *    00    SX0_logen_buff_en         00000000
 * </pre>
 */
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000430)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_OFFSET      0x00000430
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_INDEX       0x0000010C
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_RESET       0x00000086

static inline u32 rfic_regs_sx_0_logen_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, value);
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0 .addr_index = 0x0000010C, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_SXSEL_BIT    ((u32)0x20000000)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_SXSEL_POS    29
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_LDO_VDDSEL_MASK    ((u32)0x18000000)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_LDO_VDDSEL_LSB    27
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_LDO_VDDSEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_LDO_EN_BIT    ((u32)0x04000000)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_LDO_EN_POS    26
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_RSTN_SYNC_BYPASS_BIT    ((u32)0x02000000)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_RSTN_SYNC_BYPASS_POS    25
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_LDO_VDD_10_SEL_MASK    ((u32)0x01800000)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_LDO_VDD_10_SEL_LSB    23
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_LDO_VDD_10_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_IQDIV_RSTN_EXT_BIT    ((u32)0x00400000)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_IQDIV_RSTN_EXT_POS    22
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_LDO_EN_BIT    ((u32)0x00200000)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_LDO_EN_POS    21
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_REP_DRV_CH_0_LOX_1_EN_BIT    ((u32)0x00100000)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_REP_DRV_CH_0_LOX_1_EN_POS    20
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_REP_DRV_CH_0_LOX_0_EN_BIT    ((u32)0x00080000)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_REP_DRV_CH_0_LOX_0_EN_POS    19
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_EN_BIT    ((u32)0x00040000)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_EN_POS    18
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_EN_BIT    ((u32)0x00020000)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_EN_POS    17
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_CUR_SEL_MASK    ((u32)0x0001C000)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_CUR_SEL_LSB    14
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_CUR_SEL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_BIAS_CTRL_VCO_OUT_MASK    ((u32)0x00003000)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_BIAS_CTRL_VCO_OUT_LSB    12
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_BIAS_CTRL_VCO_OUT_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_BIAS_CTRL_DIV_OUT_MASK    ((u32)0x00000C00)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_BIAS_CTRL_DIV_OUT_LSB    10
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_BIAS_CTRL_DIV_OUT_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_BAND_SEL_MASK    ((u32)0x000003C0)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_BAND_SEL_LSB    6
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_BAND_SEL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_LOWBAND_EN_BIT    ((u32)0x00000020)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_LOWBAND_EN_POS    5
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_LDO_EN_BIT    ((u32)0x00000010)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_LDO_EN_POS    4
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_DIV_2_DRV_EN_BIT    ((u32)0x00000008)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_DIV_2_DRV_EN_POS    3
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_BUFF_VDD_10_SEL_MASK    ((u32)0x00000006)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_BUFF_VDD_10_SEL_LSB    1
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_BUFF_VDD_10_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_BUFF_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_BUFF_EN_POS    0

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_SXSEL_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_LDO_VDDSEL_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_LDO_EN_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_RSTN_SYNC_BYPASS_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_LDO_VDD_10_SEL_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_IQDIV_RSTN_EXT_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_LDO_EN_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_REP_DRV_CH_0_LOX_1_EN_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_REP_DRV_CH_0_LOX_0_EN_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_EN_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_EN_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_CUR_SEL_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_BIAS_CTRL_VCO_OUT_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_BIAS_CTRL_DIV_OUT_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_BAND_SEL_RST    0x00000002
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_LOWBAND_EN_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_LDO_EN_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_DIV_2_DRV_EN_RST    0x00000000
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_BUFF_VDD_10_SEL_RST    0x00000003
#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_BUFF_EN_RST    0x00000000

static inline void rfic_regs_sx_0_logen_ctrl_0_pack(struct cl_chip *chip, u8 sx0_losync_sxsel, u8 sx0_losync_ldo_vddsel, u8 sx0_losync_ldo_en, u8 sx0_losync_rstn_sync_bypass, u8 sx0_lobuff_ldo_vdd10_sel, u8 sx0_losync_iqdiv_rstn_ext, u8 sx0_lobuff_ldo_en, u8 sx0_lobuff_rep_drv_ch0_lox1_en, u8 sx0_lobuff_rep_drv_ch0_lox0_en, u8 sx0_losync_en, u8 sx0_logen_mx_en, u8 sx0_logen_mx_cur_sel, u8 sx0_logen_mx_bias_ctrl_vco_out, u8 sx0_logen_mx_bias_ctrl_div_out, u8 sx0_logen_mx_band_sel, u8 sx0_logen_lowband_en, u8 sx0_logen_ldo_en, u8 sx0_logen_div2_drv_en, u8 sx0_logen_buff_vdd10_sel, u8 sx0_logen_buff_en)
{
	ASSERT_ERR_CHIP((((u32)sx0_losync_sxsel << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_losync_ldo_vddsel << 27) & ~((u32)0x18000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_losync_ldo_en << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_losync_rstn_sync_bypass << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_lobuff_ldo_vdd10_sel << 23) & ~((u32)0x01800000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_losync_iqdiv_rstn_ext << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_lobuff_ldo_en << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_lobuff_rep_drv_ch0_lox1_en << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_lobuff_rep_drv_ch0_lox0_en << 19) & ~((u32)0x00080000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_losync_en << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_logen_mx_en << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_logen_mx_cur_sel << 14) & ~((u32)0x0001C000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_logen_mx_bias_ctrl_vco_out << 12) & ~((u32)0x00003000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_logen_mx_bias_ctrl_div_out << 10) & ~((u32)0x00000C00)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_logen_mx_band_sel << 6) & ~((u32)0x000003C0)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_logen_lowband_en << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_logen_ldo_en << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_logen_div2_drv_en << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_logen_buff_vdd10_sel << 1) & ~((u32)0x00000006)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_logen_buff_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, ((u32)sx0_losync_sxsel << 29) | ((u32)sx0_losync_ldo_vddsel << 27) | ((u32)sx0_losync_ldo_en << 26) | ((u32)sx0_losync_rstn_sync_bypass << 25) | ((u32)sx0_lobuff_ldo_vdd10_sel << 23) | ((u32)sx0_losync_iqdiv_rstn_ext << 22) | ((u32)sx0_lobuff_ldo_en << 21) | ((u32)sx0_lobuff_rep_drv_ch0_lox1_en << 20) | ((u32)sx0_lobuff_rep_drv_ch0_lox0_en << 19) | ((u32)sx0_losync_en << 18) | ((u32)sx0_logen_mx_en << 17) | ((u32)sx0_logen_mx_cur_sel << 14) | ((u32)sx0_logen_mx_bias_ctrl_vco_out << 12) | ((u32)sx0_logen_mx_bias_ctrl_div_out << 10) | ((u32)sx0_logen_mx_band_sel << 6) | ((u32)sx0_logen_lowband_en << 5) | ((u32)sx0_logen_ldo_en << 4) | ((u32)sx0_logen_div2_drv_en << 3) | ((u32)sx0_logen_buff_vdd10_sel << 1) | ((u32)sx0_logen_buff_en << 0));
}

static inline void rfic_regs_sx_0_logen_ctrl_0_unpack(struct cl_chip *chip, u8 *sx0_losync_sxsel, u8 *sx0_losync_ldo_vddsel, u8 *sx0_losync_ldo_en, u8 *sx0_losync_rstn_sync_bypass, u8 *sx0_lobuff_ldo_vdd10_sel, u8 *sx0_losync_iqdiv_rstn_ext, u8 *sx0_lobuff_ldo_en, u8 *sx0_lobuff_rep_drv_ch0_lox1_en, u8 *sx0_lobuff_rep_drv_ch0_lox0_en, u8 *sx0_losync_en, u8 *sx0_logen_mx_en, u8 *sx0_logen_mx_cur_sel, u8 *sx0_logen_mx_bias_ctrl_vco_out, u8 *sx0_logen_mx_bias_ctrl_div_out, u8 *sx0_logen_mx_band_sel, u8 *sx0_logen_lowband_en, u8 *sx0_logen_ldo_en, u8 *sx0_logen_div2_drv_en, u8 *sx0_logen_buff_vdd10_sel, u8 *sx0_logen_buff_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	*sx0_losync_sxsel = (local_val & ((u32)0x20000000)) >> 29;
	*sx0_losync_ldo_vddsel = (local_val & ((u32)0x18000000)) >> 27;
	*sx0_losync_ldo_en = (local_val & ((u32)0x04000000)) >> 26;
	*sx0_losync_rstn_sync_bypass = (local_val & ((u32)0x02000000)) >> 25;
	*sx0_lobuff_ldo_vdd10_sel = (local_val & ((u32)0x01800000)) >> 23;
	*sx0_losync_iqdiv_rstn_ext = (local_val & ((u32)0x00400000)) >> 22;
	*sx0_lobuff_ldo_en = (local_val & ((u32)0x00200000)) >> 21;
	*sx0_lobuff_rep_drv_ch0_lox1_en = (local_val & ((u32)0x00100000)) >> 20;
	*sx0_lobuff_rep_drv_ch0_lox0_en = (local_val & ((u32)0x00080000)) >> 19;
	*sx0_losync_en = (local_val & ((u32)0x00040000)) >> 18;
	*sx0_logen_mx_en = (local_val & ((u32)0x00020000)) >> 17;
	*sx0_logen_mx_cur_sel = (local_val & ((u32)0x0001C000)) >> 14;
	*sx0_logen_mx_bias_ctrl_vco_out = (local_val & ((u32)0x00003000)) >> 12;
	*sx0_logen_mx_bias_ctrl_div_out = (local_val & ((u32)0x00000C00)) >> 10;
	*sx0_logen_mx_band_sel = (local_val & ((u32)0x000003C0)) >> 6;
	*sx0_logen_lowband_en = (local_val & ((u32)0x00000020)) >> 5;
	*sx0_logen_ldo_en = (local_val & ((u32)0x00000010)) >> 4;
	*sx0_logen_div2_drv_en = (local_val & ((u32)0x00000008)) >> 3;
	*sx0_logen_buff_vdd10_sel = (local_val & ((u32)0x00000006)) >> 1;
	*sx0_logen_buff_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_losync_sxsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_losync_sxsel_setf(struct cl_chip *chip, u8 sx0losyncsxsel)
{
	ASSERT_ERR_CHIP((((u32)sx0losyncsxsel << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x20000000)) | ((u32)sx0losyncsxsel << 29));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_SXSEL .addr_index = 0x0000010C, .size_minus_1 = (1 - 1), .shift = 29

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_losync_ldo_vddsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x18000000)) >> 27);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_losync_ldo_vddsel_setf(struct cl_chip *chip, u8 sx0losyncldovddsel)
{
	ASSERT_ERR_CHIP((((u32)sx0losyncldovddsel << 27) & ~((u32)0x18000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x18000000)) | ((u32)sx0losyncldovddsel << 27));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_LDO_VDDSEL .addr_index = 0x0000010C, .size_minus_1 = (2 - 1), .shift = 27

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_losync_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_losync_ldo_en_setf(struct cl_chip *chip, u8 sx0losyncldoen)
{
	ASSERT_ERR_CHIP((((u32)sx0losyncldoen << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x04000000)) | ((u32)sx0losyncldoen << 26));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_LDO_EN .addr_index = 0x0000010C, .size_minus_1 = (1 - 1), .shift = 26

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_losync_rstn_sync_bypass_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_losync_rstn_sync_bypass_setf(struct cl_chip *chip, u8 sx0losyncrstnsyncbypass)
{
	ASSERT_ERR_CHIP((((u32)sx0losyncrstnsyncbypass << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x02000000)) | ((u32)sx0losyncrstnsyncbypass << 25));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_RSTN_SYNC_BYPASS .addr_index = 0x0000010C, .size_minus_1 = (1 - 1), .shift = 25

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_lobuff_ldo_vdd_10_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x01800000)) >> 23);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_lobuff_ldo_vdd_10_sel_setf(struct cl_chip *chip, u8 sx0lobuffldovdd10sel)
{
	ASSERT_ERR_CHIP((((u32)sx0lobuffldovdd10sel << 23) & ~((u32)0x01800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x01800000)) | ((u32)sx0lobuffldovdd10sel << 23));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_LDO_VDD_10_SEL .addr_index = 0x0000010C, .size_minus_1 = (2 - 1), .shift = 23

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_losync_iqdiv_rstn_ext_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_losync_iqdiv_rstn_ext_setf(struct cl_chip *chip, u8 sx0losynciqdivrstnext)
{
	ASSERT_ERR_CHIP((((u32)sx0losynciqdivrstnext << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x00400000)) | ((u32)sx0losynciqdivrstnext << 22));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_IQDIV_RSTN_EXT .addr_index = 0x0000010C, .size_minus_1 = (1 - 1), .shift = 22

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_lobuff_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_lobuff_ldo_en_setf(struct cl_chip *chip, u8 sx0lobuffldoen)
{
	ASSERT_ERR_CHIP((((u32)sx0lobuffldoen << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x00200000)) | ((u32)sx0lobuffldoen << 21));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_LDO_EN .addr_index = 0x0000010C, .size_minus_1 = (1 - 1), .shift = 21

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_lobuff_rep_drv_ch_0_lox_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_lobuff_rep_drv_ch_0_lox_1_en_setf(struct cl_chip *chip, u8 sx0lobuffrepdrvch0lox1en)
{
	ASSERT_ERR_CHIP((((u32)sx0lobuffrepdrvch0lox1en << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x00100000)) | ((u32)sx0lobuffrepdrvch0lox1en << 20));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_REP_DRV_CH_0_LOX_1_EN .addr_index = 0x0000010C, .size_minus_1 = (1 - 1), .shift = 20

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_lobuff_rep_drv_ch_0_lox_0_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_lobuff_rep_drv_ch_0_lox_0_en_setf(struct cl_chip *chip, u8 sx0lobuffrepdrvch0lox0en)
{
	ASSERT_ERR_CHIP((((u32)sx0lobuffrepdrvch0lox0en << 19) & ~((u32)0x00080000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x00080000)) | ((u32)sx0lobuffrepdrvch0lox0en << 19));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOBUFF_REP_DRV_CH_0_LOX_0_EN .addr_index = 0x0000010C, .size_minus_1 = (1 - 1), .shift = 19

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_losync_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_losync_en_setf(struct cl_chip *chip, u8 sx0losyncen)
{
	ASSERT_ERR_CHIP((((u32)sx0losyncen << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x00040000)) | ((u32)sx0losyncen << 18));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOSYNC_EN .addr_index = 0x0000010C, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_mx_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_mx_en_setf(struct cl_chip *chip, u8 sx0logenmxen)
{
	ASSERT_ERR_CHIP((((u32)sx0logenmxen << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x00020000)) | ((u32)sx0logenmxen << 17));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_EN .addr_index = 0x0000010C, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_mx_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0001C000)) >> 14);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_mx_cur_sel_setf(struct cl_chip *chip, u8 sx0logenmxcursel)
{
	ASSERT_ERR_CHIP((((u32)sx0logenmxcursel << 14) & ~((u32)0x0001C000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x0001C000)) | ((u32)sx0logenmxcursel << 14));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_CUR_SEL .addr_index = 0x0000010C, .size_minus_1 = (3 - 1), .shift = 14

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_mx_bias_ctrl_vco_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00003000)) >> 12);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_mx_bias_ctrl_vco_out_setf(struct cl_chip *chip, u8 sx0logenmxbiasctrlvcoout)
{
	ASSERT_ERR_CHIP((((u32)sx0logenmxbiasctrlvcoout << 12) & ~((u32)0x00003000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x00003000)) | ((u32)sx0logenmxbiasctrlvcoout << 12));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_BIAS_CTRL_VCO_OUT .addr_index = 0x0000010C, .size_minus_1 = (2 - 1), .shift = 12

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_mx_bias_ctrl_div_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000C00)) >> 10);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_mx_bias_ctrl_div_out_setf(struct cl_chip *chip, u8 sx0logenmxbiasctrldivout)
{
	ASSERT_ERR_CHIP((((u32)sx0logenmxbiasctrldivout << 10) & ~((u32)0x00000C00)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x00000C00)) | ((u32)sx0logenmxbiasctrldivout << 10));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_BIAS_CTRL_DIV_OUT .addr_index = 0x0000010C, .size_minus_1 = (2 - 1), .shift = 10

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_mx_band_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x000003C0)) >> 6);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_mx_band_sel_setf(struct cl_chip *chip, u8 sx0logenmxbandsel)
{
	ASSERT_ERR_CHIP((((u32)sx0logenmxbandsel << 6) & ~((u32)0x000003C0)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x000003C0)) | ((u32)sx0logenmxbandsel << 6));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_MX_BAND_SEL .addr_index = 0x0000010C, .size_minus_1 = (4 - 1), .shift = 6

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_lowband_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_lowband_en_setf(struct cl_chip *chip, u8 sx0logenlowbanden)
{
	ASSERT_ERR_CHIP((((u32)sx0logenlowbanden << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x00000020)) | ((u32)sx0logenlowbanden << 5));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_LOWBAND_EN .addr_index = 0x0000010C, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_ldo_en_setf(struct cl_chip *chip, u8 sx0logenldoen)
{
	ASSERT_ERR_CHIP((((u32)sx0logenldoen << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x00000010)) | ((u32)sx0logenldoen << 4));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_LDO_EN .addr_index = 0x0000010C, .size_minus_1 = (1 - 1), .shift = 4

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_div_2_drv_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_div_2_drv_en_setf(struct cl_chip *chip, u8 sx0logendiv2drven)
{
	ASSERT_ERR_CHIP((((u32)sx0logendiv2drven << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x00000008)) | ((u32)sx0logendiv2drven << 3));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_DIV_2_DRV_EN .addr_index = 0x0000010C, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_buff_vdd_10_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000006)) >> 1);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_buff_vdd_10_sel_setf(struct cl_chip *chip, u8 sx0logenbuffvdd10sel)
{
	ASSERT_ERR_CHIP((((u32)sx0logenbuffvdd10sel << 1) & ~((u32)0x00000006)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x00000006)) | ((u32)sx0logenbuffvdd10sel << 1));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_BUFF_VDD_10_SEL .addr_index = 0x0000010C, .size_minus_1 = (2 - 1), .shift = 1

static inline u8 rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_buff_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_sx_0_logen_ctrl_0_sx_0_logen_buff_en_setf(struct cl_chip *chip, u8 sx0logenbuffen)
{
	ASSERT_ERR_CHIP((((u32)sx0logenbuffen << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_LOGEN_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)sx0logenbuffen << 0));
}

#define RFIC_REGS_SX_0_LOGEN_CTRL_0_SX_0_LOGEN_BUFF_EN .addr_index = 0x0000010C, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief SX_0_IN_SPARE_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 SX0_in_spare_0            0x00000000
 *    15    SX_ble_rx_lut_write_en    00000000
 *    14    SX_ble_tx_lut_write_en    00000000
 *    13    SX_bt_rx_lut_write_en     00000000
 *    12    SX_bt_tx_lut_write_en     00000000
 *    11:08 SX0_dnsel_extend          0x00000000
 *    07:06 SX0_bt_freq_meas_dur_sel  0x00000000
 *    05    SX0_sdm_out_clk_sync_sel  00000000
 *    04:03 SX0_div_plswsel           0x00000000
 *    02    SX0_lobuff_splitter_drv_CH1_LOX0_en 00000000
 *    01    SX0_lobuff_splitter_drv_CH0_LOX1_en 00000000
 *    00    SX0_lobuff_splitter_drv_CH0_LOX0_en 00000000
 * </pre>
 */
#define RFIC_REGS_SX_0_IN_SPARE_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000434)
#define RFIC_REGS_SX_0_IN_SPARE_0_OFFSET      0x00000434
#define RFIC_REGS_SX_0_IN_SPARE_0_INDEX       0x0000010D
#define RFIC_REGS_SX_0_IN_SPARE_0_RESET       0x00000000

static inline u32 rfic_regs_sx_0_in_spare_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR);
}

static inline void rfic_regs_sx_0_in_spare_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR, value);
}

#define RFIC_REGS_SX_0_IN_SPARE_0 .addr_index = 0x0000010D, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_IN_SPARE_0_MASK    ((u32)0xFFFF0000)
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_IN_SPARE_0_LSB    16
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_IN_SPARE_0_WIDTH    ((u32)0x00000010)
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_BLE_RX_LUT_WRITE_EN_BIT    ((u32)0x00008000)
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_BLE_RX_LUT_WRITE_EN_POS    15
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_BLE_TX_LUT_WRITE_EN_BIT    ((u32)0x00004000)
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_BLE_TX_LUT_WRITE_EN_POS    14
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_BT_RX_LUT_WRITE_EN_BIT    ((u32)0x00002000)
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_BT_RX_LUT_WRITE_EN_POS    13
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_BT_TX_LUT_WRITE_EN_BIT    ((u32)0x00001000)
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_BT_TX_LUT_WRITE_EN_POS    12
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_DNSEL_EXTEND_MASK    ((u32)0x00000F00)
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_DNSEL_EXTEND_LSB    8
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_DNSEL_EXTEND_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_BT_FREQ_MEAS_DUR_SEL_MASK    ((u32)0x000000C0)
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_BT_FREQ_MEAS_DUR_SEL_LSB    6
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_BT_FREQ_MEAS_DUR_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_SDM_OUT_CLK_SYNC_SEL_BIT    ((u32)0x00000020)
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_SDM_OUT_CLK_SYNC_SEL_POS    5
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_DIV_PLSWSEL_MASK    ((u32)0x00000018)
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_DIV_PLSWSEL_LSB    3
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_DIV_PLSWSEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_LOBUFF_SPLITTER_DRV_CH_1_LOX_0_EN_BIT    ((u32)0x00000004)
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_LOBUFF_SPLITTER_DRV_CH_1_LOX_0_EN_POS    2
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_LOBUFF_SPLITTER_DRV_CH_0_LOX_1_EN_BIT    ((u32)0x00000002)
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_LOBUFF_SPLITTER_DRV_CH_0_LOX_1_EN_POS    1
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_LOBUFF_SPLITTER_DRV_CH_0_LOX_0_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_LOBUFF_SPLITTER_DRV_CH_0_LOX_0_EN_POS    0

#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_IN_SPARE_0_RST    0x00000000
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_BLE_RX_LUT_WRITE_EN_RST    0x00000000
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_BLE_TX_LUT_WRITE_EN_RST    0x00000000
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_BT_RX_LUT_WRITE_EN_RST    0x00000000
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_BT_TX_LUT_WRITE_EN_RST    0x00000000
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_DNSEL_EXTEND_RST    0x00000000
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_BT_FREQ_MEAS_DUR_SEL_RST    0x00000000
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_SDM_OUT_CLK_SYNC_SEL_RST    0x00000000
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_DIV_PLSWSEL_RST    0x00000000
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_LOBUFF_SPLITTER_DRV_CH_1_LOX_0_EN_RST    0x00000000
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_LOBUFF_SPLITTER_DRV_CH_0_LOX_1_EN_RST    0x00000000
#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_LOBUFF_SPLITTER_DRV_CH_0_LOX_0_EN_RST    0x00000000

static inline void rfic_regs_sx_0_in_spare_0_pack(struct cl_chip *chip, u16 sx0_in_spare_0, u8 sx_ble_rx_lut_write_en, u8 sx_ble_tx_lut_write_en, u8 sx_bt_rx_lut_write_en, u8 sx_bt_tx_lut_write_en, u8 sx0_dnsel_extend, u8 sx0_bt_freq_meas_dur_sel, u8 sx0_sdm_out_clk_sync_sel, u8 sx0_div_plswsel, u8 sx0_lobuff_splitter_drv_ch1_lox0_en, u8 sx0_lobuff_splitter_drv_ch0_lox1_en, u8 sx0_lobuff_splitter_drv_ch0_lox0_en)
{
	ASSERT_ERR_CHIP((((u32)sx0_in_spare_0 << 16) & ~((u32)0xFFFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx_ble_rx_lut_write_en << 15) & ~((u32)0x00008000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx_ble_tx_lut_write_en << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx_bt_rx_lut_write_en << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx_bt_tx_lut_write_en << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_dnsel_extend << 8) & ~((u32)0x00000F00)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_bt_freq_meas_dur_sel << 6) & ~((u32)0x000000C0)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_sdm_out_clk_sync_sel << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_div_plswsel << 3) & ~((u32)0x00000018)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_lobuff_splitter_drv_ch1_lox0_en << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_lobuff_splitter_drv_ch0_lox1_en << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_lobuff_splitter_drv_ch0_lox0_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR, ((u32)sx0_in_spare_0 << 16) | ((u32)sx_ble_rx_lut_write_en << 15) | ((u32)sx_ble_tx_lut_write_en << 14) | ((u32)sx_bt_rx_lut_write_en << 13) | ((u32)sx_bt_tx_lut_write_en << 12) | ((u32)sx0_dnsel_extend << 8) | ((u32)sx0_bt_freq_meas_dur_sel << 6) | ((u32)sx0_sdm_out_clk_sync_sel << 5) | ((u32)sx0_div_plswsel << 3) | ((u32)sx0_lobuff_splitter_drv_ch1_lox0_en << 2) | ((u32)sx0_lobuff_splitter_drv_ch0_lox1_en << 1) | ((u32)sx0_lobuff_splitter_drv_ch0_lox0_en << 0));
}

static inline void rfic_regs_sx_0_in_spare_0_unpack(struct cl_chip *chip, u16 *sx0_in_spare_0, u8 *sx_ble_rx_lut_write_en, u8 *sx_ble_tx_lut_write_en, u8 *sx_bt_rx_lut_write_en, u8 *sx_bt_tx_lut_write_en, u8 *sx0_dnsel_extend, u8 *sx0_bt_freq_meas_dur_sel, u8 *sx0_sdm_out_clk_sync_sel, u8 *sx0_div_plswsel, u8 *sx0_lobuff_splitter_drv_ch1_lox0_en, u8 *sx0_lobuff_splitter_drv_ch0_lox1_en, u8 *sx0_lobuff_splitter_drv_ch0_lox0_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR);

	*sx0_in_spare_0 = (local_val & ((u32)0xFFFF0000)) >> 16;
	*sx_ble_rx_lut_write_en = (local_val & ((u32)0x00008000)) >> 15;
	*sx_ble_tx_lut_write_en = (local_val & ((u32)0x00004000)) >> 14;
	*sx_bt_rx_lut_write_en = (local_val & ((u32)0x00002000)) >> 13;
	*sx_bt_tx_lut_write_en = (local_val & ((u32)0x00001000)) >> 12;
	*sx0_dnsel_extend = (local_val & ((u32)0x00000F00)) >> 8;
	*sx0_bt_freq_meas_dur_sel = (local_val & ((u32)0x000000C0)) >> 6;
	*sx0_sdm_out_clk_sync_sel = (local_val & ((u32)0x00000020)) >> 5;
	*sx0_div_plswsel = (local_val & ((u32)0x00000018)) >> 3;
	*sx0_lobuff_splitter_drv_ch1_lox0_en = (local_val & ((u32)0x00000004)) >> 2;
	*sx0_lobuff_splitter_drv_ch0_lox1_en = (local_val & ((u32)0x00000002)) >> 1;
	*sx0_lobuff_splitter_drv_ch0_lox0_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u16 rfic_regs_sx_0_in_spare_0_sx_0_in_spare_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR);

	return (u16)((local_val & ((u32)0xFFFF0000)) >> 16);
}

static inline void rfic_regs_sx_0_in_spare_0_sx_0_in_spare_0_setf(struct cl_chip *chip, u16 sx0inspare0)
{
	ASSERT_ERR_CHIP((((u32)sx0inspare0 << 16) & ~((u32)0xFFFF0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR) & ~((u32)0xFFFF0000)) | ((u32)sx0inspare0 << 16));
}

#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_IN_SPARE_0 .addr_index = 0x0000010D, .size_minus_1 = (16 - 1), .shift = 16

static inline u8 rfic_regs_sx_0_in_spare_0_sx_ble_rx_lut_write_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline void rfic_regs_sx_0_in_spare_0_sx_ble_rx_lut_write_en_setf(struct cl_chip *chip, u8 sxblerxlutwriteen)
{
	ASSERT_ERR_CHIP((((u32)sxblerxlutwriteen << 15) & ~((u32)0x00008000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR) & ~((u32)0x00008000)) | ((u32)sxblerxlutwriteen << 15));
}

#define RFIC_REGS_SX_0_IN_SPARE_0_SX_BLE_RX_LUT_WRITE_EN .addr_index = 0x0000010D, .size_minus_1 = (1 - 1), .shift = 15

static inline u8 rfic_regs_sx_0_in_spare_0_sx_ble_tx_lut_write_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void rfic_regs_sx_0_in_spare_0_sx_ble_tx_lut_write_en_setf(struct cl_chip *chip, u8 sxbletxlutwriteen)
{
	ASSERT_ERR_CHIP((((u32)sxbletxlutwriteen << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR) & ~((u32)0x00004000)) | ((u32)sxbletxlutwriteen << 14));
}

#define RFIC_REGS_SX_0_IN_SPARE_0_SX_BLE_TX_LUT_WRITE_EN .addr_index = 0x0000010D, .size_minus_1 = (1 - 1), .shift = 14

static inline u8 rfic_regs_sx_0_in_spare_0_sx_bt_rx_lut_write_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void rfic_regs_sx_0_in_spare_0_sx_bt_rx_lut_write_en_setf(struct cl_chip *chip, u8 sxbtrxlutwriteen)
{
	ASSERT_ERR_CHIP((((u32)sxbtrxlutwriteen << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR) & ~((u32)0x00002000)) | ((u32)sxbtrxlutwriteen << 13));
}

#define RFIC_REGS_SX_0_IN_SPARE_0_SX_BT_RX_LUT_WRITE_EN .addr_index = 0x0000010D, .size_minus_1 = (1 - 1), .shift = 13

static inline u8 rfic_regs_sx_0_in_spare_0_sx_bt_tx_lut_write_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void rfic_regs_sx_0_in_spare_0_sx_bt_tx_lut_write_en_setf(struct cl_chip *chip, u8 sxbttxlutwriteen)
{
	ASSERT_ERR_CHIP((((u32)sxbttxlutwriteen << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR) & ~((u32)0x00001000)) | ((u32)sxbttxlutwriteen << 12));
}

#define RFIC_REGS_SX_0_IN_SPARE_0_SX_BT_TX_LUT_WRITE_EN .addr_index = 0x0000010D, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_sx_0_in_spare_0_sx_0_dnsel_extend_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00000F00)) >> 8);
}

static inline void rfic_regs_sx_0_in_spare_0_sx_0_dnsel_extend_setf(struct cl_chip *chip, u8 sx0dnselextend)
{
	ASSERT_ERR_CHIP((((u32)sx0dnselextend << 8) & ~((u32)0x00000F00)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR) & ~((u32)0x00000F00)) | ((u32)sx0dnselextend << 8));
}

#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_DNSEL_EXTEND .addr_index = 0x0000010D, .size_minus_1 = (4 - 1), .shift = 8

static inline u8 rfic_regs_sx_0_in_spare_0_sx_0_bt_freq_meas_dur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x000000C0)) >> 6);
}

static inline void rfic_regs_sx_0_in_spare_0_sx_0_bt_freq_meas_dur_sel_setf(struct cl_chip *chip, u8 sx0btfreqmeasdursel)
{
	ASSERT_ERR_CHIP((((u32)sx0btfreqmeasdursel << 6) & ~((u32)0x000000C0)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR) & ~((u32)0x000000C0)) | ((u32)sx0btfreqmeasdursel << 6));
}

#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_BT_FREQ_MEAS_DUR_SEL .addr_index = 0x0000010D, .size_minus_1 = (2 - 1), .shift = 6

static inline u8 rfic_regs_sx_0_in_spare_0_sx_0_sdm_out_clk_sync_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void rfic_regs_sx_0_in_spare_0_sx_0_sdm_out_clk_sync_sel_setf(struct cl_chip *chip, u8 sx0sdmoutclksyncsel)
{
	ASSERT_ERR_CHIP((((u32)sx0sdmoutclksyncsel << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR) & ~((u32)0x00000020)) | ((u32)sx0sdmoutclksyncsel << 5));
}

#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_SDM_OUT_CLK_SYNC_SEL .addr_index = 0x0000010D, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_sx_0_in_spare_0_sx_0_div_plswsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00000018)) >> 3);
}

static inline void rfic_regs_sx_0_in_spare_0_sx_0_div_plswsel_setf(struct cl_chip *chip, u8 sx0divplswsel)
{
	ASSERT_ERR_CHIP((((u32)sx0divplswsel << 3) & ~((u32)0x00000018)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR) & ~((u32)0x00000018)) | ((u32)sx0divplswsel << 3));
}

#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_DIV_PLSWSEL .addr_index = 0x0000010D, .size_minus_1 = (2 - 1), .shift = 3

static inline u8 rfic_regs_sx_0_in_spare_0_sx_0_lobuff_splitter_drv_ch_1_lox_0_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_sx_0_in_spare_0_sx_0_lobuff_splitter_drv_ch_1_lox_0_en_setf(struct cl_chip *chip, u8 sx0lobuffsplitterdrvch1lox0en)
{
	ASSERT_ERR_CHIP((((u32)sx0lobuffsplitterdrvch1lox0en << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR) & ~((u32)0x00000004)) | ((u32)sx0lobuffsplitterdrvch1lox0en << 2));
}

#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_LOBUFF_SPLITTER_DRV_CH_1_LOX_0_EN .addr_index = 0x0000010D, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_sx_0_in_spare_0_sx_0_lobuff_splitter_drv_ch_0_lox_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_sx_0_in_spare_0_sx_0_lobuff_splitter_drv_ch_0_lox_1_en_setf(struct cl_chip *chip, u8 sx0lobuffsplitterdrvch0lox1en)
{
	ASSERT_ERR_CHIP((((u32)sx0lobuffsplitterdrvch0lox1en << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR) & ~((u32)0x00000002)) | ((u32)sx0lobuffsplitterdrvch0lox1en << 1));
}

#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_LOBUFF_SPLITTER_DRV_CH_0_LOX_1_EN .addr_index = 0x0000010D, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_sx_0_in_spare_0_sx_0_lobuff_splitter_drv_ch_0_lox_0_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_sx_0_in_spare_0_sx_0_lobuff_splitter_drv_ch_0_lox_0_en_setf(struct cl_chip *chip, u8 sx0lobuffsplitterdrvch0lox0en)
{
	ASSERT_ERR_CHIP((((u32)sx0lobuffsplitterdrvch0lox0en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_IN_SPARE_0_ADDR) & ~((u32)0x00000001)) | ((u32)sx0lobuffsplitterdrvch0lox0en << 0));
}

#define RFIC_REGS_SX_0_IN_SPARE_0_SX_0_LOBUFF_SPLITTER_DRV_CH_0_LOX_0_EN .addr_index = 0x0000010D, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief SX_0_OUT_SPARE_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SX0_out_spare_0           00000000
 *    30:29 SX0_fsm_cal_cp1_cur_sel_out 0x00000000
 *    28:08 SX0_div_nfrac             0x00000000
 *    07:00 SX0_div_int               0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_0_OUT_SPARE_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000438)
#define RFIC_REGS_SX_0_OUT_SPARE_0_OFFSET      0x00000438
#define RFIC_REGS_SX_0_OUT_SPARE_0_INDEX       0x0000010E
#define RFIC_REGS_SX_0_OUT_SPARE_0_RESET       0x00000000

static inline u32 rfic_regs_sx_0_out_spare_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_OUT_SPARE_0_ADDR);
}

#define RFIC_REGS_SX_0_OUT_SPARE_0 .addr_index = 0x0000010E, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_OUT_SPARE_0_BIT    ((u32)0x80000000)
#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_OUT_SPARE_0_POS    31
#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_FSM_CAL_CP_1_CUR_SEL_OUT_MASK    ((u32)0x60000000)
#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_FSM_CAL_CP_1_CUR_SEL_OUT_LSB    29
#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_FSM_CAL_CP_1_CUR_SEL_OUT_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_DIV_NFRAC_MASK    ((u32)0x1FFFFF00)
#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_DIV_NFRAC_LSB    8
#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_DIV_NFRAC_WIDTH    ((u32)0x00000015)
#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_DIV_INT_MASK    ((u32)0x000000FF)
#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_DIV_INT_LSB    0
#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_DIV_INT_WIDTH    ((u32)0x00000008)

#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_OUT_SPARE_0_RST    0x00000000
#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_FSM_CAL_CP_1_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_DIV_NFRAC_RST    0x00000000
#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_DIV_INT_RST    0x00000000

static inline void rfic_regs_sx_0_out_spare_0_unpack(struct cl_chip *chip, u8 *sx0_out_spare_0, u8 *sx0_fsm_cal_cp1_cur_sel_out, u32 *sx0_div_nfrac, u8 *sx0_div_int)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_OUT_SPARE_0_ADDR);

	*sx0_out_spare_0 = (local_val & ((u32)0x80000000)) >> 31;
	*sx0_fsm_cal_cp1_cur_sel_out = (local_val & ((u32)0x60000000)) >> 29;
	*sx0_div_nfrac = (local_val & ((u32)0x1FFFFF00)) >> 8;
	*sx0_div_int = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 rfic_regs_sx_0_out_spare_0_sx_0_out_spare_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_OUT_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_OUT_SPARE_0 .addr_index = 0x0000010E, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_sx_0_out_spare_0_sx_0_fsm_cal_cp_1_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_OUT_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x60000000)) >> 29);
}

#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_FSM_CAL_CP_1_CUR_SEL_OUT .addr_index = 0x0000010E, .size_minus_1 = (2 - 1), .shift = 29

static inline u32 rfic_regs_sx_0_out_spare_0_sx_0_div_nfrac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_OUT_SPARE_0_ADDR);

	return (u32)((local_val & ((u32)0x1FFFFF00)) >> 8);
}

#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_DIV_NFRAC .addr_index = 0x0000010E, .size_minus_1 = (21 - 1), .shift = 8

static inline u8 rfic_regs_sx_0_out_spare_0_sx_0_div_int_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_OUT_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

#define RFIC_REGS_SX_0_OUT_SPARE_0_SX_0_DIV_INT .addr_index = 0x0000010E, .size_minus_1 = (8 - 1), .shift = 0

/**
 * @brief SX_1_PLL_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SX1_spare5                00000000
 *    30:29 SX1_sdm_out_low_limit_sel 0x00000001
 *    28:27 SX1_sdm_out_high_limit_sel 0x00000003
 *    26    SX1_sdm_order             00000000
 *    25    SX1_fsm_en                00000000
 *    24    SX1_sdm_en                00000000
 *    23    SX1_sdm_dithen            00000000
 *    22    SX1_div_pdiven            00000000
 *    21    SX1_div_mdiven            00000000
 *    20    SX1_div_ldoen             00000000
 *    19    SX1_cp_smplen             00000000
 *    18    SX1_div_cal_clk_en        00000000
 *    17    SX1_cplindel_en           00000000
 *    16:15 SX1_cp_ldoen              0x00000000
 *    14:13 SX1_cp1_cur_sel           0x00000000
 *    12:11 SX1_cp0_cur_sel           0x00000000
 *    10:09 SX1_cp_rdgsel             0x00000000
 *    08:07 SX1_cp_iuptstrdgs         0x00000000
 *    06:05 SX1_cp_idntstrdgs         0x00000000
 *    04    SX1_pfd_tristate          00000000
 *    03    SX1_pfd_syncsel           00000000
 *    02    SX1_pfd_desel             00000000
 *    01:00 SX1_pfd_cp_en             0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_1_PLL_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000480)
#define RFIC_REGS_SX_1_PLL_CTRL_0_OFFSET      0x00000480
#define RFIC_REGS_SX_1_PLL_CTRL_0_INDEX       0x00000120
#define RFIC_REGS_SX_1_PLL_CTRL_0_RESET       0x38000000

static inline u32 rfic_regs_sx_1_pll_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, value);
}

#define RFIC_REGS_SX_1_PLL_CTRL_0 .addr_index = 0x00000120, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SPARE_5_BIT    ((u32)0x80000000)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SPARE_5_POS    31
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_OUT_LOW_LIMIT_SEL_MASK    ((u32)0x60000000)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_OUT_LOW_LIMIT_SEL_LSB    29
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_OUT_LOW_LIMIT_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_OUT_HIGH_LIMIT_SEL_MASK    ((u32)0x18000000)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_OUT_HIGH_LIMIT_SEL_LSB    27
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_OUT_HIGH_LIMIT_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_ORDER_BIT    ((u32)0x04000000)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_ORDER_POS    26
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_FSM_EN_BIT    ((u32)0x02000000)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_FSM_EN_POS    25
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_EN_BIT    ((u32)0x01000000)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_EN_POS    24
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_DITHEN_BIT    ((u32)0x00800000)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_DITHEN_POS    23
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_DIV_PDIVEN_BIT    ((u32)0x00400000)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_DIV_PDIVEN_POS    22
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_DIV_MDIVEN_BIT    ((u32)0x00200000)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_DIV_MDIVEN_POS    21
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_DIV_LDOEN_BIT    ((u32)0x00100000)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_DIV_LDOEN_POS    20
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_SMPLEN_BIT    ((u32)0x00080000)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_SMPLEN_POS    19
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_DIV_CAL_CLK_EN_BIT    ((u32)0x00040000)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_DIV_CAL_CLK_EN_POS    18
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CPLINDEL_EN_BIT    ((u32)0x00020000)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CPLINDEL_EN_POS    17
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_LDOEN_MASK    ((u32)0x00018000)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_LDOEN_LSB    15
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_LDOEN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_1_CUR_SEL_MASK    ((u32)0x00006000)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_1_CUR_SEL_LSB    13
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_1_CUR_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_0_CUR_SEL_MASK    ((u32)0x00001800)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_0_CUR_SEL_LSB    11
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_0_CUR_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_RDGSEL_MASK    ((u32)0x00000600)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_RDGSEL_LSB    9
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_RDGSEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_IUPTSTRDGS_MASK    ((u32)0x00000180)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_IUPTSTRDGS_LSB    7
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_IUPTSTRDGS_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_IDNTSTRDGS_MASK    ((u32)0x00000060)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_IDNTSTRDGS_LSB    5
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_IDNTSTRDGS_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_TRISTATE_BIT    ((u32)0x00000010)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_TRISTATE_POS    4
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_SYNCSEL_BIT    ((u32)0x00000008)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_SYNCSEL_POS    3
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_DESEL_BIT    ((u32)0x00000004)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_DESEL_POS    2
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_CP_EN_MASK    ((u32)0x00000003)
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_CP_EN_LSB    0
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_CP_EN_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SPARE_5_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_OUT_LOW_LIMIT_SEL_RST    0x00000001
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_OUT_HIGH_LIMIT_SEL_RST    0x00000003
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_ORDER_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_FSM_EN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_EN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_DITHEN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_DIV_PDIVEN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_DIV_MDIVEN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_DIV_LDOEN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_SMPLEN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_DIV_CAL_CLK_EN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CPLINDEL_EN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_LDOEN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_1_CUR_SEL_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_0_CUR_SEL_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_RDGSEL_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_IUPTSTRDGS_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_IDNTSTRDGS_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_TRISTATE_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_SYNCSEL_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_DESEL_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_CP_EN_RST    0x00000000

static inline void rfic_regs_sx_1_pll_ctrl_0_pack(struct cl_chip *chip, u8 sx1_spare5, u8 sx1_sdm_out_low_limit_sel, u8 sx1_sdm_out_high_limit_sel, u8 sx1_sdm_order, u8 sx1_fsm_en, u8 sx1_sdm_en, u8 sx1_sdm_dithen, u8 sx1_div_pdiven, u8 sx1_div_mdiven, u8 sx1_div_ldoen, u8 sx1_cp_smplen, u8 sx1_div_cal_clk_en, u8 sx1_cplindel_en, u8 sx1_cp_ldoen, u8 sx1_cp1_cur_sel, u8 sx1_cp0_cur_sel, u8 sx1_cp_rdgsel, u8 sx1_cp_iuptstrdgs, u8 sx1_cp_idntstrdgs, u8 sx1_pfd_tristate, u8 sx1_pfd_syncsel, u8 sx1_pfd_desel, u8 sx1_pfd_cp_en)
{
	ASSERT_ERR_CHIP((((u32)sx1_spare5 << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_sdm_out_low_limit_sel << 29) & ~((u32)0x60000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_sdm_out_high_limit_sel << 27) & ~((u32)0x18000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_sdm_order << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_en << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_sdm_en << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_sdm_dithen << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_div_pdiven << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_div_mdiven << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_div_ldoen << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_cp_smplen << 19) & ~((u32)0x00080000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_div_cal_clk_en << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_cplindel_en << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_cp_ldoen << 15) & ~((u32)0x00018000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_cp1_cur_sel << 13) & ~((u32)0x00006000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_cp0_cur_sel << 11) & ~((u32)0x00001800)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_cp_rdgsel << 9) & ~((u32)0x00000600)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_cp_iuptstrdgs << 7) & ~((u32)0x00000180)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_cp_idntstrdgs << 5) & ~((u32)0x00000060)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_pfd_tristate << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_pfd_syncsel << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_pfd_desel << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_pfd_cp_en << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, ((u32)sx1_spare5 << 31) | ((u32)sx1_sdm_out_low_limit_sel << 29) | ((u32)sx1_sdm_out_high_limit_sel << 27) | ((u32)sx1_sdm_order << 26) | ((u32)sx1_fsm_en << 25) | ((u32)sx1_sdm_en << 24) | ((u32)sx1_sdm_dithen << 23) | ((u32)sx1_div_pdiven << 22) | ((u32)sx1_div_mdiven << 21) | ((u32)sx1_div_ldoen << 20) | ((u32)sx1_cp_smplen << 19) | ((u32)sx1_div_cal_clk_en << 18) | ((u32)sx1_cplindel_en << 17) | ((u32)sx1_cp_ldoen << 15) | ((u32)sx1_cp1_cur_sel << 13) | ((u32)sx1_cp0_cur_sel << 11) | ((u32)sx1_cp_rdgsel << 9) | ((u32)sx1_cp_iuptstrdgs << 7) | ((u32)sx1_cp_idntstrdgs << 5) | ((u32)sx1_pfd_tristate << 4) | ((u32)sx1_pfd_syncsel << 3) | ((u32)sx1_pfd_desel << 2) | ((u32)sx1_pfd_cp_en << 0));
}

static inline void rfic_regs_sx_1_pll_ctrl_0_unpack(struct cl_chip *chip, u8 *sx1_spare5, u8 *sx1_sdm_out_low_limit_sel, u8 *sx1_sdm_out_high_limit_sel, u8 *sx1_sdm_order, u8 *sx1_fsm_en, u8 *sx1_sdm_en, u8 *sx1_sdm_dithen, u8 *sx1_div_pdiven, u8 *sx1_div_mdiven, u8 *sx1_div_ldoen, u8 *sx1_cp_smplen, u8 *sx1_div_cal_clk_en, u8 *sx1_cplindel_en, u8 *sx1_cp_ldoen, u8 *sx1_cp1_cur_sel, u8 *sx1_cp0_cur_sel, u8 *sx1_cp_rdgsel, u8 *sx1_cp_iuptstrdgs, u8 *sx1_cp_idntstrdgs, u8 *sx1_pfd_tristate, u8 *sx1_pfd_syncsel, u8 *sx1_pfd_desel, u8 *sx1_pfd_cp_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	*sx1_spare5 = (local_val & ((u32)0x80000000)) >> 31;
	*sx1_sdm_out_low_limit_sel = (local_val & ((u32)0x60000000)) >> 29;
	*sx1_sdm_out_high_limit_sel = (local_val & ((u32)0x18000000)) >> 27;
	*sx1_sdm_order = (local_val & ((u32)0x04000000)) >> 26;
	*sx1_fsm_en = (local_val & ((u32)0x02000000)) >> 25;
	*sx1_sdm_en = (local_val & ((u32)0x01000000)) >> 24;
	*sx1_sdm_dithen = (local_val & ((u32)0x00800000)) >> 23;
	*sx1_div_pdiven = (local_val & ((u32)0x00400000)) >> 22;
	*sx1_div_mdiven = (local_val & ((u32)0x00200000)) >> 21;
	*sx1_div_ldoen = (local_val & ((u32)0x00100000)) >> 20;
	*sx1_cp_smplen = (local_val & ((u32)0x00080000)) >> 19;
	*sx1_div_cal_clk_en = (local_val & ((u32)0x00040000)) >> 18;
	*sx1_cplindel_en = (local_val & ((u32)0x00020000)) >> 17;
	*sx1_cp_ldoen = (local_val & ((u32)0x00018000)) >> 15;
	*sx1_cp1_cur_sel = (local_val & ((u32)0x00006000)) >> 13;
	*sx1_cp0_cur_sel = (local_val & ((u32)0x00001800)) >> 11;
	*sx1_cp_rdgsel = (local_val & ((u32)0x00000600)) >> 9;
	*sx1_cp_iuptstrdgs = (local_val & ((u32)0x00000180)) >> 7;
	*sx1_cp_idntstrdgs = (local_val & ((u32)0x00000060)) >> 5;
	*sx1_pfd_tristate = (local_val & ((u32)0x00000010)) >> 4;
	*sx1_pfd_syncsel = (local_val & ((u32)0x00000008)) >> 3;
	*sx1_pfd_desel = (local_val & ((u32)0x00000004)) >> 2;
	*sx1_pfd_cp_en = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_spare_5_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_spare_5_setf(struct cl_chip *chip, u8 sx1spare5)
{
	ASSERT_ERR_CHIP((((u32)sx1spare5 << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x80000000)) | ((u32)sx1spare5 << 31));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SPARE_5 .addr_index = 0x00000120, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_sdm_out_low_limit_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x60000000)) >> 29);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_sdm_out_low_limit_sel_setf(struct cl_chip *chip, u8 sx1sdmoutlowlimitsel)
{
	ASSERT_ERR_CHIP((((u32)sx1sdmoutlowlimitsel << 29) & ~((u32)0x60000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x60000000)) | ((u32)sx1sdmoutlowlimitsel << 29));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_OUT_LOW_LIMIT_SEL .addr_index = 0x00000120, .size_minus_1 = (2 - 1), .shift = 29

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_sdm_out_high_limit_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x18000000)) >> 27);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_sdm_out_high_limit_sel_setf(struct cl_chip *chip, u8 sx1sdmouthighlimitsel)
{
	ASSERT_ERR_CHIP((((u32)sx1sdmouthighlimitsel << 27) & ~((u32)0x18000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x18000000)) | ((u32)sx1sdmouthighlimitsel << 27));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_OUT_HIGH_LIMIT_SEL .addr_index = 0x00000120, .size_minus_1 = (2 - 1), .shift = 27

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_sdm_order_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_sdm_order_setf(struct cl_chip *chip, u8 sx1sdmorder)
{
	ASSERT_ERR_CHIP((((u32)sx1sdmorder << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x04000000)) | ((u32)sx1sdmorder << 26));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_ORDER .addr_index = 0x00000120, .size_minus_1 = (1 - 1), .shift = 26

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_fsm_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_fsm_en_setf(struct cl_chip *chip, u8 sx1fsmen)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmen << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x02000000)) | ((u32)sx1fsmen << 25));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_FSM_EN .addr_index = 0x00000120, .size_minus_1 = (1 - 1), .shift = 25

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_sdm_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_sdm_en_setf(struct cl_chip *chip, u8 sx1sdmen)
{
	ASSERT_ERR_CHIP((((u32)sx1sdmen << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x01000000)) | ((u32)sx1sdmen << 24));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_EN .addr_index = 0x00000120, .size_minus_1 = (1 - 1), .shift = 24

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_sdm_dithen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_sdm_dithen_setf(struct cl_chip *chip, u8 sx1sdmdithen)
{
	ASSERT_ERR_CHIP((((u32)sx1sdmdithen << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00800000)) | ((u32)sx1sdmdithen << 23));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_SDM_DITHEN .addr_index = 0x00000120, .size_minus_1 = (1 - 1), .shift = 23

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_div_pdiven_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_div_pdiven_setf(struct cl_chip *chip, u8 sx1divpdiven)
{
	ASSERT_ERR_CHIP((((u32)sx1divpdiven << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00400000)) | ((u32)sx1divpdiven << 22));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_DIV_PDIVEN .addr_index = 0x00000120, .size_minus_1 = (1 - 1), .shift = 22

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_div_mdiven_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_div_mdiven_setf(struct cl_chip *chip, u8 sx1divmdiven)
{
	ASSERT_ERR_CHIP((((u32)sx1divmdiven << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00200000)) | ((u32)sx1divmdiven << 21));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_DIV_MDIVEN .addr_index = 0x00000120, .size_minus_1 = (1 - 1), .shift = 21

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_div_ldoen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_div_ldoen_setf(struct cl_chip *chip, u8 sx1divldoen)
{
	ASSERT_ERR_CHIP((((u32)sx1divldoen << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00100000)) | ((u32)sx1divldoen << 20));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_DIV_LDOEN .addr_index = 0x00000120, .size_minus_1 = (1 - 1), .shift = 20

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_cp_smplen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_cp_smplen_setf(struct cl_chip *chip, u8 sx1cpsmplen)
{
	ASSERT_ERR_CHIP((((u32)sx1cpsmplen << 19) & ~((u32)0x00080000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00080000)) | ((u32)sx1cpsmplen << 19));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_SMPLEN .addr_index = 0x00000120, .size_minus_1 = (1 - 1), .shift = 19

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_div_cal_clk_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_div_cal_clk_en_setf(struct cl_chip *chip, u8 sx1divcalclken)
{
	ASSERT_ERR_CHIP((((u32)sx1divcalclken << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00040000)) | ((u32)sx1divcalclken << 18));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_DIV_CAL_CLK_EN .addr_index = 0x00000120, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_cplindel_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_cplindel_en_setf(struct cl_chip *chip, u8 sx1cplindelen)
{
	ASSERT_ERR_CHIP((((u32)sx1cplindelen << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00020000)) | ((u32)sx1cplindelen << 17));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CPLINDEL_EN .addr_index = 0x00000120, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_cp_ldoen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00018000)) >> 15);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_cp_ldoen_setf(struct cl_chip *chip, u8 sx1cpldoen)
{
	ASSERT_ERR_CHIP((((u32)sx1cpldoen << 15) & ~((u32)0x00018000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00018000)) | ((u32)sx1cpldoen << 15));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_LDOEN .addr_index = 0x00000120, .size_minus_1 = (2 - 1), .shift = 15

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_cp_1_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00006000)) >> 13);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_cp_1_cur_sel_setf(struct cl_chip *chip, u8 sx1cp1cursel)
{
	ASSERT_ERR_CHIP((((u32)sx1cp1cursel << 13) & ~((u32)0x00006000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00006000)) | ((u32)sx1cp1cursel << 13));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_1_CUR_SEL .addr_index = 0x00000120, .size_minus_1 = (2 - 1), .shift = 13

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_cp_0_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00001800)) >> 11);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_cp_0_cur_sel_setf(struct cl_chip *chip, u8 sx1cp0cursel)
{
	ASSERT_ERR_CHIP((((u32)sx1cp0cursel << 11) & ~((u32)0x00001800)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00001800)) | ((u32)sx1cp0cursel << 11));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_0_CUR_SEL .addr_index = 0x00000120, .size_minus_1 = (2 - 1), .shift = 11

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_cp_rdgsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000600)) >> 9);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_cp_rdgsel_setf(struct cl_chip *chip, u8 sx1cprdgsel)
{
	ASSERT_ERR_CHIP((((u32)sx1cprdgsel << 9) & ~((u32)0x00000600)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00000600)) | ((u32)sx1cprdgsel << 9));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_RDGSEL .addr_index = 0x00000120, .size_minus_1 = (2 - 1), .shift = 9

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_cp_iuptstrdgs_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000180)) >> 7);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_cp_iuptstrdgs_setf(struct cl_chip *chip, u8 sx1cpiuptstrdgs)
{
	ASSERT_ERR_CHIP((((u32)sx1cpiuptstrdgs << 7) & ~((u32)0x00000180)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00000180)) | ((u32)sx1cpiuptstrdgs << 7));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_IUPTSTRDGS .addr_index = 0x00000120, .size_minus_1 = (2 - 1), .shift = 7

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_cp_idntstrdgs_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000060)) >> 5);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_cp_idntstrdgs_setf(struct cl_chip *chip, u8 sx1cpidntstrdgs)
{
	ASSERT_ERR_CHIP((((u32)sx1cpidntstrdgs << 5) & ~((u32)0x00000060)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00000060)) | ((u32)sx1cpidntstrdgs << 5));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_CP_IDNTSTRDGS .addr_index = 0x00000120, .size_minus_1 = (2 - 1), .shift = 5

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_pfd_tristate_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_pfd_tristate_setf(struct cl_chip *chip, u8 sx1pfdtristate)
{
	ASSERT_ERR_CHIP((((u32)sx1pfdtristate << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00000010)) | ((u32)sx1pfdtristate << 4));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_TRISTATE .addr_index = 0x00000120, .size_minus_1 = (1 - 1), .shift = 4

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_pfd_syncsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_pfd_syncsel_setf(struct cl_chip *chip, u8 sx1pfdsyncsel)
{
	ASSERT_ERR_CHIP((((u32)sx1pfdsyncsel << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00000008)) | ((u32)sx1pfdsyncsel << 3));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_SYNCSEL .addr_index = 0x00000120, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_pfd_desel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_pfd_desel_setf(struct cl_chip *chip, u8 sx1pfddesel)
{
	ASSERT_ERR_CHIP((((u32)sx1pfddesel << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00000004)) | ((u32)sx1pfddesel << 2));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_DESEL .addr_index = 0x00000120, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_sx_1_pll_ctrl_0_sx_1_pfd_cp_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_sx_1_pll_ctrl_0_sx_1_pfd_cp_en_setf(struct cl_chip *chip, u8 sx1pfdcpen)
{
	ASSERT_ERR_CHIP((((u32)sx1pfdcpen << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_0_ADDR) & ~((u32)0x00000003)) | ((u32)sx1pfdcpen << 0));
}

#define RFIC_REGS_SX_1_PLL_CTRL_0_SX_1_PFD_CP_EN .addr_index = 0x00000120, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief SX_1_PLL_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SX1_vcobiasfilt_bypass    00000000
 *    30    SX1_vco_ampdet_read       00000000
 *    29    SX1_vco_ampdet_ptat_cur_en 00000000
 *    28    SX1_vco_ampdet_en         00000000
 *    27    SX1_vco_ldo1ven           00000000
 *    26:25 SX1_vcoptat_bias_en       0x00000000
 *    24:17 SX1_vco_ftun              0x00000000
 *    16:12 SX1_vco_cur_sel           0x00000000
 *    11    SX1_vco2_lodrv            00000000
 *    10    SX1_vco2_ldoen            00000000
 *    09    SX1_vco2_en               00000000
 *    08    SX1_vco2_drv              00000000
 *    07    SX1_vco1_lodrv            00000000
 *    06    SX1_vco1_ldoen            00000000
 *    05    SX1_vco1_en               00000000
 *    04    SX1_vco1_drv              00000000
 *    03    SX1_vco0_lodrv            00000000
 *    02    SX1_vco0_ldoen            00000000
 *    01    SX1_vco0_en               00000000
 *    00    SX1_vco0_drv              00000000
 * </pre>
 */
#define RFIC_REGS_SX_1_PLL_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000484)
#define RFIC_REGS_SX_1_PLL_CTRL_1_OFFSET      0x00000484
#define RFIC_REGS_SX_1_PLL_CTRL_1_INDEX       0x00000121
#define RFIC_REGS_SX_1_PLL_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_sx_1_pll_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, value);
}

#define RFIC_REGS_SX_1_PLL_CTRL_1 .addr_index = 0x00000121, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCOBIASFILT_BYPASS_BIT    ((u32)0x80000000)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCOBIASFILT_BYPASS_POS    31
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_AMPDET_READ_BIT    ((u32)0x40000000)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_AMPDET_READ_POS    30
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_AMPDET_PTAT_CUR_EN_BIT    ((u32)0x20000000)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_AMPDET_PTAT_CUR_EN_POS    29
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_AMPDET_EN_BIT    ((u32)0x10000000)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_AMPDET_EN_POS    28
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_LDO_1_VEN_BIT    ((u32)0x08000000)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_LDO_1_VEN_POS    27
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCOPTAT_BIAS_EN_MASK    ((u32)0x06000000)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCOPTAT_BIAS_EN_LSB    25
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCOPTAT_BIAS_EN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_FTUN_MASK    ((u32)0x01FE0000)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_FTUN_LSB    17
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_FTUN_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_CUR_SEL_MASK    ((u32)0x0001F000)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_CUR_SEL_LSB    12
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_CUR_SEL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_2_LODRV_BIT    ((u32)0x00000800)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_2_LODRV_POS    11
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_2_LDOEN_BIT    ((u32)0x00000400)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_2_LDOEN_POS    10
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_2_EN_BIT    ((u32)0x00000200)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_2_EN_POS    9
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_2_DRV_BIT    ((u32)0x00000100)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_2_DRV_POS    8
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_1_LODRV_BIT    ((u32)0x00000080)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_1_LODRV_POS    7
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_1_LDOEN_BIT    ((u32)0x00000040)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_1_LDOEN_POS    6
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_1_EN_BIT    ((u32)0x00000020)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_1_EN_POS    5
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_1_DRV_BIT    ((u32)0x00000010)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_1_DRV_POS    4
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_0_LODRV_BIT    ((u32)0x00000008)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_0_LODRV_POS    3
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_0_LDOEN_BIT    ((u32)0x00000004)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_0_LDOEN_POS    2
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_0_EN_BIT    ((u32)0x00000002)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_0_EN_POS    1
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_0_DRV_BIT    ((u32)0x00000001)
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_0_DRV_POS    0

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCOBIASFILT_BYPASS_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_AMPDET_READ_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_AMPDET_PTAT_CUR_EN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_AMPDET_EN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_LDO_1_VEN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCOPTAT_BIAS_EN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_FTUN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_CUR_SEL_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_2_LODRV_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_2_LDOEN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_2_EN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_2_DRV_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_1_LODRV_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_1_LDOEN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_1_EN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_1_DRV_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_0_LODRV_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_0_LDOEN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_0_EN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_0_DRV_RST    0x00000000

static inline void rfic_regs_sx_1_pll_ctrl_1_pack(struct cl_chip *chip, u8 sx1_vcobiasfilt_bypass, u8 sx1_vco_ampdet_read, u8 sx1_vco_ampdet_ptat_cur_en, u8 sx1_vco_ampdet_en, u8 sx1_vco_ldo1ven, u8 sx1_vcoptat_bias_en, u8 sx1_vco_ftun, u8 sx1_vco_cur_sel, u8 sx1_vco2_lodrv, u8 sx1_vco2_ldoen, u8 sx1_vco2_en, u8 sx1_vco2_drv, u8 sx1_vco1_lodrv, u8 sx1_vco1_ldoen, u8 sx1_vco1_en, u8 sx1_vco1_drv, u8 sx1_vco0_lodrv, u8 sx1_vco0_ldoen, u8 sx1_vco0_en, u8 sx1_vco0_drv)
{
	ASSERT_ERR_CHIP((((u32)sx1_vcobiasfilt_bypass << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco_ampdet_read << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco_ampdet_ptat_cur_en << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco_ampdet_en << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco_ldo1ven << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vcoptat_bias_en << 25) & ~((u32)0x06000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco_ftun << 17) & ~((u32)0x01FE0000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco_cur_sel << 12) & ~((u32)0x0001F000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco2_lodrv << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco2_ldoen << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco2_en << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco2_drv << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco1_lodrv << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco1_ldoen << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco1_en << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco1_drv << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco0_lodrv << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco0_ldoen << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco0_en << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco0_drv << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, ((u32)sx1_vcobiasfilt_bypass << 31) | ((u32)sx1_vco_ampdet_read << 30) | ((u32)sx1_vco_ampdet_ptat_cur_en << 29) | ((u32)sx1_vco_ampdet_en << 28) | ((u32)sx1_vco_ldo1ven << 27) | ((u32)sx1_vcoptat_bias_en << 25) | ((u32)sx1_vco_ftun << 17) | ((u32)sx1_vco_cur_sel << 12) | ((u32)sx1_vco2_lodrv << 11) | ((u32)sx1_vco2_ldoen << 10) | ((u32)sx1_vco2_en << 9) | ((u32)sx1_vco2_drv << 8) | ((u32)sx1_vco1_lodrv << 7) | ((u32)sx1_vco1_ldoen << 6) | ((u32)sx1_vco1_en << 5) | ((u32)sx1_vco1_drv << 4) | ((u32)sx1_vco0_lodrv << 3) | ((u32)sx1_vco0_ldoen << 2) | ((u32)sx1_vco0_en << 1) | ((u32)sx1_vco0_drv << 0));
}

static inline void rfic_regs_sx_1_pll_ctrl_1_unpack(struct cl_chip *chip, u8 *sx1_vcobiasfilt_bypass, u8 *sx1_vco_ampdet_read, u8 *sx1_vco_ampdet_ptat_cur_en, u8 *sx1_vco_ampdet_en, u8 *sx1_vco_ldo1ven, u8 *sx1_vcoptat_bias_en, u8 *sx1_vco_ftun, u8 *sx1_vco_cur_sel, u8 *sx1_vco2_lodrv, u8 *sx1_vco2_ldoen, u8 *sx1_vco2_en, u8 *sx1_vco2_drv, u8 *sx1_vco1_lodrv, u8 *sx1_vco1_ldoen, u8 *sx1_vco1_en, u8 *sx1_vco1_drv, u8 *sx1_vco0_lodrv, u8 *sx1_vco0_ldoen, u8 *sx1_vco0_en, u8 *sx1_vco0_drv)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	*sx1_vcobiasfilt_bypass = (local_val & ((u32)0x80000000)) >> 31;
	*sx1_vco_ampdet_read = (local_val & ((u32)0x40000000)) >> 30;
	*sx1_vco_ampdet_ptat_cur_en = (local_val & ((u32)0x20000000)) >> 29;
	*sx1_vco_ampdet_en = (local_val & ((u32)0x10000000)) >> 28;
	*sx1_vco_ldo1ven = (local_val & ((u32)0x08000000)) >> 27;
	*sx1_vcoptat_bias_en = (local_val & ((u32)0x06000000)) >> 25;
	*sx1_vco_ftun = (local_val & ((u32)0x01FE0000)) >> 17;
	*sx1_vco_cur_sel = (local_val & ((u32)0x0001F000)) >> 12;
	*sx1_vco2_lodrv = (local_val & ((u32)0x00000800)) >> 11;
	*sx1_vco2_ldoen = (local_val & ((u32)0x00000400)) >> 10;
	*sx1_vco2_en = (local_val & ((u32)0x00000200)) >> 9;
	*sx1_vco2_drv = (local_val & ((u32)0x00000100)) >> 8;
	*sx1_vco1_lodrv = (local_val & ((u32)0x00000080)) >> 7;
	*sx1_vco1_ldoen = (local_val & ((u32)0x00000040)) >> 6;
	*sx1_vco1_en = (local_val & ((u32)0x00000020)) >> 5;
	*sx1_vco1_drv = (local_val & ((u32)0x00000010)) >> 4;
	*sx1_vco0_lodrv = (local_val & ((u32)0x00000008)) >> 3;
	*sx1_vco0_ldoen = (local_val & ((u32)0x00000004)) >> 2;
	*sx1_vco0_en = (local_val & ((u32)0x00000002)) >> 1;
	*sx1_vco0_drv = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vcobiasfilt_bypass_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vcobiasfilt_bypass_setf(struct cl_chip *chip, u8 sx1vcobiasfiltbypass)
{
	ASSERT_ERR_CHIP((((u32)sx1vcobiasfiltbypass << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x80000000)) | ((u32)sx1vcobiasfiltbypass << 31));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCOBIASFILT_BYPASS .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_ampdet_read_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_ampdet_read_setf(struct cl_chip *chip, u8 sx1vcoampdetread)
{
	ASSERT_ERR_CHIP((((u32)sx1vcoampdetread << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x40000000)) | ((u32)sx1vcoampdetread << 30));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_AMPDET_READ .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 30

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_ampdet_ptat_cur_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_ampdet_ptat_cur_en_setf(struct cl_chip *chip, u8 sx1vcoampdetptatcuren)
{
	ASSERT_ERR_CHIP((((u32)sx1vcoampdetptatcuren << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x20000000)) | ((u32)sx1vcoampdetptatcuren << 29));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_AMPDET_PTAT_CUR_EN .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 29

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_ampdet_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_ampdet_en_setf(struct cl_chip *chip, u8 sx1vcoampdeten)
{
	ASSERT_ERR_CHIP((((u32)sx1vcoampdeten << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x10000000)) | ((u32)sx1vcoampdeten << 28));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_AMPDET_EN .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 28

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_ldo_1_ven_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_ldo_1_ven_setf(struct cl_chip *chip, u8 sx1vcoldo1ven)
{
	ASSERT_ERR_CHIP((((u32)sx1vcoldo1ven << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x08000000)) | ((u32)sx1vcoldo1ven << 27));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_LDO_1_VEN .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 27

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vcoptat_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x06000000)) >> 25);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vcoptat_bias_en_setf(struct cl_chip *chip, u8 sx1vcoptatbiasen)
{
	ASSERT_ERR_CHIP((((u32)sx1vcoptatbiasen << 25) & ~((u32)0x06000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x06000000)) | ((u32)sx1vcoptatbiasen << 25));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCOPTAT_BIAS_EN .addr_index = 0x00000121, .size_minus_1 = (2 - 1), .shift = 25

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_ftun_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x01FE0000)) >> 17);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_ftun_setf(struct cl_chip *chip, u8 sx1vcoftun)
{
	ASSERT_ERR_CHIP((((u32)sx1vcoftun << 17) & ~((u32)0x01FE0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x01FE0000)) | ((u32)sx1vcoftun << 17));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_FTUN .addr_index = 0x00000121, .size_minus_1 = (8 - 1), .shift = 17

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0001F000)) >> 12);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_cur_sel_setf(struct cl_chip *chip, u8 sx1vcocursel)
{
	ASSERT_ERR_CHIP((((u32)sx1vcocursel << 12) & ~((u32)0x0001F000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x0001F000)) | ((u32)sx1vcocursel << 12));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_CUR_SEL .addr_index = 0x00000121, .size_minus_1 = (5 - 1), .shift = 12

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_2_lodrv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_2_lodrv_setf(struct cl_chip *chip, u8 sx1vco2lodrv)
{
	ASSERT_ERR_CHIP((((u32)sx1vco2lodrv << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x00000800)) | ((u32)sx1vco2lodrv << 11));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_2_LODRV .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_2_ldoen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_2_ldoen_setf(struct cl_chip *chip, u8 sx1vco2ldoen)
{
	ASSERT_ERR_CHIP((((u32)sx1vco2ldoen << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x00000400)) | ((u32)sx1vco2ldoen << 10));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_2_LDOEN .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_2_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_2_en_setf(struct cl_chip *chip, u8 sx1vco2en)
{
	ASSERT_ERR_CHIP((((u32)sx1vco2en << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x00000200)) | ((u32)sx1vco2en << 9));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_2_EN .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_2_drv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_2_drv_setf(struct cl_chip *chip, u8 sx1vco2drv)
{
	ASSERT_ERR_CHIP((((u32)sx1vco2drv << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x00000100)) | ((u32)sx1vco2drv << 8));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_2_DRV .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_1_lodrv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_1_lodrv_setf(struct cl_chip *chip, u8 sx1vco1lodrv)
{
	ASSERT_ERR_CHIP((((u32)sx1vco1lodrv << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x00000080)) | ((u32)sx1vco1lodrv << 7));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_1_LODRV .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_1_ldoen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_1_ldoen_setf(struct cl_chip *chip, u8 sx1vco1ldoen)
{
	ASSERT_ERR_CHIP((((u32)sx1vco1ldoen << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x00000040)) | ((u32)sx1vco1ldoen << 6));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_1_LDOEN .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_1_en_setf(struct cl_chip *chip, u8 sx1vco1en)
{
	ASSERT_ERR_CHIP((((u32)sx1vco1en << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x00000020)) | ((u32)sx1vco1en << 5));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_1_EN .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_1_drv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_1_drv_setf(struct cl_chip *chip, u8 sx1vco1drv)
{
	ASSERT_ERR_CHIP((((u32)sx1vco1drv << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x00000010)) | ((u32)sx1vco1drv << 4));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_1_DRV .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 4

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_0_lodrv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_0_lodrv_setf(struct cl_chip *chip, u8 sx1vco0lodrv)
{
	ASSERT_ERR_CHIP((((u32)sx1vco0lodrv << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x00000008)) | ((u32)sx1vco0lodrv << 3));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_0_LODRV .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_0_ldoen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_0_ldoen_setf(struct cl_chip *chip, u8 sx1vco0ldoen)
{
	ASSERT_ERR_CHIP((((u32)sx1vco0ldoen << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x00000004)) | ((u32)sx1vco0ldoen << 2));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_0_LDOEN .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_0_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_0_en_setf(struct cl_chip *chip, u8 sx1vco0en)
{
	ASSERT_ERR_CHIP((((u32)sx1vco0en << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x00000002)) | ((u32)sx1vco0en << 1));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_0_EN .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_0_drv_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_sx_1_pll_ctrl_1_sx_1_vco_0_drv_setf(struct cl_chip *chip, u8 sx1vco0drv)
{
	ASSERT_ERR_CHIP((((u32)sx1vco0drv << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_1_ADDR) & ~((u32)0x00000001)) | ((u32)sx1vco0drv << 0));
}

#define RFIC_REGS_SX_1_PLL_CTRL_1_SX_1_VCO_0_DRV .addr_index = 0x00000121, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief SX_1_PLL_CTRL_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:27 SX1_vco_ampdet_ref_sel    0x00000000
 *    26    SX1_bgren                 00000000
 *    25:21 SX1_clktst_sel            0x00000000
 *    20    SX1_clktsten              00000000
 *    19:15 SX1_lpf_r2                0x00000000
 *    14    SX1_lpf_dcselh            00000000
 *    13    SX1_lpf_cmpen             00000000
 *    12    SX1_lpf_caltst            00000000
 *    11:09 SX1_lpf_selh              0x00000000
 *    08:06 SX1_lpf_sell              0x00000005
 *    05:03 SX1_lpf_c1                0x00000000
 *    02:00 SX1_lpf_c34               0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_1_PLL_CTRL_2_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000488)
#define RFIC_REGS_SX_1_PLL_CTRL_2_OFFSET      0x00000488
#define RFIC_REGS_SX_1_PLL_CTRL_2_INDEX       0x00000122
#define RFIC_REGS_SX_1_PLL_CTRL_2_RESET       0x00000140

static inline u32 rfic_regs_sx_1_pll_ctrl_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR);
}

static inline void rfic_regs_sx_1_pll_ctrl_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR, value);
}

#define RFIC_REGS_SX_1_PLL_CTRL_2 .addr_index = 0x00000122, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_VCO_AMPDET_REF_SEL_MASK    ((u32)0x78000000)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_VCO_AMPDET_REF_SEL_LSB    27
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_VCO_AMPDET_REF_SEL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_BGREN_BIT    ((u32)0x04000000)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_BGREN_POS    26
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_CLKTST_SEL_MASK    ((u32)0x03E00000)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_CLKTST_SEL_LSB    21
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_CLKTST_SEL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_CLKTSTEN_BIT    ((u32)0x00100000)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_CLKTSTEN_POS    20
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_R_2_MASK    ((u32)0x000F8000)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_R_2_LSB    15
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_R_2_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_DCSELH_BIT    ((u32)0x00004000)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_DCSELH_POS    14
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_CMPEN_BIT    ((u32)0x00002000)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_CMPEN_POS    13
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_CALTST_BIT    ((u32)0x00001000)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_CALTST_POS    12
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_SELH_MASK    ((u32)0x00000E00)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_SELH_LSB    9
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_SELH_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_SELL_MASK    ((u32)0x000001C0)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_SELL_LSB    6
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_SELL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_C_1_MASK    ((u32)0x00000038)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_C_1_LSB    3
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_C_1_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_C_34_MASK    ((u32)0x00000007)
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_C_34_LSB    0
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_C_34_WIDTH    ((u32)0x00000003)

#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_VCO_AMPDET_REF_SEL_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_BGREN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_CLKTST_SEL_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_CLKTSTEN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_R_2_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_DCSELH_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_CMPEN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_CALTST_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_SELH_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_SELL_RST    0x00000005
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_C_1_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_C_34_RST    0x00000000

static inline void rfic_regs_sx_1_pll_ctrl_2_pack(struct cl_chip *chip, u8 sx1_vco_ampdet_ref_sel, u8 sx1_bgren, u8 sx1_clktst_sel, u8 sx1_clktsten, u8 sx1_lpf_r2, u8 sx1_lpf_dcselh, u8 sx1_lpf_cmpen, u8 sx1_lpf_caltst, u8 sx1_lpf_selh, u8 sx1_lpf_sell, u8 sx1_lpf_c1, u8 sx1_lpf_c34)
{
	ASSERT_ERR_CHIP((((u32)sx1_vco_ampdet_ref_sel << 27) & ~((u32)0x78000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_bgren << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_clktst_sel << 21) & ~((u32)0x03E00000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_clktsten << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_lpf_r2 << 15) & ~((u32)0x000F8000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_lpf_dcselh << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_lpf_cmpen << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_lpf_caltst << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_lpf_selh << 9) & ~((u32)0x00000E00)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_lpf_sell << 6) & ~((u32)0x000001C0)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_lpf_c1 << 3) & ~((u32)0x00000038)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_lpf_c34 << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR, ((u32)sx1_vco_ampdet_ref_sel << 27) | ((u32)sx1_bgren << 26) | ((u32)sx1_clktst_sel << 21) | ((u32)sx1_clktsten << 20) | ((u32)sx1_lpf_r2 << 15) | ((u32)sx1_lpf_dcselh << 14) | ((u32)sx1_lpf_cmpen << 13) | ((u32)sx1_lpf_caltst << 12) | ((u32)sx1_lpf_selh << 9) | ((u32)sx1_lpf_sell << 6) | ((u32)sx1_lpf_c1 << 3) | ((u32)sx1_lpf_c34 << 0));
}

static inline void rfic_regs_sx_1_pll_ctrl_2_unpack(struct cl_chip *chip, u8 *sx1_vco_ampdet_ref_sel, u8 *sx1_bgren, u8 *sx1_clktst_sel, u8 *sx1_clktsten, u8 *sx1_lpf_r2, u8 *sx1_lpf_dcselh, u8 *sx1_lpf_cmpen, u8 *sx1_lpf_caltst, u8 *sx1_lpf_selh, u8 *sx1_lpf_sell, u8 *sx1_lpf_c1, u8 *sx1_lpf_c34)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR);

	*sx1_vco_ampdet_ref_sel = (local_val & ((u32)0x78000000)) >> 27;
	*sx1_bgren = (local_val & ((u32)0x04000000)) >> 26;
	*sx1_clktst_sel = (local_val & ((u32)0x03E00000)) >> 21;
	*sx1_clktsten = (local_val & ((u32)0x00100000)) >> 20;
	*sx1_lpf_r2 = (local_val & ((u32)0x000F8000)) >> 15;
	*sx1_lpf_dcselh = (local_val & ((u32)0x00004000)) >> 14;
	*sx1_lpf_cmpen = (local_val & ((u32)0x00002000)) >> 13;
	*sx1_lpf_caltst = (local_val & ((u32)0x00001000)) >> 12;
	*sx1_lpf_selh = (local_val & ((u32)0x00000E00)) >> 9;
	*sx1_lpf_sell = (local_val & ((u32)0x000001C0)) >> 6;
	*sx1_lpf_c1 = (local_val & ((u32)0x00000038)) >> 3;
	*sx1_lpf_c34 = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 rfic_regs_sx_1_pll_ctrl_2_sx_1_vco_ampdet_ref_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x78000000)) >> 27);
}

static inline void rfic_regs_sx_1_pll_ctrl_2_sx_1_vco_ampdet_ref_sel_setf(struct cl_chip *chip, u8 sx1vcoampdetrefsel)
{
	ASSERT_ERR_CHIP((((u32)sx1vcoampdetrefsel << 27) & ~((u32)0x78000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR) & ~((u32)0x78000000)) | ((u32)sx1vcoampdetrefsel << 27));
}

#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_VCO_AMPDET_REF_SEL .addr_index = 0x00000122, .size_minus_1 = (4 - 1), .shift = 27

static inline u8 rfic_regs_sx_1_pll_ctrl_2_sx_1_bgren_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void rfic_regs_sx_1_pll_ctrl_2_sx_1_bgren_setf(struct cl_chip *chip, u8 sx1bgren)
{
	ASSERT_ERR_CHIP((((u32)sx1bgren << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR) & ~((u32)0x04000000)) | ((u32)sx1bgren << 26));
}

#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_BGREN .addr_index = 0x00000122, .size_minus_1 = (1 - 1), .shift = 26

static inline u8 rfic_regs_sx_1_pll_ctrl_2_sx_1_clktst_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x03E00000)) >> 21);
}

static inline void rfic_regs_sx_1_pll_ctrl_2_sx_1_clktst_sel_setf(struct cl_chip *chip, u8 sx1clktstsel)
{
	ASSERT_ERR_CHIP((((u32)sx1clktstsel << 21) & ~((u32)0x03E00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR) & ~((u32)0x03E00000)) | ((u32)sx1clktstsel << 21));
}

#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_CLKTST_SEL .addr_index = 0x00000122, .size_minus_1 = (5 - 1), .shift = 21

static inline u8 rfic_regs_sx_1_pll_ctrl_2_sx_1_clktsten_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void rfic_regs_sx_1_pll_ctrl_2_sx_1_clktsten_setf(struct cl_chip *chip, u8 sx1clktsten)
{
	ASSERT_ERR_CHIP((((u32)sx1clktsten << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR) & ~((u32)0x00100000)) | ((u32)sx1clktsten << 20));
}

#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_CLKTSTEN .addr_index = 0x00000122, .size_minus_1 = (1 - 1), .shift = 20

static inline u8 rfic_regs_sx_1_pll_ctrl_2_sx_1_lpf_r_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x000F8000)) >> 15);
}

static inline void rfic_regs_sx_1_pll_ctrl_2_sx_1_lpf_r_2_setf(struct cl_chip *chip, u8 sx1lpfr2)
{
	ASSERT_ERR_CHIP((((u32)sx1lpfr2 << 15) & ~((u32)0x000F8000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR) & ~((u32)0x000F8000)) | ((u32)sx1lpfr2 << 15));
}

#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_R_2 .addr_index = 0x00000122, .size_minus_1 = (5 - 1), .shift = 15

static inline u8 rfic_regs_sx_1_pll_ctrl_2_sx_1_lpf_dcselh_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void rfic_regs_sx_1_pll_ctrl_2_sx_1_lpf_dcselh_setf(struct cl_chip *chip, u8 sx1lpfdcselh)
{
	ASSERT_ERR_CHIP((((u32)sx1lpfdcselh << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR) & ~((u32)0x00004000)) | ((u32)sx1lpfdcselh << 14));
}

#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_DCSELH .addr_index = 0x00000122, .size_minus_1 = (1 - 1), .shift = 14

static inline u8 rfic_regs_sx_1_pll_ctrl_2_sx_1_lpf_cmpen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void rfic_regs_sx_1_pll_ctrl_2_sx_1_lpf_cmpen_setf(struct cl_chip *chip, u8 sx1lpfcmpen)
{
	ASSERT_ERR_CHIP((((u32)sx1lpfcmpen << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR) & ~((u32)0x00002000)) | ((u32)sx1lpfcmpen << 13));
}

#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_CMPEN .addr_index = 0x00000122, .size_minus_1 = (1 - 1), .shift = 13

static inline u8 rfic_regs_sx_1_pll_ctrl_2_sx_1_lpf_caltst_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void rfic_regs_sx_1_pll_ctrl_2_sx_1_lpf_caltst_setf(struct cl_chip *chip, u8 sx1lpfcaltst)
{
	ASSERT_ERR_CHIP((((u32)sx1lpfcaltst << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR) & ~((u32)0x00001000)) | ((u32)sx1lpfcaltst << 12));
}

#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_CALTST .addr_index = 0x00000122, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_sx_1_pll_ctrl_2_sx_1_lpf_selh_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000E00)) >> 9);
}

static inline void rfic_regs_sx_1_pll_ctrl_2_sx_1_lpf_selh_setf(struct cl_chip *chip, u8 sx1lpfselh)
{
	ASSERT_ERR_CHIP((((u32)sx1lpfselh << 9) & ~((u32)0x00000E00)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR) & ~((u32)0x00000E00)) | ((u32)sx1lpfselh << 9));
}

#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_SELH .addr_index = 0x00000122, .size_minus_1 = (3 - 1), .shift = 9

static inline u8 rfic_regs_sx_1_pll_ctrl_2_sx_1_lpf_sell_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x000001C0)) >> 6);
}

static inline void rfic_regs_sx_1_pll_ctrl_2_sx_1_lpf_sell_setf(struct cl_chip *chip, u8 sx1lpfsell)
{
	ASSERT_ERR_CHIP((((u32)sx1lpfsell << 6) & ~((u32)0x000001C0)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR) & ~((u32)0x000001C0)) | ((u32)sx1lpfsell << 6));
}

#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_SELL .addr_index = 0x00000122, .size_minus_1 = (3 - 1), .shift = 6

static inline u8 rfic_regs_sx_1_pll_ctrl_2_sx_1_lpf_c_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000038)) >> 3);
}

static inline void rfic_regs_sx_1_pll_ctrl_2_sx_1_lpf_c_1_setf(struct cl_chip *chip, u8 sx1lpfc1)
{
	ASSERT_ERR_CHIP((((u32)sx1lpfc1 << 3) & ~((u32)0x00000038)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR) & ~((u32)0x00000038)) | ((u32)sx1lpfc1 << 3));
}

#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_C_1 .addr_index = 0x00000122, .size_minus_1 = (3 - 1), .shift = 3

static inline u8 rfic_regs_sx_1_pll_ctrl_2_sx_1_lpf_c_34_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void rfic_regs_sx_1_pll_ctrl_2_sx_1_lpf_c_34_setf(struct cl_chip *chip, u8 sx1lpfc34)
{
	ASSERT_ERR_CHIP((((u32)sx1lpfc34 << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_2_ADDR) & ~((u32)0x00000007)) | ((u32)sx1lpfc34 << 0));
}

#define RFIC_REGS_SX_1_PLL_CTRL_2_SX_1_LPF_C_34 .addr_index = 0x00000122, .size_minus_1 = (3 - 1), .shift = 0

/**
 * @brief SX_1_PLL_CTRL_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SX1_soft_rstn             00000001
 *    30    SX1_freq_cfg_sel          00000000
 *    29    SX1_fsm_pfd_dnsel_man     00000000
 *    28:08 SX1_div_nfrac             0x00000000
 *    07:00 SX1_div_int               0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_1_PLL_CTRL_3_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000048C)
#define RFIC_REGS_SX_1_PLL_CTRL_3_OFFSET      0x0000048C
#define RFIC_REGS_SX_1_PLL_CTRL_3_INDEX       0x00000123
#define RFIC_REGS_SX_1_PLL_CTRL_3_RESET       0x80000000

static inline u32 rfic_regs_sx_1_pll_ctrl_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR);
}

static inline void rfic_regs_sx_1_pll_ctrl_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR, value);
}

#define RFIC_REGS_SX_1_PLL_CTRL_3 .addr_index = 0x00000123, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_SOFT_RSTN_BIT    ((u32)0x80000000)
#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_SOFT_RSTN_POS    31
#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_FREQ_CFG_SEL_BIT    ((u32)0x40000000)
#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_FREQ_CFG_SEL_POS    30
#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_FSM_PFD_DNSEL_MAN_BIT    ((u32)0x20000000)
#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_FSM_PFD_DNSEL_MAN_POS    29
#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_DIV_NFRAC_MASK    ((u32)0x1FFFFF00)
#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_DIV_NFRAC_LSB    8
#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_DIV_NFRAC_WIDTH    ((u32)0x00000015)
#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_DIV_INT_MASK    ((u32)0x000000FF)
#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_DIV_INT_LSB    0
#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_DIV_INT_WIDTH    ((u32)0x00000008)

#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_SOFT_RSTN_RST    0x00000001
#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_FREQ_CFG_SEL_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_FSM_PFD_DNSEL_MAN_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_DIV_NFRAC_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_DIV_INT_RST    0x00000000

static inline void rfic_regs_sx_1_pll_ctrl_3_pack(struct cl_chip *chip, u8 sx1_soft_rstn, u8 sx1_freq_cfg_sel, u8 sx1_fsm_pfd_dnsel_man, u32 sx1_div_nfrac, u8 sx1_div_int)
{
	ASSERT_ERR_CHIP((((u32)sx1_soft_rstn << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_freq_cfg_sel << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_pfd_dnsel_man << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_div_nfrac << 8) & ~((u32)0x1FFFFF00)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_div_int << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR, ((u32)sx1_soft_rstn << 31) | ((u32)sx1_freq_cfg_sel << 30) | ((u32)sx1_fsm_pfd_dnsel_man << 29) | ((u32)sx1_div_nfrac << 8) | ((u32)sx1_div_int << 0));
}

static inline void rfic_regs_sx_1_pll_ctrl_3_unpack(struct cl_chip *chip, u8 *sx1_soft_rstn, u8 *sx1_freq_cfg_sel, u8 *sx1_fsm_pfd_dnsel_man, u32 *sx1_div_nfrac, u8 *sx1_div_int)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR);

	*sx1_soft_rstn = (local_val & ((u32)0x80000000)) >> 31;
	*sx1_freq_cfg_sel = (local_val & ((u32)0x40000000)) >> 30;
	*sx1_fsm_pfd_dnsel_man = (local_val & ((u32)0x20000000)) >> 29;
	*sx1_div_nfrac = (local_val & ((u32)0x1FFFFF00)) >> 8;
	*sx1_div_int = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 rfic_regs_sx_1_pll_ctrl_3_sx_1_soft_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void rfic_regs_sx_1_pll_ctrl_3_sx_1_soft_rstn_setf(struct cl_chip *chip, u8 sx1softrstn)
{
	ASSERT_ERR_CHIP((((u32)sx1softrstn << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR) & ~((u32)0x80000000)) | ((u32)sx1softrstn << 31));
}

#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_SOFT_RSTN .addr_index = 0x00000123, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_sx_1_pll_ctrl_3_sx_1_freq_cfg_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void rfic_regs_sx_1_pll_ctrl_3_sx_1_freq_cfg_sel_setf(struct cl_chip *chip, u8 sx1freqcfgsel)
{
	ASSERT_ERR_CHIP((((u32)sx1freqcfgsel << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR) & ~((u32)0x40000000)) | ((u32)sx1freqcfgsel << 30));
}

#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_FREQ_CFG_SEL .addr_index = 0x00000123, .size_minus_1 = (1 - 1), .shift = 30

static inline u8 rfic_regs_sx_1_pll_ctrl_3_sx_1_fsm_pfd_dnsel_man_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void rfic_regs_sx_1_pll_ctrl_3_sx_1_fsm_pfd_dnsel_man_setf(struct cl_chip *chip, u8 sx1fsmpfddnselman)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmpfddnselman << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR) & ~((u32)0x20000000)) | ((u32)sx1fsmpfddnselman << 29));
}

#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_FSM_PFD_DNSEL_MAN .addr_index = 0x00000123, .size_minus_1 = (1 - 1), .shift = 29

static inline u32 rfic_regs_sx_1_pll_ctrl_3_sx_1_div_nfrac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR);

	return (u32)((local_val & ((u32)0x1FFFFF00)) >> 8);
}

static inline void rfic_regs_sx_1_pll_ctrl_3_sx_1_div_nfrac_setf(struct cl_chip *chip, u32 sx1divnfrac)
{
	ASSERT_ERR_CHIP((((u32)sx1divnfrac << 8) & ~((u32)0x1FFFFF00)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR) & ~((u32)0x1FFFFF00)) | ((u32)sx1divnfrac << 8));
}

#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_DIV_NFRAC .addr_index = 0x00000123, .size_minus_1 = (21 - 1), .shift = 8

static inline u8 rfic_regs_sx_1_pll_ctrl_3_sx_1_div_int_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void rfic_regs_sx_1_pll_ctrl_3_sx_1_div_int_setf(struct cl_chip *chip, u8 sx1divint)
{
	ASSERT_ERR_CHIP((((u32)sx1divint << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_3_ADDR) & ~((u32)0x000000FF)) | ((u32)sx1divint << 0));
}

#define RFIC_REGS_SX_1_PLL_CTRL_3_SX_1_DIV_INT .addr_index = 0x00000123, .size_minus_1 = (8 - 1), .shift = 0

/**
 * @brief SX_1_PLL_CTRL_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21:20 SX1_vco_sel_cal_max_ftune_offset 0x00000000
 *    19:18 SX1_div_ldo_sel           0x00000000
 *    17    SX1_div_ldo_vref_sel      00000000
 *    16    SX1_pfd_dnsel             00000000
 *    15:04 SX1_sdm_lfsr_init_state   0x000004b2
 *    03:02 SX1_vco_sel               0x00000000
 *    01    SX1_sdm_lfsr_ld           00000000
 *    00    SX1_fdiv_sel              00000000
 * </pre>
 */
#define RFIC_REGS_SX_1_PLL_CTRL_4_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000490)
#define RFIC_REGS_SX_1_PLL_CTRL_4_OFFSET      0x00000490
#define RFIC_REGS_SX_1_PLL_CTRL_4_INDEX       0x00000124
#define RFIC_REGS_SX_1_PLL_CTRL_4_RESET       0x00004B20

static inline u32 rfic_regs_sx_1_pll_ctrl_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR);
}

static inline void rfic_regs_sx_1_pll_ctrl_4_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR, value);
}

#define RFIC_REGS_SX_1_PLL_CTRL_4 .addr_index = 0x00000124, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_VCO_SEL_CAL_MAX_FTUNE_OFFSET_MASK    ((u32)0x00300000)
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_VCO_SEL_CAL_MAX_FTUNE_OFFSET_LSB    20
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_VCO_SEL_CAL_MAX_FTUNE_OFFSET_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_DIV_LDO_SEL_MASK    ((u32)0x000C0000)
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_DIV_LDO_SEL_LSB    18
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_DIV_LDO_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_DIV_LDO_VREF_SEL_BIT    ((u32)0x00020000)
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_DIV_LDO_VREF_SEL_POS    17
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_PFD_DNSEL_BIT    ((u32)0x00010000)
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_PFD_DNSEL_POS    16
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_SDM_LFSR_INIT_STATE_MASK    ((u32)0x0000FFF0)
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_SDM_LFSR_INIT_STATE_LSB    4
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_SDM_LFSR_INIT_STATE_WIDTH    ((u32)0x0000000C)
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_VCO_SEL_MASK    ((u32)0x0000000C)
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_VCO_SEL_LSB    2
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_VCO_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_SDM_LFSR_LD_BIT    ((u32)0x00000002)
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_SDM_LFSR_LD_POS    1
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_FDIV_SEL_BIT    ((u32)0x00000001)
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_FDIV_SEL_POS    0

#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_VCO_SEL_CAL_MAX_FTUNE_OFFSET_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_DIV_LDO_SEL_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_DIV_LDO_VREF_SEL_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_PFD_DNSEL_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_SDM_LFSR_INIT_STATE_RST    0x000004b2
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_VCO_SEL_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_SDM_LFSR_LD_RST    0x00000000
#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_FDIV_SEL_RST    0x00000000

static inline void rfic_regs_sx_1_pll_ctrl_4_pack(struct cl_chip *chip, u8 sx1_vco_sel_cal_max_ftune_offset, u8 sx1_div_ldo_sel, u8 sx1_div_ldo_vref_sel, u8 sx1_pfd_dnsel, u16 sx1_sdm_lfsr_init_state, u8 sx1_vco_sel, u8 sx1_sdm_lfsr_ld, u8 sx1_fdiv_sel)
{
	ASSERT_ERR_CHIP((((u32)sx1_vco_sel_cal_max_ftune_offset << 20) & ~((u32)0x00300000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_div_ldo_sel << 18) & ~((u32)0x000C0000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_div_ldo_vref_sel << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_pfd_dnsel << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_sdm_lfsr_init_state << 4) & ~((u32)0x0000FFF0)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_vco_sel << 2) & ~((u32)0x0000000C)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_sdm_lfsr_ld << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fdiv_sel << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR, ((u32)sx1_vco_sel_cal_max_ftune_offset << 20) | ((u32)sx1_div_ldo_sel << 18) | ((u32)sx1_div_ldo_vref_sel << 17) | ((u32)sx1_pfd_dnsel << 16) | ((u32)sx1_sdm_lfsr_init_state << 4) | ((u32)sx1_vco_sel << 2) | ((u32)sx1_sdm_lfsr_ld << 1) | ((u32)sx1_fdiv_sel << 0));
}

static inline void rfic_regs_sx_1_pll_ctrl_4_unpack(struct cl_chip *chip, u8 *sx1_vco_sel_cal_max_ftune_offset, u8 *sx1_div_ldo_sel, u8 *sx1_div_ldo_vref_sel, u8 *sx1_pfd_dnsel, u16 *sx1_sdm_lfsr_init_state, u8 *sx1_vco_sel, u8 *sx1_sdm_lfsr_ld, u8 *sx1_fdiv_sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR);

	*sx1_vco_sel_cal_max_ftune_offset = (local_val & ((u32)0x00300000)) >> 20;
	*sx1_div_ldo_sel = (local_val & ((u32)0x000C0000)) >> 18;
	*sx1_div_ldo_vref_sel = (local_val & ((u32)0x00020000)) >> 17;
	*sx1_pfd_dnsel = (local_val & ((u32)0x00010000)) >> 16;
	*sx1_sdm_lfsr_init_state = (local_val & ((u32)0x0000FFF0)) >> 4;
	*sx1_vco_sel = (local_val & ((u32)0x0000000C)) >> 2;
	*sx1_sdm_lfsr_ld = (local_val & ((u32)0x00000002)) >> 1;
	*sx1_fdiv_sel = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_sx_1_pll_ctrl_4_sx_1_vco_sel_cal_max_ftune_offset_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x00300000)) >> 20);
}

static inline void rfic_regs_sx_1_pll_ctrl_4_sx_1_vco_sel_cal_max_ftune_offset_setf(struct cl_chip *chip, u8 sx1vcoselcalmaxftuneoffset)
{
	ASSERT_ERR_CHIP((((u32)sx1vcoselcalmaxftuneoffset << 20) & ~((u32)0x00300000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR) & ~((u32)0x00300000)) | ((u32)sx1vcoselcalmaxftuneoffset << 20));
}

#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_VCO_SEL_CAL_MAX_FTUNE_OFFSET .addr_index = 0x00000124, .size_minus_1 = (2 - 1), .shift = 20

static inline u8 rfic_regs_sx_1_pll_ctrl_4_sx_1_div_ldo_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x000C0000)) >> 18);
}

static inline void rfic_regs_sx_1_pll_ctrl_4_sx_1_div_ldo_sel_setf(struct cl_chip *chip, u8 sx1divldosel)
{
	ASSERT_ERR_CHIP((((u32)sx1divldosel << 18) & ~((u32)0x000C0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR) & ~((u32)0x000C0000)) | ((u32)sx1divldosel << 18));
}

#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_DIV_LDO_SEL .addr_index = 0x00000124, .size_minus_1 = (2 - 1), .shift = 18

static inline u8 rfic_regs_sx_1_pll_ctrl_4_sx_1_div_ldo_vref_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_sx_1_pll_ctrl_4_sx_1_div_ldo_vref_sel_setf(struct cl_chip *chip, u8 sx1divldovrefsel)
{
	ASSERT_ERR_CHIP((((u32)sx1divldovrefsel << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR) & ~((u32)0x00020000)) | ((u32)sx1divldovrefsel << 17));
}

#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_DIV_LDO_VREF_SEL .addr_index = 0x00000124, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_sx_1_pll_ctrl_4_sx_1_pfd_dnsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void rfic_regs_sx_1_pll_ctrl_4_sx_1_pfd_dnsel_setf(struct cl_chip *chip, u8 sx1pfddnsel)
{
	ASSERT_ERR_CHIP((((u32)sx1pfddnsel << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR) & ~((u32)0x00010000)) | ((u32)sx1pfddnsel << 16));
}

#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_PFD_DNSEL .addr_index = 0x00000124, .size_minus_1 = (1 - 1), .shift = 16

static inline u16 rfic_regs_sx_1_pll_ctrl_4_sx_1_sdm_lfsr_init_state_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR);

	return (u16)((local_val & ((u32)0x0000FFF0)) >> 4);
}

static inline void rfic_regs_sx_1_pll_ctrl_4_sx_1_sdm_lfsr_init_state_setf(struct cl_chip *chip, u16 sx1sdmlfsrinitstate)
{
	ASSERT_ERR_CHIP((((u32)sx1sdmlfsrinitstate << 4) & ~((u32)0x0000FFF0)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR) & ~((u32)0x0000FFF0)) | ((u32)sx1sdmlfsrinitstate << 4));
}

#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_SDM_LFSR_INIT_STATE .addr_index = 0x00000124, .size_minus_1 = (12 - 1), .shift = 4

static inline u8 rfic_regs_sx_1_pll_ctrl_4_sx_1_vco_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x0000000C)) >> 2);
}

static inline void rfic_regs_sx_1_pll_ctrl_4_sx_1_vco_sel_setf(struct cl_chip *chip, u8 sx1vcosel)
{
	ASSERT_ERR_CHIP((((u32)sx1vcosel << 2) & ~((u32)0x0000000C)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR) & ~((u32)0x0000000C)) | ((u32)sx1vcosel << 2));
}

#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_VCO_SEL .addr_index = 0x00000124, .size_minus_1 = (2 - 1), .shift = 2

static inline u8 rfic_regs_sx_1_pll_ctrl_4_sx_1_sdm_lfsr_ld_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_sx_1_pll_ctrl_4_sx_1_sdm_lfsr_ld_setf(struct cl_chip *chip, u8 sx1sdmlfsrld)
{
	ASSERT_ERR_CHIP((((u32)sx1sdmlfsrld << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR) & ~((u32)0x00000002)) | ((u32)sx1sdmlfsrld << 1));
}

#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_SDM_LFSR_LD .addr_index = 0x00000124, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_sx_1_pll_ctrl_4_sx_1_fdiv_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_sx_1_pll_ctrl_4_sx_1_fdiv_sel_setf(struct cl_chip *chip, u8 sx1fdivsel)
{
	ASSERT_ERR_CHIP((((u32)sx1fdivsel << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_4_ADDR) & ~((u32)0x00000001)) | ((u32)sx1fdivsel << 0));
}

#define RFIC_REGS_SX_1_PLL_CTRL_4_SX_1_FDIV_SEL .addr_index = 0x00000124, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief SX_1_PLL_CTRL_5 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    20:00 SX1_alt_div_nfrac         0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_1_PLL_CTRL_5_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000494)
#define RFIC_REGS_SX_1_PLL_CTRL_5_OFFSET      0x00000494
#define RFIC_REGS_SX_1_PLL_CTRL_5_INDEX       0x00000125
#define RFIC_REGS_SX_1_PLL_CTRL_5_RESET       0x00000000

static inline u32 rfic_regs_sx_1_pll_ctrl_5_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_5_ADDR);
}

static inline void rfic_regs_sx_1_pll_ctrl_5_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_5_ADDR, value);
}

#define RFIC_REGS_SX_1_PLL_CTRL_5 .addr_index = 0x00000125, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_PLL_CTRL_5_SX_1_ALT_DIV_NFRAC_MASK    ((u32)0x001FFFFF)
#define RFIC_REGS_SX_1_PLL_CTRL_5_SX_1_ALT_DIV_NFRAC_LSB    0
#define RFIC_REGS_SX_1_PLL_CTRL_5_SX_1_ALT_DIV_NFRAC_WIDTH    ((u32)0x00000015)

#define RFIC_REGS_SX_1_PLL_CTRL_5_SX_1_ALT_DIV_NFRAC_RST    0x00000000

static inline u32 rfic_regs_sx_1_pll_ctrl_5_sx_1_alt_div_nfrac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_PLL_CTRL_5_ADDR);

	return (u32)(local_val >> 0);
}

static inline void rfic_regs_sx_1_pll_ctrl_5_sx_1_alt_div_nfrac_setf(struct cl_chip *chip, u32 sx1altdivnfrac)
{
	ASSERT_ERR_CHIP((((u32)sx1altdivnfrac << 0) & ~((u32)0x001FFFFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_PLL_CTRL_5_ADDR, (u32)sx1altdivnfrac << 0);
}

#define RFIC_REGS_SX_1_PLL_CTRL_5_SX_1_ALT_DIV_NFRAC .addr_index = 0x00000125, .size_minus_1 = (21 - 1), .shift = 0

/**
 * @brief SX_1_FSM_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 SX1_fsm_freq_meas_dur     0x00000000
 *    27:10 SX1_fsm_freq_meas_trgt    0x00000000
 *    09:08 SX1_fsm_lockdet_acc       0x00000000
 *    07:06 SX1_fsm_ld_avgset         0x00000000
 *    05:04 SX1_fsm_lbw_sel           0x00000000
 *    03:02 SX1_fsm_freq_update_per   0x00000000
 *    01    SX1_fsm_cal_clk_off_lock  00000000
 *    00    SX1_fsm_rstn              00000001
 * </pre>
 */
#define RFIC_REGS_SX_1_FSM_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000498)
#define RFIC_REGS_SX_1_FSM_CTRL_0_OFFSET      0x00000498
#define RFIC_REGS_SX_1_FSM_CTRL_0_INDEX       0x00000126
#define RFIC_REGS_SX_1_FSM_CTRL_0_RESET       0x00000001

static inline u32 rfic_regs_sx_1_fsm_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR);
}

static inline void rfic_regs_sx_1_fsm_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR, value);
}

#define RFIC_REGS_SX_1_FSM_CTRL_0 .addr_index = 0x00000126, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_FREQ_MEAS_DUR_MASK    ((u32)0xF0000000)
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_FREQ_MEAS_DUR_LSB    28
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_FREQ_MEAS_DUR_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_FREQ_MEAS_TRGT_MASK    ((u32)0x0FFFFC00)
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_FREQ_MEAS_TRGT_LSB    10
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_FREQ_MEAS_TRGT_WIDTH    ((u32)0x00000012)
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_LOCKDET_ACC_MASK    ((u32)0x00000300)
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_LOCKDET_ACC_LSB    8
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_LOCKDET_ACC_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_LD_AVGSET_MASK    ((u32)0x000000C0)
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_LD_AVGSET_LSB    6
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_LD_AVGSET_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_LBW_SEL_MASK    ((u32)0x00000030)
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_LBW_SEL_LSB    4
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_LBW_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_FREQ_UPDATE_PER_MASK    ((u32)0x0000000C)
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_FREQ_UPDATE_PER_LSB    2
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_FREQ_UPDATE_PER_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_CAL_CLK_OFF_LOCK_BIT    ((u32)0x00000002)
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_CAL_CLK_OFF_LOCK_POS    1
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_RSTN_BIT    ((u32)0x00000001)
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_RSTN_POS    0

#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_FREQ_MEAS_DUR_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_FREQ_MEAS_TRGT_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_LOCKDET_ACC_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_LD_AVGSET_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_LBW_SEL_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_FREQ_UPDATE_PER_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_CAL_CLK_OFF_LOCK_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_RSTN_RST    0x00000001

static inline void rfic_regs_sx_1_fsm_ctrl_0_pack(struct cl_chip *chip, u8 sx1_fsm_freq_meas_dur, u32 sx1_fsm_freq_meas_trgt, u8 sx1_fsm_lockdet_acc, u8 sx1_fsm_ld_avgset, u8 sx1_fsm_lbw_sel, u8 sx1_fsm_freq_update_per, u8 sx1_fsm_cal_clk_off_lock, u8 sx1_fsm_rstn)
{
	ASSERT_ERR_CHIP((((u32)sx1_fsm_freq_meas_dur << 28) & ~((u32)0xF0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_freq_meas_trgt << 10) & ~((u32)0x0FFFFC00)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_lockdet_acc << 8) & ~((u32)0x00000300)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_ld_avgset << 6) & ~((u32)0x000000C0)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_lbw_sel << 4) & ~((u32)0x00000030)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_freq_update_per << 2) & ~((u32)0x0000000C)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_cal_clk_off_lock << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_rstn << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR, ((u32)sx1_fsm_freq_meas_dur << 28) | ((u32)sx1_fsm_freq_meas_trgt << 10) | ((u32)sx1_fsm_lockdet_acc << 8) | ((u32)sx1_fsm_ld_avgset << 6) | ((u32)sx1_fsm_lbw_sel << 4) | ((u32)sx1_fsm_freq_update_per << 2) | ((u32)sx1_fsm_cal_clk_off_lock << 1) | ((u32)sx1_fsm_rstn << 0));
}

static inline void rfic_regs_sx_1_fsm_ctrl_0_unpack(struct cl_chip *chip, u8 *sx1_fsm_freq_meas_dur, u32 *sx1_fsm_freq_meas_trgt, u8 *sx1_fsm_lockdet_acc, u8 *sx1_fsm_ld_avgset, u8 *sx1_fsm_lbw_sel, u8 *sx1_fsm_freq_update_per, u8 *sx1_fsm_cal_clk_off_lock, u8 *sx1_fsm_rstn)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR);

	*sx1_fsm_freq_meas_dur = (local_val & ((u32)0xF0000000)) >> 28;
	*sx1_fsm_freq_meas_trgt = (local_val & ((u32)0x0FFFFC00)) >> 10;
	*sx1_fsm_lockdet_acc = (local_val & ((u32)0x00000300)) >> 8;
	*sx1_fsm_ld_avgset = (local_val & ((u32)0x000000C0)) >> 6;
	*sx1_fsm_lbw_sel = (local_val & ((u32)0x00000030)) >> 4;
	*sx1_fsm_freq_update_per = (local_val & ((u32)0x0000000C)) >> 2;
	*sx1_fsm_cal_clk_off_lock = (local_val & ((u32)0x00000002)) >> 1;
	*sx1_fsm_rstn = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_sx_1_fsm_ctrl_0_sx_1_fsm_freq_meas_dur_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0xF0000000)) >> 28);
}

static inline void rfic_regs_sx_1_fsm_ctrl_0_sx_1_fsm_freq_meas_dur_setf(struct cl_chip *chip, u8 sx1fsmfreqmeasdur)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmfreqmeasdur << 28) & ~((u32)0xF0000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR) & ~((u32)0xF0000000)) | ((u32)sx1fsmfreqmeasdur << 28));
}

#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_FREQ_MEAS_DUR .addr_index = 0x00000126, .size_minus_1 = (4 - 1), .shift = 28

static inline u32 rfic_regs_sx_1_fsm_ctrl_0_sx_1_fsm_freq_meas_trgt_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR);

	return (u32)((local_val & ((u32)0x0FFFFC00)) >> 10);
}

static inline void rfic_regs_sx_1_fsm_ctrl_0_sx_1_fsm_freq_meas_trgt_setf(struct cl_chip *chip, u32 sx1fsmfreqmeastrgt)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmfreqmeastrgt << 10) & ~((u32)0x0FFFFC00)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR) & ~((u32)0x0FFFFC00)) | ((u32)sx1fsmfreqmeastrgt << 10));
}

#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_FREQ_MEAS_TRGT .addr_index = 0x00000126, .size_minus_1 = (18 - 1), .shift = 10

static inline u8 rfic_regs_sx_1_fsm_ctrl_0_sx_1_fsm_lockdet_acc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000300)) >> 8);
}

static inline void rfic_regs_sx_1_fsm_ctrl_0_sx_1_fsm_lockdet_acc_setf(struct cl_chip *chip, u8 sx1fsmlockdetacc)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmlockdetacc << 8) & ~((u32)0x00000300)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR) & ~((u32)0x00000300)) | ((u32)sx1fsmlockdetacc << 8));
}

#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_LOCKDET_ACC .addr_index = 0x00000126, .size_minus_1 = (2 - 1), .shift = 8

static inline u8 rfic_regs_sx_1_fsm_ctrl_0_sx_1_fsm_ld_avgset_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x000000C0)) >> 6);
}

static inline void rfic_regs_sx_1_fsm_ctrl_0_sx_1_fsm_ld_avgset_setf(struct cl_chip *chip, u8 sx1fsmldavgset)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmldavgset << 6) & ~((u32)0x000000C0)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR) & ~((u32)0x000000C0)) | ((u32)sx1fsmldavgset << 6));
}

#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_LD_AVGSET .addr_index = 0x00000126, .size_minus_1 = (2 - 1), .shift = 6

static inline u8 rfic_regs_sx_1_fsm_ctrl_0_sx_1_fsm_lbw_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000030)) >> 4);
}

static inline void rfic_regs_sx_1_fsm_ctrl_0_sx_1_fsm_lbw_sel_setf(struct cl_chip *chip, u8 sx1fsmlbwsel)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmlbwsel << 4) & ~((u32)0x00000030)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR) & ~((u32)0x00000030)) | ((u32)sx1fsmlbwsel << 4));
}

#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_LBW_SEL .addr_index = 0x00000126, .size_minus_1 = (2 - 1), .shift = 4

static inline u8 rfic_regs_sx_1_fsm_ctrl_0_sx_1_fsm_freq_update_per_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000000C)) >> 2);
}

static inline void rfic_regs_sx_1_fsm_ctrl_0_sx_1_fsm_freq_update_per_setf(struct cl_chip *chip, u8 sx1fsmfrequpdateper)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmfrequpdateper << 2) & ~((u32)0x0000000C)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR) & ~((u32)0x0000000C)) | ((u32)sx1fsmfrequpdateper << 2));
}

#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_FREQ_UPDATE_PER .addr_index = 0x00000126, .size_minus_1 = (2 - 1), .shift = 2

static inline u8 rfic_regs_sx_1_fsm_ctrl_0_sx_1_fsm_cal_clk_off_lock_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_sx_1_fsm_ctrl_0_sx_1_fsm_cal_clk_off_lock_setf(struct cl_chip *chip, u8 sx1fsmcalclkofflock)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmcalclkofflock << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR) & ~((u32)0x00000002)) | ((u32)sx1fsmcalclkofflock << 1));
}

#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_CAL_CLK_OFF_LOCK .addr_index = 0x00000126, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_sx_1_fsm_ctrl_0_sx_1_fsm_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_sx_1_fsm_ctrl_0_sx_1_fsm_rstn_setf(struct cl_chip *chip, u8 sx1fsmrstn)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmrstn << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)sx1fsmrstn << 0));
}

#define RFIC_REGS_SX_1_FSM_CTRL_0_SX_1_FSM_RSTN .addr_index = 0x00000126, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief SX_1_FSM_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27    SX1_fsm_lpf_vctrl_low_flag_clear 00000000
 *    26    SX1_fsm_lpf_vctrl_high_flag_clear 00000000
 *    25    SX1_fsm_use_ext_vco_sel_en 00000000
 *    24    SX1_fsm_skip_vco_sel_cal  00000000
 *    23    SX1_fsm_cal_standby       00000000
 *    22:21 SX1_fsm_amp_flt_nsamples  0x00000000
 *    20:19 SX1_fsm_ampl_update_per   0x00000000
 *    18    SX1_fsm_use_ext_cp_cur_sel_en 00000000
 *    17    SX1_fsm_use_ext_lpf_r2_en 00000000
 *    16    SX1_fsm_use_ext_lpf_c1_en 00000000
 *    15    SX1_fsm_use_ext_lpf_c34_en 00000000
 *    14    SX1_fsm_use_ext_vco_cur_sel_en 00000000
 *    13    SX1_fsm_use_ext_ftun_en   00000000
 *    12    SX1_fsm_skip_ampcal       00000000
 *    11    SX1_fsm_skip_lbwcal       00000000
 *    10    SX1_fsm_skip_freqcal      00000000
 *    09    SX1_fsm_power_on_seq_start 00000000
 *    08    SX1_fsm_bypass            00000000
 *    07    SX1_fsm_lock_det_en       00000001
 *    06    SX1_fsm_lock_detect_sticky_clear 00000000
 *    05    SX1_fsm_fast_power_on_seq_en 00000000
 *    04    SX1_fsm_cal_en            00000000
 *    03    SX1_spare_2               00000000
 *    02:00 SX1_fsm_kvco_meas_wait_time 0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_1_FSM_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000049C)
#define RFIC_REGS_SX_1_FSM_CTRL_1_OFFSET      0x0000049C
#define RFIC_REGS_SX_1_FSM_CTRL_1_INDEX       0x00000127
#define RFIC_REGS_SX_1_FSM_CTRL_1_RESET       0x00000080

static inline u32 rfic_regs_sx_1_fsm_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, value);
}

#define RFIC_REGS_SX_1_FSM_CTRL_1 .addr_index = 0x00000127, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_LPF_VCTRL_LOW_FLAG_CLEAR_BIT    ((u32)0x08000000)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_LPF_VCTRL_LOW_FLAG_CLEAR_POS    27
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_LPF_VCTRL_HIGH_FLAG_CLEAR_BIT    ((u32)0x04000000)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_LPF_VCTRL_HIGH_FLAG_CLEAR_POS    26
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_VCO_SEL_EN_BIT    ((u32)0x02000000)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_VCO_SEL_EN_POS    25
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_SKIP_VCO_SEL_CAL_BIT    ((u32)0x01000000)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_SKIP_VCO_SEL_CAL_POS    24
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_CAL_STANDBY_BIT    ((u32)0x00800000)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_CAL_STANDBY_POS    23
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_AMP_FLT_NSAMPLES_MASK    ((u32)0x00600000)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_AMP_FLT_NSAMPLES_LSB    21
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_AMP_FLT_NSAMPLES_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_AMPL_UPDATE_PER_MASK    ((u32)0x00180000)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_AMPL_UPDATE_PER_LSB    19
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_AMPL_UPDATE_PER_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_CP_CUR_SEL_EN_BIT    ((u32)0x00040000)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_CP_CUR_SEL_EN_POS    18
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_LPF_R_2_EN_BIT    ((u32)0x00020000)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_LPF_R_2_EN_POS    17
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_LPF_C_1_EN_BIT    ((u32)0x00010000)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_LPF_C_1_EN_POS    16
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_LPF_C_34_EN_BIT    ((u32)0x00008000)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_LPF_C_34_EN_POS    15
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_VCO_CUR_SEL_EN_BIT    ((u32)0x00004000)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_VCO_CUR_SEL_EN_POS    14
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_FTUN_EN_BIT    ((u32)0x00002000)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_FTUN_EN_POS    13
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_SKIP_AMPCAL_BIT    ((u32)0x00001000)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_SKIP_AMPCAL_POS    12
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_SKIP_LBWCAL_BIT    ((u32)0x00000800)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_SKIP_LBWCAL_POS    11
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_SKIP_FREQCAL_BIT    ((u32)0x00000400)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_SKIP_FREQCAL_POS    10
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_POWER_ON_SEQ_START_BIT    ((u32)0x00000200)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_POWER_ON_SEQ_START_POS    9
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_BYPASS_BIT    ((u32)0x00000100)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_BYPASS_POS    8
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_LOCK_DET_EN_BIT    ((u32)0x00000080)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_LOCK_DET_EN_POS    7
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_LOCK_DETECT_STICKY_CLEAR_BIT    ((u32)0x00000040)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_LOCK_DETECT_STICKY_CLEAR_POS    6
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_FAST_POWER_ON_SEQ_EN_BIT    ((u32)0x00000020)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_FAST_POWER_ON_SEQ_EN_POS    5
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_CAL_EN_BIT    ((u32)0x00000010)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_CAL_EN_POS    4
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_SPARE_2_BIT    ((u32)0x00000008)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_SPARE_2_POS    3
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_KVCO_MEAS_WAIT_TIME_MASK    ((u32)0x00000007)
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_KVCO_MEAS_WAIT_TIME_LSB    0
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_KVCO_MEAS_WAIT_TIME_WIDTH    ((u32)0x00000003)

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_LPF_VCTRL_LOW_FLAG_CLEAR_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_LPF_VCTRL_HIGH_FLAG_CLEAR_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_VCO_SEL_EN_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_SKIP_VCO_SEL_CAL_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_CAL_STANDBY_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_AMP_FLT_NSAMPLES_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_AMPL_UPDATE_PER_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_CP_CUR_SEL_EN_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_LPF_R_2_EN_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_LPF_C_1_EN_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_LPF_C_34_EN_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_VCO_CUR_SEL_EN_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_FTUN_EN_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_SKIP_AMPCAL_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_SKIP_LBWCAL_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_SKIP_FREQCAL_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_POWER_ON_SEQ_START_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_BYPASS_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_LOCK_DET_EN_RST    0x00000001
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_LOCK_DETECT_STICKY_CLEAR_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_FAST_POWER_ON_SEQ_EN_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_CAL_EN_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_SPARE_2_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_KVCO_MEAS_WAIT_TIME_RST    0x00000000

static inline void rfic_regs_sx_1_fsm_ctrl_1_pack(struct cl_chip *chip, u8 sx1_fsm_lpf_vctrl_low_flag_clear, u8 sx1_fsm_lpf_vctrl_high_flag_clear, u8 sx1_fsm_use_ext_vco_sel_en, u8 sx1_fsm_skip_vco_sel_cal, u8 sx1_fsm_cal_standby, u8 sx1_fsm_amp_flt_nsamples, u8 sx1_fsm_ampl_update_per, u8 sx1_fsm_use_ext_cp_cur_sel_en, u8 sx1_fsm_use_ext_lpf_r2_en, u8 sx1_fsm_use_ext_lpf_c1_en, u8 sx1_fsm_use_ext_lpf_c34_en, u8 sx1_fsm_use_ext_vco_cur_sel_en, u8 sx1_fsm_use_ext_ftun_en, u8 sx1_fsm_skip_ampcal, u8 sx1_fsm_skip_lbwcal, u8 sx1_fsm_skip_freqcal, u8 sx1_fsm_power_on_seq_start, u8 sx1_fsm_bypass, u8 sx1_fsm_lock_det_en, u8 sx1_fsm_lock_detect_sticky_clear, u8 sx1_fsm_fast_power_on_seq_en, u8 sx1_fsm_cal_en, u8 sx1_spare_2, u8 sx1_fsm_kvco_meas_wait_time)
{
	ASSERT_ERR_CHIP((((u32)sx1_fsm_lpf_vctrl_low_flag_clear << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_lpf_vctrl_high_flag_clear << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_use_ext_vco_sel_en << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_skip_vco_sel_cal << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_cal_standby << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_amp_flt_nsamples << 21) & ~((u32)0x00600000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_ampl_update_per << 19) & ~((u32)0x00180000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_use_ext_cp_cur_sel_en << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_use_ext_lpf_r2_en << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_use_ext_lpf_c1_en << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_use_ext_lpf_c34_en << 15) & ~((u32)0x00008000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_use_ext_vco_cur_sel_en << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_use_ext_ftun_en << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_skip_ampcal << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_skip_lbwcal << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_skip_freqcal << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_power_on_seq_start << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_bypass << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_lock_det_en << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_lock_detect_sticky_clear << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_fast_power_on_seq_en << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_cal_en << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_spare_2 << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_fsm_kvco_meas_wait_time << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, ((u32)sx1_fsm_lpf_vctrl_low_flag_clear << 27) | ((u32)sx1_fsm_lpf_vctrl_high_flag_clear << 26) | ((u32)sx1_fsm_use_ext_vco_sel_en << 25) | ((u32)sx1_fsm_skip_vco_sel_cal << 24) | ((u32)sx1_fsm_cal_standby << 23) | ((u32)sx1_fsm_amp_flt_nsamples << 21) | ((u32)sx1_fsm_ampl_update_per << 19) | ((u32)sx1_fsm_use_ext_cp_cur_sel_en << 18) | ((u32)sx1_fsm_use_ext_lpf_r2_en << 17) | ((u32)sx1_fsm_use_ext_lpf_c1_en << 16) | ((u32)sx1_fsm_use_ext_lpf_c34_en << 15) | ((u32)sx1_fsm_use_ext_vco_cur_sel_en << 14) | ((u32)sx1_fsm_use_ext_ftun_en << 13) | ((u32)sx1_fsm_skip_ampcal << 12) | ((u32)sx1_fsm_skip_lbwcal << 11) | ((u32)sx1_fsm_skip_freqcal << 10) | ((u32)sx1_fsm_power_on_seq_start << 9) | ((u32)sx1_fsm_bypass << 8) | ((u32)sx1_fsm_lock_det_en << 7) | ((u32)sx1_fsm_lock_detect_sticky_clear << 6) | ((u32)sx1_fsm_fast_power_on_seq_en << 5) | ((u32)sx1_fsm_cal_en << 4) | ((u32)sx1_spare_2 << 3) | ((u32)sx1_fsm_kvco_meas_wait_time << 0));
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_unpack(struct cl_chip *chip, u8 *sx1_fsm_lpf_vctrl_low_flag_clear, u8 *sx1_fsm_lpf_vctrl_high_flag_clear, u8 *sx1_fsm_use_ext_vco_sel_en, u8 *sx1_fsm_skip_vco_sel_cal, u8 *sx1_fsm_cal_standby, u8 *sx1_fsm_amp_flt_nsamples, u8 *sx1_fsm_ampl_update_per, u8 *sx1_fsm_use_ext_cp_cur_sel_en, u8 *sx1_fsm_use_ext_lpf_r2_en, u8 *sx1_fsm_use_ext_lpf_c1_en, u8 *sx1_fsm_use_ext_lpf_c34_en, u8 *sx1_fsm_use_ext_vco_cur_sel_en, u8 *sx1_fsm_use_ext_ftun_en, u8 *sx1_fsm_skip_ampcal, u8 *sx1_fsm_skip_lbwcal, u8 *sx1_fsm_skip_freqcal, u8 *sx1_fsm_power_on_seq_start, u8 *sx1_fsm_bypass, u8 *sx1_fsm_lock_det_en, u8 *sx1_fsm_lock_detect_sticky_clear, u8 *sx1_fsm_fast_power_on_seq_en, u8 *sx1_fsm_cal_en, u8 *sx1_spare_2, u8 *sx1_fsm_kvco_meas_wait_time)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	*sx1_fsm_lpf_vctrl_low_flag_clear = (local_val & ((u32)0x08000000)) >> 27;
	*sx1_fsm_lpf_vctrl_high_flag_clear = (local_val & ((u32)0x04000000)) >> 26;
	*sx1_fsm_use_ext_vco_sel_en = (local_val & ((u32)0x02000000)) >> 25;
	*sx1_fsm_skip_vco_sel_cal = (local_val & ((u32)0x01000000)) >> 24;
	*sx1_fsm_cal_standby = (local_val & ((u32)0x00800000)) >> 23;
	*sx1_fsm_amp_flt_nsamples = (local_val & ((u32)0x00600000)) >> 21;
	*sx1_fsm_ampl_update_per = (local_val & ((u32)0x00180000)) >> 19;
	*sx1_fsm_use_ext_cp_cur_sel_en = (local_val & ((u32)0x00040000)) >> 18;
	*sx1_fsm_use_ext_lpf_r2_en = (local_val & ((u32)0x00020000)) >> 17;
	*sx1_fsm_use_ext_lpf_c1_en = (local_val & ((u32)0x00010000)) >> 16;
	*sx1_fsm_use_ext_lpf_c34_en = (local_val & ((u32)0x00008000)) >> 15;
	*sx1_fsm_use_ext_vco_cur_sel_en = (local_val & ((u32)0x00004000)) >> 14;
	*sx1_fsm_use_ext_ftun_en = (local_val & ((u32)0x00002000)) >> 13;
	*sx1_fsm_skip_ampcal = (local_val & ((u32)0x00001000)) >> 12;
	*sx1_fsm_skip_lbwcal = (local_val & ((u32)0x00000800)) >> 11;
	*sx1_fsm_skip_freqcal = (local_val & ((u32)0x00000400)) >> 10;
	*sx1_fsm_power_on_seq_start = (local_val & ((u32)0x00000200)) >> 9;
	*sx1_fsm_bypass = (local_val & ((u32)0x00000100)) >> 8;
	*sx1_fsm_lock_det_en = (local_val & ((u32)0x00000080)) >> 7;
	*sx1_fsm_lock_detect_sticky_clear = (local_val & ((u32)0x00000040)) >> 6;
	*sx1_fsm_fast_power_on_seq_en = (local_val & ((u32)0x00000020)) >> 5;
	*sx1_fsm_cal_en = (local_val & ((u32)0x00000010)) >> 4;
	*sx1_spare_2 = (local_val & ((u32)0x00000008)) >> 3;
	*sx1_fsm_kvco_meas_wait_time = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_lpf_vctrl_low_flag_clear_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_lpf_vctrl_low_flag_clear_setf(struct cl_chip *chip, u8 sx1fsmlpfvctrllowflagclear)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmlpfvctrllowflagclear << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x08000000)) | ((u32)sx1fsmlpfvctrllowflagclear << 27));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_LPF_VCTRL_LOW_FLAG_CLEAR .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 27

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_lpf_vctrl_high_flag_clear_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_lpf_vctrl_high_flag_clear_setf(struct cl_chip *chip, u8 sx1fsmlpfvctrlhighflagclear)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmlpfvctrlhighflagclear << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x04000000)) | ((u32)sx1fsmlpfvctrlhighflagclear << 26));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_LPF_VCTRL_HIGH_FLAG_CLEAR .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 26

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_use_ext_vco_sel_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_use_ext_vco_sel_en_setf(struct cl_chip *chip, u8 sx1fsmuseextvcoselen)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmuseextvcoselen << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x02000000)) | ((u32)sx1fsmuseextvcoselen << 25));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_VCO_SEL_EN .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 25

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_skip_vco_sel_cal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_skip_vco_sel_cal_setf(struct cl_chip *chip, u8 sx1fsmskipvcoselcal)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmskipvcoselcal << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x01000000)) | ((u32)sx1fsmskipvcoselcal << 24));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_SKIP_VCO_SEL_CAL .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 24

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_cal_standby_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_cal_standby_setf(struct cl_chip *chip, u8 sx1fsmcalstandby)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmcalstandby << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00800000)) | ((u32)sx1fsmcalstandby << 23));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_CAL_STANDBY .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 23

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_amp_flt_nsamples_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00600000)) >> 21);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_amp_flt_nsamples_setf(struct cl_chip *chip, u8 sx1fsmampfltnsamples)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmampfltnsamples << 21) & ~((u32)0x00600000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00600000)) | ((u32)sx1fsmampfltnsamples << 21));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_AMP_FLT_NSAMPLES .addr_index = 0x00000127, .size_minus_1 = (2 - 1), .shift = 21

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_ampl_update_per_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00180000)) >> 19);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_ampl_update_per_setf(struct cl_chip *chip, u8 sx1fsmamplupdateper)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmamplupdateper << 19) & ~((u32)0x00180000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00180000)) | ((u32)sx1fsmamplupdateper << 19));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_AMPL_UPDATE_PER .addr_index = 0x00000127, .size_minus_1 = (2 - 1), .shift = 19

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_use_ext_cp_cur_sel_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_use_ext_cp_cur_sel_en_setf(struct cl_chip *chip, u8 sx1fsmuseextcpcurselen)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmuseextcpcurselen << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00040000)) | ((u32)sx1fsmuseextcpcurselen << 18));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_CP_CUR_SEL_EN .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_use_ext_lpf_r_2_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_use_ext_lpf_r_2_en_setf(struct cl_chip *chip, u8 sx1fsmuseextlpfr2en)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmuseextlpfr2en << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00020000)) | ((u32)sx1fsmuseextlpfr2en << 17));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_LPF_R_2_EN .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_use_ext_lpf_c_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_use_ext_lpf_c_1_en_setf(struct cl_chip *chip, u8 sx1fsmuseextlpfc1en)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmuseextlpfc1en << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00010000)) | ((u32)sx1fsmuseextlpfc1en << 16));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_LPF_C_1_EN .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 16

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_use_ext_lpf_c_34_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_use_ext_lpf_c_34_en_setf(struct cl_chip *chip, u8 sx1fsmuseextlpfc34en)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmuseextlpfc34en << 15) & ~((u32)0x00008000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00008000)) | ((u32)sx1fsmuseextlpfc34en << 15));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_LPF_C_34_EN .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 15

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_use_ext_vco_cur_sel_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_use_ext_vco_cur_sel_en_setf(struct cl_chip *chip, u8 sx1fsmuseextvcocurselen)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmuseextvcocurselen << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00004000)) | ((u32)sx1fsmuseextvcocurselen << 14));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_VCO_CUR_SEL_EN .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 14

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_use_ext_ftun_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_use_ext_ftun_en_setf(struct cl_chip *chip, u8 sx1fsmuseextftunen)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmuseextftunen << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00002000)) | ((u32)sx1fsmuseextftunen << 13));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_USE_EXT_FTUN_EN .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 13

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_skip_ampcal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_skip_ampcal_setf(struct cl_chip *chip, u8 sx1fsmskipampcal)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmskipampcal << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00001000)) | ((u32)sx1fsmskipampcal << 12));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_SKIP_AMPCAL .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_skip_lbwcal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_skip_lbwcal_setf(struct cl_chip *chip, u8 sx1fsmskiplbwcal)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmskiplbwcal << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00000800)) | ((u32)sx1fsmskiplbwcal << 11));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_SKIP_LBWCAL .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_skip_freqcal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_skip_freqcal_setf(struct cl_chip *chip, u8 sx1fsmskipfreqcal)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmskipfreqcal << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00000400)) | ((u32)sx1fsmskipfreqcal << 10));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_SKIP_FREQCAL .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_power_on_seq_start_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_power_on_seq_start_setf(struct cl_chip *chip, u8 sx1fsmpoweronseqstart)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmpoweronseqstart << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00000200)) | ((u32)sx1fsmpoweronseqstart << 9));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_POWER_ON_SEQ_START .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_bypass_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_bypass_setf(struct cl_chip *chip, u8 sx1fsmbypass)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmbypass << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00000100)) | ((u32)sx1fsmbypass << 8));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_BYPASS .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_lock_det_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_lock_det_en_setf(struct cl_chip *chip, u8 sx1fsmlockdeten)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmlockdeten << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00000080)) | ((u32)sx1fsmlockdeten << 7));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_LOCK_DET_EN .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_lock_detect_sticky_clear_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_lock_detect_sticky_clear_setf(struct cl_chip *chip, u8 sx1fsmlockdetectstickyclear)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmlockdetectstickyclear << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00000040)) | ((u32)sx1fsmlockdetectstickyclear << 6));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_LOCK_DETECT_STICKY_CLEAR .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_fast_power_on_seq_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_fast_power_on_seq_en_setf(struct cl_chip *chip, u8 sx1fsmfastpoweronseqen)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmfastpoweronseqen << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00000020)) | ((u32)sx1fsmfastpoweronseqen << 5));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_FAST_POWER_ON_SEQ_EN .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_cal_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_cal_en_setf(struct cl_chip *chip, u8 sx1fsmcalen)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmcalen << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00000010)) | ((u32)sx1fsmcalen << 4));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_CAL_EN .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 4

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_spare_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_spare_2_setf(struct cl_chip *chip, u8 sx1spare2)
{
	ASSERT_ERR_CHIP((((u32)sx1spare2 << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00000008)) | ((u32)sx1spare2 << 3));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_SPARE_2 .addr_index = 0x00000127, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_kvco_meas_wait_time_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void rfic_regs_sx_1_fsm_ctrl_1_sx_1_fsm_kvco_meas_wait_time_setf(struct cl_chip *chip, u8 sx1fsmkvcomeaswaittime)
{
	ASSERT_ERR_CHIP((((u32)sx1fsmkvcomeaswaittime << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_FSM_CTRL_1_ADDR) & ~((u32)0x00000007)) | ((u32)sx1fsmkvcomeaswaittime << 0));
}

#define RFIC_REGS_SX_1_FSM_CTRL_1_SX_1_FSM_KVCO_MEAS_WAIT_TIME .addr_index = 0x00000127, .size_minus_1 = (3 - 1), .shift = 0

/**
 * @brief SX_1_FSM_OUT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SX1_fsm_calend_ackn       00000000
 *    30:26 SX1_fsm_state_out         0x00000000
 *    25:24 SX1_fsm_cal_cp0_cur_sel_out 0x00000000
 *    23:19 SX1_fsm_cal_lpf_r2        0x00000000
 *    18:16 SX1_fsm_cal_lpf_c1        0x00000000
 *    15:13 SX1_fsm_cal_lpf_c34       0x00000000
 *    12:08 SX1_fsm_cal_vco_cur_sel   0x00000000
 *    07:00 SX1_fsm_cal_vco_ftun      0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_1_FSM_OUT_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000004A0)
#define RFIC_REGS_SX_1_FSM_OUT_1_OFFSET      0x000004A0
#define RFIC_REGS_SX_1_FSM_OUT_1_INDEX       0x00000128
#define RFIC_REGS_SX_1_FSM_OUT_1_RESET       0x00000000

static inline u32 rfic_regs_sx_1_fsm_out_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_1_ADDR);
}

#define RFIC_REGS_SX_1_FSM_OUT_1 .addr_index = 0x00000128, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CALEND_ACKN_BIT    ((u32)0x80000000)
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CALEND_ACKN_POS    31
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_STATE_OUT_MASK    ((u32)0x7C000000)
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_STATE_OUT_LSB    26
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_STATE_OUT_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_CP_0_CUR_SEL_OUT_MASK    ((u32)0x03000000)
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_CP_0_CUR_SEL_OUT_LSB    24
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_CP_0_CUR_SEL_OUT_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_LPF_R_2_MASK    ((u32)0x00F80000)
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_LPF_R_2_LSB    19
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_LPF_R_2_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_LPF_C_1_MASK    ((u32)0x00070000)
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_LPF_C_1_LSB    16
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_LPF_C_1_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_LPF_C_34_MASK    ((u32)0x0000E000)
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_LPF_C_34_LSB    13
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_LPF_C_34_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_VCO_CUR_SEL_MASK    ((u32)0x00001F00)
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_VCO_CUR_SEL_LSB    8
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_VCO_CUR_SEL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_VCO_FTUN_MASK    ((u32)0x000000FF)
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_VCO_FTUN_LSB    0
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_VCO_FTUN_WIDTH    ((u32)0x00000008)

#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CALEND_ACKN_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_STATE_OUT_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_CP_0_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_LPF_R_2_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_LPF_C_1_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_LPF_C_34_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_VCO_CUR_SEL_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_VCO_FTUN_RST    0x00000000

static inline void rfic_regs_sx_1_fsm_out_1_unpack(struct cl_chip *chip, u8 *sx1_fsm_calend_ackn, u8 *sx1_fsm_state_out, u8 *sx1_fsm_cal_cp0_cur_sel_out, u8 *sx1_fsm_cal_lpf_r2, u8 *sx1_fsm_cal_lpf_c1, u8 *sx1_fsm_cal_lpf_c34, u8 *sx1_fsm_cal_vco_cur_sel, u8 *sx1_fsm_cal_vco_ftun)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_1_ADDR);

	*sx1_fsm_calend_ackn = (local_val & ((u32)0x80000000)) >> 31;
	*sx1_fsm_state_out = (local_val & ((u32)0x7C000000)) >> 26;
	*sx1_fsm_cal_cp0_cur_sel_out = (local_val & ((u32)0x03000000)) >> 24;
	*sx1_fsm_cal_lpf_r2 = (local_val & ((u32)0x00F80000)) >> 19;
	*sx1_fsm_cal_lpf_c1 = (local_val & ((u32)0x00070000)) >> 16;
	*sx1_fsm_cal_lpf_c34 = (local_val & ((u32)0x0000E000)) >> 13;
	*sx1_fsm_cal_vco_cur_sel = (local_val & ((u32)0x00001F00)) >> 8;
	*sx1_fsm_cal_vco_ftun = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 rfic_regs_sx_1_fsm_out_1_sx_1_fsm_calend_ackn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_1_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CALEND_ACKN .addr_index = 0x00000128, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_sx_1_fsm_out_1_sx_1_fsm_state_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_1_ADDR);

	return (u8)((local_val & ((u32)0x7C000000)) >> 26);
}

#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_STATE_OUT .addr_index = 0x00000128, .size_minus_1 = (5 - 1), .shift = 26

static inline u8 rfic_regs_sx_1_fsm_out_1_sx_1_fsm_cal_cp_0_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_1_ADDR);

	return (u8)((local_val & ((u32)0x03000000)) >> 24);
}

#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_CP_0_CUR_SEL_OUT .addr_index = 0x00000128, .size_minus_1 = (2 - 1), .shift = 24

static inline u8 rfic_regs_sx_1_fsm_out_1_sx_1_fsm_cal_lpf_r_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_1_ADDR);

	return (u8)((local_val & ((u32)0x00F80000)) >> 19);
}

#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_LPF_R_2 .addr_index = 0x00000128, .size_minus_1 = (5 - 1), .shift = 19

static inline u8 rfic_regs_sx_1_fsm_out_1_sx_1_fsm_cal_lpf_c_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_1_ADDR);

	return (u8)((local_val & ((u32)0x00070000)) >> 16);
}

#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_LPF_C_1 .addr_index = 0x00000128, .size_minus_1 = (3 - 1), .shift = 16

static inline u8 rfic_regs_sx_1_fsm_out_1_sx_1_fsm_cal_lpf_c_34_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_1_ADDR);

	return (u8)((local_val & ((u32)0x0000E000)) >> 13);
}

#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_LPF_C_34 .addr_index = 0x00000128, .size_minus_1 = (3 - 1), .shift = 13

static inline u8 rfic_regs_sx_1_fsm_out_1_sx_1_fsm_cal_vco_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_1_ADDR);

	return (u8)((local_val & ((u32)0x00001F00)) >> 8);
}

#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_VCO_CUR_SEL .addr_index = 0x00000128, .size_minus_1 = (5 - 1), .shift = 8

static inline u8 rfic_regs_sx_1_fsm_out_1_sx_1_fsm_cal_vco_ftun_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_1_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

#define RFIC_REGS_SX_1_FSM_OUT_1_SX_1_FSM_CAL_VCO_FTUN .addr_index = 0x00000128, .size_minus_1 = (8 - 1), .shift = 0

/**
 * @brief SX_1_FSM_OUT_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SX1_freq_cal_end          00000000
 *    30    SX1_amp_cal_end           00000000
 *    29:28 SX1_cp1_cur_sel_out       0x00000000
 *    27    SX1_fsm_vco_no_osc_det_err 00000000
 *    26    SX1_fsm_vco_no_osc_det    00000000
 *    25:24 SX1_cp0_cur_sel_out       0x00000000
 *    23:19 SX1_lpf_r2_out            0x00000000
 *    18:16 SX1_lpf_c1_out            0x00000000
 *    15:13 SX1_lpf_c34_out           0x00000000
 *    12:08 SX1_vco_cur_sel_out       0x00000000
 *    07:00 SX1_vco_ftun_out          0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_1_FSM_OUT_2_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000004A4)
#define RFIC_REGS_SX_1_FSM_OUT_2_OFFSET      0x000004A4
#define RFIC_REGS_SX_1_FSM_OUT_2_INDEX       0x00000129
#define RFIC_REGS_SX_1_FSM_OUT_2_RESET       0x00000000

static inline u32 rfic_regs_sx_1_fsm_out_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_2_ADDR);
}

#define RFIC_REGS_SX_1_FSM_OUT_2 .addr_index = 0x00000129, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_FREQ_CAL_END_BIT    ((u32)0x80000000)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_FREQ_CAL_END_POS    31
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_AMP_CAL_END_BIT    ((u32)0x40000000)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_AMP_CAL_END_POS    30
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_CP_1_CUR_SEL_OUT_MASK    ((u32)0x30000000)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_CP_1_CUR_SEL_OUT_LSB    28
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_CP_1_CUR_SEL_OUT_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_FSM_VCO_NO_OSC_DET_ERR_BIT    ((u32)0x08000000)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_FSM_VCO_NO_OSC_DET_ERR_POS    27
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_FSM_VCO_NO_OSC_DET_BIT    ((u32)0x04000000)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_FSM_VCO_NO_OSC_DET_POS    26
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_CP_0_CUR_SEL_OUT_MASK    ((u32)0x03000000)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_CP_0_CUR_SEL_OUT_LSB    24
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_CP_0_CUR_SEL_OUT_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_LPF_R_2_OUT_MASK    ((u32)0x00F80000)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_LPF_R_2_OUT_LSB    19
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_LPF_R_2_OUT_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_LPF_C_1_OUT_MASK    ((u32)0x00070000)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_LPF_C_1_OUT_LSB    16
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_LPF_C_1_OUT_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_LPF_C_34_OUT_MASK    ((u32)0x0000E000)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_LPF_C_34_OUT_LSB    13
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_LPF_C_34_OUT_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_VCO_CUR_SEL_OUT_MASK    ((u32)0x00001F00)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_VCO_CUR_SEL_OUT_LSB    8
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_VCO_CUR_SEL_OUT_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_VCO_FTUN_OUT_MASK    ((u32)0x000000FF)
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_VCO_FTUN_OUT_LSB    0
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_VCO_FTUN_OUT_WIDTH    ((u32)0x00000008)

#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_FREQ_CAL_END_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_AMP_CAL_END_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_CP_1_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_FSM_VCO_NO_OSC_DET_ERR_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_FSM_VCO_NO_OSC_DET_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_CP_0_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_LPF_R_2_OUT_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_LPF_C_1_OUT_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_LPF_C_34_OUT_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_VCO_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_VCO_FTUN_OUT_RST    0x00000000

static inline void rfic_regs_sx_1_fsm_out_2_unpack(struct cl_chip *chip, u8 *sx1_freq_cal_end, u8 *sx1_amp_cal_end, u8 *sx1_cp1_cur_sel_out, u8 *sx1_fsm_vco_no_osc_det_err, u8 *sx1_fsm_vco_no_osc_det, u8 *sx1_cp0_cur_sel_out, u8 *sx1_lpf_r2_out, u8 *sx1_lpf_c1_out, u8 *sx1_lpf_c34_out, u8 *sx1_vco_cur_sel_out, u8 *sx1_vco_ftun_out)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_2_ADDR);

	*sx1_freq_cal_end = (local_val & ((u32)0x80000000)) >> 31;
	*sx1_amp_cal_end = (local_val & ((u32)0x40000000)) >> 30;
	*sx1_cp1_cur_sel_out = (local_val & ((u32)0x30000000)) >> 28;
	*sx1_fsm_vco_no_osc_det_err = (local_val & ((u32)0x08000000)) >> 27;
	*sx1_fsm_vco_no_osc_det = (local_val & ((u32)0x04000000)) >> 26;
	*sx1_cp0_cur_sel_out = (local_val & ((u32)0x03000000)) >> 24;
	*sx1_lpf_r2_out = (local_val & ((u32)0x00F80000)) >> 19;
	*sx1_lpf_c1_out = (local_val & ((u32)0x00070000)) >> 16;
	*sx1_lpf_c34_out = (local_val & ((u32)0x0000E000)) >> 13;
	*sx1_vco_cur_sel_out = (local_val & ((u32)0x00001F00)) >> 8;
	*sx1_vco_ftun_out = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 rfic_regs_sx_1_fsm_out_2_sx_1_freq_cal_end_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_FREQ_CAL_END .addr_index = 0x00000129, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_sx_1_fsm_out_2_sx_1_amp_cal_end_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_AMP_CAL_END .addr_index = 0x00000129, .size_minus_1 = (1 - 1), .shift = 30

static inline u8 rfic_regs_sx_1_fsm_out_2_sx_1_cp_1_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x30000000)) >> 28);
}

#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_CP_1_CUR_SEL_OUT .addr_index = 0x00000129, .size_minus_1 = (2 - 1), .shift = 28

static inline u8 rfic_regs_sx_1_fsm_out_2_sx_1_fsm_vco_no_osc_det_err_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_FSM_VCO_NO_OSC_DET_ERR .addr_index = 0x00000129, .size_minus_1 = (1 - 1), .shift = 27

static inline u8 rfic_regs_sx_1_fsm_out_2_sx_1_fsm_vco_no_osc_det_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_FSM_VCO_NO_OSC_DET .addr_index = 0x00000129, .size_minus_1 = (1 - 1), .shift = 26

static inline u8 rfic_regs_sx_1_fsm_out_2_sx_1_cp_0_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x03000000)) >> 24);
}

#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_CP_0_CUR_SEL_OUT .addr_index = 0x00000129, .size_minus_1 = (2 - 1), .shift = 24

static inline u8 rfic_regs_sx_1_fsm_out_2_sx_1_lpf_r_2_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x00F80000)) >> 19);
}

#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_LPF_R_2_OUT .addr_index = 0x00000129, .size_minus_1 = (5 - 1), .shift = 19

static inline u8 rfic_regs_sx_1_fsm_out_2_sx_1_lpf_c_1_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x00070000)) >> 16);
}

#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_LPF_C_1_OUT .addr_index = 0x00000129, .size_minus_1 = (3 - 1), .shift = 16

static inline u8 rfic_regs_sx_1_fsm_out_2_sx_1_lpf_c_34_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x0000E000)) >> 13);
}

#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_LPF_C_34_OUT .addr_index = 0x00000129, .size_minus_1 = (3 - 1), .shift = 13

static inline u8 rfic_regs_sx_1_fsm_out_2_sx_1_vco_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x00001F00)) >> 8);
}

#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_VCO_CUR_SEL_OUT .addr_index = 0x00000129, .size_minus_1 = (5 - 1), .shift = 8

static inline u8 rfic_regs_sx_1_fsm_out_2_sx_1_vco_ftun_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

#define RFIC_REGS_SX_1_FSM_OUT_2_SX_1_VCO_FTUN_OUT .addr_index = 0x00000129, .size_minus_1 = (8 - 1), .shift = 0

/**
 * @brief SX_1_FSM_OUT_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    19    SX1_fsm_lpf_vctrl_low_flag 00000000
 *    18    SX1_fsm_lpf_vctrl_high_flag 00000000
 *    17:16 SX1_vco_sel_out           0x00000000
 *    15:14 SX1_fsm_cal_vco_sel       0x00000000
 *    13    SX_ble_rx_lut_write_ack   00000000
 *    12    SX_ble_tx_lut_write_ack   00000000
 *    11:02 SX1_fsm_kvco_count_diff_out 0x00000000
 *    01    SX1_fsm_lock_det_sticky   00000000
 *    00    SX1_fsm_lock_detect       00000000
 * </pre>
 */
#define RFIC_REGS_SX_1_FSM_OUT_3_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000004A8)
#define RFIC_REGS_SX_1_FSM_OUT_3_OFFSET      0x000004A8
#define RFIC_REGS_SX_1_FSM_OUT_3_INDEX       0x0000012A
#define RFIC_REGS_SX_1_FSM_OUT_3_RESET       0x00000000

static inline u32 rfic_regs_sx_1_fsm_out_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_3_ADDR);
}

#define RFIC_REGS_SX_1_FSM_OUT_3 .addr_index = 0x0000012A, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_LPF_VCTRL_LOW_FLAG_BIT    ((u32)0x00080000)
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_LPF_VCTRL_LOW_FLAG_POS    19
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_LPF_VCTRL_HIGH_FLAG_BIT    ((u32)0x00040000)
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_LPF_VCTRL_HIGH_FLAG_POS    18
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_VCO_SEL_OUT_MASK    ((u32)0x00030000)
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_VCO_SEL_OUT_LSB    16
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_VCO_SEL_OUT_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_CAL_VCO_SEL_MASK    ((u32)0x0000C000)
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_CAL_VCO_SEL_LSB    14
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_CAL_VCO_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_BLE_RX_LUT_WRITE_ACK_BIT    ((u32)0x00002000)
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_BLE_RX_LUT_WRITE_ACK_POS    13
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_BLE_TX_LUT_WRITE_ACK_BIT    ((u32)0x00001000)
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_BLE_TX_LUT_WRITE_ACK_POS    12
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_KVCO_COUNT_DIFF_OUT_MASK    ((u32)0x00000FFC)
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_KVCO_COUNT_DIFF_OUT_LSB    2
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_KVCO_COUNT_DIFF_OUT_WIDTH    ((u32)0x0000000A)
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_LOCK_DET_STICKY_BIT    ((u32)0x00000002)
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_LOCK_DET_STICKY_POS    1
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_LOCK_DETECT_BIT    ((u32)0x00000001)
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_LOCK_DETECT_POS    0

#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_LPF_VCTRL_LOW_FLAG_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_LPF_VCTRL_HIGH_FLAG_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_VCO_SEL_OUT_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_CAL_VCO_SEL_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_BLE_RX_LUT_WRITE_ACK_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_BLE_TX_LUT_WRITE_ACK_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_KVCO_COUNT_DIFF_OUT_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_LOCK_DET_STICKY_RST    0x00000000
#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_LOCK_DETECT_RST    0x00000000

static inline void rfic_regs_sx_1_fsm_out_3_unpack(struct cl_chip *chip, u8 *sx1_fsm_lpf_vctrl_low_flag, u8 *sx1_fsm_lpf_vctrl_high_flag, u8 *sx1_vco_sel_out, u8 *sx1_fsm_cal_vco_sel, u8 *sx_ble_rx_lut_write_ack, u8 *sx_ble_tx_lut_write_ack, u16 *sx1_fsm_kvco_count_diff_out, u8 *sx1_fsm_lock_det_sticky, u8 *sx1_fsm_lock_detect)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_3_ADDR);

	*sx1_fsm_lpf_vctrl_low_flag = (local_val & ((u32)0x00080000)) >> 19;
	*sx1_fsm_lpf_vctrl_high_flag = (local_val & ((u32)0x00040000)) >> 18;
	*sx1_vco_sel_out = (local_val & ((u32)0x00030000)) >> 16;
	*sx1_fsm_cal_vco_sel = (local_val & ((u32)0x0000C000)) >> 14;
	*sx_ble_rx_lut_write_ack = (local_val & ((u32)0x00002000)) >> 13;
	*sx_ble_tx_lut_write_ack = (local_val & ((u32)0x00001000)) >> 12;
	*sx1_fsm_kvco_count_diff_out = (local_val & ((u32)0x00000FFC)) >> 2;
	*sx1_fsm_lock_det_sticky = (local_val & ((u32)0x00000002)) >> 1;
	*sx1_fsm_lock_detect = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_sx_1_fsm_out_3_sx_1_fsm_lpf_vctrl_low_flag_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_3_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_LPF_VCTRL_LOW_FLAG .addr_index = 0x0000012A, .size_minus_1 = (1 - 1), .shift = 19

static inline u8 rfic_regs_sx_1_fsm_out_3_sx_1_fsm_lpf_vctrl_high_flag_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_3_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_LPF_VCTRL_HIGH_FLAG .addr_index = 0x0000012A, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_sx_1_fsm_out_3_sx_1_vco_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_3_ADDR);

	return (u8)((local_val & ((u32)0x00030000)) >> 16);
}

#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_VCO_SEL_OUT .addr_index = 0x0000012A, .size_minus_1 = (2 - 1), .shift = 16

static inline u8 rfic_regs_sx_1_fsm_out_3_sx_1_fsm_cal_vco_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_3_ADDR);

	return (u8)((local_val & ((u32)0x0000C000)) >> 14);
}

#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_CAL_VCO_SEL .addr_index = 0x0000012A, .size_minus_1 = (2 - 1), .shift = 14

static inline u8 rfic_regs_sx_1_fsm_out_3_sx_ble_rx_lut_write_ack_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_3_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

#define RFIC_REGS_SX_1_FSM_OUT_3_SX_BLE_RX_LUT_WRITE_ACK .addr_index = 0x0000012A, .size_minus_1 = (1 - 1), .shift = 13

static inline u8 rfic_regs_sx_1_fsm_out_3_sx_ble_tx_lut_write_ack_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_3_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

#define RFIC_REGS_SX_1_FSM_OUT_3_SX_BLE_TX_LUT_WRITE_ACK .addr_index = 0x0000012A, .size_minus_1 = (1 - 1), .shift = 12

static inline u16 rfic_regs_sx_1_fsm_out_3_sx_1_fsm_kvco_count_diff_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_3_ADDR);

	return (u16)((local_val & ((u32)0x00000FFC)) >> 2);
}

#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_KVCO_COUNT_DIFF_OUT .addr_index = 0x0000012A, .size_minus_1 = (10 - 1), .shift = 2

static inline u8 rfic_regs_sx_1_fsm_out_3_sx_1_fsm_lock_det_sticky_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_3_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_LOCK_DET_STICKY .addr_index = 0x0000012A, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_sx_1_fsm_out_3_sx_1_fsm_lock_detect_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_3_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

#define RFIC_REGS_SX_1_FSM_OUT_3_SX_1_FSM_LOCK_DETECT .addr_index = 0x0000012A, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief SX_1_FSM_OUT_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    17:00 SX1_fsm_cal_freq_cntr     0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_1_FSM_OUT_4_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000004AC)
#define RFIC_REGS_SX_1_FSM_OUT_4_OFFSET      0x000004AC
#define RFIC_REGS_SX_1_FSM_OUT_4_INDEX       0x0000012B
#define RFIC_REGS_SX_1_FSM_OUT_4_RESET       0x00000000

static inline u32 rfic_regs_sx_1_fsm_out_4_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_4_ADDR);
}

#define RFIC_REGS_SX_1_FSM_OUT_4 .addr_index = 0x0000012B, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_FSM_OUT_4_SX_1_FSM_CAL_FREQ_CNTR_MASK    ((u32)0x0003FFFF)
#define RFIC_REGS_SX_1_FSM_OUT_4_SX_1_FSM_CAL_FREQ_CNTR_LSB    0
#define RFIC_REGS_SX_1_FSM_OUT_4_SX_1_FSM_CAL_FREQ_CNTR_WIDTH    ((u32)0x00000012)

#define RFIC_REGS_SX_1_FSM_OUT_4_SX_1_FSM_CAL_FREQ_CNTR_RST    0x00000000

static inline u32 rfic_regs_sx_1_fsm_out_4_sx_1_fsm_cal_freq_cntr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_FSM_OUT_4_ADDR);

	return (u32)(local_val >> 0);
}

#define RFIC_REGS_SX_1_FSM_OUT_4_SX_1_FSM_CAL_FREQ_CNTR .addr_index = 0x0000012B, .size_minus_1 = (18 - 1), .shift = 0

/**
 * @brief SX_1_LOGEN_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25    SX1_spare15_in            00000000
 *    24:23 SX1_lobuff_ldo_vdd10_sel  0x00000000
 *    22    SX1_spare_in_4            00000000
 *    21    SX1_lobuff_ldo_en         00000000
 *    20    SX1_lobuff_rep_drv_CH1_LOX1_en 00000000
 *    19    SX1_lobuff_rep_drv_CH1_LOX0_en 00000000
 *    18    SX1_spare_in_3            00000000
 *    17    SX1_logen_mx_en           00000000
 *    16:14 SX1_logen_mx_cur_sel      0x00000000
 *    13:12 SX1_logen_mx_bias_ctrl_vco_out 0x00000000
 *    11:10 SX1_logen_mx_bias_ctrl_div_out 0x00000000
 *    09:06 SX1_logen_mx_band_sel     0x00000002
 *    05    SX1_logen_lowband_en      00000000
 *    04    SX1_logen_ldo_en          00000000
 *    03    SX1_logen_div2_drv_en     00000000
 *    02:01 SX1_logen_buff_vdd10_sel  0x00000003
 *    00    SX1_logen_buff_en         00000000
 * </pre>
 */
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000004B0)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_OFFSET      0x000004B0
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_INDEX       0x0000012C
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_RESET       0x00000086

static inline u32 rfic_regs_sx_1_logen_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, value);
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0 .addr_index = 0x0000012C, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_SPARE_15_IN_BIT    ((u32)0x02000000)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_SPARE_15_IN_POS    25
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_LDO_VDD_10_SEL_MASK    ((u32)0x01800000)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_LDO_VDD_10_SEL_LSB    23
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_LDO_VDD_10_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_SPARE_IN_4_BIT    ((u32)0x00400000)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_SPARE_IN_4_POS    22
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_LDO_EN_BIT    ((u32)0x00200000)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_LDO_EN_POS    21
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_REP_DRV_CH_1_LOX_1_EN_BIT    ((u32)0x00100000)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_REP_DRV_CH_1_LOX_1_EN_POS    20
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_REP_DRV_CH_1_LOX_0_EN_BIT    ((u32)0x00080000)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_REP_DRV_CH_1_LOX_0_EN_POS    19
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_SPARE_IN_3_BIT    ((u32)0x00040000)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_SPARE_IN_3_POS    18
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_EN_BIT    ((u32)0x00020000)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_EN_POS    17
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_CUR_SEL_MASK    ((u32)0x0001C000)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_CUR_SEL_LSB    14
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_CUR_SEL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_BIAS_CTRL_VCO_OUT_MASK    ((u32)0x00003000)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_BIAS_CTRL_VCO_OUT_LSB    12
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_BIAS_CTRL_VCO_OUT_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_BIAS_CTRL_DIV_OUT_MASK    ((u32)0x00000C00)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_BIAS_CTRL_DIV_OUT_LSB    10
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_BIAS_CTRL_DIV_OUT_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_BAND_SEL_MASK    ((u32)0x000003C0)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_BAND_SEL_LSB    6
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_BAND_SEL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_LOWBAND_EN_BIT    ((u32)0x00000020)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_LOWBAND_EN_POS    5
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_LDO_EN_BIT    ((u32)0x00000010)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_LDO_EN_POS    4
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_DIV_2_DRV_EN_BIT    ((u32)0x00000008)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_DIV_2_DRV_EN_POS    3
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_BUFF_VDD_10_SEL_MASK    ((u32)0x00000006)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_BUFF_VDD_10_SEL_LSB    1
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_BUFF_VDD_10_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_BUFF_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_BUFF_EN_POS    0

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_SPARE_15_IN_RST    0x00000000
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_LDO_VDD_10_SEL_RST    0x00000000
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_SPARE_IN_4_RST    0x00000000
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_LDO_EN_RST    0x00000000
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_REP_DRV_CH_1_LOX_1_EN_RST    0x00000000
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_REP_DRV_CH_1_LOX_0_EN_RST    0x00000000
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_SPARE_IN_3_RST    0x00000000
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_EN_RST    0x00000000
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_CUR_SEL_RST    0x00000000
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_BIAS_CTRL_VCO_OUT_RST    0x00000000
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_BIAS_CTRL_DIV_OUT_RST    0x00000000
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_BAND_SEL_RST    0x00000002
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_LOWBAND_EN_RST    0x00000000
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_LDO_EN_RST    0x00000000
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_DIV_2_DRV_EN_RST    0x00000000
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_BUFF_VDD_10_SEL_RST    0x00000003
#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_BUFF_EN_RST    0x00000000

static inline void rfic_regs_sx_1_logen_ctrl_0_pack(struct cl_chip *chip, u8 sx1_spare15_in, u8 sx1_lobuff_ldo_vdd10_sel, u8 sx1_spare_in_4, u8 sx1_lobuff_ldo_en, u8 sx1_lobuff_rep_drv_ch1_lox1_en, u8 sx1_lobuff_rep_drv_ch1_lox0_en, u8 sx1_spare_in_3, u8 sx1_logen_mx_en, u8 sx1_logen_mx_cur_sel, u8 sx1_logen_mx_bias_ctrl_vco_out, u8 sx1_logen_mx_bias_ctrl_div_out, u8 sx1_logen_mx_band_sel, u8 sx1_logen_lowband_en, u8 sx1_logen_ldo_en, u8 sx1_logen_div2_drv_en, u8 sx1_logen_buff_vdd10_sel, u8 sx1_logen_buff_en)
{
	ASSERT_ERR_CHIP((((u32)sx1_spare15_in << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_lobuff_ldo_vdd10_sel << 23) & ~((u32)0x01800000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_spare_in_4 << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_lobuff_ldo_en << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_lobuff_rep_drv_ch1_lox1_en << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_lobuff_rep_drv_ch1_lox0_en << 19) & ~((u32)0x00080000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_spare_in_3 << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_logen_mx_en << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_logen_mx_cur_sel << 14) & ~((u32)0x0001C000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_logen_mx_bias_ctrl_vco_out << 12) & ~((u32)0x00003000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_logen_mx_bias_ctrl_div_out << 10) & ~((u32)0x00000C00)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_logen_mx_band_sel << 6) & ~((u32)0x000003C0)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_logen_lowband_en << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_logen_ldo_en << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_logen_div2_drv_en << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_logen_buff_vdd10_sel << 1) & ~((u32)0x00000006)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_logen_buff_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, ((u32)sx1_spare15_in << 25) | ((u32)sx1_lobuff_ldo_vdd10_sel << 23) | ((u32)sx1_spare_in_4 << 22) | ((u32)sx1_lobuff_ldo_en << 21) | ((u32)sx1_lobuff_rep_drv_ch1_lox1_en << 20) | ((u32)sx1_lobuff_rep_drv_ch1_lox0_en << 19) | ((u32)sx1_spare_in_3 << 18) | ((u32)sx1_logen_mx_en << 17) | ((u32)sx1_logen_mx_cur_sel << 14) | ((u32)sx1_logen_mx_bias_ctrl_vco_out << 12) | ((u32)sx1_logen_mx_bias_ctrl_div_out << 10) | ((u32)sx1_logen_mx_band_sel << 6) | ((u32)sx1_logen_lowband_en << 5) | ((u32)sx1_logen_ldo_en << 4) | ((u32)sx1_logen_div2_drv_en << 3) | ((u32)sx1_logen_buff_vdd10_sel << 1) | ((u32)sx1_logen_buff_en << 0));
}

static inline void rfic_regs_sx_1_logen_ctrl_0_unpack(struct cl_chip *chip, u8 *sx1_spare15_in, u8 *sx1_lobuff_ldo_vdd10_sel, u8 *sx1_spare_in_4, u8 *sx1_lobuff_ldo_en, u8 *sx1_lobuff_rep_drv_ch1_lox1_en, u8 *sx1_lobuff_rep_drv_ch1_lox0_en, u8 *sx1_spare_in_3, u8 *sx1_logen_mx_en, u8 *sx1_logen_mx_cur_sel, u8 *sx1_logen_mx_bias_ctrl_vco_out, u8 *sx1_logen_mx_bias_ctrl_div_out, u8 *sx1_logen_mx_band_sel, u8 *sx1_logen_lowband_en, u8 *sx1_logen_ldo_en, u8 *sx1_logen_div2_drv_en, u8 *sx1_logen_buff_vdd10_sel, u8 *sx1_logen_buff_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	*sx1_spare15_in = (local_val & ((u32)0x02000000)) >> 25;
	*sx1_lobuff_ldo_vdd10_sel = (local_val & ((u32)0x01800000)) >> 23;
	*sx1_spare_in_4 = (local_val & ((u32)0x00400000)) >> 22;
	*sx1_lobuff_ldo_en = (local_val & ((u32)0x00200000)) >> 21;
	*sx1_lobuff_rep_drv_ch1_lox1_en = (local_val & ((u32)0x00100000)) >> 20;
	*sx1_lobuff_rep_drv_ch1_lox0_en = (local_val & ((u32)0x00080000)) >> 19;
	*sx1_spare_in_3 = (local_val & ((u32)0x00040000)) >> 18;
	*sx1_logen_mx_en = (local_val & ((u32)0x00020000)) >> 17;
	*sx1_logen_mx_cur_sel = (local_val & ((u32)0x0001C000)) >> 14;
	*sx1_logen_mx_bias_ctrl_vco_out = (local_val & ((u32)0x00003000)) >> 12;
	*sx1_logen_mx_bias_ctrl_div_out = (local_val & ((u32)0x00000C00)) >> 10;
	*sx1_logen_mx_band_sel = (local_val & ((u32)0x000003C0)) >> 6;
	*sx1_logen_lowband_en = (local_val & ((u32)0x00000020)) >> 5;
	*sx1_logen_ldo_en = (local_val & ((u32)0x00000010)) >> 4;
	*sx1_logen_div2_drv_en = (local_val & ((u32)0x00000008)) >> 3;
	*sx1_logen_buff_vdd10_sel = (local_val & ((u32)0x00000006)) >> 1;
	*sx1_logen_buff_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_spare_15_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_spare_15_in_setf(struct cl_chip *chip, u8 sx1spare15in)
{
	ASSERT_ERR_CHIP((((u32)sx1spare15in << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x02000000)) | ((u32)sx1spare15in << 25));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_SPARE_15_IN .addr_index = 0x0000012C, .size_minus_1 = (1 - 1), .shift = 25

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_lobuff_ldo_vdd_10_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x01800000)) >> 23);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_lobuff_ldo_vdd_10_sel_setf(struct cl_chip *chip, u8 sx1lobuffldovdd10sel)
{
	ASSERT_ERR_CHIP((((u32)sx1lobuffldovdd10sel << 23) & ~((u32)0x01800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x01800000)) | ((u32)sx1lobuffldovdd10sel << 23));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_LDO_VDD_10_SEL .addr_index = 0x0000012C, .size_minus_1 = (2 - 1), .shift = 23

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_spare_in_4_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_spare_in_4_setf(struct cl_chip *chip, u8 sx1sparein4)
{
	ASSERT_ERR_CHIP((((u32)sx1sparein4 << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x00400000)) | ((u32)sx1sparein4 << 22));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_SPARE_IN_4 .addr_index = 0x0000012C, .size_minus_1 = (1 - 1), .shift = 22

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_lobuff_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_lobuff_ldo_en_setf(struct cl_chip *chip, u8 sx1lobuffldoen)
{
	ASSERT_ERR_CHIP((((u32)sx1lobuffldoen << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x00200000)) | ((u32)sx1lobuffldoen << 21));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_LDO_EN .addr_index = 0x0000012C, .size_minus_1 = (1 - 1), .shift = 21

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_lobuff_rep_drv_ch_1_lox_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_lobuff_rep_drv_ch_1_lox_1_en_setf(struct cl_chip *chip, u8 sx1lobuffrepdrvch1lox1en)
{
	ASSERT_ERR_CHIP((((u32)sx1lobuffrepdrvch1lox1en << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x00100000)) | ((u32)sx1lobuffrepdrvch1lox1en << 20));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_REP_DRV_CH_1_LOX_1_EN .addr_index = 0x0000012C, .size_minus_1 = (1 - 1), .shift = 20

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_lobuff_rep_drv_ch_1_lox_0_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_lobuff_rep_drv_ch_1_lox_0_en_setf(struct cl_chip *chip, u8 sx1lobuffrepdrvch1lox0en)
{
	ASSERT_ERR_CHIP((((u32)sx1lobuffrepdrvch1lox0en << 19) & ~((u32)0x00080000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x00080000)) | ((u32)sx1lobuffrepdrvch1lox0en << 19));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOBUFF_REP_DRV_CH_1_LOX_0_EN .addr_index = 0x0000012C, .size_minus_1 = (1 - 1), .shift = 19

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_spare_in_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_spare_in_3_setf(struct cl_chip *chip, u8 sx1sparein3)
{
	ASSERT_ERR_CHIP((((u32)sx1sparein3 << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x00040000)) | ((u32)sx1sparein3 << 18));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_SPARE_IN_3 .addr_index = 0x0000012C, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_mx_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_mx_en_setf(struct cl_chip *chip, u8 sx1logenmxen)
{
	ASSERT_ERR_CHIP((((u32)sx1logenmxen << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x00020000)) | ((u32)sx1logenmxen << 17));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_EN .addr_index = 0x0000012C, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_mx_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0001C000)) >> 14);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_mx_cur_sel_setf(struct cl_chip *chip, u8 sx1logenmxcursel)
{
	ASSERT_ERR_CHIP((((u32)sx1logenmxcursel << 14) & ~((u32)0x0001C000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x0001C000)) | ((u32)sx1logenmxcursel << 14));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_CUR_SEL .addr_index = 0x0000012C, .size_minus_1 = (3 - 1), .shift = 14

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_mx_bias_ctrl_vco_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00003000)) >> 12);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_mx_bias_ctrl_vco_out_setf(struct cl_chip *chip, u8 sx1logenmxbiasctrlvcoout)
{
	ASSERT_ERR_CHIP((((u32)sx1logenmxbiasctrlvcoout << 12) & ~((u32)0x00003000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x00003000)) | ((u32)sx1logenmxbiasctrlvcoout << 12));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_BIAS_CTRL_VCO_OUT .addr_index = 0x0000012C, .size_minus_1 = (2 - 1), .shift = 12

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_mx_bias_ctrl_div_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000C00)) >> 10);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_mx_bias_ctrl_div_out_setf(struct cl_chip *chip, u8 sx1logenmxbiasctrldivout)
{
	ASSERT_ERR_CHIP((((u32)sx1logenmxbiasctrldivout << 10) & ~((u32)0x00000C00)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x00000C00)) | ((u32)sx1logenmxbiasctrldivout << 10));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_BIAS_CTRL_DIV_OUT .addr_index = 0x0000012C, .size_minus_1 = (2 - 1), .shift = 10

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_mx_band_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x000003C0)) >> 6);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_mx_band_sel_setf(struct cl_chip *chip, u8 sx1logenmxbandsel)
{
	ASSERT_ERR_CHIP((((u32)sx1logenmxbandsel << 6) & ~((u32)0x000003C0)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x000003C0)) | ((u32)sx1logenmxbandsel << 6));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_MX_BAND_SEL .addr_index = 0x0000012C, .size_minus_1 = (4 - 1), .shift = 6

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_lowband_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_lowband_en_setf(struct cl_chip *chip, u8 sx1logenlowbanden)
{
	ASSERT_ERR_CHIP((((u32)sx1logenlowbanden << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x00000020)) | ((u32)sx1logenlowbanden << 5));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_LOWBAND_EN .addr_index = 0x0000012C, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_ldo_en_setf(struct cl_chip *chip, u8 sx1logenldoen)
{
	ASSERT_ERR_CHIP((((u32)sx1logenldoen << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x00000010)) | ((u32)sx1logenldoen << 4));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_LDO_EN .addr_index = 0x0000012C, .size_minus_1 = (1 - 1), .shift = 4

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_div_2_drv_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_div_2_drv_en_setf(struct cl_chip *chip, u8 sx1logendiv2drven)
{
	ASSERT_ERR_CHIP((((u32)sx1logendiv2drven << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x00000008)) | ((u32)sx1logendiv2drven << 3));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_DIV_2_DRV_EN .addr_index = 0x0000012C, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_buff_vdd_10_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000006)) >> 1);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_buff_vdd_10_sel_setf(struct cl_chip *chip, u8 sx1logenbuffvdd10sel)
{
	ASSERT_ERR_CHIP((((u32)sx1logenbuffvdd10sel << 1) & ~((u32)0x00000006)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x00000006)) | ((u32)sx1logenbuffvdd10sel << 1));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_BUFF_VDD_10_SEL .addr_index = 0x0000012C, .size_minus_1 = (2 - 1), .shift = 1

static inline u8 rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_buff_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_sx_1_logen_ctrl_0_sx_1_logen_buff_en_setf(struct cl_chip *chip, u8 sx1logenbuffen)
{
	ASSERT_ERR_CHIP((((u32)sx1logenbuffen << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_LOGEN_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)sx1logenbuffen << 0));
}

#define RFIC_REGS_SX_1_LOGEN_CTRL_0_SX_1_LOGEN_BUFF_EN .addr_index = 0x0000012C, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief SX_1_IN_SPARE_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:12 SX1_in_spare_0            0x00000000
 *    11:08 SX1_dnsel_extend          0x00000000
 *    07:06 SX1_bt_freq_meas_dur_sel  0x00000000
 *    05    SX1_sdm_out_clk_sync_sel  00000000
 *    04:03 SX1_div_plswsel           0x00000000
 *    02    SX1_lobuff_splitter_drv_CH0_LOX1_en 00000000
 *    01    SX1_lobuff_splitter_drv_CH1_LOX1_en 00000000
 *    00    SX1_lobuff_splitter_drv_CH1_LOX0_en 00000000
 * </pre>
 */
#define RFIC_REGS_SX_1_IN_SPARE_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000004B4)
#define RFIC_REGS_SX_1_IN_SPARE_0_OFFSET      0x000004B4
#define RFIC_REGS_SX_1_IN_SPARE_0_INDEX       0x0000012D
#define RFIC_REGS_SX_1_IN_SPARE_0_RESET       0x00000000

static inline u32 rfic_regs_sx_1_in_spare_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR);
}

static inline void rfic_regs_sx_1_in_spare_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR, value);
}

#define RFIC_REGS_SX_1_IN_SPARE_0 .addr_index = 0x0000012D, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_IN_SPARE_0_MASK    ((u32)0xFFFFF000)
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_IN_SPARE_0_LSB    12
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_IN_SPARE_0_WIDTH    ((u32)0x00000014)
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_DNSEL_EXTEND_MASK    ((u32)0x00000F00)
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_DNSEL_EXTEND_LSB    8
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_DNSEL_EXTEND_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_BT_FREQ_MEAS_DUR_SEL_MASK    ((u32)0x000000C0)
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_BT_FREQ_MEAS_DUR_SEL_LSB    6
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_BT_FREQ_MEAS_DUR_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_SDM_OUT_CLK_SYNC_SEL_BIT    ((u32)0x00000020)
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_SDM_OUT_CLK_SYNC_SEL_POS    5
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_DIV_PLSWSEL_MASK    ((u32)0x00000018)
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_DIV_PLSWSEL_LSB    3
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_DIV_PLSWSEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_LOBUFF_SPLITTER_DRV_CH_0_LOX_1_EN_BIT    ((u32)0x00000004)
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_LOBUFF_SPLITTER_DRV_CH_0_LOX_1_EN_POS    2
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_LOBUFF_SPLITTER_DRV_CH_1_LOX_1_EN_BIT    ((u32)0x00000002)
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_LOBUFF_SPLITTER_DRV_CH_1_LOX_1_EN_POS    1
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_LOBUFF_SPLITTER_DRV_CH_1_LOX_0_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_LOBUFF_SPLITTER_DRV_CH_1_LOX_0_EN_POS    0

#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_IN_SPARE_0_RST    0x00000000
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_DNSEL_EXTEND_RST    0x00000000
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_BT_FREQ_MEAS_DUR_SEL_RST    0x00000000
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_SDM_OUT_CLK_SYNC_SEL_RST    0x00000000
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_DIV_PLSWSEL_RST    0x00000000
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_LOBUFF_SPLITTER_DRV_CH_0_LOX_1_EN_RST    0x00000000
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_LOBUFF_SPLITTER_DRV_CH_1_LOX_1_EN_RST    0x00000000
#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_LOBUFF_SPLITTER_DRV_CH_1_LOX_0_EN_RST    0x00000000

static inline void rfic_regs_sx_1_in_spare_0_pack(struct cl_chip *chip, u32 sx1_in_spare_0, u8 sx1_dnsel_extend, u8 sx1_bt_freq_meas_dur_sel, u8 sx1_sdm_out_clk_sync_sel, u8 sx1_div_plswsel, u8 sx1_lobuff_splitter_drv_ch0_lox1_en, u8 sx1_lobuff_splitter_drv_ch1_lox1_en, u8 sx1_lobuff_splitter_drv_ch1_lox0_en)
{
	ASSERT_ERR_CHIP((((u32)sx1_in_spare_0 << 12) & ~((u32)0xFFFFF000)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_dnsel_extend << 8) & ~((u32)0x00000F00)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_bt_freq_meas_dur_sel << 6) & ~((u32)0x000000C0)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_sdm_out_clk_sync_sel << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_div_plswsel << 3) & ~((u32)0x00000018)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_lobuff_splitter_drv_ch0_lox1_en << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_lobuff_splitter_drv_ch1_lox1_en << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_lobuff_splitter_drv_ch1_lox0_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR, ((u32)sx1_in_spare_0 << 12) | ((u32)sx1_dnsel_extend << 8) | ((u32)sx1_bt_freq_meas_dur_sel << 6) | ((u32)sx1_sdm_out_clk_sync_sel << 5) | ((u32)sx1_div_plswsel << 3) | ((u32)sx1_lobuff_splitter_drv_ch0_lox1_en << 2) | ((u32)sx1_lobuff_splitter_drv_ch1_lox1_en << 1) | ((u32)sx1_lobuff_splitter_drv_ch1_lox0_en << 0));
}

static inline void rfic_regs_sx_1_in_spare_0_unpack(struct cl_chip *chip, u32 *sx1_in_spare_0, u8 *sx1_dnsel_extend, u8 *sx1_bt_freq_meas_dur_sel, u8 *sx1_sdm_out_clk_sync_sel, u8 *sx1_div_plswsel, u8 *sx1_lobuff_splitter_drv_ch0_lox1_en, u8 *sx1_lobuff_splitter_drv_ch1_lox1_en, u8 *sx1_lobuff_splitter_drv_ch1_lox0_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR);

	*sx1_in_spare_0 = (local_val & ((u32)0xFFFFF000)) >> 12;
	*sx1_dnsel_extend = (local_val & ((u32)0x00000F00)) >> 8;
	*sx1_bt_freq_meas_dur_sel = (local_val & ((u32)0x000000C0)) >> 6;
	*sx1_sdm_out_clk_sync_sel = (local_val & ((u32)0x00000020)) >> 5;
	*sx1_div_plswsel = (local_val & ((u32)0x00000018)) >> 3;
	*sx1_lobuff_splitter_drv_ch0_lox1_en = (local_val & ((u32)0x00000004)) >> 2;
	*sx1_lobuff_splitter_drv_ch1_lox1_en = (local_val & ((u32)0x00000002)) >> 1;
	*sx1_lobuff_splitter_drv_ch1_lox0_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u32 rfic_regs_sx_1_in_spare_0_sx_1_in_spare_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR);

	return (u32)((local_val & ((u32)0xFFFFF000)) >> 12);
}

static inline void rfic_regs_sx_1_in_spare_0_sx_1_in_spare_0_setf(struct cl_chip *chip, u32 sx1inspare0)
{
	ASSERT_ERR_CHIP((((u32)sx1inspare0 << 12) & ~((u32)0xFFFFF000)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR) & ~((u32)0xFFFFF000)) | ((u32)sx1inspare0 << 12));
}

#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_IN_SPARE_0 .addr_index = 0x0000012D, .size_minus_1 = (20 - 1), .shift = 12

static inline u8 rfic_regs_sx_1_in_spare_0_sx_1_dnsel_extend_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00000F00)) >> 8);
}

static inline void rfic_regs_sx_1_in_spare_0_sx_1_dnsel_extend_setf(struct cl_chip *chip, u8 sx1dnselextend)
{
	ASSERT_ERR_CHIP((((u32)sx1dnselextend << 8) & ~((u32)0x00000F00)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR) & ~((u32)0x00000F00)) | ((u32)sx1dnselextend << 8));
}

#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_DNSEL_EXTEND .addr_index = 0x0000012D, .size_minus_1 = (4 - 1), .shift = 8

static inline u8 rfic_regs_sx_1_in_spare_0_sx_1_bt_freq_meas_dur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x000000C0)) >> 6);
}

static inline void rfic_regs_sx_1_in_spare_0_sx_1_bt_freq_meas_dur_sel_setf(struct cl_chip *chip, u8 sx1btfreqmeasdursel)
{
	ASSERT_ERR_CHIP((((u32)sx1btfreqmeasdursel << 6) & ~((u32)0x000000C0)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR) & ~((u32)0x000000C0)) | ((u32)sx1btfreqmeasdursel << 6));
}

#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_BT_FREQ_MEAS_DUR_SEL .addr_index = 0x0000012D, .size_minus_1 = (2 - 1), .shift = 6

static inline u8 rfic_regs_sx_1_in_spare_0_sx_1_sdm_out_clk_sync_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void rfic_regs_sx_1_in_spare_0_sx_1_sdm_out_clk_sync_sel_setf(struct cl_chip *chip, u8 sx1sdmoutclksyncsel)
{
	ASSERT_ERR_CHIP((((u32)sx1sdmoutclksyncsel << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR) & ~((u32)0x00000020)) | ((u32)sx1sdmoutclksyncsel << 5));
}

#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_SDM_OUT_CLK_SYNC_SEL .addr_index = 0x0000012D, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_sx_1_in_spare_0_sx_1_div_plswsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00000018)) >> 3);
}

static inline void rfic_regs_sx_1_in_spare_0_sx_1_div_plswsel_setf(struct cl_chip *chip, u8 sx1divplswsel)
{
	ASSERT_ERR_CHIP((((u32)sx1divplswsel << 3) & ~((u32)0x00000018)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR) & ~((u32)0x00000018)) | ((u32)sx1divplswsel << 3));
}

#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_DIV_PLSWSEL .addr_index = 0x0000012D, .size_minus_1 = (2 - 1), .shift = 3

static inline u8 rfic_regs_sx_1_in_spare_0_sx_1_lobuff_splitter_drv_ch_0_lox_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_sx_1_in_spare_0_sx_1_lobuff_splitter_drv_ch_0_lox_1_en_setf(struct cl_chip *chip, u8 sx1lobuffsplitterdrvch0lox1en)
{
	ASSERT_ERR_CHIP((((u32)sx1lobuffsplitterdrvch0lox1en << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR) & ~((u32)0x00000004)) | ((u32)sx1lobuffsplitterdrvch0lox1en << 2));
}

#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_LOBUFF_SPLITTER_DRV_CH_0_LOX_1_EN .addr_index = 0x0000012D, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_sx_1_in_spare_0_sx_1_lobuff_splitter_drv_ch_1_lox_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_sx_1_in_spare_0_sx_1_lobuff_splitter_drv_ch_1_lox_1_en_setf(struct cl_chip *chip, u8 sx1lobuffsplitterdrvch1lox1en)
{
	ASSERT_ERR_CHIP((((u32)sx1lobuffsplitterdrvch1lox1en << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR) & ~((u32)0x00000002)) | ((u32)sx1lobuffsplitterdrvch1lox1en << 1));
}

#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_LOBUFF_SPLITTER_DRV_CH_1_LOX_1_EN .addr_index = 0x0000012D, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_sx_1_in_spare_0_sx_1_lobuff_splitter_drv_ch_1_lox_0_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_sx_1_in_spare_0_sx_1_lobuff_splitter_drv_ch_1_lox_0_en_setf(struct cl_chip *chip, u8 sx1lobuffsplitterdrvch1lox0en)
{
	ASSERT_ERR_CHIP((((u32)sx1lobuffsplitterdrvch1lox0en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_IN_SPARE_0_ADDR) & ~((u32)0x00000001)) | ((u32)sx1lobuffsplitterdrvch1lox0en << 0));
}

#define RFIC_REGS_SX_1_IN_SPARE_0_SX_1_LOBUFF_SPLITTER_DRV_CH_1_LOX_0_EN .addr_index = 0x0000012D, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief SX_1_OUT_SPARE_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SX1_out_spare_0           00000000
 *    30:29 SX1_fsm_cal_cp1_cur_sel_out 0x00000000
 *    28:08 SX1_div_nfrac             0x00000000
 *    07:00 SX1_div_int               0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_1_OUT_SPARE_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000004B8)
#define RFIC_REGS_SX_1_OUT_SPARE_0_OFFSET      0x000004B8
#define RFIC_REGS_SX_1_OUT_SPARE_0_INDEX       0x0000012E
#define RFIC_REGS_SX_1_OUT_SPARE_0_RESET       0x00000000

static inline u32 rfic_regs_sx_1_out_spare_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_OUT_SPARE_0_ADDR);
}

#define RFIC_REGS_SX_1_OUT_SPARE_0 .addr_index = 0x0000012E, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_OUT_SPARE_0_BIT    ((u32)0x80000000)
#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_OUT_SPARE_0_POS    31
#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_FSM_CAL_CP_1_CUR_SEL_OUT_MASK    ((u32)0x60000000)
#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_FSM_CAL_CP_1_CUR_SEL_OUT_LSB    29
#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_FSM_CAL_CP_1_CUR_SEL_OUT_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_DIV_NFRAC_MASK    ((u32)0x1FFFFF00)
#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_DIV_NFRAC_LSB    8
#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_DIV_NFRAC_WIDTH    ((u32)0x00000015)
#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_DIV_INT_MASK    ((u32)0x000000FF)
#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_DIV_INT_LSB    0
#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_DIV_INT_WIDTH    ((u32)0x00000008)

#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_OUT_SPARE_0_RST    0x00000000
#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_FSM_CAL_CP_1_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_DIV_NFRAC_RST    0x00000000
#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_DIV_INT_RST    0x00000000

static inline void rfic_regs_sx_1_out_spare_0_unpack(struct cl_chip *chip, u8 *sx1_out_spare_0, u8 *sx1_fsm_cal_cp1_cur_sel_out, u32 *sx1_div_nfrac, u8 *sx1_div_int)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_OUT_SPARE_0_ADDR);

	*sx1_out_spare_0 = (local_val & ((u32)0x80000000)) >> 31;
	*sx1_fsm_cal_cp1_cur_sel_out = (local_val & ((u32)0x60000000)) >> 29;
	*sx1_div_nfrac = (local_val & ((u32)0x1FFFFF00)) >> 8;
	*sx1_div_int = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 rfic_regs_sx_1_out_spare_0_sx_1_out_spare_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_OUT_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_OUT_SPARE_0 .addr_index = 0x0000012E, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_sx_1_out_spare_0_sx_1_fsm_cal_cp_1_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_OUT_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x60000000)) >> 29);
}

#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_FSM_CAL_CP_1_CUR_SEL_OUT .addr_index = 0x0000012E, .size_minus_1 = (2 - 1), .shift = 29

static inline u32 rfic_regs_sx_1_out_spare_0_sx_1_div_nfrac_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_OUT_SPARE_0_ADDR);

	return (u32)((local_val & ((u32)0x1FFFFF00)) >> 8);
}

#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_DIV_NFRAC .addr_index = 0x0000012E, .size_minus_1 = (21 - 1), .shift = 8

static inline u8 rfic_regs_sx_1_out_spare_0_sx_1_div_int_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_OUT_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

#define RFIC_REGS_SX_1_OUT_SPARE_0_SX_1_DIV_INT .addr_index = 0x0000012E, .size_minus_1 = (8 - 1), .shift = 0

/**
 * @brief DPLL_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    22    dpll_tstclk_en            00000001
 *    21    dpll_refdiv_ldo_vrefsel   00000000
 *    20    dpll_refdiv_ldoen         00000001
 *    19:18 dpll_pfd_pw               0x00000000
 *    17    dpll_pfd_tristate         00000000
 *    16    dpll_pfd_cp_en            00000001
 *    15:14 dpll_cp_rdgsel            0x00000000
 *    13:12 dpll_cp_iuptstrdgs        0x00000001
 *    11:10 dpll_cp_idntstrdgs        0x00000001
 *    09:08 dpll_cpcs                 0x00000001
 *    07    dpll_cp_ldoen             00000001
 *    06    dpll_ro_vcls_en           00000001
 *    05    dpll_ro_drv_ldo_vrefsel   00000000
 *    04:03 dpll_ro_drv_ldo_vddsel    0x00000000
 *    02    dpll_ro_ldoen             00000001
 *    01    dpll_ro_drv_ldoen         00000001
 *    00    dpll_ro_drv_en            00000001
 * </pre>
 */
#define RFIC_REGS_DPLL_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000500)
#define RFIC_REGS_DPLL_CTRL_0_OFFSET      0x00000500
#define RFIC_REGS_DPLL_CTRL_0_INDEX       0x00000140
#define RFIC_REGS_DPLL_CTRL_0_RESET       0x005115C7

static inline u32 rfic_regs_dpll_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);
}

static inline void rfic_regs_dpll_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, value);
}

#define RFIC_REGS_DPLL_CTRL_0 .addr_index = 0x00000140, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_DPLL_CTRL_0_DPLL_TSTCLK_EN_BIT    ((u32)0x00400000)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_TSTCLK_EN_POS    22
#define RFIC_REGS_DPLL_CTRL_0_DPLL_REFDIV_LDO_VREFSEL_BIT    ((u32)0x00200000)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_REFDIV_LDO_VREFSEL_POS    21
#define RFIC_REGS_DPLL_CTRL_0_DPLL_REFDIV_LDOEN_BIT    ((u32)0x00100000)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_REFDIV_LDOEN_POS    20
#define RFIC_REGS_DPLL_CTRL_0_DPLL_PFD_PW_MASK    ((u32)0x000C0000)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_PFD_PW_LSB    18
#define RFIC_REGS_DPLL_CTRL_0_DPLL_PFD_PW_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_PFD_TRISTATE_BIT    ((u32)0x00020000)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_PFD_TRISTATE_POS    17
#define RFIC_REGS_DPLL_CTRL_0_DPLL_PFD_CP_EN_BIT    ((u32)0x00010000)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_PFD_CP_EN_POS    16
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_RDGSEL_MASK    ((u32)0x0000C000)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_RDGSEL_LSB    14
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_RDGSEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_IUPTSTRDGS_MASK    ((u32)0x00003000)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_IUPTSTRDGS_LSB    12
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_IUPTSTRDGS_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_IDNTSTRDGS_MASK    ((u32)0x00000C00)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_IDNTSTRDGS_LSB    10
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_IDNTSTRDGS_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CPCS_MASK    ((u32)0x00000300)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CPCS_LSB    8
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CPCS_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_LDOEN_BIT    ((u32)0x00000080)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_LDOEN_POS    7
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_VCLS_EN_BIT    ((u32)0x00000040)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_VCLS_EN_POS    6
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_LDO_VREFSEL_BIT    ((u32)0x00000020)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_LDO_VREFSEL_POS    5
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_LDO_VDDSEL_MASK    ((u32)0x00000018)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_LDO_VDDSEL_LSB    3
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_LDO_VDDSEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_LDOEN_BIT    ((u32)0x00000004)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_LDOEN_POS    2
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_LDOEN_BIT    ((u32)0x00000002)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_LDOEN_POS    1
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_EN_POS    0

#define RFIC_REGS_DPLL_CTRL_0_DPLL_TSTCLK_EN_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_0_DPLL_REFDIV_LDO_VREFSEL_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_0_DPLL_REFDIV_LDOEN_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_0_DPLL_PFD_PW_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_0_DPLL_PFD_TRISTATE_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_0_DPLL_PFD_CP_EN_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_RDGSEL_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_IUPTSTRDGS_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_IDNTSTRDGS_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CPCS_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_LDOEN_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_VCLS_EN_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_LDO_VREFSEL_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_LDO_VDDSEL_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_LDOEN_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_LDOEN_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_EN_RST    0x00000001

static inline void rfic_regs_dpll_ctrl_0_pack(struct cl_chip *chip, u8 dpll_tstclk_en, u8 dpll_refdiv_ldo_vrefsel, u8 dpll_refdiv_ldoen, u8 dpll_pfd_pw, u8 dpll_pfd_tristate, u8 dpll_pfd_cp_en, u8 dpll_cp_rdgsel, u8 dpll_cp_iuptstrdgs, u8 dpll_cp_idntstrdgs, u8 dpll_cpcs, u8 dpll_cp_ldoen, u8 dpll_ro_vcls_en, u8 dpll_ro_drv_ldo_vrefsel, u8 dpll_ro_drv_ldo_vddsel, u8 dpll_ro_ldoen, u8 dpll_ro_drv_ldoen, u8 dpll_ro_drv_en)
{
	ASSERT_ERR_CHIP((((u32)dpll_tstclk_en << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_refdiv_ldo_vrefsel << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_refdiv_ldoen << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_pfd_pw << 18) & ~((u32)0x000C0000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_pfd_tristate << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_pfd_cp_en << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_cp_rdgsel << 14) & ~((u32)0x0000C000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_cp_iuptstrdgs << 12) & ~((u32)0x00003000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_cp_idntstrdgs << 10) & ~((u32)0x00000C00)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_cpcs << 8) & ~((u32)0x00000300)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_cp_ldoen << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_ro_vcls_en << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_ro_drv_ldo_vrefsel << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_ro_drv_ldo_vddsel << 3) & ~((u32)0x00000018)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_ro_ldoen << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_ro_drv_ldoen << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_ro_drv_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, ((u32)dpll_tstclk_en << 22) | ((u32)dpll_refdiv_ldo_vrefsel << 21) | ((u32)dpll_refdiv_ldoen << 20) | ((u32)dpll_pfd_pw << 18) | ((u32)dpll_pfd_tristate << 17) | ((u32)dpll_pfd_cp_en << 16) | ((u32)dpll_cp_rdgsel << 14) | ((u32)dpll_cp_iuptstrdgs << 12) | ((u32)dpll_cp_idntstrdgs << 10) | ((u32)dpll_cpcs << 8) | ((u32)dpll_cp_ldoen << 7) | ((u32)dpll_ro_vcls_en << 6) | ((u32)dpll_ro_drv_ldo_vrefsel << 5) | ((u32)dpll_ro_drv_ldo_vddsel << 3) | ((u32)dpll_ro_ldoen << 2) | ((u32)dpll_ro_drv_ldoen << 1) | ((u32)dpll_ro_drv_en << 0));
}

static inline void rfic_regs_dpll_ctrl_0_unpack(struct cl_chip *chip, u8 *dpll_tstclk_en, u8 *dpll_refdiv_ldo_vrefsel, u8 *dpll_refdiv_ldoen, u8 *dpll_pfd_pw, u8 *dpll_pfd_tristate, u8 *dpll_pfd_cp_en, u8 *dpll_cp_rdgsel, u8 *dpll_cp_iuptstrdgs, u8 *dpll_cp_idntstrdgs, u8 *dpll_cpcs, u8 *dpll_cp_ldoen, u8 *dpll_ro_vcls_en, u8 *dpll_ro_drv_ldo_vrefsel, u8 *dpll_ro_drv_ldo_vddsel, u8 *dpll_ro_ldoen, u8 *dpll_ro_drv_ldoen, u8 *dpll_ro_drv_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	*dpll_tstclk_en = (local_val & ((u32)0x00400000)) >> 22;
	*dpll_refdiv_ldo_vrefsel = (local_val & ((u32)0x00200000)) >> 21;
	*dpll_refdiv_ldoen = (local_val & ((u32)0x00100000)) >> 20;
	*dpll_pfd_pw = (local_val & ((u32)0x000C0000)) >> 18;
	*dpll_pfd_tristate = (local_val & ((u32)0x00020000)) >> 17;
	*dpll_pfd_cp_en = (local_val & ((u32)0x00010000)) >> 16;
	*dpll_cp_rdgsel = (local_val & ((u32)0x0000C000)) >> 14;
	*dpll_cp_iuptstrdgs = (local_val & ((u32)0x00003000)) >> 12;
	*dpll_cp_idntstrdgs = (local_val & ((u32)0x00000C00)) >> 10;
	*dpll_cpcs = (local_val & ((u32)0x00000300)) >> 8;
	*dpll_cp_ldoen = (local_val & ((u32)0x00000080)) >> 7;
	*dpll_ro_vcls_en = (local_val & ((u32)0x00000040)) >> 6;
	*dpll_ro_drv_ldo_vrefsel = (local_val & ((u32)0x00000020)) >> 5;
	*dpll_ro_drv_ldo_vddsel = (local_val & ((u32)0x00000018)) >> 3;
	*dpll_ro_ldoen = (local_val & ((u32)0x00000004)) >> 2;
	*dpll_ro_drv_ldoen = (local_val & ((u32)0x00000002)) >> 1;
	*dpll_ro_drv_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_dpll_ctrl_0_dpll_tstclk_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_tstclk_en_setf(struct cl_chip *chip, u8 dplltstclken)
{
	ASSERT_ERR_CHIP((((u32)dplltstclken << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x00400000)) | ((u32)dplltstclken << 22));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_TSTCLK_EN .addr_index = 0x00000140, .size_minus_1 = (1 - 1), .shift = 22

static inline u8 rfic_regs_dpll_ctrl_0_dpll_refdiv_ldo_vrefsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_refdiv_ldo_vrefsel_setf(struct cl_chip *chip, u8 dpllrefdivldovrefsel)
{
	ASSERT_ERR_CHIP((((u32)dpllrefdivldovrefsel << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x00200000)) | ((u32)dpllrefdivldovrefsel << 21));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_REFDIV_LDO_VREFSEL .addr_index = 0x00000140, .size_minus_1 = (1 - 1), .shift = 21

static inline u8 rfic_regs_dpll_ctrl_0_dpll_refdiv_ldoen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_refdiv_ldoen_setf(struct cl_chip *chip, u8 dpllrefdivldoen)
{
	ASSERT_ERR_CHIP((((u32)dpllrefdivldoen << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x00100000)) | ((u32)dpllrefdivldoen << 20));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_REFDIV_LDOEN .addr_index = 0x00000140, .size_minus_1 = (1 - 1), .shift = 20

static inline u8 rfic_regs_dpll_ctrl_0_dpll_pfd_pw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x000C0000)) >> 18);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_pfd_pw_setf(struct cl_chip *chip, u8 dpllpfdpw)
{
	ASSERT_ERR_CHIP((((u32)dpllpfdpw << 18) & ~((u32)0x000C0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x000C0000)) | ((u32)dpllpfdpw << 18));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_PFD_PW .addr_index = 0x00000140, .size_minus_1 = (2 - 1), .shift = 18

static inline u8 rfic_regs_dpll_ctrl_0_dpll_pfd_tristate_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_pfd_tristate_setf(struct cl_chip *chip, u8 dpllpfdtristate)
{
	ASSERT_ERR_CHIP((((u32)dpllpfdtristate << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x00020000)) | ((u32)dpllpfdtristate << 17));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_PFD_TRISTATE .addr_index = 0x00000140, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_dpll_ctrl_0_dpll_pfd_cp_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_pfd_cp_en_setf(struct cl_chip *chip, u8 dpllpfdcpen)
{
	ASSERT_ERR_CHIP((((u32)dpllpfdcpen << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x00010000)) | ((u32)dpllpfdcpen << 16));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_PFD_CP_EN .addr_index = 0x00000140, .size_minus_1 = (1 - 1), .shift = 16

static inline u8 rfic_regs_dpll_ctrl_0_dpll_cp_rdgsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000C000)) >> 14);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_cp_rdgsel_setf(struct cl_chip *chip, u8 dpllcprdgsel)
{
	ASSERT_ERR_CHIP((((u32)dpllcprdgsel << 14) & ~((u32)0x0000C000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x0000C000)) | ((u32)dpllcprdgsel << 14));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_RDGSEL .addr_index = 0x00000140, .size_minus_1 = (2 - 1), .shift = 14

static inline u8 rfic_regs_dpll_ctrl_0_dpll_cp_iuptstrdgs_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00003000)) >> 12);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_cp_iuptstrdgs_setf(struct cl_chip *chip, u8 dpllcpiuptstrdgs)
{
	ASSERT_ERR_CHIP((((u32)dpllcpiuptstrdgs << 12) & ~((u32)0x00003000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x00003000)) | ((u32)dpllcpiuptstrdgs << 12));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_IUPTSTRDGS .addr_index = 0x00000140, .size_minus_1 = (2 - 1), .shift = 12

static inline u8 rfic_regs_dpll_ctrl_0_dpll_cp_idntstrdgs_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000C00)) >> 10);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_cp_idntstrdgs_setf(struct cl_chip *chip, u8 dpllcpidntstrdgs)
{
	ASSERT_ERR_CHIP((((u32)dpllcpidntstrdgs << 10) & ~((u32)0x00000C00)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x00000C00)) | ((u32)dpllcpidntstrdgs << 10));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_IDNTSTRDGS .addr_index = 0x00000140, .size_minus_1 = (2 - 1), .shift = 10

static inline u8 rfic_regs_dpll_ctrl_0_dpll_cpcs_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000300)) >> 8);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_cpcs_setf(struct cl_chip *chip, u8 dpllcpcs)
{
	ASSERT_ERR_CHIP((((u32)dpllcpcs << 8) & ~((u32)0x00000300)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x00000300)) | ((u32)dpllcpcs << 8));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_CPCS .addr_index = 0x00000140, .size_minus_1 = (2 - 1), .shift = 8

static inline u8 rfic_regs_dpll_ctrl_0_dpll_cp_ldoen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_cp_ldoen_setf(struct cl_chip *chip, u8 dpllcpldoen)
{
	ASSERT_ERR_CHIP((((u32)dpllcpldoen << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x00000080)) | ((u32)dpllcpldoen << 7));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_CP_LDOEN .addr_index = 0x00000140, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_dpll_ctrl_0_dpll_ro_vcls_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_ro_vcls_en_setf(struct cl_chip *chip, u8 dpllrovclsen)
{
	ASSERT_ERR_CHIP((((u32)dpllrovclsen << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x00000040)) | ((u32)dpllrovclsen << 6));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_VCLS_EN .addr_index = 0x00000140, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_dpll_ctrl_0_dpll_ro_drv_ldo_vrefsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_ro_drv_ldo_vrefsel_setf(struct cl_chip *chip, u8 dpllrodrvldovrefsel)
{
	ASSERT_ERR_CHIP((((u32)dpllrodrvldovrefsel << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x00000020)) | ((u32)dpllrodrvldovrefsel << 5));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_LDO_VREFSEL .addr_index = 0x00000140, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_dpll_ctrl_0_dpll_ro_drv_ldo_vddsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000018)) >> 3);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_ro_drv_ldo_vddsel_setf(struct cl_chip *chip, u8 dpllrodrvldovddsel)
{
	ASSERT_ERR_CHIP((((u32)dpllrodrvldovddsel << 3) & ~((u32)0x00000018)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x00000018)) | ((u32)dpllrodrvldovddsel << 3));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_LDO_VDDSEL .addr_index = 0x00000140, .size_minus_1 = (2 - 1), .shift = 3

static inline u8 rfic_regs_dpll_ctrl_0_dpll_ro_ldoen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_ro_ldoen_setf(struct cl_chip *chip, u8 dpllroldoen)
{
	ASSERT_ERR_CHIP((((u32)dpllroldoen << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x00000004)) | ((u32)dpllroldoen << 2));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_LDOEN .addr_index = 0x00000140, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_dpll_ctrl_0_dpll_ro_drv_ldoen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_ro_drv_ldoen_setf(struct cl_chip *chip, u8 dpllrodrvldoen)
{
	ASSERT_ERR_CHIP((((u32)dpllrodrvldoen << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x00000002)) | ((u32)dpllrodrvldoen << 1));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_LDOEN .addr_index = 0x00000140, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_dpll_ctrl_0_dpll_ro_drv_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_dpll_ctrl_0_dpll_ro_drv_en_setf(struct cl_chip *chip, u8 dpllrodrven)
{
	ASSERT_ERR_CHIP((((u32)dpllrodrven << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)dpllrodrven << 0));
}

#define RFIC_REGS_DPLL_CTRL_0_DPLL_RO_DRV_EN .addr_index = 0x00000140, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief DPLL_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:30 dpll_tstclk_sel           0x00000000
 *    29:24 dpll_div_int              0x00000020
 *    23    dpll_div_ldo_vrefsel      00000000
 *    22:21 dpll_div_ldo_vddsel       0x00000000
 *    20    dpll_div_ldoen            00000001
 *    19    dpll_lpf_dcselh           00000001
 *    18    dpll_lpf_cmpen            00000001
 *    17    dpll_lpf_caltst           00000000
 *    16:14 dpll_lpf_seul             0x00000003
 *    13:11 dpll_lpf_sell             0x00000003
 *    10:06 dpll_lpfr                 0x0000000d
 *    05:03 dpll_lpfc1                0x00000005
 *    02:00 dpll_lpfc3                0x00000003
 * </pre>
 */
#define RFIC_REGS_DPLL_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000504)
#define RFIC_REGS_DPLL_CTRL_1_OFFSET      0x00000504
#define RFIC_REGS_DPLL_CTRL_1_INDEX       0x00000141
#define RFIC_REGS_DPLL_CTRL_1_RESET       0x201CDB6B

static inline u32 rfic_regs_dpll_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR);
}

static inline void rfic_regs_dpll_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_1_ADDR, value);
}

#define RFIC_REGS_DPLL_CTRL_1 .addr_index = 0x00000141, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_DPLL_CTRL_1_DPLL_TSTCLK_SEL_MASK    ((u32)0xC0000000)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_TSTCLK_SEL_LSB    30
#define RFIC_REGS_DPLL_CTRL_1_DPLL_TSTCLK_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_INT_MASK    ((u32)0x3F000000)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_INT_LSB    24
#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_INT_WIDTH    ((u32)0x00000006)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_LDO_VREFSEL_BIT    ((u32)0x00800000)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_LDO_VREFSEL_POS    23
#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_LDO_VDDSEL_MASK    ((u32)0x00600000)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_LDO_VDDSEL_LSB    21
#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_LDO_VDDSEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_LDOEN_BIT    ((u32)0x00100000)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_LDOEN_POS    20
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_DCSELH_BIT    ((u32)0x00080000)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_DCSELH_POS    19
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_CMPEN_BIT    ((u32)0x00040000)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_CMPEN_POS    18
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_CALTST_BIT    ((u32)0x00020000)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_CALTST_POS    17
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_SEUL_MASK    ((u32)0x0001C000)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_SEUL_LSB    14
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_SEUL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_SELL_MASK    ((u32)0x00003800)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_SELL_LSB    11
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_SELL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPFR_MASK    ((u32)0x000007C0)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPFR_LSB    6
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPFR_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPFC_1_MASK    ((u32)0x00000038)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPFC_1_LSB    3
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPFC_1_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPFC_3_MASK    ((u32)0x00000007)
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPFC_3_LSB    0
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPFC_3_WIDTH    ((u32)0x00000003)

#define RFIC_REGS_DPLL_CTRL_1_DPLL_TSTCLK_SEL_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_INT_RST    0x00000020
#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_LDO_VREFSEL_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_LDO_VDDSEL_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_LDOEN_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_DCSELH_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_CMPEN_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_CALTST_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_SEUL_RST    0x00000003
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_SELL_RST    0x00000003
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPFR_RST    0x0000000d
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPFC_1_RST    0x00000005
#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPFC_3_RST    0x00000003

static inline void rfic_regs_dpll_ctrl_1_pack(struct cl_chip *chip, u8 dpll_tstclk_sel, u8 dpll_div_int, u8 dpll_div_ldo_vrefsel, u8 dpll_div_ldo_vddsel, u8 dpll_div_ldoen, u8 dpll_lpf_dcselh, u8 dpll_lpf_cmpen, u8 dpll_lpf_caltst, u8 dpll_lpf_seul, u8 dpll_lpf_sell, u8 dpll_lpfr, u8 dpll_lpfc1, u8 dpll_lpfc3)
{
	ASSERT_ERR_CHIP((((u32)dpll_tstclk_sel << 30) & ~((u32)0xC0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_div_int << 24) & ~((u32)0x3F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_div_ldo_vrefsel << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_div_ldo_vddsel << 21) & ~((u32)0x00600000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_div_ldoen << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_lpf_dcselh << 19) & ~((u32)0x00080000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_lpf_cmpen << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_lpf_caltst << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_lpf_seul << 14) & ~((u32)0x0001C000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_lpf_sell << 11) & ~((u32)0x00003800)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_lpfr << 6) & ~((u32)0x000007C0)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_lpfc1 << 3) & ~((u32)0x00000038)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_lpfc3 << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_1_ADDR, ((u32)dpll_tstclk_sel << 30) | ((u32)dpll_div_int << 24) | ((u32)dpll_div_ldo_vrefsel << 23) | ((u32)dpll_div_ldo_vddsel << 21) | ((u32)dpll_div_ldoen << 20) | ((u32)dpll_lpf_dcselh << 19) | ((u32)dpll_lpf_cmpen << 18) | ((u32)dpll_lpf_caltst << 17) | ((u32)dpll_lpf_seul << 14) | ((u32)dpll_lpf_sell << 11) | ((u32)dpll_lpfr << 6) | ((u32)dpll_lpfc1 << 3) | ((u32)dpll_lpfc3 << 0));
}

static inline void rfic_regs_dpll_ctrl_1_unpack(struct cl_chip *chip, u8 *dpll_tstclk_sel, u8 *dpll_div_int, u8 *dpll_div_ldo_vrefsel, u8 *dpll_div_ldo_vddsel, u8 *dpll_div_ldoen, u8 *dpll_lpf_dcselh, u8 *dpll_lpf_cmpen, u8 *dpll_lpf_caltst, u8 *dpll_lpf_seul, u8 *dpll_lpf_sell, u8 *dpll_lpfr, u8 *dpll_lpfc1, u8 *dpll_lpfc3)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR);

	*dpll_tstclk_sel = (local_val & ((u32)0xC0000000)) >> 30;
	*dpll_div_int = (local_val & ((u32)0x3F000000)) >> 24;
	*dpll_div_ldo_vrefsel = (local_val & ((u32)0x00800000)) >> 23;
	*dpll_div_ldo_vddsel = (local_val & ((u32)0x00600000)) >> 21;
	*dpll_div_ldoen = (local_val & ((u32)0x00100000)) >> 20;
	*dpll_lpf_dcselh = (local_val & ((u32)0x00080000)) >> 19;
	*dpll_lpf_cmpen = (local_val & ((u32)0x00040000)) >> 18;
	*dpll_lpf_caltst = (local_val & ((u32)0x00020000)) >> 17;
	*dpll_lpf_seul = (local_val & ((u32)0x0001C000)) >> 14;
	*dpll_lpf_sell = (local_val & ((u32)0x00003800)) >> 11;
	*dpll_lpfr = (local_val & ((u32)0x000007C0)) >> 6;
	*dpll_lpfc1 = (local_val & ((u32)0x00000038)) >> 3;
	*dpll_lpfc3 = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 rfic_regs_dpll_ctrl_1_dpll_tstclk_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0xC0000000)) >> 30);
}

static inline void rfic_regs_dpll_ctrl_1_dpll_tstclk_sel_setf(struct cl_chip *chip, u8 dplltstclksel)
{
	ASSERT_ERR_CHIP((((u32)dplltstclksel << 30) & ~((u32)0xC0000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR) & ~((u32)0xC0000000)) | ((u32)dplltstclksel << 30));
}

#define RFIC_REGS_DPLL_CTRL_1_DPLL_TSTCLK_SEL .addr_index = 0x00000141, .size_minus_1 = (2 - 1), .shift = 30

static inline u8 rfic_regs_dpll_ctrl_1_dpll_div_int_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x3F000000)) >> 24);
}

static inline void rfic_regs_dpll_ctrl_1_dpll_div_int_setf(struct cl_chip *chip, u8 dplldivint)
{
	ASSERT_ERR_CHIP((((u32)dplldivint << 24) & ~((u32)0x3F000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR) & ~((u32)0x3F000000)) | ((u32)dplldivint << 24));
}

#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_INT .addr_index = 0x00000141, .size_minus_1 = (6 - 1), .shift = 24

static inline u8 rfic_regs_dpll_ctrl_1_dpll_div_ldo_vrefsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void rfic_regs_dpll_ctrl_1_dpll_div_ldo_vrefsel_setf(struct cl_chip *chip, u8 dplldivldovrefsel)
{
	ASSERT_ERR_CHIP((((u32)dplldivldovrefsel << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR) & ~((u32)0x00800000)) | ((u32)dplldivldovrefsel << 23));
}

#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_LDO_VREFSEL .addr_index = 0x00000141, .size_minus_1 = (1 - 1), .shift = 23

static inline u8 rfic_regs_dpll_ctrl_1_dpll_div_ldo_vddsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00600000)) >> 21);
}

static inline void rfic_regs_dpll_ctrl_1_dpll_div_ldo_vddsel_setf(struct cl_chip *chip, u8 dplldivldovddsel)
{
	ASSERT_ERR_CHIP((((u32)dplldivldovddsel << 21) & ~((u32)0x00600000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR) & ~((u32)0x00600000)) | ((u32)dplldivldovddsel << 21));
}

#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_LDO_VDDSEL .addr_index = 0x00000141, .size_minus_1 = (2 - 1), .shift = 21

static inline u8 rfic_regs_dpll_ctrl_1_dpll_div_ldoen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void rfic_regs_dpll_ctrl_1_dpll_div_ldoen_setf(struct cl_chip *chip, u8 dplldivldoen)
{
	ASSERT_ERR_CHIP((((u32)dplldivldoen << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR) & ~((u32)0x00100000)) | ((u32)dplldivldoen << 20));
}

#define RFIC_REGS_DPLL_CTRL_1_DPLL_DIV_LDOEN .addr_index = 0x00000141, .size_minus_1 = (1 - 1), .shift = 20

static inline u8 rfic_regs_dpll_ctrl_1_dpll_lpf_dcselh_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline void rfic_regs_dpll_ctrl_1_dpll_lpf_dcselh_setf(struct cl_chip *chip, u8 dplllpfdcselh)
{
	ASSERT_ERR_CHIP((((u32)dplllpfdcselh << 19) & ~((u32)0x00080000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR) & ~((u32)0x00080000)) | ((u32)dplllpfdcselh << 19));
}

#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_DCSELH .addr_index = 0x00000141, .size_minus_1 = (1 - 1), .shift = 19

static inline u8 rfic_regs_dpll_ctrl_1_dpll_lpf_cmpen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void rfic_regs_dpll_ctrl_1_dpll_lpf_cmpen_setf(struct cl_chip *chip, u8 dplllpfcmpen)
{
	ASSERT_ERR_CHIP((((u32)dplllpfcmpen << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR) & ~((u32)0x00040000)) | ((u32)dplllpfcmpen << 18));
}

#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_CMPEN .addr_index = 0x00000141, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_dpll_ctrl_1_dpll_lpf_caltst_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_dpll_ctrl_1_dpll_lpf_caltst_setf(struct cl_chip *chip, u8 dplllpfcaltst)
{
	ASSERT_ERR_CHIP((((u32)dplllpfcaltst << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR) & ~((u32)0x00020000)) | ((u32)dplllpfcaltst << 17));
}

#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_CALTST .addr_index = 0x00000141, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_dpll_ctrl_1_dpll_lpf_seul_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0001C000)) >> 14);
}

static inline void rfic_regs_dpll_ctrl_1_dpll_lpf_seul_setf(struct cl_chip *chip, u8 dplllpfseul)
{
	ASSERT_ERR_CHIP((((u32)dplllpfseul << 14) & ~((u32)0x0001C000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR) & ~((u32)0x0001C000)) | ((u32)dplllpfseul << 14));
}

#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_SEUL .addr_index = 0x00000141, .size_minus_1 = (3 - 1), .shift = 14

static inline u8 rfic_regs_dpll_ctrl_1_dpll_lpf_sell_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00003800)) >> 11);
}

static inline void rfic_regs_dpll_ctrl_1_dpll_lpf_sell_setf(struct cl_chip *chip, u8 dplllpfsell)
{
	ASSERT_ERR_CHIP((((u32)dplllpfsell << 11) & ~((u32)0x00003800)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR) & ~((u32)0x00003800)) | ((u32)dplllpfsell << 11));
}

#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPF_SELL .addr_index = 0x00000141, .size_minus_1 = (3 - 1), .shift = 11

static inline u8 rfic_regs_dpll_ctrl_1_dpll_lpfr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x000007C0)) >> 6);
}

static inline void rfic_regs_dpll_ctrl_1_dpll_lpfr_setf(struct cl_chip *chip, u8 dplllpfr)
{
	ASSERT_ERR_CHIP((((u32)dplllpfr << 6) & ~((u32)0x000007C0)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR) & ~((u32)0x000007C0)) | ((u32)dplllpfr << 6));
}

#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPFR .addr_index = 0x00000141, .size_minus_1 = (5 - 1), .shift = 6

static inline u8 rfic_regs_dpll_ctrl_1_dpll_lpfc_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000038)) >> 3);
}

static inline void rfic_regs_dpll_ctrl_1_dpll_lpfc_1_setf(struct cl_chip *chip, u8 dplllpfc1)
{
	ASSERT_ERR_CHIP((((u32)dplllpfc1 << 3) & ~((u32)0x00000038)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR) & ~((u32)0x00000038)) | ((u32)dplllpfc1 << 3));
}

#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPFC_1 .addr_index = 0x00000141, .size_minus_1 = (3 - 1), .shift = 3

static inline u8 rfic_regs_dpll_ctrl_1_dpll_lpfc_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void rfic_regs_dpll_ctrl_1_dpll_lpfc_3_setf(struct cl_chip *chip, u8 dplllpfc3)
{
	ASSERT_ERR_CHIP((((u32)dplllpfc3 << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_1_ADDR) & ~((u32)0x00000007)) | ((u32)dplllpfc3 << 0));
}

#define RFIC_REGS_DPLL_CTRL_1_DPLL_LPFC_3 .addr_index = 0x00000141, .size_minus_1 = (3 - 1), .shift = 0

/**
 * @brief DPLL_CTRL_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:22 dpll_fsm_lockdet_acc      0x00000000
 *    21:20 dpll_fsm_ld_avgset        0x00000000
 *    19    dpll_fsm_lock_deten       00000001
 *    18    dpll_fsm_power_on_seq_start 00000001
 *    17    dpll_fsm_manual_mode_en   00000000
 *    16    dpll_fsm_vctrl_high_flag_clr 00000000
 *    15    dpll_fsm_vctrl_low_flag_clr 00000000
 *    14    dpll_fsm_lockdet_sticky_clr 00000000
 *    13    dpll_fsm_rstn             00000001
 *    12    dpll_fsm_cal_start        00000001
 *    11    dpll_extcal_settings_en   00000000
 *    10:09 dpll_fsm_freq_update      0x00000003
 *    08    dpll_fsm_skip_lbwcal      00000000
 *    07    dpll_fsm_soft_rstn        00000001
 *    06:03 dpll_fsm_freq_meas_dur    0x0000000a
 *    02:00 dpll_fsm_kvco_meas_time   0x00000000
 * </pre>
 */
#define RFIC_REGS_DPLL_CTRL_2_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000508)
#define RFIC_REGS_DPLL_CTRL_2_OFFSET      0x00000508
#define RFIC_REGS_DPLL_CTRL_2_INDEX       0x00000142
#define RFIC_REGS_DPLL_CTRL_2_RESET       0x000C36D0

static inline u32 rfic_regs_dpll_ctrl_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);
}

static inline void rfic_regs_dpll_ctrl_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, value);
}

#define RFIC_REGS_DPLL_CTRL_2 .addr_index = 0x00000142, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LOCKDET_ACC_MASK    ((u32)0x00C00000)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LOCKDET_ACC_LSB    22
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LOCKDET_ACC_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LD_AVGSET_MASK    ((u32)0x00300000)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LD_AVGSET_LSB    20
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LD_AVGSET_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LOCK_DETEN_BIT    ((u32)0x00080000)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LOCK_DETEN_POS    19
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_POWER_ON_SEQ_START_BIT    ((u32)0x00040000)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_POWER_ON_SEQ_START_POS    18
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_MANUAL_MODE_EN_BIT    ((u32)0x00020000)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_MANUAL_MODE_EN_POS    17
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_VCTRL_HIGH_FLAG_CLR_BIT    ((u32)0x00010000)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_VCTRL_HIGH_FLAG_CLR_POS    16
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_VCTRL_LOW_FLAG_CLR_BIT    ((u32)0x00008000)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_VCTRL_LOW_FLAG_CLR_POS    15
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LOCKDET_STICKY_CLR_BIT    ((u32)0x00004000)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LOCKDET_STICKY_CLR_POS    14
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_RSTN_BIT    ((u32)0x00002000)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_RSTN_POS    13
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_CAL_START_BIT    ((u32)0x00001000)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_CAL_START_POS    12
#define RFIC_REGS_DPLL_CTRL_2_DPLL_EXTCAL_SETTINGS_EN_BIT    ((u32)0x00000800)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_EXTCAL_SETTINGS_EN_POS    11
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_FREQ_UPDATE_MASK    ((u32)0x00000600)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_FREQ_UPDATE_LSB    9
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_FREQ_UPDATE_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_SKIP_LBWCAL_BIT    ((u32)0x00000100)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_SKIP_LBWCAL_POS    8
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_SOFT_RSTN_BIT    ((u32)0x00000080)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_SOFT_RSTN_POS    7
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_FREQ_MEAS_DUR_MASK    ((u32)0x00000078)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_FREQ_MEAS_DUR_LSB    3
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_FREQ_MEAS_DUR_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_KVCO_MEAS_TIME_MASK    ((u32)0x00000007)
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_KVCO_MEAS_TIME_LSB    0
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_KVCO_MEAS_TIME_WIDTH    ((u32)0x00000003)

#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LOCKDET_ACC_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LD_AVGSET_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LOCK_DETEN_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_POWER_ON_SEQ_START_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_MANUAL_MODE_EN_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_VCTRL_HIGH_FLAG_CLR_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_VCTRL_LOW_FLAG_CLR_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LOCKDET_STICKY_CLR_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_RSTN_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_CAL_START_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_2_DPLL_EXTCAL_SETTINGS_EN_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_FREQ_UPDATE_RST    0x00000003
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_SKIP_LBWCAL_RST    0x00000000
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_SOFT_RSTN_RST    0x00000001
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_FREQ_MEAS_DUR_RST    0x0000000a
#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_KVCO_MEAS_TIME_RST    0x00000000

static inline void rfic_regs_dpll_ctrl_2_pack(struct cl_chip *chip, u8 dpll_fsm_lockdet_acc, u8 dpll_fsm_ld_avgset, u8 dpll_fsm_lock_deten, u8 dpll_fsm_power_on_seq_start, u8 dpll_fsm_manual_mode_en, u8 dpll_fsm_vctrl_high_flag_clr, u8 dpll_fsm_vctrl_low_flag_clr, u8 dpll_fsm_lockdet_sticky_clr, u8 dpll_fsm_rstn, u8 dpll_fsm_cal_start, u8 dpll_extcal_settings_en, u8 dpll_fsm_freq_update, u8 dpll_fsm_skip_lbwcal, u8 dpll_fsm_soft_rstn, u8 dpll_fsm_freq_meas_dur, u8 dpll_fsm_kvco_meas_time)
{
	ASSERT_ERR_CHIP((((u32)dpll_fsm_lockdet_acc << 22) & ~((u32)0x00C00000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_fsm_ld_avgset << 20) & ~((u32)0x00300000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_fsm_lock_deten << 19) & ~((u32)0x00080000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_fsm_power_on_seq_start << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_fsm_manual_mode_en << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_fsm_vctrl_high_flag_clr << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_fsm_vctrl_low_flag_clr << 15) & ~((u32)0x00008000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_fsm_lockdet_sticky_clr << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_fsm_rstn << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_fsm_cal_start << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_extcal_settings_en << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_fsm_freq_update << 9) & ~((u32)0x00000600)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_fsm_skip_lbwcal << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_fsm_soft_rstn << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_fsm_freq_meas_dur << 3) & ~((u32)0x00000078)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_fsm_kvco_meas_time << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, ((u32)dpll_fsm_lockdet_acc << 22) | ((u32)dpll_fsm_ld_avgset << 20) | ((u32)dpll_fsm_lock_deten << 19) | ((u32)dpll_fsm_power_on_seq_start << 18) | ((u32)dpll_fsm_manual_mode_en << 17) | ((u32)dpll_fsm_vctrl_high_flag_clr << 16) | ((u32)dpll_fsm_vctrl_low_flag_clr << 15) | ((u32)dpll_fsm_lockdet_sticky_clr << 14) | ((u32)dpll_fsm_rstn << 13) | ((u32)dpll_fsm_cal_start << 12) | ((u32)dpll_extcal_settings_en << 11) | ((u32)dpll_fsm_freq_update << 9) | ((u32)dpll_fsm_skip_lbwcal << 8) | ((u32)dpll_fsm_soft_rstn << 7) | ((u32)dpll_fsm_freq_meas_dur << 3) | ((u32)dpll_fsm_kvco_meas_time << 0));
}

static inline void rfic_regs_dpll_ctrl_2_unpack(struct cl_chip *chip, u8 *dpll_fsm_lockdet_acc, u8 *dpll_fsm_ld_avgset, u8 *dpll_fsm_lock_deten, u8 *dpll_fsm_power_on_seq_start, u8 *dpll_fsm_manual_mode_en, u8 *dpll_fsm_vctrl_high_flag_clr, u8 *dpll_fsm_vctrl_low_flag_clr, u8 *dpll_fsm_lockdet_sticky_clr, u8 *dpll_fsm_rstn, u8 *dpll_fsm_cal_start, u8 *dpll_extcal_settings_en, u8 *dpll_fsm_freq_update, u8 *dpll_fsm_skip_lbwcal, u8 *dpll_fsm_soft_rstn, u8 *dpll_fsm_freq_meas_dur, u8 *dpll_fsm_kvco_meas_time)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	*dpll_fsm_lockdet_acc = (local_val & ((u32)0x00C00000)) >> 22;
	*dpll_fsm_ld_avgset = (local_val & ((u32)0x00300000)) >> 20;
	*dpll_fsm_lock_deten = (local_val & ((u32)0x00080000)) >> 19;
	*dpll_fsm_power_on_seq_start = (local_val & ((u32)0x00040000)) >> 18;
	*dpll_fsm_manual_mode_en = (local_val & ((u32)0x00020000)) >> 17;
	*dpll_fsm_vctrl_high_flag_clr = (local_val & ((u32)0x00010000)) >> 16;
	*dpll_fsm_vctrl_low_flag_clr = (local_val & ((u32)0x00008000)) >> 15;
	*dpll_fsm_lockdet_sticky_clr = (local_val & ((u32)0x00004000)) >> 14;
	*dpll_fsm_rstn = (local_val & ((u32)0x00002000)) >> 13;
	*dpll_fsm_cal_start = (local_val & ((u32)0x00001000)) >> 12;
	*dpll_extcal_settings_en = (local_val & ((u32)0x00000800)) >> 11;
	*dpll_fsm_freq_update = (local_val & ((u32)0x00000600)) >> 9;
	*dpll_fsm_skip_lbwcal = (local_val & ((u32)0x00000100)) >> 8;
	*dpll_fsm_soft_rstn = (local_val & ((u32)0x00000080)) >> 7;
	*dpll_fsm_freq_meas_dur = (local_val & ((u32)0x00000078)) >> 3;
	*dpll_fsm_kvco_meas_time = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 rfic_regs_dpll_ctrl_2_dpll_fsm_lockdet_acc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00C00000)) >> 22);
}

static inline void rfic_regs_dpll_ctrl_2_dpll_fsm_lockdet_acc_setf(struct cl_chip *chip, u8 dpllfsmlockdetacc)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmlockdetacc << 22) & ~((u32)0x00C00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR) & ~((u32)0x00C00000)) | ((u32)dpllfsmlockdetacc << 22));
}

#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LOCKDET_ACC .addr_index = 0x00000142, .size_minus_1 = (2 - 1), .shift = 22

static inline u8 rfic_regs_dpll_ctrl_2_dpll_fsm_ld_avgset_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00300000)) >> 20);
}

static inline void rfic_regs_dpll_ctrl_2_dpll_fsm_ld_avgset_setf(struct cl_chip *chip, u8 dpllfsmldavgset)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmldavgset << 20) & ~((u32)0x00300000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR) & ~((u32)0x00300000)) | ((u32)dpllfsmldavgset << 20));
}

#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LD_AVGSET .addr_index = 0x00000142, .size_minus_1 = (2 - 1), .shift = 20

static inline u8 rfic_regs_dpll_ctrl_2_dpll_fsm_lock_deten_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline void rfic_regs_dpll_ctrl_2_dpll_fsm_lock_deten_setf(struct cl_chip *chip, u8 dpllfsmlockdeten)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmlockdeten << 19) & ~((u32)0x00080000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR) & ~((u32)0x00080000)) | ((u32)dpllfsmlockdeten << 19));
}

#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LOCK_DETEN .addr_index = 0x00000142, .size_minus_1 = (1 - 1), .shift = 19

static inline u8 rfic_regs_dpll_ctrl_2_dpll_fsm_power_on_seq_start_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void rfic_regs_dpll_ctrl_2_dpll_fsm_power_on_seq_start_setf(struct cl_chip *chip, u8 dpllfsmpoweronseqstart)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmpoweronseqstart << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR) & ~((u32)0x00040000)) | ((u32)dpllfsmpoweronseqstart << 18));
}

#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_POWER_ON_SEQ_START .addr_index = 0x00000142, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_dpll_ctrl_2_dpll_fsm_manual_mode_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_dpll_ctrl_2_dpll_fsm_manual_mode_en_setf(struct cl_chip *chip, u8 dpllfsmmanualmodeen)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmmanualmodeen << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR) & ~((u32)0x00020000)) | ((u32)dpllfsmmanualmodeen << 17));
}

#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_MANUAL_MODE_EN .addr_index = 0x00000142, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_dpll_ctrl_2_dpll_fsm_vctrl_high_flag_clr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void rfic_regs_dpll_ctrl_2_dpll_fsm_vctrl_high_flag_clr_setf(struct cl_chip *chip, u8 dpllfsmvctrlhighflagclr)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmvctrlhighflagclr << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR) & ~((u32)0x00010000)) | ((u32)dpllfsmvctrlhighflagclr << 16));
}

#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_VCTRL_HIGH_FLAG_CLR .addr_index = 0x00000142, .size_minus_1 = (1 - 1), .shift = 16

static inline u8 rfic_regs_dpll_ctrl_2_dpll_fsm_vctrl_low_flag_clr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline void rfic_regs_dpll_ctrl_2_dpll_fsm_vctrl_low_flag_clr_setf(struct cl_chip *chip, u8 dpllfsmvctrllowflagclr)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmvctrllowflagclr << 15) & ~((u32)0x00008000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR) & ~((u32)0x00008000)) | ((u32)dpllfsmvctrllowflagclr << 15));
}

#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_VCTRL_LOW_FLAG_CLR .addr_index = 0x00000142, .size_minus_1 = (1 - 1), .shift = 15

static inline u8 rfic_regs_dpll_ctrl_2_dpll_fsm_lockdet_sticky_clr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void rfic_regs_dpll_ctrl_2_dpll_fsm_lockdet_sticky_clr_setf(struct cl_chip *chip, u8 dpllfsmlockdetstickyclr)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmlockdetstickyclr << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR) & ~((u32)0x00004000)) | ((u32)dpllfsmlockdetstickyclr << 14));
}

#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_LOCKDET_STICKY_CLR .addr_index = 0x00000142, .size_minus_1 = (1 - 1), .shift = 14

static inline u8 rfic_regs_dpll_ctrl_2_dpll_fsm_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void rfic_regs_dpll_ctrl_2_dpll_fsm_rstn_setf(struct cl_chip *chip, u8 dpllfsmrstn)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmrstn << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR) & ~((u32)0x00002000)) | ((u32)dpllfsmrstn << 13));
}

#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_RSTN .addr_index = 0x00000142, .size_minus_1 = (1 - 1), .shift = 13

static inline u8 rfic_regs_dpll_ctrl_2_dpll_fsm_cal_start_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void rfic_regs_dpll_ctrl_2_dpll_fsm_cal_start_setf(struct cl_chip *chip, u8 dpllfsmcalstart)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmcalstart << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR) & ~((u32)0x00001000)) | ((u32)dpllfsmcalstart << 12));
}

#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_CAL_START .addr_index = 0x00000142, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_dpll_ctrl_2_dpll_extcal_settings_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void rfic_regs_dpll_ctrl_2_dpll_extcal_settings_en_setf(struct cl_chip *chip, u8 dpllextcalsettingsen)
{
	ASSERT_ERR_CHIP((((u32)dpllextcalsettingsen << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR) & ~((u32)0x00000800)) | ((u32)dpllextcalsettingsen << 11));
}

#define RFIC_REGS_DPLL_CTRL_2_DPLL_EXTCAL_SETTINGS_EN .addr_index = 0x00000142, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_dpll_ctrl_2_dpll_fsm_freq_update_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000600)) >> 9);
}

static inline void rfic_regs_dpll_ctrl_2_dpll_fsm_freq_update_setf(struct cl_chip *chip, u8 dpllfsmfrequpdate)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmfrequpdate << 9) & ~((u32)0x00000600)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR) & ~((u32)0x00000600)) | ((u32)dpllfsmfrequpdate << 9));
}

#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_FREQ_UPDATE .addr_index = 0x00000142, .size_minus_1 = (2 - 1), .shift = 9

static inline u8 rfic_regs_dpll_ctrl_2_dpll_fsm_skip_lbwcal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_dpll_ctrl_2_dpll_fsm_skip_lbwcal_setf(struct cl_chip *chip, u8 dpllfsmskiplbwcal)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmskiplbwcal << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR) & ~((u32)0x00000100)) | ((u32)dpllfsmskiplbwcal << 8));
}

#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_SKIP_LBWCAL .addr_index = 0x00000142, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_dpll_ctrl_2_dpll_fsm_soft_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_dpll_ctrl_2_dpll_fsm_soft_rstn_setf(struct cl_chip *chip, u8 dpllfsmsoftrstn)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmsoftrstn << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR) & ~((u32)0x00000080)) | ((u32)dpllfsmsoftrstn << 7));
}

#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_SOFT_RSTN .addr_index = 0x00000142, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_dpll_ctrl_2_dpll_fsm_freq_meas_dur_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000078)) >> 3);
}

static inline void rfic_regs_dpll_ctrl_2_dpll_fsm_freq_meas_dur_setf(struct cl_chip *chip, u8 dpllfsmfreqmeasdur)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmfreqmeasdur << 3) & ~((u32)0x00000078)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR) & ~((u32)0x00000078)) | ((u32)dpllfsmfreqmeasdur << 3));
}

#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_FREQ_MEAS_DUR .addr_index = 0x00000142, .size_minus_1 = (4 - 1), .shift = 3

static inline u8 rfic_regs_dpll_ctrl_2_dpll_fsm_kvco_meas_time_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void rfic_regs_dpll_ctrl_2_dpll_fsm_kvco_meas_time_setf(struct cl_chip *chip, u8 dpllfsmkvcomeastime)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmkvcomeastime << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_2_ADDR) & ~((u32)0x00000007)) | ((u32)dpllfsmkvcomeastime << 0));
}

#define RFIC_REGS_DPLL_CTRL_2_DPLL_FSM_KVCO_MEAS_TIME .addr_index = 0x00000142, .size_minus_1 = (3 - 1), .shift = 0

/**
 * @brief DPLL_CTRL_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    17:00 dpll_fsm_freq_target      0x00000c80
 * </pre>
 */
#define RFIC_REGS_DPLL_CTRL_3_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000050C)
#define RFIC_REGS_DPLL_CTRL_3_OFFSET      0x0000050C
#define RFIC_REGS_DPLL_CTRL_3_INDEX       0x00000143
#define RFIC_REGS_DPLL_CTRL_3_RESET       0x00000C80

static inline u32 rfic_regs_dpll_ctrl_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_3_ADDR);
}

static inline void rfic_regs_dpll_ctrl_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_3_ADDR, value);
}

#define RFIC_REGS_DPLL_CTRL_3 .addr_index = 0x00000143, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_DPLL_CTRL_3_DPLL_FSM_FREQ_TARGET_MASK    ((u32)0x0003FFFF)
#define RFIC_REGS_DPLL_CTRL_3_DPLL_FSM_FREQ_TARGET_LSB    0
#define RFIC_REGS_DPLL_CTRL_3_DPLL_FSM_FREQ_TARGET_WIDTH    ((u32)0x00000012)

#define RFIC_REGS_DPLL_CTRL_3_DPLL_FSM_FREQ_TARGET_RST    0x00000c80

static inline u32 rfic_regs_dpll_ctrl_3_dpll_fsm_freq_target_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_CTRL_3_ADDR);

	return (u32)(local_val >> 0);
}

static inline void rfic_regs_dpll_ctrl_3_dpll_fsm_freq_target_setf(struct cl_chip *chip, u32 dpllfsmfreqtarget)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmfreqtarget << 0) & ~((u32)0x0003FFFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_CTRL_3_ADDR, (u32)dpllfsmfreqtarget << 0);
}

#define RFIC_REGS_DPLL_CTRL_3_DPLL_FSM_FREQ_TARGET .addr_index = 0x00000143, .size_minus_1 = (18 - 1), .shift = 0

/**
 * @brief DPLL_REGOUT_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:28 dpll_fsm_cal_lpf_c3_cal_val 0x00000000
 *    27:23 dpll_fsm_cal_lpf_rz_cal_val 0x00000000
 *    22:20 dpll_fsm_cal_lpf_c1_cal_val 0x00000000
 *    19    dpll_vctrl_low_flag       00000000
 *    18    dpll_vctrl_high_flag      00000000
 *    17:00 dpll_cal_freqcntr         0x00000000
 * </pre>
 */
#define RFIC_REGS_DPLL_REGOUT_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000510)
#define RFIC_REGS_DPLL_REGOUT_0_OFFSET      0x00000510
#define RFIC_REGS_DPLL_REGOUT_0_INDEX       0x00000144
#define RFIC_REGS_DPLL_REGOUT_0_RESET       0x00000000

static inline u32 rfic_regs_dpll_regout_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_0_ADDR);
}

#define RFIC_REGS_DPLL_REGOUT_0 .addr_index = 0x00000144, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_FSM_CAL_LPF_C_3_CAL_VAL_MASK    ((u32)0x70000000)
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_FSM_CAL_LPF_C_3_CAL_VAL_LSB    28
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_FSM_CAL_LPF_C_3_CAL_VAL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_FSM_CAL_LPF_RZ_CAL_VAL_MASK    ((u32)0x0F800000)
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_FSM_CAL_LPF_RZ_CAL_VAL_LSB    23
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_FSM_CAL_LPF_RZ_CAL_VAL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_FSM_CAL_LPF_C_1_CAL_VAL_MASK    ((u32)0x00700000)
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_FSM_CAL_LPF_C_1_CAL_VAL_LSB    20
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_FSM_CAL_LPF_C_1_CAL_VAL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_VCTRL_LOW_FLAG_BIT    ((u32)0x00080000)
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_VCTRL_LOW_FLAG_POS    19
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_VCTRL_HIGH_FLAG_BIT    ((u32)0x00040000)
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_VCTRL_HIGH_FLAG_POS    18
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_CAL_FREQCNTR_MASK    ((u32)0x0003FFFF)
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_CAL_FREQCNTR_LSB    0
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_CAL_FREQCNTR_WIDTH    ((u32)0x00000012)

#define RFIC_REGS_DPLL_REGOUT_0_DPLL_FSM_CAL_LPF_C_3_CAL_VAL_RST    0x00000000
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_FSM_CAL_LPF_RZ_CAL_VAL_RST    0x00000000
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_FSM_CAL_LPF_C_1_CAL_VAL_RST    0x00000000
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_VCTRL_LOW_FLAG_RST    0x00000000
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_VCTRL_HIGH_FLAG_RST    0x00000000
#define RFIC_REGS_DPLL_REGOUT_0_DPLL_CAL_FREQCNTR_RST    0x00000000

static inline void rfic_regs_dpll_regout_0_unpack(struct cl_chip *chip, u8 *dpll_fsm_cal_lpf_c3_cal_val, u8 *dpll_fsm_cal_lpf_rz_cal_val, u8 *dpll_fsm_cal_lpf_c1_cal_val, u8 *dpll_vctrl_low_flag, u8 *dpll_vctrl_high_flag, u32 *dpll_cal_freqcntr)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_0_ADDR);

	*dpll_fsm_cal_lpf_c3_cal_val = (local_val & ((u32)0x70000000)) >> 28;
	*dpll_fsm_cal_lpf_rz_cal_val = (local_val & ((u32)0x0F800000)) >> 23;
	*dpll_fsm_cal_lpf_c1_cal_val = (local_val & ((u32)0x00700000)) >> 20;
	*dpll_vctrl_low_flag = (local_val & ((u32)0x00080000)) >> 19;
	*dpll_vctrl_high_flag = (local_val & ((u32)0x00040000)) >> 18;
	*dpll_cal_freqcntr = (local_val & ((u32)0x0003FFFF)) >> 0;
}

static inline u8 rfic_regs_dpll_regout_0_dpll_fsm_cal_lpf_c_3_cal_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_0_ADDR);

	return (u8)((local_val & ((u32)0x70000000)) >> 28);
}

#define RFIC_REGS_DPLL_REGOUT_0_DPLL_FSM_CAL_LPF_C_3_CAL_VAL .addr_index = 0x00000144, .size_minus_1 = (3 - 1), .shift = 28

static inline u8 rfic_regs_dpll_regout_0_dpll_fsm_cal_lpf_rz_cal_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_0_ADDR);

	return (u8)((local_val & ((u32)0x0F800000)) >> 23);
}

#define RFIC_REGS_DPLL_REGOUT_0_DPLL_FSM_CAL_LPF_RZ_CAL_VAL .addr_index = 0x00000144, .size_minus_1 = (5 - 1), .shift = 23

static inline u8 rfic_regs_dpll_regout_0_dpll_fsm_cal_lpf_c_1_cal_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_0_ADDR);

	return (u8)((local_val & ((u32)0x00700000)) >> 20);
}

#define RFIC_REGS_DPLL_REGOUT_0_DPLL_FSM_CAL_LPF_C_1_CAL_VAL .addr_index = 0x00000144, .size_minus_1 = (3 - 1), .shift = 20

static inline u8 rfic_regs_dpll_regout_0_dpll_vctrl_low_flag_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_0_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

#define RFIC_REGS_DPLL_REGOUT_0_DPLL_VCTRL_LOW_FLAG .addr_index = 0x00000144, .size_minus_1 = (1 - 1), .shift = 19

static inline u8 rfic_regs_dpll_regout_0_dpll_vctrl_high_flag_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_0_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

#define RFIC_REGS_DPLL_REGOUT_0_DPLL_VCTRL_HIGH_FLAG .addr_index = 0x00000144, .size_minus_1 = (1 - 1), .shift = 18

static inline u32 rfic_regs_dpll_regout_0_dpll_cal_freqcntr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_0_ADDR);

	return (u32)((local_val & ((u32)0x0003FFFF)) >> 0);
}

#define RFIC_REGS_DPLL_REGOUT_0_DPLL_CAL_FREQCNTR .addr_index = 0x00000144, .size_minus_1 = (18 - 1), .shift = 0

/**
 * @brief DPLL_REGOUT_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:27 dpll_lpf_c3_out           0x00000000
 *    26:22 dpll_lpf_rz_out           0x00000000
 *    21:19 dpll_lpf_c1_out           0x00000000
 *    18:14 dpll_fsm_state_out        0x00000000
 *    13    dpll_fsm_ro_no_osc_ackn   00000000
 *    12    dpll_fsm_lock_det_sticky  00000000
 *    11    dpll_fsm_lock_detect      00000000
 *    10    dpll_fsm_calend_ackn      00000000
 *    09:00 dpll_spare_out1           0x00000000
 * </pre>
 */
#define RFIC_REGS_DPLL_REGOUT_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000514)
#define RFIC_REGS_DPLL_REGOUT_1_OFFSET      0x00000514
#define RFIC_REGS_DPLL_REGOUT_1_INDEX       0x00000145
#define RFIC_REGS_DPLL_REGOUT_1_RESET       0x00000000

static inline u32 rfic_regs_dpll_regout_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_1_ADDR);
}

#define RFIC_REGS_DPLL_REGOUT_1 .addr_index = 0x00000145, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_LPF_C_3_OUT_MASK    ((u32)0x38000000)
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_LPF_C_3_OUT_LSB    27
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_LPF_C_3_OUT_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_LPF_RZ_OUT_MASK    ((u32)0x07C00000)
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_LPF_RZ_OUT_LSB    22
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_LPF_RZ_OUT_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_LPF_C_1_OUT_MASK    ((u32)0x00380000)
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_LPF_C_1_OUT_LSB    19
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_LPF_C_1_OUT_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_STATE_OUT_MASK    ((u32)0x0007C000)
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_STATE_OUT_LSB    14
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_STATE_OUT_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_RO_NO_OSC_ACKN_BIT    ((u32)0x00002000)
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_RO_NO_OSC_ACKN_POS    13
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_LOCK_DET_STICKY_BIT    ((u32)0x00001000)
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_LOCK_DET_STICKY_POS    12
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_LOCK_DETECT_BIT    ((u32)0x00000800)
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_LOCK_DETECT_POS    11
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_CALEND_ACKN_BIT    ((u32)0x00000400)
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_CALEND_ACKN_POS    10
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_SPARE_OUT_1_MASK    ((u32)0x000003FF)
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_SPARE_OUT_1_LSB    0
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_SPARE_OUT_1_WIDTH    ((u32)0x0000000A)

#define RFIC_REGS_DPLL_REGOUT_1_DPLL_LPF_C_3_OUT_RST    0x00000000
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_LPF_RZ_OUT_RST    0x00000000
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_LPF_C_1_OUT_RST    0x00000000
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_STATE_OUT_RST    0x00000000
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_RO_NO_OSC_ACKN_RST    0x00000000
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_LOCK_DET_STICKY_RST    0x00000000
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_LOCK_DETECT_RST    0x00000000
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_CALEND_ACKN_RST    0x00000000
#define RFIC_REGS_DPLL_REGOUT_1_DPLL_SPARE_OUT_1_RST    0x00000000

static inline void rfic_regs_dpll_regout_1_unpack(struct cl_chip *chip, u8 *dpll_lpf_c3_out, u8 *dpll_lpf_rz_out, u8 *dpll_lpf_c1_out, u8 *dpll_fsm_state_out, u8 *dpll_fsm_ro_no_osc_ackn, u8 *dpll_fsm_lock_det_sticky, u8 *dpll_fsm_lock_detect, u8 *dpll_fsm_calend_ackn, u16 *dpll_spare_out1)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_1_ADDR);

	*dpll_lpf_c3_out = (local_val & ((u32)0x38000000)) >> 27;
	*dpll_lpf_rz_out = (local_val & ((u32)0x07C00000)) >> 22;
	*dpll_lpf_c1_out = (local_val & ((u32)0x00380000)) >> 19;
	*dpll_fsm_state_out = (local_val & ((u32)0x0007C000)) >> 14;
	*dpll_fsm_ro_no_osc_ackn = (local_val & ((u32)0x00002000)) >> 13;
	*dpll_fsm_lock_det_sticky = (local_val & ((u32)0x00001000)) >> 12;
	*dpll_fsm_lock_detect = (local_val & ((u32)0x00000800)) >> 11;
	*dpll_fsm_calend_ackn = (local_val & ((u32)0x00000400)) >> 10;
	*dpll_spare_out1 = (local_val & ((u32)0x000003FF)) >> 0;
}

static inline u8 rfic_regs_dpll_regout_1_dpll_lpf_c_3_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_1_ADDR);

	return (u8)((local_val & ((u32)0x38000000)) >> 27);
}

#define RFIC_REGS_DPLL_REGOUT_1_DPLL_LPF_C_3_OUT .addr_index = 0x00000145, .size_minus_1 = (3 - 1), .shift = 27

static inline u8 rfic_regs_dpll_regout_1_dpll_lpf_rz_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_1_ADDR);

	return (u8)((local_val & ((u32)0x07C00000)) >> 22);
}

#define RFIC_REGS_DPLL_REGOUT_1_DPLL_LPF_RZ_OUT .addr_index = 0x00000145, .size_minus_1 = (5 - 1), .shift = 22

static inline u8 rfic_regs_dpll_regout_1_dpll_lpf_c_1_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_1_ADDR);

	return (u8)((local_val & ((u32)0x00380000)) >> 19);
}

#define RFIC_REGS_DPLL_REGOUT_1_DPLL_LPF_C_1_OUT .addr_index = 0x00000145, .size_minus_1 = (3 - 1), .shift = 19

static inline u8 rfic_regs_dpll_regout_1_dpll_fsm_state_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_1_ADDR);

	return (u8)((local_val & ((u32)0x0007C000)) >> 14);
}

#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_STATE_OUT .addr_index = 0x00000145, .size_minus_1 = (5 - 1), .shift = 14

static inline u8 rfic_regs_dpll_regout_1_dpll_fsm_ro_no_osc_ackn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_1_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_RO_NO_OSC_ACKN .addr_index = 0x00000145, .size_minus_1 = (1 - 1), .shift = 13

static inline u8 rfic_regs_dpll_regout_1_dpll_fsm_lock_det_sticky_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_1_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_LOCK_DET_STICKY .addr_index = 0x00000145, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_dpll_regout_1_dpll_fsm_lock_detect_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_1_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_LOCK_DETECT .addr_index = 0x00000145, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_dpll_regout_1_dpll_fsm_calend_ackn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_1_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

#define RFIC_REGS_DPLL_REGOUT_1_DPLL_FSM_CALEND_ACKN .addr_index = 0x00000145, .size_minus_1 = (1 - 1), .shift = 10

static inline u16 rfic_regs_dpll_regout_1_dpll_spare_out_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_REGOUT_1_ADDR);

	return (u16)((local_val & ((u32)0x000003FF)) >> 0);
}

#define RFIC_REGS_DPLL_REGOUT_1_DPLL_SPARE_OUT_1 .addr_index = 0x00000145, .size_minus_1 = (10 - 1), .shift = 0

/**
 * @brief DPLL_IN_SPARE_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:02 dpll_in_spare_0           0x00000000
 *    01:00 dpll_fsm_lbw_sel          0x00000000
 * </pre>
 */
#define RFIC_REGS_DPLL_IN_SPARE_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000518)
#define RFIC_REGS_DPLL_IN_SPARE_0_OFFSET      0x00000518
#define RFIC_REGS_DPLL_IN_SPARE_0_INDEX       0x00000146
#define RFIC_REGS_DPLL_IN_SPARE_0_RESET       0x00000000

static inline u32 rfic_regs_dpll_in_spare_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_DPLL_IN_SPARE_0_ADDR);
}

static inline void rfic_regs_dpll_in_spare_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_DPLL_IN_SPARE_0_ADDR, value);
}

#define RFIC_REGS_DPLL_IN_SPARE_0 .addr_index = 0x00000146, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_DPLL_IN_SPARE_0_DPLL_IN_SPARE_0_MASK    ((u32)0xFFFFFFFC)
#define RFIC_REGS_DPLL_IN_SPARE_0_DPLL_IN_SPARE_0_LSB    2
#define RFIC_REGS_DPLL_IN_SPARE_0_DPLL_IN_SPARE_0_WIDTH    ((u32)0x0000001E)
#define RFIC_REGS_DPLL_IN_SPARE_0_DPLL_FSM_LBW_SEL_MASK    ((u32)0x00000003)
#define RFIC_REGS_DPLL_IN_SPARE_0_DPLL_FSM_LBW_SEL_LSB    0
#define RFIC_REGS_DPLL_IN_SPARE_0_DPLL_FSM_LBW_SEL_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_DPLL_IN_SPARE_0_DPLL_IN_SPARE_0_RST    0x00000000
#define RFIC_REGS_DPLL_IN_SPARE_0_DPLL_FSM_LBW_SEL_RST    0x00000000

static inline void rfic_regs_dpll_in_spare_0_pack(struct cl_chip *chip, u32 dpll_in_spare_0, u8 dpll_fsm_lbw_sel)
{
	ASSERT_ERR_CHIP((((u32)dpll_in_spare_0 << 2) & ~((u32)0xFFFFFFFC)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_fsm_lbw_sel << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_IN_SPARE_0_ADDR, ((u32)dpll_in_spare_0 << 2) | ((u32)dpll_fsm_lbw_sel << 0));
}

static inline void rfic_regs_dpll_in_spare_0_unpack(struct cl_chip *chip, u32 *dpll_in_spare_0, u8 *dpll_fsm_lbw_sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_IN_SPARE_0_ADDR);

	*dpll_in_spare_0 = (local_val & ((u32)0xFFFFFFFC)) >> 2;
	*dpll_fsm_lbw_sel = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u32 rfic_regs_dpll_in_spare_0_dpll_in_spare_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_IN_SPARE_0_ADDR);

	return (u32)((local_val & ((u32)0xFFFFFFFC)) >> 2);
}

static inline void rfic_regs_dpll_in_spare_0_dpll_in_spare_0_setf(struct cl_chip *chip, u32 dpllinspare0)
{
	ASSERT_ERR_CHIP((((u32)dpllinspare0 << 2) & ~((u32)0xFFFFFFFC)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_IN_SPARE_0_ADDR) & ~((u32)0xFFFFFFFC)) | ((u32)dpllinspare0 << 2));
}

#define RFIC_REGS_DPLL_IN_SPARE_0_DPLL_IN_SPARE_0 .addr_index = 0x00000146, .size_minus_1 = (30 - 1), .shift = 2

static inline u8 rfic_regs_dpll_in_spare_0_dpll_fsm_lbw_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_IN_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_dpll_in_spare_0_dpll_fsm_lbw_sel_setf(struct cl_chip *chip, u8 dpllfsmlbwsel)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmlbwsel << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_IN_SPARE_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_IN_SPARE_0_ADDR) & ~((u32)0x00000003)) | ((u32)dpllfsmlbwsel << 0));
}

#define RFIC_REGS_DPLL_IN_SPARE_0_DPLL_FSM_LBW_SEL .addr_index = 0x00000146, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief DPLL_OUT_SPARE_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 dpll_out_spare_0          0x00000000
 *    15:14 dpll_bias_cpcs            0x00000000
 *    13:12 cal_bias_cpcs             0x00000000
 *    11:00 dpll_fsm_kvco_count_diff_out 0x00000000
 * </pre>
 */
#define RFIC_REGS_DPLL_OUT_SPARE_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000051C)
#define RFIC_REGS_DPLL_OUT_SPARE_0_OFFSET      0x0000051C
#define RFIC_REGS_DPLL_OUT_SPARE_0_INDEX       0x00000147
#define RFIC_REGS_DPLL_OUT_SPARE_0_RESET       0x00000000

static inline u32 rfic_regs_dpll_out_spare_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_DPLL_OUT_SPARE_0_ADDR);
}

#define RFIC_REGS_DPLL_OUT_SPARE_0 .addr_index = 0x00000147, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_DPLL_OUT_SPARE_0_DPLL_OUT_SPARE_0_MASK    ((u32)0xFFFF0000)
#define RFIC_REGS_DPLL_OUT_SPARE_0_DPLL_OUT_SPARE_0_LSB    16
#define RFIC_REGS_DPLL_OUT_SPARE_0_DPLL_OUT_SPARE_0_WIDTH    ((u32)0x00000010)
#define RFIC_REGS_DPLL_OUT_SPARE_0_DPLL_BIAS_CPCS_MASK    ((u32)0x0000C000)
#define RFIC_REGS_DPLL_OUT_SPARE_0_DPLL_BIAS_CPCS_LSB    14
#define RFIC_REGS_DPLL_OUT_SPARE_0_DPLL_BIAS_CPCS_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_DPLL_OUT_SPARE_0_CAL_BIAS_CPCS_MASK    ((u32)0x00003000)
#define RFIC_REGS_DPLL_OUT_SPARE_0_CAL_BIAS_CPCS_LSB    12
#define RFIC_REGS_DPLL_OUT_SPARE_0_CAL_BIAS_CPCS_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_DPLL_OUT_SPARE_0_DPLL_FSM_KVCO_COUNT_DIFF_OUT_MASK    ((u32)0x00000FFF)
#define RFIC_REGS_DPLL_OUT_SPARE_0_DPLL_FSM_KVCO_COUNT_DIFF_OUT_LSB    0
#define RFIC_REGS_DPLL_OUT_SPARE_0_DPLL_FSM_KVCO_COUNT_DIFF_OUT_WIDTH    ((u32)0x0000000C)

#define RFIC_REGS_DPLL_OUT_SPARE_0_DPLL_OUT_SPARE_0_RST    0x00000000
#define RFIC_REGS_DPLL_OUT_SPARE_0_DPLL_BIAS_CPCS_RST    0x00000000
#define RFIC_REGS_DPLL_OUT_SPARE_0_CAL_BIAS_CPCS_RST    0x00000000
#define RFIC_REGS_DPLL_OUT_SPARE_0_DPLL_FSM_KVCO_COUNT_DIFF_OUT_RST    0x00000000

static inline void rfic_regs_dpll_out_spare_0_unpack(struct cl_chip *chip, u16 *dpll_out_spare_0, u8 *dpll_bias_cpcs, u8 *cal_bias_cpcs, u16 *dpll_fsm_kvco_count_diff_out)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUT_SPARE_0_ADDR);

	*dpll_out_spare_0 = (local_val & ((u32)0xFFFF0000)) >> 16;
	*dpll_bias_cpcs = (local_val & ((u32)0x0000C000)) >> 14;
	*cal_bias_cpcs = (local_val & ((u32)0x00003000)) >> 12;
	*dpll_fsm_kvco_count_diff_out = (local_val & ((u32)0x00000FFF)) >> 0;
}

static inline u16 rfic_regs_dpll_out_spare_0_dpll_out_spare_0_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUT_SPARE_0_ADDR);

	return (u16)((local_val & ((u32)0xFFFF0000)) >> 16);
}

#define RFIC_REGS_DPLL_OUT_SPARE_0_DPLL_OUT_SPARE_0 .addr_index = 0x00000147, .size_minus_1 = (16 - 1), .shift = 16

static inline u8 rfic_regs_dpll_out_spare_0_dpll_bias_cpcs_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUT_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x0000C000)) >> 14);
}

#define RFIC_REGS_DPLL_OUT_SPARE_0_DPLL_BIAS_CPCS .addr_index = 0x00000147, .size_minus_1 = (2 - 1), .shift = 14

static inline u8 rfic_regs_dpll_out_spare_0_cal_bias_cpcs_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUT_SPARE_0_ADDR);

	return (u8)((local_val & ((u32)0x00003000)) >> 12);
}

#define RFIC_REGS_DPLL_OUT_SPARE_0_CAL_BIAS_CPCS .addr_index = 0x00000147, .size_minus_1 = (2 - 1), .shift = 12

static inline u16 rfic_regs_dpll_out_spare_0_dpll_fsm_kvco_count_diff_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUT_SPARE_0_ADDR);

	return (u16)((local_val & ((u32)0x00000FFF)) >> 0);
}

#define RFIC_REGS_DPLL_OUT_SPARE_0_DPLL_FSM_KVCO_COUNT_DIFF_OUT .addr_index = 0x00000147, .size_minus_1 = (12 - 1), .shift = 0

/**
 * @brief DPLL_OUTDIV_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:23 dpll_in_spare_1           0x00000000
 *    22    dpll_fsm_disable          00000000
 *    21    dpll_out_buf_en           00000000
 *    20:16 dpll_out_buf_ctrl         0x00000000
 *    15    dpll_ch1_dac_clk_drv_en   00000000
 *    14    dpll_ch0_dac_clk_drv_en   00000000
 *    13    dpll_ch1_adc_clk_drv_en   00000000
 *    12    dpll_ch0_adc_clk_drv_en   00000000
 *    11    dpll_bt_aux_clk_drv_en    00000000
 *    10    dpll_dac_clkout_drv_en    00000000
 *    09    dpll_adc_clkout_drv_en    00000000
 *    08    dpll_640_M_clk_drv_en     00000001
 *    07    dpll_clk_div_rstn         00000001
 *    06    dpll_clk_ldo_ref_sel      00000000
 *    05:04 dpll_clk_ldo_vdd_sel      0x00000000
 *    03    dpll_clk_ldo_en           00000001
 *    02    dpll_adc_clk_div2_sel     00000001
 *    01:00 dpll_dac_clk_div_sel      0x00000000
 * </pre>
 */
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000520)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_OFFSET      0x00000520
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_INDEX       0x00000148
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_RESET       0x0000018C

static inline u32 rfic_regs_dpll_outdiv_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, value);
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0 .addr_index = 0x00000148, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_IN_SPARE_1_MASK    ((u32)0x3F800000)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_IN_SPARE_1_LSB    23
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_IN_SPARE_1_WIDTH    ((u32)0x00000007)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_FSM_DISABLE_BIT    ((u32)0x00400000)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_FSM_DISABLE_POS    22
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_OUT_BUF_EN_BIT    ((u32)0x00200000)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_OUT_BUF_EN_POS    21
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_OUT_BUF_CTRL_MASK    ((u32)0x001F0000)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_OUT_BUF_CTRL_LSB    16
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_OUT_BUF_CTRL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CH_1_DAC_CLK_DRV_EN_BIT    ((u32)0x00008000)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CH_1_DAC_CLK_DRV_EN_POS    15
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CH_0_DAC_CLK_DRV_EN_BIT    ((u32)0x00004000)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CH_0_DAC_CLK_DRV_EN_POS    14
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CH_1_ADC_CLK_DRV_EN_BIT    ((u32)0x00002000)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CH_1_ADC_CLK_DRV_EN_POS    13
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CH_0_ADC_CLK_DRV_EN_BIT    ((u32)0x00001000)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CH_0_ADC_CLK_DRV_EN_POS    12
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_BT_AUX_CLK_DRV_EN_BIT    ((u32)0x00000800)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_BT_AUX_CLK_DRV_EN_POS    11
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_DAC_CLKOUT_DRV_EN_BIT    ((u32)0x00000400)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_DAC_CLKOUT_DRV_EN_POS    10
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_ADC_CLKOUT_DRV_EN_BIT    ((u32)0x00000200)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_ADC_CLKOUT_DRV_EN_POS    9
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_640_M_CLK_DRV_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_640_M_CLK_DRV_EN_POS    8
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_DIV_RSTN_BIT    ((u32)0x00000080)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_DIV_RSTN_POS    7
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_LDO_REF_SEL_BIT    ((u32)0x00000040)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_LDO_REF_SEL_POS    6
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_LDO_VDD_SEL_MASK    ((u32)0x00000030)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_LDO_VDD_SEL_LSB    4
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_LDO_VDD_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_LDO_EN_BIT    ((u32)0x00000008)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_LDO_EN_POS    3
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_ADC_CLK_DIV_2_SEL_BIT    ((u32)0x00000004)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_ADC_CLK_DIV_2_SEL_POS    2
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_DAC_CLK_DIV_SEL_MASK    ((u32)0x00000003)
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_DAC_CLK_DIV_SEL_LSB    0
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_DAC_CLK_DIV_SEL_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_IN_SPARE_1_RST    0x00000000
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_FSM_DISABLE_RST    0x00000000
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_OUT_BUF_EN_RST    0x00000000
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_OUT_BUF_CTRL_RST    0x00000000
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CH_1_DAC_CLK_DRV_EN_RST    0x00000000
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CH_0_DAC_CLK_DRV_EN_RST    0x00000000
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CH_1_ADC_CLK_DRV_EN_RST    0x00000000
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CH_0_ADC_CLK_DRV_EN_RST    0x00000000
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_BT_AUX_CLK_DRV_EN_RST    0x00000000
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_DAC_CLKOUT_DRV_EN_RST    0x00000000
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_ADC_CLKOUT_DRV_EN_RST    0x00000000
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_640_M_CLK_DRV_EN_RST    0x00000001
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_DIV_RSTN_RST    0x00000001
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_LDO_REF_SEL_RST    0x00000000
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_LDO_VDD_SEL_RST    0x00000000
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_LDO_EN_RST    0x00000001
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_ADC_CLK_DIV_2_SEL_RST    0x00000001
#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_DAC_CLK_DIV_SEL_RST    0x00000000

static inline void rfic_regs_dpll_outdiv_ctrl_0_pack(struct cl_chip *chip, u8 dpll_in_spare_1, u8 dpll_fsm_disable, u8 dpll_out_buf_en, u8 dpll_out_buf_ctrl, u8 dpll_ch1_dac_clk_drv_en, u8 dpll_ch0_dac_clk_drv_en, u8 dpll_ch1_adc_clk_drv_en, u8 dpll_ch0_adc_clk_drv_en, u8 dpll_bt_aux_clk_drv_en, u8 dpll_dac_clkout_drv_en, u8 dpll_adc_clkout_drv_en, u8 dpll_640_m_clk_drv_en, u8 dpll_clk_div_rstn, u8 dpll_clk_ldo_ref_sel, u8 dpll_clk_ldo_vdd_sel, u8 dpll_clk_ldo_en, u8 dpll_adc_clk_div2_sel, u8 dpll_dac_clk_div_sel)
{
	ASSERT_ERR_CHIP((((u32)dpll_in_spare_1 << 23) & ~((u32)0x3F800000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_fsm_disable << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_out_buf_en << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_out_buf_ctrl << 16) & ~((u32)0x001F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_ch1_dac_clk_drv_en << 15) & ~((u32)0x00008000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_ch0_dac_clk_drv_en << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_ch1_adc_clk_drv_en << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_ch0_adc_clk_drv_en << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_bt_aux_clk_drv_en << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_dac_clkout_drv_en << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_adc_clkout_drv_en << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_640_m_clk_drv_en << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_clk_div_rstn << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_clk_ldo_ref_sel << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_clk_ldo_vdd_sel << 4) & ~((u32)0x00000030)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_clk_ldo_en << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_adc_clk_div2_sel << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_dac_clk_div_sel << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, ((u32)dpll_in_spare_1 << 23) | ((u32)dpll_fsm_disable << 22) | ((u32)dpll_out_buf_en << 21) | ((u32)dpll_out_buf_ctrl << 16) | ((u32)dpll_ch1_dac_clk_drv_en << 15) | ((u32)dpll_ch0_dac_clk_drv_en << 14) | ((u32)dpll_ch1_adc_clk_drv_en << 13) | ((u32)dpll_ch0_adc_clk_drv_en << 12) | ((u32)dpll_bt_aux_clk_drv_en << 11) | ((u32)dpll_dac_clkout_drv_en << 10) | ((u32)dpll_adc_clkout_drv_en << 9) | ((u32)dpll_640_m_clk_drv_en << 8) | ((u32)dpll_clk_div_rstn << 7) | ((u32)dpll_clk_ldo_ref_sel << 6) | ((u32)dpll_clk_ldo_vdd_sel << 4) | ((u32)dpll_clk_ldo_en << 3) | ((u32)dpll_adc_clk_div2_sel << 2) | ((u32)dpll_dac_clk_div_sel << 0));
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_unpack(struct cl_chip *chip, u8 *dpll_in_spare_1, u8 *dpll_fsm_disable, u8 *dpll_out_buf_en, u8 *dpll_out_buf_ctrl, u8 *dpll_ch1_dac_clk_drv_en, u8 *dpll_ch0_dac_clk_drv_en, u8 *dpll_ch1_adc_clk_drv_en, u8 *dpll_ch0_adc_clk_drv_en, u8 *dpll_bt_aux_clk_drv_en, u8 *dpll_dac_clkout_drv_en, u8 *dpll_adc_clkout_drv_en, u8 *dpll_640_m_clk_drv_en, u8 *dpll_clk_div_rstn, u8 *dpll_clk_ldo_ref_sel, u8 *dpll_clk_ldo_vdd_sel, u8 *dpll_clk_ldo_en, u8 *dpll_adc_clk_div2_sel, u8 *dpll_dac_clk_div_sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	*dpll_in_spare_1 = (local_val & ((u32)0x3F800000)) >> 23;
	*dpll_fsm_disable = (local_val & ((u32)0x00400000)) >> 22;
	*dpll_out_buf_en = (local_val & ((u32)0x00200000)) >> 21;
	*dpll_out_buf_ctrl = (local_val & ((u32)0x001F0000)) >> 16;
	*dpll_ch1_dac_clk_drv_en = (local_val & ((u32)0x00008000)) >> 15;
	*dpll_ch0_dac_clk_drv_en = (local_val & ((u32)0x00004000)) >> 14;
	*dpll_ch1_adc_clk_drv_en = (local_val & ((u32)0x00002000)) >> 13;
	*dpll_ch0_adc_clk_drv_en = (local_val & ((u32)0x00001000)) >> 12;
	*dpll_bt_aux_clk_drv_en = (local_val & ((u32)0x00000800)) >> 11;
	*dpll_dac_clkout_drv_en = (local_val & ((u32)0x00000400)) >> 10;
	*dpll_adc_clkout_drv_en = (local_val & ((u32)0x00000200)) >> 9;
	*dpll_640_m_clk_drv_en = (local_val & ((u32)0x00000100)) >> 8;
	*dpll_clk_div_rstn = (local_val & ((u32)0x00000080)) >> 7;
	*dpll_clk_ldo_ref_sel = (local_val & ((u32)0x00000040)) >> 6;
	*dpll_clk_ldo_vdd_sel = (local_val & ((u32)0x00000030)) >> 4;
	*dpll_clk_ldo_en = (local_val & ((u32)0x00000008)) >> 3;
	*dpll_adc_clk_div2_sel = (local_val & ((u32)0x00000004)) >> 2;
	*dpll_dac_clk_div_sel = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_in_spare_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x3F800000)) >> 23);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_in_spare_1_setf(struct cl_chip *chip, u8 dpllinspare1)
{
	ASSERT_ERR_CHIP((((u32)dpllinspare1 << 23) & ~((u32)0x3F800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x3F800000)) | ((u32)dpllinspare1 << 23));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_IN_SPARE_1 .addr_index = 0x00000148, .size_minus_1 = (7 - 1), .shift = 23

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_fsm_disable_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_fsm_disable_setf(struct cl_chip *chip, u8 dpllfsmdisable)
{
	ASSERT_ERR_CHIP((((u32)dpllfsmdisable << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x00400000)) | ((u32)dpllfsmdisable << 22));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_FSM_DISABLE .addr_index = 0x00000148, .size_minus_1 = (1 - 1), .shift = 22

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_out_buf_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_out_buf_en_setf(struct cl_chip *chip, u8 dplloutbufen)
{
	ASSERT_ERR_CHIP((((u32)dplloutbufen << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x00200000)) | ((u32)dplloutbufen << 21));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_OUT_BUF_EN .addr_index = 0x00000148, .size_minus_1 = (1 - 1), .shift = 21

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_out_buf_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x001F0000)) >> 16);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_out_buf_ctrl_setf(struct cl_chip *chip, u8 dplloutbufctrl)
{
	ASSERT_ERR_CHIP((((u32)dplloutbufctrl << 16) & ~((u32)0x001F0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x001F0000)) | ((u32)dplloutbufctrl << 16));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_OUT_BUF_CTRL .addr_index = 0x00000148, .size_minus_1 = (5 - 1), .shift = 16

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_ch_1_dac_clk_drv_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_ch_1_dac_clk_drv_en_setf(struct cl_chip *chip, u8 dpllch1dacclkdrven)
{
	ASSERT_ERR_CHIP((((u32)dpllch1dacclkdrven << 15) & ~((u32)0x00008000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x00008000)) | ((u32)dpllch1dacclkdrven << 15));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CH_1_DAC_CLK_DRV_EN .addr_index = 0x00000148, .size_minus_1 = (1 - 1), .shift = 15

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_ch_0_dac_clk_drv_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_ch_0_dac_clk_drv_en_setf(struct cl_chip *chip, u8 dpllch0dacclkdrven)
{
	ASSERT_ERR_CHIP((((u32)dpllch0dacclkdrven << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x00004000)) | ((u32)dpllch0dacclkdrven << 14));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CH_0_DAC_CLK_DRV_EN .addr_index = 0x00000148, .size_minus_1 = (1 - 1), .shift = 14

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_ch_1_adc_clk_drv_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_ch_1_adc_clk_drv_en_setf(struct cl_chip *chip, u8 dpllch1adcclkdrven)
{
	ASSERT_ERR_CHIP((((u32)dpllch1adcclkdrven << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x00002000)) | ((u32)dpllch1adcclkdrven << 13));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CH_1_ADC_CLK_DRV_EN .addr_index = 0x00000148, .size_minus_1 = (1 - 1), .shift = 13

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_ch_0_adc_clk_drv_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_ch_0_adc_clk_drv_en_setf(struct cl_chip *chip, u8 dpllch0adcclkdrven)
{
	ASSERT_ERR_CHIP((((u32)dpllch0adcclkdrven << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x00001000)) | ((u32)dpllch0adcclkdrven << 12));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CH_0_ADC_CLK_DRV_EN .addr_index = 0x00000148, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_bt_aux_clk_drv_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_bt_aux_clk_drv_en_setf(struct cl_chip *chip, u8 dpllbtauxclkdrven)
{
	ASSERT_ERR_CHIP((((u32)dpllbtauxclkdrven << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x00000800)) | ((u32)dpllbtauxclkdrven << 11));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_BT_AUX_CLK_DRV_EN .addr_index = 0x00000148, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_dac_clkout_drv_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_dac_clkout_drv_en_setf(struct cl_chip *chip, u8 dplldacclkoutdrven)
{
	ASSERT_ERR_CHIP((((u32)dplldacclkoutdrven << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x00000400)) | ((u32)dplldacclkoutdrven << 10));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_DAC_CLKOUT_DRV_EN .addr_index = 0x00000148, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_adc_clkout_drv_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_adc_clkout_drv_en_setf(struct cl_chip *chip, u8 dplladcclkoutdrven)
{
	ASSERT_ERR_CHIP((((u32)dplladcclkoutdrven << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x00000200)) | ((u32)dplladcclkoutdrven << 9));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_ADC_CLKOUT_DRV_EN .addr_index = 0x00000148, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_640_m_clk_drv_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_640_m_clk_drv_en_setf(struct cl_chip *chip, u8 dpll640mclkdrven)
{
	ASSERT_ERR_CHIP((((u32)dpll640mclkdrven << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x00000100)) | ((u32)dpll640mclkdrven << 8));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_640_M_CLK_DRV_EN .addr_index = 0x00000148, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_clk_div_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_clk_div_rstn_setf(struct cl_chip *chip, u8 dpllclkdivrstn)
{
	ASSERT_ERR_CHIP((((u32)dpllclkdivrstn << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x00000080)) | ((u32)dpllclkdivrstn << 7));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_DIV_RSTN .addr_index = 0x00000148, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_clk_ldo_ref_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_clk_ldo_ref_sel_setf(struct cl_chip *chip, u8 dpllclkldorefsel)
{
	ASSERT_ERR_CHIP((((u32)dpllclkldorefsel << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x00000040)) | ((u32)dpllclkldorefsel << 6));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_LDO_REF_SEL .addr_index = 0x00000148, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_clk_ldo_vdd_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000030)) >> 4);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_clk_ldo_vdd_sel_setf(struct cl_chip *chip, u8 dpllclkldovddsel)
{
	ASSERT_ERR_CHIP((((u32)dpllclkldovddsel << 4) & ~((u32)0x00000030)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x00000030)) | ((u32)dpllclkldovddsel << 4));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_LDO_VDD_SEL .addr_index = 0x00000148, .size_minus_1 = (2 - 1), .shift = 4

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_clk_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_clk_ldo_en_setf(struct cl_chip *chip, u8 dpllclkldoen)
{
	ASSERT_ERR_CHIP((((u32)dpllclkldoen << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x00000008)) | ((u32)dpllclkldoen << 3));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_CLK_LDO_EN .addr_index = 0x00000148, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_adc_clk_div_2_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_adc_clk_div_2_sel_setf(struct cl_chip *chip, u8 dplladcclkdiv2sel)
{
	ASSERT_ERR_CHIP((((u32)dplladcclkdiv2sel << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x00000004)) | ((u32)dplladcclkdiv2sel << 2));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_ADC_CLK_DIV_2_SEL .addr_index = 0x00000148, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_dpll_outdiv_ctrl_0_dpll_dac_clk_div_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_dpll_outdiv_ctrl_0_dpll_dac_clk_div_sel_setf(struct cl_chip *chip, u8 dplldacclkdivsel)
{
	ASSERT_ERR_CHIP((((u32)dplldacclkdivsel << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_OUTDIV_CTRL_0_ADDR) & ~((u32)0x00000003)) | ((u32)dplldacclkdivsel << 0));
}

#define RFIC_REGS_DPLL_OUTDIV_CTRL_0_DPLL_DAC_CLK_DIV_SEL .addr_index = 0x00000148, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief CH_0_GEN_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    CH0_trsw_en               00000000
 *    30    CH0_gain_lut_bypass       00000000
 *    29    CH0_debug_mode            00000000
 *    28    CH0_bb_exten              00000000
 *    27:25 CH0_bb_bw                 0x00000007
 *    24:20 CH0_bb_gc                 0x00000000
 *    19:16 CH0_bb_bias_rcal          0x00000000
 *    15:13 CH0_bb_int_vcm_ctrl       0x00000000
 *    12    CH0_bb_dcoc_clk           00000000
 *    11    CH0_spare1_in             00000000
 *    10    CH0_tx_gain_lut_write_en  00000000
 *    09    CH0_rx_gain_lut_write_en  00000000
 *    08    CH0_bb_bias_en            00000000
 *    07    CH0_bb_last_stage_LDO_1v_en 00000000
 *    06:05 CH0_bb_dac_bias_sel       0x00000000
 *    04:02 CH0_dcoc_dac_range        0x00000000
 *    01:00 CH0_tx_mixer_vcm_ctrl     0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_GEN_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000580)
#define RFIC_REGS_CH_0_GEN_CTRL_0_OFFSET      0x00000580
#define RFIC_REGS_CH_0_GEN_CTRL_0_INDEX       0x00000160
#define RFIC_REGS_CH_0_GEN_CTRL_0_RESET       0x0E000000

static inline u32 rfic_regs_ch_0_gen_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, value);
}

#define RFIC_REGS_CH_0_GEN_CTRL_0 .addr_index = 0x00000160, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_TRSW_EN_BIT    ((u32)0x80000000)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_TRSW_EN_POS    31
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_GAIN_LUT_BYPASS_BIT    ((u32)0x40000000)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_GAIN_LUT_BYPASS_POS    30
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_DEBUG_MODE_BIT    ((u32)0x20000000)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_DEBUG_MODE_POS    29
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_EXTEN_BIT    ((u32)0x10000000)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_EXTEN_POS    28
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_BW_MASK    ((u32)0x0E000000)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_BW_LSB    25
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_BW_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_GC_MASK    ((u32)0x01F00000)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_GC_LSB    20
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_GC_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_BIAS_RCAL_MASK    ((u32)0x000F0000)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_BIAS_RCAL_LSB    16
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_BIAS_RCAL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_INT_VCM_CTRL_MASK    ((u32)0x0000E000)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_INT_VCM_CTRL_LSB    13
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_INT_VCM_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_DCOC_CLK_BIT    ((u32)0x00001000)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_DCOC_CLK_POS    12
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_SPARE_1_IN_BIT    ((u32)0x00000800)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_SPARE_1_IN_POS    11
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_TX_GAIN_LUT_WRITE_EN_BIT    ((u32)0x00000400)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_TX_GAIN_LUT_WRITE_EN_POS    10
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_RX_GAIN_LUT_WRITE_EN_BIT    ((u32)0x00000200)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_RX_GAIN_LUT_WRITE_EN_POS    9
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_BIAS_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_BIAS_EN_POS    8
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_LAST_STAGE_LDO_1_V_EN_BIT    ((u32)0x00000080)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_LAST_STAGE_LDO_1_V_EN_POS    7
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_DAC_BIAS_SEL_MASK    ((u32)0x00000060)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_DAC_BIAS_SEL_LSB    5
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_DAC_BIAS_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_DCOC_DAC_RANGE_MASK    ((u32)0x0000001C)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_DCOC_DAC_RANGE_LSB    2
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_DCOC_DAC_RANGE_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_TX_MIXER_VCM_CTRL_MASK    ((u32)0x00000003)
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_TX_MIXER_VCM_CTRL_LSB    0
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_TX_MIXER_VCM_CTRL_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_TRSW_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_GAIN_LUT_BYPASS_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_DEBUG_MODE_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_EXTEN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_BW_RST    0x00000007
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_GC_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_BIAS_RCAL_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_INT_VCM_CTRL_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_DCOC_CLK_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_SPARE_1_IN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_TX_GAIN_LUT_WRITE_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_RX_GAIN_LUT_WRITE_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_BIAS_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_LAST_STAGE_LDO_1_V_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_DAC_BIAS_SEL_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_DCOC_DAC_RANGE_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_TX_MIXER_VCM_CTRL_RST    0x00000000

static inline void rfic_regs_ch_0_gen_ctrl_0_pack(struct cl_chip *chip, u8 ch0_trsw_en, u8 ch0_gain_lut_bypass, u8 ch0_debug_mode, u8 ch0_bb_exten, u8 ch0_bb_bw, u8 ch0_bb_gc, u8 ch0_bb_bias_rcal, u8 ch0_bb_int_vcm_ctrl, u8 ch0_bb_dcoc_clk, u8 ch0_spare1_in, u8 ch0_tx_gain_lut_write_en, u8 ch0_rx_gain_lut_write_en, u8 ch0_bb_bias_en, u8 ch0_bb_last_stage_ldo_1v_en, u8 ch0_bb_dac_bias_sel, u8 ch0_dcoc_dac_range, u8 ch0_tx_mixer_vcm_ctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0_trsw_en << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_gain_lut_bypass << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_debug_mode << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_bb_exten << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_bb_bw << 25) & ~((u32)0x0E000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_bb_gc << 20) & ~((u32)0x01F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_bb_bias_rcal << 16) & ~((u32)0x000F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_bb_int_vcm_ctrl << 13) & ~((u32)0x0000E000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_bb_dcoc_clk << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare1_in << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_gain_lut_write_en << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_gain_lut_write_en << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_bb_bias_en << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_bb_last_stage_ldo_1v_en << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_bb_dac_bias_sel << 5) & ~((u32)0x00000060)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_dcoc_dac_range << 2) & ~((u32)0x0000001C)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_mixer_vcm_ctrl << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, ((u32)ch0_trsw_en << 31) | ((u32)ch0_gain_lut_bypass << 30) | ((u32)ch0_debug_mode << 29) | ((u32)ch0_bb_exten << 28) | ((u32)ch0_bb_bw << 25) | ((u32)ch0_bb_gc << 20) | ((u32)ch0_bb_bias_rcal << 16) | ((u32)ch0_bb_int_vcm_ctrl << 13) | ((u32)ch0_bb_dcoc_clk << 12) | ((u32)ch0_spare1_in << 11) | ((u32)ch0_tx_gain_lut_write_en << 10) | ((u32)ch0_rx_gain_lut_write_en << 9) | ((u32)ch0_bb_bias_en << 8) | ((u32)ch0_bb_last_stage_ldo_1v_en << 7) | ((u32)ch0_bb_dac_bias_sel << 5) | ((u32)ch0_dcoc_dac_range << 2) | ((u32)ch0_tx_mixer_vcm_ctrl << 0));
}

static inline void rfic_regs_ch_0_gen_ctrl_0_unpack(struct cl_chip *chip, u8 *ch0_trsw_en, u8 *ch0_gain_lut_bypass, u8 *ch0_debug_mode, u8 *ch0_bb_exten, u8 *ch0_bb_bw, u8 *ch0_bb_gc, u8 *ch0_bb_bias_rcal, u8 *ch0_bb_int_vcm_ctrl, u8 *ch0_bb_dcoc_clk, u8 *ch0_spare1_in, u8 *ch0_tx_gain_lut_write_en, u8 *ch0_rx_gain_lut_write_en, u8 *ch0_bb_bias_en, u8 *ch0_bb_last_stage_ldo_1v_en, u8 *ch0_bb_dac_bias_sel, u8 *ch0_dcoc_dac_range, u8 *ch0_tx_mixer_vcm_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	*ch0_trsw_en = (local_val & ((u32)0x80000000)) >> 31;
	*ch0_gain_lut_bypass = (local_val & ((u32)0x40000000)) >> 30;
	*ch0_debug_mode = (local_val & ((u32)0x20000000)) >> 29;
	*ch0_bb_exten = (local_val & ((u32)0x10000000)) >> 28;
	*ch0_bb_bw = (local_val & ((u32)0x0E000000)) >> 25;
	*ch0_bb_gc = (local_val & ((u32)0x01F00000)) >> 20;
	*ch0_bb_bias_rcal = (local_val & ((u32)0x000F0000)) >> 16;
	*ch0_bb_int_vcm_ctrl = (local_val & ((u32)0x0000E000)) >> 13;
	*ch0_bb_dcoc_clk = (local_val & ((u32)0x00001000)) >> 12;
	*ch0_spare1_in = (local_val & ((u32)0x00000800)) >> 11;
	*ch0_tx_gain_lut_write_en = (local_val & ((u32)0x00000400)) >> 10;
	*ch0_rx_gain_lut_write_en = (local_val & ((u32)0x00000200)) >> 9;
	*ch0_bb_bias_en = (local_val & ((u32)0x00000100)) >> 8;
	*ch0_bb_last_stage_ldo_1v_en = (local_val & ((u32)0x00000080)) >> 7;
	*ch0_bb_dac_bias_sel = (local_val & ((u32)0x00000060)) >> 5;
	*ch0_dcoc_dac_range = (local_val & ((u32)0x0000001C)) >> 2;
	*ch0_tx_mixer_vcm_ctrl = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_trsw_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_trsw_en_setf(struct cl_chip *chip, u8 ch0trswen)
{
	ASSERT_ERR_CHIP((((u32)ch0trswen << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x80000000)) | ((u32)ch0trswen << 31));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_TRSW_EN .addr_index = 0x00000160, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_gain_lut_bypass_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_gain_lut_bypass_setf(struct cl_chip *chip, u8 ch0gainlutbypass)
{
	ASSERT_ERR_CHIP((((u32)ch0gainlutbypass << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x40000000)) | ((u32)ch0gainlutbypass << 30));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_GAIN_LUT_BYPASS .addr_index = 0x00000160, .size_minus_1 = (1 - 1), .shift = 30

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_debug_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_debug_mode_setf(struct cl_chip *chip, u8 ch0debugmode)
{
	ASSERT_ERR_CHIP((((u32)ch0debugmode << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x20000000)) | ((u32)ch0debugmode << 29));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_DEBUG_MODE .addr_index = 0x00000160, .size_minus_1 = (1 - 1), .shift = 29

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_exten_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_exten_setf(struct cl_chip *chip, u8 ch0bbexten)
{
	ASSERT_ERR_CHIP((((u32)ch0bbexten << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x10000000)) | ((u32)ch0bbexten << 28));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_EXTEN .addr_index = 0x00000160, .size_minus_1 = (1 - 1), .shift = 28

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_bw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0E000000)) >> 25);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_bw_setf(struct cl_chip *chip, u8 ch0bbbw)
{
	ASSERT_ERR_CHIP((((u32)ch0bbbw << 25) & ~((u32)0x0E000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x0E000000)) | ((u32)ch0bbbw << 25));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_BW .addr_index = 0x00000160, .size_minus_1 = (3 - 1), .shift = 25

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_gc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x01F00000)) >> 20);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_gc_setf(struct cl_chip *chip, u8 ch0bbgc)
{
	ASSERT_ERR_CHIP((((u32)ch0bbgc << 20) & ~((u32)0x01F00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x01F00000)) | ((u32)ch0bbgc << 20));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_GC .addr_index = 0x00000160, .size_minus_1 = (5 - 1), .shift = 20

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_bias_rcal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x000F0000)) >> 16);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_bias_rcal_setf(struct cl_chip *chip, u8 ch0bbbiasrcal)
{
	ASSERT_ERR_CHIP((((u32)ch0bbbiasrcal << 16) & ~((u32)0x000F0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x000F0000)) | ((u32)ch0bbbiasrcal << 16));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_BIAS_RCAL .addr_index = 0x00000160, .size_minus_1 = (4 - 1), .shift = 16

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_int_vcm_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000E000)) >> 13);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_int_vcm_ctrl_setf(struct cl_chip *chip, u8 ch0bbintvcmctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0bbintvcmctrl << 13) & ~((u32)0x0000E000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x0000E000)) | ((u32)ch0bbintvcmctrl << 13));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_INT_VCM_CTRL .addr_index = 0x00000160, .size_minus_1 = (3 - 1), .shift = 13

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_dcoc_clk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_dcoc_clk_setf(struct cl_chip *chip, u8 ch0bbdcocclk)
{
	ASSERT_ERR_CHIP((((u32)ch0bbdcocclk << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x00001000)) | ((u32)ch0bbdcocclk << 12));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_DCOC_CLK .addr_index = 0x00000160, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_spare_1_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_spare_1_in_setf(struct cl_chip *chip, u8 ch0spare1in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare1in << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x00000800)) | ((u32)ch0spare1in << 11));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_SPARE_1_IN .addr_index = 0x00000160, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_tx_gain_lut_write_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_tx_gain_lut_write_en_setf(struct cl_chip *chip, u8 ch0txgainlutwriteen)
{
	ASSERT_ERR_CHIP((((u32)ch0txgainlutwriteen << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x00000400)) | ((u32)ch0txgainlutwriteen << 10));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_TX_GAIN_LUT_WRITE_EN .addr_index = 0x00000160, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_rx_gain_lut_write_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_rx_gain_lut_write_en_setf(struct cl_chip *chip, u8 ch0rxgainlutwriteen)
{
	ASSERT_ERR_CHIP((((u32)ch0rxgainlutwriteen << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x00000200)) | ((u32)ch0rxgainlutwriteen << 9));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_RX_GAIN_LUT_WRITE_EN .addr_index = 0x00000160, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_bias_en_setf(struct cl_chip *chip, u8 ch0bbbiasen)
{
	ASSERT_ERR_CHIP((((u32)ch0bbbiasen << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x00000100)) | ((u32)ch0bbbiasen << 8));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_BIAS_EN .addr_index = 0x00000160, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_last_stage_ldo_1_v_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_last_stage_ldo_1_v_en_setf(struct cl_chip *chip, u8 ch0bblaststageldo1ven)
{
	ASSERT_ERR_CHIP((((u32)ch0bblaststageldo1ven << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x00000080)) | ((u32)ch0bblaststageldo1ven << 7));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_LAST_STAGE_LDO_1_V_EN .addr_index = 0x00000160, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_dac_bias_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000060)) >> 5);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_bb_dac_bias_sel_setf(struct cl_chip *chip, u8 ch0bbdacbiassel)
{
	ASSERT_ERR_CHIP((((u32)ch0bbdacbiassel << 5) & ~((u32)0x00000060)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x00000060)) | ((u32)ch0bbdacbiassel << 5));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_BB_DAC_BIAS_SEL .addr_index = 0x00000160, .size_minus_1 = (2 - 1), .shift = 5

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_dcoc_dac_range_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000001C)) >> 2);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_dcoc_dac_range_setf(struct cl_chip *chip, u8 ch0dcocdacrange)
{
	ASSERT_ERR_CHIP((((u32)ch0dcocdacrange << 2) & ~((u32)0x0000001C)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x0000001C)) | ((u32)ch0dcocdacrange << 2));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_DCOC_DAC_RANGE .addr_index = 0x00000160, .size_minus_1 = (3 - 1), .shift = 2

static inline u8 rfic_regs_ch_0_gen_ctrl_0_ch_0_tx_mixer_vcm_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_ch_0_gen_ctrl_0_ch_0_tx_mixer_vcm_ctrl_setf(struct cl_chip *chip, u8 ch0txmixervcmctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0txmixervcmctrl << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_0_ADDR) & ~((u32)0x00000003)) | ((u32)ch0txmixervcmctrl << 0));
}

#define RFIC_REGS_CH_0_GEN_CTRL_0_CH_0_TX_MIXER_VCM_CTRL .addr_index = 0x00000160, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief CH_0_GEN_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    CH0_localdiv_rxtxn        00000000
 *    30    CH0_localdiv_sx_sel       00000000
 *    29:22 CH0_spare5_in             0x00000000
 *    21    CH0_localdiv_ldo_en       00000000
 *    20:19 CH0_spare4_in             0x00000000
 *    18    CH0_localdiv_divbuff_en   00000000
 *    17:13 CH0_localdiv_body_ctrl    0x00000000
 *    12:11 CH0_localdiv_vdd10sel     0x00000000
 *    10:09 CH0_localdiv_res          0x00000000
 *    08    CH0_dac_ldo_en            00000000
 *    07:03 CH0_tempsens_bias_ctrl    0x00000007
 *    02    CH0_tempsens_en           00000000
 *    01:00 CH0_spare2_in             0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_GEN_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000584)
#define RFIC_REGS_CH_0_GEN_CTRL_1_OFFSET      0x00000584
#define RFIC_REGS_CH_0_GEN_CTRL_1_INDEX       0x00000161
#define RFIC_REGS_CH_0_GEN_CTRL_1_RESET       0x00000038

static inline u32 rfic_regs_ch_0_gen_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR);
}

static inline void rfic_regs_ch_0_gen_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR, value);
}

#define RFIC_REGS_CH_0_GEN_CTRL_1 .addr_index = 0x00000161, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_RXTXN_BIT    ((u32)0x80000000)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_RXTXN_POS    31
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_SX_SEL_BIT    ((u32)0x40000000)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_SX_SEL_POS    30
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_SPARE_5_IN_MASK    ((u32)0x3FC00000)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_SPARE_5_IN_LSB    22
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_SPARE_5_IN_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_LDO_EN_BIT    ((u32)0x00200000)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_LDO_EN_POS    21
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_SPARE_4_IN_MASK    ((u32)0x00180000)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_SPARE_4_IN_LSB    19
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_SPARE_4_IN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_DIVBUFF_EN_BIT    ((u32)0x00040000)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_DIVBUFF_EN_POS    18
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_BODY_CTRL_MASK    ((u32)0x0003E000)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_BODY_CTRL_LSB    13
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_BODY_CTRL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_VDD_10_SEL_MASK    ((u32)0x00001800)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_VDD_10_SEL_LSB    11
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_VDD_10_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_RES_MASK    ((u32)0x00000600)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_RES_LSB    9
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_RES_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_DAC_LDO_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_DAC_LDO_EN_POS    8
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_TEMPSENS_BIAS_CTRL_MASK    ((u32)0x000000F8)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_TEMPSENS_BIAS_CTRL_LSB    3
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_TEMPSENS_BIAS_CTRL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_TEMPSENS_EN_BIT    ((u32)0x00000004)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_TEMPSENS_EN_POS    2
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_SPARE_2_IN_MASK    ((u32)0x00000003)
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_SPARE_2_IN_LSB    0
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_SPARE_2_IN_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_RXTXN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_SX_SEL_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_SPARE_5_IN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_LDO_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_SPARE_4_IN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_DIVBUFF_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_BODY_CTRL_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_VDD_10_SEL_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_RES_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_DAC_LDO_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_TEMPSENS_BIAS_CTRL_RST    0x00000007
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_TEMPSENS_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_SPARE_2_IN_RST    0x00000000

static inline void rfic_regs_ch_0_gen_ctrl_1_pack(struct cl_chip *chip, u8 ch0_localdiv_rxtxn, u8 ch0_localdiv_sx_sel, u8 ch0_spare5_in, u8 ch0_localdiv_ldo_en, u8 ch0_spare4_in, u8 ch0_localdiv_divbuff_en, u8 ch0_localdiv_body_ctrl, u8 ch0_localdiv_vdd10sel, u8 ch0_localdiv_res, u8 ch0_dac_ldo_en, u8 ch0_tempsens_bias_ctrl, u8 ch0_tempsens_en, u8 ch0_spare2_in)
{
	ASSERT_ERR_CHIP((((u32)ch0_localdiv_rxtxn << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_localdiv_sx_sel << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare5_in << 22) & ~((u32)0x3FC00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_localdiv_ldo_en << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare4_in << 19) & ~((u32)0x00180000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_localdiv_divbuff_en << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_localdiv_body_ctrl << 13) & ~((u32)0x0003E000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_localdiv_vdd10sel << 11) & ~((u32)0x00001800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_localdiv_res << 9) & ~((u32)0x00000600)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_dac_ldo_en << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tempsens_bias_ctrl << 3) & ~((u32)0x000000F8)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tempsens_en << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare2_in << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR, ((u32)ch0_localdiv_rxtxn << 31) | ((u32)ch0_localdiv_sx_sel << 30) | ((u32)ch0_spare5_in << 22) | ((u32)ch0_localdiv_ldo_en << 21) | ((u32)ch0_spare4_in << 19) | ((u32)ch0_localdiv_divbuff_en << 18) | ((u32)ch0_localdiv_body_ctrl << 13) | ((u32)ch0_localdiv_vdd10sel << 11) | ((u32)ch0_localdiv_res << 9) | ((u32)ch0_dac_ldo_en << 8) | ((u32)ch0_tempsens_bias_ctrl << 3) | ((u32)ch0_tempsens_en << 2) | ((u32)ch0_spare2_in << 0));
}

static inline void rfic_regs_ch_0_gen_ctrl_1_unpack(struct cl_chip *chip, u8 *ch0_localdiv_rxtxn, u8 *ch0_localdiv_sx_sel, u8 *ch0_spare5_in, u8 *ch0_localdiv_ldo_en, u8 *ch0_spare4_in, u8 *ch0_localdiv_divbuff_en, u8 *ch0_localdiv_body_ctrl, u8 *ch0_localdiv_vdd10sel, u8 *ch0_localdiv_res, u8 *ch0_dac_ldo_en, u8 *ch0_tempsens_bias_ctrl, u8 *ch0_tempsens_en, u8 *ch0_spare2_in)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR);

	*ch0_localdiv_rxtxn = (local_val & ((u32)0x80000000)) >> 31;
	*ch0_localdiv_sx_sel = (local_val & ((u32)0x40000000)) >> 30;
	*ch0_spare5_in = (local_val & ((u32)0x3FC00000)) >> 22;
	*ch0_localdiv_ldo_en = (local_val & ((u32)0x00200000)) >> 21;
	*ch0_spare4_in = (local_val & ((u32)0x00180000)) >> 19;
	*ch0_localdiv_divbuff_en = (local_val & ((u32)0x00040000)) >> 18;
	*ch0_localdiv_body_ctrl = (local_val & ((u32)0x0003E000)) >> 13;
	*ch0_localdiv_vdd10sel = (local_val & ((u32)0x00001800)) >> 11;
	*ch0_localdiv_res = (local_val & ((u32)0x00000600)) >> 9;
	*ch0_dac_ldo_en = (local_val & ((u32)0x00000100)) >> 8;
	*ch0_tempsens_bias_ctrl = (local_val & ((u32)0x000000F8)) >> 3;
	*ch0_tempsens_en = (local_val & ((u32)0x00000004)) >> 2;
	*ch0_spare2_in = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_ch_0_gen_ctrl_1_ch_0_localdiv_rxtxn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void rfic_regs_ch_0_gen_ctrl_1_ch_0_localdiv_rxtxn_setf(struct cl_chip *chip, u8 ch0localdivrxtxn)
{
	ASSERT_ERR_CHIP((((u32)ch0localdivrxtxn << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR) & ~((u32)0x80000000)) | ((u32)ch0localdivrxtxn << 31));
}

#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_RXTXN .addr_index = 0x00000161, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_ch_0_gen_ctrl_1_ch_0_localdiv_sx_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void rfic_regs_ch_0_gen_ctrl_1_ch_0_localdiv_sx_sel_setf(struct cl_chip *chip, u8 ch0localdivsxsel)
{
	ASSERT_ERR_CHIP((((u32)ch0localdivsxsel << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR) & ~((u32)0x40000000)) | ((u32)ch0localdivsxsel << 30));
}

#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_SX_SEL .addr_index = 0x00000161, .size_minus_1 = (1 - 1), .shift = 30

static inline u8 rfic_regs_ch_0_gen_ctrl_1_ch_0_spare_5_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x3FC00000)) >> 22);
}

static inline void rfic_regs_ch_0_gen_ctrl_1_ch_0_spare_5_in_setf(struct cl_chip *chip, u8 ch0spare5in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare5in << 22) & ~((u32)0x3FC00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR) & ~((u32)0x3FC00000)) | ((u32)ch0spare5in << 22));
}

#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_SPARE_5_IN .addr_index = 0x00000161, .size_minus_1 = (8 - 1), .shift = 22

static inline u8 rfic_regs_ch_0_gen_ctrl_1_ch_0_localdiv_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline void rfic_regs_ch_0_gen_ctrl_1_ch_0_localdiv_ldo_en_setf(struct cl_chip *chip, u8 ch0localdivldoen)
{
	ASSERT_ERR_CHIP((((u32)ch0localdivldoen << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR) & ~((u32)0x00200000)) | ((u32)ch0localdivldoen << 21));
}

#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_LDO_EN .addr_index = 0x00000161, .size_minus_1 = (1 - 1), .shift = 21

static inline u8 rfic_regs_ch_0_gen_ctrl_1_ch_0_spare_4_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00180000)) >> 19);
}

static inline void rfic_regs_ch_0_gen_ctrl_1_ch_0_spare_4_in_setf(struct cl_chip *chip, u8 ch0spare4in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare4in << 19) & ~((u32)0x00180000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR) & ~((u32)0x00180000)) | ((u32)ch0spare4in << 19));
}

#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_SPARE_4_IN .addr_index = 0x00000161, .size_minus_1 = (2 - 1), .shift = 19

static inline u8 rfic_regs_ch_0_gen_ctrl_1_ch_0_localdiv_divbuff_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void rfic_regs_ch_0_gen_ctrl_1_ch_0_localdiv_divbuff_en_setf(struct cl_chip *chip, u8 ch0localdivdivbuffen)
{
	ASSERT_ERR_CHIP((((u32)ch0localdivdivbuffen << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR) & ~((u32)0x00040000)) | ((u32)ch0localdivdivbuffen << 18));
}

#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_DIVBUFF_EN .addr_index = 0x00000161, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_ch_0_gen_ctrl_1_ch_0_localdiv_body_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0003E000)) >> 13);
}

static inline void rfic_regs_ch_0_gen_ctrl_1_ch_0_localdiv_body_ctrl_setf(struct cl_chip *chip, u8 ch0localdivbodyctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0localdivbodyctrl << 13) & ~((u32)0x0003E000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR) & ~((u32)0x0003E000)) | ((u32)ch0localdivbodyctrl << 13));
}

#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_BODY_CTRL .addr_index = 0x00000161, .size_minus_1 = (5 - 1), .shift = 13

static inline u8 rfic_regs_ch_0_gen_ctrl_1_ch_0_localdiv_vdd_10_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00001800)) >> 11);
}

static inline void rfic_regs_ch_0_gen_ctrl_1_ch_0_localdiv_vdd_10_sel_setf(struct cl_chip *chip, u8 ch0localdivvdd10sel)
{
	ASSERT_ERR_CHIP((((u32)ch0localdivvdd10sel << 11) & ~((u32)0x00001800)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR) & ~((u32)0x00001800)) | ((u32)ch0localdivvdd10sel << 11));
}

#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_VDD_10_SEL .addr_index = 0x00000161, .size_minus_1 = (2 - 1), .shift = 11

static inline u8 rfic_regs_ch_0_gen_ctrl_1_ch_0_localdiv_res_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000600)) >> 9);
}

static inline void rfic_regs_ch_0_gen_ctrl_1_ch_0_localdiv_res_setf(struct cl_chip *chip, u8 ch0localdivres)
{
	ASSERT_ERR_CHIP((((u32)ch0localdivres << 9) & ~((u32)0x00000600)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR) & ~((u32)0x00000600)) | ((u32)ch0localdivres << 9));
}

#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_LOCALDIV_RES .addr_index = 0x00000161, .size_minus_1 = (2 - 1), .shift = 9

static inline u8 rfic_regs_ch_0_gen_ctrl_1_ch_0_dac_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_ch_0_gen_ctrl_1_ch_0_dac_ldo_en_setf(struct cl_chip *chip, u8 ch0dacldoen)
{
	ASSERT_ERR_CHIP((((u32)ch0dacldoen << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR) & ~((u32)0x00000100)) | ((u32)ch0dacldoen << 8));
}

#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_DAC_LDO_EN .addr_index = 0x00000161, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_ch_0_gen_ctrl_1_ch_0_tempsens_bias_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x000000F8)) >> 3);
}

static inline void rfic_regs_ch_0_gen_ctrl_1_ch_0_tempsens_bias_ctrl_setf(struct cl_chip *chip, u8 ch0tempsensbiasctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0tempsensbiasctrl << 3) & ~((u32)0x000000F8)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR) & ~((u32)0x000000F8)) | ((u32)ch0tempsensbiasctrl << 3));
}

#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_TEMPSENS_BIAS_CTRL .addr_index = 0x00000161, .size_minus_1 = (5 - 1), .shift = 3

static inline u8 rfic_regs_ch_0_gen_ctrl_1_ch_0_tempsens_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_ch_0_gen_ctrl_1_ch_0_tempsens_en_setf(struct cl_chip *chip, u8 ch0tempsensen)
{
	ASSERT_ERR_CHIP((((u32)ch0tempsensen << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR) & ~((u32)0x00000004)) | ((u32)ch0tempsensen << 2));
}

#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_TEMPSENS_EN .addr_index = 0x00000161, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_ch_0_gen_ctrl_1_ch_0_spare_2_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_ch_0_gen_ctrl_1_ch_0_spare_2_in_setf(struct cl_chip *chip, u8 ch0spare2in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare2in << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_1_ADDR) & ~((u32)0x00000003)) | ((u32)ch0spare2in << 0));
}

#define RFIC_REGS_CH_0_GEN_CTRL_1_CH_0_SPARE_2_IN .addr_index = 0x00000161, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief CH_0_GEN_CTRL_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    CH0_loopbk_amp_en         00000000
 *    30    CH0_trsw_pa_5to7g_en      00000000
 *    29    CH0_trsw_pa_2p4g_en       00000000
 *    28    CH0_trsw_lna_5to7g_en     00000000
 *    27    CH0_trsw_lna_2p4g_en      00000000
 *    26:24 CH0_spare6_in             0x00000000
 *    23    CH0_loopbk_phase_shifter_ctrl 00000000
 *    22:19 CH0_loopbk_atten_ctrl     0x00000000
 *    18:16 CH0_loopbk_amp_gc         0x00000000
 *    15:14 CHx_pdet_vga_vb_sel       0x00000000
 *    13:11 CH0_pdet_vga_gain         0x00000007
 *    10    CH0_pdet_ldo_en           00000000
 *    09    CH0_bb_en                 00000000
 *    08    CH0_bb_single_en          00000000
 *    07    CH0_bb_tx_mode_en         00000000
 *    06    CH0_bb_bw_increase_en     00000000
 *    05    CH0_bb_bypass_en          00000000
 *    04:00 CH0_bb_cal_ctrl           0x00000010
 * </pre>
 */
#define RFIC_REGS_CH_0_GEN_CTRL_2_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000588)
#define RFIC_REGS_CH_0_GEN_CTRL_2_OFFSET      0x00000588
#define RFIC_REGS_CH_0_GEN_CTRL_2_INDEX       0x00000162
#define RFIC_REGS_CH_0_GEN_CTRL_2_RESET       0x00003810

static inline u32 rfic_regs_ch_0_gen_ctrl_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, value);
}

#define RFIC_REGS_CH_0_GEN_CTRL_2 .addr_index = 0x00000162, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_AMP_EN_BIT    ((u32)0x80000000)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_AMP_EN_POS    31
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_TRSW_PA_5_TO_7_G_EN_BIT    ((u32)0x40000000)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_TRSW_PA_5_TO_7_G_EN_POS    30
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_TRSW_PA_2_P_4_G_EN_BIT    ((u32)0x20000000)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_TRSW_PA_2_P_4_G_EN_POS    29
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_TRSW_LNA_5_TO_7_G_EN_BIT    ((u32)0x10000000)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_TRSW_LNA_5_TO_7_G_EN_POS    28
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_TRSW_LNA_2_P_4_G_EN_BIT    ((u32)0x08000000)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_TRSW_LNA_2_P_4_G_EN_POS    27
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_SPARE_6_IN_MASK    ((u32)0x07000000)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_SPARE_6_IN_LSB    24
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_SPARE_6_IN_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_PHASE_SHIFTER_CTRL_BIT    ((u32)0x00800000)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_PHASE_SHIFTER_CTRL_POS    23
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_ATTEN_CTRL_MASK    ((u32)0x00780000)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_ATTEN_CTRL_LSB    19
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_ATTEN_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_AMP_GC_MASK    ((u32)0x00070000)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_AMP_GC_LSB    16
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_AMP_GC_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CHX_PDET_VGA_VB_SEL_MASK    ((u32)0x0000C000)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CHX_PDET_VGA_VB_SEL_LSB    14
#define RFIC_REGS_CH_0_GEN_CTRL_2_CHX_PDET_VGA_VB_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_PDET_VGA_GAIN_MASK    ((u32)0x00003800)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_PDET_VGA_GAIN_LSB    11
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_PDET_VGA_GAIN_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_PDET_LDO_EN_BIT    ((u32)0x00000400)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_PDET_LDO_EN_POS    10
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_EN_BIT    ((u32)0x00000200)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_EN_POS    9
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_SINGLE_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_SINGLE_EN_POS    8
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_TX_MODE_EN_BIT    ((u32)0x00000080)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_TX_MODE_EN_POS    7
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_BW_INCREASE_EN_BIT    ((u32)0x00000040)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_BW_INCREASE_EN_POS    6
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_BYPASS_EN_BIT    ((u32)0x00000020)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_BYPASS_EN_POS    5
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_CAL_CTRL_MASK    ((u32)0x0000001F)
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_CAL_CTRL_LSB    0
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_CAL_CTRL_WIDTH    ((u32)0x00000005)

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_AMP_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_TRSW_PA_5_TO_7_G_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_TRSW_PA_2_P_4_G_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_TRSW_LNA_5_TO_7_G_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_TRSW_LNA_2_P_4_G_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_SPARE_6_IN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_PHASE_SHIFTER_CTRL_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_ATTEN_CTRL_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_AMP_GC_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_2_CHX_PDET_VGA_VB_SEL_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_PDET_VGA_GAIN_RST    0x00000007
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_PDET_LDO_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_SINGLE_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_TX_MODE_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_BW_INCREASE_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_BYPASS_EN_RST    0x00000000
#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_CAL_CTRL_RST    0x00000010

static inline void rfic_regs_ch_0_gen_ctrl_2_pack(struct cl_chip *chip, u8 ch0_loopbk_amp_en, u8 ch0_trsw_pa_5to7g_en, u8 ch0_trsw_pa_2p4g_en, u8 ch0_trsw_lna_5to7g_en, u8 ch0_trsw_lna_2p4g_en, u8 ch0_spare6_in, u8 ch0_loopbk_phase_shifter_ctrl, u8 ch0_loopbk_atten_ctrl, u8 ch0_loopbk_amp_gc, u8 chx_pdet_vga_vb_sel, u8 ch0_pdet_vga_gain, u8 ch0_pdet_ldo_en, u8 ch0_bb_en, u8 ch0_bb_single_en, u8 ch0_bb_tx_mode_en, u8 ch0_bb_bw_increase_en, u8 ch0_bb_bypass_en, u8 ch0_bb_cal_ctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0_loopbk_amp_en << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_trsw_pa_5to7g_en << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_trsw_pa_2p4g_en << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_trsw_lna_5to7g_en << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_trsw_lna_2p4g_en << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare6_in << 24) & ~((u32)0x07000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_loopbk_phase_shifter_ctrl << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_loopbk_atten_ctrl << 19) & ~((u32)0x00780000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_loopbk_amp_gc << 16) & ~((u32)0x00070000)) == 0);
	ASSERT_ERR_CHIP((((u32)chx_pdet_vga_vb_sel << 14) & ~((u32)0x0000C000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_pdet_vga_gain << 11) & ~((u32)0x00003800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_pdet_ldo_en << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_bb_en << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_bb_single_en << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_bb_tx_mode_en << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_bb_bw_increase_en << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_bb_bypass_en << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_bb_cal_ctrl << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, ((u32)ch0_loopbk_amp_en << 31) | ((u32)ch0_trsw_pa_5to7g_en << 30) | ((u32)ch0_trsw_pa_2p4g_en << 29) | ((u32)ch0_trsw_lna_5to7g_en << 28) | ((u32)ch0_trsw_lna_2p4g_en << 27) | ((u32)ch0_spare6_in << 24) | ((u32)ch0_loopbk_phase_shifter_ctrl << 23) | ((u32)ch0_loopbk_atten_ctrl << 19) | ((u32)ch0_loopbk_amp_gc << 16) | ((u32)chx_pdet_vga_vb_sel << 14) | ((u32)ch0_pdet_vga_gain << 11) | ((u32)ch0_pdet_ldo_en << 10) | ((u32)ch0_bb_en << 9) | ((u32)ch0_bb_single_en << 8) | ((u32)ch0_bb_tx_mode_en << 7) | ((u32)ch0_bb_bw_increase_en << 6) | ((u32)ch0_bb_bypass_en << 5) | ((u32)ch0_bb_cal_ctrl << 0));
}

static inline void rfic_regs_ch_0_gen_ctrl_2_unpack(struct cl_chip *chip, u8 *ch0_loopbk_amp_en, u8 *ch0_trsw_pa_5to7g_en, u8 *ch0_trsw_pa_2p4g_en, u8 *ch0_trsw_lna_5to7g_en, u8 *ch0_trsw_lna_2p4g_en, u8 *ch0_spare6_in, u8 *ch0_loopbk_phase_shifter_ctrl, u8 *ch0_loopbk_atten_ctrl, u8 *ch0_loopbk_amp_gc, u8 *chx_pdet_vga_vb_sel, u8 *ch0_pdet_vga_gain, u8 *ch0_pdet_ldo_en, u8 *ch0_bb_en, u8 *ch0_bb_single_en, u8 *ch0_bb_tx_mode_en, u8 *ch0_bb_bw_increase_en, u8 *ch0_bb_bypass_en, u8 *ch0_bb_cal_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	*ch0_loopbk_amp_en = (local_val & ((u32)0x80000000)) >> 31;
	*ch0_trsw_pa_5to7g_en = (local_val & ((u32)0x40000000)) >> 30;
	*ch0_trsw_pa_2p4g_en = (local_val & ((u32)0x20000000)) >> 29;
	*ch0_trsw_lna_5to7g_en = (local_val & ((u32)0x10000000)) >> 28;
	*ch0_trsw_lna_2p4g_en = (local_val & ((u32)0x08000000)) >> 27;
	*ch0_spare6_in = (local_val & ((u32)0x07000000)) >> 24;
	*ch0_loopbk_phase_shifter_ctrl = (local_val & ((u32)0x00800000)) >> 23;
	*ch0_loopbk_atten_ctrl = (local_val & ((u32)0x00780000)) >> 19;
	*ch0_loopbk_amp_gc = (local_val & ((u32)0x00070000)) >> 16;
	*chx_pdet_vga_vb_sel = (local_val & ((u32)0x0000C000)) >> 14;
	*ch0_pdet_vga_gain = (local_val & ((u32)0x00003800)) >> 11;
	*ch0_pdet_ldo_en = (local_val & ((u32)0x00000400)) >> 10;
	*ch0_bb_en = (local_val & ((u32)0x00000200)) >> 9;
	*ch0_bb_single_en = (local_val & ((u32)0x00000100)) >> 8;
	*ch0_bb_tx_mode_en = (local_val & ((u32)0x00000080)) >> 7;
	*ch0_bb_bw_increase_en = (local_val & ((u32)0x00000040)) >> 6;
	*ch0_bb_bypass_en = (local_val & ((u32)0x00000020)) >> 5;
	*ch0_bb_cal_ctrl = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_loopbk_amp_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_loopbk_amp_en_setf(struct cl_chip *chip, u8 ch0loopbkampen)
{
	ASSERT_ERR_CHIP((((u32)ch0loopbkampen << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x80000000)) | ((u32)ch0loopbkampen << 31));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_AMP_EN .addr_index = 0x00000162, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_trsw_pa_5_to_7_g_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_trsw_pa_5_to_7_g_en_setf(struct cl_chip *chip, u8 ch0trswpa5to7gen)
{
	ASSERT_ERR_CHIP((((u32)ch0trswpa5to7gen << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x40000000)) | ((u32)ch0trswpa5to7gen << 30));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_TRSW_PA_5_TO_7_G_EN .addr_index = 0x00000162, .size_minus_1 = (1 - 1), .shift = 30

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_trsw_pa_2_p_4_g_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_trsw_pa_2_p_4_g_en_setf(struct cl_chip *chip, u8 ch0trswpa2p4gen)
{
	ASSERT_ERR_CHIP((((u32)ch0trswpa2p4gen << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x20000000)) | ((u32)ch0trswpa2p4gen << 29));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_TRSW_PA_2_P_4_G_EN .addr_index = 0x00000162, .size_minus_1 = (1 - 1), .shift = 29

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_trsw_lna_5_to_7_g_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_trsw_lna_5_to_7_g_en_setf(struct cl_chip *chip, u8 ch0trswlna5to7gen)
{
	ASSERT_ERR_CHIP((((u32)ch0trswlna5to7gen << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x10000000)) | ((u32)ch0trswlna5to7gen << 28));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_TRSW_LNA_5_TO_7_G_EN .addr_index = 0x00000162, .size_minus_1 = (1 - 1), .shift = 28

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_trsw_lna_2_p_4_g_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_trsw_lna_2_p_4_g_en_setf(struct cl_chip *chip, u8 ch0trswlna2p4gen)
{
	ASSERT_ERR_CHIP((((u32)ch0trswlna2p4gen << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x08000000)) | ((u32)ch0trswlna2p4gen << 27));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_TRSW_LNA_2_P_4_G_EN .addr_index = 0x00000162, .size_minus_1 = (1 - 1), .shift = 27

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_spare_6_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x07000000)) >> 24);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_spare_6_in_setf(struct cl_chip *chip, u8 ch0spare6in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare6in << 24) & ~((u32)0x07000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x07000000)) | ((u32)ch0spare6in << 24));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_SPARE_6_IN .addr_index = 0x00000162, .size_minus_1 = (3 - 1), .shift = 24

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_loopbk_phase_shifter_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_loopbk_phase_shifter_ctrl_setf(struct cl_chip *chip, u8 ch0loopbkphaseshifterctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0loopbkphaseshifterctrl << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x00800000)) | ((u32)ch0loopbkphaseshifterctrl << 23));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_PHASE_SHIFTER_CTRL .addr_index = 0x00000162, .size_minus_1 = (1 - 1), .shift = 23

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_loopbk_atten_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00780000)) >> 19);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_loopbk_atten_ctrl_setf(struct cl_chip *chip, u8 ch0loopbkattenctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0loopbkattenctrl << 19) & ~((u32)0x00780000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x00780000)) | ((u32)ch0loopbkattenctrl << 19));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_ATTEN_CTRL .addr_index = 0x00000162, .size_minus_1 = (4 - 1), .shift = 19

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_loopbk_amp_gc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00070000)) >> 16);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_loopbk_amp_gc_setf(struct cl_chip *chip, u8 ch0loopbkampgc)
{
	ASSERT_ERR_CHIP((((u32)ch0loopbkampgc << 16) & ~((u32)0x00070000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x00070000)) | ((u32)ch0loopbkampgc << 16));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_LOOPBK_AMP_GC .addr_index = 0x00000162, .size_minus_1 = (3 - 1), .shift = 16

static inline u8 rfic_regs_ch_0_gen_ctrl_2_chx_pdet_vga_vb_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x0000C000)) >> 14);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_chx_pdet_vga_vb_sel_setf(struct cl_chip *chip, u8 chxpdetvgavbsel)
{
	ASSERT_ERR_CHIP((((u32)chxpdetvgavbsel << 14) & ~((u32)0x0000C000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x0000C000)) | ((u32)chxpdetvgavbsel << 14));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CHX_PDET_VGA_VB_SEL .addr_index = 0x00000162, .size_minus_1 = (2 - 1), .shift = 14

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_pdet_vga_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00003800)) >> 11);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_pdet_vga_gain_setf(struct cl_chip *chip, u8 ch0pdetvgagain)
{
	ASSERT_ERR_CHIP((((u32)ch0pdetvgagain << 11) & ~((u32)0x00003800)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x00003800)) | ((u32)ch0pdetvgagain << 11));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_PDET_VGA_GAIN .addr_index = 0x00000162, .size_minus_1 = (3 - 1), .shift = 11

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_pdet_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_pdet_ldo_en_setf(struct cl_chip *chip, u8 ch0pdetldoen)
{
	ASSERT_ERR_CHIP((((u32)ch0pdetldoen << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x00000400)) | ((u32)ch0pdetldoen << 10));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_PDET_LDO_EN .addr_index = 0x00000162, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_bb_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_bb_en_setf(struct cl_chip *chip, u8 ch0bben)
{
	ASSERT_ERR_CHIP((((u32)ch0bben << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x00000200)) | ((u32)ch0bben << 9));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_EN .addr_index = 0x00000162, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_bb_single_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_bb_single_en_setf(struct cl_chip *chip, u8 ch0bbsingleen)
{
	ASSERT_ERR_CHIP((((u32)ch0bbsingleen << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x00000100)) | ((u32)ch0bbsingleen << 8));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_SINGLE_EN .addr_index = 0x00000162, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_bb_tx_mode_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_bb_tx_mode_en_setf(struct cl_chip *chip, u8 ch0bbtxmodeen)
{
	ASSERT_ERR_CHIP((((u32)ch0bbtxmodeen << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x00000080)) | ((u32)ch0bbtxmodeen << 7));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_TX_MODE_EN .addr_index = 0x00000162, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_bb_bw_increase_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_bb_bw_increase_en_setf(struct cl_chip *chip, u8 ch0bbbwincreaseen)
{
	ASSERT_ERR_CHIP((((u32)ch0bbbwincreaseen << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x00000040)) | ((u32)ch0bbbwincreaseen << 6));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_BW_INCREASE_EN .addr_index = 0x00000162, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_bb_bypass_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_bb_bypass_en_setf(struct cl_chip *chip, u8 ch0bbbypassen)
{
	ASSERT_ERR_CHIP((((u32)ch0bbbypassen << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x00000020)) | ((u32)ch0bbbypassen << 5));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_BYPASS_EN .addr_index = 0x00000162, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_ch_0_gen_ctrl_2_ch_0_bb_cal_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

static inline void rfic_regs_ch_0_gen_ctrl_2_ch_0_bb_cal_ctrl_setf(struct cl_chip *chip, u8 ch0bbcalctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0bbcalctrl << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_GEN_CTRL_2_ADDR) & ~((u32)0x0000001F)) | ((u32)ch0bbcalctrl << 0));
}

#define RFIC_REGS_CH_0_GEN_CTRL_2_CH_0_BB_CAL_CTRL .addr_index = 0x00000162, .size_minus_1 = (5 - 1), .shift = 0

/**
 * @brief CH_0_RSSI_CONF register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    24:23 CH0_spare10_in            0x00000000
 *    22:19 CH0_adc_lpbk_spare        0x00000000
 *    18:15 CH0_spare9_in             0x00000000
 *    14    CH0_adc_lpbk_en           00000000
 *    13:05 CH0_spare8_in             0x00000000
 *    04:02 CH0_rssi_filt_sel         0x00000000
 *    01    CH0_rssi_en               00000000
 *    00    CH0_spare7_in             00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_RSSI_CONF_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000058C)
#define RFIC_REGS_CH_0_RSSI_CONF_OFFSET      0x0000058C
#define RFIC_REGS_CH_0_RSSI_CONF_INDEX       0x00000163
#define RFIC_REGS_CH_0_RSSI_CONF_RESET       0x00000000

static inline u32 rfic_regs_ch_0_rssi_conf_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR);
}

static inline void rfic_regs_ch_0_rssi_conf_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR, value);
}

#define RFIC_REGS_CH_0_RSSI_CONF .addr_index = 0x00000163, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_10_IN_MASK    ((u32)0x01800000)
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_10_IN_LSB    23
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_10_IN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_ADC_LPBK_SPARE_MASK    ((u32)0x00780000)
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_ADC_LPBK_SPARE_LSB    19
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_ADC_LPBK_SPARE_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_9_IN_MASK    ((u32)0x00078000)
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_9_IN_LSB    15
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_9_IN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_ADC_LPBK_EN_BIT    ((u32)0x00004000)
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_ADC_LPBK_EN_POS    14
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_8_IN_MASK    ((u32)0x00003FE0)
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_8_IN_LSB    5
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_8_IN_WIDTH    ((u32)0x00000009)
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_RSSI_FILT_SEL_MASK    ((u32)0x0000001C)
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_RSSI_FILT_SEL_LSB    2
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_RSSI_FILT_SEL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_RSSI_EN_BIT    ((u32)0x00000002)
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_RSSI_EN_POS    1
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_7_IN_BIT    ((u32)0x00000001)
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_7_IN_POS    0

#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_10_IN_RST    0x00000000
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_ADC_LPBK_SPARE_RST    0x00000000
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_9_IN_RST    0x00000000
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_ADC_LPBK_EN_RST    0x00000000
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_8_IN_RST    0x00000000
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_RSSI_FILT_SEL_RST    0x00000000
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_RSSI_EN_RST    0x00000000
#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_7_IN_RST    0x00000000

static inline void rfic_regs_ch_0_rssi_conf_pack(struct cl_chip *chip, u8 ch0_spare10_in, u8 ch0_adc_lpbk_spare, u8 ch0_spare9_in, u8 ch0_adc_lpbk_en, u16 ch0_spare8_in, u8 ch0_rssi_filt_sel, u8 ch0_rssi_en, u8 ch0_spare7_in)
{
	ASSERT_ERR_CHIP((((u32)ch0_spare10_in << 23) & ~((u32)0x01800000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_adc_lpbk_spare << 19) & ~((u32)0x00780000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare9_in << 15) & ~((u32)0x00078000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_adc_lpbk_en << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare8_in << 5) & ~((u32)0x00003FE0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rssi_filt_sel << 2) & ~((u32)0x0000001C)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rssi_en << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare7_in << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR, ((u32)ch0_spare10_in << 23) | ((u32)ch0_adc_lpbk_spare << 19) | ((u32)ch0_spare9_in << 15) | ((u32)ch0_adc_lpbk_en << 14) | ((u32)ch0_spare8_in << 5) | ((u32)ch0_rssi_filt_sel << 2) | ((u32)ch0_rssi_en << 1) | ((u32)ch0_spare7_in << 0));
}

static inline void rfic_regs_ch_0_rssi_conf_unpack(struct cl_chip *chip, u8 *ch0_spare10_in, u8 *ch0_adc_lpbk_spare, u8 *ch0_spare9_in, u8 *ch0_adc_lpbk_en, u16 *ch0_spare8_in, u8 *ch0_rssi_filt_sel, u8 *ch0_rssi_en, u8 *ch0_spare7_in)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR);

	*ch0_spare10_in = (local_val & ((u32)0x01800000)) >> 23;
	*ch0_adc_lpbk_spare = (local_val & ((u32)0x00780000)) >> 19;
	*ch0_spare9_in = (local_val & ((u32)0x00078000)) >> 15;
	*ch0_adc_lpbk_en = (local_val & ((u32)0x00004000)) >> 14;
	*ch0_spare8_in = (local_val & ((u32)0x00003FE0)) >> 5;
	*ch0_rssi_filt_sel = (local_val & ((u32)0x0000001C)) >> 2;
	*ch0_rssi_en = (local_val & ((u32)0x00000002)) >> 1;
	*ch0_spare7_in = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_ch_0_rssi_conf_ch_0_spare_10_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x01800000)) >> 23);
}

static inline void rfic_regs_ch_0_rssi_conf_ch_0_spare_10_in_setf(struct cl_chip *chip, u8 ch0spare10in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare10in << 23) & ~((u32)0x01800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR) & ~((u32)0x01800000)) | ((u32)ch0spare10in << 23));
}

#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_10_IN .addr_index = 0x00000163, .size_minus_1 = (2 - 1), .shift = 23

static inline u8 rfic_regs_ch_0_rssi_conf_ch_0_adc_lpbk_spare_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00780000)) >> 19);
}

static inline void rfic_regs_ch_0_rssi_conf_ch_0_adc_lpbk_spare_setf(struct cl_chip *chip, u8 ch0adclpbkspare)
{
	ASSERT_ERR_CHIP((((u32)ch0adclpbkspare << 19) & ~((u32)0x00780000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR) & ~((u32)0x00780000)) | ((u32)ch0adclpbkspare << 19));
}

#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_ADC_LPBK_SPARE .addr_index = 0x00000163, .size_minus_1 = (4 - 1), .shift = 19

static inline u8 rfic_regs_ch_0_rssi_conf_ch_0_spare_9_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00078000)) >> 15);
}

static inline void rfic_regs_ch_0_rssi_conf_ch_0_spare_9_in_setf(struct cl_chip *chip, u8 ch0spare9in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare9in << 15) & ~((u32)0x00078000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR) & ~((u32)0x00078000)) | ((u32)ch0spare9in << 15));
}

#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_9_IN .addr_index = 0x00000163, .size_minus_1 = (4 - 1), .shift = 15

static inline u8 rfic_regs_ch_0_rssi_conf_ch_0_adc_lpbk_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void rfic_regs_ch_0_rssi_conf_ch_0_adc_lpbk_en_setf(struct cl_chip *chip, u8 ch0adclpbken)
{
	ASSERT_ERR_CHIP((((u32)ch0adclpbken << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR) & ~((u32)0x00004000)) | ((u32)ch0adclpbken << 14));
}

#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_ADC_LPBK_EN .addr_index = 0x00000163, .size_minus_1 = (1 - 1), .shift = 14

static inline u16 rfic_regs_ch_0_rssi_conf_ch_0_spare_8_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR);

	return (u16)((local_val & ((u32)0x00003FE0)) >> 5);
}

static inline void rfic_regs_ch_0_rssi_conf_ch_0_spare_8_in_setf(struct cl_chip *chip, u16 ch0spare8in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare8in << 5) & ~((u32)0x00003FE0)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR) & ~((u32)0x00003FE0)) | ((u32)ch0spare8in << 5));
}

#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_8_IN .addr_index = 0x00000163, .size_minus_1 = (9 - 1), .shift = 5

static inline u8 rfic_regs_ch_0_rssi_conf_ch_0_rssi_filt_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x0000001C)) >> 2);
}

static inline void rfic_regs_ch_0_rssi_conf_ch_0_rssi_filt_sel_setf(struct cl_chip *chip, u8 ch0rssifiltsel)
{
	ASSERT_ERR_CHIP((((u32)ch0rssifiltsel << 2) & ~((u32)0x0000001C)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR) & ~((u32)0x0000001C)) | ((u32)ch0rssifiltsel << 2));
}

#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_RSSI_FILT_SEL .addr_index = 0x00000163, .size_minus_1 = (3 - 1), .shift = 2

static inline u8 rfic_regs_ch_0_rssi_conf_ch_0_rssi_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_ch_0_rssi_conf_ch_0_rssi_en_setf(struct cl_chip *chip, u8 ch0rssien)
{
	ASSERT_ERR_CHIP((((u32)ch0rssien << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR) & ~((u32)0x00000002)) | ((u32)ch0rssien << 1));
}

#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_RSSI_EN .addr_index = 0x00000163, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_ch_0_rssi_conf_ch_0_spare_7_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_ch_0_rssi_conf_ch_0_spare_7_in_setf(struct cl_chip *chip, u8 ch0spare7in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare7in << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_RSSI_CONF_ADDR) & ~((u32)0x00000001)) | ((u32)ch0spare7in << 0));
}

#define RFIC_REGS_CH_0_RSSI_CONF_CH_0_SPARE_7_IN .addr_index = 0x00000163, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief CH_0_TX_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    14:11 CH0_tx_mix_gain           0x00000000
 *    10    CH0_dac_curr_sink_en      00000000
 *    09:07 CH0_tx_mix_lo_bias_ctrl   0x00000000
 *    06:03 CH0_tx_mix_curr_ctrl      0x00000000
 *    02:00 CH0_tx_mix_r_ctrl         0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_TX_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000590)
#define RFIC_REGS_CH_0_TX_CTRL_0_OFFSET      0x00000590
#define RFIC_REGS_CH_0_TX_CTRL_0_INDEX       0x00000164
#define RFIC_REGS_CH_0_TX_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_ch_0_tx_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR);
}

static inline void rfic_regs_ch_0_tx_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR, value);
}

#define RFIC_REGS_CH_0_TX_CTRL_0 .addr_index = 0x00000164, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_GAIN_MASK    ((u32)0x00007800)
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_GAIN_LSB    11
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_GAIN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_DAC_CURR_SINK_EN_BIT    ((u32)0x00000400)
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_DAC_CURR_SINK_EN_POS    10
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_LO_BIAS_CTRL_MASK    ((u32)0x00000380)
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_LO_BIAS_CTRL_LSB    7
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_LO_BIAS_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_CURR_CTRL_MASK    ((u32)0x00000078)
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_CURR_CTRL_LSB    3
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_CURR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_R_CTRL_MASK    ((u32)0x00000007)
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_R_CTRL_LSB    0
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_R_CTRL_WIDTH    ((u32)0x00000003)

#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_GAIN_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_DAC_CURR_SINK_EN_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_LO_BIAS_CTRL_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_CURR_CTRL_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_R_CTRL_RST    0x00000000

static inline void rfic_regs_ch_0_tx_ctrl_0_pack(struct cl_chip *chip, u8 ch0_tx_mix_gain, u8 ch0_dac_curr_sink_en, u8 ch0_tx_mix_lo_bias_ctrl, u8 ch0_tx_mix_curr_ctrl, u8 ch0_tx_mix_r_ctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0_tx_mix_gain << 11) & ~((u32)0x00007800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_dac_curr_sink_en << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_mix_lo_bias_ctrl << 7) & ~((u32)0x00000380)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_mix_curr_ctrl << 3) & ~((u32)0x00000078)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_mix_r_ctrl << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR, ((u32)ch0_tx_mix_gain << 11) | ((u32)ch0_dac_curr_sink_en << 10) | ((u32)ch0_tx_mix_lo_bias_ctrl << 7) | ((u32)ch0_tx_mix_curr_ctrl << 3) | ((u32)ch0_tx_mix_r_ctrl << 0));
}

static inline void rfic_regs_ch_0_tx_ctrl_0_unpack(struct cl_chip *chip, u8 *ch0_tx_mix_gain, u8 *ch0_dac_curr_sink_en, u8 *ch0_tx_mix_lo_bias_ctrl, u8 *ch0_tx_mix_curr_ctrl, u8 *ch0_tx_mix_r_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR);

	*ch0_tx_mix_gain = (local_val & ((u32)0x00007800)) >> 11;
	*ch0_dac_curr_sink_en = (local_val & ((u32)0x00000400)) >> 10;
	*ch0_tx_mix_lo_bias_ctrl = (local_val & ((u32)0x00000380)) >> 7;
	*ch0_tx_mix_curr_ctrl = (local_val & ((u32)0x00000078)) >> 3;
	*ch0_tx_mix_r_ctrl = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 rfic_regs_ch_0_tx_ctrl_0_ch_0_tx_mix_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00007800)) >> 11);
}

static inline void rfic_regs_ch_0_tx_ctrl_0_ch_0_tx_mix_gain_setf(struct cl_chip *chip, u8 ch0txmixgain)
{
	ASSERT_ERR_CHIP((((u32)ch0txmixgain << 11) & ~((u32)0x00007800)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR) & ~((u32)0x00007800)) | ((u32)ch0txmixgain << 11));
}

#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_GAIN .addr_index = 0x00000164, .size_minus_1 = (4 - 1), .shift = 11

static inline u8 rfic_regs_ch_0_tx_ctrl_0_ch_0_dac_curr_sink_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_ch_0_tx_ctrl_0_ch_0_dac_curr_sink_en_setf(struct cl_chip *chip, u8 ch0daccurrsinken)
{
	ASSERT_ERR_CHIP((((u32)ch0daccurrsinken << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR) & ~((u32)0x00000400)) | ((u32)ch0daccurrsinken << 10));
}

#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_DAC_CURR_SINK_EN .addr_index = 0x00000164, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_ch_0_tx_ctrl_0_ch_0_tx_mix_lo_bias_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000380)) >> 7);
}

static inline void rfic_regs_ch_0_tx_ctrl_0_ch_0_tx_mix_lo_bias_ctrl_setf(struct cl_chip *chip, u8 ch0txmixlobiasctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0txmixlobiasctrl << 7) & ~((u32)0x00000380)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR) & ~((u32)0x00000380)) | ((u32)ch0txmixlobiasctrl << 7));
}

#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_LO_BIAS_CTRL .addr_index = 0x00000164, .size_minus_1 = (3 - 1), .shift = 7

static inline u8 rfic_regs_ch_0_tx_ctrl_0_ch_0_tx_mix_curr_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000078)) >> 3);
}

static inline void rfic_regs_ch_0_tx_ctrl_0_ch_0_tx_mix_curr_ctrl_setf(struct cl_chip *chip, u8 ch0txmixcurrctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0txmixcurrctrl << 3) & ~((u32)0x00000078)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR) & ~((u32)0x00000078)) | ((u32)ch0txmixcurrctrl << 3));
}

#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_CURR_CTRL .addr_index = 0x00000164, .size_minus_1 = (4 - 1), .shift = 3

static inline u8 rfic_regs_ch_0_tx_ctrl_0_ch_0_tx_mix_r_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void rfic_regs_ch_0_tx_ctrl_0_ch_0_tx_mix_r_ctrl_setf(struct cl_chip *chip, u8 ch0txmixrctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0txmixrctrl << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_0_ADDR) & ~((u32)0x00000007)) | ((u32)ch0txmixrctrl << 0));
}

#define RFIC_REGS_CH_0_TX_CTRL_0_CH_0_TX_MIX_R_CTRL .addr_index = 0x00000164, .size_minus_1 = (3 - 1), .shift = 0

/**
 * @brief CH_0_TX_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 CH0_tx_prepa_curr_ctrl    0x00000000
 *    27    CH0_tx_pga_en             00000000
 *    26:19 CH0_tx_pga_gain_ctrl      0x00000000
 *    18:15 CH0_tx_pga_curr_ctrl      0x00000000
 *    14:11 CH0_spare12_in            0x00000000
 *    10:06 CH0_tx_pga_cap_ctrl       0x00000000
 *    05    CH0_tx_mix_en             00000000
 *    04:00 CH0_tx_mix_cap_ctrl       0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_TX_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000594)
#define RFIC_REGS_CH_0_TX_CTRL_1_OFFSET      0x00000594
#define RFIC_REGS_CH_0_TX_CTRL_1_INDEX       0x00000165
#define RFIC_REGS_CH_0_TX_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_ch_0_tx_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR);
}

static inline void rfic_regs_ch_0_tx_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR, value);
}

#define RFIC_REGS_CH_0_TX_CTRL_1 .addr_index = 0x00000165, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PREPA_CURR_CTRL_MASK    ((u32)0xF0000000)
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PREPA_CURR_CTRL_LSB    28
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PREPA_CURR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_EN_BIT    ((u32)0x08000000)
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_EN_POS    27
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_GAIN_CTRL_MASK    ((u32)0x07F80000)
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_GAIN_CTRL_LSB    19
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_GAIN_CTRL_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_CURR_CTRL_MASK    ((u32)0x00078000)
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_CURR_CTRL_LSB    15
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_CURR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_SPARE_12_IN_MASK    ((u32)0x00007800)
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_SPARE_12_IN_LSB    11
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_SPARE_12_IN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_CAP_CTRL_MASK    ((u32)0x000007C0)
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_CAP_CTRL_LSB    6
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_CAP_CTRL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_MIX_EN_BIT    ((u32)0x00000020)
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_MIX_EN_POS    5
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_MIX_CAP_CTRL_MASK    ((u32)0x0000001F)
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_MIX_CAP_CTRL_LSB    0
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_MIX_CAP_CTRL_WIDTH    ((u32)0x00000005)

#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PREPA_CURR_CTRL_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_EN_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_GAIN_CTRL_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_CURR_CTRL_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_SPARE_12_IN_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_CAP_CTRL_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_MIX_EN_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_MIX_CAP_CTRL_RST    0x00000000

static inline void rfic_regs_ch_0_tx_ctrl_1_pack(struct cl_chip *chip, u8 ch0_tx_prepa_curr_ctrl, u8 ch0_tx_pga_en, u8 ch0_tx_pga_gain_ctrl, u8 ch0_tx_pga_curr_ctrl, u8 ch0_spare12_in, u8 ch0_tx_pga_cap_ctrl, u8 ch0_tx_mix_en, u8 ch0_tx_mix_cap_ctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0_tx_prepa_curr_ctrl << 28) & ~((u32)0xF0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pga_en << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pga_gain_ctrl << 19) & ~((u32)0x07F80000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pga_curr_ctrl << 15) & ~((u32)0x00078000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare12_in << 11) & ~((u32)0x00007800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pga_cap_ctrl << 6) & ~((u32)0x000007C0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_mix_en << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_mix_cap_ctrl << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR, ((u32)ch0_tx_prepa_curr_ctrl << 28) | ((u32)ch0_tx_pga_en << 27) | ((u32)ch0_tx_pga_gain_ctrl << 19) | ((u32)ch0_tx_pga_curr_ctrl << 15) | ((u32)ch0_spare12_in << 11) | ((u32)ch0_tx_pga_cap_ctrl << 6) | ((u32)ch0_tx_mix_en << 5) | ((u32)ch0_tx_mix_cap_ctrl << 0));
}

static inline void rfic_regs_ch_0_tx_ctrl_1_unpack(struct cl_chip *chip, u8 *ch0_tx_prepa_curr_ctrl, u8 *ch0_tx_pga_en, u8 *ch0_tx_pga_gain_ctrl, u8 *ch0_tx_pga_curr_ctrl, u8 *ch0_spare12_in, u8 *ch0_tx_pga_cap_ctrl, u8 *ch0_tx_mix_en, u8 *ch0_tx_mix_cap_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR);

	*ch0_tx_prepa_curr_ctrl = (local_val & ((u32)0xF0000000)) >> 28;
	*ch0_tx_pga_en = (local_val & ((u32)0x08000000)) >> 27;
	*ch0_tx_pga_gain_ctrl = (local_val & ((u32)0x07F80000)) >> 19;
	*ch0_tx_pga_curr_ctrl = (local_val & ((u32)0x00078000)) >> 15;
	*ch0_spare12_in = (local_val & ((u32)0x00007800)) >> 11;
	*ch0_tx_pga_cap_ctrl = (local_val & ((u32)0x000007C0)) >> 6;
	*ch0_tx_mix_en = (local_val & ((u32)0x00000020)) >> 5;
	*ch0_tx_mix_cap_ctrl = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u8 rfic_regs_ch_0_tx_ctrl_1_ch_0_tx_prepa_curr_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0xF0000000)) >> 28);
}

static inline void rfic_regs_ch_0_tx_ctrl_1_ch_0_tx_prepa_curr_ctrl_setf(struct cl_chip *chip, u8 ch0txprepacurrctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0txprepacurrctrl << 28) & ~((u32)0xF0000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR) & ~((u32)0xF0000000)) | ((u32)ch0txprepacurrctrl << 28));
}

#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PREPA_CURR_CTRL .addr_index = 0x00000165, .size_minus_1 = (4 - 1), .shift = 28

static inline u8 rfic_regs_ch_0_tx_ctrl_1_ch_0_tx_pga_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void rfic_regs_ch_0_tx_ctrl_1_ch_0_tx_pga_en_setf(struct cl_chip *chip, u8 ch0txpgaen)
{
	ASSERT_ERR_CHIP((((u32)ch0txpgaen << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR) & ~((u32)0x08000000)) | ((u32)ch0txpgaen << 27));
}

#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_EN .addr_index = 0x00000165, .size_minus_1 = (1 - 1), .shift = 27

static inline u8 rfic_regs_ch_0_tx_ctrl_1_ch_0_tx_pga_gain_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x07F80000)) >> 19);
}

static inline void rfic_regs_ch_0_tx_ctrl_1_ch_0_tx_pga_gain_ctrl_setf(struct cl_chip *chip, u8 ch0txpgagainctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0txpgagainctrl << 19) & ~((u32)0x07F80000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR) & ~((u32)0x07F80000)) | ((u32)ch0txpgagainctrl << 19));
}

#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_GAIN_CTRL .addr_index = 0x00000165, .size_minus_1 = (8 - 1), .shift = 19

static inline u8 rfic_regs_ch_0_tx_ctrl_1_ch_0_tx_pga_curr_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00078000)) >> 15);
}

static inline void rfic_regs_ch_0_tx_ctrl_1_ch_0_tx_pga_curr_ctrl_setf(struct cl_chip *chip, u8 ch0txpgacurrctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0txpgacurrctrl << 15) & ~((u32)0x00078000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR) & ~((u32)0x00078000)) | ((u32)ch0txpgacurrctrl << 15));
}

#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_CURR_CTRL .addr_index = 0x00000165, .size_minus_1 = (4 - 1), .shift = 15

static inline u8 rfic_regs_ch_0_tx_ctrl_1_ch_0_spare_12_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00007800)) >> 11);
}

static inline void rfic_regs_ch_0_tx_ctrl_1_ch_0_spare_12_in_setf(struct cl_chip *chip, u8 ch0spare12in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare12in << 11) & ~((u32)0x00007800)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR) & ~((u32)0x00007800)) | ((u32)ch0spare12in << 11));
}

#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_SPARE_12_IN .addr_index = 0x00000165, .size_minus_1 = (4 - 1), .shift = 11

static inline u8 rfic_regs_ch_0_tx_ctrl_1_ch_0_tx_pga_cap_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x000007C0)) >> 6);
}

static inline void rfic_regs_ch_0_tx_ctrl_1_ch_0_tx_pga_cap_ctrl_setf(struct cl_chip *chip, u8 ch0txpgacapctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0txpgacapctrl << 6) & ~((u32)0x000007C0)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR) & ~((u32)0x000007C0)) | ((u32)ch0txpgacapctrl << 6));
}

#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_PGA_CAP_CTRL .addr_index = 0x00000165, .size_minus_1 = (5 - 1), .shift = 6

static inline u8 rfic_regs_ch_0_tx_ctrl_1_ch_0_tx_mix_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void rfic_regs_ch_0_tx_ctrl_1_ch_0_tx_mix_en_setf(struct cl_chip *chip, u8 ch0txmixen)
{
	ASSERT_ERR_CHIP((((u32)ch0txmixen << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR) & ~((u32)0x00000020)) | ((u32)ch0txmixen << 5));
}

#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_MIX_EN .addr_index = 0x00000165, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_ch_0_tx_ctrl_1_ch_0_tx_mix_cap_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

static inline void rfic_regs_ch_0_tx_ctrl_1_ch_0_tx_mix_cap_ctrl_setf(struct cl_chip *chip, u8 ch0txmixcapctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0txmixcapctrl << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_1_ADDR) & ~((u32)0x0000001F)) | ((u32)ch0txmixcapctrl << 0));
}

#define RFIC_REGS_CH_0_TX_CTRL_1_CH_0_TX_MIX_CAP_CTRL .addr_index = 0x00000165, .size_minus_1 = (5 - 1), .shift = 0

/**
 * @brief CH_0_TX_CTRL_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:20 CH0_spare14_in            0x00000000
 *    19    CH0_tx_pga_prepa_bias_en  00000000
 *    18:17 CH0_spare13_in            0x00000000
 *    16    CH0_tx_prepa_en           00000000
 *    15:13 CH0_tx_prepa_cap_match_ctrl 0x00000000
 *    12:08 CH0_tx_prepa_cap_ctrl     0x00000000
 *    07:00 CH0_tx_prepa_gain_ctrl    0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_TX_CTRL_2_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000598)
#define RFIC_REGS_CH_0_TX_CTRL_2_OFFSET      0x00000598
#define RFIC_REGS_CH_0_TX_CTRL_2_INDEX       0x00000166
#define RFIC_REGS_CH_0_TX_CTRL_2_RESET       0x00000000

static inline u32 rfic_regs_ch_0_tx_ctrl_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR);
}

static inline void rfic_regs_ch_0_tx_ctrl_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR, value);
}

#define RFIC_REGS_CH_0_TX_CTRL_2 .addr_index = 0x00000166, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_SPARE_14_IN_MASK    ((u32)0x0FF00000)
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_SPARE_14_IN_LSB    20
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_SPARE_14_IN_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PGA_PREPA_BIAS_EN_BIT    ((u32)0x00080000)
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PGA_PREPA_BIAS_EN_POS    19
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_SPARE_13_IN_MASK    ((u32)0x00060000)
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_SPARE_13_IN_LSB    17
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_SPARE_13_IN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_EN_BIT    ((u32)0x00010000)
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_EN_POS    16
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_CAP_MATCH_CTRL_MASK    ((u32)0x0000E000)
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_CAP_MATCH_CTRL_LSB    13
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_CAP_MATCH_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_CAP_CTRL_MASK    ((u32)0x00001F00)
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_CAP_CTRL_LSB    8
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_CAP_CTRL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_GAIN_CTRL_MASK    ((u32)0x000000FF)
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_GAIN_CTRL_LSB    0
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_GAIN_CTRL_WIDTH    ((u32)0x00000008)

#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_SPARE_14_IN_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PGA_PREPA_BIAS_EN_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_SPARE_13_IN_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_EN_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_CAP_MATCH_CTRL_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_CAP_CTRL_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_GAIN_CTRL_RST    0x00000000

static inline void rfic_regs_ch_0_tx_ctrl_2_pack(struct cl_chip *chip, u8 ch0_spare14_in, u8 ch0_tx_pga_prepa_bias_en, u8 ch0_spare13_in, u8 ch0_tx_prepa_en, u8 ch0_tx_prepa_cap_match_ctrl, u8 ch0_tx_prepa_cap_ctrl, u8 ch0_tx_prepa_gain_ctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0_spare14_in << 20) & ~((u32)0x0FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pga_prepa_bias_en << 19) & ~((u32)0x00080000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare13_in << 17) & ~((u32)0x00060000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_prepa_en << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_prepa_cap_match_ctrl << 13) & ~((u32)0x0000E000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_prepa_cap_ctrl << 8) & ~((u32)0x00001F00)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_prepa_gain_ctrl << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR, ((u32)ch0_spare14_in << 20) | ((u32)ch0_tx_pga_prepa_bias_en << 19) | ((u32)ch0_spare13_in << 17) | ((u32)ch0_tx_prepa_en << 16) | ((u32)ch0_tx_prepa_cap_match_ctrl << 13) | ((u32)ch0_tx_prepa_cap_ctrl << 8) | ((u32)ch0_tx_prepa_gain_ctrl << 0));
}

static inline void rfic_regs_ch_0_tx_ctrl_2_unpack(struct cl_chip *chip, u8 *ch0_spare14_in, u8 *ch0_tx_pga_prepa_bias_en, u8 *ch0_spare13_in, u8 *ch0_tx_prepa_en, u8 *ch0_tx_prepa_cap_match_ctrl, u8 *ch0_tx_prepa_cap_ctrl, u8 *ch0_tx_prepa_gain_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR);

	*ch0_spare14_in = (local_val & ((u32)0x0FF00000)) >> 20;
	*ch0_tx_pga_prepa_bias_en = (local_val & ((u32)0x00080000)) >> 19;
	*ch0_spare13_in = (local_val & ((u32)0x00060000)) >> 17;
	*ch0_tx_prepa_en = (local_val & ((u32)0x00010000)) >> 16;
	*ch0_tx_prepa_cap_match_ctrl = (local_val & ((u32)0x0000E000)) >> 13;
	*ch0_tx_prepa_cap_ctrl = (local_val & ((u32)0x00001F00)) >> 8;
	*ch0_tx_prepa_gain_ctrl = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 rfic_regs_ch_0_tx_ctrl_2_ch_0_spare_14_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x0FF00000)) >> 20);
}

static inline void rfic_regs_ch_0_tx_ctrl_2_ch_0_spare_14_in_setf(struct cl_chip *chip, u8 ch0spare14in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare14in << 20) & ~((u32)0x0FF00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR) & ~((u32)0x0FF00000)) | ((u32)ch0spare14in << 20));
}

#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_SPARE_14_IN .addr_index = 0x00000166, .size_minus_1 = (8 - 1), .shift = 20

static inline u8 rfic_regs_ch_0_tx_ctrl_2_ch_0_tx_pga_prepa_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline void rfic_regs_ch_0_tx_ctrl_2_ch_0_tx_pga_prepa_bias_en_setf(struct cl_chip *chip, u8 ch0txpgaprepabiasen)
{
	ASSERT_ERR_CHIP((((u32)ch0txpgaprepabiasen << 19) & ~((u32)0x00080000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR) & ~((u32)0x00080000)) | ((u32)ch0txpgaprepabiasen << 19));
}

#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PGA_PREPA_BIAS_EN .addr_index = 0x00000166, .size_minus_1 = (1 - 1), .shift = 19

static inline u8 rfic_regs_ch_0_tx_ctrl_2_ch_0_spare_13_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00060000)) >> 17);
}

static inline void rfic_regs_ch_0_tx_ctrl_2_ch_0_spare_13_in_setf(struct cl_chip *chip, u8 ch0spare13in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare13in << 17) & ~((u32)0x00060000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR) & ~((u32)0x00060000)) | ((u32)ch0spare13in << 17));
}

#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_SPARE_13_IN .addr_index = 0x00000166, .size_minus_1 = (2 - 1), .shift = 17

static inline u8 rfic_regs_ch_0_tx_ctrl_2_ch_0_tx_prepa_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void rfic_regs_ch_0_tx_ctrl_2_ch_0_tx_prepa_en_setf(struct cl_chip *chip, u8 ch0txprepaen)
{
	ASSERT_ERR_CHIP((((u32)ch0txprepaen << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR) & ~((u32)0x00010000)) | ((u32)ch0txprepaen << 16));
}

#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_EN .addr_index = 0x00000166, .size_minus_1 = (1 - 1), .shift = 16

static inline u8 rfic_regs_ch_0_tx_ctrl_2_ch_0_tx_prepa_cap_match_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x0000E000)) >> 13);
}

static inline void rfic_regs_ch_0_tx_ctrl_2_ch_0_tx_prepa_cap_match_ctrl_setf(struct cl_chip *chip, u8 ch0txprepacapmatchctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0txprepacapmatchctrl << 13) & ~((u32)0x0000E000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR) & ~((u32)0x0000E000)) | ((u32)ch0txprepacapmatchctrl << 13));
}

#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_CAP_MATCH_CTRL .addr_index = 0x00000166, .size_minus_1 = (3 - 1), .shift = 13

static inline u8 rfic_regs_ch_0_tx_ctrl_2_ch_0_tx_prepa_cap_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00001F00)) >> 8);
}

static inline void rfic_regs_ch_0_tx_ctrl_2_ch_0_tx_prepa_cap_ctrl_setf(struct cl_chip *chip, u8 ch0txprepacapctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0txprepacapctrl << 8) & ~((u32)0x00001F00)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR) & ~((u32)0x00001F00)) | ((u32)ch0txprepacapctrl << 8));
}

#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_CAP_CTRL .addr_index = 0x00000166, .size_minus_1 = (5 - 1), .shift = 8

static inline u8 rfic_regs_ch_0_tx_ctrl_2_ch_0_tx_prepa_gain_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void rfic_regs_ch_0_tx_ctrl_2_ch_0_tx_prepa_gain_ctrl_setf(struct cl_chip *chip, u8 ch0txprepagainctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0txprepagainctrl << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_2_ADDR) & ~((u32)0x000000FF)) | ((u32)ch0txprepagainctrl << 0));
}

#define RFIC_REGS_CH_0_TX_CTRL_2_CH_0_TX_PREPA_GAIN_CTRL .addr_index = 0x00000166, .size_minus_1 = (8 - 1), .shift = 0

/**
 * @brief CH_0_TX_CTRL_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    13:10 CH0_spare17_in            0x00000000
 *    09:08 CH0_pdet_gain             0x00000000
 *    07:05 CH0_spare16_in            0x00000000
 *    04:02 CH0_pdet_filt_sel         0x00000000
 *    01    CH0_pdet_en               00000000
 *    00    CH0_spare15_in            00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_TX_CTRL_3_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000059C)
#define RFIC_REGS_CH_0_TX_CTRL_3_OFFSET      0x0000059C
#define RFIC_REGS_CH_0_TX_CTRL_3_INDEX       0x00000167
#define RFIC_REGS_CH_0_TX_CTRL_3_RESET       0x00000000

static inline u32 rfic_regs_ch_0_tx_ctrl_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR);
}

static inline void rfic_regs_ch_0_tx_ctrl_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR, value);
}

#define RFIC_REGS_CH_0_TX_CTRL_3 .addr_index = 0x00000167, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_SPARE_17_IN_MASK    ((u32)0x00003C00)
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_SPARE_17_IN_LSB    10
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_SPARE_17_IN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_PDET_GAIN_MASK    ((u32)0x00000300)
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_PDET_GAIN_LSB    8
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_PDET_GAIN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_SPARE_16_IN_MASK    ((u32)0x000000E0)
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_SPARE_16_IN_LSB    5
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_SPARE_16_IN_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_PDET_FILT_SEL_MASK    ((u32)0x0000001C)
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_PDET_FILT_SEL_LSB    2
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_PDET_FILT_SEL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_PDET_EN_BIT    ((u32)0x00000002)
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_PDET_EN_POS    1
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_SPARE_15_IN_BIT    ((u32)0x00000001)
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_SPARE_15_IN_POS    0

#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_SPARE_17_IN_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_PDET_GAIN_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_SPARE_16_IN_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_PDET_FILT_SEL_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_PDET_EN_RST    0x00000000
#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_SPARE_15_IN_RST    0x00000000

static inline void rfic_regs_ch_0_tx_ctrl_3_pack(struct cl_chip *chip, u8 ch0_spare17_in, u8 ch0_pdet_gain, u8 ch0_spare16_in, u8 ch0_pdet_filt_sel, u8 ch0_pdet_en, u8 ch0_spare15_in)
{
	ASSERT_ERR_CHIP((((u32)ch0_spare17_in << 10) & ~((u32)0x00003C00)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_pdet_gain << 8) & ~((u32)0x00000300)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare16_in << 5) & ~((u32)0x000000E0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_pdet_filt_sel << 2) & ~((u32)0x0000001C)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_pdet_en << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare15_in << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR, ((u32)ch0_spare17_in << 10) | ((u32)ch0_pdet_gain << 8) | ((u32)ch0_spare16_in << 5) | ((u32)ch0_pdet_filt_sel << 2) | ((u32)ch0_pdet_en << 1) | ((u32)ch0_spare15_in << 0));
}

static inline void rfic_regs_ch_0_tx_ctrl_3_unpack(struct cl_chip *chip, u8 *ch0_spare17_in, u8 *ch0_pdet_gain, u8 *ch0_spare16_in, u8 *ch0_pdet_filt_sel, u8 *ch0_pdet_en, u8 *ch0_spare15_in)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR);

	*ch0_spare17_in = (local_val & ((u32)0x00003C00)) >> 10;
	*ch0_pdet_gain = (local_val & ((u32)0x00000300)) >> 8;
	*ch0_spare16_in = (local_val & ((u32)0x000000E0)) >> 5;
	*ch0_pdet_filt_sel = (local_val & ((u32)0x0000001C)) >> 2;
	*ch0_pdet_en = (local_val & ((u32)0x00000002)) >> 1;
	*ch0_spare15_in = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_ch_0_tx_ctrl_3_ch_0_spare_17_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x00003C00)) >> 10);
}

static inline void rfic_regs_ch_0_tx_ctrl_3_ch_0_spare_17_in_setf(struct cl_chip *chip, u8 ch0spare17in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare17in << 10) & ~((u32)0x00003C00)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR) & ~((u32)0x00003C00)) | ((u32)ch0spare17in << 10));
}

#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_SPARE_17_IN .addr_index = 0x00000167, .size_minus_1 = (4 - 1), .shift = 10

static inline u8 rfic_regs_ch_0_tx_ctrl_3_ch_0_pdet_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x00000300)) >> 8);
}

static inline void rfic_regs_ch_0_tx_ctrl_3_ch_0_pdet_gain_setf(struct cl_chip *chip, u8 ch0pdetgain)
{
	ASSERT_ERR_CHIP((((u32)ch0pdetgain << 8) & ~((u32)0x00000300)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR) & ~((u32)0x00000300)) | ((u32)ch0pdetgain << 8));
}

#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_PDET_GAIN .addr_index = 0x00000167, .size_minus_1 = (2 - 1), .shift = 8

static inline u8 rfic_regs_ch_0_tx_ctrl_3_ch_0_spare_16_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x000000E0)) >> 5);
}

static inline void rfic_regs_ch_0_tx_ctrl_3_ch_0_spare_16_in_setf(struct cl_chip *chip, u8 ch0spare16in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare16in << 5) & ~((u32)0x000000E0)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR) & ~((u32)0x000000E0)) | ((u32)ch0spare16in << 5));
}

#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_SPARE_16_IN .addr_index = 0x00000167, .size_minus_1 = (3 - 1), .shift = 5

static inline u8 rfic_regs_ch_0_tx_ctrl_3_ch_0_pdet_filt_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x0000001C)) >> 2);
}

static inline void rfic_regs_ch_0_tx_ctrl_3_ch_0_pdet_filt_sel_setf(struct cl_chip *chip, u8 ch0pdetfiltsel)
{
	ASSERT_ERR_CHIP((((u32)ch0pdetfiltsel << 2) & ~((u32)0x0000001C)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR) & ~((u32)0x0000001C)) | ((u32)ch0pdetfiltsel << 2));
}

#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_PDET_FILT_SEL .addr_index = 0x00000167, .size_minus_1 = (3 - 1), .shift = 2

static inline u8 rfic_regs_ch_0_tx_ctrl_3_ch_0_pdet_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_ch_0_tx_ctrl_3_ch_0_pdet_en_setf(struct cl_chip *chip, u8 ch0pdeten)
{
	ASSERT_ERR_CHIP((((u32)ch0pdeten << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR) & ~((u32)0x00000002)) | ((u32)ch0pdeten << 1));
}

#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_PDET_EN .addr_index = 0x00000167, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_ch_0_tx_ctrl_3_ch_0_spare_15_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_ch_0_tx_ctrl_3_ch_0_spare_15_in_setf(struct cl_chip *chip, u8 ch0spare15in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare15in << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_TX_CTRL_3_ADDR) & ~((u32)0x00000001)) | ((u32)ch0spare15in << 0));
}

#define RFIC_REGS_CH_0_TX_CTRL_3_CH_0_SPARE_15_IN .addr_index = 0x00000167, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief CH_0_ADC_CONF register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    17:15 CH0_adc_curctrl           0x00000003
 *    14    CH0_adc_caln              00000000
 *    13    CH0_adc_ldo_en            00000000
 *    12:03 CH0_adc_tb                0x00000000
 *    02    CH0_adc_df                00000000
 *    01:00 CH0_adc_cf                0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_ADC_CONF_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005A0)
#define RFIC_REGS_CH_0_ADC_CONF_OFFSET      0x000005A0
#define RFIC_REGS_CH_0_ADC_CONF_INDEX       0x00000168
#define RFIC_REGS_CH_0_ADC_CONF_RESET       0x00018000

static inline u32 rfic_regs_ch_0_adc_conf_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR);
}

static inline void rfic_regs_ch_0_adc_conf_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR, value);
}

#define RFIC_REGS_CH_0_ADC_CONF .addr_index = 0x00000168, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_CURCTRL_MASK    ((u32)0x00038000)
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_CURCTRL_LSB    15
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_CURCTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_CALN_BIT    ((u32)0x00004000)
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_CALN_POS    14
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_LDO_EN_BIT    ((u32)0x00002000)
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_LDO_EN_POS    13
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_TB_MASK    ((u32)0x00001FF8)
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_TB_LSB    3
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_TB_WIDTH    ((u32)0x0000000A)
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_DF_BIT    ((u32)0x00000004)
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_DF_POS    2
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_CF_MASK    ((u32)0x00000003)
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_CF_LSB    0
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_CF_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_CURCTRL_RST    0x00000003
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_CALN_RST    0x00000000
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_LDO_EN_RST    0x00000000
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_TB_RST    0x00000000
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_DF_RST    0x00000000
#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_CF_RST    0x00000000

static inline void rfic_regs_ch_0_adc_conf_pack(struct cl_chip *chip, u8 ch0_adc_curctrl, u8 ch0_adc_caln, u8 ch0_adc_ldo_en, u16 ch0_adc_tb, u8 ch0_adc_df, u8 ch0_adc_cf)
{
	ASSERT_ERR_CHIP((((u32)ch0_adc_curctrl << 15) & ~((u32)0x00038000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_adc_caln << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_adc_ldo_en << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_adc_tb << 3) & ~((u32)0x00001FF8)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_adc_df << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_adc_cf << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR, ((u32)ch0_adc_curctrl << 15) | ((u32)ch0_adc_caln << 14) | ((u32)ch0_adc_ldo_en << 13) | ((u32)ch0_adc_tb << 3) | ((u32)ch0_adc_df << 2) | ((u32)ch0_adc_cf << 0));
}

static inline void rfic_regs_ch_0_adc_conf_unpack(struct cl_chip *chip, u8 *ch0_adc_curctrl, u8 *ch0_adc_caln, u8 *ch0_adc_ldo_en, u16 *ch0_adc_tb, u8 *ch0_adc_df, u8 *ch0_adc_cf)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR);

	*ch0_adc_curctrl = (local_val & ((u32)0x00038000)) >> 15;
	*ch0_adc_caln = (local_val & ((u32)0x00004000)) >> 14;
	*ch0_adc_ldo_en = (local_val & ((u32)0x00002000)) >> 13;
	*ch0_adc_tb = (local_val & ((u32)0x00001FF8)) >> 3;
	*ch0_adc_df = (local_val & ((u32)0x00000004)) >> 2;
	*ch0_adc_cf = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_ch_0_adc_conf_ch_0_adc_curctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00038000)) >> 15);
}

static inline void rfic_regs_ch_0_adc_conf_ch_0_adc_curctrl_setf(struct cl_chip *chip, u8 ch0adccurctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0adccurctrl << 15) & ~((u32)0x00038000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR) & ~((u32)0x00038000)) | ((u32)ch0adccurctrl << 15));
}

#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_CURCTRL .addr_index = 0x00000168, .size_minus_1 = (3 - 1), .shift = 15

static inline u8 rfic_regs_ch_0_adc_conf_ch_0_adc_caln_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void rfic_regs_ch_0_adc_conf_ch_0_adc_caln_setf(struct cl_chip *chip, u8 ch0adccaln)
{
	ASSERT_ERR_CHIP((((u32)ch0adccaln << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR) & ~((u32)0x00004000)) | ((u32)ch0adccaln << 14));
}

#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_CALN .addr_index = 0x00000168, .size_minus_1 = (1 - 1), .shift = 14

static inline u8 rfic_regs_ch_0_adc_conf_ch_0_adc_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void rfic_regs_ch_0_adc_conf_ch_0_adc_ldo_en_setf(struct cl_chip *chip, u8 ch0adcldoen)
{
	ASSERT_ERR_CHIP((((u32)ch0adcldoen << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR) & ~((u32)0x00002000)) | ((u32)ch0adcldoen << 13));
}

#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_LDO_EN .addr_index = 0x00000168, .size_minus_1 = (1 - 1), .shift = 13

static inline u16 rfic_regs_ch_0_adc_conf_ch_0_adc_tb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR);

	return (u16)((local_val & ((u32)0x00001FF8)) >> 3);
}

static inline void rfic_regs_ch_0_adc_conf_ch_0_adc_tb_setf(struct cl_chip *chip, u16 ch0adctb)
{
	ASSERT_ERR_CHIP((((u32)ch0adctb << 3) & ~((u32)0x00001FF8)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR) & ~((u32)0x00001FF8)) | ((u32)ch0adctb << 3));
}

#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_TB .addr_index = 0x00000168, .size_minus_1 = (10 - 1), .shift = 3

static inline u8 rfic_regs_ch_0_adc_conf_ch_0_adc_df_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_ch_0_adc_conf_ch_0_adc_df_setf(struct cl_chip *chip, u8 ch0adcdf)
{
	ASSERT_ERR_CHIP((((u32)ch0adcdf << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR) & ~((u32)0x00000004)) | ((u32)ch0adcdf << 2));
}

#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_DF .addr_index = 0x00000168, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_ch_0_adc_conf_ch_0_adc_cf_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_ch_0_adc_conf_ch_0_adc_cf_setf(struct cl_chip *chip, u8 ch0adccf)
{
	ASSERT_ERR_CHIP((((u32)ch0adccf << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_ADC_CONF_ADDR) & ~((u32)0x00000003)) | ((u32)ch0adccf << 0));
}

#define RFIC_REGS_CH_0_ADC_CONF_CH_0_ADC_CF .addr_index = 0x00000168, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief CH_0_DAC_CONF register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    03    CH0_dac_lpbk_en           00000000
 *    02    CH0_dac_outmode           00000000
 *    01    CH0_dac_testmode          00000000
 *    00    CH0_dac_twocom_ob_sel     00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_DAC_CONF_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005A4)
#define RFIC_REGS_CH_0_DAC_CONF_OFFSET      0x000005A4
#define RFIC_REGS_CH_0_DAC_CONF_INDEX       0x00000169
#define RFIC_REGS_CH_0_DAC_CONF_RESET       0x00000000

static inline u32 rfic_regs_ch_0_dac_conf_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_DAC_CONF_ADDR);
}

static inline void rfic_regs_ch_0_dac_conf_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_0_DAC_CONF_ADDR, value);
}

#define RFIC_REGS_CH_0_DAC_CONF .addr_index = 0x00000169, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_DAC_CONF_CH_0_DAC_LPBK_EN_BIT    ((u32)0x00000008)
#define RFIC_REGS_CH_0_DAC_CONF_CH_0_DAC_LPBK_EN_POS    3
#define RFIC_REGS_CH_0_DAC_CONF_CH_0_DAC_OUTMODE_BIT    ((u32)0x00000004)
#define RFIC_REGS_CH_0_DAC_CONF_CH_0_DAC_OUTMODE_POS    2
#define RFIC_REGS_CH_0_DAC_CONF_CH_0_DAC_TESTMODE_BIT    ((u32)0x00000002)
#define RFIC_REGS_CH_0_DAC_CONF_CH_0_DAC_TESTMODE_POS    1
#define RFIC_REGS_CH_0_DAC_CONF_CH_0_DAC_TWOCOM_OB_SEL_BIT    ((u32)0x00000001)
#define RFIC_REGS_CH_0_DAC_CONF_CH_0_DAC_TWOCOM_OB_SEL_POS    0

#define RFIC_REGS_CH_0_DAC_CONF_CH_0_DAC_LPBK_EN_RST    0x00000000
#define RFIC_REGS_CH_0_DAC_CONF_CH_0_DAC_OUTMODE_RST    0x00000000
#define RFIC_REGS_CH_0_DAC_CONF_CH_0_DAC_TESTMODE_RST    0x00000000
#define RFIC_REGS_CH_0_DAC_CONF_CH_0_DAC_TWOCOM_OB_SEL_RST    0x00000000

static inline void rfic_regs_ch_0_dac_conf_pack(struct cl_chip *chip, u8 ch0_dac_lpbk_en, u8 ch0_dac_outmode, u8 ch0_dac_testmode, u8 ch0_dac_twocom_ob_sel)
{
	ASSERT_ERR_CHIP((((u32)ch0_dac_lpbk_en << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_dac_outmode << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_dac_testmode << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_dac_twocom_ob_sel << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_DAC_CONF_ADDR, ((u32)ch0_dac_lpbk_en << 3) | ((u32)ch0_dac_outmode << 2) | ((u32)ch0_dac_testmode << 1) | ((u32)ch0_dac_twocom_ob_sel << 0));
}

static inline void rfic_regs_ch_0_dac_conf_unpack(struct cl_chip *chip, u8 *ch0_dac_lpbk_en, u8 *ch0_dac_outmode, u8 *ch0_dac_testmode, u8 *ch0_dac_twocom_ob_sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_DAC_CONF_ADDR);

	*ch0_dac_lpbk_en = (local_val & ((u32)0x00000008)) >> 3;
	*ch0_dac_outmode = (local_val & ((u32)0x00000004)) >> 2;
	*ch0_dac_testmode = (local_val & ((u32)0x00000002)) >> 1;
	*ch0_dac_twocom_ob_sel = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_ch_0_dac_conf_ch_0_dac_lpbk_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_DAC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_ch_0_dac_conf_ch_0_dac_lpbk_en_setf(struct cl_chip *chip, u8 ch0daclpbken)
{
	ASSERT_ERR_CHIP((((u32)ch0daclpbken << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_DAC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_DAC_CONF_ADDR) & ~((u32)0x00000008)) | ((u32)ch0daclpbken << 3));
}

#define RFIC_REGS_CH_0_DAC_CONF_CH_0_DAC_LPBK_EN .addr_index = 0x00000169, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_ch_0_dac_conf_ch_0_dac_outmode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_DAC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_ch_0_dac_conf_ch_0_dac_outmode_setf(struct cl_chip *chip, u8 ch0dacoutmode)
{
	ASSERT_ERR_CHIP((((u32)ch0dacoutmode << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_DAC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_DAC_CONF_ADDR) & ~((u32)0x00000004)) | ((u32)ch0dacoutmode << 2));
}

#define RFIC_REGS_CH_0_DAC_CONF_CH_0_DAC_OUTMODE .addr_index = 0x00000169, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_ch_0_dac_conf_ch_0_dac_testmode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_DAC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_ch_0_dac_conf_ch_0_dac_testmode_setf(struct cl_chip *chip, u8 ch0dactestmode)
{
	ASSERT_ERR_CHIP((((u32)ch0dactestmode << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_DAC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_DAC_CONF_ADDR) & ~((u32)0x00000002)) | ((u32)ch0dactestmode << 1));
}

#define RFIC_REGS_CH_0_DAC_CONF_CH_0_DAC_TESTMODE .addr_index = 0x00000169, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_ch_0_dac_conf_ch_0_dac_twocom_ob_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_DAC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_ch_0_dac_conf_ch_0_dac_twocom_ob_sel_setf(struct cl_chip *chip, u8 ch0dactwocomobsel)
{
	ASSERT_ERR_CHIP((((u32)ch0dactwocomobsel << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_DAC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_DAC_CONF_ADDR) & ~((u32)0x00000001)) | ((u32)ch0dactwocomobsel << 0));
}

#define RFIC_REGS_CH_0_DAC_CONF_CH_0_DAC_TWOCOM_OB_SEL .addr_index = 0x00000169, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief CH_0_DCOC_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    02    CH0_spare18_out           00000000
 *    01    CH0_dcoc_comp_Q           00000000
 *    00    CH0_dcoc_comp_I           00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_DCOC_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005A8)
#define RFIC_REGS_CH_0_DCOC_OUT_OFFSET      0x000005A8
#define RFIC_REGS_CH_0_DCOC_OUT_INDEX       0x0000016A
#define RFIC_REGS_CH_0_DCOC_OUT_RESET       0x00000000

static inline u32 rfic_regs_ch_0_dcoc_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_DCOC_OUT_ADDR);
}

#define RFIC_REGS_CH_0_DCOC_OUT .addr_index = 0x0000016A, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_DCOC_OUT_CH_0_SPARE_18_OUT_BIT    ((u32)0x00000004)
#define RFIC_REGS_CH_0_DCOC_OUT_CH_0_SPARE_18_OUT_POS    2
#define RFIC_REGS_CH_0_DCOC_OUT_CH_0_DCOC_COMP_Q_BIT    ((u32)0x00000002)
#define RFIC_REGS_CH_0_DCOC_OUT_CH_0_DCOC_COMP_Q_POS    1
#define RFIC_REGS_CH_0_DCOC_OUT_CH_0_DCOC_COMP_I_BIT    ((u32)0x00000001)
#define RFIC_REGS_CH_0_DCOC_OUT_CH_0_DCOC_COMP_I_POS    0

#define RFIC_REGS_CH_0_DCOC_OUT_CH_0_SPARE_18_OUT_RST    0x00000000
#define RFIC_REGS_CH_0_DCOC_OUT_CH_0_DCOC_COMP_Q_RST    0x00000000
#define RFIC_REGS_CH_0_DCOC_OUT_CH_0_DCOC_COMP_I_RST    0x00000000

static inline void rfic_regs_ch_0_dcoc_out_unpack(struct cl_chip *chip, u8 *ch0_spare18_out, u8 *ch0_dcoc_comp_q, u8 *ch0_dcoc_comp_i)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_DCOC_OUT_ADDR);

	*ch0_spare18_out = (local_val & ((u32)0x00000004)) >> 2;
	*ch0_dcoc_comp_q = (local_val & ((u32)0x00000002)) >> 1;
	*ch0_dcoc_comp_i = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_ch_0_dcoc_out_ch_0_spare_18_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_DCOC_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

#define RFIC_REGS_CH_0_DCOC_OUT_CH_0_SPARE_18_OUT .addr_index = 0x0000016A, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_ch_0_dcoc_out_ch_0_dcoc_comp_q_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_DCOC_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

#define RFIC_REGS_CH_0_DCOC_OUT_CH_0_DCOC_COMP_Q .addr_index = 0x0000016A, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_ch_0_dcoc_out_ch_0_dcoc_comp_i_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_DCOC_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

#define RFIC_REGS_CH_0_DCOC_OUT_CH_0_DCOC_COMP_I .addr_index = 0x0000016A, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief CH_0_ADC_STATUS register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    02    CH0_adc_ovfq              00000000
 *    01    CH0_adc_ovfi              00000000
 *    00    CH0_adc_cal_busy          00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_ADC_STATUS_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005AC)
#define RFIC_REGS_CH_0_ADC_STATUS_OFFSET      0x000005AC
#define RFIC_REGS_CH_0_ADC_STATUS_INDEX       0x0000016B
#define RFIC_REGS_CH_0_ADC_STATUS_RESET       0x00000000

static inline u32 rfic_regs_ch_0_adc_status_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_ADC_STATUS_ADDR);
}

#define RFIC_REGS_CH_0_ADC_STATUS .addr_index = 0x0000016B, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_ADC_STATUS_CH_0_ADC_OVFQ_BIT    ((u32)0x00000004)
#define RFIC_REGS_CH_0_ADC_STATUS_CH_0_ADC_OVFQ_POS    2
#define RFIC_REGS_CH_0_ADC_STATUS_CH_0_ADC_OVFI_BIT    ((u32)0x00000002)
#define RFIC_REGS_CH_0_ADC_STATUS_CH_0_ADC_OVFI_POS    1
#define RFIC_REGS_CH_0_ADC_STATUS_CH_0_ADC_CAL_BUSY_BIT    ((u32)0x00000001)
#define RFIC_REGS_CH_0_ADC_STATUS_CH_0_ADC_CAL_BUSY_POS    0

#define RFIC_REGS_CH_0_ADC_STATUS_CH_0_ADC_OVFQ_RST    0x00000000
#define RFIC_REGS_CH_0_ADC_STATUS_CH_0_ADC_OVFI_RST    0x00000000
#define RFIC_REGS_CH_0_ADC_STATUS_CH_0_ADC_CAL_BUSY_RST    0x00000000

static inline void rfic_regs_ch_0_adc_status_unpack(struct cl_chip *chip, u8 *ch0_adc_ovfq, u8 *ch0_adc_ovfi, u8 *ch0_adc_cal_busy)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ADC_STATUS_ADDR);

	*ch0_adc_ovfq = (local_val & ((u32)0x00000004)) >> 2;
	*ch0_adc_ovfi = (local_val & ((u32)0x00000002)) >> 1;
	*ch0_adc_cal_busy = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_ch_0_adc_status_ch_0_adc_ovfq_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ADC_STATUS_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

#define RFIC_REGS_CH_0_ADC_STATUS_CH_0_ADC_OVFQ .addr_index = 0x0000016B, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_ch_0_adc_status_ch_0_adc_ovfi_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ADC_STATUS_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

#define RFIC_REGS_CH_0_ADC_STATUS_CH_0_ADC_OVFI .addr_index = 0x0000016B, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_ch_0_adc_status_ch_0_adc_cal_busy_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ADC_STATUS_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

#define RFIC_REGS_CH_0_ADC_STATUS_CH_0_ADC_CAL_BUSY .addr_index = 0x0000016B, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief CH_0_SPARE_IN register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 CH0_lpf_tx_mode_gain      0x00000000
 *    27:23 CH0_lpf_gain_index_offset 0x00000000
 *    22:18 CH0_tx_pa_lb_stg2_vg3_pd  0x00000000
 *    17:13 CH0_tx_pa_lb_stg2_vg2_pd  0x00000000
 *    12:08 CH0_tx_pa_lb_stg1_vg3_pd  0x00000000
 *    07:03 CH0_tx_pa_lb_stg1_vg2_pd  0x00000000
 *    02    CH0_tx_out_res_lb_pa      00000000
 *    01    CH0_tx_out_res_hb_pa      00000000
 *    00    CH0_rssi_rstn             00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_SPARE_IN_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005B0)
#define RFIC_REGS_CH_0_SPARE_IN_OFFSET      0x000005B0
#define RFIC_REGS_CH_0_SPARE_IN_INDEX       0x0000016C
#define RFIC_REGS_CH_0_SPARE_IN_RESET       0x00000000

static inline u32 rfic_regs_ch_0_spare_in_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR);
}

static inline void rfic_regs_ch_0_spare_in_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR, value);
}

#define RFIC_REGS_CH_0_SPARE_IN .addr_index = 0x0000016C, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_LPF_TX_MODE_GAIN_MASK    ((u32)0xF0000000)
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_LPF_TX_MODE_GAIN_LSB    28
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_LPF_TX_MODE_GAIN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_LPF_GAIN_INDEX_OFFSET_MASK    ((u32)0x0F800000)
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_LPF_GAIN_INDEX_OFFSET_LSB    23
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_LPF_GAIN_INDEX_OFFSET_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_2_VG_3_PD_MASK    ((u32)0x007C0000)
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_2_VG_3_PD_LSB    18
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_2_VG_3_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_2_VG_2_PD_MASK    ((u32)0x0003E000)
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_2_VG_2_PD_LSB    13
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_2_VG_2_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_1_VG_3_PD_MASK    ((u32)0x00001F00)
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_1_VG_3_PD_LSB    8
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_1_VG_3_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_1_VG_2_PD_MASK    ((u32)0x000000F8)
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_1_VG_2_PD_LSB    3
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_1_VG_2_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_OUT_RES_LB_PA_BIT    ((u32)0x00000004)
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_OUT_RES_LB_PA_POS    2
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_OUT_RES_HB_PA_BIT    ((u32)0x00000002)
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_OUT_RES_HB_PA_POS    1
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_RSSI_RSTN_BIT    ((u32)0x00000001)
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_RSSI_RSTN_POS    0

#define RFIC_REGS_CH_0_SPARE_IN_CH_0_LPF_TX_MODE_GAIN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_LPF_GAIN_INDEX_OFFSET_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_2_VG_3_PD_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_2_VG_2_PD_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_1_VG_3_PD_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_1_VG_2_PD_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_OUT_RES_LB_PA_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_OUT_RES_HB_PA_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_IN_CH_0_RSSI_RSTN_RST    0x00000000

static inline void rfic_regs_ch_0_spare_in_pack(struct cl_chip *chip, u8 ch0_lpf_tx_mode_gain, u8 ch0_lpf_gain_index_offset, u8 ch0_tx_pa_lb_stg2_vg3_pd, u8 ch0_tx_pa_lb_stg2_vg2_pd, u8 ch0_tx_pa_lb_stg1_vg3_pd, u8 ch0_tx_pa_lb_stg1_vg2_pd, u8 ch0_tx_out_res_lb_pa, u8 ch0_tx_out_res_hb_pa, u8 ch0_rssi_rstn)
{
	ASSERT_ERR_CHIP((((u32)ch0_lpf_tx_mode_gain << 28) & ~((u32)0xF0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_lpf_gain_index_offset << 23) & ~((u32)0x0F800000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_stg2_vg3_pd << 18) & ~((u32)0x007C0000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_stg2_vg2_pd << 13) & ~((u32)0x0003E000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_stg1_vg3_pd << 8) & ~((u32)0x00001F00)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_stg1_vg2_pd << 3) & ~((u32)0x000000F8)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_out_res_lb_pa << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_out_res_hb_pa << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rssi_rstn << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR, ((u32)ch0_lpf_tx_mode_gain << 28) | ((u32)ch0_lpf_gain_index_offset << 23) | ((u32)ch0_tx_pa_lb_stg2_vg3_pd << 18) | ((u32)ch0_tx_pa_lb_stg2_vg2_pd << 13) | ((u32)ch0_tx_pa_lb_stg1_vg3_pd << 8) | ((u32)ch0_tx_pa_lb_stg1_vg2_pd << 3) | ((u32)ch0_tx_out_res_lb_pa << 2) | ((u32)ch0_tx_out_res_hb_pa << 1) | ((u32)ch0_rssi_rstn << 0));
}

static inline void rfic_regs_ch_0_spare_in_unpack(struct cl_chip *chip, u8 *ch0_lpf_tx_mode_gain, u8 *ch0_lpf_gain_index_offset, u8 *ch0_tx_pa_lb_stg2_vg3_pd, u8 *ch0_tx_pa_lb_stg2_vg2_pd, u8 *ch0_tx_pa_lb_stg1_vg3_pd, u8 *ch0_tx_pa_lb_stg1_vg2_pd, u8 *ch0_tx_out_res_lb_pa, u8 *ch0_tx_out_res_hb_pa, u8 *ch0_rssi_rstn)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR);

	*ch0_lpf_tx_mode_gain = (local_val & ((u32)0xF0000000)) >> 28;
	*ch0_lpf_gain_index_offset = (local_val & ((u32)0x0F800000)) >> 23;
	*ch0_tx_pa_lb_stg2_vg3_pd = (local_val & ((u32)0x007C0000)) >> 18;
	*ch0_tx_pa_lb_stg2_vg2_pd = (local_val & ((u32)0x0003E000)) >> 13;
	*ch0_tx_pa_lb_stg1_vg3_pd = (local_val & ((u32)0x00001F00)) >> 8;
	*ch0_tx_pa_lb_stg1_vg2_pd = (local_val & ((u32)0x000000F8)) >> 3;
	*ch0_tx_out_res_lb_pa = (local_val & ((u32)0x00000004)) >> 2;
	*ch0_tx_out_res_hb_pa = (local_val & ((u32)0x00000002)) >> 1;
	*ch0_rssi_rstn = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_ch_0_spare_in_ch_0_lpf_tx_mode_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0xF0000000)) >> 28);
}

static inline void rfic_regs_ch_0_spare_in_ch_0_lpf_tx_mode_gain_setf(struct cl_chip *chip, u8 ch0lpftxmodegain)
{
	ASSERT_ERR_CHIP((((u32)ch0lpftxmodegain << 28) & ~((u32)0xF0000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR) & ~((u32)0xF0000000)) | ((u32)ch0lpftxmodegain << 28));
}

#define RFIC_REGS_CH_0_SPARE_IN_CH_0_LPF_TX_MODE_GAIN .addr_index = 0x0000016C, .size_minus_1 = (4 - 1), .shift = 28

static inline u8 rfic_regs_ch_0_spare_in_ch_0_lpf_gain_index_offset_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0x0F800000)) >> 23);
}

static inline void rfic_regs_ch_0_spare_in_ch_0_lpf_gain_index_offset_setf(struct cl_chip *chip, u8 ch0lpfgainindexoffset)
{
	ASSERT_ERR_CHIP((((u32)ch0lpfgainindexoffset << 23) & ~((u32)0x0F800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR) & ~((u32)0x0F800000)) | ((u32)ch0lpfgainindexoffset << 23));
}

#define RFIC_REGS_CH_0_SPARE_IN_CH_0_LPF_GAIN_INDEX_OFFSET .addr_index = 0x0000016C, .size_minus_1 = (5 - 1), .shift = 23

static inline u8 rfic_regs_ch_0_spare_in_ch_0_tx_pa_lb_stg_2_vg_3_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0x007C0000)) >> 18);
}

static inline void rfic_regs_ch_0_spare_in_ch_0_tx_pa_lb_stg_2_vg_3_pd_setf(struct cl_chip *chip, u8 ch0txpalbstg2vg3pd)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbstg2vg3pd << 18) & ~((u32)0x007C0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR) & ~((u32)0x007C0000)) | ((u32)ch0txpalbstg2vg3pd << 18));
}

#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_2_VG_3_PD .addr_index = 0x0000016C, .size_minus_1 = (5 - 1), .shift = 18

static inline u8 rfic_regs_ch_0_spare_in_ch_0_tx_pa_lb_stg_2_vg_2_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0x0003E000)) >> 13);
}

static inline void rfic_regs_ch_0_spare_in_ch_0_tx_pa_lb_stg_2_vg_2_pd_setf(struct cl_chip *chip, u8 ch0txpalbstg2vg2pd)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbstg2vg2pd << 13) & ~((u32)0x0003E000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR) & ~((u32)0x0003E000)) | ((u32)ch0txpalbstg2vg2pd << 13));
}

#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_2_VG_2_PD .addr_index = 0x0000016C, .size_minus_1 = (5 - 1), .shift = 13

static inline u8 rfic_regs_ch_0_spare_in_ch_0_tx_pa_lb_stg_1_vg_3_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0x00001F00)) >> 8);
}

static inline void rfic_regs_ch_0_spare_in_ch_0_tx_pa_lb_stg_1_vg_3_pd_setf(struct cl_chip *chip, u8 ch0txpalbstg1vg3pd)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbstg1vg3pd << 8) & ~((u32)0x00001F00)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR) & ~((u32)0x00001F00)) | ((u32)ch0txpalbstg1vg3pd << 8));
}

#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_1_VG_3_PD .addr_index = 0x0000016C, .size_minus_1 = (5 - 1), .shift = 8

static inline u8 rfic_regs_ch_0_spare_in_ch_0_tx_pa_lb_stg_1_vg_2_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0x000000F8)) >> 3);
}

static inline void rfic_regs_ch_0_spare_in_ch_0_tx_pa_lb_stg_1_vg_2_pd_setf(struct cl_chip *chip, u8 ch0txpalbstg1vg2pd)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbstg1vg2pd << 3) & ~((u32)0x000000F8)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR) & ~((u32)0x000000F8)) | ((u32)ch0txpalbstg1vg2pd << 3));
}

#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_PA_LB_STG_1_VG_2_PD .addr_index = 0x0000016C, .size_minus_1 = (5 - 1), .shift = 3

static inline u8 rfic_regs_ch_0_spare_in_ch_0_tx_out_res_lb_pa_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_ch_0_spare_in_ch_0_tx_out_res_lb_pa_setf(struct cl_chip *chip, u8 ch0txoutreslbpa)
{
	ASSERT_ERR_CHIP((((u32)ch0txoutreslbpa << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR) & ~((u32)0x00000004)) | ((u32)ch0txoutreslbpa << 2));
}

#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_OUT_RES_LB_PA .addr_index = 0x0000016C, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_ch_0_spare_in_ch_0_tx_out_res_hb_pa_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_ch_0_spare_in_ch_0_tx_out_res_hb_pa_setf(struct cl_chip *chip, u8 ch0txoutreshbpa)
{
	ASSERT_ERR_CHIP((((u32)ch0txoutreshbpa << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR) & ~((u32)0x00000002)) | ((u32)ch0txoutreshbpa << 1));
}

#define RFIC_REGS_CH_0_SPARE_IN_CH_0_TX_OUT_RES_HB_PA .addr_index = 0x0000016C, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_ch_0_spare_in_ch_0_rssi_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_ch_0_spare_in_ch_0_rssi_rstn_setf(struct cl_chip *chip, u8 ch0rssirstn)
{
	ASSERT_ERR_CHIP((((u32)ch0rssirstn << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_IN_ADDR) & ~((u32)0x00000001)) | ((u32)ch0rssirstn << 0));
}

#define RFIC_REGS_CH_0_SPARE_IN_CH_0_RSSI_RSTN .addr_index = 0x0000016C, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief CH_0_SPARE_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 CH0_rx_lna_st2_cur_ctrl   0x00000000
 *    27:24 CH0_rx_lna_st1_cur_ctrl   0x00000000
 *    23    dac_wifi_0_STANDBYNQ      00000000
 *    22    dac_wifi_0_STANDBYNI      00000000
 *    21    dac_wifi_0_PDN            00000000
 *    20:19 adc_wifi_0_EN             0x00000000
 *    18    CH0_tx_pa_hb_en           00000000
 *    17    CH0_tx_pa_lb_en           00000000
 *    16    CH0_trsw_pa_5to7g_en      00000000
 *    15    CH0_trsw_pa_2p4g_en       00000000
 *    14    CH0_trsw_lna_5to7g_en     00000000
 *    13    CH0_trsw_lna_2p4g_en      00000000
 *    12    CH0_rx_lna_st2_bias_en    00000000
 *    11    CH0_rx_lna_st2_en         00000000
 *    10    CH0_rx_lna_st1_bias_en    00000000
 *    09    CH0_rx_lna_st1_en         00000000
 *    08    CH0_rx_gm_en              00000000
 *    07    CH0_tx_pga_prepa_bias_en  00000000
 *    06    CH0_tx_prepa_en           00000000
 *    05    CH0_tx_pga_en             00000000
 *    04    CH0_tx_mix_en             00000000
 *    03    CH0_bb_tx_mode            00000000
 *    02    CH0_localdiv_rxtxn        00000000
 *    01    CH0_tx_gain_lut_write_ack 00000000
 *    00    CH0_rx_gain_lut_write_ack 00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_SPARE_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005B4)
#define RFIC_REGS_CH_0_SPARE_OUT_OFFSET      0x000005B4
#define RFIC_REGS_CH_0_SPARE_OUT_INDEX       0x0000016D
#define RFIC_REGS_CH_0_SPARE_OUT_RESET       0x00000000

static inline u32 rfic_regs_ch_0_spare_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);
}

#define RFIC_REGS_CH_0_SPARE_OUT .addr_index = 0x0000016D, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_2_CUR_CTRL_MASK    ((u32)0xF0000000)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_2_CUR_CTRL_LSB    28
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_2_CUR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_1_CUR_CTRL_MASK    ((u32)0x0F000000)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_1_CUR_CTRL_LSB    24
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_1_CUR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_SPARE_OUT_DAC_WIFI_0_STANDBYNQ_BIT    ((u32)0x00800000)
#define RFIC_REGS_CH_0_SPARE_OUT_DAC_WIFI_0_STANDBYNQ_POS    23
#define RFIC_REGS_CH_0_SPARE_OUT_DAC_WIFI_0_STANDBYNI_BIT    ((u32)0x00400000)
#define RFIC_REGS_CH_0_SPARE_OUT_DAC_WIFI_0_STANDBYNI_POS    22
#define RFIC_REGS_CH_0_SPARE_OUT_DAC_WIFI_0_PDN_BIT    ((u32)0x00200000)
#define RFIC_REGS_CH_0_SPARE_OUT_DAC_WIFI_0_PDN_POS    21
#define RFIC_REGS_CH_0_SPARE_OUT_ADC_WIFI_0_EN_MASK    ((u32)0x00180000)
#define RFIC_REGS_CH_0_SPARE_OUT_ADC_WIFI_0_EN_LSB    19
#define RFIC_REGS_CH_0_SPARE_OUT_ADC_WIFI_0_EN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PA_HB_EN_BIT    ((u32)0x00040000)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PA_HB_EN_POS    18
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PA_LB_EN_BIT    ((u32)0x00020000)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PA_LB_EN_POS    17
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TRSW_PA_5_TO_7_G_EN_BIT    ((u32)0x00010000)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TRSW_PA_5_TO_7_G_EN_POS    16
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TRSW_PA_2_P_4_G_EN_BIT    ((u32)0x00008000)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TRSW_PA_2_P_4_G_EN_POS    15
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TRSW_LNA_5_TO_7_G_EN_BIT    ((u32)0x00004000)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TRSW_LNA_5_TO_7_G_EN_POS    14
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TRSW_LNA_2_P_4_G_EN_BIT    ((u32)0x00002000)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TRSW_LNA_2_P_4_G_EN_POS    13
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_2_BIAS_EN_BIT    ((u32)0x00001000)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_2_BIAS_EN_POS    12
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_2_EN_BIT    ((u32)0x00000800)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_2_EN_POS    11
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_1_BIAS_EN_BIT    ((u32)0x00000400)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_1_BIAS_EN_POS    10
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_1_EN_BIT    ((u32)0x00000200)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_1_EN_POS    9
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_GM_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_GM_EN_POS    8
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PGA_PREPA_BIAS_EN_BIT    ((u32)0x00000080)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PGA_PREPA_BIAS_EN_POS    7
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PREPA_EN_BIT    ((u32)0x00000040)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PREPA_EN_POS    6
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PGA_EN_BIT    ((u32)0x00000020)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PGA_EN_POS    5
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_MIX_EN_BIT    ((u32)0x00000010)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_MIX_EN_POS    4
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_BB_TX_MODE_BIT    ((u32)0x00000008)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_BB_TX_MODE_POS    3
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_LOCALDIV_RXTXN_BIT    ((u32)0x00000004)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_LOCALDIV_RXTXN_POS    2
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_GAIN_LUT_WRITE_ACK_BIT    ((u32)0x00000002)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_GAIN_LUT_WRITE_ACK_POS    1
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_GAIN_LUT_WRITE_ACK_BIT    ((u32)0x00000001)
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_GAIN_LUT_WRITE_ACK_POS    0

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_2_CUR_CTRL_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_1_CUR_CTRL_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_DAC_WIFI_0_STANDBYNQ_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_DAC_WIFI_0_STANDBYNI_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_DAC_WIFI_0_PDN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_ADC_WIFI_0_EN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PA_HB_EN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PA_LB_EN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TRSW_PA_5_TO_7_G_EN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TRSW_PA_2_P_4_G_EN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TRSW_LNA_5_TO_7_G_EN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TRSW_LNA_2_P_4_G_EN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_2_BIAS_EN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_2_EN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_1_BIAS_EN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_1_EN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_GM_EN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PGA_PREPA_BIAS_EN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PREPA_EN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PGA_EN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_MIX_EN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_BB_TX_MODE_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_LOCALDIV_RXTXN_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_GAIN_LUT_WRITE_ACK_RST    0x00000000
#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_GAIN_LUT_WRITE_ACK_RST    0x00000000

static inline void rfic_regs_ch_0_spare_out_unpack(struct cl_chip *chip, u8 *ch0_rx_lna_st2_cur_ctrl, u8 *ch0_rx_lna_st1_cur_ctrl, u8 *dac_wifi_0_standbynq, u8 *dac_wifi_0_standbyni, u8 *dac_wifi_0_pdn, u8 *adc_wifi_0_en, u8 *ch0_tx_pa_hb_en, u8 *ch0_tx_pa_lb_en, u8 *ch0_trsw_pa_5to7g_en, u8 *ch0_trsw_pa_2p4g_en, u8 *ch0_trsw_lna_5to7g_en, u8 *ch0_trsw_lna_2p4g_en, u8 *ch0_rx_lna_st2_bias_en, u8 *ch0_rx_lna_st2_en, u8 *ch0_rx_lna_st1_bias_en, u8 *ch0_rx_lna_st1_en, u8 *ch0_rx_gm_en, u8 *ch0_tx_pga_prepa_bias_en, u8 *ch0_tx_prepa_en, u8 *ch0_tx_pga_en, u8 *ch0_tx_mix_en, u8 *ch0_bb_tx_mode, u8 *ch0_localdiv_rxtxn, u8 *ch0_tx_gain_lut_write_ack, u8 *ch0_rx_gain_lut_write_ack)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	*ch0_rx_lna_st2_cur_ctrl = (local_val & ((u32)0xF0000000)) >> 28;
	*ch0_rx_lna_st1_cur_ctrl = (local_val & ((u32)0x0F000000)) >> 24;
	*dac_wifi_0_standbynq = (local_val & ((u32)0x00800000)) >> 23;
	*dac_wifi_0_standbyni = (local_val & ((u32)0x00400000)) >> 22;
	*dac_wifi_0_pdn = (local_val & ((u32)0x00200000)) >> 21;
	*adc_wifi_0_en = (local_val & ((u32)0x00180000)) >> 19;
	*ch0_tx_pa_hb_en = (local_val & ((u32)0x00040000)) >> 18;
	*ch0_tx_pa_lb_en = (local_val & ((u32)0x00020000)) >> 17;
	*ch0_trsw_pa_5to7g_en = (local_val & ((u32)0x00010000)) >> 16;
	*ch0_trsw_pa_2p4g_en = (local_val & ((u32)0x00008000)) >> 15;
	*ch0_trsw_lna_5to7g_en = (local_val & ((u32)0x00004000)) >> 14;
	*ch0_trsw_lna_2p4g_en = (local_val & ((u32)0x00002000)) >> 13;
	*ch0_rx_lna_st2_bias_en = (local_val & ((u32)0x00001000)) >> 12;
	*ch0_rx_lna_st2_en = (local_val & ((u32)0x00000800)) >> 11;
	*ch0_rx_lna_st1_bias_en = (local_val & ((u32)0x00000400)) >> 10;
	*ch0_rx_lna_st1_en = (local_val & ((u32)0x00000200)) >> 9;
	*ch0_rx_gm_en = (local_val & ((u32)0x00000100)) >> 8;
	*ch0_tx_pga_prepa_bias_en = (local_val & ((u32)0x00000080)) >> 7;
	*ch0_tx_prepa_en = (local_val & ((u32)0x00000040)) >> 6;
	*ch0_tx_pga_en = (local_val & ((u32)0x00000020)) >> 5;
	*ch0_tx_mix_en = (local_val & ((u32)0x00000010)) >> 4;
	*ch0_bb_tx_mode = (local_val & ((u32)0x00000008)) >> 3;
	*ch0_localdiv_rxtxn = (local_val & ((u32)0x00000004)) >> 2;
	*ch0_tx_gain_lut_write_ack = (local_val & ((u32)0x00000002)) >> 1;
	*ch0_rx_gain_lut_write_ack = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_ch_0_spare_out_ch_0_rx_lna_st_2_cur_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0xF0000000)) >> 28);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_2_CUR_CTRL .addr_index = 0x0000016D, .size_minus_1 = (4 - 1), .shift = 28

static inline u8 rfic_regs_ch_0_spare_out_ch_0_rx_lna_st_1_cur_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x0F000000)) >> 24);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_1_CUR_CTRL .addr_index = 0x0000016D, .size_minus_1 = (4 - 1), .shift = 24

static inline u8 rfic_regs_ch_0_spare_out_dac_wifi_0_standbynq_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

#define RFIC_REGS_CH_0_SPARE_OUT_DAC_WIFI_0_STANDBYNQ .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 23

static inline u8 rfic_regs_ch_0_spare_out_dac_wifi_0_standbyni_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

#define RFIC_REGS_CH_0_SPARE_OUT_DAC_WIFI_0_STANDBYNI .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 22

static inline u8 rfic_regs_ch_0_spare_out_dac_wifi_0_pdn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

#define RFIC_REGS_CH_0_SPARE_OUT_DAC_WIFI_0_PDN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 21

static inline u8 rfic_regs_ch_0_spare_out_adc_wifi_0_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00180000)) >> 19);
}

#define RFIC_REGS_CH_0_SPARE_OUT_ADC_WIFI_0_EN .addr_index = 0x0000016D, .size_minus_1 = (2 - 1), .shift = 19

static inline u8 rfic_regs_ch_0_spare_out_ch_0_tx_pa_hb_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PA_HB_EN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_ch_0_spare_out_ch_0_tx_pa_lb_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PA_LB_EN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_ch_0_spare_out_ch_0_trsw_pa_5_to_7_g_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TRSW_PA_5_TO_7_G_EN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 16

static inline u8 rfic_regs_ch_0_spare_out_ch_0_trsw_pa_2_p_4_g_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TRSW_PA_2_P_4_G_EN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 15

static inline u8 rfic_regs_ch_0_spare_out_ch_0_trsw_lna_5_to_7_g_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TRSW_LNA_5_TO_7_G_EN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 14

static inline u8 rfic_regs_ch_0_spare_out_ch_0_trsw_lna_2_p_4_g_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TRSW_LNA_2_P_4_G_EN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 13

static inline u8 rfic_regs_ch_0_spare_out_ch_0_rx_lna_st_2_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_2_BIAS_EN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_ch_0_spare_out_ch_0_rx_lna_st_2_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_2_EN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_ch_0_spare_out_ch_0_rx_lna_st_1_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_1_BIAS_EN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_ch_0_spare_out_ch_0_rx_lna_st_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_LNA_ST_1_EN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_ch_0_spare_out_ch_0_rx_gm_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_GM_EN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_ch_0_spare_out_ch_0_tx_pga_prepa_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PGA_PREPA_BIAS_EN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_ch_0_spare_out_ch_0_tx_prepa_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PREPA_EN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_ch_0_spare_out_ch_0_tx_pga_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_PGA_EN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_ch_0_spare_out_ch_0_tx_mix_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_MIX_EN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 4

static inline u8 rfic_regs_ch_0_spare_out_ch_0_bb_tx_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_BB_TX_MODE .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_ch_0_spare_out_ch_0_localdiv_rxtxn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_LOCALDIV_RXTXN .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_ch_0_spare_out_ch_0_tx_gain_lut_write_ack_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_TX_GAIN_LUT_WRITE_ACK .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_ch_0_spare_out_ch_0_rx_gain_lut_write_ack_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

#define RFIC_REGS_CH_0_SPARE_OUT_CH_0_RX_GAIN_LUT_WRITE_ACK .addr_index = 0x0000016D, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief CH_0_ADC_DAC_SPARE register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:17 CH0_dac_spare_in          0x00000000
 *    16    CH0_dac_external_pad_en   00000000
 *    15:00 CH0_adc_spare_in          0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_ADC_DAC_SPARE_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005B8)
#define RFIC_REGS_CH_0_ADC_DAC_SPARE_OFFSET      0x000005B8
#define RFIC_REGS_CH_0_ADC_DAC_SPARE_INDEX       0x0000016E
#define RFIC_REGS_CH_0_ADC_DAC_SPARE_RESET       0x00000000

static inline u32 rfic_regs_ch_0_adc_dac_spare_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_ADC_DAC_SPARE_ADDR);
}

static inline void rfic_regs_ch_0_adc_dac_spare_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_0_ADC_DAC_SPARE_ADDR, value);
}

#define RFIC_REGS_CH_0_ADC_DAC_SPARE .addr_index = 0x0000016E, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_ADC_DAC_SPARE_CH_0_DAC_SPARE_IN_MASK    ((u32)0xFFFE0000)
#define RFIC_REGS_CH_0_ADC_DAC_SPARE_CH_0_DAC_SPARE_IN_LSB    17
#define RFIC_REGS_CH_0_ADC_DAC_SPARE_CH_0_DAC_SPARE_IN_WIDTH    ((u32)0x0000000F)
#define RFIC_REGS_CH_0_ADC_DAC_SPARE_CH_0_DAC_EXTERNAL_PAD_EN_BIT    ((u32)0x00010000)
#define RFIC_REGS_CH_0_ADC_DAC_SPARE_CH_0_DAC_EXTERNAL_PAD_EN_POS    16
#define RFIC_REGS_CH_0_ADC_DAC_SPARE_CH_0_ADC_SPARE_IN_MASK    ((u32)0x0000FFFF)
#define RFIC_REGS_CH_0_ADC_DAC_SPARE_CH_0_ADC_SPARE_IN_LSB    0
#define RFIC_REGS_CH_0_ADC_DAC_SPARE_CH_0_ADC_SPARE_IN_WIDTH    ((u32)0x00000010)

#define RFIC_REGS_CH_0_ADC_DAC_SPARE_CH_0_DAC_SPARE_IN_RST    0x00000000
#define RFIC_REGS_CH_0_ADC_DAC_SPARE_CH_0_DAC_EXTERNAL_PAD_EN_RST    0x00000000
#define RFIC_REGS_CH_0_ADC_DAC_SPARE_CH_0_ADC_SPARE_IN_RST    0x00000000

static inline void rfic_regs_ch_0_adc_dac_spare_pack(struct cl_chip *chip, u16 ch0_dac_spare_in, u8 ch0_dac_external_pad_en, u16 ch0_adc_spare_in)
{
	ASSERT_ERR_CHIP((((u32)ch0_dac_spare_in << 17) & ~((u32)0xFFFE0000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_dac_external_pad_en << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_adc_spare_in << 0) & ~((u32)0x0000FFFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_ADC_DAC_SPARE_ADDR, ((u32)ch0_dac_spare_in << 17) | ((u32)ch0_dac_external_pad_en << 16) | ((u32)ch0_adc_spare_in << 0));
}

static inline void rfic_regs_ch_0_adc_dac_spare_unpack(struct cl_chip *chip, u16 *ch0_dac_spare_in, u8 *ch0_dac_external_pad_en, u16 *ch0_adc_spare_in)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ADC_DAC_SPARE_ADDR);

	*ch0_dac_spare_in = (local_val & ((u32)0xFFFE0000)) >> 17;
	*ch0_dac_external_pad_en = (local_val & ((u32)0x00010000)) >> 16;
	*ch0_adc_spare_in = (local_val & ((u32)0x0000FFFF)) >> 0;
}

static inline u16 rfic_regs_ch_0_adc_dac_spare_ch_0_dac_spare_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ADC_DAC_SPARE_ADDR);

	return (u16)((local_val & ((u32)0xFFFE0000)) >> 17);
}

static inline void rfic_regs_ch_0_adc_dac_spare_ch_0_dac_spare_in_setf(struct cl_chip *chip, u16 ch0dacsparein)
{
	ASSERT_ERR_CHIP((((u32)ch0dacsparein << 17) & ~((u32)0xFFFE0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_ADC_DAC_SPARE_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_ADC_DAC_SPARE_ADDR) & ~((u32)0xFFFE0000)) | ((u32)ch0dacsparein << 17));
}

#define RFIC_REGS_CH_0_ADC_DAC_SPARE_CH_0_DAC_SPARE_IN .addr_index = 0x0000016E, .size_minus_1 = (15 - 1), .shift = 17

static inline u8 rfic_regs_ch_0_adc_dac_spare_ch_0_dac_external_pad_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ADC_DAC_SPARE_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void rfic_regs_ch_0_adc_dac_spare_ch_0_dac_external_pad_en_setf(struct cl_chip *chip, u8 ch0dacexternalpaden)
{
	ASSERT_ERR_CHIP((((u32)ch0dacexternalpaden << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_ADC_DAC_SPARE_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_ADC_DAC_SPARE_ADDR) & ~((u32)0x00010000)) | ((u32)ch0dacexternalpaden << 16));
}

#define RFIC_REGS_CH_0_ADC_DAC_SPARE_CH_0_DAC_EXTERNAL_PAD_EN .addr_index = 0x0000016E, .size_minus_1 = (1 - 1), .shift = 16

static inline u16 rfic_regs_ch_0_adc_dac_spare_ch_0_adc_spare_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ADC_DAC_SPARE_ADDR);

	return (u16)((local_val & ((u32)0x0000FFFF)) >> 0);
}

static inline void rfic_regs_ch_0_adc_dac_spare_ch_0_adc_spare_in_setf(struct cl_chip *chip, u16 ch0adcsparein)
{
	ASSERT_ERR_CHIP((((u32)ch0adcsparein << 0) & ~((u32)0x0000FFFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_ADC_DAC_SPARE_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_ADC_DAC_SPARE_ADDR) & ~((u32)0x0000FFFF)) | ((u32)ch0adcsparein << 0));
}

#define RFIC_REGS_CH_0_ADC_DAC_SPARE_CH_0_ADC_SPARE_IN .addr_index = 0x0000016E, .size_minus_1 = (16 - 1), .shift = 0

/**
 * @brief RF_FEM_0_LNA_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:30 CH0_rx_lna_st1_vcurstr    0x00000000
 *    29:26 CH0_rx_lna_st1_vcasc      0x00000000
 *    25    CH0_low_band_en           00000000
 *    24    CH0_rx_lna_st1_ldo14_en   00000000
 *    23    CH0_rx_lna_st1_ldo10_en   00000000
 *    22:19 CH0_rx_lna_st1_deq_res    0x00000000
 *    18:15 CH0_rx_lna_st1_cur_ctrl   0x00000000
 *    14:11 CH0_rx_lna_st1_cb_sec     0x00000000
 *    10:09 CH0_rx_lna_st1_cb_pr_coarse 0x00000000
 *    08:05 CH0_rx_lna_st1_cb_pr      0x00000000
 *    04:02 CH0_rx_gm_cur_ctrl        0x00000000
 *    01    CH0_rx_lna_st1_en         00000000
 *    00    CH0_rx_gm_en              00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005BC)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_OFFSET      0x000005BC
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_INDEX       0x0000016F
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_0_lna_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR, value);
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0 .addr_index = 0x0000016F, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_VCURSTR_MASK    ((u32)0xC0000000)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_VCURSTR_LSB    30
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_VCURSTR_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_VCASC_MASK    ((u32)0x3C000000)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_VCASC_LSB    26
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_VCASC_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_LOW_BAND_EN_BIT    ((u32)0x02000000)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_LOW_BAND_EN_POS    25
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_LDO_14_EN_BIT    ((u32)0x01000000)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_LDO_14_EN_POS    24
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_LDO_10_EN_BIT    ((u32)0x00800000)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_LDO_10_EN_POS    23
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_DEQ_RES_MASK    ((u32)0x00780000)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_DEQ_RES_LSB    19
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_DEQ_RES_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CUR_CTRL_MASK    ((u32)0x00078000)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CUR_CTRL_LSB    15
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CUR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CB_SEC_MASK    ((u32)0x00007800)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CB_SEC_LSB    11
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CB_SEC_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CB_PR_COARSE_MASK    ((u32)0x00000600)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CB_PR_COARSE_LSB    9
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CB_PR_COARSE_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CB_PR_MASK    ((u32)0x000001E0)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CB_PR_LSB    5
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CB_PR_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_GM_CUR_CTRL_MASK    ((u32)0x0000001C)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_GM_CUR_CTRL_LSB    2
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_GM_CUR_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_EN_BIT    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_EN_POS    1
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_GM_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_GM_EN_POS    0

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_VCURSTR_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_VCASC_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_LOW_BAND_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_LDO_14_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_LDO_10_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_DEQ_RES_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CUR_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CB_SEC_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CB_PR_COARSE_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CB_PR_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_GM_CUR_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_GM_EN_RST    0x00000000

static inline void rfic_regs_rf_fem_0_lna_ctrl_0_pack(struct cl_chip *chip, u8 ch0_rx_lna_st1_vcurstr, u8 ch0_rx_lna_st1_vcasc, u8 ch0_low_band_en, u8 ch0_rx_lna_st1_ldo14_en, u8 ch0_rx_lna_st1_ldo10_en, u8 ch0_rx_lna_st1_deq_res, u8 ch0_rx_lna_st1_cur_ctrl, u8 ch0_rx_lna_st1_cb_sec, u8 ch0_rx_lna_st1_cb_pr_coarse, u8 ch0_rx_lna_st1_cb_pr, u8 ch0_rx_gm_cur_ctrl, u8 ch0_rx_lna_st1_en, u8 ch0_rx_gm_en)
{
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_vcurstr << 30) & ~((u32)0xC0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_vcasc << 26) & ~((u32)0x3C000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_low_band_en << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_ldo14_en << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_ldo10_en << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_deq_res << 19) & ~((u32)0x00780000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_cur_ctrl << 15) & ~((u32)0x00078000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_cb_sec << 11) & ~((u32)0x00007800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_cb_pr_coarse << 9) & ~((u32)0x00000600)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_cb_pr << 5) & ~((u32)0x000001E0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_gm_cur_ctrl << 2) & ~((u32)0x0000001C)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_en << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_gm_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR, ((u32)ch0_rx_lna_st1_vcurstr << 30) | ((u32)ch0_rx_lna_st1_vcasc << 26) | ((u32)ch0_low_band_en << 25) | ((u32)ch0_rx_lna_st1_ldo14_en << 24) | ((u32)ch0_rx_lna_st1_ldo10_en << 23) | ((u32)ch0_rx_lna_st1_deq_res << 19) | ((u32)ch0_rx_lna_st1_cur_ctrl << 15) | ((u32)ch0_rx_lna_st1_cb_sec << 11) | ((u32)ch0_rx_lna_st1_cb_pr_coarse << 9) | ((u32)ch0_rx_lna_st1_cb_pr << 5) | ((u32)ch0_rx_gm_cur_ctrl << 2) | ((u32)ch0_rx_lna_st1_en << 1) | ((u32)ch0_rx_gm_en << 0));
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_0_unpack(struct cl_chip *chip, u8 *ch0_rx_lna_st1_vcurstr, u8 *ch0_rx_lna_st1_vcasc, u8 *ch0_low_band_en, u8 *ch0_rx_lna_st1_ldo14_en, u8 *ch0_rx_lna_st1_ldo10_en, u8 *ch0_rx_lna_st1_deq_res, u8 *ch0_rx_lna_st1_cur_ctrl, u8 *ch0_rx_lna_st1_cb_sec, u8 *ch0_rx_lna_st1_cb_pr_coarse, u8 *ch0_rx_lna_st1_cb_pr, u8 *ch0_rx_gm_cur_ctrl, u8 *ch0_rx_lna_st1_en, u8 *ch0_rx_gm_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR);

	*ch0_rx_lna_st1_vcurstr = (local_val & ((u32)0xC0000000)) >> 30;
	*ch0_rx_lna_st1_vcasc = (local_val & ((u32)0x3C000000)) >> 26;
	*ch0_low_band_en = (local_val & ((u32)0x02000000)) >> 25;
	*ch0_rx_lna_st1_ldo14_en = (local_val & ((u32)0x01000000)) >> 24;
	*ch0_rx_lna_st1_ldo10_en = (local_val & ((u32)0x00800000)) >> 23;
	*ch0_rx_lna_st1_deq_res = (local_val & ((u32)0x00780000)) >> 19;
	*ch0_rx_lna_st1_cur_ctrl = (local_val & ((u32)0x00078000)) >> 15;
	*ch0_rx_lna_st1_cb_sec = (local_val & ((u32)0x00007800)) >> 11;
	*ch0_rx_lna_st1_cb_pr_coarse = (local_val & ((u32)0x00000600)) >> 9;
	*ch0_rx_lna_st1_cb_pr = (local_val & ((u32)0x000001E0)) >> 5;
	*ch0_rx_gm_cur_ctrl = (local_val & ((u32)0x0000001C)) >> 2;
	*ch0_rx_lna_st1_en = (local_val & ((u32)0x00000002)) >> 1;
	*ch0_rx_gm_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_vcurstr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0xC0000000)) >> 30);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_vcurstr_setf(struct cl_chip *chip, u8 ch0rxlnast1vcurstr)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1vcurstr << 30) & ~((u32)0xC0000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR) & ~((u32)0xC0000000)) | ((u32)ch0rxlnast1vcurstr << 30));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_VCURSTR .addr_index = 0x0000016F, .size_minus_1 = (2 - 1), .shift = 30

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_vcasc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x3C000000)) >> 26);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_vcasc_setf(struct cl_chip *chip, u8 ch0rxlnast1vcasc)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1vcasc << 26) & ~((u32)0x3C000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR) & ~((u32)0x3C000000)) | ((u32)ch0rxlnast1vcasc << 26));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_VCASC .addr_index = 0x0000016F, .size_minus_1 = (4 - 1), .shift = 26

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_low_band_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_low_band_en_setf(struct cl_chip *chip, u8 ch0lowbanden)
{
	ASSERT_ERR_CHIP((((u32)ch0lowbanden << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR) & ~((u32)0x02000000)) | ((u32)ch0lowbanden << 25));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_LOW_BAND_EN .addr_index = 0x0000016F, .size_minus_1 = (1 - 1), .shift = 25

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_ldo_14_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_ldo_14_en_setf(struct cl_chip *chip, u8 ch0rxlnast1ldo14en)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1ldo14en << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR) & ~((u32)0x01000000)) | ((u32)ch0rxlnast1ldo14en << 24));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_LDO_14_EN .addr_index = 0x0000016F, .size_minus_1 = (1 - 1), .shift = 24

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_ldo_10_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_ldo_10_en_setf(struct cl_chip *chip, u8 ch0rxlnast1ldo10en)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1ldo10en << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR) & ~((u32)0x00800000)) | ((u32)ch0rxlnast1ldo10en << 23));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_LDO_10_EN .addr_index = 0x0000016F, .size_minus_1 = (1 - 1), .shift = 23

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_deq_res_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00780000)) >> 19);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_deq_res_setf(struct cl_chip *chip, u8 ch0rxlnast1deqres)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1deqres << 19) & ~((u32)0x00780000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR) & ~((u32)0x00780000)) | ((u32)ch0rxlnast1deqres << 19));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_DEQ_RES .addr_index = 0x0000016F, .size_minus_1 = (4 - 1), .shift = 19

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_cur_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00078000)) >> 15);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_cur_ctrl_setf(struct cl_chip *chip, u8 ch0rxlnast1curctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1curctrl << 15) & ~((u32)0x00078000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR) & ~((u32)0x00078000)) | ((u32)ch0rxlnast1curctrl << 15));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CUR_CTRL .addr_index = 0x0000016F, .size_minus_1 = (4 - 1), .shift = 15

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_cb_sec_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00007800)) >> 11);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_cb_sec_setf(struct cl_chip *chip, u8 ch0rxlnast1cbsec)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1cbsec << 11) & ~((u32)0x00007800)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR) & ~((u32)0x00007800)) | ((u32)ch0rxlnast1cbsec << 11));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CB_SEC .addr_index = 0x0000016F, .size_minus_1 = (4 - 1), .shift = 11

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_cb_pr_coarse_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000600)) >> 9);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_cb_pr_coarse_setf(struct cl_chip *chip, u8 ch0rxlnast1cbprcoarse)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1cbprcoarse << 9) & ~((u32)0x00000600)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR) & ~((u32)0x00000600)) | ((u32)ch0rxlnast1cbprcoarse << 9));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CB_PR_COARSE .addr_index = 0x0000016F, .size_minus_1 = (2 - 1), .shift = 9

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_cb_pr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x000001E0)) >> 5);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_cb_pr_setf(struct cl_chip *chip, u8 ch0rxlnast1cbpr)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1cbpr << 5) & ~((u32)0x000001E0)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR) & ~((u32)0x000001E0)) | ((u32)ch0rxlnast1cbpr << 5));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_CB_PR .addr_index = 0x0000016F, .size_minus_1 = (4 - 1), .shift = 5

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_gm_cur_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000001C)) >> 2);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_gm_cur_ctrl_setf(struct cl_chip *chip, u8 ch0rxgmcurctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0rxgmcurctrl << 2) & ~((u32)0x0000001C)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR) & ~((u32)0x0000001C)) | ((u32)ch0rxgmcurctrl << 2));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_GM_CUR_CTRL .addr_index = 0x0000016F, .size_minus_1 = (3 - 1), .shift = 2

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_lna_st_1_en_setf(struct cl_chip *chip, u8 ch0rxlnast1en)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1en << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR) & ~((u32)0x00000002)) | ((u32)ch0rxlnast1en << 1));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_LNA_ST_1_EN .addr_index = 0x0000016F, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_gm_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_0_ch_0_rx_gm_en_setf(struct cl_chip *chip, u8 ch0rxgmen)
{
	ASSERT_ERR_CHIP((((u32)ch0rxgmen << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)ch0rxgmen << 0));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_0_CH_0_RX_GM_EN .addr_index = 0x0000016F, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief RF_FEM_0_LNA_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    26:23 CH0_rx_gm_gain_ctrl       0x00000000
 *    22    CH0_spare20_in            00000000
 *    21:17 CH0_rx_lna_st1_vbody_bias_5g 0x00000000
 *    16:12 CH0_rx_lna_st1_vbody_bias_2p5g 0x00000000
 *    11    CH0_rx_gm_5db_en          00000000
 *    10    CH0_spare19_in            00000000
 *    09    CH0_rx_lna_st1_sel_rxrf_ptat 00000000
 *    08    CH0_rx_lna_st1_bias_en    00000000
 *    07    CH0_rx_lna_st1_opamp_bias_sel 00000000
 *    06    CH0_rx_gm_opamp_bias_sel  00000000
 *    05:02 CH0_rx_lna_st1_s11cap_ctrl 0x00000000
 *    01:00 CH0_rx_lna_st1_vdd10sel   0x00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005C0)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_OFFSET      0x000005C0
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_INDEX       0x00000170
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_0_lna_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR, value);
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1 .addr_index = 0x00000170, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_GM_GAIN_CTRL_MASK    ((u32)0x07800000)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_GM_GAIN_CTRL_LSB    23
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_GM_GAIN_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_SPARE_20_IN_BIT    ((u32)0x00400000)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_SPARE_20_IN_POS    22
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_VBODY_BIAS_5_G_MASK    ((u32)0x003E0000)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_VBODY_BIAS_5_G_LSB    17
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_VBODY_BIAS_5_G_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_VBODY_BIAS_2_P_5_G_MASK    ((u32)0x0001F000)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_VBODY_BIAS_2_P_5_G_LSB    12
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_VBODY_BIAS_2_P_5_G_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_GM_5_DB_EN_BIT    ((u32)0x00000800)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_GM_5_DB_EN_POS    11
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_SPARE_19_IN_BIT    ((u32)0x00000400)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_SPARE_19_IN_POS    10
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_SEL_RXRF_PTAT_BIT    ((u32)0x00000200)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_SEL_RXRF_PTAT_POS    9
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_BIAS_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_BIAS_EN_POS    8
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_OPAMP_BIAS_SEL_BIT    ((u32)0x00000080)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_OPAMP_BIAS_SEL_POS    7
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_GM_OPAMP_BIAS_SEL_BIT    ((u32)0x00000040)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_GM_OPAMP_BIAS_SEL_POS    6
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_S_11_CAP_CTRL_MASK    ((u32)0x0000003C)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_S_11_CAP_CTRL_LSB    2
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_S_11_CAP_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_VDD_10_SEL_MASK    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_VDD_10_SEL_LSB    0
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_VDD_10_SEL_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_GM_GAIN_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_SPARE_20_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_VBODY_BIAS_5_G_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_VBODY_BIAS_2_P_5_G_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_GM_5_DB_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_SPARE_19_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_SEL_RXRF_PTAT_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_BIAS_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_OPAMP_BIAS_SEL_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_GM_OPAMP_BIAS_SEL_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_S_11_CAP_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_VDD_10_SEL_RST    0x00000000

static inline void rfic_regs_rf_fem_0_lna_ctrl_1_pack(struct cl_chip *chip, u8 ch0_rx_gm_gain_ctrl, u8 ch0_spare20_in, u8 ch0_rx_lna_st1_vbody_bias_5g, u8 ch0_rx_lna_st1_vbody_bias_2p5g, u8 ch0_rx_gm_5db_en, u8 ch0_spare19_in, u8 ch0_rx_lna_st1_sel_rxrf_ptat, u8 ch0_rx_lna_st1_bias_en, u8 ch0_rx_lna_st1_opamp_bias_sel, u8 ch0_rx_gm_opamp_bias_sel, u8 ch0_rx_lna_st1_s11cap_ctrl, u8 ch0_rx_lna_st1_vdd10sel)
{
	ASSERT_ERR_CHIP((((u32)ch0_rx_gm_gain_ctrl << 23) & ~((u32)0x07800000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare20_in << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_vbody_bias_5g << 17) & ~((u32)0x003E0000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_vbody_bias_2p5g << 12) & ~((u32)0x0001F000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_gm_5db_en << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare19_in << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_sel_rxrf_ptat << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_bias_en << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_opamp_bias_sel << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_gm_opamp_bias_sel << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_s11cap_ctrl << 2) & ~((u32)0x0000003C)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st1_vdd10sel << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR, ((u32)ch0_rx_gm_gain_ctrl << 23) | ((u32)ch0_spare20_in << 22) | ((u32)ch0_rx_lna_st1_vbody_bias_5g << 17) | ((u32)ch0_rx_lna_st1_vbody_bias_2p5g << 12) | ((u32)ch0_rx_gm_5db_en << 11) | ((u32)ch0_spare19_in << 10) | ((u32)ch0_rx_lna_st1_sel_rxrf_ptat << 9) | ((u32)ch0_rx_lna_st1_bias_en << 8) | ((u32)ch0_rx_lna_st1_opamp_bias_sel << 7) | ((u32)ch0_rx_gm_opamp_bias_sel << 6) | ((u32)ch0_rx_lna_st1_s11cap_ctrl << 2) | ((u32)ch0_rx_lna_st1_vdd10sel << 0));
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_1_unpack(struct cl_chip *chip, u8 *ch0_rx_gm_gain_ctrl, u8 *ch0_spare20_in, u8 *ch0_rx_lna_st1_vbody_bias_5g, u8 *ch0_rx_lna_st1_vbody_bias_2p5g, u8 *ch0_rx_gm_5db_en, u8 *ch0_spare19_in, u8 *ch0_rx_lna_st1_sel_rxrf_ptat, u8 *ch0_rx_lna_st1_bias_en, u8 *ch0_rx_lna_st1_opamp_bias_sel, u8 *ch0_rx_gm_opamp_bias_sel, u8 *ch0_rx_lna_st1_s11cap_ctrl, u8 *ch0_rx_lna_st1_vdd10sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR);

	*ch0_rx_gm_gain_ctrl = (local_val & ((u32)0x07800000)) >> 23;
	*ch0_spare20_in = (local_val & ((u32)0x00400000)) >> 22;
	*ch0_rx_lna_st1_vbody_bias_5g = (local_val & ((u32)0x003E0000)) >> 17;
	*ch0_rx_lna_st1_vbody_bias_2p5g = (local_val & ((u32)0x0001F000)) >> 12;
	*ch0_rx_gm_5db_en = (local_val & ((u32)0x00000800)) >> 11;
	*ch0_spare19_in = (local_val & ((u32)0x00000400)) >> 10;
	*ch0_rx_lna_st1_sel_rxrf_ptat = (local_val & ((u32)0x00000200)) >> 9;
	*ch0_rx_lna_st1_bias_en = (local_val & ((u32)0x00000100)) >> 8;
	*ch0_rx_lna_st1_opamp_bias_sel = (local_val & ((u32)0x00000080)) >> 7;
	*ch0_rx_gm_opamp_bias_sel = (local_val & ((u32)0x00000040)) >> 6;
	*ch0_rx_lna_st1_s11cap_ctrl = (local_val & ((u32)0x0000003C)) >> 2;
	*ch0_rx_lna_st1_vdd10sel = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_gm_gain_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x07800000)) >> 23);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_gm_gain_ctrl_setf(struct cl_chip *chip, u8 ch0rxgmgainctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0rxgmgainctrl << 23) & ~((u32)0x07800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR) & ~((u32)0x07800000)) | ((u32)ch0rxgmgainctrl << 23));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_GM_GAIN_CTRL .addr_index = 0x00000170, .size_minus_1 = (4 - 1), .shift = 23

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_spare_20_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_spare_20_in_setf(struct cl_chip *chip, u8 ch0spare20in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare20in << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR) & ~((u32)0x00400000)) | ((u32)ch0spare20in << 22));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_SPARE_20_IN .addr_index = 0x00000170, .size_minus_1 = (1 - 1), .shift = 22

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_lna_st_1_vbody_bias_5_g_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x003E0000)) >> 17);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_lna_st_1_vbody_bias_5_g_setf(struct cl_chip *chip, u8 ch0rxlnast1vbodybias5g)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1vbodybias5g << 17) & ~((u32)0x003E0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR) & ~((u32)0x003E0000)) | ((u32)ch0rxlnast1vbodybias5g << 17));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_VBODY_BIAS_5_G .addr_index = 0x00000170, .size_minus_1 = (5 - 1), .shift = 17

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_lna_st_1_vbody_bias_2_p_5_g_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0001F000)) >> 12);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_lna_st_1_vbody_bias_2_p_5_g_setf(struct cl_chip *chip, u8 ch0rxlnast1vbodybias2p5g)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1vbodybias2p5g << 12) & ~((u32)0x0001F000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR) & ~((u32)0x0001F000)) | ((u32)ch0rxlnast1vbodybias2p5g << 12));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_VBODY_BIAS_2_P_5_G .addr_index = 0x00000170, .size_minus_1 = (5 - 1), .shift = 12

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_gm_5_db_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_gm_5_db_en_setf(struct cl_chip *chip, u8 ch0rxgm5dben)
{
	ASSERT_ERR_CHIP((((u32)ch0rxgm5dben << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR) & ~((u32)0x00000800)) | ((u32)ch0rxgm5dben << 11));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_GM_5_DB_EN .addr_index = 0x00000170, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_spare_19_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_spare_19_in_setf(struct cl_chip *chip, u8 ch0spare19in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare19in << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR) & ~((u32)0x00000400)) | ((u32)ch0spare19in << 10));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_SPARE_19_IN .addr_index = 0x00000170, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_lna_st_1_sel_rxrf_ptat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_lna_st_1_sel_rxrf_ptat_setf(struct cl_chip *chip, u8 ch0rxlnast1selrxrfptat)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1selrxrfptat << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR) & ~((u32)0x00000200)) | ((u32)ch0rxlnast1selrxrfptat << 9));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_SEL_RXRF_PTAT .addr_index = 0x00000170, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_lna_st_1_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_lna_st_1_bias_en_setf(struct cl_chip *chip, u8 ch0rxlnast1biasen)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1biasen << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR) & ~((u32)0x00000100)) | ((u32)ch0rxlnast1biasen << 8));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_BIAS_EN .addr_index = 0x00000170, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_lna_st_1_opamp_bias_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_lna_st_1_opamp_bias_sel_setf(struct cl_chip *chip, u8 ch0rxlnast1opampbiassel)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1opampbiassel << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR) & ~((u32)0x00000080)) | ((u32)ch0rxlnast1opampbiassel << 7));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_OPAMP_BIAS_SEL .addr_index = 0x00000170, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_gm_opamp_bias_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_gm_opamp_bias_sel_setf(struct cl_chip *chip, u8 ch0rxgmopampbiassel)
{
	ASSERT_ERR_CHIP((((u32)ch0rxgmopampbiassel << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR) & ~((u32)0x00000040)) | ((u32)ch0rxgmopampbiassel << 6));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_GM_OPAMP_BIAS_SEL .addr_index = 0x00000170, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_lna_st_1_s_11_cap_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0000003C)) >> 2);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_lna_st_1_s_11_cap_ctrl_setf(struct cl_chip *chip, u8 ch0rxlnast1s11capctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1s11capctrl << 2) & ~((u32)0x0000003C)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR) & ~((u32)0x0000003C)) | ((u32)ch0rxlnast1s11capctrl << 2));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_S_11_CAP_CTRL .addr_index = 0x00000170, .size_minus_1 = (4 - 1), .shift = 2

static inline u8 rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_lna_st_1_vdd_10_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_rf_fem_0_lna_ctrl_1_ch_0_rx_lna_st_1_vdd_10_sel_setf(struct cl_chip *chip, u8 ch0rxlnast1vdd10sel)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast1vdd10sel << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_CTRL_1_ADDR) & ~((u32)0x00000003)) | ((u32)ch0rxlnast1vdd10sel << 0));
}

#define RFIC_REGS_RF_FEM_0_LNA_CTRL_1_CH_0_RX_LNA_ST_1_VDD_10_SEL .addr_index = 0x00000170, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief RF_FEM_0_PA_2_P_5_G_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:27 CH0_tx_pa_lb_stg2_vg3     0x00000000
 *    26:22 CH0_tx_pa_lb_stg2_vg2     0x00000000
 *    21:16 CH0_spare22_in            0x00000000
 *    15:11 CH0_tx_pa_lb_stg1_vg3     0x00000000
 *    10:06 CH0_tx_pa_lb_stg1_vg2     0x00000000
 *    05:02 CH0_spare21_in            0x00000000
 *    01    CH0_tx_pa_lb_vblk         00000000
 *    00    CH0_tx_pa_lb_en           00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005C4)
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_OFFSET      0x000005C4
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_INDEX       0x00000171
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR);
}

static inline void rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR, value);
}

#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0 .addr_index = 0x00000171, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_2_VG_3_MASK    ((u32)0xF8000000)
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_2_VG_3_LSB    27
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_2_VG_3_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_2_VG_2_MASK    ((u32)0x07C00000)
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_2_VG_2_LSB    22
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_2_VG_2_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_SPARE_22_IN_MASK    ((u32)0x003F0000)
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_SPARE_22_IN_LSB    16
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_SPARE_22_IN_WIDTH    ((u32)0x00000006)
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_1_VG_3_MASK    ((u32)0x0000F800)
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_1_VG_3_LSB    11
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_1_VG_3_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_1_VG_2_MASK    ((u32)0x000007C0)
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_1_VG_2_LSB    6
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_1_VG_2_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_SPARE_21_IN_MASK    ((u32)0x0000003C)
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_SPARE_21_IN_LSB    2
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_SPARE_21_IN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_VBLK_BIT    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_VBLK_POS    1
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_EN_POS    0

#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_2_VG_3_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_2_VG_2_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_SPARE_22_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_1_VG_3_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_1_VG_2_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_SPARE_21_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_VBLK_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_EN_RST    0x00000000

static inline void rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_pack(struct cl_chip *chip, u8 ch0_tx_pa_lb_stg2_vg3, u8 ch0_tx_pa_lb_stg2_vg2, u8 ch0_spare22_in, u8 ch0_tx_pa_lb_stg1_vg3, u8 ch0_tx_pa_lb_stg1_vg2, u8 ch0_spare21_in, u8 ch0_tx_pa_lb_vblk, u8 ch0_tx_pa_lb_en)
{
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_stg2_vg3 << 27) & ~((u32)0xF8000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_stg2_vg2 << 22) & ~((u32)0x07C00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare22_in << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_stg1_vg3 << 11) & ~((u32)0x0000F800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_stg1_vg2 << 6) & ~((u32)0x000007C0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare21_in << 2) & ~((u32)0x0000003C)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_vblk << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR, ((u32)ch0_tx_pa_lb_stg2_vg3 << 27) | ((u32)ch0_tx_pa_lb_stg2_vg2 << 22) | ((u32)ch0_spare22_in << 16) | ((u32)ch0_tx_pa_lb_stg1_vg3 << 11) | ((u32)ch0_tx_pa_lb_stg1_vg2 << 6) | ((u32)ch0_spare21_in << 2) | ((u32)ch0_tx_pa_lb_vblk << 1) | ((u32)ch0_tx_pa_lb_en << 0));
}

static inline void rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_unpack(struct cl_chip *chip, u8 *ch0_tx_pa_lb_stg2_vg3, u8 *ch0_tx_pa_lb_stg2_vg2, u8 *ch0_spare22_in, u8 *ch0_tx_pa_lb_stg1_vg3, u8 *ch0_tx_pa_lb_stg1_vg2, u8 *ch0_spare21_in, u8 *ch0_tx_pa_lb_vblk, u8 *ch0_tx_pa_lb_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR);

	*ch0_tx_pa_lb_stg2_vg3 = (local_val & ((u32)0xF8000000)) >> 27;
	*ch0_tx_pa_lb_stg2_vg2 = (local_val & ((u32)0x07C00000)) >> 22;
	*ch0_spare22_in = (local_val & ((u32)0x003F0000)) >> 16;
	*ch0_tx_pa_lb_stg1_vg3 = (local_val & ((u32)0x0000F800)) >> 11;
	*ch0_tx_pa_lb_stg1_vg2 = (local_val & ((u32)0x000007C0)) >> 6;
	*ch0_spare21_in = (local_val & ((u32)0x0000003C)) >> 2;
	*ch0_tx_pa_lb_vblk = (local_val & ((u32)0x00000002)) >> 1;
	*ch0_tx_pa_lb_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_ch_0_tx_pa_lb_stg_2_vg_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0xF8000000)) >> 27);
}

static inline void rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_ch_0_tx_pa_lb_stg_2_vg_3_setf(struct cl_chip *chip, u8 ch0txpalbstg2vg3)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbstg2vg3 << 27) & ~((u32)0xF8000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0xF8000000)) | ((u32)ch0txpalbstg2vg3 << 27));
}

#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_2_VG_3 .addr_index = 0x00000171, .size_minus_1 = (5 - 1), .shift = 27

static inline u8 rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_ch_0_tx_pa_lb_stg_2_vg_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x07C00000)) >> 22);
}

static inline void rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_ch_0_tx_pa_lb_stg_2_vg_2_setf(struct cl_chip *chip, u8 ch0txpalbstg2vg2)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbstg2vg2 << 22) & ~((u32)0x07C00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x07C00000)) | ((u32)ch0txpalbstg2vg2 << 22));
}

#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_2_VG_2 .addr_index = 0x00000171, .size_minus_1 = (5 - 1), .shift = 22

static inline u8 rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_ch_0_spare_22_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_ch_0_spare_22_in_setf(struct cl_chip *chip, u8 ch0spare22in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare22in << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x003F0000)) | ((u32)ch0spare22in << 16));
}

#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_SPARE_22_IN .addr_index = 0x00000171, .size_minus_1 = (6 - 1), .shift = 16

static inline u8 rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_ch_0_tx_pa_lb_stg_1_vg_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000F800)) >> 11);
}

static inline void rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_ch_0_tx_pa_lb_stg_1_vg_3_setf(struct cl_chip *chip, u8 ch0txpalbstg1vg3)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbstg1vg3 << 11) & ~((u32)0x0000F800)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x0000F800)) | ((u32)ch0txpalbstg1vg3 << 11));
}

#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_1_VG_3 .addr_index = 0x00000171, .size_minus_1 = (5 - 1), .shift = 11

static inline u8 rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_ch_0_tx_pa_lb_stg_1_vg_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x000007C0)) >> 6);
}

static inline void rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_ch_0_tx_pa_lb_stg_1_vg_2_setf(struct cl_chip *chip, u8 ch0txpalbstg1vg2)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbstg1vg2 << 6) & ~((u32)0x000007C0)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x000007C0)) | ((u32)ch0txpalbstg1vg2 << 6));
}

#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_STG_1_VG_2 .addr_index = 0x00000171, .size_minus_1 = (5 - 1), .shift = 6

static inline u8 rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_ch_0_spare_21_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000003C)) >> 2);
}

static inline void rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_ch_0_spare_21_in_setf(struct cl_chip *chip, u8 ch0spare21in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare21in << 2) & ~((u32)0x0000003C)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x0000003C)) | ((u32)ch0spare21in << 2));
}

#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_SPARE_21_IN .addr_index = 0x00000171, .size_minus_1 = (4 - 1), .shift = 2

static inline u8 rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_ch_0_tx_pa_lb_vblk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_ch_0_tx_pa_lb_vblk_setf(struct cl_chip *chip, u8 ch0txpalbvblk)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbvblk << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x00000002)) | ((u32)ch0txpalbvblk << 1));
}

#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_VBLK .addr_index = 0x00000171, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_ch_0_tx_pa_lb_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_rf_fem_0_pa_2_p_5_g_ctrl_0_ch_0_tx_pa_lb_en_setf(struct cl_chip *chip, u8 ch0txpalben)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalben << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)ch0txpalben << 0));
}

#define RFIC_REGS_RF_FEM_0_PA_2_P_5_G_CTRL_0_CH_0_TX_PA_LB_EN .addr_index = 0x00000171, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief RF_FEM_0_PA_5_G_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:29 CH0_spare23_in            0x00000000
 *    28:24 CH0_tx_pa_hb_stg2_vg2     0x00000000
 *    23:18 CH0_tx_pa_ib_stg2         0x00000000
 *    17:13 CH0_tx_pa_hb_stg1_vg3     0x00000000
 *    12:08 CH0_tx_pa_hb_stg1_vg2     0x00000000
 *    07:02 CH0_tx_pa_ib_stg1         0x00000000
 *    01    CH0_tx_pa_hb_vblk         00000000
 *    00    CH0_tx_pa_hb_en           00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005C8)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_OFFSET      0x000005C8
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_INDEX       0x00000172
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_0_pa_5_g_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR);
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR, value);
}

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0 .addr_index = 0x00000172, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_SPARE_23_IN_MASK    ((u32)0xE0000000)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_SPARE_23_IN_LSB    29
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_SPARE_23_IN_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_STG_2_VG_2_MASK    ((u32)0x1F000000)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_STG_2_VG_2_LSB    24
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_STG_2_VG_2_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_IB_STG_2_MASK    ((u32)0x00FC0000)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_IB_STG_2_LSB    18
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_IB_STG_2_WIDTH    ((u32)0x00000006)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_STG_1_VG_3_MASK    ((u32)0x0003E000)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_STG_1_VG_3_LSB    13
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_STG_1_VG_3_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_STG_1_VG_2_MASK    ((u32)0x00001F00)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_STG_1_VG_2_LSB    8
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_STG_1_VG_2_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_IB_STG_1_MASK    ((u32)0x000000FC)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_IB_STG_1_LSB    2
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_IB_STG_1_WIDTH    ((u32)0x00000006)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_VBLK_BIT    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_VBLK_POS    1
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_EN_POS    0

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_SPARE_23_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_STG_2_VG_2_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_IB_STG_2_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_STG_1_VG_3_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_STG_1_VG_2_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_IB_STG_1_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_VBLK_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_EN_RST    0x00000000

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_0_pack(struct cl_chip *chip, u8 ch0_spare23_in, u8 ch0_tx_pa_hb_stg2_vg2, u8 ch0_tx_pa_ib_stg2, u8 ch0_tx_pa_hb_stg1_vg3, u8 ch0_tx_pa_hb_stg1_vg2, u8 ch0_tx_pa_ib_stg1, u8 ch0_tx_pa_hb_vblk, u8 ch0_tx_pa_hb_en)
{
	ASSERT_ERR_CHIP((((u32)ch0_spare23_in << 29) & ~((u32)0xE0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_stg2_vg2 << 24) & ~((u32)0x1F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_ib_stg2 << 18) & ~((u32)0x00FC0000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_stg1_vg3 << 13) & ~((u32)0x0003E000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_stg1_vg2 << 8) & ~((u32)0x00001F00)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_ib_stg1 << 2) & ~((u32)0x000000FC)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_vblk << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR, ((u32)ch0_spare23_in << 29) | ((u32)ch0_tx_pa_hb_stg2_vg2 << 24) | ((u32)ch0_tx_pa_ib_stg2 << 18) | ((u32)ch0_tx_pa_hb_stg1_vg3 << 13) | ((u32)ch0_tx_pa_hb_stg1_vg2 << 8) | ((u32)ch0_tx_pa_ib_stg1 << 2) | ((u32)ch0_tx_pa_hb_vblk << 1) | ((u32)ch0_tx_pa_hb_en << 0));
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_0_unpack(struct cl_chip *chip, u8 *ch0_spare23_in, u8 *ch0_tx_pa_hb_stg2_vg2, u8 *ch0_tx_pa_ib_stg2, u8 *ch0_tx_pa_hb_stg1_vg3, u8 *ch0_tx_pa_hb_stg1_vg2, u8 *ch0_tx_pa_ib_stg1, u8 *ch0_tx_pa_hb_vblk, u8 *ch0_tx_pa_hb_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR);

	*ch0_spare23_in = (local_val & ((u32)0xE0000000)) >> 29;
	*ch0_tx_pa_hb_stg2_vg2 = (local_val & ((u32)0x1F000000)) >> 24;
	*ch0_tx_pa_ib_stg2 = (local_val & ((u32)0x00FC0000)) >> 18;
	*ch0_tx_pa_hb_stg1_vg3 = (local_val & ((u32)0x0003E000)) >> 13;
	*ch0_tx_pa_hb_stg1_vg2 = (local_val & ((u32)0x00001F00)) >> 8;
	*ch0_tx_pa_ib_stg1 = (local_val & ((u32)0x000000FC)) >> 2;
	*ch0_tx_pa_hb_vblk = (local_val & ((u32)0x00000002)) >> 1;
	*ch0_tx_pa_hb_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_rf_fem_0_pa_5_g_ctrl_0_ch_0_spare_23_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0xE0000000)) >> 29);
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_0_ch_0_spare_23_in_setf(struct cl_chip *chip, u8 ch0spare23in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare23in << 29) & ~((u32)0xE0000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR) & ~((u32)0xE0000000)) | ((u32)ch0spare23in << 29));
}

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_SPARE_23_IN .addr_index = 0x00000172, .size_minus_1 = (3 - 1), .shift = 29

static inline u8 rfic_regs_rf_fem_0_pa_5_g_ctrl_0_ch_0_tx_pa_hb_stg_2_vg_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x1F000000)) >> 24);
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_0_ch_0_tx_pa_hb_stg_2_vg_2_setf(struct cl_chip *chip, u8 ch0txpahbstg2vg2)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbstg2vg2 << 24) & ~((u32)0x1F000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR) & ~((u32)0x1F000000)) | ((u32)ch0txpahbstg2vg2 << 24));
}

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_STG_2_VG_2 .addr_index = 0x00000172, .size_minus_1 = (5 - 1), .shift = 24

static inline u8 rfic_regs_rf_fem_0_pa_5_g_ctrl_0_ch_0_tx_pa_ib_stg_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00FC0000)) >> 18);
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_0_ch_0_tx_pa_ib_stg_2_setf(struct cl_chip *chip, u8 ch0txpaibstg2)
{
	ASSERT_ERR_CHIP((((u32)ch0txpaibstg2 << 18) & ~((u32)0x00FC0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR) & ~((u32)0x00FC0000)) | ((u32)ch0txpaibstg2 << 18));
}

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_IB_STG_2 .addr_index = 0x00000172, .size_minus_1 = (6 - 1), .shift = 18

static inline u8 rfic_regs_rf_fem_0_pa_5_g_ctrl_0_ch_0_tx_pa_hb_stg_1_vg_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0003E000)) >> 13);
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_0_ch_0_tx_pa_hb_stg_1_vg_3_setf(struct cl_chip *chip, u8 ch0txpahbstg1vg3)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbstg1vg3 << 13) & ~((u32)0x0003E000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR) & ~((u32)0x0003E000)) | ((u32)ch0txpahbstg1vg3 << 13));
}

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_STG_1_VG_3 .addr_index = 0x00000172, .size_minus_1 = (5 - 1), .shift = 13

static inline u8 rfic_regs_rf_fem_0_pa_5_g_ctrl_0_ch_0_tx_pa_hb_stg_1_vg_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00001F00)) >> 8);
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_0_ch_0_tx_pa_hb_stg_1_vg_2_setf(struct cl_chip *chip, u8 ch0txpahbstg1vg2)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbstg1vg2 << 8) & ~((u32)0x00001F00)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR) & ~((u32)0x00001F00)) | ((u32)ch0txpahbstg1vg2 << 8));
}

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_STG_1_VG_2 .addr_index = 0x00000172, .size_minus_1 = (5 - 1), .shift = 8

static inline u8 rfic_regs_rf_fem_0_pa_5_g_ctrl_0_ch_0_tx_pa_ib_stg_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FC)) >> 2);
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_0_ch_0_tx_pa_ib_stg_1_setf(struct cl_chip *chip, u8 ch0txpaibstg1)
{
	ASSERT_ERR_CHIP((((u32)ch0txpaibstg1 << 2) & ~((u32)0x000000FC)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR) & ~((u32)0x000000FC)) | ((u32)ch0txpaibstg1 << 2));
}

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_IB_STG_1 .addr_index = 0x00000172, .size_minus_1 = (6 - 1), .shift = 2

static inline u8 rfic_regs_rf_fem_0_pa_5_g_ctrl_0_ch_0_tx_pa_hb_vblk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_0_ch_0_tx_pa_hb_vblk_setf(struct cl_chip *chip, u8 ch0txpahbvblk)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbvblk << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR) & ~((u32)0x00000002)) | ((u32)ch0txpahbvblk << 1));
}

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_VBLK .addr_index = 0x00000172, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_rf_fem_0_pa_5_g_ctrl_0_ch_0_tx_pa_hb_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_0_ch_0_tx_pa_hb_en_setf(struct cl_chip *chip, u8 ch0txpahben)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahben << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)ch0txpahben << 0));
}

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_0_CH_0_TX_PA_HB_EN .addr_index = 0x00000172, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief RF_FEM_0_PA_5_G_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:25 CH0_spare24_in            0x00000000
 *    24:20 CH0_tx_pa_hb_stg2_vg3_pd  0x00000000
 *    19:15 CH0_tx_pa_hb_stg2_vg2_pd  0x00000000
 *    14:10 CH0_tx_pa_hb_stg1_vg3_pd  0x00000000
 *    09:05 CH0_tx_pa_hb_stg1_vg2_pd  0x00000000
 *    04:00 CH0_tx_pa_hb_stg2_vg3     0x00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005CC)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_OFFSET      0x000005CC
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_INDEX       0x00000173
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_0_pa_5_g_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR);
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR, value);
}

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1 .addr_index = 0x00000173, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_SPARE_24_IN_MASK    ((u32)0xFE000000)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_SPARE_24_IN_LSB    25
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_SPARE_24_IN_WIDTH    ((u32)0x00000007)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_2_VG_3_PD_MASK    ((u32)0x01F00000)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_2_VG_3_PD_LSB    20
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_2_VG_3_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_2_VG_2_PD_MASK    ((u32)0x000F8000)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_2_VG_2_PD_LSB    15
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_2_VG_2_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_1_VG_3_PD_MASK    ((u32)0x00007C00)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_1_VG_3_PD_LSB    10
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_1_VG_3_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_1_VG_2_PD_MASK    ((u32)0x000003E0)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_1_VG_2_PD_LSB    5
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_1_VG_2_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_2_VG_3_MASK    ((u32)0x0000001F)
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_2_VG_3_LSB    0
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_2_VG_3_WIDTH    ((u32)0x00000005)

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_SPARE_24_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_2_VG_3_PD_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_2_VG_2_PD_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_1_VG_3_PD_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_1_VG_2_PD_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_2_VG_3_RST    0x00000000

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_1_pack(struct cl_chip *chip, u8 ch0_spare24_in, u8 ch0_tx_pa_hb_stg2_vg3_pd, u8 ch0_tx_pa_hb_stg2_vg2_pd, u8 ch0_tx_pa_hb_stg1_vg3_pd, u8 ch0_tx_pa_hb_stg1_vg2_pd, u8 ch0_tx_pa_hb_stg2_vg3)
{
	ASSERT_ERR_CHIP((((u32)ch0_spare24_in << 25) & ~((u32)0xFE000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_stg2_vg3_pd << 20) & ~((u32)0x01F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_stg2_vg2_pd << 15) & ~((u32)0x000F8000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_stg1_vg3_pd << 10) & ~((u32)0x00007C00)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_stg1_vg2_pd << 5) & ~((u32)0x000003E0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_stg2_vg3 << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR, ((u32)ch0_spare24_in << 25) | ((u32)ch0_tx_pa_hb_stg2_vg3_pd << 20) | ((u32)ch0_tx_pa_hb_stg2_vg2_pd << 15) | ((u32)ch0_tx_pa_hb_stg1_vg3_pd << 10) | ((u32)ch0_tx_pa_hb_stg1_vg2_pd << 5) | ((u32)ch0_tx_pa_hb_stg2_vg3 << 0));
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_1_unpack(struct cl_chip *chip, u8 *ch0_spare24_in, u8 *ch0_tx_pa_hb_stg2_vg3_pd, u8 *ch0_tx_pa_hb_stg2_vg2_pd, u8 *ch0_tx_pa_hb_stg1_vg3_pd, u8 *ch0_tx_pa_hb_stg1_vg2_pd, u8 *ch0_tx_pa_hb_stg2_vg3)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR);

	*ch0_spare24_in = (local_val & ((u32)0xFE000000)) >> 25;
	*ch0_tx_pa_hb_stg2_vg3_pd = (local_val & ((u32)0x01F00000)) >> 20;
	*ch0_tx_pa_hb_stg2_vg2_pd = (local_val & ((u32)0x000F8000)) >> 15;
	*ch0_tx_pa_hb_stg1_vg3_pd = (local_val & ((u32)0x00007C00)) >> 10;
	*ch0_tx_pa_hb_stg1_vg2_pd = (local_val & ((u32)0x000003E0)) >> 5;
	*ch0_tx_pa_hb_stg2_vg3 = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u8 rfic_regs_rf_fem_0_pa_5_g_ctrl_1_ch_0_spare_24_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0xFE000000)) >> 25);
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_1_ch_0_spare_24_in_setf(struct cl_chip *chip, u8 ch0spare24in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare24in << 25) & ~((u32)0xFE000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR) & ~((u32)0xFE000000)) | ((u32)ch0spare24in << 25));
}

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_SPARE_24_IN .addr_index = 0x00000173, .size_minus_1 = (7 - 1), .shift = 25

static inline u8 rfic_regs_rf_fem_0_pa_5_g_ctrl_1_ch_0_tx_pa_hb_stg_2_vg_3_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x01F00000)) >> 20);
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_1_ch_0_tx_pa_hb_stg_2_vg_3_pd_setf(struct cl_chip *chip, u8 ch0txpahbstg2vg3pd)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbstg2vg3pd << 20) & ~((u32)0x01F00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR) & ~((u32)0x01F00000)) | ((u32)ch0txpahbstg2vg3pd << 20));
}

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_2_VG_3_PD .addr_index = 0x00000173, .size_minus_1 = (5 - 1), .shift = 20

static inline u8 rfic_regs_rf_fem_0_pa_5_g_ctrl_1_ch_0_tx_pa_hb_stg_2_vg_2_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x000F8000)) >> 15);
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_1_ch_0_tx_pa_hb_stg_2_vg_2_pd_setf(struct cl_chip *chip, u8 ch0txpahbstg2vg2pd)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbstg2vg2pd << 15) & ~((u32)0x000F8000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR) & ~((u32)0x000F8000)) | ((u32)ch0txpahbstg2vg2pd << 15));
}

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_2_VG_2_PD .addr_index = 0x00000173, .size_minus_1 = (5 - 1), .shift = 15

static inline u8 rfic_regs_rf_fem_0_pa_5_g_ctrl_1_ch_0_tx_pa_hb_stg_1_vg_3_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00007C00)) >> 10);
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_1_ch_0_tx_pa_hb_stg_1_vg_3_pd_setf(struct cl_chip *chip, u8 ch0txpahbstg1vg3pd)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbstg1vg3pd << 10) & ~((u32)0x00007C00)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR) & ~((u32)0x00007C00)) | ((u32)ch0txpahbstg1vg3pd << 10));
}

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_1_VG_3_PD .addr_index = 0x00000173, .size_minus_1 = (5 - 1), .shift = 10

static inline u8 rfic_regs_rf_fem_0_pa_5_g_ctrl_1_ch_0_tx_pa_hb_stg_1_vg_2_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x000003E0)) >> 5);
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_1_ch_0_tx_pa_hb_stg_1_vg_2_pd_setf(struct cl_chip *chip, u8 ch0txpahbstg1vg2pd)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbstg1vg2pd << 5) & ~((u32)0x000003E0)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR) & ~((u32)0x000003E0)) | ((u32)ch0txpahbstg1vg2pd << 5));
}

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_1_VG_2_PD .addr_index = 0x00000173, .size_minus_1 = (5 - 1), .shift = 5

static inline u8 rfic_regs_rf_fem_0_pa_5_g_ctrl_1_ch_0_tx_pa_hb_stg_2_vg_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

static inline void rfic_regs_rf_fem_0_pa_5_g_ctrl_1_ch_0_tx_pa_hb_stg_2_vg_3_setf(struct cl_chip *chip, u8 ch0txpahbstg2vg3)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbstg2vg3 << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_ADDR) & ~((u32)0x0000001F)) | ((u32)ch0txpahbstg2vg3 << 0));
}

#define RFIC_REGS_RF_FEM_0_PA_5_G_CTRL_1_CH_0_TX_PA_HB_STG_2_VG_3 .addr_index = 0x00000173, .size_minus_1 = (5 - 1), .shift = 0

/**
 * @brief RF_FEM_0_PA_FREQ_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    17    CH0_spare28_in            00000000
 *    16:15 CH0_tx_pa_lb_stg2_cap     0x00000000
 *    14    CH0_spare27_in            00000000
 *    13:12 CH0_tx_pa_lb_stg1_cap     0x00000000
 *    11:05 CH0_spare26_in            0x00000000
 *    04:03 CH0_tx_pa_hb_stg2_cap     0x00000000
 *    02    CH0_spare25_in            00000000
 *    01:00 CH0_tx_pa_hb_stg1_cap     0x00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005D0)
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_OFFSET      0x000005D0
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_INDEX       0x00000174
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_0_pa_freq_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR);
}

static inline void rfic_regs_rf_fem_0_pa_freq_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR, value);
}

#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0 .addr_index = 0x00000174, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_28_IN_BIT    ((u32)0x00020000)
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_28_IN_POS    17
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_LB_STG_2_CAP_MASK    ((u32)0x00018000)
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_LB_STG_2_CAP_LSB    15
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_LB_STG_2_CAP_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_27_IN_BIT    ((u32)0x00004000)
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_27_IN_POS    14
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_LB_STG_1_CAP_MASK    ((u32)0x00003000)
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_LB_STG_1_CAP_LSB    12
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_LB_STG_1_CAP_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_26_IN_MASK    ((u32)0x00000FE0)
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_26_IN_LSB    5
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_26_IN_WIDTH    ((u32)0x00000007)
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_HB_STG_2_CAP_MASK    ((u32)0x00000018)
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_HB_STG_2_CAP_LSB    3
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_HB_STG_2_CAP_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_25_IN_BIT    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_25_IN_POS    2
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_HB_STG_1_CAP_MASK    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_HB_STG_1_CAP_LSB    0
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_HB_STG_1_CAP_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_28_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_LB_STG_2_CAP_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_27_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_LB_STG_1_CAP_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_26_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_HB_STG_2_CAP_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_25_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_HB_STG_1_CAP_RST    0x00000000

static inline void rfic_regs_rf_fem_0_pa_freq_ctrl_0_pack(struct cl_chip *chip, u8 ch0_spare28_in, u8 ch0_tx_pa_lb_stg2_cap, u8 ch0_spare27_in, u8 ch0_tx_pa_lb_stg1_cap, u8 ch0_spare26_in, u8 ch0_tx_pa_hb_stg2_cap, u8 ch0_spare25_in, u8 ch0_tx_pa_hb_stg1_cap)
{
	ASSERT_ERR_CHIP((((u32)ch0_spare28_in << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_stg2_cap << 15) & ~((u32)0x00018000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare27_in << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_stg1_cap << 12) & ~((u32)0x00003000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare26_in << 5) & ~((u32)0x00000FE0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_stg2_cap << 3) & ~((u32)0x00000018)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare25_in << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_stg1_cap << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR, ((u32)ch0_spare28_in << 17) | ((u32)ch0_tx_pa_lb_stg2_cap << 15) | ((u32)ch0_spare27_in << 14) | ((u32)ch0_tx_pa_lb_stg1_cap << 12) | ((u32)ch0_spare26_in << 5) | ((u32)ch0_tx_pa_hb_stg2_cap << 3) | ((u32)ch0_spare25_in << 2) | ((u32)ch0_tx_pa_hb_stg1_cap << 0));
}

static inline void rfic_regs_rf_fem_0_pa_freq_ctrl_0_unpack(struct cl_chip *chip, u8 *ch0_spare28_in, u8 *ch0_tx_pa_lb_stg2_cap, u8 *ch0_spare27_in, u8 *ch0_tx_pa_lb_stg1_cap, u8 *ch0_spare26_in, u8 *ch0_tx_pa_hb_stg2_cap, u8 *ch0_spare25_in, u8 *ch0_tx_pa_hb_stg1_cap)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR);

	*ch0_spare28_in = (local_val & ((u32)0x00020000)) >> 17;
	*ch0_tx_pa_lb_stg2_cap = (local_val & ((u32)0x00018000)) >> 15;
	*ch0_spare27_in = (local_val & ((u32)0x00004000)) >> 14;
	*ch0_tx_pa_lb_stg1_cap = (local_val & ((u32)0x00003000)) >> 12;
	*ch0_spare26_in = (local_val & ((u32)0x00000FE0)) >> 5;
	*ch0_tx_pa_hb_stg2_cap = (local_val & ((u32)0x00000018)) >> 3;
	*ch0_spare25_in = (local_val & ((u32)0x00000004)) >> 2;
	*ch0_tx_pa_hb_stg1_cap = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_rf_fem_0_pa_freq_ctrl_0_ch_0_spare_28_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_rf_fem_0_pa_freq_ctrl_0_ch_0_spare_28_in_setf(struct cl_chip *chip, u8 ch0spare28in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare28in << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR) & ~((u32)0x00020000)) | ((u32)ch0spare28in << 17));
}

#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_28_IN .addr_index = 0x00000174, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_rf_fem_0_pa_freq_ctrl_0_ch_0_tx_pa_lb_stg_2_cap_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00018000)) >> 15);
}

static inline void rfic_regs_rf_fem_0_pa_freq_ctrl_0_ch_0_tx_pa_lb_stg_2_cap_setf(struct cl_chip *chip, u8 ch0txpalbstg2cap)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbstg2cap << 15) & ~((u32)0x00018000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR) & ~((u32)0x00018000)) | ((u32)ch0txpalbstg2cap << 15));
}

#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_LB_STG_2_CAP .addr_index = 0x00000174, .size_minus_1 = (2 - 1), .shift = 15

static inline u8 rfic_regs_rf_fem_0_pa_freq_ctrl_0_ch_0_spare_27_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void rfic_regs_rf_fem_0_pa_freq_ctrl_0_ch_0_spare_27_in_setf(struct cl_chip *chip, u8 ch0spare27in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare27in << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR) & ~((u32)0x00004000)) | ((u32)ch0spare27in << 14));
}

#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_27_IN .addr_index = 0x00000174, .size_minus_1 = (1 - 1), .shift = 14

static inline u8 rfic_regs_rf_fem_0_pa_freq_ctrl_0_ch_0_tx_pa_lb_stg_1_cap_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00003000)) >> 12);
}

static inline void rfic_regs_rf_fem_0_pa_freq_ctrl_0_ch_0_tx_pa_lb_stg_1_cap_setf(struct cl_chip *chip, u8 ch0txpalbstg1cap)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbstg1cap << 12) & ~((u32)0x00003000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR) & ~((u32)0x00003000)) | ((u32)ch0txpalbstg1cap << 12));
}

#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_LB_STG_1_CAP .addr_index = 0x00000174, .size_minus_1 = (2 - 1), .shift = 12

static inline u8 rfic_regs_rf_fem_0_pa_freq_ctrl_0_ch_0_spare_26_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000FE0)) >> 5);
}

static inline void rfic_regs_rf_fem_0_pa_freq_ctrl_0_ch_0_spare_26_in_setf(struct cl_chip *chip, u8 ch0spare26in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare26in << 5) & ~((u32)0x00000FE0)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR) & ~((u32)0x00000FE0)) | ((u32)ch0spare26in << 5));
}

#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_26_IN .addr_index = 0x00000174, .size_minus_1 = (7 - 1), .shift = 5

static inline u8 rfic_regs_rf_fem_0_pa_freq_ctrl_0_ch_0_tx_pa_hb_stg_2_cap_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000018)) >> 3);
}

static inline void rfic_regs_rf_fem_0_pa_freq_ctrl_0_ch_0_tx_pa_hb_stg_2_cap_setf(struct cl_chip *chip, u8 ch0txpahbstg2cap)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbstg2cap << 3) & ~((u32)0x00000018)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR) & ~((u32)0x00000018)) | ((u32)ch0txpahbstg2cap << 3));
}

#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_HB_STG_2_CAP .addr_index = 0x00000174, .size_minus_1 = (2 - 1), .shift = 3

static inline u8 rfic_regs_rf_fem_0_pa_freq_ctrl_0_ch_0_spare_25_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_rf_fem_0_pa_freq_ctrl_0_ch_0_spare_25_in_setf(struct cl_chip *chip, u8 ch0spare25in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare25in << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR) & ~((u32)0x00000004)) | ((u32)ch0spare25in << 2));
}

#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_SPARE_25_IN .addr_index = 0x00000174, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_rf_fem_0_pa_freq_ctrl_0_ch_0_tx_pa_hb_stg_1_cap_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_rf_fem_0_pa_freq_ctrl_0_ch_0_tx_pa_hb_stg_1_cap_setf(struct cl_chip *chip, u8 ch0txpahbstg1cap)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbstg1cap << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_ADDR) & ~((u32)0x00000003)) | ((u32)ch0txpahbstg1cap << 0));
}

#define RFIC_REGS_RF_FEM_0_PA_FREQ_CTRL_0_CH_0_TX_PA_HB_STG_1_CAP .addr_index = 0x00000174, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief RF_FEM_0_PA_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    26    CH0_tx_pa_lb_comp_en      00000000
 *    25:23 CH0_tx_pa_lb_adb_ctrl     0x00000000
 *    22    CH0_tx_pa_hb_comp_en      00000000
 *    21:19 CH0_tx_pa_hb_adb_ctrl     0x00000000
 *    18    CH0_spare31_in            00000000
 *    17    CH0_tx_pa_hb_loopbk_sw_en 00000000
 *    16    CH0_tx_pa_lb_loopbk_sw_en 00000000
 *    15    CH0_rx_lna_loopbk_sw_en   00000000
 *    14:13 CH0_tx_pa_lb_comp         0x00000000
 *    12:11 CH0_spare30_in            0x00000000
 *    10:09 CH0_tx_pa_hb_comp         0x00000000
 *    08    CH0_tx_pa_lb_res_ladder_en 00000000
 *    07    CH0_tx_pa_hb_res_ladder_en 00000000
 *    06:04 CH0_tx_pa_lb_stg2_slice_ctrl 0x00000000
 *    03    CH0_spare29_in            00000000
 *    02:00 CH0_tx_pa_hb_stg2_slice_ctrl 0x00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005D4)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_OFFSET      0x000005D4
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_INDEX       0x00000175
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_0_pa_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, value);
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0 .addr_index = 0x00000175, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_COMP_EN_BIT    ((u32)0x04000000)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_COMP_EN_POS    26
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_ADB_CTRL_MASK    ((u32)0x03800000)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_ADB_CTRL_LSB    23
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_ADB_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_COMP_EN_BIT    ((u32)0x00400000)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_COMP_EN_POS    22
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_ADB_CTRL_MASK    ((u32)0x00380000)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_ADB_CTRL_LSB    19
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_ADB_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_SPARE_31_IN_BIT    ((u32)0x00040000)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_SPARE_31_IN_POS    18
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_LOOPBK_SW_EN_BIT    ((u32)0x00020000)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_LOOPBK_SW_EN_POS    17
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_LOOPBK_SW_EN_BIT    ((u32)0x00010000)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_LOOPBK_SW_EN_POS    16
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_RX_LNA_LOOPBK_SW_EN_BIT    ((u32)0x00008000)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_RX_LNA_LOOPBK_SW_EN_POS    15
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_COMP_MASK    ((u32)0x00006000)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_COMP_LSB    13
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_COMP_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_SPARE_30_IN_MASK    ((u32)0x00001800)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_SPARE_30_IN_LSB    11
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_SPARE_30_IN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_COMP_MASK    ((u32)0x00000600)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_COMP_LSB    9
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_COMP_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_RES_LADDER_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_RES_LADDER_EN_POS    8
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_RES_LADDER_EN_BIT    ((u32)0x00000080)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_RES_LADDER_EN_POS    7
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_STG_2_SLICE_CTRL_MASK    ((u32)0x00000070)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_STG_2_SLICE_CTRL_LSB    4
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_STG_2_SLICE_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_SPARE_29_IN_BIT    ((u32)0x00000008)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_SPARE_29_IN_POS    3
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_STG_2_SLICE_CTRL_MASK    ((u32)0x00000007)
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_STG_2_SLICE_CTRL_LSB    0
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_STG_2_SLICE_CTRL_WIDTH    ((u32)0x00000003)

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_COMP_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_ADB_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_COMP_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_ADB_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_SPARE_31_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_LOOPBK_SW_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_LOOPBK_SW_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_RX_LNA_LOOPBK_SW_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_COMP_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_SPARE_30_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_COMP_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_RES_LADDER_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_RES_LADDER_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_STG_2_SLICE_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_SPARE_29_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_STG_2_SLICE_CTRL_RST    0x00000000

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_pack(struct cl_chip *chip, u8 ch0_tx_pa_lb_comp_en, u8 ch0_tx_pa_lb_adb_ctrl, u8 ch0_tx_pa_hb_comp_en, u8 ch0_tx_pa_hb_adb_ctrl, u8 ch0_spare31_in, u8 ch0_tx_pa_hb_loopbk_sw_en, u8 ch0_tx_pa_lb_loopbk_sw_en, u8 ch0_rx_lna_loopbk_sw_en, u8 ch0_tx_pa_lb_comp, u8 ch0_spare30_in, u8 ch0_tx_pa_hb_comp, u8 ch0_tx_pa_lb_res_ladder_en, u8 ch0_tx_pa_hb_res_ladder_en, u8 ch0_tx_pa_lb_stg2_slice_ctrl, u8 ch0_spare29_in, u8 ch0_tx_pa_hb_stg2_slice_ctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_comp_en << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_adb_ctrl << 23) & ~((u32)0x03800000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_comp_en << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_adb_ctrl << 19) & ~((u32)0x00380000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare31_in << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_loopbk_sw_en << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_loopbk_sw_en << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_loopbk_sw_en << 15) & ~((u32)0x00008000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_comp << 13) & ~((u32)0x00006000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare30_in << 11) & ~((u32)0x00001800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_comp << 9) & ~((u32)0x00000600)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_res_ladder_en << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_res_ladder_en << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_lb_stg2_slice_ctrl << 4) & ~((u32)0x00000070)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_spare29_in << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_tx_pa_hb_stg2_slice_ctrl << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, ((u32)ch0_tx_pa_lb_comp_en << 26) | ((u32)ch0_tx_pa_lb_adb_ctrl << 23) | ((u32)ch0_tx_pa_hb_comp_en << 22) | ((u32)ch0_tx_pa_hb_adb_ctrl << 19) | ((u32)ch0_spare31_in << 18) | ((u32)ch0_tx_pa_hb_loopbk_sw_en << 17) | ((u32)ch0_tx_pa_lb_loopbk_sw_en << 16) | ((u32)ch0_rx_lna_loopbk_sw_en << 15) | ((u32)ch0_tx_pa_lb_comp << 13) | ((u32)ch0_spare30_in << 11) | ((u32)ch0_tx_pa_hb_comp << 9) | ((u32)ch0_tx_pa_lb_res_ladder_en << 8) | ((u32)ch0_tx_pa_hb_res_ladder_en << 7) | ((u32)ch0_tx_pa_lb_stg2_slice_ctrl << 4) | ((u32)ch0_spare29_in << 3) | ((u32)ch0_tx_pa_hb_stg2_slice_ctrl << 0));
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_unpack(struct cl_chip *chip, u8 *ch0_tx_pa_lb_comp_en, u8 *ch0_tx_pa_lb_adb_ctrl, u8 *ch0_tx_pa_hb_comp_en, u8 *ch0_tx_pa_hb_adb_ctrl, u8 *ch0_spare31_in, u8 *ch0_tx_pa_hb_loopbk_sw_en, u8 *ch0_tx_pa_lb_loopbk_sw_en, u8 *ch0_rx_lna_loopbk_sw_en, u8 *ch0_tx_pa_lb_comp, u8 *ch0_spare30_in, u8 *ch0_tx_pa_hb_comp, u8 *ch0_tx_pa_lb_res_ladder_en, u8 *ch0_tx_pa_hb_res_ladder_en, u8 *ch0_tx_pa_lb_stg2_slice_ctrl, u8 *ch0_spare29_in, u8 *ch0_tx_pa_hb_stg2_slice_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	*ch0_tx_pa_lb_comp_en = (local_val & ((u32)0x04000000)) >> 26;
	*ch0_tx_pa_lb_adb_ctrl = (local_val & ((u32)0x03800000)) >> 23;
	*ch0_tx_pa_hb_comp_en = (local_val & ((u32)0x00400000)) >> 22;
	*ch0_tx_pa_hb_adb_ctrl = (local_val & ((u32)0x00380000)) >> 19;
	*ch0_spare31_in = (local_val & ((u32)0x00040000)) >> 18;
	*ch0_tx_pa_hb_loopbk_sw_en = (local_val & ((u32)0x00020000)) >> 17;
	*ch0_tx_pa_lb_loopbk_sw_en = (local_val & ((u32)0x00010000)) >> 16;
	*ch0_rx_lna_loopbk_sw_en = (local_val & ((u32)0x00008000)) >> 15;
	*ch0_tx_pa_lb_comp = (local_val & ((u32)0x00006000)) >> 13;
	*ch0_spare30_in = (local_val & ((u32)0x00001800)) >> 11;
	*ch0_tx_pa_hb_comp = (local_val & ((u32)0x00000600)) >> 9;
	*ch0_tx_pa_lb_res_ladder_en = (local_val & ((u32)0x00000100)) >> 8;
	*ch0_tx_pa_hb_res_ladder_en = (local_val & ((u32)0x00000080)) >> 7;
	*ch0_tx_pa_lb_stg2_slice_ctrl = (local_val & ((u32)0x00000070)) >> 4;
	*ch0_spare29_in = (local_val & ((u32)0x00000008)) >> 3;
	*ch0_tx_pa_hb_stg2_slice_ctrl = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_lb_comp_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_lb_comp_en_setf(struct cl_chip *chip, u8 ch0txpalbcompen)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbcompen << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR) & ~((u32)0x04000000)) | ((u32)ch0txpalbcompen << 26));
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_COMP_EN .addr_index = 0x00000175, .size_minus_1 = (1 - 1), .shift = 26

static inline u8 rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_lb_adb_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x03800000)) >> 23);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_lb_adb_ctrl_setf(struct cl_chip *chip, u8 ch0txpalbadbctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbadbctrl << 23) & ~((u32)0x03800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR) & ~((u32)0x03800000)) | ((u32)ch0txpalbadbctrl << 23));
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_ADB_CTRL .addr_index = 0x00000175, .size_minus_1 = (3 - 1), .shift = 23

static inline u8 rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_hb_comp_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_hb_comp_en_setf(struct cl_chip *chip, u8 ch0txpahbcompen)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbcompen << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR) & ~((u32)0x00400000)) | ((u32)ch0txpahbcompen << 22));
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_COMP_EN .addr_index = 0x00000175, .size_minus_1 = (1 - 1), .shift = 22

static inline u8 rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_hb_adb_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00380000)) >> 19);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_hb_adb_ctrl_setf(struct cl_chip *chip, u8 ch0txpahbadbctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbadbctrl << 19) & ~((u32)0x00380000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR) & ~((u32)0x00380000)) | ((u32)ch0txpahbadbctrl << 19));
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_ADB_CTRL .addr_index = 0x00000175, .size_minus_1 = (3 - 1), .shift = 19

static inline u8 rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_spare_31_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_spare_31_in_setf(struct cl_chip *chip, u8 ch0spare31in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare31in << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR) & ~((u32)0x00040000)) | ((u32)ch0spare31in << 18));
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_SPARE_31_IN .addr_index = 0x00000175, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_hb_loopbk_sw_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_hb_loopbk_sw_en_setf(struct cl_chip *chip, u8 ch0txpahbloopbkswen)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbloopbkswen << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR) & ~((u32)0x00020000)) | ((u32)ch0txpahbloopbkswen << 17));
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_LOOPBK_SW_EN .addr_index = 0x00000175, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_lb_loopbk_sw_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_lb_loopbk_sw_en_setf(struct cl_chip *chip, u8 ch0txpalbloopbkswen)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbloopbkswen << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR) & ~((u32)0x00010000)) | ((u32)ch0txpalbloopbkswen << 16));
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_LOOPBK_SW_EN .addr_index = 0x00000175, .size_minus_1 = (1 - 1), .shift = 16

static inline u8 rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_rx_lna_loopbk_sw_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_rx_lna_loopbk_sw_en_setf(struct cl_chip *chip, u8 ch0rxlnaloopbkswen)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnaloopbkswen << 15) & ~((u32)0x00008000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR) & ~((u32)0x00008000)) | ((u32)ch0rxlnaloopbkswen << 15));
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_RX_LNA_LOOPBK_SW_EN .addr_index = 0x00000175, .size_minus_1 = (1 - 1), .shift = 15

static inline u8 rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_lb_comp_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00006000)) >> 13);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_lb_comp_setf(struct cl_chip *chip, u8 ch0txpalbcomp)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbcomp << 13) & ~((u32)0x00006000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR) & ~((u32)0x00006000)) | ((u32)ch0txpalbcomp << 13));
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_COMP .addr_index = 0x00000175, .size_minus_1 = (2 - 1), .shift = 13

static inline u8 rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_spare_30_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00001800)) >> 11);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_spare_30_in_setf(struct cl_chip *chip, u8 ch0spare30in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare30in << 11) & ~((u32)0x00001800)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR) & ~((u32)0x00001800)) | ((u32)ch0spare30in << 11));
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_SPARE_30_IN .addr_index = 0x00000175, .size_minus_1 = (2 - 1), .shift = 11

static inline u8 rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_hb_comp_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000600)) >> 9);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_hb_comp_setf(struct cl_chip *chip, u8 ch0txpahbcomp)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbcomp << 9) & ~((u32)0x00000600)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR) & ~((u32)0x00000600)) | ((u32)ch0txpahbcomp << 9));
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_COMP .addr_index = 0x00000175, .size_minus_1 = (2 - 1), .shift = 9

static inline u8 rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_lb_res_ladder_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_lb_res_ladder_en_setf(struct cl_chip *chip, u8 ch0txpalbresladderen)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbresladderen << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR) & ~((u32)0x00000100)) | ((u32)ch0txpalbresladderen << 8));
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_RES_LADDER_EN .addr_index = 0x00000175, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_hb_res_ladder_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_hb_res_ladder_en_setf(struct cl_chip *chip, u8 ch0txpahbresladderen)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbresladderen << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR) & ~((u32)0x00000080)) | ((u32)ch0txpahbresladderen << 7));
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_RES_LADDER_EN .addr_index = 0x00000175, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_lb_stg_2_slice_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000070)) >> 4);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_lb_stg_2_slice_ctrl_setf(struct cl_chip *chip, u8 ch0txpalbstg2slicectrl)
{
	ASSERT_ERR_CHIP((((u32)ch0txpalbstg2slicectrl << 4) & ~((u32)0x00000070)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR) & ~((u32)0x00000070)) | ((u32)ch0txpalbstg2slicectrl << 4));
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_LB_STG_2_SLICE_CTRL .addr_index = 0x00000175, .size_minus_1 = (3 - 1), .shift = 4

static inline u8 rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_spare_29_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_spare_29_in_setf(struct cl_chip *chip, u8 ch0spare29in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare29in << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR) & ~((u32)0x00000008)) | ((u32)ch0spare29in << 3));
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_SPARE_29_IN .addr_index = 0x00000175, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_hb_stg_2_slice_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void rfic_regs_rf_fem_0_pa_ctrl_0_ch_0_tx_pa_hb_stg_2_slice_ctrl_setf(struct cl_chip *chip, u8 ch0txpahbstg2slicectrl)
{
	ASSERT_ERR_CHIP((((u32)ch0txpahbstg2slicectrl << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_PA_CTRL_0_ADDR) & ~((u32)0x00000007)) | ((u32)ch0txpahbstg2slicectrl << 0));
}

#define RFIC_REGS_RF_FEM_0_PA_CTRL_0_CH_0_TX_PA_HB_STG_2_SLICE_CTRL .addr_index = 0x00000175, .size_minus_1 = (3 - 1), .shift = 0

/**
 * @brief RF_FEM_0_LNA_ST_2_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    CH0_rx_lna_st2_sel_rxrf_ptat 00000000
 *    30    CH0_rx_lna_st2_bias_en    00000000
 *    29    CH0_rx_lna_st2_opamp_bias_sel 00000000
 *    28:27 CH0_rx_lna_st2_vdd10sel   0x00000000
 *    26:25 CH0_rx_lna_st2_vcurstr    0x00000000
 *    24:21 CH0_rx_lna_st2_vcasc      0x00000000
 *    20    CH0_rx_lna_st2_ldo14_en   00000000
 *    19    CH0_rx_lna_st2_ldo10_en   00000000
 *    18:15 CH0_rx_lna_st2_deq_res    0x00000000
 *    14:11 CH0_rx_lna_st2_cur_ctrl   0x00000000
 *    10:07 CH0_rx_lna_st2_cb_sec     0x00000000
 *    06:05 CH0_rx_lna_st2_cb_pr_coarse 0x00000000
 *    04:01 CH0_rx_lna_st2_cb_pr      0x00000000
 *    00    CH0_rx_lna_st2_en         00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005D8)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_OFFSET      0x000005D8
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_INDEX       0x00000176
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_0_lna_st_2_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR, value);
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0 .addr_index = 0x00000176, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_SEL_RXRF_PTAT_BIT    ((u32)0x80000000)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_SEL_RXRF_PTAT_POS    31
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_BIAS_EN_BIT    ((u32)0x40000000)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_BIAS_EN_POS    30
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_OPAMP_BIAS_SEL_BIT    ((u32)0x20000000)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_OPAMP_BIAS_SEL_POS    29
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_VDD_10_SEL_MASK    ((u32)0x18000000)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_VDD_10_SEL_LSB    27
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_VDD_10_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_VCURSTR_MASK    ((u32)0x06000000)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_VCURSTR_LSB    25
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_VCURSTR_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_VCASC_MASK    ((u32)0x01E00000)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_VCASC_LSB    21
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_VCASC_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_LDO_14_EN_BIT    ((u32)0x00100000)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_LDO_14_EN_POS    20
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_LDO_10_EN_BIT    ((u32)0x00080000)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_LDO_10_EN_POS    19
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_DEQ_RES_MASK    ((u32)0x00078000)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_DEQ_RES_LSB    15
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_DEQ_RES_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CUR_CTRL_MASK    ((u32)0x00007800)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CUR_CTRL_LSB    11
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CUR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CB_SEC_MASK    ((u32)0x00000780)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CB_SEC_LSB    7
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CB_SEC_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CB_PR_COARSE_MASK    ((u32)0x00000060)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CB_PR_COARSE_LSB    5
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CB_PR_COARSE_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CB_PR_MASK    ((u32)0x0000001E)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CB_PR_LSB    1
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CB_PR_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_EN_POS    0

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_SEL_RXRF_PTAT_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_BIAS_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_OPAMP_BIAS_SEL_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_VDD_10_SEL_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_VCURSTR_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_VCASC_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_LDO_14_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_LDO_10_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_DEQ_RES_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CUR_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CB_SEC_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CB_PR_COARSE_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CB_PR_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_EN_RST    0x00000000

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_pack(struct cl_chip *chip, u8 ch0_rx_lna_st2_sel_rxrf_ptat, u8 ch0_rx_lna_st2_bias_en, u8 ch0_rx_lna_st2_opamp_bias_sel, u8 ch0_rx_lna_st2_vdd10sel, u8 ch0_rx_lna_st2_vcurstr, u8 ch0_rx_lna_st2_vcasc, u8 ch0_rx_lna_st2_ldo14_en, u8 ch0_rx_lna_st2_ldo10_en, u8 ch0_rx_lna_st2_deq_res, u8 ch0_rx_lna_st2_cur_ctrl, u8 ch0_rx_lna_st2_cb_sec, u8 ch0_rx_lna_st2_cb_pr_coarse, u8 ch0_rx_lna_st2_cb_pr, u8 ch0_rx_lna_st2_en)
{
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st2_sel_rxrf_ptat << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st2_bias_en << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st2_opamp_bias_sel << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st2_vdd10sel << 27) & ~((u32)0x18000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st2_vcurstr << 25) & ~((u32)0x06000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st2_vcasc << 21) & ~((u32)0x01E00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st2_ldo14_en << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st2_ldo10_en << 19) & ~((u32)0x00080000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st2_deq_res << 15) & ~((u32)0x00078000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st2_cur_ctrl << 11) & ~((u32)0x00007800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st2_cb_sec << 7) & ~((u32)0x00000780)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st2_cb_pr_coarse << 5) & ~((u32)0x00000060)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st2_cb_pr << 1) & ~((u32)0x0000001E)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st2_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR, ((u32)ch0_rx_lna_st2_sel_rxrf_ptat << 31) | ((u32)ch0_rx_lna_st2_bias_en << 30) | ((u32)ch0_rx_lna_st2_opamp_bias_sel << 29) | ((u32)ch0_rx_lna_st2_vdd10sel << 27) | ((u32)ch0_rx_lna_st2_vcurstr << 25) | ((u32)ch0_rx_lna_st2_vcasc << 21) | ((u32)ch0_rx_lna_st2_ldo14_en << 20) | ((u32)ch0_rx_lna_st2_ldo10_en << 19) | ((u32)ch0_rx_lna_st2_deq_res << 15) | ((u32)ch0_rx_lna_st2_cur_ctrl << 11) | ((u32)ch0_rx_lna_st2_cb_sec << 7) | ((u32)ch0_rx_lna_st2_cb_pr_coarse << 5) | ((u32)ch0_rx_lna_st2_cb_pr << 1) | ((u32)ch0_rx_lna_st2_en << 0));
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_unpack(struct cl_chip *chip, u8 *ch0_rx_lna_st2_sel_rxrf_ptat, u8 *ch0_rx_lna_st2_bias_en, u8 *ch0_rx_lna_st2_opamp_bias_sel, u8 *ch0_rx_lna_st2_vdd10sel, u8 *ch0_rx_lna_st2_vcurstr, u8 *ch0_rx_lna_st2_vcasc, u8 *ch0_rx_lna_st2_ldo14_en, u8 *ch0_rx_lna_st2_ldo10_en, u8 *ch0_rx_lna_st2_deq_res, u8 *ch0_rx_lna_st2_cur_ctrl, u8 *ch0_rx_lna_st2_cb_sec, u8 *ch0_rx_lna_st2_cb_pr_coarse, u8 *ch0_rx_lna_st2_cb_pr, u8 *ch0_rx_lna_st2_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR);

	*ch0_rx_lna_st2_sel_rxrf_ptat = (local_val & ((u32)0x80000000)) >> 31;
	*ch0_rx_lna_st2_bias_en = (local_val & ((u32)0x40000000)) >> 30;
	*ch0_rx_lna_st2_opamp_bias_sel = (local_val & ((u32)0x20000000)) >> 29;
	*ch0_rx_lna_st2_vdd10sel = (local_val & ((u32)0x18000000)) >> 27;
	*ch0_rx_lna_st2_vcurstr = (local_val & ((u32)0x06000000)) >> 25;
	*ch0_rx_lna_st2_vcasc = (local_val & ((u32)0x01E00000)) >> 21;
	*ch0_rx_lna_st2_ldo14_en = (local_val & ((u32)0x00100000)) >> 20;
	*ch0_rx_lna_st2_ldo10_en = (local_val & ((u32)0x00080000)) >> 19;
	*ch0_rx_lna_st2_deq_res = (local_val & ((u32)0x00078000)) >> 15;
	*ch0_rx_lna_st2_cur_ctrl = (local_val & ((u32)0x00007800)) >> 11;
	*ch0_rx_lna_st2_cb_sec = (local_val & ((u32)0x00000780)) >> 7;
	*ch0_rx_lna_st2_cb_pr_coarse = (local_val & ((u32)0x00000060)) >> 5;
	*ch0_rx_lna_st2_cb_pr = (local_val & ((u32)0x0000001E)) >> 1;
	*ch0_rx_lna_st2_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_sel_rxrf_ptat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_sel_rxrf_ptat_setf(struct cl_chip *chip, u8 ch0rxlnast2selrxrfptat)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast2selrxrfptat << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x80000000)) | ((u32)ch0rxlnast2selrxrfptat << 31));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_SEL_RXRF_PTAT .addr_index = 0x00000176, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_bias_en_setf(struct cl_chip *chip, u8 ch0rxlnast2biasen)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast2biasen << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x40000000)) | ((u32)ch0rxlnast2biasen << 30));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_BIAS_EN .addr_index = 0x00000176, .size_minus_1 = (1 - 1), .shift = 30

static inline u8 rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_opamp_bias_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_opamp_bias_sel_setf(struct cl_chip *chip, u8 ch0rxlnast2opampbiassel)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast2opampbiassel << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x20000000)) | ((u32)ch0rxlnast2opampbiassel << 29));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_OPAMP_BIAS_SEL .addr_index = 0x00000176, .size_minus_1 = (1 - 1), .shift = 29

static inline u8 rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_vdd_10_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x18000000)) >> 27);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_vdd_10_sel_setf(struct cl_chip *chip, u8 ch0rxlnast2vdd10sel)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast2vdd10sel << 27) & ~((u32)0x18000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x18000000)) | ((u32)ch0rxlnast2vdd10sel << 27));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_VDD_10_SEL .addr_index = 0x00000176, .size_minus_1 = (2 - 1), .shift = 27

static inline u8 rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_vcurstr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x06000000)) >> 25);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_vcurstr_setf(struct cl_chip *chip, u8 ch0rxlnast2vcurstr)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast2vcurstr << 25) & ~((u32)0x06000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x06000000)) | ((u32)ch0rxlnast2vcurstr << 25));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_VCURSTR .addr_index = 0x00000176, .size_minus_1 = (2 - 1), .shift = 25

static inline u8 rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_vcasc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x01E00000)) >> 21);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_vcasc_setf(struct cl_chip *chip, u8 ch0rxlnast2vcasc)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast2vcasc << 21) & ~((u32)0x01E00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x01E00000)) | ((u32)ch0rxlnast2vcasc << 21));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_VCASC .addr_index = 0x00000176, .size_minus_1 = (4 - 1), .shift = 21

static inline u8 rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_ldo_14_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_ldo_14_en_setf(struct cl_chip *chip, u8 ch0rxlnast2ldo14en)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast2ldo14en << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x00100000)) | ((u32)ch0rxlnast2ldo14en << 20));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_LDO_14_EN .addr_index = 0x00000176, .size_minus_1 = (1 - 1), .shift = 20

static inline u8 rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_ldo_10_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_ldo_10_en_setf(struct cl_chip *chip, u8 ch0rxlnast2ldo10en)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast2ldo10en << 19) & ~((u32)0x00080000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x00080000)) | ((u32)ch0rxlnast2ldo10en << 19));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_LDO_10_EN .addr_index = 0x00000176, .size_minus_1 = (1 - 1), .shift = 19

static inline u8 rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_deq_res_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00078000)) >> 15);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_deq_res_setf(struct cl_chip *chip, u8 ch0rxlnast2deqres)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast2deqres << 15) & ~((u32)0x00078000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x00078000)) | ((u32)ch0rxlnast2deqres << 15));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_DEQ_RES .addr_index = 0x00000176, .size_minus_1 = (4 - 1), .shift = 15

static inline u8 rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_cur_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00007800)) >> 11);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_cur_ctrl_setf(struct cl_chip *chip, u8 ch0rxlnast2curctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast2curctrl << 11) & ~((u32)0x00007800)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x00007800)) | ((u32)ch0rxlnast2curctrl << 11));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CUR_CTRL .addr_index = 0x00000176, .size_minus_1 = (4 - 1), .shift = 11

static inline u8 rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_cb_sec_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000780)) >> 7);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_cb_sec_setf(struct cl_chip *chip, u8 ch0rxlnast2cbsec)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast2cbsec << 7) & ~((u32)0x00000780)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x00000780)) | ((u32)ch0rxlnast2cbsec << 7));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CB_SEC .addr_index = 0x00000176, .size_minus_1 = (4 - 1), .shift = 7

static inline u8 rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_cb_pr_coarse_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000060)) >> 5);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_cb_pr_coarse_setf(struct cl_chip *chip, u8 ch0rxlnast2cbprcoarse)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast2cbprcoarse << 5) & ~((u32)0x00000060)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x00000060)) | ((u32)ch0rxlnast2cbprcoarse << 5));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CB_PR_COARSE .addr_index = 0x00000176, .size_minus_1 = (2 - 1), .shift = 5

static inline u8 rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_cb_pr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000001E)) >> 1);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_cb_pr_setf(struct cl_chip *chip, u8 ch0rxlnast2cbpr)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast2cbpr << 1) & ~((u32)0x0000001E)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x0000001E)) | ((u32)ch0rxlnast2cbpr << 1));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_CB_PR .addr_index = 0x00000176, .size_minus_1 = (4 - 1), .shift = 1

static inline u8 rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_0_ch_0_rx_lna_st_2_en_setf(struct cl_chip *chip, u8 ch0rxlnast2en)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast2en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)ch0rxlnast2en << 0));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_0_CH_0_RX_LNA_ST_2_EN .addr_index = 0x00000176, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief RF_FEM_0_LNA_ST_2_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:09 CH0_spare32_in            0x00000000
 *    08:05 CH0_rx_lna_st2_cgs_ctrl   0x00000000
 *    04:00 CH0_rx_lna_st2_vbody_ctrl 0x00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005DC)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_OFFSET      0x000005DC
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_INDEX       0x00000177
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_0_lna_st_2_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_ADDR);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_ADDR, value);
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1 .addr_index = 0x00000177, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_CH_0_SPARE_32_IN_MASK    ((u32)0xFFFFFE00)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_CH_0_SPARE_32_IN_LSB    9
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_CH_0_SPARE_32_IN_WIDTH    ((u32)0x00000017)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_CH_0_RX_LNA_ST_2_CGS_CTRL_MASK    ((u32)0x000001E0)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_CH_0_RX_LNA_ST_2_CGS_CTRL_LSB    5
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_CH_0_RX_LNA_ST_2_CGS_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_CH_0_RX_LNA_ST_2_VBODY_CTRL_MASK    ((u32)0x0000001F)
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_CH_0_RX_LNA_ST_2_VBODY_CTRL_LSB    0
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_CH_0_RX_LNA_ST_2_VBODY_CTRL_WIDTH    ((u32)0x00000005)

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_CH_0_SPARE_32_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_CH_0_RX_LNA_ST_2_CGS_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_CH_0_RX_LNA_ST_2_VBODY_CTRL_RST    0x00000000

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_1_pack(struct cl_chip *chip, u32 ch0_spare32_in, u8 ch0_rx_lna_st2_cgs_ctrl, u8 ch0_rx_lna_st2_vbody_ctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0_spare32_in << 9) & ~((u32)0xFFFFFE00)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st2_cgs_ctrl << 5) & ~((u32)0x000001E0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_rx_lna_st2_vbody_ctrl << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_ADDR, ((u32)ch0_spare32_in << 9) | ((u32)ch0_rx_lna_st2_cgs_ctrl << 5) | ((u32)ch0_rx_lna_st2_vbody_ctrl << 0));
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_1_unpack(struct cl_chip *chip, u32 *ch0_spare32_in, u8 *ch0_rx_lna_st2_cgs_ctrl, u8 *ch0_rx_lna_st2_vbody_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_ADDR);

	*ch0_spare32_in = (local_val & ((u32)0xFFFFFE00)) >> 9;
	*ch0_rx_lna_st2_cgs_ctrl = (local_val & ((u32)0x000001E0)) >> 5;
	*ch0_rx_lna_st2_vbody_ctrl = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u32 rfic_regs_rf_fem_0_lna_st_2_ctrl_1_ch_0_spare_32_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_ADDR);

	return (u32)((local_val & ((u32)0xFFFFFE00)) >> 9);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_1_ch_0_spare_32_in_setf(struct cl_chip *chip, u32 ch0spare32in)
{
	ASSERT_ERR_CHIP((((u32)ch0spare32in << 9) & ~((u32)0xFFFFFE00)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_ADDR) & ~((u32)0xFFFFFE00)) | ((u32)ch0spare32in << 9));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_CH_0_SPARE_32_IN .addr_index = 0x00000177, .size_minus_1 = (23 - 1), .shift = 9

static inline u8 rfic_regs_rf_fem_0_lna_st_2_ctrl_1_ch_0_rx_lna_st_2_cgs_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x000001E0)) >> 5);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_1_ch_0_rx_lna_st_2_cgs_ctrl_setf(struct cl_chip *chip, u8 ch0rxlnast2cgsctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast2cgsctrl << 5) & ~((u32)0x000001E0)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_ADDR) & ~((u32)0x000001E0)) | ((u32)ch0rxlnast2cgsctrl << 5));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_CH_0_RX_LNA_ST_2_CGS_CTRL .addr_index = 0x00000177, .size_minus_1 = (4 - 1), .shift = 5

static inline u8 rfic_regs_rf_fem_0_lna_st_2_ctrl_1_ch_0_rx_lna_st_2_vbody_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

static inline void rfic_regs_rf_fem_0_lna_st_2_ctrl_1_ch_0_rx_lna_st_2_vbody_ctrl_setf(struct cl_chip *chip, u8 ch0rxlnast2vbodyctrl)
{
	ASSERT_ERR_CHIP((((u32)ch0rxlnast2vbodyctrl << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_ADDR) & ~((u32)0x0000001F)) | ((u32)ch0rxlnast2vbodyctrl << 0));
}

#define RFIC_REGS_RF_FEM_0_LNA_ST_2_CTRL_1_CH_0_RX_LNA_ST_2_VBODY_CTRL .addr_index = 0x00000177, .size_minus_1 = (5 - 1), .shift = 0

/**
 * @brief CH_0_TX_GAIN_CTRL_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    19:16 CH0_tx_mix_gain           0x00000000
 *    15:08 CH0_tx_pga_gain_ctrl      0x00000000
 *    07:00 CH0_tx_prepa_gain_ctrl    0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005E0)
#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_OFFSET      0x000005E0
#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_INDEX       0x00000178
#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_RESET       0x00000000

static inline u32 rfic_regs_ch_0_tx_gain_ctrl_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_ADDR);
}

#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT .addr_index = 0x00000178, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_CH_0_TX_MIX_GAIN_MASK    ((u32)0x000F0000)
#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_CH_0_TX_MIX_GAIN_LSB    16
#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_CH_0_TX_MIX_GAIN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_CH_0_TX_PGA_GAIN_CTRL_MASK    ((u32)0x0000FF00)
#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_CH_0_TX_PGA_GAIN_CTRL_LSB    8
#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_CH_0_TX_PGA_GAIN_CTRL_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_CH_0_TX_PREPA_GAIN_CTRL_MASK    ((u32)0x000000FF)
#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_CH_0_TX_PREPA_GAIN_CTRL_LSB    0
#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_CH_0_TX_PREPA_GAIN_CTRL_WIDTH    ((u32)0x00000008)

#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_CH_0_TX_MIX_GAIN_RST    0x00000000
#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_CH_0_TX_PGA_GAIN_CTRL_RST    0x00000000
#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_CH_0_TX_PREPA_GAIN_CTRL_RST    0x00000000

static inline void rfic_regs_ch_0_tx_gain_ctrl_out_unpack(struct cl_chip *chip, u8 *ch0_tx_mix_gain, u8 *ch0_tx_pga_gain_ctrl, u8 *ch0_tx_prepa_gain_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_ADDR);

	*ch0_tx_mix_gain = (local_val & ((u32)0x000F0000)) >> 16;
	*ch0_tx_pga_gain_ctrl = (local_val & ((u32)0x0000FF00)) >> 8;
	*ch0_tx_prepa_gain_ctrl = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 rfic_regs_ch_0_tx_gain_ctrl_out_ch_0_tx_mix_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x000F0000)) >> 16);
}

#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_CH_0_TX_MIX_GAIN .addr_index = 0x00000178, .size_minus_1 = (4 - 1), .shift = 16

static inline u8 rfic_regs_ch_0_tx_gain_ctrl_out_ch_0_tx_pga_gain_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_CH_0_TX_PGA_GAIN_CTRL .addr_index = 0x00000178, .size_minus_1 = (8 - 1), .shift = 8

static inline u8 rfic_regs_ch_0_tx_gain_ctrl_out_ch_0_tx_prepa_gain_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

#define RFIC_REGS_CH_0_TX_GAIN_CTRL_OUT_CH_0_TX_PREPA_GAIN_CTRL .addr_index = 0x00000178, .size_minus_1 = (8 - 1), .shift = 0

/**
 * @brief CH_0_RX_GAIN_CTRL_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 CH0_rx_lna_st2_deq_res    0x00000000
 *    11:08 CH0_rx_lna_st2_vcasc      0x00000000
 *    07:04 CH0_rx_lna_st1_deq_res    0x00000000
 *    03:00 CH0_rx_lna_st1_vcasc      0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000005E4)
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_OFFSET      0x000005E4
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_INDEX       0x00000179
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_RESET       0x00000000

static inline u32 rfic_regs_ch_0_rx_gain_ctrl_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_ADDR);
}

#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT .addr_index = 0x00000179, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_2_DEQ_RES_MASK    ((u32)0x0000F000)
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_2_DEQ_RES_LSB    12
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_2_DEQ_RES_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_2_VCASC_MASK    ((u32)0x00000F00)
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_2_VCASC_LSB    8
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_2_VCASC_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_1_DEQ_RES_MASK    ((u32)0x000000F0)
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_1_DEQ_RES_LSB    4
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_1_DEQ_RES_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_1_VCASC_MASK    ((u32)0x0000000F)
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_1_VCASC_LSB    0
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_1_VCASC_WIDTH    ((u32)0x00000004)

#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_2_DEQ_RES_RST    0x00000000
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_2_VCASC_RST    0x00000000
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_1_DEQ_RES_RST    0x00000000
#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_1_VCASC_RST    0x00000000

static inline void rfic_regs_ch_0_rx_gain_ctrl_out_unpack(struct cl_chip *chip, u8 *ch0_rx_lna_st2_deq_res, u8 *ch0_rx_lna_st2_vcasc, u8 *ch0_rx_lna_st1_deq_res, u8 *ch0_rx_lna_st1_vcasc)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_ADDR);

	*ch0_rx_lna_st2_deq_res = (local_val & ((u32)0x0000F000)) >> 12;
	*ch0_rx_lna_st2_vcasc = (local_val & ((u32)0x00000F00)) >> 8;
	*ch0_rx_lna_st1_deq_res = (local_val & ((u32)0x000000F0)) >> 4;
	*ch0_rx_lna_st1_vcasc = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 rfic_regs_ch_0_rx_gain_ctrl_out_ch_0_rx_lna_st_2_deq_res_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x0000F000)) >> 12);
}

#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_2_DEQ_RES .addr_index = 0x00000179, .size_minus_1 = (4 - 1), .shift = 12

static inline u8 rfic_regs_ch_0_rx_gain_ctrl_out_ch_0_rx_lna_st_2_vcasc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000F00)) >> 8);
}

#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_2_VCASC .addr_index = 0x00000179, .size_minus_1 = (4 - 1), .shift = 8

static inline u8 rfic_regs_ch_0_rx_gain_ctrl_out_ch_0_rx_lna_st_1_deq_res_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x000000F0)) >> 4);
}

#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_1_DEQ_RES .addr_index = 0x00000179, .size_minus_1 = (4 - 1), .shift = 4

static inline u8 rfic_regs_ch_0_rx_gain_ctrl_out_ch_0_rx_lna_st_1_vcasc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

#define RFIC_REGS_CH_0_RX_GAIN_CTRL_OUT_CH_0_RX_LNA_ST_1_VCASC .addr_index = 0x00000179, .size_minus_1 = (4 - 1), .shift = 0

/**
 * @brief CH_1_GEN_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    CH1_trsw_en               00000000
 *    30    CH1_gain_lut_bypass       00000000
 *    29    CH1_debug_mode            00000000
 *    28    CH1_bb_exten              00000000
 *    27:25 CH1_bb_bw                 0x00000007
 *    24:20 CH1_bb_gc                 0x00000000
 *    19:16 CH1_bb_bias_rcal          0x00000000
 *    15:13 CH1_bb_int_vcm_ctrl       0x00000000
 *    12    CH1_bb_dcoc_clk           00000000
 *    11    CH1_spare1_in             00000000
 *    10    CH1_tx_gain_lut_write_en  00000000
 *    09    CH1_rx_gain_lut_write_en  00000000
 *    08    CH1_bb_bias_en            00000000
 *    07    CH1_bb_last_stage_LDO_1v_en 00000000
 *    06:05 CH1_bb_dac_bias_sel       0x00000000
 *    04:02 CH1_dcoc_dac_range        0x00000000
 *    01:00 CH1_tx_mixer_vcm_ctrl     0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_GEN_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000600)
#define RFIC_REGS_CH_1_GEN_CTRL_0_OFFSET      0x00000600
#define RFIC_REGS_CH_1_GEN_CTRL_0_INDEX       0x00000180
#define RFIC_REGS_CH_1_GEN_CTRL_0_RESET       0x0E000000

static inline u32 rfic_regs_ch_1_gen_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, value);
}

#define RFIC_REGS_CH_1_GEN_CTRL_0 .addr_index = 0x00000180, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_TRSW_EN_BIT    ((u32)0x80000000)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_TRSW_EN_POS    31
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_GAIN_LUT_BYPASS_BIT    ((u32)0x40000000)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_GAIN_LUT_BYPASS_POS    30
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_DEBUG_MODE_BIT    ((u32)0x20000000)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_DEBUG_MODE_POS    29
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_EXTEN_BIT    ((u32)0x10000000)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_EXTEN_POS    28
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_BW_MASK    ((u32)0x0E000000)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_BW_LSB    25
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_BW_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_GC_MASK    ((u32)0x01F00000)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_GC_LSB    20
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_GC_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_BIAS_RCAL_MASK    ((u32)0x000F0000)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_BIAS_RCAL_LSB    16
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_BIAS_RCAL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_INT_VCM_CTRL_MASK    ((u32)0x0000E000)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_INT_VCM_CTRL_LSB    13
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_INT_VCM_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_DCOC_CLK_BIT    ((u32)0x00001000)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_DCOC_CLK_POS    12
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_SPARE_1_IN_BIT    ((u32)0x00000800)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_SPARE_1_IN_POS    11
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_TX_GAIN_LUT_WRITE_EN_BIT    ((u32)0x00000400)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_TX_GAIN_LUT_WRITE_EN_POS    10
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_RX_GAIN_LUT_WRITE_EN_BIT    ((u32)0x00000200)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_RX_GAIN_LUT_WRITE_EN_POS    9
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_BIAS_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_BIAS_EN_POS    8
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_LAST_STAGE_LDO_1_V_EN_BIT    ((u32)0x00000080)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_LAST_STAGE_LDO_1_V_EN_POS    7
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_DAC_BIAS_SEL_MASK    ((u32)0x00000060)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_DAC_BIAS_SEL_LSB    5
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_DAC_BIAS_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_DCOC_DAC_RANGE_MASK    ((u32)0x0000001C)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_DCOC_DAC_RANGE_LSB    2
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_DCOC_DAC_RANGE_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_TX_MIXER_VCM_CTRL_MASK    ((u32)0x00000003)
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_TX_MIXER_VCM_CTRL_LSB    0
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_TX_MIXER_VCM_CTRL_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_TRSW_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_GAIN_LUT_BYPASS_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_DEBUG_MODE_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_EXTEN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_BW_RST    0x00000007
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_GC_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_BIAS_RCAL_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_INT_VCM_CTRL_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_DCOC_CLK_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_SPARE_1_IN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_TX_GAIN_LUT_WRITE_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_RX_GAIN_LUT_WRITE_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_BIAS_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_LAST_STAGE_LDO_1_V_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_DAC_BIAS_SEL_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_DCOC_DAC_RANGE_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_TX_MIXER_VCM_CTRL_RST    0x00000000

static inline void rfic_regs_ch_1_gen_ctrl_0_pack(struct cl_chip *chip, u8 ch1_trsw_en, u8 ch1_gain_lut_bypass, u8 ch1_debug_mode, u8 ch1_bb_exten, u8 ch1_bb_bw, u8 ch1_bb_gc, u8 ch1_bb_bias_rcal, u8 ch1_bb_int_vcm_ctrl, u8 ch1_bb_dcoc_clk, u8 ch1_spare1_in, u8 ch1_tx_gain_lut_write_en, u8 ch1_rx_gain_lut_write_en, u8 ch1_bb_bias_en, u8 ch1_bb_last_stage_ldo_1v_en, u8 ch1_bb_dac_bias_sel, u8 ch1_dcoc_dac_range, u8 ch1_tx_mixer_vcm_ctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1_trsw_en << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_gain_lut_bypass << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_debug_mode << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_bb_exten << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_bb_bw << 25) & ~((u32)0x0E000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_bb_gc << 20) & ~((u32)0x01F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_bb_bias_rcal << 16) & ~((u32)0x000F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_bb_int_vcm_ctrl << 13) & ~((u32)0x0000E000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_bb_dcoc_clk << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare1_in << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_gain_lut_write_en << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_gain_lut_write_en << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_bb_bias_en << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_bb_last_stage_ldo_1v_en << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_bb_dac_bias_sel << 5) & ~((u32)0x00000060)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_dcoc_dac_range << 2) & ~((u32)0x0000001C)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_mixer_vcm_ctrl << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, ((u32)ch1_trsw_en << 31) | ((u32)ch1_gain_lut_bypass << 30) | ((u32)ch1_debug_mode << 29) | ((u32)ch1_bb_exten << 28) | ((u32)ch1_bb_bw << 25) | ((u32)ch1_bb_gc << 20) | ((u32)ch1_bb_bias_rcal << 16) | ((u32)ch1_bb_int_vcm_ctrl << 13) | ((u32)ch1_bb_dcoc_clk << 12) | ((u32)ch1_spare1_in << 11) | ((u32)ch1_tx_gain_lut_write_en << 10) | ((u32)ch1_rx_gain_lut_write_en << 9) | ((u32)ch1_bb_bias_en << 8) | ((u32)ch1_bb_last_stage_ldo_1v_en << 7) | ((u32)ch1_bb_dac_bias_sel << 5) | ((u32)ch1_dcoc_dac_range << 2) | ((u32)ch1_tx_mixer_vcm_ctrl << 0));
}

static inline void rfic_regs_ch_1_gen_ctrl_0_unpack(struct cl_chip *chip, u8 *ch1_trsw_en, u8 *ch1_gain_lut_bypass, u8 *ch1_debug_mode, u8 *ch1_bb_exten, u8 *ch1_bb_bw, u8 *ch1_bb_gc, u8 *ch1_bb_bias_rcal, u8 *ch1_bb_int_vcm_ctrl, u8 *ch1_bb_dcoc_clk, u8 *ch1_spare1_in, u8 *ch1_tx_gain_lut_write_en, u8 *ch1_rx_gain_lut_write_en, u8 *ch1_bb_bias_en, u8 *ch1_bb_last_stage_ldo_1v_en, u8 *ch1_bb_dac_bias_sel, u8 *ch1_dcoc_dac_range, u8 *ch1_tx_mixer_vcm_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	*ch1_trsw_en = (local_val & ((u32)0x80000000)) >> 31;
	*ch1_gain_lut_bypass = (local_val & ((u32)0x40000000)) >> 30;
	*ch1_debug_mode = (local_val & ((u32)0x20000000)) >> 29;
	*ch1_bb_exten = (local_val & ((u32)0x10000000)) >> 28;
	*ch1_bb_bw = (local_val & ((u32)0x0E000000)) >> 25;
	*ch1_bb_gc = (local_val & ((u32)0x01F00000)) >> 20;
	*ch1_bb_bias_rcal = (local_val & ((u32)0x000F0000)) >> 16;
	*ch1_bb_int_vcm_ctrl = (local_val & ((u32)0x0000E000)) >> 13;
	*ch1_bb_dcoc_clk = (local_val & ((u32)0x00001000)) >> 12;
	*ch1_spare1_in = (local_val & ((u32)0x00000800)) >> 11;
	*ch1_tx_gain_lut_write_en = (local_val & ((u32)0x00000400)) >> 10;
	*ch1_rx_gain_lut_write_en = (local_val & ((u32)0x00000200)) >> 9;
	*ch1_bb_bias_en = (local_val & ((u32)0x00000100)) >> 8;
	*ch1_bb_last_stage_ldo_1v_en = (local_val & ((u32)0x00000080)) >> 7;
	*ch1_bb_dac_bias_sel = (local_val & ((u32)0x00000060)) >> 5;
	*ch1_dcoc_dac_range = (local_val & ((u32)0x0000001C)) >> 2;
	*ch1_tx_mixer_vcm_ctrl = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_trsw_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_trsw_en_setf(struct cl_chip *chip, u8 ch1trswen)
{
	ASSERT_ERR_CHIP((((u32)ch1trswen << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x80000000)) | ((u32)ch1trswen << 31));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_TRSW_EN .addr_index = 0x00000180, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_gain_lut_bypass_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_gain_lut_bypass_setf(struct cl_chip *chip, u8 ch1gainlutbypass)
{
	ASSERT_ERR_CHIP((((u32)ch1gainlutbypass << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x40000000)) | ((u32)ch1gainlutbypass << 30));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_GAIN_LUT_BYPASS .addr_index = 0x00000180, .size_minus_1 = (1 - 1), .shift = 30

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_debug_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_debug_mode_setf(struct cl_chip *chip, u8 ch1debugmode)
{
	ASSERT_ERR_CHIP((((u32)ch1debugmode << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x20000000)) | ((u32)ch1debugmode << 29));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_DEBUG_MODE .addr_index = 0x00000180, .size_minus_1 = (1 - 1), .shift = 29

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_exten_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_exten_setf(struct cl_chip *chip, u8 ch1bbexten)
{
	ASSERT_ERR_CHIP((((u32)ch1bbexten << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x10000000)) | ((u32)ch1bbexten << 28));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_EXTEN .addr_index = 0x00000180, .size_minus_1 = (1 - 1), .shift = 28

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_bw_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0E000000)) >> 25);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_bw_setf(struct cl_chip *chip, u8 ch1bbbw)
{
	ASSERT_ERR_CHIP((((u32)ch1bbbw << 25) & ~((u32)0x0E000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x0E000000)) | ((u32)ch1bbbw << 25));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_BW .addr_index = 0x00000180, .size_minus_1 = (3 - 1), .shift = 25

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_gc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x01F00000)) >> 20);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_gc_setf(struct cl_chip *chip, u8 ch1bbgc)
{
	ASSERT_ERR_CHIP((((u32)ch1bbgc << 20) & ~((u32)0x01F00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x01F00000)) | ((u32)ch1bbgc << 20));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_GC .addr_index = 0x00000180, .size_minus_1 = (5 - 1), .shift = 20

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_bias_rcal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x000F0000)) >> 16);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_bias_rcal_setf(struct cl_chip *chip, u8 ch1bbbiasrcal)
{
	ASSERT_ERR_CHIP((((u32)ch1bbbiasrcal << 16) & ~((u32)0x000F0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x000F0000)) | ((u32)ch1bbbiasrcal << 16));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_BIAS_RCAL .addr_index = 0x00000180, .size_minus_1 = (4 - 1), .shift = 16

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_int_vcm_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000E000)) >> 13);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_int_vcm_ctrl_setf(struct cl_chip *chip, u8 ch1bbintvcmctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1bbintvcmctrl << 13) & ~((u32)0x0000E000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x0000E000)) | ((u32)ch1bbintvcmctrl << 13));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_INT_VCM_CTRL .addr_index = 0x00000180, .size_minus_1 = (3 - 1), .shift = 13

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_dcoc_clk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_dcoc_clk_setf(struct cl_chip *chip, u8 ch1bbdcocclk)
{
	ASSERT_ERR_CHIP((((u32)ch1bbdcocclk << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x00001000)) | ((u32)ch1bbdcocclk << 12));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_DCOC_CLK .addr_index = 0x00000180, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_spare_1_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_spare_1_in_setf(struct cl_chip *chip, u8 ch1spare1in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare1in << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x00000800)) | ((u32)ch1spare1in << 11));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_SPARE_1_IN .addr_index = 0x00000180, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_tx_gain_lut_write_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_tx_gain_lut_write_en_setf(struct cl_chip *chip, u8 ch1txgainlutwriteen)
{
	ASSERT_ERR_CHIP((((u32)ch1txgainlutwriteen << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x00000400)) | ((u32)ch1txgainlutwriteen << 10));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_TX_GAIN_LUT_WRITE_EN .addr_index = 0x00000180, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_rx_gain_lut_write_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_rx_gain_lut_write_en_setf(struct cl_chip *chip, u8 ch1rxgainlutwriteen)
{
	ASSERT_ERR_CHIP((((u32)ch1rxgainlutwriteen << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x00000200)) | ((u32)ch1rxgainlutwriteen << 9));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_RX_GAIN_LUT_WRITE_EN .addr_index = 0x00000180, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_bias_en_setf(struct cl_chip *chip, u8 ch1bbbiasen)
{
	ASSERT_ERR_CHIP((((u32)ch1bbbiasen << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x00000100)) | ((u32)ch1bbbiasen << 8));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_BIAS_EN .addr_index = 0x00000180, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_last_stage_ldo_1_v_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_last_stage_ldo_1_v_en_setf(struct cl_chip *chip, u8 ch1bblaststageldo1ven)
{
	ASSERT_ERR_CHIP((((u32)ch1bblaststageldo1ven << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x00000080)) | ((u32)ch1bblaststageldo1ven << 7));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_LAST_STAGE_LDO_1_V_EN .addr_index = 0x00000180, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_dac_bias_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000060)) >> 5);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_bb_dac_bias_sel_setf(struct cl_chip *chip, u8 ch1bbdacbiassel)
{
	ASSERT_ERR_CHIP((((u32)ch1bbdacbiassel << 5) & ~((u32)0x00000060)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x00000060)) | ((u32)ch1bbdacbiassel << 5));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_BB_DAC_BIAS_SEL .addr_index = 0x00000180, .size_minus_1 = (2 - 1), .shift = 5

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_dcoc_dac_range_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000001C)) >> 2);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_dcoc_dac_range_setf(struct cl_chip *chip, u8 ch1dcocdacrange)
{
	ASSERT_ERR_CHIP((((u32)ch1dcocdacrange << 2) & ~((u32)0x0000001C)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x0000001C)) | ((u32)ch1dcocdacrange << 2));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_DCOC_DAC_RANGE .addr_index = 0x00000180, .size_minus_1 = (3 - 1), .shift = 2

static inline u8 rfic_regs_ch_1_gen_ctrl_0_ch_1_tx_mixer_vcm_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_ch_1_gen_ctrl_0_ch_1_tx_mixer_vcm_ctrl_setf(struct cl_chip *chip, u8 ch1txmixervcmctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1txmixervcmctrl << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_0_ADDR) & ~((u32)0x00000003)) | ((u32)ch1txmixervcmctrl << 0));
}

#define RFIC_REGS_CH_1_GEN_CTRL_0_CH_1_TX_MIXER_VCM_CTRL .addr_index = 0x00000180, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief CH_1_GEN_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    CH1_localdiv_rxtxn        00000000
 *    30    CH1_localdiv_sx_sel       00000000
 *    29:22 CH1_spare5_in             0x00000000
 *    21    CH1_localdiv_ldo_en       00000000
 *    20:19 CH1_spare4_in             0x00000000
 *    18    CH1_localdiv_divbuff_en   00000000
 *    17:13 CH1_localdiv_body_ctrl    0x00000000
 *    12:11 CH1_localdiv_vdd10sel     0x00000000
 *    10:09 CH1_localdiv_res          0x00000000
 *    08    CH1_dac_ldo_en            00000000
 *    07:03 CH1_tempsens_bias_ctrl    0x00000007
 *    02    CH1_tempsens_en           00000000
 *    01:00 CH1_spare2_in             0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_GEN_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000604)
#define RFIC_REGS_CH_1_GEN_CTRL_1_OFFSET      0x00000604
#define RFIC_REGS_CH_1_GEN_CTRL_1_INDEX       0x00000181
#define RFIC_REGS_CH_1_GEN_CTRL_1_RESET       0x00000038

static inline u32 rfic_regs_ch_1_gen_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR);
}

static inline void rfic_regs_ch_1_gen_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR, value);
}

#define RFIC_REGS_CH_1_GEN_CTRL_1 .addr_index = 0x00000181, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_RXTXN_BIT    ((u32)0x80000000)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_RXTXN_POS    31
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_SX_SEL_BIT    ((u32)0x40000000)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_SX_SEL_POS    30
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_SPARE_5_IN_MASK    ((u32)0x3FC00000)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_SPARE_5_IN_LSB    22
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_SPARE_5_IN_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_LDO_EN_BIT    ((u32)0x00200000)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_LDO_EN_POS    21
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_SPARE_4_IN_MASK    ((u32)0x00180000)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_SPARE_4_IN_LSB    19
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_SPARE_4_IN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_DIVBUFF_EN_BIT    ((u32)0x00040000)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_DIVBUFF_EN_POS    18
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_BODY_CTRL_MASK    ((u32)0x0003E000)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_BODY_CTRL_LSB    13
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_BODY_CTRL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_VDD_10_SEL_MASK    ((u32)0x00001800)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_VDD_10_SEL_LSB    11
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_VDD_10_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_RES_MASK    ((u32)0x00000600)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_RES_LSB    9
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_RES_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_DAC_LDO_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_DAC_LDO_EN_POS    8
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_TEMPSENS_BIAS_CTRL_MASK    ((u32)0x000000F8)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_TEMPSENS_BIAS_CTRL_LSB    3
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_TEMPSENS_BIAS_CTRL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_TEMPSENS_EN_BIT    ((u32)0x00000004)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_TEMPSENS_EN_POS    2
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_SPARE_2_IN_MASK    ((u32)0x00000003)
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_SPARE_2_IN_LSB    0
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_SPARE_2_IN_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_RXTXN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_SX_SEL_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_SPARE_5_IN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_LDO_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_SPARE_4_IN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_DIVBUFF_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_BODY_CTRL_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_VDD_10_SEL_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_RES_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_DAC_LDO_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_TEMPSENS_BIAS_CTRL_RST    0x00000007
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_TEMPSENS_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_SPARE_2_IN_RST    0x00000000

static inline void rfic_regs_ch_1_gen_ctrl_1_pack(struct cl_chip *chip, u8 ch1_localdiv_rxtxn, u8 ch1_localdiv_sx_sel, u8 ch1_spare5_in, u8 ch1_localdiv_ldo_en, u8 ch1_spare4_in, u8 ch1_localdiv_divbuff_en, u8 ch1_localdiv_body_ctrl, u8 ch1_localdiv_vdd10sel, u8 ch1_localdiv_res, u8 ch1_dac_ldo_en, u8 ch1_tempsens_bias_ctrl, u8 ch1_tempsens_en, u8 ch1_spare2_in)
{
	ASSERT_ERR_CHIP((((u32)ch1_localdiv_rxtxn << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_localdiv_sx_sel << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare5_in << 22) & ~((u32)0x3FC00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_localdiv_ldo_en << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare4_in << 19) & ~((u32)0x00180000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_localdiv_divbuff_en << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_localdiv_body_ctrl << 13) & ~((u32)0x0003E000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_localdiv_vdd10sel << 11) & ~((u32)0x00001800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_localdiv_res << 9) & ~((u32)0x00000600)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_dac_ldo_en << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tempsens_bias_ctrl << 3) & ~((u32)0x000000F8)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tempsens_en << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare2_in << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR, ((u32)ch1_localdiv_rxtxn << 31) | ((u32)ch1_localdiv_sx_sel << 30) | ((u32)ch1_spare5_in << 22) | ((u32)ch1_localdiv_ldo_en << 21) | ((u32)ch1_spare4_in << 19) | ((u32)ch1_localdiv_divbuff_en << 18) | ((u32)ch1_localdiv_body_ctrl << 13) | ((u32)ch1_localdiv_vdd10sel << 11) | ((u32)ch1_localdiv_res << 9) | ((u32)ch1_dac_ldo_en << 8) | ((u32)ch1_tempsens_bias_ctrl << 3) | ((u32)ch1_tempsens_en << 2) | ((u32)ch1_spare2_in << 0));
}

static inline void rfic_regs_ch_1_gen_ctrl_1_unpack(struct cl_chip *chip, u8 *ch1_localdiv_rxtxn, u8 *ch1_localdiv_sx_sel, u8 *ch1_spare5_in, u8 *ch1_localdiv_ldo_en, u8 *ch1_spare4_in, u8 *ch1_localdiv_divbuff_en, u8 *ch1_localdiv_body_ctrl, u8 *ch1_localdiv_vdd10sel, u8 *ch1_localdiv_res, u8 *ch1_dac_ldo_en, u8 *ch1_tempsens_bias_ctrl, u8 *ch1_tempsens_en, u8 *ch1_spare2_in)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR);

	*ch1_localdiv_rxtxn = (local_val & ((u32)0x80000000)) >> 31;
	*ch1_localdiv_sx_sel = (local_val & ((u32)0x40000000)) >> 30;
	*ch1_spare5_in = (local_val & ((u32)0x3FC00000)) >> 22;
	*ch1_localdiv_ldo_en = (local_val & ((u32)0x00200000)) >> 21;
	*ch1_spare4_in = (local_val & ((u32)0x00180000)) >> 19;
	*ch1_localdiv_divbuff_en = (local_val & ((u32)0x00040000)) >> 18;
	*ch1_localdiv_body_ctrl = (local_val & ((u32)0x0003E000)) >> 13;
	*ch1_localdiv_vdd10sel = (local_val & ((u32)0x00001800)) >> 11;
	*ch1_localdiv_res = (local_val & ((u32)0x00000600)) >> 9;
	*ch1_dac_ldo_en = (local_val & ((u32)0x00000100)) >> 8;
	*ch1_tempsens_bias_ctrl = (local_val & ((u32)0x000000F8)) >> 3;
	*ch1_tempsens_en = (local_val & ((u32)0x00000004)) >> 2;
	*ch1_spare2_in = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_ch_1_gen_ctrl_1_ch_1_localdiv_rxtxn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void rfic_regs_ch_1_gen_ctrl_1_ch_1_localdiv_rxtxn_setf(struct cl_chip *chip, u8 ch1localdivrxtxn)
{
	ASSERT_ERR_CHIP((((u32)ch1localdivrxtxn << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR) & ~((u32)0x80000000)) | ((u32)ch1localdivrxtxn << 31));
}

#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_RXTXN .addr_index = 0x00000181, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_ch_1_gen_ctrl_1_ch_1_localdiv_sx_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void rfic_regs_ch_1_gen_ctrl_1_ch_1_localdiv_sx_sel_setf(struct cl_chip *chip, u8 ch1localdivsxsel)
{
	ASSERT_ERR_CHIP((((u32)ch1localdivsxsel << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR) & ~((u32)0x40000000)) | ((u32)ch1localdivsxsel << 30));
}

#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_SX_SEL .addr_index = 0x00000181, .size_minus_1 = (1 - 1), .shift = 30

static inline u8 rfic_regs_ch_1_gen_ctrl_1_ch_1_spare_5_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x3FC00000)) >> 22);
}

static inline void rfic_regs_ch_1_gen_ctrl_1_ch_1_spare_5_in_setf(struct cl_chip *chip, u8 ch1spare5in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare5in << 22) & ~((u32)0x3FC00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR) & ~((u32)0x3FC00000)) | ((u32)ch1spare5in << 22));
}

#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_SPARE_5_IN .addr_index = 0x00000181, .size_minus_1 = (8 - 1), .shift = 22

static inline u8 rfic_regs_ch_1_gen_ctrl_1_ch_1_localdiv_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline void rfic_regs_ch_1_gen_ctrl_1_ch_1_localdiv_ldo_en_setf(struct cl_chip *chip, u8 ch1localdivldoen)
{
	ASSERT_ERR_CHIP((((u32)ch1localdivldoen << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR) & ~((u32)0x00200000)) | ((u32)ch1localdivldoen << 21));
}

#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_LDO_EN .addr_index = 0x00000181, .size_minus_1 = (1 - 1), .shift = 21

static inline u8 rfic_regs_ch_1_gen_ctrl_1_ch_1_spare_4_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00180000)) >> 19);
}

static inline void rfic_regs_ch_1_gen_ctrl_1_ch_1_spare_4_in_setf(struct cl_chip *chip, u8 ch1spare4in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare4in << 19) & ~((u32)0x00180000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR) & ~((u32)0x00180000)) | ((u32)ch1spare4in << 19));
}

#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_SPARE_4_IN .addr_index = 0x00000181, .size_minus_1 = (2 - 1), .shift = 19

static inline u8 rfic_regs_ch_1_gen_ctrl_1_ch_1_localdiv_divbuff_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void rfic_regs_ch_1_gen_ctrl_1_ch_1_localdiv_divbuff_en_setf(struct cl_chip *chip, u8 ch1localdivdivbuffen)
{
	ASSERT_ERR_CHIP((((u32)ch1localdivdivbuffen << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR) & ~((u32)0x00040000)) | ((u32)ch1localdivdivbuffen << 18));
}

#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_DIVBUFF_EN .addr_index = 0x00000181, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_ch_1_gen_ctrl_1_ch_1_localdiv_body_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0003E000)) >> 13);
}

static inline void rfic_regs_ch_1_gen_ctrl_1_ch_1_localdiv_body_ctrl_setf(struct cl_chip *chip, u8 ch1localdivbodyctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1localdivbodyctrl << 13) & ~((u32)0x0003E000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR) & ~((u32)0x0003E000)) | ((u32)ch1localdivbodyctrl << 13));
}

#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_BODY_CTRL .addr_index = 0x00000181, .size_minus_1 = (5 - 1), .shift = 13

static inline u8 rfic_regs_ch_1_gen_ctrl_1_ch_1_localdiv_vdd_10_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00001800)) >> 11);
}

static inline void rfic_regs_ch_1_gen_ctrl_1_ch_1_localdiv_vdd_10_sel_setf(struct cl_chip *chip, u8 ch1localdivvdd10sel)
{
	ASSERT_ERR_CHIP((((u32)ch1localdivvdd10sel << 11) & ~((u32)0x00001800)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR) & ~((u32)0x00001800)) | ((u32)ch1localdivvdd10sel << 11));
}

#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_VDD_10_SEL .addr_index = 0x00000181, .size_minus_1 = (2 - 1), .shift = 11

static inline u8 rfic_regs_ch_1_gen_ctrl_1_ch_1_localdiv_res_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000600)) >> 9);
}

static inline void rfic_regs_ch_1_gen_ctrl_1_ch_1_localdiv_res_setf(struct cl_chip *chip, u8 ch1localdivres)
{
	ASSERT_ERR_CHIP((((u32)ch1localdivres << 9) & ~((u32)0x00000600)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR) & ~((u32)0x00000600)) | ((u32)ch1localdivres << 9));
}

#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_LOCALDIV_RES .addr_index = 0x00000181, .size_minus_1 = (2 - 1), .shift = 9

static inline u8 rfic_regs_ch_1_gen_ctrl_1_ch_1_dac_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_ch_1_gen_ctrl_1_ch_1_dac_ldo_en_setf(struct cl_chip *chip, u8 ch1dacldoen)
{
	ASSERT_ERR_CHIP((((u32)ch1dacldoen << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR) & ~((u32)0x00000100)) | ((u32)ch1dacldoen << 8));
}

#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_DAC_LDO_EN .addr_index = 0x00000181, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_ch_1_gen_ctrl_1_ch_1_tempsens_bias_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x000000F8)) >> 3);
}

static inline void rfic_regs_ch_1_gen_ctrl_1_ch_1_tempsens_bias_ctrl_setf(struct cl_chip *chip, u8 ch1tempsensbiasctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1tempsensbiasctrl << 3) & ~((u32)0x000000F8)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR) & ~((u32)0x000000F8)) | ((u32)ch1tempsensbiasctrl << 3));
}

#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_TEMPSENS_BIAS_CTRL .addr_index = 0x00000181, .size_minus_1 = (5 - 1), .shift = 3

static inline u8 rfic_regs_ch_1_gen_ctrl_1_ch_1_tempsens_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_ch_1_gen_ctrl_1_ch_1_tempsens_en_setf(struct cl_chip *chip, u8 ch1tempsensen)
{
	ASSERT_ERR_CHIP((((u32)ch1tempsensen << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR) & ~((u32)0x00000004)) | ((u32)ch1tempsensen << 2));
}

#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_TEMPSENS_EN .addr_index = 0x00000181, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_ch_1_gen_ctrl_1_ch_1_spare_2_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_ch_1_gen_ctrl_1_ch_1_spare_2_in_setf(struct cl_chip *chip, u8 ch1spare2in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare2in << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_1_ADDR) & ~((u32)0x00000003)) | ((u32)ch1spare2in << 0));
}

#define RFIC_REGS_CH_1_GEN_CTRL_1_CH_1_SPARE_2_IN .addr_index = 0x00000181, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief CH_1_GEN_CTRL_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    CH1_loopbk_amp_en         00000000
 *    30    CH1_trsw_pa_5to7g_en      00000000
 *    29    CH1_trsw_pa_2p4g_en       00000000
 *    28    CH1_trsw_lna_5to7g_en     00000000
 *    27    CH1_trsw_lna_2p4g_en      00000000
 *    26:24 CH1_spare6_in             0x00000000
 *    23    CH1_loopbk_phase_shifter_ctrl 00000000
 *    22:19 CH1_loopbk_atten_ctrl     0x00000000
 *    18:16 CH1_loopbk_amp_gc         0x00000000
 *    15:14 CHx_pdet_vga_vb_sel       0x00000000
 *    13:11 CH1_pdet_vga_gain         0x00000007
 *    10    CH1_pdet_ldo_en           00000000
 *    09    CH1_bb_en                 00000000
 *    08    CH1_bb_single_en          00000000
 *    07    CH1_bb_tx_mode_en         00000000
 *    06    CH1_bb_bw_increase_en     00000000
 *    05    CH1_bb_bypass_en          00000000
 *    04:00 CH1_bb_cal_ctrl           0x00000010
 * </pre>
 */
#define RFIC_REGS_CH_1_GEN_CTRL_2_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000608)
#define RFIC_REGS_CH_1_GEN_CTRL_2_OFFSET      0x00000608
#define RFIC_REGS_CH_1_GEN_CTRL_2_INDEX       0x00000182
#define RFIC_REGS_CH_1_GEN_CTRL_2_RESET       0x00003810

static inline u32 rfic_regs_ch_1_gen_ctrl_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, value);
}

#define RFIC_REGS_CH_1_GEN_CTRL_2 .addr_index = 0x00000182, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_AMP_EN_BIT    ((u32)0x80000000)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_AMP_EN_POS    31
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_TRSW_PA_5_TO_7_G_EN_BIT    ((u32)0x40000000)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_TRSW_PA_5_TO_7_G_EN_POS    30
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_TRSW_PA_2_P_4_G_EN_BIT    ((u32)0x20000000)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_TRSW_PA_2_P_4_G_EN_POS    29
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_TRSW_LNA_5_TO_7_G_EN_BIT    ((u32)0x10000000)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_TRSW_LNA_5_TO_7_G_EN_POS    28
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_TRSW_LNA_2_P_4_G_EN_BIT    ((u32)0x08000000)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_TRSW_LNA_2_P_4_G_EN_POS    27
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_SPARE_6_IN_MASK    ((u32)0x07000000)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_SPARE_6_IN_LSB    24
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_SPARE_6_IN_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_PHASE_SHIFTER_CTRL_BIT    ((u32)0x00800000)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_PHASE_SHIFTER_CTRL_POS    23
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_ATTEN_CTRL_MASK    ((u32)0x00780000)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_ATTEN_CTRL_LSB    19
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_ATTEN_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_AMP_GC_MASK    ((u32)0x00070000)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_AMP_GC_LSB    16
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_AMP_GC_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CHX_PDET_VGA_VB_SEL_MASK    ((u32)0x0000C000)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CHX_PDET_VGA_VB_SEL_LSB    14
#define RFIC_REGS_CH_1_GEN_CTRL_2_CHX_PDET_VGA_VB_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_PDET_VGA_GAIN_MASK    ((u32)0x00003800)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_PDET_VGA_GAIN_LSB    11
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_PDET_VGA_GAIN_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_PDET_LDO_EN_BIT    ((u32)0x00000400)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_PDET_LDO_EN_POS    10
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_EN_BIT    ((u32)0x00000200)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_EN_POS    9
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_SINGLE_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_SINGLE_EN_POS    8
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_TX_MODE_EN_BIT    ((u32)0x00000080)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_TX_MODE_EN_POS    7
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_BW_INCREASE_EN_BIT    ((u32)0x00000040)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_BW_INCREASE_EN_POS    6
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_BYPASS_EN_BIT    ((u32)0x00000020)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_BYPASS_EN_POS    5
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_CAL_CTRL_MASK    ((u32)0x0000001F)
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_CAL_CTRL_LSB    0
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_CAL_CTRL_WIDTH    ((u32)0x00000005)

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_AMP_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_TRSW_PA_5_TO_7_G_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_TRSW_PA_2_P_4_G_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_TRSW_LNA_5_TO_7_G_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_TRSW_LNA_2_P_4_G_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_SPARE_6_IN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_PHASE_SHIFTER_CTRL_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_ATTEN_CTRL_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_AMP_GC_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_2_CHX_PDET_VGA_VB_SEL_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_PDET_VGA_GAIN_RST    0x00000007
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_PDET_LDO_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_SINGLE_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_TX_MODE_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_BW_INCREASE_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_BYPASS_EN_RST    0x00000000
#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_CAL_CTRL_RST    0x00000010

static inline void rfic_regs_ch_1_gen_ctrl_2_pack(struct cl_chip *chip, u8 ch1_loopbk_amp_en, u8 ch1_trsw_pa_5to7g_en, u8 ch1_trsw_pa_2p4g_en, u8 ch1_trsw_lna_5to7g_en, u8 ch1_trsw_lna_2p4g_en, u8 ch1_spare6_in, u8 ch1_loopbk_phase_shifter_ctrl, u8 ch1_loopbk_atten_ctrl, u8 ch1_loopbk_amp_gc, u8 chx_pdet_vga_vb_sel, u8 ch1_pdet_vga_gain, u8 ch1_pdet_ldo_en, u8 ch1_bb_en, u8 ch1_bb_single_en, u8 ch1_bb_tx_mode_en, u8 ch1_bb_bw_increase_en, u8 ch1_bb_bypass_en, u8 ch1_bb_cal_ctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1_loopbk_amp_en << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_trsw_pa_5to7g_en << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_trsw_pa_2p4g_en << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_trsw_lna_5to7g_en << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_trsw_lna_2p4g_en << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare6_in << 24) & ~((u32)0x07000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_loopbk_phase_shifter_ctrl << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_loopbk_atten_ctrl << 19) & ~((u32)0x00780000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_loopbk_amp_gc << 16) & ~((u32)0x00070000)) == 0);
	ASSERT_ERR_CHIP((((u32)chx_pdet_vga_vb_sel << 14) & ~((u32)0x0000C000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_pdet_vga_gain << 11) & ~((u32)0x00003800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_pdet_ldo_en << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_bb_en << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_bb_single_en << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_bb_tx_mode_en << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_bb_bw_increase_en << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_bb_bypass_en << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_bb_cal_ctrl << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, ((u32)ch1_loopbk_amp_en << 31) | ((u32)ch1_trsw_pa_5to7g_en << 30) | ((u32)ch1_trsw_pa_2p4g_en << 29) | ((u32)ch1_trsw_lna_5to7g_en << 28) | ((u32)ch1_trsw_lna_2p4g_en << 27) | ((u32)ch1_spare6_in << 24) | ((u32)ch1_loopbk_phase_shifter_ctrl << 23) | ((u32)ch1_loopbk_atten_ctrl << 19) | ((u32)ch1_loopbk_amp_gc << 16) | ((u32)chx_pdet_vga_vb_sel << 14) | ((u32)ch1_pdet_vga_gain << 11) | ((u32)ch1_pdet_ldo_en << 10) | ((u32)ch1_bb_en << 9) | ((u32)ch1_bb_single_en << 8) | ((u32)ch1_bb_tx_mode_en << 7) | ((u32)ch1_bb_bw_increase_en << 6) | ((u32)ch1_bb_bypass_en << 5) | ((u32)ch1_bb_cal_ctrl << 0));
}

static inline void rfic_regs_ch_1_gen_ctrl_2_unpack(struct cl_chip *chip, u8 *ch1_loopbk_amp_en, u8 *ch1_trsw_pa_5to7g_en, u8 *ch1_trsw_pa_2p4g_en, u8 *ch1_trsw_lna_5to7g_en, u8 *ch1_trsw_lna_2p4g_en, u8 *ch1_spare6_in, u8 *ch1_loopbk_phase_shifter_ctrl, u8 *ch1_loopbk_atten_ctrl, u8 *ch1_loopbk_amp_gc, u8 *chx_pdet_vga_vb_sel, u8 *ch1_pdet_vga_gain, u8 *ch1_pdet_ldo_en, u8 *ch1_bb_en, u8 *ch1_bb_single_en, u8 *ch1_bb_tx_mode_en, u8 *ch1_bb_bw_increase_en, u8 *ch1_bb_bypass_en, u8 *ch1_bb_cal_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	*ch1_loopbk_amp_en = (local_val & ((u32)0x80000000)) >> 31;
	*ch1_trsw_pa_5to7g_en = (local_val & ((u32)0x40000000)) >> 30;
	*ch1_trsw_pa_2p4g_en = (local_val & ((u32)0x20000000)) >> 29;
	*ch1_trsw_lna_5to7g_en = (local_val & ((u32)0x10000000)) >> 28;
	*ch1_trsw_lna_2p4g_en = (local_val & ((u32)0x08000000)) >> 27;
	*ch1_spare6_in = (local_val & ((u32)0x07000000)) >> 24;
	*ch1_loopbk_phase_shifter_ctrl = (local_val & ((u32)0x00800000)) >> 23;
	*ch1_loopbk_atten_ctrl = (local_val & ((u32)0x00780000)) >> 19;
	*ch1_loopbk_amp_gc = (local_val & ((u32)0x00070000)) >> 16;
	*chx_pdet_vga_vb_sel = (local_val & ((u32)0x0000C000)) >> 14;
	*ch1_pdet_vga_gain = (local_val & ((u32)0x00003800)) >> 11;
	*ch1_pdet_ldo_en = (local_val & ((u32)0x00000400)) >> 10;
	*ch1_bb_en = (local_val & ((u32)0x00000200)) >> 9;
	*ch1_bb_single_en = (local_val & ((u32)0x00000100)) >> 8;
	*ch1_bb_tx_mode_en = (local_val & ((u32)0x00000080)) >> 7;
	*ch1_bb_bw_increase_en = (local_val & ((u32)0x00000040)) >> 6;
	*ch1_bb_bypass_en = (local_val & ((u32)0x00000020)) >> 5;
	*ch1_bb_cal_ctrl = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_loopbk_amp_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_loopbk_amp_en_setf(struct cl_chip *chip, u8 ch1loopbkampen)
{
	ASSERT_ERR_CHIP((((u32)ch1loopbkampen << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x80000000)) | ((u32)ch1loopbkampen << 31));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_AMP_EN .addr_index = 0x00000182, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_trsw_pa_5_to_7_g_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_trsw_pa_5_to_7_g_en_setf(struct cl_chip *chip, u8 ch1trswpa5to7gen)
{
	ASSERT_ERR_CHIP((((u32)ch1trswpa5to7gen << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x40000000)) | ((u32)ch1trswpa5to7gen << 30));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_TRSW_PA_5_TO_7_G_EN .addr_index = 0x00000182, .size_minus_1 = (1 - 1), .shift = 30

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_trsw_pa_2_p_4_g_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_trsw_pa_2_p_4_g_en_setf(struct cl_chip *chip, u8 ch1trswpa2p4gen)
{
	ASSERT_ERR_CHIP((((u32)ch1trswpa2p4gen << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x20000000)) | ((u32)ch1trswpa2p4gen << 29));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_TRSW_PA_2_P_4_G_EN .addr_index = 0x00000182, .size_minus_1 = (1 - 1), .shift = 29

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_trsw_lna_5_to_7_g_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_trsw_lna_5_to_7_g_en_setf(struct cl_chip *chip, u8 ch1trswlna5to7gen)
{
	ASSERT_ERR_CHIP((((u32)ch1trswlna5to7gen << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x10000000)) | ((u32)ch1trswlna5to7gen << 28));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_TRSW_LNA_5_TO_7_G_EN .addr_index = 0x00000182, .size_minus_1 = (1 - 1), .shift = 28

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_trsw_lna_2_p_4_g_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_trsw_lna_2_p_4_g_en_setf(struct cl_chip *chip, u8 ch1trswlna2p4gen)
{
	ASSERT_ERR_CHIP((((u32)ch1trswlna2p4gen << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x08000000)) | ((u32)ch1trswlna2p4gen << 27));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_TRSW_LNA_2_P_4_G_EN .addr_index = 0x00000182, .size_minus_1 = (1 - 1), .shift = 27

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_spare_6_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x07000000)) >> 24);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_spare_6_in_setf(struct cl_chip *chip, u8 ch1spare6in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare6in << 24) & ~((u32)0x07000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x07000000)) | ((u32)ch1spare6in << 24));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_SPARE_6_IN .addr_index = 0x00000182, .size_minus_1 = (3 - 1), .shift = 24

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_loopbk_phase_shifter_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_loopbk_phase_shifter_ctrl_setf(struct cl_chip *chip, u8 ch1loopbkphaseshifterctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1loopbkphaseshifterctrl << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x00800000)) | ((u32)ch1loopbkphaseshifterctrl << 23));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_PHASE_SHIFTER_CTRL .addr_index = 0x00000182, .size_minus_1 = (1 - 1), .shift = 23

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_loopbk_atten_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00780000)) >> 19);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_loopbk_atten_ctrl_setf(struct cl_chip *chip, u8 ch1loopbkattenctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1loopbkattenctrl << 19) & ~((u32)0x00780000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x00780000)) | ((u32)ch1loopbkattenctrl << 19));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_ATTEN_CTRL .addr_index = 0x00000182, .size_minus_1 = (4 - 1), .shift = 19

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_loopbk_amp_gc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00070000)) >> 16);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_loopbk_amp_gc_setf(struct cl_chip *chip, u8 ch1loopbkampgc)
{
	ASSERT_ERR_CHIP((((u32)ch1loopbkampgc << 16) & ~((u32)0x00070000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x00070000)) | ((u32)ch1loopbkampgc << 16));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_LOOPBK_AMP_GC .addr_index = 0x00000182, .size_minus_1 = (3 - 1), .shift = 16

static inline u8 rfic_regs_ch_1_gen_ctrl_2_chx_pdet_vga_vb_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x0000C000)) >> 14);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_chx_pdet_vga_vb_sel_setf(struct cl_chip *chip, u8 chxpdetvgavbsel)
{
	ASSERT_ERR_CHIP((((u32)chxpdetvgavbsel << 14) & ~((u32)0x0000C000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x0000C000)) | ((u32)chxpdetvgavbsel << 14));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CHX_PDET_VGA_VB_SEL .addr_index = 0x00000182, .size_minus_1 = (2 - 1), .shift = 14

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_pdet_vga_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00003800)) >> 11);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_pdet_vga_gain_setf(struct cl_chip *chip, u8 ch1pdetvgagain)
{
	ASSERT_ERR_CHIP((((u32)ch1pdetvgagain << 11) & ~((u32)0x00003800)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x00003800)) | ((u32)ch1pdetvgagain << 11));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_PDET_VGA_GAIN .addr_index = 0x00000182, .size_minus_1 = (3 - 1), .shift = 11

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_pdet_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_pdet_ldo_en_setf(struct cl_chip *chip, u8 ch1pdetldoen)
{
	ASSERT_ERR_CHIP((((u32)ch1pdetldoen << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x00000400)) | ((u32)ch1pdetldoen << 10));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_PDET_LDO_EN .addr_index = 0x00000182, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_bb_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_bb_en_setf(struct cl_chip *chip, u8 ch1bben)
{
	ASSERT_ERR_CHIP((((u32)ch1bben << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x00000200)) | ((u32)ch1bben << 9));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_EN .addr_index = 0x00000182, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_bb_single_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_bb_single_en_setf(struct cl_chip *chip, u8 ch1bbsingleen)
{
	ASSERT_ERR_CHIP((((u32)ch1bbsingleen << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x00000100)) | ((u32)ch1bbsingleen << 8));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_SINGLE_EN .addr_index = 0x00000182, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_bb_tx_mode_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_bb_tx_mode_en_setf(struct cl_chip *chip, u8 ch1bbtxmodeen)
{
	ASSERT_ERR_CHIP((((u32)ch1bbtxmodeen << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x00000080)) | ((u32)ch1bbtxmodeen << 7));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_TX_MODE_EN .addr_index = 0x00000182, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_bb_bw_increase_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_bb_bw_increase_en_setf(struct cl_chip *chip, u8 ch1bbbwincreaseen)
{
	ASSERT_ERR_CHIP((((u32)ch1bbbwincreaseen << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x00000040)) | ((u32)ch1bbbwincreaseen << 6));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_BW_INCREASE_EN .addr_index = 0x00000182, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_bb_bypass_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_bb_bypass_en_setf(struct cl_chip *chip, u8 ch1bbbypassen)
{
	ASSERT_ERR_CHIP((((u32)ch1bbbypassen << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x00000020)) | ((u32)ch1bbbypassen << 5));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_BYPASS_EN .addr_index = 0x00000182, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_ch_1_gen_ctrl_2_ch_1_bb_cal_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

static inline void rfic_regs_ch_1_gen_ctrl_2_ch_1_bb_cal_ctrl_setf(struct cl_chip *chip, u8 ch1bbcalctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1bbcalctrl << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_GEN_CTRL_2_ADDR) & ~((u32)0x0000001F)) | ((u32)ch1bbcalctrl << 0));
}

#define RFIC_REGS_CH_1_GEN_CTRL_2_CH_1_BB_CAL_CTRL .addr_index = 0x00000182, .size_minus_1 = (5 - 1), .shift = 0

/**
 * @brief CH_1_RSSI_CONF register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    24:23 CH1_spare10_in            0x00000000
 *    22:19 CH1_adc_lpbk_spare        0x00000000
 *    18:15 CH1_spare9_in             0x00000000
 *    14    CH1_adc_lpbk_en           00000000
 *    13:05 CH1_spare8_in             0x00000000
 *    04:02 CH1_rssi_filt_sel         0x00000000
 *    01    CH1_rssi_en               00000000
 *    00    CH1_spare7_in             00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_RSSI_CONF_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000060C)
#define RFIC_REGS_CH_1_RSSI_CONF_OFFSET      0x0000060C
#define RFIC_REGS_CH_1_RSSI_CONF_INDEX       0x00000183
#define RFIC_REGS_CH_1_RSSI_CONF_RESET       0x00000000

static inline u32 rfic_regs_ch_1_rssi_conf_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR);
}

static inline void rfic_regs_ch_1_rssi_conf_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR, value);
}

#define RFIC_REGS_CH_1_RSSI_CONF .addr_index = 0x00000183, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_10_IN_MASK    ((u32)0x01800000)
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_10_IN_LSB    23
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_10_IN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_ADC_LPBK_SPARE_MASK    ((u32)0x00780000)
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_ADC_LPBK_SPARE_LSB    19
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_ADC_LPBK_SPARE_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_9_IN_MASK    ((u32)0x00078000)
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_9_IN_LSB    15
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_9_IN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_ADC_LPBK_EN_BIT    ((u32)0x00004000)
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_ADC_LPBK_EN_POS    14
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_8_IN_MASK    ((u32)0x00003FE0)
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_8_IN_LSB    5
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_8_IN_WIDTH    ((u32)0x00000009)
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_RSSI_FILT_SEL_MASK    ((u32)0x0000001C)
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_RSSI_FILT_SEL_LSB    2
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_RSSI_FILT_SEL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_RSSI_EN_BIT    ((u32)0x00000002)
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_RSSI_EN_POS    1
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_7_IN_BIT    ((u32)0x00000001)
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_7_IN_POS    0

#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_10_IN_RST    0x00000000
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_ADC_LPBK_SPARE_RST    0x00000000
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_9_IN_RST    0x00000000
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_ADC_LPBK_EN_RST    0x00000000
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_8_IN_RST    0x00000000
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_RSSI_FILT_SEL_RST    0x00000000
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_RSSI_EN_RST    0x00000000
#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_7_IN_RST    0x00000000

static inline void rfic_regs_ch_1_rssi_conf_pack(struct cl_chip *chip, u8 ch1_spare10_in, u8 ch1_adc_lpbk_spare, u8 ch1_spare9_in, u8 ch1_adc_lpbk_en, u16 ch1_spare8_in, u8 ch1_rssi_filt_sel, u8 ch1_rssi_en, u8 ch1_spare7_in)
{
	ASSERT_ERR_CHIP((((u32)ch1_spare10_in << 23) & ~((u32)0x01800000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_adc_lpbk_spare << 19) & ~((u32)0x00780000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare9_in << 15) & ~((u32)0x00078000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_adc_lpbk_en << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare8_in << 5) & ~((u32)0x00003FE0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rssi_filt_sel << 2) & ~((u32)0x0000001C)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rssi_en << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare7_in << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR, ((u32)ch1_spare10_in << 23) | ((u32)ch1_adc_lpbk_spare << 19) | ((u32)ch1_spare9_in << 15) | ((u32)ch1_adc_lpbk_en << 14) | ((u32)ch1_spare8_in << 5) | ((u32)ch1_rssi_filt_sel << 2) | ((u32)ch1_rssi_en << 1) | ((u32)ch1_spare7_in << 0));
}

static inline void rfic_regs_ch_1_rssi_conf_unpack(struct cl_chip *chip, u8 *ch1_spare10_in, u8 *ch1_adc_lpbk_spare, u8 *ch1_spare9_in, u8 *ch1_adc_lpbk_en, u16 *ch1_spare8_in, u8 *ch1_rssi_filt_sel, u8 *ch1_rssi_en, u8 *ch1_spare7_in)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR);

	*ch1_spare10_in = (local_val & ((u32)0x01800000)) >> 23;
	*ch1_adc_lpbk_spare = (local_val & ((u32)0x00780000)) >> 19;
	*ch1_spare9_in = (local_val & ((u32)0x00078000)) >> 15;
	*ch1_adc_lpbk_en = (local_val & ((u32)0x00004000)) >> 14;
	*ch1_spare8_in = (local_val & ((u32)0x00003FE0)) >> 5;
	*ch1_rssi_filt_sel = (local_val & ((u32)0x0000001C)) >> 2;
	*ch1_rssi_en = (local_val & ((u32)0x00000002)) >> 1;
	*ch1_spare7_in = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_ch_1_rssi_conf_ch_1_spare_10_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x01800000)) >> 23);
}

static inline void rfic_regs_ch_1_rssi_conf_ch_1_spare_10_in_setf(struct cl_chip *chip, u8 ch1spare10in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare10in << 23) & ~((u32)0x01800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR) & ~((u32)0x01800000)) | ((u32)ch1spare10in << 23));
}

#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_10_IN .addr_index = 0x00000183, .size_minus_1 = (2 - 1), .shift = 23

static inline u8 rfic_regs_ch_1_rssi_conf_ch_1_adc_lpbk_spare_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00780000)) >> 19);
}

static inline void rfic_regs_ch_1_rssi_conf_ch_1_adc_lpbk_spare_setf(struct cl_chip *chip, u8 ch1adclpbkspare)
{
	ASSERT_ERR_CHIP((((u32)ch1adclpbkspare << 19) & ~((u32)0x00780000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR) & ~((u32)0x00780000)) | ((u32)ch1adclpbkspare << 19));
}

#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_ADC_LPBK_SPARE .addr_index = 0x00000183, .size_minus_1 = (4 - 1), .shift = 19

static inline u8 rfic_regs_ch_1_rssi_conf_ch_1_spare_9_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00078000)) >> 15);
}

static inline void rfic_regs_ch_1_rssi_conf_ch_1_spare_9_in_setf(struct cl_chip *chip, u8 ch1spare9in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare9in << 15) & ~((u32)0x00078000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR) & ~((u32)0x00078000)) | ((u32)ch1spare9in << 15));
}

#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_9_IN .addr_index = 0x00000183, .size_minus_1 = (4 - 1), .shift = 15

static inline u8 rfic_regs_ch_1_rssi_conf_ch_1_adc_lpbk_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void rfic_regs_ch_1_rssi_conf_ch_1_adc_lpbk_en_setf(struct cl_chip *chip, u8 ch1adclpbken)
{
	ASSERT_ERR_CHIP((((u32)ch1adclpbken << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR) & ~((u32)0x00004000)) | ((u32)ch1adclpbken << 14));
}

#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_ADC_LPBK_EN .addr_index = 0x00000183, .size_minus_1 = (1 - 1), .shift = 14

static inline u16 rfic_regs_ch_1_rssi_conf_ch_1_spare_8_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR);

	return (u16)((local_val & ((u32)0x00003FE0)) >> 5);
}

static inline void rfic_regs_ch_1_rssi_conf_ch_1_spare_8_in_setf(struct cl_chip *chip, u16 ch1spare8in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare8in << 5) & ~((u32)0x00003FE0)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR) & ~((u32)0x00003FE0)) | ((u32)ch1spare8in << 5));
}

#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_8_IN .addr_index = 0x00000183, .size_minus_1 = (9 - 1), .shift = 5

static inline u8 rfic_regs_ch_1_rssi_conf_ch_1_rssi_filt_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x0000001C)) >> 2);
}

static inline void rfic_regs_ch_1_rssi_conf_ch_1_rssi_filt_sel_setf(struct cl_chip *chip, u8 ch1rssifiltsel)
{
	ASSERT_ERR_CHIP((((u32)ch1rssifiltsel << 2) & ~((u32)0x0000001C)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR) & ~((u32)0x0000001C)) | ((u32)ch1rssifiltsel << 2));
}

#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_RSSI_FILT_SEL .addr_index = 0x00000183, .size_minus_1 = (3 - 1), .shift = 2

static inline u8 rfic_regs_ch_1_rssi_conf_ch_1_rssi_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_ch_1_rssi_conf_ch_1_rssi_en_setf(struct cl_chip *chip, u8 ch1rssien)
{
	ASSERT_ERR_CHIP((((u32)ch1rssien << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR) & ~((u32)0x00000002)) | ((u32)ch1rssien << 1));
}

#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_RSSI_EN .addr_index = 0x00000183, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_ch_1_rssi_conf_ch_1_spare_7_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_ch_1_rssi_conf_ch_1_spare_7_in_setf(struct cl_chip *chip, u8 ch1spare7in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare7in << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_RSSI_CONF_ADDR) & ~((u32)0x00000001)) | ((u32)ch1spare7in << 0));
}

#define RFIC_REGS_CH_1_RSSI_CONF_CH_1_SPARE_7_IN .addr_index = 0x00000183, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief CH_1_TX_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    14:11 CH1_tx_mix_gain           0x00000000
 *    10    CH1_dac_curr_sink_en      00000000
 *    09:07 CH1_tx_mix_lo_bias_ctrl   0x00000000
 *    06:03 CH1_tx_mix_curr_ctrl      0x00000000
 *    02:00 CH1_tx_mix_r_ctrl         0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_TX_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000610)
#define RFIC_REGS_CH_1_TX_CTRL_0_OFFSET      0x00000610
#define RFIC_REGS_CH_1_TX_CTRL_0_INDEX       0x00000184
#define RFIC_REGS_CH_1_TX_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_ch_1_tx_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR);
}

static inline void rfic_regs_ch_1_tx_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR, value);
}

#define RFIC_REGS_CH_1_TX_CTRL_0 .addr_index = 0x00000184, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_GAIN_MASK    ((u32)0x00007800)
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_GAIN_LSB    11
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_GAIN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_DAC_CURR_SINK_EN_BIT    ((u32)0x00000400)
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_DAC_CURR_SINK_EN_POS    10
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_LO_BIAS_CTRL_MASK    ((u32)0x00000380)
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_LO_BIAS_CTRL_LSB    7
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_LO_BIAS_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_CURR_CTRL_MASK    ((u32)0x00000078)
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_CURR_CTRL_LSB    3
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_CURR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_R_CTRL_MASK    ((u32)0x00000007)
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_R_CTRL_LSB    0
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_R_CTRL_WIDTH    ((u32)0x00000003)

#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_GAIN_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_DAC_CURR_SINK_EN_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_LO_BIAS_CTRL_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_CURR_CTRL_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_R_CTRL_RST    0x00000000

static inline void rfic_regs_ch_1_tx_ctrl_0_pack(struct cl_chip *chip, u8 ch1_tx_mix_gain, u8 ch1_dac_curr_sink_en, u8 ch1_tx_mix_lo_bias_ctrl, u8 ch1_tx_mix_curr_ctrl, u8 ch1_tx_mix_r_ctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1_tx_mix_gain << 11) & ~((u32)0x00007800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_dac_curr_sink_en << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_mix_lo_bias_ctrl << 7) & ~((u32)0x00000380)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_mix_curr_ctrl << 3) & ~((u32)0x00000078)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_mix_r_ctrl << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR, ((u32)ch1_tx_mix_gain << 11) | ((u32)ch1_dac_curr_sink_en << 10) | ((u32)ch1_tx_mix_lo_bias_ctrl << 7) | ((u32)ch1_tx_mix_curr_ctrl << 3) | ((u32)ch1_tx_mix_r_ctrl << 0));
}

static inline void rfic_regs_ch_1_tx_ctrl_0_unpack(struct cl_chip *chip, u8 *ch1_tx_mix_gain, u8 *ch1_dac_curr_sink_en, u8 *ch1_tx_mix_lo_bias_ctrl, u8 *ch1_tx_mix_curr_ctrl, u8 *ch1_tx_mix_r_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR);

	*ch1_tx_mix_gain = (local_val & ((u32)0x00007800)) >> 11;
	*ch1_dac_curr_sink_en = (local_val & ((u32)0x00000400)) >> 10;
	*ch1_tx_mix_lo_bias_ctrl = (local_val & ((u32)0x00000380)) >> 7;
	*ch1_tx_mix_curr_ctrl = (local_val & ((u32)0x00000078)) >> 3;
	*ch1_tx_mix_r_ctrl = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 rfic_regs_ch_1_tx_ctrl_0_ch_1_tx_mix_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00007800)) >> 11);
}

static inline void rfic_regs_ch_1_tx_ctrl_0_ch_1_tx_mix_gain_setf(struct cl_chip *chip, u8 ch1txmixgain)
{
	ASSERT_ERR_CHIP((((u32)ch1txmixgain << 11) & ~((u32)0x00007800)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR) & ~((u32)0x00007800)) | ((u32)ch1txmixgain << 11));
}

#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_GAIN .addr_index = 0x00000184, .size_minus_1 = (4 - 1), .shift = 11

static inline u8 rfic_regs_ch_1_tx_ctrl_0_ch_1_dac_curr_sink_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_ch_1_tx_ctrl_0_ch_1_dac_curr_sink_en_setf(struct cl_chip *chip, u8 ch1daccurrsinken)
{
	ASSERT_ERR_CHIP((((u32)ch1daccurrsinken << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR) & ~((u32)0x00000400)) | ((u32)ch1daccurrsinken << 10));
}

#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_DAC_CURR_SINK_EN .addr_index = 0x00000184, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_ch_1_tx_ctrl_0_ch_1_tx_mix_lo_bias_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000380)) >> 7);
}

static inline void rfic_regs_ch_1_tx_ctrl_0_ch_1_tx_mix_lo_bias_ctrl_setf(struct cl_chip *chip, u8 ch1txmixlobiasctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1txmixlobiasctrl << 7) & ~((u32)0x00000380)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR) & ~((u32)0x00000380)) | ((u32)ch1txmixlobiasctrl << 7));
}

#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_LO_BIAS_CTRL .addr_index = 0x00000184, .size_minus_1 = (3 - 1), .shift = 7

static inline u8 rfic_regs_ch_1_tx_ctrl_0_ch_1_tx_mix_curr_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000078)) >> 3);
}

static inline void rfic_regs_ch_1_tx_ctrl_0_ch_1_tx_mix_curr_ctrl_setf(struct cl_chip *chip, u8 ch1txmixcurrctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1txmixcurrctrl << 3) & ~((u32)0x00000078)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR) & ~((u32)0x00000078)) | ((u32)ch1txmixcurrctrl << 3));
}

#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_CURR_CTRL .addr_index = 0x00000184, .size_minus_1 = (4 - 1), .shift = 3

static inline u8 rfic_regs_ch_1_tx_ctrl_0_ch_1_tx_mix_r_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void rfic_regs_ch_1_tx_ctrl_0_ch_1_tx_mix_r_ctrl_setf(struct cl_chip *chip, u8 ch1txmixrctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1txmixrctrl << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_0_ADDR) & ~((u32)0x00000007)) | ((u32)ch1txmixrctrl << 0));
}

#define RFIC_REGS_CH_1_TX_CTRL_0_CH_1_TX_MIX_R_CTRL .addr_index = 0x00000184, .size_minus_1 = (3 - 1), .shift = 0

/**
 * @brief CH_1_TX_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 CH1_tx_prepa_curr_ctrl    0x00000000
 *    27    CH1_tx_pga_en             00000000
 *    26:19 CH1_tx_pga_gain_ctrl      0x00000000
 *    18:15 CH1_tx_pga_curr_ctrl      0x00000000
 *    14:11 CH1_spare12_in            0x00000000
 *    10:06 CH1_tx_pga_cap_ctrl       0x00000000
 *    05    CH1_tx_mix_en             00000000
 *    04:00 CH1_tx_mix_cap_ctrl       0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_TX_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000614)
#define RFIC_REGS_CH_1_TX_CTRL_1_OFFSET      0x00000614
#define RFIC_REGS_CH_1_TX_CTRL_1_INDEX       0x00000185
#define RFIC_REGS_CH_1_TX_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_ch_1_tx_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR);
}

static inline void rfic_regs_ch_1_tx_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR, value);
}

#define RFIC_REGS_CH_1_TX_CTRL_1 .addr_index = 0x00000185, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PREPA_CURR_CTRL_MASK    ((u32)0xF0000000)
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PREPA_CURR_CTRL_LSB    28
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PREPA_CURR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_EN_BIT    ((u32)0x08000000)
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_EN_POS    27
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_GAIN_CTRL_MASK    ((u32)0x07F80000)
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_GAIN_CTRL_LSB    19
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_GAIN_CTRL_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_CURR_CTRL_MASK    ((u32)0x00078000)
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_CURR_CTRL_LSB    15
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_CURR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_SPARE_12_IN_MASK    ((u32)0x00007800)
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_SPARE_12_IN_LSB    11
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_SPARE_12_IN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_CAP_CTRL_MASK    ((u32)0x000007C0)
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_CAP_CTRL_LSB    6
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_CAP_CTRL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_MIX_EN_BIT    ((u32)0x00000020)
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_MIX_EN_POS    5
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_MIX_CAP_CTRL_MASK    ((u32)0x0000001F)
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_MIX_CAP_CTRL_LSB    0
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_MIX_CAP_CTRL_WIDTH    ((u32)0x00000005)

#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PREPA_CURR_CTRL_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_EN_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_GAIN_CTRL_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_CURR_CTRL_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_SPARE_12_IN_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_CAP_CTRL_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_MIX_EN_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_MIX_CAP_CTRL_RST    0x00000000

static inline void rfic_regs_ch_1_tx_ctrl_1_pack(struct cl_chip *chip, u8 ch1_tx_prepa_curr_ctrl, u8 ch1_tx_pga_en, u8 ch1_tx_pga_gain_ctrl, u8 ch1_tx_pga_curr_ctrl, u8 ch1_spare12_in, u8 ch1_tx_pga_cap_ctrl, u8 ch1_tx_mix_en, u8 ch1_tx_mix_cap_ctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1_tx_prepa_curr_ctrl << 28) & ~((u32)0xF0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pga_en << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pga_gain_ctrl << 19) & ~((u32)0x07F80000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pga_curr_ctrl << 15) & ~((u32)0x00078000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare12_in << 11) & ~((u32)0x00007800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pga_cap_ctrl << 6) & ~((u32)0x000007C0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_mix_en << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_mix_cap_ctrl << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR, ((u32)ch1_tx_prepa_curr_ctrl << 28) | ((u32)ch1_tx_pga_en << 27) | ((u32)ch1_tx_pga_gain_ctrl << 19) | ((u32)ch1_tx_pga_curr_ctrl << 15) | ((u32)ch1_spare12_in << 11) | ((u32)ch1_tx_pga_cap_ctrl << 6) | ((u32)ch1_tx_mix_en << 5) | ((u32)ch1_tx_mix_cap_ctrl << 0));
}

static inline void rfic_regs_ch_1_tx_ctrl_1_unpack(struct cl_chip *chip, u8 *ch1_tx_prepa_curr_ctrl, u8 *ch1_tx_pga_en, u8 *ch1_tx_pga_gain_ctrl, u8 *ch1_tx_pga_curr_ctrl, u8 *ch1_spare12_in, u8 *ch1_tx_pga_cap_ctrl, u8 *ch1_tx_mix_en, u8 *ch1_tx_mix_cap_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR);

	*ch1_tx_prepa_curr_ctrl = (local_val & ((u32)0xF0000000)) >> 28;
	*ch1_tx_pga_en = (local_val & ((u32)0x08000000)) >> 27;
	*ch1_tx_pga_gain_ctrl = (local_val & ((u32)0x07F80000)) >> 19;
	*ch1_tx_pga_curr_ctrl = (local_val & ((u32)0x00078000)) >> 15;
	*ch1_spare12_in = (local_val & ((u32)0x00007800)) >> 11;
	*ch1_tx_pga_cap_ctrl = (local_val & ((u32)0x000007C0)) >> 6;
	*ch1_tx_mix_en = (local_val & ((u32)0x00000020)) >> 5;
	*ch1_tx_mix_cap_ctrl = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u8 rfic_regs_ch_1_tx_ctrl_1_ch_1_tx_prepa_curr_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0xF0000000)) >> 28);
}

static inline void rfic_regs_ch_1_tx_ctrl_1_ch_1_tx_prepa_curr_ctrl_setf(struct cl_chip *chip, u8 ch1txprepacurrctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1txprepacurrctrl << 28) & ~((u32)0xF0000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR) & ~((u32)0xF0000000)) | ((u32)ch1txprepacurrctrl << 28));
}

#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PREPA_CURR_CTRL .addr_index = 0x00000185, .size_minus_1 = (4 - 1), .shift = 28

static inline u8 rfic_regs_ch_1_tx_ctrl_1_ch_1_tx_pga_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void rfic_regs_ch_1_tx_ctrl_1_ch_1_tx_pga_en_setf(struct cl_chip *chip, u8 ch1txpgaen)
{
	ASSERT_ERR_CHIP((((u32)ch1txpgaen << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR) & ~((u32)0x08000000)) | ((u32)ch1txpgaen << 27));
}

#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_EN .addr_index = 0x00000185, .size_minus_1 = (1 - 1), .shift = 27

static inline u8 rfic_regs_ch_1_tx_ctrl_1_ch_1_tx_pga_gain_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x07F80000)) >> 19);
}

static inline void rfic_regs_ch_1_tx_ctrl_1_ch_1_tx_pga_gain_ctrl_setf(struct cl_chip *chip, u8 ch1txpgagainctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1txpgagainctrl << 19) & ~((u32)0x07F80000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR) & ~((u32)0x07F80000)) | ((u32)ch1txpgagainctrl << 19));
}

#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_GAIN_CTRL .addr_index = 0x00000185, .size_minus_1 = (8 - 1), .shift = 19

static inline u8 rfic_regs_ch_1_tx_ctrl_1_ch_1_tx_pga_curr_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00078000)) >> 15);
}

static inline void rfic_regs_ch_1_tx_ctrl_1_ch_1_tx_pga_curr_ctrl_setf(struct cl_chip *chip, u8 ch1txpgacurrctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1txpgacurrctrl << 15) & ~((u32)0x00078000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR) & ~((u32)0x00078000)) | ((u32)ch1txpgacurrctrl << 15));
}

#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_CURR_CTRL .addr_index = 0x00000185, .size_minus_1 = (4 - 1), .shift = 15

static inline u8 rfic_regs_ch_1_tx_ctrl_1_ch_1_spare_12_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00007800)) >> 11);
}

static inline void rfic_regs_ch_1_tx_ctrl_1_ch_1_spare_12_in_setf(struct cl_chip *chip, u8 ch1spare12in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare12in << 11) & ~((u32)0x00007800)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR) & ~((u32)0x00007800)) | ((u32)ch1spare12in << 11));
}

#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_SPARE_12_IN .addr_index = 0x00000185, .size_minus_1 = (4 - 1), .shift = 11

static inline u8 rfic_regs_ch_1_tx_ctrl_1_ch_1_tx_pga_cap_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x000007C0)) >> 6);
}

static inline void rfic_regs_ch_1_tx_ctrl_1_ch_1_tx_pga_cap_ctrl_setf(struct cl_chip *chip, u8 ch1txpgacapctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1txpgacapctrl << 6) & ~((u32)0x000007C0)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR) & ~((u32)0x000007C0)) | ((u32)ch1txpgacapctrl << 6));
}

#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_PGA_CAP_CTRL .addr_index = 0x00000185, .size_minus_1 = (5 - 1), .shift = 6

static inline u8 rfic_regs_ch_1_tx_ctrl_1_ch_1_tx_mix_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void rfic_regs_ch_1_tx_ctrl_1_ch_1_tx_mix_en_setf(struct cl_chip *chip, u8 ch1txmixen)
{
	ASSERT_ERR_CHIP((((u32)ch1txmixen << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR) & ~((u32)0x00000020)) | ((u32)ch1txmixen << 5));
}

#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_MIX_EN .addr_index = 0x00000185, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_ch_1_tx_ctrl_1_ch_1_tx_mix_cap_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

static inline void rfic_regs_ch_1_tx_ctrl_1_ch_1_tx_mix_cap_ctrl_setf(struct cl_chip *chip, u8 ch1txmixcapctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1txmixcapctrl << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_1_ADDR) & ~((u32)0x0000001F)) | ((u32)ch1txmixcapctrl << 0));
}

#define RFIC_REGS_CH_1_TX_CTRL_1_CH_1_TX_MIX_CAP_CTRL .addr_index = 0x00000185, .size_minus_1 = (5 - 1), .shift = 0

/**
 * @brief CH_1_TX_CTRL_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:20 CH1_spare14_in            0x00000000
 *    19    CH1_tx_pga_prepa_bias_en  00000000
 *    18:17 CH1_spare13_in            0x00000000
 *    16    CH1_tx_prepa_en           00000000
 *    15:13 CH1_tx_prepa_cap_match_ctrl 0x00000000
 *    12:08 CH1_tx_prepa_cap_ctrl     0x00000000
 *    07:00 CH1_tx_prepa_gain_ctrl    0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_TX_CTRL_2_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000618)
#define RFIC_REGS_CH_1_TX_CTRL_2_OFFSET      0x00000618
#define RFIC_REGS_CH_1_TX_CTRL_2_INDEX       0x00000186
#define RFIC_REGS_CH_1_TX_CTRL_2_RESET       0x00000000

static inline u32 rfic_regs_ch_1_tx_ctrl_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR);
}

static inline void rfic_regs_ch_1_tx_ctrl_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR, value);
}

#define RFIC_REGS_CH_1_TX_CTRL_2 .addr_index = 0x00000186, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_SPARE_14_IN_MASK    ((u32)0x0FF00000)
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_SPARE_14_IN_LSB    20
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_SPARE_14_IN_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PGA_PREPA_BIAS_EN_BIT    ((u32)0x00080000)
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PGA_PREPA_BIAS_EN_POS    19
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_SPARE_13_IN_MASK    ((u32)0x00060000)
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_SPARE_13_IN_LSB    17
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_SPARE_13_IN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_EN_BIT    ((u32)0x00010000)
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_EN_POS    16
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_CAP_MATCH_CTRL_MASK    ((u32)0x0000E000)
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_CAP_MATCH_CTRL_LSB    13
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_CAP_MATCH_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_CAP_CTRL_MASK    ((u32)0x00001F00)
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_CAP_CTRL_LSB    8
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_CAP_CTRL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_GAIN_CTRL_MASK    ((u32)0x000000FF)
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_GAIN_CTRL_LSB    0
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_GAIN_CTRL_WIDTH    ((u32)0x00000008)

#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_SPARE_14_IN_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PGA_PREPA_BIAS_EN_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_SPARE_13_IN_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_EN_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_CAP_MATCH_CTRL_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_CAP_CTRL_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_GAIN_CTRL_RST    0x00000000

static inline void rfic_regs_ch_1_tx_ctrl_2_pack(struct cl_chip *chip, u8 ch1_spare14_in, u8 ch1_tx_pga_prepa_bias_en, u8 ch1_spare13_in, u8 ch1_tx_prepa_en, u8 ch1_tx_prepa_cap_match_ctrl, u8 ch1_tx_prepa_cap_ctrl, u8 ch1_tx_prepa_gain_ctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1_spare14_in << 20) & ~((u32)0x0FF00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pga_prepa_bias_en << 19) & ~((u32)0x00080000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare13_in << 17) & ~((u32)0x00060000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_prepa_en << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_prepa_cap_match_ctrl << 13) & ~((u32)0x0000E000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_prepa_cap_ctrl << 8) & ~((u32)0x00001F00)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_prepa_gain_ctrl << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR, ((u32)ch1_spare14_in << 20) | ((u32)ch1_tx_pga_prepa_bias_en << 19) | ((u32)ch1_spare13_in << 17) | ((u32)ch1_tx_prepa_en << 16) | ((u32)ch1_tx_prepa_cap_match_ctrl << 13) | ((u32)ch1_tx_prepa_cap_ctrl << 8) | ((u32)ch1_tx_prepa_gain_ctrl << 0));
}

static inline void rfic_regs_ch_1_tx_ctrl_2_unpack(struct cl_chip *chip, u8 *ch1_spare14_in, u8 *ch1_tx_pga_prepa_bias_en, u8 *ch1_spare13_in, u8 *ch1_tx_prepa_en, u8 *ch1_tx_prepa_cap_match_ctrl, u8 *ch1_tx_prepa_cap_ctrl, u8 *ch1_tx_prepa_gain_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR);

	*ch1_spare14_in = (local_val & ((u32)0x0FF00000)) >> 20;
	*ch1_tx_pga_prepa_bias_en = (local_val & ((u32)0x00080000)) >> 19;
	*ch1_spare13_in = (local_val & ((u32)0x00060000)) >> 17;
	*ch1_tx_prepa_en = (local_val & ((u32)0x00010000)) >> 16;
	*ch1_tx_prepa_cap_match_ctrl = (local_val & ((u32)0x0000E000)) >> 13;
	*ch1_tx_prepa_cap_ctrl = (local_val & ((u32)0x00001F00)) >> 8;
	*ch1_tx_prepa_gain_ctrl = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 rfic_regs_ch_1_tx_ctrl_2_ch_1_spare_14_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x0FF00000)) >> 20);
}

static inline void rfic_regs_ch_1_tx_ctrl_2_ch_1_spare_14_in_setf(struct cl_chip *chip, u8 ch1spare14in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare14in << 20) & ~((u32)0x0FF00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR) & ~((u32)0x0FF00000)) | ((u32)ch1spare14in << 20));
}

#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_SPARE_14_IN .addr_index = 0x00000186, .size_minus_1 = (8 - 1), .shift = 20

static inline u8 rfic_regs_ch_1_tx_ctrl_2_ch_1_tx_pga_prepa_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline void rfic_regs_ch_1_tx_ctrl_2_ch_1_tx_pga_prepa_bias_en_setf(struct cl_chip *chip, u8 ch1txpgaprepabiasen)
{
	ASSERT_ERR_CHIP((((u32)ch1txpgaprepabiasen << 19) & ~((u32)0x00080000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR) & ~((u32)0x00080000)) | ((u32)ch1txpgaprepabiasen << 19));
}

#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PGA_PREPA_BIAS_EN .addr_index = 0x00000186, .size_minus_1 = (1 - 1), .shift = 19

static inline u8 rfic_regs_ch_1_tx_ctrl_2_ch_1_spare_13_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00060000)) >> 17);
}

static inline void rfic_regs_ch_1_tx_ctrl_2_ch_1_spare_13_in_setf(struct cl_chip *chip, u8 ch1spare13in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare13in << 17) & ~((u32)0x00060000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR) & ~((u32)0x00060000)) | ((u32)ch1spare13in << 17));
}

#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_SPARE_13_IN .addr_index = 0x00000186, .size_minus_1 = (2 - 1), .shift = 17

static inline u8 rfic_regs_ch_1_tx_ctrl_2_ch_1_tx_prepa_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void rfic_regs_ch_1_tx_ctrl_2_ch_1_tx_prepa_en_setf(struct cl_chip *chip, u8 ch1txprepaen)
{
	ASSERT_ERR_CHIP((((u32)ch1txprepaen << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR) & ~((u32)0x00010000)) | ((u32)ch1txprepaen << 16));
}

#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_EN .addr_index = 0x00000186, .size_minus_1 = (1 - 1), .shift = 16

static inline u8 rfic_regs_ch_1_tx_ctrl_2_ch_1_tx_prepa_cap_match_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x0000E000)) >> 13);
}

static inline void rfic_regs_ch_1_tx_ctrl_2_ch_1_tx_prepa_cap_match_ctrl_setf(struct cl_chip *chip, u8 ch1txprepacapmatchctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1txprepacapmatchctrl << 13) & ~((u32)0x0000E000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR) & ~((u32)0x0000E000)) | ((u32)ch1txprepacapmatchctrl << 13));
}

#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_CAP_MATCH_CTRL .addr_index = 0x00000186, .size_minus_1 = (3 - 1), .shift = 13

static inline u8 rfic_regs_ch_1_tx_ctrl_2_ch_1_tx_prepa_cap_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00001F00)) >> 8);
}

static inline void rfic_regs_ch_1_tx_ctrl_2_ch_1_tx_prepa_cap_ctrl_setf(struct cl_chip *chip, u8 ch1txprepacapctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1txprepacapctrl << 8) & ~((u32)0x00001F00)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR) & ~((u32)0x00001F00)) | ((u32)ch1txprepacapctrl << 8));
}

#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_CAP_CTRL .addr_index = 0x00000186, .size_minus_1 = (5 - 1), .shift = 8

static inline u8 rfic_regs_ch_1_tx_ctrl_2_ch_1_tx_prepa_gain_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

static inline void rfic_regs_ch_1_tx_ctrl_2_ch_1_tx_prepa_gain_ctrl_setf(struct cl_chip *chip, u8 ch1txprepagainctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1txprepagainctrl << 0) & ~((u32)0x000000FF)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_2_ADDR) & ~((u32)0x000000FF)) | ((u32)ch1txprepagainctrl << 0));
}

#define RFIC_REGS_CH_1_TX_CTRL_2_CH_1_TX_PREPA_GAIN_CTRL .addr_index = 0x00000186, .size_minus_1 = (8 - 1), .shift = 0

/**
 * @brief CH_1_TX_CTRL_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    13:10 CH1_spare17_in            0x00000000
 *    09:08 CH1_pdet_gain             0x00000000
 *    07:05 CH1_spare16_in            0x00000000
 *    04:02 CH1_pdet_filt_sel         0x00000000
 *    01    CH1_pdet_en               00000000
 *    00    CH1_spare15_in            00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_TX_CTRL_3_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000061C)
#define RFIC_REGS_CH_1_TX_CTRL_3_OFFSET      0x0000061C
#define RFIC_REGS_CH_1_TX_CTRL_3_INDEX       0x00000187
#define RFIC_REGS_CH_1_TX_CTRL_3_RESET       0x00000000

static inline u32 rfic_regs_ch_1_tx_ctrl_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR);
}

static inline void rfic_regs_ch_1_tx_ctrl_3_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR, value);
}

#define RFIC_REGS_CH_1_TX_CTRL_3 .addr_index = 0x00000187, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_SPARE_17_IN_MASK    ((u32)0x00003C00)
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_SPARE_17_IN_LSB    10
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_SPARE_17_IN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_PDET_GAIN_MASK    ((u32)0x00000300)
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_PDET_GAIN_LSB    8
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_PDET_GAIN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_SPARE_16_IN_MASK    ((u32)0x000000E0)
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_SPARE_16_IN_LSB    5
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_SPARE_16_IN_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_PDET_FILT_SEL_MASK    ((u32)0x0000001C)
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_PDET_FILT_SEL_LSB    2
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_PDET_FILT_SEL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_PDET_EN_BIT    ((u32)0x00000002)
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_PDET_EN_POS    1
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_SPARE_15_IN_BIT    ((u32)0x00000001)
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_SPARE_15_IN_POS    0

#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_SPARE_17_IN_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_PDET_GAIN_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_SPARE_16_IN_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_PDET_FILT_SEL_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_PDET_EN_RST    0x00000000
#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_SPARE_15_IN_RST    0x00000000

static inline void rfic_regs_ch_1_tx_ctrl_3_pack(struct cl_chip *chip, u8 ch1_spare17_in, u8 ch1_pdet_gain, u8 ch1_spare16_in, u8 ch1_pdet_filt_sel, u8 ch1_pdet_en, u8 ch1_spare15_in)
{
	ASSERT_ERR_CHIP((((u32)ch1_spare17_in << 10) & ~((u32)0x00003C00)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_pdet_gain << 8) & ~((u32)0x00000300)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare16_in << 5) & ~((u32)0x000000E0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_pdet_filt_sel << 2) & ~((u32)0x0000001C)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_pdet_en << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare15_in << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR, ((u32)ch1_spare17_in << 10) | ((u32)ch1_pdet_gain << 8) | ((u32)ch1_spare16_in << 5) | ((u32)ch1_pdet_filt_sel << 2) | ((u32)ch1_pdet_en << 1) | ((u32)ch1_spare15_in << 0));
}

static inline void rfic_regs_ch_1_tx_ctrl_3_unpack(struct cl_chip *chip, u8 *ch1_spare17_in, u8 *ch1_pdet_gain, u8 *ch1_spare16_in, u8 *ch1_pdet_filt_sel, u8 *ch1_pdet_en, u8 *ch1_spare15_in)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR);

	*ch1_spare17_in = (local_val & ((u32)0x00003C00)) >> 10;
	*ch1_pdet_gain = (local_val & ((u32)0x00000300)) >> 8;
	*ch1_spare16_in = (local_val & ((u32)0x000000E0)) >> 5;
	*ch1_pdet_filt_sel = (local_val & ((u32)0x0000001C)) >> 2;
	*ch1_pdet_en = (local_val & ((u32)0x00000002)) >> 1;
	*ch1_spare15_in = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_ch_1_tx_ctrl_3_ch_1_spare_17_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x00003C00)) >> 10);
}

static inline void rfic_regs_ch_1_tx_ctrl_3_ch_1_spare_17_in_setf(struct cl_chip *chip, u8 ch1spare17in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare17in << 10) & ~((u32)0x00003C00)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR) & ~((u32)0x00003C00)) | ((u32)ch1spare17in << 10));
}

#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_SPARE_17_IN .addr_index = 0x00000187, .size_minus_1 = (4 - 1), .shift = 10

static inline u8 rfic_regs_ch_1_tx_ctrl_3_ch_1_pdet_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x00000300)) >> 8);
}

static inline void rfic_regs_ch_1_tx_ctrl_3_ch_1_pdet_gain_setf(struct cl_chip *chip, u8 ch1pdetgain)
{
	ASSERT_ERR_CHIP((((u32)ch1pdetgain << 8) & ~((u32)0x00000300)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR) & ~((u32)0x00000300)) | ((u32)ch1pdetgain << 8));
}

#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_PDET_GAIN .addr_index = 0x00000187, .size_minus_1 = (2 - 1), .shift = 8

static inline u8 rfic_regs_ch_1_tx_ctrl_3_ch_1_spare_16_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x000000E0)) >> 5);
}

static inline void rfic_regs_ch_1_tx_ctrl_3_ch_1_spare_16_in_setf(struct cl_chip *chip, u8 ch1spare16in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare16in << 5) & ~((u32)0x000000E0)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR) & ~((u32)0x000000E0)) | ((u32)ch1spare16in << 5));
}

#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_SPARE_16_IN .addr_index = 0x00000187, .size_minus_1 = (3 - 1), .shift = 5

static inline u8 rfic_regs_ch_1_tx_ctrl_3_ch_1_pdet_filt_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x0000001C)) >> 2);
}

static inline void rfic_regs_ch_1_tx_ctrl_3_ch_1_pdet_filt_sel_setf(struct cl_chip *chip, u8 ch1pdetfiltsel)
{
	ASSERT_ERR_CHIP((((u32)ch1pdetfiltsel << 2) & ~((u32)0x0000001C)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR) & ~((u32)0x0000001C)) | ((u32)ch1pdetfiltsel << 2));
}

#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_PDET_FILT_SEL .addr_index = 0x00000187, .size_minus_1 = (3 - 1), .shift = 2

static inline u8 rfic_regs_ch_1_tx_ctrl_3_ch_1_pdet_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_ch_1_tx_ctrl_3_ch_1_pdet_en_setf(struct cl_chip *chip, u8 ch1pdeten)
{
	ASSERT_ERR_CHIP((((u32)ch1pdeten << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR) & ~((u32)0x00000002)) | ((u32)ch1pdeten << 1));
}

#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_PDET_EN .addr_index = 0x00000187, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_ch_1_tx_ctrl_3_ch_1_spare_15_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_ch_1_tx_ctrl_3_ch_1_spare_15_in_setf(struct cl_chip *chip, u8 ch1spare15in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare15in << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_TX_CTRL_3_ADDR) & ~((u32)0x00000001)) | ((u32)ch1spare15in << 0));
}

#define RFIC_REGS_CH_1_TX_CTRL_3_CH_1_SPARE_15_IN .addr_index = 0x00000187, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief CH_1_ADC_CONF register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    17:15 CH1_adc_curctrl           0x00000003
 *    14    CH1_adc_caln              00000000
 *    13    CH1_adc_ldo_en            00000000
 *    12:03 CH1_adc_tb                0x00000000
 *    02    CH1_adc_df                00000000
 *    01:00 CH1_adc_cf                0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_ADC_CONF_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000620)
#define RFIC_REGS_CH_1_ADC_CONF_OFFSET      0x00000620
#define RFIC_REGS_CH_1_ADC_CONF_INDEX       0x00000188
#define RFIC_REGS_CH_1_ADC_CONF_RESET       0x00018000

static inline u32 rfic_regs_ch_1_adc_conf_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR);
}

static inline void rfic_regs_ch_1_adc_conf_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR, value);
}

#define RFIC_REGS_CH_1_ADC_CONF .addr_index = 0x00000188, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_CURCTRL_MASK    ((u32)0x00038000)
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_CURCTRL_LSB    15
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_CURCTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_CALN_BIT    ((u32)0x00004000)
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_CALN_POS    14
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_LDO_EN_BIT    ((u32)0x00002000)
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_LDO_EN_POS    13
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_TB_MASK    ((u32)0x00001FF8)
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_TB_LSB    3
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_TB_WIDTH    ((u32)0x0000000A)
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_DF_BIT    ((u32)0x00000004)
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_DF_POS    2
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_CF_MASK    ((u32)0x00000003)
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_CF_LSB    0
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_CF_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_CURCTRL_RST    0x00000003
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_CALN_RST    0x00000000
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_LDO_EN_RST    0x00000000
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_TB_RST    0x00000000
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_DF_RST    0x00000000
#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_CF_RST    0x00000000

static inline void rfic_regs_ch_1_adc_conf_pack(struct cl_chip *chip, u8 ch1_adc_curctrl, u8 ch1_adc_caln, u8 ch1_adc_ldo_en, u16 ch1_adc_tb, u8 ch1_adc_df, u8 ch1_adc_cf)
{
	ASSERT_ERR_CHIP((((u32)ch1_adc_curctrl << 15) & ~((u32)0x00038000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_adc_caln << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_adc_ldo_en << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_adc_tb << 3) & ~((u32)0x00001FF8)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_adc_df << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_adc_cf << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR, ((u32)ch1_adc_curctrl << 15) | ((u32)ch1_adc_caln << 14) | ((u32)ch1_adc_ldo_en << 13) | ((u32)ch1_adc_tb << 3) | ((u32)ch1_adc_df << 2) | ((u32)ch1_adc_cf << 0));
}

static inline void rfic_regs_ch_1_adc_conf_unpack(struct cl_chip *chip, u8 *ch1_adc_curctrl, u8 *ch1_adc_caln, u8 *ch1_adc_ldo_en, u16 *ch1_adc_tb, u8 *ch1_adc_df, u8 *ch1_adc_cf)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR);

	*ch1_adc_curctrl = (local_val & ((u32)0x00038000)) >> 15;
	*ch1_adc_caln = (local_val & ((u32)0x00004000)) >> 14;
	*ch1_adc_ldo_en = (local_val & ((u32)0x00002000)) >> 13;
	*ch1_adc_tb = (local_val & ((u32)0x00001FF8)) >> 3;
	*ch1_adc_df = (local_val & ((u32)0x00000004)) >> 2;
	*ch1_adc_cf = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_ch_1_adc_conf_ch_1_adc_curctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00038000)) >> 15);
}

static inline void rfic_regs_ch_1_adc_conf_ch_1_adc_curctrl_setf(struct cl_chip *chip, u8 ch1adccurctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1adccurctrl << 15) & ~((u32)0x00038000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR) & ~((u32)0x00038000)) | ((u32)ch1adccurctrl << 15));
}

#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_CURCTRL .addr_index = 0x00000188, .size_minus_1 = (3 - 1), .shift = 15

static inline u8 rfic_regs_ch_1_adc_conf_ch_1_adc_caln_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void rfic_regs_ch_1_adc_conf_ch_1_adc_caln_setf(struct cl_chip *chip, u8 ch1adccaln)
{
	ASSERT_ERR_CHIP((((u32)ch1adccaln << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR) & ~((u32)0x00004000)) | ((u32)ch1adccaln << 14));
}

#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_CALN .addr_index = 0x00000188, .size_minus_1 = (1 - 1), .shift = 14

static inline u8 rfic_regs_ch_1_adc_conf_ch_1_adc_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void rfic_regs_ch_1_adc_conf_ch_1_adc_ldo_en_setf(struct cl_chip *chip, u8 ch1adcldoen)
{
	ASSERT_ERR_CHIP((((u32)ch1adcldoen << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR) & ~((u32)0x00002000)) | ((u32)ch1adcldoen << 13));
}

#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_LDO_EN .addr_index = 0x00000188, .size_minus_1 = (1 - 1), .shift = 13

static inline u16 rfic_regs_ch_1_adc_conf_ch_1_adc_tb_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR);

	return (u16)((local_val & ((u32)0x00001FF8)) >> 3);
}

static inline void rfic_regs_ch_1_adc_conf_ch_1_adc_tb_setf(struct cl_chip *chip, u16 ch1adctb)
{
	ASSERT_ERR_CHIP((((u32)ch1adctb << 3) & ~((u32)0x00001FF8)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR) & ~((u32)0x00001FF8)) | ((u32)ch1adctb << 3));
}

#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_TB .addr_index = 0x00000188, .size_minus_1 = (10 - 1), .shift = 3

static inline u8 rfic_regs_ch_1_adc_conf_ch_1_adc_df_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_ch_1_adc_conf_ch_1_adc_df_setf(struct cl_chip *chip, u8 ch1adcdf)
{
	ASSERT_ERR_CHIP((((u32)ch1adcdf << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR) & ~((u32)0x00000004)) | ((u32)ch1adcdf << 2));
}

#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_DF .addr_index = 0x00000188, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_ch_1_adc_conf_ch_1_adc_cf_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_ch_1_adc_conf_ch_1_adc_cf_setf(struct cl_chip *chip, u8 ch1adccf)
{
	ASSERT_ERR_CHIP((((u32)ch1adccf << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_ADC_CONF_ADDR) & ~((u32)0x00000003)) | ((u32)ch1adccf << 0));
}

#define RFIC_REGS_CH_1_ADC_CONF_CH_1_ADC_CF .addr_index = 0x00000188, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief CH_1_DAC_CONF register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    03    CH1_dac_lpbk_en           00000000
 *    02    CH1_dac_outmode           00000000
 *    01    CH1_dac_testmode          00000000
 *    00    CH1_dac_twocom_ob_sel     00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_DAC_CONF_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000624)
#define RFIC_REGS_CH_1_DAC_CONF_OFFSET      0x00000624
#define RFIC_REGS_CH_1_DAC_CONF_INDEX       0x00000189
#define RFIC_REGS_CH_1_DAC_CONF_RESET       0x00000000

static inline u32 rfic_regs_ch_1_dac_conf_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_DAC_CONF_ADDR);
}

static inline void rfic_regs_ch_1_dac_conf_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_1_DAC_CONF_ADDR, value);
}

#define RFIC_REGS_CH_1_DAC_CONF .addr_index = 0x00000189, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_DAC_CONF_CH_1_DAC_LPBK_EN_BIT    ((u32)0x00000008)
#define RFIC_REGS_CH_1_DAC_CONF_CH_1_DAC_LPBK_EN_POS    3
#define RFIC_REGS_CH_1_DAC_CONF_CH_1_DAC_OUTMODE_BIT    ((u32)0x00000004)
#define RFIC_REGS_CH_1_DAC_CONF_CH_1_DAC_OUTMODE_POS    2
#define RFIC_REGS_CH_1_DAC_CONF_CH_1_DAC_TESTMODE_BIT    ((u32)0x00000002)
#define RFIC_REGS_CH_1_DAC_CONF_CH_1_DAC_TESTMODE_POS    1
#define RFIC_REGS_CH_1_DAC_CONF_CH_1_DAC_TWOCOM_OB_SEL_BIT    ((u32)0x00000001)
#define RFIC_REGS_CH_1_DAC_CONF_CH_1_DAC_TWOCOM_OB_SEL_POS    0

#define RFIC_REGS_CH_1_DAC_CONF_CH_1_DAC_LPBK_EN_RST    0x00000000
#define RFIC_REGS_CH_1_DAC_CONF_CH_1_DAC_OUTMODE_RST    0x00000000
#define RFIC_REGS_CH_1_DAC_CONF_CH_1_DAC_TESTMODE_RST    0x00000000
#define RFIC_REGS_CH_1_DAC_CONF_CH_1_DAC_TWOCOM_OB_SEL_RST    0x00000000

static inline void rfic_regs_ch_1_dac_conf_pack(struct cl_chip *chip, u8 ch1_dac_lpbk_en, u8 ch1_dac_outmode, u8 ch1_dac_testmode, u8 ch1_dac_twocom_ob_sel)
{
	ASSERT_ERR_CHIP((((u32)ch1_dac_lpbk_en << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_dac_outmode << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_dac_testmode << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_dac_twocom_ob_sel << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_DAC_CONF_ADDR, ((u32)ch1_dac_lpbk_en << 3) | ((u32)ch1_dac_outmode << 2) | ((u32)ch1_dac_testmode << 1) | ((u32)ch1_dac_twocom_ob_sel << 0));
}

static inline void rfic_regs_ch_1_dac_conf_unpack(struct cl_chip *chip, u8 *ch1_dac_lpbk_en, u8 *ch1_dac_outmode, u8 *ch1_dac_testmode, u8 *ch1_dac_twocom_ob_sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_DAC_CONF_ADDR);

	*ch1_dac_lpbk_en = (local_val & ((u32)0x00000008)) >> 3;
	*ch1_dac_outmode = (local_val & ((u32)0x00000004)) >> 2;
	*ch1_dac_testmode = (local_val & ((u32)0x00000002)) >> 1;
	*ch1_dac_twocom_ob_sel = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_ch_1_dac_conf_ch_1_dac_lpbk_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_DAC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_ch_1_dac_conf_ch_1_dac_lpbk_en_setf(struct cl_chip *chip, u8 ch1daclpbken)
{
	ASSERT_ERR_CHIP((((u32)ch1daclpbken << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_DAC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_DAC_CONF_ADDR) & ~((u32)0x00000008)) | ((u32)ch1daclpbken << 3));
}

#define RFIC_REGS_CH_1_DAC_CONF_CH_1_DAC_LPBK_EN .addr_index = 0x00000189, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_ch_1_dac_conf_ch_1_dac_outmode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_DAC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_ch_1_dac_conf_ch_1_dac_outmode_setf(struct cl_chip *chip, u8 ch1dacoutmode)
{
	ASSERT_ERR_CHIP((((u32)ch1dacoutmode << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_DAC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_DAC_CONF_ADDR) & ~((u32)0x00000004)) | ((u32)ch1dacoutmode << 2));
}

#define RFIC_REGS_CH_1_DAC_CONF_CH_1_DAC_OUTMODE .addr_index = 0x00000189, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_ch_1_dac_conf_ch_1_dac_testmode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_DAC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_ch_1_dac_conf_ch_1_dac_testmode_setf(struct cl_chip *chip, u8 ch1dactestmode)
{
	ASSERT_ERR_CHIP((((u32)ch1dactestmode << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_DAC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_DAC_CONF_ADDR) & ~((u32)0x00000002)) | ((u32)ch1dactestmode << 1));
}

#define RFIC_REGS_CH_1_DAC_CONF_CH_1_DAC_TESTMODE .addr_index = 0x00000189, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_ch_1_dac_conf_ch_1_dac_twocom_ob_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_DAC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_ch_1_dac_conf_ch_1_dac_twocom_ob_sel_setf(struct cl_chip *chip, u8 ch1dactwocomobsel)
{
	ASSERT_ERR_CHIP((((u32)ch1dactwocomobsel << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_DAC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_DAC_CONF_ADDR) & ~((u32)0x00000001)) | ((u32)ch1dactwocomobsel << 0));
}

#define RFIC_REGS_CH_1_DAC_CONF_CH_1_DAC_TWOCOM_OB_SEL .addr_index = 0x00000189, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief CH_1_DCOC_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    02    CH1_spare18_in            00000000
 *    01    CH1_dcoc_comp_Q           00000000
 *    00    CH1_dcoc_comp_I           00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_DCOC_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000628)
#define RFIC_REGS_CH_1_DCOC_OUT_OFFSET      0x00000628
#define RFIC_REGS_CH_1_DCOC_OUT_INDEX       0x0000018A
#define RFIC_REGS_CH_1_DCOC_OUT_RESET       0x00000000

static inline u32 rfic_regs_ch_1_dcoc_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_DCOC_OUT_ADDR);
}

#define RFIC_REGS_CH_1_DCOC_OUT .addr_index = 0x0000018A, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_DCOC_OUT_CH_1_SPARE_18_IN_BIT    ((u32)0x00000004)
#define RFIC_REGS_CH_1_DCOC_OUT_CH_1_SPARE_18_IN_POS    2
#define RFIC_REGS_CH_1_DCOC_OUT_CH_1_DCOC_COMP_Q_BIT    ((u32)0x00000002)
#define RFIC_REGS_CH_1_DCOC_OUT_CH_1_DCOC_COMP_Q_POS    1
#define RFIC_REGS_CH_1_DCOC_OUT_CH_1_DCOC_COMP_I_BIT    ((u32)0x00000001)
#define RFIC_REGS_CH_1_DCOC_OUT_CH_1_DCOC_COMP_I_POS    0

#define RFIC_REGS_CH_1_DCOC_OUT_CH_1_SPARE_18_IN_RST    0x00000000
#define RFIC_REGS_CH_1_DCOC_OUT_CH_1_DCOC_COMP_Q_RST    0x00000000
#define RFIC_REGS_CH_1_DCOC_OUT_CH_1_DCOC_COMP_I_RST    0x00000000

static inline void rfic_regs_ch_1_dcoc_out_unpack(struct cl_chip *chip, u8 *ch1_spare18_in, u8 *ch1_dcoc_comp_q, u8 *ch1_dcoc_comp_i)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_DCOC_OUT_ADDR);

	*ch1_spare18_in = (local_val & ((u32)0x00000004)) >> 2;
	*ch1_dcoc_comp_q = (local_val & ((u32)0x00000002)) >> 1;
	*ch1_dcoc_comp_i = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_ch_1_dcoc_out_ch_1_spare_18_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_DCOC_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

#define RFIC_REGS_CH_1_DCOC_OUT_CH_1_SPARE_18_IN .addr_index = 0x0000018A, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_ch_1_dcoc_out_ch_1_dcoc_comp_q_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_DCOC_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

#define RFIC_REGS_CH_1_DCOC_OUT_CH_1_DCOC_COMP_Q .addr_index = 0x0000018A, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_ch_1_dcoc_out_ch_1_dcoc_comp_i_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_DCOC_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

#define RFIC_REGS_CH_1_DCOC_OUT_CH_1_DCOC_COMP_I .addr_index = 0x0000018A, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief CH_1_ADC_STATUS register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    02    CH1_adc_ovfq              00000000
 *    01    CH1_adc_ovfi              00000000
 *    00    CH1_adc_cal_busy          00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_ADC_STATUS_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000062C)
#define RFIC_REGS_CH_1_ADC_STATUS_OFFSET      0x0000062C
#define RFIC_REGS_CH_1_ADC_STATUS_INDEX       0x0000018B
#define RFIC_REGS_CH_1_ADC_STATUS_RESET       0x00000000

static inline u32 rfic_regs_ch_1_adc_status_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_ADC_STATUS_ADDR);
}

#define RFIC_REGS_CH_1_ADC_STATUS .addr_index = 0x0000018B, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_ADC_STATUS_CH_1_ADC_OVFQ_BIT    ((u32)0x00000004)
#define RFIC_REGS_CH_1_ADC_STATUS_CH_1_ADC_OVFQ_POS    2
#define RFIC_REGS_CH_1_ADC_STATUS_CH_1_ADC_OVFI_BIT    ((u32)0x00000002)
#define RFIC_REGS_CH_1_ADC_STATUS_CH_1_ADC_OVFI_POS    1
#define RFIC_REGS_CH_1_ADC_STATUS_CH_1_ADC_CAL_BUSY_BIT    ((u32)0x00000001)
#define RFIC_REGS_CH_1_ADC_STATUS_CH_1_ADC_CAL_BUSY_POS    0

#define RFIC_REGS_CH_1_ADC_STATUS_CH_1_ADC_OVFQ_RST    0x00000000
#define RFIC_REGS_CH_1_ADC_STATUS_CH_1_ADC_OVFI_RST    0x00000000
#define RFIC_REGS_CH_1_ADC_STATUS_CH_1_ADC_CAL_BUSY_RST    0x00000000

static inline void rfic_regs_ch_1_adc_status_unpack(struct cl_chip *chip, u8 *ch1_adc_ovfq, u8 *ch1_adc_ovfi, u8 *ch1_adc_cal_busy)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ADC_STATUS_ADDR);

	*ch1_adc_ovfq = (local_val & ((u32)0x00000004)) >> 2;
	*ch1_adc_ovfi = (local_val & ((u32)0x00000002)) >> 1;
	*ch1_adc_cal_busy = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_ch_1_adc_status_ch_1_adc_ovfq_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ADC_STATUS_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

#define RFIC_REGS_CH_1_ADC_STATUS_CH_1_ADC_OVFQ .addr_index = 0x0000018B, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_ch_1_adc_status_ch_1_adc_ovfi_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ADC_STATUS_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

#define RFIC_REGS_CH_1_ADC_STATUS_CH_1_ADC_OVFI .addr_index = 0x0000018B, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_ch_1_adc_status_ch_1_adc_cal_busy_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ADC_STATUS_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

#define RFIC_REGS_CH_1_ADC_STATUS_CH_1_ADC_CAL_BUSY .addr_index = 0x0000018B, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief CH_1_SPARE_IN register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 CH1_lpf_tx_mode_gain      0x00000000
 *    27:23 CH1_lpf_gain_index_offset 0x00000000
 *    22:18 CH1_tx_pa_lb_stg2_vg3_pd  0x00000000
 *    17:13 CH1_tx_pa_lb_stg2_vg2_pd  0x00000000
 *    12:08 CH1_tx_pa_lb_stg1_vg3_pd  0x00000000
 *    07:03 CH1_tx_pa_lb_stg1_vg2_pd  0x00000000
 *    02    CH1_tx_out_res_lb_pa      00000000
 *    01    CH1_tx_out_res_hb_pa      00000000
 *    00    CH1_rssi_rstn             00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_SPARE_IN_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000630)
#define RFIC_REGS_CH_1_SPARE_IN_OFFSET      0x00000630
#define RFIC_REGS_CH_1_SPARE_IN_INDEX       0x0000018C
#define RFIC_REGS_CH_1_SPARE_IN_RESET       0x00000000

static inline u32 rfic_regs_ch_1_spare_in_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR);
}

static inline void rfic_regs_ch_1_spare_in_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR, value);
}

#define RFIC_REGS_CH_1_SPARE_IN .addr_index = 0x0000018C, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_LPF_TX_MODE_GAIN_MASK    ((u32)0xF0000000)
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_LPF_TX_MODE_GAIN_LSB    28
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_LPF_TX_MODE_GAIN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_LPF_GAIN_INDEX_OFFSET_MASK    ((u32)0x0F800000)
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_LPF_GAIN_INDEX_OFFSET_LSB    23
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_LPF_GAIN_INDEX_OFFSET_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_2_VG_3_PD_MASK    ((u32)0x007C0000)
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_2_VG_3_PD_LSB    18
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_2_VG_3_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_2_VG_2_PD_MASK    ((u32)0x0003E000)
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_2_VG_2_PD_LSB    13
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_2_VG_2_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_1_VG_3_PD_MASK    ((u32)0x00001F00)
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_1_VG_3_PD_LSB    8
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_1_VG_3_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_1_VG_2_PD_MASK    ((u32)0x000000F8)
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_1_VG_2_PD_LSB    3
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_1_VG_2_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_OUT_RES_LB_PA_BIT    ((u32)0x00000004)
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_OUT_RES_LB_PA_POS    2
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_OUT_RES_HB_PA_BIT    ((u32)0x00000002)
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_OUT_RES_HB_PA_POS    1
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_RSSI_RSTN_BIT    ((u32)0x00000001)
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_RSSI_RSTN_POS    0

#define RFIC_REGS_CH_1_SPARE_IN_CH_1_LPF_TX_MODE_GAIN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_LPF_GAIN_INDEX_OFFSET_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_2_VG_3_PD_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_2_VG_2_PD_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_1_VG_3_PD_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_1_VG_2_PD_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_OUT_RES_LB_PA_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_OUT_RES_HB_PA_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_IN_CH_1_RSSI_RSTN_RST    0x00000000

static inline void rfic_regs_ch_1_spare_in_pack(struct cl_chip *chip, u8 ch1_lpf_tx_mode_gain, u8 ch1_lpf_gain_index_offset, u8 ch1_tx_pa_lb_stg2_vg3_pd, u8 ch1_tx_pa_lb_stg2_vg2_pd, u8 ch1_tx_pa_lb_stg1_vg3_pd, u8 ch1_tx_pa_lb_stg1_vg2_pd, u8 ch1_tx_out_res_lb_pa, u8 ch1_tx_out_res_hb_pa, u8 ch1_rssi_rstn)
{
	ASSERT_ERR_CHIP((((u32)ch1_lpf_tx_mode_gain << 28) & ~((u32)0xF0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_lpf_gain_index_offset << 23) & ~((u32)0x0F800000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_stg2_vg3_pd << 18) & ~((u32)0x007C0000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_stg2_vg2_pd << 13) & ~((u32)0x0003E000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_stg1_vg3_pd << 8) & ~((u32)0x00001F00)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_stg1_vg2_pd << 3) & ~((u32)0x000000F8)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_out_res_lb_pa << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_out_res_hb_pa << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rssi_rstn << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR, ((u32)ch1_lpf_tx_mode_gain << 28) | ((u32)ch1_lpf_gain_index_offset << 23) | ((u32)ch1_tx_pa_lb_stg2_vg3_pd << 18) | ((u32)ch1_tx_pa_lb_stg2_vg2_pd << 13) | ((u32)ch1_tx_pa_lb_stg1_vg3_pd << 8) | ((u32)ch1_tx_pa_lb_stg1_vg2_pd << 3) | ((u32)ch1_tx_out_res_lb_pa << 2) | ((u32)ch1_tx_out_res_hb_pa << 1) | ((u32)ch1_rssi_rstn << 0));
}

static inline void rfic_regs_ch_1_spare_in_unpack(struct cl_chip *chip, u8 *ch1_lpf_tx_mode_gain, u8 *ch1_lpf_gain_index_offset, u8 *ch1_tx_pa_lb_stg2_vg3_pd, u8 *ch1_tx_pa_lb_stg2_vg2_pd, u8 *ch1_tx_pa_lb_stg1_vg3_pd, u8 *ch1_tx_pa_lb_stg1_vg2_pd, u8 *ch1_tx_out_res_lb_pa, u8 *ch1_tx_out_res_hb_pa, u8 *ch1_rssi_rstn)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR);

	*ch1_lpf_tx_mode_gain = (local_val & ((u32)0xF0000000)) >> 28;
	*ch1_lpf_gain_index_offset = (local_val & ((u32)0x0F800000)) >> 23;
	*ch1_tx_pa_lb_stg2_vg3_pd = (local_val & ((u32)0x007C0000)) >> 18;
	*ch1_tx_pa_lb_stg2_vg2_pd = (local_val & ((u32)0x0003E000)) >> 13;
	*ch1_tx_pa_lb_stg1_vg3_pd = (local_val & ((u32)0x00001F00)) >> 8;
	*ch1_tx_pa_lb_stg1_vg2_pd = (local_val & ((u32)0x000000F8)) >> 3;
	*ch1_tx_out_res_lb_pa = (local_val & ((u32)0x00000004)) >> 2;
	*ch1_tx_out_res_hb_pa = (local_val & ((u32)0x00000002)) >> 1;
	*ch1_rssi_rstn = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_ch_1_spare_in_ch_1_lpf_tx_mode_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0xF0000000)) >> 28);
}

static inline void rfic_regs_ch_1_spare_in_ch_1_lpf_tx_mode_gain_setf(struct cl_chip *chip, u8 ch1lpftxmodegain)
{
	ASSERT_ERR_CHIP((((u32)ch1lpftxmodegain << 28) & ~((u32)0xF0000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR) & ~((u32)0xF0000000)) | ((u32)ch1lpftxmodegain << 28));
}

#define RFIC_REGS_CH_1_SPARE_IN_CH_1_LPF_TX_MODE_GAIN .addr_index = 0x0000018C, .size_minus_1 = (4 - 1), .shift = 28

static inline u8 rfic_regs_ch_1_spare_in_ch_1_lpf_gain_index_offset_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0x0F800000)) >> 23);
}

static inline void rfic_regs_ch_1_spare_in_ch_1_lpf_gain_index_offset_setf(struct cl_chip *chip, u8 ch1lpfgainindexoffset)
{
	ASSERT_ERR_CHIP((((u32)ch1lpfgainindexoffset << 23) & ~((u32)0x0F800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR) & ~((u32)0x0F800000)) | ((u32)ch1lpfgainindexoffset << 23));
}

#define RFIC_REGS_CH_1_SPARE_IN_CH_1_LPF_GAIN_INDEX_OFFSET .addr_index = 0x0000018C, .size_minus_1 = (5 - 1), .shift = 23

static inline u8 rfic_regs_ch_1_spare_in_ch_1_tx_pa_lb_stg_2_vg_3_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0x007C0000)) >> 18);
}

static inline void rfic_regs_ch_1_spare_in_ch_1_tx_pa_lb_stg_2_vg_3_pd_setf(struct cl_chip *chip, u8 ch1txpalbstg2vg3pd)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbstg2vg3pd << 18) & ~((u32)0x007C0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR) & ~((u32)0x007C0000)) | ((u32)ch1txpalbstg2vg3pd << 18));
}

#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_2_VG_3_PD .addr_index = 0x0000018C, .size_minus_1 = (5 - 1), .shift = 18

static inline u8 rfic_regs_ch_1_spare_in_ch_1_tx_pa_lb_stg_2_vg_2_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0x0003E000)) >> 13);
}

static inline void rfic_regs_ch_1_spare_in_ch_1_tx_pa_lb_stg_2_vg_2_pd_setf(struct cl_chip *chip, u8 ch1txpalbstg2vg2pd)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbstg2vg2pd << 13) & ~((u32)0x0003E000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR) & ~((u32)0x0003E000)) | ((u32)ch1txpalbstg2vg2pd << 13));
}

#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_2_VG_2_PD .addr_index = 0x0000018C, .size_minus_1 = (5 - 1), .shift = 13

static inline u8 rfic_regs_ch_1_spare_in_ch_1_tx_pa_lb_stg_1_vg_3_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0x00001F00)) >> 8);
}

static inline void rfic_regs_ch_1_spare_in_ch_1_tx_pa_lb_stg_1_vg_3_pd_setf(struct cl_chip *chip, u8 ch1txpalbstg1vg3pd)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbstg1vg3pd << 8) & ~((u32)0x00001F00)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR) & ~((u32)0x00001F00)) | ((u32)ch1txpalbstg1vg3pd << 8));
}

#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_1_VG_3_PD .addr_index = 0x0000018C, .size_minus_1 = (5 - 1), .shift = 8

static inline u8 rfic_regs_ch_1_spare_in_ch_1_tx_pa_lb_stg_1_vg_2_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0x000000F8)) >> 3);
}

static inline void rfic_regs_ch_1_spare_in_ch_1_tx_pa_lb_stg_1_vg_2_pd_setf(struct cl_chip *chip, u8 ch1txpalbstg1vg2pd)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbstg1vg2pd << 3) & ~((u32)0x000000F8)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR) & ~((u32)0x000000F8)) | ((u32)ch1txpalbstg1vg2pd << 3));
}

#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_PA_LB_STG_1_VG_2_PD .addr_index = 0x0000018C, .size_minus_1 = (5 - 1), .shift = 3

static inline u8 rfic_regs_ch_1_spare_in_ch_1_tx_out_res_lb_pa_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_ch_1_spare_in_ch_1_tx_out_res_lb_pa_setf(struct cl_chip *chip, u8 ch1txoutreslbpa)
{
	ASSERT_ERR_CHIP((((u32)ch1txoutreslbpa << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR) & ~((u32)0x00000004)) | ((u32)ch1txoutreslbpa << 2));
}

#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_OUT_RES_LB_PA .addr_index = 0x0000018C, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_ch_1_spare_in_ch_1_tx_out_res_hb_pa_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_ch_1_spare_in_ch_1_tx_out_res_hb_pa_setf(struct cl_chip *chip, u8 ch1txoutreshbpa)
{
	ASSERT_ERR_CHIP((((u32)ch1txoutreshbpa << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR) & ~((u32)0x00000002)) | ((u32)ch1txoutreshbpa << 1));
}

#define RFIC_REGS_CH_1_SPARE_IN_CH_1_TX_OUT_RES_HB_PA .addr_index = 0x0000018C, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_ch_1_spare_in_ch_1_rssi_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_ch_1_spare_in_ch_1_rssi_rstn_setf(struct cl_chip *chip, u8 ch1rssirstn)
{
	ASSERT_ERR_CHIP((((u32)ch1rssirstn << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_IN_ADDR) & ~((u32)0x00000001)) | ((u32)ch1rssirstn << 0));
}

#define RFIC_REGS_CH_1_SPARE_IN_CH_1_RSSI_RSTN .addr_index = 0x0000018C, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief CH_1_SPARE_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 CH1_rx_lna_st2_cur_ctrl   0x00000000
 *    27:24 CH1_rx_lna_st1_cur_ctrl   0x00000000
 *    23    dac_wifi_1_STANDBYNQ      00000000
 *    22    dac_wifi_1_STANDBYNI      00000000
 *    21    dac_wifi_1_PDN            00000000
 *    20:19 adc_wifi_1_EN             0x00000000
 *    18    CH1_tx_pa_hb_en           00000000
 *    17    CH1_tx_pa_lb_en           00000000
 *    16    CH1_trsw_pa_5to7g_en      00000000
 *    15    CH1_trsw_pa_2p4g_en       00000000
 *    14    CH1_trsw_lna_5to7g_en     00000000
 *    13    CH1_trsw_lna_2p4g_en      00000000
 *    12    CH1_rx_lna_st2_bias_en    00000000
 *    11    CH1_rx_lna_st2_en         00000000
 *    10    CH1_rx_lna_st1_bias_en    00000000
 *    09    CH1_rx_lna_st1_en         00000000
 *    08    CH1_rx_gm_en              00000000
 *    07    CH1_tx_pga_prepa_bias_en  00000000
 *    06    CH1_tx_prepa_en           00000000
 *    05    CH1_tx_pga_en             00000000
 *    04    CH1_tx_mix_en             00000000
 *    03    CH1_bb_tx_mode            00000000
 *    02    CH1_localdiv_rxtxn        00000000
 *    01    CH1_tx_gain_lut_write_ack 00000000
 *    00    CH1_rx_gain_lut_write_ack 00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_SPARE_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000634)
#define RFIC_REGS_CH_1_SPARE_OUT_OFFSET      0x00000634
#define RFIC_REGS_CH_1_SPARE_OUT_INDEX       0x0000018D
#define RFIC_REGS_CH_1_SPARE_OUT_RESET       0x00000000

static inline u32 rfic_regs_ch_1_spare_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);
}

#define RFIC_REGS_CH_1_SPARE_OUT .addr_index = 0x0000018D, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_2_CUR_CTRL_MASK    ((u32)0xF0000000)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_2_CUR_CTRL_LSB    28
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_2_CUR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_1_CUR_CTRL_MASK    ((u32)0x0F000000)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_1_CUR_CTRL_LSB    24
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_1_CUR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_SPARE_OUT_DAC_WIFI_1_STANDBYNQ_BIT    ((u32)0x00800000)
#define RFIC_REGS_CH_1_SPARE_OUT_DAC_WIFI_1_STANDBYNQ_POS    23
#define RFIC_REGS_CH_1_SPARE_OUT_DAC_WIFI_1_STANDBYNI_BIT    ((u32)0x00400000)
#define RFIC_REGS_CH_1_SPARE_OUT_DAC_WIFI_1_STANDBYNI_POS    22
#define RFIC_REGS_CH_1_SPARE_OUT_DAC_WIFI_1_PDN_BIT    ((u32)0x00200000)
#define RFIC_REGS_CH_1_SPARE_OUT_DAC_WIFI_1_PDN_POS    21
#define RFIC_REGS_CH_1_SPARE_OUT_ADC_WIFI_1_EN_MASK    ((u32)0x00180000)
#define RFIC_REGS_CH_1_SPARE_OUT_ADC_WIFI_1_EN_LSB    19
#define RFIC_REGS_CH_1_SPARE_OUT_ADC_WIFI_1_EN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PA_HB_EN_BIT    ((u32)0x00040000)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PA_HB_EN_POS    18
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PA_LB_EN_BIT    ((u32)0x00020000)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PA_LB_EN_POS    17
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TRSW_PA_5_TO_7_G_EN_BIT    ((u32)0x00010000)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TRSW_PA_5_TO_7_G_EN_POS    16
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TRSW_PA_2_P_4_G_EN_BIT    ((u32)0x00008000)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TRSW_PA_2_P_4_G_EN_POS    15
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TRSW_LNA_5_TO_7_G_EN_BIT    ((u32)0x00004000)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TRSW_LNA_5_TO_7_G_EN_POS    14
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TRSW_LNA_2_P_4_G_EN_BIT    ((u32)0x00002000)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TRSW_LNA_2_P_4_G_EN_POS    13
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_2_BIAS_EN_BIT    ((u32)0x00001000)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_2_BIAS_EN_POS    12
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_2_EN_BIT    ((u32)0x00000800)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_2_EN_POS    11
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_1_BIAS_EN_BIT    ((u32)0x00000400)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_1_BIAS_EN_POS    10
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_1_EN_BIT    ((u32)0x00000200)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_1_EN_POS    9
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_GM_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_GM_EN_POS    8
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PGA_PREPA_BIAS_EN_BIT    ((u32)0x00000080)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PGA_PREPA_BIAS_EN_POS    7
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PREPA_EN_BIT    ((u32)0x00000040)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PREPA_EN_POS    6
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PGA_EN_BIT    ((u32)0x00000020)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PGA_EN_POS    5
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_MIX_EN_BIT    ((u32)0x00000010)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_MIX_EN_POS    4
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_BB_TX_MODE_BIT    ((u32)0x00000008)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_BB_TX_MODE_POS    3
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_LOCALDIV_RXTXN_BIT    ((u32)0x00000004)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_LOCALDIV_RXTXN_POS    2
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_GAIN_LUT_WRITE_ACK_BIT    ((u32)0x00000002)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_GAIN_LUT_WRITE_ACK_POS    1
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_GAIN_LUT_WRITE_ACK_BIT    ((u32)0x00000001)
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_GAIN_LUT_WRITE_ACK_POS    0

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_2_CUR_CTRL_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_1_CUR_CTRL_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_DAC_WIFI_1_STANDBYNQ_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_DAC_WIFI_1_STANDBYNI_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_DAC_WIFI_1_PDN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_ADC_WIFI_1_EN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PA_HB_EN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PA_LB_EN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TRSW_PA_5_TO_7_G_EN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TRSW_PA_2_P_4_G_EN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TRSW_LNA_5_TO_7_G_EN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TRSW_LNA_2_P_4_G_EN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_2_BIAS_EN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_2_EN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_1_BIAS_EN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_1_EN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_GM_EN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PGA_PREPA_BIAS_EN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PREPA_EN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PGA_EN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_MIX_EN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_BB_TX_MODE_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_LOCALDIV_RXTXN_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_GAIN_LUT_WRITE_ACK_RST    0x00000000
#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_GAIN_LUT_WRITE_ACK_RST    0x00000000

static inline void rfic_regs_ch_1_spare_out_unpack(struct cl_chip *chip, u8 *ch1_rx_lna_st2_cur_ctrl, u8 *ch1_rx_lna_st1_cur_ctrl, u8 *dac_wifi_1_standbynq, u8 *dac_wifi_1_standbyni, u8 *dac_wifi_1_pdn, u8 *adc_wifi_1_en, u8 *ch1_tx_pa_hb_en, u8 *ch1_tx_pa_lb_en, u8 *ch1_trsw_pa_5to7g_en, u8 *ch1_trsw_pa_2p4g_en, u8 *ch1_trsw_lna_5to7g_en, u8 *ch1_trsw_lna_2p4g_en, u8 *ch1_rx_lna_st2_bias_en, u8 *ch1_rx_lna_st2_en, u8 *ch1_rx_lna_st1_bias_en, u8 *ch1_rx_lna_st1_en, u8 *ch1_rx_gm_en, u8 *ch1_tx_pga_prepa_bias_en, u8 *ch1_tx_prepa_en, u8 *ch1_tx_pga_en, u8 *ch1_tx_mix_en, u8 *ch1_bb_tx_mode, u8 *ch1_localdiv_rxtxn, u8 *ch1_tx_gain_lut_write_ack, u8 *ch1_rx_gain_lut_write_ack)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	*ch1_rx_lna_st2_cur_ctrl = (local_val & ((u32)0xF0000000)) >> 28;
	*ch1_rx_lna_st1_cur_ctrl = (local_val & ((u32)0x0F000000)) >> 24;
	*dac_wifi_1_standbynq = (local_val & ((u32)0x00800000)) >> 23;
	*dac_wifi_1_standbyni = (local_val & ((u32)0x00400000)) >> 22;
	*dac_wifi_1_pdn = (local_val & ((u32)0x00200000)) >> 21;
	*adc_wifi_1_en = (local_val & ((u32)0x00180000)) >> 19;
	*ch1_tx_pa_hb_en = (local_val & ((u32)0x00040000)) >> 18;
	*ch1_tx_pa_lb_en = (local_val & ((u32)0x00020000)) >> 17;
	*ch1_trsw_pa_5to7g_en = (local_val & ((u32)0x00010000)) >> 16;
	*ch1_trsw_pa_2p4g_en = (local_val & ((u32)0x00008000)) >> 15;
	*ch1_trsw_lna_5to7g_en = (local_val & ((u32)0x00004000)) >> 14;
	*ch1_trsw_lna_2p4g_en = (local_val & ((u32)0x00002000)) >> 13;
	*ch1_rx_lna_st2_bias_en = (local_val & ((u32)0x00001000)) >> 12;
	*ch1_rx_lna_st2_en = (local_val & ((u32)0x00000800)) >> 11;
	*ch1_rx_lna_st1_bias_en = (local_val & ((u32)0x00000400)) >> 10;
	*ch1_rx_lna_st1_en = (local_val & ((u32)0x00000200)) >> 9;
	*ch1_rx_gm_en = (local_val & ((u32)0x00000100)) >> 8;
	*ch1_tx_pga_prepa_bias_en = (local_val & ((u32)0x00000080)) >> 7;
	*ch1_tx_prepa_en = (local_val & ((u32)0x00000040)) >> 6;
	*ch1_tx_pga_en = (local_val & ((u32)0x00000020)) >> 5;
	*ch1_tx_mix_en = (local_val & ((u32)0x00000010)) >> 4;
	*ch1_bb_tx_mode = (local_val & ((u32)0x00000008)) >> 3;
	*ch1_localdiv_rxtxn = (local_val & ((u32)0x00000004)) >> 2;
	*ch1_tx_gain_lut_write_ack = (local_val & ((u32)0x00000002)) >> 1;
	*ch1_rx_gain_lut_write_ack = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_ch_1_spare_out_ch_1_rx_lna_st_2_cur_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0xF0000000)) >> 28);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_2_CUR_CTRL .addr_index = 0x0000018D, .size_minus_1 = (4 - 1), .shift = 28

static inline u8 rfic_regs_ch_1_spare_out_ch_1_rx_lna_st_1_cur_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x0F000000)) >> 24);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_1_CUR_CTRL .addr_index = 0x0000018D, .size_minus_1 = (4 - 1), .shift = 24

static inline u8 rfic_regs_ch_1_spare_out_dac_wifi_1_standbynq_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

#define RFIC_REGS_CH_1_SPARE_OUT_DAC_WIFI_1_STANDBYNQ .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 23

static inline u8 rfic_regs_ch_1_spare_out_dac_wifi_1_standbyni_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

#define RFIC_REGS_CH_1_SPARE_OUT_DAC_WIFI_1_STANDBYNI .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 22

static inline u8 rfic_regs_ch_1_spare_out_dac_wifi_1_pdn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

#define RFIC_REGS_CH_1_SPARE_OUT_DAC_WIFI_1_PDN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 21

static inline u8 rfic_regs_ch_1_spare_out_adc_wifi_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00180000)) >> 19);
}

#define RFIC_REGS_CH_1_SPARE_OUT_ADC_WIFI_1_EN .addr_index = 0x0000018D, .size_minus_1 = (2 - 1), .shift = 19

static inline u8 rfic_regs_ch_1_spare_out_ch_1_tx_pa_hb_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PA_HB_EN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_ch_1_spare_out_ch_1_tx_pa_lb_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PA_LB_EN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_ch_1_spare_out_ch_1_trsw_pa_5_to_7_g_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TRSW_PA_5_TO_7_G_EN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 16

static inline u8 rfic_regs_ch_1_spare_out_ch_1_trsw_pa_2_p_4_g_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TRSW_PA_2_P_4_G_EN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 15

static inline u8 rfic_regs_ch_1_spare_out_ch_1_trsw_lna_5_to_7_g_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TRSW_LNA_5_TO_7_G_EN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 14

static inline u8 rfic_regs_ch_1_spare_out_ch_1_trsw_lna_2_p_4_g_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TRSW_LNA_2_P_4_G_EN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 13

static inline u8 rfic_regs_ch_1_spare_out_ch_1_rx_lna_st_2_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_2_BIAS_EN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_ch_1_spare_out_ch_1_rx_lna_st_2_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_2_EN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_ch_1_spare_out_ch_1_rx_lna_st_1_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_1_BIAS_EN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_ch_1_spare_out_ch_1_rx_lna_st_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_LNA_ST_1_EN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_ch_1_spare_out_ch_1_rx_gm_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_GM_EN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_ch_1_spare_out_ch_1_tx_pga_prepa_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PGA_PREPA_BIAS_EN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_ch_1_spare_out_ch_1_tx_prepa_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PREPA_EN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_ch_1_spare_out_ch_1_tx_pga_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_PGA_EN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_ch_1_spare_out_ch_1_tx_mix_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_MIX_EN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 4

static inline u8 rfic_regs_ch_1_spare_out_ch_1_bb_tx_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_BB_TX_MODE .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_ch_1_spare_out_ch_1_localdiv_rxtxn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_LOCALDIV_RXTXN .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_ch_1_spare_out_ch_1_tx_gain_lut_write_ack_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_TX_GAIN_LUT_WRITE_ACK .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_ch_1_spare_out_ch_1_rx_gain_lut_write_ack_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

#define RFIC_REGS_CH_1_SPARE_OUT_CH_1_RX_GAIN_LUT_WRITE_ACK .addr_index = 0x0000018D, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief CH_1_ADC_DAC_SPARE register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:17 CH1_dac_spare_in          0x00000000
 *    16    CH1_dac_external_pad_en   00000000
 *    15:00 CH1_adc_spare_in          0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_ADC_DAC_SPARE_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000638)
#define RFIC_REGS_CH_1_ADC_DAC_SPARE_OFFSET      0x00000638
#define RFIC_REGS_CH_1_ADC_DAC_SPARE_INDEX       0x0000018E
#define RFIC_REGS_CH_1_ADC_DAC_SPARE_RESET       0x00000000

static inline u32 rfic_regs_ch_1_adc_dac_spare_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_ADC_DAC_SPARE_ADDR);
}

static inline void rfic_regs_ch_1_adc_dac_spare_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_1_ADC_DAC_SPARE_ADDR, value);
}

#define RFIC_REGS_CH_1_ADC_DAC_SPARE .addr_index = 0x0000018E, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_ADC_DAC_SPARE_CH_1_DAC_SPARE_IN_MASK    ((u32)0xFFFE0000)
#define RFIC_REGS_CH_1_ADC_DAC_SPARE_CH_1_DAC_SPARE_IN_LSB    17
#define RFIC_REGS_CH_1_ADC_DAC_SPARE_CH_1_DAC_SPARE_IN_WIDTH    ((u32)0x0000000F)
#define RFIC_REGS_CH_1_ADC_DAC_SPARE_CH_1_DAC_EXTERNAL_PAD_EN_BIT    ((u32)0x00010000)
#define RFIC_REGS_CH_1_ADC_DAC_SPARE_CH_1_DAC_EXTERNAL_PAD_EN_POS    16
#define RFIC_REGS_CH_1_ADC_DAC_SPARE_CH_1_ADC_SPARE_IN_MASK    ((u32)0x0000FFFF)
#define RFIC_REGS_CH_1_ADC_DAC_SPARE_CH_1_ADC_SPARE_IN_LSB    0
#define RFIC_REGS_CH_1_ADC_DAC_SPARE_CH_1_ADC_SPARE_IN_WIDTH    ((u32)0x00000010)

#define RFIC_REGS_CH_1_ADC_DAC_SPARE_CH_1_DAC_SPARE_IN_RST    0x00000000
#define RFIC_REGS_CH_1_ADC_DAC_SPARE_CH_1_DAC_EXTERNAL_PAD_EN_RST    0x00000000
#define RFIC_REGS_CH_1_ADC_DAC_SPARE_CH_1_ADC_SPARE_IN_RST    0x00000000

static inline void rfic_regs_ch_1_adc_dac_spare_pack(struct cl_chip *chip, u16 ch1_dac_spare_in, u8 ch1_dac_external_pad_en, u16 ch1_adc_spare_in)
{
	ASSERT_ERR_CHIP((((u32)ch1_dac_spare_in << 17) & ~((u32)0xFFFE0000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_dac_external_pad_en << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_adc_spare_in << 0) & ~((u32)0x0000FFFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_ADC_DAC_SPARE_ADDR, ((u32)ch1_dac_spare_in << 17) | ((u32)ch1_dac_external_pad_en << 16) | ((u32)ch1_adc_spare_in << 0));
}

static inline void rfic_regs_ch_1_adc_dac_spare_unpack(struct cl_chip *chip, u16 *ch1_dac_spare_in, u8 *ch1_dac_external_pad_en, u16 *ch1_adc_spare_in)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ADC_DAC_SPARE_ADDR);

	*ch1_dac_spare_in = (local_val & ((u32)0xFFFE0000)) >> 17;
	*ch1_dac_external_pad_en = (local_val & ((u32)0x00010000)) >> 16;
	*ch1_adc_spare_in = (local_val & ((u32)0x0000FFFF)) >> 0;
}

static inline u16 rfic_regs_ch_1_adc_dac_spare_ch_1_dac_spare_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ADC_DAC_SPARE_ADDR);

	return (u16)((local_val & ((u32)0xFFFE0000)) >> 17);
}

static inline void rfic_regs_ch_1_adc_dac_spare_ch_1_dac_spare_in_setf(struct cl_chip *chip, u16 ch1dacsparein)
{
	ASSERT_ERR_CHIP((((u32)ch1dacsparein << 17) & ~((u32)0xFFFE0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_ADC_DAC_SPARE_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_ADC_DAC_SPARE_ADDR) & ~((u32)0xFFFE0000)) | ((u32)ch1dacsparein << 17));
}

#define RFIC_REGS_CH_1_ADC_DAC_SPARE_CH_1_DAC_SPARE_IN .addr_index = 0x0000018E, .size_minus_1 = (15 - 1), .shift = 17

static inline u8 rfic_regs_ch_1_adc_dac_spare_ch_1_dac_external_pad_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ADC_DAC_SPARE_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void rfic_regs_ch_1_adc_dac_spare_ch_1_dac_external_pad_en_setf(struct cl_chip *chip, u8 ch1dacexternalpaden)
{
	ASSERT_ERR_CHIP((((u32)ch1dacexternalpaden << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_ADC_DAC_SPARE_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_ADC_DAC_SPARE_ADDR) & ~((u32)0x00010000)) | ((u32)ch1dacexternalpaden << 16));
}

#define RFIC_REGS_CH_1_ADC_DAC_SPARE_CH_1_DAC_EXTERNAL_PAD_EN .addr_index = 0x0000018E, .size_minus_1 = (1 - 1), .shift = 16

static inline u16 rfic_regs_ch_1_adc_dac_spare_ch_1_adc_spare_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ADC_DAC_SPARE_ADDR);

	return (u16)((local_val & ((u32)0x0000FFFF)) >> 0);
}

static inline void rfic_regs_ch_1_adc_dac_spare_ch_1_adc_spare_in_setf(struct cl_chip *chip, u16 ch1adcsparein)
{
	ASSERT_ERR_CHIP((((u32)ch1adcsparein << 0) & ~((u32)0x0000FFFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_ADC_DAC_SPARE_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_ADC_DAC_SPARE_ADDR) & ~((u32)0x0000FFFF)) | ((u32)ch1adcsparein << 0));
}

#define RFIC_REGS_CH_1_ADC_DAC_SPARE_CH_1_ADC_SPARE_IN .addr_index = 0x0000018E, .size_minus_1 = (16 - 1), .shift = 0

/**
 * @brief RF_FEM_1_LNA_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:30 CH1_rx_lna_st1_vcurstr    0x00000000
 *    29:26 CH1_rx_lna_st1_vcasc      0x00000000
 *    25    CH1_low_band_en           00000000
 *    24    CH1_rx_lna_st1_ldo14_en   00000000
 *    23    CH1_rx_lna_st1_ldo10_en   00000000
 *    22:19 CH1_rx_lna_st1_deq_res    0x00000000
 *    18:15 CH1_rx_lna_st1_cur_ctrl   0x00000000
 *    14:11 CH1_rx_lna_st1_cb_sec     0x00000000
 *    10:09 CH1_rx_lna_st1_cb_pr_coarse 0x00000000
 *    08:05 CH1_rx_lna_st1_cb_pr      0x00000000
 *    04:02 CH1_rx_gm_cur_ctrl        0x00000000
 *    01    CH1_rx_lna_st1_en         00000000
 *    00    CH1_rx_gm_en              00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000063C)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_OFFSET      0x0000063C
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_INDEX       0x0000018F
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_1_lna_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR, value);
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0 .addr_index = 0x0000018F, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_VCURSTR_MASK    ((u32)0xC0000000)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_VCURSTR_LSB    30
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_VCURSTR_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_VCASC_MASK    ((u32)0x3C000000)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_VCASC_LSB    26
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_VCASC_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_LOW_BAND_EN_BIT    ((u32)0x02000000)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_LOW_BAND_EN_POS    25
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_LDO_14_EN_BIT    ((u32)0x01000000)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_LDO_14_EN_POS    24
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_LDO_10_EN_BIT    ((u32)0x00800000)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_LDO_10_EN_POS    23
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_DEQ_RES_MASK    ((u32)0x00780000)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_DEQ_RES_LSB    19
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_DEQ_RES_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CUR_CTRL_MASK    ((u32)0x00078000)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CUR_CTRL_LSB    15
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CUR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CB_SEC_MASK    ((u32)0x00007800)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CB_SEC_LSB    11
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CB_SEC_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CB_PR_COARSE_MASK    ((u32)0x00000600)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CB_PR_COARSE_LSB    9
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CB_PR_COARSE_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CB_PR_MASK    ((u32)0x000001E0)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CB_PR_LSB    5
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CB_PR_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_GM_CUR_CTRL_MASK    ((u32)0x0000001C)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_GM_CUR_CTRL_LSB    2
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_GM_CUR_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_EN_BIT    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_EN_POS    1
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_GM_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_GM_EN_POS    0

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_VCURSTR_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_VCASC_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_LOW_BAND_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_LDO_14_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_LDO_10_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_DEQ_RES_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CUR_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CB_SEC_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CB_PR_COARSE_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CB_PR_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_GM_CUR_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_GM_EN_RST    0x00000000

static inline void rfic_regs_rf_fem_1_lna_ctrl_0_pack(struct cl_chip *chip, u8 ch1_rx_lna_st1_vcurstr, u8 ch1_rx_lna_st1_vcasc, u8 ch1_low_band_en, u8 ch1_rx_lna_st1_ldo14_en, u8 ch1_rx_lna_st1_ldo10_en, u8 ch1_rx_lna_st1_deq_res, u8 ch1_rx_lna_st1_cur_ctrl, u8 ch1_rx_lna_st1_cb_sec, u8 ch1_rx_lna_st1_cb_pr_coarse, u8 ch1_rx_lna_st1_cb_pr, u8 ch1_rx_gm_cur_ctrl, u8 ch1_rx_lna_st1_en, u8 ch1_rx_gm_en)
{
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_vcurstr << 30) & ~((u32)0xC0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_vcasc << 26) & ~((u32)0x3C000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_low_band_en << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_ldo14_en << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_ldo10_en << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_deq_res << 19) & ~((u32)0x00780000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_cur_ctrl << 15) & ~((u32)0x00078000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_cb_sec << 11) & ~((u32)0x00007800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_cb_pr_coarse << 9) & ~((u32)0x00000600)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_cb_pr << 5) & ~((u32)0x000001E0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_gm_cur_ctrl << 2) & ~((u32)0x0000001C)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_en << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_gm_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR, ((u32)ch1_rx_lna_st1_vcurstr << 30) | ((u32)ch1_rx_lna_st1_vcasc << 26) | ((u32)ch1_low_band_en << 25) | ((u32)ch1_rx_lna_st1_ldo14_en << 24) | ((u32)ch1_rx_lna_st1_ldo10_en << 23) | ((u32)ch1_rx_lna_st1_deq_res << 19) | ((u32)ch1_rx_lna_st1_cur_ctrl << 15) | ((u32)ch1_rx_lna_st1_cb_sec << 11) | ((u32)ch1_rx_lna_st1_cb_pr_coarse << 9) | ((u32)ch1_rx_lna_st1_cb_pr << 5) | ((u32)ch1_rx_gm_cur_ctrl << 2) | ((u32)ch1_rx_lna_st1_en << 1) | ((u32)ch1_rx_gm_en << 0));
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_0_unpack(struct cl_chip *chip, u8 *ch1_rx_lna_st1_vcurstr, u8 *ch1_rx_lna_st1_vcasc, u8 *ch1_low_band_en, u8 *ch1_rx_lna_st1_ldo14_en, u8 *ch1_rx_lna_st1_ldo10_en, u8 *ch1_rx_lna_st1_deq_res, u8 *ch1_rx_lna_st1_cur_ctrl, u8 *ch1_rx_lna_st1_cb_sec, u8 *ch1_rx_lna_st1_cb_pr_coarse, u8 *ch1_rx_lna_st1_cb_pr, u8 *ch1_rx_gm_cur_ctrl, u8 *ch1_rx_lna_st1_en, u8 *ch1_rx_gm_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR);

	*ch1_rx_lna_st1_vcurstr = (local_val & ((u32)0xC0000000)) >> 30;
	*ch1_rx_lna_st1_vcasc = (local_val & ((u32)0x3C000000)) >> 26;
	*ch1_low_band_en = (local_val & ((u32)0x02000000)) >> 25;
	*ch1_rx_lna_st1_ldo14_en = (local_val & ((u32)0x01000000)) >> 24;
	*ch1_rx_lna_st1_ldo10_en = (local_val & ((u32)0x00800000)) >> 23;
	*ch1_rx_lna_st1_deq_res = (local_val & ((u32)0x00780000)) >> 19;
	*ch1_rx_lna_st1_cur_ctrl = (local_val & ((u32)0x00078000)) >> 15;
	*ch1_rx_lna_st1_cb_sec = (local_val & ((u32)0x00007800)) >> 11;
	*ch1_rx_lna_st1_cb_pr_coarse = (local_val & ((u32)0x00000600)) >> 9;
	*ch1_rx_lna_st1_cb_pr = (local_val & ((u32)0x000001E0)) >> 5;
	*ch1_rx_gm_cur_ctrl = (local_val & ((u32)0x0000001C)) >> 2;
	*ch1_rx_lna_st1_en = (local_val & ((u32)0x00000002)) >> 1;
	*ch1_rx_gm_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_vcurstr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0xC0000000)) >> 30);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_vcurstr_setf(struct cl_chip *chip, u8 ch1rxlnast1vcurstr)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1vcurstr << 30) & ~((u32)0xC0000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR) & ~((u32)0xC0000000)) | ((u32)ch1rxlnast1vcurstr << 30));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_VCURSTR .addr_index = 0x0000018F, .size_minus_1 = (2 - 1), .shift = 30

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_vcasc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x3C000000)) >> 26);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_vcasc_setf(struct cl_chip *chip, u8 ch1rxlnast1vcasc)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1vcasc << 26) & ~((u32)0x3C000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR) & ~((u32)0x3C000000)) | ((u32)ch1rxlnast1vcasc << 26));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_VCASC .addr_index = 0x0000018F, .size_minus_1 = (4 - 1), .shift = 26

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_low_band_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_low_band_en_setf(struct cl_chip *chip, u8 ch1lowbanden)
{
	ASSERT_ERR_CHIP((((u32)ch1lowbanden << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR) & ~((u32)0x02000000)) | ((u32)ch1lowbanden << 25));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_LOW_BAND_EN .addr_index = 0x0000018F, .size_minus_1 = (1 - 1), .shift = 25

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_ldo_14_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_ldo_14_en_setf(struct cl_chip *chip, u8 ch1rxlnast1ldo14en)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1ldo14en << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR) & ~((u32)0x01000000)) | ((u32)ch1rxlnast1ldo14en << 24));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_LDO_14_EN .addr_index = 0x0000018F, .size_minus_1 = (1 - 1), .shift = 24

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_ldo_10_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_ldo_10_en_setf(struct cl_chip *chip, u8 ch1rxlnast1ldo10en)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1ldo10en << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR) & ~((u32)0x00800000)) | ((u32)ch1rxlnast1ldo10en << 23));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_LDO_10_EN .addr_index = 0x0000018F, .size_minus_1 = (1 - 1), .shift = 23

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_deq_res_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00780000)) >> 19);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_deq_res_setf(struct cl_chip *chip, u8 ch1rxlnast1deqres)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1deqres << 19) & ~((u32)0x00780000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR) & ~((u32)0x00780000)) | ((u32)ch1rxlnast1deqres << 19));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_DEQ_RES .addr_index = 0x0000018F, .size_minus_1 = (4 - 1), .shift = 19

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_cur_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00078000)) >> 15);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_cur_ctrl_setf(struct cl_chip *chip, u8 ch1rxlnast1curctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1curctrl << 15) & ~((u32)0x00078000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR) & ~((u32)0x00078000)) | ((u32)ch1rxlnast1curctrl << 15));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CUR_CTRL .addr_index = 0x0000018F, .size_minus_1 = (4 - 1), .shift = 15

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_cb_sec_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00007800)) >> 11);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_cb_sec_setf(struct cl_chip *chip, u8 ch1rxlnast1cbsec)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1cbsec << 11) & ~((u32)0x00007800)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR) & ~((u32)0x00007800)) | ((u32)ch1rxlnast1cbsec << 11));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CB_SEC .addr_index = 0x0000018F, .size_minus_1 = (4 - 1), .shift = 11

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_cb_pr_coarse_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000600)) >> 9);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_cb_pr_coarse_setf(struct cl_chip *chip, u8 ch1rxlnast1cbprcoarse)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1cbprcoarse << 9) & ~((u32)0x00000600)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR) & ~((u32)0x00000600)) | ((u32)ch1rxlnast1cbprcoarse << 9));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CB_PR_COARSE .addr_index = 0x0000018F, .size_minus_1 = (2 - 1), .shift = 9

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_cb_pr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x000001E0)) >> 5);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_cb_pr_setf(struct cl_chip *chip, u8 ch1rxlnast1cbpr)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1cbpr << 5) & ~((u32)0x000001E0)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR) & ~((u32)0x000001E0)) | ((u32)ch1rxlnast1cbpr << 5));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_CB_PR .addr_index = 0x0000018F, .size_minus_1 = (4 - 1), .shift = 5

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_gm_cur_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000001C)) >> 2);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_gm_cur_ctrl_setf(struct cl_chip *chip, u8 ch1rxgmcurctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1rxgmcurctrl << 2) & ~((u32)0x0000001C)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR) & ~((u32)0x0000001C)) | ((u32)ch1rxgmcurctrl << 2));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_GM_CUR_CTRL .addr_index = 0x0000018F, .size_minus_1 = (3 - 1), .shift = 2

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_lna_st_1_en_setf(struct cl_chip *chip, u8 ch1rxlnast1en)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1en << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR) & ~((u32)0x00000002)) | ((u32)ch1rxlnast1en << 1));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_LNA_ST_1_EN .addr_index = 0x0000018F, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_gm_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_0_ch_1_rx_gm_en_setf(struct cl_chip *chip, u8 ch1rxgmen)
{
	ASSERT_ERR_CHIP((((u32)ch1rxgmen << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)ch1rxgmen << 0));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_0_CH_1_RX_GM_EN .addr_index = 0x0000018F, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief RF_FEM_1_LNA_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    26:23 CH1_rx_gm_gain_ctrl       0x00000000
 *    22    CH1_spare20_in            00000000
 *    21:17 CH1_rx_lna_st1_vbody_bias_5g 0x00000000
 *    16:12 CH1_rx_lna_st1_vbody_bias_2p5g 0x00000000
 *    11    CH1_rx_gm_5db_en          00000000
 *    10    CH1_spare19_in            00000000
 *    09    CH1_rx_lna_st1_sel_rxrf_ptat 00000000
 *    08    CH1_rx_lna_st1_bias_en    00000000
 *    07    CH1_rx_lna_st1_opamp_bias_sel 00000000
 *    06    CH1_rx_gm_opamp_bias_sel  00000000
 *    05:02 CH1_rx_lna_st1_s11cap_ctrl 0x00000000
 *    01:00 CH1_rx_lna_st1_vdd10sel   0x00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000640)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_OFFSET      0x00000640
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_INDEX       0x00000190
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_1_lna_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR, value);
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1 .addr_index = 0x00000190, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_GM_GAIN_CTRL_MASK    ((u32)0x07800000)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_GM_GAIN_CTRL_LSB    23
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_GM_GAIN_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_SPARE_20_IN_BIT    ((u32)0x00400000)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_SPARE_20_IN_POS    22
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_VBODY_BIAS_5_G_MASK    ((u32)0x003E0000)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_VBODY_BIAS_5_G_LSB    17
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_VBODY_BIAS_5_G_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_VBODY_BIAS_2_P_5_G_MASK    ((u32)0x0001F000)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_VBODY_BIAS_2_P_5_G_LSB    12
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_VBODY_BIAS_2_P_5_G_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_GM_5_DB_EN_BIT    ((u32)0x00000800)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_GM_5_DB_EN_POS    11
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_SPARE_19_IN_BIT    ((u32)0x00000400)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_SPARE_19_IN_POS    10
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_SEL_RXRF_PTAT_BIT    ((u32)0x00000200)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_SEL_RXRF_PTAT_POS    9
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_BIAS_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_BIAS_EN_POS    8
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_OPAMP_BIAS_SEL_BIT    ((u32)0x00000080)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_OPAMP_BIAS_SEL_POS    7
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_GM_OPAMP_BIAS_SEL_BIT    ((u32)0x00000040)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_GM_OPAMP_BIAS_SEL_POS    6
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_S_11_CAP_CTRL_MASK    ((u32)0x0000003C)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_S_11_CAP_CTRL_LSB    2
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_S_11_CAP_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_VDD_10_SEL_MASK    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_VDD_10_SEL_LSB    0
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_VDD_10_SEL_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_GM_GAIN_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_SPARE_20_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_VBODY_BIAS_5_G_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_VBODY_BIAS_2_P_5_G_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_GM_5_DB_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_SPARE_19_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_SEL_RXRF_PTAT_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_BIAS_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_OPAMP_BIAS_SEL_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_GM_OPAMP_BIAS_SEL_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_S_11_CAP_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_VDD_10_SEL_RST    0x00000000

static inline void rfic_regs_rf_fem_1_lna_ctrl_1_pack(struct cl_chip *chip, u8 ch1_rx_gm_gain_ctrl, u8 ch1_spare20_in, u8 ch1_rx_lna_st1_vbody_bias_5g, u8 ch1_rx_lna_st1_vbody_bias_2p5g, u8 ch1_rx_gm_5db_en, u8 ch1_spare19_in, u8 ch1_rx_lna_st1_sel_rxrf_ptat, u8 ch1_rx_lna_st1_bias_en, u8 ch1_rx_lna_st1_opamp_bias_sel, u8 ch1_rx_gm_opamp_bias_sel, u8 ch1_rx_lna_st1_s11cap_ctrl, u8 ch1_rx_lna_st1_vdd10sel)
{
	ASSERT_ERR_CHIP((((u32)ch1_rx_gm_gain_ctrl << 23) & ~((u32)0x07800000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare20_in << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_vbody_bias_5g << 17) & ~((u32)0x003E0000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_vbody_bias_2p5g << 12) & ~((u32)0x0001F000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_gm_5db_en << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare19_in << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_sel_rxrf_ptat << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_bias_en << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_opamp_bias_sel << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_gm_opamp_bias_sel << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_s11cap_ctrl << 2) & ~((u32)0x0000003C)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st1_vdd10sel << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR, ((u32)ch1_rx_gm_gain_ctrl << 23) | ((u32)ch1_spare20_in << 22) | ((u32)ch1_rx_lna_st1_vbody_bias_5g << 17) | ((u32)ch1_rx_lna_st1_vbody_bias_2p5g << 12) | ((u32)ch1_rx_gm_5db_en << 11) | ((u32)ch1_spare19_in << 10) | ((u32)ch1_rx_lna_st1_sel_rxrf_ptat << 9) | ((u32)ch1_rx_lna_st1_bias_en << 8) | ((u32)ch1_rx_lna_st1_opamp_bias_sel << 7) | ((u32)ch1_rx_gm_opamp_bias_sel << 6) | ((u32)ch1_rx_lna_st1_s11cap_ctrl << 2) | ((u32)ch1_rx_lna_st1_vdd10sel << 0));
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_1_unpack(struct cl_chip *chip, u8 *ch1_rx_gm_gain_ctrl, u8 *ch1_spare20_in, u8 *ch1_rx_lna_st1_vbody_bias_5g, u8 *ch1_rx_lna_st1_vbody_bias_2p5g, u8 *ch1_rx_gm_5db_en, u8 *ch1_spare19_in, u8 *ch1_rx_lna_st1_sel_rxrf_ptat, u8 *ch1_rx_lna_st1_bias_en, u8 *ch1_rx_lna_st1_opamp_bias_sel, u8 *ch1_rx_gm_opamp_bias_sel, u8 *ch1_rx_lna_st1_s11cap_ctrl, u8 *ch1_rx_lna_st1_vdd10sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR);

	*ch1_rx_gm_gain_ctrl = (local_val & ((u32)0x07800000)) >> 23;
	*ch1_spare20_in = (local_val & ((u32)0x00400000)) >> 22;
	*ch1_rx_lna_st1_vbody_bias_5g = (local_val & ((u32)0x003E0000)) >> 17;
	*ch1_rx_lna_st1_vbody_bias_2p5g = (local_val & ((u32)0x0001F000)) >> 12;
	*ch1_rx_gm_5db_en = (local_val & ((u32)0x00000800)) >> 11;
	*ch1_spare19_in = (local_val & ((u32)0x00000400)) >> 10;
	*ch1_rx_lna_st1_sel_rxrf_ptat = (local_val & ((u32)0x00000200)) >> 9;
	*ch1_rx_lna_st1_bias_en = (local_val & ((u32)0x00000100)) >> 8;
	*ch1_rx_lna_st1_opamp_bias_sel = (local_val & ((u32)0x00000080)) >> 7;
	*ch1_rx_gm_opamp_bias_sel = (local_val & ((u32)0x00000040)) >> 6;
	*ch1_rx_lna_st1_s11cap_ctrl = (local_val & ((u32)0x0000003C)) >> 2;
	*ch1_rx_lna_st1_vdd10sel = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_gm_gain_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x07800000)) >> 23);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_gm_gain_ctrl_setf(struct cl_chip *chip, u8 ch1rxgmgainctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1rxgmgainctrl << 23) & ~((u32)0x07800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR) & ~((u32)0x07800000)) | ((u32)ch1rxgmgainctrl << 23));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_GM_GAIN_CTRL .addr_index = 0x00000190, .size_minus_1 = (4 - 1), .shift = 23

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_spare_20_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_spare_20_in_setf(struct cl_chip *chip, u8 ch1spare20in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare20in << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR) & ~((u32)0x00400000)) | ((u32)ch1spare20in << 22));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_SPARE_20_IN .addr_index = 0x00000190, .size_minus_1 = (1 - 1), .shift = 22

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_lna_st_1_vbody_bias_5_g_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x003E0000)) >> 17);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_lna_st_1_vbody_bias_5_g_setf(struct cl_chip *chip, u8 ch1rxlnast1vbodybias5g)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1vbodybias5g << 17) & ~((u32)0x003E0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR) & ~((u32)0x003E0000)) | ((u32)ch1rxlnast1vbodybias5g << 17));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_VBODY_BIAS_5_G .addr_index = 0x00000190, .size_minus_1 = (5 - 1), .shift = 17

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_lna_st_1_vbody_bias_2_p_5_g_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0001F000)) >> 12);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_lna_st_1_vbody_bias_2_p_5_g_setf(struct cl_chip *chip, u8 ch1rxlnast1vbodybias2p5g)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1vbodybias2p5g << 12) & ~((u32)0x0001F000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR) & ~((u32)0x0001F000)) | ((u32)ch1rxlnast1vbodybias2p5g << 12));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_VBODY_BIAS_2_P_5_G .addr_index = 0x00000190, .size_minus_1 = (5 - 1), .shift = 12

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_gm_5_db_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_gm_5_db_en_setf(struct cl_chip *chip, u8 ch1rxgm5dben)
{
	ASSERT_ERR_CHIP((((u32)ch1rxgm5dben << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR) & ~((u32)0x00000800)) | ((u32)ch1rxgm5dben << 11));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_GM_5_DB_EN .addr_index = 0x00000190, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_spare_19_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_spare_19_in_setf(struct cl_chip *chip, u8 ch1spare19in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare19in << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR) & ~((u32)0x00000400)) | ((u32)ch1spare19in << 10));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_SPARE_19_IN .addr_index = 0x00000190, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_lna_st_1_sel_rxrf_ptat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_lna_st_1_sel_rxrf_ptat_setf(struct cl_chip *chip, u8 ch1rxlnast1selrxrfptat)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1selrxrfptat << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR) & ~((u32)0x00000200)) | ((u32)ch1rxlnast1selrxrfptat << 9));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_SEL_RXRF_PTAT .addr_index = 0x00000190, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_lna_st_1_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_lna_st_1_bias_en_setf(struct cl_chip *chip, u8 ch1rxlnast1biasen)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1biasen << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR) & ~((u32)0x00000100)) | ((u32)ch1rxlnast1biasen << 8));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_BIAS_EN .addr_index = 0x00000190, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_lna_st_1_opamp_bias_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_lna_st_1_opamp_bias_sel_setf(struct cl_chip *chip, u8 ch1rxlnast1opampbiassel)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1opampbiassel << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR) & ~((u32)0x00000080)) | ((u32)ch1rxlnast1opampbiassel << 7));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_OPAMP_BIAS_SEL .addr_index = 0x00000190, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_gm_opamp_bias_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_gm_opamp_bias_sel_setf(struct cl_chip *chip, u8 ch1rxgmopampbiassel)
{
	ASSERT_ERR_CHIP((((u32)ch1rxgmopampbiassel << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR) & ~((u32)0x00000040)) | ((u32)ch1rxgmopampbiassel << 6));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_GM_OPAMP_BIAS_SEL .addr_index = 0x00000190, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_lna_st_1_s_11_cap_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0000003C)) >> 2);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_lna_st_1_s_11_cap_ctrl_setf(struct cl_chip *chip, u8 ch1rxlnast1s11capctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1s11capctrl << 2) & ~((u32)0x0000003C)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR) & ~((u32)0x0000003C)) | ((u32)ch1rxlnast1s11capctrl << 2));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_S_11_CAP_CTRL .addr_index = 0x00000190, .size_minus_1 = (4 - 1), .shift = 2

static inline u8 rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_lna_st_1_vdd_10_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_rf_fem_1_lna_ctrl_1_ch_1_rx_lna_st_1_vdd_10_sel_setf(struct cl_chip *chip, u8 ch1rxlnast1vdd10sel)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast1vdd10sel << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_CTRL_1_ADDR) & ~((u32)0x00000003)) | ((u32)ch1rxlnast1vdd10sel << 0));
}

#define RFIC_REGS_RF_FEM_1_LNA_CTRL_1_CH_1_RX_LNA_ST_1_VDD_10_SEL .addr_index = 0x00000190, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief RF_FEM_1_PA_2_P_5_G_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:27 CH1_tx_pa_lb_stg2_vg3     0x00000000
 *    26:22 CH1_tx_pa_lb_stg2_vg2     0x00000000
 *    21:16 CH1_spare22_in            0x00000000
 *    15:11 CH1_tx_pa_lb_stg1_vg3     0x00000000
 *    10:06 CH1_tx_pa_lb_stg1_vg2     0x00000000
 *    05:02 CH1_spare21_in            0x00000000
 *    01    CH1_tx_pa_lb_vblk         00000000
 *    00    CH1_tx_pa_lb_en           00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000644)
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_OFFSET      0x00000644
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_INDEX       0x00000191
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR);
}

static inline void rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR, value);
}

#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0 .addr_index = 0x00000191, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_2_VG_3_MASK    ((u32)0xF8000000)
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_2_VG_3_LSB    27
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_2_VG_3_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_2_VG_2_MASK    ((u32)0x07C00000)
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_2_VG_2_LSB    22
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_2_VG_2_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_SPARE_22_IN_MASK    ((u32)0x003F0000)
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_SPARE_22_IN_LSB    16
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_SPARE_22_IN_WIDTH    ((u32)0x00000006)
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_1_VG_3_MASK    ((u32)0x0000F800)
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_1_VG_3_LSB    11
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_1_VG_3_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_1_VG_2_MASK    ((u32)0x000007C0)
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_1_VG_2_LSB    6
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_1_VG_2_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_SPARE_21_IN_MASK    ((u32)0x0000003C)
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_SPARE_21_IN_LSB    2
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_SPARE_21_IN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_VBLK_BIT    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_VBLK_POS    1
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_EN_POS    0

#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_2_VG_3_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_2_VG_2_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_SPARE_22_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_1_VG_3_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_1_VG_2_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_SPARE_21_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_VBLK_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_EN_RST    0x00000000

static inline void rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_pack(struct cl_chip *chip, u8 ch1_tx_pa_lb_stg2_vg3, u8 ch1_tx_pa_lb_stg2_vg2, u8 ch1_spare22_in, u8 ch1_tx_pa_lb_stg1_vg3, u8 ch1_tx_pa_lb_stg1_vg2, u8 ch1_spare21_in, u8 ch1_tx_pa_lb_vblk, u8 ch1_tx_pa_lb_en)
{
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_stg2_vg3 << 27) & ~((u32)0xF8000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_stg2_vg2 << 22) & ~((u32)0x07C00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare22_in << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_stg1_vg3 << 11) & ~((u32)0x0000F800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_stg1_vg2 << 6) & ~((u32)0x000007C0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare21_in << 2) & ~((u32)0x0000003C)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_vblk << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR, ((u32)ch1_tx_pa_lb_stg2_vg3 << 27) | ((u32)ch1_tx_pa_lb_stg2_vg2 << 22) | ((u32)ch1_spare22_in << 16) | ((u32)ch1_tx_pa_lb_stg1_vg3 << 11) | ((u32)ch1_tx_pa_lb_stg1_vg2 << 6) | ((u32)ch1_spare21_in << 2) | ((u32)ch1_tx_pa_lb_vblk << 1) | ((u32)ch1_tx_pa_lb_en << 0));
}

static inline void rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_unpack(struct cl_chip *chip, u8 *ch1_tx_pa_lb_stg2_vg3, u8 *ch1_tx_pa_lb_stg2_vg2, u8 *ch1_spare22_in, u8 *ch1_tx_pa_lb_stg1_vg3, u8 *ch1_tx_pa_lb_stg1_vg2, u8 *ch1_spare21_in, u8 *ch1_tx_pa_lb_vblk, u8 *ch1_tx_pa_lb_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR);

	*ch1_tx_pa_lb_stg2_vg3 = (local_val & ((u32)0xF8000000)) >> 27;
	*ch1_tx_pa_lb_stg2_vg2 = (local_val & ((u32)0x07C00000)) >> 22;
	*ch1_spare22_in = (local_val & ((u32)0x003F0000)) >> 16;
	*ch1_tx_pa_lb_stg1_vg3 = (local_val & ((u32)0x0000F800)) >> 11;
	*ch1_tx_pa_lb_stg1_vg2 = (local_val & ((u32)0x000007C0)) >> 6;
	*ch1_spare21_in = (local_val & ((u32)0x0000003C)) >> 2;
	*ch1_tx_pa_lb_vblk = (local_val & ((u32)0x00000002)) >> 1;
	*ch1_tx_pa_lb_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_ch_1_tx_pa_lb_stg_2_vg_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0xF8000000)) >> 27);
}

static inline void rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_ch_1_tx_pa_lb_stg_2_vg_3_setf(struct cl_chip *chip, u8 ch1txpalbstg2vg3)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbstg2vg3 << 27) & ~((u32)0xF8000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0xF8000000)) | ((u32)ch1txpalbstg2vg3 << 27));
}

#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_2_VG_3 .addr_index = 0x00000191, .size_minus_1 = (5 - 1), .shift = 27

static inline u8 rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_ch_1_tx_pa_lb_stg_2_vg_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x07C00000)) >> 22);
}

static inline void rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_ch_1_tx_pa_lb_stg_2_vg_2_setf(struct cl_chip *chip, u8 ch1txpalbstg2vg2)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbstg2vg2 << 22) & ~((u32)0x07C00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x07C00000)) | ((u32)ch1txpalbstg2vg2 << 22));
}

#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_2_VG_2 .addr_index = 0x00000191, .size_minus_1 = (5 - 1), .shift = 22

static inline u8 rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_ch_1_spare_22_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_ch_1_spare_22_in_setf(struct cl_chip *chip, u8 ch1spare22in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare22in << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x003F0000)) | ((u32)ch1spare22in << 16));
}

#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_SPARE_22_IN .addr_index = 0x00000191, .size_minus_1 = (6 - 1), .shift = 16

static inline u8 rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_ch_1_tx_pa_lb_stg_1_vg_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000F800)) >> 11);
}

static inline void rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_ch_1_tx_pa_lb_stg_1_vg_3_setf(struct cl_chip *chip, u8 ch1txpalbstg1vg3)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbstg1vg3 << 11) & ~((u32)0x0000F800)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x0000F800)) | ((u32)ch1txpalbstg1vg3 << 11));
}

#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_1_VG_3 .addr_index = 0x00000191, .size_minus_1 = (5 - 1), .shift = 11

static inline u8 rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_ch_1_tx_pa_lb_stg_1_vg_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x000007C0)) >> 6);
}

static inline void rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_ch_1_tx_pa_lb_stg_1_vg_2_setf(struct cl_chip *chip, u8 ch1txpalbstg1vg2)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbstg1vg2 << 6) & ~((u32)0x000007C0)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x000007C0)) | ((u32)ch1txpalbstg1vg2 << 6));
}

#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_STG_1_VG_2 .addr_index = 0x00000191, .size_minus_1 = (5 - 1), .shift = 6

static inline u8 rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_ch_1_spare_21_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000003C)) >> 2);
}

static inline void rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_ch_1_spare_21_in_setf(struct cl_chip *chip, u8 ch1spare21in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare21in << 2) & ~((u32)0x0000003C)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x0000003C)) | ((u32)ch1spare21in << 2));
}

#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_SPARE_21_IN .addr_index = 0x00000191, .size_minus_1 = (4 - 1), .shift = 2

static inline u8 rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_ch_1_tx_pa_lb_vblk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_ch_1_tx_pa_lb_vblk_setf(struct cl_chip *chip, u8 ch1txpalbvblk)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbvblk << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x00000002)) | ((u32)ch1txpalbvblk << 1));
}

#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_VBLK .addr_index = 0x00000191, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_ch_1_tx_pa_lb_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_rf_fem_1_pa_2_p_5_g_ctrl_0_ch_1_tx_pa_lb_en_setf(struct cl_chip *chip, u8 ch1txpalben)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalben << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)ch1txpalben << 0));
}

#define RFIC_REGS_RF_FEM_1_PA_2_P_5_G_CTRL_0_CH_1_TX_PA_LB_EN .addr_index = 0x00000191, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief RF_FEM_1_PA_5_G_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:29 CH1_spare23_in            0x00000000
 *    28:24 CH1_tx_pa_hb_stg2_vg2     0x00000000
 *    23:18 CH1_tx_pa_ib_stg2         0x00000000
 *    17:13 CH1_tx_pa_hb_stg1_vg3     0x00000000
 *    12:08 CH1_tx_pa_hb_stg1_vg2     0x00000000
 *    07:02 CH1_tx_pa_ib_stg1         0x00000000
 *    01    CH1_tx_pa_hb_vblk         00000000
 *    00    CH1_tx_pa_hb_en           00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000648)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_OFFSET      0x00000648
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_INDEX       0x00000192
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_1_pa_5_g_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR);
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR, value);
}

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0 .addr_index = 0x00000192, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_SPARE_23_IN_MASK    ((u32)0xE0000000)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_SPARE_23_IN_LSB    29
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_SPARE_23_IN_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_STG_2_VG_2_MASK    ((u32)0x1F000000)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_STG_2_VG_2_LSB    24
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_STG_2_VG_2_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_IB_STG_2_MASK    ((u32)0x00FC0000)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_IB_STG_2_LSB    18
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_IB_STG_2_WIDTH    ((u32)0x00000006)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_STG_1_VG_3_MASK    ((u32)0x0003E000)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_STG_1_VG_3_LSB    13
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_STG_1_VG_3_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_STG_1_VG_2_MASK    ((u32)0x00001F00)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_STG_1_VG_2_LSB    8
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_STG_1_VG_2_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_IB_STG_1_MASK    ((u32)0x000000FC)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_IB_STG_1_LSB    2
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_IB_STG_1_WIDTH    ((u32)0x00000006)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_VBLK_BIT    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_VBLK_POS    1
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_EN_POS    0

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_SPARE_23_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_STG_2_VG_2_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_IB_STG_2_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_STG_1_VG_3_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_STG_1_VG_2_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_IB_STG_1_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_VBLK_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_EN_RST    0x00000000

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_0_pack(struct cl_chip *chip, u8 ch1_spare23_in, u8 ch1_tx_pa_hb_stg2_vg2, u8 ch1_tx_pa_ib_stg2, u8 ch1_tx_pa_hb_stg1_vg3, u8 ch1_tx_pa_hb_stg1_vg2, u8 ch1_tx_pa_ib_stg1, u8 ch1_tx_pa_hb_vblk, u8 ch1_tx_pa_hb_en)
{
	ASSERT_ERR_CHIP((((u32)ch1_spare23_in << 29) & ~((u32)0xE0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_stg2_vg2 << 24) & ~((u32)0x1F000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_ib_stg2 << 18) & ~((u32)0x00FC0000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_stg1_vg3 << 13) & ~((u32)0x0003E000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_stg1_vg2 << 8) & ~((u32)0x00001F00)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_ib_stg1 << 2) & ~((u32)0x000000FC)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_vblk << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR, ((u32)ch1_spare23_in << 29) | ((u32)ch1_tx_pa_hb_stg2_vg2 << 24) | ((u32)ch1_tx_pa_ib_stg2 << 18) | ((u32)ch1_tx_pa_hb_stg1_vg3 << 13) | ((u32)ch1_tx_pa_hb_stg1_vg2 << 8) | ((u32)ch1_tx_pa_ib_stg1 << 2) | ((u32)ch1_tx_pa_hb_vblk << 1) | ((u32)ch1_tx_pa_hb_en << 0));
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_0_unpack(struct cl_chip *chip, u8 *ch1_spare23_in, u8 *ch1_tx_pa_hb_stg2_vg2, u8 *ch1_tx_pa_ib_stg2, u8 *ch1_tx_pa_hb_stg1_vg3, u8 *ch1_tx_pa_hb_stg1_vg2, u8 *ch1_tx_pa_ib_stg1, u8 *ch1_tx_pa_hb_vblk, u8 *ch1_tx_pa_hb_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR);

	*ch1_spare23_in = (local_val & ((u32)0xE0000000)) >> 29;
	*ch1_tx_pa_hb_stg2_vg2 = (local_val & ((u32)0x1F000000)) >> 24;
	*ch1_tx_pa_ib_stg2 = (local_val & ((u32)0x00FC0000)) >> 18;
	*ch1_tx_pa_hb_stg1_vg3 = (local_val & ((u32)0x0003E000)) >> 13;
	*ch1_tx_pa_hb_stg1_vg2 = (local_val & ((u32)0x00001F00)) >> 8;
	*ch1_tx_pa_ib_stg1 = (local_val & ((u32)0x000000FC)) >> 2;
	*ch1_tx_pa_hb_vblk = (local_val & ((u32)0x00000002)) >> 1;
	*ch1_tx_pa_hb_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_rf_fem_1_pa_5_g_ctrl_0_ch_1_spare_23_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0xE0000000)) >> 29);
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_0_ch_1_spare_23_in_setf(struct cl_chip *chip, u8 ch1spare23in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare23in << 29) & ~((u32)0xE0000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR) & ~((u32)0xE0000000)) | ((u32)ch1spare23in << 29));
}

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_SPARE_23_IN .addr_index = 0x00000192, .size_minus_1 = (3 - 1), .shift = 29

static inline u8 rfic_regs_rf_fem_1_pa_5_g_ctrl_0_ch_1_tx_pa_hb_stg_2_vg_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x1F000000)) >> 24);
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_0_ch_1_tx_pa_hb_stg_2_vg_2_setf(struct cl_chip *chip, u8 ch1txpahbstg2vg2)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbstg2vg2 << 24) & ~((u32)0x1F000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR) & ~((u32)0x1F000000)) | ((u32)ch1txpahbstg2vg2 << 24));
}

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_STG_2_VG_2 .addr_index = 0x00000192, .size_minus_1 = (5 - 1), .shift = 24

static inline u8 rfic_regs_rf_fem_1_pa_5_g_ctrl_0_ch_1_tx_pa_ib_stg_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00FC0000)) >> 18);
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_0_ch_1_tx_pa_ib_stg_2_setf(struct cl_chip *chip, u8 ch1txpaibstg2)
{
	ASSERT_ERR_CHIP((((u32)ch1txpaibstg2 << 18) & ~((u32)0x00FC0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR) & ~((u32)0x00FC0000)) | ((u32)ch1txpaibstg2 << 18));
}

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_IB_STG_2 .addr_index = 0x00000192, .size_minus_1 = (6 - 1), .shift = 18

static inline u8 rfic_regs_rf_fem_1_pa_5_g_ctrl_0_ch_1_tx_pa_hb_stg_1_vg_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0003E000)) >> 13);
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_0_ch_1_tx_pa_hb_stg_1_vg_3_setf(struct cl_chip *chip, u8 ch1txpahbstg1vg3)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbstg1vg3 << 13) & ~((u32)0x0003E000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR) & ~((u32)0x0003E000)) | ((u32)ch1txpahbstg1vg3 << 13));
}

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_STG_1_VG_3 .addr_index = 0x00000192, .size_minus_1 = (5 - 1), .shift = 13

static inline u8 rfic_regs_rf_fem_1_pa_5_g_ctrl_0_ch_1_tx_pa_hb_stg_1_vg_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00001F00)) >> 8);
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_0_ch_1_tx_pa_hb_stg_1_vg_2_setf(struct cl_chip *chip, u8 ch1txpahbstg1vg2)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbstg1vg2 << 8) & ~((u32)0x00001F00)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR) & ~((u32)0x00001F00)) | ((u32)ch1txpahbstg1vg2 << 8));
}

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_STG_1_VG_2 .addr_index = 0x00000192, .size_minus_1 = (5 - 1), .shift = 8

static inline u8 rfic_regs_rf_fem_1_pa_5_g_ctrl_0_ch_1_tx_pa_ib_stg_1_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x000000FC)) >> 2);
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_0_ch_1_tx_pa_ib_stg_1_setf(struct cl_chip *chip, u8 ch1txpaibstg1)
{
	ASSERT_ERR_CHIP((((u32)ch1txpaibstg1 << 2) & ~((u32)0x000000FC)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR) & ~((u32)0x000000FC)) | ((u32)ch1txpaibstg1 << 2));
}

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_IB_STG_1 .addr_index = 0x00000192, .size_minus_1 = (6 - 1), .shift = 2

static inline u8 rfic_regs_rf_fem_1_pa_5_g_ctrl_0_ch_1_tx_pa_hb_vblk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_0_ch_1_tx_pa_hb_vblk_setf(struct cl_chip *chip, u8 ch1txpahbvblk)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbvblk << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR) & ~((u32)0x00000002)) | ((u32)ch1txpahbvblk << 1));
}

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_VBLK .addr_index = 0x00000192, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_rf_fem_1_pa_5_g_ctrl_0_ch_1_tx_pa_hb_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_0_ch_1_tx_pa_hb_en_setf(struct cl_chip *chip, u8 ch1txpahben)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahben << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)ch1txpahben << 0));
}

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_0_CH_1_TX_PA_HB_EN .addr_index = 0x00000192, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief RF_FEM_1_PA_5_G_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:25 CH1_spare24_in            0x00000000
 *    24:20 CH1_tx_pa_hb_stg2_vg3_pd  0x00000000
 *    19:15 CH1_tx_pa_hb_stg2_vg2_pd  0x00000000
 *    14:10 CH1_tx_pa_hb_stg1_vg3_pd  0x00000000
 *    09:05 CH1_tx_pa_hb_stg1_vg2_pd  0x00000000
 *    04:00 CH1_tx_pa_hb_stg2_vg3     0x00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000064C)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_OFFSET      0x0000064C
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_INDEX       0x00000193
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_1_pa_5_g_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR);
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR, value);
}

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1 .addr_index = 0x00000193, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_SPARE_24_IN_MASK    ((u32)0xFE000000)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_SPARE_24_IN_LSB    25
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_SPARE_24_IN_WIDTH    ((u32)0x00000007)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_2_VG_3_PD_MASK    ((u32)0x01F00000)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_2_VG_3_PD_LSB    20
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_2_VG_3_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_2_VG_2_PD_MASK    ((u32)0x000F8000)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_2_VG_2_PD_LSB    15
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_2_VG_2_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_1_VG_3_PD_MASK    ((u32)0x00007C00)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_1_VG_3_PD_LSB    10
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_1_VG_3_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_1_VG_2_PD_MASK    ((u32)0x000003E0)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_1_VG_2_PD_LSB    5
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_1_VG_2_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_2_VG_3_MASK    ((u32)0x0000001F)
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_2_VG_3_LSB    0
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_2_VG_3_WIDTH    ((u32)0x00000005)

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_SPARE_24_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_2_VG_3_PD_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_2_VG_2_PD_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_1_VG_3_PD_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_1_VG_2_PD_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_2_VG_3_RST    0x00000000

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_1_pack(struct cl_chip *chip, u8 ch1_spare24_in, u8 ch1_tx_pa_hb_stg2_vg3_pd, u8 ch1_tx_pa_hb_stg2_vg2_pd, u8 ch1_tx_pa_hb_stg1_vg3_pd, u8 ch1_tx_pa_hb_stg1_vg2_pd, u8 ch1_tx_pa_hb_stg2_vg3)
{
	ASSERT_ERR_CHIP((((u32)ch1_spare24_in << 25) & ~((u32)0xFE000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_stg2_vg3_pd << 20) & ~((u32)0x01F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_stg2_vg2_pd << 15) & ~((u32)0x000F8000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_stg1_vg3_pd << 10) & ~((u32)0x00007C00)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_stg1_vg2_pd << 5) & ~((u32)0x000003E0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_stg2_vg3 << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR, ((u32)ch1_spare24_in << 25) | ((u32)ch1_tx_pa_hb_stg2_vg3_pd << 20) | ((u32)ch1_tx_pa_hb_stg2_vg2_pd << 15) | ((u32)ch1_tx_pa_hb_stg1_vg3_pd << 10) | ((u32)ch1_tx_pa_hb_stg1_vg2_pd << 5) | ((u32)ch1_tx_pa_hb_stg2_vg3 << 0));
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_1_unpack(struct cl_chip *chip, u8 *ch1_spare24_in, u8 *ch1_tx_pa_hb_stg2_vg3_pd, u8 *ch1_tx_pa_hb_stg2_vg2_pd, u8 *ch1_tx_pa_hb_stg1_vg3_pd, u8 *ch1_tx_pa_hb_stg1_vg2_pd, u8 *ch1_tx_pa_hb_stg2_vg3)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR);

	*ch1_spare24_in = (local_val & ((u32)0xFE000000)) >> 25;
	*ch1_tx_pa_hb_stg2_vg3_pd = (local_val & ((u32)0x01F00000)) >> 20;
	*ch1_tx_pa_hb_stg2_vg2_pd = (local_val & ((u32)0x000F8000)) >> 15;
	*ch1_tx_pa_hb_stg1_vg3_pd = (local_val & ((u32)0x00007C00)) >> 10;
	*ch1_tx_pa_hb_stg1_vg2_pd = (local_val & ((u32)0x000003E0)) >> 5;
	*ch1_tx_pa_hb_stg2_vg3 = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u8 rfic_regs_rf_fem_1_pa_5_g_ctrl_1_ch_1_spare_24_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0xFE000000)) >> 25);
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_1_ch_1_spare_24_in_setf(struct cl_chip *chip, u8 ch1spare24in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare24in << 25) & ~((u32)0xFE000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR) & ~((u32)0xFE000000)) | ((u32)ch1spare24in << 25));
}

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_SPARE_24_IN .addr_index = 0x00000193, .size_minus_1 = (7 - 1), .shift = 25

static inline u8 rfic_regs_rf_fem_1_pa_5_g_ctrl_1_ch_1_tx_pa_hb_stg_2_vg_3_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x01F00000)) >> 20);
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_1_ch_1_tx_pa_hb_stg_2_vg_3_pd_setf(struct cl_chip *chip, u8 ch1txpahbstg2vg3pd)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbstg2vg3pd << 20) & ~((u32)0x01F00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR) & ~((u32)0x01F00000)) | ((u32)ch1txpahbstg2vg3pd << 20));
}

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_2_VG_3_PD .addr_index = 0x00000193, .size_minus_1 = (5 - 1), .shift = 20

static inline u8 rfic_regs_rf_fem_1_pa_5_g_ctrl_1_ch_1_tx_pa_hb_stg_2_vg_2_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x000F8000)) >> 15);
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_1_ch_1_tx_pa_hb_stg_2_vg_2_pd_setf(struct cl_chip *chip, u8 ch1txpahbstg2vg2pd)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbstg2vg2pd << 15) & ~((u32)0x000F8000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR) & ~((u32)0x000F8000)) | ((u32)ch1txpahbstg2vg2pd << 15));
}

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_2_VG_2_PD .addr_index = 0x00000193, .size_minus_1 = (5 - 1), .shift = 15

static inline u8 rfic_regs_rf_fem_1_pa_5_g_ctrl_1_ch_1_tx_pa_hb_stg_1_vg_3_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00007C00)) >> 10);
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_1_ch_1_tx_pa_hb_stg_1_vg_3_pd_setf(struct cl_chip *chip, u8 ch1txpahbstg1vg3pd)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbstg1vg3pd << 10) & ~((u32)0x00007C00)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR) & ~((u32)0x00007C00)) | ((u32)ch1txpahbstg1vg3pd << 10));
}

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_1_VG_3_PD .addr_index = 0x00000193, .size_minus_1 = (5 - 1), .shift = 10

static inline u8 rfic_regs_rf_fem_1_pa_5_g_ctrl_1_ch_1_tx_pa_hb_stg_1_vg_2_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x000003E0)) >> 5);
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_1_ch_1_tx_pa_hb_stg_1_vg_2_pd_setf(struct cl_chip *chip, u8 ch1txpahbstg1vg2pd)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbstg1vg2pd << 5) & ~((u32)0x000003E0)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR) & ~((u32)0x000003E0)) | ((u32)ch1txpahbstg1vg2pd << 5));
}

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_1_VG_2_PD .addr_index = 0x00000193, .size_minus_1 = (5 - 1), .shift = 5

static inline u8 rfic_regs_rf_fem_1_pa_5_g_ctrl_1_ch_1_tx_pa_hb_stg_2_vg_3_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

static inline void rfic_regs_rf_fem_1_pa_5_g_ctrl_1_ch_1_tx_pa_hb_stg_2_vg_3_setf(struct cl_chip *chip, u8 ch1txpahbstg2vg3)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbstg2vg3 << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_ADDR) & ~((u32)0x0000001F)) | ((u32)ch1txpahbstg2vg3 << 0));
}

#define RFIC_REGS_RF_FEM_1_PA_5_G_CTRL_1_CH_1_TX_PA_HB_STG_2_VG_3 .addr_index = 0x00000193, .size_minus_1 = (5 - 1), .shift = 0

/**
 * @brief RF_FEM_1_PA_FREQ_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    17    CH1_spare28_in            00000000
 *    16:15 CH1_tx_pa_lb_stg2_cap     0x00000000
 *    14    CH1_spare27_in            00000000
 *    13:12 CH1_tx_pa_lb_stg1_cap     0x00000000
 *    11:05 CH1_spare26_in            0x00000000
 *    04:03 CH1_tx_pa_hb_stg2_cap     0x00000000
 *    02    CH1_spare25_in            00000000
 *    01:00 CH1_tx_pa_hb_stg1_cap     0x00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000650)
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_OFFSET      0x00000650
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_INDEX       0x00000194
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_1_pa_freq_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR);
}

static inline void rfic_regs_rf_fem_1_pa_freq_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR, value);
}

#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0 .addr_index = 0x00000194, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_28_IN_BIT    ((u32)0x00020000)
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_28_IN_POS    17
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_LB_STG_2_CAP_MASK    ((u32)0x00018000)
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_LB_STG_2_CAP_LSB    15
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_LB_STG_2_CAP_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_27_IN_BIT    ((u32)0x00004000)
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_27_IN_POS    14
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_LB_STG_1_CAP_MASK    ((u32)0x00003000)
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_LB_STG_1_CAP_LSB    12
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_LB_STG_1_CAP_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_26_IN_MASK    ((u32)0x00000FE0)
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_26_IN_LSB    5
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_26_IN_WIDTH    ((u32)0x00000007)
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_HB_STG_2_CAP_MASK    ((u32)0x00000018)
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_HB_STG_2_CAP_LSB    3
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_HB_STG_2_CAP_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_25_IN_BIT    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_25_IN_POS    2
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_HB_STG_1_CAP_MASK    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_HB_STG_1_CAP_LSB    0
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_HB_STG_1_CAP_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_28_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_LB_STG_2_CAP_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_27_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_LB_STG_1_CAP_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_26_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_HB_STG_2_CAP_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_25_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_HB_STG_1_CAP_RST    0x00000000

static inline void rfic_regs_rf_fem_1_pa_freq_ctrl_0_pack(struct cl_chip *chip, u8 ch1_spare28_in, u8 ch1_tx_pa_lb_stg2_cap, u8 ch1_spare27_in, u8 ch1_tx_pa_lb_stg1_cap, u8 ch1_spare26_in, u8 ch1_tx_pa_hb_stg2_cap, u8 ch1_spare25_in, u8 ch1_tx_pa_hb_stg1_cap)
{
	ASSERT_ERR_CHIP((((u32)ch1_spare28_in << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_stg2_cap << 15) & ~((u32)0x00018000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare27_in << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_stg1_cap << 12) & ~((u32)0x00003000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare26_in << 5) & ~((u32)0x00000FE0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_stg2_cap << 3) & ~((u32)0x00000018)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare25_in << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_stg1_cap << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR, ((u32)ch1_spare28_in << 17) | ((u32)ch1_tx_pa_lb_stg2_cap << 15) | ((u32)ch1_spare27_in << 14) | ((u32)ch1_tx_pa_lb_stg1_cap << 12) | ((u32)ch1_spare26_in << 5) | ((u32)ch1_tx_pa_hb_stg2_cap << 3) | ((u32)ch1_spare25_in << 2) | ((u32)ch1_tx_pa_hb_stg1_cap << 0));
}

static inline void rfic_regs_rf_fem_1_pa_freq_ctrl_0_unpack(struct cl_chip *chip, u8 *ch1_spare28_in, u8 *ch1_tx_pa_lb_stg2_cap, u8 *ch1_spare27_in, u8 *ch1_tx_pa_lb_stg1_cap, u8 *ch1_spare26_in, u8 *ch1_tx_pa_hb_stg2_cap, u8 *ch1_spare25_in, u8 *ch1_tx_pa_hb_stg1_cap)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR);

	*ch1_spare28_in = (local_val & ((u32)0x00020000)) >> 17;
	*ch1_tx_pa_lb_stg2_cap = (local_val & ((u32)0x00018000)) >> 15;
	*ch1_spare27_in = (local_val & ((u32)0x00004000)) >> 14;
	*ch1_tx_pa_lb_stg1_cap = (local_val & ((u32)0x00003000)) >> 12;
	*ch1_spare26_in = (local_val & ((u32)0x00000FE0)) >> 5;
	*ch1_tx_pa_hb_stg2_cap = (local_val & ((u32)0x00000018)) >> 3;
	*ch1_spare25_in = (local_val & ((u32)0x00000004)) >> 2;
	*ch1_tx_pa_hb_stg1_cap = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_rf_fem_1_pa_freq_ctrl_0_ch_1_spare_28_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_rf_fem_1_pa_freq_ctrl_0_ch_1_spare_28_in_setf(struct cl_chip *chip, u8 ch1spare28in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare28in << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR) & ~((u32)0x00020000)) | ((u32)ch1spare28in << 17));
}

#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_28_IN .addr_index = 0x00000194, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_rf_fem_1_pa_freq_ctrl_0_ch_1_tx_pa_lb_stg_2_cap_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00018000)) >> 15);
}

static inline void rfic_regs_rf_fem_1_pa_freq_ctrl_0_ch_1_tx_pa_lb_stg_2_cap_setf(struct cl_chip *chip, u8 ch1txpalbstg2cap)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbstg2cap << 15) & ~((u32)0x00018000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR) & ~((u32)0x00018000)) | ((u32)ch1txpalbstg2cap << 15));
}

#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_LB_STG_2_CAP .addr_index = 0x00000194, .size_minus_1 = (2 - 1), .shift = 15

static inline u8 rfic_regs_rf_fem_1_pa_freq_ctrl_0_ch_1_spare_27_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void rfic_regs_rf_fem_1_pa_freq_ctrl_0_ch_1_spare_27_in_setf(struct cl_chip *chip, u8 ch1spare27in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare27in << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR) & ~((u32)0x00004000)) | ((u32)ch1spare27in << 14));
}

#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_27_IN .addr_index = 0x00000194, .size_minus_1 = (1 - 1), .shift = 14

static inline u8 rfic_regs_rf_fem_1_pa_freq_ctrl_0_ch_1_tx_pa_lb_stg_1_cap_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00003000)) >> 12);
}

static inline void rfic_regs_rf_fem_1_pa_freq_ctrl_0_ch_1_tx_pa_lb_stg_1_cap_setf(struct cl_chip *chip, u8 ch1txpalbstg1cap)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbstg1cap << 12) & ~((u32)0x00003000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR) & ~((u32)0x00003000)) | ((u32)ch1txpalbstg1cap << 12));
}

#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_LB_STG_1_CAP .addr_index = 0x00000194, .size_minus_1 = (2 - 1), .shift = 12

static inline u8 rfic_regs_rf_fem_1_pa_freq_ctrl_0_ch_1_spare_26_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000FE0)) >> 5);
}

static inline void rfic_regs_rf_fem_1_pa_freq_ctrl_0_ch_1_spare_26_in_setf(struct cl_chip *chip, u8 ch1spare26in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare26in << 5) & ~((u32)0x00000FE0)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR) & ~((u32)0x00000FE0)) | ((u32)ch1spare26in << 5));
}

#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_26_IN .addr_index = 0x00000194, .size_minus_1 = (7 - 1), .shift = 5

static inline u8 rfic_regs_rf_fem_1_pa_freq_ctrl_0_ch_1_tx_pa_hb_stg_2_cap_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000018)) >> 3);
}

static inline void rfic_regs_rf_fem_1_pa_freq_ctrl_0_ch_1_tx_pa_hb_stg_2_cap_setf(struct cl_chip *chip, u8 ch1txpahbstg2cap)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbstg2cap << 3) & ~((u32)0x00000018)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR) & ~((u32)0x00000018)) | ((u32)ch1txpahbstg2cap << 3));
}

#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_HB_STG_2_CAP .addr_index = 0x00000194, .size_minus_1 = (2 - 1), .shift = 3

static inline u8 rfic_regs_rf_fem_1_pa_freq_ctrl_0_ch_1_spare_25_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_rf_fem_1_pa_freq_ctrl_0_ch_1_spare_25_in_setf(struct cl_chip *chip, u8 ch1spare25in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare25in << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR) & ~((u32)0x00000004)) | ((u32)ch1spare25in << 2));
}

#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_SPARE_25_IN .addr_index = 0x00000194, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_rf_fem_1_pa_freq_ctrl_0_ch_1_tx_pa_hb_stg_1_cap_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_rf_fem_1_pa_freq_ctrl_0_ch_1_tx_pa_hb_stg_1_cap_setf(struct cl_chip *chip, u8 ch1txpahbstg1cap)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbstg1cap << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_ADDR) & ~((u32)0x00000003)) | ((u32)ch1txpahbstg1cap << 0));
}

#define RFIC_REGS_RF_FEM_1_PA_FREQ_CTRL_0_CH_1_TX_PA_HB_STG_1_CAP .addr_index = 0x00000194, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief RF_FEM_1_PA_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    26    CH1_tx_pa_lb_comp_en      00000000
 *    25:23 CH1_tx_pa_lb_adb_ctrl     0x00000000
 *    22    CH1_tx_pa_hb_comp_en      00000000
 *    21:19 CH1_tx_pa_hb_adb_ctrl     0x00000000
 *    18    CH1_spare31_in            00000000
 *    17    CH1_tx_pa_hb_loopbk_sw_en 00000000
 *    16    CH1_tx_pa_lb_loopbk_sw_en 00000000
 *    15    CH1_rx_lna_loopbk_sw_en   00000000
 *    14:13 CH1_tx_pa_lb_comp         0x00000000
 *    12:11 CH1_spare30_in            0x00000000
 *    10:09 CH1_tx_pa_hb_comp         0x00000000
 *    08    CH1_tx_pa_lb_res_ladder_en 00000000
 *    07    CH1_tx_pa_hb_res_ladder_en 00000000
 *    06:04 CH1_tx_pa_lb_stg2_slice_ctrl 0x00000000
 *    03    CH1_spare29_in            00000000
 *    02:00 CH1_tx_pa_hb_stg2_slice_ctrl 0x00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000654)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_OFFSET      0x00000654
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_INDEX       0x00000195
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_1_pa_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, value);
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0 .addr_index = 0x00000195, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_COMP_EN_BIT    ((u32)0x04000000)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_COMP_EN_POS    26
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_ADB_CTRL_MASK    ((u32)0x03800000)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_ADB_CTRL_LSB    23
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_ADB_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_COMP_EN_BIT    ((u32)0x00400000)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_COMP_EN_POS    22
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_ADB_CTRL_MASK    ((u32)0x00380000)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_ADB_CTRL_LSB    19
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_ADB_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_SPARE_31_IN_BIT    ((u32)0x00040000)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_SPARE_31_IN_POS    18
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_LOOPBK_SW_EN_BIT    ((u32)0x00020000)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_LOOPBK_SW_EN_POS    17
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_LOOPBK_SW_EN_BIT    ((u32)0x00010000)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_LOOPBK_SW_EN_POS    16
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_RX_LNA_LOOPBK_SW_EN_BIT    ((u32)0x00008000)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_RX_LNA_LOOPBK_SW_EN_POS    15
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_COMP_MASK    ((u32)0x00006000)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_COMP_LSB    13
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_COMP_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_SPARE_30_IN_MASK    ((u32)0x00001800)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_SPARE_30_IN_LSB    11
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_SPARE_30_IN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_COMP_MASK    ((u32)0x00000600)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_COMP_LSB    9
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_COMP_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_RES_LADDER_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_RES_LADDER_EN_POS    8
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_RES_LADDER_EN_BIT    ((u32)0x00000080)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_RES_LADDER_EN_POS    7
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_STG_2_SLICE_CTRL_MASK    ((u32)0x00000070)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_STG_2_SLICE_CTRL_LSB    4
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_STG_2_SLICE_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_SPARE_29_IN_BIT    ((u32)0x00000008)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_SPARE_29_IN_POS    3
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_STG_2_SLICE_CTRL_MASK    ((u32)0x00000007)
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_STG_2_SLICE_CTRL_LSB    0
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_STG_2_SLICE_CTRL_WIDTH    ((u32)0x00000003)

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_COMP_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_ADB_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_COMP_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_ADB_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_SPARE_31_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_LOOPBK_SW_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_LOOPBK_SW_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_RX_LNA_LOOPBK_SW_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_COMP_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_SPARE_30_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_COMP_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_RES_LADDER_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_RES_LADDER_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_STG_2_SLICE_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_SPARE_29_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_STG_2_SLICE_CTRL_RST    0x00000000

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_pack(struct cl_chip *chip, u8 ch1_tx_pa_lb_comp_en, u8 ch1_tx_pa_lb_adb_ctrl, u8 ch1_tx_pa_hb_comp_en, u8 ch1_tx_pa_hb_adb_ctrl, u8 ch1_spare31_in, u8 ch1_tx_pa_hb_loopbk_sw_en, u8 ch1_tx_pa_lb_loopbk_sw_en, u8 ch1_rx_lna_loopbk_sw_en, u8 ch1_tx_pa_lb_comp, u8 ch1_spare30_in, u8 ch1_tx_pa_hb_comp, u8 ch1_tx_pa_lb_res_ladder_en, u8 ch1_tx_pa_hb_res_ladder_en, u8 ch1_tx_pa_lb_stg2_slice_ctrl, u8 ch1_spare29_in, u8 ch1_tx_pa_hb_stg2_slice_ctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_comp_en << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_adb_ctrl << 23) & ~((u32)0x03800000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_comp_en << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_adb_ctrl << 19) & ~((u32)0x00380000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare31_in << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_loopbk_sw_en << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_loopbk_sw_en << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_loopbk_sw_en << 15) & ~((u32)0x00008000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_comp << 13) & ~((u32)0x00006000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare30_in << 11) & ~((u32)0x00001800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_comp << 9) & ~((u32)0x00000600)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_res_ladder_en << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_res_ladder_en << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_lb_stg2_slice_ctrl << 4) & ~((u32)0x00000070)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_spare29_in << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_tx_pa_hb_stg2_slice_ctrl << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, ((u32)ch1_tx_pa_lb_comp_en << 26) | ((u32)ch1_tx_pa_lb_adb_ctrl << 23) | ((u32)ch1_tx_pa_hb_comp_en << 22) | ((u32)ch1_tx_pa_hb_adb_ctrl << 19) | ((u32)ch1_spare31_in << 18) | ((u32)ch1_tx_pa_hb_loopbk_sw_en << 17) | ((u32)ch1_tx_pa_lb_loopbk_sw_en << 16) | ((u32)ch1_rx_lna_loopbk_sw_en << 15) | ((u32)ch1_tx_pa_lb_comp << 13) | ((u32)ch1_spare30_in << 11) | ((u32)ch1_tx_pa_hb_comp << 9) | ((u32)ch1_tx_pa_lb_res_ladder_en << 8) | ((u32)ch1_tx_pa_hb_res_ladder_en << 7) | ((u32)ch1_tx_pa_lb_stg2_slice_ctrl << 4) | ((u32)ch1_spare29_in << 3) | ((u32)ch1_tx_pa_hb_stg2_slice_ctrl << 0));
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_unpack(struct cl_chip *chip, u8 *ch1_tx_pa_lb_comp_en, u8 *ch1_tx_pa_lb_adb_ctrl, u8 *ch1_tx_pa_hb_comp_en, u8 *ch1_tx_pa_hb_adb_ctrl, u8 *ch1_spare31_in, u8 *ch1_tx_pa_hb_loopbk_sw_en, u8 *ch1_tx_pa_lb_loopbk_sw_en, u8 *ch1_rx_lna_loopbk_sw_en, u8 *ch1_tx_pa_lb_comp, u8 *ch1_spare30_in, u8 *ch1_tx_pa_hb_comp, u8 *ch1_tx_pa_lb_res_ladder_en, u8 *ch1_tx_pa_hb_res_ladder_en, u8 *ch1_tx_pa_lb_stg2_slice_ctrl, u8 *ch1_spare29_in, u8 *ch1_tx_pa_hb_stg2_slice_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	*ch1_tx_pa_lb_comp_en = (local_val & ((u32)0x04000000)) >> 26;
	*ch1_tx_pa_lb_adb_ctrl = (local_val & ((u32)0x03800000)) >> 23;
	*ch1_tx_pa_hb_comp_en = (local_val & ((u32)0x00400000)) >> 22;
	*ch1_tx_pa_hb_adb_ctrl = (local_val & ((u32)0x00380000)) >> 19;
	*ch1_spare31_in = (local_val & ((u32)0x00040000)) >> 18;
	*ch1_tx_pa_hb_loopbk_sw_en = (local_val & ((u32)0x00020000)) >> 17;
	*ch1_tx_pa_lb_loopbk_sw_en = (local_val & ((u32)0x00010000)) >> 16;
	*ch1_rx_lna_loopbk_sw_en = (local_val & ((u32)0x00008000)) >> 15;
	*ch1_tx_pa_lb_comp = (local_val & ((u32)0x00006000)) >> 13;
	*ch1_spare30_in = (local_val & ((u32)0x00001800)) >> 11;
	*ch1_tx_pa_hb_comp = (local_val & ((u32)0x00000600)) >> 9;
	*ch1_tx_pa_lb_res_ladder_en = (local_val & ((u32)0x00000100)) >> 8;
	*ch1_tx_pa_hb_res_ladder_en = (local_val & ((u32)0x00000080)) >> 7;
	*ch1_tx_pa_lb_stg2_slice_ctrl = (local_val & ((u32)0x00000070)) >> 4;
	*ch1_spare29_in = (local_val & ((u32)0x00000008)) >> 3;
	*ch1_tx_pa_hb_stg2_slice_ctrl = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_lb_comp_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_lb_comp_en_setf(struct cl_chip *chip, u8 ch1txpalbcompen)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbcompen << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR) & ~((u32)0x04000000)) | ((u32)ch1txpalbcompen << 26));
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_COMP_EN .addr_index = 0x00000195, .size_minus_1 = (1 - 1), .shift = 26

static inline u8 rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_lb_adb_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x03800000)) >> 23);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_lb_adb_ctrl_setf(struct cl_chip *chip, u8 ch1txpalbadbctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbadbctrl << 23) & ~((u32)0x03800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR) & ~((u32)0x03800000)) | ((u32)ch1txpalbadbctrl << 23));
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_ADB_CTRL .addr_index = 0x00000195, .size_minus_1 = (3 - 1), .shift = 23

static inline u8 rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_hb_comp_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_hb_comp_en_setf(struct cl_chip *chip, u8 ch1txpahbcompen)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbcompen << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR) & ~((u32)0x00400000)) | ((u32)ch1txpahbcompen << 22));
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_COMP_EN .addr_index = 0x00000195, .size_minus_1 = (1 - 1), .shift = 22

static inline u8 rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_hb_adb_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00380000)) >> 19);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_hb_adb_ctrl_setf(struct cl_chip *chip, u8 ch1txpahbadbctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbadbctrl << 19) & ~((u32)0x00380000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR) & ~((u32)0x00380000)) | ((u32)ch1txpahbadbctrl << 19));
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_ADB_CTRL .addr_index = 0x00000195, .size_minus_1 = (3 - 1), .shift = 19

static inline u8 rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_spare_31_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_spare_31_in_setf(struct cl_chip *chip, u8 ch1spare31in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare31in << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR) & ~((u32)0x00040000)) | ((u32)ch1spare31in << 18));
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_SPARE_31_IN .addr_index = 0x00000195, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_hb_loopbk_sw_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_hb_loopbk_sw_en_setf(struct cl_chip *chip, u8 ch1txpahbloopbkswen)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbloopbkswen << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR) & ~((u32)0x00020000)) | ((u32)ch1txpahbloopbkswen << 17));
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_LOOPBK_SW_EN .addr_index = 0x00000195, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_lb_loopbk_sw_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_lb_loopbk_sw_en_setf(struct cl_chip *chip, u8 ch1txpalbloopbkswen)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbloopbkswen << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR) & ~((u32)0x00010000)) | ((u32)ch1txpalbloopbkswen << 16));
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_LOOPBK_SW_EN .addr_index = 0x00000195, .size_minus_1 = (1 - 1), .shift = 16

static inline u8 rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_rx_lna_loopbk_sw_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_rx_lna_loopbk_sw_en_setf(struct cl_chip *chip, u8 ch1rxlnaloopbkswen)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnaloopbkswen << 15) & ~((u32)0x00008000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR) & ~((u32)0x00008000)) | ((u32)ch1rxlnaloopbkswen << 15));
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_RX_LNA_LOOPBK_SW_EN .addr_index = 0x00000195, .size_minus_1 = (1 - 1), .shift = 15

static inline u8 rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_lb_comp_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00006000)) >> 13);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_lb_comp_setf(struct cl_chip *chip, u8 ch1txpalbcomp)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbcomp << 13) & ~((u32)0x00006000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR) & ~((u32)0x00006000)) | ((u32)ch1txpalbcomp << 13));
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_COMP .addr_index = 0x00000195, .size_minus_1 = (2 - 1), .shift = 13

static inline u8 rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_spare_30_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00001800)) >> 11);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_spare_30_in_setf(struct cl_chip *chip, u8 ch1spare30in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare30in << 11) & ~((u32)0x00001800)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR) & ~((u32)0x00001800)) | ((u32)ch1spare30in << 11));
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_SPARE_30_IN .addr_index = 0x00000195, .size_minus_1 = (2 - 1), .shift = 11

static inline u8 rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_hb_comp_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000600)) >> 9);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_hb_comp_setf(struct cl_chip *chip, u8 ch1txpahbcomp)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbcomp << 9) & ~((u32)0x00000600)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR) & ~((u32)0x00000600)) | ((u32)ch1txpahbcomp << 9));
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_COMP .addr_index = 0x00000195, .size_minus_1 = (2 - 1), .shift = 9

static inline u8 rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_lb_res_ladder_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_lb_res_ladder_en_setf(struct cl_chip *chip, u8 ch1txpalbresladderen)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbresladderen << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR) & ~((u32)0x00000100)) | ((u32)ch1txpalbresladderen << 8));
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_RES_LADDER_EN .addr_index = 0x00000195, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_hb_res_ladder_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_hb_res_ladder_en_setf(struct cl_chip *chip, u8 ch1txpahbresladderen)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbresladderen << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR) & ~((u32)0x00000080)) | ((u32)ch1txpahbresladderen << 7));
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_RES_LADDER_EN .addr_index = 0x00000195, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_lb_stg_2_slice_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000070)) >> 4);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_lb_stg_2_slice_ctrl_setf(struct cl_chip *chip, u8 ch1txpalbstg2slicectrl)
{
	ASSERT_ERR_CHIP((((u32)ch1txpalbstg2slicectrl << 4) & ~((u32)0x00000070)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR) & ~((u32)0x00000070)) | ((u32)ch1txpalbstg2slicectrl << 4));
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_LB_STG_2_SLICE_CTRL .addr_index = 0x00000195, .size_minus_1 = (3 - 1), .shift = 4

static inline u8 rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_spare_29_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_spare_29_in_setf(struct cl_chip *chip, u8 ch1spare29in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare29in << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR) & ~((u32)0x00000008)) | ((u32)ch1spare29in << 3));
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_SPARE_29_IN .addr_index = 0x00000195, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_hb_stg_2_slice_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void rfic_regs_rf_fem_1_pa_ctrl_0_ch_1_tx_pa_hb_stg_2_slice_ctrl_setf(struct cl_chip *chip, u8 ch1txpahbstg2slicectrl)
{
	ASSERT_ERR_CHIP((((u32)ch1txpahbstg2slicectrl << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_PA_CTRL_0_ADDR) & ~((u32)0x00000007)) | ((u32)ch1txpahbstg2slicectrl << 0));
}

#define RFIC_REGS_RF_FEM_1_PA_CTRL_0_CH_1_TX_PA_HB_STG_2_SLICE_CTRL .addr_index = 0x00000195, .size_minus_1 = (3 - 1), .shift = 0

/**
 * @brief RF_FEM_1_LNA_ST_2_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    CH1_rx_lna_st2_sel_rxrf_ptat 00000000
 *    30    CH1_rx_lna_st2_bias_en    00000000
 *    29    CH1_rx_lna_st2_opamp_bias_sel 00000000
 *    28:27 CH1_rx_lna_st2_vdd10sel   0x00000000
 *    26:25 CH1_rx_lna_st2_vcurstr    0x00000000
 *    24:21 CH1_rx_lna_st2_vcasc      0x00000000
 *    20    CH1_rx_lna_st2_ldo14_en   00000000
 *    19    CH1_rx_lna_st2_ldo10_en   00000000
 *    18:15 CH1_rx_lna_st2_deq_res    0x00000000
 *    14:11 CH1_rx_lna_st2_cur_ctrl   0x00000000
 *    10:07 CH1_rx_lna_st2_cb_sec     0x00000000
 *    06:05 CH1_rx_lna_st2_cb_pr_coarse 0x00000000
 *    04:01 CH1_rx_lna_st2_cb_pr      0x00000000
 *    00    CH1_rx_lna_st2_en         00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000658)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_OFFSET      0x00000658
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_INDEX       0x00000196
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_1_lna_st_2_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR, value);
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0 .addr_index = 0x00000196, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_SEL_RXRF_PTAT_BIT    ((u32)0x80000000)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_SEL_RXRF_PTAT_POS    31
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_BIAS_EN_BIT    ((u32)0x40000000)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_BIAS_EN_POS    30
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_OPAMP_BIAS_SEL_BIT    ((u32)0x20000000)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_OPAMP_BIAS_SEL_POS    29
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_VDD_10_SEL_MASK    ((u32)0x18000000)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_VDD_10_SEL_LSB    27
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_VDD_10_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_VCURSTR_MASK    ((u32)0x06000000)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_VCURSTR_LSB    25
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_VCURSTR_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_VCASC_MASK    ((u32)0x01E00000)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_VCASC_LSB    21
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_VCASC_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_LDO_14_EN_BIT    ((u32)0x00100000)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_LDO_14_EN_POS    20
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_LDO_10_EN_BIT    ((u32)0x00080000)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_LDO_10_EN_POS    19
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_DEQ_RES_MASK    ((u32)0x00078000)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_DEQ_RES_LSB    15
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_DEQ_RES_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CUR_CTRL_MASK    ((u32)0x00007800)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CUR_CTRL_LSB    11
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CUR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CB_SEC_MASK    ((u32)0x00000780)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CB_SEC_LSB    7
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CB_SEC_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CB_PR_COARSE_MASK    ((u32)0x00000060)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CB_PR_COARSE_LSB    5
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CB_PR_COARSE_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CB_PR_MASK    ((u32)0x0000001E)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CB_PR_LSB    1
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CB_PR_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_EN_POS    0

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_SEL_RXRF_PTAT_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_BIAS_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_OPAMP_BIAS_SEL_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_VDD_10_SEL_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_VCURSTR_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_VCASC_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_LDO_14_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_LDO_10_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_DEQ_RES_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CUR_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CB_SEC_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CB_PR_COARSE_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CB_PR_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_EN_RST    0x00000000

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_pack(struct cl_chip *chip, u8 ch1_rx_lna_st2_sel_rxrf_ptat, u8 ch1_rx_lna_st2_bias_en, u8 ch1_rx_lna_st2_opamp_bias_sel, u8 ch1_rx_lna_st2_vdd10sel, u8 ch1_rx_lna_st2_vcurstr, u8 ch1_rx_lna_st2_vcasc, u8 ch1_rx_lna_st2_ldo14_en, u8 ch1_rx_lna_st2_ldo10_en, u8 ch1_rx_lna_st2_deq_res, u8 ch1_rx_lna_st2_cur_ctrl, u8 ch1_rx_lna_st2_cb_sec, u8 ch1_rx_lna_st2_cb_pr_coarse, u8 ch1_rx_lna_st2_cb_pr, u8 ch1_rx_lna_st2_en)
{
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st2_sel_rxrf_ptat << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st2_bias_en << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st2_opamp_bias_sel << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st2_vdd10sel << 27) & ~((u32)0x18000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st2_vcurstr << 25) & ~((u32)0x06000000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st2_vcasc << 21) & ~((u32)0x01E00000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st2_ldo14_en << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st2_ldo10_en << 19) & ~((u32)0x00080000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st2_deq_res << 15) & ~((u32)0x00078000)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st2_cur_ctrl << 11) & ~((u32)0x00007800)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st2_cb_sec << 7) & ~((u32)0x00000780)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st2_cb_pr_coarse << 5) & ~((u32)0x00000060)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st2_cb_pr << 1) & ~((u32)0x0000001E)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st2_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR, ((u32)ch1_rx_lna_st2_sel_rxrf_ptat << 31) | ((u32)ch1_rx_lna_st2_bias_en << 30) | ((u32)ch1_rx_lna_st2_opamp_bias_sel << 29) | ((u32)ch1_rx_lna_st2_vdd10sel << 27) | ((u32)ch1_rx_lna_st2_vcurstr << 25) | ((u32)ch1_rx_lna_st2_vcasc << 21) | ((u32)ch1_rx_lna_st2_ldo14_en << 20) | ((u32)ch1_rx_lna_st2_ldo10_en << 19) | ((u32)ch1_rx_lna_st2_deq_res << 15) | ((u32)ch1_rx_lna_st2_cur_ctrl << 11) | ((u32)ch1_rx_lna_st2_cb_sec << 7) | ((u32)ch1_rx_lna_st2_cb_pr_coarse << 5) | ((u32)ch1_rx_lna_st2_cb_pr << 1) | ((u32)ch1_rx_lna_st2_en << 0));
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_unpack(struct cl_chip *chip, u8 *ch1_rx_lna_st2_sel_rxrf_ptat, u8 *ch1_rx_lna_st2_bias_en, u8 *ch1_rx_lna_st2_opamp_bias_sel, u8 *ch1_rx_lna_st2_vdd10sel, u8 *ch1_rx_lna_st2_vcurstr, u8 *ch1_rx_lna_st2_vcasc, u8 *ch1_rx_lna_st2_ldo14_en, u8 *ch1_rx_lna_st2_ldo10_en, u8 *ch1_rx_lna_st2_deq_res, u8 *ch1_rx_lna_st2_cur_ctrl, u8 *ch1_rx_lna_st2_cb_sec, u8 *ch1_rx_lna_st2_cb_pr_coarse, u8 *ch1_rx_lna_st2_cb_pr, u8 *ch1_rx_lna_st2_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR);

	*ch1_rx_lna_st2_sel_rxrf_ptat = (local_val & ((u32)0x80000000)) >> 31;
	*ch1_rx_lna_st2_bias_en = (local_val & ((u32)0x40000000)) >> 30;
	*ch1_rx_lna_st2_opamp_bias_sel = (local_val & ((u32)0x20000000)) >> 29;
	*ch1_rx_lna_st2_vdd10sel = (local_val & ((u32)0x18000000)) >> 27;
	*ch1_rx_lna_st2_vcurstr = (local_val & ((u32)0x06000000)) >> 25;
	*ch1_rx_lna_st2_vcasc = (local_val & ((u32)0x01E00000)) >> 21;
	*ch1_rx_lna_st2_ldo14_en = (local_val & ((u32)0x00100000)) >> 20;
	*ch1_rx_lna_st2_ldo10_en = (local_val & ((u32)0x00080000)) >> 19;
	*ch1_rx_lna_st2_deq_res = (local_val & ((u32)0x00078000)) >> 15;
	*ch1_rx_lna_st2_cur_ctrl = (local_val & ((u32)0x00007800)) >> 11;
	*ch1_rx_lna_st2_cb_sec = (local_val & ((u32)0x00000780)) >> 7;
	*ch1_rx_lna_st2_cb_pr_coarse = (local_val & ((u32)0x00000060)) >> 5;
	*ch1_rx_lna_st2_cb_pr = (local_val & ((u32)0x0000001E)) >> 1;
	*ch1_rx_lna_st2_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_sel_rxrf_ptat_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_sel_rxrf_ptat_setf(struct cl_chip *chip, u8 ch1rxlnast2selrxrfptat)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast2selrxrfptat << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x80000000)) | ((u32)ch1rxlnast2selrxrfptat << 31));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_SEL_RXRF_PTAT .addr_index = 0x00000196, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_bias_en_setf(struct cl_chip *chip, u8 ch1rxlnast2biasen)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast2biasen << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x40000000)) | ((u32)ch1rxlnast2biasen << 30));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_BIAS_EN .addr_index = 0x00000196, .size_minus_1 = (1 - 1), .shift = 30

static inline u8 rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_opamp_bias_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_opamp_bias_sel_setf(struct cl_chip *chip, u8 ch1rxlnast2opampbiassel)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast2opampbiassel << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x20000000)) | ((u32)ch1rxlnast2opampbiassel << 29));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_OPAMP_BIAS_SEL .addr_index = 0x00000196, .size_minus_1 = (1 - 1), .shift = 29

static inline u8 rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_vdd_10_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x18000000)) >> 27);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_vdd_10_sel_setf(struct cl_chip *chip, u8 ch1rxlnast2vdd10sel)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast2vdd10sel << 27) & ~((u32)0x18000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x18000000)) | ((u32)ch1rxlnast2vdd10sel << 27));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_VDD_10_SEL .addr_index = 0x00000196, .size_minus_1 = (2 - 1), .shift = 27

static inline u8 rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_vcurstr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x06000000)) >> 25);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_vcurstr_setf(struct cl_chip *chip, u8 ch1rxlnast2vcurstr)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast2vcurstr << 25) & ~((u32)0x06000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x06000000)) | ((u32)ch1rxlnast2vcurstr << 25));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_VCURSTR .addr_index = 0x00000196, .size_minus_1 = (2 - 1), .shift = 25

static inline u8 rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_vcasc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x01E00000)) >> 21);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_vcasc_setf(struct cl_chip *chip, u8 ch1rxlnast2vcasc)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast2vcasc << 21) & ~((u32)0x01E00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x01E00000)) | ((u32)ch1rxlnast2vcasc << 21));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_VCASC .addr_index = 0x00000196, .size_minus_1 = (4 - 1), .shift = 21

static inline u8 rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_ldo_14_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_ldo_14_en_setf(struct cl_chip *chip, u8 ch1rxlnast2ldo14en)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast2ldo14en << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x00100000)) | ((u32)ch1rxlnast2ldo14en << 20));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_LDO_14_EN .addr_index = 0x00000196, .size_minus_1 = (1 - 1), .shift = 20

static inline u8 rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_ldo_10_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_ldo_10_en_setf(struct cl_chip *chip, u8 ch1rxlnast2ldo10en)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast2ldo10en << 19) & ~((u32)0x00080000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x00080000)) | ((u32)ch1rxlnast2ldo10en << 19));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_LDO_10_EN .addr_index = 0x00000196, .size_minus_1 = (1 - 1), .shift = 19

static inline u8 rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_deq_res_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00078000)) >> 15);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_deq_res_setf(struct cl_chip *chip, u8 ch1rxlnast2deqres)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast2deqres << 15) & ~((u32)0x00078000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x00078000)) | ((u32)ch1rxlnast2deqres << 15));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_DEQ_RES .addr_index = 0x00000196, .size_minus_1 = (4 - 1), .shift = 15

static inline u8 rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_cur_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00007800)) >> 11);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_cur_ctrl_setf(struct cl_chip *chip, u8 ch1rxlnast2curctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast2curctrl << 11) & ~((u32)0x00007800)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x00007800)) | ((u32)ch1rxlnast2curctrl << 11));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CUR_CTRL .addr_index = 0x00000196, .size_minus_1 = (4 - 1), .shift = 11

static inline u8 rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_cb_sec_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000780)) >> 7);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_cb_sec_setf(struct cl_chip *chip, u8 ch1rxlnast2cbsec)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast2cbsec << 7) & ~((u32)0x00000780)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x00000780)) | ((u32)ch1rxlnast2cbsec << 7));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CB_SEC .addr_index = 0x00000196, .size_minus_1 = (4 - 1), .shift = 7

static inline u8 rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_cb_pr_coarse_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000060)) >> 5);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_cb_pr_coarse_setf(struct cl_chip *chip, u8 ch1rxlnast2cbprcoarse)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast2cbprcoarse << 5) & ~((u32)0x00000060)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x00000060)) | ((u32)ch1rxlnast2cbprcoarse << 5));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CB_PR_COARSE .addr_index = 0x00000196, .size_minus_1 = (2 - 1), .shift = 5

static inline u8 rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_cb_pr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000001E)) >> 1);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_cb_pr_setf(struct cl_chip *chip, u8 ch1rxlnast2cbpr)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast2cbpr << 1) & ~((u32)0x0000001E)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x0000001E)) | ((u32)ch1rxlnast2cbpr << 1));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_CB_PR .addr_index = 0x00000196, .size_minus_1 = (4 - 1), .shift = 1

static inline u8 rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_0_ch_1_rx_lna_st_2_en_setf(struct cl_chip *chip, u8 ch1rxlnast2en)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast2en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)ch1rxlnast2en << 0));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_0_CH_1_RX_LNA_ST_2_EN .addr_index = 0x00000196, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief RF_FEM_1_LNA_ST_2_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:09 CH1_spare32_in            0x00000000
 *    08:05 CH1_rx_lna_st2_cgs_ctrl   0x00000000
 *    04:00 CH1_rx_lna_st2_vbody_ctrl 0x00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000065C)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_OFFSET      0x0000065C
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_INDEX       0x00000197
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_1_lna_st_2_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_ADDR);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_ADDR, value);
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1 .addr_index = 0x00000197, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_CH_1_SPARE_32_IN_MASK    ((u32)0xFFFFFE00)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_CH_1_SPARE_32_IN_LSB    9
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_CH_1_SPARE_32_IN_WIDTH    ((u32)0x00000017)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_CH_1_RX_LNA_ST_2_CGS_CTRL_MASK    ((u32)0x000001E0)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_CH_1_RX_LNA_ST_2_CGS_CTRL_LSB    5
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_CH_1_RX_LNA_ST_2_CGS_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_CH_1_RX_LNA_ST_2_VBODY_CTRL_MASK    ((u32)0x0000001F)
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_CH_1_RX_LNA_ST_2_VBODY_CTRL_LSB    0
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_CH_1_RX_LNA_ST_2_VBODY_CTRL_WIDTH    ((u32)0x00000005)

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_CH_1_SPARE_32_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_CH_1_RX_LNA_ST_2_CGS_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_CH_1_RX_LNA_ST_2_VBODY_CTRL_RST    0x00000000

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_1_pack(struct cl_chip *chip, u32 ch1_spare32_in, u8 ch1_rx_lna_st2_cgs_ctrl, u8 ch1_rx_lna_st2_vbody_ctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1_spare32_in << 9) & ~((u32)0xFFFFFE00)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st2_cgs_ctrl << 5) & ~((u32)0x000001E0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_rx_lna_st2_vbody_ctrl << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_ADDR, ((u32)ch1_spare32_in << 9) | ((u32)ch1_rx_lna_st2_cgs_ctrl << 5) | ((u32)ch1_rx_lna_st2_vbody_ctrl << 0));
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_1_unpack(struct cl_chip *chip, u32 *ch1_spare32_in, u8 *ch1_rx_lna_st2_cgs_ctrl, u8 *ch1_rx_lna_st2_vbody_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_ADDR);

	*ch1_spare32_in = (local_val & ((u32)0xFFFFFE00)) >> 9;
	*ch1_rx_lna_st2_cgs_ctrl = (local_val & ((u32)0x000001E0)) >> 5;
	*ch1_rx_lna_st2_vbody_ctrl = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u32 rfic_regs_rf_fem_1_lna_st_2_ctrl_1_ch_1_spare_32_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_ADDR);

	return (u32)((local_val & ((u32)0xFFFFFE00)) >> 9);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_1_ch_1_spare_32_in_setf(struct cl_chip *chip, u32 ch1spare32in)
{
	ASSERT_ERR_CHIP((((u32)ch1spare32in << 9) & ~((u32)0xFFFFFE00)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_ADDR) & ~((u32)0xFFFFFE00)) | ((u32)ch1spare32in << 9));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_CH_1_SPARE_32_IN .addr_index = 0x00000197, .size_minus_1 = (23 - 1), .shift = 9

static inline u8 rfic_regs_rf_fem_1_lna_st_2_ctrl_1_ch_1_rx_lna_st_2_cgs_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x000001E0)) >> 5);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_1_ch_1_rx_lna_st_2_cgs_ctrl_setf(struct cl_chip *chip, u8 ch1rxlnast2cgsctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast2cgsctrl << 5) & ~((u32)0x000001E0)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_ADDR) & ~((u32)0x000001E0)) | ((u32)ch1rxlnast2cgsctrl << 5));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_CH_1_RX_LNA_ST_2_CGS_CTRL .addr_index = 0x00000197, .size_minus_1 = (4 - 1), .shift = 5

static inline u8 rfic_regs_rf_fem_1_lna_st_2_ctrl_1_ch_1_rx_lna_st_2_vbody_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

static inline void rfic_regs_rf_fem_1_lna_st_2_ctrl_1_ch_1_rx_lna_st_2_vbody_ctrl_setf(struct cl_chip *chip, u8 ch1rxlnast2vbodyctrl)
{
	ASSERT_ERR_CHIP((((u32)ch1rxlnast2vbodyctrl << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_ADDR) & ~((u32)0x0000001F)) | ((u32)ch1rxlnast2vbodyctrl << 0));
}

#define RFIC_REGS_RF_FEM_1_LNA_ST_2_CTRL_1_CH_1_RX_LNA_ST_2_VBODY_CTRL .addr_index = 0x00000197, .size_minus_1 = (5 - 1), .shift = 0

/**
 * @brief CH_1_TX_GAIN_CTRL_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    19:16 CH1_tx_mix_gain           0x00000000
 *    15:08 CH1_tx_pga_gain_ctrl      0x00000000
 *    07:00 CH1_tx_prepa_gain_ctrl    0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000660)
#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_OFFSET      0x00000660
#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_INDEX       0x00000198
#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_RESET       0x00000000

static inline u32 rfic_regs_ch_1_tx_gain_ctrl_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_ADDR);
}

#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT .addr_index = 0x00000198, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_CH_1_TX_MIX_GAIN_MASK    ((u32)0x000F0000)
#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_CH_1_TX_MIX_GAIN_LSB    16
#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_CH_1_TX_MIX_GAIN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_CH_1_TX_PGA_GAIN_CTRL_MASK    ((u32)0x0000FF00)
#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_CH_1_TX_PGA_GAIN_CTRL_LSB    8
#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_CH_1_TX_PGA_GAIN_CTRL_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_CH_1_TX_PREPA_GAIN_CTRL_MASK    ((u32)0x000000FF)
#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_CH_1_TX_PREPA_GAIN_CTRL_LSB    0
#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_CH_1_TX_PREPA_GAIN_CTRL_WIDTH    ((u32)0x00000008)

#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_CH_1_TX_MIX_GAIN_RST    0x00000000
#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_CH_1_TX_PGA_GAIN_CTRL_RST    0x00000000
#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_CH_1_TX_PREPA_GAIN_CTRL_RST    0x00000000

static inline void rfic_regs_ch_1_tx_gain_ctrl_out_unpack(struct cl_chip *chip, u8 *ch1_tx_mix_gain, u8 *ch1_tx_pga_gain_ctrl, u8 *ch1_tx_prepa_gain_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_ADDR);

	*ch1_tx_mix_gain = (local_val & ((u32)0x000F0000)) >> 16;
	*ch1_tx_pga_gain_ctrl = (local_val & ((u32)0x0000FF00)) >> 8;
	*ch1_tx_prepa_gain_ctrl = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 rfic_regs_ch_1_tx_gain_ctrl_out_ch_1_tx_mix_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x000F0000)) >> 16);
}

#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_CH_1_TX_MIX_GAIN .addr_index = 0x00000198, .size_minus_1 = (4 - 1), .shift = 16

static inline u8 rfic_regs_ch_1_tx_gain_ctrl_out_ch_1_tx_pga_gain_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_CH_1_TX_PGA_GAIN_CTRL .addr_index = 0x00000198, .size_minus_1 = (8 - 1), .shift = 8

static inline u8 rfic_regs_ch_1_tx_gain_ctrl_out_ch_1_tx_prepa_gain_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

#define RFIC_REGS_CH_1_TX_GAIN_CTRL_OUT_CH_1_TX_PREPA_GAIN_CTRL .addr_index = 0x00000198, .size_minus_1 = (8 - 1), .shift = 0

/**
 * @brief CH_1_RX_GAIN_CTRL_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 CH1_rx_lna_st2_deq_res    0x00000000
 *    11:08 CH1_rx_lna_st2_vcasc      0x00000000
 *    07:04 CH1_rx_lna_st1_deq_res    0x00000000
 *    03:00 CH1_rx_lna_st1_vcasc      0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000664)
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_OFFSET      0x00000664
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_INDEX       0x00000199
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_RESET       0x00000000

static inline u32 rfic_regs_ch_1_rx_gain_ctrl_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_ADDR);
}

#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT .addr_index = 0x00000199, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_2_DEQ_RES_MASK    ((u32)0x0000F000)
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_2_DEQ_RES_LSB    12
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_2_DEQ_RES_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_2_VCASC_MASK    ((u32)0x00000F00)
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_2_VCASC_LSB    8
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_2_VCASC_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_1_DEQ_RES_MASK    ((u32)0x000000F0)
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_1_DEQ_RES_LSB    4
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_1_DEQ_RES_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_1_VCASC_MASK    ((u32)0x0000000F)
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_1_VCASC_LSB    0
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_1_VCASC_WIDTH    ((u32)0x00000004)

#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_2_DEQ_RES_RST    0x00000000
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_2_VCASC_RST    0x00000000
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_1_DEQ_RES_RST    0x00000000
#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_1_VCASC_RST    0x00000000

static inline void rfic_regs_ch_1_rx_gain_ctrl_out_unpack(struct cl_chip *chip, u8 *ch1_rx_lna_st2_deq_res, u8 *ch1_rx_lna_st2_vcasc, u8 *ch1_rx_lna_st1_deq_res, u8 *ch1_rx_lna_st1_vcasc)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_ADDR);

	*ch1_rx_lna_st2_deq_res = (local_val & ((u32)0x0000F000)) >> 12;
	*ch1_rx_lna_st2_vcasc = (local_val & ((u32)0x00000F00)) >> 8;
	*ch1_rx_lna_st1_deq_res = (local_val & ((u32)0x000000F0)) >> 4;
	*ch1_rx_lna_st1_vcasc = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 rfic_regs_ch_1_rx_gain_ctrl_out_ch_1_rx_lna_st_2_deq_res_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x0000F000)) >> 12);
}

#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_2_DEQ_RES .addr_index = 0x00000199, .size_minus_1 = (4 - 1), .shift = 12

static inline u8 rfic_regs_ch_1_rx_gain_ctrl_out_ch_1_rx_lna_st_2_vcasc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000F00)) >> 8);
}

#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_2_VCASC .addr_index = 0x00000199, .size_minus_1 = (4 - 1), .shift = 8

static inline u8 rfic_regs_ch_1_rx_gain_ctrl_out_ch_1_rx_lna_st_1_deq_res_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x000000F0)) >> 4);
}

#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_1_DEQ_RES .addr_index = 0x00000199, .size_minus_1 = (4 - 1), .shift = 4

static inline u8 rfic_regs_ch_1_rx_gain_ctrl_out_ch_1_rx_lna_st_1_vcasc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

#define RFIC_REGS_CH_1_RX_GAIN_CTRL_OUT_CH_1_RX_LNA_ST_1_VCASC .addr_index = 0x00000199, .size_minus_1 = (4 - 1), .shift = 0

/**
 * @brief BT_BBIQ register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    09    BT_spare0_in              00000000
 *    08    BT_bb_bias_en             00000000
 *    07:04 BT_rcal_val               0x00000008
 *    03:02 BT_tx_mixer_vcm_ctrl      0x00000000
 *    01:00 BT_bb_gainconf            0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_BBIQ_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000680)
#define RFIC_REGS_BT_BBIQ_OFFSET      0x00000680
#define RFIC_REGS_BT_BBIQ_INDEX       0x000001A0
#define RFIC_REGS_BT_BBIQ_RESET       0x00000080

static inline u32 rfic_regs_bt_bbiq_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_BBIQ_ADDR);
}

static inline void rfic_regs_bt_bbiq_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_BBIQ_ADDR, value);
}

#define RFIC_REGS_BT_BBIQ .addr_index = 0x000001A0, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_BBIQ_BT_SPARE_0_IN_BIT    ((u32)0x00000200)
#define RFIC_REGS_BT_BBIQ_BT_SPARE_0_IN_POS    9
#define RFIC_REGS_BT_BBIQ_BT_BB_BIAS_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_BT_BBIQ_BT_BB_BIAS_EN_POS    8
#define RFIC_REGS_BT_BBIQ_BT_RCAL_VAL_MASK    ((u32)0x000000F0)
#define RFIC_REGS_BT_BBIQ_BT_RCAL_VAL_LSB    4
#define RFIC_REGS_BT_BBIQ_BT_RCAL_VAL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_BBIQ_BT_TX_MIXER_VCM_CTRL_MASK    ((u32)0x0000000C)
#define RFIC_REGS_BT_BBIQ_BT_TX_MIXER_VCM_CTRL_LSB    2
#define RFIC_REGS_BT_BBIQ_BT_TX_MIXER_VCM_CTRL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_BT_BBIQ_BT_BB_GAINCONF_MASK    ((u32)0x00000003)
#define RFIC_REGS_BT_BBIQ_BT_BB_GAINCONF_LSB    0
#define RFIC_REGS_BT_BBIQ_BT_BB_GAINCONF_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_BT_BBIQ_BT_SPARE_0_IN_RST    0x00000000
#define RFIC_REGS_BT_BBIQ_BT_BB_BIAS_EN_RST    0x00000000
#define RFIC_REGS_BT_BBIQ_BT_RCAL_VAL_RST    0x00000008
#define RFIC_REGS_BT_BBIQ_BT_TX_MIXER_VCM_CTRL_RST    0x00000000
#define RFIC_REGS_BT_BBIQ_BT_BB_GAINCONF_RST    0x00000000

static inline void rfic_regs_bt_bbiq_pack(struct cl_chip *chip, u8 bt_spare0_in, u8 bt_bb_bias_en, u8 bt_rcal_val, u8 bt_tx_mixer_vcm_ctrl, u8 bt_bb_gainconf)
{
	ASSERT_ERR_CHIP((((u32)bt_spare0_in << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_bb_bias_en << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rcal_val << 4) & ~((u32)0x000000F0)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_mixer_vcm_ctrl << 2) & ~((u32)0x0000000C)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_bb_gainconf << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BBIQ_ADDR, ((u32)bt_spare0_in << 9) | ((u32)bt_bb_bias_en << 8) | ((u32)bt_rcal_val << 4) | ((u32)bt_tx_mixer_vcm_ctrl << 2) | ((u32)bt_bb_gainconf << 0));
}

static inline void rfic_regs_bt_bbiq_unpack(struct cl_chip *chip, u8 *bt_spare0_in, u8 *bt_bb_bias_en, u8 *bt_rcal_val, u8 *bt_tx_mixer_vcm_ctrl, u8 *bt_bb_gainconf)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BBIQ_ADDR);

	*bt_spare0_in = (local_val & ((u32)0x00000200)) >> 9;
	*bt_bb_bias_en = (local_val & ((u32)0x00000100)) >> 8;
	*bt_rcal_val = (local_val & ((u32)0x000000F0)) >> 4;
	*bt_tx_mixer_vcm_ctrl = (local_val & ((u32)0x0000000C)) >> 2;
	*bt_bb_gainconf = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_bt_bbiq_bt_spare_0_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BBIQ_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void rfic_regs_bt_bbiq_bt_spare_0_in_setf(struct cl_chip *chip, u8 btspare0in)
{
	ASSERT_ERR_CHIP((((u32)btspare0in << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BBIQ_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BBIQ_ADDR) & ~((u32)0x00000200)) | ((u32)btspare0in << 9));
}

#define RFIC_REGS_BT_BBIQ_BT_SPARE_0_IN .addr_index = 0x000001A0, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_bt_bbiq_bt_bb_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BBIQ_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_bt_bbiq_bt_bb_bias_en_setf(struct cl_chip *chip, u8 btbbbiasen)
{
	ASSERT_ERR_CHIP((((u32)btbbbiasen << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BBIQ_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BBIQ_ADDR) & ~((u32)0x00000100)) | ((u32)btbbbiasen << 8));
}

#define RFIC_REGS_BT_BBIQ_BT_BB_BIAS_EN .addr_index = 0x000001A0, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_bt_bbiq_bt_rcal_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BBIQ_ADDR);

	return (u8)((local_val & ((u32)0x000000F0)) >> 4);
}

static inline void rfic_regs_bt_bbiq_bt_rcal_val_setf(struct cl_chip *chip, u8 btrcalval)
{
	ASSERT_ERR_CHIP((((u32)btrcalval << 4) & ~((u32)0x000000F0)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BBIQ_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BBIQ_ADDR) & ~((u32)0x000000F0)) | ((u32)btrcalval << 4));
}

#define RFIC_REGS_BT_BBIQ_BT_RCAL_VAL .addr_index = 0x000001A0, .size_minus_1 = (4 - 1), .shift = 4

static inline u8 rfic_regs_bt_bbiq_bt_tx_mixer_vcm_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BBIQ_ADDR);

	return (u8)((local_val & ((u32)0x0000000C)) >> 2);
}

static inline void rfic_regs_bt_bbiq_bt_tx_mixer_vcm_ctrl_setf(struct cl_chip *chip, u8 bttxmixervcmctrl)
{
	ASSERT_ERR_CHIP((((u32)bttxmixervcmctrl << 2) & ~((u32)0x0000000C)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BBIQ_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BBIQ_ADDR) & ~((u32)0x0000000C)) | ((u32)bttxmixervcmctrl << 2));
}

#define RFIC_REGS_BT_BBIQ_BT_TX_MIXER_VCM_CTRL .addr_index = 0x000001A0, .size_minus_1 = (2 - 1), .shift = 2

static inline u8 rfic_regs_bt_bbiq_bt_bb_gainconf_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BBIQ_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_bt_bbiq_bt_bb_gainconf_setf(struct cl_chip *chip, u8 btbbgainconf)
{
	ASSERT_ERR_CHIP((((u32)btbbgainconf << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BBIQ_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BBIQ_ADDR) & ~((u32)0x00000003)) | ((u32)btbbgainconf << 0));
}

#define RFIC_REGS_BT_BBIQ_BT_BB_GAINCONF .addr_index = 0x000001A0, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief BT_BB_STATIC_CONF register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    28    BT_bb_dcoc_clk            00000000
 *    27    BT_bb_bw_ctrl             00000000
 *    26    BT_bb_tx_mode_en          00000000
 *    25    BT_bb_real_mode_en        00000000
 *    24:17 BT_bb_cal_ctrl            0x00000080
 *    16:15 BT_bb_extio_ctrl          0x00000000
 *    14:12 BT_bb_int_vcm_ctrl        0x00000000
 *    11    BT_spare30_in             00000000
 *    10    BT_localdiv_rstn          00000000
 *    09    BT_bb_last_stage_LDO_1v_en 00000000
 *    08:03 BT_spare1_in              0x00000000
 *    02:00 BT_bb_dcoc_dac_range      0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_BB_STATIC_CONF_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000684)
#define RFIC_REGS_BT_BB_STATIC_CONF_OFFSET      0x00000684
#define RFIC_REGS_BT_BB_STATIC_CONF_INDEX       0x000001A1
#define RFIC_REGS_BT_BB_STATIC_CONF_RESET       0x01000000

static inline u32 rfic_regs_bt_bb_static_conf_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR);
}

static inline void rfic_regs_bt_bb_static_conf_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR, value);
}

#define RFIC_REGS_BT_BB_STATIC_CONF .addr_index = 0x000001A1, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_DCOC_CLK_BIT    ((u32)0x10000000)
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_DCOC_CLK_POS    28
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_BW_CTRL_BIT    ((u32)0x08000000)
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_BW_CTRL_POS    27
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_TX_MODE_EN_BIT    ((u32)0x04000000)
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_TX_MODE_EN_POS    26
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_REAL_MODE_EN_BIT    ((u32)0x02000000)
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_REAL_MODE_EN_POS    25
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_CAL_CTRL_MASK    ((u32)0x01FE0000)
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_CAL_CTRL_LSB    17
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_CAL_CTRL_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_EXTIO_CTRL_MASK    ((u32)0x00018000)
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_EXTIO_CTRL_LSB    15
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_EXTIO_CTRL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_INT_VCM_CTRL_MASK    ((u32)0x00007000)
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_INT_VCM_CTRL_LSB    12
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_INT_VCM_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_SPARE_30_IN_BIT    ((u32)0x00000800)
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_SPARE_30_IN_POS    11
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_LOCALDIV_RSTN_BIT    ((u32)0x00000400)
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_LOCALDIV_RSTN_POS    10
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_LAST_STAGE_LDO_1_V_EN_BIT    ((u32)0x00000200)
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_LAST_STAGE_LDO_1_V_EN_POS    9
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_SPARE_1_IN_MASK    ((u32)0x000001F8)
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_SPARE_1_IN_LSB    3
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_SPARE_1_IN_WIDTH    ((u32)0x00000006)
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_DCOC_DAC_RANGE_MASK    ((u32)0x00000007)
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_DCOC_DAC_RANGE_LSB    0
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_DCOC_DAC_RANGE_WIDTH    ((u32)0x00000003)

#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_DCOC_CLK_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_BW_CTRL_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_TX_MODE_EN_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_REAL_MODE_EN_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_CAL_CTRL_RST    0x00000080
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_EXTIO_CTRL_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_INT_VCM_CTRL_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_SPARE_30_IN_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_LOCALDIV_RSTN_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_LAST_STAGE_LDO_1_V_EN_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_SPARE_1_IN_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_DCOC_DAC_RANGE_RST    0x00000000

static inline void rfic_regs_bt_bb_static_conf_pack(struct cl_chip *chip, u8 bt_bb_dcoc_clk, u8 bt_bb_bw_ctrl, u8 bt_bb_tx_mode_en, u8 bt_bb_real_mode_en, u8 bt_bb_cal_ctrl, u8 bt_bb_extio_ctrl, u8 bt_bb_int_vcm_ctrl, u8 bt_spare30_in, u8 bt_localdiv_rstn, u8 bt_bb_last_stage_ldo_1v_en, u8 bt_spare1_in, u8 bt_bb_dcoc_dac_range)
{
	ASSERT_ERR_CHIP((((u32)bt_bb_dcoc_clk << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_bb_bw_ctrl << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_bb_tx_mode_en << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_bb_real_mode_en << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_bb_cal_ctrl << 17) & ~((u32)0x01FE0000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_bb_extio_ctrl << 15) & ~((u32)0x00018000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_bb_int_vcm_ctrl << 12) & ~((u32)0x00007000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare30_in << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_localdiv_rstn << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_bb_last_stage_ldo_1v_en << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare1_in << 3) & ~((u32)0x000001F8)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_bb_dcoc_dac_range << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR, ((u32)bt_bb_dcoc_clk << 28) | ((u32)bt_bb_bw_ctrl << 27) | ((u32)bt_bb_tx_mode_en << 26) | ((u32)bt_bb_real_mode_en << 25) | ((u32)bt_bb_cal_ctrl << 17) | ((u32)bt_bb_extio_ctrl << 15) | ((u32)bt_bb_int_vcm_ctrl << 12) | ((u32)bt_spare30_in << 11) | ((u32)bt_localdiv_rstn << 10) | ((u32)bt_bb_last_stage_ldo_1v_en << 9) | ((u32)bt_spare1_in << 3) | ((u32)bt_bb_dcoc_dac_range << 0));
}

static inline void rfic_regs_bt_bb_static_conf_unpack(struct cl_chip *chip, u8 *bt_bb_dcoc_clk, u8 *bt_bb_bw_ctrl, u8 *bt_bb_tx_mode_en, u8 *bt_bb_real_mode_en, u8 *bt_bb_cal_ctrl, u8 *bt_bb_extio_ctrl, u8 *bt_bb_int_vcm_ctrl, u8 *bt_spare30_in, u8 *bt_localdiv_rstn, u8 *bt_bb_last_stage_ldo_1v_en, u8 *bt_spare1_in, u8 *bt_bb_dcoc_dac_range)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR);

	*bt_bb_dcoc_clk = (local_val & ((u32)0x10000000)) >> 28;
	*bt_bb_bw_ctrl = (local_val & ((u32)0x08000000)) >> 27;
	*bt_bb_tx_mode_en = (local_val & ((u32)0x04000000)) >> 26;
	*bt_bb_real_mode_en = (local_val & ((u32)0x02000000)) >> 25;
	*bt_bb_cal_ctrl = (local_val & ((u32)0x01FE0000)) >> 17;
	*bt_bb_extio_ctrl = (local_val & ((u32)0x00018000)) >> 15;
	*bt_bb_int_vcm_ctrl = (local_val & ((u32)0x00007000)) >> 12;
	*bt_spare30_in = (local_val & ((u32)0x00000800)) >> 11;
	*bt_localdiv_rstn = (local_val & ((u32)0x00000400)) >> 10;
	*bt_bb_last_stage_ldo_1v_en = (local_val & ((u32)0x00000200)) >> 9;
	*bt_spare1_in = (local_val & ((u32)0x000001F8)) >> 3;
	*bt_bb_dcoc_dac_range = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 rfic_regs_bt_bb_static_conf_bt_bb_dcoc_clk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void rfic_regs_bt_bb_static_conf_bt_bb_dcoc_clk_setf(struct cl_chip *chip, u8 btbbdcocclk)
{
	ASSERT_ERR_CHIP((((u32)btbbdcocclk << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR) & ~((u32)0x10000000)) | ((u32)btbbdcocclk << 28));
}

#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_DCOC_CLK .addr_index = 0x000001A1, .size_minus_1 = (1 - 1), .shift = 28

static inline u8 rfic_regs_bt_bb_static_conf_bt_bb_bw_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void rfic_regs_bt_bb_static_conf_bt_bb_bw_ctrl_setf(struct cl_chip *chip, u8 btbbbwctrl)
{
	ASSERT_ERR_CHIP((((u32)btbbbwctrl << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR) & ~((u32)0x08000000)) | ((u32)btbbbwctrl << 27));
}

#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_BW_CTRL .addr_index = 0x000001A1, .size_minus_1 = (1 - 1), .shift = 27

static inline u8 rfic_regs_bt_bb_static_conf_bt_bb_tx_mode_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void rfic_regs_bt_bb_static_conf_bt_bb_tx_mode_en_setf(struct cl_chip *chip, u8 btbbtxmodeen)
{
	ASSERT_ERR_CHIP((((u32)btbbtxmodeen << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR) & ~((u32)0x04000000)) | ((u32)btbbtxmodeen << 26));
}

#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_TX_MODE_EN .addr_index = 0x000001A1, .size_minus_1 = (1 - 1), .shift = 26

static inline u8 rfic_regs_bt_bb_static_conf_bt_bb_real_mode_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void rfic_regs_bt_bb_static_conf_bt_bb_real_mode_en_setf(struct cl_chip *chip, u8 btbbrealmodeen)
{
	ASSERT_ERR_CHIP((((u32)btbbrealmodeen << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR) & ~((u32)0x02000000)) | ((u32)btbbrealmodeen << 25));
}

#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_REAL_MODE_EN .addr_index = 0x000001A1, .size_minus_1 = (1 - 1), .shift = 25

static inline u8 rfic_regs_bt_bb_static_conf_bt_bb_cal_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x01FE0000)) >> 17);
}

static inline void rfic_regs_bt_bb_static_conf_bt_bb_cal_ctrl_setf(struct cl_chip *chip, u8 btbbcalctrl)
{
	ASSERT_ERR_CHIP((((u32)btbbcalctrl << 17) & ~((u32)0x01FE0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR) & ~((u32)0x01FE0000)) | ((u32)btbbcalctrl << 17));
}

#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_CAL_CTRL .addr_index = 0x000001A1, .size_minus_1 = (8 - 1), .shift = 17

static inline u8 rfic_regs_bt_bb_static_conf_bt_bb_extio_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00018000)) >> 15);
}

static inline void rfic_regs_bt_bb_static_conf_bt_bb_extio_ctrl_setf(struct cl_chip *chip, u8 btbbextioctrl)
{
	ASSERT_ERR_CHIP((((u32)btbbextioctrl << 15) & ~((u32)0x00018000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR) & ~((u32)0x00018000)) | ((u32)btbbextioctrl << 15));
}

#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_EXTIO_CTRL .addr_index = 0x000001A1, .size_minus_1 = (2 - 1), .shift = 15

static inline u8 rfic_regs_bt_bb_static_conf_bt_bb_int_vcm_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00007000)) >> 12);
}

static inline void rfic_regs_bt_bb_static_conf_bt_bb_int_vcm_ctrl_setf(struct cl_chip *chip, u8 btbbintvcmctrl)
{
	ASSERT_ERR_CHIP((((u32)btbbintvcmctrl << 12) & ~((u32)0x00007000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR) & ~((u32)0x00007000)) | ((u32)btbbintvcmctrl << 12));
}

#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_INT_VCM_CTRL .addr_index = 0x000001A1, .size_minus_1 = (3 - 1), .shift = 12

static inline u8 rfic_regs_bt_bb_static_conf_bt_spare_30_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void rfic_regs_bt_bb_static_conf_bt_spare_30_in_setf(struct cl_chip *chip, u8 btspare30in)
{
	ASSERT_ERR_CHIP((((u32)btspare30in << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR) & ~((u32)0x00000800)) | ((u32)btspare30in << 11));
}

#define RFIC_REGS_BT_BB_STATIC_CONF_BT_SPARE_30_IN .addr_index = 0x000001A1, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_bt_bb_static_conf_bt_localdiv_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_bt_bb_static_conf_bt_localdiv_rstn_setf(struct cl_chip *chip, u8 btlocaldivrstn)
{
	ASSERT_ERR_CHIP((((u32)btlocaldivrstn << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR) & ~((u32)0x00000400)) | ((u32)btlocaldivrstn << 10));
}

#define RFIC_REGS_BT_BB_STATIC_CONF_BT_LOCALDIV_RSTN .addr_index = 0x000001A1, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_bt_bb_static_conf_bt_bb_last_stage_ldo_1_v_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void rfic_regs_bt_bb_static_conf_bt_bb_last_stage_ldo_1_v_en_setf(struct cl_chip *chip, u8 btbblaststageldo1ven)
{
	ASSERT_ERR_CHIP((((u32)btbblaststageldo1ven << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR) & ~((u32)0x00000200)) | ((u32)btbblaststageldo1ven << 9));
}

#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_LAST_STAGE_LDO_1_V_EN .addr_index = 0x000001A1, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_bt_bb_static_conf_bt_spare_1_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x000001F8)) >> 3);
}

static inline void rfic_regs_bt_bb_static_conf_bt_spare_1_in_setf(struct cl_chip *chip, u8 btspare1in)
{
	ASSERT_ERR_CHIP((((u32)btspare1in << 3) & ~((u32)0x000001F8)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR) & ~((u32)0x000001F8)) | ((u32)btspare1in << 3));
}

#define RFIC_REGS_BT_BB_STATIC_CONF_BT_SPARE_1_IN .addr_index = 0x000001A1, .size_minus_1 = (6 - 1), .shift = 3

static inline u8 rfic_regs_bt_bb_static_conf_bt_bb_dcoc_dac_range_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void rfic_regs_bt_bb_static_conf_bt_bb_dcoc_dac_range_setf(struct cl_chip *chip, u8 btbbdcocdacrange)
{
	ASSERT_ERR_CHIP((((u32)btbbdcocdacrange << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CONF_ADDR) & ~((u32)0x00000007)) | ((u32)btbbdcocdacrange << 0));
}

#define RFIC_REGS_BT_BB_STATIC_CONF_BT_BB_DCOC_DAC_RANGE .addr_index = 0x000001A1, .size_minus_1 = (3 - 1), .shift = 0

/**
 * @brief BT_BB_STATIC_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27    BT_bb_filter_en           00000000
 *    26:25 BT_agc_lpf1_gain_man      0x00000000
 *    24    BT_spare29_in             00000000
 *    23:20 BT_agc_lpf2_gain_man      0x00000000
 *    19:00 BT_spare2_in              0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000688)
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_OFFSET      0x00000688
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_INDEX       0x000001A2
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_bt_bb_static_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR);
}

static inline void rfic_regs_bt_bb_static_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR, value);
}

#define RFIC_REGS_BT_BB_STATIC_CTRL_1 .addr_index = 0x000001A2, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_BB_FILTER_EN_BIT    ((u32)0x08000000)
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_BB_FILTER_EN_POS    27
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_AGC_LPF_1_GAIN_MAN_MASK    ((u32)0x06000000)
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_AGC_LPF_1_GAIN_MAN_LSB    25
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_AGC_LPF_1_GAIN_MAN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_SPARE_29_IN_BIT    ((u32)0x01000000)
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_SPARE_29_IN_POS    24
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_AGC_LPF_2_GAIN_MAN_MASK    ((u32)0x00F00000)
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_AGC_LPF_2_GAIN_MAN_LSB    20
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_AGC_LPF_2_GAIN_MAN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_SPARE_2_IN_MASK    ((u32)0x000FFFFF)
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_SPARE_2_IN_LSB    0
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_SPARE_2_IN_WIDTH    ((u32)0x00000014)

#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_BB_FILTER_EN_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_AGC_LPF_1_GAIN_MAN_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_SPARE_29_IN_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_AGC_LPF_2_GAIN_MAN_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_SPARE_2_IN_RST    0x00000000

static inline void rfic_regs_bt_bb_static_ctrl_1_pack(struct cl_chip *chip, u8 bt_bb_filter_en, u8 bt_agc_lpf1_gain_man, u8 bt_spare29_in, u8 bt_agc_lpf2_gain_man, u32 bt_spare2_in)
{
	ASSERT_ERR_CHIP((((u32)bt_bb_filter_en << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_agc_lpf1_gain_man << 25) & ~((u32)0x06000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare29_in << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_agc_lpf2_gain_man << 20) & ~((u32)0x00F00000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare2_in << 0) & ~((u32)0x000FFFFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR, ((u32)bt_bb_filter_en << 27) | ((u32)bt_agc_lpf1_gain_man << 25) | ((u32)bt_spare29_in << 24) | ((u32)bt_agc_lpf2_gain_man << 20) | ((u32)bt_spare2_in << 0));
}

static inline void rfic_regs_bt_bb_static_ctrl_1_unpack(struct cl_chip *chip, u8 *bt_bb_filter_en, u8 *bt_agc_lpf1_gain_man, u8 *bt_spare29_in, u8 *bt_agc_lpf2_gain_man, u32 *bt_spare2_in)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR);

	*bt_bb_filter_en = (local_val & ((u32)0x08000000)) >> 27;
	*bt_agc_lpf1_gain_man = (local_val & ((u32)0x06000000)) >> 25;
	*bt_spare29_in = (local_val & ((u32)0x01000000)) >> 24;
	*bt_agc_lpf2_gain_man = (local_val & ((u32)0x00F00000)) >> 20;
	*bt_spare2_in = (local_val & ((u32)0x000FFFFF)) >> 0;
}

static inline u8 rfic_regs_bt_bb_static_ctrl_1_bt_bb_filter_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void rfic_regs_bt_bb_static_ctrl_1_bt_bb_filter_en_setf(struct cl_chip *chip, u8 btbbfilteren)
{
	ASSERT_ERR_CHIP((((u32)btbbfilteren << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR) & ~((u32)0x08000000)) | ((u32)btbbfilteren << 27));
}

#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_BB_FILTER_EN .addr_index = 0x000001A2, .size_minus_1 = (1 - 1), .shift = 27

static inline u8 rfic_regs_bt_bb_static_ctrl_1_bt_agc_lpf_1_gain_man_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x06000000)) >> 25);
}

static inline void rfic_regs_bt_bb_static_ctrl_1_bt_agc_lpf_1_gain_man_setf(struct cl_chip *chip, u8 btagclpf1gainman)
{
	ASSERT_ERR_CHIP((((u32)btagclpf1gainman << 25) & ~((u32)0x06000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR) & ~((u32)0x06000000)) | ((u32)btagclpf1gainman << 25));
}

#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_AGC_LPF_1_GAIN_MAN .addr_index = 0x000001A2, .size_minus_1 = (2 - 1), .shift = 25

static inline u8 rfic_regs_bt_bb_static_ctrl_1_bt_spare_29_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void rfic_regs_bt_bb_static_ctrl_1_bt_spare_29_in_setf(struct cl_chip *chip, u8 btspare29in)
{
	ASSERT_ERR_CHIP((((u32)btspare29in << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR) & ~((u32)0x01000000)) | ((u32)btspare29in << 24));
}

#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_SPARE_29_IN .addr_index = 0x000001A2, .size_minus_1 = (1 - 1), .shift = 24

static inline u8 rfic_regs_bt_bb_static_ctrl_1_bt_agc_lpf_2_gain_man_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00F00000)) >> 20);
}

static inline void rfic_regs_bt_bb_static_ctrl_1_bt_agc_lpf_2_gain_man_setf(struct cl_chip *chip, u8 btagclpf2gainman)
{
	ASSERT_ERR_CHIP((((u32)btagclpf2gainman << 20) & ~((u32)0x00F00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR) & ~((u32)0x00F00000)) | ((u32)btagclpf2gainman << 20));
}

#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_AGC_LPF_2_GAIN_MAN .addr_index = 0x000001A2, .size_minus_1 = (4 - 1), .shift = 20

static inline u32 rfic_regs_bt_bb_static_ctrl_1_bt_spare_2_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR);

	return (u32)((local_val & ((u32)0x000FFFFF)) >> 0);
}

static inline void rfic_regs_bt_bb_static_ctrl_1_bt_spare_2_in_setf(struct cl_chip *chip, u32 btspare2in)
{
	ASSERT_ERR_CHIP((((u32)btspare2in << 0) & ~((u32)0x000FFFFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_1_ADDR) & ~((u32)0x000FFFFF)) | ((u32)btspare2in << 0));
}

#define RFIC_REGS_BT_BB_STATIC_CTRL_1_BT_SPARE_2_IN .addr_index = 0x000001A2, .size_minus_1 = (20 - 1), .shift = 0

/**
 * @brief BT_BB_STATIC_CTRL_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21:20 BT_pdet_vga_vb_sel        0x00000000
 *    19:17 BT_pdet_vga_gain          0x00000000
 *    16    BT_pdet_ldo_en            00000000
 *    15:00 BT_spare3_in              0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000068C)
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_OFFSET      0x0000068C
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_INDEX       0x000001A3
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_RESET       0x00000000

static inline u32 rfic_regs_bt_bb_static_ctrl_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR);
}

static inline void rfic_regs_bt_bb_static_ctrl_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR, value);
}

#define RFIC_REGS_BT_BB_STATIC_CTRL_2 .addr_index = 0x000001A3, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_PDET_VGA_VB_SEL_MASK    ((u32)0x00300000)
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_PDET_VGA_VB_SEL_LSB    20
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_PDET_VGA_VB_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_PDET_VGA_GAIN_MASK    ((u32)0x000E0000)
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_PDET_VGA_GAIN_LSB    17
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_PDET_VGA_GAIN_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_PDET_LDO_EN_BIT    ((u32)0x00010000)
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_PDET_LDO_EN_POS    16
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_SPARE_3_IN_MASK    ((u32)0x0000FFFF)
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_SPARE_3_IN_LSB    0
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_SPARE_3_IN_WIDTH    ((u32)0x00000010)

#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_PDET_VGA_VB_SEL_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_PDET_VGA_GAIN_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_PDET_LDO_EN_RST    0x00000000
#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_SPARE_3_IN_RST    0x00000000

static inline void rfic_regs_bt_bb_static_ctrl_2_pack(struct cl_chip *chip, u8 bt_pdet_vga_vb_sel, u8 bt_pdet_vga_gain, u8 bt_pdet_ldo_en, u16 bt_spare3_in)
{
	ASSERT_ERR_CHIP((((u32)bt_pdet_vga_vb_sel << 20) & ~((u32)0x00300000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_pdet_vga_gain << 17) & ~((u32)0x000E0000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_pdet_ldo_en << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare3_in << 0) & ~((u32)0x0000FFFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR, ((u32)bt_pdet_vga_vb_sel << 20) | ((u32)bt_pdet_vga_gain << 17) | ((u32)bt_pdet_ldo_en << 16) | ((u32)bt_spare3_in << 0));
}

static inline void rfic_regs_bt_bb_static_ctrl_2_unpack(struct cl_chip *chip, u8 *bt_pdet_vga_vb_sel, u8 *bt_pdet_vga_gain, u8 *bt_pdet_ldo_en, u16 *bt_spare3_in)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR);

	*bt_pdet_vga_vb_sel = (local_val & ((u32)0x00300000)) >> 20;
	*bt_pdet_vga_gain = (local_val & ((u32)0x000E0000)) >> 17;
	*bt_pdet_ldo_en = (local_val & ((u32)0x00010000)) >> 16;
	*bt_spare3_in = (local_val & ((u32)0x0000FFFF)) >> 0;
}

static inline u8 rfic_regs_bt_bb_static_ctrl_2_bt_pdet_vga_vb_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00300000)) >> 20);
}

static inline void rfic_regs_bt_bb_static_ctrl_2_bt_pdet_vga_vb_sel_setf(struct cl_chip *chip, u8 btpdetvgavbsel)
{
	ASSERT_ERR_CHIP((((u32)btpdetvgavbsel << 20) & ~((u32)0x00300000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR) & ~((u32)0x00300000)) | ((u32)btpdetvgavbsel << 20));
}

#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_PDET_VGA_VB_SEL .addr_index = 0x000001A3, .size_minus_1 = (2 - 1), .shift = 20

static inline u8 rfic_regs_bt_bb_static_ctrl_2_bt_pdet_vga_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x000E0000)) >> 17);
}

static inline void rfic_regs_bt_bb_static_ctrl_2_bt_pdet_vga_gain_setf(struct cl_chip *chip, u8 btpdetvgagain)
{
	ASSERT_ERR_CHIP((((u32)btpdetvgagain << 17) & ~((u32)0x000E0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR) & ~((u32)0x000E0000)) | ((u32)btpdetvgagain << 17));
}

#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_PDET_VGA_GAIN .addr_index = 0x000001A3, .size_minus_1 = (3 - 1), .shift = 17

static inline u8 rfic_regs_bt_bb_static_ctrl_2_bt_pdet_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void rfic_regs_bt_bb_static_ctrl_2_bt_pdet_ldo_en_setf(struct cl_chip *chip, u8 btpdetldoen)
{
	ASSERT_ERR_CHIP((((u32)btpdetldoen << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR) & ~((u32)0x00010000)) | ((u32)btpdetldoen << 16));
}

#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_PDET_LDO_EN .addr_index = 0x000001A3, .size_minus_1 = (1 - 1), .shift = 16

static inline u16 rfic_regs_bt_bb_static_ctrl_2_bt_spare_3_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR);

	return (u16)((local_val & ((u32)0x0000FFFF)) >> 0);
}

static inline void rfic_regs_bt_bb_static_ctrl_2_bt_spare_3_in_setf(struct cl_chip *chip, u16 btspare3in)
{
	ASSERT_ERR_CHIP((((u32)btspare3in << 0) & ~((u32)0x0000FFFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_BB_STATIC_CTRL_2_ADDR) & ~((u32)0x0000FFFF)) | ((u32)btspare3in << 0));
}

#define RFIC_REGS_BT_BB_STATIC_CTRL_2_BT_SPARE_3_IN .addr_index = 0x000001A3, .size_minus_1 = (16 - 1), .shift = 0

/**
 * @brief BT_CHANNEL_CONF register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    13    BT_trsw_pa_en             00000000
 *    12    BT_trsw_lna_en            00000000
 *    11    BT_trsw_en                00000000
 *    10    BT_tempsens_en            00000000
 *    09    BT_gain_lut_bypass        00000000
 *    08    BT_debug_mode             00000000
 *    07    BT_adc_neg_bias_clk_en    00000000
 *    06:05 BT_spare4_in              0x00000000
 *    04:00 BT_tempsens_bias_ctrl     0x00000007
 * </pre>
 */
#define RFIC_REGS_BT_CHANNEL_CONF_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000690)
#define RFIC_REGS_BT_CHANNEL_CONF_OFFSET      0x00000690
#define RFIC_REGS_BT_CHANNEL_CONF_INDEX       0x000001A4
#define RFIC_REGS_BT_CHANNEL_CONF_RESET       0x00000007

static inline u32 rfic_regs_bt_channel_conf_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR);
}

static inline void rfic_regs_bt_channel_conf_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR, value);
}

#define RFIC_REGS_BT_CHANNEL_CONF .addr_index = 0x000001A4, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_CHANNEL_CONF_BT_TRSW_PA_EN_BIT    ((u32)0x00002000)
#define RFIC_REGS_BT_CHANNEL_CONF_BT_TRSW_PA_EN_POS    13
#define RFIC_REGS_BT_CHANNEL_CONF_BT_TRSW_LNA_EN_BIT    ((u32)0x00001000)
#define RFIC_REGS_BT_CHANNEL_CONF_BT_TRSW_LNA_EN_POS    12
#define RFIC_REGS_BT_CHANNEL_CONF_BT_TRSW_EN_BIT    ((u32)0x00000800)
#define RFIC_REGS_BT_CHANNEL_CONF_BT_TRSW_EN_POS    11
#define RFIC_REGS_BT_CHANNEL_CONF_BT_TEMPSENS_EN_BIT    ((u32)0x00000400)
#define RFIC_REGS_BT_CHANNEL_CONF_BT_TEMPSENS_EN_POS    10
#define RFIC_REGS_BT_CHANNEL_CONF_BT_GAIN_LUT_BYPASS_BIT    ((u32)0x00000200)
#define RFIC_REGS_BT_CHANNEL_CONF_BT_GAIN_LUT_BYPASS_POS    9
#define RFIC_REGS_BT_CHANNEL_CONF_BT_DEBUG_MODE_BIT    ((u32)0x00000100)
#define RFIC_REGS_BT_CHANNEL_CONF_BT_DEBUG_MODE_POS    8
#define RFIC_REGS_BT_CHANNEL_CONF_BT_ADC_NEG_BIAS_CLK_EN_BIT    ((u32)0x00000080)
#define RFIC_REGS_BT_CHANNEL_CONF_BT_ADC_NEG_BIAS_CLK_EN_POS    7
#define RFIC_REGS_BT_CHANNEL_CONF_BT_SPARE_4_IN_MASK    ((u32)0x00000060)
#define RFIC_REGS_BT_CHANNEL_CONF_BT_SPARE_4_IN_LSB    5
#define RFIC_REGS_BT_CHANNEL_CONF_BT_SPARE_4_IN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_BT_CHANNEL_CONF_BT_TEMPSENS_BIAS_CTRL_MASK    ((u32)0x0000001F)
#define RFIC_REGS_BT_CHANNEL_CONF_BT_TEMPSENS_BIAS_CTRL_LSB    0
#define RFIC_REGS_BT_CHANNEL_CONF_BT_TEMPSENS_BIAS_CTRL_WIDTH    ((u32)0x00000005)

#define RFIC_REGS_BT_CHANNEL_CONF_BT_TRSW_PA_EN_RST    0x00000000
#define RFIC_REGS_BT_CHANNEL_CONF_BT_TRSW_LNA_EN_RST    0x00000000
#define RFIC_REGS_BT_CHANNEL_CONF_BT_TRSW_EN_RST    0x00000000
#define RFIC_REGS_BT_CHANNEL_CONF_BT_TEMPSENS_EN_RST    0x00000000
#define RFIC_REGS_BT_CHANNEL_CONF_BT_GAIN_LUT_BYPASS_RST    0x00000000
#define RFIC_REGS_BT_CHANNEL_CONF_BT_DEBUG_MODE_RST    0x00000000
#define RFIC_REGS_BT_CHANNEL_CONF_BT_ADC_NEG_BIAS_CLK_EN_RST    0x00000000
#define RFIC_REGS_BT_CHANNEL_CONF_BT_SPARE_4_IN_RST    0x00000000
#define RFIC_REGS_BT_CHANNEL_CONF_BT_TEMPSENS_BIAS_CTRL_RST    0x00000007

static inline void rfic_regs_bt_channel_conf_pack(struct cl_chip *chip, u8 bt_trsw_pa_en, u8 bt_trsw_lna_en, u8 bt_trsw_en, u8 bt_tempsens_en, u8 bt_gain_lut_bypass, u8 bt_debug_mode, u8 bt_adc_neg_bias_clk_en, u8 bt_spare4_in, u8 bt_tempsens_bias_ctrl)
{
	ASSERT_ERR_CHIP((((u32)bt_trsw_pa_en << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_trsw_lna_en << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_trsw_en << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tempsens_en << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_gain_lut_bypass << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_debug_mode << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_neg_bias_clk_en << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare4_in << 5) & ~((u32)0x00000060)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tempsens_bias_ctrl << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR, ((u32)bt_trsw_pa_en << 13) | ((u32)bt_trsw_lna_en << 12) | ((u32)bt_trsw_en << 11) | ((u32)bt_tempsens_en << 10) | ((u32)bt_gain_lut_bypass << 9) | ((u32)bt_debug_mode << 8) | ((u32)bt_adc_neg_bias_clk_en << 7) | ((u32)bt_spare4_in << 5) | ((u32)bt_tempsens_bias_ctrl << 0));
}

static inline void rfic_regs_bt_channel_conf_unpack(struct cl_chip *chip, u8 *bt_trsw_pa_en, u8 *bt_trsw_lna_en, u8 *bt_trsw_en, u8 *bt_tempsens_en, u8 *bt_gain_lut_bypass, u8 *bt_debug_mode, u8 *bt_adc_neg_bias_clk_en, u8 *bt_spare4_in, u8 *bt_tempsens_bias_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR);

	*bt_trsw_pa_en = (local_val & ((u32)0x00002000)) >> 13;
	*bt_trsw_lna_en = (local_val & ((u32)0x00001000)) >> 12;
	*bt_trsw_en = (local_val & ((u32)0x00000800)) >> 11;
	*bt_tempsens_en = (local_val & ((u32)0x00000400)) >> 10;
	*bt_gain_lut_bypass = (local_val & ((u32)0x00000200)) >> 9;
	*bt_debug_mode = (local_val & ((u32)0x00000100)) >> 8;
	*bt_adc_neg_bias_clk_en = (local_val & ((u32)0x00000080)) >> 7;
	*bt_spare4_in = (local_val & ((u32)0x00000060)) >> 5;
	*bt_tempsens_bias_ctrl = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u8 rfic_regs_bt_channel_conf_bt_trsw_pa_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void rfic_regs_bt_channel_conf_bt_trsw_pa_en_setf(struct cl_chip *chip, u8 bttrswpaen)
{
	ASSERT_ERR_CHIP((((u32)bttrswpaen << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR) & ~((u32)0x00002000)) | ((u32)bttrswpaen << 13));
}

#define RFIC_REGS_BT_CHANNEL_CONF_BT_TRSW_PA_EN .addr_index = 0x000001A4, .size_minus_1 = (1 - 1), .shift = 13

static inline u8 rfic_regs_bt_channel_conf_bt_trsw_lna_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void rfic_regs_bt_channel_conf_bt_trsw_lna_en_setf(struct cl_chip *chip, u8 bttrswlnaen)
{
	ASSERT_ERR_CHIP((((u32)bttrswlnaen << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR) & ~((u32)0x00001000)) | ((u32)bttrswlnaen << 12));
}

#define RFIC_REGS_BT_CHANNEL_CONF_BT_TRSW_LNA_EN .addr_index = 0x000001A4, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_bt_channel_conf_bt_trsw_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void rfic_regs_bt_channel_conf_bt_trsw_en_setf(struct cl_chip *chip, u8 bttrswen)
{
	ASSERT_ERR_CHIP((((u32)bttrswen << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR) & ~((u32)0x00000800)) | ((u32)bttrswen << 11));
}

#define RFIC_REGS_BT_CHANNEL_CONF_BT_TRSW_EN .addr_index = 0x000001A4, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_bt_channel_conf_bt_tempsens_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_bt_channel_conf_bt_tempsens_en_setf(struct cl_chip *chip, u8 bttempsensen)
{
	ASSERT_ERR_CHIP((((u32)bttempsensen << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR) & ~((u32)0x00000400)) | ((u32)bttempsensen << 10));
}

#define RFIC_REGS_BT_CHANNEL_CONF_BT_TEMPSENS_EN .addr_index = 0x000001A4, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_bt_channel_conf_bt_gain_lut_bypass_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void rfic_regs_bt_channel_conf_bt_gain_lut_bypass_setf(struct cl_chip *chip, u8 btgainlutbypass)
{
	ASSERT_ERR_CHIP((((u32)btgainlutbypass << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR) & ~((u32)0x00000200)) | ((u32)btgainlutbypass << 9));
}

#define RFIC_REGS_BT_CHANNEL_CONF_BT_GAIN_LUT_BYPASS .addr_index = 0x000001A4, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_bt_channel_conf_bt_debug_mode_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_bt_channel_conf_bt_debug_mode_setf(struct cl_chip *chip, u8 btdebugmode)
{
	ASSERT_ERR_CHIP((((u32)btdebugmode << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR) & ~((u32)0x00000100)) | ((u32)btdebugmode << 8));
}

#define RFIC_REGS_BT_CHANNEL_CONF_BT_DEBUG_MODE .addr_index = 0x000001A4, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_bt_channel_conf_bt_adc_neg_bias_clk_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_bt_channel_conf_bt_adc_neg_bias_clk_en_setf(struct cl_chip *chip, u8 btadcnegbiasclken)
{
	ASSERT_ERR_CHIP((((u32)btadcnegbiasclken << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR) & ~((u32)0x00000080)) | ((u32)btadcnegbiasclken << 7));
}

#define RFIC_REGS_BT_CHANNEL_CONF_BT_ADC_NEG_BIAS_CLK_EN .addr_index = 0x000001A4, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_bt_channel_conf_bt_spare_4_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000060)) >> 5);
}

static inline void rfic_regs_bt_channel_conf_bt_spare_4_in_setf(struct cl_chip *chip, u8 btspare4in)
{
	ASSERT_ERR_CHIP((((u32)btspare4in << 5) & ~((u32)0x00000060)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR) & ~((u32)0x00000060)) | ((u32)btspare4in << 5));
}

#define RFIC_REGS_BT_CHANNEL_CONF_BT_SPARE_4_IN .addr_index = 0x000001A4, .size_minus_1 = (2 - 1), .shift = 5

static inline u8 rfic_regs_bt_channel_conf_bt_tempsens_bias_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

static inline void rfic_regs_bt_channel_conf_bt_tempsens_bias_ctrl_setf(struct cl_chip *chip, u8 bttempsensbiasctrl)
{
	ASSERT_ERR_CHIP((((u32)bttempsensbiasctrl << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_CHANNEL_CONF_ADDR) & ~((u32)0x0000001F)) | ((u32)bttempsensbiasctrl << 0));
}

#define RFIC_REGS_BT_CHANNEL_CONF_BT_TEMPSENS_BIAS_CTRL .addr_index = 0x000001A4, .size_minus_1 = (5 - 1), .shift = 0

/**
 * @brief BT_SPARE register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:13 BT_spare_in               0x00000000
 *    12:11 BT_lpf_tx_mode_gain_sel   0x00000000
 *    10:07 BT_lpf_tx_mode_gain       0x00000000
 *    06:02 BT_lpf_gain_index_offset  0x00000000
 *    01    BT_tx_pa_res_ladder_en    00000000
 *    00    BT_rssi_rstn              00000000
 * </pre>
 */
#define RFIC_REGS_BT_SPARE_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000694)
#define RFIC_REGS_BT_SPARE_OFFSET      0x00000694
#define RFIC_REGS_BT_SPARE_INDEX       0x000001A5
#define RFIC_REGS_BT_SPARE_RESET       0x00000000

static inline u32 rfic_regs_bt_spare_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_SPARE_ADDR);
}

static inline void rfic_regs_bt_spare_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_SPARE_ADDR, value);
}

#define RFIC_REGS_BT_SPARE .addr_index = 0x000001A5, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_SPARE_BT_SPARE_IN_MASK    ((u32)0xFFFFE000)
#define RFIC_REGS_BT_SPARE_BT_SPARE_IN_LSB    13
#define RFIC_REGS_BT_SPARE_BT_SPARE_IN_WIDTH    ((u32)0x00000013)
#define RFIC_REGS_BT_SPARE_BT_LPF_TX_MODE_GAIN_SEL_MASK    ((u32)0x00001800)
#define RFIC_REGS_BT_SPARE_BT_LPF_TX_MODE_GAIN_SEL_LSB    11
#define RFIC_REGS_BT_SPARE_BT_LPF_TX_MODE_GAIN_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_BT_SPARE_BT_LPF_TX_MODE_GAIN_MASK    ((u32)0x00000780)
#define RFIC_REGS_BT_SPARE_BT_LPF_TX_MODE_GAIN_LSB    7
#define RFIC_REGS_BT_SPARE_BT_LPF_TX_MODE_GAIN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_SPARE_BT_LPF_GAIN_INDEX_OFFSET_MASK    ((u32)0x0000007C)
#define RFIC_REGS_BT_SPARE_BT_LPF_GAIN_INDEX_OFFSET_LSB    2
#define RFIC_REGS_BT_SPARE_BT_LPF_GAIN_INDEX_OFFSET_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_BT_SPARE_BT_TX_PA_RES_LADDER_EN_BIT    ((u32)0x00000002)
#define RFIC_REGS_BT_SPARE_BT_TX_PA_RES_LADDER_EN_POS    1
#define RFIC_REGS_BT_SPARE_BT_RSSI_RSTN_BIT    ((u32)0x00000001)
#define RFIC_REGS_BT_SPARE_BT_RSSI_RSTN_POS    0

#define RFIC_REGS_BT_SPARE_BT_SPARE_IN_RST    0x00000000
#define RFIC_REGS_BT_SPARE_BT_LPF_TX_MODE_GAIN_SEL_RST    0x00000000
#define RFIC_REGS_BT_SPARE_BT_LPF_TX_MODE_GAIN_RST    0x00000000
#define RFIC_REGS_BT_SPARE_BT_LPF_GAIN_INDEX_OFFSET_RST    0x00000000
#define RFIC_REGS_BT_SPARE_BT_TX_PA_RES_LADDER_EN_RST    0x00000000
#define RFIC_REGS_BT_SPARE_BT_RSSI_RSTN_RST    0x00000000

static inline void rfic_regs_bt_spare_pack(struct cl_chip *chip, u32 bt_spare_in, u8 bt_lpf_tx_mode_gain_sel, u8 bt_lpf_tx_mode_gain, u8 bt_lpf_gain_index_offset, u8 bt_tx_pa_res_ladder_en, u8 bt_rssi_rstn)
{
	ASSERT_ERR_CHIP((((u32)bt_spare_in << 13) & ~((u32)0xFFFFE000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_lpf_tx_mode_gain_sel << 11) & ~((u32)0x00001800)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_lpf_tx_mode_gain << 7) & ~((u32)0x00000780)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_lpf_gain_index_offset << 2) & ~((u32)0x0000007C)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_pa_res_ladder_en << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rssi_rstn << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_SPARE_ADDR, ((u32)bt_spare_in << 13) | ((u32)bt_lpf_tx_mode_gain_sel << 11) | ((u32)bt_lpf_tx_mode_gain << 7) | ((u32)bt_lpf_gain_index_offset << 2) | ((u32)bt_tx_pa_res_ladder_en << 1) | ((u32)bt_rssi_rstn << 0));
}

static inline void rfic_regs_bt_spare_unpack(struct cl_chip *chip, u32 *bt_spare_in, u8 *bt_lpf_tx_mode_gain_sel, u8 *bt_lpf_tx_mode_gain, u8 *bt_lpf_gain_index_offset, u8 *bt_tx_pa_res_ladder_en, u8 *bt_rssi_rstn)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_ADDR);

	*bt_spare_in = (local_val & ((u32)0xFFFFE000)) >> 13;
	*bt_lpf_tx_mode_gain_sel = (local_val & ((u32)0x00001800)) >> 11;
	*bt_lpf_tx_mode_gain = (local_val & ((u32)0x00000780)) >> 7;
	*bt_lpf_gain_index_offset = (local_val & ((u32)0x0000007C)) >> 2;
	*bt_tx_pa_res_ladder_en = (local_val & ((u32)0x00000002)) >> 1;
	*bt_rssi_rstn = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u32 rfic_regs_bt_spare_bt_spare_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_ADDR);

	return (u32)((local_val & ((u32)0xFFFFE000)) >> 13);
}

static inline void rfic_regs_bt_spare_bt_spare_in_setf(struct cl_chip *chip, u32 btsparein)
{
	ASSERT_ERR_CHIP((((u32)btsparein << 13) & ~((u32)0xFFFFE000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_SPARE_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_SPARE_ADDR) & ~((u32)0xFFFFE000)) | ((u32)btsparein << 13));
}

#define RFIC_REGS_BT_SPARE_BT_SPARE_IN .addr_index = 0x000001A5, .size_minus_1 = (19 - 1), .shift = 13

static inline u8 rfic_regs_bt_spare_bt_lpf_tx_mode_gain_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_ADDR);

	return (u8)((local_val & ((u32)0x00001800)) >> 11);
}

static inline void rfic_regs_bt_spare_bt_lpf_tx_mode_gain_sel_setf(struct cl_chip *chip, u8 btlpftxmodegainsel)
{
	ASSERT_ERR_CHIP((((u32)btlpftxmodegainsel << 11) & ~((u32)0x00001800)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_SPARE_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_SPARE_ADDR) & ~((u32)0x00001800)) | ((u32)btlpftxmodegainsel << 11));
}

#define RFIC_REGS_BT_SPARE_BT_LPF_TX_MODE_GAIN_SEL .addr_index = 0x000001A5, .size_minus_1 = (2 - 1), .shift = 11

static inline u8 rfic_regs_bt_spare_bt_lpf_tx_mode_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_ADDR);

	return (u8)((local_val & ((u32)0x00000780)) >> 7);
}

static inline void rfic_regs_bt_spare_bt_lpf_tx_mode_gain_setf(struct cl_chip *chip, u8 btlpftxmodegain)
{
	ASSERT_ERR_CHIP((((u32)btlpftxmodegain << 7) & ~((u32)0x00000780)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_SPARE_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_SPARE_ADDR) & ~((u32)0x00000780)) | ((u32)btlpftxmodegain << 7));
}

#define RFIC_REGS_BT_SPARE_BT_LPF_TX_MODE_GAIN .addr_index = 0x000001A5, .size_minus_1 = (4 - 1), .shift = 7

static inline u8 rfic_regs_bt_spare_bt_lpf_gain_index_offset_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_ADDR);

	return (u8)((local_val & ((u32)0x0000007C)) >> 2);
}

static inline void rfic_regs_bt_spare_bt_lpf_gain_index_offset_setf(struct cl_chip *chip, u8 btlpfgainindexoffset)
{
	ASSERT_ERR_CHIP((((u32)btlpfgainindexoffset << 2) & ~((u32)0x0000007C)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_SPARE_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_SPARE_ADDR) & ~((u32)0x0000007C)) | ((u32)btlpfgainindexoffset << 2));
}

#define RFIC_REGS_BT_SPARE_BT_LPF_GAIN_INDEX_OFFSET .addr_index = 0x000001A5, .size_minus_1 = (5 - 1), .shift = 2

static inline u8 rfic_regs_bt_spare_bt_tx_pa_res_ladder_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_bt_spare_bt_tx_pa_res_ladder_en_setf(struct cl_chip *chip, u8 bttxparesladderen)
{
	ASSERT_ERR_CHIP((((u32)bttxparesladderen << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_SPARE_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_SPARE_ADDR) & ~((u32)0x00000002)) | ((u32)bttxparesladderen << 1));
}

#define RFIC_REGS_BT_SPARE_BT_TX_PA_RES_LADDER_EN .addr_index = 0x000001A5, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_bt_spare_bt_rssi_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_bt_spare_bt_rssi_rstn_setf(struct cl_chip *chip, u8 btrssirstn)
{
	ASSERT_ERR_CHIP((((u32)btrssirstn << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_SPARE_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_SPARE_ADDR) & ~((u32)0x00000001)) | ((u32)btrssirstn << 0));
}

#define RFIC_REGS_BT_SPARE_BT_RSSI_RSTN .addr_index = 0x000001A5, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief BT_LOGEN_CONF register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    18    BT_loopbk_amp_en          00000000
 *    17    BT_localdiv_rxtxn         00000000
 *    16:14 BT_spare7_in              0x00000000
 *    13    BT_localdiv_sxsel         00000001
 *    12    BT_localdiv_ldo_en        00000000
 *    11:10 BT_spare6_in              0x00000000
 *    09    BT_localdiv_divbuffen     00000000
 *    08:04 BT_spare5_in              0x00000000
 *    03:02 BT_localdiv_vdd10sel      0x00000000
 *    01:00 BT_localdiv_res           0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_LOGEN_CONF_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000698)
#define RFIC_REGS_BT_LOGEN_CONF_OFFSET      0x00000698
#define RFIC_REGS_BT_LOGEN_CONF_INDEX       0x000001A6
#define RFIC_REGS_BT_LOGEN_CONF_RESET       0x00002000

static inline u32 rfic_regs_bt_logen_conf_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR);
}

static inline void rfic_regs_bt_logen_conf_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR, value);
}

#define RFIC_REGS_BT_LOGEN_CONF .addr_index = 0x000001A6, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOOPBK_AMP_EN_BIT    ((u32)0x00040000)
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOOPBK_AMP_EN_POS    18
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_RXTXN_BIT    ((u32)0x00020000)
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_RXTXN_POS    17
#define RFIC_REGS_BT_LOGEN_CONF_BT_SPARE_7_IN_MASK    ((u32)0x0001C000)
#define RFIC_REGS_BT_LOGEN_CONF_BT_SPARE_7_IN_LSB    14
#define RFIC_REGS_BT_LOGEN_CONF_BT_SPARE_7_IN_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_SXSEL_BIT    ((u32)0x00002000)
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_SXSEL_POS    13
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_LDO_EN_BIT    ((u32)0x00001000)
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_LDO_EN_POS    12
#define RFIC_REGS_BT_LOGEN_CONF_BT_SPARE_6_IN_MASK    ((u32)0x00000C00)
#define RFIC_REGS_BT_LOGEN_CONF_BT_SPARE_6_IN_LSB    10
#define RFIC_REGS_BT_LOGEN_CONF_BT_SPARE_6_IN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_DIVBUFFEN_BIT    ((u32)0x00000200)
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_DIVBUFFEN_POS    9
#define RFIC_REGS_BT_LOGEN_CONF_BT_SPARE_5_IN_MASK    ((u32)0x000001F0)
#define RFIC_REGS_BT_LOGEN_CONF_BT_SPARE_5_IN_LSB    4
#define RFIC_REGS_BT_LOGEN_CONF_BT_SPARE_5_IN_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_VDD_10_SEL_MASK    ((u32)0x0000000C)
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_VDD_10_SEL_LSB    2
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_VDD_10_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_RES_MASK    ((u32)0x00000003)
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_RES_LSB    0
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_RES_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_BT_LOGEN_CONF_BT_LOOPBK_AMP_EN_RST    0x00000000
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_RXTXN_RST    0x00000000
#define RFIC_REGS_BT_LOGEN_CONF_BT_SPARE_7_IN_RST    0x00000000
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_SXSEL_RST    0x00000001
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_LDO_EN_RST    0x00000000
#define RFIC_REGS_BT_LOGEN_CONF_BT_SPARE_6_IN_RST    0x00000000
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_DIVBUFFEN_RST    0x00000000
#define RFIC_REGS_BT_LOGEN_CONF_BT_SPARE_5_IN_RST    0x00000000
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_VDD_10_SEL_RST    0x00000000
#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_RES_RST    0x00000000

static inline void rfic_regs_bt_logen_conf_pack(struct cl_chip *chip, u8 bt_loopbk_amp_en, u8 bt_localdiv_rxtxn, u8 bt_spare7_in, u8 bt_localdiv_sxsel, u8 bt_localdiv_ldo_en, u8 bt_spare6_in, u8 bt_localdiv_divbuffen, u8 bt_spare5_in, u8 bt_localdiv_vdd10sel, u8 bt_localdiv_res)
{
	ASSERT_ERR_CHIP((((u32)bt_loopbk_amp_en << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_localdiv_rxtxn << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare7_in << 14) & ~((u32)0x0001C000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_localdiv_sxsel << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_localdiv_ldo_en << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare6_in << 10) & ~((u32)0x00000C00)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_localdiv_divbuffen << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare5_in << 4) & ~((u32)0x000001F0)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_localdiv_vdd10sel << 2) & ~((u32)0x0000000C)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_localdiv_res << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR, ((u32)bt_loopbk_amp_en << 18) | ((u32)bt_localdiv_rxtxn << 17) | ((u32)bt_spare7_in << 14) | ((u32)bt_localdiv_sxsel << 13) | ((u32)bt_localdiv_ldo_en << 12) | ((u32)bt_spare6_in << 10) | ((u32)bt_localdiv_divbuffen << 9) | ((u32)bt_spare5_in << 4) | ((u32)bt_localdiv_vdd10sel << 2) | ((u32)bt_localdiv_res << 0));
}

static inline void rfic_regs_bt_logen_conf_unpack(struct cl_chip *chip, u8 *bt_loopbk_amp_en, u8 *bt_localdiv_rxtxn, u8 *bt_spare7_in, u8 *bt_localdiv_sxsel, u8 *bt_localdiv_ldo_en, u8 *bt_spare6_in, u8 *bt_localdiv_divbuffen, u8 *bt_spare5_in, u8 *bt_localdiv_vdd10sel, u8 *bt_localdiv_res)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR);

	*bt_loopbk_amp_en = (local_val & ((u32)0x00040000)) >> 18;
	*bt_localdiv_rxtxn = (local_val & ((u32)0x00020000)) >> 17;
	*bt_spare7_in = (local_val & ((u32)0x0001C000)) >> 14;
	*bt_localdiv_sxsel = (local_val & ((u32)0x00002000)) >> 13;
	*bt_localdiv_ldo_en = (local_val & ((u32)0x00001000)) >> 12;
	*bt_spare6_in = (local_val & ((u32)0x00000C00)) >> 10;
	*bt_localdiv_divbuffen = (local_val & ((u32)0x00000200)) >> 9;
	*bt_spare5_in = (local_val & ((u32)0x000001F0)) >> 4;
	*bt_localdiv_vdd10sel = (local_val & ((u32)0x0000000C)) >> 2;
	*bt_localdiv_res = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_bt_logen_conf_bt_loopbk_amp_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void rfic_regs_bt_logen_conf_bt_loopbk_amp_en_setf(struct cl_chip *chip, u8 btloopbkampen)
{
	ASSERT_ERR_CHIP((((u32)btloopbkampen << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR) & ~((u32)0x00040000)) | ((u32)btloopbkampen << 18));
}

#define RFIC_REGS_BT_LOGEN_CONF_BT_LOOPBK_AMP_EN .addr_index = 0x000001A6, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_bt_logen_conf_bt_localdiv_rxtxn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_bt_logen_conf_bt_localdiv_rxtxn_setf(struct cl_chip *chip, u8 btlocaldivrxtxn)
{
	ASSERT_ERR_CHIP((((u32)btlocaldivrxtxn << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR) & ~((u32)0x00020000)) | ((u32)btlocaldivrxtxn << 17));
}

#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_RXTXN .addr_index = 0x000001A6, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_bt_logen_conf_bt_spare_7_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR);

	return (u8)((local_val & ((u32)0x0001C000)) >> 14);
}

static inline void rfic_regs_bt_logen_conf_bt_spare_7_in_setf(struct cl_chip *chip, u8 btspare7in)
{
	ASSERT_ERR_CHIP((((u32)btspare7in << 14) & ~((u32)0x0001C000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR) & ~((u32)0x0001C000)) | ((u32)btspare7in << 14));
}

#define RFIC_REGS_BT_LOGEN_CONF_BT_SPARE_7_IN .addr_index = 0x000001A6, .size_minus_1 = (3 - 1), .shift = 14

static inline u8 rfic_regs_bt_logen_conf_bt_localdiv_sxsel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void rfic_regs_bt_logen_conf_bt_localdiv_sxsel_setf(struct cl_chip *chip, u8 btlocaldivsxsel)
{
	ASSERT_ERR_CHIP((((u32)btlocaldivsxsel << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR) & ~((u32)0x00002000)) | ((u32)btlocaldivsxsel << 13));
}

#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_SXSEL .addr_index = 0x000001A6, .size_minus_1 = (1 - 1), .shift = 13

static inline u8 rfic_regs_bt_logen_conf_bt_localdiv_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void rfic_regs_bt_logen_conf_bt_localdiv_ldo_en_setf(struct cl_chip *chip, u8 btlocaldivldoen)
{
	ASSERT_ERR_CHIP((((u32)btlocaldivldoen << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR) & ~((u32)0x00001000)) | ((u32)btlocaldivldoen << 12));
}

#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_LDO_EN .addr_index = 0x000001A6, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_bt_logen_conf_bt_spare_6_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000C00)) >> 10);
}

static inline void rfic_regs_bt_logen_conf_bt_spare_6_in_setf(struct cl_chip *chip, u8 btspare6in)
{
	ASSERT_ERR_CHIP((((u32)btspare6in << 10) & ~((u32)0x00000C00)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR) & ~((u32)0x00000C00)) | ((u32)btspare6in << 10));
}

#define RFIC_REGS_BT_LOGEN_CONF_BT_SPARE_6_IN .addr_index = 0x000001A6, .size_minus_1 = (2 - 1), .shift = 10

static inline u8 rfic_regs_bt_logen_conf_bt_localdiv_divbuffen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void rfic_regs_bt_logen_conf_bt_localdiv_divbuffen_setf(struct cl_chip *chip, u8 btlocaldivdivbuffen)
{
	ASSERT_ERR_CHIP((((u32)btlocaldivdivbuffen << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR) & ~((u32)0x00000200)) | ((u32)btlocaldivdivbuffen << 9));
}

#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_DIVBUFFEN .addr_index = 0x000001A6, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_bt_logen_conf_bt_spare_5_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR);

	return (u8)((local_val & ((u32)0x000001F0)) >> 4);
}

static inline void rfic_regs_bt_logen_conf_bt_spare_5_in_setf(struct cl_chip *chip, u8 btspare5in)
{
	ASSERT_ERR_CHIP((((u32)btspare5in << 4) & ~((u32)0x000001F0)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR) & ~((u32)0x000001F0)) | ((u32)btspare5in << 4));
}

#define RFIC_REGS_BT_LOGEN_CONF_BT_SPARE_5_IN .addr_index = 0x000001A6, .size_minus_1 = (5 - 1), .shift = 4

static inline u8 rfic_regs_bt_logen_conf_bt_localdiv_vdd_10_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR);

	return (u8)((local_val & ((u32)0x0000000C)) >> 2);
}

static inline void rfic_regs_bt_logen_conf_bt_localdiv_vdd_10_sel_setf(struct cl_chip *chip, u8 btlocaldivvdd10sel)
{
	ASSERT_ERR_CHIP((((u32)btlocaldivvdd10sel << 2) & ~((u32)0x0000000C)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR) & ~((u32)0x0000000C)) | ((u32)btlocaldivvdd10sel << 2));
}

#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_VDD_10_SEL .addr_index = 0x000001A6, .size_minus_1 = (2 - 1), .shift = 2

static inline u8 rfic_regs_bt_logen_conf_bt_localdiv_res_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_bt_logen_conf_bt_localdiv_res_setf(struct cl_chip *chip, u8 btlocaldivres)
{
	ASSERT_ERR_CHIP((((u32)btlocaldivres << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_LOGEN_CONF_ADDR) & ~((u32)0x00000003)) | ((u32)btlocaldivres << 0));
}

#define RFIC_REGS_BT_LOGEN_CONF_BT_LOCALDIV_RES .addr_index = 0x000001A6, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief BT_RSSI_CONF register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    13:05 BT_spare9_in              0x00000000
 *    04:02 BT_rssi_filt_sel          0x00000000
 *    01    BT_rssi_en                00000000
 *    00    BT_spare8_in              00000000
 * </pre>
 */
#define RFIC_REGS_BT_RSSI_CONF_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000069C)
#define RFIC_REGS_BT_RSSI_CONF_OFFSET      0x0000069C
#define RFIC_REGS_BT_RSSI_CONF_INDEX       0x000001A7
#define RFIC_REGS_BT_RSSI_CONF_RESET       0x00000000

static inline u32 rfic_regs_bt_rssi_conf_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_RSSI_CONF_ADDR);
}

static inline void rfic_regs_bt_rssi_conf_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_RSSI_CONF_ADDR, value);
}

#define RFIC_REGS_BT_RSSI_CONF .addr_index = 0x000001A7, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_RSSI_CONF_BT_SPARE_9_IN_MASK    ((u32)0x00003FE0)
#define RFIC_REGS_BT_RSSI_CONF_BT_SPARE_9_IN_LSB    5
#define RFIC_REGS_BT_RSSI_CONF_BT_SPARE_9_IN_WIDTH    ((u32)0x00000009)
#define RFIC_REGS_BT_RSSI_CONF_BT_RSSI_FILT_SEL_MASK    ((u32)0x0000001C)
#define RFIC_REGS_BT_RSSI_CONF_BT_RSSI_FILT_SEL_LSB    2
#define RFIC_REGS_BT_RSSI_CONF_BT_RSSI_FILT_SEL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_RSSI_CONF_BT_RSSI_EN_BIT    ((u32)0x00000002)
#define RFIC_REGS_BT_RSSI_CONF_BT_RSSI_EN_POS    1
#define RFIC_REGS_BT_RSSI_CONF_BT_SPARE_8_IN_BIT    ((u32)0x00000001)
#define RFIC_REGS_BT_RSSI_CONF_BT_SPARE_8_IN_POS    0

#define RFIC_REGS_BT_RSSI_CONF_BT_SPARE_9_IN_RST    0x00000000
#define RFIC_REGS_BT_RSSI_CONF_BT_RSSI_FILT_SEL_RST    0x00000000
#define RFIC_REGS_BT_RSSI_CONF_BT_RSSI_EN_RST    0x00000000
#define RFIC_REGS_BT_RSSI_CONF_BT_SPARE_8_IN_RST    0x00000000

static inline void rfic_regs_bt_rssi_conf_pack(struct cl_chip *chip, u16 bt_spare9_in, u8 bt_rssi_filt_sel, u8 bt_rssi_en, u8 bt_spare8_in)
{
	ASSERT_ERR_CHIP((((u32)bt_spare9_in << 5) & ~((u32)0x00003FE0)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rssi_filt_sel << 2) & ~((u32)0x0000001C)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rssi_en << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare8_in << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_RSSI_CONF_ADDR, ((u32)bt_spare9_in << 5) | ((u32)bt_rssi_filt_sel << 2) | ((u32)bt_rssi_en << 1) | ((u32)bt_spare8_in << 0));
}

static inline void rfic_regs_bt_rssi_conf_unpack(struct cl_chip *chip, u16 *bt_spare9_in, u8 *bt_rssi_filt_sel, u8 *bt_rssi_en, u8 *bt_spare8_in)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_RSSI_CONF_ADDR);

	*bt_spare9_in = (local_val & ((u32)0x00003FE0)) >> 5;
	*bt_rssi_filt_sel = (local_val & ((u32)0x0000001C)) >> 2;
	*bt_rssi_en = (local_val & ((u32)0x00000002)) >> 1;
	*bt_spare8_in = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u16 rfic_regs_bt_rssi_conf_bt_spare_9_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_RSSI_CONF_ADDR);

	return (u16)((local_val & ((u32)0x00003FE0)) >> 5);
}

static inline void rfic_regs_bt_rssi_conf_bt_spare_9_in_setf(struct cl_chip *chip, u16 btspare9in)
{
	ASSERT_ERR_CHIP((((u32)btspare9in << 5) & ~((u32)0x00003FE0)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_RSSI_CONF_ADDR) & ~((u32)0x00003FE0)) | ((u32)btspare9in << 5));
}

#define RFIC_REGS_BT_RSSI_CONF_BT_SPARE_9_IN .addr_index = 0x000001A7, .size_minus_1 = (9 - 1), .shift = 5

static inline u8 rfic_regs_bt_rssi_conf_bt_rssi_filt_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x0000001C)) >> 2);
}

static inline void rfic_regs_bt_rssi_conf_bt_rssi_filt_sel_setf(struct cl_chip *chip, u8 btrssifiltsel)
{
	ASSERT_ERR_CHIP((((u32)btrssifiltsel << 2) & ~((u32)0x0000001C)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_RSSI_CONF_ADDR) & ~((u32)0x0000001C)) | ((u32)btrssifiltsel << 2));
}

#define RFIC_REGS_BT_RSSI_CONF_BT_RSSI_FILT_SEL .addr_index = 0x000001A7, .size_minus_1 = (3 - 1), .shift = 2

static inline u8 rfic_regs_bt_rssi_conf_bt_rssi_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_bt_rssi_conf_bt_rssi_en_setf(struct cl_chip *chip, u8 btrssien)
{
	ASSERT_ERR_CHIP((((u32)btrssien << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_RSSI_CONF_ADDR) & ~((u32)0x00000002)) | ((u32)btrssien << 1));
}

#define RFIC_REGS_BT_RSSI_CONF_BT_RSSI_EN .addr_index = 0x000001A7, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_bt_rssi_conf_bt_spare_8_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_RSSI_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_bt_rssi_conf_bt_spare_8_in_setf(struct cl_chip *chip, u8 btspare8in)
{
	ASSERT_ERR_CHIP((((u32)btspare8in << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_RSSI_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_RSSI_CONF_ADDR) & ~((u32)0x00000001)) | ((u32)btspare8in << 0));
}

#define RFIC_REGS_BT_RSSI_CONF_BT_SPARE_8_IN .addr_index = 0x000001A7, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief BT_TX_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:26 BT_tx_prepa_curr_ctrl     0x00000000
 *    25    BT_tx_prepa_bias_en       00000000
 *    24    BT_tx_gain_lut_write_en   00000000
 *    23    BT_rx_gain_lut_write_en   00000000
 *    22:18 BT_tx_mix_cap_ctrl        0x00000000
 *    17:15 BT_spare11_in             0x00000000
 *    14:11 BT_tx_mix_gain            0x00000000
 *    10    BT_spare10_in             00000000
 *    09:07 BT_tx_mix_lo_bias_ctrl    0x00000000
 *    06:03 BT_tx_mix_curr_ctrl       0x00000000
 *    02:00 BT_tx_mix_rctrl           0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_TX_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006A0)
#define RFIC_REGS_BT_TX_CTRL_0_OFFSET      0x000006A0
#define RFIC_REGS_BT_TX_CTRL_0_INDEX       0x000001A8
#define RFIC_REGS_BT_TX_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_bt_tx_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR);
}

static inline void rfic_regs_bt_tx_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR, value);
}

#define RFIC_REGS_BT_TX_CTRL_0 .addr_index = 0x000001A8, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_PREPA_CURR_CTRL_MASK    ((u32)0x3C000000)
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_PREPA_CURR_CTRL_LSB    26
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_PREPA_CURR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_PREPA_BIAS_EN_BIT    ((u32)0x02000000)
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_PREPA_BIAS_EN_POS    25
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_GAIN_LUT_WRITE_EN_BIT    ((u32)0x01000000)
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_GAIN_LUT_WRITE_EN_POS    24
#define RFIC_REGS_BT_TX_CTRL_0_BT_RX_GAIN_LUT_WRITE_EN_BIT    ((u32)0x00800000)
#define RFIC_REGS_BT_TX_CTRL_0_BT_RX_GAIN_LUT_WRITE_EN_POS    23
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_CAP_CTRL_MASK    ((u32)0x007C0000)
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_CAP_CTRL_LSB    18
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_CAP_CTRL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_BT_TX_CTRL_0_BT_SPARE_11_IN_MASK    ((u32)0x00038000)
#define RFIC_REGS_BT_TX_CTRL_0_BT_SPARE_11_IN_LSB    15
#define RFIC_REGS_BT_TX_CTRL_0_BT_SPARE_11_IN_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_GAIN_MASK    ((u32)0x00007800)
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_GAIN_LSB    11
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_GAIN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_TX_CTRL_0_BT_SPARE_10_IN_BIT    ((u32)0x00000400)
#define RFIC_REGS_BT_TX_CTRL_0_BT_SPARE_10_IN_POS    10
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_LO_BIAS_CTRL_MASK    ((u32)0x00000380)
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_LO_BIAS_CTRL_LSB    7
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_LO_BIAS_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_CURR_CTRL_MASK    ((u32)0x00000078)
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_CURR_CTRL_LSB    3
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_CURR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_RCTRL_MASK    ((u32)0x00000007)
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_RCTRL_LSB    0
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_RCTRL_WIDTH    ((u32)0x00000003)

#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_PREPA_CURR_CTRL_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_PREPA_BIAS_EN_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_GAIN_LUT_WRITE_EN_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_0_BT_RX_GAIN_LUT_WRITE_EN_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_CAP_CTRL_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_0_BT_SPARE_11_IN_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_GAIN_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_0_BT_SPARE_10_IN_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_LO_BIAS_CTRL_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_CURR_CTRL_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_RCTRL_RST    0x00000000

static inline void rfic_regs_bt_tx_ctrl_0_pack(struct cl_chip *chip, u8 bt_tx_prepa_curr_ctrl, u8 bt_tx_prepa_bias_en, u8 bt_tx_gain_lut_write_en, u8 bt_rx_gain_lut_write_en, u8 bt_tx_mix_cap_ctrl, u8 bt_spare11_in, u8 bt_tx_mix_gain, u8 bt_spare10_in, u8 bt_tx_mix_lo_bias_ctrl, u8 bt_tx_mix_curr_ctrl, u8 bt_tx_mix_rctrl)
{
	ASSERT_ERR_CHIP((((u32)bt_tx_prepa_curr_ctrl << 26) & ~((u32)0x3C000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_prepa_bias_en << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_gain_lut_write_en << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_gain_lut_write_en << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_mix_cap_ctrl << 18) & ~((u32)0x007C0000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare11_in << 15) & ~((u32)0x00038000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_mix_gain << 11) & ~((u32)0x00007800)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare10_in << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_mix_lo_bias_ctrl << 7) & ~((u32)0x00000380)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_mix_curr_ctrl << 3) & ~((u32)0x00000078)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_mix_rctrl << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR, ((u32)bt_tx_prepa_curr_ctrl << 26) | ((u32)bt_tx_prepa_bias_en << 25) | ((u32)bt_tx_gain_lut_write_en << 24) | ((u32)bt_rx_gain_lut_write_en << 23) | ((u32)bt_tx_mix_cap_ctrl << 18) | ((u32)bt_spare11_in << 15) | ((u32)bt_tx_mix_gain << 11) | ((u32)bt_spare10_in << 10) | ((u32)bt_tx_mix_lo_bias_ctrl << 7) | ((u32)bt_tx_mix_curr_ctrl << 3) | ((u32)bt_tx_mix_rctrl << 0));
}

static inline void rfic_regs_bt_tx_ctrl_0_unpack(struct cl_chip *chip, u8 *bt_tx_prepa_curr_ctrl, u8 *bt_tx_prepa_bias_en, u8 *bt_tx_gain_lut_write_en, u8 *bt_rx_gain_lut_write_en, u8 *bt_tx_mix_cap_ctrl, u8 *bt_spare11_in, u8 *bt_tx_mix_gain, u8 *bt_spare10_in, u8 *bt_tx_mix_lo_bias_ctrl, u8 *bt_tx_mix_curr_ctrl, u8 *bt_tx_mix_rctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR);

	*bt_tx_prepa_curr_ctrl = (local_val & ((u32)0x3C000000)) >> 26;
	*bt_tx_prepa_bias_en = (local_val & ((u32)0x02000000)) >> 25;
	*bt_tx_gain_lut_write_en = (local_val & ((u32)0x01000000)) >> 24;
	*bt_rx_gain_lut_write_en = (local_val & ((u32)0x00800000)) >> 23;
	*bt_tx_mix_cap_ctrl = (local_val & ((u32)0x007C0000)) >> 18;
	*bt_spare11_in = (local_val & ((u32)0x00038000)) >> 15;
	*bt_tx_mix_gain = (local_val & ((u32)0x00007800)) >> 11;
	*bt_spare10_in = (local_val & ((u32)0x00000400)) >> 10;
	*bt_tx_mix_lo_bias_ctrl = (local_val & ((u32)0x00000380)) >> 7;
	*bt_tx_mix_curr_ctrl = (local_val & ((u32)0x00000078)) >> 3;
	*bt_tx_mix_rctrl = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 rfic_regs_bt_tx_ctrl_0_bt_tx_prepa_curr_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x3C000000)) >> 26);
}

static inline void rfic_regs_bt_tx_ctrl_0_bt_tx_prepa_curr_ctrl_setf(struct cl_chip *chip, u8 bttxprepacurrctrl)
{
	ASSERT_ERR_CHIP((((u32)bttxprepacurrctrl << 26) & ~((u32)0x3C000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR) & ~((u32)0x3C000000)) | ((u32)bttxprepacurrctrl << 26));
}

#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_PREPA_CURR_CTRL .addr_index = 0x000001A8, .size_minus_1 = (4 - 1), .shift = 26

static inline u8 rfic_regs_bt_tx_ctrl_0_bt_tx_prepa_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void rfic_regs_bt_tx_ctrl_0_bt_tx_prepa_bias_en_setf(struct cl_chip *chip, u8 bttxprepabiasen)
{
	ASSERT_ERR_CHIP((((u32)bttxprepabiasen << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR) & ~((u32)0x02000000)) | ((u32)bttxprepabiasen << 25));
}

#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_PREPA_BIAS_EN .addr_index = 0x000001A8, .size_minus_1 = (1 - 1), .shift = 25

static inline u8 rfic_regs_bt_tx_ctrl_0_bt_tx_gain_lut_write_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void rfic_regs_bt_tx_ctrl_0_bt_tx_gain_lut_write_en_setf(struct cl_chip *chip, u8 bttxgainlutwriteen)
{
	ASSERT_ERR_CHIP((((u32)bttxgainlutwriteen << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR) & ~((u32)0x01000000)) | ((u32)bttxgainlutwriteen << 24));
}

#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_GAIN_LUT_WRITE_EN .addr_index = 0x000001A8, .size_minus_1 = (1 - 1), .shift = 24

static inline u8 rfic_regs_bt_tx_ctrl_0_bt_rx_gain_lut_write_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void rfic_regs_bt_tx_ctrl_0_bt_rx_gain_lut_write_en_setf(struct cl_chip *chip, u8 btrxgainlutwriteen)
{
	ASSERT_ERR_CHIP((((u32)btrxgainlutwriteen << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR) & ~((u32)0x00800000)) | ((u32)btrxgainlutwriteen << 23));
}

#define RFIC_REGS_BT_TX_CTRL_0_BT_RX_GAIN_LUT_WRITE_EN .addr_index = 0x000001A8, .size_minus_1 = (1 - 1), .shift = 23

static inline u8 rfic_regs_bt_tx_ctrl_0_bt_tx_mix_cap_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x007C0000)) >> 18);
}

static inline void rfic_regs_bt_tx_ctrl_0_bt_tx_mix_cap_ctrl_setf(struct cl_chip *chip, u8 bttxmixcapctrl)
{
	ASSERT_ERR_CHIP((((u32)bttxmixcapctrl << 18) & ~((u32)0x007C0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR) & ~((u32)0x007C0000)) | ((u32)bttxmixcapctrl << 18));
}

#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_CAP_CTRL .addr_index = 0x000001A8, .size_minus_1 = (5 - 1), .shift = 18

static inline u8 rfic_regs_bt_tx_ctrl_0_bt_spare_11_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00038000)) >> 15);
}

static inline void rfic_regs_bt_tx_ctrl_0_bt_spare_11_in_setf(struct cl_chip *chip, u8 btspare11in)
{
	ASSERT_ERR_CHIP((((u32)btspare11in << 15) & ~((u32)0x00038000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR) & ~((u32)0x00038000)) | ((u32)btspare11in << 15));
}

#define RFIC_REGS_BT_TX_CTRL_0_BT_SPARE_11_IN .addr_index = 0x000001A8, .size_minus_1 = (3 - 1), .shift = 15

static inline u8 rfic_regs_bt_tx_ctrl_0_bt_tx_mix_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00007800)) >> 11);
}

static inline void rfic_regs_bt_tx_ctrl_0_bt_tx_mix_gain_setf(struct cl_chip *chip, u8 bttxmixgain)
{
	ASSERT_ERR_CHIP((((u32)bttxmixgain << 11) & ~((u32)0x00007800)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR) & ~((u32)0x00007800)) | ((u32)bttxmixgain << 11));
}

#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_GAIN .addr_index = 0x000001A8, .size_minus_1 = (4 - 1), .shift = 11

static inline u8 rfic_regs_bt_tx_ctrl_0_bt_spare_10_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_bt_tx_ctrl_0_bt_spare_10_in_setf(struct cl_chip *chip, u8 btspare10in)
{
	ASSERT_ERR_CHIP((((u32)btspare10in << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR) & ~((u32)0x00000400)) | ((u32)btspare10in << 10));
}

#define RFIC_REGS_BT_TX_CTRL_0_BT_SPARE_10_IN .addr_index = 0x000001A8, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_bt_tx_ctrl_0_bt_tx_mix_lo_bias_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000380)) >> 7);
}

static inline void rfic_regs_bt_tx_ctrl_0_bt_tx_mix_lo_bias_ctrl_setf(struct cl_chip *chip, u8 bttxmixlobiasctrl)
{
	ASSERT_ERR_CHIP((((u32)bttxmixlobiasctrl << 7) & ~((u32)0x00000380)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR) & ~((u32)0x00000380)) | ((u32)bttxmixlobiasctrl << 7));
}

#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_LO_BIAS_CTRL .addr_index = 0x000001A8, .size_minus_1 = (3 - 1), .shift = 7

static inline u8 rfic_regs_bt_tx_ctrl_0_bt_tx_mix_curr_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000078)) >> 3);
}

static inline void rfic_regs_bt_tx_ctrl_0_bt_tx_mix_curr_ctrl_setf(struct cl_chip *chip, u8 bttxmixcurrctrl)
{
	ASSERT_ERR_CHIP((((u32)bttxmixcurrctrl << 3) & ~((u32)0x00000078)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR) & ~((u32)0x00000078)) | ((u32)bttxmixcurrctrl << 3));
}

#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_CURR_CTRL .addr_index = 0x000001A8, .size_minus_1 = (4 - 1), .shift = 3

static inline u8 rfic_regs_bt_tx_ctrl_0_bt_tx_mix_rctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void rfic_regs_bt_tx_ctrl_0_bt_tx_mix_rctrl_setf(struct cl_chip *chip, u8 bttxmixrctrl)
{
	ASSERT_ERR_CHIP((((u32)bttxmixrctrl << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_0_ADDR) & ~((u32)0x00000007)) | ((u32)bttxmixrctrl << 0));
}

#define RFIC_REGS_BT_TX_CTRL_0_BT_TX_MIX_RCTRL .addr_index = 0x000001A8, .size_minus_1 = (3 - 1), .shift = 0

/**
 * @brief BT_TX_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    BT_tx_mix_en              00000000
 *    30    BT_tx_prepa_en            00000000
 *    29    BT_spare14_in             00000000
 *    28:21 BT_tx_prepa_gain_ctrl     0x00000000
 *    20:00 BT_spare13_in             0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_TX_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006A4)
#define RFIC_REGS_BT_TX_CTRL_1_OFFSET      0x000006A4
#define RFIC_REGS_BT_TX_CTRL_1_INDEX       0x000001A9
#define RFIC_REGS_BT_TX_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_bt_tx_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR);
}

static inline void rfic_regs_bt_tx_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR, value);
}

#define RFIC_REGS_BT_TX_CTRL_1 .addr_index = 0x000001A9, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_TX_CTRL_1_BT_TX_MIX_EN_BIT    ((u32)0x80000000)
#define RFIC_REGS_BT_TX_CTRL_1_BT_TX_MIX_EN_POS    31
#define RFIC_REGS_BT_TX_CTRL_1_BT_TX_PREPA_EN_BIT    ((u32)0x40000000)
#define RFIC_REGS_BT_TX_CTRL_1_BT_TX_PREPA_EN_POS    30
#define RFIC_REGS_BT_TX_CTRL_1_BT_SPARE_14_IN_BIT    ((u32)0x20000000)
#define RFIC_REGS_BT_TX_CTRL_1_BT_SPARE_14_IN_POS    29
#define RFIC_REGS_BT_TX_CTRL_1_BT_TX_PREPA_GAIN_CTRL_MASK    ((u32)0x1FE00000)
#define RFIC_REGS_BT_TX_CTRL_1_BT_TX_PREPA_GAIN_CTRL_LSB    21
#define RFIC_REGS_BT_TX_CTRL_1_BT_TX_PREPA_GAIN_CTRL_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_BT_TX_CTRL_1_BT_SPARE_13_IN_MASK    ((u32)0x001FFFFF)
#define RFIC_REGS_BT_TX_CTRL_1_BT_SPARE_13_IN_LSB    0
#define RFIC_REGS_BT_TX_CTRL_1_BT_SPARE_13_IN_WIDTH    ((u32)0x00000015)

#define RFIC_REGS_BT_TX_CTRL_1_BT_TX_MIX_EN_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_1_BT_TX_PREPA_EN_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_1_BT_SPARE_14_IN_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_1_BT_TX_PREPA_GAIN_CTRL_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_1_BT_SPARE_13_IN_RST    0x00000000

static inline void rfic_regs_bt_tx_ctrl_1_pack(struct cl_chip *chip, u8 bt_tx_mix_en, u8 bt_tx_prepa_en, u8 bt_spare14_in, u8 bt_tx_prepa_gain_ctrl, u32 bt_spare13_in)
{
	ASSERT_ERR_CHIP((((u32)bt_tx_mix_en << 31) & ~((u32)0x80000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_prepa_en << 30) & ~((u32)0x40000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare14_in << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_prepa_gain_ctrl << 21) & ~((u32)0x1FE00000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare13_in << 0) & ~((u32)0x001FFFFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR, ((u32)bt_tx_mix_en << 31) | ((u32)bt_tx_prepa_en << 30) | ((u32)bt_spare14_in << 29) | ((u32)bt_tx_prepa_gain_ctrl << 21) | ((u32)bt_spare13_in << 0));
}

static inline void rfic_regs_bt_tx_ctrl_1_unpack(struct cl_chip *chip, u8 *bt_tx_mix_en, u8 *bt_tx_prepa_en, u8 *bt_spare14_in, u8 *bt_tx_prepa_gain_ctrl, u32 *bt_spare13_in)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR);

	*bt_tx_mix_en = (local_val & ((u32)0x80000000)) >> 31;
	*bt_tx_prepa_en = (local_val & ((u32)0x40000000)) >> 30;
	*bt_spare14_in = (local_val & ((u32)0x20000000)) >> 29;
	*bt_tx_prepa_gain_ctrl = (local_val & ((u32)0x1FE00000)) >> 21;
	*bt_spare13_in = (local_val & ((u32)0x001FFFFF)) >> 0;
}

static inline u8 rfic_regs_bt_tx_ctrl_1_bt_tx_mix_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x80000000)) >> 31);
}

static inline void rfic_regs_bt_tx_ctrl_1_bt_tx_mix_en_setf(struct cl_chip *chip, u8 bttxmixen)
{
	ASSERT_ERR_CHIP((((u32)bttxmixen << 31) & ~((u32)0x80000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR) & ~((u32)0x80000000)) | ((u32)bttxmixen << 31));
}

#define RFIC_REGS_BT_TX_CTRL_1_BT_TX_MIX_EN .addr_index = 0x000001A9, .size_minus_1 = (1 - 1), .shift = 31

static inline u8 rfic_regs_bt_tx_ctrl_1_bt_tx_prepa_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x40000000)) >> 30);
}

static inline void rfic_regs_bt_tx_ctrl_1_bt_tx_prepa_en_setf(struct cl_chip *chip, u8 bttxprepaen)
{
	ASSERT_ERR_CHIP((((u32)bttxprepaen << 30) & ~((u32)0x40000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR) & ~((u32)0x40000000)) | ((u32)bttxprepaen << 30));
}

#define RFIC_REGS_BT_TX_CTRL_1_BT_TX_PREPA_EN .addr_index = 0x000001A9, .size_minus_1 = (1 - 1), .shift = 30

static inline u8 rfic_regs_bt_tx_ctrl_1_bt_spare_14_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void rfic_regs_bt_tx_ctrl_1_bt_spare_14_in_setf(struct cl_chip *chip, u8 btspare14in)
{
	ASSERT_ERR_CHIP((((u32)btspare14in << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR) & ~((u32)0x20000000)) | ((u32)btspare14in << 29));
}

#define RFIC_REGS_BT_TX_CTRL_1_BT_SPARE_14_IN .addr_index = 0x000001A9, .size_minus_1 = (1 - 1), .shift = 29

static inline u8 rfic_regs_bt_tx_ctrl_1_bt_tx_prepa_gain_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x1FE00000)) >> 21);
}

static inline void rfic_regs_bt_tx_ctrl_1_bt_tx_prepa_gain_ctrl_setf(struct cl_chip *chip, u8 bttxprepagainctrl)
{
	ASSERT_ERR_CHIP((((u32)bttxprepagainctrl << 21) & ~((u32)0x1FE00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR) & ~((u32)0x1FE00000)) | ((u32)bttxprepagainctrl << 21));
}

#define RFIC_REGS_BT_TX_CTRL_1_BT_TX_PREPA_GAIN_CTRL .addr_index = 0x000001A9, .size_minus_1 = (8 - 1), .shift = 21

static inline u32 rfic_regs_bt_tx_ctrl_1_bt_spare_13_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR);

	return (u32)((local_val & ((u32)0x001FFFFF)) >> 0);
}

static inline void rfic_regs_bt_tx_ctrl_1_bt_spare_13_in_setf(struct cl_chip *chip, u32 btspare13in)
{
	ASSERT_ERR_CHIP((((u32)btspare13in << 0) & ~((u32)0x001FFFFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_1_ADDR) & ~((u32)0x001FFFFF)) | ((u32)btspare13in << 0));
}

#define RFIC_REGS_BT_TX_CTRL_1_BT_SPARE_13_IN .addr_index = 0x000001A9, .size_minus_1 = (21 - 1), .shift = 0

/**
 * @brief BT_TX_CTRL_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:16 BT_spare17_in             0x00000000
 *    15:14 BT_pdet_gain              0x00000000
 *    13:11 BT_spare16_in             0x00000000
 *    10:08 BT_pdet_filt_sel          0x00000000
 *    07    BT_pdet_en                00000000
 *    06:05 BT_spare15_in             0x00000000
 *    04:00 BT_tx_prepa_cap_ctrl      0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_TX_CTRL_2_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006A8)
#define RFIC_REGS_BT_TX_CTRL_2_OFFSET      0x000006A8
#define RFIC_REGS_BT_TX_CTRL_2_INDEX       0x000001AA
#define RFIC_REGS_BT_TX_CTRL_2_RESET       0x00000000

static inline u32 rfic_regs_bt_tx_ctrl_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR);
}

static inline void rfic_regs_bt_tx_ctrl_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR, value);
}

#define RFIC_REGS_BT_TX_CTRL_2 .addr_index = 0x000001AA, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_TX_CTRL_2_BT_SPARE_17_IN_MASK    ((u32)0x3FFF0000)
#define RFIC_REGS_BT_TX_CTRL_2_BT_SPARE_17_IN_LSB    16
#define RFIC_REGS_BT_TX_CTRL_2_BT_SPARE_17_IN_WIDTH    ((u32)0x0000000E)
#define RFIC_REGS_BT_TX_CTRL_2_BT_PDET_GAIN_MASK    ((u32)0x0000C000)
#define RFIC_REGS_BT_TX_CTRL_2_BT_PDET_GAIN_LSB    14
#define RFIC_REGS_BT_TX_CTRL_2_BT_PDET_GAIN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_BT_TX_CTRL_2_BT_SPARE_16_IN_MASK    ((u32)0x00003800)
#define RFIC_REGS_BT_TX_CTRL_2_BT_SPARE_16_IN_LSB    11
#define RFIC_REGS_BT_TX_CTRL_2_BT_SPARE_16_IN_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_TX_CTRL_2_BT_PDET_FILT_SEL_MASK    ((u32)0x00000700)
#define RFIC_REGS_BT_TX_CTRL_2_BT_PDET_FILT_SEL_LSB    8
#define RFIC_REGS_BT_TX_CTRL_2_BT_PDET_FILT_SEL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_TX_CTRL_2_BT_PDET_EN_BIT    ((u32)0x00000080)
#define RFIC_REGS_BT_TX_CTRL_2_BT_PDET_EN_POS    7
#define RFIC_REGS_BT_TX_CTRL_2_BT_SPARE_15_IN_MASK    ((u32)0x00000060)
#define RFIC_REGS_BT_TX_CTRL_2_BT_SPARE_15_IN_LSB    5
#define RFIC_REGS_BT_TX_CTRL_2_BT_SPARE_15_IN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_BT_TX_CTRL_2_BT_TX_PREPA_CAP_CTRL_MASK    ((u32)0x0000001F)
#define RFIC_REGS_BT_TX_CTRL_2_BT_TX_PREPA_CAP_CTRL_LSB    0
#define RFIC_REGS_BT_TX_CTRL_2_BT_TX_PREPA_CAP_CTRL_WIDTH    ((u32)0x00000005)

#define RFIC_REGS_BT_TX_CTRL_2_BT_SPARE_17_IN_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_2_BT_PDET_GAIN_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_2_BT_SPARE_16_IN_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_2_BT_PDET_FILT_SEL_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_2_BT_PDET_EN_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_2_BT_SPARE_15_IN_RST    0x00000000
#define RFIC_REGS_BT_TX_CTRL_2_BT_TX_PREPA_CAP_CTRL_RST    0x00000000

static inline void rfic_regs_bt_tx_ctrl_2_pack(struct cl_chip *chip, u16 bt_spare17_in, u8 bt_pdet_gain, u8 bt_spare16_in, u8 bt_pdet_filt_sel, u8 bt_pdet_en, u8 bt_spare15_in, u8 bt_tx_prepa_cap_ctrl)
{
	ASSERT_ERR_CHIP((((u32)bt_spare17_in << 16) & ~((u32)0x3FFF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_pdet_gain << 14) & ~((u32)0x0000C000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare16_in << 11) & ~((u32)0x00003800)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_pdet_filt_sel << 8) & ~((u32)0x00000700)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_pdet_en << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare15_in << 5) & ~((u32)0x00000060)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_prepa_cap_ctrl << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR, ((u32)bt_spare17_in << 16) | ((u32)bt_pdet_gain << 14) | ((u32)bt_spare16_in << 11) | ((u32)bt_pdet_filt_sel << 8) | ((u32)bt_pdet_en << 7) | ((u32)bt_spare15_in << 5) | ((u32)bt_tx_prepa_cap_ctrl << 0));
}

static inline void rfic_regs_bt_tx_ctrl_2_unpack(struct cl_chip *chip, u16 *bt_spare17_in, u8 *bt_pdet_gain, u8 *bt_spare16_in, u8 *bt_pdet_filt_sel, u8 *bt_pdet_en, u8 *bt_spare15_in, u8 *bt_tx_prepa_cap_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR);

	*bt_spare17_in = (local_val & ((u32)0x3FFF0000)) >> 16;
	*bt_pdet_gain = (local_val & ((u32)0x0000C000)) >> 14;
	*bt_spare16_in = (local_val & ((u32)0x00003800)) >> 11;
	*bt_pdet_filt_sel = (local_val & ((u32)0x00000700)) >> 8;
	*bt_pdet_en = (local_val & ((u32)0x00000080)) >> 7;
	*bt_spare15_in = (local_val & ((u32)0x00000060)) >> 5;
	*bt_tx_prepa_cap_ctrl = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u16 rfic_regs_bt_tx_ctrl_2_bt_spare_17_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR);

	return (u16)((local_val & ((u32)0x3FFF0000)) >> 16);
}

static inline void rfic_regs_bt_tx_ctrl_2_bt_spare_17_in_setf(struct cl_chip *chip, u16 btspare17in)
{
	ASSERT_ERR_CHIP((((u32)btspare17in << 16) & ~((u32)0x3FFF0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR) & ~((u32)0x3FFF0000)) | ((u32)btspare17in << 16));
}

#define RFIC_REGS_BT_TX_CTRL_2_BT_SPARE_17_IN .addr_index = 0x000001AA, .size_minus_1 = (14 - 1), .shift = 16

static inline u8 rfic_regs_bt_tx_ctrl_2_bt_pdet_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x0000C000)) >> 14);
}

static inline void rfic_regs_bt_tx_ctrl_2_bt_pdet_gain_setf(struct cl_chip *chip, u8 btpdetgain)
{
	ASSERT_ERR_CHIP((((u32)btpdetgain << 14) & ~((u32)0x0000C000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR) & ~((u32)0x0000C000)) | ((u32)btpdetgain << 14));
}

#define RFIC_REGS_BT_TX_CTRL_2_BT_PDET_GAIN .addr_index = 0x000001AA, .size_minus_1 = (2 - 1), .shift = 14

static inline u8 rfic_regs_bt_tx_ctrl_2_bt_spare_16_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00003800)) >> 11);
}

static inline void rfic_regs_bt_tx_ctrl_2_bt_spare_16_in_setf(struct cl_chip *chip, u8 btspare16in)
{
	ASSERT_ERR_CHIP((((u32)btspare16in << 11) & ~((u32)0x00003800)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR) & ~((u32)0x00003800)) | ((u32)btspare16in << 11));
}

#define RFIC_REGS_BT_TX_CTRL_2_BT_SPARE_16_IN .addr_index = 0x000001AA, .size_minus_1 = (3 - 1), .shift = 11

static inline u8 rfic_regs_bt_tx_ctrl_2_bt_pdet_filt_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000700)) >> 8);
}

static inline void rfic_regs_bt_tx_ctrl_2_bt_pdet_filt_sel_setf(struct cl_chip *chip, u8 btpdetfiltsel)
{
	ASSERT_ERR_CHIP((((u32)btpdetfiltsel << 8) & ~((u32)0x00000700)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR) & ~((u32)0x00000700)) | ((u32)btpdetfiltsel << 8));
}

#define RFIC_REGS_BT_TX_CTRL_2_BT_PDET_FILT_SEL .addr_index = 0x000001AA, .size_minus_1 = (3 - 1), .shift = 8

static inline u8 rfic_regs_bt_tx_ctrl_2_bt_pdet_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_bt_tx_ctrl_2_bt_pdet_en_setf(struct cl_chip *chip, u8 btpdeten)
{
	ASSERT_ERR_CHIP((((u32)btpdeten << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR) & ~((u32)0x00000080)) | ((u32)btpdeten << 7));
}

#define RFIC_REGS_BT_TX_CTRL_2_BT_PDET_EN .addr_index = 0x000001AA, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_bt_tx_ctrl_2_bt_spare_15_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000060)) >> 5);
}

static inline void rfic_regs_bt_tx_ctrl_2_bt_spare_15_in_setf(struct cl_chip *chip, u8 btspare15in)
{
	ASSERT_ERR_CHIP((((u32)btspare15in << 5) & ~((u32)0x00000060)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR) & ~((u32)0x00000060)) | ((u32)btspare15in << 5));
}

#define RFIC_REGS_BT_TX_CTRL_2_BT_SPARE_15_IN .addr_index = 0x000001AA, .size_minus_1 = (2 - 1), .shift = 5

static inline u8 rfic_regs_bt_tx_ctrl_2_bt_tx_prepa_cap_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

static inline void rfic_regs_bt_tx_ctrl_2_bt_tx_prepa_cap_ctrl_setf(struct cl_chip *chip, u8 bttxprepacapctrl)
{
	ASSERT_ERR_CHIP((((u32)bttxprepacapctrl << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_TX_CTRL_2_ADDR) & ~((u32)0x0000001F)) | ((u32)bttxprepacapctrl << 0));
}

#define RFIC_REGS_BT_TX_CTRL_2_BT_TX_PREPA_CAP_CTRL .addr_index = 0x000001AA, .size_minus_1 = (5 - 1), .shift = 0

/**
 * @brief BT_ADC_FSM register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21    BT_adc_q_inv_comp_clk     00000000
 *    20    BT_adc_q_inv_check_bit    00000000
 *    19    BT_adc_i_inv_comp_clk     00000000
 *    18    BT_adc_i_inv_check_bit    00000000
 *    17:13 BT_adc_q_comp_offset_sel  0x00000000
 *    12:08 BT_adc_i_comp_offset_sel  0x00000000
 *    07    BT_adc_q_comp_clk         00000000
 *    06    BT_adc_i_comp_clk         00000000
 *    05    BT_adc_q_comp_offset_cal_mode_en 00000000
 *    04    BT_adc_i_comp_offset_cal_mode_en 00000000
 *    03    BT_adc_comp_offset_cal_fsm_rstn 00000001
 *    02    BT_adc_comp_offset_cal_fsm_en 00000000
 *    01    BT_adc_comp_offset_cal_start 00000000
 *    00    BT_adc_comp_offset_cal_bypass 00000000
 * </pre>
 */
#define RFIC_REGS_BT_ADC_FSM_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006AC)
#define RFIC_REGS_BT_ADC_FSM_OFFSET      0x000006AC
#define RFIC_REGS_BT_ADC_FSM_INDEX       0x000001AB
#define RFIC_REGS_BT_ADC_FSM_RESET       0x00000008

static inline u32 rfic_regs_bt_adc_fsm_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR);
}

static inline void rfic_regs_bt_adc_fsm_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_ADC_FSM_ADDR, value);
}

#define RFIC_REGS_BT_ADC_FSM .addr_index = 0x000001AB, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_INV_COMP_CLK_BIT    ((u32)0x00200000)
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_INV_COMP_CLK_POS    21
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_INV_CHECK_BIT_BIT    ((u32)0x00100000)
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_INV_CHECK_BIT_POS    20
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_INV_COMP_CLK_BIT    ((u32)0x00080000)
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_INV_COMP_CLK_POS    19
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_INV_CHECK_BIT_BIT    ((u32)0x00040000)
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_INV_CHECK_BIT_POS    18
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_COMP_OFFSET_SEL_MASK    ((u32)0x0003E000)
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_COMP_OFFSET_SEL_LSB    13
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_COMP_OFFSET_SEL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_COMP_OFFSET_SEL_MASK    ((u32)0x00001F00)
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_COMP_OFFSET_SEL_LSB    8
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_COMP_OFFSET_SEL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_COMP_CLK_BIT    ((u32)0x00000080)
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_COMP_CLK_POS    7
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_COMP_CLK_BIT    ((u32)0x00000040)
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_COMP_CLK_POS    6
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_COMP_OFFSET_CAL_MODE_EN_BIT    ((u32)0x00000020)
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_COMP_OFFSET_CAL_MODE_EN_POS    5
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_COMP_OFFSET_CAL_MODE_EN_BIT    ((u32)0x00000010)
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_COMP_OFFSET_CAL_MODE_EN_POS    4
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_COMP_OFFSET_CAL_FSM_RSTN_BIT    ((u32)0x00000008)
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_COMP_OFFSET_CAL_FSM_RSTN_POS    3
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_COMP_OFFSET_CAL_FSM_EN_BIT    ((u32)0x00000004)
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_COMP_OFFSET_CAL_FSM_EN_POS    2
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_COMP_OFFSET_CAL_START_BIT    ((u32)0x00000002)
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_COMP_OFFSET_CAL_START_POS    1
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_COMP_OFFSET_CAL_BYPASS_BIT    ((u32)0x00000001)
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_COMP_OFFSET_CAL_BYPASS_POS    0

#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_INV_COMP_CLK_RST    0x00000000
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_INV_CHECK_BIT_RST    0x00000000
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_INV_COMP_CLK_RST    0x00000000
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_INV_CHECK_BIT_RST    0x00000000
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_COMP_OFFSET_SEL_RST    0x00000000
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_COMP_OFFSET_SEL_RST    0x00000000
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_COMP_CLK_RST    0x00000000
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_COMP_CLK_RST    0x00000000
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_COMP_OFFSET_CAL_MODE_EN_RST    0x00000000
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_COMP_OFFSET_CAL_MODE_EN_RST    0x00000000
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_COMP_OFFSET_CAL_FSM_RSTN_RST    0x00000001
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_COMP_OFFSET_CAL_FSM_EN_RST    0x00000000
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_COMP_OFFSET_CAL_START_RST    0x00000000
#define RFIC_REGS_BT_ADC_FSM_BT_ADC_COMP_OFFSET_CAL_BYPASS_RST    0x00000000

static inline void rfic_regs_bt_adc_fsm_pack(struct cl_chip *chip, u8 bt_adc_q_inv_comp_clk, u8 bt_adc_q_inv_check_bit, u8 bt_adc_i_inv_comp_clk, u8 bt_adc_i_inv_check_bit, u8 bt_adc_q_comp_offset_sel, u8 bt_adc_i_comp_offset_sel, u8 bt_adc_q_comp_clk, u8 bt_adc_i_comp_clk, u8 bt_adc_q_comp_offset_cal_mode_en, u8 bt_adc_i_comp_offset_cal_mode_en, u8 bt_adc_comp_offset_cal_fsm_rstn, u8 bt_adc_comp_offset_cal_fsm_en, u8 bt_adc_comp_offset_cal_start, u8 bt_adc_comp_offset_cal_bypass)
{
	ASSERT_ERR_CHIP((((u32)bt_adc_q_inv_comp_clk << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_q_inv_check_bit << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_i_inv_comp_clk << 19) & ~((u32)0x00080000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_i_inv_check_bit << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_q_comp_offset_sel << 13) & ~((u32)0x0003E000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_i_comp_offset_sel << 8) & ~((u32)0x00001F00)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_q_comp_clk << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_i_comp_clk << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_q_comp_offset_cal_mode_en << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_i_comp_offset_cal_mode_en << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_comp_offset_cal_fsm_rstn << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_comp_offset_cal_fsm_en << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_comp_offset_cal_start << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_comp_offset_cal_bypass << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_FSM_ADDR, ((u32)bt_adc_q_inv_comp_clk << 21) | ((u32)bt_adc_q_inv_check_bit << 20) | ((u32)bt_adc_i_inv_comp_clk << 19) | ((u32)bt_adc_i_inv_check_bit << 18) | ((u32)bt_adc_q_comp_offset_sel << 13) | ((u32)bt_adc_i_comp_offset_sel << 8) | ((u32)bt_adc_q_comp_clk << 7) | ((u32)bt_adc_i_comp_clk << 6) | ((u32)bt_adc_q_comp_offset_cal_mode_en << 5) | ((u32)bt_adc_i_comp_offset_cal_mode_en << 4) | ((u32)bt_adc_comp_offset_cal_fsm_rstn << 3) | ((u32)bt_adc_comp_offset_cal_fsm_en << 2) | ((u32)bt_adc_comp_offset_cal_start << 1) | ((u32)bt_adc_comp_offset_cal_bypass << 0));
}

static inline void rfic_regs_bt_adc_fsm_unpack(struct cl_chip *chip, u8 *bt_adc_q_inv_comp_clk, u8 *bt_adc_q_inv_check_bit, u8 *bt_adc_i_inv_comp_clk, u8 *bt_adc_i_inv_check_bit, u8 *bt_adc_q_comp_offset_sel, u8 *bt_adc_i_comp_offset_sel, u8 *bt_adc_q_comp_clk, u8 *bt_adc_i_comp_clk, u8 *bt_adc_q_comp_offset_cal_mode_en, u8 *bt_adc_i_comp_offset_cal_mode_en, u8 *bt_adc_comp_offset_cal_fsm_rstn, u8 *bt_adc_comp_offset_cal_fsm_en, u8 *bt_adc_comp_offset_cal_start, u8 *bt_adc_comp_offset_cal_bypass)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR);

	*bt_adc_q_inv_comp_clk = (local_val & ((u32)0x00200000)) >> 21;
	*bt_adc_q_inv_check_bit = (local_val & ((u32)0x00100000)) >> 20;
	*bt_adc_i_inv_comp_clk = (local_val & ((u32)0x00080000)) >> 19;
	*bt_adc_i_inv_check_bit = (local_val & ((u32)0x00040000)) >> 18;
	*bt_adc_q_comp_offset_sel = (local_val & ((u32)0x0003E000)) >> 13;
	*bt_adc_i_comp_offset_sel = (local_val & ((u32)0x00001F00)) >> 8;
	*bt_adc_q_comp_clk = (local_val & ((u32)0x00000080)) >> 7;
	*bt_adc_i_comp_clk = (local_val & ((u32)0x00000040)) >> 6;
	*bt_adc_q_comp_offset_cal_mode_en = (local_val & ((u32)0x00000020)) >> 5;
	*bt_adc_i_comp_offset_cal_mode_en = (local_val & ((u32)0x00000010)) >> 4;
	*bt_adc_comp_offset_cal_fsm_rstn = (local_val & ((u32)0x00000008)) >> 3;
	*bt_adc_comp_offset_cal_fsm_en = (local_val & ((u32)0x00000004)) >> 2;
	*bt_adc_comp_offset_cal_start = (local_val & ((u32)0x00000002)) >> 1;
	*bt_adc_comp_offset_cal_bypass = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_bt_adc_fsm_bt_adc_q_inv_comp_clk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline void rfic_regs_bt_adc_fsm_bt_adc_q_inv_comp_clk_setf(struct cl_chip *chip, u8 btadcqinvcompclk)
{
	ASSERT_ERR_CHIP((((u32)btadcqinvcompclk << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_FSM_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR) & ~((u32)0x00200000)) | ((u32)btadcqinvcompclk << 21));
}

#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_INV_COMP_CLK .addr_index = 0x000001AB, .size_minus_1 = (1 - 1), .shift = 21

static inline u8 rfic_regs_bt_adc_fsm_bt_adc_q_inv_check_bit_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void rfic_regs_bt_adc_fsm_bt_adc_q_inv_check_bit_setf(struct cl_chip *chip, u8 btadcqinvcheckbit)
{
	ASSERT_ERR_CHIP((((u32)btadcqinvcheckbit << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_FSM_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR) & ~((u32)0x00100000)) | ((u32)btadcqinvcheckbit << 20));
}

#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_INV_CHECK_BIT .addr_index = 0x000001AB, .size_minus_1 = (1 - 1), .shift = 20

static inline u8 rfic_regs_bt_adc_fsm_bt_adc_i_inv_comp_clk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline void rfic_regs_bt_adc_fsm_bt_adc_i_inv_comp_clk_setf(struct cl_chip *chip, u8 btadciinvcompclk)
{
	ASSERT_ERR_CHIP((((u32)btadciinvcompclk << 19) & ~((u32)0x00080000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_FSM_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR) & ~((u32)0x00080000)) | ((u32)btadciinvcompclk << 19));
}

#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_INV_COMP_CLK .addr_index = 0x000001AB, .size_minus_1 = (1 - 1), .shift = 19

static inline u8 rfic_regs_bt_adc_fsm_bt_adc_i_inv_check_bit_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void rfic_regs_bt_adc_fsm_bt_adc_i_inv_check_bit_setf(struct cl_chip *chip, u8 btadciinvcheckbit)
{
	ASSERT_ERR_CHIP((((u32)btadciinvcheckbit << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_FSM_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR) & ~((u32)0x00040000)) | ((u32)btadciinvcheckbit << 18));
}

#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_INV_CHECK_BIT .addr_index = 0x000001AB, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_bt_adc_fsm_bt_adc_q_comp_offset_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR);

	return (u8)((local_val & ((u32)0x0003E000)) >> 13);
}

static inline void rfic_regs_bt_adc_fsm_bt_adc_q_comp_offset_sel_setf(struct cl_chip *chip, u8 btadcqcompoffsetsel)
{
	ASSERT_ERR_CHIP((((u32)btadcqcompoffsetsel << 13) & ~((u32)0x0003E000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_FSM_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR) & ~((u32)0x0003E000)) | ((u32)btadcqcompoffsetsel << 13));
}

#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_COMP_OFFSET_SEL .addr_index = 0x000001AB, .size_minus_1 = (5 - 1), .shift = 13

static inline u8 rfic_regs_bt_adc_fsm_bt_adc_i_comp_offset_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR);

	return (u8)((local_val & ((u32)0x00001F00)) >> 8);
}

static inline void rfic_regs_bt_adc_fsm_bt_adc_i_comp_offset_sel_setf(struct cl_chip *chip, u8 btadcicompoffsetsel)
{
	ASSERT_ERR_CHIP((((u32)btadcicompoffsetsel << 8) & ~((u32)0x00001F00)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_FSM_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR) & ~((u32)0x00001F00)) | ((u32)btadcicompoffsetsel << 8));
}

#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_COMP_OFFSET_SEL .addr_index = 0x000001AB, .size_minus_1 = (5 - 1), .shift = 8

static inline u8 rfic_regs_bt_adc_fsm_bt_adc_q_comp_clk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_bt_adc_fsm_bt_adc_q_comp_clk_setf(struct cl_chip *chip, u8 btadcqcompclk)
{
	ASSERT_ERR_CHIP((((u32)btadcqcompclk << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_FSM_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR) & ~((u32)0x00000080)) | ((u32)btadcqcompclk << 7));
}

#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_COMP_CLK .addr_index = 0x000001AB, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_bt_adc_fsm_bt_adc_i_comp_clk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void rfic_regs_bt_adc_fsm_bt_adc_i_comp_clk_setf(struct cl_chip *chip, u8 btadcicompclk)
{
	ASSERT_ERR_CHIP((((u32)btadcicompclk << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_FSM_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR) & ~((u32)0x00000040)) | ((u32)btadcicompclk << 6));
}

#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_COMP_CLK .addr_index = 0x000001AB, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_bt_adc_fsm_bt_adc_q_comp_offset_cal_mode_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void rfic_regs_bt_adc_fsm_bt_adc_q_comp_offset_cal_mode_en_setf(struct cl_chip *chip, u8 btadcqcompoffsetcalmodeen)
{
	ASSERT_ERR_CHIP((((u32)btadcqcompoffsetcalmodeen << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_FSM_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR) & ~((u32)0x00000020)) | ((u32)btadcqcompoffsetcalmodeen << 5));
}

#define RFIC_REGS_BT_ADC_FSM_BT_ADC_Q_COMP_OFFSET_CAL_MODE_EN .addr_index = 0x000001AB, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_bt_adc_fsm_bt_adc_i_comp_offset_cal_mode_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void rfic_regs_bt_adc_fsm_bt_adc_i_comp_offset_cal_mode_en_setf(struct cl_chip *chip, u8 btadcicompoffsetcalmodeen)
{
	ASSERT_ERR_CHIP((((u32)btadcicompoffsetcalmodeen << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_FSM_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR) & ~((u32)0x00000010)) | ((u32)btadcicompoffsetcalmodeen << 4));
}

#define RFIC_REGS_BT_ADC_FSM_BT_ADC_I_COMP_OFFSET_CAL_MODE_EN .addr_index = 0x000001AB, .size_minus_1 = (1 - 1), .shift = 4

static inline u8 rfic_regs_bt_adc_fsm_bt_adc_comp_offset_cal_fsm_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_bt_adc_fsm_bt_adc_comp_offset_cal_fsm_rstn_setf(struct cl_chip *chip, u8 btadccompoffsetcalfsmrstn)
{
	ASSERT_ERR_CHIP((((u32)btadccompoffsetcalfsmrstn << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_FSM_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR) & ~((u32)0x00000008)) | ((u32)btadccompoffsetcalfsmrstn << 3));
}

#define RFIC_REGS_BT_ADC_FSM_BT_ADC_COMP_OFFSET_CAL_FSM_RSTN .addr_index = 0x000001AB, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_bt_adc_fsm_bt_adc_comp_offset_cal_fsm_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_bt_adc_fsm_bt_adc_comp_offset_cal_fsm_en_setf(struct cl_chip *chip, u8 btadccompoffsetcalfsmen)
{
	ASSERT_ERR_CHIP((((u32)btadccompoffsetcalfsmen << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_FSM_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR) & ~((u32)0x00000004)) | ((u32)btadccompoffsetcalfsmen << 2));
}

#define RFIC_REGS_BT_ADC_FSM_BT_ADC_COMP_OFFSET_CAL_FSM_EN .addr_index = 0x000001AB, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_bt_adc_fsm_bt_adc_comp_offset_cal_start_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_bt_adc_fsm_bt_adc_comp_offset_cal_start_setf(struct cl_chip *chip, u8 btadccompoffsetcalstart)
{
	ASSERT_ERR_CHIP((((u32)btadccompoffsetcalstart << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_FSM_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR) & ~((u32)0x00000002)) | ((u32)btadccompoffsetcalstart << 1));
}

#define RFIC_REGS_BT_ADC_FSM_BT_ADC_COMP_OFFSET_CAL_START .addr_index = 0x000001AB, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_bt_adc_fsm_bt_adc_comp_offset_cal_bypass_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_bt_adc_fsm_bt_adc_comp_offset_cal_bypass_setf(struct cl_chip *chip, u8 btadccompoffsetcalbypass)
{
	ASSERT_ERR_CHIP((((u32)btadccompoffsetcalbypass << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_FSM_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_FSM_ADDR) & ~((u32)0x00000001)) | ((u32)btadccompoffsetcalbypass << 0));
}

#define RFIC_REGS_BT_ADC_FSM_BT_ADC_COMP_OFFSET_CAL_BYPASS .addr_index = 0x000001AB, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief BT_DAC_FSM_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:30 BT_dac_q_cur_mismatch_cal_res_sel 0x00000000
 *    29:28 BT_dac_i_cur_mismatch_cal_res_sel 0x00000000
 *    27    BT_dac_cur_mismatch_cal_fsm_rstn 00000001
 *    26    BT_dac_cur_mismatch_cal_fsm_en 00000000
 *    25    BT_dac_cur_mismatch_cal_start 00000000
 *    24    BT_dac_cur_mismatch_cal_bypass 00000000
 *    23:19 BT_dac_q_comp_offset_sel  0x00000010
 *    18:14 BT_dac_i_comp_offset_sel  0x00000010
 *    13    BT_dac_q_comp_clk         00000000
 *    12    BT_dac_i_comp_clk         00000000
 *    11    BT_dac_q_comp_offset_cal_mode_en 00000000
 *    10    BT_dac_i_comp_offset_cal_mode_en 00000000
 *    09:07 BT_dac_q_comp_offset_cal_vcm_sel 0x00000004
 *    06:04 BT_dac_i_comp_offset_cal_vcm_sel 0x00000004
 *    03    BT_dac_comp_offset_cal_fsm_rstn 00000001
 *    02    BT_dac_comp_offset_cal_fsm_en 00000000
 *    01    BT_dac_comp_offset_cal_start 00000000
 *    00    BT_dac_comp_offset_cal_bypass 00000000
 * </pre>
 */
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006B0)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_OFFSET      0x000006B0
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_INDEX       0x000001AC
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_RESET       0x08840248

static inline u32 rfic_regs_bt_dac_fsm_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, value);
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0 .addr_index = 0x000001AC, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_CUR_MISMATCH_CAL_RES_SEL_MASK    ((u32)0xC0000000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_CUR_MISMATCH_CAL_RES_SEL_LSB    30
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_CUR_MISMATCH_CAL_RES_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_CUR_MISMATCH_CAL_RES_SEL_MASK    ((u32)0x30000000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_CUR_MISMATCH_CAL_RES_SEL_LSB    28
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_CUR_MISMATCH_CAL_RES_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_CUR_MISMATCH_CAL_FSM_RSTN_BIT    ((u32)0x08000000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_CUR_MISMATCH_CAL_FSM_RSTN_POS    27
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_CUR_MISMATCH_CAL_FSM_EN_BIT    ((u32)0x04000000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_CUR_MISMATCH_CAL_FSM_EN_POS    26
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_CUR_MISMATCH_CAL_START_BIT    ((u32)0x02000000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_CUR_MISMATCH_CAL_START_POS    25
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_CUR_MISMATCH_CAL_BYPASS_BIT    ((u32)0x01000000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_CUR_MISMATCH_CAL_BYPASS_POS    24
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_OFFSET_SEL_MASK    ((u32)0x00F80000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_OFFSET_SEL_LSB    19
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_OFFSET_SEL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_OFFSET_SEL_MASK    ((u32)0x0007C000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_OFFSET_SEL_LSB    14
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_OFFSET_SEL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_CLK_BIT    ((u32)0x00002000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_CLK_POS    13
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_CLK_BIT    ((u32)0x00001000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_CLK_POS    12
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_OFFSET_CAL_MODE_EN_BIT    ((u32)0x00000800)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_OFFSET_CAL_MODE_EN_POS    11
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_OFFSET_CAL_MODE_EN_BIT    ((u32)0x00000400)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_OFFSET_CAL_MODE_EN_POS    10
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_OFFSET_CAL_VCM_SEL_MASK    ((u32)0x00000380)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_OFFSET_CAL_VCM_SEL_LSB    7
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_OFFSET_CAL_VCM_SEL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_OFFSET_CAL_VCM_SEL_MASK    ((u32)0x00000070)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_OFFSET_CAL_VCM_SEL_LSB    4
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_OFFSET_CAL_VCM_SEL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_COMP_OFFSET_CAL_FSM_RSTN_BIT    ((u32)0x00000008)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_COMP_OFFSET_CAL_FSM_RSTN_POS    3
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_COMP_OFFSET_CAL_FSM_EN_BIT    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_COMP_OFFSET_CAL_FSM_EN_POS    2
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_COMP_OFFSET_CAL_START_BIT    ((u32)0x00000002)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_COMP_OFFSET_CAL_START_POS    1
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_COMP_OFFSET_CAL_BYPASS_BIT    ((u32)0x00000001)
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_COMP_OFFSET_CAL_BYPASS_POS    0

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_CUR_MISMATCH_CAL_RES_SEL_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_CUR_MISMATCH_CAL_RES_SEL_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_CUR_MISMATCH_CAL_FSM_RSTN_RST    0x00000001
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_CUR_MISMATCH_CAL_FSM_EN_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_CUR_MISMATCH_CAL_START_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_CUR_MISMATCH_CAL_BYPASS_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_OFFSET_SEL_RST    0x00000010
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_OFFSET_SEL_RST    0x00000010
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_CLK_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_CLK_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_OFFSET_CAL_MODE_EN_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_OFFSET_CAL_MODE_EN_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_OFFSET_CAL_VCM_SEL_RST    0x00000004
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_OFFSET_CAL_VCM_SEL_RST    0x00000004
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_COMP_OFFSET_CAL_FSM_RSTN_RST    0x00000001
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_COMP_OFFSET_CAL_FSM_EN_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_COMP_OFFSET_CAL_START_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_COMP_OFFSET_CAL_BYPASS_RST    0x00000000

static inline void rfic_regs_bt_dac_fsm_ctrl_0_pack(struct cl_chip *chip, u8 bt_dac_q_cur_mismatch_cal_res_sel, u8 bt_dac_i_cur_mismatch_cal_res_sel, u8 bt_dac_cur_mismatch_cal_fsm_rstn, u8 bt_dac_cur_mismatch_cal_fsm_en, u8 bt_dac_cur_mismatch_cal_start, u8 bt_dac_cur_mismatch_cal_bypass, u8 bt_dac_q_comp_offset_sel, u8 bt_dac_i_comp_offset_sel, u8 bt_dac_q_comp_clk, u8 bt_dac_i_comp_clk, u8 bt_dac_q_comp_offset_cal_mode_en, u8 bt_dac_i_comp_offset_cal_mode_en, u8 bt_dac_q_comp_offset_cal_vcm_sel, u8 bt_dac_i_comp_offset_cal_vcm_sel, u8 bt_dac_comp_offset_cal_fsm_rstn, u8 bt_dac_comp_offset_cal_fsm_en, u8 bt_dac_comp_offset_cal_start, u8 bt_dac_comp_offset_cal_bypass)
{
	ASSERT_ERR_CHIP((((u32)bt_dac_q_cur_mismatch_cal_res_sel << 30) & ~((u32)0xC0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_i_cur_mismatch_cal_res_sel << 28) & ~((u32)0x30000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_cur_mismatch_cal_fsm_rstn << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_cur_mismatch_cal_fsm_en << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_cur_mismatch_cal_start << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_cur_mismatch_cal_bypass << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_q_comp_offset_sel << 19) & ~((u32)0x00F80000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_i_comp_offset_sel << 14) & ~((u32)0x0007C000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_q_comp_clk << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_i_comp_clk << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_q_comp_offset_cal_mode_en << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_i_comp_offset_cal_mode_en << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_q_comp_offset_cal_vcm_sel << 7) & ~((u32)0x00000380)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_i_comp_offset_cal_vcm_sel << 4) & ~((u32)0x00000070)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_comp_offset_cal_fsm_rstn << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_comp_offset_cal_fsm_en << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_comp_offset_cal_start << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_comp_offset_cal_bypass << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, ((u32)bt_dac_q_cur_mismatch_cal_res_sel << 30) | ((u32)bt_dac_i_cur_mismatch_cal_res_sel << 28) | ((u32)bt_dac_cur_mismatch_cal_fsm_rstn << 27) | ((u32)bt_dac_cur_mismatch_cal_fsm_en << 26) | ((u32)bt_dac_cur_mismatch_cal_start << 25) | ((u32)bt_dac_cur_mismatch_cal_bypass << 24) | ((u32)bt_dac_q_comp_offset_sel << 19) | ((u32)bt_dac_i_comp_offset_sel << 14) | ((u32)bt_dac_q_comp_clk << 13) | ((u32)bt_dac_i_comp_clk << 12) | ((u32)bt_dac_q_comp_offset_cal_mode_en << 11) | ((u32)bt_dac_i_comp_offset_cal_mode_en << 10) | ((u32)bt_dac_q_comp_offset_cal_vcm_sel << 7) | ((u32)bt_dac_i_comp_offset_cal_vcm_sel << 4) | ((u32)bt_dac_comp_offset_cal_fsm_rstn << 3) | ((u32)bt_dac_comp_offset_cal_fsm_en << 2) | ((u32)bt_dac_comp_offset_cal_start << 1) | ((u32)bt_dac_comp_offset_cal_bypass << 0));
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_unpack(struct cl_chip *chip, u8 *bt_dac_q_cur_mismatch_cal_res_sel, u8 *bt_dac_i_cur_mismatch_cal_res_sel, u8 *bt_dac_cur_mismatch_cal_fsm_rstn, u8 *bt_dac_cur_mismatch_cal_fsm_en, u8 *bt_dac_cur_mismatch_cal_start, u8 *bt_dac_cur_mismatch_cal_bypass, u8 *bt_dac_q_comp_offset_sel, u8 *bt_dac_i_comp_offset_sel, u8 *bt_dac_q_comp_clk, u8 *bt_dac_i_comp_clk, u8 *bt_dac_q_comp_offset_cal_mode_en, u8 *bt_dac_i_comp_offset_cal_mode_en, u8 *bt_dac_q_comp_offset_cal_vcm_sel, u8 *bt_dac_i_comp_offset_cal_vcm_sel, u8 *bt_dac_comp_offset_cal_fsm_rstn, u8 *bt_dac_comp_offset_cal_fsm_en, u8 *bt_dac_comp_offset_cal_start, u8 *bt_dac_comp_offset_cal_bypass)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	*bt_dac_q_cur_mismatch_cal_res_sel = (local_val & ((u32)0xC0000000)) >> 30;
	*bt_dac_i_cur_mismatch_cal_res_sel = (local_val & ((u32)0x30000000)) >> 28;
	*bt_dac_cur_mismatch_cal_fsm_rstn = (local_val & ((u32)0x08000000)) >> 27;
	*bt_dac_cur_mismatch_cal_fsm_en = (local_val & ((u32)0x04000000)) >> 26;
	*bt_dac_cur_mismatch_cal_start = (local_val & ((u32)0x02000000)) >> 25;
	*bt_dac_cur_mismatch_cal_bypass = (local_val & ((u32)0x01000000)) >> 24;
	*bt_dac_q_comp_offset_sel = (local_val & ((u32)0x00F80000)) >> 19;
	*bt_dac_i_comp_offset_sel = (local_val & ((u32)0x0007C000)) >> 14;
	*bt_dac_q_comp_clk = (local_val & ((u32)0x00002000)) >> 13;
	*bt_dac_i_comp_clk = (local_val & ((u32)0x00001000)) >> 12;
	*bt_dac_q_comp_offset_cal_mode_en = (local_val & ((u32)0x00000800)) >> 11;
	*bt_dac_i_comp_offset_cal_mode_en = (local_val & ((u32)0x00000400)) >> 10;
	*bt_dac_q_comp_offset_cal_vcm_sel = (local_val & ((u32)0x00000380)) >> 7;
	*bt_dac_i_comp_offset_cal_vcm_sel = (local_val & ((u32)0x00000070)) >> 4;
	*bt_dac_comp_offset_cal_fsm_rstn = (local_val & ((u32)0x00000008)) >> 3;
	*bt_dac_comp_offset_cal_fsm_en = (local_val & ((u32)0x00000004)) >> 2;
	*bt_dac_comp_offset_cal_start = (local_val & ((u32)0x00000002)) >> 1;
	*bt_dac_comp_offset_cal_bypass = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_q_cur_mismatch_cal_res_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0xC0000000)) >> 30);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_q_cur_mismatch_cal_res_sel_setf(struct cl_chip *chip, u8 btdacqcurmismatchcalressel)
{
	ASSERT_ERR_CHIP((((u32)btdacqcurmismatchcalressel << 30) & ~((u32)0xC0000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0xC0000000)) | ((u32)btdacqcurmismatchcalressel << 30));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_CUR_MISMATCH_CAL_RES_SEL .addr_index = 0x000001AC, .size_minus_1 = (2 - 1), .shift = 30

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_i_cur_mismatch_cal_res_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x30000000)) >> 28);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_i_cur_mismatch_cal_res_sel_setf(struct cl_chip *chip, u8 btdacicurmismatchcalressel)
{
	ASSERT_ERR_CHIP((((u32)btdacicurmismatchcalressel << 28) & ~((u32)0x30000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x30000000)) | ((u32)btdacicurmismatchcalressel << 28));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_CUR_MISMATCH_CAL_RES_SEL .addr_index = 0x000001AC, .size_minus_1 = (2 - 1), .shift = 28

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_cur_mismatch_cal_fsm_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_cur_mismatch_cal_fsm_rstn_setf(struct cl_chip *chip, u8 btdaccurmismatchcalfsmrstn)
{
	ASSERT_ERR_CHIP((((u32)btdaccurmismatchcalfsmrstn << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x08000000)) | ((u32)btdaccurmismatchcalfsmrstn << 27));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_CUR_MISMATCH_CAL_FSM_RSTN .addr_index = 0x000001AC, .size_minus_1 = (1 - 1), .shift = 27

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_cur_mismatch_cal_fsm_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_cur_mismatch_cal_fsm_en_setf(struct cl_chip *chip, u8 btdaccurmismatchcalfsmen)
{
	ASSERT_ERR_CHIP((((u32)btdaccurmismatchcalfsmen << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x04000000)) | ((u32)btdaccurmismatchcalfsmen << 26));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_CUR_MISMATCH_CAL_FSM_EN .addr_index = 0x000001AC, .size_minus_1 = (1 - 1), .shift = 26

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_cur_mismatch_cal_start_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_cur_mismatch_cal_start_setf(struct cl_chip *chip, u8 btdaccurmismatchcalstart)
{
	ASSERT_ERR_CHIP((((u32)btdaccurmismatchcalstart << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x02000000)) | ((u32)btdaccurmismatchcalstart << 25));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_CUR_MISMATCH_CAL_START .addr_index = 0x000001AC, .size_minus_1 = (1 - 1), .shift = 25

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_cur_mismatch_cal_bypass_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_cur_mismatch_cal_bypass_setf(struct cl_chip *chip, u8 btdaccurmismatchcalbypass)
{
	ASSERT_ERR_CHIP((((u32)btdaccurmismatchcalbypass << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x01000000)) | ((u32)btdaccurmismatchcalbypass << 24));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_CUR_MISMATCH_CAL_BYPASS .addr_index = 0x000001AC, .size_minus_1 = (1 - 1), .shift = 24

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_q_comp_offset_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00F80000)) >> 19);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_q_comp_offset_sel_setf(struct cl_chip *chip, u8 btdacqcompoffsetsel)
{
	ASSERT_ERR_CHIP((((u32)btdacqcompoffsetsel << 19) & ~((u32)0x00F80000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x00F80000)) | ((u32)btdacqcompoffsetsel << 19));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_OFFSET_SEL .addr_index = 0x000001AC, .size_minus_1 = (5 - 1), .shift = 19

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_i_comp_offset_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0007C000)) >> 14);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_i_comp_offset_sel_setf(struct cl_chip *chip, u8 btdacicompoffsetsel)
{
	ASSERT_ERR_CHIP((((u32)btdacicompoffsetsel << 14) & ~((u32)0x0007C000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x0007C000)) | ((u32)btdacicompoffsetsel << 14));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_OFFSET_SEL .addr_index = 0x000001AC, .size_minus_1 = (5 - 1), .shift = 14

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_q_comp_clk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_q_comp_clk_setf(struct cl_chip *chip, u8 btdacqcompclk)
{
	ASSERT_ERR_CHIP((((u32)btdacqcompclk << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x00002000)) | ((u32)btdacqcompclk << 13));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_CLK .addr_index = 0x000001AC, .size_minus_1 = (1 - 1), .shift = 13

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_i_comp_clk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_i_comp_clk_setf(struct cl_chip *chip, u8 btdacicompclk)
{
	ASSERT_ERR_CHIP((((u32)btdacicompclk << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x00001000)) | ((u32)btdacicompclk << 12));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_CLK .addr_index = 0x000001AC, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_q_comp_offset_cal_mode_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_q_comp_offset_cal_mode_en_setf(struct cl_chip *chip, u8 btdacqcompoffsetcalmodeen)
{
	ASSERT_ERR_CHIP((((u32)btdacqcompoffsetcalmodeen << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x00000800)) | ((u32)btdacqcompoffsetcalmodeen << 11));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_OFFSET_CAL_MODE_EN .addr_index = 0x000001AC, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_i_comp_offset_cal_mode_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_i_comp_offset_cal_mode_en_setf(struct cl_chip *chip, u8 btdacicompoffsetcalmodeen)
{
	ASSERT_ERR_CHIP((((u32)btdacicompoffsetcalmodeen << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x00000400)) | ((u32)btdacicompoffsetcalmodeen << 10));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_OFFSET_CAL_MODE_EN .addr_index = 0x000001AC, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_q_comp_offset_cal_vcm_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000380)) >> 7);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_q_comp_offset_cal_vcm_sel_setf(struct cl_chip *chip, u8 btdacqcompoffsetcalvcmsel)
{
	ASSERT_ERR_CHIP((((u32)btdacqcompoffsetcalvcmsel << 7) & ~((u32)0x00000380)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x00000380)) | ((u32)btdacqcompoffsetcalvcmsel << 7));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_Q_COMP_OFFSET_CAL_VCM_SEL .addr_index = 0x000001AC, .size_minus_1 = (3 - 1), .shift = 7

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_i_comp_offset_cal_vcm_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000070)) >> 4);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_i_comp_offset_cal_vcm_sel_setf(struct cl_chip *chip, u8 btdacicompoffsetcalvcmsel)
{
	ASSERT_ERR_CHIP((((u32)btdacicompoffsetcalvcmsel << 4) & ~((u32)0x00000070)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x00000070)) | ((u32)btdacicompoffsetcalvcmsel << 4));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_I_COMP_OFFSET_CAL_VCM_SEL .addr_index = 0x000001AC, .size_minus_1 = (3 - 1), .shift = 4

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_comp_offset_cal_fsm_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_comp_offset_cal_fsm_rstn_setf(struct cl_chip *chip, u8 btdaccompoffsetcalfsmrstn)
{
	ASSERT_ERR_CHIP((((u32)btdaccompoffsetcalfsmrstn << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x00000008)) | ((u32)btdaccompoffsetcalfsmrstn << 3));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_COMP_OFFSET_CAL_FSM_RSTN .addr_index = 0x000001AC, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_comp_offset_cal_fsm_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_comp_offset_cal_fsm_en_setf(struct cl_chip *chip, u8 btdaccompoffsetcalfsmen)
{
	ASSERT_ERR_CHIP((((u32)btdaccompoffsetcalfsmen << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x00000004)) | ((u32)btdaccompoffsetcalfsmen << 2));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_COMP_OFFSET_CAL_FSM_EN .addr_index = 0x000001AC, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_comp_offset_cal_start_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_comp_offset_cal_start_setf(struct cl_chip *chip, u8 btdaccompoffsetcalstart)
{
	ASSERT_ERR_CHIP((((u32)btdaccompoffsetcalstart << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x00000002)) | ((u32)btdaccompoffsetcalstart << 1));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_COMP_OFFSET_CAL_START .addr_index = 0x000001AC, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_comp_offset_cal_bypass_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_0_bt_dac_comp_offset_cal_bypass_setf(struct cl_chip *chip, u8 btdaccompoffsetcalbypass)
{
	ASSERT_ERR_CHIP((((u32)btdaccompoffsetcalbypass << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)btdaccompoffsetcalbypass << 0));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_0_BT_DAC_COMP_OFFSET_CAL_BYPASS .addr_index = 0x000001AC, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief BT_DAC_FSM_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:26 BT_dac_q_cur_mismatch_bin1_neg_cur_sel 0x00000003
 *    25:23 BT_dac_q_cur_mismatch_bin1_pos_cur_sel 0x00000001
 *    22:19 BT_dac_i_cur_mismatch_thermo_neg_cur_sel 0x00000003
 *    18:16 BT_dac_i_cur_mismatch_thermo_pos_cur_sel 0x00000001
 *    15:12 BT_dac_i_cur_mismatch_bin2_neg_cur_sel 0x00000003
 *    11:09 BT_dac_i_cur_mismatch_bin2_pos_cur_sel 0x00000001
 *    08:05 BT_dac_i_cur_mismatch_bin1_neg_cur_sel 0x00000003
 *    04:02 BT_dac_i_cur_mismatch_bin1_pos_cur_sel 0x00000001
 *    01    BT_dac_q_cur_mismatch_cal_mode_en 00000000
 *    00    BT_dac_i_cur_mismatch_cal_mode_en 00000000
 * </pre>
 */
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006B4)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_OFFSET      0x000006B4
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_INDEX       0x000001AD
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_RESET       0x0C993264

static inline u32 rfic_regs_bt_dac_fsm_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR, value);
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_1 .addr_index = 0x000001AD, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_Q_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_MASK    ((u32)0x3C000000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_Q_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_LSB    26
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_Q_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_Q_CUR_MISMATCH_BIN_1_POS_CUR_SEL_MASK    ((u32)0x03800000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_Q_CUR_MISMATCH_BIN_1_POS_CUR_SEL_LSB    23
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_Q_CUR_MISMATCH_BIN_1_POS_CUR_SEL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_THERMO_NEG_CUR_SEL_MASK    ((u32)0x00780000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_THERMO_NEG_CUR_SEL_LSB    19
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_THERMO_NEG_CUR_SEL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_THERMO_POS_CUR_SEL_MASK    ((u32)0x00070000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_THERMO_POS_CUR_SEL_LSB    16
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_THERMO_POS_CUR_SEL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_MASK    ((u32)0x0000F000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_LSB    12
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_POS_CUR_SEL_MASK    ((u32)0x00000E00)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_POS_CUR_SEL_LSB    9
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_POS_CUR_SEL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_MASK    ((u32)0x000001E0)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_LSB    5
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_POS_CUR_SEL_MASK    ((u32)0x0000001C)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_POS_CUR_SEL_LSB    2
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_POS_CUR_SEL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_Q_CUR_MISMATCH_CAL_MODE_EN_BIT    ((u32)0x00000002)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_Q_CUR_MISMATCH_CAL_MODE_EN_POS    1
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_CAL_MODE_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_CAL_MODE_EN_POS    0

#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_Q_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_RST    0x00000003
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_Q_CUR_MISMATCH_BIN_1_POS_CUR_SEL_RST    0x00000001
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_THERMO_NEG_CUR_SEL_RST    0x00000003
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_THERMO_POS_CUR_SEL_RST    0x00000001
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_RST    0x00000003
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_POS_CUR_SEL_RST    0x00000001
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_RST    0x00000003
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_POS_CUR_SEL_RST    0x00000001
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_Q_CUR_MISMATCH_CAL_MODE_EN_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_CAL_MODE_EN_RST    0x00000000

static inline void rfic_regs_bt_dac_fsm_ctrl_1_pack(struct cl_chip *chip, u8 bt_dac_q_cur_mismatch_bin1_neg_cur_sel, u8 bt_dac_q_cur_mismatch_bin1_pos_cur_sel, u8 bt_dac_i_cur_mismatch_thermo_neg_cur_sel, u8 bt_dac_i_cur_mismatch_thermo_pos_cur_sel, u8 bt_dac_i_cur_mismatch_bin2_neg_cur_sel, u8 bt_dac_i_cur_mismatch_bin2_pos_cur_sel, u8 bt_dac_i_cur_mismatch_bin1_neg_cur_sel, u8 bt_dac_i_cur_mismatch_bin1_pos_cur_sel, u8 bt_dac_q_cur_mismatch_cal_mode_en, u8 bt_dac_i_cur_mismatch_cal_mode_en)
{
	ASSERT_ERR_CHIP((((u32)bt_dac_q_cur_mismatch_bin1_neg_cur_sel << 26) & ~((u32)0x3C000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_q_cur_mismatch_bin1_pos_cur_sel << 23) & ~((u32)0x03800000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_i_cur_mismatch_thermo_neg_cur_sel << 19) & ~((u32)0x00780000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_i_cur_mismatch_thermo_pos_cur_sel << 16) & ~((u32)0x00070000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_i_cur_mismatch_bin2_neg_cur_sel << 12) & ~((u32)0x0000F000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_i_cur_mismatch_bin2_pos_cur_sel << 9) & ~((u32)0x00000E00)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_i_cur_mismatch_bin1_neg_cur_sel << 5) & ~((u32)0x000001E0)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_i_cur_mismatch_bin1_pos_cur_sel << 2) & ~((u32)0x0000001C)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_q_cur_mismatch_cal_mode_en << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_i_cur_mismatch_cal_mode_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR, ((u32)bt_dac_q_cur_mismatch_bin1_neg_cur_sel << 26) | ((u32)bt_dac_q_cur_mismatch_bin1_pos_cur_sel << 23) | ((u32)bt_dac_i_cur_mismatch_thermo_neg_cur_sel << 19) | ((u32)bt_dac_i_cur_mismatch_thermo_pos_cur_sel << 16) | ((u32)bt_dac_i_cur_mismatch_bin2_neg_cur_sel << 12) | ((u32)bt_dac_i_cur_mismatch_bin2_pos_cur_sel << 9) | ((u32)bt_dac_i_cur_mismatch_bin1_neg_cur_sel << 5) | ((u32)bt_dac_i_cur_mismatch_bin1_pos_cur_sel << 2) | ((u32)bt_dac_q_cur_mismatch_cal_mode_en << 1) | ((u32)bt_dac_i_cur_mismatch_cal_mode_en << 0));
}

static inline void rfic_regs_bt_dac_fsm_ctrl_1_unpack(struct cl_chip *chip, u8 *bt_dac_q_cur_mismatch_bin1_neg_cur_sel, u8 *bt_dac_q_cur_mismatch_bin1_pos_cur_sel, u8 *bt_dac_i_cur_mismatch_thermo_neg_cur_sel, u8 *bt_dac_i_cur_mismatch_thermo_pos_cur_sel, u8 *bt_dac_i_cur_mismatch_bin2_neg_cur_sel, u8 *bt_dac_i_cur_mismatch_bin2_pos_cur_sel, u8 *bt_dac_i_cur_mismatch_bin1_neg_cur_sel, u8 *bt_dac_i_cur_mismatch_bin1_pos_cur_sel, u8 *bt_dac_q_cur_mismatch_cal_mode_en, u8 *bt_dac_i_cur_mismatch_cal_mode_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR);

	*bt_dac_q_cur_mismatch_bin1_neg_cur_sel = (local_val & ((u32)0x3C000000)) >> 26;
	*bt_dac_q_cur_mismatch_bin1_pos_cur_sel = (local_val & ((u32)0x03800000)) >> 23;
	*bt_dac_i_cur_mismatch_thermo_neg_cur_sel = (local_val & ((u32)0x00780000)) >> 19;
	*bt_dac_i_cur_mismatch_thermo_pos_cur_sel = (local_val & ((u32)0x00070000)) >> 16;
	*bt_dac_i_cur_mismatch_bin2_neg_cur_sel = (local_val & ((u32)0x0000F000)) >> 12;
	*bt_dac_i_cur_mismatch_bin2_pos_cur_sel = (local_val & ((u32)0x00000E00)) >> 9;
	*bt_dac_i_cur_mismatch_bin1_neg_cur_sel = (local_val & ((u32)0x000001E0)) >> 5;
	*bt_dac_i_cur_mismatch_bin1_pos_cur_sel = (local_val & ((u32)0x0000001C)) >> 2;
	*bt_dac_q_cur_mismatch_cal_mode_en = (local_val & ((u32)0x00000002)) >> 1;
	*bt_dac_i_cur_mismatch_cal_mode_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_q_cur_mismatch_bin_1_neg_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x3C000000)) >> 26);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_q_cur_mismatch_bin_1_neg_cur_sel_setf(struct cl_chip *chip, u8 btdacqcurmismatchbin1negcursel)
{
	ASSERT_ERR_CHIP((((u32)btdacqcurmismatchbin1negcursel << 26) & ~((u32)0x3C000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR) & ~((u32)0x3C000000)) | ((u32)btdacqcurmismatchbin1negcursel << 26));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_Q_CUR_MISMATCH_BIN_1_NEG_CUR_SEL .addr_index = 0x000001AD, .size_minus_1 = (4 - 1), .shift = 26

static inline u8 rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_q_cur_mismatch_bin_1_pos_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x03800000)) >> 23);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_q_cur_mismatch_bin_1_pos_cur_sel_setf(struct cl_chip *chip, u8 btdacqcurmismatchbin1poscursel)
{
	ASSERT_ERR_CHIP((((u32)btdacqcurmismatchbin1poscursel << 23) & ~((u32)0x03800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR) & ~((u32)0x03800000)) | ((u32)btdacqcurmismatchbin1poscursel << 23));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_Q_CUR_MISMATCH_BIN_1_POS_CUR_SEL .addr_index = 0x000001AD, .size_minus_1 = (3 - 1), .shift = 23

static inline u8 rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_i_cur_mismatch_thermo_neg_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00780000)) >> 19);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_i_cur_mismatch_thermo_neg_cur_sel_setf(struct cl_chip *chip, u8 btdacicurmismatchthermonegcursel)
{
	ASSERT_ERR_CHIP((((u32)btdacicurmismatchthermonegcursel << 19) & ~((u32)0x00780000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR) & ~((u32)0x00780000)) | ((u32)btdacicurmismatchthermonegcursel << 19));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_THERMO_NEG_CUR_SEL .addr_index = 0x000001AD, .size_minus_1 = (4 - 1), .shift = 19

static inline u8 rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_i_cur_mismatch_thermo_pos_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00070000)) >> 16);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_i_cur_mismatch_thermo_pos_cur_sel_setf(struct cl_chip *chip, u8 btdacicurmismatchthermoposcursel)
{
	ASSERT_ERR_CHIP((((u32)btdacicurmismatchthermoposcursel << 16) & ~((u32)0x00070000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR) & ~((u32)0x00070000)) | ((u32)btdacicurmismatchthermoposcursel << 16));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_THERMO_POS_CUR_SEL .addr_index = 0x000001AD, .size_minus_1 = (3 - 1), .shift = 16

static inline u8 rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_i_cur_mismatch_bin_2_neg_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0000F000)) >> 12);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_i_cur_mismatch_bin_2_neg_cur_sel_setf(struct cl_chip *chip, u8 btdacicurmismatchbin2negcursel)
{
	ASSERT_ERR_CHIP((((u32)btdacicurmismatchbin2negcursel << 12) & ~((u32)0x0000F000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR) & ~((u32)0x0000F000)) | ((u32)btdacicurmismatchbin2negcursel << 12));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_NEG_CUR_SEL .addr_index = 0x000001AD, .size_minus_1 = (4 - 1), .shift = 12

static inline u8 rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_i_cur_mismatch_bin_2_pos_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000E00)) >> 9);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_i_cur_mismatch_bin_2_pos_cur_sel_setf(struct cl_chip *chip, u8 btdacicurmismatchbin2poscursel)
{
	ASSERT_ERR_CHIP((((u32)btdacicurmismatchbin2poscursel << 9) & ~((u32)0x00000E00)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR) & ~((u32)0x00000E00)) | ((u32)btdacicurmismatchbin2poscursel << 9));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_POS_CUR_SEL .addr_index = 0x000001AD, .size_minus_1 = (3 - 1), .shift = 9

static inline u8 rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_i_cur_mismatch_bin_1_neg_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x000001E0)) >> 5);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_i_cur_mismatch_bin_1_neg_cur_sel_setf(struct cl_chip *chip, u8 btdacicurmismatchbin1negcursel)
{
	ASSERT_ERR_CHIP((((u32)btdacicurmismatchbin1negcursel << 5) & ~((u32)0x000001E0)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR) & ~((u32)0x000001E0)) | ((u32)btdacicurmismatchbin1negcursel << 5));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_NEG_CUR_SEL .addr_index = 0x000001AD, .size_minus_1 = (4 - 1), .shift = 5

static inline u8 rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_i_cur_mismatch_bin_1_pos_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0000001C)) >> 2);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_i_cur_mismatch_bin_1_pos_cur_sel_setf(struct cl_chip *chip, u8 btdacicurmismatchbin1poscursel)
{
	ASSERT_ERR_CHIP((((u32)btdacicurmismatchbin1poscursel << 2) & ~((u32)0x0000001C)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR) & ~((u32)0x0000001C)) | ((u32)btdacicurmismatchbin1poscursel << 2));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_POS_CUR_SEL .addr_index = 0x000001AD, .size_minus_1 = (3 - 1), .shift = 2

static inline u8 rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_q_cur_mismatch_cal_mode_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_q_cur_mismatch_cal_mode_en_setf(struct cl_chip *chip, u8 btdacqcurmismatchcalmodeen)
{
	ASSERT_ERR_CHIP((((u32)btdacqcurmismatchcalmodeen << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR) & ~((u32)0x00000002)) | ((u32)btdacqcurmismatchcalmodeen << 1));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_Q_CUR_MISMATCH_CAL_MODE_EN .addr_index = 0x000001AD, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_i_cur_mismatch_cal_mode_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_1_bt_dac_i_cur_mismatch_cal_mode_en_setf(struct cl_chip *chip, u8 btdacicurmismatchcalmodeen)
{
	ASSERT_ERR_CHIP((((u32)btdacicurmismatchcalmodeen << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_1_ADDR) & ~((u32)0x00000001)) | ((u32)btdacicurmismatchcalmodeen << 0));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_1_BT_DAC_I_CUR_MISMATCH_CAL_MODE_EN .addr_index = 0x000001AD, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief BT_DAC_FSM_CTRL_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    17    BT_dac_q_inv_comp_clk     00000000
 *    16    BT_dac_q_inv_check_bit    00000000
 *    15    BT_dac_i_inv_comp_clk     00000000
 *    14    BT_dac_i_inv_check_bit    00000000
 *    13:10 BT_dac_q_cur_mismatch_thermo_neg_cur_sel 0x00000003
 *    09:07 BT_dac_q_cur_mismatch_thermo_pos_cur_sel 0x00000001
 *    06:03 BT_dac_q_cur_mismatch_bin2_neg_cur_sel 0x00000000
 *    02:00 BT_dac_q_cur_mismatch_bin2_pos_cur_sel 0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006B8)
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_OFFSET      0x000006B8
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_INDEX       0x000001AE
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_RESET       0x00000C80

static inline u32 rfic_regs_bt_dac_fsm_ctrl_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_2_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR, value);
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_2 .addr_index = 0x000001AE, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_INV_COMP_CLK_BIT    ((u32)0x00020000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_INV_COMP_CLK_POS    17
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_INV_CHECK_BIT_BIT    ((u32)0x00010000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_INV_CHECK_BIT_POS    16
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_I_INV_COMP_CLK_BIT    ((u32)0x00008000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_I_INV_COMP_CLK_POS    15
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_I_INV_CHECK_BIT_BIT    ((u32)0x00004000)
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_I_INV_CHECK_BIT_POS    14
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_NEG_CUR_SEL_MASK    ((u32)0x00003C00)
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_NEG_CUR_SEL_LSB    10
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_NEG_CUR_SEL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_POS_CUR_SEL_MASK    ((u32)0x00000380)
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_POS_CUR_SEL_LSB    7
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_POS_CUR_SEL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_MASK    ((u32)0x00000078)
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_LSB    3
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_POS_CUR_SEL_MASK    ((u32)0x00000007)
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_POS_CUR_SEL_LSB    0
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_POS_CUR_SEL_WIDTH    ((u32)0x00000003)

#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_INV_COMP_CLK_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_INV_CHECK_BIT_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_I_INV_COMP_CLK_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_I_INV_CHECK_BIT_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_NEG_CUR_SEL_RST    0x00000003
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_POS_CUR_SEL_RST    0x00000001
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_RST    0x00000000
#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_POS_CUR_SEL_RST    0x00000000

static inline void rfic_regs_bt_dac_fsm_ctrl_2_pack(struct cl_chip *chip, u8 bt_dac_q_inv_comp_clk, u8 bt_dac_q_inv_check_bit, u8 bt_dac_i_inv_comp_clk, u8 bt_dac_i_inv_check_bit, u8 bt_dac_q_cur_mismatch_thermo_neg_cur_sel, u8 bt_dac_q_cur_mismatch_thermo_pos_cur_sel, u8 bt_dac_q_cur_mismatch_bin2_neg_cur_sel, u8 bt_dac_q_cur_mismatch_bin2_pos_cur_sel)
{
	ASSERT_ERR_CHIP((((u32)bt_dac_q_inv_comp_clk << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_q_inv_check_bit << 16) & ~((u32)0x00010000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_i_inv_comp_clk << 15) & ~((u32)0x00008000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_i_inv_check_bit << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_q_cur_mismatch_thermo_neg_cur_sel << 10) & ~((u32)0x00003C00)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_q_cur_mismatch_thermo_pos_cur_sel << 7) & ~((u32)0x00000380)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_q_cur_mismatch_bin2_neg_cur_sel << 3) & ~((u32)0x00000078)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_q_cur_mismatch_bin2_pos_cur_sel << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR, ((u32)bt_dac_q_inv_comp_clk << 17) | ((u32)bt_dac_q_inv_check_bit << 16) | ((u32)bt_dac_i_inv_comp_clk << 15) | ((u32)bt_dac_i_inv_check_bit << 14) | ((u32)bt_dac_q_cur_mismatch_thermo_neg_cur_sel << 10) | ((u32)bt_dac_q_cur_mismatch_thermo_pos_cur_sel << 7) | ((u32)bt_dac_q_cur_mismatch_bin2_neg_cur_sel << 3) | ((u32)bt_dac_q_cur_mismatch_bin2_pos_cur_sel << 0));
}

static inline void rfic_regs_bt_dac_fsm_ctrl_2_unpack(struct cl_chip *chip, u8 *bt_dac_q_inv_comp_clk, u8 *bt_dac_q_inv_check_bit, u8 *bt_dac_i_inv_comp_clk, u8 *bt_dac_i_inv_check_bit, u8 *bt_dac_q_cur_mismatch_thermo_neg_cur_sel, u8 *bt_dac_q_cur_mismatch_thermo_pos_cur_sel, u8 *bt_dac_q_cur_mismatch_bin2_neg_cur_sel, u8 *bt_dac_q_cur_mismatch_bin2_pos_cur_sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR);

	*bt_dac_q_inv_comp_clk = (local_val & ((u32)0x00020000)) >> 17;
	*bt_dac_q_inv_check_bit = (local_val & ((u32)0x00010000)) >> 16;
	*bt_dac_i_inv_comp_clk = (local_val & ((u32)0x00008000)) >> 15;
	*bt_dac_i_inv_check_bit = (local_val & ((u32)0x00004000)) >> 14;
	*bt_dac_q_cur_mismatch_thermo_neg_cur_sel = (local_val & ((u32)0x00003C00)) >> 10;
	*bt_dac_q_cur_mismatch_thermo_pos_cur_sel = (local_val & ((u32)0x00000380)) >> 7;
	*bt_dac_q_cur_mismatch_bin2_neg_cur_sel = (local_val & ((u32)0x00000078)) >> 3;
	*bt_dac_q_cur_mismatch_bin2_pos_cur_sel = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 rfic_regs_bt_dac_fsm_ctrl_2_bt_dac_q_inv_comp_clk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_2_bt_dac_q_inv_comp_clk_setf(struct cl_chip *chip, u8 btdacqinvcompclk)
{
	ASSERT_ERR_CHIP((((u32)btdacqinvcompclk << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR) & ~((u32)0x00020000)) | ((u32)btdacqinvcompclk << 17));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_INV_COMP_CLK .addr_index = 0x000001AE, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_bt_dac_fsm_ctrl_2_bt_dac_q_inv_check_bit_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00010000)) >> 16);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_2_bt_dac_q_inv_check_bit_setf(struct cl_chip *chip, u8 btdacqinvcheckbit)
{
	ASSERT_ERR_CHIP((((u32)btdacqinvcheckbit << 16) & ~((u32)0x00010000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR) & ~((u32)0x00010000)) | ((u32)btdacqinvcheckbit << 16));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_INV_CHECK_BIT .addr_index = 0x000001AE, .size_minus_1 = (1 - 1), .shift = 16

static inline u8 rfic_regs_bt_dac_fsm_ctrl_2_bt_dac_i_inv_comp_clk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_2_bt_dac_i_inv_comp_clk_setf(struct cl_chip *chip, u8 btdaciinvcompclk)
{
	ASSERT_ERR_CHIP((((u32)btdaciinvcompclk << 15) & ~((u32)0x00008000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR) & ~((u32)0x00008000)) | ((u32)btdaciinvcompclk << 15));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_I_INV_COMP_CLK .addr_index = 0x000001AE, .size_minus_1 = (1 - 1), .shift = 15

static inline u8 rfic_regs_bt_dac_fsm_ctrl_2_bt_dac_i_inv_check_bit_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_2_bt_dac_i_inv_check_bit_setf(struct cl_chip *chip, u8 btdaciinvcheckbit)
{
	ASSERT_ERR_CHIP((((u32)btdaciinvcheckbit << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR) & ~((u32)0x00004000)) | ((u32)btdaciinvcheckbit << 14));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_I_INV_CHECK_BIT .addr_index = 0x000001AE, .size_minus_1 = (1 - 1), .shift = 14

static inline u8 rfic_regs_bt_dac_fsm_ctrl_2_bt_dac_q_cur_mismatch_thermo_neg_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00003C00)) >> 10);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_2_bt_dac_q_cur_mismatch_thermo_neg_cur_sel_setf(struct cl_chip *chip, u8 btdacqcurmismatchthermonegcursel)
{
	ASSERT_ERR_CHIP((((u32)btdacqcurmismatchthermonegcursel << 10) & ~((u32)0x00003C00)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR) & ~((u32)0x00003C00)) | ((u32)btdacqcurmismatchthermonegcursel << 10));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_NEG_CUR_SEL .addr_index = 0x000001AE, .size_minus_1 = (4 - 1), .shift = 10

static inline u8 rfic_regs_bt_dac_fsm_ctrl_2_bt_dac_q_cur_mismatch_thermo_pos_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000380)) >> 7);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_2_bt_dac_q_cur_mismatch_thermo_pos_cur_sel_setf(struct cl_chip *chip, u8 btdacqcurmismatchthermoposcursel)
{
	ASSERT_ERR_CHIP((((u32)btdacqcurmismatchthermoposcursel << 7) & ~((u32)0x00000380)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR) & ~((u32)0x00000380)) | ((u32)btdacqcurmismatchthermoposcursel << 7));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_POS_CUR_SEL .addr_index = 0x000001AE, .size_minus_1 = (3 - 1), .shift = 7

static inline u8 rfic_regs_bt_dac_fsm_ctrl_2_bt_dac_q_cur_mismatch_bin_2_neg_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000078)) >> 3);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_2_bt_dac_q_cur_mismatch_bin_2_neg_cur_sel_setf(struct cl_chip *chip, u8 btdacqcurmismatchbin2negcursel)
{
	ASSERT_ERR_CHIP((((u32)btdacqcurmismatchbin2negcursel << 3) & ~((u32)0x00000078)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR) & ~((u32)0x00000078)) | ((u32)btdacqcurmismatchbin2negcursel << 3));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_NEG_CUR_SEL .addr_index = 0x000001AE, .size_minus_1 = (4 - 1), .shift = 3

static inline u8 rfic_regs_bt_dac_fsm_ctrl_2_bt_dac_q_cur_mismatch_bin_2_pos_cur_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void rfic_regs_bt_dac_fsm_ctrl_2_bt_dac_q_cur_mismatch_bin_2_pos_cur_sel_setf(struct cl_chip *chip, u8 btdacqcurmismatchbin2poscursel)
{
	ASSERT_ERR_CHIP((((u32)btdacqcurmismatchbin2poscursel << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_FSM_CTRL_2_ADDR) & ~((u32)0x00000007)) | ((u32)btdacqcurmismatchbin2poscursel << 0));
}

#define RFIC_REGS_BT_DAC_FSM_CTRL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_POS_CUR_SEL .addr_index = 0x000001AE, .size_minus_1 = (3 - 1), .shift = 0

/**
 * @brief BT_FSM_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    07    BT_dac_cur_mismatch_cal_done 00000000
 *    06    BT_dac_cur_mismatch_cal_error 00000000
 *    05    BT_dac_comp_offset_cal_done 00000000
 *    04    BT_dac_comp_offset_cal_error 00000000
 *    03    BT_tx_gain_lut_write_ack  00000000
 *    02    BT_rx_gain_lut_write_ack  00000000
 *    01    BT_adc_comp_offset_cal_done 00000000
 *    00    BT_adc_comp_offset_cal_error 00000000
 * </pre>
 */
#define RFIC_REGS_BT_FSM_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006BC)
#define RFIC_REGS_BT_FSM_OUT_OFFSET      0x000006BC
#define RFIC_REGS_BT_FSM_OUT_INDEX       0x000001AF
#define RFIC_REGS_BT_FSM_OUT_RESET       0x00000000

static inline u32 rfic_regs_bt_fsm_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_FSM_OUT_ADDR);
}

#define RFIC_REGS_BT_FSM_OUT .addr_index = 0x000001AF, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_FSM_OUT_BT_DAC_CUR_MISMATCH_CAL_DONE_BIT    ((u32)0x00000080)
#define RFIC_REGS_BT_FSM_OUT_BT_DAC_CUR_MISMATCH_CAL_DONE_POS    7
#define RFIC_REGS_BT_FSM_OUT_BT_DAC_CUR_MISMATCH_CAL_ERROR_BIT    ((u32)0x00000040)
#define RFIC_REGS_BT_FSM_OUT_BT_DAC_CUR_MISMATCH_CAL_ERROR_POS    6
#define RFIC_REGS_BT_FSM_OUT_BT_DAC_COMP_OFFSET_CAL_DONE_BIT    ((u32)0x00000020)
#define RFIC_REGS_BT_FSM_OUT_BT_DAC_COMP_OFFSET_CAL_DONE_POS    5
#define RFIC_REGS_BT_FSM_OUT_BT_DAC_COMP_OFFSET_CAL_ERROR_BIT    ((u32)0x00000010)
#define RFIC_REGS_BT_FSM_OUT_BT_DAC_COMP_OFFSET_CAL_ERROR_POS    4
#define RFIC_REGS_BT_FSM_OUT_BT_TX_GAIN_LUT_WRITE_ACK_BIT    ((u32)0x00000008)
#define RFIC_REGS_BT_FSM_OUT_BT_TX_GAIN_LUT_WRITE_ACK_POS    3
#define RFIC_REGS_BT_FSM_OUT_BT_RX_GAIN_LUT_WRITE_ACK_BIT    ((u32)0x00000004)
#define RFIC_REGS_BT_FSM_OUT_BT_RX_GAIN_LUT_WRITE_ACK_POS    2
#define RFIC_REGS_BT_FSM_OUT_BT_ADC_COMP_OFFSET_CAL_DONE_BIT    ((u32)0x00000002)
#define RFIC_REGS_BT_FSM_OUT_BT_ADC_COMP_OFFSET_CAL_DONE_POS    1
#define RFIC_REGS_BT_FSM_OUT_BT_ADC_COMP_OFFSET_CAL_ERROR_BIT    ((u32)0x00000001)
#define RFIC_REGS_BT_FSM_OUT_BT_ADC_COMP_OFFSET_CAL_ERROR_POS    0

#define RFIC_REGS_BT_FSM_OUT_BT_DAC_CUR_MISMATCH_CAL_DONE_RST    0x00000000
#define RFIC_REGS_BT_FSM_OUT_BT_DAC_CUR_MISMATCH_CAL_ERROR_RST    0x00000000
#define RFIC_REGS_BT_FSM_OUT_BT_DAC_COMP_OFFSET_CAL_DONE_RST    0x00000000
#define RFIC_REGS_BT_FSM_OUT_BT_DAC_COMP_OFFSET_CAL_ERROR_RST    0x00000000
#define RFIC_REGS_BT_FSM_OUT_BT_TX_GAIN_LUT_WRITE_ACK_RST    0x00000000
#define RFIC_REGS_BT_FSM_OUT_BT_RX_GAIN_LUT_WRITE_ACK_RST    0x00000000
#define RFIC_REGS_BT_FSM_OUT_BT_ADC_COMP_OFFSET_CAL_DONE_RST    0x00000000
#define RFIC_REGS_BT_FSM_OUT_BT_ADC_COMP_OFFSET_CAL_ERROR_RST    0x00000000

static inline void rfic_regs_bt_fsm_out_unpack(struct cl_chip *chip, u8 *bt_dac_cur_mismatch_cal_done, u8 *bt_dac_cur_mismatch_cal_error, u8 *bt_dac_comp_offset_cal_done, u8 *bt_dac_comp_offset_cal_error, u8 *bt_tx_gain_lut_write_ack, u8 *bt_rx_gain_lut_write_ack, u8 *bt_adc_comp_offset_cal_done, u8 *bt_adc_comp_offset_cal_error)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_FSM_OUT_ADDR);

	*bt_dac_cur_mismatch_cal_done = (local_val & ((u32)0x00000080)) >> 7;
	*bt_dac_cur_mismatch_cal_error = (local_val & ((u32)0x00000040)) >> 6;
	*bt_dac_comp_offset_cal_done = (local_val & ((u32)0x00000020)) >> 5;
	*bt_dac_comp_offset_cal_error = (local_val & ((u32)0x00000010)) >> 4;
	*bt_tx_gain_lut_write_ack = (local_val & ((u32)0x00000008)) >> 3;
	*bt_rx_gain_lut_write_ack = (local_val & ((u32)0x00000004)) >> 2;
	*bt_adc_comp_offset_cal_done = (local_val & ((u32)0x00000002)) >> 1;
	*bt_adc_comp_offset_cal_error = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_bt_fsm_out_bt_dac_cur_mismatch_cal_done_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_FSM_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

#define RFIC_REGS_BT_FSM_OUT_BT_DAC_CUR_MISMATCH_CAL_DONE .addr_index = 0x000001AF, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_bt_fsm_out_bt_dac_cur_mismatch_cal_error_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_FSM_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

#define RFIC_REGS_BT_FSM_OUT_BT_DAC_CUR_MISMATCH_CAL_ERROR .addr_index = 0x000001AF, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_bt_fsm_out_bt_dac_comp_offset_cal_done_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_FSM_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

#define RFIC_REGS_BT_FSM_OUT_BT_DAC_COMP_OFFSET_CAL_DONE .addr_index = 0x000001AF, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_bt_fsm_out_bt_dac_comp_offset_cal_error_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_FSM_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

#define RFIC_REGS_BT_FSM_OUT_BT_DAC_COMP_OFFSET_CAL_ERROR .addr_index = 0x000001AF, .size_minus_1 = (1 - 1), .shift = 4

static inline u8 rfic_regs_bt_fsm_out_bt_tx_gain_lut_write_ack_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_FSM_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

#define RFIC_REGS_BT_FSM_OUT_BT_TX_GAIN_LUT_WRITE_ACK .addr_index = 0x000001AF, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_bt_fsm_out_bt_rx_gain_lut_write_ack_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_FSM_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

#define RFIC_REGS_BT_FSM_OUT_BT_RX_GAIN_LUT_WRITE_ACK .addr_index = 0x000001AF, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_bt_fsm_out_bt_adc_comp_offset_cal_done_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_FSM_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

#define RFIC_REGS_BT_FSM_OUT_BT_ADC_COMP_OFFSET_CAL_DONE .addr_index = 0x000001AF, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_bt_fsm_out_bt_adc_comp_offset_cal_error_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_FSM_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

#define RFIC_REGS_BT_FSM_OUT_BT_ADC_COMP_OFFSET_CAL_ERROR .addr_index = 0x000001AF, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief BT_ADC_COMPOFF_VAL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    19:15 BT_adc_q_comp_offset_sel_cal_value 0x00000000
 *    14:10 BT_adc_q_comp_offset_sel_out 0x00000000
 *    09:05 BT_adc_i_comp_offset_sel_cal_value 0x00000000
 *    04:00 BT_adc_i_comp_offset_sel_out 0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006C0)
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_OFFSET      0x000006C0
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_INDEX       0x000001B0
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_RESET       0x00000000

static inline u32 rfic_regs_bt_adc_compoff_val_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_ADC_COMPOFF_VAL_ADDR);
}

#define RFIC_REGS_BT_ADC_COMPOFF_VAL .addr_index = 0x000001B0, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_Q_COMP_OFFSET_SEL_CAL_VALUE_MASK    ((u32)0x000F8000)
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_Q_COMP_OFFSET_SEL_CAL_VALUE_LSB    15
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_Q_COMP_OFFSET_SEL_CAL_VALUE_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_Q_COMP_OFFSET_SEL_OUT_MASK    ((u32)0x00007C00)
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_Q_COMP_OFFSET_SEL_OUT_LSB    10
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_Q_COMP_OFFSET_SEL_OUT_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_I_COMP_OFFSET_SEL_CAL_VALUE_MASK    ((u32)0x000003E0)
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_I_COMP_OFFSET_SEL_CAL_VALUE_LSB    5
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_I_COMP_OFFSET_SEL_CAL_VALUE_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_I_COMP_OFFSET_SEL_OUT_MASK    ((u32)0x0000001F)
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_I_COMP_OFFSET_SEL_OUT_LSB    0
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_I_COMP_OFFSET_SEL_OUT_WIDTH    ((u32)0x00000005)

#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_Q_COMP_OFFSET_SEL_CAL_VALUE_RST    0x00000000
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_Q_COMP_OFFSET_SEL_OUT_RST    0x00000000
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_I_COMP_OFFSET_SEL_CAL_VALUE_RST    0x00000000
#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_I_COMP_OFFSET_SEL_OUT_RST    0x00000000

static inline void rfic_regs_bt_adc_compoff_val_unpack(struct cl_chip *chip, u8 *bt_adc_q_comp_offset_sel_cal_value, u8 *bt_adc_q_comp_offset_sel_out, u8 *bt_adc_i_comp_offset_sel_cal_value, u8 *bt_adc_i_comp_offset_sel_out)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_COMPOFF_VAL_ADDR);

	*bt_adc_q_comp_offset_sel_cal_value = (local_val & ((u32)0x000F8000)) >> 15;
	*bt_adc_q_comp_offset_sel_out = (local_val & ((u32)0x00007C00)) >> 10;
	*bt_adc_i_comp_offset_sel_cal_value = (local_val & ((u32)0x000003E0)) >> 5;
	*bt_adc_i_comp_offset_sel_out = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u8 rfic_regs_bt_adc_compoff_val_bt_adc_q_comp_offset_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_COMPOFF_VAL_ADDR);

	return (u8)((local_val & ((u32)0x000F8000)) >> 15);
}

#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_Q_COMP_OFFSET_SEL_CAL_VALUE .addr_index = 0x000001B0, .size_minus_1 = (5 - 1), .shift = 15

static inline u8 rfic_regs_bt_adc_compoff_val_bt_adc_q_comp_offset_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_COMPOFF_VAL_ADDR);

	return (u8)((local_val & ((u32)0x00007C00)) >> 10);
}

#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_Q_COMP_OFFSET_SEL_OUT .addr_index = 0x000001B0, .size_minus_1 = (5 - 1), .shift = 10

static inline u8 rfic_regs_bt_adc_compoff_val_bt_adc_i_comp_offset_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_COMPOFF_VAL_ADDR);

	return (u8)((local_val & ((u32)0x000003E0)) >> 5);
}

#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_I_COMP_OFFSET_SEL_CAL_VALUE .addr_index = 0x000001B0, .size_minus_1 = (5 - 1), .shift = 5

static inline u8 rfic_regs_bt_adc_compoff_val_bt_adc_i_comp_offset_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_COMPOFF_VAL_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

#define RFIC_REGS_BT_ADC_COMPOFF_VAL_BT_ADC_I_COMP_OFFSET_SEL_OUT .addr_index = 0x000001B0, .size_minus_1 = (5 - 1), .shift = 0

/**
 * @brief BT_DAC_CAL_VAL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:27 BT_dac_i_cur_mismatch_bin2_pos_cur_sel_cal_value 0x00000000
 *    26:23 BT_dac_i_cur_mismatch_bin1_neg_cur_sel_cal_value 0x00000000
 *    22:20 BT_dac_i_cur_mismatch_bin1_pos_cur_sel_cal_value 0x00000000
 *    19:15 BT_dac_q_comp_offset_sel_out 0x00000000
 *    14:10 BT_dac_q_comp_offset_sel_cal_value 0x00000000
 *    09:05 BT_dac_i_comp_offset_sel_out 0x00000000
 *    04:00 BT_dac_i_comp_offset_sel_cal_value 0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_DAC_CAL_VAL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006C4)
#define RFIC_REGS_BT_DAC_CAL_VAL_0_OFFSET      0x000006C4
#define RFIC_REGS_BT_DAC_CAL_VAL_0_INDEX       0x000001B1
#define RFIC_REGS_BT_DAC_CAL_VAL_0_RESET       0x00000000

static inline u32 rfic_regs_bt_dac_cal_val_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_0_ADDR);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_0 .addr_index = 0x000001B1, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_CUR_MISMATCH_BIN_2_POS_CUR_SEL_CAL_VALUE_MASK    ((u32)0x38000000)
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_CUR_MISMATCH_BIN_2_POS_CUR_SEL_CAL_VALUE_LSB    27
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_CUR_MISMATCH_BIN_2_POS_CUR_SEL_CAL_VALUE_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_CAL_VALUE_MASK    ((u32)0x07800000)
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_CAL_VALUE_LSB    23
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_CAL_VALUE_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_CUR_MISMATCH_BIN_1_POS_CUR_SEL_CAL_VALUE_MASK    ((u32)0x00700000)
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_CUR_MISMATCH_BIN_1_POS_CUR_SEL_CAL_VALUE_LSB    20
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_CUR_MISMATCH_BIN_1_POS_CUR_SEL_CAL_VALUE_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_Q_COMP_OFFSET_SEL_OUT_MASK    ((u32)0x000F8000)
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_Q_COMP_OFFSET_SEL_OUT_LSB    15
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_Q_COMP_OFFSET_SEL_OUT_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_Q_COMP_OFFSET_SEL_CAL_VALUE_MASK    ((u32)0x00007C00)
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_Q_COMP_OFFSET_SEL_CAL_VALUE_LSB    10
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_Q_COMP_OFFSET_SEL_CAL_VALUE_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_COMP_OFFSET_SEL_OUT_MASK    ((u32)0x000003E0)
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_COMP_OFFSET_SEL_OUT_LSB    5
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_COMP_OFFSET_SEL_OUT_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_COMP_OFFSET_SEL_CAL_VALUE_MASK    ((u32)0x0000001F)
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_COMP_OFFSET_SEL_CAL_VALUE_LSB    0
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_COMP_OFFSET_SEL_CAL_VALUE_WIDTH    ((u32)0x00000005)

#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_CUR_MISMATCH_BIN_2_POS_CUR_SEL_CAL_VALUE_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_CAL_VALUE_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_CUR_MISMATCH_BIN_1_POS_CUR_SEL_CAL_VALUE_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_Q_COMP_OFFSET_SEL_OUT_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_Q_COMP_OFFSET_SEL_CAL_VALUE_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_COMP_OFFSET_SEL_OUT_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_COMP_OFFSET_SEL_CAL_VALUE_RST    0x00000000

static inline void rfic_regs_bt_dac_cal_val_0_unpack(struct cl_chip *chip, u8 *bt_dac_i_cur_mismatch_bin2_pos_cur_sel_cal_value, u8 *bt_dac_i_cur_mismatch_bin1_neg_cur_sel_cal_value, u8 *bt_dac_i_cur_mismatch_bin1_pos_cur_sel_cal_value, u8 *bt_dac_q_comp_offset_sel_out, u8 *bt_dac_q_comp_offset_sel_cal_value, u8 *bt_dac_i_comp_offset_sel_out, u8 *bt_dac_i_comp_offset_sel_cal_value)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_0_ADDR);

	*bt_dac_i_cur_mismatch_bin2_pos_cur_sel_cal_value = (local_val & ((u32)0x38000000)) >> 27;
	*bt_dac_i_cur_mismatch_bin1_neg_cur_sel_cal_value = (local_val & ((u32)0x07800000)) >> 23;
	*bt_dac_i_cur_mismatch_bin1_pos_cur_sel_cal_value = (local_val & ((u32)0x00700000)) >> 20;
	*bt_dac_q_comp_offset_sel_out = (local_val & ((u32)0x000F8000)) >> 15;
	*bt_dac_q_comp_offset_sel_cal_value = (local_val & ((u32)0x00007C00)) >> 10;
	*bt_dac_i_comp_offset_sel_out = (local_val & ((u32)0x000003E0)) >> 5;
	*bt_dac_i_comp_offset_sel_cal_value = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u8 rfic_regs_bt_dac_cal_val_0_bt_dac_i_cur_mismatch_bin_2_pos_cur_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_0_ADDR);

	return (u8)((local_val & ((u32)0x38000000)) >> 27);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_CUR_MISMATCH_BIN_2_POS_CUR_SEL_CAL_VALUE .addr_index = 0x000001B1, .size_minus_1 = (3 - 1), .shift = 27

static inline u8 rfic_regs_bt_dac_cal_val_0_bt_dac_i_cur_mismatch_bin_1_neg_cur_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_0_ADDR);

	return (u8)((local_val & ((u32)0x07800000)) >> 23);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_CAL_VALUE .addr_index = 0x000001B1, .size_minus_1 = (4 - 1), .shift = 23

static inline u8 rfic_regs_bt_dac_cal_val_0_bt_dac_i_cur_mismatch_bin_1_pos_cur_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_0_ADDR);

	return (u8)((local_val & ((u32)0x00700000)) >> 20);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_CUR_MISMATCH_BIN_1_POS_CUR_SEL_CAL_VALUE .addr_index = 0x000001B1, .size_minus_1 = (3 - 1), .shift = 20

static inline u8 rfic_regs_bt_dac_cal_val_0_bt_dac_q_comp_offset_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_0_ADDR);

	return (u8)((local_val & ((u32)0x000F8000)) >> 15);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_Q_COMP_OFFSET_SEL_OUT .addr_index = 0x000001B1, .size_minus_1 = (5 - 1), .shift = 15

static inline u8 rfic_regs_bt_dac_cal_val_0_bt_dac_q_comp_offset_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_0_ADDR);

	return (u8)((local_val & ((u32)0x00007C00)) >> 10);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_Q_COMP_OFFSET_SEL_CAL_VALUE .addr_index = 0x000001B1, .size_minus_1 = (5 - 1), .shift = 10

static inline u8 rfic_regs_bt_dac_cal_val_0_bt_dac_i_comp_offset_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_0_ADDR);

	return (u8)((local_val & ((u32)0x000003E0)) >> 5);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_COMP_OFFSET_SEL_OUT .addr_index = 0x000001B1, .size_minus_1 = (5 - 1), .shift = 5

static inline u8 rfic_regs_bt_dac_cal_val_0_bt_dac_i_comp_offset_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_0_BT_DAC_I_COMP_OFFSET_SEL_CAL_VALUE .addr_index = 0x000001B1, .size_minus_1 = (5 - 1), .shift = 0

/**
 * @brief BT_DAC_CAL_VAL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 BT_dac_i_cur_mismatch_thermo_neg_cur_sel_out 0x00000000
 *    27:25 BT_dac_i_cur_mismatch_thermo_pos_cur_sel_out 0x00000000
 *    24:21 BT_dac_i_cur_mismatch_bin2_neg_cur_sel_out 0x00000000
 *    20:18 BT_dac_i_cur_mismatch_bin2_pos_cur_sel_out 0x00000000
 *    17:14 BT_dac_i_cur_mismatch_bin1_neg_cur_sel_out 0x00000000
 *    13:11 BT_dac_i_cur_mismatch_bin1_pos_cur_sel_out 0x00000000
 *    10:07 BT_dac_i_cur_mismatch_thermo_neg_cur_sel_cal_value 0x00000000
 *    06:04 BT_dac_i_cur_mismatch_thermo_pos_cur_sel_cal_value 0x00000000
 *    03:00 BT_dac_i_cur_mismatch_bin2_neg_cur_sel_cal_value 0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_DAC_CAL_VAL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006C8)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_OFFSET      0x000006C8
#define RFIC_REGS_BT_DAC_CAL_VAL_1_INDEX       0x000001B2
#define RFIC_REGS_BT_DAC_CAL_VAL_1_RESET       0x00000000

static inline u32 rfic_regs_bt_dac_cal_val_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_1_ADDR);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_1 .addr_index = 0x000001B2, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_NEG_CUR_SEL_OUT_MASK    ((u32)0xF0000000)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_NEG_CUR_SEL_OUT_LSB    28
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_NEG_CUR_SEL_OUT_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_POS_CUR_SEL_OUT_MASK    ((u32)0x0E000000)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_POS_CUR_SEL_OUT_LSB    25
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_POS_CUR_SEL_OUT_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_OUT_MASK    ((u32)0x01E00000)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_OUT_LSB    21
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_OUT_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_POS_CUR_SEL_OUT_MASK    ((u32)0x001C0000)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_POS_CUR_SEL_OUT_LSB    18
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_POS_CUR_SEL_OUT_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_OUT_MASK    ((u32)0x0003C000)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_OUT_LSB    14
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_OUT_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_POS_CUR_SEL_OUT_MASK    ((u32)0x00003800)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_POS_CUR_SEL_OUT_LSB    11
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_POS_CUR_SEL_OUT_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_NEG_CUR_SEL_CAL_VALUE_MASK    ((u32)0x00000780)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_NEG_CUR_SEL_CAL_VALUE_LSB    7
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_NEG_CUR_SEL_CAL_VALUE_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_POS_CUR_SEL_CAL_VALUE_MASK    ((u32)0x00000070)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_POS_CUR_SEL_CAL_VALUE_LSB    4
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_POS_CUR_SEL_CAL_VALUE_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_CAL_VALUE_MASK    ((u32)0x0000000F)
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_CAL_VALUE_LSB    0
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_CAL_VALUE_WIDTH    ((u32)0x00000004)

#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_NEG_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_POS_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_POS_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_POS_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_NEG_CUR_SEL_CAL_VALUE_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_POS_CUR_SEL_CAL_VALUE_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_CAL_VALUE_RST    0x00000000

static inline void rfic_regs_bt_dac_cal_val_1_unpack(struct cl_chip *chip, u8 *bt_dac_i_cur_mismatch_thermo_neg_cur_sel_out, u8 *bt_dac_i_cur_mismatch_thermo_pos_cur_sel_out, u8 *bt_dac_i_cur_mismatch_bin2_neg_cur_sel_out, u8 *bt_dac_i_cur_mismatch_bin2_pos_cur_sel_out, u8 *bt_dac_i_cur_mismatch_bin1_neg_cur_sel_out, u8 *bt_dac_i_cur_mismatch_bin1_pos_cur_sel_out, u8 *bt_dac_i_cur_mismatch_thermo_neg_cur_sel_cal_value, u8 *bt_dac_i_cur_mismatch_thermo_pos_cur_sel_cal_value, u8 *bt_dac_i_cur_mismatch_bin2_neg_cur_sel_cal_value)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_1_ADDR);

	*bt_dac_i_cur_mismatch_thermo_neg_cur_sel_out = (local_val & ((u32)0xF0000000)) >> 28;
	*bt_dac_i_cur_mismatch_thermo_pos_cur_sel_out = (local_val & ((u32)0x0E000000)) >> 25;
	*bt_dac_i_cur_mismatch_bin2_neg_cur_sel_out = (local_val & ((u32)0x01E00000)) >> 21;
	*bt_dac_i_cur_mismatch_bin2_pos_cur_sel_out = (local_val & ((u32)0x001C0000)) >> 18;
	*bt_dac_i_cur_mismatch_bin1_neg_cur_sel_out = (local_val & ((u32)0x0003C000)) >> 14;
	*bt_dac_i_cur_mismatch_bin1_pos_cur_sel_out = (local_val & ((u32)0x00003800)) >> 11;
	*bt_dac_i_cur_mismatch_thermo_neg_cur_sel_cal_value = (local_val & ((u32)0x00000780)) >> 7;
	*bt_dac_i_cur_mismatch_thermo_pos_cur_sel_cal_value = (local_val & ((u32)0x00000070)) >> 4;
	*bt_dac_i_cur_mismatch_bin2_neg_cur_sel_cal_value = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 rfic_regs_bt_dac_cal_val_1_bt_dac_i_cur_mismatch_thermo_neg_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_1_ADDR);

	return (u8)((local_val & ((u32)0xF0000000)) >> 28);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_NEG_CUR_SEL_OUT .addr_index = 0x000001B2, .size_minus_1 = (4 - 1), .shift = 28

static inline u8 rfic_regs_bt_dac_cal_val_1_bt_dac_i_cur_mismatch_thermo_pos_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_1_ADDR);

	return (u8)((local_val & ((u32)0x0E000000)) >> 25);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_POS_CUR_SEL_OUT .addr_index = 0x000001B2, .size_minus_1 = (3 - 1), .shift = 25

static inline u8 rfic_regs_bt_dac_cal_val_1_bt_dac_i_cur_mismatch_bin_2_neg_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_1_ADDR);

	return (u8)((local_val & ((u32)0x01E00000)) >> 21);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_OUT .addr_index = 0x000001B2, .size_minus_1 = (4 - 1), .shift = 21

static inline u8 rfic_regs_bt_dac_cal_val_1_bt_dac_i_cur_mismatch_bin_2_pos_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_1_ADDR);

	return (u8)((local_val & ((u32)0x001C0000)) >> 18);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_POS_CUR_SEL_OUT .addr_index = 0x000001B2, .size_minus_1 = (3 - 1), .shift = 18

static inline u8 rfic_regs_bt_dac_cal_val_1_bt_dac_i_cur_mismatch_bin_1_neg_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_1_ADDR);

	return (u8)((local_val & ((u32)0x0003C000)) >> 14);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_OUT .addr_index = 0x000001B2, .size_minus_1 = (4 - 1), .shift = 14

static inline u8 rfic_regs_bt_dac_cal_val_1_bt_dac_i_cur_mismatch_bin_1_pos_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_1_ADDR);

	return (u8)((local_val & ((u32)0x00003800)) >> 11);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_1_POS_CUR_SEL_OUT .addr_index = 0x000001B2, .size_minus_1 = (3 - 1), .shift = 11

static inline u8 rfic_regs_bt_dac_cal_val_1_bt_dac_i_cur_mismatch_thermo_neg_cur_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000780)) >> 7);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_NEG_CUR_SEL_CAL_VALUE .addr_index = 0x000001B2, .size_minus_1 = (4 - 1), .shift = 7

static inline u8 rfic_regs_bt_dac_cal_val_1_bt_dac_i_cur_mismatch_thermo_pos_cur_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000070)) >> 4);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_THERMO_POS_CUR_SEL_CAL_VALUE .addr_index = 0x000001B2, .size_minus_1 = (3 - 1), .shift = 4

static inline u8 rfic_regs_bt_dac_cal_val_1_bt_dac_i_cur_mismatch_bin_2_neg_cur_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_1_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_1_BT_DAC_I_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_CAL_VALUE .addr_index = 0x000001B2, .size_minus_1 = (4 - 1), .shift = 0

/**
 * @brief BT_DAC_CAL_VAL_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 BT_dac_q_cur_mismatch_bin2_neg_cur_sel_out 0x00000000
 *    27:25 BT_dac_q_cur_mismatch_bin1_pos_cur_sel_out 0x00000000
 *    24:21 BT_dac_q_cur_mismatch_bin1_neg_cur_sel_out 0x00000000
 *    20:18 BT_dac_q_cur_mismatch_thermo_pos_cur_sel_cal_value 0x00000000
 *    17:14 BT_dac_q_cur_mismatch_thermo_neg_cur_sel_cal_value 0x00000000
 *    13:11 BT_dac_q_cur_mismatch_bin2_pos_cur_sel_cal_value 0x00000000
 *    10:07 BT_dac_q_cur_mismatch_bin2_neg_cur_sel_cal_value 0x00000000
 *    06:04 BT_dac_q_cur_mismatch_bin1_pos_cur_sel_cal_value 0x00000000
 *    03:00 BT_dac_q_cur_mismatch_bin1_neg_cur_sel_cal_value 0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_DAC_CAL_VAL_2_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006CC)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_OFFSET      0x000006CC
#define RFIC_REGS_BT_DAC_CAL_VAL_2_INDEX       0x000001B3
#define RFIC_REGS_BT_DAC_CAL_VAL_2_RESET       0x00000000

static inline u32 rfic_regs_bt_dac_cal_val_2_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_2_ADDR);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_2 .addr_index = 0x000001B3, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_OUT_MASK    ((u32)0xF0000000)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_OUT_LSB    28
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_OUT_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_POS_CUR_SEL_OUT_MASK    ((u32)0x0E000000)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_POS_CUR_SEL_OUT_LSB    25
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_POS_CUR_SEL_OUT_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_OUT_MASK    ((u32)0x01E00000)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_OUT_LSB    21
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_OUT_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_POS_CUR_SEL_CAL_VALUE_MASK    ((u32)0x001C0000)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_POS_CUR_SEL_CAL_VALUE_LSB    18
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_POS_CUR_SEL_CAL_VALUE_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_NEG_CUR_SEL_CAL_VALUE_MASK    ((u32)0x0003C000)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_NEG_CUR_SEL_CAL_VALUE_LSB    14
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_NEG_CUR_SEL_CAL_VALUE_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_POS_CUR_SEL_CAL_VALUE_MASK    ((u32)0x00003800)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_POS_CUR_SEL_CAL_VALUE_LSB    11
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_POS_CUR_SEL_CAL_VALUE_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_CAL_VALUE_MASK    ((u32)0x00000780)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_CAL_VALUE_LSB    7
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_CAL_VALUE_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_POS_CUR_SEL_CAL_VALUE_MASK    ((u32)0x00000070)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_POS_CUR_SEL_CAL_VALUE_LSB    4
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_POS_CUR_SEL_CAL_VALUE_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_CAL_VALUE_MASK    ((u32)0x0000000F)
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_CAL_VALUE_LSB    0
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_CAL_VALUE_WIDTH    ((u32)0x00000004)

#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_POS_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_POS_CUR_SEL_CAL_VALUE_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_NEG_CUR_SEL_CAL_VALUE_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_POS_CUR_SEL_CAL_VALUE_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_CAL_VALUE_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_POS_CUR_SEL_CAL_VALUE_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_CAL_VALUE_RST    0x00000000

static inline void rfic_regs_bt_dac_cal_val_2_unpack(struct cl_chip *chip, u8 *bt_dac_q_cur_mismatch_bin2_neg_cur_sel_out, u8 *bt_dac_q_cur_mismatch_bin1_pos_cur_sel_out, u8 *bt_dac_q_cur_mismatch_bin1_neg_cur_sel_out, u8 *bt_dac_q_cur_mismatch_thermo_pos_cur_sel_cal_value, u8 *bt_dac_q_cur_mismatch_thermo_neg_cur_sel_cal_value, u8 *bt_dac_q_cur_mismatch_bin2_pos_cur_sel_cal_value, u8 *bt_dac_q_cur_mismatch_bin2_neg_cur_sel_cal_value, u8 *bt_dac_q_cur_mismatch_bin1_pos_cur_sel_cal_value, u8 *bt_dac_q_cur_mismatch_bin1_neg_cur_sel_cal_value)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_2_ADDR);

	*bt_dac_q_cur_mismatch_bin2_neg_cur_sel_out = (local_val & ((u32)0xF0000000)) >> 28;
	*bt_dac_q_cur_mismatch_bin1_pos_cur_sel_out = (local_val & ((u32)0x0E000000)) >> 25;
	*bt_dac_q_cur_mismatch_bin1_neg_cur_sel_out = (local_val & ((u32)0x01E00000)) >> 21;
	*bt_dac_q_cur_mismatch_thermo_pos_cur_sel_cal_value = (local_val & ((u32)0x001C0000)) >> 18;
	*bt_dac_q_cur_mismatch_thermo_neg_cur_sel_cal_value = (local_val & ((u32)0x0003C000)) >> 14;
	*bt_dac_q_cur_mismatch_bin2_pos_cur_sel_cal_value = (local_val & ((u32)0x00003800)) >> 11;
	*bt_dac_q_cur_mismatch_bin2_neg_cur_sel_cal_value = (local_val & ((u32)0x00000780)) >> 7;
	*bt_dac_q_cur_mismatch_bin1_pos_cur_sel_cal_value = (local_val & ((u32)0x00000070)) >> 4;
	*bt_dac_q_cur_mismatch_bin1_neg_cur_sel_cal_value = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 rfic_regs_bt_dac_cal_val_2_bt_dac_q_cur_mismatch_bin_2_neg_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_2_ADDR);

	return (u8)((local_val & ((u32)0xF0000000)) >> 28);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_OUT .addr_index = 0x000001B3, .size_minus_1 = (4 - 1), .shift = 28

static inline u8 rfic_regs_bt_dac_cal_val_2_bt_dac_q_cur_mismatch_bin_1_pos_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_2_ADDR);

	return (u8)((local_val & ((u32)0x0E000000)) >> 25);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_POS_CUR_SEL_OUT .addr_index = 0x000001B3, .size_minus_1 = (3 - 1), .shift = 25

static inline u8 rfic_regs_bt_dac_cal_val_2_bt_dac_q_cur_mismatch_bin_1_neg_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_2_ADDR);

	return (u8)((local_val & ((u32)0x01E00000)) >> 21);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_OUT .addr_index = 0x000001B3, .size_minus_1 = (4 - 1), .shift = 21

static inline u8 rfic_regs_bt_dac_cal_val_2_bt_dac_q_cur_mismatch_thermo_pos_cur_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_2_ADDR);

	return (u8)((local_val & ((u32)0x001C0000)) >> 18);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_POS_CUR_SEL_CAL_VALUE .addr_index = 0x000001B3, .size_minus_1 = (3 - 1), .shift = 18

static inline u8 rfic_regs_bt_dac_cal_val_2_bt_dac_q_cur_mismatch_thermo_neg_cur_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_2_ADDR);

	return (u8)((local_val & ((u32)0x0003C000)) >> 14);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_THERMO_NEG_CUR_SEL_CAL_VALUE .addr_index = 0x000001B3, .size_minus_1 = (4 - 1), .shift = 14

static inline u8 rfic_regs_bt_dac_cal_val_2_bt_dac_q_cur_mismatch_bin_2_pos_cur_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_2_ADDR);

	return (u8)((local_val & ((u32)0x00003800)) >> 11);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_POS_CUR_SEL_CAL_VALUE .addr_index = 0x000001B3, .size_minus_1 = (3 - 1), .shift = 11

static inline u8 rfic_regs_bt_dac_cal_val_2_bt_dac_q_cur_mismatch_bin_2_neg_cur_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000780)) >> 7);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_2_NEG_CUR_SEL_CAL_VALUE .addr_index = 0x000001B3, .size_minus_1 = (4 - 1), .shift = 7

static inline u8 rfic_regs_bt_dac_cal_val_2_bt_dac_q_cur_mismatch_bin_1_pos_cur_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_2_ADDR);

	return (u8)((local_val & ((u32)0x00000070)) >> 4);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_POS_CUR_SEL_CAL_VALUE .addr_index = 0x000001B3, .size_minus_1 = (3 - 1), .shift = 4

static inline u8 rfic_regs_bt_dac_cal_val_2_bt_dac_q_cur_mismatch_bin_1_neg_cur_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_2_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_2_BT_DAC_Q_CUR_MISMATCH_BIN_1_NEG_CUR_SEL_CAL_VALUE .addr_index = 0x000001B3, .size_minus_1 = (4 - 1), .shift = 0

/**
 * @brief BT_DAC_CAL_VAL_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    09:07 BT_dac_q_cur_mismatch_thermo_pos_cur_sel_out 0x00000000
 *    06:03 BT_dac_q_cur_mismatch_thermo_neg_cur_sel_out 0x00000000
 *    02:00 BT_dac_q_cur_mismatch_bin2_pos_cur_sel_out 0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_DAC_CAL_VAL_3_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006D0)
#define RFIC_REGS_BT_DAC_CAL_VAL_3_OFFSET      0x000006D0
#define RFIC_REGS_BT_DAC_CAL_VAL_3_INDEX       0x000001B4
#define RFIC_REGS_BT_DAC_CAL_VAL_3_RESET       0x00000000

static inline u32 rfic_regs_bt_dac_cal_val_3_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_3_ADDR);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_3 .addr_index = 0x000001B4, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_DAC_CAL_VAL_3_BT_DAC_Q_CUR_MISMATCH_THERMO_POS_CUR_SEL_OUT_MASK    ((u32)0x00000380)
#define RFIC_REGS_BT_DAC_CAL_VAL_3_BT_DAC_Q_CUR_MISMATCH_THERMO_POS_CUR_SEL_OUT_LSB    7
#define RFIC_REGS_BT_DAC_CAL_VAL_3_BT_DAC_Q_CUR_MISMATCH_THERMO_POS_CUR_SEL_OUT_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_CAL_VAL_3_BT_DAC_Q_CUR_MISMATCH_THERMO_NEG_CUR_SEL_OUT_MASK    ((u32)0x00000078)
#define RFIC_REGS_BT_DAC_CAL_VAL_3_BT_DAC_Q_CUR_MISMATCH_THERMO_NEG_CUR_SEL_OUT_LSB    3
#define RFIC_REGS_BT_DAC_CAL_VAL_3_BT_DAC_Q_CUR_MISMATCH_THERMO_NEG_CUR_SEL_OUT_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_CAL_VAL_3_BT_DAC_Q_CUR_MISMATCH_BIN_2_POS_CUR_SEL_OUT_MASK    ((u32)0x00000007)
#define RFIC_REGS_BT_DAC_CAL_VAL_3_BT_DAC_Q_CUR_MISMATCH_BIN_2_POS_CUR_SEL_OUT_LSB    0
#define RFIC_REGS_BT_DAC_CAL_VAL_3_BT_DAC_Q_CUR_MISMATCH_BIN_2_POS_CUR_SEL_OUT_WIDTH    ((u32)0x00000003)

#define RFIC_REGS_BT_DAC_CAL_VAL_3_BT_DAC_Q_CUR_MISMATCH_THERMO_POS_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_3_BT_DAC_Q_CUR_MISMATCH_THERMO_NEG_CUR_SEL_OUT_RST    0x00000000
#define RFIC_REGS_BT_DAC_CAL_VAL_3_BT_DAC_Q_CUR_MISMATCH_BIN_2_POS_CUR_SEL_OUT_RST    0x00000000

static inline void rfic_regs_bt_dac_cal_val_3_unpack(struct cl_chip *chip, u8 *bt_dac_q_cur_mismatch_thermo_pos_cur_sel_out, u8 *bt_dac_q_cur_mismatch_thermo_neg_cur_sel_out, u8 *bt_dac_q_cur_mismatch_bin2_pos_cur_sel_out)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_3_ADDR);

	*bt_dac_q_cur_mismatch_thermo_pos_cur_sel_out = (local_val & ((u32)0x00000380)) >> 7;
	*bt_dac_q_cur_mismatch_thermo_neg_cur_sel_out = (local_val & ((u32)0x00000078)) >> 3;
	*bt_dac_q_cur_mismatch_bin2_pos_cur_sel_out = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 rfic_regs_bt_dac_cal_val_3_bt_dac_q_cur_mismatch_thermo_pos_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_3_ADDR);

	return (u8)((local_val & ((u32)0x00000380)) >> 7);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_3_BT_DAC_Q_CUR_MISMATCH_THERMO_POS_CUR_SEL_OUT .addr_index = 0x000001B4, .size_minus_1 = (3 - 1), .shift = 7

static inline u8 rfic_regs_bt_dac_cal_val_3_bt_dac_q_cur_mismatch_thermo_neg_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_3_ADDR);

	return (u8)((local_val & ((u32)0x00000078)) >> 3);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_3_BT_DAC_Q_CUR_MISMATCH_THERMO_NEG_CUR_SEL_OUT .addr_index = 0x000001B4, .size_minus_1 = (4 - 1), .shift = 3

static inline u8 rfic_regs_bt_dac_cal_val_3_bt_dac_q_cur_mismatch_bin_2_pos_cur_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_CAL_VAL_3_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

#define RFIC_REGS_BT_DAC_CAL_VAL_3_BT_DAC_Q_CUR_MISMATCH_BIN_2_POS_CUR_SEL_OUT .addr_index = 0x000001B4, .size_minus_1 = (3 - 1), .shift = 0

/**
 * @brief BT_ADC_STATIC_CONF register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25    BT_aux_adc_clk_buf_en     00000000
 *    24    BT_adc_rstn               00000001
 *    23    BT_adc_ldo_en             00000001
 *    22    BT_adc_en                 00000000
 *    21:16 BT_spare19_in             0x00000000
 *    15    BT_adc_divider_en         00000000
 *    14    BT_adc_bias_en            00000000
 *    13    BT_adc_lpbk_en            00000000
 *    12:03 BT_spare18_in             0x00000000
 *    02    BT_adc_df                 00000001
 *    01:00 BT_adc_curctrl            0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_ADC_STATIC_CONF_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006D4)
#define RFIC_REGS_BT_ADC_STATIC_CONF_OFFSET      0x000006D4
#define RFIC_REGS_BT_ADC_STATIC_CONF_INDEX       0x000001B5
#define RFIC_REGS_BT_ADC_STATIC_CONF_RESET       0x01800004

static inline u32 rfic_regs_bt_adc_static_conf_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR);
}

static inline void rfic_regs_bt_adc_static_conf_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR, value);
}

#define RFIC_REGS_BT_ADC_STATIC_CONF .addr_index = 0x000001B5, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_AUX_ADC_CLK_BUF_EN_BIT    ((u32)0x02000000)
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_AUX_ADC_CLK_BUF_EN_POS    25
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_RSTN_BIT    ((u32)0x01000000)
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_RSTN_POS    24
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_LDO_EN_BIT    ((u32)0x00800000)
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_LDO_EN_POS    23
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_EN_BIT    ((u32)0x00400000)
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_EN_POS    22
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_SPARE_19_IN_MASK    ((u32)0x003F0000)
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_SPARE_19_IN_LSB    16
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_SPARE_19_IN_WIDTH    ((u32)0x00000006)
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_DIVIDER_EN_BIT    ((u32)0x00008000)
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_DIVIDER_EN_POS    15
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_BIAS_EN_BIT    ((u32)0x00004000)
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_BIAS_EN_POS    14
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_LPBK_EN_BIT    ((u32)0x00002000)
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_LPBK_EN_POS    13
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_SPARE_18_IN_MASK    ((u32)0x00001FF8)
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_SPARE_18_IN_LSB    3
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_SPARE_18_IN_WIDTH    ((u32)0x0000000A)
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_DF_BIT    ((u32)0x00000004)
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_DF_POS    2
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_CURCTRL_MASK    ((u32)0x00000003)
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_CURCTRL_LSB    0
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_CURCTRL_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_AUX_ADC_CLK_BUF_EN_RST    0x00000000
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_RSTN_RST    0x00000001
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_LDO_EN_RST    0x00000001
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_EN_RST    0x00000000
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_SPARE_19_IN_RST    0x00000000
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_DIVIDER_EN_RST    0x00000000
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_BIAS_EN_RST    0x00000000
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_LPBK_EN_RST    0x00000000
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_SPARE_18_IN_RST    0x00000000
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_DF_RST    0x00000001
#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_CURCTRL_RST    0x00000000

static inline void rfic_regs_bt_adc_static_conf_pack(struct cl_chip *chip, u8 bt_aux_adc_clk_buf_en, u8 bt_adc_rstn, u8 bt_adc_ldo_en, u8 bt_adc_en, u8 bt_spare19_in, u8 bt_adc_divider_en, u8 bt_adc_bias_en, u8 bt_adc_lpbk_en, u16 bt_spare18_in, u8 bt_adc_df, u8 bt_adc_curctrl)
{
	ASSERT_ERR_CHIP((((u32)bt_aux_adc_clk_buf_en << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_rstn << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_ldo_en << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_en << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare19_in << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_divider_en << 15) & ~((u32)0x00008000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_bias_en << 14) & ~((u32)0x00004000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_lpbk_en << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare18_in << 3) & ~((u32)0x00001FF8)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_df << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_adc_curctrl << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR, ((u32)bt_aux_adc_clk_buf_en << 25) | ((u32)bt_adc_rstn << 24) | ((u32)bt_adc_ldo_en << 23) | ((u32)bt_adc_en << 22) | ((u32)bt_spare19_in << 16) | ((u32)bt_adc_divider_en << 15) | ((u32)bt_adc_bias_en << 14) | ((u32)bt_adc_lpbk_en << 13) | ((u32)bt_spare18_in << 3) | ((u32)bt_adc_df << 2) | ((u32)bt_adc_curctrl << 0));
}

static inline void rfic_regs_bt_adc_static_conf_unpack(struct cl_chip *chip, u8 *bt_aux_adc_clk_buf_en, u8 *bt_adc_rstn, u8 *bt_adc_ldo_en, u8 *bt_adc_en, u8 *bt_spare19_in, u8 *bt_adc_divider_en, u8 *bt_adc_bias_en, u8 *bt_adc_lpbk_en, u16 *bt_spare18_in, u8 *bt_adc_df, u8 *bt_adc_curctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR);

	*bt_aux_adc_clk_buf_en = (local_val & ((u32)0x02000000)) >> 25;
	*bt_adc_rstn = (local_val & ((u32)0x01000000)) >> 24;
	*bt_adc_ldo_en = (local_val & ((u32)0x00800000)) >> 23;
	*bt_adc_en = (local_val & ((u32)0x00400000)) >> 22;
	*bt_spare19_in = (local_val & ((u32)0x003F0000)) >> 16;
	*bt_adc_divider_en = (local_val & ((u32)0x00008000)) >> 15;
	*bt_adc_bias_en = (local_val & ((u32)0x00004000)) >> 14;
	*bt_adc_lpbk_en = (local_val & ((u32)0x00002000)) >> 13;
	*bt_spare18_in = (local_val & ((u32)0x00001FF8)) >> 3;
	*bt_adc_df = (local_val & ((u32)0x00000004)) >> 2;
	*bt_adc_curctrl = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_bt_adc_static_conf_bt_aux_adc_clk_buf_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void rfic_regs_bt_adc_static_conf_bt_aux_adc_clk_buf_en_setf(struct cl_chip *chip, u8 btauxadcclkbufen)
{
	ASSERT_ERR_CHIP((((u32)btauxadcclkbufen << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR) & ~((u32)0x02000000)) | ((u32)btauxadcclkbufen << 25));
}

#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_AUX_ADC_CLK_BUF_EN .addr_index = 0x000001B5, .size_minus_1 = (1 - 1), .shift = 25

static inline u8 rfic_regs_bt_adc_static_conf_bt_adc_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void rfic_regs_bt_adc_static_conf_bt_adc_rstn_setf(struct cl_chip *chip, u8 btadcrstn)
{
	ASSERT_ERR_CHIP((((u32)btadcrstn << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR) & ~((u32)0x01000000)) | ((u32)btadcrstn << 24));
}

#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_RSTN .addr_index = 0x000001B5, .size_minus_1 = (1 - 1), .shift = 24

static inline u8 rfic_regs_bt_adc_static_conf_bt_adc_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void rfic_regs_bt_adc_static_conf_bt_adc_ldo_en_setf(struct cl_chip *chip, u8 btadcldoen)
{
	ASSERT_ERR_CHIP((((u32)btadcldoen << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR) & ~((u32)0x00800000)) | ((u32)btadcldoen << 23));
}

#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_LDO_EN .addr_index = 0x000001B5, .size_minus_1 = (1 - 1), .shift = 23

static inline u8 rfic_regs_bt_adc_static_conf_bt_adc_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline void rfic_regs_bt_adc_static_conf_bt_adc_en_setf(struct cl_chip *chip, u8 btadcen)
{
	ASSERT_ERR_CHIP((((u32)btadcen << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR) & ~((u32)0x00400000)) | ((u32)btadcen << 22));
}

#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_EN .addr_index = 0x000001B5, .size_minus_1 = (1 - 1), .shift = 22

static inline u8 rfic_regs_bt_adc_static_conf_bt_spare_19_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void rfic_regs_bt_adc_static_conf_bt_spare_19_in_setf(struct cl_chip *chip, u8 btspare19in)
{
	ASSERT_ERR_CHIP((((u32)btspare19in << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR) & ~((u32)0x003F0000)) | ((u32)btspare19in << 16));
}

#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_SPARE_19_IN .addr_index = 0x000001B5, .size_minus_1 = (6 - 1), .shift = 16

static inline u8 rfic_regs_bt_adc_static_conf_bt_adc_divider_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline void rfic_regs_bt_adc_static_conf_bt_adc_divider_en_setf(struct cl_chip *chip, u8 btadcdivideren)
{
	ASSERT_ERR_CHIP((((u32)btadcdivideren << 15) & ~((u32)0x00008000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR) & ~((u32)0x00008000)) | ((u32)btadcdivideren << 15));
}

#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_DIVIDER_EN .addr_index = 0x000001B5, .size_minus_1 = (1 - 1), .shift = 15

static inline u8 rfic_regs_bt_adc_static_conf_bt_adc_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00004000)) >> 14);
}

static inline void rfic_regs_bt_adc_static_conf_bt_adc_bias_en_setf(struct cl_chip *chip, u8 btadcbiasen)
{
	ASSERT_ERR_CHIP((((u32)btadcbiasen << 14) & ~((u32)0x00004000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR) & ~((u32)0x00004000)) | ((u32)btadcbiasen << 14));
}

#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_BIAS_EN .addr_index = 0x000001B5, .size_minus_1 = (1 - 1), .shift = 14

static inline u8 rfic_regs_bt_adc_static_conf_bt_adc_lpbk_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void rfic_regs_bt_adc_static_conf_bt_adc_lpbk_en_setf(struct cl_chip *chip, u8 btadclpbken)
{
	ASSERT_ERR_CHIP((((u32)btadclpbken << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR) & ~((u32)0x00002000)) | ((u32)btadclpbken << 13));
}

#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_LPBK_EN .addr_index = 0x000001B5, .size_minus_1 = (1 - 1), .shift = 13

static inline u16 rfic_regs_bt_adc_static_conf_bt_spare_18_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR);

	return (u16)((local_val & ((u32)0x00001FF8)) >> 3);
}

static inline void rfic_regs_bt_adc_static_conf_bt_spare_18_in_setf(struct cl_chip *chip, u16 btspare18in)
{
	ASSERT_ERR_CHIP((((u32)btspare18in << 3) & ~((u32)0x00001FF8)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR) & ~((u32)0x00001FF8)) | ((u32)btspare18in << 3));
}

#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_SPARE_18_IN .addr_index = 0x000001B5, .size_minus_1 = (10 - 1), .shift = 3

static inline u8 rfic_regs_bt_adc_static_conf_bt_adc_df_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_bt_adc_static_conf_bt_adc_df_setf(struct cl_chip *chip, u8 btadcdf)
{
	ASSERT_ERR_CHIP((((u32)btadcdf << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR) & ~((u32)0x00000004)) | ((u32)btadcdf << 2));
}

#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_DF .addr_index = 0x000001B5, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_bt_adc_static_conf_bt_adc_curctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_bt_adc_static_conf_bt_adc_curctrl_setf(struct cl_chip *chip, u8 btadccurctrl)
{
	ASSERT_ERR_CHIP((((u32)btadccurctrl << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_STATIC_CONF_ADDR) & ~((u32)0x00000003)) | ((u32)btadccurctrl << 0));
}

#define RFIC_REGS_BT_ADC_STATIC_CONF_BT_ADC_CURCTRL .addr_index = 0x000001B5, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief BT_DAC_STATIC_CONF register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:09 BT_spare22_in             0x00000000
 *    08    BT_dac_lpbk_en            00000000
 *    07    dac_BT_rstn               00000001
 *    06    BT_dac_ldo_en             00000001
 *    05    BT_dac_en                 00000000
 *    04    BT_dac_bias_en            00000000
 *    03    BT_dac_curr_sink_en       00000000
 *    02    BT_dac_lfsr_bypass        00000000
 *    01:00 BT_spare21_in             0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_DAC_STATIC_CONF_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006D8)
#define RFIC_REGS_BT_DAC_STATIC_CONF_OFFSET      0x000006D8
#define RFIC_REGS_BT_DAC_STATIC_CONF_INDEX       0x000001B6
#define RFIC_REGS_BT_DAC_STATIC_CONF_RESET       0x000000C0

static inline u32 rfic_regs_bt_dac_static_conf_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR);
}

static inline void rfic_regs_bt_dac_static_conf_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR, value);
}

#define RFIC_REGS_BT_DAC_STATIC_CONF .addr_index = 0x000001B6, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_SPARE_22_IN_MASK    ((u32)0x0000FE00)
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_SPARE_22_IN_LSB    9
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_SPARE_22_IN_WIDTH    ((u32)0x00000007)
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_LPBK_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_LPBK_EN_POS    8
#define RFIC_REGS_BT_DAC_STATIC_CONF_DAC_BT_RSTN_BIT    ((u32)0x00000080)
#define RFIC_REGS_BT_DAC_STATIC_CONF_DAC_BT_RSTN_POS    7
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_LDO_EN_BIT    ((u32)0x00000040)
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_LDO_EN_POS    6
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_EN_BIT    ((u32)0x00000020)
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_EN_POS    5
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_BIAS_EN_BIT    ((u32)0x00000010)
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_BIAS_EN_POS    4
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_CURR_SINK_EN_BIT    ((u32)0x00000008)
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_CURR_SINK_EN_POS    3
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_LFSR_BYPASS_BIT    ((u32)0x00000004)
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_LFSR_BYPASS_POS    2
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_SPARE_21_IN_MASK    ((u32)0x00000003)
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_SPARE_21_IN_LSB    0
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_SPARE_21_IN_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_SPARE_22_IN_RST    0x00000000
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_LPBK_EN_RST    0x00000000
#define RFIC_REGS_BT_DAC_STATIC_CONF_DAC_BT_RSTN_RST    0x00000001
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_LDO_EN_RST    0x00000001
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_EN_RST    0x00000000
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_BIAS_EN_RST    0x00000000
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_CURR_SINK_EN_RST    0x00000000
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_LFSR_BYPASS_RST    0x00000000
#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_SPARE_21_IN_RST    0x00000000

static inline void rfic_regs_bt_dac_static_conf_pack(struct cl_chip *chip, u8 bt_spare22_in, u8 bt_dac_lpbk_en, u8 dac_bt_rstn, u8 bt_dac_ldo_en, u8 bt_dac_en, u8 bt_dac_bias_en, u8 bt_dac_curr_sink_en, u8 bt_dac_lfsr_bypass, u8 bt_spare21_in)
{
	ASSERT_ERR_CHIP((((u32)bt_spare22_in << 9) & ~((u32)0x0000FE00)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_lpbk_en << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)dac_bt_rstn << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_ldo_en << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_en << 5) & ~((u32)0x00000020)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_bias_en << 4) & ~((u32)0x00000010)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_curr_sink_en << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_dac_lfsr_bypass << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare21_in << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR, ((u32)bt_spare22_in << 9) | ((u32)bt_dac_lpbk_en << 8) | ((u32)dac_bt_rstn << 7) | ((u32)bt_dac_ldo_en << 6) | ((u32)bt_dac_en << 5) | ((u32)bt_dac_bias_en << 4) | ((u32)bt_dac_curr_sink_en << 3) | ((u32)bt_dac_lfsr_bypass << 2) | ((u32)bt_spare21_in << 0));
}

static inline void rfic_regs_bt_dac_static_conf_unpack(struct cl_chip *chip, u8 *bt_spare22_in, u8 *bt_dac_lpbk_en, u8 *dac_bt_rstn, u8 *bt_dac_ldo_en, u8 *bt_dac_en, u8 *bt_dac_bias_en, u8 *bt_dac_curr_sink_en, u8 *bt_dac_lfsr_bypass, u8 *bt_spare21_in)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR);

	*bt_spare22_in = (local_val & ((u32)0x0000FE00)) >> 9;
	*bt_dac_lpbk_en = (local_val & ((u32)0x00000100)) >> 8;
	*dac_bt_rstn = (local_val & ((u32)0x00000080)) >> 7;
	*bt_dac_ldo_en = (local_val & ((u32)0x00000040)) >> 6;
	*bt_dac_en = (local_val & ((u32)0x00000020)) >> 5;
	*bt_dac_bias_en = (local_val & ((u32)0x00000010)) >> 4;
	*bt_dac_curr_sink_en = (local_val & ((u32)0x00000008)) >> 3;
	*bt_dac_lfsr_bypass = (local_val & ((u32)0x00000004)) >> 2;
	*bt_spare21_in = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_bt_dac_static_conf_bt_spare_22_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x0000FE00)) >> 9);
}

static inline void rfic_regs_bt_dac_static_conf_bt_spare_22_in_setf(struct cl_chip *chip, u8 btspare22in)
{
	ASSERT_ERR_CHIP((((u32)btspare22in << 9) & ~((u32)0x0000FE00)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR) & ~((u32)0x0000FE00)) | ((u32)btspare22in << 9));
}

#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_SPARE_22_IN .addr_index = 0x000001B6, .size_minus_1 = (7 - 1), .shift = 9

static inline u8 rfic_regs_bt_dac_static_conf_bt_dac_lpbk_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_bt_dac_static_conf_bt_dac_lpbk_en_setf(struct cl_chip *chip, u8 btdaclpbken)
{
	ASSERT_ERR_CHIP((((u32)btdaclpbken << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR) & ~((u32)0x00000100)) | ((u32)btdaclpbken << 8));
}

#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_LPBK_EN .addr_index = 0x000001B6, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_bt_dac_static_conf_dac_bt_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_bt_dac_static_conf_dac_bt_rstn_setf(struct cl_chip *chip, u8 dacbtrstn)
{
	ASSERT_ERR_CHIP((((u32)dacbtrstn << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR) & ~((u32)0x00000080)) | ((u32)dacbtrstn << 7));
}

#define RFIC_REGS_BT_DAC_STATIC_CONF_DAC_BT_RSTN .addr_index = 0x000001B6, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_bt_dac_static_conf_bt_dac_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void rfic_regs_bt_dac_static_conf_bt_dac_ldo_en_setf(struct cl_chip *chip, u8 btdacldoen)
{
	ASSERT_ERR_CHIP((((u32)btdacldoen << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR) & ~((u32)0x00000040)) | ((u32)btdacldoen << 6));
}

#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_LDO_EN .addr_index = 0x000001B6, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_bt_dac_static_conf_bt_dac_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

static inline void rfic_regs_bt_dac_static_conf_bt_dac_en_setf(struct cl_chip *chip, u8 btdacen)
{
	ASSERT_ERR_CHIP((((u32)btdacen << 5) & ~((u32)0x00000020)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR) & ~((u32)0x00000020)) | ((u32)btdacen << 5));
}

#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_EN .addr_index = 0x000001B6, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_bt_dac_static_conf_bt_dac_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

static inline void rfic_regs_bt_dac_static_conf_bt_dac_bias_en_setf(struct cl_chip *chip, u8 btdacbiasen)
{
	ASSERT_ERR_CHIP((((u32)btdacbiasen << 4) & ~((u32)0x00000010)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR) & ~((u32)0x00000010)) | ((u32)btdacbiasen << 4));
}

#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_BIAS_EN .addr_index = 0x000001B6, .size_minus_1 = (1 - 1), .shift = 4

static inline u8 rfic_regs_bt_dac_static_conf_bt_dac_curr_sink_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_bt_dac_static_conf_bt_dac_curr_sink_en_setf(struct cl_chip *chip, u8 btdaccurrsinken)
{
	ASSERT_ERR_CHIP((((u32)btdaccurrsinken << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR) & ~((u32)0x00000008)) | ((u32)btdaccurrsinken << 3));
}

#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_CURR_SINK_EN .addr_index = 0x000001B6, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_bt_dac_static_conf_bt_dac_lfsr_bypass_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_bt_dac_static_conf_bt_dac_lfsr_bypass_setf(struct cl_chip *chip, u8 btdaclfsrbypass)
{
	ASSERT_ERR_CHIP((((u32)btdaclfsrbypass << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR) & ~((u32)0x00000004)) | ((u32)btdaclfsrbypass << 2));
}

#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_DAC_LFSR_BYPASS .addr_index = 0x000001B6, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_bt_dac_static_conf_bt_spare_21_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_bt_dac_static_conf_bt_spare_21_in_setf(struct cl_chip *chip, u8 btspare21in)
{
	ASSERT_ERR_CHIP((((u32)btspare21in << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_DAC_STATIC_CONF_ADDR) & ~((u32)0x00000003)) | ((u32)btspare21in << 0));
}

#define RFIC_REGS_BT_DAC_STATIC_CONF_BT_SPARE_21_IN .addr_index = 0x000001B6, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief BT_DAC_SPARE register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 BT_dac_spare              0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_DAC_SPARE_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006DC)
#define RFIC_REGS_BT_DAC_SPARE_OFFSET      0x000006DC
#define RFIC_REGS_BT_DAC_SPARE_INDEX       0x000001B7
#define RFIC_REGS_BT_DAC_SPARE_RESET       0x00000000

static inline u32 rfic_regs_bt_dac_spare_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_DAC_SPARE_ADDR);
}

static inline void rfic_regs_bt_dac_spare_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_DAC_SPARE_ADDR, value);
}

#define RFIC_REGS_BT_DAC_SPARE .addr_index = 0x000001B7, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_DAC_SPARE_BT_DAC_SPARE_MASK    ((u32)0xFFFFFFFF)
#define RFIC_REGS_BT_DAC_SPARE_BT_DAC_SPARE_LSB    0
#define RFIC_REGS_BT_DAC_SPARE_BT_DAC_SPARE_WIDTH    ((u32)0x00000020)

#define RFIC_REGS_BT_DAC_SPARE_BT_DAC_SPARE_RST    0x00000000

static inline u32 rfic_regs_bt_dac_spare_bt_dac_spare_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DAC_SPARE_ADDR);

	return (u32)(local_val >> 0);
}

static inline void rfic_regs_bt_dac_spare_bt_dac_spare_setf(struct cl_chip *chip, u32 btdacspare)
{
	ASSERT_ERR_CHIP((((u32)btdacspare << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_DAC_SPARE_ADDR, (u32)btdacspare << 0);
}

#define RFIC_REGS_BT_DAC_SPARE_BT_DAC_SPARE .addr_index = 0x000001B7, .size_minus_1 = (32 - 1), .shift = 0

/**
 * @brief BT_SPARE_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 BT_spare_out              0x00000000
 *    23    BT_rx_gm_5d_B_en          00000000
 *    22:21 BT_bb_bw_ctrl             0x00000000
 *    20:17 BT_rx_lna_s11capctrl      0x00000000
 *    16:13 BT_rx_gm_gain_ctrl        0x00000000
 *    12    BT_dac_en                 00000000
 *    11    BT_adc_en                 00000000
 *    10    BT_tx_pa_en               00000000
 *    09    BT_trsw_pa_en             00000000
 *    08    BT_trsw_lna_en            00000000
 *    07    BT_rx_lna_bias_en         00000000
 *    06    BT_rx_lna_en              00000000
 *    05    BT_rx_gm_en               00000000
 *    04    BT_tx_prepa_bias_en       00000000
 *    03    BT_tx_prepa_en            00000000
 *    02    BT_tx_mix_en              00000000
 *    01    BT_bb_tx_mode_en          00000000
 *    00    BT_localdiv_rxtxn         00000000
 * </pre>
 */
#define RFIC_REGS_BT_SPARE_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006E0)
#define RFIC_REGS_BT_SPARE_OUT_OFFSET      0x000006E0
#define RFIC_REGS_BT_SPARE_OUT_INDEX       0x000001B8
#define RFIC_REGS_BT_SPARE_OUT_RESET       0x00000000

static inline u32 rfic_regs_bt_spare_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);
}

#define RFIC_REGS_BT_SPARE_OUT .addr_index = 0x000001B8, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_SPARE_OUT_BT_SPARE_OUT_MASK    ((u32)0xFF000000)
#define RFIC_REGS_BT_SPARE_OUT_BT_SPARE_OUT_LSB    24
#define RFIC_REGS_BT_SPARE_OUT_BT_SPARE_OUT_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_GM_5_D_B_EN_BIT    ((u32)0x00800000)
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_GM_5_D_B_EN_POS    23
#define RFIC_REGS_BT_SPARE_OUT_BT_BB_BW_CTRL_MASK    ((u32)0x00600000)
#define RFIC_REGS_BT_SPARE_OUT_BT_BB_BW_CTRL_LSB    21
#define RFIC_REGS_BT_SPARE_OUT_BT_BB_BW_CTRL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_LNA_S_11_CAPCTRL_MASK    ((u32)0x001E0000)
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_LNA_S_11_CAPCTRL_LSB    17
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_LNA_S_11_CAPCTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_GM_GAIN_CTRL_MASK    ((u32)0x0001E000)
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_GM_GAIN_CTRL_LSB    13
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_GM_GAIN_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_SPARE_OUT_BT_DAC_EN_BIT    ((u32)0x00001000)
#define RFIC_REGS_BT_SPARE_OUT_BT_DAC_EN_POS    12
#define RFIC_REGS_BT_SPARE_OUT_BT_ADC_EN_BIT    ((u32)0x00000800)
#define RFIC_REGS_BT_SPARE_OUT_BT_ADC_EN_POS    11
#define RFIC_REGS_BT_SPARE_OUT_BT_TX_PA_EN_BIT    ((u32)0x00000400)
#define RFIC_REGS_BT_SPARE_OUT_BT_TX_PA_EN_POS    10
#define RFIC_REGS_BT_SPARE_OUT_BT_TRSW_PA_EN_BIT    ((u32)0x00000200)
#define RFIC_REGS_BT_SPARE_OUT_BT_TRSW_PA_EN_POS    9
#define RFIC_REGS_BT_SPARE_OUT_BT_TRSW_LNA_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_BT_SPARE_OUT_BT_TRSW_LNA_EN_POS    8
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_LNA_BIAS_EN_BIT    ((u32)0x00000080)
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_LNA_BIAS_EN_POS    7
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_LNA_EN_BIT    ((u32)0x00000040)
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_LNA_EN_POS    6
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_GM_EN_BIT    ((u32)0x00000020)
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_GM_EN_POS    5
#define RFIC_REGS_BT_SPARE_OUT_BT_TX_PREPA_BIAS_EN_BIT    ((u32)0x00000010)
#define RFIC_REGS_BT_SPARE_OUT_BT_TX_PREPA_BIAS_EN_POS    4
#define RFIC_REGS_BT_SPARE_OUT_BT_TX_PREPA_EN_BIT    ((u32)0x00000008)
#define RFIC_REGS_BT_SPARE_OUT_BT_TX_PREPA_EN_POS    3
#define RFIC_REGS_BT_SPARE_OUT_BT_TX_MIX_EN_BIT    ((u32)0x00000004)
#define RFIC_REGS_BT_SPARE_OUT_BT_TX_MIX_EN_POS    2
#define RFIC_REGS_BT_SPARE_OUT_BT_BB_TX_MODE_EN_BIT    ((u32)0x00000002)
#define RFIC_REGS_BT_SPARE_OUT_BT_BB_TX_MODE_EN_POS    1
#define RFIC_REGS_BT_SPARE_OUT_BT_LOCALDIV_RXTXN_BIT    ((u32)0x00000001)
#define RFIC_REGS_BT_SPARE_OUT_BT_LOCALDIV_RXTXN_POS    0

#define RFIC_REGS_BT_SPARE_OUT_BT_SPARE_OUT_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_GM_5_D_B_EN_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_BB_BW_CTRL_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_LNA_S_11_CAPCTRL_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_GM_GAIN_CTRL_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_DAC_EN_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_ADC_EN_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_TX_PA_EN_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_TRSW_PA_EN_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_TRSW_LNA_EN_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_LNA_BIAS_EN_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_LNA_EN_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_RX_GM_EN_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_TX_PREPA_BIAS_EN_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_TX_PREPA_EN_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_TX_MIX_EN_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_BB_TX_MODE_EN_RST    0x00000000
#define RFIC_REGS_BT_SPARE_OUT_BT_LOCALDIV_RXTXN_RST    0x00000000

static inline void rfic_regs_bt_spare_out_unpack(struct cl_chip *chip, u8 *bt_spare_out, u8 *bt_rx_gm_5d_b_en, u8 *bt_bb_bw_ctrl, u8 *bt_rx_lna_s11capctrl, u8 *bt_rx_gm_gain_ctrl, u8 *bt_dac_en, u8 *bt_adc_en, u8 *bt_tx_pa_en, u8 *bt_trsw_pa_en, u8 *bt_trsw_lna_en, u8 *bt_rx_lna_bias_en, u8 *bt_rx_lna_en, u8 *bt_rx_gm_en, u8 *bt_tx_prepa_bias_en, u8 *bt_tx_prepa_en, u8 *bt_tx_mix_en, u8 *bt_bb_tx_mode_en, u8 *bt_localdiv_rxtxn)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	*bt_spare_out = (local_val & ((u32)0xFF000000)) >> 24;
	*bt_rx_gm_5d_b_en = (local_val & ((u32)0x00800000)) >> 23;
	*bt_bb_bw_ctrl = (local_val & ((u32)0x00600000)) >> 21;
	*bt_rx_lna_s11capctrl = (local_val & ((u32)0x001E0000)) >> 17;
	*bt_rx_gm_gain_ctrl = (local_val & ((u32)0x0001E000)) >> 13;
	*bt_dac_en = (local_val & ((u32)0x00001000)) >> 12;
	*bt_adc_en = (local_val & ((u32)0x00000800)) >> 11;
	*bt_tx_pa_en = (local_val & ((u32)0x00000400)) >> 10;
	*bt_trsw_pa_en = (local_val & ((u32)0x00000200)) >> 9;
	*bt_trsw_lna_en = (local_val & ((u32)0x00000100)) >> 8;
	*bt_rx_lna_bias_en = (local_val & ((u32)0x00000080)) >> 7;
	*bt_rx_lna_en = (local_val & ((u32)0x00000040)) >> 6;
	*bt_rx_gm_en = (local_val & ((u32)0x00000020)) >> 5;
	*bt_tx_prepa_bias_en = (local_val & ((u32)0x00000010)) >> 4;
	*bt_tx_prepa_en = (local_val & ((u32)0x00000008)) >> 3;
	*bt_tx_mix_en = (local_val & ((u32)0x00000004)) >> 2;
	*bt_bb_tx_mode_en = (local_val & ((u32)0x00000002)) >> 1;
	*bt_localdiv_rxtxn = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_bt_spare_out_bt_spare_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_SPARE_OUT .addr_index = 0x000001B8, .size_minus_1 = (8 - 1), .shift = 24

static inline u8 rfic_regs_bt_spare_out_bt_rx_gm_5_d_b_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_RX_GM_5_D_B_EN .addr_index = 0x000001B8, .size_minus_1 = (1 - 1), .shift = 23

static inline u8 rfic_regs_bt_spare_out_bt_bb_bw_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00600000)) >> 21);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_BB_BW_CTRL .addr_index = 0x000001B8, .size_minus_1 = (2 - 1), .shift = 21

static inline u8 rfic_regs_bt_spare_out_bt_rx_lna_s_11_capctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x001E0000)) >> 17);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_RX_LNA_S_11_CAPCTRL .addr_index = 0x000001B8, .size_minus_1 = (4 - 1), .shift = 17

static inline u8 rfic_regs_bt_spare_out_bt_rx_gm_gain_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x0001E000)) >> 13);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_RX_GM_GAIN_CTRL .addr_index = 0x000001B8, .size_minus_1 = (4 - 1), .shift = 13

static inline u8 rfic_regs_bt_spare_out_bt_dac_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_DAC_EN .addr_index = 0x000001B8, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_bt_spare_out_bt_adc_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_ADC_EN .addr_index = 0x000001B8, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_bt_spare_out_bt_tx_pa_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_TX_PA_EN .addr_index = 0x000001B8, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_bt_spare_out_bt_trsw_pa_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_TRSW_PA_EN .addr_index = 0x000001B8, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_bt_spare_out_bt_trsw_lna_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_TRSW_LNA_EN .addr_index = 0x000001B8, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_bt_spare_out_bt_rx_lna_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_RX_LNA_BIAS_EN .addr_index = 0x000001B8, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_bt_spare_out_bt_rx_lna_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_RX_LNA_EN .addr_index = 0x000001B8, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_bt_spare_out_bt_rx_gm_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_RX_GM_EN .addr_index = 0x000001B8, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_bt_spare_out_bt_tx_prepa_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_TX_PREPA_BIAS_EN .addr_index = 0x000001B8, .size_minus_1 = (1 - 1), .shift = 4

static inline u8 rfic_regs_bt_spare_out_bt_tx_prepa_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_TX_PREPA_EN .addr_index = 0x000001B8, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_bt_spare_out_bt_tx_mix_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_TX_MIX_EN .addr_index = 0x000001B8, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_bt_spare_out_bt_bb_tx_mode_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_BB_TX_MODE_EN .addr_index = 0x000001B8, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_bt_spare_out_bt_localdiv_rxtxn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_SPARE_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

#define RFIC_REGS_BT_SPARE_OUT_BT_LOCALDIV_RXTXN .addr_index = 0x000001B8, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief BT_ADC_SPARE register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:01 BT_adc_spare              0x00000000
 *    00    sel_negedge_out           00000000
 * </pre>
 */
#define RFIC_REGS_BT_ADC_SPARE_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006E4)
#define RFIC_REGS_BT_ADC_SPARE_OFFSET      0x000006E4
#define RFIC_REGS_BT_ADC_SPARE_INDEX       0x000001B9
#define RFIC_REGS_BT_ADC_SPARE_RESET       0x00000000

static inline u32 rfic_regs_bt_adc_spare_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_ADC_SPARE_ADDR);
}

static inline void rfic_regs_bt_adc_spare_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_ADC_SPARE_ADDR, value);
}

#define RFIC_REGS_BT_ADC_SPARE .addr_index = 0x000001B9, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_ADC_SPARE_BT_ADC_SPARE_MASK    ((u32)0xFFFFFFFE)
#define RFIC_REGS_BT_ADC_SPARE_BT_ADC_SPARE_LSB    1
#define RFIC_REGS_BT_ADC_SPARE_BT_ADC_SPARE_WIDTH    ((u32)0x0000001F)
#define RFIC_REGS_BT_ADC_SPARE_SEL_NEGEDGE_OUT_BIT    ((u32)0x00000001)
#define RFIC_REGS_BT_ADC_SPARE_SEL_NEGEDGE_OUT_POS    0

#define RFIC_REGS_BT_ADC_SPARE_BT_ADC_SPARE_RST    0x00000000
#define RFIC_REGS_BT_ADC_SPARE_SEL_NEGEDGE_OUT_RST    0x00000000

static inline void rfic_regs_bt_adc_spare_pack(struct cl_chip *chip, u32 bt_adc_spare, u8 sel_negedge_out)
{
	ASSERT_ERR_CHIP((((u32)bt_adc_spare << 1) & ~((u32)0xFFFFFFFE)) == 0);
	ASSERT_ERR_CHIP((((u32)sel_negedge_out << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_SPARE_ADDR, ((u32)bt_adc_spare << 1) | ((u32)sel_negedge_out << 0));
}

static inline void rfic_regs_bt_adc_spare_unpack(struct cl_chip *chip, u32 *bt_adc_spare, u8 *sel_negedge_out)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_SPARE_ADDR);

	*bt_adc_spare = (local_val & ((u32)0xFFFFFFFE)) >> 1;
	*sel_negedge_out = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u32 rfic_regs_bt_adc_spare_bt_adc_spare_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_SPARE_ADDR);

	return (u32)((local_val & ((u32)0xFFFFFFFE)) >> 1);
}

static inline void rfic_regs_bt_adc_spare_bt_adc_spare_setf(struct cl_chip *chip, u32 btadcspare)
{
	ASSERT_ERR_CHIP((((u32)btadcspare << 1) & ~((u32)0xFFFFFFFE)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_SPARE_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_SPARE_ADDR) & ~((u32)0xFFFFFFFE)) | ((u32)btadcspare << 1));
}

#define RFIC_REGS_BT_ADC_SPARE_BT_ADC_SPARE .addr_index = 0x000001B9, .size_minus_1 = (31 - 1), .shift = 1

static inline u8 rfic_regs_bt_adc_spare_sel_negedge_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_SPARE_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_bt_adc_spare_sel_negedge_out_setf(struct cl_chip *chip, u8 selnegedgeout)
{
	ASSERT_ERR_CHIP((((u32)selnegedgeout << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ADC_SPARE_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ADC_SPARE_ADDR) & ~((u32)0x00000001)) | ((u32)selnegedgeout << 0));
}

#define RFIC_REGS_BT_ADC_SPARE_SEL_NEGEDGE_OUT .addr_index = 0x000001B9, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief BT_DCOC_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    02    BT_spare1_out             00000000
 *    01    BT_bb_dcoc_comp_Q         00000000
 *    00    BT_bb_dcoc_comp_I         00000000
 * </pre>
 */
#define RFIC_REGS_BT_DCOC_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006E8)
#define RFIC_REGS_BT_DCOC_OUT_OFFSET      0x000006E8
#define RFIC_REGS_BT_DCOC_OUT_INDEX       0x000001BA
#define RFIC_REGS_BT_DCOC_OUT_RESET       0x00000000

static inline u32 rfic_regs_bt_dcoc_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_DCOC_OUT_ADDR);
}

#define RFIC_REGS_BT_DCOC_OUT .addr_index = 0x000001BA, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_DCOC_OUT_BT_SPARE_1_OUT_BIT    ((u32)0x00000004)
#define RFIC_REGS_BT_DCOC_OUT_BT_SPARE_1_OUT_POS    2
#define RFIC_REGS_BT_DCOC_OUT_BT_BB_DCOC_COMP_Q_BIT    ((u32)0x00000002)
#define RFIC_REGS_BT_DCOC_OUT_BT_BB_DCOC_COMP_Q_POS    1
#define RFIC_REGS_BT_DCOC_OUT_BT_BB_DCOC_COMP_I_BIT    ((u32)0x00000001)
#define RFIC_REGS_BT_DCOC_OUT_BT_BB_DCOC_COMP_I_POS    0

#define RFIC_REGS_BT_DCOC_OUT_BT_SPARE_1_OUT_RST    0x00000000
#define RFIC_REGS_BT_DCOC_OUT_BT_BB_DCOC_COMP_Q_RST    0x00000000
#define RFIC_REGS_BT_DCOC_OUT_BT_BB_DCOC_COMP_I_RST    0x00000000

static inline void rfic_regs_bt_dcoc_out_unpack(struct cl_chip *chip, u8 *bt_spare1_out, u8 *bt_bb_dcoc_comp_q, u8 *bt_bb_dcoc_comp_i)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DCOC_OUT_ADDR);

	*bt_spare1_out = (local_val & ((u32)0x00000004)) >> 2;
	*bt_bb_dcoc_comp_q = (local_val & ((u32)0x00000002)) >> 1;
	*bt_bb_dcoc_comp_i = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_bt_dcoc_out_bt_spare_1_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DCOC_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

#define RFIC_REGS_BT_DCOC_OUT_BT_SPARE_1_OUT .addr_index = 0x000001BA, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_bt_dcoc_out_bt_bb_dcoc_comp_q_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DCOC_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

#define RFIC_REGS_BT_DCOC_OUT_BT_BB_DCOC_COMP_Q .addr_index = 0x000001BA, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_bt_dcoc_out_bt_bb_dcoc_comp_i_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_DCOC_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

#define RFIC_REGS_BT_DCOC_OUT_BT_BB_DCOC_COMP_I .addr_index = 0x000001BA, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief BT_ADC_STATUS register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    02    BT_adc_ovfq               00000000
 *    01    BT_adc_ovfi               00000000
 *    00    BT_spare2_out             00000000
 * </pre>
 */
#define RFIC_REGS_BT_ADC_STATUS_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006EC)
#define RFIC_REGS_BT_ADC_STATUS_OFFSET      0x000006EC
#define RFIC_REGS_BT_ADC_STATUS_INDEX       0x000001BB
#define RFIC_REGS_BT_ADC_STATUS_RESET       0x00000000

static inline u32 rfic_regs_bt_adc_status_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_ADC_STATUS_ADDR);
}

#define RFIC_REGS_BT_ADC_STATUS .addr_index = 0x000001BB, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_ADC_STATUS_BT_ADC_OVFQ_BIT    ((u32)0x00000004)
#define RFIC_REGS_BT_ADC_STATUS_BT_ADC_OVFQ_POS    2
#define RFIC_REGS_BT_ADC_STATUS_BT_ADC_OVFI_BIT    ((u32)0x00000002)
#define RFIC_REGS_BT_ADC_STATUS_BT_ADC_OVFI_POS    1
#define RFIC_REGS_BT_ADC_STATUS_BT_SPARE_2_OUT_BIT    ((u32)0x00000001)
#define RFIC_REGS_BT_ADC_STATUS_BT_SPARE_2_OUT_POS    0

#define RFIC_REGS_BT_ADC_STATUS_BT_ADC_OVFQ_RST    0x00000000
#define RFIC_REGS_BT_ADC_STATUS_BT_ADC_OVFI_RST    0x00000000
#define RFIC_REGS_BT_ADC_STATUS_BT_SPARE_2_OUT_RST    0x00000000

static inline void rfic_regs_bt_adc_status_unpack(struct cl_chip *chip, u8 *bt_adc_ovfq, u8 *bt_adc_ovfi, u8 *bt_spare2_out)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_STATUS_ADDR);

	*bt_adc_ovfq = (local_val & ((u32)0x00000004)) >> 2;
	*bt_adc_ovfi = (local_val & ((u32)0x00000002)) >> 1;
	*bt_spare2_out = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_bt_adc_status_bt_adc_ovfq_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_STATUS_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

#define RFIC_REGS_BT_ADC_STATUS_BT_ADC_OVFQ .addr_index = 0x000001BB, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_bt_adc_status_bt_adc_ovfi_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_STATUS_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

#define RFIC_REGS_BT_ADC_STATUS_BT_ADC_OVFI .addr_index = 0x000001BB, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_bt_adc_status_bt_spare_2_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ADC_STATUS_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

#define RFIC_REGS_BT_ADC_STATUS_BT_SPARE_2_OUT .addr_index = 0x000001BB, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief RF_FEM_BT_LNA_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:30 BT_rx_lna_vcurstr         0x00000000
 *    29:26 BT_rx_lna_vcasc_ctrl      0x00000000
 *    25    BT_spare24_in             00000000
 *    24    BT_rx_lna_ldo14_en        00000000
 *    23    BT_rx_lna_ldo10_en        00000000
 *    22:19 BT_rx_lna_deq_res         0x00000000
 *    18:15 BT_rx_lna_cur_ctrl        0x00000000
 *    14:11 BT_rx_lna_cb_sec          0x00000000
 *    10:09 BT_spare23_in             0x00000000
 *    08:05 BT_rx_lna_cb_pr           0x00000000
 *    04:02 BT_rx_gm_cur_ctrl         0x00000000
 *    01    BT_rx_lna_en              00000000
 *    00    BT_rx_gm_en               00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006F0)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_OFFSET      0x000006F0
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_INDEX       0x000001BC
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_bt_lna_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR, value);
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0 .addr_index = 0x000001BC, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_VCURSTR_MASK    ((u32)0xC0000000)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_VCURSTR_LSB    30
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_VCURSTR_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_VCASC_CTRL_MASK    ((u32)0x3C000000)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_VCASC_CTRL_LSB    26
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_VCASC_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_SPARE_24_IN_BIT    ((u32)0x02000000)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_SPARE_24_IN_POS    25
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_LDO_14_EN_BIT    ((u32)0x01000000)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_LDO_14_EN_POS    24
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_LDO_10_EN_BIT    ((u32)0x00800000)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_LDO_10_EN_POS    23
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_DEQ_RES_MASK    ((u32)0x00780000)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_DEQ_RES_LSB    19
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_DEQ_RES_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_CUR_CTRL_MASK    ((u32)0x00078000)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_CUR_CTRL_LSB    15
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_CUR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_CB_SEC_MASK    ((u32)0x00007800)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_CB_SEC_LSB    11
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_CB_SEC_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_SPARE_23_IN_MASK    ((u32)0x00000600)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_SPARE_23_IN_LSB    9
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_SPARE_23_IN_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_CB_PR_MASK    ((u32)0x000001E0)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_CB_PR_LSB    5
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_CB_PR_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_GM_CUR_CTRL_MASK    ((u32)0x0000001C)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_GM_CUR_CTRL_LSB    2
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_GM_CUR_CTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_EN_BIT    ((u32)0x00000002)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_EN_POS    1
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_GM_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_GM_EN_POS    0

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_VCURSTR_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_VCASC_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_SPARE_24_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_LDO_14_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_LDO_10_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_DEQ_RES_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_CUR_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_CB_SEC_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_SPARE_23_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_CB_PR_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_GM_CUR_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_GM_EN_RST    0x00000000

static inline void rfic_regs_rf_fem_bt_lna_ctrl_0_pack(struct cl_chip *chip, u8 bt_rx_lna_vcurstr, u8 bt_rx_lna_vcasc_ctrl, u8 bt_spare24_in, u8 bt_rx_lna_ldo14_en, u8 bt_rx_lna_ldo10_en, u8 bt_rx_lna_deq_res, u8 bt_rx_lna_cur_ctrl, u8 bt_rx_lna_cb_sec, u8 bt_spare23_in, u8 bt_rx_lna_cb_pr, u8 bt_rx_gm_cur_ctrl, u8 bt_rx_lna_en, u8 bt_rx_gm_en)
{
	ASSERT_ERR_CHIP((((u32)bt_rx_lna_vcurstr << 30) & ~((u32)0xC0000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_lna_vcasc_ctrl << 26) & ~((u32)0x3C000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare24_in << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_lna_ldo14_en << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_lna_ldo10_en << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_lna_deq_res << 19) & ~((u32)0x00780000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_lna_cur_ctrl << 15) & ~((u32)0x00078000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_lna_cb_sec << 11) & ~((u32)0x00007800)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare23_in << 9) & ~((u32)0x00000600)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_lna_cb_pr << 5) & ~((u32)0x000001E0)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_gm_cur_ctrl << 2) & ~((u32)0x0000001C)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_lna_en << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_gm_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR, ((u32)bt_rx_lna_vcurstr << 30) | ((u32)bt_rx_lna_vcasc_ctrl << 26) | ((u32)bt_spare24_in << 25) | ((u32)bt_rx_lna_ldo14_en << 24) | ((u32)bt_rx_lna_ldo10_en << 23) | ((u32)bt_rx_lna_deq_res << 19) | ((u32)bt_rx_lna_cur_ctrl << 15) | ((u32)bt_rx_lna_cb_sec << 11) | ((u32)bt_spare23_in << 9) | ((u32)bt_rx_lna_cb_pr << 5) | ((u32)bt_rx_gm_cur_ctrl << 2) | ((u32)bt_rx_lna_en << 1) | ((u32)bt_rx_gm_en << 0));
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_0_unpack(struct cl_chip *chip, u8 *bt_rx_lna_vcurstr, u8 *bt_rx_lna_vcasc_ctrl, u8 *bt_spare24_in, u8 *bt_rx_lna_ldo14_en, u8 *bt_rx_lna_ldo10_en, u8 *bt_rx_lna_deq_res, u8 *bt_rx_lna_cur_ctrl, u8 *bt_rx_lna_cb_sec, u8 *bt_spare23_in, u8 *bt_rx_lna_cb_pr, u8 *bt_rx_gm_cur_ctrl, u8 *bt_rx_lna_en, u8 *bt_rx_gm_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR);

	*bt_rx_lna_vcurstr = (local_val & ((u32)0xC0000000)) >> 30;
	*bt_rx_lna_vcasc_ctrl = (local_val & ((u32)0x3C000000)) >> 26;
	*bt_spare24_in = (local_val & ((u32)0x02000000)) >> 25;
	*bt_rx_lna_ldo14_en = (local_val & ((u32)0x01000000)) >> 24;
	*bt_rx_lna_ldo10_en = (local_val & ((u32)0x00800000)) >> 23;
	*bt_rx_lna_deq_res = (local_val & ((u32)0x00780000)) >> 19;
	*bt_rx_lna_cur_ctrl = (local_val & ((u32)0x00078000)) >> 15;
	*bt_rx_lna_cb_sec = (local_val & ((u32)0x00007800)) >> 11;
	*bt_spare23_in = (local_val & ((u32)0x00000600)) >> 9;
	*bt_rx_lna_cb_pr = (local_val & ((u32)0x000001E0)) >> 5;
	*bt_rx_gm_cur_ctrl = (local_val & ((u32)0x0000001C)) >> 2;
	*bt_rx_lna_en = (local_val & ((u32)0x00000002)) >> 1;
	*bt_rx_gm_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_vcurstr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0xC0000000)) >> 30);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_vcurstr_setf(struct cl_chip *chip, u8 btrxlnavcurstr)
{
	ASSERT_ERR_CHIP((((u32)btrxlnavcurstr << 30) & ~((u32)0xC0000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR) & ~((u32)0xC0000000)) | ((u32)btrxlnavcurstr << 30));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_VCURSTR .addr_index = 0x000001BC, .size_minus_1 = (2 - 1), .shift = 30

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_vcasc_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x3C000000)) >> 26);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_vcasc_ctrl_setf(struct cl_chip *chip, u8 btrxlnavcascctrl)
{
	ASSERT_ERR_CHIP((((u32)btrxlnavcascctrl << 26) & ~((u32)0x3C000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR) & ~((u32)0x3C000000)) | ((u32)btrxlnavcascctrl << 26));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_VCASC_CTRL .addr_index = 0x000001BC, .size_minus_1 = (4 - 1), .shift = 26

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_0_bt_spare_24_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_0_bt_spare_24_in_setf(struct cl_chip *chip, u8 btspare24in)
{
	ASSERT_ERR_CHIP((((u32)btspare24in << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR) & ~((u32)0x02000000)) | ((u32)btspare24in << 25));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_SPARE_24_IN .addr_index = 0x000001BC, .size_minus_1 = (1 - 1), .shift = 25

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_ldo_14_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_ldo_14_en_setf(struct cl_chip *chip, u8 btrxlnaldo14en)
{
	ASSERT_ERR_CHIP((((u32)btrxlnaldo14en << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR) & ~((u32)0x01000000)) | ((u32)btrxlnaldo14en << 24));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_LDO_14_EN .addr_index = 0x000001BC, .size_minus_1 = (1 - 1), .shift = 24

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_ldo_10_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_ldo_10_en_setf(struct cl_chip *chip, u8 btrxlnaldo10en)
{
	ASSERT_ERR_CHIP((((u32)btrxlnaldo10en << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR) & ~((u32)0x00800000)) | ((u32)btrxlnaldo10en << 23));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_LDO_10_EN .addr_index = 0x000001BC, .size_minus_1 = (1 - 1), .shift = 23

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_deq_res_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00780000)) >> 19);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_deq_res_setf(struct cl_chip *chip, u8 btrxlnadeqres)
{
	ASSERT_ERR_CHIP((((u32)btrxlnadeqres << 19) & ~((u32)0x00780000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR) & ~((u32)0x00780000)) | ((u32)btrxlnadeqres << 19));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_DEQ_RES .addr_index = 0x000001BC, .size_minus_1 = (4 - 1), .shift = 19

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_cur_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00078000)) >> 15);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_cur_ctrl_setf(struct cl_chip *chip, u8 btrxlnacurctrl)
{
	ASSERT_ERR_CHIP((((u32)btrxlnacurctrl << 15) & ~((u32)0x00078000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR) & ~((u32)0x00078000)) | ((u32)btrxlnacurctrl << 15));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_CUR_CTRL .addr_index = 0x000001BC, .size_minus_1 = (4 - 1), .shift = 15

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_cb_sec_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00007800)) >> 11);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_cb_sec_setf(struct cl_chip *chip, u8 btrxlnacbsec)
{
	ASSERT_ERR_CHIP((((u32)btrxlnacbsec << 11) & ~((u32)0x00007800)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR) & ~((u32)0x00007800)) | ((u32)btrxlnacbsec << 11));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_CB_SEC .addr_index = 0x000001BC, .size_minus_1 = (4 - 1), .shift = 11

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_0_bt_spare_23_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000600)) >> 9);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_0_bt_spare_23_in_setf(struct cl_chip *chip, u8 btspare23in)
{
	ASSERT_ERR_CHIP((((u32)btspare23in << 9) & ~((u32)0x00000600)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR) & ~((u32)0x00000600)) | ((u32)btspare23in << 9));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_SPARE_23_IN .addr_index = 0x000001BC, .size_minus_1 = (2 - 1), .shift = 9

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_cb_pr_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x000001E0)) >> 5);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_cb_pr_setf(struct cl_chip *chip, u8 btrxlnacbpr)
{
	ASSERT_ERR_CHIP((((u32)btrxlnacbpr << 5) & ~((u32)0x000001E0)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR) & ~((u32)0x000001E0)) | ((u32)btrxlnacbpr << 5));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_CB_PR .addr_index = 0x000001BC, .size_minus_1 = (4 - 1), .shift = 5

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_gm_cur_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000001C)) >> 2);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_gm_cur_ctrl_setf(struct cl_chip *chip, u8 btrxgmcurctrl)
{
	ASSERT_ERR_CHIP((((u32)btrxgmcurctrl << 2) & ~((u32)0x0000001C)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR) & ~((u32)0x0000001C)) | ((u32)btrxgmcurctrl << 2));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_GM_CUR_CTRL .addr_index = 0x000001BC, .size_minus_1 = (3 - 1), .shift = 2

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_lna_en_setf(struct cl_chip *chip, u8 btrxlnaen)
{
	ASSERT_ERR_CHIP((((u32)btrxlnaen << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR) & ~((u32)0x00000002)) | ((u32)btrxlnaen << 1));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_LNA_EN .addr_index = 0x000001BC, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_gm_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_0_bt_rx_gm_en_setf(struct cl_chip *chip, u8 btrxgmen)
{
	ASSERT_ERR_CHIP((((u32)btrxgmen << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)btrxgmen << 0));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_0_BT_RX_GM_EN .addr_index = 0x000001BC, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief RF_FEM_BT_LNA_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    BT_loopbk_phase_shifter_ctrl 00000000
 *    28:25 BT_loopbk_atten_ctrl      0x00000000
 *    24:22 BT_loopbk_amp_gc          0x00000000
 *    21:18 BT_rx_gm_gain_ctrl        0x00000000
 *    17    BT_spare26_in             00000000
 *    16:12 BT_rx_lna_vbody_ctrl      0x00000000
 *    11    BT_rx_gm_5d_B_en          00000000
 *    10    BT_spare25_in             00000000
 *    09    BT_rx_lna_rxrf_ptat_sel   00000000
 *    08    BT_rx_lna_bias_en         00000000
 *    07    BT_rx_lna_opamp_bias_sel  00000000
 *    06    BT_rx_gm_opamp_bias_sel   00000000
 *    05:02 BT_rx_lna_s11capctrl      0x00000000
 *    01:00 BT_rx_lna_vdd10sel        0x00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006F4)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_OFFSET      0x000006F4
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_INDEX       0x000001BD
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_bt_lna_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR, value);
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1 .addr_index = 0x000001BD, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_LOOPBK_PHASE_SHIFTER_CTRL_BIT    ((u32)0x20000000)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_LOOPBK_PHASE_SHIFTER_CTRL_POS    29
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_LOOPBK_ATTEN_CTRL_MASK    ((u32)0x1E000000)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_LOOPBK_ATTEN_CTRL_LSB    25
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_LOOPBK_ATTEN_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_LOOPBK_AMP_GC_MASK    ((u32)0x01C00000)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_LOOPBK_AMP_GC_LSB    22
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_LOOPBK_AMP_GC_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_GM_GAIN_CTRL_MASK    ((u32)0x003C0000)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_GM_GAIN_CTRL_LSB    18
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_GM_GAIN_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_SPARE_26_IN_BIT    ((u32)0x00020000)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_SPARE_26_IN_POS    17
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_VBODY_CTRL_MASK    ((u32)0x0001F000)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_VBODY_CTRL_LSB    12
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_VBODY_CTRL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_GM_5_D_B_EN_BIT    ((u32)0x00000800)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_GM_5_D_B_EN_POS    11
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_SPARE_25_IN_BIT    ((u32)0x00000400)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_SPARE_25_IN_POS    10
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_RXRF_PTAT_SEL_BIT    ((u32)0x00000200)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_RXRF_PTAT_SEL_POS    9
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_BIAS_EN_BIT    ((u32)0x00000100)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_BIAS_EN_POS    8
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_OPAMP_BIAS_SEL_BIT    ((u32)0x00000080)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_OPAMP_BIAS_SEL_POS    7
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_GM_OPAMP_BIAS_SEL_BIT    ((u32)0x00000040)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_GM_OPAMP_BIAS_SEL_POS    6
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_S_11_CAPCTRL_MASK    ((u32)0x0000003C)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_S_11_CAPCTRL_LSB    2
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_S_11_CAPCTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_VDD_10_SEL_MASK    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_VDD_10_SEL_LSB    0
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_VDD_10_SEL_WIDTH    ((u32)0x00000002)

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_LOOPBK_PHASE_SHIFTER_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_LOOPBK_ATTEN_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_LOOPBK_AMP_GC_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_GM_GAIN_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_SPARE_26_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_VBODY_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_GM_5_D_B_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_SPARE_25_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_RXRF_PTAT_SEL_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_BIAS_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_OPAMP_BIAS_SEL_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_GM_OPAMP_BIAS_SEL_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_S_11_CAPCTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_VDD_10_SEL_RST    0x00000000

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_pack(struct cl_chip *chip, u8 bt_loopbk_phase_shifter_ctrl, u8 bt_loopbk_atten_ctrl, u8 bt_loopbk_amp_gc, u8 bt_rx_gm_gain_ctrl, u8 bt_spare26_in, u8 bt_rx_lna_vbody_ctrl, u8 bt_rx_gm_5d_b_en, u8 bt_spare25_in, u8 bt_rx_lna_rxrf_ptat_sel, u8 bt_rx_lna_bias_en, u8 bt_rx_lna_opamp_bias_sel, u8 bt_rx_gm_opamp_bias_sel, u8 bt_rx_lna_s11capctrl, u8 bt_rx_lna_vdd10sel)
{
	ASSERT_ERR_CHIP((((u32)bt_loopbk_phase_shifter_ctrl << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_loopbk_atten_ctrl << 25) & ~((u32)0x1E000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_loopbk_amp_gc << 22) & ~((u32)0x01C00000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_gm_gain_ctrl << 18) & ~((u32)0x003C0000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare26_in << 17) & ~((u32)0x00020000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_lna_vbody_ctrl << 12) & ~((u32)0x0001F000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_gm_5d_b_en << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare25_in << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_lna_rxrf_ptat_sel << 9) & ~((u32)0x00000200)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_lna_bias_en << 8) & ~((u32)0x00000100)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_lna_opamp_bias_sel << 7) & ~((u32)0x00000080)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_gm_opamp_bias_sel << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_lna_s11capctrl << 2) & ~((u32)0x0000003C)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_lna_vdd10sel << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR, ((u32)bt_loopbk_phase_shifter_ctrl << 29) | ((u32)bt_loopbk_atten_ctrl << 25) | ((u32)bt_loopbk_amp_gc << 22) | ((u32)bt_rx_gm_gain_ctrl << 18) | ((u32)bt_spare26_in << 17) | ((u32)bt_rx_lna_vbody_ctrl << 12) | ((u32)bt_rx_gm_5d_b_en << 11) | ((u32)bt_spare25_in << 10) | ((u32)bt_rx_lna_rxrf_ptat_sel << 9) | ((u32)bt_rx_lna_bias_en << 8) | ((u32)bt_rx_lna_opamp_bias_sel << 7) | ((u32)bt_rx_gm_opamp_bias_sel << 6) | ((u32)bt_rx_lna_s11capctrl << 2) | ((u32)bt_rx_lna_vdd10sel << 0));
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_unpack(struct cl_chip *chip, u8 *bt_loopbk_phase_shifter_ctrl, u8 *bt_loopbk_atten_ctrl, u8 *bt_loopbk_amp_gc, u8 *bt_rx_gm_gain_ctrl, u8 *bt_spare26_in, u8 *bt_rx_lna_vbody_ctrl, u8 *bt_rx_gm_5d_b_en, u8 *bt_spare25_in, u8 *bt_rx_lna_rxrf_ptat_sel, u8 *bt_rx_lna_bias_en, u8 *bt_rx_lna_opamp_bias_sel, u8 *bt_rx_gm_opamp_bias_sel, u8 *bt_rx_lna_s11capctrl, u8 *bt_rx_lna_vdd10sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR);

	*bt_loopbk_phase_shifter_ctrl = (local_val & ((u32)0x20000000)) >> 29;
	*bt_loopbk_atten_ctrl = (local_val & ((u32)0x1E000000)) >> 25;
	*bt_loopbk_amp_gc = (local_val & ((u32)0x01C00000)) >> 22;
	*bt_rx_gm_gain_ctrl = (local_val & ((u32)0x003C0000)) >> 18;
	*bt_spare26_in = (local_val & ((u32)0x00020000)) >> 17;
	*bt_rx_lna_vbody_ctrl = (local_val & ((u32)0x0001F000)) >> 12;
	*bt_rx_gm_5d_b_en = (local_val & ((u32)0x00000800)) >> 11;
	*bt_spare25_in = (local_val & ((u32)0x00000400)) >> 10;
	*bt_rx_lna_rxrf_ptat_sel = (local_val & ((u32)0x00000200)) >> 9;
	*bt_rx_lna_bias_en = (local_val & ((u32)0x00000100)) >> 8;
	*bt_rx_lna_opamp_bias_sel = (local_val & ((u32)0x00000080)) >> 7;
	*bt_rx_gm_opamp_bias_sel = (local_val & ((u32)0x00000040)) >> 6;
	*bt_rx_lna_s11capctrl = (local_val & ((u32)0x0000003C)) >> 2;
	*bt_rx_lna_vdd10sel = (local_val & ((u32)0x00000003)) >> 0;
}

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_1_bt_loopbk_phase_shifter_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_bt_loopbk_phase_shifter_ctrl_setf(struct cl_chip *chip, u8 btloopbkphaseshifterctrl)
{
	ASSERT_ERR_CHIP((((u32)btloopbkphaseshifterctrl << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR) & ~((u32)0x20000000)) | ((u32)btloopbkphaseshifterctrl << 29));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_LOOPBK_PHASE_SHIFTER_CTRL .addr_index = 0x000001BD, .size_minus_1 = (1 - 1), .shift = 29

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_1_bt_loopbk_atten_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x1E000000)) >> 25);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_bt_loopbk_atten_ctrl_setf(struct cl_chip *chip, u8 btloopbkattenctrl)
{
	ASSERT_ERR_CHIP((((u32)btloopbkattenctrl << 25) & ~((u32)0x1E000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR) & ~((u32)0x1E000000)) | ((u32)btloopbkattenctrl << 25));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_LOOPBK_ATTEN_CTRL .addr_index = 0x000001BD, .size_minus_1 = (4 - 1), .shift = 25

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_1_bt_loopbk_amp_gc_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x01C00000)) >> 22);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_bt_loopbk_amp_gc_setf(struct cl_chip *chip, u8 btloopbkampgc)
{
	ASSERT_ERR_CHIP((((u32)btloopbkampgc << 22) & ~((u32)0x01C00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR) & ~((u32)0x01C00000)) | ((u32)btloopbkampgc << 22));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_LOOPBK_AMP_GC .addr_index = 0x000001BD, .size_minus_1 = (3 - 1), .shift = 22

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_gm_gain_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x003C0000)) >> 18);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_gm_gain_ctrl_setf(struct cl_chip *chip, u8 btrxgmgainctrl)
{
	ASSERT_ERR_CHIP((((u32)btrxgmgainctrl << 18) & ~((u32)0x003C0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR) & ~((u32)0x003C0000)) | ((u32)btrxgmgainctrl << 18));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_GM_GAIN_CTRL .addr_index = 0x000001BD, .size_minus_1 = (4 - 1), .shift = 18

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_1_bt_spare_26_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00020000)) >> 17);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_bt_spare_26_in_setf(struct cl_chip *chip, u8 btspare26in)
{
	ASSERT_ERR_CHIP((((u32)btspare26in << 17) & ~((u32)0x00020000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR) & ~((u32)0x00020000)) | ((u32)btspare26in << 17));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_SPARE_26_IN .addr_index = 0x000001BD, .size_minus_1 = (1 - 1), .shift = 17

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_lna_vbody_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0001F000)) >> 12);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_lna_vbody_ctrl_setf(struct cl_chip *chip, u8 btrxlnavbodyctrl)
{
	ASSERT_ERR_CHIP((((u32)btrxlnavbodyctrl << 12) & ~((u32)0x0001F000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR) & ~((u32)0x0001F000)) | ((u32)btrxlnavbodyctrl << 12));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_VBODY_CTRL .addr_index = 0x000001BD, .size_minus_1 = (5 - 1), .shift = 12

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_gm_5_d_b_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_gm_5_d_b_en_setf(struct cl_chip *chip, u8 btrxgm5dben)
{
	ASSERT_ERR_CHIP((((u32)btrxgm5dben << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR) & ~((u32)0x00000800)) | ((u32)btrxgm5dben << 11));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_GM_5_D_B_EN .addr_index = 0x000001BD, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_1_bt_spare_25_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_bt_spare_25_in_setf(struct cl_chip *chip, u8 btspare25in)
{
	ASSERT_ERR_CHIP((((u32)btspare25in << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR) & ~((u32)0x00000400)) | ((u32)btspare25in << 10));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_SPARE_25_IN .addr_index = 0x000001BD, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_lna_rxrf_ptat_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_lna_rxrf_ptat_sel_setf(struct cl_chip *chip, u8 btrxlnarxrfptatsel)
{
	ASSERT_ERR_CHIP((((u32)btrxlnarxrfptatsel << 9) & ~((u32)0x00000200)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR) & ~((u32)0x00000200)) | ((u32)btrxlnarxrfptatsel << 9));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_RXRF_PTAT_SEL .addr_index = 0x000001BD, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_lna_bias_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_lna_bias_en_setf(struct cl_chip *chip, u8 btrxlnabiasen)
{
	ASSERT_ERR_CHIP((((u32)btrxlnabiasen << 8) & ~((u32)0x00000100)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR) & ~((u32)0x00000100)) | ((u32)btrxlnabiasen << 8));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_BIAS_EN .addr_index = 0x000001BD, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_lna_opamp_bias_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000080)) >> 7);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_lna_opamp_bias_sel_setf(struct cl_chip *chip, u8 btrxlnaopampbiassel)
{
	ASSERT_ERR_CHIP((((u32)btrxlnaopampbiassel << 7) & ~((u32)0x00000080)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR) & ~((u32)0x00000080)) | ((u32)btrxlnaopampbiassel << 7));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_OPAMP_BIAS_SEL .addr_index = 0x000001BD, .size_minus_1 = (1 - 1), .shift = 7

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_gm_opamp_bias_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_gm_opamp_bias_sel_setf(struct cl_chip *chip, u8 btrxgmopampbiassel)
{
	ASSERT_ERR_CHIP((((u32)btrxgmopampbiassel << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR) & ~((u32)0x00000040)) | ((u32)btrxgmopampbiassel << 6));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_GM_OPAMP_BIAS_SEL .addr_index = 0x000001BD, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_lna_s_11_capctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0000003C)) >> 2);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_lna_s_11_capctrl_setf(struct cl_chip *chip, u8 btrxlnas11capctrl)
{
	ASSERT_ERR_CHIP((((u32)btrxlnas11capctrl << 2) & ~((u32)0x0000003C)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR) & ~((u32)0x0000003C)) | ((u32)btrxlnas11capctrl << 2));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_S_11_CAPCTRL .addr_index = 0x000001BD, .size_minus_1 = (4 - 1), .shift = 2

static inline u8 rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_lna_vdd_10_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000003)) >> 0);
}

static inline void rfic_regs_rf_fem_bt_lna_ctrl_1_bt_rx_lna_vdd_10_sel_setf(struct cl_chip *chip, u8 btrxlnavdd10sel)
{
	ASSERT_ERR_CHIP((((u32)btrxlnavdd10sel << 0) & ~((u32)0x00000003)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_ADDR) & ~((u32)0x00000003)) | ((u32)btrxlnavdd10sel << 0));
}

#define RFIC_REGS_RF_FEM_BT_LNA_CTRL_1_BT_RX_LNA_VDD_10_SEL .addr_index = 0x000001BD, .size_minus_1 = (2 - 1), .shift = 0

/**
 * @brief RF_FEM_BT_PA_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    12    BT_tx_loopbk_sw_en        00000000
 *    11    BT_rx_loopbk_sw_en        00000000
 *    10:07 BT_tx_prepa_rctrl         0x00000000
 *    06    BT_tx_pa_slice_ctrl       00000000
 *    05:03 BT_spare27_in             0x00000000
 *    02:00 BT_tx_pa_cap_ctrl         0x00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006F8)
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_OFFSET      0x000006F8
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_INDEX       0x000001BE
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_bt_pa_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR);
}

static inline void rfic_regs_rf_fem_bt_pa_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR, value);
}

#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0 .addr_index = 0x000001BE, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_LOOPBK_SW_EN_BIT    ((u32)0x00001000)
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_LOOPBK_SW_EN_POS    12
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_RX_LOOPBK_SW_EN_BIT    ((u32)0x00000800)
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_RX_LOOPBK_SW_EN_POS    11
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_PREPA_RCTRL_MASK    ((u32)0x00000780)
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_PREPA_RCTRL_LSB    7
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_PREPA_RCTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_PA_SLICE_CTRL_BIT    ((u32)0x00000040)
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_PA_SLICE_CTRL_POS    6
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_SPARE_27_IN_MASK    ((u32)0x00000038)
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_SPARE_27_IN_LSB    3
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_SPARE_27_IN_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_PA_CAP_CTRL_MASK    ((u32)0x00000007)
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_PA_CAP_CTRL_LSB    0
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_PA_CAP_CTRL_WIDTH    ((u32)0x00000003)

#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_LOOPBK_SW_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_RX_LOOPBK_SW_EN_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_PREPA_RCTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_PA_SLICE_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_SPARE_27_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_PA_CAP_CTRL_RST    0x00000000

static inline void rfic_regs_rf_fem_bt_pa_ctrl_0_pack(struct cl_chip *chip, u8 bt_tx_loopbk_sw_en, u8 bt_rx_loopbk_sw_en, u8 bt_tx_prepa_rctrl, u8 bt_tx_pa_slice_ctrl, u8 bt_spare27_in, u8 bt_tx_pa_cap_ctrl)
{
	ASSERT_ERR_CHIP((((u32)bt_tx_loopbk_sw_en << 12) & ~((u32)0x00001000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_rx_loopbk_sw_en << 11) & ~((u32)0x00000800)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_prepa_rctrl << 7) & ~((u32)0x00000780)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_pa_slice_ctrl << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare27_in << 3) & ~((u32)0x00000038)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_pa_cap_ctrl << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR, ((u32)bt_tx_loopbk_sw_en << 12) | ((u32)bt_rx_loopbk_sw_en << 11) | ((u32)bt_tx_prepa_rctrl << 7) | ((u32)bt_tx_pa_slice_ctrl << 6) | ((u32)bt_spare27_in << 3) | ((u32)bt_tx_pa_cap_ctrl << 0));
}

static inline void rfic_regs_rf_fem_bt_pa_ctrl_0_unpack(struct cl_chip *chip, u8 *bt_tx_loopbk_sw_en, u8 *bt_rx_loopbk_sw_en, u8 *bt_tx_prepa_rctrl, u8 *bt_tx_pa_slice_ctrl, u8 *bt_spare27_in, u8 *bt_tx_pa_cap_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR);

	*bt_tx_loopbk_sw_en = (local_val & ((u32)0x00001000)) >> 12;
	*bt_rx_loopbk_sw_en = (local_val & ((u32)0x00000800)) >> 11;
	*bt_tx_prepa_rctrl = (local_val & ((u32)0x00000780)) >> 7;
	*bt_tx_pa_slice_ctrl = (local_val & ((u32)0x00000040)) >> 6;
	*bt_spare27_in = (local_val & ((u32)0x00000038)) >> 3;
	*bt_tx_pa_cap_ctrl = (local_val & ((u32)0x00000007)) >> 0;
}

static inline u8 rfic_regs_rf_fem_bt_pa_ctrl_0_bt_tx_loopbk_sw_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00001000)) >> 12);
}

static inline void rfic_regs_rf_fem_bt_pa_ctrl_0_bt_tx_loopbk_sw_en_setf(struct cl_chip *chip, u8 bttxloopbkswen)
{
	ASSERT_ERR_CHIP((((u32)bttxloopbkswen << 12) & ~((u32)0x00001000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR) & ~((u32)0x00001000)) | ((u32)bttxloopbkswen << 12));
}

#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_LOOPBK_SW_EN .addr_index = 0x000001BE, .size_minus_1 = (1 - 1), .shift = 12

static inline u8 rfic_regs_rf_fem_bt_pa_ctrl_0_bt_rx_loopbk_sw_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000800)) >> 11);
}

static inline void rfic_regs_rf_fem_bt_pa_ctrl_0_bt_rx_loopbk_sw_en_setf(struct cl_chip *chip, u8 btrxloopbkswen)
{
	ASSERT_ERR_CHIP((((u32)btrxloopbkswen << 11) & ~((u32)0x00000800)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR) & ~((u32)0x00000800)) | ((u32)btrxloopbkswen << 11));
}

#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_RX_LOOPBK_SW_EN .addr_index = 0x000001BE, .size_minus_1 = (1 - 1), .shift = 11

static inline u8 rfic_regs_rf_fem_bt_pa_ctrl_0_bt_tx_prepa_rctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000780)) >> 7);
}

static inline void rfic_regs_rf_fem_bt_pa_ctrl_0_bt_tx_prepa_rctrl_setf(struct cl_chip *chip, u8 bttxpreparctrl)
{
	ASSERT_ERR_CHIP((((u32)bttxpreparctrl << 7) & ~((u32)0x00000780)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR) & ~((u32)0x00000780)) | ((u32)bttxpreparctrl << 7));
}

#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_PREPA_RCTRL .addr_index = 0x000001BE, .size_minus_1 = (4 - 1), .shift = 7

static inline u8 rfic_regs_rf_fem_bt_pa_ctrl_0_bt_tx_pa_slice_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void rfic_regs_rf_fem_bt_pa_ctrl_0_bt_tx_pa_slice_ctrl_setf(struct cl_chip *chip, u8 bttxpaslicectrl)
{
	ASSERT_ERR_CHIP((((u32)bttxpaslicectrl << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR) & ~((u32)0x00000040)) | ((u32)bttxpaslicectrl << 6));
}

#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_PA_SLICE_CTRL .addr_index = 0x000001BE, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_rf_fem_bt_pa_ctrl_0_bt_spare_27_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000038)) >> 3);
}

static inline void rfic_regs_rf_fem_bt_pa_ctrl_0_bt_spare_27_in_setf(struct cl_chip *chip, u8 btspare27in)
{
	ASSERT_ERR_CHIP((((u32)btspare27in << 3) & ~((u32)0x00000038)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR) & ~((u32)0x00000038)) | ((u32)btspare27in << 3));
}

#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_SPARE_27_IN .addr_index = 0x000001BE, .size_minus_1 = (3 - 1), .shift = 3

static inline u8 rfic_regs_rf_fem_bt_pa_ctrl_0_bt_tx_pa_cap_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000007)) >> 0);
}

static inline void rfic_regs_rf_fem_bt_pa_ctrl_0_bt_tx_pa_cap_ctrl_setf(struct cl_chip *chip, u8 bttxpacapctrl)
{
	ASSERT_ERR_CHIP((((u32)bttxpacapctrl << 0) & ~((u32)0x00000007)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_CTRL_0_ADDR) & ~((u32)0x00000007)) | ((u32)bttxpacapctrl << 0));
}

#define RFIC_REGS_RF_FEM_BT_PA_CTRL_0_BT_TX_PA_CAP_CTRL .addr_index = 0x000001BE, .size_minus_1 = (3 - 1), .shift = 0

/**
 * @brief RF_FEM_BT_PA_2_P_5_G_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:27 BT_tx_pa_vg3_ctrl_pd      0x00000000
 *    26:22 BT_tx_pa_vg2_ctrl_pd      0x00000000
 *    21:16 BT_tx_pa_ib_ctrl          0x00000000
 *    15:11 BT_tx_pa_vg3_ctrl         0x00000000
 *    10:06 BT_tx_pa_vg2_ctrl         0x00000000
 *    05:01 BT_spare28_in             0x00000000
 *    00    BT_tx_pa_en               00000000
 * </pre>
 */
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000006FC)
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_OFFSET      0x000006FC
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_INDEX       0x000001BF
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR);
}

static inline void rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR, value);
}

#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0 .addr_index = 0x000001BF, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_3_CTRL_PD_MASK    ((u32)0xF8000000)
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_3_CTRL_PD_LSB    27
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_3_CTRL_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_2_CTRL_PD_MASK    ((u32)0x07C00000)
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_2_CTRL_PD_LSB    22
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_2_CTRL_PD_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_IB_CTRL_MASK    ((u32)0x003F0000)
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_IB_CTRL_LSB    16
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_IB_CTRL_WIDTH    ((u32)0x00000006)
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_3_CTRL_MASK    ((u32)0x0000F800)
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_3_CTRL_LSB    11
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_3_CTRL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_2_CTRL_MASK    ((u32)0x000007C0)
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_2_CTRL_LSB    6
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_2_CTRL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_SPARE_28_IN_MASK    ((u32)0x0000003E)
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_SPARE_28_IN_LSB    1
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_SPARE_28_IN_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_EN_POS    0

#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_3_CTRL_PD_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_2_CTRL_PD_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_IB_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_3_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_2_CTRL_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_SPARE_28_IN_RST    0x00000000
#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_EN_RST    0x00000000

static inline void rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_pack(struct cl_chip *chip, u8 bt_tx_pa_vg3_ctrl_pd, u8 bt_tx_pa_vg2_ctrl_pd, u8 bt_tx_pa_ib_ctrl, u8 bt_tx_pa_vg3_ctrl, u8 bt_tx_pa_vg2_ctrl, u8 bt_spare28_in, u8 bt_tx_pa_en)
{
	ASSERT_ERR_CHIP((((u32)bt_tx_pa_vg3_ctrl_pd << 27) & ~((u32)0xF8000000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_pa_vg2_ctrl_pd << 22) & ~((u32)0x07C00000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_pa_ib_ctrl << 16) & ~((u32)0x003F0000)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_pa_vg3_ctrl << 11) & ~((u32)0x0000F800)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_pa_vg2_ctrl << 6) & ~((u32)0x000007C0)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_spare28_in << 1) & ~((u32)0x0000003E)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_tx_pa_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR, ((u32)bt_tx_pa_vg3_ctrl_pd << 27) | ((u32)bt_tx_pa_vg2_ctrl_pd << 22) | ((u32)bt_tx_pa_ib_ctrl << 16) | ((u32)bt_tx_pa_vg3_ctrl << 11) | ((u32)bt_tx_pa_vg2_ctrl << 6) | ((u32)bt_spare28_in << 1) | ((u32)bt_tx_pa_en << 0));
}

static inline void rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_unpack(struct cl_chip *chip, u8 *bt_tx_pa_vg3_ctrl_pd, u8 *bt_tx_pa_vg2_ctrl_pd, u8 *bt_tx_pa_ib_ctrl, u8 *bt_tx_pa_vg3_ctrl, u8 *bt_tx_pa_vg2_ctrl, u8 *bt_spare28_in, u8 *bt_tx_pa_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR);

	*bt_tx_pa_vg3_ctrl_pd = (local_val & ((u32)0xF8000000)) >> 27;
	*bt_tx_pa_vg2_ctrl_pd = (local_val & ((u32)0x07C00000)) >> 22;
	*bt_tx_pa_ib_ctrl = (local_val & ((u32)0x003F0000)) >> 16;
	*bt_tx_pa_vg3_ctrl = (local_val & ((u32)0x0000F800)) >> 11;
	*bt_tx_pa_vg2_ctrl = (local_val & ((u32)0x000007C0)) >> 6;
	*bt_spare28_in = (local_val & ((u32)0x0000003E)) >> 1;
	*bt_tx_pa_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_bt_tx_pa_vg_3_ctrl_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0xF8000000)) >> 27);
}

static inline void rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_bt_tx_pa_vg_3_ctrl_pd_setf(struct cl_chip *chip, u8 bttxpavg3ctrlpd)
{
	ASSERT_ERR_CHIP((((u32)bttxpavg3ctrlpd << 27) & ~((u32)0xF8000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0xF8000000)) | ((u32)bttxpavg3ctrlpd << 27));
}

#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_3_CTRL_PD .addr_index = 0x000001BF, .size_minus_1 = (5 - 1), .shift = 27

static inline u8 rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_bt_tx_pa_vg_2_ctrl_pd_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x07C00000)) >> 22);
}

static inline void rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_bt_tx_pa_vg_2_ctrl_pd_setf(struct cl_chip *chip, u8 bttxpavg2ctrlpd)
{
	ASSERT_ERR_CHIP((((u32)bttxpavg2ctrlpd << 22) & ~((u32)0x07C00000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x07C00000)) | ((u32)bttxpavg2ctrlpd << 22));
}

#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_2_CTRL_PD .addr_index = 0x000001BF, .size_minus_1 = (5 - 1), .shift = 22

static inline u8 rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_bt_tx_pa_ib_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x003F0000)) >> 16);
}

static inline void rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_bt_tx_pa_ib_ctrl_setf(struct cl_chip *chip, u8 bttxpaibctrl)
{
	ASSERT_ERR_CHIP((((u32)bttxpaibctrl << 16) & ~((u32)0x003F0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x003F0000)) | ((u32)bttxpaibctrl << 16));
}

#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_IB_CTRL .addr_index = 0x000001BF, .size_minus_1 = (6 - 1), .shift = 16

static inline u8 rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_bt_tx_pa_vg_3_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000F800)) >> 11);
}

static inline void rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_bt_tx_pa_vg_3_ctrl_setf(struct cl_chip *chip, u8 bttxpavg3ctrl)
{
	ASSERT_ERR_CHIP((((u32)bttxpavg3ctrl << 11) & ~((u32)0x0000F800)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x0000F800)) | ((u32)bttxpavg3ctrl << 11));
}

#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_3_CTRL .addr_index = 0x000001BF, .size_minus_1 = (5 - 1), .shift = 11

static inline u8 rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_bt_tx_pa_vg_2_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x000007C0)) >> 6);
}

static inline void rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_bt_tx_pa_vg_2_ctrl_setf(struct cl_chip *chip, u8 bttxpavg2ctrl)
{
	ASSERT_ERR_CHIP((((u32)bttxpavg2ctrl << 6) & ~((u32)0x000007C0)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x000007C0)) | ((u32)bttxpavg2ctrl << 6));
}

#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_VG_2_CTRL .addr_index = 0x000001BF, .size_minus_1 = (5 - 1), .shift = 6

static inline u8 rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_bt_spare_28_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000003E)) >> 1);
}

static inline void rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_bt_spare_28_in_setf(struct cl_chip *chip, u8 btspare28in)
{
	ASSERT_ERR_CHIP((((u32)btspare28in << 1) & ~((u32)0x0000003E)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x0000003E)) | ((u32)btspare28in << 1));
}

#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_SPARE_28_IN .addr_index = 0x000001BF, .size_minus_1 = (5 - 1), .shift = 1

static inline u8 rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_bt_tx_pa_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_rf_fem_bt_pa_2_p_5_g_ctrl_0_bt_tx_pa_en_setf(struct cl_chip *chip, u8 bttxpaen)
{
	ASSERT_ERR_CHIP((((u32)bttxpaen << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)bttxpaen << 0));
}

#define RFIC_REGS_RF_FEM_BT_PA_2_P_5_G_CTRL_0_BT_TX_PA_EN .addr_index = 0x000001BF, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief BT_TX_GAIN_CTRL_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 BT_tx_mix_gain            0x00000000
 *    11:08 BT_tx_prepa_rctrl         0x00000000
 *    07:00 BT_tx_prepa_gain_ctrl     0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000700)
#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_OFFSET      0x00000700
#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_INDEX       0x000001C0
#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_RESET       0x00000000

static inline u32 rfic_regs_bt_tx_gain_ctrl_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_TX_GAIN_CTRL_OUT_ADDR);
}

#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT .addr_index = 0x000001C0, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_BT_TX_MIX_GAIN_MASK    ((u32)0x0000F000)
#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_BT_TX_MIX_GAIN_LSB    12
#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_BT_TX_MIX_GAIN_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_BT_TX_PREPA_RCTRL_MASK    ((u32)0x00000F00)
#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_BT_TX_PREPA_RCTRL_LSB    8
#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_BT_TX_PREPA_RCTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_BT_TX_PREPA_GAIN_CTRL_MASK    ((u32)0x000000FF)
#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_BT_TX_PREPA_GAIN_CTRL_LSB    0
#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_BT_TX_PREPA_GAIN_CTRL_WIDTH    ((u32)0x00000008)

#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_BT_TX_MIX_GAIN_RST    0x00000000
#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_BT_TX_PREPA_RCTRL_RST    0x00000000
#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_BT_TX_PREPA_GAIN_CTRL_RST    0x00000000

static inline void rfic_regs_bt_tx_gain_ctrl_out_unpack(struct cl_chip *chip, u8 *bt_tx_mix_gain, u8 *bt_tx_prepa_rctrl, u8 *bt_tx_prepa_gain_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_GAIN_CTRL_OUT_ADDR);

	*bt_tx_mix_gain = (local_val & ((u32)0x0000F000)) >> 12;
	*bt_tx_prepa_rctrl = (local_val & ((u32)0x00000F00)) >> 8;
	*bt_tx_prepa_gain_ctrl = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 rfic_regs_bt_tx_gain_ctrl_out_bt_tx_mix_gain_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x0000F000)) >> 12);
}

#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_BT_TX_MIX_GAIN .addr_index = 0x000001C0, .size_minus_1 = (4 - 1), .shift = 12

static inline u8 rfic_regs_bt_tx_gain_ctrl_out_bt_tx_prepa_rctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000F00)) >> 8);
}

#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_BT_TX_PREPA_RCTRL .addr_index = 0x000001C0, .size_minus_1 = (4 - 1), .shift = 8

static inline u8 rfic_regs_bt_tx_gain_ctrl_out_bt_tx_prepa_gain_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_TX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

#define RFIC_REGS_BT_TX_GAIN_CTRL_OUT_BT_TX_PREPA_GAIN_CTRL .addr_index = 0x000001C0, .size_minus_1 = (8 - 1), .shift = 0

/**
 * @brief BT_RX_GAIN_CTRL_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    11:08 BT_rx_lna_cur_ctrl        0x00000000
 *    07:04 BT_rx_lna_deq_res         0x00000000
 *    03:00 BT_rx_lna_vcasc_ctrl      0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000704)
#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_OFFSET      0x00000704
#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_INDEX       0x000001C1
#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_RESET       0x00000000

static inline u32 rfic_regs_bt_rx_gain_ctrl_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_RX_GAIN_CTRL_OUT_ADDR);
}

#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT .addr_index = 0x000001C1, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_BT_RX_LNA_CUR_CTRL_MASK    ((u32)0x00000F00)
#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_BT_RX_LNA_CUR_CTRL_LSB    8
#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_BT_RX_LNA_CUR_CTRL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_BT_RX_LNA_DEQ_RES_MASK    ((u32)0x000000F0)
#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_BT_RX_LNA_DEQ_RES_LSB    4
#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_BT_RX_LNA_DEQ_RES_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_BT_RX_LNA_VCASC_CTRL_MASK    ((u32)0x0000000F)
#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_BT_RX_LNA_VCASC_CTRL_LSB    0
#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_BT_RX_LNA_VCASC_CTRL_WIDTH    ((u32)0x00000004)

#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_BT_RX_LNA_CUR_CTRL_RST    0x00000000
#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_BT_RX_LNA_DEQ_RES_RST    0x00000000
#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_BT_RX_LNA_VCASC_CTRL_RST    0x00000000

static inline void rfic_regs_bt_rx_gain_ctrl_out_unpack(struct cl_chip *chip, u8 *bt_rx_lna_cur_ctrl, u8 *bt_rx_lna_deq_res, u8 *bt_rx_lna_vcasc_ctrl)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_RX_GAIN_CTRL_OUT_ADDR);

	*bt_rx_lna_cur_ctrl = (local_val & ((u32)0x00000F00)) >> 8;
	*bt_rx_lna_deq_res = (local_val & ((u32)0x000000F0)) >> 4;
	*bt_rx_lna_vcasc_ctrl = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 rfic_regs_bt_rx_gain_ctrl_out_bt_rx_lna_cur_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_RX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000F00)) >> 8);
}

#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_BT_RX_LNA_CUR_CTRL .addr_index = 0x000001C1, .size_minus_1 = (4 - 1), .shift = 8

static inline u8 rfic_regs_bt_rx_gain_ctrl_out_bt_rx_lna_deq_res_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_RX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x000000F0)) >> 4);
}

#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_BT_RX_LNA_DEQ_RES .addr_index = 0x000001C1, .size_minus_1 = (4 - 1), .shift = 4

static inline u8 rfic_regs_bt_rx_gain_ctrl_out_bt_rx_lna_vcasc_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_RX_GAIN_CTRL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

#define RFIC_REGS_BT_RX_GAIN_CTRL_OUT_BT_RX_LNA_VCASC_CTRL .addr_index = 0x000001C1, .size_minus_1 = (4 - 1), .shift = 0

/**
 * @brief AUX_ADC_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    AUX_ADC_voltage_div2      00000000
 *    28    AUX_ADC_comp_clk          00000000
 *    27    adc_AUX_rstn              00000001
 *    26    adc_AUX_ldo_en            00000001
 *    25    AUX_adc_clk_64_M_disable  00000001
 *    24    AUX_ADC_comp_offset_cal_inv_comp_clk 00000000
 *    23    AUX_ADC_comp_offset_cal_inv_check_bit 00000000
 *    22    AUX_ADC_comp_offset_calen 00000000
 *    21    AUX_ADC_comp_offset_cal_fsm_rstn 00000001
 *    20    AUX_ADC_comp_offset_cal_fsm_en 00000000
 *    19    AUX_ADC_comp_offset_cal_start 00000000
 *    18    AUX_ADC_comp_offset_cal_bypass 00000000
 *    17:14 adc_AUX_input_sel         0x00000000
 *    13    adc_AUX_en                00000000
 *    12:03 AUX_spare1_in             0x00000000
 *    02    adc_AUX_DF                00000000
 *    01    AUX_spare0_in             00000000
 *    00    AUX_ADC_sel_negedge_out   00000000
 * </pre>
 */
#define RFIC_REGS_AUX_ADC_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000740)
#define RFIC_REGS_AUX_ADC_CTRL_0_OFFSET      0x00000740
#define RFIC_REGS_AUX_ADC_CTRL_0_INDEX       0x000001D0
#define RFIC_REGS_AUX_ADC_CTRL_0_RESET       0x0E200000

static inline u32 rfic_regs_aux_adc_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);
}

static inline void rfic_regs_aux_adc_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, value);
}

#define RFIC_REGS_AUX_ADC_CTRL_0 .addr_index = 0x000001D0, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_VOLTAGE_DIV_2_BIT    ((u32)0x20000000)
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_VOLTAGE_DIV_2_POS    29
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_CLK_BIT    ((u32)0x10000000)
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_CLK_POS    28
#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_RSTN_BIT    ((u32)0x08000000)
#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_RSTN_POS    27
#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_LDO_EN_BIT    ((u32)0x04000000)
#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_LDO_EN_POS    26
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_CLK_64_M_DISABLE_BIT    ((u32)0x02000000)
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_CLK_64_M_DISABLE_POS    25
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_INV_COMP_CLK_BIT    ((u32)0x01000000)
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_INV_COMP_CLK_POS    24
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_INV_CHECK_BIT_BIT    ((u32)0x00800000)
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_INV_CHECK_BIT_POS    23
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CALEN_BIT    ((u32)0x00400000)
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CALEN_POS    22
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_FSM_RSTN_BIT    ((u32)0x00200000)
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_FSM_RSTN_POS    21
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_FSM_EN_BIT    ((u32)0x00100000)
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_FSM_EN_POS    20
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_START_BIT    ((u32)0x00080000)
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_START_POS    19
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_BYPASS_BIT    ((u32)0x00040000)
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_BYPASS_POS    18
#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_INPUT_SEL_MASK    ((u32)0x0003C000)
#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_INPUT_SEL_LSB    14
#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_INPUT_SEL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_EN_BIT    ((u32)0x00002000)
#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_EN_POS    13
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_SPARE_1_IN_MASK    ((u32)0x00001FF8)
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_SPARE_1_IN_LSB    3
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_SPARE_1_IN_WIDTH    ((u32)0x0000000A)
#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_DF_BIT    ((u32)0x00000004)
#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_DF_POS    2
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_SPARE_0_IN_BIT    ((u32)0x00000002)
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_SPARE_0_IN_POS    1
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_SEL_NEGEDGE_OUT_BIT    ((u32)0x00000001)
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_SEL_NEGEDGE_OUT_POS    0

#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_VOLTAGE_DIV_2_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_CLK_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_RSTN_RST    0x00000001
#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_LDO_EN_RST    0x00000001
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_CLK_64_M_DISABLE_RST    0x00000001
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_INV_COMP_CLK_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_INV_CHECK_BIT_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CALEN_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_FSM_RSTN_RST    0x00000001
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_FSM_EN_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_START_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_BYPASS_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_INPUT_SEL_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_EN_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_SPARE_1_IN_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_DF_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_SPARE_0_IN_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_SEL_NEGEDGE_OUT_RST    0x00000000

static inline void rfic_regs_aux_adc_ctrl_0_pack(struct cl_chip *chip, u8 aux_adc_voltage_div2, u8 aux_adc_comp_clk, u8 adc_aux_rstn, u8 adc_aux_ldo_en, u8 aux_adc_clk_64_m_disable, u8 aux_adc_comp_offset_cal_inv_comp_clk, u8 aux_adc_comp_offset_cal_inv_check_bit, u8 aux_adc_comp_offset_calen, u8 aux_adc_comp_offset_cal_fsm_rstn, u8 aux_adc_comp_offset_cal_fsm_en, u8 aux_adc_comp_offset_cal_start, u8 aux_adc_comp_offset_cal_bypass, u8 adc_aux_input_sel, u8 adc_aux_en, u16 aux_spare1_in, u8 adc_aux_df, u8 aux_spare0_in, u8 aux_adc_sel_negedge_out)
{
	ASSERT_ERR_CHIP((((u32)aux_adc_voltage_div2 << 29) & ~((u32)0x20000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aux_adc_comp_clk << 28) & ~((u32)0x10000000)) == 0);
	ASSERT_ERR_CHIP((((u32)adc_aux_rstn << 27) & ~((u32)0x08000000)) == 0);
	ASSERT_ERR_CHIP((((u32)adc_aux_ldo_en << 26) & ~((u32)0x04000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aux_adc_clk_64_m_disable << 25) & ~((u32)0x02000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aux_adc_comp_offset_cal_inv_comp_clk << 24) & ~((u32)0x01000000)) == 0);
	ASSERT_ERR_CHIP((((u32)aux_adc_comp_offset_cal_inv_check_bit << 23) & ~((u32)0x00800000)) == 0);
	ASSERT_ERR_CHIP((((u32)aux_adc_comp_offset_calen << 22) & ~((u32)0x00400000)) == 0);
	ASSERT_ERR_CHIP((((u32)aux_adc_comp_offset_cal_fsm_rstn << 21) & ~((u32)0x00200000)) == 0);
	ASSERT_ERR_CHIP((((u32)aux_adc_comp_offset_cal_fsm_en << 20) & ~((u32)0x00100000)) == 0);
	ASSERT_ERR_CHIP((((u32)aux_adc_comp_offset_cal_start << 19) & ~((u32)0x00080000)) == 0);
	ASSERT_ERR_CHIP((((u32)aux_adc_comp_offset_cal_bypass << 18) & ~((u32)0x00040000)) == 0);
	ASSERT_ERR_CHIP((((u32)adc_aux_input_sel << 14) & ~((u32)0x0003C000)) == 0);
	ASSERT_ERR_CHIP((((u32)adc_aux_en << 13) & ~((u32)0x00002000)) == 0);
	ASSERT_ERR_CHIP((((u32)aux_spare1_in << 3) & ~((u32)0x00001FF8)) == 0);
	ASSERT_ERR_CHIP((((u32)adc_aux_df << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)aux_spare0_in << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)aux_adc_sel_negedge_out << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, ((u32)aux_adc_voltage_div2 << 29) | ((u32)aux_adc_comp_clk << 28) | ((u32)adc_aux_rstn << 27) | ((u32)adc_aux_ldo_en << 26) | ((u32)aux_adc_clk_64_m_disable << 25) | ((u32)aux_adc_comp_offset_cal_inv_comp_clk << 24) | ((u32)aux_adc_comp_offset_cal_inv_check_bit << 23) | ((u32)aux_adc_comp_offset_calen << 22) | ((u32)aux_adc_comp_offset_cal_fsm_rstn << 21) | ((u32)aux_adc_comp_offset_cal_fsm_en << 20) | ((u32)aux_adc_comp_offset_cal_start << 19) | ((u32)aux_adc_comp_offset_cal_bypass << 18) | ((u32)adc_aux_input_sel << 14) | ((u32)adc_aux_en << 13) | ((u32)aux_spare1_in << 3) | ((u32)adc_aux_df << 2) | ((u32)aux_spare0_in << 1) | ((u32)aux_adc_sel_negedge_out << 0));
}

static inline void rfic_regs_aux_adc_ctrl_0_unpack(struct cl_chip *chip, u8 *aux_adc_voltage_div2, u8 *aux_adc_comp_clk, u8 *adc_aux_rstn, u8 *adc_aux_ldo_en, u8 *aux_adc_clk_64_m_disable, u8 *aux_adc_comp_offset_cal_inv_comp_clk, u8 *aux_adc_comp_offset_cal_inv_check_bit, u8 *aux_adc_comp_offset_calen, u8 *aux_adc_comp_offset_cal_fsm_rstn, u8 *aux_adc_comp_offset_cal_fsm_en, u8 *aux_adc_comp_offset_cal_start, u8 *aux_adc_comp_offset_cal_bypass, u8 *adc_aux_input_sel, u8 *adc_aux_en, u16 *aux_spare1_in, u8 *adc_aux_df, u8 *aux_spare0_in, u8 *aux_adc_sel_negedge_out)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	*aux_adc_voltage_div2 = (local_val & ((u32)0x20000000)) >> 29;
	*aux_adc_comp_clk = (local_val & ((u32)0x10000000)) >> 28;
	*adc_aux_rstn = (local_val & ((u32)0x08000000)) >> 27;
	*adc_aux_ldo_en = (local_val & ((u32)0x04000000)) >> 26;
	*aux_adc_clk_64_m_disable = (local_val & ((u32)0x02000000)) >> 25;
	*aux_adc_comp_offset_cal_inv_comp_clk = (local_val & ((u32)0x01000000)) >> 24;
	*aux_adc_comp_offset_cal_inv_check_bit = (local_val & ((u32)0x00800000)) >> 23;
	*aux_adc_comp_offset_calen = (local_val & ((u32)0x00400000)) >> 22;
	*aux_adc_comp_offset_cal_fsm_rstn = (local_val & ((u32)0x00200000)) >> 21;
	*aux_adc_comp_offset_cal_fsm_en = (local_val & ((u32)0x00100000)) >> 20;
	*aux_adc_comp_offset_cal_start = (local_val & ((u32)0x00080000)) >> 19;
	*aux_adc_comp_offset_cal_bypass = (local_val & ((u32)0x00040000)) >> 18;
	*adc_aux_input_sel = (local_val & ((u32)0x0003C000)) >> 14;
	*adc_aux_en = (local_val & ((u32)0x00002000)) >> 13;
	*aux_spare1_in = (local_val & ((u32)0x00001FF8)) >> 3;
	*adc_aux_df = (local_val & ((u32)0x00000004)) >> 2;
	*aux_spare0_in = (local_val & ((u32)0x00000002)) >> 1;
	*aux_adc_sel_negedge_out = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_aux_adc_ctrl_0_aux_adc_voltage_div_2_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x20000000)) >> 29);
}

static inline void rfic_regs_aux_adc_ctrl_0_aux_adc_voltage_div_2_setf(struct cl_chip *chip, u8 auxadcvoltagediv2)
{
	ASSERT_ERR_CHIP((((u32)auxadcvoltagediv2 << 29) & ~((u32)0x20000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x20000000)) | ((u32)auxadcvoltagediv2 << 29));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_VOLTAGE_DIV_2 .addr_index = 0x000001D0, .size_minus_1 = (1 - 1), .shift = 29

static inline u8 rfic_regs_aux_adc_ctrl_0_aux_adc_comp_clk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x10000000)) >> 28);
}

static inline void rfic_regs_aux_adc_ctrl_0_aux_adc_comp_clk_setf(struct cl_chip *chip, u8 auxadccompclk)
{
	ASSERT_ERR_CHIP((((u32)auxadccompclk << 28) & ~((u32)0x10000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x10000000)) | ((u32)auxadccompclk << 28));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_CLK .addr_index = 0x000001D0, .size_minus_1 = (1 - 1), .shift = 28

static inline u8 rfic_regs_aux_adc_ctrl_0_adc_aux_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x08000000)) >> 27);
}

static inline void rfic_regs_aux_adc_ctrl_0_adc_aux_rstn_setf(struct cl_chip *chip, u8 adcauxrstn)
{
	ASSERT_ERR_CHIP((((u32)adcauxrstn << 27) & ~((u32)0x08000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x08000000)) | ((u32)adcauxrstn << 27));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_RSTN .addr_index = 0x000001D0, .size_minus_1 = (1 - 1), .shift = 27

static inline u8 rfic_regs_aux_adc_ctrl_0_adc_aux_ldo_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x04000000)) >> 26);
}

static inline void rfic_regs_aux_adc_ctrl_0_adc_aux_ldo_en_setf(struct cl_chip *chip, u8 adcauxldoen)
{
	ASSERT_ERR_CHIP((((u32)adcauxldoen << 26) & ~((u32)0x04000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x04000000)) | ((u32)adcauxldoen << 26));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_LDO_EN .addr_index = 0x000001D0, .size_minus_1 = (1 - 1), .shift = 26

static inline u8 rfic_regs_aux_adc_ctrl_0_aux_adc_clk_64_m_disable_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x02000000)) >> 25);
}

static inline void rfic_regs_aux_adc_ctrl_0_aux_adc_clk_64_m_disable_setf(struct cl_chip *chip, u8 auxadcclk64mdisable)
{
	ASSERT_ERR_CHIP((((u32)auxadcclk64mdisable << 25) & ~((u32)0x02000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x02000000)) | ((u32)auxadcclk64mdisable << 25));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_CLK_64_M_DISABLE .addr_index = 0x000001D0, .size_minus_1 = (1 - 1), .shift = 25

static inline u8 rfic_regs_aux_adc_ctrl_0_aux_adc_comp_offset_cal_inv_comp_clk_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x01000000)) >> 24);
}

static inline void rfic_regs_aux_adc_ctrl_0_aux_adc_comp_offset_cal_inv_comp_clk_setf(struct cl_chip *chip, u8 auxadccompoffsetcalinvcompclk)
{
	ASSERT_ERR_CHIP((((u32)auxadccompoffsetcalinvcompclk << 24) & ~((u32)0x01000000)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x01000000)) | ((u32)auxadccompoffsetcalinvcompclk << 24));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_INV_COMP_CLK .addr_index = 0x000001D0, .size_minus_1 = (1 - 1), .shift = 24

static inline u8 rfic_regs_aux_adc_ctrl_0_aux_adc_comp_offset_cal_inv_check_bit_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00800000)) >> 23);
}

static inline void rfic_regs_aux_adc_ctrl_0_aux_adc_comp_offset_cal_inv_check_bit_setf(struct cl_chip *chip, u8 auxadccompoffsetcalinvcheckbit)
{
	ASSERT_ERR_CHIP((((u32)auxadccompoffsetcalinvcheckbit << 23) & ~((u32)0x00800000)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x00800000)) | ((u32)auxadccompoffsetcalinvcheckbit << 23));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_INV_CHECK_BIT .addr_index = 0x000001D0, .size_minus_1 = (1 - 1), .shift = 23

static inline u8 rfic_regs_aux_adc_ctrl_0_aux_adc_comp_offset_calen_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00400000)) >> 22);
}

static inline void rfic_regs_aux_adc_ctrl_0_aux_adc_comp_offset_calen_setf(struct cl_chip *chip, u8 auxadccompoffsetcalen)
{
	ASSERT_ERR_CHIP((((u32)auxadccompoffsetcalen << 22) & ~((u32)0x00400000)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x00400000)) | ((u32)auxadccompoffsetcalen << 22));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CALEN .addr_index = 0x000001D0, .size_minus_1 = (1 - 1), .shift = 22

static inline u8 rfic_regs_aux_adc_ctrl_0_aux_adc_comp_offset_cal_fsm_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00200000)) >> 21);
}

static inline void rfic_regs_aux_adc_ctrl_0_aux_adc_comp_offset_cal_fsm_rstn_setf(struct cl_chip *chip, u8 auxadccompoffsetcalfsmrstn)
{
	ASSERT_ERR_CHIP((((u32)auxadccompoffsetcalfsmrstn << 21) & ~((u32)0x00200000)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x00200000)) | ((u32)auxadccompoffsetcalfsmrstn << 21));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_FSM_RSTN .addr_index = 0x000001D0, .size_minus_1 = (1 - 1), .shift = 21

static inline u8 rfic_regs_aux_adc_ctrl_0_aux_adc_comp_offset_cal_fsm_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00100000)) >> 20);
}

static inline void rfic_regs_aux_adc_ctrl_0_aux_adc_comp_offset_cal_fsm_en_setf(struct cl_chip *chip, u8 auxadccompoffsetcalfsmen)
{
	ASSERT_ERR_CHIP((((u32)auxadccompoffsetcalfsmen << 20) & ~((u32)0x00100000)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x00100000)) | ((u32)auxadccompoffsetcalfsmen << 20));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_FSM_EN .addr_index = 0x000001D0, .size_minus_1 = (1 - 1), .shift = 20

static inline u8 rfic_regs_aux_adc_ctrl_0_aux_adc_comp_offset_cal_start_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00080000)) >> 19);
}

static inline void rfic_regs_aux_adc_ctrl_0_aux_adc_comp_offset_cal_start_setf(struct cl_chip *chip, u8 auxadccompoffsetcalstart)
{
	ASSERT_ERR_CHIP((((u32)auxadccompoffsetcalstart << 19) & ~((u32)0x00080000)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x00080000)) | ((u32)auxadccompoffsetcalstart << 19));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_START .addr_index = 0x000001D0, .size_minus_1 = (1 - 1), .shift = 19

static inline u8 rfic_regs_aux_adc_ctrl_0_aux_adc_comp_offset_cal_bypass_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00040000)) >> 18);
}

static inline void rfic_regs_aux_adc_ctrl_0_aux_adc_comp_offset_cal_bypass_setf(struct cl_chip *chip, u8 auxadccompoffsetcalbypass)
{
	ASSERT_ERR_CHIP((((u32)auxadccompoffsetcalbypass << 18) & ~((u32)0x00040000)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x00040000)) | ((u32)auxadccompoffsetcalbypass << 18));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_COMP_OFFSET_CAL_BYPASS .addr_index = 0x000001D0, .size_minus_1 = (1 - 1), .shift = 18

static inline u8 rfic_regs_aux_adc_ctrl_0_adc_aux_input_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0003C000)) >> 14);
}

static inline void rfic_regs_aux_adc_ctrl_0_adc_aux_input_sel_setf(struct cl_chip *chip, u8 adcauxinputsel)
{
	ASSERT_ERR_CHIP((((u32)adcauxinputsel << 14) & ~((u32)0x0003C000)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x0003C000)) | ((u32)adcauxinputsel << 14));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_INPUT_SEL .addr_index = 0x000001D0, .size_minus_1 = (4 - 1), .shift = 14

static inline u8 rfic_regs_aux_adc_ctrl_0_adc_aux_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00002000)) >> 13);
}

static inline void rfic_regs_aux_adc_ctrl_0_adc_aux_en_setf(struct cl_chip *chip, u8 adcauxen)
{
	ASSERT_ERR_CHIP((((u32)adcauxen << 13) & ~((u32)0x00002000)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x00002000)) | ((u32)adcauxen << 13));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_EN .addr_index = 0x000001D0, .size_minus_1 = (1 - 1), .shift = 13

static inline u16 rfic_regs_aux_adc_ctrl_0_aux_spare_1_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u16)((local_val & ((u32)0x00001FF8)) >> 3);
}

static inline void rfic_regs_aux_adc_ctrl_0_aux_spare_1_in_setf(struct cl_chip *chip, u16 auxspare1in)
{
	ASSERT_ERR_CHIP((((u32)auxspare1in << 3) & ~((u32)0x00001FF8)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x00001FF8)) | ((u32)auxspare1in << 3));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_SPARE_1_IN .addr_index = 0x000001D0, .size_minus_1 = (10 - 1), .shift = 3

static inline u8 rfic_regs_aux_adc_ctrl_0_adc_aux_df_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_aux_adc_ctrl_0_adc_aux_df_setf(struct cl_chip *chip, u8 adcauxdf)
{
	ASSERT_ERR_CHIP((((u32)adcauxdf << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x00000004)) | ((u32)adcauxdf << 2));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_ADC_AUX_DF .addr_index = 0x000001D0, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_aux_adc_ctrl_0_aux_spare_0_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_aux_adc_ctrl_0_aux_spare_0_in_setf(struct cl_chip *chip, u8 auxspare0in)
{
	ASSERT_ERR_CHIP((((u32)auxspare0in << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x00000002)) | ((u32)auxspare0in << 1));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_SPARE_0_IN .addr_index = 0x000001D0, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_aux_adc_ctrl_0_aux_adc_sel_negedge_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_aux_adc_ctrl_0_aux_adc_sel_negedge_out_setf(struct cl_chip *chip, u8 auxadcselnegedgeout)
{
	ASSERT_ERR_CHIP((((u32)auxadcselnegedgeout << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_0_ADDR) & ~((u32)0x00000001)) | ((u32)auxadcselnegedgeout << 0));
}

#define RFIC_REGS_AUX_ADC_CTRL_0_AUX_ADC_SEL_NEGEDGE_OUT .addr_index = 0x000001D0, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief AUX_ADC_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:08 AUX_spare4_in             0x00000000
 *    07:05 AUX_ADC_curctrl           0x00000000
 *    04:00 AUX_ADC_comp_offset_sel   0x00000000
 * </pre>
 */
#define RFIC_REGS_AUX_ADC_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000744)
#define RFIC_REGS_AUX_ADC_CTRL_1_OFFSET      0x00000744
#define RFIC_REGS_AUX_ADC_CTRL_1_INDEX       0x000001D1
#define RFIC_REGS_AUX_ADC_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_aux_adc_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_1_ADDR);
}

static inline void rfic_regs_aux_adc_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_1_ADDR, value);
}

#define RFIC_REGS_AUX_ADC_CTRL_1 .addr_index = 0x000001D1, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_AUX_ADC_CTRL_1_AUX_SPARE_4_IN_MASK    ((u32)0xFFFFFF00)
#define RFIC_REGS_AUX_ADC_CTRL_1_AUX_SPARE_4_IN_LSB    8
#define RFIC_REGS_AUX_ADC_CTRL_1_AUX_SPARE_4_IN_WIDTH    ((u32)0x00000018)
#define RFIC_REGS_AUX_ADC_CTRL_1_AUX_ADC_CURCTRL_MASK    ((u32)0x000000E0)
#define RFIC_REGS_AUX_ADC_CTRL_1_AUX_ADC_CURCTRL_LSB    5
#define RFIC_REGS_AUX_ADC_CTRL_1_AUX_ADC_CURCTRL_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_AUX_ADC_CTRL_1_AUX_ADC_COMP_OFFSET_SEL_MASK    ((u32)0x0000001F)
#define RFIC_REGS_AUX_ADC_CTRL_1_AUX_ADC_COMP_OFFSET_SEL_LSB    0
#define RFIC_REGS_AUX_ADC_CTRL_1_AUX_ADC_COMP_OFFSET_SEL_WIDTH    ((u32)0x00000005)

#define RFIC_REGS_AUX_ADC_CTRL_1_AUX_SPARE_4_IN_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CTRL_1_AUX_ADC_CURCTRL_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CTRL_1_AUX_ADC_COMP_OFFSET_SEL_RST    0x00000000

static inline void rfic_regs_aux_adc_ctrl_1_pack(struct cl_chip *chip, u32 aux_spare4_in, u8 aux_adc_curctrl, u8 aux_adc_comp_offset_sel)
{
	ASSERT_ERR_CHIP((((u32)aux_spare4_in << 8) & ~((u32)0xFFFFFF00)) == 0);
	ASSERT_ERR_CHIP((((u32)aux_adc_curctrl << 5) & ~((u32)0x000000E0)) == 0);
	ASSERT_ERR_CHIP((((u32)aux_adc_comp_offset_sel << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_1_ADDR, ((u32)aux_spare4_in << 8) | ((u32)aux_adc_curctrl << 5) | ((u32)aux_adc_comp_offset_sel << 0));
}

static inline void rfic_regs_aux_adc_ctrl_1_unpack(struct cl_chip *chip, u32 *aux_spare4_in, u8 *aux_adc_curctrl, u8 *aux_adc_comp_offset_sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_1_ADDR);

	*aux_spare4_in = (local_val & ((u32)0xFFFFFF00)) >> 8;
	*aux_adc_curctrl = (local_val & ((u32)0x000000E0)) >> 5;
	*aux_adc_comp_offset_sel = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u32 rfic_regs_aux_adc_ctrl_1_aux_spare_4_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_1_ADDR);

	return (u32)((local_val & ((u32)0xFFFFFF00)) >> 8);
}

static inline void rfic_regs_aux_adc_ctrl_1_aux_spare_4_in_setf(struct cl_chip *chip, u32 auxspare4in)
{
	ASSERT_ERR_CHIP((((u32)auxspare4in << 8) & ~((u32)0xFFFFFF00)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_1_ADDR) & ~((u32)0xFFFFFF00)) | ((u32)auxspare4in << 8));
}

#define RFIC_REGS_AUX_ADC_CTRL_1_AUX_SPARE_4_IN .addr_index = 0x000001D1, .size_minus_1 = (24 - 1), .shift = 8

static inline u8 rfic_regs_aux_adc_ctrl_1_aux_adc_curctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x000000E0)) >> 5);
}

static inline void rfic_regs_aux_adc_ctrl_1_aux_adc_curctrl_setf(struct cl_chip *chip, u8 auxadccurctrl)
{
	ASSERT_ERR_CHIP((((u32)auxadccurctrl << 5) & ~((u32)0x000000E0)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_1_ADDR) & ~((u32)0x000000E0)) | ((u32)auxadccurctrl << 5));
}

#define RFIC_REGS_AUX_ADC_CTRL_1_AUX_ADC_CURCTRL .addr_index = 0x000001D1, .size_minus_1 = (3 - 1), .shift = 5

static inline u8 rfic_regs_aux_adc_ctrl_1_aux_adc_comp_offset_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

static inline void rfic_regs_aux_adc_ctrl_1_aux_adc_comp_offset_sel_setf(struct cl_chip *chip, u8 auxadccompoffsetsel)
{
	ASSERT_ERR_CHIP((((u32)auxadccompoffsetsel << 0) & ~((u32)0x0000001F)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ADC_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ADC_CTRL_1_ADDR) & ~((u32)0x0000001F)) | ((u32)auxadccompoffsetsel << 0));
}

#define RFIC_REGS_AUX_ADC_CTRL_1_AUX_ADC_COMP_OFFSET_SEL .addr_index = 0x000001D1, .size_minus_1 = (5 - 1), .shift = 0

/**
 * @brief AUX_ADC_STATUS register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21:04 AUX_spare1_out            0x00000000
 *    03    AUX_ADC_comp_offset_cal_done 00000000
 *    02    AUX_ADC_comp_offset_cal_error 00000000
 *    01    adc_AUX_OVF               00000000
 *    00    AUX_spare0_out            00000000
 * </pre>
 */
#define RFIC_REGS_AUX_ADC_STATUS_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000748)
#define RFIC_REGS_AUX_ADC_STATUS_OFFSET      0x00000748
#define RFIC_REGS_AUX_ADC_STATUS_INDEX       0x000001D2
#define RFIC_REGS_AUX_ADC_STATUS_RESET       0x00000000

static inline u32 rfic_regs_aux_adc_status_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_AUX_ADC_STATUS_ADDR);
}

#define RFIC_REGS_AUX_ADC_STATUS .addr_index = 0x000001D2, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_AUX_ADC_STATUS_AUX_SPARE_1_OUT_MASK    ((u32)0x003FFFF0)
#define RFIC_REGS_AUX_ADC_STATUS_AUX_SPARE_1_OUT_LSB    4
#define RFIC_REGS_AUX_ADC_STATUS_AUX_SPARE_1_OUT_WIDTH    ((u32)0x00000012)
#define RFIC_REGS_AUX_ADC_STATUS_AUX_ADC_COMP_OFFSET_CAL_DONE_BIT    ((u32)0x00000008)
#define RFIC_REGS_AUX_ADC_STATUS_AUX_ADC_COMP_OFFSET_CAL_DONE_POS    3
#define RFIC_REGS_AUX_ADC_STATUS_AUX_ADC_COMP_OFFSET_CAL_ERROR_BIT    ((u32)0x00000004)
#define RFIC_REGS_AUX_ADC_STATUS_AUX_ADC_COMP_OFFSET_CAL_ERROR_POS    2
#define RFIC_REGS_AUX_ADC_STATUS_ADC_AUX_OVF_BIT    ((u32)0x00000002)
#define RFIC_REGS_AUX_ADC_STATUS_ADC_AUX_OVF_POS    1
#define RFIC_REGS_AUX_ADC_STATUS_AUX_SPARE_0_OUT_BIT    ((u32)0x00000001)
#define RFIC_REGS_AUX_ADC_STATUS_AUX_SPARE_0_OUT_POS    0

#define RFIC_REGS_AUX_ADC_STATUS_AUX_SPARE_1_OUT_RST    0x00000000
#define RFIC_REGS_AUX_ADC_STATUS_AUX_ADC_COMP_OFFSET_CAL_DONE_RST    0x00000000
#define RFIC_REGS_AUX_ADC_STATUS_AUX_ADC_COMP_OFFSET_CAL_ERROR_RST    0x00000000
#define RFIC_REGS_AUX_ADC_STATUS_ADC_AUX_OVF_RST    0x00000000
#define RFIC_REGS_AUX_ADC_STATUS_AUX_SPARE_0_OUT_RST    0x00000000

static inline void rfic_regs_aux_adc_status_unpack(struct cl_chip *chip, u32 *aux_spare1_out, u8 *aux_adc_comp_offset_cal_done, u8 *aux_adc_comp_offset_cal_error, u8 *adc_aux_ovf, u8 *aux_spare0_out)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_STATUS_ADDR);

	*aux_spare1_out = (local_val & ((u32)0x003FFFF0)) >> 4;
	*aux_adc_comp_offset_cal_done = (local_val & ((u32)0x00000008)) >> 3;
	*aux_adc_comp_offset_cal_error = (local_val & ((u32)0x00000004)) >> 2;
	*adc_aux_ovf = (local_val & ((u32)0x00000002)) >> 1;
	*aux_spare0_out = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u32 rfic_regs_aux_adc_status_aux_spare_1_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_STATUS_ADDR);

	return (u32)((local_val & ((u32)0x003FFFF0)) >> 4);
}

#define RFIC_REGS_AUX_ADC_STATUS_AUX_SPARE_1_OUT .addr_index = 0x000001D2, .size_minus_1 = (18 - 1), .shift = 4

static inline u8 rfic_regs_aux_adc_status_aux_adc_comp_offset_cal_done_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_STATUS_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

#define RFIC_REGS_AUX_ADC_STATUS_AUX_ADC_COMP_OFFSET_CAL_DONE .addr_index = 0x000001D2, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_aux_adc_status_aux_adc_comp_offset_cal_error_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_STATUS_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

#define RFIC_REGS_AUX_ADC_STATUS_AUX_ADC_COMP_OFFSET_CAL_ERROR .addr_index = 0x000001D2, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_aux_adc_status_adc_aux_ovf_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_STATUS_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

#define RFIC_REGS_AUX_ADC_STATUS_ADC_AUX_OVF .addr_index = 0x000001D2, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_aux_adc_status_aux_spare_0_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_STATUS_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

#define RFIC_REGS_AUX_ADC_STATUS_AUX_SPARE_0_OUT .addr_index = 0x000001D2, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief AUX_ADC_CAL_VAL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 AUX_spare3_out            0x00000000
 *    19:15 AUX_ADC_comp_offset_sel_out 0x00000000
 *    14:05 AUX_spare2_out            0x00000000
 *    04:00 AUX_ADC_comp_offset_sel_cal_value 0x00000000
 * </pre>
 */
#define RFIC_REGS_AUX_ADC_CAL_VAL_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000074C)
#define RFIC_REGS_AUX_ADC_CAL_VAL_OFFSET      0x0000074C
#define RFIC_REGS_AUX_ADC_CAL_VAL_INDEX       0x000001D3
#define RFIC_REGS_AUX_ADC_CAL_VAL_RESET       0x00000000

static inline u32 rfic_regs_aux_adc_cal_val_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_AUX_ADC_CAL_VAL_ADDR);
}

#define RFIC_REGS_AUX_ADC_CAL_VAL .addr_index = 0x000001D3, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_SPARE_3_OUT_MASK    ((u32)0x3FF00000)
#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_SPARE_3_OUT_LSB    20
#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_SPARE_3_OUT_WIDTH    ((u32)0x0000000A)
#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_ADC_COMP_OFFSET_SEL_OUT_MASK    ((u32)0x000F8000)
#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_ADC_COMP_OFFSET_SEL_OUT_LSB    15
#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_ADC_COMP_OFFSET_SEL_OUT_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_SPARE_2_OUT_MASK    ((u32)0x00007FE0)
#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_SPARE_2_OUT_LSB    5
#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_SPARE_2_OUT_WIDTH    ((u32)0x0000000A)
#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_ADC_COMP_OFFSET_SEL_CAL_VALUE_MASK    ((u32)0x0000001F)
#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_ADC_COMP_OFFSET_SEL_CAL_VALUE_LSB    0
#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_ADC_COMP_OFFSET_SEL_CAL_VALUE_WIDTH    ((u32)0x00000005)

#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_SPARE_3_OUT_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_ADC_COMP_OFFSET_SEL_OUT_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_SPARE_2_OUT_RST    0x00000000
#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_ADC_COMP_OFFSET_SEL_CAL_VALUE_RST    0x00000000

static inline void rfic_regs_aux_adc_cal_val_unpack(struct cl_chip *chip, u16 *aux_spare3_out, u8 *aux_adc_comp_offset_sel_out, u16 *aux_spare2_out, u8 *aux_adc_comp_offset_sel_cal_value)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CAL_VAL_ADDR);

	*aux_spare3_out = (local_val & ((u32)0x3FF00000)) >> 20;
	*aux_adc_comp_offset_sel_out = (local_val & ((u32)0x000F8000)) >> 15;
	*aux_spare2_out = (local_val & ((u32)0x00007FE0)) >> 5;
	*aux_adc_comp_offset_sel_cal_value = (local_val & ((u32)0x0000001F)) >> 0;
}

static inline u16 rfic_regs_aux_adc_cal_val_aux_spare_3_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CAL_VAL_ADDR);

	return (u16)((local_val & ((u32)0x3FF00000)) >> 20);
}

#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_SPARE_3_OUT .addr_index = 0x000001D3, .size_minus_1 = (10 - 1), .shift = 20

static inline u8 rfic_regs_aux_adc_cal_val_aux_adc_comp_offset_sel_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CAL_VAL_ADDR);

	return (u8)((local_val & ((u32)0x000F8000)) >> 15);
}

#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_ADC_COMP_OFFSET_SEL_OUT .addr_index = 0x000001D3, .size_minus_1 = (5 - 1), .shift = 15

static inline u16 rfic_regs_aux_adc_cal_val_aux_spare_2_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CAL_VAL_ADDR);

	return (u16)((local_val & ((u32)0x00007FE0)) >> 5);
}

#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_SPARE_2_OUT .addr_index = 0x000001D3, .size_minus_1 = (10 - 1), .shift = 5

static inline u8 rfic_regs_aux_adc_cal_val_aux_adc_comp_offset_sel_cal_value_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ADC_CAL_VAL_ADDR);

	return (u8)((local_val & ((u32)0x0000001F)) >> 0);
}

#define RFIC_REGS_AUX_ADC_CAL_VAL_AUX_ADC_COMP_OFFSET_SEL_CAL_VALUE .addr_index = 0x000001D3, .size_minus_1 = (5 - 1), .shift = 0

/**
 * @brief XO_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25:16 xo_tun_fn                 0x00000200
 *    15    cal_rstn                  00000000
 *    14:13 ana_clk_sel               0x00000000
 *    12:00 calxo_spare0_in           0x00000000
 * </pre>
 */
#define RFIC_REGS_XO_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000780)
#define RFIC_REGS_XO_CTRL_1_OFFSET      0x00000780
#define RFIC_REGS_XO_CTRL_1_INDEX       0x000001E0
#define RFIC_REGS_XO_CTRL_1_RESET       0x02000000

static inline u32 rfic_regs_xo_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_XO_CTRL_1_ADDR);
}

static inline void rfic_regs_xo_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_XO_CTRL_1_ADDR, value);
}

#define RFIC_REGS_XO_CTRL_1 .addr_index = 0x000001E0, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_XO_CTRL_1_XO_TUN_FN_MASK    ((u32)0x03FF0000)
#define RFIC_REGS_XO_CTRL_1_XO_TUN_FN_LSB    16
#define RFIC_REGS_XO_CTRL_1_XO_TUN_FN_WIDTH    ((u32)0x0000000A)
#define RFIC_REGS_XO_CTRL_1_CAL_RSTN_BIT    ((u32)0x00008000)
#define RFIC_REGS_XO_CTRL_1_CAL_RSTN_POS    15
#define RFIC_REGS_XO_CTRL_1_ANA_CLK_SEL_MASK    ((u32)0x00006000)
#define RFIC_REGS_XO_CTRL_1_ANA_CLK_SEL_LSB    13
#define RFIC_REGS_XO_CTRL_1_ANA_CLK_SEL_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_XO_CTRL_1_CALXO_SPARE_0_IN_MASK    ((u32)0x00001FFF)
#define RFIC_REGS_XO_CTRL_1_CALXO_SPARE_0_IN_LSB    0
#define RFIC_REGS_XO_CTRL_1_CALXO_SPARE_0_IN_WIDTH    ((u32)0x0000000D)

#define RFIC_REGS_XO_CTRL_1_XO_TUN_FN_RST    0x00000200
#define RFIC_REGS_XO_CTRL_1_CAL_RSTN_RST    0x00000000
#define RFIC_REGS_XO_CTRL_1_ANA_CLK_SEL_RST    0x00000000
#define RFIC_REGS_XO_CTRL_1_CALXO_SPARE_0_IN_RST    0x00000000

static inline void rfic_regs_xo_ctrl_1_pack(struct cl_chip *chip, u16 xo_tun_fn, u8 cal_rstn, u8 ana_clk_sel, u16 calxo_spare0_in)
{
	ASSERT_ERR_CHIP((((u32)xo_tun_fn << 16) & ~((u32)0x03FF0000)) == 0);
	ASSERT_ERR_CHIP((((u32)cal_rstn << 15) & ~((u32)0x00008000)) == 0);
	ASSERT_ERR_CHIP((((u32)ana_clk_sel << 13) & ~((u32)0x00006000)) == 0);
	ASSERT_ERR_CHIP((((u32)calxo_spare0_in << 0) & ~((u32)0x00001FFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_XO_CTRL_1_ADDR, ((u32)xo_tun_fn << 16) | ((u32)cal_rstn << 15) | ((u32)ana_clk_sel << 13) | ((u32)calxo_spare0_in << 0));
}

static inline void rfic_regs_xo_ctrl_1_unpack(struct cl_chip *chip, u16 *xo_tun_fn, u8 *cal_rstn, u8 *ana_clk_sel, u16 *calxo_spare0_in)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_XO_CTRL_1_ADDR);

	*xo_tun_fn = (local_val & ((u32)0x03FF0000)) >> 16;
	*cal_rstn = (local_val & ((u32)0x00008000)) >> 15;
	*ana_clk_sel = (local_val & ((u32)0x00006000)) >> 13;
	*calxo_spare0_in = (local_val & ((u32)0x00001FFF)) >> 0;
}

static inline u16 rfic_regs_xo_ctrl_1_xo_tun_fn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_XO_CTRL_1_ADDR);

	return (u16)((local_val & ((u32)0x03FF0000)) >> 16);
}

static inline void rfic_regs_xo_ctrl_1_xo_tun_fn_setf(struct cl_chip *chip, u16 xotunfn)
{
	ASSERT_ERR_CHIP((((u32)xotunfn << 16) & ~((u32)0x03FF0000)) == 0);
	cl_reg_write(chip, RFIC_REGS_XO_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_XO_CTRL_1_ADDR) & ~((u32)0x03FF0000)) | ((u32)xotunfn << 16));
}

#define RFIC_REGS_XO_CTRL_1_XO_TUN_FN .addr_index = 0x000001E0, .size_minus_1 = (10 - 1), .shift = 16

static inline u8 rfic_regs_xo_ctrl_1_cal_rstn_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_XO_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00008000)) >> 15);
}

static inline void rfic_regs_xo_ctrl_1_cal_rstn_setf(struct cl_chip *chip, u8 calrstn)
{
	ASSERT_ERR_CHIP((((u32)calrstn << 15) & ~((u32)0x00008000)) == 0);
	cl_reg_write(chip, RFIC_REGS_XO_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_XO_CTRL_1_ADDR) & ~((u32)0x00008000)) | ((u32)calrstn << 15));
}

#define RFIC_REGS_XO_CTRL_1_CAL_RSTN .addr_index = 0x000001E0, .size_minus_1 = (1 - 1), .shift = 15

static inline u8 rfic_regs_xo_ctrl_1_ana_clk_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_XO_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00006000)) >> 13);
}

static inline void rfic_regs_xo_ctrl_1_ana_clk_sel_setf(struct cl_chip *chip, u8 anaclksel)
{
	ASSERT_ERR_CHIP((((u32)anaclksel << 13) & ~((u32)0x00006000)) == 0);
	cl_reg_write(chip, RFIC_REGS_XO_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_XO_CTRL_1_ADDR) & ~((u32)0x00006000)) | ((u32)anaclksel << 13));
}

#define RFIC_REGS_XO_CTRL_1_ANA_CLK_SEL .addr_index = 0x000001E0, .size_minus_1 = (2 - 1), .shift = 13

static inline u16 rfic_regs_xo_ctrl_1_calxo_spare_0_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_XO_CTRL_1_ADDR);

	return (u16)((local_val & ((u32)0x00001FFF)) >> 0);
}

static inline void rfic_regs_xo_ctrl_1_calxo_spare_0_in_setf(struct cl_chip *chip, u16 calxospare0in)
{
	ASSERT_ERR_CHIP((((u32)calxospare0in << 0) & ~((u32)0x00001FFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_XO_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_XO_CTRL_1_ADDR) & ~((u32)0x00001FFF)) | ((u32)calxospare0in << 0));
}

#define RFIC_REGS_XO_CTRL_1_CALXO_SPARE_0_IN .addr_index = 0x000001E0, .size_minus_1 = (13 - 1), .shift = 0

/**
 * @brief RCAL_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    02    spare_2_in                00000000
 *    01    start_rcal                00000000
 *    00    comp_clk_res              00000000
 * </pre>
 */
#define RFIC_REGS_RCAL_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000784)
#define RFIC_REGS_RCAL_CTRL_1_OFFSET      0x00000784
#define RFIC_REGS_RCAL_CTRL_1_INDEX       0x000001E1
#define RFIC_REGS_RCAL_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_rcal_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RCAL_CTRL_1_ADDR);
}

static inline void rfic_regs_rcal_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_RCAL_CTRL_1_ADDR, value);
}

#define RFIC_REGS_RCAL_CTRL_1 .addr_index = 0x000001E1, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RCAL_CTRL_1_SPARE_2_IN_BIT    ((u32)0x00000004)
#define RFIC_REGS_RCAL_CTRL_1_SPARE_2_IN_POS    2
#define RFIC_REGS_RCAL_CTRL_1_START_RCAL_BIT    ((u32)0x00000002)
#define RFIC_REGS_RCAL_CTRL_1_START_RCAL_POS    1
#define RFIC_REGS_RCAL_CTRL_1_COMP_CLK_RES_BIT    ((u32)0x00000001)
#define RFIC_REGS_RCAL_CTRL_1_COMP_CLK_RES_POS    0

#define RFIC_REGS_RCAL_CTRL_1_SPARE_2_IN_RST    0x00000000
#define RFIC_REGS_RCAL_CTRL_1_START_RCAL_RST    0x00000000
#define RFIC_REGS_RCAL_CTRL_1_COMP_CLK_RES_RST    0x00000000

static inline void rfic_regs_rcal_ctrl_1_pack(struct cl_chip *chip, u8 spare_2_in, u8 start_rcal, u8 comp_clk_res)
{
	ASSERT_ERR_CHIP((((u32)spare_2_in << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)start_rcal << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)comp_clk_res << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RCAL_CTRL_1_ADDR, ((u32)spare_2_in << 2) | ((u32)start_rcal << 1) | ((u32)comp_clk_res << 0));
}

static inline void rfic_regs_rcal_ctrl_1_unpack(struct cl_chip *chip, u8 *spare_2_in, u8 *start_rcal, u8 *comp_clk_res)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RCAL_CTRL_1_ADDR);

	*spare_2_in = (local_val & ((u32)0x00000004)) >> 2;
	*start_rcal = (local_val & ((u32)0x00000002)) >> 1;
	*comp_clk_res = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_rcal_ctrl_1_spare_2_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RCAL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_rcal_ctrl_1_spare_2_in_setf(struct cl_chip *chip, u8 spare2in)
{
	ASSERT_ERR_CHIP((((u32)spare2in << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_RCAL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RCAL_CTRL_1_ADDR) & ~((u32)0x00000004)) | ((u32)spare2in << 2));
}

#define RFIC_REGS_RCAL_CTRL_1_SPARE_2_IN .addr_index = 0x000001E1, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_rcal_ctrl_1_start_rcal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RCAL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_rcal_ctrl_1_start_rcal_setf(struct cl_chip *chip, u8 startrcal)
{
	ASSERT_ERR_CHIP((((u32)startrcal << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_RCAL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RCAL_CTRL_1_ADDR) & ~((u32)0x00000002)) | ((u32)startrcal << 1));
}

#define RFIC_REGS_RCAL_CTRL_1_START_RCAL .addr_index = 0x000001E1, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_rcal_ctrl_1_comp_clk_res_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RCAL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_rcal_ctrl_1_comp_clk_res_setf(struct cl_chip *chip, u8 compclkres)
{
	ASSERT_ERR_CHIP((((u32)compclkres << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_RCAL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_RCAL_CTRL_1_ADDR) & ~((u32)0x00000001)) | ((u32)compclkres << 0));
}

#define RFIC_REGS_RCAL_CTRL_1_COMP_CLK_RES .addr_index = 0x000001E1, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief RCAL_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    04    rcal_ready                00000000
 *    03:00 rcal_val                  0x00000000
 * </pre>
 */
#define RFIC_REGS_RCAL_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000788)
#define RFIC_REGS_RCAL_OUT_OFFSET      0x00000788
#define RFIC_REGS_RCAL_OUT_INDEX       0x000001E2
#define RFIC_REGS_RCAL_OUT_RESET       0x00000000

static inline u32 rfic_regs_rcal_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_RCAL_OUT_ADDR);
}

#define RFIC_REGS_RCAL_OUT .addr_index = 0x000001E2, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_RCAL_OUT_RCAL_READY_BIT    ((u32)0x00000010)
#define RFIC_REGS_RCAL_OUT_RCAL_READY_POS    4
#define RFIC_REGS_RCAL_OUT_RCAL_VAL_MASK    ((u32)0x0000000F)
#define RFIC_REGS_RCAL_OUT_RCAL_VAL_LSB     0
#define RFIC_REGS_RCAL_OUT_RCAL_VAL_WIDTH    ((u32)0x00000004)

#define RFIC_REGS_RCAL_OUT_RCAL_READY_RST    0x00000000
#define RFIC_REGS_RCAL_OUT_RCAL_VAL_RST     0x00000000

static inline void rfic_regs_rcal_out_unpack(struct cl_chip *chip, u8 *rcal_ready, u8 *rcal_val)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RCAL_OUT_ADDR);

	*rcal_ready = (local_val & ((u32)0x00000010)) >> 4;
	*rcal_val = (local_val & ((u32)0x0000000F)) >> 0;
}

static inline u8 rfic_regs_rcal_out_rcal_ready_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RCAL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

#define RFIC_REGS_RCAL_OUT_RCAL_READY .addr_index = 0x000001E2, .size_minus_1 = (1 - 1), .shift = 4

static inline u8 rfic_regs_rcal_out_rcal_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_RCAL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x0000000F)) >> 0);
}

#define RFIC_REGS_RCAL_OUT_RCAL_VAL .addr_index = 0x000001E2, .size_minus_1 = (4 - 1), .shift = 0

/**
 * @brief CCAL_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    03    start_ccal                00000000
 *    02    sel_res                   00000000
 *    01    en_ccal                   00000000
 *    00    comp_clk_cap              00000000
 * </pre>
 */
#define RFIC_REGS_CCAL_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000078C)
#define RFIC_REGS_CCAL_CTRL_1_OFFSET      0x0000078C
#define RFIC_REGS_CCAL_CTRL_1_INDEX       0x000001E3
#define RFIC_REGS_CCAL_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_ccal_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CCAL_CTRL_1_ADDR);
}

static inline void rfic_regs_ccal_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CCAL_CTRL_1_ADDR, value);
}

#define RFIC_REGS_CCAL_CTRL_1 .addr_index = 0x000001E3, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CCAL_CTRL_1_START_CCAL_BIT    ((u32)0x00000008)
#define RFIC_REGS_CCAL_CTRL_1_START_CCAL_POS    3
#define RFIC_REGS_CCAL_CTRL_1_SEL_RES_BIT    ((u32)0x00000004)
#define RFIC_REGS_CCAL_CTRL_1_SEL_RES_POS    2
#define RFIC_REGS_CCAL_CTRL_1_EN_CCAL_BIT    ((u32)0x00000002)
#define RFIC_REGS_CCAL_CTRL_1_EN_CCAL_POS    1
#define RFIC_REGS_CCAL_CTRL_1_COMP_CLK_CAP_BIT    ((u32)0x00000001)
#define RFIC_REGS_CCAL_CTRL_1_COMP_CLK_CAP_POS    0

#define RFIC_REGS_CCAL_CTRL_1_START_CCAL_RST    0x00000000
#define RFIC_REGS_CCAL_CTRL_1_SEL_RES_RST    0x00000000
#define RFIC_REGS_CCAL_CTRL_1_EN_CCAL_RST    0x00000000
#define RFIC_REGS_CCAL_CTRL_1_COMP_CLK_CAP_RST    0x00000000

static inline void rfic_regs_ccal_ctrl_1_pack(struct cl_chip *chip, u8 start_ccal, u8 sel_res, u8 en_ccal, u8 comp_clk_cap)
{
	ASSERT_ERR_CHIP((((u32)start_ccal << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)sel_res << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)en_ccal << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)comp_clk_cap << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CCAL_CTRL_1_ADDR, ((u32)start_ccal << 3) | ((u32)sel_res << 2) | ((u32)en_ccal << 1) | ((u32)comp_clk_cap << 0));
}

static inline void rfic_regs_ccal_ctrl_1_unpack(struct cl_chip *chip, u8 *start_ccal, u8 *sel_res, u8 *en_ccal, u8 *comp_clk_cap)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CCAL_CTRL_1_ADDR);

	*start_ccal = (local_val & ((u32)0x00000008)) >> 3;
	*sel_res = (local_val & ((u32)0x00000004)) >> 2;
	*en_ccal = (local_val & ((u32)0x00000002)) >> 1;
	*comp_clk_cap = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_ccal_ctrl_1_start_ccal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CCAL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_ccal_ctrl_1_start_ccal_setf(struct cl_chip *chip, u8 startccal)
{
	ASSERT_ERR_CHIP((((u32)startccal << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_CCAL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CCAL_CTRL_1_ADDR) & ~((u32)0x00000008)) | ((u32)startccal << 3));
}

#define RFIC_REGS_CCAL_CTRL_1_START_CCAL .addr_index = 0x000001E3, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_ccal_ctrl_1_sel_res_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CCAL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_ccal_ctrl_1_sel_res_setf(struct cl_chip *chip, u8 selres)
{
	ASSERT_ERR_CHIP((((u32)selres << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_CCAL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CCAL_CTRL_1_ADDR) & ~((u32)0x00000004)) | ((u32)selres << 2));
}

#define RFIC_REGS_CCAL_CTRL_1_SEL_RES .addr_index = 0x000001E3, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_ccal_ctrl_1_en_ccal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CCAL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_ccal_ctrl_1_en_ccal_setf(struct cl_chip *chip, u8 enccal)
{
	ASSERT_ERR_CHIP((((u32)enccal << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_CCAL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CCAL_CTRL_1_ADDR) & ~((u32)0x00000002)) | ((u32)enccal << 1));
}

#define RFIC_REGS_CCAL_CTRL_1_EN_CCAL .addr_index = 0x000001E3, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_ccal_ctrl_1_comp_clk_cap_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CCAL_CTRL_1_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_ccal_ctrl_1_comp_clk_cap_setf(struct cl_chip *chip, u8 compclkcap)
{
	ASSERT_ERR_CHIP((((u32)compclkcap << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_CCAL_CTRL_1_ADDR, (cl_reg_read(chip, RFIC_REGS_CCAL_CTRL_1_ADDR) & ~((u32)0x00000001)) | ((u32)compclkcap << 0));
}

#define RFIC_REGS_CCAL_CTRL_1_COMP_CLK_CAP .addr_index = 0x000001E3, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief CCAL_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    09    ccal_ready                00000000
 *    08    ccal_error                00000000
 *    07:00 ccal_val                  0x00000000
 * </pre>
 */
#define RFIC_REGS_CCAL_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000790)
#define RFIC_REGS_CCAL_OUT_OFFSET      0x00000790
#define RFIC_REGS_CCAL_OUT_INDEX       0x000001E4
#define RFIC_REGS_CCAL_OUT_RESET       0x00000000

static inline u32 rfic_regs_ccal_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CCAL_OUT_ADDR);
}

#define RFIC_REGS_CCAL_OUT .addr_index = 0x000001E4, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CCAL_OUT_CCAL_READY_BIT    ((u32)0x00000200)
#define RFIC_REGS_CCAL_OUT_CCAL_READY_POS    9
#define RFIC_REGS_CCAL_OUT_CCAL_ERROR_BIT    ((u32)0x00000100)
#define RFIC_REGS_CCAL_OUT_CCAL_ERROR_POS    8
#define RFIC_REGS_CCAL_OUT_CCAL_VAL_MASK    ((u32)0x000000FF)
#define RFIC_REGS_CCAL_OUT_CCAL_VAL_LSB     0
#define RFIC_REGS_CCAL_OUT_CCAL_VAL_WIDTH    ((u32)0x00000008)

#define RFIC_REGS_CCAL_OUT_CCAL_READY_RST    0x00000000
#define RFIC_REGS_CCAL_OUT_CCAL_ERROR_RST    0x00000000
#define RFIC_REGS_CCAL_OUT_CCAL_VAL_RST     0x00000000

static inline void rfic_regs_ccal_out_unpack(struct cl_chip *chip, u8 *ccal_ready, u8 *ccal_error, u8 *ccal_val)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CCAL_OUT_ADDR);

	*ccal_ready = (local_val & ((u32)0x00000200)) >> 9;
	*ccal_error = (local_val & ((u32)0x00000100)) >> 8;
	*ccal_val = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 rfic_regs_ccal_out_ccal_ready_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CCAL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000200)) >> 9);
}

#define RFIC_REGS_CCAL_OUT_CCAL_READY .addr_index = 0x000001E4, .size_minus_1 = (1 - 1), .shift = 9

static inline u8 rfic_regs_ccal_out_ccal_error_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CCAL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000100)) >> 8);
}

#define RFIC_REGS_CCAL_OUT_CCAL_ERROR .addr_index = 0x000001E4, .size_minus_1 = (1 - 1), .shift = 8

static inline u8 rfic_regs_ccal_out_ccal_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CCAL_OUT_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

#define RFIC_REGS_CCAL_OUT_CCAL_VAL .addr_index = 0x000001E4, .size_minus_1 = (8 - 1), .shift = 0

/**
 * @brief XO_PRMON_IN register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    10    bypasscal                 00000000
 *    09:08 prmoncalcycles            0x00000000
 *    07:04 rcal_val                  0x00000000
 *    03    prmon_cal_start_fet       00000000
 *    02    prmon_cal_start_lvtfet    00000000
 *    01    prmon_cal_start_egfet     00000000
 *    00    prmon_cal_start_eglvtfet  00000000
 * </pre>
 */
#define RFIC_REGS_XO_PRMON_IN_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000794)
#define RFIC_REGS_XO_PRMON_IN_OFFSET      0x00000794
#define RFIC_REGS_XO_PRMON_IN_INDEX       0x000001E5
#define RFIC_REGS_XO_PRMON_IN_RESET       0x00000000

static inline u32 rfic_regs_xo_prmon_in_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_XO_PRMON_IN_ADDR);
}

static inline void rfic_regs_xo_prmon_in_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_XO_PRMON_IN_ADDR, value);
}

#define RFIC_REGS_XO_PRMON_IN .addr_index = 0x000001E5, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_XO_PRMON_IN_BYPASSCAL_BIT    ((u32)0x00000400)
#define RFIC_REGS_XO_PRMON_IN_BYPASSCAL_POS    10
#define RFIC_REGS_XO_PRMON_IN_PRMONCALCYCLES_MASK    ((u32)0x00000300)
#define RFIC_REGS_XO_PRMON_IN_PRMONCALCYCLES_LSB    8
#define RFIC_REGS_XO_PRMON_IN_PRMONCALCYCLES_WIDTH    ((u32)0x00000002)
#define RFIC_REGS_XO_PRMON_IN_RCAL_VAL_MASK    ((u32)0x000000F0)
#define RFIC_REGS_XO_PRMON_IN_RCAL_VAL_LSB    4
#define RFIC_REGS_XO_PRMON_IN_RCAL_VAL_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_XO_PRMON_IN_PRMON_CAL_START_FET_BIT    ((u32)0x00000008)
#define RFIC_REGS_XO_PRMON_IN_PRMON_CAL_START_FET_POS    3
#define RFIC_REGS_XO_PRMON_IN_PRMON_CAL_START_LVTFET_BIT    ((u32)0x00000004)
#define RFIC_REGS_XO_PRMON_IN_PRMON_CAL_START_LVTFET_POS    2
#define RFIC_REGS_XO_PRMON_IN_PRMON_CAL_START_EGFET_BIT    ((u32)0x00000002)
#define RFIC_REGS_XO_PRMON_IN_PRMON_CAL_START_EGFET_POS    1
#define RFIC_REGS_XO_PRMON_IN_PRMON_CAL_START_EGLVTFET_BIT    ((u32)0x00000001)
#define RFIC_REGS_XO_PRMON_IN_PRMON_CAL_START_EGLVTFET_POS    0

#define RFIC_REGS_XO_PRMON_IN_BYPASSCAL_RST    0x00000000
#define RFIC_REGS_XO_PRMON_IN_PRMONCALCYCLES_RST    0x00000000
#define RFIC_REGS_XO_PRMON_IN_RCAL_VAL_RST    0x00000000
#define RFIC_REGS_XO_PRMON_IN_PRMON_CAL_START_FET_RST    0x00000000
#define RFIC_REGS_XO_PRMON_IN_PRMON_CAL_START_LVTFET_RST    0x00000000
#define RFIC_REGS_XO_PRMON_IN_PRMON_CAL_START_EGFET_RST    0x00000000
#define RFIC_REGS_XO_PRMON_IN_PRMON_CAL_START_EGLVTFET_RST    0x00000000

static inline void rfic_regs_xo_prmon_in_pack(struct cl_chip *chip, u8 bypasscal, u8 prmoncalcycles, u8 rcal_val, u8 prmon_cal_start_fet, u8 prmon_cal_start_lvtfet, u8 prmon_cal_start_egfet, u8 prmon_cal_start_eglvtfet)
{
	ASSERT_ERR_CHIP((((u32)bypasscal << 10) & ~((u32)0x00000400)) == 0);
	ASSERT_ERR_CHIP((((u32)prmoncalcycles << 8) & ~((u32)0x00000300)) == 0);
	ASSERT_ERR_CHIP((((u32)rcal_val << 4) & ~((u32)0x000000F0)) == 0);
	ASSERT_ERR_CHIP((((u32)prmon_cal_start_fet << 3) & ~((u32)0x00000008)) == 0);
	ASSERT_ERR_CHIP((((u32)prmon_cal_start_lvtfet << 2) & ~((u32)0x00000004)) == 0);
	ASSERT_ERR_CHIP((((u32)prmon_cal_start_egfet << 1) & ~((u32)0x00000002)) == 0);
	ASSERT_ERR_CHIP((((u32)prmon_cal_start_eglvtfet << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_XO_PRMON_IN_ADDR, ((u32)bypasscal << 10) | ((u32)prmoncalcycles << 8) | ((u32)rcal_val << 4) | ((u32)prmon_cal_start_fet << 3) | ((u32)prmon_cal_start_lvtfet << 2) | ((u32)prmon_cal_start_egfet << 1) | ((u32)prmon_cal_start_eglvtfet << 0));
}

static inline void rfic_regs_xo_prmon_in_unpack(struct cl_chip *chip, u8 *bypasscal, u8 *prmoncalcycles, u8 *rcal_val, u8 *prmon_cal_start_fet, u8 *prmon_cal_start_lvtfet, u8 *prmon_cal_start_egfet, u8 *prmon_cal_start_eglvtfet)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_XO_PRMON_IN_ADDR);

	*bypasscal = (local_val & ((u32)0x00000400)) >> 10;
	*prmoncalcycles = (local_val & ((u32)0x00000300)) >> 8;
	*rcal_val = (local_val & ((u32)0x000000F0)) >> 4;
	*prmon_cal_start_fet = (local_val & ((u32)0x00000008)) >> 3;
	*prmon_cal_start_lvtfet = (local_val & ((u32)0x00000004)) >> 2;
	*prmon_cal_start_egfet = (local_val & ((u32)0x00000002)) >> 1;
	*prmon_cal_start_eglvtfet = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_xo_prmon_in_bypasscal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_XO_PRMON_IN_ADDR);

	return (u8)((local_val & ((u32)0x00000400)) >> 10);
}

static inline void rfic_regs_xo_prmon_in_bypasscal_setf(struct cl_chip *chip, u8 bypasscal)
{
	ASSERT_ERR_CHIP((((u32)bypasscal << 10) & ~((u32)0x00000400)) == 0);
	cl_reg_write(chip, RFIC_REGS_XO_PRMON_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_XO_PRMON_IN_ADDR) & ~((u32)0x00000400)) | ((u32)bypasscal << 10));
}

#define RFIC_REGS_XO_PRMON_IN_BYPASSCAL .addr_index = 0x000001E5, .size_minus_1 = (1 - 1), .shift = 10

static inline u8 rfic_regs_xo_prmon_in_prmoncalcycles_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_XO_PRMON_IN_ADDR);

	return (u8)((local_val & ((u32)0x00000300)) >> 8);
}

static inline void rfic_regs_xo_prmon_in_prmoncalcycles_setf(struct cl_chip *chip, u8 prmoncalcycles)
{
	ASSERT_ERR_CHIP((((u32)prmoncalcycles << 8) & ~((u32)0x00000300)) == 0);
	cl_reg_write(chip, RFIC_REGS_XO_PRMON_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_XO_PRMON_IN_ADDR) & ~((u32)0x00000300)) | ((u32)prmoncalcycles << 8));
}

#define RFIC_REGS_XO_PRMON_IN_PRMONCALCYCLES .addr_index = 0x000001E5, .size_minus_1 = (2 - 1), .shift = 8

static inline u8 rfic_regs_xo_prmon_in_rcal_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_XO_PRMON_IN_ADDR);

	return (u8)((local_val & ((u32)0x000000F0)) >> 4);
}

static inline void rfic_regs_xo_prmon_in_rcal_val_setf(struct cl_chip *chip, u8 rcalval)
{
	ASSERT_ERR_CHIP((((u32)rcalval << 4) & ~((u32)0x000000F0)) == 0);
	cl_reg_write(chip, RFIC_REGS_XO_PRMON_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_XO_PRMON_IN_ADDR) & ~((u32)0x000000F0)) | ((u32)rcalval << 4));
}

#define RFIC_REGS_XO_PRMON_IN_RCAL_VAL .addr_index = 0x000001E5, .size_minus_1 = (4 - 1), .shift = 4

static inline u8 rfic_regs_xo_prmon_in_prmon_cal_start_fet_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_XO_PRMON_IN_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

static inline void rfic_regs_xo_prmon_in_prmon_cal_start_fet_setf(struct cl_chip *chip, u8 prmoncalstartfet)
{
	ASSERT_ERR_CHIP((((u32)prmoncalstartfet << 3) & ~((u32)0x00000008)) == 0);
	cl_reg_write(chip, RFIC_REGS_XO_PRMON_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_XO_PRMON_IN_ADDR) & ~((u32)0x00000008)) | ((u32)prmoncalstartfet << 3));
}

#define RFIC_REGS_XO_PRMON_IN_PRMON_CAL_START_FET .addr_index = 0x000001E5, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_xo_prmon_in_prmon_cal_start_lvtfet_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_XO_PRMON_IN_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

static inline void rfic_regs_xo_prmon_in_prmon_cal_start_lvtfet_setf(struct cl_chip *chip, u8 prmoncalstartlvtfet)
{
	ASSERT_ERR_CHIP((((u32)prmoncalstartlvtfet << 2) & ~((u32)0x00000004)) == 0);
	cl_reg_write(chip, RFIC_REGS_XO_PRMON_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_XO_PRMON_IN_ADDR) & ~((u32)0x00000004)) | ((u32)prmoncalstartlvtfet << 2));
}

#define RFIC_REGS_XO_PRMON_IN_PRMON_CAL_START_LVTFET .addr_index = 0x000001E5, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_xo_prmon_in_prmon_cal_start_egfet_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_XO_PRMON_IN_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

static inline void rfic_regs_xo_prmon_in_prmon_cal_start_egfet_setf(struct cl_chip *chip, u8 prmoncalstartegfet)
{
	ASSERT_ERR_CHIP((((u32)prmoncalstartegfet << 1) & ~((u32)0x00000002)) == 0);
	cl_reg_write(chip, RFIC_REGS_XO_PRMON_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_XO_PRMON_IN_ADDR) & ~((u32)0x00000002)) | ((u32)prmoncalstartegfet << 1));
}

#define RFIC_REGS_XO_PRMON_IN_PRMON_CAL_START_EGFET .addr_index = 0x000001E5, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_xo_prmon_in_prmon_cal_start_eglvtfet_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_XO_PRMON_IN_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_xo_prmon_in_prmon_cal_start_eglvtfet_setf(struct cl_chip *chip, u8 prmoncalstarteglvtfet)
{
	ASSERT_ERR_CHIP((((u32)prmoncalstarteglvtfet << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_XO_PRMON_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_XO_PRMON_IN_ADDR) & ~((u32)0x00000001)) | ((u32)prmoncalstarteglvtfet << 0));
}

#define RFIC_REGS_XO_PRMON_IN_PRMON_CAL_START_EGLVTFET .addr_index = 0x000001E5, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief PRMON_NMOS register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 prmon_egpmos_val          0x00000000
 *    23:16 prmon_egnmos_val          0x00000000
 *    15:08 prmon_pmos_val            0x00000000
 *    07:00 prmon_nmos_val            0x00000000
 * </pre>
 */
#define RFIC_REGS_PRMON_NMOS_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000798)
#define RFIC_REGS_PRMON_NMOS_OFFSET      0x00000798
#define RFIC_REGS_PRMON_NMOS_INDEX       0x000001E6
#define RFIC_REGS_PRMON_NMOS_RESET       0x00000000

static inline u32 rfic_regs_prmon_nmos_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_PRMON_NMOS_ADDR);
}

#define RFIC_REGS_PRMON_NMOS .addr_index = 0x000001E6, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_PRMON_NMOS_PRMON_EGPMOS_VAL_MASK    ((u32)0xFF000000)
#define RFIC_REGS_PRMON_NMOS_PRMON_EGPMOS_VAL_LSB    24
#define RFIC_REGS_PRMON_NMOS_PRMON_EGPMOS_VAL_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_PRMON_NMOS_PRMON_EGNMOS_VAL_MASK    ((u32)0x00FF0000)
#define RFIC_REGS_PRMON_NMOS_PRMON_EGNMOS_VAL_LSB    16
#define RFIC_REGS_PRMON_NMOS_PRMON_EGNMOS_VAL_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_PRMON_NMOS_PRMON_PMOS_VAL_MASK    ((u32)0x0000FF00)
#define RFIC_REGS_PRMON_NMOS_PRMON_PMOS_VAL_LSB    8
#define RFIC_REGS_PRMON_NMOS_PRMON_PMOS_VAL_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_PRMON_NMOS_PRMON_NMOS_VAL_MASK    ((u32)0x000000FF)
#define RFIC_REGS_PRMON_NMOS_PRMON_NMOS_VAL_LSB    0
#define RFIC_REGS_PRMON_NMOS_PRMON_NMOS_VAL_WIDTH    ((u32)0x00000008)

#define RFIC_REGS_PRMON_NMOS_PRMON_EGPMOS_VAL_RST    0x00000000
#define RFIC_REGS_PRMON_NMOS_PRMON_EGNMOS_VAL_RST    0x00000000
#define RFIC_REGS_PRMON_NMOS_PRMON_PMOS_VAL_RST    0x00000000
#define RFIC_REGS_PRMON_NMOS_PRMON_NMOS_VAL_RST    0x00000000

static inline void rfic_regs_prmon_nmos_unpack(struct cl_chip *chip, u8 *prmon_egpmos_val, u8 *prmon_egnmos_val, u8 *prmon_pmos_val, u8 *prmon_nmos_val)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_NMOS_ADDR);

	*prmon_egpmos_val = (local_val & ((u32)0xFF000000)) >> 24;
	*prmon_egnmos_val = (local_val & ((u32)0x00FF0000)) >> 16;
	*prmon_pmos_val = (local_val & ((u32)0x0000FF00)) >> 8;
	*prmon_nmos_val = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 rfic_regs_prmon_nmos_prmon_egpmos_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_NMOS_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

#define RFIC_REGS_PRMON_NMOS_PRMON_EGPMOS_VAL .addr_index = 0x000001E6, .size_minus_1 = (8 - 1), .shift = 24

static inline u8 rfic_regs_prmon_nmos_prmon_egnmos_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_NMOS_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

#define RFIC_REGS_PRMON_NMOS_PRMON_EGNMOS_VAL .addr_index = 0x000001E6, .size_minus_1 = (8 - 1), .shift = 16

static inline u8 rfic_regs_prmon_nmos_prmon_pmos_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_NMOS_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

#define RFIC_REGS_PRMON_NMOS_PRMON_PMOS_VAL .addr_index = 0x000001E6, .size_minus_1 = (8 - 1), .shift = 8

static inline u8 rfic_regs_prmon_nmos_prmon_nmos_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_NMOS_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

#define RFIC_REGS_PRMON_NMOS_PRMON_NMOS_VAL .addr_index = 0x000001E6, .size_minus_1 = (8 - 1), .shift = 0

/**
 * @brief PRMON_LVT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 prmon_eglvtpmos_val       0x00000000
 *    23:16 prmon_eglvtnmos_val       0x00000000
 *    15:08 prmon_lvtpmos_val         0x00000000
 *    07:00 prmon_lvtnmos_val         0x00000000
 * </pre>
 */
#define RFIC_REGS_PRMON_LVT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000079C)
#define RFIC_REGS_PRMON_LVT_OFFSET      0x0000079C
#define RFIC_REGS_PRMON_LVT_INDEX       0x000001E7
#define RFIC_REGS_PRMON_LVT_RESET       0x00000000

static inline u32 rfic_regs_prmon_lvt_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_PRMON_LVT_ADDR);
}

#define RFIC_REGS_PRMON_LVT .addr_index = 0x000001E7, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_PRMON_LVT_PRMON_EGLVTPMOS_VAL_MASK    ((u32)0xFF000000)
#define RFIC_REGS_PRMON_LVT_PRMON_EGLVTPMOS_VAL_LSB    24
#define RFIC_REGS_PRMON_LVT_PRMON_EGLVTPMOS_VAL_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_PRMON_LVT_PRMON_EGLVTNMOS_VAL_MASK    ((u32)0x00FF0000)
#define RFIC_REGS_PRMON_LVT_PRMON_EGLVTNMOS_VAL_LSB    16
#define RFIC_REGS_PRMON_LVT_PRMON_EGLVTNMOS_VAL_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_PRMON_LVT_PRMON_LVTPMOS_VAL_MASK    ((u32)0x0000FF00)
#define RFIC_REGS_PRMON_LVT_PRMON_LVTPMOS_VAL_LSB    8
#define RFIC_REGS_PRMON_LVT_PRMON_LVTPMOS_VAL_WIDTH    ((u32)0x00000008)
#define RFIC_REGS_PRMON_LVT_PRMON_LVTNMOS_VAL_MASK    ((u32)0x000000FF)
#define RFIC_REGS_PRMON_LVT_PRMON_LVTNMOS_VAL_LSB    0
#define RFIC_REGS_PRMON_LVT_PRMON_LVTNMOS_VAL_WIDTH    ((u32)0x00000008)

#define RFIC_REGS_PRMON_LVT_PRMON_EGLVTPMOS_VAL_RST    0x00000000
#define RFIC_REGS_PRMON_LVT_PRMON_EGLVTNMOS_VAL_RST    0x00000000
#define RFIC_REGS_PRMON_LVT_PRMON_LVTPMOS_VAL_RST    0x00000000
#define RFIC_REGS_PRMON_LVT_PRMON_LVTNMOS_VAL_RST    0x00000000

static inline void rfic_regs_prmon_lvt_unpack(struct cl_chip *chip, u8 *prmon_eglvtpmos_val, u8 *prmon_eglvtnmos_val, u8 *prmon_lvtpmos_val, u8 *prmon_lvtnmos_val)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_LVT_ADDR);

	*prmon_eglvtpmos_val = (local_val & ((u32)0xFF000000)) >> 24;
	*prmon_eglvtnmos_val = (local_val & ((u32)0x00FF0000)) >> 16;
	*prmon_lvtpmos_val = (local_val & ((u32)0x0000FF00)) >> 8;
	*prmon_lvtnmos_val = (local_val & ((u32)0x000000FF)) >> 0;
}

static inline u8 rfic_regs_prmon_lvt_prmon_eglvtpmos_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_LVT_ADDR);

	return (u8)((local_val & ((u32)0xFF000000)) >> 24);
}

#define RFIC_REGS_PRMON_LVT_PRMON_EGLVTPMOS_VAL .addr_index = 0x000001E7, .size_minus_1 = (8 - 1), .shift = 24

static inline u8 rfic_regs_prmon_lvt_prmon_eglvtnmos_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_LVT_ADDR);

	return (u8)((local_val & ((u32)0x00FF0000)) >> 16);
}

#define RFIC_REGS_PRMON_LVT_PRMON_EGLVTNMOS_VAL .addr_index = 0x000001E7, .size_minus_1 = (8 - 1), .shift = 16

static inline u8 rfic_regs_prmon_lvt_prmon_lvtpmos_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_LVT_ADDR);

	return (u8)((local_val & ((u32)0x0000FF00)) >> 8);
}

#define RFIC_REGS_PRMON_LVT_PRMON_LVTPMOS_VAL .addr_index = 0x000001E7, .size_minus_1 = (8 - 1), .shift = 8

static inline u8 rfic_regs_prmon_lvt_prmon_lvtnmos_val_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_LVT_ADDR);

	return (u8)((local_val & ((u32)0x000000FF)) >> 0);
}

#define RFIC_REGS_PRMON_LVT_PRMON_LVTNMOS_VAL .addr_index = 0x000001E7, .size_minus_1 = (8 - 1), .shift = 0

/**
 * @brief PRMON_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    10:06 calxo_spare0_out          0x00000000
 *    05    comp_out_rcal             00000000
 *    04    comp_out_ccal             00000000
 *    03    prmon_eg_cal_ready        00000000
 *    02    prmon_rvt_cal_ready       00000000
 *    01    prmon_eg_lvt_cal_ready    00000000
 *    00    prmon_lvt_cal_ready       00000000
 * </pre>
 */
#define RFIC_REGS_PRMON_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000007A0)
#define RFIC_REGS_PRMON_OUT_OFFSET      0x000007A0
#define RFIC_REGS_PRMON_OUT_INDEX       0x000001E8
#define RFIC_REGS_PRMON_OUT_RESET       0x00000000

static inline u32 rfic_regs_prmon_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_PRMON_OUT_ADDR);
}

#define RFIC_REGS_PRMON_OUT .addr_index = 0x000001E8, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_PRMON_OUT_CALXO_SPARE_0_OUT_MASK    ((u32)0x000007C0)
#define RFIC_REGS_PRMON_OUT_CALXO_SPARE_0_OUT_LSB    6
#define RFIC_REGS_PRMON_OUT_CALXO_SPARE_0_OUT_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_PRMON_OUT_COMP_OUT_RCAL_BIT    ((u32)0x00000020)
#define RFIC_REGS_PRMON_OUT_COMP_OUT_RCAL_POS    5
#define RFIC_REGS_PRMON_OUT_COMP_OUT_CCAL_BIT    ((u32)0x00000010)
#define RFIC_REGS_PRMON_OUT_COMP_OUT_CCAL_POS    4
#define RFIC_REGS_PRMON_OUT_PRMON_EG_CAL_READY_BIT    ((u32)0x00000008)
#define RFIC_REGS_PRMON_OUT_PRMON_EG_CAL_READY_POS    3
#define RFIC_REGS_PRMON_OUT_PRMON_RVT_CAL_READY_BIT    ((u32)0x00000004)
#define RFIC_REGS_PRMON_OUT_PRMON_RVT_CAL_READY_POS    2
#define RFIC_REGS_PRMON_OUT_PRMON_EG_LVT_CAL_READY_BIT    ((u32)0x00000002)
#define RFIC_REGS_PRMON_OUT_PRMON_EG_LVT_CAL_READY_POS    1
#define RFIC_REGS_PRMON_OUT_PRMON_LVT_CAL_READY_BIT    ((u32)0x00000001)
#define RFIC_REGS_PRMON_OUT_PRMON_LVT_CAL_READY_POS    0

#define RFIC_REGS_PRMON_OUT_CALXO_SPARE_0_OUT_RST    0x00000000
#define RFIC_REGS_PRMON_OUT_COMP_OUT_RCAL_RST    0x00000000
#define RFIC_REGS_PRMON_OUT_COMP_OUT_CCAL_RST    0x00000000
#define RFIC_REGS_PRMON_OUT_PRMON_EG_CAL_READY_RST    0x00000000
#define RFIC_REGS_PRMON_OUT_PRMON_RVT_CAL_READY_RST    0x00000000
#define RFIC_REGS_PRMON_OUT_PRMON_EG_LVT_CAL_READY_RST    0x00000000
#define RFIC_REGS_PRMON_OUT_PRMON_LVT_CAL_READY_RST    0x00000000

static inline void rfic_regs_prmon_out_unpack(struct cl_chip *chip, u8 *calxo_spare0_out, u8 *comp_out_rcal, u8 *comp_out_ccal, u8 *prmon_eg_cal_ready, u8 *prmon_rvt_cal_ready, u8 *prmon_eg_lvt_cal_ready, u8 *prmon_lvt_cal_ready)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_OUT_ADDR);

	*calxo_spare0_out = (local_val & ((u32)0x000007C0)) >> 6;
	*comp_out_rcal = (local_val & ((u32)0x00000020)) >> 5;
	*comp_out_ccal = (local_val & ((u32)0x00000010)) >> 4;
	*prmon_eg_cal_ready = (local_val & ((u32)0x00000008)) >> 3;
	*prmon_rvt_cal_ready = (local_val & ((u32)0x00000004)) >> 2;
	*prmon_eg_lvt_cal_ready = (local_val & ((u32)0x00000002)) >> 1;
	*prmon_lvt_cal_ready = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u8 rfic_regs_prmon_out_calxo_spare_0_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_OUT_ADDR);

	return (u8)((local_val & ((u32)0x000007C0)) >> 6);
}

#define RFIC_REGS_PRMON_OUT_CALXO_SPARE_0_OUT .addr_index = 0x000001E8, .size_minus_1 = (5 - 1), .shift = 6

static inline u8 rfic_regs_prmon_out_comp_out_rcal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000020)) >> 5);
}

#define RFIC_REGS_PRMON_OUT_COMP_OUT_RCAL .addr_index = 0x000001E8, .size_minus_1 = (1 - 1), .shift = 5

static inline u8 rfic_regs_prmon_out_comp_out_ccal_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000010)) >> 4);
}

#define RFIC_REGS_PRMON_OUT_COMP_OUT_CCAL .addr_index = 0x000001E8, .size_minus_1 = (1 - 1), .shift = 4

static inline u8 rfic_regs_prmon_out_prmon_eg_cal_ready_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000008)) >> 3);
}

#define RFIC_REGS_PRMON_OUT_PRMON_EG_CAL_READY .addr_index = 0x000001E8, .size_minus_1 = (1 - 1), .shift = 3

static inline u8 rfic_regs_prmon_out_prmon_rvt_cal_ready_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000004)) >> 2);
}

#define RFIC_REGS_PRMON_OUT_PRMON_RVT_CAL_READY .addr_index = 0x000001E8, .size_minus_1 = (1 - 1), .shift = 2

static inline u8 rfic_regs_prmon_out_prmon_eg_lvt_cal_ready_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000002)) >> 1);
}

#define RFIC_REGS_PRMON_OUT_PRMON_EG_LVT_CAL_READY .addr_index = 0x000001E8, .size_minus_1 = (1 - 1), .shift = 1

static inline u8 rfic_regs_prmon_out_prmon_lvt_cal_ready_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_PRMON_OUT_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

#define RFIC_REGS_PRMON_OUT_PRMON_LVT_CAL_READY .addr_index = 0x000001E8, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief TEMP_MON_OUT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    08:00 calxo_spare1_out          0x00000000
 * </pre>
 */
#define RFIC_REGS_TEMP_MON_OUT_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000007A4)
#define RFIC_REGS_TEMP_MON_OUT_OFFSET      0x000007A4
#define RFIC_REGS_TEMP_MON_OUT_INDEX       0x000001E9
#define RFIC_REGS_TEMP_MON_OUT_RESET       0x00000000

static inline u32 rfic_regs_temp_mon_out_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_TEMP_MON_OUT_ADDR);
}

#define RFIC_REGS_TEMP_MON_OUT .addr_index = 0x000001E9, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_TEMP_MON_OUT_CALXO_SPARE_1_OUT_MASK    ((u32)0x000001FF)
#define RFIC_REGS_TEMP_MON_OUT_CALXO_SPARE_1_OUT_LSB    0
#define RFIC_REGS_TEMP_MON_OUT_CALXO_SPARE_1_OUT_WIDTH    ((u32)0x00000009)

#define RFIC_REGS_TEMP_MON_OUT_CALXO_SPARE_1_OUT_RST    0x00000000

static inline u16 rfic_regs_temp_mon_out_calxo_spare_1_out_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_TEMP_MON_OUT_ADDR);

	return (u16)(local_val >> 0);
}

#define RFIC_REGS_TEMP_MON_OUT_CALXO_SPARE_1_OUT .addr_index = 0x000001E9, .size_minus_1 = (9 - 1), .shift = 0

/**
 * @brief TEMP_MON_IN register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    28:07 calxo_spare1_in           0x00000000
 *    06    tempsens_atb_en           00000000
 *    05:01 tempsens_ctrl             0x00000010
 *    00    tempsensint_en            00000000
 * </pre>
 */
#define RFIC_REGS_TEMP_MON_IN_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x000007A8)
#define RFIC_REGS_TEMP_MON_IN_OFFSET      0x000007A8
#define RFIC_REGS_TEMP_MON_IN_INDEX       0x000001EA
#define RFIC_REGS_TEMP_MON_IN_RESET       0x00000020

static inline u32 rfic_regs_temp_mon_in_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_TEMP_MON_IN_ADDR);
}

static inline void rfic_regs_temp_mon_in_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_TEMP_MON_IN_ADDR, value);
}

#define RFIC_REGS_TEMP_MON_IN .addr_index = 0x000001EA, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_TEMP_MON_IN_CALXO_SPARE_1_IN_MASK    ((u32)0x1FFFFF80)
#define RFIC_REGS_TEMP_MON_IN_CALXO_SPARE_1_IN_LSB    7
#define RFIC_REGS_TEMP_MON_IN_CALXO_SPARE_1_IN_WIDTH    ((u32)0x00000016)
#define RFIC_REGS_TEMP_MON_IN_TEMPSENS_ATB_EN_BIT    ((u32)0x00000040)
#define RFIC_REGS_TEMP_MON_IN_TEMPSENS_ATB_EN_POS    6
#define RFIC_REGS_TEMP_MON_IN_TEMPSENS_CTRL_MASK    ((u32)0x0000003E)
#define RFIC_REGS_TEMP_MON_IN_TEMPSENS_CTRL_LSB    1
#define RFIC_REGS_TEMP_MON_IN_TEMPSENS_CTRL_WIDTH    ((u32)0x00000005)
#define RFIC_REGS_TEMP_MON_IN_TEMPSENSINT_EN_BIT    ((u32)0x00000001)
#define RFIC_REGS_TEMP_MON_IN_TEMPSENSINT_EN_POS    0

#define RFIC_REGS_TEMP_MON_IN_CALXO_SPARE_1_IN_RST    0x00000000
#define RFIC_REGS_TEMP_MON_IN_TEMPSENS_ATB_EN_RST    0x00000000
#define RFIC_REGS_TEMP_MON_IN_TEMPSENS_CTRL_RST    0x00000010
#define RFIC_REGS_TEMP_MON_IN_TEMPSENSINT_EN_RST    0x00000000

static inline void rfic_regs_temp_mon_in_pack(struct cl_chip *chip, u32 calxo_spare1_in, u8 tempsens_atb_en, u8 tempsens_ctrl, u8 tempsensint_en)
{
	ASSERT_ERR_CHIP((((u32)calxo_spare1_in << 7) & ~((u32)0x1FFFFF80)) == 0);
	ASSERT_ERR_CHIP((((u32)tempsens_atb_en << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)tempsens_ctrl << 1) & ~((u32)0x0000003E)) == 0);
	ASSERT_ERR_CHIP((((u32)tempsensint_en << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_TEMP_MON_IN_ADDR, ((u32)calxo_spare1_in << 7) | ((u32)tempsens_atb_en << 6) | ((u32)tempsens_ctrl << 1) | ((u32)tempsensint_en << 0));
}

static inline void rfic_regs_temp_mon_in_unpack(struct cl_chip *chip, u32 *calxo_spare1_in, u8 *tempsens_atb_en, u8 *tempsens_ctrl, u8 *tempsensint_en)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_TEMP_MON_IN_ADDR);

	*calxo_spare1_in = (local_val & ((u32)0x1FFFFF80)) >> 7;
	*tempsens_atb_en = (local_val & ((u32)0x00000040)) >> 6;
	*tempsens_ctrl = (local_val & ((u32)0x0000003E)) >> 1;
	*tempsensint_en = (local_val & ((u32)0x00000001)) >> 0;
}

static inline u32 rfic_regs_temp_mon_in_calxo_spare_1_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_TEMP_MON_IN_ADDR);

	return (u32)((local_val & ((u32)0x1FFFFF80)) >> 7);
}

static inline void rfic_regs_temp_mon_in_calxo_spare_1_in_setf(struct cl_chip *chip, u32 calxospare1in)
{
	ASSERT_ERR_CHIP((((u32)calxospare1in << 7) & ~((u32)0x1FFFFF80)) == 0);
	cl_reg_write(chip, RFIC_REGS_TEMP_MON_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_TEMP_MON_IN_ADDR) & ~((u32)0x1FFFFF80)) | ((u32)calxospare1in << 7));
}

#define RFIC_REGS_TEMP_MON_IN_CALXO_SPARE_1_IN .addr_index = 0x000001EA, .size_minus_1 = (22 - 1), .shift = 7

static inline u8 rfic_regs_temp_mon_in_tempsens_atb_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_TEMP_MON_IN_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void rfic_regs_temp_mon_in_tempsens_atb_en_setf(struct cl_chip *chip, u8 tempsensatben)
{
	ASSERT_ERR_CHIP((((u32)tempsensatben << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RFIC_REGS_TEMP_MON_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_TEMP_MON_IN_ADDR) & ~((u32)0x00000040)) | ((u32)tempsensatben << 6));
}

#define RFIC_REGS_TEMP_MON_IN_TEMPSENS_ATB_EN .addr_index = 0x000001EA, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_temp_mon_in_tempsens_ctrl_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_TEMP_MON_IN_ADDR);

	return (u8)((local_val & ((u32)0x0000003E)) >> 1);
}

static inline void rfic_regs_temp_mon_in_tempsens_ctrl_setf(struct cl_chip *chip, u8 tempsensctrl)
{
	ASSERT_ERR_CHIP((((u32)tempsensctrl << 1) & ~((u32)0x0000003E)) == 0);
	cl_reg_write(chip, RFIC_REGS_TEMP_MON_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_TEMP_MON_IN_ADDR) & ~((u32)0x0000003E)) | ((u32)tempsensctrl << 1));
}

#define RFIC_REGS_TEMP_MON_IN_TEMPSENS_CTRL .addr_index = 0x000001EA, .size_minus_1 = (5 - 1), .shift = 1

static inline u8 rfic_regs_temp_mon_in_tempsensint_en_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_TEMP_MON_IN_ADDR);

	return (u8)((local_val & ((u32)0x00000001)) >> 0);
}

static inline void rfic_regs_temp_mon_in_tempsensint_en_setf(struct cl_chip *chip, u8 tempsensinten)
{
	ASSERT_ERR_CHIP((((u32)tempsensinten << 0) & ~((u32)0x00000001)) == 0);
	cl_reg_write(chip, RFIC_REGS_TEMP_MON_IN_ADDR, (cl_reg_read(chip, RFIC_REGS_TEMP_MON_IN_ADDR) & ~((u32)0x00000001)) | ((u32)tempsensinten << 0));
}

#define RFIC_REGS_TEMP_MON_IN_TEMPSENSINT_EN .addr_index = 0x000001EA, .size_minus_1 = (1 - 1), .shift = 0

/**
 * @brief SX_0_ATB_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:06 SX0_atb_spare0_in         0x00000000
 *    05:00 SX0_atb_sel               0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_0_ATB_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000800)
#define RFIC_REGS_SX_0_ATB_CTRL_0_OFFSET      0x00000800
#define RFIC_REGS_SX_0_ATB_CTRL_0_INDEX       0x00000200
#define RFIC_REGS_SX_0_ATB_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_sx_0_atb_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_ATB_CTRL_0_ADDR);
}

static inline void rfic_regs_sx_0_atb_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_0_ATB_CTRL_0_ADDR, value);
}

#define RFIC_REGS_SX_0_ATB_CTRL_0 .addr_index = 0x00000200, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_ATB_CTRL_0_SX_0_ATB_SPARE_0_IN_MASK    ((u32)0xFFFFFFC0)
#define RFIC_REGS_SX_0_ATB_CTRL_0_SX_0_ATB_SPARE_0_IN_LSB    6
#define RFIC_REGS_SX_0_ATB_CTRL_0_SX_0_ATB_SPARE_0_IN_WIDTH    ((u32)0x0000001A)
#define RFIC_REGS_SX_0_ATB_CTRL_0_SX_0_ATB_SEL_MASK    ((u32)0x0000003F)
#define RFIC_REGS_SX_0_ATB_CTRL_0_SX_0_ATB_SEL_LSB    0
#define RFIC_REGS_SX_0_ATB_CTRL_0_SX_0_ATB_SEL_WIDTH    ((u32)0x00000006)

#define RFIC_REGS_SX_0_ATB_CTRL_0_SX_0_ATB_SPARE_0_IN_RST    0x00000000
#define RFIC_REGS_SX_0_ATB_CTRL_0_SX_0_ATB_SEL_RST    0x00000000

static inline void rfic_regs_sx_0_atb_ctrl_0_pack(struct cl_chip *chip, u32 sx0_atb_spare0_in, u8 sx0_atb_sel)
{
	ASSERT_ERR_CHIP((((u32)sx0_atb_spare0_in << 6) & ~((u32)0xFFFFFFC0)) == 0);
	ASSERT_ERR_CHIP((((u32)sx0_atb_sel << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_ATB_CTRL_0_ADDR, ((u32)sx0_atb_spare0_in << 6) | ((u32)sx0_atb_sel << 0));
}

static inline void rfic_regs_sx_0_atb_ctrl_0_unpack(struct cl_chip *chip, u32 *sx0_atb_spare0_in, u8 *sx0_atb_sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_ATB_CTRL_0_ADDR);

	*sx0_atb_spare0_in = (local_val & ((u32)0xFFFFFFC0)) >> 6;
	*sx0_atb_sel = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u32 rfic_regs_sx_0_atb_ctrl_0_sx_0_atb_spare_0_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_ATB_CTRL_0_ADDR);

	return (u32)((local_val & ((u32)0xFFFFFFC0)) >> 6);
}

static inline void rfic_regs_sx_0_atb_ctrl_0_sx_0_atb_spare_0_in_setf(struct cl_chip *chip, u32 sx0atbspare0in)
{
	ASSERT_ERR_CHIP((((u32)sx0atbspare0in << 6) & ~((u32)0xFFFFFFC0)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_ATB_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_ATB_CTRL_0_ADDR) & ~((u32)0xFFFFFFC0)) | ((u32)sx0atbspare0in << 6));
}

#define RFIC_REGS_SX_0_ATB_CTRL_0_SX_0_ATB_SPARE_0_IN .addr_index = 0x00000200, .size_minus_1 = (26 - 1), .shift = 6

static inline u8 rfic_regs_sx_0_atb_ctrl_0_sx_0_atb_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_ATB_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void rfic_regs_sx_0_atb_ctrl_0_sx_0_atb_sel_setf(struct cl_chip *chip, u8 sx0atbsel)
{
	ASSERT_ERR_CHIP((((u32)sx0atbsel << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_ATB_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_0_ATB_CTRL_0_ADDR) & ~((u32)0x0000003F)) | ((u32)sx0atbsel << 0));
}

#define RFIC_REGS_SX_0_ATB_CTRL_0_SX_0_ATB_SEL .addr_index = 0x00000200, .size_minus_1 = (6 - 1), .shift = 0

/**
 * @brief SX_0_ATB_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 SX0_atb_spare1_in         0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_0_ATB_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000804)
#define RFIC_REGS_SX_0_ATB_CTRL_1_OFFSET      0x00000804
#define RFIC_REGS_SX_0_ATB_CTRL_1_INDEX       0x00000201
#define RFIC_REGS_SX_0_ATB_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_sx_0_atb_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_0_ATB_CTRL_1_ADDR);
}

static inline void rfic_regs_sx_0_atb_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_0_ATB_CTRL_1_ADDR, value);
}

#define RFIC_REGS_SX_0_ATB_CTRL_1 .addr_index = 0x00000201, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_0_ATB_CTRL_1_SX_0_ATB_SPARE_1_IN_MASK    ((u32)0xFFFFFFFF)
#define RFIC_REGS_SX_0_ATB_CTRL_1_SX_0_ATB_SPARE_1_IN_LSB    0
#define RFIC_REGS_SX_0_ATB_CTRL_1_SX_0_ATB_SPARE_1_IN_WIDTH    ((u32)0x00000020)

#define RFIC_REGS_SX_0_ATB_CTRL_1_SX_0_ATB_SPARE_1_IN_RST    0x00000000

static inline u32 rfic_regs_sx_0_atb_ctrl_1_sx_0_atb_spare_1_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_0_ATB_CTRL_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void rfic_regs_sx_0_atb_ctrl_1_sx_0_atb_spare_1_in_setf(struct cl_chip *chip, u32 sx0atbspare1in)
{
	ASSERT_ERR_CHIP((((u32)sx0atbspare1in << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_0_ATB_CTRL_1_ADDR, (u32)sx0atbspare1in << 0);
}

#define RFIC_REGS_SX_0_ATB_CTRL_1_SX_0_ATB_SPARE_1_IN .addr_index = 0x00000201, .size_minus_1 = (32 - 1), .shift = 0

/**
 * @brief SX_1_ATB_CTRL_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:06 SX1_atb_spare0_in         0x00000000
 *    05:00 SX1_atb_sel               0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_1_ATB_CTRL_0_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000808)
#define RFIC_REGS_SX_1_ATB_CTRL_0_OFFSET      0x00000808
#define RFIC_REGS_SX_1_ATB_CTRL_0_INDEX       0x00000202
#define RFIC_REGS_SX_1_ATB_CTRL_0_RESET       0x00000000

static inline u32 rfic_regs_sx_1_atb_ctrl_0_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_ATB_CTRL_0_ADDR);
}

static inline void rfic_regs_sx_1_atb_ctrl_0_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_1_ATB_CTRL_0_ADDR, value);
}

#define RFIC_REGS_SX_1_ATB_CTRL_0 .addr_index = 0x00000202, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_ATB_CTRL_0_SX_1_ATB_SPARE_0_IN_MASK    ((u32)0xFFFFFFC0)
#define RFIC_REGS_SX_1_ATB_CTRL_0_SX_1_ATB_SPARE_0_IN_LSB    6
#define RFIC_REGS_SX_1_ATB_CTRL_0_SX_1_ATB_SPARE_0_IN_WIDTH    ((u32)0x0000001A)
#define RFIC_REGS_SX_1_ATB_CTRL_0_SX_1_ATB_SEL_MASK    ((u32)0x0000003F)
#define RFIC_REGS_SX_1_ATB_CTRL_0_SX_1_ATB_SEL_LSB    0
#define RFIC_REGS_SX_1_ATB_CTRL_0_SX_1_ATB_SEL_WIDTH    ((u32)0x00000006)

#define RFIC_REGS_SX_1_ATB_CTRL_0_SX_1_ATB_SPARE_0_IN_RST    0x00000000
#define RFIC_REGS_SX_1_ATB_CTRL_0_SX_1_ATB_SEL_RST    0x00000000

static inline void rfic_regs_sx_1_atb_ctrl_0_pack(struct cl_chip *chip, u32 sx1_atb_spare0_in, u8 sx1_atb_sel)
{
	ASSERT_ERR_CHIP((((u32)sx1_atb_spare0_in << 6) & ~((u32)0xFFFFFFC0)) == 0);
	ASSERT_ERR_CHIP((((u32)sx1_atb_sel << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_ATB_CTRL_0_ADDR, ((u32)sx1_atb_spare0_in << 6) | ((u32)sx1_atb_sel << 0));
}

static inline void rfic_regs_sx_1_atb_ctrl_0_unpack(struct cl_chip *chip, u32 *sx1_atb_spare0_in, u8 *sx1_atb_sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_ATB_CTRL_0_ADDR);

	*sx1_atb_spare0_in = (local_val & ((u32)0xFFFFFFC0)) >> 6;
	*sx1_atb_sel = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u32 rfic_regs_sx_1_atb_ctrl_0_sx_1_atb_spare_0_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_ATB_CTRL_0_ADDR);

	return (u32)((local_val & ((u32)0xFFFFFFC0)) >> 6);
}

static inline void rfic_regs_sx_1_atb_ctrl_0_sx_1_atb_spare_0_in_setf(struct cl_chip *chip, u32 sx1atbspare0in)
{
	ASSERT_ERR_CHIP((((u32)sx1atbspare0in << 6) & ~((u32)0xFFFFFFC0)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_ATB_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_ATB_CTRL_0_ADDR) & ~((u32)0xFFFFFFC0)) | ((u32)sx1atbspare0in << 6));
}

#define RFIC_REGS_SX_1_ATB_CTRL_0_SX_1_ATB_SPARE_0_IN .addr_index = 0x00000202, .size_minus_1 = (26 - 1), .shift = 6

static inline u8 rfic_regs_sx_1_atb_ctrl_0_sx_1_atb_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_ATB_CTRL_0_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void rfic_regs_sx_1_atb_ctrl_0_sx_1_atb_sel_setf(struct cl_chip *chip, u8 sx1atbsel)
{
	ASSERT_ERR_CHIP((((u32)sx1atbsel << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_ATB_CTRL_0_ADDR, (cl_reg_read(chip, RFIC_REGS_SX_1_ATB_CTRL_0_ADDR) & ~((u32)0x0000003F)) | ((u32)sx1atbsel << 0));
}

#define RFIC_REGS_SX_1_ATB_CTRL_0_SX_1_ATB_SEL .addr_index = 0x00000202, .size_minus_1 = (6 - 1), .shift = 0

/**
 * @brief SX_1_ATB_CTRL_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 SX1_atb_spare1_in         0x00000000
 * </pre>
 */
#define RFIC_REGS_SX_1_ATB_CTRL_1_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000080C)
#define RFIC_REGS_SX_1_ATB_CTRL_1_OFFSET      0x0000080C
#define RFIC_REGS_SX_1_ATB_CTRL_1_INDEX       0x00000203
#define RFIC_REGS_SX_1_ATB_CTRL_1_RESET       0x00000000

static inline u32 rfic_regs_sx_1_atb_ctrl_1_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_SX_1_ATB_CTRL_1_ADDR);
}

static inline void rfic_regs_sx_1_atb_ctrl_1_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_SX_1_ATB_CTRL_1_ADDR, value);
}

#define RFIC_REGS_SX_1_ATB_CTRL_1 .addr_index = 0x00000203, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_SX_1_ATB_CTRL_1_SX_1_ATB_SPARE_1_IN_MASK    ((u32)0xFFFFFFFF)
#define RFIC_REGS_SX_1_ATB_CTRL_1_SX_1_ATB_SPARE_1_IN_LSB    0
#define RFIC_REGS_SX_1_ATB_CTRL_1_SX_1_ATB_SPARE_1_IN_WIDTH    ((u32)0x00000020)

#define RFIC_REGS_SX_1_ATB_CTRL_1_SX_1_ATB_SPARE_1_IN_RST    0x00000000

static inline u32 rfic_regs_sx_1_atb_ctrl_1_sx_1_atb_spare_1_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_SX_1_ATB_CTRL_1_ADDR);

	return (u32)(local_val >> 0);
}

static inline void rfic_regs_sx_1_atb_ctrl_1_sx_1_atb_spare_1_in_setf(struct cl_chip *chip, u32 sx1atbspare1in)
{
	ASSERT_ERR_CHIP((((u32)sx1atbspare1in << 0) & ~((u32)0xFFFFFFFF)) == 0);
	cl_reg_write(chip, RFIC_REGS_SX_1_ATB_CTRL_1_ADDR, (u32)sx1atbspare1in << 0);
}

#define RFIC_REGS_SX_1_ATB_CTRL_1_SX_1_ATB_SPARE_1_IN .addr_index = 0x00000203, .size_minus_1 = (32 - 1), .shift = 0

/**
 * @brief CH_0_ATB_CTRL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:06 CH0_atb_spare0_in         0x00000000
 *    05:00 CH0_atb_sel               0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_0_ATB_CTRL_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000810)
#define RFIC_REGS_CH_0_ATB_CTRL_OFFSET      0x00000810
#define RFIC_REGS_CH_0_ATB_CTRL_INDEX       0x00000204
#define RFIC_REGS_CH_0_ATB_CTRL_RESET       0x00000000

static inline u32 rfic_regs_ch_0_atb_ctrl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_0_ATB_CTRL_ADDR);
}

static inline void rfic_regs_ch_0_atb_ctrl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_0_ATB_CTRL_ADDR, value);
}

#define RFIC_REGS_CH_0_ATB_CTRL .addr_index = 0x00000204, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_0_ATB_CTRL_CH_0_ATB_SPARE_0_IN_MASK    ((u32)0xFFFFFFC0)
#define RFIC_REGS_CH_0_ATB_CTRL_CH_0_ATB_SPARE_0_IN_LSB    6
#define RFIC_REGS_CH_0_ATB_CTRL_CH_0_ATB_SPARE_0_IN_WIDTH    ((u32)0x0000001A)
#define RFIC_REGS_CH_0_ATB_CTRL_CH_0_ATB_SEL_MASK    ((u32)0x0000003F)
#define RFIC_REGS_CH_0_ATB_CTRL_CH_0_ATB_SEL_LSB    0
#define RFIC_REGS_CH_0_ATB_CTRL_CH_0_ATB_SEL_WIDTH    ((u32)0x00000006)

#define RFIC_REGS_CH_0_ATB_CTRL_CH_0_ATB_SPARE_0_IN_RST    0x00000000
#define RFIC_REGS_CH_0_ATB_CTRL_CH_0_ATB_SEL_RST    0x00000000

static inline void rfic_regs_ch_0_atb_ctrl_pack(struct cl_chip *chip, u32 ch0_atb_spare0_in, u8 ch0_atb_sel)
{
	ASSERT_ERR_CHIP((((u32)ch0_atb_spare0_in << 6) & ~((u32)0xFFFFFFC0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch0_atb_sel << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_ATB_CTRL_ADDR, ((u32)ch0_atb_spare0_in << 6) | ((u32)ch0_atb_sel << 0));
}

static inline void rfic_regs_ch_0_atb_ctrl_unpack(struct cl_chip *chip, u32 *ch0_atb_spare0_in, u8 *ch0_atb_sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ATB_CTRL_ADDR);

	*ch0_atb_spare0_in = (local_val & ((u32)0xFFFFFFC0)) >> 6;
	*ch0_atb_sel = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u32 rfic_regs_ch_0_atb_ctrl_ch_0_atb_spare_0_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ATB_CTRL_ADDR);

	return (u32)((local_val & ((u32)0xFFFFFFC0)) >> 6);
}

static inline void rfic_regs_ch_0_atb_ctrl_ch_0_atb_spare_0_in_setf(struct cl_chip *chip, u32 ch0atbspare0in)
{
	ASSERT_ERR_CHIP((((u32)ch0atbspare0in << 6) & ~((u32)0xFFFFFFC0)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_ATB_CTRL_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_ATB_CTRL_ADDR) & ~((u32)0xFFFFFFC0)) | ((u32)ch0atbspare0in << 6));
}

#define RFIC_REGS_CH_0_ATB_CTRL_CH_0_ATB_SPARE_0_IN .addr_index = 0x00000204, .size_minus_1 = (26 - 1), .shift = 6

static inline u8 rfic_regs_ch_0_atb_ctrl_ch_0_atb_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_0_ATB_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void rfic_regs_ch_0_atb_ctrl_ch_0_atb_sel_setf(struct cl_chip *chip, u8 ch0atbsel)
{
	ASSERT_ERR_CHIP((((u32)ch0atbsel << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_0_ATB_CTRL_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_0_ATB_CTRL_ADDR) & ~((u32)0x0000003F)) | ((u32)ch0atbsel << 0));
}

#define RFIC_REGS_CH_0_ATB_CTRL_CH_0_ATB_SEL .addr_index = 0x00000204, .size_minus_1 = (6 - 1), .shift = 0

/**
 * @brief CH_1_ATB_CTRL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:06 CH1_atb_spare0_in         0x00000000
 *    05:00 CH1_atb_sel               0x00000000
 * </pre>
 */
#define RFIC_REGS_CH_1_ATB_CTRL_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000814)
#define RFIC_REGS_CH_1_ATB_CTRL_OFFSET      0x00000814
#define RFIC_REGS_CH_1_ATB_CTRL_INDEX       0x00000205
#define RFIC_REGS_CH_1_ATB_CTRL_RESET       0x00000000

static inline u32 rfic_regs_ch_1_atb_ctrl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_CH_1_ATB_CTRL_ADDR);
}

static inline void rfic_regs_ch_1_atb_ctrl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_CH_1_ATB_CTRL_ADDR, value);
}

#define RFIC_REGS_CH_1_ATB_CTRL .addr_index = 0x00000205, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_CH_1_ATB_CTRL_CH_1_ATB_SPARE_0_IN_MASK    ((u32)0xFFFFFFC0)
#define RFIC_REGS_CH_1_ATB_CTRL_CH_1_ATB_SPARE_0_IN_LSB    6
#define RFIC_REGS_CH_1_ATB_CTRL_CH_1_ATB_SPARE_0_IN_WIDTH    ((u32)0x0000001A)
#define RFIC_REGS_CH_1_ATB_CTRL_CH_1_ATB_SEL_MASK    ((u32)0x0000003F)
#define RFIC_REGS_CH_1_ATB_CTRL_CH_1_ATB_SEL_LSB    0
#define RFIC_REGS_CH_1_ATB_CTRL_CH_1_ATB_SEL_WIDTH    ((u32)0x00000006)

#define RFIC_REGS_CH_1_ATB_CTRL_CH_1_ATB_SPARE_0_IN_RST    0x00000000
#define RFIC_REGS_CH_1_ATB_CTRL_CH_1_ATB_SEL_RST    0x00000000

static inline void rfic_regs_ch_1_atb_ctrl_pack(struct cl_chip *chip, u32 ch1_atb_spare0_in, u8 ch1_atb_sel)
{
	ASSERT_ERR_CHIP((((u32)ch1_atb_spare0_in << 6) & ~((u32)0xFFFFFFC0)) == 0);
	ASSERT_ERR_CHIP((((u32)ch1_atb_sel << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_ATB_CTRL_ADDR, ((u32)ch1_atb_spare0_in << 6) | ((u32)ch1_atb_sel << 0));
}

static inline void rfic_regs_ch_1_atb_ctrl_unpack(struct cl_chip *chip, u32 *ch1_atb_spare0_in, u8 *ch1_atb_sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ATB_CTRL_ADDR);

	*ch1_atb_spare0_in = (local_val & ((u32)0xFFFFFFC0)) >> 6;
	*ch1_atb_sel = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u32 rfic_regs_ch_1_atb_ctrl_ch_1_atb_spare_0_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ATB_CTRL_ADDR);

	return (u32)((local_val & ((u32)0xFFFFFFC0)) >> 6);
}

static inline void rfic_regs_ch_1_atb_ctrl_ch_1_atb_spare_0_in_setf(struct cl_chip *chip, u32 ch1atbspare0in)
{
	ASSERT_ERR_CHIP((((u32)ch1atbspare0in << 6) & ~((u32)0xFFFFFFC0)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_ATB_CTRL_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_ATB_CTRL_ADDR) & ~((u32)0xFFFFFFC0)) | ((u32)ch1atbspare0in << 6));
}

#define RFIC_REGS_CH_1_ATB_CTRL_CH_1_ATB_SPARE_0_IN .addr_index = 0x00000205, .size_minus_1 = (26 - 1), .shift = 6

static inline u8 rfic_regs_ch_1_atb_ctrl_ch_1_atb_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_CH_1_ATB_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void rfic_regs_ch_1_atb_ctrl_ch_1_atb_sel_setf(struct cl_chip *chip, u8 ch1atbsel)
{
	ASSERT_ERR_CHIP((((u32)ch1atbsel << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RFIC_REGS_CH_1_ATB_CTRL_ADDR, (cl_reg_read(chip, RFIC_REGS_CH_1_ATB_CTRL_ADDR) & ~((u32)0x0000003F)) | ((u32)ch1atbsel << 0));
}

#define RFIC_REGS_CH_1_ATB_CTRL_CH_1_ATB_SEL .addr_index = 0x00000205, .size_minus_1 = (6 - 1), .shift = 0

/**
 * @brief BT_ATB_CTRL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:06 BT_atb_spare0_in          0x00000000
 *    05:00 BT_atb_sel                0x00000000
 * </pre>
 */
#define RFIC_REGS_BT_ATB_CTRL_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000818)
#define RFIC_REGS_BT_ATB_CTRL_OFFSET      0x00000818
#define RFIC_REGS_BT_ATB_CTRL_INDEX       0x00000206
#define RFIC_REGS_BT_ATB_CTRL_RESET       0x00000000

static inline u32 rfic_regs_bt_atb_ctrl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_BT_ATB_CTRL_ADDR);
}

static inline void rfic_regs_bt_atb_ctrl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_BT_ATB_CTRL_ADDR, value);
}

#define RFIC_REGS_BT_ATB_CTRL .addr_index = 0x00000206, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_BT_ATB_CTRL_BT_ATB_SPARE_0_IN_MASK    ((u32)0x0000FFC0)
#define RFIC_REGS_BT_ATB_CTRL_BT_ATB_SPARE_0_IN_LSB    6
#define RFIC_REGS_BT_ATB_CTRL_BT_ATB_SPARE_0_IN_WIDTH    ((u32)0x0000000A)
#define RFIC_REGS_BT_ATB_CTRL_BT_ATB_SEL_MASK    ((u32)0x0000003F)
#define RFIC_REGS_BT_ATB_CTRL_BT_ATB_SEL_LSB    0
#define RFIC_REGS_BT_ATB_CTRL_BT_ATB_SEL_WIDTH    ((u32)0x00000006)

#define RFIC_REGS_BT_ATB_CTRL_BT_ATB_SPARE_0_IN_RST    0x00000000
#define RFIC_REGS_BT_ATB_CTRL_BT_ATB_SEL_RST    0x00000000

static inline void rfic_regs_bt_atb_ctrl_pack(struct cl_chip *chip, u16 bt_atb_spare0_in, u8 bt_atb_sel)
{
	ASSERT_ERR_CHIP((((u32)bt_atb_spare0_in << 6) & ~((u32)0x0000FFC0)) == 0);
	ASSERT_ERR_CHIP((((u32)bt_atb_sel << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ATB_CTRL_ADDR, ((u32)bt_atb_spare0_in << 6) | ((u32)bt_atb_sel << 0));
}

static inline void rfic_regs_bt_atb_ctrl_unpack(struct cl_chip *chip, u16 *bt_atb_spare0_in, u8 *bt_atb_sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ATB_CTRL_ADDR);

	*bt_atb_spare0_in = (local_val & ((u32)0x0000FFC0)) >> 6;
	*bt_atb_sel = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u16 rfic_regs_bt_atb_ctrl_bt_atb_spare_0_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ATB_CTRL_ADDR);

	return (u16)((local_val & ((u32)0x0000FFC0)) >> 6);
}

static inline void rfic_regs_bt_atb_ctrl_bt_atb_spare_0_in_setf(struct cl_chip *chip, u16 btatbspare0in)
{
	ASSERT_ERR_CHIP((((u32)btatbspare0in << 6) & ~((u32)0x0000FFC0)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ATB_CTRL_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ATB_CTRL_ADDR) & ~((u32)0x0000FFC0)) | ((u32)btatbspare0in << 6));
}

#define RFIC_REGS_BT_ATB_CTRL_BT_ATB_SPARE_0_IN .addr_index = 0x00000206, .size_minus_1 = (10 - 1), .shift = 6

static inline u8 rfic_regs_bt_atb_ctrl_bt_atb_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_BT_ATB_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void rfic_regs_bt_atb_ctrl_bt_atb_sel_setf(struct cl_chip *chip, u8 btatbsel)
{
	ASSERT_ERR_CHIP((((u32)btatbsel << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RFIC_REGS_BT_ATB_CTRL_ADDR, (cl_reg_read(chip, RFIC_REGS_BT_ATB_CTRL_ADDR) & ~((u32)0x0000003F)) | ((u32)btatbsel << 0));
}

#define RFIC_REGS_BT_ATB_CTRL_BT_ATB_SEL .addr_index = 0x00000206, .size_minus_1 = (6 - 1), .shift = 0

/**
 * @brief AUX_ATB_CTRL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:06 AUX_atb_spare0_in         0x00000000
 *    05:00 AUX_atb_sel               0x00000000
 * </pre>
 */
#define RFIC_REGS_AUX_ATB_CTRL_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x0000081C)
#define RFIC_REGS_AUX_ATB_CTRL_OFFSET      0x0000081C
#define RFIC_REGS_AUX_ATB_CTRL_INDEX       0x00000207
#define RFIC_REGS_AUX_ATB_CTRL_RESET       0x00000000

static inline u32 rfic_regs_aux_atb_ctrl_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_AUX_ATB_CTRL_ADDR);
}

static inline void rfic_regs_aux_atb_ctrl_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_AUX_ATB_CTRL_ADDR, value);
}

#define RFIC_REGS_AUX_ATB_CTRL .addr_index = 0x00000207, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_AUX_ATB_CTRL_AUX_ATB_SPARE_0_IN_MASK    ((u32)0xFFFFFFC0)
#define RFIC_REGS_AUX_ATB_CTRL_AUX_ATB_SPARE_0_IN_LSB    6
#define RFIC_REGS_AUX_ATB_CTRL_AUX_ATB_SPARE_0_IN_WIDTH    ((u32)0x0000001A)
#define RFIC_REGS_AUX_ATB_CTRL_AUX_ATB_SEL_MASK    ((u32)0x0000003F)
#define RFIC_REGS_AUX_ATB_CTRL_AUX_ATB_SEL_LSB    0
#define RFIC_REGS_AUX_ATB_CTRL_AUX_ATB_SEL_WIDTH    ((u32)0x00000006)

#define RFIC_REGS_AUX_ATB_CTRL_AUX_ATB_SPARE_0_IN_RST    0x00000000
#define RFIC_REGS_AUX_ATB_CTRL_AUX_ATB_SEL_RST    0x00000000

static inline void rfic_regs_aux_atb_ctrl_pack(struct cl_chip *chip, u32 aux_atb_spare0_in, u8 aux_atb_sel)
{
	ASSERT_ERR_CHIP((((u32)aux_atb_spare0_in << 6) & ~((u32)0xFFFFFFC0)) == 0);
	ASSERT_ERR_CHIP((((u32)aux_atb_sel << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ATB_CTRL_ADDR, ((u32)aux_atb_spare0_in << 6) | ((u32)aux_atb_sel << 0));
}

static inline void rfic_regs_aux_atb_ctrl_unpack(struct cl_chip *chip, u32 *aux_atb_spare0_in, u8 *aux_atb_sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ATB_CTRL_ADDR);

	*aux_atb_spare0_in = (local_val & ((u32)0xFFFFFFC0)) >> 6;
	*aux_atb_sel = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u32 rfic_regs_aux_atb_ctrl_aux_atb_spare_0_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ATB_CTRL_ADDR);

	return (u32)((local_val & ((u32)0xFFFFFFC0)) >> 6);
}

static inline void rfic_regs_aux_atb_ctrl_aux_atb_spare_0_in_setf(struct cl_chip *chip, u32 auxatbspare0in)
{
	ASSERT_ERR_CHIP((((u32)auxatbspare0in << 6) & ~((u32)0xFFFFFFC0)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ATB_CTRL_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ATB_CTRL_ADDR) & ~((u32)0xFFFFFFC0)) | ((u32)auxatbspare0in << 6));
}

#define RFIC_REGS_AUX_ATB_CTRL_AUX_ATB_SPARE_0_IN .addr_index = 0x00000207, .size_minus_1 = (26 - 1), .shift = 6

static inline u8 rfic_regs_aux_atb_ctrl_aux_atb_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_AUX_ATB_CTRL_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void rfic_regs_aux_atb_ctrl_aux_atb_sel_setf(struct cl_chip *chip, u8 auxatbsel)
{
	ASSERT_ERR_CHIP((((u32)auxatbsel << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RFIC_REGS_AUX_ATB_CTRL_ADDR, (cl_reg_read(chip, RFIC_REGS_AUX_ATB_CTRL_ADDR) & ~((u32)0x0000003F)) | ((u32)auxatbsel << 0));
}

#define RFIC_REGS_AUX_ATB_CTRL_AUX_ATB_SEL .addr_index = 0x00000207, .size_minus_1 = (6 - 1), .shift = 0

/**
 * @brief DPLL_TEST register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    13:11 atb_spare0_in             0x00000000
 *    10:07 atb_en_address            0x00000000
 *    06    anamon_sel                00000000
 *    05:00 dpll_atb_sel              0x00000000
 * </pre>
 */
#define RFIC_REGS_DPLL_TEST_ADDR        (REG_RFIC_REGS_BASE_ADDR + 0x00000820)
#define RFIC_REGS_DPLL_TEST_OFFSET      0x00000820
#define RFIC_REGS_DPLL_TEST_INDEX       0x00000208
#define RFIC_REGS_DPLL_TEST_RESET       0x00000000

static inline u32 rfic_regs_dpll_test_get(struct cl_chip *chip)
{
	return cl_reg_read(chip, RFIC_REGS_DPLL_TEST_ADDR);
}

static inline void rfic_regs_dpll_test_set(struct cl_chip *chip, u32 value)
{
	cl_reg_write(chip, RFIC_REGS_DPLL_TEST_ADDR, value);
}

#define RFIC_REGS_DPLL_TEST .addr_index = 0x00000208, .size_minus_1 = 31, .shift = 0

/* Field  definitions */
#define RFIC_REGS_DPLL_TEST_ATB_SPARE_0_IN_MASK    ((u32)0x00003800)
#define RFIC_REGS_DPLL_TEST_ATB_SPARE_0_IN_LSB    11
#define RFIC_REGS_DPLL_TEST_ATB_SPARE_0_IN_WIDTH    ((u32)0x00000003)
#define RFIC_REGS_DPLL_TEST_ATB_EN_ADDRESS_MASK    ((u32)0x00000780)
#define RFIC_REGS_DPLL_TEST_ATB_EN_ADDRESS_LSB    7
#define RFIC_REGS_DPLL_TEST_ATB_EN_ADDRESS_WIDTH    ((u32)0x00000004)
#define RFIC_REGS_DPLL_TEST_ANAMON_SEL_BIT    ((u32)0x00000040)
#define RFIC_REGS_DPLL_TEST_ANAMON_SEL_POS    6
#define RFIC_REGS_DPLL_TEST_DPLL_ATB_SEL_MASK    ((u32)0x0000003F)
#define RFIC_REGS_DPLL_TEST_DPLL_ATB_SEL_LSB    0
#define RFIC_REGS_DPLL_TEST_DPLL_ATB_SEL_WIDTH    ((u32)0x00000006)

#define RFIC_REGS_DPLL_TEST_ATB_SPARE_0_IN_RST    0x00000000
#define RFIC_REGS_DPLL_TEST_ATB_EN_ADDRESS_RST    0x00000000
#define RFIC_REGS_DPLL_TEST_ANAMON_SEL_RST    0x00000000
#define RFIC_REGS_DPLL_TEST_DPLL_ATB_SEL_RST    0x00000000

static inline void rfic_regs_dpll_test_pack(struct cl_chip *chip, u8 atb_spare0_in, u8 atb_en_address, u8 anamon_sel, u8 dpll_atb_sel)
{
	ASSERT_ERR_CHIP((((u32)atb_spare0_in << 11) & ~((u32)0x00003800)) == 0);
	ASSERT_ERR_CHIP((((u32)atb_en_address << 7) & ~((u32)0x00000780)) == 0);
	ASSERT_ERR_CHIP((((u32)anamon_sel << 6) & ~((u32)0x00000040)) == 0);
	ASSERT_ERR_CHIP((((u32)dpll_atb_sel << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_TEST_ADDR, ((u32)atb_spare0_in << 11) | ((u32)atb_en_address << 7) | ((u32)anamon_sel << 6) | ((u32)dpll_atb_sel << 0));
}

static inline void rfic_regs_dpll_test_unpack(struct cl_chip *chip, u8 *atb_spare0_in, u8 *atb_en_address, u8 *anamon_sel, u8 *dpll_atb_sel)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_TEST_ADDR);

	*atb_spare0_in = (local_val & ((u32)0x00003800)) >> 11;
	*atb_en_address = (local_val & ((u32)0x00000780)) >> 7;
	*anamon_sel = (local_val & ((u32)0x00000040)) >> 6;
	*dpll_atb_sel = (local_val & ((u32)0x0000003F)) >> 0;
}

static inline u8 rfic_regs_dpll_test_atb_spare_0_in_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_TEST_ADDR);

	return (u8)((local_val & ((u32)0x00003800)) >> 11);
}

static inline void rfic_regs_dpll_test_atb_spare_0_in_setf(struct cl_chip *chip, u8 atbspare0in)
{
	ASSERT_ERR_CHIP((((u32)atbspare0in << 11) & ~((u32)0x00003800)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_TEST_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_TEST_ADDR) & ~((u32)0x00003800)) | ((u32)atbspare0in << 11));
}

#define RFIC_REGS_DPLL_TEST_ATB_SPARE_0_IN .addr_index = 0x00000208, .size_minus_1 = (3 - 1), .shift = 11

static inline u8 rfic_regs_dpll_test_atb_en_address_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_TEST_ADDR);

	return (u8)((local_val & ((u32)0x00000780)) >> 7);
}

static inline void rfic_regs_dpll_test_atb_en_address_setf(struct cl_chip *chip, u8 atbenaddress)
{
	ASSERT_ERR_CHIP((((u32)atbenaddress << 7) & ~((u32)0x00000780)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_TEST_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_TEST_ADDR) & ~((u32)0x00000780)) | ((u32)atbenaddress << 7));
}

#define RFIC_REGS_DPLL_TEST_ATB_EN_ADDRESS .addr_index = 0x00000208, .size_minus_1 = (4 - 1), .shift = 7

static inline u8 rfic_regs_dpll_test_anamon_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_TEST_ADDR);

	return (u8)((local_val & ((u32)0x00000040)) >> 6);
}

static inline void rfic_regs_dpll_test_anamon_sel_setf(struct cl_chip *chip, u8 anamonsel)
{
	ASSERT_ERR_CHIP((((u32)anamonsel << 6) & ~((u32)0x00000040)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_TEST_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_TEST_ADDR) & ~((u32)0x00000040)) | ((u32)anamonsel << 6));
}

#define RFIC_REGS_DPLL_TEST_ANAMON_SEL .addr_index = 0x00000208, .size_minus_1 = (1 - 1), .shift = 6

static inline u8 rfic_regs_dpll_test_dpll_atb_sel_getf(struct cl_chip *chip)
{
	u32 local_val = cl_reg_read(chip, RFIC_REGS_DPLL_TEST_ADDR);

	return (u8)((local_val & ((u32)0x0000003F)) >> 0);
}

static inline void rfic_regs_dpll_test_dpll_atb_sel_setf(struct cl_chip *chip, u8 dpllatbsel)
{
	ASSERT_ERR_CHIP((((u32)dpllatbsel << 0) & ~((u32)0x0000003F)) == 0);
	cl_reg_write(chip, RFIC_REGS_DPLL_TEST_ADDR, (cl_reg_read(chip, RFIC_REGS_DPLL_TEST_ADDR) & ~((u32)0x0000003F)) | ((u32)dpllatbsel << 0));
}

#define RFIC_REGS_DPLL_TEST_DPLL_ATB_SEL .addr_index = 0x00000208, .size_minus_1 = (6 - 1), .shift = 0

#endif /* REG_RFIC_REGS_H */
