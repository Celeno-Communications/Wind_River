//  Memory map file to generate linker scripts for programs without board I/O.

// Customer ID=16829; Build=0x8f21b; Copyright (c) 2004-2015 Cadence Design Systems, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.



ROMING=true

// A memory map is a sequence of memory descriptions and
// optional parameter assignments.
//
// Each memory description has the following format:
//   BEGIN <name>
//     <addr> [,<paddr>] : <mem-type> : <mem-name> : <size> [,<psize>]
//                       : [writable] [,executable] [,device] ;
//     <segment>*
//   END <name>
//
// where each <segment> description has the following format:
//     <seg-name> : F|C : <start-addr> - <end-addr> [ : STACK ] [ : HEAP ]
//                : <section-name>* ;
//
// Each parameter assignment is a keyword/value pair in the following format:
//   <keyword> = <value>                (no spaces in <value>)
// or
//   <keyword> = "<value>"              (spaces allowed in <value>)
//
// The following primitives are also defined:
//   PLACE SECTIONS( <section-name>* ) { WITH_SECTION(<section-name>)
//                                       | IN_SEGMENT(<seg-name>) }
//
//   NOLOAD <section-name1> [ <section-name2> ... ]
//
// Please refer to the Xtensa LSP Reference Manual for more details.
//

// Additions for -mvecbase option:
VECBASE=0x50000400


// Additions for -mvecselect option:
VECSELECT=0x1


// Additions for -mlocalmems option:
PLACE SECTIONS(.bss) WITH_SECTION(.dram0.bss)
PLACE SECTIONS(.data) WITH_SECTION(.dram0.data)
PLACE SECTIONS(.rodata) WITH_SECTION(.dram0.rodata)


// Additions for -mrompack option:
ROMING=1

BEGIN dram0
0x40000000: dataRam : dram0 : 0x40000 : writable ;
 dram0_0 : C : 0x40000000 - 0x4001ffff : ;
END dram0

BEGIN dram1
0x40040000: dataRam : dram1 : 0x40000 : writable ;
END dram1

BEGIN iram0
0x40080000: instRam : iram0 : 0x40000 : executable, writable ;
 iram0_0 : C : 0x40080000 - 0x4009ffff : .iram0.literal .iram0.text;
END iram0

BEGIN irom0
0x50000000: instRom : irom0 : 0x100000 : executable ;
 irom0_0 : F : 0x50000000 - 0x500002df : .ResetVector.text .ResetHandler.literal .ResetHandler.text;
 irom0_1 : C : 0x500002e0 - 0x500003ff : ;
 irom0_2 : F : 0x50000400 - 0x50000577 : .WindowVectors.text;
 irom0_3 : C : 0x50000578 - 0x5000057b : .Level2InterruptVector.literal;
 irom0_4 : F : 0x5000057c - 0x50000597 : .Level2InterruptVector.text;
 irom0_5 : C : 0x50000598 - 0x5000059b : .Level3InterruptVector.literal;
 irom0_6 : F : 0x5000059c - 0x500005b7 : .Level3InterruptVector.text;
 irom0_7 : C : 0x500005b8 - 0x500005bb : .DebugExceptionVector.literal;
 irom0_8 : F : 0x500005bc - 0x500005d7 : .DebugExceptionVector.text;
 irom0_9 : C : 0x500005d8 - 0x5000061b : .NMIExceptionVector.literal;
 irom0_10 : F : 0x5000061c - 0x50000637 : .NMIExceptionVector.text;
 irom0_11 : C : 0x50000638 - 0x5000063b : .KernelExceptionVector.literal;
 irom0_12 : F : 0x5000063c - 0x50000657 : .KernelExceptionVector.text;
 irom0_13 : C : 0x50000658 - 0x5000065b : .UserExceptionVector.literal;
 irom0_14 : F : 0x5000065c - 0x50000677 : .UserExceptionVector.text;
 irom0_15 : C : 0x50000678 - 0x5000067b : .DoubleExceptionVector.literal;
 irom0_16 : F : 0x5000067c - 0x50000697 : .DoubleExceptionVector.text;
 irom0_17 : C : 0x50000698 - 0x5000ffff : .irom0.literal .irom0.text .clib.literal .clib.text .rtos.literal .rtos.text .literal .text .rom.store;
END irom0

BEGIN sram
0x60000000: sysram : sram : 0x80000000 : executable, writable ;
 SHAREDRAM : C : 0x60000000 - 0x6003ffff : .sram.rodata .sram.literal .sram.text .sram.data __llvm_prf_names .sram.bss;
 BLSHAREDRAM : C : 0x60040000 - 0x6004ffff :  STACK :  HEAP : .dram0.rodata .clib.rodata .rtos.rodata .rodata .clib.data .clib.percpu.data .rtos.percpu.data .rtos.data .dram0.data .data .clib.bss .clib.percpu.bss .rtos.percpu.bss .rtos.bss .dram0.bss .bss;
 BLPOSTMORTEM : C : 0x60050000 - 0x6005ffff : ;
 fake_memory : F : 0x70000000 - 0x700fffff : REMOTE_STR;
END sram