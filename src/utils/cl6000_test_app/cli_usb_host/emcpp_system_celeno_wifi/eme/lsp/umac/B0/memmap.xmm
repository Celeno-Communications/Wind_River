//  Memory map file to generate linker scripts for programs without board I/O.

// Customer ID=16829; Build=0x8ee07; Copyright (c) 2004-2015 Cadence Design Systems, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


// A memory map is a sequence of memory descriptions and
// optional parameter assignments.
//
// Each memory description has the following format:
//   BEGIN <name>
//     <addr> [,<paddr>] : <mem-type> : <mem-name> : <size> [,<psize>]
//                       : [writable] [,executable] [,device] ;
//     <segment>*
//   END <name>
//
// where each <segment> description has the following format:
//     <seg-name> : F|C : <start-addr> - <end-addr> [ : STACK ] [ : HEAP ]
//                : <section-name>* ;
//
// Each parameter assignment is a keyword/value pair in the following format:
//   <keyword> = <value>                (no spaces in <value>)
// or
//   <keyword> = "<value>"              (spaces allowed in <value>)
//
// The following primitives are also defined:
//   PLACE SECTIONS( <section-name>* ) { WITH_SECTION(<section-name>)
//                                       | IN_SEGMENT(<seg-name>) }
//
//   NOLOAD <section-name1> [ <section-name2> ... ]
//
// Please refer to the Xtensa LSP Reference Manual for more details.
//

VECBASE=0x40080400


// Additions for -mlocalmems option:
PLACE SECTIONS(.bss) WITH_SECTION(.dram0.bss)
PLACE SECTIONS(.data) WITH_SECTION(.dram0.data)
PLACE SECTIONS(.rodata) WITH_SECTION(.dram0.rodata)
PLACE SECTIONS(STACK) WITH_SECTION(.dram0.bss)
PLACE SECTIONS(HEAP) WITH_SECTION(.dram0.bss)
PLACE SECTIONS(.literal) WITH_SECTION(.iram0.literal)
PLACE SECTIONS(.text) WITH_SECTION(.iram0.text)

BEGIN dram0
0x40000000: dataRam : dram0 : 0x30000 : writable ;
 dram0_0 : C : 0x40000000 - 0x4002feff :  STACK :  HEAP : .dram0.rodata .clib.rodata .rtos.rodata .rodata .clib.data .clib.percpu.data .rtos.percpu.data .rtos.data .dram0.data .data .clib.bss .clib.percpu.bss .rtos.percpu.bss .rtos.bss .dram0.bss .bss;
 config : C :  0x4002ff00 - 0x4002ffbf : CONFIG;
 exc_info : C : 0x4002ffc0 - 0x4002ffff : EXC_INFO;

END dram0

BEGIN dram1
0x40040000: dataRam : dram1 : 0x40000 : writable ;
END dram1

BEGIN iram0
0x40080000: instRam : iram0 : 0x30000 : executable, writable ;
 iram0_0 : F : 0x40080000 - 0x400802df : .ResetVector.text .ResetHandler.literal .ResetHandler.text;
 iram0_1 : C : 0x400802e0 - 0x400803ff : ;
 iram0_2 : F : 0x40080400 - 0x40080577 : .WindowVectors.text;
 iram0_3 : C : 0x40080578 - 0x4008057b : .Level2InterruptVector.literal;
 iram0_4 : F : 0x4008057c - 0x40080597 : .Level2InterruptVector.text;
 iram0_5 : C : 0x40080598 - 0x4008059b : .Level3InterruptVector.literal;
 iram0_6 : F : 0x4008059c - 0x400805b7 : .Level3InterruptVector.text;
 iram0_7 : C : 0x400805b8 - 0x400805bb : .DebugExceptionVector.literal;
 iram0_8 : F : 0x400805bc - 0x400805d7 : .DebugExceptionVector.text;
 iram0_9 : C : 0x400805d8 - 0x4008061b : .NMIExceptionVector.literal;
 iram0_10 : F : 0x4008061c - 0x40080637 : .NMIExceptionVector.text;
 iram0_11 : C : 0x40080638 - 0x4008063b : .KernelExceptionVector.literal;
 iram0_12 : F : 0x4008063c - 0x40080657 : .KernelExceptionVector.text;
 iram0_13 : C : 0x40080658 - 0x4008065b : .UserExceptionVector.literal;
 iram0_14 : F : 0x4008065c - 0x40080677 : .UserExceptionVector.text;
 iram0_15 : C : 0x40080678 - 0x4008067b : .DoubleExceptionVector.literal;
 iram0_16 : F : 0x4008067c - 0x40080697 : .DoubleExceptionVector.text;
 iram0_17 : C : 0x40080698 - 0x400affff : .iram0.literal .literal .rtos.literal .clib.literal .iram0.text .text .clib.text .rtos.text;
END iram0

BEGIN irom0
0x50000000: instRom : irom0 : 0x100000 : executable ;
 irom0_0 : C : 0x50000000 - 0x500fffff : .irom0.literal .irom0.text;
END irom0

BEGIN sram
0x60000000: sysram : sram : 0x80000000 : executable, writable ;
 dual_shared_memory : C : 0x60000000 - 0x60003eff : SHAREDRAM .sram.rodata .sram.literal .sram.text .sram.data __llvm_prf_names .sram.bss;
 lmac_shared_memory : C : 0x60003f00 - 0x6005feff : LMAC_SHAREDRAM LMAC_SHAREDRAM.bss;
 umac_shared_memory : C : 0x6005ff00 - 0x6005ffff : UMAC_SHAREDRAM UMAC_SHAREDRAM.bss;
 remote_umac_dram : C : 0x60280000 - 0x602affff : REMOTE_DRAM .rodata.str1;
 lamac_memory : F : 0x60100000 - 0x6013ffff : LARAMMAC;
 laphy_memory : F : 0x61900000 - 0x619fffff : LARAMPHY;
 machw_mib_memory : F : 0x60400b70 - 0x60400f6f : MACHW_MIB;
 fake_memory : F : 0x70000000 - 0x700fffff : REMOTE_STR;
END sram
