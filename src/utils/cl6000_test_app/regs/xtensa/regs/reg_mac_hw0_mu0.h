#ifndef _REG_MAC_HW0_MU0_H_
#define _REG_MAC_HW0_MU0_H_

#include <stdint.h>
#include "_reg_mac_hw0_mu0.h"
#include "compiler.h"
#include "arch.h"
#include "reg_access.h"

#define DBG_FILEID __REG_MAC_HW0_MU0__H__FILEID__

#define REG_MAC_HW0_MU0_COUNT  394


/**
 * @brief SIGNATURE register definition
 *  Contains the Signature string register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 SIGNATURE                 0x5
 * </pre>
 */
#define MAC_HW0_MU0_SIGNATURE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000000)
#define MAC_HW0_MU0_SIGNATURE_OFFSET      0x00000000
#define MAC_HW0_MU0_SIGNATURE_INDEX       0x00000000
#define MAC_HW0_MU0_SIGNATURE_RESET       0x00000005

__INLINE uint32_t  mac_hw0_mu0_signature_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SIGNATURE_ADDR);
}

// field definitions
#define MAC_HW0_MU0_SIGNATURE_SIGNATURE_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_SIGNATURE_SIGNATURE_LSB    0
#define MAC_HW0_MU0_SIGNATURE_SIGNATURE_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_SIGNATURE_SIGNATURE_RST    0x5

__INLINE uint32_t mac_hw0_mu0_signature_signature_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SIGNATURE_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief VERSION_1 register definition
 *  Contains the Version String for this hardware build register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    18    BFMER                     0              
 *    17    BFMEE                     0              
 *    16    MAC_80211_MH_FORMAT       1              
 *    14    COEX                      0              
 *    13    WAPI                      1              
 *    12    TPC                       0              
 *    11    VHT                       1              
 *    10    HT                        1              
 *    08    RCE                       1              
 *    07    CCMP                      1              
 *    06    TKIP                      1              
 *    05    WEP                       1              
 *    04    SECURITY                  1              
 *    03    SME                       1              
 *    02    HCCA                      0              
 *    01    EDCA                      1              
 *    00    QOS                       1              
 * </pre>
 */
#define MAC_HW0_MU0_VERSION_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000004)
#define MAC_HW0_MU0_VERSION_1_OFFSET      0x00000004
#define MAC_HW0_MU0_VERSION_1_INDEX       0x00000001
#define MAC_HW0_MU0_VERSION_1_RESET       0x00012DFB

__INLINE uint32_t  mac_hw0_mu0_version_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
}

// field definitions
#define MAC_HW0_MU0_VERSION_1_BFMER_BIT     ((uint32_t)0x00040000)
#define MAC_HW0_MU0_VERSION_1_BFMER_POS     18
#define MAC_HW0_MU0_VERSION_1_BFMEE_BIT     ((uint32_t)0x00020000)
#define MAC_HW0_MU0_VERSION_1_BFMEE_POS     17
#define MAC_HW0_MU0_VERSION_1_MAC_80211_MH_FORMAT_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_VERSION_1_MAC_80211_MH_FORMAT_POS    16
#define MAC_HW0_MU0_VERSION_1_COEX_BIT      ((uint32_t)0x00004000)
#define MAC_HW0_MU0_VERSION_1_COEX_POS      14
#define MAC_HW0_MU0_VERSION_1_WAPI_BIT      ((uint32_t)0x00002000)
#define MAC_HW0_MU0_VERSION_1_WAPI_POS      13
#define MAC_HW0_MU0_VERSION_1_TPC_BIT       ((uint32_t)0x00001000)
#define MAC_HW0_MU0_VERSION_1_TPC_POS       12
#define MAC_HW0_MU0_VERSION_1_VHT_BIT       ((uint32_t)0x00000800)
#define MAC_HW0_MU0_VERSION_1_VHT_POS       11
#define MAC_HW0_MU0_VERSION_1_HT_BIT        ((uint32_t)0x00000400)
#define MAC_HW0_MU0_VERSION_1_HT_POS        10
#define MAC_HW0_MU0_VERSION_1_RCE_BIT       ((uint32_t)0x00000100)
#define MAC_HW0_MU0_VERSION_1_RCE_POS       8
#define MAC_HW0_MU0_VERSION_1_CCMP_BIT      ((uint32_t)0x00000080)
#define MAC_HW0_MU0_VERSION_1_CCMP_POS      7
#define MAC_HW0_MU0_VERSION_1_TKIP_BIT      ((uint32_t)0x00000040)
#define MAC_HW0_MU0_VERSION_1_TKIP_POS      6
#define MAC_HW0_MU0_VERSION_1_WEP_BIT       ((uint32_t)0x00000020)
#define MAC_HW0_MU0_VERSION_1_WEP_POS       5
#define MAC_HW0_MU0_VERSION_1_SECURITY_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_VERSION_1_SECURITY_POS    4
#define MAC_HW0_MU0_VERSION_1_SME_BIT       ((uint32_t)0x00000008)
#define MAC_HW0_MU0_VERSION_1_SME_POS       3
#define MAC_HW0_MU0_VERSION_1_HCCA_BIT      ((uint32_t)0x00000004)
#define MAC_HW0_MU0_VERSION_1_HCCA_POS      2
#define MAC_HW0_MU0_VERSION_1_EDCA_BIT      ((uint32_t)0x00000002)
#define MAC_HW0_MU0_VERSION_1_EDCA_POS      1
#define MAC_HW0_MU0_VERSION_1_QOS_BIT       ((uint32_t)0x00000001)
#define MAC_HW0_MU0_VERSION_1_QOS_POS       0

#define MAC_HW0_MU0_VERSION_1_BFMER_RST     0x0
#define MAC_HW0_MU0_VERSION_1_BFMEE_RST     0x0
#define MAC_HW0_MU0_VERSION_1_MAC_80211_MH_FORMAT_RST    0x1
#define MAC_HW0_MU0_VERSION_1_COEX_RST      0x0
#define MAC_HW0_MU0_VERSION_1_WAPI_RST      0x1
#define MAC_HW0_MU0_VERSION_1_TPC_RST       0x0
#define MAC_HW0_MU0_VERSION_1_VHT_RST       0x1
#define MAC_HW0_MU0_VERSION_1_HT_RST        0x1
#define MAC_HW0_MU0_VERSION_1_RCE_RST       0x1
#define MAC_HW0_MU0_VERSION_1_CCMP_RST      0x1
#define MAC_HW0_MU0_VERSION_1_TKIP_RST      0x1
#define MAC_HW0_MU0_VERSION_1_WEP_RST       0x1
#define MAC_HW0_MU0_VERSION_1_SECURITY_RST    0x1
#define MAC_HW0_MU0_VERSION_1_SME_RST       0x1
#define MAC_HW0_MU0_VERSION_1_HCCA_RST      0x0
#define MAC_HW0_MU0_VERSION_1_EDCA_RST      0x1
#define MAC_HW0_MU0_VERSION_1_QOS_RST       0x1

__INLINE void mac_hw0_mu0_version_1_unpack(uint8_t* bfmer, uint8_t* bfmee, uint8_t* mac_80211_mh_format, uint8_t* coex, uint8_t* wapi, uint8_t* tpc, uint8_t* vht, uint8_t* ht, uint8_t* rce, uint8_t* ccmp, uint8_t* tkip, uint8_t* wep, uint8_t* security, uint8_t* sme, uint8_t* hcca, uint8_t* edca, uint8_t* qos)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);

	*bfmer = (localVal & ((uint32_t)0x00040000)) >>  18;
	*bfmee = (localVal & ((uint32_t)0x00020000)) >>  17;
	*mac_80211_mh_format = (localVal & ((uint32_t)0x00010000)) >>  16;
	*coex = (localVal & ((uint32_t)0x00004000)) >>  14;
	*wapi = (localVal & ((uint32_t)0x00002000)) >>  13;
	*tpc = (localVal & ((uint32_t)0x00001000)) >>  12;
	*vht = (localVal & ((uint32_t)0x00000800)) >>  11;
	*ht = (localVal & ((uint32_t)0x00000400)) >>  10;
	*rce = (localVal & ((uint32_t)0x00000100)) >>  8;
	*ccmp = (localVal & ((uint32_t)0x00000080)) >>  7;
	*tkip = (localVal & ((uint32_t)0x00000040)) >>  6;
	*wep = (localVal & ((uint32_t)0x00000020)) >>  5;
	*security = (localVal & ((uint32_t)0x00000010)) >>  4;
	*sme = (localVal & ((uint32_t)0x00000008)) >>  3;
	*hcca = (localVal & ((uint32_t)0x00000004)) >>  2;
	*edca = (localVal & ((uint32_t)0x00000002)) >>  1;
	*qos = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_version_1_bfmer_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t mac_hw0_mu0_version_1_bfmee_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t mac_hw0_mu0_version_1_mac_80211_mh_format_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_version_1_coex_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t mac_hw0_mu0_version_1_wapi_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t mac_hw0_mu0_version_1_tpc_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_version_1_vht_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t mac_hw0_mu0_version_1_ht_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_version_1_rce_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_version_1_ccmp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_version_1_tkip_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_version_1_wep_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_version_1_security_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_version_1_sme_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t mac_hw0_mu0_version_1_hcca_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_version_1_edca_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_version_1_qos_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief VERSION_2 register definition
 *  Contains the Version String for this hardware build register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    16:14 PHASE_NUMBER              0x2
 *    13:08 RELEASE_NUMBER            0xc
 *    07    IE_RELEASE                1              
 *    06:00 UM_VERSION                0x21
 * </pre>
 */
#define MAC_HW0_MU0_VERSION_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000008)
#define MAC_HW0_MU0_VERSION_2_OFFSET      0x00000008
#define MAC_HW0_MU0_VERSION_2_INDEX       0x00000002
#define MAC_HW0_MU0_VERSION_2_RESET       0x00008CA1

__INLINE uint32_t  mac_hw0_mu0_version_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_VERSION_2_ADDR);
}

// field definitions
#define MAC_HW0_MU0_VERSION_2_PHASE_NUMBER_MASK    ((uint32_t)0x0001C000)
#define MAC_HW0_MU0_VERSION_2_PHASE_NUMBER_LSB    14
#define MAC_HW0_MU0_VERSION_2_PHASE_NUMBER_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_VERSION_2_RELEASE_NUMBER_MASK    ((uint32_t)0x00003F00)
#define MAC_HW0_MU0_VERSION_2_RELEASE_NUMBER_LSB    8
#define MAC_HW0_MU0_VERSION_2_RELEASE_NUMBER_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_VERSION_2_IE_RELEASE_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_VERSION_2_IE_RELEASE_POS    7
#define MAC_HW0_MU0_VERSION_2_UM_VERSION_MASK    ((uint32_t)0x0000007F)
#define MAC_HW0_MU0_VERSION_2_UM_VERSION_LSB    0
#define MAC_HW0_MU0_VERSION_2_UM_VERSION_WIDTH    ((uint32_t)0x00000007)

#define MAC_HW0_MU0_VERSION_2_PHASE_NUMBER_RST    0x2
#define MAC_HW0_MU0_VERSION_2_RELEASE_NUMBER_RST    0xc
#define MAC_HW0_MU0_VERSION_2_IE_RELEASE_RST    0x1
#define MAC_HW0_MU0_VERSION_2_UM_VERSION_RST    0x21

__INLINE void mac_hw0_mu0_version_2_unpack(uint8_t* phase_number, uint8_t* release_number, uint8_t* ie_release, uint8_t* um_version)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_2_ADDR);

	*phase_number = (localVal & ((uint32_t)0x0001C000)) >>  14;
	*release_number = (localVal & ((uint32_t)0x00003F00)) >>  8;
	*ie_release = (localVal & ((uint32_t)0x00000080)) >>  7;
	*um_version = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_version_2_phase_number_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0001C000)) >> 14);
}
__INLINE uint8_t mac_hw0_mu0_version_2_release_number_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003F00)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_version_2_ie_release_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_version_2_um_version_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VERSION_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}

/**
 * @brief BITMAP_CNT register definition
 *  This indicates the current Bitmap number. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 BITMAP_CNT                0x1
 * </pre>
 */
#define MAC_HW0_MU0_BITMAP_CNT_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000000C)
#define MAC_HW0_MU0_BITMAP_CNT_OFFSET      0x0000000C
#define MAC_HW0_MU0_BITMAP_CNT_INDEX       0x00000003
#define MAC_HW0_MU0_BITMAP_CNT_RESET       0x00000001

__INLINE uint32_t  mac_hw0_mu0_bitmap_cnt_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BITMAP_CNT_ADDR);
}

// field definitions
#define MAC_HW0_MU0_BITMAP_CNT_BITMAP_CNT_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BITMAP_CNT_BITMAP_CNT_LSB    0
#define MAC_HW0_MU0_BITMAP_CNT_BITMAP_CNT_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BITMAP_CNT_BITMAP_CNT_RST    0x1

__INLINE uint16_t mac_hw0_mu0_bitmap_cnt_bitmap_cnt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BITMAP_CNT_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief MAC_ADDR_LOW register definition
 *  This device's MAC address is loaded here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 MAC_ADDR_LOW              0x0
 * </pre>
 */
#define MAC_HW0_MU0_MAC_ADDR_LOW_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000010)
#define MAC_HW0_MU0_MAC_ADDR_LOW_OFFSET      0x00000010
#define MAC_HW0_MU0_MAC_ADDR_LOW_INDEX       0x00000004
#define MAC_HW0_MU0_MAC_ADDR_LOW_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_mac_addr_low_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MAC_ADDR_LOW_ADDR);
}

__INLINE void mac_hw0_mu0_mac_addr_low_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MAC_ADDR_LOW_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MAC_ADDR_LOW_MAC_ADDR_LOW_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_MAC_ADDR_LOW_MAC_ADDR_LOW_LSB    0
#define MAC_HW0_MU0_MAC_ADDR_LOW_MAC_ADDR_LOW_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_MAC_ADDR_LOW_MAC_ADDR_LOW_RST    0x0

__INLINE uint32_t mac_hw0_mu0_mac_addr_low_mac_addr_low_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ADDR_LOW_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_mac_addr_low_mac_addr_low_setf(uint32_t macaddrlow)
{
	ASSERT_ERR((((uint32_t)macaddrlow << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ADDR_LOW_ADDR, (uint32_t)macaddrlow << 0);
}

/**
 * @brief MAC_ADDR_HI register definition
 *  This device's MAC address is loaded here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 MAC_ADDR_HIGH             0x0
 * </pre>
 */
#define MAC_HW0_MU0_MAC_ADDR_HI_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000014)
#define MAC_HW0_MU0_MAC_ADDR_HI_OFFSET      0x00000014
#define MAC_HW0_MU0_MAC_ADDR_HI_INDEX       0x00000005
#define MAC_HW0_MU0_MAC_ADDR_HI_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_mac_addr_hi_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MAC_ADDR_HI_ADDR);
}

__INLINE void mac_hw0_mu0_mac_addr_hi_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MAC_ADDR_HI_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MAC_ADDR_HI_MAC_ADDR_HIGH_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_MAC_ADDR_HI_MAC_ADDR_HIGH_LSB    0
#define MAC_HW0_MU0_MAC_ADDR_HI_MAC_ADDR_HIGH_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_MAC_ADDR_HI_MAC_ADDR_HIGH_RST    0x0

__INLINE uint16_t mac_hw0_mu0_mac_addr_hi_mac_addr_high_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ADDR_HI_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_mac_addr_hi_mac_addr_high_setf(uint16_t macaddrhigh)
{
	ASSERT_ERR((((uint32_t)macaddrhigh << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ADDR_HI_ADDR, (uint32_t)macaddrhigh << 0);
}

/**
 * @brief MAC_ADDR_LOW_MASK register definition
 *  This device's MAC address mask is loaded here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 MAC_ADDR_LOW_MASK         0x0
 * </pre>
 */
#define MAC_HW0_MU0_MAC_ADDR_LOW_MASK_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000018)
#define MAC_HW0_MU0_MAC_ADDR_LOW_MASK_OFFSET      0x00000018
#define MAC_HW0_MU0_MAC_ADDR_LOW_MASK_INDEX       0x00000006
#define MAC_HW0_MU0_MAC_ADDR_LOW_MASK_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_mac_addr_low_mask_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MAC_ADDR_LOW_MASK_ADDR);
}

__INLINE void mac_hw0_mu0_mac_addr_low_mask_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MAC_ADDR_LOW_MASK_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MAC_ADDR_LOW_MASK_MAC_ADDR_LOW_MASK_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_MAC_ADDR_LOW_MASK_MAC_ADDR_LOW_MASK_LSB    0
#define MAC_HW0_MU0_MAC_ADDR_LOW_MASK_MAC_ADDR_LOW_MASK_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_MAC_ADDR_LOW_MASK_MAC_ADDR_LOW_MASK_RST    0x0

__INLINE uint32_t mac_hw0_mu0_mac_addr_low_mask_mac_addr_low_mask_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ADDR_LOW_MASK_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_mac_addr_low_mask_mac_addr_low_mask_setf(uint32_t macaddrlowmask)
{
	ASSERT_ERR((((uint32_t)macaddrlowmask << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ADDR_LOW_MASK_ADDR, (uint32_t)macaddrlowmask << 0);
}

/**
 * @brief MAC_ADDR_HI_MASK register definition
 *  This device's MAC address mask is loaded here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 MAC_ADDR_HIGH_MASK        0x0
 * </pre>
 */
#define MAC_HW0_MU0_MAC_ADDR_HI_MASK_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000001C)
#define MAC_HW0_MU0_MAC_ADDR_HI_MASK_OFFSET      0x0000001C
#define MAC_HW0_MU0_MAC_ADDR_HI_MASK_INDEX       0x00000007
#define MAC_HW0_MU0_MAC_ADDR_HI_MASK_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_mac_addr_hi_mask_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MAC_ADDR_HI_MASK_ADDR);
}

__INLINE void mac_hw0_mu0_mac_addr_hi_mask_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MAC_ADDR_HI_MASK_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MAC_ADDR_HI_MASK_MAC_ADDR_HIGH_MASK_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_MAC_ADDR_HI_MASK_MAC_ADDR_HIGH_MASK_LSB    0
#define MAC_HW0_MU0_MAC_ADDR_HI_MASK_MAC_ADDR_HIGH_MASK_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_MAC_ADDR_HI_MASK_MAC_ADDR_HIGH_MASK_RST    0x0

__INLINE uint16_t mac_hw0_mu0_mac_addr_hi_mask_mac_addr_high_mask_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ADDR_HI_MASK_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_mac_addr_hi_mask_mac_addr_high_mask_setf(uint16_t macaddrhighmask)
{
	ASSERT_ERR((((uint32_t)macaddrhighmask << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ADDR_HI_MASK_ADDR, (uint32_t)macaddrhighmask << 0);
}

/**
 * @brief BSS_ID_LOW register definition
 *  The BSSID of this BSS/IBSS is loaded here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 BSS_ID_LOW                0x0
 * </pre>
 */
#define MAC_HW0_MU0_BSS_ID_LOW_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000020)
#define MAC_HW0_MU0_BSS_ID_LOW_OFFSET      0x00000020
#define MAC_HW0_MU0_BSS_ID_LOW_INDEX       0x00000008
#define MAC_HW0_MU0_BSS_ID_LOW_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_bss_id_low_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BSS_ID_LOW_ADDR);
}

__INLINE void mac_hw0_mu0_bss_id_low_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BSS_ID_LOW_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BSS_ID_LOW_BSS_ID_LOW_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_BSS_ID_LOW_BSS_ID_LOW_LSB    0
#define MAC_HW0_MU0_BSS_ID_LOW_BSS_ID_LOW_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_BSS_ID_LOW_BSS_ID_LOW_RST    0x0

__INLINE uint32_t mac_hw0_mu0_bss_id_low_bss_id_low_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSS_ID_LOW_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_bss_id_low_bss_id_low_setf(uint32_t bssidlow)
{
	ASSERT_ERR((((uint32_t)bssidlow << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSS_ID_LOW_ADDR, (uint32_t)bssidlow << 0);
}

/**
 * @brief BSS_ID_HI register definition
 *  The BSSID of this BSS/IBSS is loaded here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21:16 MY_BSS_COLOR              0x0
 *    15:00 BSS_ID_HIGH               0x0
 * </pre>
 */
#define MAC_HW0_MU0_BSS_ID_HI_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000024)
#define MAC_HW0_MU0_BSS_ID_HI_OFFSET      0x00000024
#define MAC_HW0_MU0_BSS_ID_HI_INDEX       0x00000009
#define MAC_HW0_MU0_BSS_ID_HI_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_bss_id_hi_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BSS_ID_HI_ADDR);
}

__INLINE void mac_hw0_mu0_bss_id_hi_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BSS_ID_HI_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BSS_ID_HI_MY_BSS_COLOR_MASK    ((uint32_t)0x003F0000)
#define MAC_HW0_MU0_BSS_ID_HI_MY_BSS_COLOR_LSB    16
#define MAC_HW0_MU0_BSS_ID_HI_MY_BSS_COLOR_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_BSS_ID_HI_BSS_ID_HIGH_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BSS_ID_HI_BSS_ID_HIGH_LSB    0
#define MAC_HW0_MU0_BSS_ID_HI_BSS_ID_HIGH_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BSS_ID_HI_MY_BSS_COLOR_RST    0x0
#define MAC_HW0_MU0_BSS_ID_HI_BSS_ID_HIGH_RST    0x0

__INLINE void mac_hw0_mu0_bss_id_hi_pack(uint8_t my_bss_color, uint16_t bss_id_high)
{
	ASSERT_ERR((((uint32_t)my_bss_color << 16) & ~((uint32_t)0x003F0000)) == 0);
	ASSERT_ERR((((uint32_t)bss_id_high << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSS_ID_HI_ADDR,  ((uint32_t)my_bss_color << 16) |((uint32_t)bss_id_high << 0));
}

__INLINE void mac_hw0_mu0_bss_id_hi_unpack(uint8_t* my_bss_color, uint16_t* bss_id_high)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSS_ID_HI_ADDR);

	*my_bss_color = (localVal & ((uint32_t)0x003F0000)) >>  16;
	*bss_id_high = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_bss_id_hi_my_bss_color_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSS_ID_HI_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x003F0000)) >> 16);
}
__INLINE void mac_hw0_mu0_bss_id_hi_my_bss_color_setf(uint8_t mybsscolor)
{
	ASSERT_ERR((((uint32_t)mybsscolor << 16) & ~((uint32_t)0x003F0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSS_ID_HI_ADDR, (REG_PL_RD(MAC_HW0_MU0_BSS_ID_HI_ADDR) & ~((uint32_t)0x003F0000)) | ((uint32_t)mybsscolor <<16));
}
__INLINE uint16_t mac_hw0_mu0_bss_id_hi_bss_id_high_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSS_ID_HI_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_bss_id_hi_bss_id_high_setf(uint16_t bssidhigh)
{
	ASSERT_ERR((((uint32_t)bssidhigh << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSS_ID_HI_ADDR, (REG_PL_RD(MAC_HW0_MU0_BSS_ID_HI_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)bssidhigh <<0));
}

/**
 * @brief BSS_ID_LOW_MASK register definition
 *  The mask pattern for the BSSID of this BSS/IBSS is loaded here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 BSS_ID_LOW_MASK           0x0
 * </pre>
 */
#define MAC_HW0_MU0_BSS_ID_LOW_MASK_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000028)
#define MAC_HW0_MU0_BSS_ID_LOW_MASK_OFFSET      0x00000028
#define MAC_HW0_MU0_BSS_ID_LOW_MASK_INDEX       0x0000000A
#define MAC_HW0_MU0_BSS_ID_LOW_MASK_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_bss_id_low_mask_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BSS_ID_LOW_MASK_ADDR);
}

__INLINE void mac_hw0_mu0_bss_id_low_mask_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BSS_ID_LOW_MASK_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BSS_ID_LOW_MASK_BSS_ID_LOW_MASK_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_BSS_ID_LOW_MASK_BSS_ID_LOW_MASK_LSB    0
#define MAC_HW0_MU0_BSS_ID_LOW_MASK_BSS_ID_LOW_MASK_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_BSS_ID_LOW_MASK_BSS_ID_LOW_MASK_RST    0x0

__INLINE uint32_t mac_hw0_mu0_bss_id_low_mask_bss_id_low_mask_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSS_ID_LOW_MASK_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_bss_id_low_mask_bss_id_low_mask_setf(uint32_t bssidlowmask)
{
	ASSERT_ERR((((uint32_t)bssidlowmask << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSS_ID_LOW_MASK_ADDR, (uint32_t)bssidlowmask << 0);
}

/**
 * @brief BSS_ID_HI_MASK register definition
 *  The mask pattern for the BSSID of this BSS/IBSS is loaded here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21:16 MY_BSS_COLOR_MASK         0x0
 *    15:00 BSS_ID_HIGH_MASK          0x0
 * </pre>
 */
#define MAC_HW0_MU0_BSS_ID_HI_MASK_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000002C)
#define MAC_HW0_MU0_BSS_ID_HI_MASK_OFFSET      0x0000002C
#define MAC_HW0_MU0_BSS_ID_HI_MASK_INDEX       0x0000000B
#define MAC_HW0_MU0_BSS_ID_HI_MASK_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_bss_id_hi_mask_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BSS_ID_HI_MASK_ADDR);
}

__INLINE void mac_hw0_mu0_bss_id_hi_mask_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BSS_ID_HI_MASK_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BSS_ID_HI_MASK_MY_BSS_COLOR_MASK_MASK    ((uint32_t)0x003F0000)
#define MAC_HW0_MU0_BSS_ID_HI_MASK_MY_BSS_COLOR_MASK_LSB    16
#define MAC_HW0_MU0_BSS_ID_HI_MASK_MY_BSS_COLOR_MASK_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_BSS_ID_HI_MASK_BSS_ID_HIGH_MASK_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BSS_ID_HI_MASK_BSS_ID_HIGH_MASK_LSB    0
#define MAC_HW0_MU0_BSS_ID_HI_MASK_BSS_ID_HIGH_MASK_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BSS_ID_HI_MASK_MY_BSS_COLOR_MASK_RST    0x0
#define MAC_HW0_MU0_BSS_ID_HI_MASK_BSS_ID_HIGH_MASK_RST    0x0

__INLINE void mac_hw0_mu0_bss_id_hi_mask_pack(uint8_t my_bss_color_mask, uint16_t bss_id_high_mask)
{
	ASSERT_ERR((((uint32_t)my_bss_color_mask << 16) & ~((uint32_t)0x003F0000)) == 0);
	ASSERT_ERR((((uint32_t)bss_id_high_mask << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSS_ID_HI_MASK_ADDR,  ((uint32_t)my_bss_color_mask << 16) |((uint32_t)bss_id_high_mask << 0));
}

__INLINE void mac_hw0_mu0_bss_id_hi_mask_unpack(uint8_t* my_bss_color_mask, uint16_t* bss_id_high_mask)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSS_ID_HI_MASK_ADDR);

	*my_bss_color_mask = (localVal & ((uint32_t)0x003F0000)) >>  16;
	*bss_id_high_mask = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_bss_id_hi_mask_my_bss_color_mask_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSS_ID_HI_MASK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x003F0000)) >> 16);
}
__INLINE void mac_hw0_mu0_bss_id_hi_mask_my_bss_color_mask_setf(uint8_t mybsscolormask)
{
	ASSERT_ERR((((uint32_t)mybsscolormask << 16) & ~((uint32_t)0x003F0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSS_ID_HI_MASK_ADDR, (REG_PL_RD(MAC_HW0_MU0_BSS_ID_HI_MASK_ADDR) & ~((uint32_t)0x003F0000)) | ((uint32_t)mybsscolormask <<16));
}
__INLINE uint16_t mac_hw0_mu0_bss_id_hi_mask_bss_id_high_mask_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSS_ID_HI_MASK_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_bss_id_hi_mask_bss_id_high_mask_setf(uint16_t bssidhighmask)
{
	ASSERT_ERR((((uint32_t)bssidhighmask << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSS_ID_HI_MASK_ADDR, (REG_PL_RD(MAC_HW0_MU0_BSS_ID_HI_MASK_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)bssidhighmask <<0));
}

/**
 * @brief MBSS_SPACE register definition
 *  Multi BSS space register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    09:00 MBSS_BEACON_SPACE         0x0
 * </pre>
 */
#define MAC_HW0_MU0_MBSS_SPACE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000030)
#define MAC_HW0_MU0_MBSS_SPACE_OFFSET      0x00000030
#define MAC_HW0_MU0_MBSS_SPACE_INDEX       0x0000000C
#define MAC_HW0_MU0_MBSS_SPACE_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_mbss_space_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MBSS_SPACE_ADDR);
}

__INLINE void mac_hw0_mu0_mbss_space_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MBSS_SPACE_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MBSS_SPACE_MBSS_BEACON_SPACE_MASK    ((uint32_t)0x000003FF)
#define MAC_HW0_MU0_MBSS_SPACE_MBSS_BEACON_SPACE_LSB    0
#define MAC_HW0_MU0_MBSS_SPACE_MBSS_BEACON_SPACE_WIDTH    ((uint32_t)0x0000000A)

#define MAC_HW0_MU0_MBSS_SPACE_MBSS_BEACON_SPACE_RST    0x0

__INLINE uint16_t mac_hw0_mu0_mbss_space_mbss_beacon_space_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MBSS_SPACE_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_mbss_space_mbss_beacon_space_setf(uint16_t mbssbeaconspace)
{
	ASSERT_ERR((((uint32_t)mbssbeaconspace << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MBSS_SPACE_ADDR, (uint32_t)mbssbeaconspace << 0);
}

/**
 * @brief MBSS_ADDR_2_SEL register definition
 *  Multi BSS address select register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 MBSS_A2_SEL4              0x0
 *    21:16 MBSS_A2_SEL3              0x0
 *    13:08 MBSS_A2_SEL2              0x0
 *    05:00 MBSS_A2_SEL1              0x0
 * </pre>
 */
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000034)
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_OFFSET      0x00000034
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_INDEX       0x0000000D
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_mbss_addr_2_sel_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR);
}

__INLINE void mac_hw0_mu0_mbss_addr_2_sel_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_MBSS_A_2_SEL_4_MASK    ((uint32_t)0x3F000000)
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_MBSS_A_2_SEL_4_LSB    24
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_MBSS_A_2_SEL_4_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_MBSS_A_2_SEL_3_MASK    ((uint32_t)0x003F0000)
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_MBSS_A_2_SEL_3_LSB    16
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_MBSS_A_2_SEL_3_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_MBSS_A_2_SEL_2_MASK    ((uint32_t)0x00003F00)
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_MBSS_A_2_SEL_2_LSB    8
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_MBSS_A_2_SEL_2_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_MBSS_A_2_SEL_1_MASK    ((uint32_t)0x0000003F)
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_MBSS_A_2_SEL_1_LSB    0
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_MBSS_A_2_SEL_1_WIDTH    ((uint32_t)0x00000006)

#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_MBSS_A_2_SEL_4_RST    0x0
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_MBSS_A_2_SEL_3_RST    0x0
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_MBSS_A_2_SEL_2_RST    0x0
#define MAC_HW0_MU0_MBSS_ADDR_2_SEL_MBSS_A_2_SEL_1_RST    0x0

__INLINE void mac_hw0_mu0_mbss_addr_2_sel_pack(uint8_t mbss_a2_sel4, uint8_t mbss_a2_sel3, uint8_t mbss_a2_sel2, uint8_t mbss_a2_sel1)
{
	ASSERT_ERR((((uint32_t)mbss_a2_sel4 << 24) & ~((uint32_t)0x3F000000)) == 0);
	ASSERT_ERR((((uint32_t)mbss_a2_sel3 << 16) & ~((uint32_t)0x003F0000)) == 0);
	ASSERT_ERR((((uint32_t)mbss_a2_sel2 << 8) & ~((uint32_t)0x00003F00)) == 0);
	ASSERT_ERR((((uint32_t)mbss_a2_sel1 << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR,  ((uint32_t)mbss_a2_sel4 << 24) |((uint32_t)mbss_a2_sel3 << 16) |((uint32_t)mbss_a2_sel2 << 8) |((uint32_t)mbss_a2_sel1 << 0));
}

__INLINE void mac_hw0_mu0_mbss_addr_2_sel_unpack(uint8_t* mbss_a2_sel4, uint8_t* mbss_a2_sel3, uint8_t* mbss_a2_sel2, uint8_t* mbss_a2_sel1)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR);

	*mbss_a2_sel4 = (localVal & ((uint32_t)0x3F000000)) >>  24;
	*mbss_a2_sel3 = (localVal & ((uint32_t)0x003F0000)) >>  16;
	*mbss_a2_sel2 = (localVal & ((uint32_t)0x00003F00)) >>  8;
	*mbss_a2_sel1 = (localVal & ((uint32_t)0x0000003F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_mbss_addr_2_sel_mbss_a_2_sel_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x3F000000)) >> 24);
}
__INLINE void mac_hw0_mu0_mbss_addr_2_sel_mbss_a_2_sel_4_setf(uint8_t mbssa2sel4)
{
	ASSERT_ERR((((uint32_t)mbssa2sel4 << 24) & ~((uint32_t)0x3F000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR) & ~((uint32_t)0x3F000000)) | ((uint32_t)mbssa2sel4 <<24));
}
__INLINE uint8_t mac_hw0_mu0_mbss_addr_2_sel_mbss_a_2_sel_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x003F0000)) >> 16);
}
__INLINE void mac_hw0_mu0_mbss_addr_2_sel_mbss_a_2_sel_3_setf(uint8_t mbssa2sel3)
{
	ASSERT_ERR((((uint32_t)mbssa2sel3 << 16) & ~((uint32_t)0x003F0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR) & ~((uint32_t)0x003F0000)) | ((uint32_t)mbssa2sel3 <<16));
}
__INLINE uint8_t mac_hw0_mu0_mbss_addr_2_sel_mbss_a_2_sel_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003F00)) >> 8);
}
__INLINE void mac_hw0_mu0_mbss_addr_2_sel_mbss_a_2_sel_2_setf(uint8_t mbssa2sel2)
{
	ASSERT_ERR((((uint32_t)mbssa2sel2 << 8) & ~((uint32_t)0x00003F00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR) & ~((uint32_t)0x00003F00)) | ((uint32_t)mbssa2sel2 <<8));
}
__INLINE uint8_t mac_hw0_mu0_mbss_addr_2_sel_mbss_a_2_sel_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000003F)) >> 0);
}
__INLINE void mac_hw0_mu0_mbss_addr_2_sel_mbss_a_2_sel_1_setf(uint8_t mbssa2sel1)
{
	ASSERT_ERR((((uint32_t)mbssa2sel1 << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MBSS_ADDR_2_SEL_ADDR) & ~((uint32_t)0x0000003F)) | ((uint32_t)mbssa2sel1 <<0));
}

/**
 * @brief STATE_CNTRL register definition
 *  This register controls the core's state transitions. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    07:04 NEXT_STATE                0x0
 *    03:00 CURRENT_STATE             0x0
 * </pre>
 */
#define MAC_HW0_MU0_STATE_CNTRL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000038)
#define MAC_HW0_MU0_STATE_CNTRL_OFFSET      0x00000038
#define MAC_HW0_MU0_STATE_CNTRL_INDEX       0x0000000E
#define MAC_HW0_MU0_STATE_CNTRL_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_state_cntrl_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_STATE_CNTRL_ADDR);
}

__INLINE void mac_hw0_mu0_state_cntrl_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_STATE_CNTRL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_STATE_CNTRL_NEXT_STATE_MASK    ((uint32_t)0x000000F0)
#define MAC_HW0_MU0_STATE_CNTRL_NEXT_STATE_LSB    4
#define MAC_HW0_MU0_STATE_CNTRL_NEXT_STATE_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_STATE_CNTRL_CURRENT_STATE_MASK    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_STATE_CNTRL_CURRENT_STATE_LSB    0
#define MAC_HW0_MU0_STATE_CNTRL_CURRENT_STATE_WIDTH    ((uint32_t)0x00000004)

#define MAC_HW0_MU0_STATE_CNTRL_NEXT_STATE_RST    0x0
#define MAC_HW0_MU0_STATE_CNTRL_CURRENT_STATE_RST    0x0

__INLINE void mac_hw0_mu0_state_cntrl_pack(uint8_t next_state, uint8_t current_state)
{
	ASSERT_ERR((((uint32_t)next_state << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)current_state << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_STATE_CNTRL_ADDR,  ((uint32_t)next_state << 4) |((uint32_t)current_state << 0));
}

__INLINE void mac_hw0_mu0_state_cntrl_unpack(uint8_t* next_state, uint8_t* current_state)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_STATE_CNTRL_ADDR);

	*next_state = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*current_state = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_state_cntrl_next_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_STATE_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void mac_hw0_mu0_state_cntrl_next_state_setf(uint8_t nextstate)
{
	ASSERT_ERR((((uint32_t)nextstate << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_STATE_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_STATE_CNTRL_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)nextstate <<4));
}
__INLINE uint8_t mac_hw0_mu0_state_cntrl_current_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_STATE_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}

/**
 * @brief SCAN_CNTRL register definition
 *  Contains settings for controlling SCAN state. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 PROBE_DELAY               0x0
 * </pre>
 */
#define MAC_HW0_MU0_SCAN_CNTRL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000003C)
#define MAC_HW0_MU0_SCAN_CNTRL_OFFSET      0x0000003C
#define MAC_HW0_MU0_SCAN_CNTRL_INDEX       0x0000000F
#define MAC_HW0_MU0_SCAN_CNTRL_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_scan_cntrl_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SCAN_CNTRL_ADDR);
}

__INLINE void mac_hw0_mu0_scan_cntrl_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SCAN_CNTRL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SCAN_CNTRL_PROBE_DELAY_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_SCAN_CNTRL_PROBE_DELAY_LSB    0
#define MAC_HW0_MU0_SCAN_CNTRL_PROBE_DELAY_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_SCAN_CNTRL_PROBE_DELAY_RST    0x0

__INLINE uint16_t mac_hw0_mu0_scan_cntrl_probe_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SCAN_CNTRL_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_scan_cntrl_probe_delay_setf(uint16_t probedelay)
{
	ASSERT_ERR((((uint32_t)probedelay << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SCAN_CNTRL_ADDR, (uint32_t)probedelay << 0);
}

/**
 * @brief BSS_ID_FOR_CF_END_LOW register definition
 *  Contains TA for CFEND frame   register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 BSS_ID_FOR_CF_END_LOW     0x0
 * </pre>
 */
#define MAC_HW0_MU0_BSS_ID_FOR_CF_END_LOW_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000040)
#define MAC_HW0_MU0_BSS_ID_FOR_CF_END_LOW_OFFSET      0x00000040
#define MAC_HW0_MU0_BSS_ID_FOR_CF_END_LOW_INDEX       0x00000010
#define MAC_HW0_MU0_BSS_ID_FOR_CF_END_LOW_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_bss_id_for_cf_end_low_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BSS_ID_FOR_CF_END_LOW_ADDR);
}

__INLINE void mac_hw0_mu0_bss_id_for_cf_end_low_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BSS_ID_FOR_CF_END_LOW_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BSS_ID_FOR_CF_END_LOW_BSS_ID_FOR_CF_END_LOW_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_BSS_ID_FOR_CF_END_LOW_BSS_ID_FOR_CF_END_LOW_LSB    0
#define MAC_HW0_MU0_BSS_ID_FOR_CF_END_LOW_BSS_ID_FOR_CF_END_LOW_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_BSS_ID_FOR_CF_END_LOW_BSS_ID_FOR_CF_END_LOW_RST    0x0

__INLINE uint32_t mac_hw0_mu0_bss_id_for_cf_end_low_bss_id_for_cf_end_low_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSS_ID_FOR_CF_END_LOW_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_bss_id_for_cf_end_low_bss_id_for_cf_end_low_setf(uint32_t bssidforcfendlow)
{
	ASSERT_ERR((((uint32_t)bssidforcfendlow << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSS_ID_FOR_CF_END_LOW_ADDR, (uint32_t)bssidforcfendlow << 0);
}

/**
 * @brief DOZE_CNTRL_1 register definition
 *  Contains settings for controlling DOZE state. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:17 ATIM_W                    0x0
 *    16    WAKEUP_DTIM               0              
 *    15:00 LISTEN_INTERVAL           0x0
 * </pre>
 */
#define MAC_HW0_MU0_DOZE_CNTRL_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000044)
#define MAC_HW0_MU0_DOZE_CNTRL_1_OFFSET      0x00000044
#define MAC_HW0_MU0_DOZE_CNTRL_1_INDEX       0x00000011
#define MAC_HW0_MU0_DOZE_CNTRL_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_doze_cntrl_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DOZE_CNTRL_1_ADDR);
}

__INLINE void mac_hw0_mu0_doze_cntrl_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DOZE_CNTRL_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DOZE_CNTRL_1_ATIM_W_MASK    ((uint32_t)0xFFFE0000)
#define MAC_HW0_MU0_DOZE_CNTRL_1_ATIM_W_LSB    17
#define MAC_HW0_MU0_DOZE_CNTRL_1_ATIM_W_WIDTH    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_DOZE_CNTRL_1_WAKEUP_DTIM_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_DOZE_CNTRL_1_WAKEUP_DTIM_POS    16
#define MAC_HW0_MU0_DOZE_CNTRL_1_LISTEN_INTERVAL_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_DOZE_CNTRL_1_LISTEN_INTERVAL_LSB    0
#define MAC_HW0_MU0_DOZE_CNTRL_1_LISTEN_INTERVAL_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_DOZE_CNTRL_1_ATIM_W_RST    0x0
#define MAC_HW0_MU0_DOZE_CNTRL_1_WAKEUP_DTIM_RST    0x0
#define MAC_HW0_MU0_DOZE_CNTRL_1_LISTEN_INTERVAL_RST    0x0

__INLINE void mac_hw0_mu0_doze_cntrl_1_pack(uint16_t atim_w, uint8_t wakeup_dtim, uint16_t listen_interval)
{
	ASSERT_ERR((((uint32_t)atim_w << 17) & ~((uint32_t)0xFFFE0000)) == 0);
	ASSERT_ERR((((uint32_t)wakeup_dtim << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)listen_interval << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DOZE_CNTRL_1_ADDR,  ((uint32_t)atim_w << 17) |((uint32_t)wakeup_dtim << 16) |((uint32_t)listen_interval << 0));
}

__INLINE void mac_hw0_mu0_doze_cntrl_1_unpack(uint16_t* atim_w, uint8_t* wakeup_dtim, uint16_t* listen_interval)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DOZE_CNTRL_1_ADDR);

	*atim_w = (localVal & ((uint32_t)0xFFFE0000)) >>  17;
	*wakeup_dtim = (localVal & ((uint32_t)0x00010000)) >>  16;
	*listen_interval = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_doze_cntrl_1_atim_w_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DOZE_CNTRL_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFE0000)) >> 17);
}
__INLINE void mac_hw0_mu0_doze_cntrl_1_atim_w_setf(uint16_t atimw)
{
	ASSERT_ERR((((uint32_t)atimw << 17) & ~((uint32_t)0xFFFE0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DOZE_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_DOZE_CNTRL_1_ADDR) & ~((uint32_t)0xFFFE0000)) | ((uint32_t)atimw <<17));
}
__INLINE uint8_t mac_hw0_mu0_doze_cntrl_1_wakeup_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DOZE_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_doze_cntrl_1_wakeup_dtim_setf(uint8_t wakeupdtim)
{
	ASSERT_ERR((((uint32_t)wakeupdtim << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DOZE_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_DOZE_CNTRL_1_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)wakeupdtim <<16));
}
__INLINE uint16_t mac_hw0_mu0_doze_cntrl_1_listen_interval_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DOZE_CNTRL_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_doze_cntrl_1_listen_interval_setf(uint16_t listeninterval)
{
	ASSERT_ERR((((uint32_t)listeninterval << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DOZE_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_DOZE_CNTRL_1_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)listeninterval <<0));
}

/**
 * @brief BSS_ID_FOR_CF_END_HIGH register definition
 *  Contains TA for CFEND frame register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 BSS_ID_FOR_CF_END_HIGH    0x0
 * </pre>
 */
#define MAC_HW0_MU0_BSS_ID_FOR_CF_END_HIGH_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000048)
#define MAC_HW0_MU0_BSS_ID_FOR_CF_END_HIGH_OFFSET      0x00000048
#define MAC_HW0_MU0_BSS_ID_FOR_CF_END_HIGH_INDEX       0x00000012
#define MAC_HW0_MU0_BSS_ID_FOR_CF_END_HIGH_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_bss_id_for_cf_end_high_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BSS_ID_FOR_CF_END_HIGH_ADDR);
}

__INLINE void mac_hw0_mu0_bss_id_for_cf_end_high_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BSS_ID_FOR_CF_END_HIGH_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BSS_ID_FOR_CF_END_HIGH_BSS_ID_FOR_CF_END_HIGH_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BSS_ID_FOR_CF_END_HIGH_BSS_ID_FOR_CF_END_HIGH_LSB    0
#define MAC_HW0_MU0_BSS_ID_FOR_CF_END_HIGH_BSS_ID_FOR_CF_END_HIGH_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BSS_ID_FOR_CF_END_HIGH_BSS_ID_FOR_CF_END_HIGH_RST    0x0

__INLINE uint16_t mac_hw0_mu0_bss_id_for_cf_end_high_bss_id_for_cf_end_high_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSS_ID_FOR_CF_END_HIGH_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_bss_id_for_cf_end_high_bss_id_for_cf_end_high_setf(uint16_t bssidforcfendhigh)
{
	ASSERT_ERR((((uint32_t)bssidforcfendhigh << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSS_ID_FOR_CF_END_HIGH_ADDR, (uint32_t)bssidforcfendhigh << 0);
}

/**
 * @brief MAC_CNTRL_1 register definition
 *  Contains various settings for controlling the operation of the core. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EOF_PAD_FOR_HE            1              
 *    30    EOF_PAD_FOR_VHT           0              
 *    29:28 IMPLICIT_BF_INT_CONF      0x0
 *    27    DISABLE_BFR_RESP          0              
 *    26    RX_RIFS_EN                0              
 *    25    TSF_MGT_DISABLE           0              
 *    24    TSF_UPDATED_BY_SW         0              
 *    22    MAC_DETECT_UNDERRUN_EN    0              
 *    21    DISABLE_MU_CTS_RESP       0              
 *    20    BQRP_RESP_BY_FW           0              
 *    19    BSRP_RESP_BY_FW           0              
 *    18    ENABLE_NORMAL_ACK_RESP_IN_HE_MU_W_TRIG 0              
 *    17    DISABLE_NORMAL_ACK_RESP_IN_HE_MU_WO_TRIG 0              
 *    16:14 ABGN_MODE                 0x3
 *    13    KEY_STO_RAM_RESET         0              
 *    12    MIB_TABLE_RESET           0              
 *    11    RATE_CONTROLLER_MPIF      1              
 *    10    DISABLE_BA_RESP           0              
 *    09    DISABLE_CTS_RESP          0              
 *    08    DISABLE_ACK_RESP          0              
 *    07    ACTIVE_CLK_GATING         1              
 *    06    ENABLE_LP_CLK_SWITCH      0              
 *    05    FORCE_MSTA_BA             0              
 *    04    DISABLE_FAST_COMPARE      0              
 *    03    CFP_AWARE                 0              
 *    02    PWR_MGT                   0              
 *    01    AP                        0              
 *    00    BSS_TYPE                  1              
 * </pre>
 */
#define MAC_HW0_MU0_MAC_CNTRL_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000004C)
#define MAC_HW0_MU0_MAC_CNTRL_1_OFFSET      0x0000004C
#define MAC_HW0_MU0_MAC_CNTRL_1_INDEX       0x00000013
#define MAC_HW0_MU0_MAC_CNTRL_1_RESET       0x8000C881

__INLINE uint32_t  mac_hw0_mu0_mac_cntrl_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
}

__INLINE void mac_hw0_mu0_mac_cntrl_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MAC_CNTRL_1_EOF_PAD_FOR_HE_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_MAC_CNTRL_1_EOF_PAD_FOR_HE_POS    31
#define MAC_HW0_MU0_MAC_CNTRL_1_EOF_PAD_FOR_VHT_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_MAC_CNTRL_1_EOF_PAD_FOR_VHT_POS    30
#define MAC_HW0_MU0_MAC_CNTRL_1_IMPLICIT_BF_INT_CONF_MASK    ((uint32_t)0x30000000)
#define MAC_HW0_MU0_MAC_CNTRL_1_IMPLICIT_BF_INT_CONF_LSB    28
#define MAC_HW0_MU0_MAC_CNTRL_1_IMPLICIT_BF_INT_CONF_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_BFR_RESP_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_BFR_RESP_POS    27
#define MAC_HW0_MU0_MAC_CNTRL_1_RX_RIFS_EN_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_MAC_CNTRL_1_RX_RIFS_EN_POS    26
#define MAC_HW0_MU0_MAC_CNTRL_1_TSF_MGT_DISABLE_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_MAC_CNTRL_1_TSF_MGT_DISABLE_POS    25
#define MAC_HW0_MU0_MAC_CNTRL_1_TSF_UPDATED_BY_SW_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_MAC_CNTRL_1_TSF_UPDATED_BY_SW_POS    24
#define MAC_HW0_MU0_MAC_CNTRL_1_MAC_DETECT_UNDERRUN_EN_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_MAC_CNTRL_1_MAC_DETECT_UNDERRUN_EN_POS    22
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_MU_CTS_RESP_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_MU_CTS_RESP_POS    21
#define MAC_HW0_MU0_MAC_CNTRL_1_BQRP_RESP_BY_FW_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_MAC_CNTRL_1_BQRP_RESP_BY_FW_POS    20
#define MAC_HW0_MU0_MAC_CNTRL_1_BSRP_RESP_BY_FW_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_MAC_CNTRL_1_BSRP_RESP_BY_FW_POS    19
#define MAC_HW0_MU0_MAC_CNTRL_1_ENABLE_NORMAL_ACK_RESP_IN_HE_MU_W_TRIG_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_MAC_CNTRL_1_ENABLE_NORMAL_ACK_RESP_IN_HE_MU_W_TRIG_POS    18
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_NORMAL_ACK_RESP_IN_HE_MU_WO_TRIG_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_NORMAL_ACK_RESP_IN_HE_MU_WO_TRIG_POS    17
#define MAC_HW0_MU0_MAC_CNTRL_1_ABGN_MODE_MASK    ((uint32_t)0x0001C000)
#define MAC_HW0_MU0_MAC_CNTRL_1_ABGN_MODE_LSB    14
#define MAC_HW0_MU0_MAC_CNTRL_1_ABGN_MODE_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_MAC_CNTRL_1_KEY_STO_RAM_RESET_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_MAC_CNTRL_1_KEY_STO_RAM_RESET_POS    13
#define MAC_HW0_MU0_MAC_CNTRL_1_MIB_TABLE_RESET_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_MAC_CNTRL_1_MIB_TABLE_RESET_POS    12
#define MAC_HW0_MU0_MAC_CNTRL_1_RATE_CONTROLLER_MPIF_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_MAC_CNTRL_1_RATE_CONTROLLER_MPIF_POS    11
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_BA_RESP_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_BA_RESP_POS    10
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_CTS_RESP_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_CTS_RESP_POS    9
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_ACK_RESP_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_ACK_RESP_POS    8
#define MAC_HW0_MU0_MAC_CNTRL_1_ACTIVE_CLK_GATING_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_MAC_CNTRL_1_ACTIVE_CLK_GATING_POS    7
#define MAC_HW0_MU0_MAC_CNTRL_1_ENABLE_LP_CLK_SWITCH_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_MAC_CNTRL_1_ENABLE_LP_CLK_SWITCH_POS    6
#define MAC_HW0_MU0_MAC_CNTRL_1_FORCE_MSTA_BA_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_MAC_CNTRL_1_FORCE_MSTA_BA_POS    5
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_FAST_COMPARE_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_FAST_COMPARE_POS    4
#define MAC_HW0_MU0_MAC_CNTRL_1_CFP_AWARE_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_MAC_CNTRL_1_CFP_AWARE_POS    3
#define MAC_HW0_MU0_MAC_CNTRL_1_PWR_MGT_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_MAC_CNTRL_1_PWR_MGT_POS    2
#define MAC_HW0_MU0_MAC_CNTRL_1_AP_BIT      ((uint32_t)0x00000002)
#define MAC_HW0_MU0_MAC_CNTRL_1_AP_POS      1
#define MAC_HW0_MU0_MAC_CNTRL_1_BSS_TYPE_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_MAC_CNTRL_1_BSS_TYPE_POS    0

#define MAC_HW0_MU0_MAC_CNTRL_1_EOF_PAD_FOR_HE_RST    0x1
#define MAC_HW0_MU0_MAC_CNTRL_1_EOF_PAD_FOR_VHT_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_IMPLICIT_BF_INT_CONF_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_BFR_RESP_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_RX_RIFS_EN_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_TSF_MGT_DISABLE_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_TSF_UPDATED_BY_SW_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_MAC_DETECT_UNDERRUN_EN_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_MU_CTS_RESP_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_BQRP_RESP_BY_FW_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_BSRP_RESP_BY_FW_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_ENABLE_NORMAL_ACK_RESP_IN_HE_MU_W_TRIG_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_NORMAL_ACK_RESP_IN_HE_MU_WO_TRIG_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_ABGN_MODE_RST    0x3
#define MAC_HW0_MU0_MAC_CNTRL_1_KEY_STO_RAM_RESET_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_MIB_TABLE_RESET_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_RATE_CONTROLLER_MPIF_RST    0x1
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_BA_RESP_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_CTS_RESP_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_ACK_RESP_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_ACTIVE_CLK_GATING_RST    0x1
#define MAC_HW0_MU0_MAC_CNTRL_1_ENABLE_LP_CLK_SWITCH_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_FORCE_MSTA_BA_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_DISABLE_FAST_COMPARE_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_CFP_AWARE_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_PWR_MGT_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_AP_RST      0x0
#define MAC_HW0_MU0_MAC_CNTRL_1_BSS_TYPE_RST    0x1

__INLINE void mac_hw0_mu0_mac_cntrl_1_pack(uint8_t eof_pad_for_he, uint8_t eof_pad_for_vht, uint8_t implicit_bf_int_conf, uint8_t disable_bfr_resp, uint8_t rx_rifs_en, uint8_t tsf_mgt_disable, uint8_t tsf_updated_by_sw, uint8_t mac_detect_underrun_en, uint8_t disable_mu_cts_resp, uint8_t bqrp_resp_by_fw, uint8_t bsrp_resp_by_fw, uint8_t enable_normal_ack_resp_in_he_mu_w_trig, uint8_t disable_normal_ack_resp_in_he_mu_wo_trig, uint8_t abgn_mode, uint8_t key_sto_ram_reset, uint8_t mib_table_reset, uint8_t rate_controller_mpif, uint8_t disable_ba_resp, uint8_t disable_cts_resp, uint8_t disable_ack_resp, uint8_t active_clk_gating, uint8_t enable_lp_clk_switch, uint8_t force_msta_ba, uint8_t disable_fast_compare, uint8_t cfp_aware, uint8_t pwr_mgt, uint8_t ap, uint8_t bss_type)
{
	ASSERT_ERR((((uint32_t)eof_pad_for_he << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)eof_pad_for_vht << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)implicit_bf_int_conf << 28) & ~((uint32_t)0x30000000)) == 0);
	ASSERT_ERR((((uint32_t)disable_bfr_resp << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_rifs_en << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)tsf_mgt_disable << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)tsf_updated_by_sw << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)mac_detect_underrun_en << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)disable_mu_cts_resp << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)bqrp_resp_by_fw << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)bsrp_resp_by_fw << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)enable_normal_ack_resp_in_he_mu_w_trig << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)disable_normal_ack_resp_in_he_mu_wo_trig << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)abgn_mode << 14) & ~((uint32_t)0x0001C000)) == 0);
	ASSERT_ERR((((uint32_t)key_sto_ram_reset << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)mib_table_reset << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)rate_controller_mpif << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)disable_ba_resp << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)disable_cts_resp << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)disable_ack_resp << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)active_clk_gating << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)enable_lp_clk_switch << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)force_msta_ba << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)disable_fast_compare << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)cfp_aware << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)pwr_mgt << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)ap << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)bss_type << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR,  ((uint32_t)eof_pad_for_he << 31) |((uint32_t)eof_pad_for_vht << 30) |((uint32_t)implicit_bf_int_conf << 28) |((uint32_t)disable_bfr_resp << 27) |((uint32_t)rx_rifs_en << 26) |((uint32_t)tsf_mgt_disable << 25) |((uint32_t)tsf_updated_by_sw << 24) |((uint32_t)mac_detect_underrun_en << 22) |((uint32_t)disable_mu_cts_resp << 21) |((uint32_t)bqrp_resp_by_fw << 20) |((uint32_t)bsrp_resp_by_fw << 19) |((uint32_t)enable_normal_ack_resp_in_he_mu_w_trig << 18) |((uint32_t)disable_normal_ack_resp_in_he_mu_wo_trig << 17) |((uint32_t)abgn_mode << 14) |((uint32_t)key_sto_ram_reset << 13) |((uint32_t)mib_table_reset << 12) |((uint32_t)rate_controller_mpif << 11) |((uint32_t)disable_ba_resp << 10) |((uint32_t)disable_cts_resp << 9) |((uint32_t)disable_ack_resp << 8) |((uint32_t)active_clk_gating << 7) |((uint32_t)enable_lp_clk_switch << 6) |((uint32_t)force_msta_ba << 5) |((uint32_t)disable_fast_compare << 4) |((uint32_t)cfp_aware << 3) |((uint32_t)pwr_mgt << 2) |((uint32_t)ap << 1) |((uint32_t)bss_type << 0));
}

__INLINE void mac_hw0_mu0_mac_cntrl_1_unpack(uint8_t* eof_pad_for_he, uint8_t* eof_pad_for_vht, uint8_t* implicit_bf_int_conf, uint8_t* disable_bfr_resp, uint8_t* rx_rifs_en, uint8_t* tsf_mgt_disable, uint8_t* tsf_updated_by_sw, uint8_t* mac_detect_underrun_en, uint8_t* disable_mu_cts_resp, uint8_t* bqrp_resp_by_fw, uint8_t* bsrp_resp_by_fw, uint8_t* enable_normal_ack_resp_in_he_mu_w_trig, uint8_t* disable_normal_ack_resp_in_he_mu_wo_trig, uint8_t* abgn_mode, uint8_t* key_sto_ram_reset, uint8_t* mib_table_reset, uint8_t* rate_controller_mpif, uint8_t* disable_ba_resp, uint8_t* disable_cts_resp, uint8_t* disable_ack_resp, uint8_t* active_clk_gating, uint8_t* enable_lp_clk_switch, uint8_t* force_msta_ba, uint8_t* disable_fast_compare, uint8_t* cfp_aware, uint8_t* pwr_mgt, uint8_t* ap, uint8_t* bss_type)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);

	*eof_pad_for_he = (localVal & ((uint32_t)0x80000000)) >>  31;
	*eof_pad_for_vht = (localVal & ((uint32_t)0x40000000)) >>  30;
	*implicit_bf_int_conf = (localVal & ((uint32_t)0x30000000)) >>  28;
	*disable_bfr_resp = (localVal & ((uint32_t)0x08000000)) >>  27;
	*rx_rifs_en = (localVal & ((uint32_t)0x04000000)) >>  26;
	*tsf_mgt_disable = (localVal & ((uint32_t)0x02000000)) >>  25;
	*tsf_updated_by_sw = (localVal & ((uint32_t)0x01000000)) >>  24;
	*mac_detect_underrun_en = (localVal & ((uint32_t)0x00400000)) >>  22;
	*disable_mu_cts_resp = (localVal & ((uint32_t)0x00200000)) >>  21;
	*bqrp_resp_by_fw = (localVal & ((uint32_t)0x00100000)) >>  20;
	*bsrp_resp_by_fw = (localVal & ((uint32_t)0x00080000)) >>  19;
	*enable_normal_ack_resp_in_he_mu_w_trig = (localVal & ((uint32_t)0x00040000)) >>  18;
	*disable_normal_ack_resp_in_he_mu_wo_trig = (localVal & ((uint32_t)0x00020000)) >>  17;
	*abgn_mode = (localVal & ((uint32_t)0x0001C000)) >>  14;
	*key_sto_ram_reset = (localVal & ((uint32_t)0x00002000)) >>  13;
	*mib_table_reset = (localVal & ((uint32_t)0x00001000)) >>  12;
	*rate_controller_mpif = (localVal & ((uint32_t)0x00000800)) >>  11;
	*disable_ba_resp = (localVal & ((uint32_t)0x00000400)) >>  10;
	*disable_cts_resp = (localVal & ((uint32_t)0x00000200)) >>  9;
	*disable_ack_resp = (localVal & ((uint32_t)0x00000100)) >>  8;
	*active_clk_gating = (localVal & ((uint32_t)0x00000080)) >>  7;
	*enable_lp_clk_switch = (localVal & ((uint32_t)0x00000040)) >>  6;
	*force_msta_ba = (localVal & ((uint32_t)0x00000020)) >>  5;
	*disable_fast_compare = (localVal & ((uint32_t)0x00000010)) >>  4;
	*cfp_aware = (localVal & ((uint32_t)0x00000008)) >>  3;
	*pwr_mgt = (localVal & ((uint32_t)0x00000004)) >>  2;
	*ap = (localVal & ((uint32_t)0x00000002)) >>  1;
	*bss_type = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_eof_pad_for_he_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_eof_pad_for_he_setf(uint8_t eofpadforhe)
{
	ASSERT_ERR((((uint32_t)eofpadforhe << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)eofpadforhe <<31));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_eof_pad_for_vht_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_eof_pad_for_vht_setf(uint8_t eofpadforvht)
{
	ASSERT_ERR((((uint32_t)eofpadforvht << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)eofpadforvht <<30));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_implicit_bf_int_conf_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x30000000)) >> 28);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_implicit_bf_int_conf_setf(uint8_t implicitbfintconf)
{
	ASSERT_ERR((((uint32_t)implicitbfintconf << 28) & ~((uint32_t)0x30000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x30000000)) | ((uint32_t)implicitbfintconf <<28));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_disable_bfr_resp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_disable_bfr_resp_setf(uint8_t disablebfrresp)
{
	ASSERT_ERR((((uint32_t)disablebfrresp << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)disablebfrresp <<27));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_rx_rifs_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_rx_rifs_en_setf(uint8_t rxrifsen)
{
	ASSERT_ERR((((uint32_t)rxrifsen << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)rxrifsen <<26));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_tsf_mgt_disable_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_tsf_mgt_disable_setf(uint8_t tsfmgtdisable)
{
	ASSERT_ERR((((uint32_t)tsfmgtdisable << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)tsfmgtdisable <<25));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_tsf_updated_by_sw_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_tsf_updated_by_sw_setf(uint8_t tsfupdatedbysw)
{
	ASSERT_ERR((((uint32_t)tsfupdatedbysw << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)tsfupdatedbysw <<24));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_mac_detect_underrun_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_mac_detect_underrun_en_setf(uint8_t macdetectunderrunen)
{
	ASSERT_ERR((((uint32_t)macdetectunderrunen << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)macdetectunderrunen <<22));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_disable_mu_cts_resp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_disable_mu_cts_resp_setf(uint8_t disablemuctsresp)
{
	ASSERT_ERR((((uint32_t)disablemuctsresp << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)disablemuctsresp <<21));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_bqrp_resp_by_fw_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_bqrp_resp_by_fw_setf(uint8_t bqrprespbyfw)
{
	ASSERT_ERR((((uint32_t)bqrprespbyfw << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)bqrprespbyfw <<20));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_bsrp_resp_by_fw_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_bsrp_resp_by_fw_setf(uint8_t bsrprespbyfw)
{
	ASSERT_ERR((((uint32_t)bsrprespbyfw << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)bsrprespbyfw <<19));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_enable_normal_ack_resp_in_he_mu_w_trig_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_enable_normal_ack_resp_in_he_mu_w_trig_setf(uint8_t enablenormalackrespinhemuwtrig)
{
	ASSERT_ERR((((uint32_t)enablenormalackrespinhemuwtrig << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)enablenormalackrespinhemuwtrig <<18));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_disable_normal_ack_resp_in_he_mu_wo_trig_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_disable_normal_ack_resp_in_he_mu_wo_trig_setf(uint8_t disablenormalackrespinhemuwotrig)
{
	ASSERT_ERR((((uint32_t)disablenormalackrespinhemuwotrig << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)disablenormalackrespinhemuwotrig <<17));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_abgn_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0001C000)) >> 14);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_abgn_mode_setf(uint8_t abgnmode)
{
	ASSERT_ERR((((uint32_t)abgnmode << 14) & ~((uint32_t)0x0001C000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x0001C000)) | ((uint32_t)abgnmode <<14));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_key_sto_ram_reset_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_key_sto_ram_reset_setf(uint8_t keystoramreset)
{
	ASSERT_ERR((((uint32_t)keystoramreset << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)keystoramreset <<13));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_mib_table_reset_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_mib_table_reset_setf(uint8_t mibtablereset)
{
	ASSERT_ERR((((uint32_t)mibtablereset << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)mibtablereset <<12));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_rate_controller_mpif_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_rate_controller_mpif_setf(uint8_t ratecontrollermpif)
{
	ASSERT_ERR((((uint32_t)ratecontrollermpif << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)ratecontrollermpif <<11));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_disable_ba_resp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_disable_ba_resp_setf(uint8_t disablebaresp)
{
	ASSERT_ERR((((uint32_t)disablebaresp << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)disablebaresp <<10));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_disable_cts_resp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_disable_cts_resp_setf(uint8_t disablectsresp)
{
	ASSERT_ERR((((uint32_t)disablectsresp << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)disablectsresp <<9));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_disable_ack_resp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_disable_ack_resp_setf(uint8_t disableackresp)
{
	ASSERT_ERR((((uint32_t)disableackresp << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)disableackresp <<8));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_active_clk_gating_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_active_clk_gating_setf(uint8_t activeclkgating)
{
	ASSERT_ERR((((uint32_t)activeclkgating << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)activeclkgating <<7));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_enable_lp_clk_switch_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_enable_lp_clk_switch_setf(uint8_t enablelpclkswitch)
{
	ASSERT_ERR((((uint32_t)enablelpclkswitch << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)enablelpclkswitch <<6));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_force_msta_ba_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_force_msta_ba_setf(uint8_t forcemstaba)
{
	ASSERT_ERR((((uint32_t)forcemstaba << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)forcemstaba <<5));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_disable_fast_compare_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_disable_fast_compare_setf(uint8_t disablefastcompare)
{
	ASSERT_ERR((((uint32_t)disablefastcompare << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)disablefastcompare <<4));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_cfp_aware_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_cfp_aware_setf(uint8_t cfpaware)
{
	ASSERT_ERR((((uint32_t)cfpaware << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)cfpaware <<3));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_pwr_mgt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_pwr_mgt_setf(uint8_t pwrmgt)
{
	ASSERT_ERR((((uint32_t)pwrmgt << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)pwrmgt <<2));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_ap_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_ap_setf(uint8_t ap)
{
	ASSERT_ERR((((uint32_t)ap << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)ap <<1));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_1_bss_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_mac_cntrl_1_bss_type_setf(uint8_t bsstype)
{
	ASSERT_ERR((((uint32_t)bsstype << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_1_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)bsstype <<0));
}

/**
 * @brief MAC_CNTRL_3 register definition
 *  Controls trigger response register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    20    SENSING_MODE              0              
 *    19    ADD_TO_UL_LENGTH          0              
 *    18    ENABLE_NAV_Update_from_quiet_element 0              
 *    17    ENABLE_RXM_INTERFACE      0              
 *    16    ENABLE_BAU_INTERFACE      0              
 *    15    Enable_NAV_Update_From_CFP_element 0              
 *    14    Enable_NAV_Update_From_RXV_case2 0              
 *    13    Enable_NAV_Update_From_RXV_case1 0              
 *    12    IGNORE_VIR_CS_REQUIRED    0              
 *    11    CALC_NZLD                 0              
 *    10    IGNORE_ED_CS_REQUIRED     0              
 *    09    BSS_COLOR_DISABLED        0              
 *    08    NO_SIG_EXTN               1              
 *    04    DISABLE_BFRP_RESPONSE     0              
 *    03    DISABLE_BQRP_RESPONSE     0              
 *    02    DISABLE_BSRP_RESPONSE     0              
 *    01    DISABLE_MU_BAR_RESPONSE   0              
 *    00    DISABLE_BASIC_TRIGGER_RESPONSE 0              
 * </pre>
 */
#define MAC_HW0_MU0_MAC_CNTRL_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000050)
#define MAC_HW0_MU0_MAC_CNTRL_3_OFFSET      0x00000050
#define MAC_HW0_MU0_MAC_CNTRL_3_INDEX       0x00000014
#define MAC_HW0_MU0_MAC_CNTRL_3_RESET       0x00000100

__INLINE uint32_t  mac_hw0_mu0_mac_cntrl_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
}

__INLINE void mac_hw0_mu0_mac_cntrl_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MAC_CNTRL_3_SENSING_MODE_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_MAC_CNTRL_3_SENSING_MODE_POS    20
#define MAC_HW0_MU0_MAC_CNTRL_3_ADD_TO_UL_LENGTH_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_MAC_CNTRL_3_ADD_TO_UL_LENGTH_POS    19
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_NAV_UPDATE_FROM_QUIET_ELEMENT_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_NAV_UPDATE_FROM_QUIET_ELEMENT_POS    18
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_RXM_INTERFACE_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_RXM_INTERFACE_POS    17
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_BAU_INTERFACE_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_BAU_INTERFACE_POS    16
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_NAV_UPDATE_FROM_CFP_ELEMENT_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_NAV_UPDATE_FROM_CFP_ELEMENT_POS    15
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_NAV_UPDATE_FROM_RXV_CASE_2_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_NAV_UPDATE_FROM_RXV_CASE_2_POS    14
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_NAV_UPDATE_FROM_RXV_CASE_1_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_NAV_UPDATE_FROM_RXV_CASE_1_POS    13
#define MAC_HW0_MU0_MAC_CNTRL_3_IGNORE_VIR_CS_REQUIRED_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_MAC_CNTRL_3_IGNORE_VIR_CS_REQUIRED_POS    12
#define MAC_HW0_MU0_MAC_CNTRL_3_CALC_NZLD_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_MAC_CNTRL_3_CALC_NZLD_POS    11
#define MAC_HW0_MU0_MAC_CNTRL_3_IGNORE_ED_CS_REQUIRED_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_MAC_CNTRL_3_IGNORE_ED_CS_REQUIRED_POS    10
#define MAC_HW0_MU0_MAC_CNTRL_3_BSS_COLOR_DISABLED_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_MAC_CNTRL_3_BSS_COLOR_DISABLED_POS    9
#define MAC_HW0_MU0_MAC_CNTRL_3_NO_SIG_EXTN_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_MAC_CNTRL_3_NO_SIG_EXTN_POS    8
#define MAC_HW0_MU0_MAC_CNTRL_3_DISABLE_BFRP_RESPONSE_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_MAC_CNTRL_3_DISABLE_BFRP_RESPONSE_POS    4
#define MAC_HW0_MU0_MAC_CNTRL_3_DISABLE_BQRP_RESPONSE_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_MAC_CNTRL_3_DISABLE_BQRP_RESPONSE_POS    3
#define MAC_HW0_MU0_MAC_CNTRL_3_DISABLE_BSRP_RESPONSE_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_MAC_CNTRL_3_DISABLE_BSRP_RESPONSE_POS    2
#define MAC_HW0_MU0_MAC_CNTRL_3_DISABLE_MU_BAR_RESPONSE_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_MAC_CNTRL_3_DISABLE_MU_BAR_RESPONSE_POS    1
#define MAC_HW0_MU0_MAC_CNTRL_3_DISABLE_BASIC_TRIGGER_RESPONSE_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_MAC_CNTRL_3_DISABLE_BASIC_TRIGGER_RESPONSE_POS    0

#define MAC_HW0_MU0_MAC_CNTRL_3_SENSING_MODE_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_3_ADD_TO_UL_LENGTH_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_NAV_UPDATE_FROM_QUIET_ELEMENT_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_RXM_INTERFACE_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_BAU_INTERFACE_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_NAV_UPDATE_FROM_CFP_ELEMENT_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_NAV_UPDATE_FROM_RXV_CASE_2_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_3_ENABLE_NAV_UPDATE_FROM_RXV_CASE_1_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_3_IGNORE_VIR_CS_REQUIRED_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_3_CALC_NZLD_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_3_IGNORE_ED_CS_REQUIRED_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_3_BSS_COLOR_DISABLED_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_3_NO_SIG_EXTN_RST    0x1
#define MAC_HW0_MU0_MAC_CNTRL_3_DISABLE_BFRP_RESPONSE_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_3_DISABLE_BQRP_RESPONSE_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_3_DISABLE_BSRP_RESPONSE_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_3_DISABLE_MU_BAR_RESPONSE_RST    0x0
#define MAC_HW0_MU0_MAC_CNTRL_3_DISABLE_BASIC_TRIGGER_RESPONSE_RST    0x0

__INLINE void mac_hw0_mu0_mac_cntrl_3_pack(uint8_t sensing_mode, uint8_t add_to_ul_length, uint8_t enable_nav_update_from_quiet_element, uint8_t enable_rxm_interface, uint8_t enable_bau_interface, uint8_t enable_nav_update_from_cfp_element, uint8_t enable_nav_update_from_rxv_case2, uint8_t enable_nav_update_from_rxv_case1, uint8_t ignore_vir_cs_required, uint8_t calc_nzld, uint8_t ignore_ed_cs_required, uint8_t bss_color_disabled, uint8_t no_sig_extn, uint8_t disable_bfrp_response, uint8_t disable_bqrp_response, uint8_t disable_bsrp_response, uint8_t disable_mu_bar_response, uint8_t disable_basic_trigger_response)
{
	ASSERT_ERR((((uint32_t)sensing_mode << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)add_to_ul_length << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)enable_nav_update_from_quiet_element << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)enable_rxm_interface << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)enable_bau_interface << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)enable_nav_update_from_cfp_element << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)enable_nav_update_from_rxv_case2 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)enable_nav_update_from_rxv_case1 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)ignore_vir_cs_required << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)calc_nzld << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)ignore_ed_cs_required << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)bss_color_disabled << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)no_sig_extn << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)disable_bfrp_response << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)disable_bqrp_response << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)disable_bsrp_response << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)disable_mu_bar_response << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)disable_basic_trigger_response << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR,  ((uint32_t)sensing_mode << 20) |((uint32_t)add_to_ul_length << 19) |((uint32_t)enable_nav_update_from_quiet_element << 18) |((uint32_t)enable_rxm_interface << 17) |((uint32_t)enable_bau_interface << 16) |((uint32_t)enable_nav_update_from_cfp_element << 15) |((uint32_t)enable_nav_update_from_rxv_case2 << 14) |((uint32_t)enable_nav_update_from_rxv_case1 << 13) |((uint32_t)ignore_vir_cs_required << 12) |((uint32_t)calc_nzld << 11) |((uint32_t)ignore_ed_cs_required << 10) |((uint32_t)bss_color_disabled << 9) |((uint32_t)no_sig_extn << 8) |((uint32_t)disable_bfrp_response << 4) |((uint32_t)disable_bqrp_response << 3) |((uint32_t)disable_bsrp_response << 2) |((uint32_t)disable_mu_bar_response << 1) |((uint32_t)disable_basic_trigger_response << 0));
}

__INLINE void mac_hw0_mu0_mac_cntrl_3_unpack(uint8_t* sensing_mode, uint8_t* add_to_ul_length, uint8_t* enable_nav_update_from_quiet_element, uint8_t* enable_rxm_interface, uint8_t* enable_bau_interface, uint8_t* enable_nav_update_from_cfp_element, uint8_t* enable_nav_update_from_rxv_case2, uint8_t* enable_nav_update_from_rxv_case1, uint8_t* ignore_vir_cs_required, uint8_t* calc_nzld, uint8_t* ignore_ed_cs_required, uint8_t* bss_color_disabled, uint8_t* no_sig_extn, uint8_t* disable_bfrp_response, uint8_t* disable_bqrp_response, uint8_t* disable_bsrp_response, uint8_t* disable_mu_bar_response, uint8_t* disable_basic_trigger_response)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);

	*sensing_mode = (localVal & ((uint32_t)0x00100000)) >>  20;
	*add_to_ul_length = (localVal & ((uint32_t)0x00080000)) >>  19;
	*enable_nav_update_from_quiet_element = (localVal & ((uint32_t)0x00040000)) >>  18;
	*enable_rxm_interface = (localVal & ((uint32_t)0x00020000)) >>  17;
	*enable_bau_interface = (localVal & ((uint32_t)0x00010000)) >>  16;
	*enable_nav_update_from_cfp_element = (localVal & ((uint32_t)0x00008000)) >>  15;
	*enable_nav_update_from_rxv_case2 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*enable_nav_update_from_rxv_case1 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*ignore_vir_cs_required = (localVal & ((uint32_t)0x00001000)) >>  12;
	*calc_nzld = (localVal & ((uint32_t)0x00000800)) >>  11;
	*ignore_ed_cs_required = (localVal & ((uint32_t)0x00000400)) >>  10;
	*bss_color_disabled = (localVal & ((uint32_t)0x00000200)) >>  9;
	*no_sig_extn = (localVal & ((uint32_t)0x00000100)) >>  8;
	*disable_bfrp_response = (localVal & ((uint32_t)0x00000010)) >>  4;
	*disable_bqrp_response = (localVal & ((uint32_t)0x00000008)) >>  3;
	*disable_bsrp_response = (localVal & ((uint32_t)0x00000004)) >>  2;
	*disable_mu_bar_response = (localVal & ((uint32_t)0x00000002)) >>  1;
	*disable_basic_trigger_response = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_sensing_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_sensing_mode_setf(uint8_t sensingmode)
{
	ASSERT_ERR((((uint32_t)sensingmode << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)sensingmode <<20));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_add_to_ul_length_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_add_to_ul_length_setf(uint8_t addtoullength)
{
	ASSERT_ERR((((uint32_t)addtoullength << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)addtoullength <<19));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_enable_nav_update_from_quiet_element_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_enable_nav_update_from_quiet_element_setf(uint8_t enablenavupdatefromquietelement)
{
	ASSERT_ERR((((uint32_t)enablenavupdatefromquietelement << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)enablenavupdatefromquietelement <<18));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_enable_rxm_interface_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_enable_rxm_interface_setf(uint8_t enablerxminterface)
{
	ASSERT_ERR((((uint32_t)enablerxminterface << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)enablerxminterface <<17));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_enable_bau_interface_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_enable_bau_interface_setf(uint8_t enablebauinterface)
{
	ASSERT_ERR((((uint32_t)enablebauinterface << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)enablebauinterface <<16));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_enable_nav_update_from_cfp_element_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_enable_nav_update_from_cfp_element_setf(uint8_t enablenavupdatefromcfpelement)
{
	ASSERT_ERR((((uint32_t)enablenavupdatefromcfpelement << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)enablenavupdatefromcfpelement <<15));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_enable_nav_update_from_rxv_case_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_enable_nav_update_from_rxv_case_2_setf(uint8_t enablenavupdatefromrxvcase2)
{
	ASSERT_ERR((((uint32_t)enablenavupdatefromrxvcase2 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)enablenavupdatefromrxvcase2 <<14));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_enable_nav_update_from_rxv_case_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_enable_nav_update_from_rxv_case_1_setf(uint8_t enablenavupdatefromrxvcase1)
{
	ASSERT_ERR((((uint32_t)enablenavupdatefromrxvcase1 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)enablenavupdatefromrxvcase1 <<13));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_ignore_vir_cs_required_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_ignore_vir_cs_required_setf(uint8_t ignorevircsrequired)
{
	ASSERT_ERR((((uint32_t)ignorevircsrequired << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)ignorevircsrequired <<12));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_calc_nzld_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_calc_nzld_setf(uint8_t calcnzld)
{
	ASSERT_ERR((((uint32_t)calcnzld << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)calcnzld <<11));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_ignore_ed_cs_required_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_ignore_ed_cs_required_setf(uint8_t ignoreedcsrequired)
{
	ASSERT_ERR((((uint32_t)ignoreedcsrequired << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)ignoreedcsrequired <<10));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_bss_color_disabled_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_bss_color_disabled_setf(uint8_t bsscolordisabled)
{
	ASSERT_ERR((((uint32_t)bsscolordisabled << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)bsscolordisabled <<9));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_no_sig_extn_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_no_sig_extn_setf(uint8_t nosigextn)
{
	ASSERT_ERR((((uint32_t)nosigextn << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)nosigextn <<8));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_disable_bfrp_response_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_disable_bfrp_response_setf(uint8_t disablebfrpresponse)
{
	ASSERT_ERR((((uint32_t)disablebfrpresponse << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)disablebfrpresponse <<4));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_disable_bqrp_response_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_disable_bqrp_response_setf(uint8_t disablebqrpresponse)
{
	ASSERT_ERR((((uint32_t)disablebqrpresponse << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)disablebqrpresponse <<3));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_disable_bsrp_response_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_disable_bsrp_response_setf(uint8_t disablebsrpresponse)
{
	ASSERT_ERR((((uint32_t)disablebsrpresponse << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)disablebsrpresponse <<2));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_disable_mu_bar_response_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_disable_mu_bar_response_setf(uint8_t disablemubarresponse)
{
	ASSERT_ERR((((uint32_t)disablemubarresponse << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)disablemubarresponse <<1));
}
__INLINE uint8_t mac_hw0_mu0_mac_cntrl_3_disable_basic_trigger_response_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_mac_cntrl_3_disable_basic_trigger_response_setf(uint8_t disablebasictriggerresponse)
{
	ASSERT_ERR((((uint32_t)disablebasictriggerresponse << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_3_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)disablebasictriggerresponse <<0));
}

/**
 * @brief MAC_ERR_REC_CNTRL register definition
 *  Contains setting for detection and recovery from HW errors. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    FORCE_AUTO_RESP_20_MHZ    0              
 *    30:28 PPS_TIMEOUT               0x0
 *    27    RX_FIFO_OVF_CANCEL        1              
 *    26    RX_VEC2_IN_RHD_EN         0              
 *    25    RX_PADDING_EN             0              
 *    24    TX_UND_FLOW_CNTRL_EN      0              
 *    23    HDR_SPLIT_EN              0              
 *    18    MASK_CCA_BEFORE_TICK      1              
 *    17    RX_FLOW_CNTRL_EN2         0              
 *    16    RX_FLOW_CNTRL_EN          0              
 *    08    CCA_ZERO_ON_RX_CANCEL     0              
 *    07    BA_PS_BITMAP_RESET        0              
 *    06    ENCR_RX_FIFO_RESET        0              
 *    05    MAC_PHYIFFIFO_RESET       0              
 *    04    TX_FIFO_RESET             0              
 *    03    RX_FIFO_RESET             0              
 *    02    HW_FSM_RESET              0              
 *    01    USE_ERR_DET               0              
 *    00    USE_ERR_REC               0              
 * </pre>
 */
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000054)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_OFFSET      0x00000054
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_INDEX       0x00000015
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RESET       0x08040000

__INLINE uint32_t  mac_hw0_mu0_mac_err_rec_cntrl_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
}

__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_FORCE_AUTO_RESP_20_MHZ_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_FORCE_AUTO_RESP_20_MHZ_POS    31
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_PPS_TIMEOUT_MASK    ((uint32_t)0x70000000)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_PPS_TIMEOUT_LSB    28
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_PPS_TIMEOUT_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_FIFO_OVF_CANCEL_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_FIFO_OVF_CANCEL_POS    27
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_VEC_2_IN_RHD_EN_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_VEC_2_IN_RHD_EN_POS    26
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_PADDING_EN_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_PADDING_EN_POS    25
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_TX_UND_FLOW_CNTRL_EN_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_TX_UND_FLOW_CNTRL_EN_POS    24
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_HDR_SPLIT_EN_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_HDR_SPLIT_EN_POS    23
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_MASK_CCA_BEFORE_TICK_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_MASK_CCA_BEFORE_TICK_POS    18
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_FLOW_CNTRL_EN_2_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_FLOW_CNTRL_EN_2_POS    17
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_FLOW_CNTRL_EN_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_FLOW_CNTRL_EN_POS    16
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_CCA_ZERO_ON_RX_CANCEL_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_CCA_ZERO_ON_RX_CANCEL_POS    8
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_BA_PS_BITMAP_RESET_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_BA_PS_BITMAP_RESET_POS    7
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ENCR_RX_FIFO_RESET_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ENCR_RX_FIFO_RESET_POS    6
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_MAC_PHYIFFIFO_RESET_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_MAC_PHYIFFIFO_RESET_POS    5
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_TX_FIFO_RESET_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_TX_FIFO_RESET_POS    4
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_FIFO_RESET_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_FIFO_RESET_POS    3
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_HW_FSM_RESET_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_HW_FSM_RESET_POS    2
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_USE_ERR_DET_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_USE_ERR_DET_POS    1
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_USE_ERR_REC_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_USE_ERR_REC_POS    0

#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_FORCE_AUTO_RESP_20_MHZ_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_PPS_TIMEOUT_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_FIFO_OVF_CANCEL_RST    0x1
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_VEC_2_IN_RHD_EN_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_PADDING_EN_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_TX_UND_FLOW_CNTRL_EN_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_HDR_SPLIT_EN_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_MASK_CCA_BEFORE_TICK_RST    0x1
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_FLOW_CNTRL_EN_2_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_FLOW_CNTRL_EN_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_CCA_ZERO_ON_RX_CANCEL_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_BA_PS_BITMAP_RESET_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ENCR_RX_FIFO_RESET_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_MAC_PHYIFFIFO_RESET_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_TX_FIFO_RESET_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_RX_FIFO_RESET_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_HW_FSM_RESET_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_USE_ERR_DET_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_REC_CNTRL_USE_ERR_REC_RST    0x0

__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_pack(uint8_t force_auto_resp_20_mhz, uint8_t pps_timeout, uint8_t rx_fifo_ovf_cancel, uint8_t rx_vec2_in_rhd_en, uint8_t rx_padding_en, uint8_t tx_und_flow_cntrl_en, uint8_t hdr_split_en, uint8_t mask_cca_before_tick, uint8_t rx_flow_cntrl_en2, uint8_t rx_flow_cntrl_en, uint8_t cca_zero_on_rx_cancel, uint8_t ba_ps_bitmap_reset, uint8_t encr_rx_fifo_reset, uint8_t mac_phyiffifo_reset, uint8_t tx_fifo_reset, uint8_t rx_fifo_reset, uint8_t hw_fsm_reset, uint8_t use_err_det, uint8_t use_err_rec)
{
	ASSERT_ERR((((uint32_t)force_auto_resp_20_mhz << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)pps_timeout << 28) & ~((uint32_t)0x70000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_fifo_ovf_cancel << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_vec2_in_rhd_en << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_padding_en << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_und_flow_cntrl_en << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)hdr_split_en << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)mask_cca_before_tick << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)rx_flow_cntrl_en2 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)rx_flow_cntrl_en << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)cca_zero_on_rx_cancel << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)ba_ps_bitmap_reset << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)encr_rx_fifo_reset << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)mac_phyiffifo_reset << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)tx_fifo_reset << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)rx_fifo_reset << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)hw_fsm_reset << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)use_err_det << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)use_err_rec << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR,  ((uint32_t)force_auto_resp_20_mhz << 31) |((uint32_t)pps_timeout << 28) |((uint32_t)rx_fifo_ovf_cancel << 27) |((uint32_t)rx_vec2_in_rhd_en << 26) |((uint32_t)rx_padding_en << 25) |((uint32_t)tx_und_flow_cntrl_en << 24) |((uint32_t)hdr_split_en << 23) |((uint32_t)mask_cca_before_tick << 18) |((uint32_t)rx_flow_cntrl_en2 << 17) |((uint32_t)rx_flow_cntrl_en << 16) |((uint32_t)cca_zero_on_rx_cancel << 8) |((uint32_t)ba_ps_bitmap_reset << 7) |((uint32_t)encr_rx_fifo_reset << 6) |((uint32_t)mac_phyiffifo_reset << 5) |((uint32_t)tx_fifo_reset << 4) |((uint32_t)rx_fifo_reset << 3) |((uint32_t)hw_fsm_reset << 2) |((uint32_t)use_err_det << 1) |((uint32_t)use_err_rec << 0));
}

__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_unpack(uint8_t* force_auto_resp_20_mhz, uint8_t* pps_timeout, uint8_t* rx_fifo_ovf_cancel, uint8_t* rx_vec2_in_rhd_en, uint8_t* rx_padding_en, uint8_t* tx_und_flow_cntrl_en, uint8_t* hdr_split_en, uint8_t* mask_cca_before_tick, uint8_t* rx_flow_cntrl_en2, uint8_t* rx_flow_cntrl_en, uint8_t* cca_zero_on_rx_cancel, uint8_t* ba_ps_bitmap_reset, uint8_t* encr_rx_fifo_reset, uint8_t* mac_phyiffifo_reset, uint8_t* tx_fifo_reset, uint8_t* rx_fifo_reset, uint8_t* hw_fsm_reset, uint8_t* use_err_det, uint8_t* use_err_rec)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);

	*force_auto_resp_20_mhz = (localVal & ((uint32_t)0x80000000)) >>  31;
	*pps_timeout = (localVal & ((uint32_t)0x70000000)) >>  28;
	*rx_fifo_ovf_cancel = (localVal & ((uint32_t)0x08000000)) >>  27;
	*rx_vec2_in_rhd_en = (localVal & ((uint32_t)0x04000000)) >>  26;
	*rx_padding_en = (localVal & ((uint32_t)0x02000000)) >>  25;
	*tx_und_flow_cntrl_en = (localVal & ((uint32_t)0x01000000)) >>  24;
	*hdr_split_en = (localVal & ((uint32_t)0x00800000)) >>  23;
	*mask_cca_before_tick = (localVal & ((uint32_t)0x00040000)) >>  18;
	*rx_flow_cntrl_en2 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*rx_flow_cntrl_en = (localVal & ((uint32_t)0x00010000)) >>  16;
	*cca_zero_on_rx_cancel = (localVal & ((uint32_t)0x00000100)) >>  8;
	*ba_ps_bitmap_reset = (localVal & ((uint32_t)0x00000080)) >>  7;
	*encr_rx_fifo_reset = (localVal & ((uint32_t)0x00000040)) >>  6;
	*mac_phyiffifo_reset = (localVal & ((uint32_t)0x00000020)) >>  5;
	*tx_fifo_reset = (localVal & ((uint32_t)0x00000010)) >>  4;
	*rx_fifo_reset = (localVal & ((uint32_t)0x00000008)) >>  3;
	*hw_fsm_reset = (localVal & ((uint32_t)0x00000004)) >>  2;
	*use_err_det = (localVal & ((uint32_t)0x00000002)) >>  1;
	*use_err_rec = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_force_auto_resp_20_mhz_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_force_auto_resp_20_mhz_setf(uint8_t forceautoresp20mhz)
{
	ASSERT_ERR((((uint32_t)forceautoresp20mhz << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)forceautoresp20mhz <<31));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_pps_timeout_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x70000000)) >> 28);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_pps_timeout_setf(uint8_t ppstimeout)
{
	ASSERT_ERR((((uint32_t)ppstimeout << 28) & ~((uint32_t)0x70000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x70000000)) | ((uint32_t)ppstimeout <<28));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_rx_fifo_ovf_cancel_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_rx_fifo_ovf_cancel_setf(uint8_t rxfifoovfcancel)
{
	ASSERT_ERR((((uint32_t)rxfifoovfcancel << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)rxfifoovfcancel <<27));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_rx_vec_2_in_rhd_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_rx_vec_2_in_rhd_en_setf(uint8_t rxvec2inrhden)
{
	ASSERT_ERR((((uint32_t)rxvec2inrhden << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)rxvec2inrhden <<26));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_rx_padding_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_rx_padding_en_setf(uint8_t rxpaddingen)
{
	ASSERT_ERR((((uint32_t)rxpaddingen << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)rxpaddingen <<25));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_tx_und_flow_cntrl_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_tx_und_flow_cntrl_en_setf(uint8_t txundflowcntrlen)
{
	ASSERT_ERR((((uint32_t)txundflowcntrlen << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)txundflowcntrlen <<24));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_hdr_split_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_hdr_split_en_setf(uint8_t hdrspliten)
{
	ASSERT_ERR((((uint32_t)hdrspliten << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)hdrspliten <<23));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_mask_cca_before_tick_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_mask_cca_before_tick_setf(uint8_t maskccabeforetick)
{
	ASSERT_ERR((((uint32_t)maskccabeforetick << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)maskccabeforetick <<18));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_rx_flow_cntrl_en_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_rx_flow_cntrl_en_2_setf(uint8_t rxflowcntrlen2)
{
	ASSERT_ERR((((uint32_t)rxflowcntrlen2 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)rxflowcntrlen2 <<17));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_rx_flow_cntrl_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_rx_flow_cntrl_en_setf(uint8_t rxflowcntrlen)
{
	ASSERT_ERR((((uint32_t)rxflowcntrlen << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)rxflowcntrlen <<16));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_cca_zero_on_rx_cancel_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_cca_zero_on_rx_cancel_setf(uint8_t ccazeroonrxcancel)
{
	ASSERT_ERR((((uint32_t)ccazeroonrxcancel << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)ccazeroonrxcancel <<8));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_ba_ps_bitmap_reset_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_ba_ps_bitmap_reset_setf(uint8_t bapsbitmapreset)
{
	ASSERT_ERR((((uint32_t)bapsbitmapreset << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)bapsbitmapreset <<7));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_encr_rx_fifo_reset_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_encr_rx_fifo_reset_setf(uint8_t encrrxfiforeset)
{
	ASSERT_ERR((((uint32_t)encrrxfiforeset << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)encrrxfiforeset <<6));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_mac_phyiffifo_reset_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_mac_phyiffifo_reset_setf(uint8_t macphyiffiforeset)
{
	ASSERT_ERR((((uint32_t)macphyiffiforeset << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)macphyiffiforeset <<5));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_tx_fifo_reset_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_tx_fifo_reset_setf(uint8_t txfiforeset)
{
	ASSERT_ERR((((uint32_t)txfiforeset << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)txfiforeset <<4));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_rx_fifo_reset_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_rx_fifo_reset_setf(uint8_t rxfiforeset)
{
	ASSERT_ERR((((uint32_t)rxfiforeset << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)rxfiforeset <<3));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_hw_fsm_reset_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_hw_fsm_reset_setf(uint8_t hwfsmreset)
{
	ASSERT_ERR((((uint32_t)hwfsmreset << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)hwfsmreset <<2));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_use_err_det_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_mac_err_rec_cntrl_use_err_det_setf(uint8_t useerrdet)
{
	ASSERT_ERR((((uint32_t)useerrdet << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)useerrdet <<1));
}
__INLINE uint8_t mac_hw0_mu0_mac_err_rec_cntrl_use_err_rec_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_ERR_REC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief MAC_ERR_SET_STATUS register definition
 *  HW error status set register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    03    ERR_IN_HW_LEVEL_3         0              
 *    02    ERR_IN_TX_RX_LEVEL_2      0              
 *    01    ERR_IN_RX_LEVEL_1         0              
 *    00    ERR_IN_TX_LEVEL_1         0              
 * </pre>
 */
#define MAC_HW0_MU0_MAC_ERR_SET_STATUS_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000058)
#define MAC_HW0_MU0_MAC_ERR_SET_STATUS_OFFSET      0x00000058
#define MAC_HW0_MU0_MAC_ERR_SET_STATUS_INDEX       0x00000016
#define MAC_HW0_MU0_MAC_ERR_SET_STATUS_RESET       0x00000000

__INLINE void mac_hw0_mu0_mac_err_set_status_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_SET_STATUS_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MAC_ERR_SET_STATUS_ERR_IN_HW_LEVEL_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_MAC_ERR_SET_STATUS_ERR_IN_HW_LEVEL_3_POS    3
#define MAC_HW0_MU0_MAC_ERR_SET_STATUS_ERR_IN_TX_RX_LEVEL_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_MAC_ERR_SET_STATUS_ERR_IN_TX_RX_LEVEL_2_POS    2
#define MAC_HW0_MU0_MAC_ERR_SET_STATUS_ERR_IN_RX_LEVEL_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_MAC_ERR_SET_STATUS_ERR_IN_RX_LEVEL_1_POS    1
#define MAC_HW0_MU0_MAC_ERR_SET_STATUS_ERR_IN_TX_LEVEL_1_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_MAC_ERR_SET_STATUS_ERR_IN_TX_LEVEL_1_POS    0

#define MAC_HW0_MU0_MAC_ERR_SET_STATUS_ERR_IN_HW_LEVEL_3_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_SET_STATUS_ERR_IN_TX_RX_LEVEL_2_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_SET_STATUS_ERR_IN_RX_LEVEL_1_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_SET_STATUS_ERR_IN_TX_LEVEL_1_RST    0x0

__INLINE void mac_hw0_mu0_mac_err_set_status_pack(uint8_t err_in_hw_level_3, uint8_t err_in_tx_rx_level_2, uint8_t err_in_rx_level_1, uint8_t err_in_tx_level_1)
{
	ASSERT_ERR((((uint32_t)err_in_hw_level_3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)err_in_tx_rx_level_2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)err_in_rx_level_1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)err_in_tx_level_1 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_SET_STATUS_ADDR,  ((uint32_t)err_in_hw_level_3 << 3) |((uint32_t)err_in_tx_rx_level_2 << 2) |((uint32_t)err_in_rx_level_1 << 1) |((uint32_t)err_in_tx_level_1 << 0));
}

__INLINE void mac_hw0_mu0_mac_err_set_status_err_in_hw_level_3_setf(uint8_t errinhwlevel3)
{
	ASSERT_ERR((((uint32_t)errinhwlevel3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_SET_STATUS_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_SET_STATUS_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)errinhwlevel3 <<3));
}
__INLINE void mac_hw0_mu0_mac_err_set_status_err_in_tx_rx_level_2_setf(uint8_t errintxrxlevel2)
{
	ASSERT_ERR((((uint32_t)errintxrxlevel2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_SET_STATUS_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_SET_STATUS_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)errintxrxlevel2 <<2));
}
__INLINE void mac_hw0_mu0_mac_err_set_status_err_in_rx_level_1_setf(uint8_t errinrxlevel1)
{
	ASSERT_ERR((((uint32_t)errinrxlevel1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_SET_STATUS_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_SET_STATUS_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)errinrxlevel1 <<1));
}
__INLINE void mac_hw0_mu0_mac_err_set_status_err_in_tx_level_1_setf(uint8_t errintxlevel1)
{
	ASSERT_ERR((((uint32_t)errintxlevel1 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_SET_STATUS_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_SET_STATUS_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)errintxlevel1 <<0));
}

/**
 * @brief MAC_ERR_CLEAR_STATUS register definition
 *  HW error status clear register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    03    CLEAR_ERR_IN_HW_LEVEL_3   0              
 *    02    CLEAR_ERR_IN_TX_RX_LEVEL_2 0              
 *    01    CLEAR_ERR_IN_RX_LEVEL_1   0              
 *    00    CLEAR_ERR_IN_TX_LEVEL_1   0              
 * </pre>
 */
#define MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000005C)
#define MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_OFFSET      0x0000005C
#define MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_INDEX       0x00000017
#define MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_RESET       0x00000000

__INLINE void mac_hw0_mu0_mac_err_clear_status_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_CLEAR_ERR_IN_HW_LEVEL_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_CLEAR_ERR_IN_HW_LEVEL_3_POS    3
#define MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_CLEAR_ERR_IN_TX_RX_LEVEL_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_CLEAR_ERR_IN_TX_RX_LEVEL_2_POS    2
#define MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_CLEAR_ERR_IN_RX_LEVEL_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_CLEAR_ERR_IN_RX_LEVEL_1_POS    1
#define MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_CLEAR_ERR_IN_TX_LEVEL_1_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_CLEAR_ERR_IN_TX_LEVEL_1_POS    0

#define MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_CLEAR_ERR_IN_HW_LEVEL_3_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_CLEAR_ERR_IN_TX_RX_LEVEL_2_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_CLEAR_ERR_IN_RX_LEVEL_1_RST    0x0
#define MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_CLEAR_ERR_IN_TX_LEVEL_1_RST    0x0

__INLINE void mac_hw0_mu0_mac_err_clear_status_pack(uint8_t clear_err_in_hw_level_3, uint8_t clear_err_in_tx_rx_level_2, uint8_t clear_err_in_rx_level_1, uint8_t clear_err_in_tx_level_1)
{
	ASSERT_ERR((((uint32_t)clear_err_in_hw_level_3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)clear_err_in_tx_rx_level_2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)clear_err_in_rx_level_1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)clear_err_in_tx_level_1 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_ADDR,  ((uint32_t)clear_err_in_hw_level_3 << 3) |((uint32_t)clear_err_in_tx_rx_level_2 << 2) |((uint32_t)clear_err_in_rx_level_1 << 1) |((uint32_t)clear_err_in_tx_level_1 << 0));
}

__INLINE void mac_hw0_mu0_mac_err_clear_status_clear_err_in_hw_level_3_setf(uint8_t clearerrinhwlevel3)
{
	ASSERT_ERR((((uint32_t)clearerrinhwlevel3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)clearerrinhwlevel3 <<3));
}
__INLINE void mac_hw0_mu0_mac_err_clear_status_clear_err_in_tx_rx_level_2_setf(uint8_t clearerrintxrxlevel2)
{
	ASSERT_ERR((((uint32_t)clearerrintxrxlevel2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)clearerrintxrxlevel2 <<2));
}
__INLINE void mac_hw0_mu0_mac_err_clear_status_clear_err_in_rx_level_1_setf(uint8_t clearerrinrxlevel1)
{
	ASSERT_ERR((((uint32_t)clearerrinrxlevel1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)clearerrinrxlevel1 <<1));
}
__INLINE void mac_hw0_mu0_mac_err_clear_status_clear_err_in_tx_level_1_setf(uint8_t clearerrintxlevel1)
{
	ASSERT_ERR((((uint32_t)clearerrintxlevel1 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_ERR_CLEAR_STATUS_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)clearerrintxlevel1 <<0));
}

/**
 * @brief RX_CNTRL register definition
 *  Controls the HW receive operation. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EN_DUPLICATE_DETECTION    0              
 *    30    ACCEPT_UNKNOWN            0              
 *    29    ACCEPT_OTHER_DATA_FRAMES  0              
 *    28    ACCEPT_QO_S_NULL          1              
 *    27    ACCEPT_QCFWO_DATA         0              
 *    26    ACCEPT_Q_DATA             1              
 *    25    ACCEPT_CFWO_DATA          0              
 *    24    ACCEPT_DATA               1              
 *    23    ACCEPT_OTHER_CNTRL_FRAMES 0              
 *    22    ACCEPT_CF_END             0              
 *    21    ACCEPT_ACK                0              
 *    20    ACCEPT_CTS                0              
 *    19    ACCEPT_RTS                0              
 *    18    ACCEPT_PS_POLL            1              
 *    17    ACCEPT_BA                 1              
 *    16    ACCEPT_BAR                1              
 *    15    ACCEPT_OTHER_MGMT_FRAMES  1              
 *    14    DONT_DECRYPT_PMF          0              
 *    13    ACCEPT_ALL_BEACON         0              
 *    12    ACCEPT_NOT_EXPECTED_BA    0              
 *    11    ACCEPT_DECRYPT_ERROR_FRAMES 0              
 *    10    ACCEPT_BEACON             1              
 *    09    ACCEPT_PROBE_RESP         1              
 *    08    ACCEPT_PROBE_REQ          1              
 *    07    ACCEPT_MY_UNICAST         1              
 *    06    ACCEPT_UNICAST            0              
 *    05    ACCEPT_ERROR_FRAMES       0              
 *    04    ACCEPT_OTHER_BSSID        0              
 *    03    ACCEPT_BROADCAST          1              
 *    02    ACCEPT_MULTICAST          0              
 *    01    DONT_DECRYPT              0              
 *    00    EXC_UNENCRYPTED           0              
 * </pre>
 */
#define MAC_HW0_MU0_RX_CNTRL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000060)
#define MAC_HW0_MU0_RX_CNTRL_OFFSET      0x00000060
#define MAC_HW0_MU0_RX_CNTRL_INDEX       0x00000018
#define MAC_HW0_MU0_RX_CNTRL_RESET       0x15078788

__INLINE uint32_t  mac_hw0_mu0_rx_cntrl_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
}

__INLINE void mac_hw0_mu0_rx_cntrl_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_CNTRL_EN_DUPLICATE_DETECTION_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_RX_CNTRL_EN_DUPLICATE_DETECTION_POS    31
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_UNKNOWN_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_UNKNOWN_POS    30
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_OTHER_DATA_FRAMES_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_OTHER_DATA_FRAMES_POS    29
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_QO_S_NULL_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_QO_S_NULL_POS    28
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_QCFWO_DATA_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_QCFWO_DATA_POS    27
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_Q_DATA_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_Q_DATA_POS    26
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_CFWO_DATA_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_CFWO_DATA_POS    25
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_DATA_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_DATA_POS    24
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_OTHER_CNTRL_FRAMES_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_OTHER_CNTRL_FRAMES_POS    23
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_CF_END_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_CF_END_POS    22
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_ACK_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_ACK_POS    21
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_CTS_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_CTS_POS    20
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_RTS_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_RTS_POS    19
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_PS_POLL_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_PS_POLL_POS    18
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_BA_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_BA_POS    17
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_BAR_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_BAR_POS    16
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_OTHER_MGMT_FRAMES_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_OTHER_MGMT_FRAMES_POS    15
#define MAC_HW0_MU0_RX_CNTRL_DONT_DECRYPT_PMF_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_RX_CNTRL_DONT_DECRYPT_PMF_POS    14
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_ALL_BEACON_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_ALL_BEACON_POS    13
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_NOT_EXPECTED_BA_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_NOT_EXPECTED_BA_POS    12
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_DECRYPT_ERROR_FRAMES_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_DECRYPT_ERROR_FRAMES_POS    11
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_BEACON_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_BEACON_POS    10
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_PROBE_RESP_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_PROBE_RESP_POS    9
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_PROBE_REQ_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_PROBE_REQ_POS    8
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_MY_UNICAST_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_MY_UNICAST_POS    7
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_UNICAST_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_UNICAST_POS    6
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_ERROR_FRAMES_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_ERROR_FRAMES_POS    5
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_OTHER_BSSID_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_OTHER_BSSID_POS    4
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_BROADCAST_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_BROADCAST_POS    3
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_MULTICAST_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_MULTICAST_POS    2
#define MAC_HW0_MU0_RX_CNTRL_DONT_DECRYPT_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_CNTRL_DONT_DECRYPT_POS    1
#define MAC_HW0_MU0_RX_CNTRL_EXC_UNENCRYPTED_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_CNTRL_EXC_UNENCRYPTED_POS    0

#define MAC_HW0_MU0_RX_CNTRL_EN_DUPLICATE_DETECTION_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_UNKNOWN_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_OTHER_DATA_FRAMES_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_QO_S_NULL_RST    0x1
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_QCFWO_DATA_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_Q_DATA_RST    0x1
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_CFWO_DATA_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_DATA_RST    0x1
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_OTHER_CNTRL_FRAMES_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_CF_END_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_ACK_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_CTS_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_RTS_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_PS_POLL_RST    0x1
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_BA_RST    0x1
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_BAR_RST    0x1
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_OTHER_MGMT_FRAMES_RST    0x1
#define MAC_HW0_MU0_RX_CNTRL_DONT_DECRYPT_PMF_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_ALL_BEACON_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_NOT_EXPECTED_BA_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_DECRYPT_ERROR_FRAMES_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_BEACON_RST    0x1
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_PROBE_RESP_RST    0x1
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_PROBE_REQ_RST    0x1
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_MY_UNICAST_RST    0x1
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_UNICAST_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_ERROR_FRAMES_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_OTHER_BSSID_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_BROADCAST_RST    0x1
#define MAC_HW0_MU0_RX_CNTRL_ACCEPT_MULTICAST_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_DONT_DECRYPT_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_EXC_UNENCRYPTED_RST    0x0

__INLINE void mac_hw0_mu0_rx_cntrl_pack(uint8_t en_duplicate_detection, uint8_t accept_unknown, uint8_t accept_other_data_frames, uint8_t accept_qo_s_null, uint8_t accept_qcfwo_data, uint8_t accept_q_data, uint8_t accept_cfwo_data, uint8_t accept_data, uint8_t accept_other_cntrl_frames, uint8_t accept_cf_end, uint8_t accept_ack, uint8_t accept_cts, uint8_t accept_rts, uint8_t accept_ps_poll, uint8_t accept_ba, uint8_t accept_bar, uint8_t accept_other_mgmt_frames, uint8_t dont_decrypt_pmf, uint8_t accept_all_beacon, uint8_t accept_not_expected_ba, uint8_t accept_decrypt_error_frames, uint8_t accept_beacon, uint8_t accept_probe_resp, uint8_t accept_probe_req, uint8_t accept_my_unicast, uint8_t accept_unicast, uint8_t accept_error_frames, uint8_t accept_other_bssid, uint8_t accept_broadcast, uint8_t accept_multicast, uint8_t dont_decrypt, uint8_t exc_unencrypted)
{
	ASSERT_ERR((((uint32_t)en_duplicate_detection << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)accept_unknown << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)accept_other_data_frames << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)accept_qo_s_null << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)accept_qcfwo_data << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)accept_q_data << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)accept_cfwo_data << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)accept_data << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)accept_other_cntrl_frames << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)accept_cf_end << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)accept_ack << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)accept_cts << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)accept_rts << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)accept_ps_poll << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)accept_ba << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)accept_bar << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)accept_other_mgmt_frames << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)dont_decrypt_pmf << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)accept_all_beacon << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)accept_not_expected_ba << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)accept_decrypt_error_frames << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)accept_beacon << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)accept_probe_resp << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)accept_probe_req << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)accept_my_unicast << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)accept_unicast << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)accept_error_frames << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)accept_other_bssid << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)accept_broadcast << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)accept_multicast << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)dont_decrypt << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)exc_unencrypted << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR,  ((uint32_t)en_duplicate_detection << 31) |((uint32_t)accept_unknown << 30) |((uint32_t)accept_other_data_frames << 29) |((uint32_t)accept_qo_s_null << 28) |((uint32_t)accept_qcfwo_data << 27) |((uint32_t)accept_q_data << 26) |((uint32_t)accept_cfwo_data << 25) |((uint32_t)accept_data << 24) |((uint32_t)accept_other_cntrl_frames << 23) |((uint32_t)accept_cf_end << 22) |((uint32_t)accept_ack << 21) |((uint32_t)accept_cts << 20) |((uint32_t)accept_rts << 19) |((uint32_t)accept_ps_poll << 18) |((uint32_t)accept_ba << 17) |((uint32_t)accept_bar << 16) |((uint32_t)accept_other_mgmt_frames << 15) |((uint32_t)dont_decrypt_pmf << 14) |((uint32_t)accept_all_beacon << 13) |((uint32_t)accept_not_expected_ba << 12) |((uint32_t)accept_decrypt_error_frames << 11) |((uint32_t)accept_beacon << 10) |((uint32_t)accept_probe_resp << 9) |((uint32_t)accept_probe_req << 8) |((uint32_t)accept_my_unicast << 7) |((uint32_t)accept_unicast << 6) |((uint32_t)accept_error_frames << 5) |((uint32_t)accept_other_bssid << 4) |((uint32_t)accept_broadcast << 3) |((uint32_t)accept_multicast << 2) |((uint32_t)dont_decrypt << 1) |((uint32_t)exc_unencrypted << 0));
}

__INLINE void mac_hw0_mu0_rx_cntrl_unpack(uint8_t* en_duplicate_detection, uint8_t* accept_unknown, uint8_t* accept_other_data_frames, uint8_t* accept_qo_s_null, uint8_t* accept_qcfwo_data, uint8_t* accept_q_data, uint8_t* accept_cfwo_data, uint8_t* accept_data, uint8_t* accept_other_cntrl_frames, uint8_t* accept_cf_end, uint8_t* accept_ack, uint8_t* accept_cts, uint8_t* accept_rts, uint8_t* accept_ps_poll, uint8_t* accept_ba, uint8_t* accept_bar, uint8_t* accept_other_mgmt_frames, uint8_t* dont_decrypt_pmf, uint8_t* accept_all_beacon, uint8_t* accept_not_expected_ba, uint8_t* accept_decrypt_error_frames, uint8_t* accept_beacon, uint8_t* accept_probe_resp, uint8_t* accept_probe_req, uint8_t* accept_my_unicast, uint8_t* accept_unicast, uint8_t* accept_error_frames, uint8_t* accept_other_bssid, uint8_t* accept_broadcast, uint8_t* accept_multicast, uint8_t* dont_decrypt, uint8_t* exc_unencrypted)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);

	*en_duplicate_detection = (localVal & ((uint32_t)0x80000000)) >>  31;
	*accept_unknown = (localVal & ((uint32_t)0x40000000)) >>  30;
	*accept_other_data_frames = (localVal & ((uint32_t)0x20000000)) >>  29;
	*accept_qo_s_null = (localVal & ((uint32_t)0x10000000)) >>  28;
	*accept_qcfwo_data = (localVal & ((uint32_t)0x08000000)) >>  27;
	*accept_q_data = (localVal & ((uint32_t)0x04000000)) >>  26;
	*accept_cfwo_data = (localVal & ((uint32_t)0x02000000)) >>  25;
	*accept_data = (localVal & ((uint32_t)0x01000000)) >>  24;
	*accept_other_cntrl_frames = (localVal & ((uint32_t)0x00800000)) >>  23;
	*accept_cf_end = (localVal & ((uint32_t)0x00400000)) >>  22;
	*accept_ack = (localVal & ((uint32_t)0x00200000)) >>  21;
	*accept_cts = (localVal & ((uint32_t)0x00100000)) >>  20;
	*accept_rts = (localVal & ((uint32_t)0x00080000)) >>  19;
	*accept_ps_poll = (localVal & ((uint32_t)0x00040000)) >>  18;
	*accept_ba = (localVal & ((uint32_t)0x00020000)) >>  17;
	*accept_bar = (localVal & ((uint32_t)0x00010000)) >>  16;
	*accept_other_mgmt_frames = (localVal & ((uint32_t)0x00008000)) >>  15;
	*dont_decrypt_pmf = (localVal & ((uint32_t)0x00004000)) >>  14;
	*accept_all_beacon = (localVal & ((uint32_t)0x00002000)) >>  13;
	*accept_not_expected_ba = (localVal & ((uint32_t)0x00001000)) >>  12;
	*accept_decrypt_error_frames = (localVal & ((uint32_t)0x00000800)) >>  11;
	*accept_beacon = (localVal & ((uint32_t)0x00000400)) >>  10;
	*accept_probe_resp = (localVal & ((uint32_t)0x00000200)) >>  9;
	*accept_probe_req = (localVal & ((uint32_t)0x00000100)) >>  8;
	*accept_my_unicast = (localVal & ((uint32_t)0x00000080)) >>  7;
	*accept_unicast = (localVal & ((uint32_t)0x00000040)) >>  6;
	*accept_error_frames = (localVal & ((uint32_t)0x00000020)) >>  5;
	*accept_other_bssid = (localVal & ((uint32_t)0x00000010)) >>  4;
	*accept_broadcast = (localVal & ((uint32_t)0x00000008)) >>  3;
	*accept_multicast = (localVal & ((uint32_t)0x00000004)) >>  2;
	*dont_decrypt = (localVal & ((uint32_t)0x00000002)) >>  1;
	*exc_unencrypted = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_cntrl_en_duplicate_detection_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_unknown_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_unknown_setf(uint8_t acceptunknown)
{
	ASSERT_ERR((((uint32_t)acceptunknown << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)acceptunknown <<30));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_other_data_frames_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_other_data_frames_setf(uint8_t acceptotherdataframes)
{
	ASSERT_ERR((((uint32_t)acceptotherdataframes << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)acceptotherdataframes <<29));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_qo_s_null_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_qo_s_null_setf(uint8_t acceptqosnull)
{
	ASSERT_ERR((((uint32_t)acceptqosnull << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)acceptqosnull <<28));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_qcfwo_data_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_qcfwo_data_setf(uint8_t acceptqcfwodata)
{
	ASSERT_ERR((((uint32_t)acceptqcfwodata << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)acceptqcfwodata <<27));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_q_data_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_q_data_setf(uint8_t acceptqdata)
{
	ASSERT_ERR((((uint32_t)acceptqdata << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)acceptqdata <<26));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_cfwo_data_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_cfwo_data_setf(uint8_t acceptcfwodata)
{
	ASSERT_ERR((((uint32_t)acceptcfwodata << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)acceptcfwodata <<25));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_data_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_data_setf(uint8_t acceptdata)
{
	ASSERT_ERR((((uint32_t)acceptdata << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)acceptdata <<24));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_other_cntrl_frames_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_other_cntrl_frames_setf(uint8_t acceptothercntrlframes)
{
	ASSERT_ERR((((uint32_t)acceptothercntrlframes << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)acceptothercntrlframes <<23));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_cf_end_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_cf_end_setf(uint8_t acceptcfend)
{
	ASSERT_ERR((((uint32_t)acceptcfend << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)acceptcfend <<22));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_ack_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_ack_setf(uint8_t acceptack)
{
	ASSERT_ERR((((uint32_t)acceptack << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)acceptack <<21));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_cts_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_cts_setf(uint8_t acceptcts)
{
	ASSERT_ERR((((uint32_t)acceptcts << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)acceptcts <<20));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_rts_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_rts_setf(uint8_t acceptrts)
{
	ASSERT_ERR((((uint32_t)acceptrts << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)acceptrts <<19));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_ps_poll_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_ps_poll_setf(uint8_t acceptpspoll)
{
	ASSERT_ERR((((uint32_t)acceptpspoll << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)acceptpspoll <<18));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_ba_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_ba_setf(uint8_t acceptba)
{
	ASSERT_ERR((((uint32_t)acceptba << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)acceptba <<17));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_bar_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_bar_setf(uint8_t acceptbar)
{
	ASSERT_ERR((((uint32_t)acceptbar << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)acceptbar <<16));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_other_mgmt_frames_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_other_mgmt_frames_setf(uint8_t acceptothermgmtframes)
{
	ASSERT_ERR((((uint32_t)acceptothermgmtframes << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)acceptothermgmtframes <<15));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_dont_decrypt_pmf_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_rx_cntrl_dont_decrypt_pmf_setf(uint8_t dontdecryptpmf)
{
	ASSERT_ERR((((uint32_t)dontdecryptpmf << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)dontdecryptpmf <<14));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_all_beacon_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_all_beacon_setf(uint8_t acceptallbeacon)
{
	ASSERT_ERR((((uint32_t)acceptallbeacon << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)acceptallbeacon <<13));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_not_expected_ba_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_not_expected_ba_setf(uint8_t acceptnotexpectedba)
{
	ASSERT_ERR((((uint32_t)acceptnotexpectedba << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)acceptnotexpectedba <<12));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_decrypt_error_frames_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_decrypt_error_frames_setf(uint8_t acceptdecrypterrorframes)
{
	ASSERT_ERR((((uint32_t)acceptdecrypterrorframes << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)acceptdecrypterrorframes <<11));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_beacon_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_beacon_setf(uint8_t acceptbeacon)
{
	ASSERT_ERR((((uint32_t)acceptbeacon << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)acceptbeacon <<10));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_probe_resp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_probe_resp_setf(uint8_t acceptproberesp)
{
	ASSERT_ERR((((uint32_t)acceptproberesp << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)acceptproberesp <<9));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_probe_req_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_probe_req_setf(uint8_t acceptprobereq)
{
	ASSERT_ERR((((uint32_t)acceptprobereq << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)acceptprobereq <<8));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_my_unicast_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_my_unicast_setf(uint8_t acceptmyunicast)
{
	ASSERT_ERR((((uint32_t)acceptmyunicast << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)acceptmyunicast <<7));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_unicast_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_unicast_setf(uint8_t acceptunicast)
{
	ASSERT_ERR((((uint32_t)acceptunicast << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)acceptunicast <<6));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_error_frames_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_error_frames_setf(uint8_t accepterrorframes)
{
	ASSERT_ERR((((uint32_t)accepterrorframes << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)accepterrorframes <<5));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_other_bssid_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_other_bssid_setf(uint8_t acceptotherbssid)
{
	ASSERT_ERR((((uint32_t)acceptotherbssid << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)acceptotherbssid <<4));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_broadcast_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_broadcast_setf(uint8_t acceptbroadcast)
{
	ASSERT_ERR((((uint32_t)acceptbroadcast << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)acceptbroadcast <<3));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_accept_multicast_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_rx_cntrl_accept_multicast_setf(uint8_t acceptmulticast)
{
	ASSERT_ERR((((uint32_t)acceptmulticast << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)acceptmulticast <<2));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_dont_decrypt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_rx_cntrl_dont_decrypt_setf(uint8_t dontdecrypt)
{
	ASSERT_ERR((((uint32_t)dontdecrypt << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)dontdecrypt <<1));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_exc_unencrypted_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_cntrl_exc_unencrypted_setf(uint8_t excunencrypted)
{
	ASSERT_ERR((((uint32_t)excunencrypted << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)excunencrypted <<0));
}

/**
 * @brief BCN_CNTRL_1 register definition
 *  Information related to beacon transmission is programmed here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 NO_BCN_TX_TIME            0x1B
 *    23    IMP_TBTT_IN_128_US        0              
 *    22:16 IMP_TBTT_PERIOD           0x1A
 *    15:00 BEACON_INT                0x0
 * </pre>
 */
#define MAC_HW0_MU0_BCN_CNTRL_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000064)
#define MAC_HW0_MU0_BCN_CNTRL_1_OFFSET      0x00000064
#define MAC_HW0_MU0_BCN_CNTRL_1_INDEX       0x00000019
#define MAC_HW0_MU0_BCN_CNTRL_1_RESET       0x1B1A0000

__INLINE uint32_t  mac_hw0_mu0_bcn_cntrl_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_1_ADDR);
}

__INLINE void mac_hw0_mu0_bcn_cntrl_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BCN_CNTRL_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BCN_CNTRL_1_NO_BCN_TX_TIME_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_BCN_CNTRL_1_NO_BCN_TX_TIME_LSB    24
#define MAC_HW0_MU0_BCN_CNTRL_1_NO_BCN_TX_TIME_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_BCN_CNTRL_1_IMP_TBTT_IN_128_US_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_BCN_CNTRL_1_IMP_TBTT_IN_128_US_POS    23
#define MAC_HW0_MU0_BCN_CNTRL_1_IMP_TBTT_PERIOD_MASK    ((uint32_t)0x007F0000)
#define MAC_HW0_MU0_BCN_CNTRL_1_IMP_TBTT_PERIOD_LSB    16
#define MAC_HW0_MU0_BCN_CNTRL_1_IMP_TBTT_PERIOD_WIDTH    ((uint32_t)0x00000007)
#define MAC_HW0_MU0_BCN_CNTRL_1_BEACON_INT_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BCN_CNTRL_1_BEACON_INT_LSB    0
#define MAC_HW0_MU0_BCN_CNTRL_1_BEACON_INT_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BCN_CNTRL_1_NO_BCN_TX_TIME_RST    0x1B
#define MAC_HW0_MU0_BCN_CNTRL_1_IMP_TBTT_IN_128_US_RST    0x0
#define MAC_HW0_MU0_BCN_CNTRL_1_IMP_TBTT_PERIOD_RST    0x1A
#define MAC_HW0_MU0_BCN_CNTRL_1_BEACON_INT_RST    0x0

__INLINE void mac_hw0_mu0_bcn_cntrl_1_pack(uint8_t no_bcn_tx_time, uint8_t imp_tbtt_in_128_us, uint8_t imp_tbtt_period, uint16_t beacon_int)
{
	ASSERT_ERR((((uint32_t)no_bcn_tx_time << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)imp_tbtt_in_128_us << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)imp_tbtt_period << 16) & ~((uint32_t)0x007F0000)) == 0);
	ASSERT_ERR((((uint32_t)beacon_int << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BCN_CNTRL_1_ADDR,  ((uint32_t)no_bcn_tx_time << 24) |((uint32_t)imp_tbtt_in_128_us << 23) |((uint32_t)imp_tbtt_period << 16) |((uint32_t)beacon_int << 0));
}

__INLINE void mac_hw0_mu0_bcn_cntrl_1_unpack(uint8_t* no_bcn_tx_time, uint8_t* imp_tbtt_in_128_us, uint8_t* imp_tbtt_period, uint16_t* beacon_int)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_1_ADDR);

	*no_bcn_tx_time = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*imp_tbtt_in_128_us = (localVal & ((uint32_t)0x00800000)) >>  23;
	*imp_tbtt_period = (localVal & ((uint32_t)0x007F0000)) >>  16;
	*beacon_int = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_bcn_cntrl_1_no_bcn_tx_time_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_bcn_cntrl_1_no_bcn_tx_time_setf(uint8_t nobcntxtime)
{
	ASSERT_ERR((((uint32_t)nobcntxtime << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BCN_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_1_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)nobcntxtime <<24));
}
__INLINE uint8_t mac_hw0_mu0_bcn_cntrl_1_imp_tbtt_in_128_us_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_bcn_cntrl_1_imp_tbtt_in_128_us_setf(uint8_t imptbttin128us)
{
	ASSERT_ERR((((uint32_t)imptbttin128us << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BCN_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_1_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)imptbttin128us <<23));
}
__INLINE uint8_t mac_hw0_mu0_bcn_cntrl_1_imp_tbtt_period_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x007F0000)) >> 16);
}
__INLINE void mac_hw0_mu0_bcn_cntrl_1_imp_tbtt_period_setf(uint8_t imptbttperiod)
{
	ASSERT_ERR((((uint32_t)imptbttperiod << 16) & ~((uint32_t)0x007F0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BCN_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_1_ADDR) & ~((uint32_t)0x007F0000)) | ((uint32_t)imptbttperiod <<16));
}
__INLINE uint16_t mac_hw0_mu0_bcn_cntrl_1_beacon_int_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_bcn_cntrl_1_beacon_int_setf(uint16_t beaconint)
{
	ASSERT_ERR((((uint32_t)beaconint << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BCN_CNTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_1_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)beaconint <<0));
}

/**
 * @brief BCN_CNTRL_2 register definition
 *  Information related to beacon transmission is programmed here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 AID                       0x0
 *    15:08 TIM_OFFSET                0x0
 *    07:00 BCN_UPDATE_OFFSET         0x0
 * </pre>
 */
#define MAC_HW0_MU0_BCN_CNTRL_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000068)
#define MAC_HW0_MU0_BCN_CNTRL_2_OFFSET      0x00000068
#define MAC_HW0_MU0_BCN_CNTRL_2_INDEX       0x0000001A
#define MAC_HW0_MU0_BCN_CNTRL_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_bcn_cntrl_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_2_ADDR);
}

__INLINE void mac_hw0_mu0_bcn_cntrl_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BCN_CNTRL_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BCN_CNTRL_2_AID_MASK    ((uint32_t)0x0FFF0000)
#define MAC_HW0_MU0_BCN_CNTRL_2_AID_LSB     16
#define MAC_HW0_MU0_BCN_CNTRL_2_AID_WIDTH    ((uint32_t)0x0000000C)
#define MAC_HW0_MU0_BCN_CNTRL_2_TIM_OFFSET_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_BCN_CNTRL_2_TIM_OFFSET_LSB    8
#define MAC_HW0_MU0_BCN_CNTRL_2_TIM_OFFSET_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_BCN_CNTRL_2_BCN_UPDATE_OFFSET_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_BCN_CNTRL_2_BCN_UPDATE_OFFSET_LSB    0
#define MAC_HW0_MU0_BCN_CNTRL_2_BCN_UPDATE_OFFSET_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_BCN_CNTRL_2_AID_RST     0x0
#define MAC_HW0_MU0_BCN_CNTRL_2_TIM_OFFSET_RST    0x0
#define MAC_HW0_MU0_BCN_CNTRL_2_BCN_UPDATE_OFFSET_RST    0x0

__INLINE void mac_hw0_mu0_bcn_cntrl_2_pack(uint16_t aid, uint8_t tim_offset, uint8_t bcn_update_offset)
{
	ASSERT_ERR((((uint32_t)aid << 16) & ~((uint32_t)0x0FFF0000)) == 0);
	ASSERT_ERR((((uint32_t)tim_offset << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)bcn_update_offset << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BCN_CNTRL_2_ADDR,  ((uint32_t)aid << 16) |((uint32_t)tim_offset << 8) |((uint32_t)bcn_update_offset << 0));
}

__INLINE void mac_hw0_mu0_bcn_cntrl_2_unpack(uint16_t* aid, uint8_t* tim_offset, uint8_t* bcn_update_offset)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_2_ADDR);

	*aid = (localVal & ((uint32_t)0x0FFF0000)) >>  16;
	*tim_offset = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*bcn_update_offset = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_bcn_cntrl_2_aid_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0FFF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_bcn_cntrl_2_aid_setf(uint16_t aid)
{
	ASSERT_ERR((((uint32_t)aid << 16) & ~((uint32_t)0x0FFF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BCN_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_2_ADDR) & ~((uint32_t)0x0FFF0000)) | ((uint32_t)aid <<16));
}
__INLINE uint8_t mac_hw0_mu0_bcn_cntrl_2_tim_offset_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_bcn_cntrl_2_tim_offset_setf(uint8_t timoffset)
{
	ASSERT_ERR((((uint32_t)timoffset << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BCN_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_2_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)timoffset <<8));
}
__INLINE uint8_t mac_hw0_mu0_bcn_cntrl_2_bcn_update_offset_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_bcn_cntrl_2_bcn_update_offset_setf(uint8_t bcnupdateoffset)
{
	ASSERT_ERR((((uint32_t)bcnupdateoffset << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BCN_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_2_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)bcnupdateoffset <<0));
}

/**
 * @brief RX_CNTRL_2 register definition
 *  RX receive control 2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:30 primary20_Location        0x0
 *    29    primary80_Location        0              
 *    19    disable_response_6ghz     0              
 *    18    clear_SBSNLegs_Bar        0              
 *    17    clear_SBSNLegs_Data       0              
 *    16    enable_Quiet_Interval     0              
 *    09    accept_Non_TB             0              
 *    08    accept_BQRPtrigger        0              
 *    07    accept_BSRPtrigger        0              
 *    06    accept_BFRPtrigger        0              
 *    05    accept_Mu_RTS             0              
 *    04    accept_Mu_BAR             0              
 *    03    accept_Basic_Trigger      0              
 *    02    accept_NDP                0              
 *    01    accept_BRP                0              
 *    00    accept_NDPAvht            1              
 * </pre>
 */
#define MAC_HW0_MU0_RX_CNTRL_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000006C)
#define MAC_HW0_MU0_RX_CNTRL_2_OFFSET      0x0000006C
#define MAC_HW0_MU0_RX_CNTRL_2_INDEX       0x0000001B
#define MAC_HW0_MU0_RX_CNTRL_2_RESET       0x00000001

__INLINE uint32_t  mac_hw0_mu0_rx_cntrl_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
}

__INLINE void mac_hw0_mu0_rx_cntrl_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_CNTRL_2_PRIMARY_20_LOCATION_MASK    ((uint32_t)0xC0000000)
#define MAC_HW0_MU0_RX_CNTRL_2_PRIMARY_20_LOCATION_LSB    30
#define MAC_HW0_MU0_RX_CNTRL_2_PRIMARY_20_LOCATION_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_CNTRL_2_PRIMARY_80_LOCATION_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_RX_CNTRL_2_PRIMARY_80_LOCATION_POS    29
#define MAC_HW0_MU0_RX_CNTRL_2_DISABLE_RESPONSE_6_GHZ_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_RX_CNTRL_2_DISABLE_RESPONSE_6_GHZ_POS    19
#define MAC_HW0_MU0_RX_CNTRL_2_CLEAR_SBSNLEGS_BAR_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_RX_CNTRL_2_CLEAR_SBSNLEGS_BAR_POS    18
#define MAC_HW0_MU0_RX_CNTRL_2_CLEAR_SBSNLEGS_DATA_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_RX_CNTRL_2_CLEAR_SBSNLEGS_DATA_POS    17
#define MAC_HW0_MU0_RX_CNTRL_2_ENABLE_QUIET_INTERVAL_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_RX_CNTRL_2_ENABLE_QUIET_INTERVAL_POS    16
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_NON_TB_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_NON_TB_POS    9
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_BQRPTRIGGER_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_BQRPTRIGGER_POS    8
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_BSRPTRIGGER_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_BSRPTRIGGER_POS    7
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_BFRPTRIGGER_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_BFRPTRIGGER_POS    6
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_MU_RTS_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_MU_RTS_POS    5
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_MU_BAR_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_MU_BAR_POS    4
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_BASIC_TRIGGER_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_BASIC_TRIGGER_POS    3
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_NDP_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_NDP_POS    2
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_BRP_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_BRP_POS    1
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_NDPAVHT_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_NDPAVHT_POS    0

#define MAC_HW0_MU0_RX_CNTRL_2_PRIMARY_20_LOCATION_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_2_PRIMARY_80_LOCATION_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_2_DISABLE_RESPONSE_6_GHZ_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_2_CLEAR_SBSNLEGS_BAR_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_2_CLEAR_SBSNLEGS_DATA_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_2_ENABLE_QUIET_INTERVAL_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_NON_TB_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_BQRPTRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_BSRPTRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_BFRPTRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_MU_RTS_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_MU_BAR_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_BASIC_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_NDP_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_BRP_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_2_ACCEPT_NDPAVHT_RST    0x1

__INLINE void mac_hw0_mu0_rx_cntrl_2_pack(uint8_t primary20_location, uint8_t primary80_location, uint8_t disable_response_6ghz, uint8_t clear_sbsnlegs_bar, uint8_t clear_sbsnlegs_data, uint8_t enable_quiet_interval, uint8_t accept_non_tb, uint8_t accept_bqrptrigger, uint8_t accept_bsrptrigger, uint8_t accept_bfrptrigger, uint8_t accept_mu_rts, uint8_t accept_mu_bar, uint8_t accept_basic_trigger, uint8_t accept_ndp, uint8_t accept_brp, uint8_t accept_ndpavht)
{
	ASSERT_ERR((((uint32_t)primary20_location << 30) & ~((uint32_t)0xC0000000)) == 0);
	ASSERT_ERR((((uint32_t)primary80_location << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)disable_response_6ghz << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)clear_sbsnlegs_bar << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)clear_sbsnlegs_data << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)enable_quiet_interval << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)accept_non_tb << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)accept_bqrptrigger << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)accept_bsrptrigger << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)accept_bfrptrigger << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)accept_mu_rts << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)accept_mu_bar << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)accept_basic_trigger << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)accept_ndp << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)accept_brp << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)accept_ndpavht << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR,  ((uint32_t)primary20_location << 30) |((uint32_t)primary80_location << 29) |((uint32_t)disable_response_6ghz << 19) |((uint32_t)clear_sbsnlegs_bar << 18) |((uint32_t)clear_sbsnlegs_data << 17) |((uint32_t)enable_quiet_interval << 16) |((uint32_t)accept_non_tb << 9) |((uint32_t)accept_bqrptrigger << 8) |((uint32_t)accept_bsrptrigger << 7) |((uint32_t)accept_bfrptrigger << 6) |((uint32_t)accept_mu_rts << 5) |((uint32_t)accept_mu_bar << 4) |((uint32_t)accept_basic_trigger << 3) |((uint32_t)accept_ndp << 2) |((uint32_t)accept_brp << 1) |((uint32_t)accept_ndpavht << 0));
}

__INLINE void mac_hw0_mu0_rx_cntrl_2_unpack(uint8_t* primary20_location, uint8_t* primary80_location, uint8_t* disable_response_6ghz, uint8_t* clear_sbsnlegs_bar, uint8_t* clear_sbsnlegs_data, uint8_t* enable_quiet_interval, uint8_t* accept_non_tb, uint8_t* accept_bqrptrigger, uint8_t* accept_bsrptrigger, uint8_t* accept_bfrptrigger, uint8_t* accept_mu_rts, uint8_t* accept_mu_bar, uint8_t* accept_basic_trigger, uint8_t* accept_ndp, uint8_t* accept_brp, uint8_t* accept_ndpavht)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);

	*primary20_location = (localVal & ((uint32_t)0xC0000000)) >>  30;
	*primary80_location = (localVal & ((uint32_t)0x20000000)) >>  29;
	*disable_response_6ghz = (localVal & ((uint32_t)0x00080000)) >>  19;
	*clear_sbsnlegs_bar = (localVal & ((uint32_t)0x00040000)) >>  18;
	*clear_sbsnlegs_data = (localVal & ((uint32_t)0x00020000)) >>  17;
	*enable_quiet_interval = (localVal & ((uint32_t)0x00010000)) >>  16;
	*accept_non_tb = (localVal & ((uint32_t)0x00000200)) >>  9;
	*accept_bqrptrigger = (localVal & ((uint32_t)0x00000100)) >>  8;
	*accept_bsrptrigger = (localVal & ((uint32_t)0x00000080)) >>  7;
	*accept_bfrptrigger = (localVal & ((uint32_t)0x00000040)) >>  6;
	*accept_mu_rts = (localVal & ((uint32_t)0x00000020)) >>  5;
	*accept_mu_bar = (localVal & ((uint32_t)0x00000010)) >>  4;
	*accept_basic_trigger = (localVal & ((uint32_t)0x00000008)) >>  3;
	*accept_ndp = (localVal & ((uint32_t)0x00000004)) >>  2;
	*accept_brp = (localVal & ((uint32_t)0x00000002)) >>  1;
	*accept_ndpavht = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_cntrl_2_primary_20_location_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xC0000000)) >> 30);
}
__INLINE void mac_hw0_mu0_rx_cntrl_2_primary_20_location_setf(uint8_t primary20location)
{
	ASSERT_ERR((((uint32_t)primary20location << 30) & ~((uint32_t)0xC0000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR) & ~((uint32_t)0xC0000000)) | ((uint32_t)primary20location <<30));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_2_primary_80_location_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_rx_cntrl_2_primary_80_location_setf(uint8_t primary80location)
{
	ASSERT_ERR((((uint32_t)primary80location << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)primary80location <<29));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_2_disable_response_6_ghz_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_rx_cntrl_2_disable_response_6_ghz_setf(uint8_t disableresponse6ghz)
{
	ASSERT_ERR((((uint32_t)disableresponse6ghz << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)disableresponse6ghz <<19));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_2_clear_sbsnlegs_bar_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_rx_cntrl_2_clear_sbsnlegs_bar_setf(uint8_t clearsbsnlegsbar)
{
	ASSERT_ERR((((uint32_t)clearsbsnlegsbar << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)clearsbsnlegsbar <<18));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_2_clear_sbsnlegs_data_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_rx_cntrl_2_clear_sbsnlegs_data_setf(uint8_t clearsbsnlegsdata)
{
	ASSERT_ERR((((uint32_t)clearsbsnlegsdata << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)clearsbsnlegsdata <<17));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_2_enable_quiet_interval_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_cntrl_2_enable_quiet_interval_setf(uint8_t enablequietinterval)
{
	ASSERT_ERR((((uint32_t)enablequietinterval << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)enablequietinterval <<16));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_2_accept_non_tb_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_rx_cntrl_2_accept_non_tb_setf(uint8_t acceptnontb)
{
	ASSERT_ERR((((uint32_t)acceptnontb << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)acceptnontb <<9));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_2_accept_bqrptrigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_rx_cntrl_2_accept_bqrptrigger_setf(uint8_t acceptbqrptrigger)
{
	ASSERT_ERR((((uint32_t)acceptbqrptrigger << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)acceptbqrptrigger <<8));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_2_accept_bsrptrigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_rx_cntrl_2_accept_bsrptrigger_setf(uint8_t acceptbsrptrigger)
{
	ASSERT_ERR((((uint32_t)acceptbsrptrigger << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)acceptbsrptrigger <<7));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_2_accept_bfrptrigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_rx_cntrl_2_accept_bfrptrigger_setf(uint8_t acceptbfrptrigger)
{
	ASSERT_ERR((((uint32_t)acceptbfrptrigger << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)acceptbfrptrigger <<6));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_2_accept_mu_rts_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_rx_cntrl_2_accept_mu_rts_setf(uint8_t acceptmurts)
{
	ASSERT_ERR((((uint32_t)acceptmurts << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)acceptmurts <<5));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_2_accept_mu_bar_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_rx_cntrl_2_accept_mu_bar_setf(uint8_t acceptmubar)
{
	ASSERT_ERR((((uint32_t)acceptmubar << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)acceptmubar <<4));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_2_accept_basic_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_rx_cntrl_2_accept_basic_trigger_setf(uint8_t acceptbasictrigger)
{
	ASSERT_ERR((((uint32_t)acceptbasictrigger << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)acceptbasictrigger <<3));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_2_accept_ndp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_rx_cntrl_2_accept_ndp_setf(uint8_t acceptndp)
{
	ASSERT_ERR((((uint32_t)acceptndp << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)acceptndp <<2));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_2_accept_brp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_rx_cntrl_2_accept_brp_setf(uint8_t acceptbrp)
{
	ASSERT_ERR((((uint32_t)acceptbrp << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)acceptbrp <<1));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_2_accept_ndpavht_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_cntrl_2_accept_ndpavht_setf(uint8_t acceptndpavht)
{
	ASSERT_ERR((((uint32_t)acceptndpavht << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_2_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)acceptndpavht <<0));
}

/**
 * @brief RX_CNTRL_3 register definition
 *  Controls the HW receive operation. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23    RX_DISABLE_WAIT_PIPE_CLEAN 0              
 *    22    RX_INTERRUPT_ENABLE       1              
 *    21    ALWAYS_GEN_EOP_INT        0              
 *    20    GEN_EOP_INT_FOR_PPDU_W_BFRP 0              
 *    19    GEN_EOP_INT_FOR_PPDU_W_BQRP 0              
 *    18    GEN_EOP_INT_FOR_PPDU_W_BSRP 0              
 *    17    GEN_EOP_INT_FOR_PPDU_W_MU_BAR 0              
 *    16    GEN_EOP_INT_FOR_PPDU_W_BASIC_TRIGGER 0              
 *    11    GEN_INT_FOR_NDPA          0              
 *    10    GEN_INT_FOR_NEED_BFR_VHT  0              
 *    09    GEN_INT_FOR_RTS_NEED_CTS  0              
 *    08    GEN_INT_FOR_NEED_CF_END   0              
 *    07    GEN_INT_FOR_NEED_BA       0              
 *    06    GEN_INT_FOR_NEED_ACK      0              
 *    05    GEN_INT_FOR_MU_RTS        0              
 *    04    GEN_INT_FOR_BFRP_DETECT   0              
 *    03    GEN_INT_FOR_BQRP_DETECT   0              
 *    02    GEN_INT_FOR_BSRP_DETECT   0              
 *    01    GEN_INT_FOR_MU_BAR_DETECT 0              
 *    00    GEN_INT_FOR_BASIC_TRIGGER_DETECT 0              
 * </pre>
 */
#define MAC_HW0_MU0_RX_CNTRL_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000070)
#define MAC_HW0_MU0_RX_CNTRL_3_OFFSET      0x00000070
#define MAC_HW0_MU0_RX_CNTRL_3_INDEX       0x0000001C
#define MAC_HW0_MU0_RX_CNTRL_3_RESET       0x00400000

__INLINE uint32_t  mac_hw0_mu0_rx_cntrl_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
}

__INLINE void mac_hw0_mu0_rx_cntrl_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_CNTRL_3_RX_DISABLE_WAIT_PIPE_CLEAN_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_RX_CNTRL_3_RX_DISABLE_WAIT_PIPE_CLEAN_POS    23
#define MAC_HW0_MU0_RX_CNTRL_3_RX_INTERRUPT_ENABLE_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_RX_CNTRL_3_RX_INTERRUPT_ENABLE_POS    22
#define MAC_HW0_MU0_RX_CNTRL_3_ALWAYS_GEN_EOP_INT_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_RX_CNTRL_3_ALWAYS_GEN_EOP_INT_POS    21
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_EOP_INT_FOR_PPDU_W_BFRP_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_EOP_INT_FOR_PPDU_W_BFRP_POS    20
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_EOP_INT_FOR_PPDU_W_BQRP_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_EOP_INT_FOR_PPDU_W_BQRP_POS    19
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_EOP_INT_FOR_PPDU_W_BSRP_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_EOP_INT_FOR_PPDU_W_BSRP_POS    18
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_EOP_INT_FOR_PPDU_W_MU_BAR_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_EOP_INT_FOR_PPDU_W_MU_BAR_POS    17
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_EOP_INT_FOR_PPDU_W_BASIC_TRIGGER_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_EOP_INT_FOR_PPDU_W_BASIC_TRIGGER_POS    16
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_NDPA_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_NDPA_POS    11
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_NEED_BFR_VHT_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_NEED_BFR_VHT_POS    10
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_RTS_NEED_CTS_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_RTS_NEED_CTS_POS    9
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_NEED_CF_END_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_NEED_CF_END_POS    8
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_NEED_BA_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_NEED_BA_POS    7
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_NEED_ACK_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_NEED_ACK_POS    6
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_MU_RTS_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_MU_RTS_POS    5
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_BFRP_DETECT_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_BFRP_DETECT_POS    4
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_BQRP_DETECT_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_BQRP_DETECT_POS    3
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_BSRP_DETECT_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_BSRP_DETECT_POS    2
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_MU_BAR_DETECT_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_MU_BAR_DETECT_POS    1
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_BASIC_TRIGGER_DETECT_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_BASIC_TRIGGER_DETECT_POS    0

#define MAC_HW0_MU0_RX_CNTRL_3_RX_DISABLE_WAIT_PIPE_CLEAN_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_RX_INTERRUPT_ENABLE_RST    0x1
#define MAC_HW0_MU0_RX_CNTRL_3_ALWAYS_GEN_EOP_INT_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_EOP_INT_FOR_PPDU_W_BFRP_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_EOP_INT_FOR_PPDU_W_BQRP_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_EOP_INT_FOR_PPDU_W_BSRP_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_EOP_INT_FOR_PPDU_W_MU_BAR_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_EOP_INT_FOR_PPDU_W_BASIC_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_NDPA_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_NEED_BFR_VHT_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_RTS_NEED_CTS_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_NEED_CF_END_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_NEED_BA_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_NEED_ACK_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_MU_RTS_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_BFRP_DETECT_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_BQRP_DETECT_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_BSRP_DETECT_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_MU_BAR_DETECT_RST    0x0
#define MAC_HW0_MU0_RX_CNTRL_3_GEN_INT_FOR_BASIC_TRIGGER_DETECT_RST    0x0

__INLINE void mac_hw0_mu0_rx_cntrl_3_pack(uint8_t rx_disable_wait_pipe_clean, uint8_t rx_interrupt_enable, uint8_t always_gen_eop_int, uint8_t gen_eop_int_for_ppdu_w_bfrp, uint8_t gen_eop_int_for_ppdu_w_bqrp, uint8_t gen_eop_int_for_ppdu_w_bsrp, uint8_t gen_eop_int_for_ppdu_w_mu_bar, uint8_t gen_eop_int_for_ppdu_w_basic_trigger, uint8_t gen_int_for_ndpa, uint8_t gen_int_for_need_bfr_vht, uint8_t gen_int_for_rts_need_cts, uint8_t gen_int_for_need_cf_end, uint8_t gen_int_for_need_ba, uint8_t gen_int_for_need_ack, uint8_t gen_int_for_mu_rts, uint8_t gen_int_for_bfrp_detect, uint8_t gen_int_for_bqrp_detect, uint8_t gen_int_for_bsrp_detect, uint8_t gen_int_for_mu_bar_detect, uint8_t gen_int_for_basic_trigger_detect)
{
	ASSERT_ERR((((uint32_t)rx_disable_wait_pipe_clean << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)rx_interrupt_enable << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)always_gen_eop_int << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)gen_eop_int_for_ppdu_w_bfrp << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)gen_eop_int_for_ppdu_w_bqrp << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)gen_eop_int_for_ppdu_w_bsrp << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)gen_eop_int_for_ppdu_w_mu_bar << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)gen_eop_int_for_ppdu_w_basic_trigger << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)gen_int_for_ndpa << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)gen_int_for_need_bfr_vht << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)gen_int_for_rts_need_cts << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)gen_int_for_need_cf_end << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)gen_int_for_need_ba << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)gen_int_for_need_ack << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)gen_int_for_mu_rts << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)gen_int_for_bfrp_detect << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)gen_int_for_bqrp_detect << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)gen_int_for_bsrp_detect << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)gen_int_for_mu_bar_detect << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)gen_int_for_basic_trigger_detect << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR,  ((uint32_t)rx_disable_wait_pipe_clean << 23) |((uint32_t)rx_interrupt_enable << 22) |((uint32_t)always_gen_eop_int << 21) |((uint32_t)gen_eop_int_for_ppdu_w_bfrp << 20) |((uint32_t)gen_eop_int_for_ppdu_w_bqrp << 19) |((uint32_t)gen_eop_int_for_ppdu_w_bsrp << 18) |((uint32_t)gen_eop_int_for_ppdu_w_mu_bar << 17) |((uint32_t)gen_eop_int_for_ppdu_w_basic_trigger << 16) |((uint32_t)gen_int_for_ndpa << 11) |((uint32_t)gen_int_for_need_bfr_vht << 10) |((uint32_t)gen_int_for_rts_need_cts << 9) |((uint32_t)gen_int_for_need_cf_end << 8) |((uint32_t)gen_int_for_need_ba << 7) |((uint32_t)gen_int_for_need_ack << 6) |((uint32_t)gen_int_for_mu_rts << 5) |((uint32_t)gen_int_for_bfrp_detect << 4) |((uint32_t)gen_int_for_bqrp_detect << 3) |((uint32_t)gen_int_for_bsrp_detect << 2) |((uint32_t)gen_int_for_mu_bar_detect << 1) |((uint32_t)gen_int_for_basic_trigger_detect << 0));
}

__INLINE void mac_hw0_mu0_rx_cntrl_3_unpack(uint8_t* rx_disable_wait_pipe_clean, uint8_t* rx_interrupt_enable, uint8_t* always_gen_eop_int, uint8_t* gen_eop_int_for_ppdu_w_bfrp, uint8_t* gen_eop_int_for_ppdu_w_bqrp, uint8_t* gen_eop_int_for_ppdu_w_bsrp, uint8_t* gen_eop_int_for_ppdu_w_mu_bar, uint8_t* gen_eop_int_for_ppdu_w_basic_trigger, uint8_t* gen_int_for_ndpa, uint8_t* gen_int_for_need_bfr_vht, uint8_t* gen_int_for_rts_need_cts, uint8_t* gen_int_for_need_cf_end, uint8_t* gen_int_for_need_ba, uint8_t* gen_int_for_need_ack, uint8_t* gen_int_for_mu_rts, uint8_t* gen_int_for_bfrp_detect, uint8_t* gen_int_for_bqrp_detect, uint8_t* gen_int_for_bsrp_detect, uint8_t* gen_int_for_mu_bar_detect, uint8_t* gen_int_for_basic_trigger_detect)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);

	*rx_disable_wait_pipe_clean = (localVal & ((uint32_t)0x00800000)) >>  23;
	*rx_interrupt_enable = (localVal & ((uint32_t)0x00400000)) >>  22;
	*always_gen_eop_int = (localVal & ((uint32_t)0x00200000)) >>  21;
	*gen_eop_int_for_ppdu_w_bfrp = (localVal & ((uint32_t)0x00100000)) >>  20;
	*gen_eop_int_for_ppdu_w_bqrp = (localVal & ((uint32_t)0x00080000)) >>  19;
	*gen_eop_int_for_ppdu_w_bsrp = (localVal & ((uint32_t)0x00040000)) >>  18;
	*gen_eop_int_for_ppdu_w_mu_bar = (localVal & ((uint32_t)0x00020000)) >>  17;
	*gen_eop_int_for_ppdu_w_basic_trigger = (localVal & ((uint32_t)0x00010000)) >>  16;
	*gen_int_for_ndpa = (localVal & ((uint32_t)0x00000800)) >>  11;
	*gen_int_for_need_bfr_vht = (localVal & ((uint32_t)0x00000400)) >>  10;
	*gen_int_for_rts_need_cts = (localVal & ((uint32_t)0x00000200)) >>  9;
	*gen_int_for_need_cf_end = (localVal & ((uint32_t)0x00000100)) >>  8;
	*gen_int_for_need_ba = (localVal & ((uint32_t)0x00000080)) >>  7;
	*gen_int_for_need_ack = (localVal & ((uint32_t)0x00000040)) >>  6;
	*gen_int_for_mu_rts = (localVal & ((uint32_t)0x00000020)) >>  5;
	*gen_int_for_bfrp_detect = (localVal & ((uint32_t)0x00000010)) >>  4;
	*gen_int_for_bqrp_detect = (localVal & ((uint32_t)0x00000008)) >>  3;
	*gen_int_for_bsrp_detect = (localVal & ((uint32_t)0x00000004)) >>  2;
	*gen_int_for_mu_bar_detect = (localVal & ((uint32_t)0x00000002)) >>  1;
	*gen_int_for_basic_trigger_detect = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_rx_disable_wait_pipe_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_rx_disable_wait_pipe_clean_setf(uint8_t rxdisablewaitpipeclean)
{
	ASSERT_ERR((((uint32_t)rxdisablewaitpipeclean << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)rxdisablewaitpipeclean <<23));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_rx_interrupt_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_rx_interrupt_enable_setf(uint8_t rxinterruptenable)
{
	ASSERT_ERR((((uint32_t)rxinterruptenable << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)rxinterruptenable <<22));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_always_gen_eop_int_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_always_gen_eop_int_setf(uint8_t alwaysgeneopint)
{
	ASSERT_ERR((((uint32_t)alwaysgeneopint << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)alwaysgeneopint <<21));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_eop_int_for_ppdu_w_bfrp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_eop_int_for_ppdu_w_bfrp_setf(uint8_t geneopintforppduwbfrp)
{
	ASSERT_ERR((((uint32_t)geneopintforppduwbfrp << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)geneopintforppduwbfrp <<20));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_eop_int_for_ppdu_w_bqrp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_eop_int_for_ppdu_w_bqrp_setf(uint8_t geneopintforppduwbqrp)
{
	ASSERT_ERR((((uint32_t)geneopintforppduwbqrp << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)geneopintforppduwbqrp <<19));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_eop_int_for_ppdu_w_bsrp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_eop_int_for_ppdu_w_bsrp_setf(uint8_t geneopintforppduwbsrp)
{
	ASSERT_ERR((((uint32_t)geneopintforppduwbsrp << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)geneopintforppduwbsrp <<18));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_eop_int_for_ppdu_w_mu_bar_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_eop_int_for_ppdu_w_mu_bar_setf(uint8_t geneopintforppduwmubar)
{
	ASSERT_ERR((((uint32_t)geneopintforppduwmubar << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)geneopintforppduwmubar <<17));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_eop_int_for_ppdu_w_basic_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_eop_int_for_ppdu_w_basic_trigger_setf(uint8_t geneopintforppduwbasictrigger)
{
	ASSERT_ERR((((uint32_t)geneopintforppduwbasictrigger << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)geneopintforppduwbasictrigger <<16));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_int_for_ndpa_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_int_for_ndpa_setf(uint8_t genintforndpa)
{
	ASSERT_ERR((((uint32_t)genintforndpa << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)genintforndpa <<11));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_int_for_need_bfr_vht_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_int_for_need_bfr_vht_setf(uint8_t genintforneedbfrvht)
{
	ASSERT_ERR((((uint32_t)genintforneedbfrvht << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)genintforneedbfrvht <<10));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_int_for_rts_need_cts_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_int_for_rts_need_cts_setf(uint8_t genintforrtsneedcts)
{
	ASSERT_ERR((((uint32_t)genintforrtsneedcts << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)genintforrtsneedcts <<9));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_int_for_need_cf_end_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_int_for_need_cf_end_setf(uint8_t genintforneedcfend)
{
	ASSERT_ERR((((uint32_t)genintforneedcfend << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)genintforneedcfend <<8));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_int_for_need_ba_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_int_for_need_ba_setf(uint8_t genintforneedba)
{
	ASSERT_ERR((((uint32_t)genintforneedba << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)genintforneedba <<7));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_int_for_need_ack_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_int_for_need_ack_setf(uint8_t genintforneedack)
{
	ASSERT_ERR((((uint32_t)genintforneedack << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)genintforneedack <<6));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_int_for_mu_rts_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_int_for_mu_rts_setf(uint8_t genintformurts)
{
	ASSERT_ERR((((uint32_t)genintformurts << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)genintformurts <<5));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_int_for_bfrp_detect_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_int_for_bfrp_detect_setf(uint8_t genintforbfrpdetect)
{
	ASSERT_ERR((((uint32_t)genintforbfrpdetect << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)genintforbfrpdetect <<4));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_int_for_bqrp_detect_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_int_for_bqrp_detect_setf(uint8_t genintforbqrpdetect)
{
	ASSERT_ERR((((uint32_t)genintforbqrpdetect << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)genintforbqrpdetect <<3));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_int_for_bsrp_detect_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_int_for_bsrp_detect_setf(uint8_t genintforbsrpdetect)
{
	ASSERT_ERR((((uint32_t)genintforbsrpdetect << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)genintforbsrpdetect <<2));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_int_for_mu_bar_detect_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_int_for_mu_bar_detect_setf(uint8_t genintformubardetect)
{
	ASSERT_ERR((((uint32_t)genintformubardetect << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)genintformubardetect <<1));
}
__INLINE uint8_t mac_hw0_mu0_rx_cntrl_3_gen_int_for_basic_trigger_detect_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_cntrl_3_gen_int_for_basic_trigger_detect_setf(uint8_t genintforbasictriggerdetect)
{
	ASSERT_ERR((((uint32_t)genintforbasictriggerdetect << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CNTRL_3_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)genintforbasictriggerdetect <<0));
}

/**
 * @brief BCN_CNTRL_3 register definition
 *  Beacon control 3 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    IGNORE_DTIM_CNT           0              
 *    09:00 BCN_INTRVAL_LSB           0x0
 * </pre>
 */
#define MAC_HW0_MU0_BCN_CNTRL_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000074)
#define MAC_HW0_MU0_BCN_CNTRL_3_OFFSET      0x00000074
#define MAC_HW0_MU0_BCN_CNTRL_3_INDEX       0x0000001D
#define MAC_HW0_MU0_BCN_CNTRL_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_bcn_cntrl_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_3_ADDR);
}

__INLINE void mac_hw0_mu0_bcn_cntrl_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BCN_CNTRL_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BCN_CNTRL_3_IGNORE_DTIM_CNT_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_BCN_CNTRL_3_IGNORE_DTIM_CNT_POS    31
#define MAC_HW0_MU0_BCN_CNTRL_3_BCN_INTRVAL_LSB_MASK    ((uint32_t)0x000003FF)
#define MAC_HW0_MU0_BCN_CNTRL_3_BCN_INTRVAL_LSB_LSB    0
#define MAC_HW0_MU0_BCN_CNTRL_3_BCN_INTRVAL_LSB_WIDTH    ((uint32_t)0x0000000A)

#define MAC_HW0_MU0_BCN_CNTRL_3_IGNORE_DTIM_CNT_RST    0x0
#define MAC_HW0_MU0_BCN_CNTRL_3_BCN_INTRVAL_LSB_RST    0x0

__INLINE void mac_hw0_mu0_bcn_cntrl_3_pack(uint8_t ignore_dtim_cnt, uint16_t bcn_intrval_lsb)
{
	ASSERT_ERR((((uint32_t)ignore_dtim_cnt << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)bcn_intrval_lsb << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BCN_CNTRL_3_ADDR,  ((uint32_t)ignore_dtim_cnt << 31) |((uint32_t)bcn_intrval_lsb << 0));
}

__INLINE void mac_hw0_mu0_bcn_cntrl_3_unpack(uint8_t* ignore_dtim_cnt, uint16_t* bcn_intrval_lsb)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_3_ADDR);

	*ignore_dtim_cnt = (localVal & ((uint32_t)0x80000000)) >>  31;
	*bcn_intrval_lsb = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_bcn_cntrl_3_ignore_dtim_cnt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_bcn_cntrl_3_ignore_dtim_cnt_setf(uint8_t ignoredtimcnt)
{
	ASSERT_ERR((((uint32_t)ignoredtimcnt << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BCN_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_3_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)ignoredtimcnt <<31));
}
__INLINE uint16_t mac_hw0_mu0_bcn_cntrl_3_bcn_intrval_lsb_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_3_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void mac_hw0_mu0_bcn_cntrl_3_bcn_intrval_lsb_setf(uint16_t bcnintrvallsb)
{
	ASSERT_ERR((((uint32_t)bcnintrvallsb << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BCN_CNTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_BCN_CNTRL_3_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)bcnintrvallsb <<0));
}

/**
 * @brief TX_POWER_LEVEL_DELTA_1 register definition
 *  Indicates adjustments in power per chain register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 TX_POWER_DELTA_3          0x0
 *    23:16 TX_POWER_DELTA_2          0x0
 *    15:08 TX_POWER_DELTA_1          0x0
 *    07:00 TX_POWER_DELTA_0          0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000080)
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_OFFSET      0x00000080
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_INDEX       0x00000020
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_power_level_delta_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR);
}

__INLINE void mac_hw0_mu0_tx_power_level_delta_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_TX_POWER_DELTA_3_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_TX_POWER_DELTA_3_LSB    24
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_TX_POWER_DELTA_3_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_TX_POWER_DELTA_2_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_TX_POWER_DELTA_2_LSB    16
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_TX_POWER_DELTA_2_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_TX_POWER_DELTA_1_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_TX_POWER_DELTA_1_LSB    8
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_TX_POWER_DELTA_1_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_TX_POWER_DELTA_0_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_TX_POWER_DELTA_0_LSB    0
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_TX_POWER_DELTA_0_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_TX_POWER_DELTA_3_RST    0x0
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_TX_POWER_DELTA_2_RST    0x0
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_TX_POWER_DELTA_1_RST    0x0
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_TX_POWER_DELTA_0_RST    0x0

__INLINE void mac_hw0_mu0_tx_power_level_delta_1_pack(uint8_t tx_power_delta_3, uint8_t tx_power_delta_2, uint8_t tx_power_delta_1, uint8_t tx_power_delta_0)
{
	ASSERT_ERR((((uint32_t)tx_power_delta_3 << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_power_delta_2 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)tx_power_delta_1 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)tx_power_delta_0 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR,  ((uint32_t)tx_power_delta_3 << 24) |((uint32_t)tx_power_delta_2 << 16) |((uint32_t)tx_power_delta_1 << 8) |((uint32_t)tx_power_delta_0 << 0));
}

__INLINE void mac_hw0_mu0_tx_power_level_delta_1_unpack(uint8_t* tx_power_delta_3, uint8_t* tx_power_delta_2, uint8_t* tx_power_delta_1, uint8_t* tx_power_delta_0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR);

	*tx_power_delta_3 = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*tx_power_delta_2 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*tx_power_delta_1 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*tx_power_delta_0 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_tx_power_level_delta_1_tx_power_delta_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_tx_power_level_delta_1_tx_power_delta_3_setf(uint8_t txpowerdelta3)
{
	ASSERT_ERR((((uint32_t)txpowerdelta3 << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)txpowerdelta3 <<24));
}
__INLINE uint8_t mac_hw0_mu0_tx_power_level_delta_1_tx_power_delta_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_tx_power_level_delta_1_tx_power_delta_2_setf(uint8_t txpowerdelta2)
{
	ASSERT_ERR((((uint32_t)txpowerdelta2 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)txpowerdelta2 <<16));
}
__INLINE uint8_t mac_hw0_mu0_tx_power_level_delta_1_tx_power_delta_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_power_level_delta_1_tx_power_delta_1_setf(uint8_t txpowerdelta1)
{
	ASSERT_ERR((((uint32_t)txpowerdelta1 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)txpowerdelta1 <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_power_level_delta_1_tx_power_delta_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_tx_power_level_delta_1_tx_power_delta_0_setf(uint8_t txpowerdelta0)
{
	ASSERT_ERR((((uint32_t)txpowerdelta0 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_1_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)txpowerdelta0 <<0));
}

/**
 * @brief TX_POWER_LEVEL_DELTA_2 register definition
 *  Indicates adjustments in power per antenna  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 TX_POWER_DELTA_7          0x0
 *    23:16 TX_POWER_DELTA_6          0x0
 *    15:08 TX_POWER_DELTA_5          0x0
 *    07:00 TX_POWER_DELTA_4          0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000084)
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_OFFSET      0x00000084
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_INDEX       0x00000021
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_power_level_delta_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR);
}

__INLINE void mac_hw0_mu0_tx_power_level_delta_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_TX_POWER_DELTA_7_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_TX_POWER_DELTA_7_LSB    24
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_TX_POWER_DELTA_7_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_TX_POWER_DELTA_6_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_TX_POWER_DELTA_6_LSB    16
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_TX_POWER_DELTA_6_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_TX_POWER_DELTA_5_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_TX_POWER_DELTA_5_LSB    8
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_TX_POWER_DELTA_5_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_TX_POWER_DELTA_4_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_TX_POWER_DELTA_4_LSB    0
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_TX_POWER_DELTA_4_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_TX_POWER_DELTA_7_RST    0x0
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_TX_POWER_DELTA_6_RST    0x0
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_TX_POWER_DELTA_5_RST    0x0
#define MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_TX_POWER_DELTA_4_RST    0x0

__INLINE void mac_hw0_mu0_tx_power_level_delta_2_pack(uint8_t tx_power_delta_7, uint8_t tx_power_delta_6, uint8_t tx_power_delta_5, uint8_t tx_power_delta_4)
{
	ASSERT_ERR((((uint32_t)tx_power_delta_7 << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_power_delta_6 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)tx_power_delta_5 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)tx_power_delta_4 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR,  ((uint32_t)tx_power_delta_7 << 24) |((uint32_t)tx_power_delta_6 << 16) |((uint32_t)tx_power_delta_5 << 8) |((uint32_t)tx_power_delta_4 << 0));
}

__INLINE void mac_hw0_mu0_tx_power_level_delta_2_unpack(uint8_t* tx_power_delta_7, uint8_t* tx_power_delta_6, uint8_t* tx_power_delta_5, uint8_t* tx_power_delta_4)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR);

	*tx_power_delta_7 = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*tx_power_delta_6 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*tx_power_delta_5 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*tx_power_delta_4 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_tx_power_level_delta_2_tx_power_delta_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_tx_power_level_delta_2_tx_power_delta_7_setf(uint8_t txpowerdelta7)
{
	ASSERT_ERR((((uint32_t)txpowerdelta7 << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)txpowerdelta7 <<24));
}
__INLINE uint8_t mac_hw0_mu0_tx_power_level_delta_2_tx_power_delta_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_tx_power_level_delta_2_tx_power_delta_6_setf(uint8_t txpowerdelta6)
{
	ASSERT_ERR((((uint32_t)txpowerdelta6 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)txpowerdelta6 <<16));
}
__INLINE uint8_t mac_hw0_mu0_tx_power_level_delta_2_tx_power_delta_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_power_level_delta_2_tx_power_delta_5_setf(uint8_t txpowerdelta5)
{
	ASSERT_ERR((((uint32_t)txpowerdelta5 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)txpowerdelta5 <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_power_level_delta_2_tx_power_delta_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_tx_power_level_delta_2_tx_power_delta_4_setf(uint8_t txpowerdelta4)
{
	ASSERT_ERR((((uint32_t)txpowerdelta4 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_LEVEL_DELTA_2_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)txpowerdelta4 <<0));
}

/**
 * @brief ENCR_KEY_ECBA register definition
 *  This register contains the KSR index and KSR data  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 KSR_INDEX                 0x0
 *    15:08 KSR_GEN                   0x0
 *    07:00 ECBA                      0x0
 * </pre>
 */
#define MAC_HW0_MU0_ENCR_KEY_ECBA_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000088)
#define MAC_HW0_MU0_ENCR_KEY_ECBA_OFFSET      0x00000088
#define MAC_HW0_MU0_ENCR_KEY_ECBA_INDEX       0x00000022
#define MAC_HW0_MU0_ENCR_KEY_ECBA_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_encr_key_ecba_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_ECBA_ADDR);
}

__INLINE void mac_hw0_mu0_encr_key_ecba_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_ECBA_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ENCR_KEY_ECBA_KSR_INDEX_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_ENCR_KEY_ECBA_KSR_INDEX_LSB    24
#define MAC_HW0_MU0_ENCR_KEY_ECBA_KSR_INDEX_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_ENCR_KEY_ECBA_KSR_GEN_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_ENCR_KEY_ECBA_KSR_GEN_LSB    8
#define MAC_HW0_MU0_ENCR_KEY_ECBA_KSR_GEN_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_ENCR_KEY_ECBA_ECBA_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_ENCR_KEY_ECBA_ECBA_LSB    0
#define MAC_HW0_MU0_ENCR_KEY_ECBA_ECBA_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_ENCR_KEY_ECBA_KSR_INDEX_RST    0x0
#define MAC_HW0_MU0_ENCR_KEY_ECBA_KSR_GEN_RST    0x0
#define MAC_HW0_MU0_ENCR_KEY_ECBA_ECBA_RST    0x0

__INLINE void mac_hw0_mu0_encr_key_ecba_pack(uint8_t ksr_index, uint8_t ksr_gen, uint8_t ecba)
{
	ASSERT_ERR((((uint32_t)ksr_index << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)ksr_gen << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)ecba << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_ECBA_ADDR,  ((uint32_t)ksr_index << 24) |((uint32_t)ksr_gen << 8) |((uint32_t)ecba << 0));
}

__INLINE void mac_hw0_mu0_encr_key_ecba_unpack(uint8_t* ksr_index, uint8_t* ksr_gen, uint8_t* ecba)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_ECBA_ADDR);

	*ksr_index = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*ksr_gen = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*ecba = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_encr_key_ecba_ksr_index_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_ECBA_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_encr_key_ecba_ksr_index_setf(uint8_t ksrindex)
{
	ASSERT_ERR((((uint32_t)ksrindex << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_ECBA_ADDR, (REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_ECBA_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)ksrindex <<24));
}
__INLINE uint8_t mac_hw0_mu0_encr_key_ecba_ksr_gen_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_ECBA_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_encr_key_ecba_ksr_gen_setf(uint8_t ksrgen)
{
	ASSERT_ERR((((uint32_t)ksrgen << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_ECBA_ADDR, (REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_ECBA_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)ksrgen <<8));
}
__INLINE uint8_t mac_hw0_mu0_encr_key_ecba_ecba_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_ECBA_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_encr_key_ecba_ecba_setf(uint8_t ecba)
{
	ASSERT_ERR((((uint32_t)ecba << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_ECBA_ADDR, (REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_ECBA_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)ecba <<0));
}

/**
 * @brief ENCR_KEY_ECBA_MASK register definition
 *  This register is used as a specific bit write en register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    KSR_AID_OR_GEN_ECBA_WR    0              
 *    30    KSR_AID_SEL               0              
 *    23:00 KSR_GEN_ECBA_BIT_EN       0x0
 * </pre>
 */
#define MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000008C)
#define MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_OFFSET      0x0000008C
#define MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_INDEX       0x00000023
#define MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_encr_key_ecba_mask_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_ADDR);
}

__INLINE void mac_hw0_mu0_encr_key_ecba_mask_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_KSR_AID_OR_GEN_ECBA_WR_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_KSR_AID_OR_GEN_ECBA_WR_POS    31
#define MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_KSR_AID_SEL_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_KSR_AID_SEL_POS    30
#define MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_KSR_GEN_ECBA_BIT_EN_MASK    ((uint32_t)0x00FFFFFF)
#define MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_KSR_GEN_ECBA_BIT_EN_LSB    0
#define MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_KSR_GEN_ECBA_BIT_EN_WIDTH    ((uint32_t)0x00000018)

#define MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_KSR_AID_OR_GEN_ECBA_WR_RST    0x0
#define MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_KSR_AID_SEL_RST    0x0
#define MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_KSR_GEN_ECBA_BIT_EN_RST    0x0

__INLINE void mac_hw0_mu0_encr_key_ecba_mask_pack(uint8_t ksr_aid_or_gen_ecba_wr, uint8_t ksr_aid_sel, uint32_t ksr_gen_ecba_bit_en)
{
	ASSERT_ERR((((uint32_t)ksr_aid_or_gen_ecba_wr << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)ksr_aid_sel << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)ksr_gen_ecba_bit_en << 0) & ~((uint32_t)0x00FFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_ADDR,  ((uint32_t)ksr_aid_or_gen_ecba_wr << 31) |((uint32_t)ksr_aid_sel << 30) |((uint32_t)ksr_gen_ecba_bit_en << 0));
}

__INLINE void mac_hw0_mu0_encr_key_ecba_mask_unpack(uint8_t* ksr_aid_or_gen_ecba_wr, uint8_t* ksr_aid_sel, uint32_t* ksr_gen_ecba_bit_en)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_ADDR);

	*ksr_aid_or_gen_ecba_wr = (localVal & ((uint32_t)0x80000000)) >>  31;
	*ksr_aid_sel = (localVal & ((uint32_t)0x40000000)) >>  30;
	*ksr_gen_ecba_bit_en = (localVal & ((uint32_t)0x00FFFFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_encr_key_ecba_mask_ksr_aid_or_gen_ecba_wr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_encr_key_ecba_mask_ksr_aid_or_gen_ecba_wr_setf(uint8_t ksraidorgenecbawr)
{
	ASSERT_ERR((((uint32_t)ksraidorgenecbawr << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_ADDR, (REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)ksraidorgenecbawr <<31));
}
__INLINE uint8_t mac_hw0_mu0_encr_key_ecba_mask_ksr_aid_sel_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_encr_key_ecba_mask_ksr_aid_sel_setf(uint8_t ksraidsel)
{
	ASSERT_ERR((((uint32_t)ksraidsel << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_ADDR, (REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)ksraidsel <<30));
}
__INLINE uint32_t mac_hw0_mu0_encr_key_ecba_mask_ksr_gen_ecba_bit_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0x00FFFFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_encr_key_ecba_mask_ksr_gen_ecba_bit_en_setf(uint32_t ksrgenecbabiten)
{
	ASSERT_ERR((((uint32_t)ksrgenecbabiten << 0) & ~((uint32_t)0x00FFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_ADDR, (REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_ECBA_MASK_ADDR) & ~((uint32_t)0x00FFFFFF)) | ((uint32_t)ksrgenecbabiten <<0));
}

/**
 * @brief DTIM_CFP_1 register definition
 *  Contains the DTIM and the CFP Count. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    DTIM_UPDATED_BY_SW        0              
 *    15:08 CFP_PERIOD                0x0
 *    07:00 DTIM_PERIOD               0x0
 * </pre>
 */
#define MAC_HW0_MU0_DTIM_CFP_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000090)
#define MAC_HW0_MU0_DTIM_CFP_1_OFFSET      0x00000090
#define MAC_HW0_MU0_DTIM_CFP_1_INDEX       0x00000024
#define MAC_HW0_MU0_DTIM_CFP_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_dtim_cfp_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DTIM_CFP_1_ADDR);
}

__INLINE void mac_hw0_mu0_dtim_cfp_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DTIM_CFP_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DTIM_CFP_1_DTIM_UPDATED_BY_SW_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_DTIM_CFP_1_DTIM_UPDATED_BY_SW_POS    31
#define MAC_HW0_MU0_DTIM_CFP_1_CFP_PERIOD_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_DTIM_CFP_1_CFP_PERIOD_LSB    8
#define MAC_HW0_MU0_DTIM_CFP_1_CFP_PERIOD_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DTIM_CFP_1_DTIM_PERIOD_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_DTIM_CFP_1_DTIM_PERIOD_LSB    0
#define MAC_HW0_MU0_DTIM_CFP_1_DTIM_PERIOD_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_DTIM_CFP_1_DTIM_UPDATED_BY_SW_RST    0x0
#define MAC_HW0_MU0_DTIM_CFP_1_CFP_PERIOD_RST    0x0
#define MAC_HW0_MU0_DTIM_CFP_1_DTIM_PERIOD_RST    0x0

__INLINE void mac_hw0_mu0_dtim_cfp_1_pack(uint8_t dtim_updated_by_sw, uint8_t cfp_period, uint8_t dtim_period)
{
	ASSERT_ERR((((uint32_t)dtim_updated_by_sw << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)cfp_period << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)dtim_period << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DTIM_CFP_1_ADDR,  ((uint32_t)dtim_updated_by_sw << 31) |((uint32_t)cfp_period << 8) |((uint32_t)dtim_period << 0));
}

__INLINE void mac_hw0_mu0_dtim_cfp_1_unpack(uint8_t* dtim_updated_by_sw, uint8_t* cfp_period, uint8_t* dtim_period)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DTIM_CFP_1_ADDR);

	*dtim_updated_by_sw = (localVal & ((uint32_t)0x80000000)) >>  31;
	*cfp_period = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*dtim_period = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_dtim_cfp_1_dtim_updated_by_sw_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DTIM_CFP_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_dtim_cfp_1_dtim_updated_by_sw_setf(uint8_t dtimupdatedbysw)
{
	ASSERT_ERR((((uint32_t)dtimupdatedbysw << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DTIM_CFP_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_DTIM_CFP_1_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)dtimupdatedbysw <<31));
}
__INLINE uint8_t mac_hw0_mu0_dtim_cfp_1_cfp_period_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DTIM_CFP_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_dtim_cfp_1_cfp_period_setf(uint8_t cfpperiod)
{
	ASSERT_ERR((((uint32_t)cfpperiod << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DTIM_CFP_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_DTIM_CFP_1_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)cfpperiod <<8));
}
__INLINE uint8_t mac_hw0_mu0_dtim_cfp_1_dtim_period_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DTIM_CFP_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_dtim_cfp_1_dtim_period_setf(uint8_t dtimperiod)
{
	ASSERT_ERR((((uint32_t)dtimperiod << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DTIM_CFP_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_DTIM_CFP_1_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)dtimperiod <<0));
}

/**
 * @brief DTIM_CFP_2 register definition
 *  Contains the DTIM and the CFP Count. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 CFP_MAX_DURATION          0x0
 * </pre>
 */
#define MAC_HW0_MU0_DTIM_CFP_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000094)
#define MAC_HW0_MU0_DTIM_CFP_2_OFFSET      0x00000094
#define MAC_HW0_MU0_DTIM_CFP_2_INDEX       0x00000025
#define MAC_HW0_MU0_DTIM_CFP_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_dtim_cfp_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DTIM_CFP_2_ADDR);
}

__INLINE void mac_hw0_mu0_dtim_cfp_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DTIM_CFP_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DTIM_CFP_2_CFP_MAX_DURATION_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_DTIM_CFP_2_CFP_MAX_DURATION_LSB    0
#define MAC_HW0_MU0_DTIM_CFP_2_CFP_MAX_DURATION_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_DTIM_CFP_2_CFP_MAX_DURATION_RST    0x0

__INLINE uint16_t mac_hw0_mu0_dtim_cfp_2_cfp_max_duration_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DTIM_CFP_2_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_dtim_cfp_2_cfp_max_duration_setf(uint16_t cfpmaxduration)
{
	ASSERT_ERR((((uint32_t)cfpmaxduration << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DTIM_CFP_2_ADDR, (uint32_t)cfpmaxduration << 0);
}

/**
 * @brief RETRY_LIMITS register definition
 *  Contains the value of the short and long retry limit. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 DOT_11_LONG_RETRY_LIMIT   0x4
 *    07:00 DOT_11_SHORT_RETRY_LIMIT  0x7
 * </pre>
 */
#define MAC_HW0_MU0_RETRY_LIMITS_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000098)
#define MAC_HW0_MU0_RETRY_LIMITS_OFFSET      0x00000098
#define MAC_HW0_MU0_RETRY_LIMITS_INDEX       0x00000026
#define MAC_HW0_MU0_RETRY_LIMITS_RESET       0x00000407

__INLINE uint32_t  mac_hw0_mu0_retry_limits_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RETRY_LIMITS_ADDR);
}

__INLINE void mac_hw0_mu0_retry_limits_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RETRY_LIMITS_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RETRY_LIMITS_DOT_11_LONG_RETRY_LIMIT_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_RETRY_LIMITS_DOT_11_LONG_RETRY_LIMIT_LSB    8
#define MAC_HW0_MU0_RETRY_LIMITS_DOT_11_LONG_RETRY_LIMIT_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RETRY_LIMITS_DOT_11_SHORT_RETRY_LIMIT_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_RETRY_LIMITS_DOT_11_SHORT_RETRY_LIMIT_LSB    0
#define MAC_HW0_MU0_RETRY_LIMITS_DOT_11_SHORT_RETRY_LIMIT_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_RETRY_LIMITS_DOT_11_LONG_RETRY_LIMIT_RST    0x4
#define MAC_HW0_MU0_RETRY_LIMITS_DOT_11_SHORT_RETRY_LIMIT_RST    0x7

__INLINE void mac_hw0_mu0_retry_limits_pack(uint8_t dot_11_long_retry_limit, uint8_t dot_11_short_retry_limit)
{
	ASSERT_ERR((((uint32_t)dot_11_long_retry_limit << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)dot_11_short_retry_limit << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RETRY_LIMITS_ADDR,  ((uint32_t)dot_11_long_retry_limit << 8) |((uint32_t)dot_11_short_retry_limit << 0));
}

__INLINE void mac_hw0_mu0_retry_limits_unpack(uint8_t* dot_11_long_retry_limit, uint8_t* dot_11_short_retry_limit)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RETRY_LIMITS_ADDR);

	*dot_11_long_retry_limit = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*dot_11_short_retry_limit = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_retry_limits_dot_11_long_retry_limit_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RETRY_LIMITS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_retry_limits_dot_11_long_retry_limit_setf(uint8_t dot11longretrylimit)
{
	ASSERT_ERR((((uint32_t)dot11longretrylimit << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RETRY_LIMITS_ADDR, (REG_PL_RD(MAC_HW0_MU0_RETRY_LIMITS_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)dot11longretrylimit <<8));
}
__INLINE uint8_t mac_hw0_mu0_retry_limits_dot_11_short_retry_limit_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RETRY_LIMITS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_retry_limits_dot_11_short_retry_limit_setf(uint8_t dot11shortretrylimit)
{
	ASSERT_ERR((((uint32_t)dot11shortretrylimit << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RETRY_LIMITS_ADDR, (REG_PL_RD(MAC_HW0_MU0_RETRY_LIMITS_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)dot11shortretrylimit <<0));
}

/**
 * @brief BB_SERVICE register definition
 *  Register used for programming the Service parameter register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    28:26 MAX_PHY_NTX               0x2
 *    23:16 BB_SERVICE_B              0x0
 *    15:00 BB_SERVICE_A              0x0
 * </pre>
 */
#define MAC_HW0_MU0_BB_SERVICE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000009C)
#define MAC_HW0_MU0_BB_SERVICE_OFFSET      0x0000009C
#define MAC_HW0_MU0_BB_SERVICE_INDEX       0x00000027
#define MAC_HW0_MU0_BB_SERVICE_RESET       0x08000000

__INLINE uint32_t  mac_hw0_mu0_bb_service_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BB_SERVICE_ADDR);
}

__INLINE void mac_hw0_mu0_bb_service_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BB_SERVICE_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BB_SERVICE_MAX_PHY_NTX_MASK    ((uint32_t)0x1C000000)
#define MAC_HW0_MU0_BB_SERVICE_MAX_PHY_NTX_LSB    26
#define MAC_HW0_MU0_BB_SERVICE_MAX_PHY_NTX_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_BB_SERVICE_BB_SERVICE_B_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_BB_SERVICE_BB_SERVICE_B_LSB    16
#define MAC_HW0_MU0_BB_SERVICE_BB_SERVICE_B_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_BB_SERVICE_BB_SERVICE_A_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BB_SERVICE_BB_SERVICE_A_LSB    0
#define MAC_HW0_MU0_BB_SERVICE_BB_SERVICE_A_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BB_SERVICE_MAX_PHY_NTX_RST    0x2
#define MAC_HW0_MU0_BB_SERVICE_BB_SERVICE_B_RST    0x0
#define MAC_HW0_MU0_BB_SERVICE_BB_SERVICE_A_RST    0x0

__INLINE void mac_hw0_mu0_bb_service_pack(uint8_t max_phy_ntx, uint8_t bb_service_b, uint16_t bb_service_a)
{
	ASSERT_ERR((((uint32_t)max_phy_ntx << 26) & ~((uint32_t)0x1C000000)) == 0);
	ASSERT_ERR((((uint32_t)bb_service_b << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)bb_service_a << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BB_SERVICE_ADDR,  ((uint32_t)max_phy_ntx << 26) |((uint32_t)bb_service_b << 16) |((uint32_t)bb_service_a << 0));
}

__INLINE void mac_hw0_mu0_bb_service_unpack(uint8_t* max_phy_ntx, uint8_t* bb_service_b, uint16_t* bb_service_a)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BB_SERVICE_ADDR);

	*max_phy_ntx = (localVal & ((uint32_t)0x1C000000)) >>  26;
	*bb_service_b = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*bb_service_a = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_bb_service_max_phy_ntx_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BB_SERVICE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x1C000000)) >> 26);
}
__INLINE void mac_hw0_mu0_bb_service_max_phy_ntx_setf(uint8_t maxphyntx)
{
	ASSERT_ERR((((uint32_t)maxphyntx << 26) & ~((uint32_t)0x1C000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BB_SERVICE_ADDR, (REG_PL_RD(MAC_HW0_MU0_BB_SERVICE_ADDR) & ~((uint32_t)0x1C000000)) | ((uint32_t)maxphyntx <<26));
}
__INLINE uint8_t mac_hw0_mu0_bb_service_bb_service_b_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BB_SERVICE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_bb_service_bb_service_b_setf(uint8_t bbserviceb)
{
	ASSERT_ERR((((uint32_t)bbserviceb << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BB_SERVICE_ADDR, (REG_PL_RD(MAC_HW0_MU0_BB_SERVICE_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)bbserviceb <<16));
}
__INLINE uint16_t mac_hw0_mu0_bb_service_bb_service_a_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BB_SERVICE_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_bb_service_bb_service_a_setf(uint16_t bbservicea)
{
	ASSERT_ERR((((uint32_t)bbservicea << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BB_SERVICE_ADDR, (REG_PL_RD(MAC_HW0_MU0_BB_SERVICE_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)bbservicea <<0));
}

/**
 * @brief MAX_POWER_LEVEL register definition
 *  Contains the power level for response frame register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 NEAR_STA_DSSS_MAX_PWR_LEVEL 0x4
 *    23:16 NEAR_STA_OFDM_MAX_PWR_LEVEL 0x4
 *    15:08 DSSS_MAX_PWR_LEVEL        0x4
 *    07:00 OFDM_MAX_PWR_LEVEL        0x4
 * </pre>
 */
#define MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000A0)
#define MAC_HW0_MU0_MAX_POWER_LEVEL_OFFSET      0x000000A0
#define MAC_HW0_MU0_MAX_POWER_LEVEL_INDEX       0x00000028
#define MAC_HW0_MU0_MAX_POWER_LEVEL_RESET       0x04040404

__INLINE uint32_t  mac_hw0_mu0_max_power_level_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR);
}

__INLINE void mac_hw0_mu0_max_power_level_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MAX_POWER_LEVEL_NEAR_STA_DSSS_MAX_PWR_LEVEL_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_MAX_POWER_LEVEL_NEAR_STA_DSSS_MAX_PWR_LEVEL_LSB    24
#define MAC_HW0_MU0_MAX_POWER_LEVEL_NEAR_STA_DSSS_MAX_PWR_LEVEL_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_MAX_POWER_LEVEL_NEAR_STA_OFDM_MAX_PWR_LEVEL_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_MAX_POWER_LEVEL_NEAR_STA_OFDM_MAX_PWR_LEVEL_LSB    16
#define MAC_HW0_MU0_MAX_POWER_LEVEL_NEAR_STA_OFDM_MAX_PWR_LEVEL_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_MAX_POWER_LEVEL_DSSS_MAX_PWR_LEVEL_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_MAX_POWER_LEVEL_DSSS_MAX_PWR_LEVEL_LSB    8
#define MAC_HW0_MU0_MAX_POWER_LEVEL_DSSS_MAX_PWR_LEVEL_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_MAX_POWER_LEVEL_OFDM_MAX_PWR_LEVEL_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_MAX_POWER_LEVEL_OFDM_MAX_PWR_LEVEL_LSB    0
#define MAC_HW0_MU0_MAX_POWER_LEVEL_OFDM_MAX_PWR_LEVEL_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_MAX_POWER_LEVEL_NEAR_STA_DSSS_MAX_PWR_LEVEL_RST    0x4
#define MAC_HW0_MU0_MAX_POWER_LEVEL_NEAR_STA_OFDM_MAX_PWR_LEVEL_RST    0x4
#define MAC_HW0_MU0_MAX_POWER_LEVEL_DSSS_MAX_PWR_LEVEL_RST    0x4
#define MAC_HW0_MU0_MAX_POWER_LEVEL_OFDM_MAX_PWR_LEVEL_RST    0x4

__INLINE void mac_hw0_mu0_max_power_level_pack(uint8_t near_sta_dsss_max_pwr_level, uint8_t near_sta_ofdm_max_pwr_level, uint8_t dsss_max_pwr_level, uint8_t ofdm_max_pwr_level)
{
	ASSERT_ERR((((uint32_t)near_sta_dsss_max_pwr_level << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)near_sta_ofdm_max_pwr_level << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)dsss_max_pwr_level << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)ofdm_max_pwr_level << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR,  ((uint32_t)near_sta_dsss_max_pwr_level << 24) |((uint32_t)near_sta_ofdm_max_pwr_level << 16) |((uint32_t)dsss_max_pwr_level << 8) |((uint32_t)ofdm_max_pwr_level << 0));
}

__INLINE void mac_hw0_mu0_max_power_level_unpack(uint8_t* near_sta_dsss_max_pwr_level, uint8_t* near_sta_ofdm_max_pwr_level, uint8_t* dsss_max_pwr_level, uint8_t* ofdm_max_pwr_level)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR);

	*near_sta_dsss_max_pwr_level = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*near_sta_ofdm_max_pwr_level = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*dsss_max_pwr_level = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*ofdm_max_pwr_level = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_max_power_level_near_sta_dsss_max_pwr_level_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_max_power_level_near_sta_dsss_max_pwr_level_setf(uint8_t nearstadsssmaxpwrlevel)
{
	ASSERT_ERR((((uint32_t)nearstadsssmaxpwrlevel << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)nearstadsssmaxpwrlevel <<24));
}
__INLINE uint8_t mac_hw0_mu0_max_power_level_near_sta_ofdm_max_pwr_level_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_max_power_level_near_sta_ofdm_max_pwr_level_setf(uint8_t nearstaofdmmaxpwrlevel)
{
	ASSERT_ERR((((uint32_t)nearstaofdmmaxpwrlevel << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)nearstaofdmmaxpwrlevel <<16));
}
__INLINE uint8_t mac_hw0_mu0_max_power_level_dsss_max_pwr_level_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_max_power_level_dsss_max_pwr_level_setf(uint8_t dsssmaxpwrlevel)
{
	ASSERT_ERR((((uint32_t)dsssmaxpwrlevel << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)dsssmaxpwrlevel <<8));
}
__INLINE uint8_t mac_hw0_mu0_max_power_level_ofdm_max_pwr_level_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_max_power_level_ofdm_max_pwr_level_setf(uint8_t ofdmmaxpwrlevel)
{
	ASSERT_ERR((((uint32_t)ofdmmaxpwrlevel << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAX_POWER_LEVEL_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)ofdmmaxpwrlevel <<0));
}

/**
 * @brief KSR_WRAP_AROUND register definition
 *  key search engine wrap around value register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    07:00 ksr_wrap_around           0xBF
 * </pre>
 */
#define MAC_HW0_MU0_KSR_WRAP_AROUND_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000A8)
#define MAC_HW0_MU0_KSR_WRAP_AROUND_OFFSET      0x000000A8
#define MAC_HW0_MU0_KSR_WRAP_AROUND_INDEX       0x0000002A
#define MAC_HW0_MU0_KSR_WRAP_AROUND_RESET       0x000000BF

__INLINE uint32_t  mac_hw0_mu0_ksr_wrap_around_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_KSR_WRAP_AROUND_ADDR);
}

__INLINE void mac_hw0_mu0_ksr_wrap_around_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_KSR_WRAP_AROUND_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_KSR_WRAP_AROUND_KSR_WRAP_AROUND_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_KSR_WRAP_AROUND_KSR_WRAP_AROUND_LSB    0
#define MAC_HW0_MU0_KSR_WRAP_AROUND_KSR_WRAP_AROUND_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_KSR_WRAP_AROUND_KSR_WRAP_AROUND_RST    0xBF

__INLINE uint8_t mac_hw0_mu0_ksr_wrap_around_ksr_wrap_around_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_KSR_WRAP_AROUND_ADDR);
	return (uint8_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_ksr_wrap_around_ksr_wrap_around_setf(uint8_t ksrwraparound)
{
	ASSERT_ERR((((uint32_t)ksrwraparound << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_KSR_WRAP_AROUND_ADDR, (uint32_t)ksrwraparound << 0);
}

/**
 * @brief ENCR_KEY_0 register definition
 *  Window registers used to program the encryption parameters into the KeyStorage RAM from software. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ENCR_KEY_RAM_WORD_0       0x0
 * </pre>
 */
#define MAC_HW0_MU0_ENCR_KEY_0_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000AC)
#define MAC_HW0_MU0_ENCR_KEY_0_OFFSET      0x000000AC
#define MAC_HW0_MU0_ENCR_KEY_0_INDEX       0x0000002B
#define MAC_HW0_MU0_ENCR_KEY_0_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_encr_key_0_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_0_ADDR);
}

__INLINE void mac_hw0_mu0_encr_key_0_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_0_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ENCR_KEY_0_ENCR_KEY_RAM_WORD_0_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ENCR_KEY_0_ENCR_KEY_RAM_WORD_0_LSB    0
#define MAC_HW0_MU0_ENCR_KEY_0_ENCR_KEY_RAM_WORD_0_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ENCR_KEY_0_ENCR_KEY_RAM_WORD_0_RST    0x0

__INLINE uint32_t mac_hw0_mu0_encr_key_0_encr_key_ram_word_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_0_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_encr_key_0_encr_key_ram_word_0_setf(uint32_t encrkeyramword0)
{
	ASSERT_ERR((((uint32_t)encrkeyramword0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_0_ADDR, (uint32_t)encrkeyramword0 << 0);
}

/**
 * @brief ENCR_KEY_1 register definition
 *  Window registers used to program the encryption parameters into the KeyStorage RAM from software. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ENCR_KEY_RAM_WORD_1       0x0
 * </pre>
 */
#define MAC_HW0_MU0_ENCR_KEY_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000B0)
#define MAC_HW0_MU0_ENCR_KEY_1_OFFSET      0x000000B0
#define MAC_HW0_MU0_ENCR_KEY_1_INDEX       0x0000002C
#define MAC_HW0_MU0_ENCR_KEY_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_encr_key_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_1_ADDR);
}

__INLINE void mac_hw0_mu0_encr_key_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ENCR_KEY_1_ENCR_KEY_RAM_WORD_1_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ENCR_KEY_1_ENCR_KEY_RAM_WORD_1_LSB    0
#define MAC_HW0_MU0_ENCR_KEY_1_ENCR_KEY_RAM_WORD_1_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ENCR_KEY_1_ENCR_KEY_RAM_WORD_1_RST    0x0

__INLINE uint32_t mac_hw0_mu0_encr_key_1_encr_key_ram_word_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_1_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_encr_key_1_encr_key_ram_word_1_setf(uint32_t encrkeyramword1)
{
	ASSERT_ERR((((uint32_t)encrkeyramword1 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_1_ADDR, (uint32_t)encrkeyramword1 << 0);
}

/**
 * @brief ENCR_KEY_2 register definition
 *  Window registers used to program the encryption parameters into the KeyStorage RAM from software. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ENCR_KEY_RAM_WORD_2       0x0
 * </pre>
 */
#define MAC_HW0_MU0_ENCR_KEY_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000B4)
#define MAC_HW0_MU0_ENCR_KEY_2_OFFSET      0x000000B4
#define MAC_HW0_MU0_ENCR_KEY_2_INDEX       0x0000002D
#define MAC_HW0_MU0_ENCR_KEY_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_encr_key_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_2_ADDR);
}

__INLINE void mac_hw0_mu0_encr_key_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ENCR_KEY_2_ENCR_KEY_RAM_WORD_2_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ENCR_KEY_2_ENCR_KEY_RAM_WORD_2_LSB    0
#define MAC_HW0_MU0_ENCR_KEY_2_ENCR_KEY_RAM_WORD_2_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ENCR_KEY_2_ENCR_KEY_RAM_WORD_2_RST    0x0

__INLINE uint32_t mac_hw0_mu0_encr_key_2_encr_key_ram_word_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_2_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_encr_key_2_encr_key_ram_word_2_setf(uint32_t encrkeyramword2)
{
	ASSERT_ERR((((uint32_t)encrkeyramword2 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_2_ADDR, (uint32_t)encrkeyramword2 << 0);
}

/**
 * @brief ENCR_KEY_3 register definition
 *  Window registers used to program the encryption parameters into the KeyStorage RAM from software. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ENCR_KEY_RAM_WORD_3       0x0
 * </pre>
 */
#define MAC_HW0_MU0_ENCR_KEY_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000B8)
#define MAC_HW0_MU0_ENCR_KEY_3_OFFSET      0x000000B8
#define MAC_HW0_MU0_ENCR_KEY_3_INDEX       0x0000002E
#define MAC_HW0_MU0_ENCR_KEY_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_encr_key_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_3_ADDR);
}

__INLINE void mac_hw0_mu0_encr_key_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ENCR_KEY_3_ENCR_KEY_RAM_WORD_3_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ENCR_KEY_3_ENCR_KEY_RAM_WORD_3_LSB    0
#define MAC_HW0_MU0_ENCR_KEY_3_ENCR_KEY_RAM_WORD_3_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ENCR_KEY_3_ENCR_KEY_RAM_WORD_3_RST    0x0

__INLINE uint32_t mac_hw0_mu0_encr_key_3_encr_key_ram_word_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_KEY_3_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_encr_key_3_encr_key_ram_word_3_setf(uint32_t encrkeyramword3)
{
	ASSERT_ERR((((uint32_t)encrkeyramword3 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_KEY_3_ADDR, (uint32_t)encrkeyramword3 << 0);
}

/**
 * @brief ENCR_MAC_ADDR_LOW register definition
 *  Window registers used to program the encryption parameters into the KeyStorage RAM from software. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 MAC_ADDR_RAM_LOW          0xFFFFFFFF
 * </pre>
 */
#define MAC_HW0_MU0_ENCR_MAC_ADDR_LOW_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000BC)
#define MAC_HW0_MU0_ENCR_MAC_ADDR_LOW_OFFSET      0x000000BC
#define MAC_HW0_MU0_ENCR_MAC_ADDR_LOW_INDEX       0x0000002F
#define MAC_HW0_MU0_ENCR_MAC_ADDR_LOW_RESET       0xFFFFFFFF

__INLINE uint32_t  mac_hw0_mu0_encr_mac_addr_low_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ENCR_MAC_ADDR_LOW_ADDR);
}

__INLINE void mac_hw0_mu0_encr_mac_addr_low_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ENCR_MAC_ADDR_LOW_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ENCR_MAC_ADDR_LOW_MAC_ADDR_RAM_LOW_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ENCR_MAC_ADDR_LOW_MAC_ADDR_RAM_LOW_LSB    0
#define MAC_HW0_MU0_ENCR_MAC_ADDR_LOW_MAC_ADDR_RAM_LOW_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ENCR_MAC_ADDR_LOW_MAC_ADDR_RAM_LOW_RST    0xFFFFFFFF

__INLINE uint32_t mac_hw0_mu0_encr_mac_addr_low_mac_addr_ram_low_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_MAC_ADDR_LOW_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_encr_mac_addr_low_mac_addr_ram_low_setf(uint32_t macaddrramlow)
{
	ASSERT_ERR((((uint32_t)macaddrramlow << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_MAC_ADDR_LOW_ADDR, (uint32_t)macaddrramlow << 0);
}

/**
 * @brief ENCR_MAC_ADDR_HIGH register definition
 *  Window registers used to program the encryption parameters into the KeyStorage RAM from software. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 MAC_ADDR_RAM_HIGH         0xFFFF
 * </pre>
 */
#define MAC_HW0_MU0_ENCR_MAC_ADDR_HIGH_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000C0)
#define MAC_HW0_MU0_ENCR_MAC_ADDR_HIGH_OFFSET      0x000000C0
#define MAC_HW0_MU0_ENCR_MAC_ADDR_HIGH_INDEX       0x00000030
#define MAC_HW0_MU0_ENCR_MAC_ADDR_HIGH_RESET       0x0000FFFF

__INLINE uint32_t  mac_hw0_mu0_encr_mac_addr_high_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ENCR_MAC_ADDR_HIGH_ADDR);
}

__INLINE void mac_hw0_mu0_encr_mac_addr_high_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ENCR_MAC_ADDR_HIGH_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ENCR_MAC_ADDR_HIGH_MAC_ADDR_RAM_HIGH_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_ENCR_MAC_ADDR_HIGH_MAC_ADDR_RAM_HIGH_LSB    0
#define MAC_HW0_MU0_ENCR_MAC_ADDR_HIGH_MAC_ADDR_RAM_HIGH_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_ENCR_MAC_ADDR_HIGH_MAC_ADDR_RAM_HIGH_RST    0xFFFF

__INLINE uint16_t mac_hw0_mu0_encr_mac_addr_high_mac_addr_ram_high_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_MAC_ADDR_HIGH_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_encr_mac_addr_high_mac_addr_ram_high_setf(uint16_t macaddrramhigh)
{
	ASSERT_ERR((((uint32_t)macaddrramhigh << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_MAC_ADDR_HIGH_ADDR, (uint32_t)macaddrramhigh << 0);
}

/**
 * @brief ENCR_CNTRL register definition
 *  Window registers used to program the encryption parameters into the KeyStorage RAM from software. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    NEW_READ                  0              
 *    30    NEW_WRITE                 0              
 *    29    NEW_WRITE_EXTRAM_ONLY     0              
 *    25:16 KEY_INDEX_RAM             0x0
 *    15:11 EXT_RAM                   0x0
 *    10:08 C_TYPE_RAM                0x0
 *    07:04 VLAN_IDRAM                0x0
 *    03:02 SPP_RAM                   0x0
 *    01    USE_DEF_KEY_RAM           0              
 *    00    C_LEN_RAM                 0              
 * </pre>
 */
#define MAC_HW0_MU0_ENCR_CNTRL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000C4)
#define MAC_HW0_MU0_ENCR_CNTRL_OFFSET      0x000000C4
#define MAC_HW0_MU0_ENCR_CNTRL_INDEX       0x00000031
#define MAC_HW0_MU0_ENCR_CNTRL_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_encr_cntrl_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR);
}

__INLINE void mac_hw0_mu0_encr_cntrl_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ENCR_CNTRL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ENCR_CNTRL_NEW_READ_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_ENCR_CNTRL_NEW_READ_POS    31
#define MAC_HW0_MU0_ENCR_CNTRL_NEW_WRITE_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_ENCR_CNTRL_NEW_WRITE_POS    30
#define MAC_HW0_MU0_ENCR_CNTRL_NEW_WRITE_EXTRAM_ONLY_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_ENCR_CNTRL_NEW_WRITE_EXTRAM_ONLY_POS    29
#define MAC_HW0_MU0_ENCR_CNTRL_KEY_INDEX_RAM_MASK    ((uint32_t)0x03FF0000)
#define MAC_HW0_MU0_ENCR_CNTRL_KEY_INDEX_RAM_LSB    16
#define MAC_HW0_MU0_ENCR_CNTRL_KEY_INDEX_RAM_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_ENCR_CNTRL_EXT_RAM_MASK    ((uint32_t)0x0000F800)
#define MAC_HW0_MU0_ENCR_CNTRL_EXT_RAM_LSB    11
#define MAC_HW0_MU0_ENCR_CNTRL_EXT_RAM_WIDTH    ((uint32_t)0x00000005)
#define MAC_HW0_MU0_ENCR_CNTRL_C_TYPE_RAM_MASK    ((uint32_t)0x00000700)
#define MAC_HW0_MU0_ENCR_CNTRL_C_TYPE_RAM_LSB    8
#define MAC_HW0_MU0_ENCR_CNTRL_C_TYPE_RAM_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_ENCR_CNTRL_VLAN_IDRAM_MASK    ((uint32_t)0x000000F0)
#define MAC_HW0_MU0_ENCR_CNTRL_VLAN_IDRAM_LSB    4
#define MAC_HW0_MU0_ENCR_CNTRL_VLAN_IDRAM_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_ENCR_CNTRL_SPP_RAM_MASK    ((uint32_t)0x0000000C)
#define MAC_HW0_MU0_ENCR_CNTRL_SPP_RAM_LSB    2
#define MAC_HW0_MU0_ENCR_CNTRL_SPP_RAM_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_ENCR_CNTRL_USE_DEF_KEY_RAM_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_ENCR_CNTRL_USE_DEF_KEY_RAM_POS    1
#define MAC_HW0_MU0_ENCR_CNTRL_C_LEN_RAM_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_ENCR_CNTRL_C_LEN_RAM_POS    0

#define MAC_HW0_MU0_ENCR_CNTRL_NEW_READ_RST    0x0
#define MAC_HW0_MU0_ENCR_CNTRL_NEW_WRITE_RST    0x0
#define MAC_HW0_MU0_ENCR_CNTRL_NEW_WRITE_EXTRAM_ONLY_RST    0x0
#define MAC_HW0_MU0_ENCR_CNTRL_KEY_INDEX_RAM_RST    0x0
#define MAC_HW0_MU0_ENCR_CNTRL_EXT_RAM_RST    0x0
#define MAC_HW0_MU0_ENCR_CNTRL_C_TYPE_RAM_RST    0x0
#define MAC_HW0_MU0_ENCR_CNTRL_VLAN_IDRAM_RST    0x0
#define MAC_HW0_MU0_ENCR_CNTRL_SPP_RAM_RST    0x0
#define MAC_HW0_MU0_ENCR_CNTRL_USE_DEF_KEY_RAM_RST    0x0
#define MAC_HW0_MU0_ENCR_CNTRL_C_LEN_RAM_RST    0x0

__INLINE void mac_hw0_mu0_encr_cntrl_pack(uint8_t new_read, uint8_t new_write, uint8_t new_write_extram_only, uint16_t key_index_ram, uint8_t ext_ram, uint8_t c_type_ram, uint8_t vlan_idram, uint8_t spp_ram, uint8_t use_def_key_ram, uint8_t c_len_ram)
{
	ASSERT_ERR((((uint32_t)new_read << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)new_write << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)new_write_extram_only << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)key_index_ram << 16) & ~((uint32_t)0x03FF0000)) == 0);
	ASSERT_ERR((((uint32_t)ext_ram << 11) & ~((uint32_t)0x0000F800)) == 0);
	ASSERT_ERR((((uint32_t)c_type_ram << 8) & ~((uint32_t)0x00000700)) == 0);
	ASSERT_ERR((((uint32_t)vlan_idram << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)spp_ram << 2) & ~((uint32_t)0x0000000C)) == 0);
	ASSERT_ERR((((uint32_t)use_def_key_ram << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)c_len_ram << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_CNTRL_ADDR,  ((uint32_t)new_read << 31) |((uint32_t)new_write << 30) |((uint32_t)new_write_extram_only << 29) |((uint32_t)key_index_ram << 16) |((uint32_t)ext_ram << 11) |((uint32_t)c_type_ram << 8) |((uint32_t)vlan_idram << 4) |((uint32_t)spp_ram << 2) |((uint32_t)use_def_key_ram << 1) |((uint32_t)c_len_ram << 0));
}

__INLINE void mac_hw0_mu0_encr_cntrl_unpack(uint8_t* new_read, uint8_t* new_write, uint8_t* new_write_extram_only, uint16_t* key_index_ram, uint8_t* ext_ram, uint8_t* c_type_ram, uint8_t* vlan_idram, uint8_t* spp_ram, uint8_t* use_def_key_ram, uint8_t* c_len_ram)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR);

	*new_read = (localVal & ((uint32_t)0x80000000)) >>  31;
	*new_write = (localVal & ((uint32_t)0x40000000)) >>  30;
	*new_write_extram_only = (localVal & ((uint32_t)0x20000000)) >>  29;
	*key_index_ram = (localVal & ((uint32_t)0x03FF0000)) >>  16;
	*ext_ram = (localVal & ((uint32_t)0x0000F800)) >>  11;
	*c_type_ram = (localVal & ((uint32_t)0x00000700)) >>  8;
	*vlan_idram = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*spp_ram = (localVal & ((uint32_t)0x0000000C)) >>  2;
	*use_def_key_ram = (localVal & ((uint32_t)0x00000002)) >>  1;
	*c_len_ram = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_encr_cntrl_new_read_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_encr_cntrl_new_read_setf(uint8_t newread)
{
	ASSERT_ERR((((uint32_t)newread << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)newread <<31));
}
__INLINE uint8_t mac_hw0_mu0_encr_cntrl_new_write_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_encr_cntrl_new_write_setf(uint8_t newwrite)
{
	ASSERT_ERR((((uint32_t)newwrite << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)newwrite <<30));
}
__INLINE uint8_t mac_hw0_mu0_encr_cntrl_new_write_extram_only_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_encr_cntrl_new_write_extram_only_setf(uint8_t newwriteextramonly)
{
	ASSERT_ERR((((uint32_t)newwriteextramonly << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)newwriteextramonly <<29));
}
__INLINE uint16_t mac_hw0_mu0_encr_cntrl_key_index_ram_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x03FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_encr_cntrl_key_index_ram_setf(uint16_t keyindexram)
{
	ASSERT_ERR((((uint32_t)keyindexram << 16) & ~((uint32_t)0x03FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR) & ~((uint32_t)0x03FF0000)) | ((uint32_t)keyindexram <<16));
}
__INLINE uint8_t mac_hw0_mu0_encr_cntrl_ext_ram_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F800)) >> 11);
}
__INLINE void mac_hw0_mu0_encr_cntrl_ext_ram_setf(uint8_t extram)
{
	ASSERT_ERR((((uint32_t)extram << 11) & ~((uint32_t)0x0000F800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR) & ~((uint32_t)0x0000F800)) | ((uint32_t)extram <<11));
}
__INLINE uint8_t mac_hw0_mu0_encr_cntrl_c_type_ram_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000700)) >> 8);
}
__INLINE void mac_hw0_mu0_encr_cntrl_c_type_ram_setf(uint8_t ctyperam)
{
	ASSERT_ERR((((uint32_t)ctyperam << 8) & ~((uint32_t)0x00000700)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR) & ~((uint32_t)0x00000700)) | ((uint32_t)ctyperam <<8));
}
__INLINE uint8_t mac_hw0_mu0_encr_cntrl_vlan_idram_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void mac_hw0_mu0_encr_cntrl_vlan_idram_setf(uint8_t vlanidram)
{
	ASSERT_ERR((((uint32_t)vlanidram << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)vlanidram <<4));
}
__INLINE uint8_t mac_hw0_mu0_encr_cntrl_spp_ram_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000C)) >> 2);
}
__INLINE void mac_hw0_mu0_encr_cntrl_spp_ram_setf(uint8_t sppram)
{
	ASSERT_ERR((((uint32_t)sppram << 2) & ~((uint32_t)0x0000000C)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR) & ~((uint32_t)0x0000000C)) | ((uint32_t)sppram <<2));
}
__INLINE uint8_t mac_hw0_mu0_encr_cntrl_use_def_key_ram_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_encr_cntrl_use_def_key_ram_setf(uint8_t usedefkeyram)
{
	ASSERT_ERR((((uint32_t)usedefkeyram << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)usedefkeyram <<1));
}
__INLINE uint8_t mac_hw0_mu0_encr_cntrl_c_len_ram_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_encr_cntrl_c_len_ram_setf(uint8_t clenram)
{
	ASSERT_ERR((((uint32_t)clenram << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCR_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_ENCR_CNTRL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)clenram <<0));
}

/**
 * @brief ENCRWPIINTKEY_0 register definition
 *  Encryption WPI Integrity Key 0 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ENCRWPIINTKEY0            0x0
 * </pre>
 */
#define MAC_HW0_MU0_ENCRWPIINTKEY_0_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000C8)
#define MAC_HW0_MU0_ENCRWPIINTKEY_0_OFFSET      0x000000C8
#define MAC_HW0_MU0_ENCRWPIINTKEY_0_INDEX       0x00000032
#define MAC_HW0_MU0_ENCRWPIINTKEY_0_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_encrwpiintkey_0_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ENCRWPIINTKEY_0_ADDR);
}

__INLINE void mac_hw0_mu0_encrwpiintkey_0_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ENCRWPIINTKEY_0_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ENCRWPIINTKEY_0_ENCRWPIINTKEY_0_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ENCRWPIINTKEY_0_ENCRWPIINTKEY_0_LSB    0
#define MAC_HW0_MU0_ENCRWPIINTKEY_0_ENCRWPIINTKEY_0_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ENCRWPIINTKEY_0_ENCRWPIINTKEY_0_RST    0x0

__INLINE uint32_t mac_hw0_mu0_encrwpiintkey_0_encrwpiintkey_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCRWPIINTKEY_0_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_encrwpiintkey_0_encrwpiintkey_0_setf(uint32_t encrwpiintkey0)
{
	ASSERT_ERR((((uint32_t)encrwpiintkey0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCRWPIINTKEY_0_ADDR, (uint32_t)encrwpiintkey0 << 0);
}

/**
 * @brief ENCRWPIINTKEY_1 register definition
 *  Encryption WPI Integrity Key 1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ENCRWPIINTKEY1            0x0
 * </pre>
 */
#define MAC_HW0_MU0_ENCRWPIINTKEY_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000CC)
#define MAC_HW0_MU0_ENCRWPIINTKEY_1_OFFSET      0x000000CC
#define MAC_HW0_MU0_ENCRWPIINTKEY_1_INDEX       0x00000033
#define MAC_HW0_MU0_ENCRWPIINTKEY_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_encrwpiintkey_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ENCRWPIINTKEY_1_ADDR);
}

__INLINE void mac_hw0_mu0_encrwpiintkey_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ENCRWPIINTKEY_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ENCRWPIINTKEY_1_ENCRWPIINTKEY_1_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ENCRWPIINTKEY_1_ENCRWPIINTKEY_1_LSB    0
#define MAC_HW0_MU0_ENCRWPIINTKEY_1_ENCRWPIINTKEY_1_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ENCRWPIINTKEY_1_ENCRWPIINTKEY_1_RST    0x0

__INLINE uint32_t mac_hw0_mu0_encrwpiintkey_1_encrwpiintkey_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCRWPIINTKEY_1_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_encrwpiintkey_1_encrwpiintkey_1_setf(uint32_t encrwpiintkey1)
{
	ASSERT_ERR((((uint32_t)encrwpiintkey1 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCRWPIINTKEY_1_ADDR, (uint32_t)encrwpiintkey1 << 0);
}

/**
 * @brief ENCRWPIINTKEY_2 register definition
 *  Encryption WPI Integrity Key 2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ENCRWPIINTKEY2            0x0
 * </pre>
 */
#define MAC_HW0_MU0_ENCRWPIINTKEY_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000D0)
#define MAC_HW0_MU0_ENCRWPIINTKEY_2_OFFSET      0x000000D0
#define MAC_HW0_MU0_ENCRWPIINTKEY_2_INDEX       0x00000034
#define MAC_HW0_MU0_ENCRWPIINTKEY_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_encrwpiintkey_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ENCRWPIINTKEY_2_ADDR);
}

__INLINE void mac_hw0_mu0_encrwpiintkey_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ENCRWPIINTKEY_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ENCRWPIINTKEY_2_ENCRWPIINTKEY_2_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ENCRWPIINTKEY_2_ENCRWPIINTKEY_2_LSB    0
#define MAC_HW0_MU0_ENCRWPIINTKEY_2_ENCRWPIINTKEY_2_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ENCRWPIINTKEY_2_ENCRWPIINTKEY_2_RST    0x0

__INLINE uint32_t mac_hw0_mu0_encrwpiintkey_2_encrwpiintkey_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCRWPIINTKEY_2_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_encrwpiintkey_2_encrwpiintkey_2_setf(uint32_t encrwpiintkey2)
{
	ASSERT_ERR((((uint32_t)encrwpiintkey2 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCRWPIINTKEY_2_ADDR, (uint32_t)encrwpiintkey2 << 0);
}

/**
 * @brief ENCRWPIINTKEY_3 register definition
 *  Encryption WPI Integrity Key 3 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ENCRWPIINTKEY3            0x0
 * </pre>
 */
#define MAC_HW0_MU0_ENCRWPIINTKEY_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000D4)
#define MAC_HW0_MU0_ENCRWPIINTKEY_3_OFFSET      0x000000D4
#define MAC_HW0_MU0_ENCRWPIINTKEY_3_INDEX       0x00000035
#define MAC_HW0_MU0_ENCRWPIINTKEY_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_encrwpiintkey_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ENCRWPIINTKEY_3_ADDR);
}

__INLINE void mac_hw0_mu0_encrwpiintkey_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ENCRWPIINTKEY_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ENCRWPIINTKEY_3_ENCRWPIINTKEY_3_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ENCRWPIINTKEY_3_ENCRWPIINTKEY_3_LSB    0
#define MAC_HW0_MU0_ENCRWPIINTKEY_3_ENCRWPIINTKEY_3_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ENCRWPIINTKEY_3_ENCRWPIINTKEY_3_RST    0x0

__INLINE uint32_t mac_hw0_mu0_encrwpiintkey_3_encrwpiintkey_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ENCRWPIINTKEY_3_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_encrwpiintkey_3_encrwpiintkey_3_setf(uint32_t encrwpiintkey3)
{
	ASSERT_ERR((((uint32_t)encrwpiintkey3 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ENCRWPIINTKEY_3_ADDR, (uint32_t)encrwpiintkey3 << 0);
}

/**
 * @brief RX_INV_LINE register definition
 *  Invalidate a line in the ps bitmap register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    INV                       0              
 *    19:16 TID                       0x0
 *    07:00 KSR_ID                    0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_INV_LINE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000D8)
#define MAC_HW0_MU0_RX_INV_LINE_OFFSET      0x000000D8
#define MAC_HW0_MU0_RX_INV_LINE_INDEX       0x00000036
#define MAC_HW0_MU0_RX_INV_LINE_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_inv_line_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_INV_LINE_ADDR);
}

__INLINE void mac_hw0_mu0_rx_inv_line_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_INV_LINE_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_INV_LINE_INV_BIT     ((uint32_t)0x80000000)
#define MAC_HW0_MU0_RX_INV_LINE_INV_POS     31
#define MAC_HW0_MU0_RX_INV_LINE_TID_MASK    ((uint32_t)0x000F0000)
#define MAC_HW0_MU0_RX_INV_LINE_TID_LSB     16
#define MAC_HW0_MU0_RX_INV_LINE_TID_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_INV_LINE_KSR_ID_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_RX_INV_LINE_KSR_ID_LSB    0
#define MAC_HW0_MU0_RX_INV_LINE_KSR_ID_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_RX_INV_LINE_INV_RST     0x0
#define MAC_HW0_MU0_RX_INV_LINE_TID_RST     0x0
#define MAC_HW0_MU0_RX_INV_LINE_KSR_ID_RST    0x0

__INLINE void mac_hw0_mu0_rx_inv_line_pack(uint8_t inv, uint8_t tid, uint8_t ksr_id)
{
	ASSERT_ERR((((uint32_t)inv << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)tid << 16) & ~((uint32_t)0x000F0000)) == 0);
	ASSERT_ERR((((uint32_t)ksr_id << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INV_LINE_ADDR,  ((uint32_t)inv << 31) |((uint32_t)tid << 16) |((uint32_t)ksr_id << 0));
}

__INLINE void mac_hw0_mu0_rx_inv_line_unpack(uint8_t* inv, uint8_t* tid, uint8_t* ksr_id)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INV_LINE_ADDR);

	*inv = (localVal & ((uint32_t)0x80000000)) >>  31;
	*tid = (localVal & ((uint32_t)0x000F0000)) >>  16;
	*ksr_id = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_inv_line_inv_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INV_LINE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_rx_inv_line_inv_setf(uint8_t inv)
{
	ASSERT_ERR((((uint32_t)inv << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INV_LINE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INV_LINE_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)inv <<31));
}
__INLINE uint8_t mac_hw0_mu0_rx_inv_line_tid_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INV_LINE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000F0000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_inv_line_tid_setf(uint8_t tid)
{
	ASSERT_ERR((((uint32_t)tid << 16) & ~((uint32_t)0x000F0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INV_LINE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INV_LINE_ADDR) & ~((uint32_t)0x000F0000)) | ((uint32_t)tid <<16));
}
__INLINE uint8_t mac_hw0_mu0_rx_inv_line_ksr_id_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INV_LINE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_inv_line_ksr_id_setf(uint8_t ksrid)
{
	ASSERT_ERR((((uint32_t)ksrid << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INV_LINE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INV_LINE_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)ksrid <<0));
}

/**
 * @brief RATES register definition
 *  Indicates the BSS Basic Rate Set. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    11:00 BSS_BASIC_RATE_SET        0x150
 * </pre>
 */
#define MAC_HW0_MU0_RATES_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000DC)
#define MAC_HW0_MU0_RATES_OFFSET      0x000000DC
#define MAC_HW0_MU0_RATES_INDEX       0x00000037
#define MAC_HW0_MU0_RATES_RESET       0x00000150

__INLINE uint32_t  mac_hw0_mu0_rates_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RATES_ADDR);
}

__INLINE void mac_hw0_mu0_rates_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RATES_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RATES_BSS_BASIC_RATE_SET_MASK    ((uint32_t)0x00000FFF)
#define MAC_HW0_MU0_RATES_BSS_BASIC_RATE_SET_LSB    0
#define MAC_HW0_MU0_RATES_BSS_BASIC_RATE_SET_WIDTH    ((uint32_t)0x0000000C)

#define MAC_HW0_MU0_RATES_BSS_BASIC_RATE_SET_RST    0x150

__INLINE uint16_t mac_hw0_mu0_rates_bss_basic_rate_set_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RATES_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_rates_bss_basic_rate_set_setf(uint16_t bssbasicrateset)
{
	ASSERT_ERR((((uint32_t)bssbasicrateset << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RATES_ADDR, (uint32_t)bssbasicrateset << 0);
}

/**
 * @brief OLBC register definition
 *  Contains settings to determine if there is an OLBC. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 DSSS_COUNT                0x0
 *    23:16 OFDM_COUNT                0x0
 *    15:00 OLBC_TIMER                0x0
 * </pre>
 */
#define MAC_HW0_MU0_OLBC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000E0)
#define MAC_HW0_MU0_OLBC_OFFSET      0x000000E0
#define MAC_HW0_MU0_OLBC_INDEX       0x00000038
#define MAC_HW0_MU0_OLBC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_olbc_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_OLBC_ADDR);
}

__INLINE void mac_hw0_mu0_olbc_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_OLBC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_OLBC_DSSS_COUNT_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_OLBC_DSSS_COUNT_LSB     24
#define MAC_HW0_MU0_OLBC_DSSS_COUNT_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_OLBC_OFDM_COUNT_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_OLBC_OFDM_COUNT_LSB     16
#define MAC_HW0_MU0_OLBC_OFDM_COUNT_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_OLBC_OLBC_TIMER_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_OLBC_OLBC_TIMER_LSB     0
#define MAC_HW0_MU0_OLBC_OLBC_TIMER_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_OLBC_DSSS_COUNT_RST     0x0
#define MAC_HW0_MU0_OLBC_OFDM_COUNT_RST     0x0
#define MAC_HW0_MU0_OLBC_OLBC_TIMER_RST     0x0

__INLINE void mac_hw0_mu0_olbc_pack(uint8_t dsss_count, uint8_t ofdm_count, uint16_t olbc_timer)
{
	ASSERT_ERR((((uint32_t)dsss_count << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)ofdm_count << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)olbc_timer << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_OLBC_ADDR,  ((uint32_t)dsss_count << 24) |((uint32_t)ofdm_count << 16) |((uint32_t)olbc_timer << 0));
}

__INLINE void mac_hw0_mu0_olbc_unpack(uint8_t* dsss_count, uint8_t* ofdm_count, uint16_t* olbc_timer)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_OLBC_ADDR);

	*dsss_count = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*ofdm_count = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*olbc_timer = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_olbc_dsss_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_OLBC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_olbc_dsss_count_setf(uint8_t dssscount)
{
	ASSERT_ERR((((uint32_t)dssscount << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_OLBC_ADDR, (REG_PL_RD(MAC_HW0_MU0_OLBC_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)dssscount <<24));
}
__INLINE uint8_t mac_hw0_mu0_olbc_ofdm_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_OLBC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_olbc_ofdm_count_setf(uint8_t ofdmcount)
{
	ASSERT_ERR((((uint32_t)ofdmcount << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_OLBC_ADDR, (REG_PL_RD(MAC_HW0_MU0_OLBC_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)ofdmcount <<16));
}
__INLINE uint16_t mac_hw0_mu0_olbc_olbc_timer_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_OLBC_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_olbc_olbc_timer_setf(uint16_t olbctimer)
{
	ASSERT_ERR((((uint32_t)olbctimer << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_OLBC_ADDR, (REG_PL_RD(MAC_HW0_MU0_OLBC_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)olbctimer <<0));
}

/**
 * @brief TIMINGS_1 register definition
 *  Contains protocol timing information. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:18 TX_CHAIN_DELAY_IN_MAC_CLK 0x230
 *    17:08 TX_RF_DELAY_IN_MAC_CLK    0xA0
 *    07:00 MAC_CORE_CLK_FREQ         0xA0
 * </pre>
 */
#define MAC_HW0_MU0_TIMINGS_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000E4)
#define MAC_HW0_MU0_TIMINGS_1_OFFSET      0x000000E4
#define MAC_HW0_MU0_TIMINGS_1_INDEX       0x00000039
#define MAC_HW0_MU0_TIMINGS_1_RESET       0x08C0A0A0

__INLINE uint32_t  mac_hw0_mu0_timings_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMINGS_1_ADDR);
}

__INLINE void mac_hw0_mu0_timings_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMINGS_1_TX_CHAIN_DELAY_IN_MAC_CLK_MASK    ((uint32_t)0x0FFC0000)
#define MAC_HW0_MU0_TIMINGS_1_TX_CHAIN_DELAY_IN_MAC_CLK_LSB    18
#define MAC_HW0_MU0_TIMINGS_1_TX_CHAIN_DELAY_IN_MAC_CLK_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_TIMINGS_1_TX_RF_DELAY_IN_MAC_CLK_MASK    ((uint32_t)0x0003FF00)
#define MAC_HW0_MU0_TIMINGS_1_TX_RF_DELAY_IN_MAC_CLK_LSB    8
#define MAC_HW0_MU0_TIMINGS_1_TX_RF_DELAY_IN_MAC_CLK_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_TIMINGS_1_MAC_CORE_CLK_FREQ_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_TIMINGS_1_MAC_CORE_CLK_FREQ_LSB    0
#define MAC_HW0_MU0_TIMINGS_1_MAC_CORE_CLK_FREQ_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_TIMINGS_1_TX_CHAIN_DELAY_IN_MAC_CLK_RST    0x230
#define MAC_HW0_MU0_TIMINGS_1_TX_RF_DELAY_IN_MAC_CLK_RST    0xA0
#define MAC_HW0_MU0_TIMINGS_1_MAC_CORE_CLK_FREQ_RST    0xA0

__INLINE void mac_hw0_mu0_timings_1_pack(uint16_t tx_chain_delay_in_mac_clk, uint16_t tx_rf_delay_in_mac_clk, uint8_t mac_core_clk_freq)
{
	ASSERT_ERR((((uint32_t)tx_chain_delay_in_mac_clk << 18) & ~((uint32_t)0x0FFC0000)) == 0);
	ASSERT_ERR((((uint32_t)tx_rf_delay_in_mac_clk << 8) & ~((uint32_t)0x0003FF00)) == 0);
	ASSERT_ERR((((uint32_t)mac_core_clk_freq << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_1_ADDR,  ((uint32_t)tx_chain_delay_in_mac_clk << 18) |((uint32_t)tx_rf_delay_in_mac_clk << 8) |((uint32_t)mac_core_clk_freq << 0));
}

__INLINE void mac_hw0_mu0_timings_1_unpack(uint16_t* tx_chain_delay_in_mac_clk, uint16_t* tx_rf_delay_in_mac_clk, uint8_t* mac_core_clk_freq)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_1_ADDR);

	*tx_chain_delay_in_mac_clk = (localVal & ((uint32_t)0x0FFC0000)) >>  18;
	*tx_rf_delay_in_mac_clk = (localVal & ((uint32_t)0x0003FF00)) >>  8;
	*mac_core_clk_freq = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_timings_1_tx_chain_delay_in_mac_clk_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0FFC0000)) >> 18);
}
__INLINE void mac_hw0_mu0_timings_1_tx_chain_delay_in_mac_clk_setf(uint16_t txchaindelayinmacclk)
{
	ASSERT_ERR((((uint32_t)txchaindelayinmacclk << 18) & ~((uint32_t)0x0FFC0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_1_ADDR) & ~((uint32_t)0x0FFC0000)) | ((uint32_t)txchaindelayinmacclk <<18));
}
__INLINE uint16_t mac_hw0_mu0_timings_1_tx_rf_delay_in_mac_clk_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0003FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_timings_1_tx_rf_delay_in_mac_clk_setf(uint16_t txrfdelayinmacclk)
{
	ASSERT_ERR((((uint32_t)txrfdelayinmacclk << 8) & ~((uint32_t)0x0003FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_1_ADDR) & ~((uint32_t)0x0003FF00)) | ((uint32_t)txrfdelayinmacclk <<8));
}
__INLINE uint8_t mac_hw0_mu0_timings_1_mac_core_clk_freq_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_timings_1_mac_core_clk_freq_setf(uint8_t maccoreclkfreq)
{
	ASSERT_ERR((((uint32_t)maccoreclkfreq << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_1_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)maccoreclkfreq <<0));
}

/**
 * @brief TIMINGS_2 register definition
 *  Contains protocol timing information. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:08 SLOT_TIME_IN_MAC_CLK      0x5A0
 *    07:00 SLOT_TIME                 0x9
 * </pre>
 */
#define MAC_HW0_MU0_TIMINGS_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000E8)
#define MAC_HW0_MU0_TIMINGS_2_OFFSET      0x000000E8
#define MAC_HW0_MU0_TIMINGS_2_INDEX       0x0000003A
#define MAC_HW0_MU0_TIMINGS_2_RESET       0x0005A009

__INLINE uint32_t  mac_hw0_mu0_timings_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMINGS_2_ADDR);
}

__INLINE void mac_hw0_mu0_timings_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMINGS_2_SLOT_TIME_IN_MAC_CLK_MASK    ((uint32_t)0x00FFFF00)
#define MAC_HW0_MU0_TIMINGS_2_SLOT_TIME_IN_MAC_CLK_LSB    8
#define MAC_HW0_MU0_TIMINGS_2_SLOT_TIME_IN_MAC_CLK_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_TIMINGS_2_SLOT_TIME_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_TIMINGS_2_SLOT_TIME_LSB    0
#define MAC_HW0_MU0_TIMINGS_2_SLOT_TIME_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_TIMINGS_2_SLOT_TIME_IN_MAC_CLK_RST    0x5A0
#define MAC_HW0_MU0_TIMINGS_2_SLOT_TIME_RST    0x9

__INLINE void mac_hw0_mu0_timings_2_pack(uint16_t slot_time_in_mac_clk, uint8_t slot_time)
{
	ASSERT_ERR((((uint32_t)slot_time_in_mac_clk << 8) & ~((uint32_t)0x00FFFF00)) == 0);
	ASSERT_ERR((((uint32_t)slot_time << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_2_ADDR,  ((uint32_t)slot_time_in_mac_clk << 8) |((uint32_t)slot_time << 0));
}

__INLINE void mac_hw0_mu0_timings_2_unpack(uint16_t* slot_time_in_mac_clk, uint8_t* slot_time)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_2_ADDR);

	*slot_time_in_mac_clk = (localVal & ((uint32_t)0x00FFFF00)) >>  8;
	*slot_time = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_timings_2_slot_time_in_mac_clk_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x00FFFF00)) >> 8);
}
__INLINE void mac_hw0_mu0_timings_2_slot_time_in_mac_clk_setf(uint16_t slottimeinmacclk)
{
	ASSERT_ERR((((uint32_t)slottimeinmacclk << 8) & ~((uint32_t)0x00FFFF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_2_ADDR) & ~((uint32_t)0x00FFFF00)) | ((uint32_t)slottimeinmacclk <<8));
}
__INLINE uint8_t mac_hw0_mu0_timings_2_slot_time_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_timings_2_slot_time_setf(uint8_t slottime)
{
	ASSERT_ERR((((uint32_t)slottime << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_2_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)slottime <<0));
}

/**
 * @brief TIMINGS_3 register definition
 *  Contains protocol timing information. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 RX_RF_DELAY_IN_MAC_CLK    0x0
 *    19:10 TX_DELAY_RF_ON_IN_MAC_CLK 0xA0
 *    09:00 MAC_PROC_DELAY_IN_MAC_CLK 0x48
 * </pre>
 */
#define MAC_HW0_MU0_TIMINGS_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000EC)
#define MAC_HW0_MU0_TIMINGS_3_OFFSET      0x000000EC
#define MAC_HW0_MU0_TIMINGS_3_INDEX       0x0000003B
#define MAC_HW0_MU0_TIMINGS_3_RESET       0x00028048

__INLINE uint32_t  mac_hw0_mu0_timings_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMINGS_3_ADDR);
}

__INLINE void mac_hw0_mu0_timings_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMINGS_3_RX_RF_DELAY_IN_MAC_CLK_MASK    ((uint32_t)0x3FF00000)
#define MAC_HW0_MU0_TIMINGS_3_RX_RF_DELAY_IN_MAC_CLK_LSB    20
#define MAC_HW0_MU0_TIMINGS_3_RX_RF_DELAY_IN_MAC_CLK_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_TIMINGS_3_TX_DELAY_RF_ON_IN_MAC_CLK_MASK    ((uint32_t)0x000FFC00)
#define MAC_HW0_MU0_TIMINGS_3_TX_DELAY_RF_ON_IN_MAC_CLK_LSB    10
#define MAC_HW0_MU0_TIMINGS_3_TX_DELAY_RF_ON_IN_MAC_CLK_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_TIMINGS_3_MAC_PROC_DELAY_IN_MAC_CLK_MASK    ((uint32_t)0x000003FF)
#define MAC_HW0_MU0_TIMINGS_3_MAC_PROC_DELAY_IN_MAC_CLK_LSB    0
#define MAC_HW0_MU0_TIMINGS_3_MAC_PROC_DELAY_IN_MAC_CLK_WIDTH    ((uint32_t)0x0000000A)

#define MAC_HW0_MU0_TIMINGS_3_RX_RF_DELAY_IN_MAC_CLK_RST    0x0
#define MAC_HW0_MU0_TIMINGS_3_TX_DELAY_RF_ON_IN_MAC_CLK_RST    0xA0
#define MAC_HW0_MU0_TIMINGS_3_MAC_PROC_DELAY_IN_MAC_CLK_RST    0x48

__INLINE void mac_hw0_mu0_timings_3_pack(uint16_t rx_rf_delay_in_mac_clk, uint16_t tx_delay_rf_on_in_mac_clk, uint16_t mac_proc_delay_in_mac_clk)
{
	ASSERT_ERR((((uint32_t)rx_rf_delay_in_mac_clk << 20) & ~((uint32_t)0x3FF00000)) == 0);
	ASSERT_ERR((((uint32_t)tx_delay_rf_on_in_mac_clk << 10) & ~((uint32_t)0x000FFC00)) == 0);
	ASSERT_ERR((((uint32_t)mac_proc_delay_in_mac_clk << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_3_ADDR,  ((uint32_t)rx_rf_delay_in_mac_clk << 20) |((uint32_t)tx_delay_rf_on_in_mac_clk << 10) |((uint32_t)mac_proc_delay_in_mac_clk << 0));
}

__INLINE void mac_hw0_mu0_timings_3_unpack(uint16_t* rx_rf_delay_in_mac_clk, uint16_t* tx_delay_rf_on_in_mac_clk, uint16_t* mac_proc_delay_in_mac_clk)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_3_ADDR);

	*rx_rf_delay_in_mac_clk = (localVal & ((uint32_t)0x3FF00000)) >>  20;
	*tx_delay_rf_on_in_mac_clk = (localVal & ((uint32_t)0x000FFC00)) >>  10;
	*mac_proc_delay_in_mac_clk = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_timings_3_rx_rf_delay_in_mac_clk_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_3_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x3FF00000)) >> 20);
}
__INLINE void mac_hw0_mu0_timings_3_rx_rf_delay_in_mac_clk_setf(uint16_t rxrfdelayinmacclk)
{
	ASSERT_ERR((((uint32_t)rxrfdelayinmacclk << 20) & ~((uint32_t)0x3FF00000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_3_ADDR) & ~((uint32_t)0x3FF00000)) | ((uint32_t)rxrfdelayinmacclk <<20));
}
__INLINE uint16_t mac_hw0_mu0_timings_3_tx_delay_rf_on_in_mac_clk_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_3_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000FFC00)) >> 10);
}
__INLINE void mac_hw0_mu0_timings_3_tx_delay_rf_on_in_mac_clk_setf(uint16_t txdelayrfoninmacclk)
{
	ASSERT_ERR((((uint32_t)txdelayrfoninmacclk << 10) & ~((uint32_t)0x000FFC00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_3_ADDR) & ~((uint32_t)0x000FFC00)) | ((uint32_t)txdelayrfoninmacclk <<10));
}
__INLINE uint16_t mac_hw0_mu0_timings_3_mac_proc_delay_in_mac_clk_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_3_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void mac_hw0_mu0_timings_3_mac_proc_delay_in_mac_clk_setf(uint16_t macprocdelayinmacclk)
{
	ASSERT_ERR((((uint32_t)macprocdelayinmacclk << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_3_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)macprocdelayinmacclk <<0));
}

/**
 * @brief TIMINGS_4 register definition
 *  Contains protocol timing information. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:22 RADIO_WAKE_UP_TIME        0x15
 *    21:12 RADIO_CHIRP_TIME          0x14
 * </pre>
 */
#define MAC_HW0_MU0_TIMINGS_4_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000F0)
#define MAC_HW0_MU0_TIMINGS_4_OFFSET      0x000000F0
#define MAC_HW0_MU0_TIMINGS_4_INDEX       0x0000003C
#define MAC_HW0_MU0_TIMINGS_4_RESET       0x05414000

__INLINE uint32_t  mac_hw0_mu0_timings_4_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMINGS_4_ADDR);
}

__INLINE void mac_hw0_mu0_timings_4_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_4_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMINGS_4_RADIO_WAKE_UP_TIME_MASK    ((uint32_t)0xFFC00000)
#define MAC_HW0_MU0_TIMINGS_4_RADIO_WAKE_UP_TIME_LSB    22
#define MAC_HW0_MU0_TIMINGS_4_RADIO_WAKE_UP_TIME_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_TIMINGS_4_RADIO_CHIRP_TIME_MASK    ((uint32_t)0x003FF000)
#define MAC_HW0_MU0_TIMINGS_4_RADIO_CHIRP_TIME_LSB    12
#define MAC_HW0_MU0_TIMINGS_4_RADIO_CHIRP_TIME_WIDTH    ((uint32_t)0x0000000A)

#define MAC_HW0_MU0_TIMINGS_4_RADIO_WAKE_UP_TIME_RST    0x15
#define MAC_HW0_MU0_TIMINGS_4_RADIO_CHIRP_TIME_RST    0x14

__INLINE void mac_hw0_mu0_timings_4_pack(uint16_t radio_wake_up_time, uint16_t radio_chirp_time)
{
	ASSERT_ERR((((uint32_t)radio_wake_up_time << 22) & ~((uint32_t)0xFFC00000)) == 0);
	ASSERT_ERR((((uint32_t)radio_chirp_time << 12) & ~((uint32_t)0x003FF000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_4_ADDR,  ((uint32_t)radio_wake_up_time << 22) |((uint32_t)radio_chirp_time << 12));
}

__INLINE void mac_hw0_mu0_timings_4_unpack(uint16_t* radio_wake_up_time, uint16_t* radio_chirp_time)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_4_ADDR);

	*radio_wake_up_time = (localVal & ((uint32_t)0xFFC00000)) >>  22;
	*radio_chirp_time = (localVal & ((uint32_t)0x003FF000)) >>  12;
}

__INLINE uint16_t mac_hw0_mu0_timings_4_radio_wake_up_time_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_4_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFC00000)) >> 22);
}
__INLINE void mac_hw0_mu0_timings_4_radio_wake_up_time_setf(uint16_t radiowakeuptime)
{
	ASSERT_ERR((((uint32_t)radiowakeuptime << 22) & ~((uint32_t)0xFFC00000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_4_ADDR) & ~((uint32_t)0xFFC00000)) | ((uint32_t)radiowakeuptime <<22));
}
__INLINE uint16_t mac_hw0_mu0_timings_4_radio_chirp_time_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_4_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x003FF000)) >> 12);
}
__INLINE void mac_hw0_mu0_timings_4_radio_chirp_time_setf(uint16_t radiochirptime)
{
	ASSERT_ERR((((uint32_t)radiochirptime << 12) & ~((uint32_t)0x003FF000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_4_ADDR) & ~((uint32_t)0x003FF000)) | ((uint32_t)radiochirptime <<12));
}

/**
 * @brief TIMINGS_5 register definition
 *  Contains protocol timing information. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:08 SIFS_B_IN_MAC_CLK         0x640
 *    07:00 SIFS_B                    0xA
 * </pre>
 */
#define MAC_HW0_MU0_TIMINGS_5_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000F4)
#define MAC_HW0_MU0_TIMINGS_5_OFFSET      0x000000F4
#define MAC_HW0_MU0_TIMINGS_5_INDEX       0x0000003D
#define MAC_HW0_MU0_TIMINGS_5_RESET       0x0006400A

__INLINE uint32_t  mac_hw0_mu0_timings_5_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMINGS_5_ADDR);
}

__INLINE void mac_hw0_mu0_timings_5_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_5_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMINGS_5_SIFS_B_IN_MAC_CLK_MASK    ((uint32_t)0x00FFFF00)
#define MAC_HW0_MU0_TIMINGS_5_SIFS_B_IN_MAC_CLK_LSB    8
#define MAC_HW0_MU0_TIMINGS_5_SIFS_B_IN_MAC_CLK_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_TIMINGS_5_SIFS_B_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_TIMINGS_5_SIFS_B_LSB    0
#define MAC_HW0_MU0_TIMINGS_5_SIFS_B_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_TIMINGS_5_SIFS_B_IN_MAC_CLK_RST    0x640
#define MAC_HW0_MU0_TIMINGS_5_SIFS_B_RST    0xA

__INLINE void mac_hw0_mu0_timings_5_pack(uint16_t sifs_b_in_mac_clk, uint8_t sifs_b)
{
	ASSERT_ERR((((uint32_t)sifs_b_in_mac_clk << 8) & ~((uint32_t)0x00FFFF00)) == 0);
	ASSERT_ERR((((uint32_t)sifs_b << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_5_ADDR,  ((uint32_t)sifs_b_in_mac_clk << 8) |((uint32_t)sifs_b << 0));
}

__INLINE void mac_hw0_mu0_timings_5_unpack(uint16_t* sifs_b_in_mac_clk, uint8_t* sifs_b)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_5_ADDR);

	*sifs_b_in_mac_clk = (localVal & ((uint32_t)0x00FFFF00)) >>  8;
	*sifs_b = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_timings_5_sifs_b_in_mac_clk_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_5_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x00FFFF00)) >> 8);
}
__INLINE void mac_hw0_mu0_timings_5_sifs_b_in_mac_clk_setf(uint16_t sifsbinmacclk)
{
	ASSERT_ERR((((uint32_t)sifsbinmacclk << 8) & ~((uint32_t)0x00FFFF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_5_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_5_ADDR) & ~((uint32_t)0x00FFFF00)) | ((uint32_t)sifsbinmacclk <<8));
}
__INLINE uint8_t mac_hw0_mu0_timings_5_sifs_b_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_5_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_timings_5_sifs_b_setf(uint8_t sifsb)
{
	ASSERT_ERR((((uint32_t)sifsb << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_5_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_5_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)sifsb <<0));
}

/**
 * @brief TIMINGS_6 register definition
 *  Contains protocol timing information. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 SEC_CCA_DELAY_IN_MAC_CLK  0x40
 *    23:08 SIFS_A_IN_MAC_CLK         0xA00
 *    07:00 SIFS_A                    0x10
 * </pre>
 */
#define MAC_HW0_MU0_TIMINGS_6_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000F8)
#define MAC_HW0_MU0_TIMINGS_6_OFFSET      0x000000F8
#define MAC_HW0_MU0_TIMINGS_6_INDEX       0x0000003E
#define MAC_HW0_MU0_TIMINGS_6_RESET       0x400A0010

__INLINE uint32_t  mac_hw0_mu0_timings_6_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMINGS_6_ADDR);
}

__INLINE void mac_hw0_mu0_timings_6_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_6_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMINGS_6_SEC_CCA_DELAY_IN_MAC_CLK_MASK    ((uint32_t)0x7F000000)
#define MAC_HW0_MU0_TIMINGS_6_SEC_CCA_DELAY_IN_MAC_CLK_LSB    24
#define MAC_HW0_MU0_TIMINGS_6_SEC_CCA_DELAY_IN_MAC_CLK_WIDTH    ((uint32_t)0x00000007)
#define MAC_HW0_MU0_TIMINGS_6_SIFS_A_IN_MAC_CLK_MASK    ((uint32_t)0x00FFFF00)
#define MAC_HW0_MU0_TIMINGS_6_SIFS_A_IN_MAC_CLK_LSB    8
#define MAC_HW0_MU0_TIMINGS_6_SIFS_A_IN_MAC_CLK_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_TIMINGS_6_SIFS_A_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_TIMINGS_6_SIFS_A_LSB    0
#define MAC_HW0_MU0_TIMINGS_6_SIFS_A_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_TIMINGS_6_SEC_CCA_DELAY_IN_MAC_CLK_RST    0x40
#define MAC_HW0_MU0_TIMINGS_6_SIFS_A_IN_MAC_CLK_RST    0xA00
#define MAC_HW0_MU0_TIMINGS_6_SIFS_A_RST    0x10

__INLINE void mac_hw0_mu0_timings_6_pack(uint8_t sec_cca_delay_in_mac_clk, uint16_t sifs_a_in_mac_clk, uint8_t sifs_a)
{
	ASSERT_ERR((((uint32_t)sec_cca_delay_in_mac_clk << 24) & ~((uint32_t)0x7F000000)) == 0);
	ASSERT_ERR((((uint32_t)sifs_a_in_mac_clk << 8) & ~((uint32_t)0x00FFFF00)) == 0);
	ASSERT_ERR((((uint32_t)sifs_a << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_6_ADDR,  ((uint32_t)sec_cca_delay_in_mac_clk << 24) |((uint32_t)sifs_a_in_mac_clk << 8) |((uint32_t)sifs_a << 0));
}

__INLINE void mac_hw0_mu0_timings_6_unpack(uint8_t* sec_cca_delay_in_mac_clk, uint16_t* sifs_a_in_mac_clk, uint8_t* sifs_a)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_6_ADDR);

	*sec_cca_delay_in_mac_clk = (localVal & ((uint32_t)0x7F000000)) >>  24;
	*sifs_a_in_mac_clk = (localVal & ((uint32_t)0x00FFFF00)) >>  8;
	*sifs_a = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_timings_6_sec_cca_delay_in_mac_clk_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_6_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x7F000000)) >> 24);
}
__INLINE void mac_hw0_mu0_timings_6_sec_cca_delay_in_mac_clk_setf(uint8_t secccadelayinmacclk)
{
	ASSERT_ERR((((uint32_t)secccadelayinmacclk << 24) & ~((uint32_t)0x7F000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_6_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_6_ADDR) & ~((uint32_t)0x7F000000)) | ((uint32_t)secccadelayinmacclk <<24));
}
__INLINE uint16_t mac_hw0_mu0_timings_6_sifs_a_in_mac_clk_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_6_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x00FFFF00)) >> 8);
}
__INLINE void mac_hw0_mu0_timings_6_sifs_a_in_mac_clk_setf(uint16_t sifsainmacclk)
{
	ASSERT_ERR((((uint32_t)sifsainmacclk << 8) & ~((uint32_t)0x00FFFF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_6_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_6_ADDR) & ~((uint32_t)0x00FFFF00)) | ((uint32_t)sifsainmacclk <<8));
}
__INLINE uint8_t mac_hw0_mu0_timings_6_sifs_a_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_6_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_timings_6_sifs_a_setf(uint8_t sifsa)
{
	ASSERT_ERR((((uint32_t)sifsa << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_6_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_6_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)sifsa <<0));
}

/**
 * @brief TIMINGS_7 register definition
 *  Contains protocol timing information. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    28:24 HTP_FLAG_DELAY            0x1
 *    23:16 NDPA_TO_NDP_RX_START_DELAY 0x39
 *    14:12 RX_CCA_20_DELAY           0x1
 *    11:08 RX_CCA_DELAY              0x4
 *    07:00 RIFS                      0x2
 * </pre>
 */
#define MAC_HW0_MU0_TIMINGS_7_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000000FC)
#define MAC_HW0_MU0_TIMINGS_7_OFFSET      0x000000FC
#define MAC_HW0_MU0_TIMINGS_7_INDEX       0x0000003F
#define MAC_HW0_MU0_TIMINGS_7_RESET       0x01391402

__INLINE uint32_t  mac_hw0_mu0_timings_7_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMINGS_7_ADDR);
}

__INLINE void mac_hw0_mu0_timings_7_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_7_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMINGS_7_HTP_FLAG_DELAY_MASK    ((uint32_t)0x1F000000)
#define MAC_HW0_MU0_TIMINGS_7_HTP_FLAG_DELAY_LSB    24
#define MAC_HW0_MU0_TIMINGS_7_HTP_FLAG_DELAY_WIDTH    ((uint32_t)0x00000005)
#define MAC_HW0_MU0_TIMINGS_7_NDPA_TO_NDP_RX_START_DELAY_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_TIMINGS_7_NDPA_TO_NDP_RX_START_DELAY_LSB    16
#define MAC_HW0_MU0_TIMINGS_7_NDPA_TO_NDP_RX_START_DELAY_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TIMINGS_7_RX_CCA_20_DELAY_MASK    ((uint32_t)0x00007000)
#define MAC_HW0_MU0_TIMINGS_7_RX_CCA_20_DELAY_LSB    12
#define MAC_HW0_MU0_TIMINGS_7_RX_CCA_20_DELAY_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_TIMINGS_7_RX_CCA_DELAY_MASK    ((uint32_t)0x00000F00)
#define MAC_HW0_MU0_TIMINGS_7_RX_CCA_DELAY_LSB    8
#define MAC_HW0_MU0_TIMINGS_7_RX_CCA_DELAY_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_TIMINGS_7_RIFS_MASK     ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_TIMINGS_7_RIFS_LSB      0
#define MAC_HW0_MU0_TIMINGS_7_RIFS_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_TIMINGS_7_HTP_FLAG_DELAY_RST    0x1
#define MAC_HW0_MU0_TIMINGS_7_NDPA_TO_NDP_RX_START_DELAY_RST    0x39
#define MAC_HW0_MU0_TIMINGS_7_RX_CCA_20_DELAY_RST    0x1
#define MAC_HW0_MU0_TIMINGS_7_RX_CCA_DELAY_RST    0x4
#define MAC_HW0_MU0_TIMINGS_7_RIFS_RST      0x2

__INLINE void mac_hw0_mu0_timings_7_pack(uint8_t htp_flag_delay, uint8_t ndpa_to_ndp_rx_start_delay, uint8_t rx_cca_20_delay, uint8_t rx_cca_delay, uint8_t rifs)
{
	ASSERT_ERR((((uint32_t)htp_flag_delay << 24) & ~((uint32_t)0x1F000000)) == 0);
	ASSERT_ERR((((uint32_t)ndpa_to_ndp_rx_start_delay << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)rx_cca_20_delay << 12) & ~((uint32_t)0x00007000)) == 0);
	ASSERT_ERR((((uint32_t)rx_cca_delay << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)rifs << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_7_ADDR,  ((uint32_t)htp_flag_delay << 24) |((uint32_t)ndpa_to_ndp_rx_start_delay << 16) |((uint32_t)rx_cca_20_delay << 12) |((uint32_t)rx_cca_delay << 8) |((uint32_t)rifs << 0));
}

__INLINE void mac_hw0_mu0_timings_7_unpack(uint8_t* htp_flag_delay, uint8_t* ndpa_to_ndp_rx_start_delay, uint8_t* rx_cca_20_delay, uint8_t* rx_cca_delay, uint8_t* rifs)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_7_ADDR);

	*htp_flag_delay = (localVal & ((uint32_t)0x1F000000)) >>  24;
	*ndpa_to_ndp_rx_start_delay = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*rx_cca_20_delay = (localVal & ((uint32_t)0x00007000)) >>  12;
	*rx_cca_delay = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*rifs = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_timings_7_htp_flag_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_7_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x1F000000)) >> 24);
}
__INLINE void mac_hw0_mu0_timings_7_htp_flag_delay_setf(uint8_t htpflagdelay)
{
	ASSERT_ERR((((uint32_t)htpflagdelay << 24) & ~((uint32_t)0x1F000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_7_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_7_ADDR) & ~((uint32_t)0x1F000000)) | ((uint32_t)htpflagdelay <<24));
}
__INLINE uint8_t mac_hw0_mu0_timings_7_ndpa_to_ndp_rx_start_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_7_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_timings_7_ndpa_to_ndp_rx_start_delay_setf(uint8_t ndpatondprxstartdelay)
{
	ASSERT_ERR((((uint32_t)ndpatondprxstartdelay << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_7_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_7_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)ndpatondprxstartdelay <<16));
}
__INLINE uint8_t mac_hw0_mu0_timings_7_rx_cca_20_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_7_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00007000)) >> 12);
}
__INLINE void mac_hw0_mu0_timings_7_rx_cca_20_delay_setf(uint8_t rxcca20delay)
{
	ASSERT_ERR((((uint32_t)rxcca20delay << 12) & ~((uint32_t)0x00007000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_7_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_7_ADDR) & ~((uint32_t)0x00007000)) | ((uint32_t)rxcca20delay <<12));
}
__INLINE uint8_t mac_hw0_mu0_timings_7_rx_cca_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_7_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void mac_hw0_mu0_timings_7_rx_cca_delay_setf(uint8_t rxccadelay)
{
	ASSERT_ERR((((uint32_t)rxccadelay << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_7_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_7_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)rxccadelay <<8));
}
__INLINE uint8_t mac_hw0_mu0_timings_7_rifs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_7_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_timings_7_rifs_setf(uint8_t rifs)
{
	ASSERT_ERR((((uint32_t)rifs << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_7_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_7_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)rifs <<0));
}

/**
 * @brief TIMINGS_8 register definition
 *  Contains protocol timing information. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 RX_START_DELAY_MIMO       0x21
 *    23:16 RX_START_DELAY_SHORT      0x60
 *    15:08 RX_START_DELAY_LONG       0xD2
 *    07:00 RX_START_DELAY_OFDM       0x21
 * </pre>
 */
#define MAC_HW0_MU0_TIMINGS_8_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000100)
#define MAC_HW0_MU0_TIMINGS_8_OFFSET      0x00000100
#define MAC_HW0_MU0_TIMINGS_8_INDEX       0x00000040
#define MAC_HW0_MU0_TIMINGS_8_RESET       0x2160D221

__INLINE uint32_t  mac_hw0_mu0_timings_8_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMINGS_8_ADDR);
}

__INLINE void mac_hw0_mu0_timings_8_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_8_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMINGS_8_RX_START_DELAY_MIMO_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_TIMINGS_8_RX_START_DELAY_MIMO_LSB    24
#define MAC_HW0_MU0_TIMINGS_8_RX_START_DELAY_MIMO_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TIMINGS_8_RX_START_DELAY_SHORT_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_TIMINGS_8_RX_START_DELAY_SHORT_LSB    16
#define MAC_HW0_MU0_TIMINGS_8_RX_START_DELAY_SHORT_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TIMINGS_8_RX_START_DELAY_LONG_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_TIMINGS_8_RX_START_DELAY_LONG_LSB    8
#define MAC_HW0_MU0_TIMINGS_8_RX_START_DELAY_LONG_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TIMINGS_8_RX_START_DELAY_OFDM_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_TIMINGS_8_RX_START_DELAY_OFDM_LSB    0
#define MAC_HW0_MU0_TIMINGS_8_RX_START_DELAY_OFDM_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_TIMINGS_8_RX_START_DELAY_MIMO_RST    0x21
#define MAC_HW0_MU0_TIMINGS_8_RX_START_DELAY_SHORT_RST    0x60
#define MAC_HW0_MU0_TIMINGS_8_RX_START_DELAY_LONG_RST    0xD2
#define MAC_HW0_MU0_TIMINGS_8_RX_START_DELAY_OFDM_RST    0x21

__INLINE void mac_hw0_mu0_timings_8_pack(uint8_t rx_start_delay_mimo, uint8_t rx_start_delay_short, uint8_t rx_start_delay_long, uint8_t rx_start_delay_ofdm)
{
	ASSERT_ERR((((uint32_t)rx_start_delay_mimo << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_start_delay_short << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)rx_start_delay_long << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)rx_start_delay_ofdm << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_8_ADDR,  ((uint32_t)rx_start_delay_mimo << 24) |((uint32_t)rx_start_delay_short << 16) |((uint32_t)rx_start_delay_long << 8) |((uint32_t)rx_start_delay_ofdm << 0));
}

__INLINE void mac_hw0_mu0_timings_8_unpack(uint8_t* rx_start_delay_mimo, uint8_t* rx_start_delay_short, uint8_t* rx_start_delay_long, uint8_t* rx_start_delay_ofdm)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_8_ADDR);

	*rx_start_delay_mimo = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*rx_start_delay_short = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*rx_start_delay_long = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*rx_start_delay_ofdm = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_timings_8_rx_start_delay_mimo_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_8_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_timings_8_rx_start_delay_mimo_setf(uint8_t rxstartdelaymimo)
{
	ASSERT_ERR((((uint32_t)rxstartdelaymimo << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_8_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_8_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)rxstartdelaymimo <<24));
}
__INLINE uint8_t mac_hw0_mu0_timings_8_rx_start_delay_short_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_8_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_timings_8_rx_start_delay_short_setf(uint8_t rxstartdelayshort)
{
	ASSERT_ERR((((uint32_t)rxstartdelayshort << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_8_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_8_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)rxstartdelayshort <<16));
}
__INLINE uint8_t mac_hw0_mu0_timings_8_rx_start_delay_long_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_8_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_timings_8_rx_start_delay_long_setf(uint8_t rxstartdelaylong)
{
	ASSERT_ERR((((uint32_t)rxstartdelaylong << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_8_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_8_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)rxstartdelaylong <<8));
}
__INLINE uint8_t mac_hw0_mu0_timings_8_rx_start_delay_ofdm_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_8_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_timings_8_rx_start_delay_ofdm_setf(uint8_t rxstartdelayofdm)
{
	ASSERT_ERR((((uint32_t)rxstartdelayofdm << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_8_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_8_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)rxstartdelayofdm <<0));
}

/**
 * @brief TIMINGS_9 register definition
 *  Contains protocol timing information. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:20 RIFS_TO_IN_MAC_CLK        0x320
 *    19:10 RIFS_IN_MAC_CLK           0x140
 *    09:00 TX_DMA_PROC_DLY_IN_MAC_CLK 0xF0
 * </pre>
 */
#define MAC_HW0_MU0_TIMINGS_9_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000104)
#define MAC_HW0_MU0_TIMINGS_9_OFFSET      0x00000104
#define MAC_HW0_MU0_TIMINGS_9_INDEX       0x00000041
#define MAC_HW0_MU0_TIMINGS_9_RESET       0x320500F0

__INLINE uint32_t  mac_hw0_mu0_timings_9_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMINGS_9_ADDR);
}

__INLINE void mac_hw0_mu0_timings_9_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_9_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMINGS_9_RIFS_TO_IN_MAC_CLK_MASK    ((uint32_t)0xFFF00000)
#define MAC_HW0_MU0_TIMINGS_9_RIFS_TO_IN_MAC_CLK_LSB    20
#define MAC_HW0_MU0_TIMINGS_9_RIFS_TO_IN_MAC_CLK_WIDTH    ((uint32_t)0x0000000C)
#define MAC_HW0_MU0_TIMINGS_9_RIFS_IN_MAC_CLK_MASK    ((uint32_t)0x000FFC00)
#define MAC_HW0_MU0_TIMINGS_9_RIFS_IN_MAC_CLK_LSB    10
#define MAC_HW0_MU0_TIMINGS_9_RIFS_IN_MAC_CLK_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_TIMINGS_9_TX_DMA_PROC_DLY_IN_MAC_CLK_MASK    ((uint32_t)0x000003FF)
#define MAC_HW0_MU0_TIMINGS_9_TX_DMA_PROC_DLY_IN_MAC_CLK_LSB    0
#define MAC_HW0_MU0_TIMINGS_9_TX_DMA_PROC_DLY_IN_MAC_CLK_WIDTH    ((uint32_t)0x0000000A)

#define MAC_HW0_MU0_TIMINGS_9_RIFS_TO_IN_MAC_CLK_RST    0x320
#define MAC_HW0_MU0_TIMINGS_9_RIFS_IN_MAC_CLK_RST    0x140
#define MAC_HW0_MU0_TIMINGS_9_TX_DMA_PROC_DLY_IN_MAC_CLK_RST    0xF0

__INLINE void mac_hw0_mu0_timings_9_pack(uint16_t rifs_to_in_mac_clk, uint16_t rifs_in_mac_clk, uint16_t tx_dma_proc_dly_in_mac_clk)
{
	ASSERT_ERR((((uint32_t)rifs_to_in_mac_clk << 20) & ~((uint32_t)0xFFF00000)) == 0);
	ASSERT_ERR((((uint32_t)rifs_in_mac_clk << 10) & ~((uint32_t)0x000FFC00)) == 0);
	ASSERT_ERR((((uint32_t)tx_dma_proc_dly_in_mac_clk << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_9_ADDR,  ((uint32_t)rifs_to_in_mac_clk << 20) |((uint32_t)rifs_in_mac_clk << 10) |((uint32_t)tx_dma_proc_dly_in_mac_clk << 0));
}

__INLINE void mac_hw0_mu0_timings_9_unpack(uint16_t* rifs_to_in_mac_clk, uint16_t* rifs_in_mac_clk, uint16_t* tx_dma_proc_dly_in_mac_clk)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_9_ADDR);

	*rifs_to_in_mac_clk = (localVal & ((uint32_t)0xFFF00000)) >>  20;
	*rifs_in_mac_clk = (localVal & ((uint32_t)0x000FFC00)) >>  10;
	*tx_dma_proc_dly_in_mac_clk = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_timings_9_rifs_to_in_mac_clk_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_9_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFF00000)) >> 20);
}
__INLINE void mac_hw0_mu0_timings_9_rifs_to_in_mac_clk_setf(uint16_t rifstoinmacclk)
{
	ASSERT_ERR((((uint32_t)rifstoinmacclk << 20) & ~((uint32_t)0xFFF00000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_9_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_9_ADDR) & ~((uint32_t)0xFFF00000)) | ((uint32_t)rifstoinmacclk <<20));
}
__INLINE uint16_t mac_hw0_mu0_timings_9_rifs_in_mac_clk_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_9_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000FFC00)) >> 10);
}
__INLINE void mac_hw0_mu0_timings_9_rifs_in_mac_clk_setf(uint16_t rifsinmacclk)
{
	ASSERT_ERR((((uint32_t)rifsinmacclk << 10) & ~((uint32_t)0x000FFC00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_9_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_9_ADDR) & ~((uint32_t)0x000FFC00)) | ((uint32_t)rifsinmacclk <<10));
}
__INLINE uint16_t mac_hw0_mu0_timings_9_tx_dma_proc_dly_in_mac_clk_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_9_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void mac_hw0_mu0_timings_9_tx_dma_proc_dly_in_mac_clk_setf(uint16_t txdmaprocdlyinmacclk)
{
	ASSERT_ERR((((uint32_t)txdmaprocdlyinmacclk << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_9_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_9_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)txdmaprocdlyinmacclk <<0));
}

/**
 * @brief TIMINGS_10 register definition
 *  Controls timing and delay parameters register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 CCA_MASK_TIME_IN_MAC_CLOCKS 0x0
 *    03:00 SECOND_ATHD_READ_DELAY    0x4
 * </pre>
 */
#define MAC_HW0_MU0_TIMINGS_10_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000108)
#define MAC_HW0_MU0_TIMINGS_10_OFFSET      0x00000108
#define MAC_HW0_MU0_TIMINGS_10_INDEX       0x00000042
#define MAC_HW0_MU0_TIMINGS_10_RESET       0x00000004

__INLINE uint32_t  mac_hw0_mu0_timings_10_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMINGS_10_ADDR);
}

__INLINE void mac_hw0_mu0_timings_10_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_10_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMINGS_10_CCA_MASK_TIME_IN_MAC_CLOCKS_MASK    ((uint32_t)0xFFFF0000)
#define MAC_HW0_MU0_TIMINGS_10_CCA_MASK_TIME_IN_MAC_CLOCKS_LSB    16
#define MAC_HW0_MU0_TIMINGS_10_CCA_MASK_TIME_IN_MAC_CLOCKS_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_TIMINGS_10_SECOND_ATHD_READ_DELAY_MASK    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_TIMINGS_10_SECOND_ATHD_READ_DELAY_LSB    0
#define MAC_HW0_MU0_TIMINGS_10_SECOND_ATHD_READ_DELAY_WIDTH    ((uint32_t)0x00000004)

#define MAC_HW0_MU0_TIMINGS_10_CCA_MASK_TIME_IN_MAC_CLOCKS_RST    0x0
#define MAC_HW0_MU0_TIMINGS_10_SECOND_ATHD_READ_DELAY_RST    0x4

__INLINE void mac_hw0_mu0_timings_10_pack(uint16_t cca_mask_time_in_mac_clocks, uint8_t second_athd_read_delay)
{
	ASSERT_ERR((((uint32_t)cca_mask_time_in_mac_clocks << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)second_athd_read_delay << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_10_ADDR,  ((uint32_t)cca_mask_time_in_mac_clocks << 16) |((uint32_t)second_athd_read_delay << 0));
}

__INLINE void mac_hw0_mu0_timings_10_unpack(uint16_t* cca_mask_time_in_mac_clocks, uint8_t* second_athd_read_delay)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_10_ADDR);

	*cca_mask_time_in_mac_clocks = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*second_athd_read_delay = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_timings_10_cca_mask_time_in_mac_clocks_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_10_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_timings_10_cca_mask_time_in_mac_clocks_setf(uint16_t ccamasktimeinmacclocks)
{
	ASSERT_ERR((((uint32_t)ccamasktimeinmacclocks << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_10_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_10_ADDR) & ~((uint32_t)0xFFFF0000)) | ((uint32_t)ccamasktimeinmacclocks <<16));
}
__INLINE uint8_t mac_hw0_mu0_timings_10_second_athd_read_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_10_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void mac_hw0_mu0_timings_10_second_athd_read_delay_setf(uint8_t secondathdreaddelay)
{
	ASSERT_ERR((((uint32_t)secondathdreaddelay << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_10_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_10_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)secondathdreaddelay <<0));
}

/**
 * @brief PROT_TRIG_TIMER register definition
 *  Contains timers for early protocol triggers. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 HCCA_TRIGGER_TIMER        0x0
 *    07:00 EDCA_TRIGGER_TIMER        0x9
 * </pre>
 */
#define MAC_HW0_MU0_PROT_TRIG_TIMER_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000010C)
#define MAC_HW0_MU0_PROT_TRIG_TIMER_OFFSET      0x0000010C
#define MAC_HW0_MU0_PROT_TRIG_TIMER_INDEX       0x00000043
#define MAC_HW0_MU0_PROT_TRIG_TIMER_RESET       0x00000009

__INLINE uint32_t  mac_hw0_mu0_prot_trig_timer_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_PROT_TRIG_TIMER_ADDR);
}

__INLINE void mac_hw0_mu0_prot_trig_timer_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_PROT_TRIG_TIMER_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_PROT_TRIG_TIMER_HCCA_TRIGGER_TIMER_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_PROT_TRIG_TIMER_HCCA_TRIGGER_TIMER_LSB    8
#define MAC_HW0_MU0_PROT_TRIG_TIMER_HCCA_TRIGGER_TIMER_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_PROT_TRIG_TIMER_EDCA_TRIGGER_TIMER_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_PROT_TRIG_TIMER_EDCA_TRIGGER_TIMER_LSB    0
#define MAC_HW0_MU0_PROT_TRIG_TIMER_EDCA_TRIGGER_TIMER_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_PROT_TRIG_TIMER_HCCA_TRIGGER_TIMER_RST    0x0
#define MAC_HW0_MU0_PROT_TRIG_TIMER_EDCA_TRIGGER_TIMER_RST    0x9

__INLINE void mac_hw0_mu0_prot_trig_timer_pack(uint8_t hcca_trigger_timer, uint8_t edca_trigger_timer)
{
	ASSERT_ERR((((uint32_t)hcca_trigger_timer << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)edca_trigger_timer << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PROT_TRIG_TIMER_ADDR,  ((uint32_t)hcca_trigger_timer << 8) |((uint32_t)edca_trigger_timer << 0));
}

__INLINE void mac_hw0_mu0_prot_trig_timer_unpack(uint8_t* hcca_trigger_timer, uint8_t* edca_trigger_timer)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PROT_TRIG_TIMER_ADDR);

	*hcca_trigger_timer = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*edca_trigger_timer = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_prot_trig_timer_hcca_trigger_timer_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PROT_TRIG_TIMER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_prot_trig_timer_edca_trigger_timer_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PROT_TRIG_TIMER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_prot_trig_timer_edca_trigger_timer_setf(uint8_t edcatriggertimer)
{
	ASSERT_ERR((((uint32_t)edcatriggertimer << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PROT_TRIG_TIMER_ADDR, (REG_PL_RD(MAC_HW0_MU0_PROT_TRIG_TIMER_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)edcatriggertimer <<0));
}

/**
 * @brief TX_TRIGGER_TIMER register definition
 *  Contains timers for transmit interrupt moderation. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 TX_PACKET_TIMEOUT         0xF
 *    07:00 TX_ABSOLUTE_TIMEOUT       0x9C
 * </pre>
 */
#define MAC_HW0_MU0_TX_TRIGGER_TIMER_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000110)
#define MAC_HW0_MU0_TX_TRIGGER_TIMER_OFFSET      0x00000110
#define MAC_HW0_MU0_TX_TRIGGER_TIMER_INDEX       0x00000044
#define MAC_HW0_MU0_TX_TRIGGER_TIMER_RESET       0x00000F9C

__INLINE uint32_t  mac_hw0_mu0_tx_trigger_timer_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_TRIGGER_TIMER_ADDR);
}

__INLINE void mac_hw0_mu0_tx_trigger_timer_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_TRIGGER_TIMER_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_TRIGGER_TIMER_TX_PACKET_TIMEOUT_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_TX_TRIGGER_TIMER_TX_PACKET_TIMEOUT_LSB    8
#define MAC_HW0_MU0_TX_TRIGGER_TIMER_TX_PACKET_TIMEOUT_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_TRIGGER_TIMER_TX_ABSOLUTE_TIMEOUT_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_TX_TRIGGER_TIMER_TX_ABSOLUTE_TIMEOUT_LSB    0
#define MAC_HW0_MU0_TX_TRIGGER_TIMER_TX_ABSOLUTE_TIMEOUT_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_TX_TRIGGER_TIMER_TX_PACKET_TIMEOUT_RST    0xF
#define MAC_HW0_MU0_TX_TRIGGER_TIMER_TX_ABSOLUTE_TIMEOUT_RST    0x9C

__INLINE void mac_hw0_mu0_tx_trigger_timer_pack(uint8_t tx_packet_timeout, uint8_t tx_absolute_timeout)
{
	ASSERT_ERR((((uint32_t)tx_packet_timeout << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)tx_absolute_timeout << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_TRIGGER_TIMER_ADDR,  ((uint32_t)tx_packet_timeout << 8) |((uint32_t)tx_absolute_timeout << 0));
}

__INLINE void mac_hw0_mu0_tx_trigger_timer_unpack(uint8_t* tx_packet_timeout, uint8_t* tx_absolute_timeout)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_TRIGGER_TIMER_ADDR);

	*tx_packet_timeout = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*tx_absolute_timeout = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_tx_trigger_timer_tx_packet_timeout_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_TRIGGER_TIMER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_trigger_timer_tx_packet_timeout_setf(uint8_t txpackettimeout)
{
	ASSERT_ERR((((uint32_t)txpackettimeout << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_TRIGGER_TIMER_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_TRIGGER_TIMER_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)txpackettimeout <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_trigger_timer_tx_absolute_timeout_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_TRIGGER_TIMER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_tx_trigger_timer_tx_absolute_timeout_setf(uint8_t txabsolutetimeout)
{
	ASSERT_ERR((((uint32_t)txabsolutetimeout << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_TRIGGER_TIMER_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_TRIGGER_TIMER_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)txabsolutetimeout <<0));
}

/**
 * @brief RX_TRIGGER_TIMER register definition
 *  Contains timers for receive interrupt moderation. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:16 RX_PAYLOAD_USED_COUNT     0xF
 *    15:08 RX_PACKET_TIMEOUT         0xF
 *    07:00 RX_ABSOLUTE_TIMEOUT       0x9C
 * </pre>
 */
#define MAC_HW0_MU0_RX_TRIGGER_TIMER_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000114)
#define MAC_HW0_MU0_RX_TRIGGER_TIMER_OFFSET      0x00000114
#define MAC_HW0_MU0_RX_TRIGGER_TIMER_INDEX       0x00000045
#define MAC_HW0_MU0_RX_TRIGGER_TIMER_RESET       0x000F0F9C

__INLINE uint32_t  mac_hw0_mu0_rx_trigger_timer_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_TRIGGER_TIMER_ADDR);
}

__INLINE void mac_hw0_mu0_rx_trigger_timer_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_TRIGGER_TIMER_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_TRIGGER_TIMER_RX_PAYLOAD_USED_COUNT_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_RX_TRIGGER_TIMER_RX_PAYLOAD_USED_COUNT_LSB    16
#define MAC_HW0_MU0_RX_TRIGGER_TIMER_RX_PAYLOAD_USED_COUNT_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_TRIGGER_TIMER_RX_PACKET_TIMEOUT_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_RX_TRIGGER_TIMER_RX_PACKET_TIMEOUT_LSB    8
#define MAC_HW0_MU0_RX_TRIGGER_TIMER_RX_PACKET_TIMEOUT_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_TRIGGER_TIMER_RX_ABSOLUTE_TIMEOUT_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_RX_TRIGGER_TIMER_RX_ABSOLUTE_TIMEOUT_LSB    0
#define MAC_HW0_MU0_RX_TRIGGER_TIMER_RX_ABSOLUTE_TIMEOUT_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_RX_TRIGGER_TIMER_RX_PAYLOAD_USED_COUNT_RST    0xF
#define MAC_HW0_MU0_RX_TRIGGER_TIMER_RX_PACKET_TIMEOUT_RST    0xF
#define MAC_HW0_MU0_RX_TRIGGER_TIMER_RX_ABSOLUTE_TIMEOUT_RST    0x9C

__INLINE void mac_hw0_mu0_rx_trigger_timer_pack(uint8_t rx_payload_used_count, uint8_t rx_packet_timeout, uint8_t rx_absolute_timeout)
{
	ASSERT_ERR((((uint32_t)rx_payload_used_count << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)rx_packet_timeout << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)rx_absolute_timeout << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_TRIGGER_TIMER_ADDR,  ((uint32_t)rx_payload_used_count << 16) |((uint32_t)rx_packet_timeout << 8) |((uint32_t)rx_absolute_timeout << 0));
}

__INLINE void mac_hw0_mu0_rx_trigger_timer_unpack(uint8_t* rx_payload_used_count, uint8_t* rx_packet_timeout, uint8_t* rx_absolute_timeout)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIGGER_TIMER_ADDR);

	*rx_payload_used_count = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*rx_packet_timeout = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*rx_absolute_timeout = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_trigger_timer_rx_payload_used_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIGGER_TIMER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_trigger_timer_rx_payload_used_count_setf(uint8_t rxpayloadusedcount)
{
	ASSERT_ERR((((uint32_t)rxpayloadusedcount << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_TRIGGER_TIMER_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_TRIGGER_TIMER_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)rxpayloadusedcount <<16));
}
__INLINE uint8_t mac_hw0_mu0_rx_trigger_timer_rx_packet_timeout_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIGGER_TIMER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_rx_trigger_timer_rx_packet_timeout_setf(uint8_t rxpackettimeout)
{
	ASSERT_ERR((((uint32_t)rxpackettimeout << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_TRIGGER_TIMER_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_TRIGGER_TIMER_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)rxpackettimeout <<8));
}
__INLINE uint8_t mac_hw0_mu0_rx_trigger_timer_rx_absolute_timeout_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIGGER_TIMER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_trigger_timer_rx_absolute_timeout_setf(uint8_t rxabsolutetimeout)
{
	ASSERT_ERR((((uint32_t)rxabsolutetimeout << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_TRIGGER_TIMER_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_TRIGGER_TIMER_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)rxabsolutetimeout <<0));
}

/**
 * @brief MIB_TABLE_WRITE register definition
 *  Window register used to write to the MIB Table from software. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 MIB_VALUE                 0x0
 *    15    MIB_WRITE                 0              
 *    14    MIB_INCREMENT_MODE        1              
 *    09:00 MIB_TABLE_INDEX           0x0
 * </pre>
 */
#define MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000118)
#define MAC_HW0_MU0_MIB_TABLE_WRITE_OFFSET      0x00000118
#define MAC_HW0_MU0_MIB_TABLE_WRITE_INDEX       0x00000046
#define MAC_HW0_MU0_MIB_TABLE_WRITE_RESET       0x00004000

__INLINE uint32_t  mac_hw0_mu0_mib_table_write_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR);
}

__INLINE void mac_hw0_mu0_mib_table_write_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MIB_TABLE_WRITE_MIB_VALUE_MASK    ((uint32_t)0xFFFF0000)
#define MAC_HW0_MU0_MIB_TABLE_WRITE_MIB_VALUE_LSB    16
#define MAC_HW0_MU0_MIB_TABLE_WRITE_MIB_VALUE_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_MIB_TABLE_WRITE_MIB_WRITE_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_MIB_TABLE_WRITE_MIB_WRITE_POS    15
#define MAC_HW0_MU0_MIB_TABLE_WRITE_MIB_INCREMENT_MODE_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_MIB_TABLE_WRITE_MIB_INCREMENT_MODE_POS    14
#define MAC_HW0_MU0_MIB_TABLE_WRITE_MIB_TABLE_INDEX_MASK    ((uint32_t)0x000003FF)
#define MAC_HW0_MU0_MIB_TABLE_WRITE_MIB_TABLE_INDEX_LSB    0
#define MAC_HW0_MU0_MIB_TABLE_WRITE_MIB_TABLE_INDEX_WIDTH    ((uint32_t)0x0000000A)

#define MAC_HW0_MU0_MIB_TABLE_WRITE_MIB_VALUE_RST    0x0
#define MAC_HW0_MU0_MIB_TABLE_WRITE_MIB_WRITE_RST    0x0
#define MAC_HW0_MU0_MIB_TABLE_WRITE_MIB_INCREMENT_MODE_RST    0x1
#define MAC_HW0_MU0_MIB_TABLE_WRITE_MIB_TABLE_INDEX_RST    0x0

__INLINE void mac_hw0_mu0_mib_table_write_pack(uint16_t mib_value, uint8_t mib_write, uint8_t mib_increment_mode, uint16_t mib_table_index)
{
	ASSERT_ERR((((uint32_t)mib_value << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)mib_write << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)mib_increment_mode << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)mib_table_index << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR,  ((uint32_t)mib_value << 16) |((uint32_t)mib_write << 15) |((uint32_t)mib_increment_mode << 14) |((uint32_t)mib_table_index << 0));
}

__INLINE void mac_hw0_mu0_mib_table_write_unpack(uint16_t* mib_value, uint8_t* mib_write, uint8_t* mib_increment_mode, uint16_t* mib_table_index)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR);

	*mib_value = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*mib_write = (localVal & ((uint32_t)0x00008000)) >>  15;
	*mib_increment_mode = (localVal & ((uint32_t)0x00004000)) >>  14;
	*mib_table_index = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_mib_table_write_mib_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_mib_table_write_mib_value_setf(uint16_t mibvalue)
{
	ASSERT_ERR((((uint32_t)mibvalue << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR, (REG_PL_RD(MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR) & ~((uint32_t)0xFFFF0000)) | ((uint32_t)mibvalue <<16));
}
__INLINE uint8_t mac_hw0_mu0_mib_table_write_mib_write_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void mac_hw0_mu0_mib_table_write_mib_write_setf(uint8_t mibwrite)
{
	ASSERT_ERR((((uint32_t)mibwrite << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR, (REG_PL_RD(MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)mibwrite <<15));
}
__INLINE uint8_t mac_hw0_mu0_mib_table_write_mib_increment_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_mib_table_write_mib_increment_mode_setf(uint8_t mibincrementmode)
{
	ASSERT_ERR((((uint32_t)mibincrementmode << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR, (REG_PL_RD(MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)mibincrementmode <<14));
}
__INLINE uint16_t mac_hw0_mu0_mib_table_write_mib_table_index_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void mac_hw0_mu0_mib_table_write_mib_table_index_setf(uint16_t mibtableindex)
{
	ASSERT_ERR((((uint32_t)mibtableindex << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR, (REG_PL_RD(MAC_HW0_MU0_MIB_TABLE_WRITE_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)mibtableindex <<0));
}

/**
 * @brief MONOTONIC_COUNTER_1 register definition
 *  General purpose timer provided to SW. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 MONOTONIC_COUNTER_1       0x0
 * </pre>
 */
#define MAC_HW0_MU0_MONOTONIC_COUNTER_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000011C)
#define MAC_HW0_MU0_MONOTONIC_COUNTER_1_OFFSET      0x0000011C
#define MAC_HW0_MU0_MONOTONIC_COUNTER_1_INDEX       0x00000047
#define MAC_HW0_MU0_MONOTONIC_COUNTER_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_monotonic_counter_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MONOTONIC_COUNTER_1_ADDR);
}

// field definitions
#define MAC_HW0_MU0_MONOTONIC_COUNTER_1_MONOTONIC_COUNTER_1_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_MONOTONIC_COUNTER_1_MONOTONIC_COUNTER_1_LSB    0
#define MAC_HW0_MU0_MONOTONIC_COUNTER_1_MONOTONIC_COUNTER_1_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_MONOTONIC_COUNTER_1_MONOTONIC_COUNTER_1_RST    0x0

__INLINE uint32_t mac_hw0_mu0_monotonic_counter_1_monotonic_counter_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MONOTONIC_COUNTER_1_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief MONOTONIC_COUNTER_2_LO register definition
 *  General purpose timer provided to SW. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 MONOTONIC_COUNTER_LOW_2   0x0
 * </pre>
 */
#define MAC_HW0_MU0_MONOTONIC_COUNTER_2_LO_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000120)
#define MAC_HW0_MU0_MONOTONIC_COUNTER_2_LO_OFFSET      0x00000120
#define MAC_HW0_MU0_MONOTONIC_COUNTER_2_LO_INDEX       0x00000048
#define MAC_HW0_MU0_MONOTONIC_COUNTER_2_LO_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_monotonic_counter_2_lo_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MONOTONIC_COUNTER_2_LO_ADDR);
}

// field definitions
#define MAC_HW0_MU0_MONOTONIC_COUNTER_2_LO_MONOTONIC_COUNTER_LOW_2_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_MONOTONIC_COUNTER_2_LO_MONOTONIC_COUNTER_LOW_2_LSB    0
#define MAC_HW0_MU0_MONOTONIC_COUNTER_2_LO_MONOTONIC_COUNTER_LOW_2_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_MONOTONIC_COUNTER_2_LO_MONOTONIC_COUNTER_LOW_2_RST    0x0

__INLINE uint32_t mac_hw0_mu0_monotonic_counter_2_lo_monotonic_counter_low_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MONOTONIC_COUNTER_2_LO_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief MONOTONIC_COUNTER_2_HI register definition
 *  General purpose timer provided to SW. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 MONOTONIC_COUNTER_HIGH_2  0x0
 * </pre>
 */
#define MAC_HW0_MU0_MONOTONIC_COUNTER_2_HI_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000124)
#define MAC_HW0_MU0_MONOTONIC_COUNTER_2_HI_OFFSET      0x00000124
#define MAC_HW0_MU0_MONOTONIC_COUNTER_2_HI_INDEX       0x00000049
#define MAC_HW0_MU0_MONOTONIC_COUNTER_2_HI_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_monotonic_counter_2_hi_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MONOTONIC_COUNTER_2_HI_ADDR);
}

// field definitions
#define MAC_HW0_MU0_MONOTONIC_COUNTER_2_HI_MONOTONIC_COUNTER_HIGH_2_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_MONOTONIC_COUNTER_2_HI_MONOTONIC_COUNTER_HIGH_2_LSB    0
#define MAC_HW0_MU0_MONOTONIC_COUNTER_2_HI_MONOTONIC_COUNTER_HIGH_2_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_MONOTONIC_COUNTER_2_HI_MONOTONIC_COUNTER_HIGH_2_RST    0x0

__INLINE uint16_t mac_hw0_mu0_monotonic_counter_2_hi_monotonic_counter_high_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MONOTONIC_COUNTER_2_HI_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief ABS_TIMER_0 register definition
 *  General purpose counter provided to SW. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ABS_TIMER0_VALUE          0x0
 * </pre>
 */
#define MAC_HW0_MU0_ABS_TIMER_0_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000128)
#define MAC_HW0_MU0_ABS_TIMER_0_OFFSET      0x00000128
#define MAC_HW0_MU0_ABS_TIMER_0_INDEX       0x0000004A
#define MAC_HW0_MU0_ABS_TIMER_0_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_abs_timer_0_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_0_ADDR);
}

__INLINE void mac_hw0_mu0_abs_timer_0_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_0_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ABS_TIMER_0_ABS_TIMER_0_VALUE_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ABS_TIMER_0_ABS_TIMER_0_VALUE_LSB    0
#define MAC_HW0_MU0_ABS_TIMER_0_ABS_TIMER_0_VALUE_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ABS_TIMER_0_ABS_TIMER_0_VALUE_RST    0x0

__INLINE uint32_t mac_hw0_mu0_abs_timer_0_abs_timer_0_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_0_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_abs_timer_0_abs_timer_0_value_setf(uint32_t abstimer0value)
{
	ASSERT_ERR((((uint32_t)abstimer0value << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_0_ADDR, (uint32_t)abstimer0value << 0);
}

/**
 * @brief ABS_TIMER_1 register definition
 *  General purpose counter provided to SW. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ABS_TIMER1_VALUE          0x0
 * </pre>
 */
#define MAC_HW0_MU0_ABS_TIMER_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000012C)
#define MAC_HW0_MU0_ABS_TIMER_1_OFFSET      0x0000012C
#define MAC_HW0_MU0_ABS_TIMER_1_INDEX       0x0000004B
#define MAC_HW0_MU0_ABS_TIMER_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_abs_timer_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_1_ADDR);
}

__INLINE void mac_hw0_mu0_abs_timer_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ABS_TIMER_1_ABS_TIMER_1_VALUE_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ABS_TIMER_1_ABS_TIMER_1_VALUE_LSB    0
#define MAC_HW0_MU0_ABS_TIMER_1_ABS_TIMER_1_VALUE_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ABS_TIMER_1_ABS_TIMER_1_VALUE_RST    0x0

__INLINE uint32_t mac_hw0_mu0_abs_timer_1_abs_timer_1_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_1_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_abs_timer_1_abs_timer_1_value_setf(uint32_t abstimer1value)
{
	ASSERT_ERR((((uint32_t)abstimer1value << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_1_ADDR, (uint32_t)abstimer1value << 0);
}

/**
 * @brief ABS_TIMER_2 register definition
 *  General purpose counter provided to SW. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ABS_TIMER2_VALUE          0x0
 * </pre>
 */
#define MAC_HW0_MU0_ABS_TIMER_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000130)
#define MAC_HW0_MU0_ABS_TIMER_2_OFFSET      0x00000130
#define MAC_HW0_MU0_ABS_TIMER_2_INDEX       0x0000004C
#define MAC_HW0_MU0_ABS_TIMER_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_abs_timer_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_2_ADDR);
}

__INLINE void mac_hw0_mu0_abs_timer_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ABS_TIMER_2_ABS_TIMER_2_VALUE_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ABS_TIMER_2_ABS_TIMER_2_VALUE_LSB    0
#define MAC_HW0_MU0_ABS_TIMER_2_ABS_TIMER_2_VALUE_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ABS_TIMER_2_ABS_TIMER_2_VALUE_RST    0x0

__INLINE uint32_t mac_hw0_mu0_abs_timer_2_abs_timer_2_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_2_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_abs_timer_2_abs_timer_2_value_setf(uint32_t abstimer2value)
{
	ASSERT_ERR((((uint32_t)abstimer2value << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_2_ADDR, (uint32_t)abstimer2value << 0);
}

/**
 * @brief ABS_TIMER_3 register definition
 *  General purpose counter provided to SW. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ABS_TIMER3_VALUE          0x0
 * </pre>
 */
#define MAC_HW0_MU0_ABS_TIMER_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000134)
#define MAC_HW0_MU0_ABS_TIMER_3_OFFSET      0x00000134
#define MAC_HW0_MU0_ABS_TIMER_3_INDEX       0x0000004D
#define MAC_HW0_MU0_ABS_TIMER_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_abs_timer_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_3_ADDR);
}

__INLINE void mac_hw0_mu0_abs_timer_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ABS_TIMER_3_ABS_TIMER_3_VALUE_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ABS_TIMER_3_ABS_TIMER_3_VALUE_LSB    0
#define MAC_HW0_MU0_ABS_TIMER_3_ABS_TIMER_3_VALUE_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ABS_TIMER_3_ABS_TIMER_3_VALUE_RST    0x0

__INLINE uint32_t mac_hw0_mu0_abs_timer_3_abs_timer_3_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_3_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_abs_timer_3_abs_timer_3_value_setf(uint32_t abstimer3value)
{
	ASSERT_ERR((((uint32_t)abstimer3value << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_3_ADDR, (uint32_t)abstimer3value << 0);
}

/**
 * @brief ABS_TIMER_4 register definition
 *  General purpose counter provided to SW. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ABS_TIMER4_VALUE          0x0
 * </pre>
 */
#define MAC_HW0_MU0_ABS_TIMER_4_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000138)
#define MAC_HW0_MU0_ABS_TIMER_4_OFFSET      0x00000138
#define MAC_HW0_MU0_ABS_TIMER_4_INDEX       0x0000004E
#define MAC_HW0_MU0_ABS_TIMER_4_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_abs_timer_4_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_4_ADDR);
}

__INLINE void mac_hw0_mu0_abs_timer_4_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_4_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ABS_TIMER_4_ABS_TIMER_4_VALUE_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ABS_TIMER_4_ABS_TIMER_4_VALUE_LSB    0
#define MAC_HW0_MU0_ABS_TIMER_4_ABS_TIMER_4_VALUE_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ABS_TIMER_4_ABS_TIMER_4_VALUE_RST    0x0

__INLINE uint32_t mac_hw0_mu0_abs_timer_4_abs_timer_4_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_4_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_abs_timer_4_abs_timer_4_value_setf(uint32_t abstimer4value)
{
	ASSERT_ERR((((uint32_t)abstimer4value << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_4_ADDR, (uint32_t)abstimer4value << 0);
}

/**
 * @brief ABS_TIMER_5 register definition
 *  General purpose counter provided to SW. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ABS_TIMER5_VALUE          0x0
 * </pre>
 */
#define MAC_HW0_MU0_ABS_TIMER_5_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000013C)
#define MAC_HW0_MU0_ABS_TIMER_5_OFFSET      0x0000013C
#define MAC_HW0_MU0_ABS_TIMER_5_INDEX       0x0000004F
#define MAC_HW0_MU0_ABS_TIMER_5_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_abs_timer_5_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_5_ADDR);
}

__INLINE void mac_hw0_mu0_abs_timer_5_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_5_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ABS_TIMER_5_ABS_TIMER_5_VALUE_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ABS_TIMER_5_ABS_TIMER_5_VALUE_LSB    0
#define MAC_HW0_MU0_ABS_TIMER_5_ABS_TIMER_5_VALUE_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ABS_TIMER_5_ABS_TIMER_5_VALUE_RST    0x0

__INLINE uint32_t mac_hw0_mu0_abs_timer_5_abs_timer_5_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_5_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_abs_timer_5_abs_timer_5_value_setf(uint32_t abstimer5value)
{
	ASSERT_ERR((((uint32_t)abstimer5value << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_5_ADDR, (uint32_t)abstimer5value << 0);
}

/**
 * @brief ABS_TIMER_6 register definition
 *  General purpose counter provided to SW. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ABS_TIMER6_VALUE          0x0
 * </pre>
 */
#define MAC_HW0_MU0_ABS_TIMER_6_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000140)
#define MAC_HW0_MU0_ABS_TIMER_6_OFFSET      0x00000140
#define MAC_HW0_MU0_ABS_TIMER_6_INDEX       0x00000050
#define MAC_HW0_MU0_ABS_TIMER_6_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_abs_timer_6_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_6_ADDR);
}

__INLINE void mac_hw0_mu0_abs_timer_6_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_6_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ABS_TIMER_6_ABS_TIMER_6_VALUE_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ABS_TIMER_6_ABS_TIMER_6_VALUE_LSB    0
#define MAC_HW0_MU0_ABS_TIMER_6_ABS_TIMER_6_VALUE_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ABS_TIMER_6_ABS_TIMER_6_VALUE_RST    0x0

__INLINE uint32_t mac_hw0_mu0_abs_timer_6_abs_timer_6_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_6_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_abs_timer_6_abs_timer_6_value_setf(uint32_t abstimer6value)
{
	ASSERT_ERR((((uint32_t)abstimer6value << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_6_ADDR, (uint32_t)abstimer6value << 0);
}

/**
 * @brief ABS_TIMER_7 register definition
 *  General purpose counter provided to SW. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ABS_TIMER7_VALUE          0x0
 * </pre>
 */
#define MAC_HW0_MU0_ABS_TIMER_7_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000144)
#define MAC_HW0_MU0_ABS_TIMER_7_OFFSET      0x00000144
#define MAC_HW0_MU0_ABS_TIMER_7_INDEX       0x00000051
#define MAC_HW0_MU0_ABS_TIMER_7_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_abs_timer_7_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_7_ADDR);
}

__INLINE void mac_hw0_mu0_abs_timer_7_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_7_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ABS_TIMER_7_ABS_TIMER_7_VALUE_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ABS_TIMER_7_ABS_TIMER_7_VALUE_LSB    0
#define MAC_HW0_MU0_ABS_TIMER_7_ABS_TIMER_7_VALUE_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ABS_TIMER_7_ABS_TIMER_7_VALUE_RST    0x0

__INLINE uint32_t mac_hw0_mu0_abs_timer_7_abs_timer_7_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_7_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_abs_timer_7_abs_timer_7_value_setf(uint32_t abstimer7value)
{
	ASSERT_ERR((((uint32_t)abstimer7value << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_7_ADDR, (uint32_t)abstimer7value << 0);
}

/**
 * @brief ABS_TIMER_8 register definition
 *  General purpose counter provided to SW. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ABS_TIMER8_VALUE          0x0
 * </pre>
 */
#define MAC_HW0_MU0_ABS_TIMER_8_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000148)
#define MAC_HW0_MU0_ABS_TIMER_8_OFFSET      0x00000148
#define MAC_HW0_MU0_ABS_TIMER_8_INDEX       0x00000052
#define MAC_HW0_MU0_ABS_TIMER_8_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_abs_timer_8_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_8_ADDR);
}

__INLINE void mac_hw0_mu0_abs_timer_8_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_8_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ABS_TIMER_8_ABS_TIMER_8_VALUE_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ABS_TIMER_8_ABS_TIMER_8_VALUE_LSB    0
#define MAC_HW0_MU0_ABS_TIMER_8_ABS_TIMER_8_VALUE_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ABS_TIMER_8_ABS_TIMER_8_VALUE_RST    0x0

__INLINE uint32_t mac_hw0_mu0_abs_timer_8_abs_timer_8_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_8_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_abs_timer_8_abs_timer_8_value_setf(uint32_t abstimer8value)
{
	ASSERT_ERR((((uint32_t)abstimer8value << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_8_ADDR, (uint32_t)abstimer8value << 0);
}

/**
 * @brief ABS_TIMER_9 register definition
 *  General purpose counter provided to SW. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 ABS_TIMER9_VALUE          0x0
 * </pre>
 */
#define MAC_HW0_MU0_ABS_TIMER_9_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000014C)
#define MAC_HW0_MU0_ABS_TIMER_9_OFFSET      0x0000014C
#define MAC_HW0_MU0_ABS_TIMER_9_INDEX       0x00000053
#define MAC_HW0_MU0_ABS_TIMER_9_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_abs_timer_9_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_9_ADDR);
}

__INLINE void mac_hw0_mu0_abs_timer_9_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_9_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ABS_TIMER_9_ABS_TIMER_9_VALUE_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ABS_TIMER_9_ABS_TIMER_9_VALUE_LSB    0
#define MAC_HW0_MU0_ABS_TIMER_9_ABS_TIMER_9_VALUE_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ABS_TIMER_9_ABS_TIMER_9_VALUE_RST    0x0

__INLINE uint32_t mac_hw0_mu0_abs_timer_9_abs_timer_9_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ABS_TIMER_9_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_abs_timer_9_abs_timer_9_value_setf(uint32_t abstimer9value)
{
	ASSERT_ERR((((uint32_t)abstimer9value << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ABS_TIMER_9_ADDR, (uint32_t)abstimer9value << 0);
}

/**
 * @brief MAX_RX_LENGTH register definition
 *  Configure the maximum PSDU length received. Should be 4095 in abg and 65535 in HT register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:00 MAX_ALLOWED_LENGTH        0xFFFFFF
 * </pre>
 */
#define MAC_HW0_MU0_MAX_RX_LENGTH_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000150)
#define MAC_HW0_MU0_MAX_RX_LENGTH_OFFSET      0x00000150
#define MAC_HW0_MU0_MAX_RX_LENGTH_INDEX       0x00000054
#define MAC_HW0_MU0_MAX_RX_LENGTH_RESET       0x00FFFFFF

__INLINE uint32_t  mac_hw0_mu0_max_rx_length_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MAX_RX_LENGTH_ADDR);
}

__INLINE void mac_hw0_mu0_max_rx_length_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MAX_RX_LENGTH_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MAX_RX_LENGTH_MAX_ALLOWED_LENGTH_MASK    ((uint32_t)0x00FFFFFF)
#define MAC_HW0_MU0_MAX_RX_LENGTH_MAX_ALLOWED_LENGTH_LSB    0
#define MAC_HW0_MU0_MAX_RX_LENGTH_MAX_ALLOWED_LENGTH_WIDTH    ((uint32_t)0x00000018)

#define MAC_HW0_MU0_MAX_RX_LENGTH_MAX_ALLOWED_LENGTH_RST    0xFFFFFF

__INLINE uint32_t mac_hw0_mu0_max_rx_length_max_allowed_length_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAX_RX_LENGTH_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_max_rx_length_max_allowed_length_setf(uint32_t maxallowedlength)
{
	ASSERT_ERR((((uint32_t)maxallowedlength << 0) & ~((uint32_t)0x00FFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAX_RX_LENGTH_ADDR, (uint32_t)maxallowedlength << 0);
}

/**
 * @brief RX_TRIGGER_2_TIMER register definition
 *  Contains timers for receive interrupt moderation register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:16 rx_Payload_Used_Count2    0x0F
 *    15:08 rx_Packet_Timeout2        0x0F
 *    07:00 rx_Absolute_Timeout2      0x9C
 * </pre>
 */
#define MAC_HW0_MU0_RX_TRIGGER_2_TIMER_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000154)
#define MAC_HW0_MU0_RX_TRIGGER_2_TIMER_OFFSET      0x00000154
#define MAC_HW0_MU0_RX_TRIGGER_2_TIMER_INDEX       0x00000055
#define MAC_HW0_MU0_RX_TRIGGER_2_TIMER_RESET       0x000F0F9C

__INLINE uint32_t  mac_hw0_mu0_rx_trigger_2_timer_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_TRIGGER_2_TIMER_ADDR);
}

__INLINE void mac_hw0_mu0_rx_trigger_2_timer_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_TRIGGER_2_TIMER_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_TRIGGER_2_TIMER_RX_PAYLOAD_USED_COUNT_2_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_RX_TRIGGER_2_TIMER_RX_PAYLOAD_USED_COUNT_2_LSB    16
#define MAC_HW0_MU0_RX_TRIGGER_2_TIMER_RX_PAYLOAD_USED_COUNT_2_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_TRIGGER_2_TIMER_RX_PACKET_TIMEOUT_2_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_RX_TRIGGER_2_TIMER_RX_PACKET_TIMEOUT_2_LSB    8
#define MAC_HW0_MU0_RX_TRIGGER_2_TIMER_RX_PACKET_TIMEOUT_2_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_TRIGGER_2_TIMER_RX_ABSOLUTE_TIMEOUT_2_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_RX_TRIGGER_2_TIMER_RX_ABSOLUTE_TIMEOUT_2_LSB    0
#define MAC_HW0_MU0_RX_TRIGGER_2_TIMER_RX_ABSOLUTE_TIMEOUT_2_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_RX_TRIGGER_2_TIMER_RX_PAYLOAD_USED_COUNT_2_RST    0x0F
#define MAC_HW0_MU0_RX_TRIGGER_2_TIMER_RX_PACKET_TIMEOUT_2_RST    0x0F
#define MAC_HW0_MU0_RX_TRIGGER_2_TIMER_RX_ABSOLUTE_TIMEOUT_2_RST    0x9C

__INLINE void mac_hw0_mu0_rx_trigger_2_timer_pack(uint8_t rx_payload_used_count2, uint8_t rx_packet_timeout2, uint8_t rx_absolute_timeout2)
{
	ASSERT_ERR((((uint32_t)rx_payload_used_count2 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)rx_packet_timeout2 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)rx_absolute_timeout2 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_TRIGGER_2_TIMER_ADDR,  ((uint32_t)rx_payload_used_count2 << 16) |((uint32_t)rx_packet_timeout2 << 8) |((uint32_t)rx_absolute_timeout2 << 0));
}

__INLINE void mac_hw0_mu0_rx_trigger_2_timer_unpack(uint8_t* rx_payload_used_count2, uint8_t* rx_packet_timeout2, uint8_t* rx_absolute_timeout2)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIGGER_2_TIMER_ADDR);

	*rx_payload_used_count2 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*rx_packet_timeout2 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*rx_absolute_timeout2 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_trigger_2_timer_rx_payload_used_count_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIGGER_2_TIMER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_trigger_2_timer_rx_payload_used_count_2_setf(uint8_t rxpayloadusedcount2)
{
	ASSERT_ERR((((uint32_t)rxpayloadusedcount2 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_TRIGGER_2_TIMER_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_TRIGGER_2_TIMER_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)rxpayloadusedcount2 <<16));
}
__INLINE uint8_t mac_hw0_mu0_rx_trigger_2_timer_rx_packet_timeout_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIGGER_2_TIMER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_rx_trigger_2_timer_rx_packet_timeout_2_setf(uint8_t rxpackettimeout2)
{
	ASSERT_ERR((((uint32_t)rxpackettimeout2 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_TRIGGER_2_TIMER_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_TRIGGER_2_TIMER_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)rxpackettimeout2 <<8));
}
__INLINE uint8_t mac_hw0_mu0_rx_trigger_2_timer_rx_absolute_timeout_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIGGER_2_TIMER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_trigger_2_timer_rx_absolute_timeout_2_setf(uint8_t rxabsolutetimeout2)
{
	ASSERT_ERR((((uint32_t)rxabsolutetimeout2 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_TRIGGER_2_TIMER_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_TRIGGER_2_TIMER_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)rxabsolutetimeout2 <<0));
}

/**
 * @brief TX_CHAINS_CTRL_1 register definition
 *  Indicates max possible TX chains per formatMod register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    19:16 max_tx_chains_HE          0x6
 *    15:12 max_tx_chains_VHT         0x4
 *    11:08 max_tx_chains_HT          0x4
 *    07:04 max_tx_chains_non_HT      0x4
 *    03:00 max_tx_chains_11b         0x1
 * </pre>
 */
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000160)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_OFFSET      0x00000160
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_INDEX       0x00000058
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_RESET       0x00064441

__INLINE uint32_t  mac_hw0_mu0_tx_chains_ctrl_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR);
}

__INLINE void mac_hw0_mu0_tx_chains_ctrl_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_HE_MASK    ((uint32_t)0x000F0000)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_HE_LSB    16
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_HE_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_VHT_MASK    ((uint32_t)0x0000F000)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_VHT_LSB    12
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_VHT_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_HT_MASK    ((uint32_t)0x00000F00)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_HT_LSB    8
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_HT_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_NON_HT_MASK    ((uint32_t)0x000000F0)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_NON_HT_LSB    4
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_NON_HT_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_11_B_MASK    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_11_B_LSB    0
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_11_B_WIDTH    ((uint32_t)0x00000004)

#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_HE_RST    0x6
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_VHT_RST    0x4
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_HT_RST    0x4
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_NON_HT_RST    0x4
#define MAC_HW0_MU0_TX_CHAINS_CTRL_1_MAX_TX_CHAINS_11_B_RST    0x1

__INLINE void mac_hw0_mu0_tx_chains_ctrl_1_pack(uint8_t max_tx_chains_he, uint8_t max_tx_chains_vht, uint8_t max_tx_chains_ht, uint8_t max_tx_chains_non_ht, uint8_t max_tx_chains_11b)
{
	ASSERT_ERR((((uint32_t)max_tx_chains_he << 16) & ~((uint32_t)0x000F0000)) == 0);
	ASSERT_ERR((((uint32_t)max_tx_chains_vht << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)max_tx_chains_ht << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)max_tx_chains_non_ht << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)max_tx_chains_11b << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR,  ((uint32_t)max_tx_chains_he << 16) |((uint32_t)max_tx_chains_vht << 12) |((uint32_t)max_tx_chains_ht << 8) |((uint32_t)max_tx_chains_non_ht << 4) |((uint32_t)max_tx_chains_11b << 0));
}

__INLINE void mac_hw0_mu0_tx_chains_ctrl_1_unpack(uint8_t* max_tx_chains_he, uint8_t* max_tx_chains_vht, uint8_t* max_tx_chains_ht, uint8_t* max_tx_chains_non_ht, uint8_t* max_tx_chains_11b)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR);

	*max_tx_chains_he = (localVal & ((uint32_t)0x000F0000)) >>  16;
	*max_tx_chains_vht = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*max_tx_chains_ht = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*max_tx_chains_non_ht = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*max_tx_chains_11b = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_tx_chains_ctrl_1_max_tx_chains_he_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000F0000)) >> 16);
}
__INLINE void mac_hw0_mu0_tx_chains_ctrl_1_max_tx_chains_he_setf(uint8_t maxtxchainshe)
{
	ASSERT_ERR((((uint32_t)maxtxchainshe << 16) & ~((uint32_t)0x000F0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR) & ~((uint32_t)0x000F0000)) | ((uint32_t)maxtxchainshe <<16));
}
__INLINE uint8_t mac_hw0_mu0_tx_chains_ctrl_1_max_tx_chains_vht_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void mac_hw0_mu0_tx_chains_ctrl_1_max_tx_chains_vht_setf(uint8_t maxtxchainsvht)
{
	ASSERT_ERR((((uint32_t)maxtxchainsvht << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)maxtxchainsvht <<12));
}
__INLINE uint8_t mac_hw0_mu0_tx_chains_ctrl_1_max_tx_chains_ht_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_chains_ctrl_1_max_tx_chains_ht_setf(uint8_t maxtxchainsht)
{
	ASSERT_ERR((((uint32_t)maxtxchainsht << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)maxtxchainsht <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_chains_ctrl_1_max_tx_chains_non_ht_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void mac_hw0_mu0_tx_chains_ctrl_1_max_tx_chains_non_ht_setf(uint8_t maxtxchainsnonht)
{
	ASSERT_ERR((((uint32_t)maxtxchainsnonht << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)maxtxchainsnonht <<4));
}
__INLINE uint8_t mac_hw0_mu0_tx_chains_ctrl_1_max_tx_chains_11_b_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void mac_hw0_mu0_tx_chains_ctrl_1_max_tx_chains_11_b_setf(uint8_t maxtxchains11b)
{
	ASSERT_ERR((((uint32_t)maxtxchains11b << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_1_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)maxtxchains11b <<0));
}

/**
 * @brief TX_CHAINS_CTRL_2 register definition
 *  Indicates TX chains bit map for AR register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 tx_chains_VHT             0xF
 *    21:16 tx_chains_HT              0xF
 *    13:08 tx_chains_non_HT          0xF
 *    05:00 tx_chains_11b             0x1
 * </pre>
 */
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000164)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_OFFSET      0x00000164
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_INDEX       0x00000059
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_RESET       0x0F0F0F01

__INLINE uint32_t  mac_hw0_mu0_tx_chains_ctrl_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR);
}

__INLINE void mac_hw0_mu0_tx_chains_ctrl_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_TX_CHAINS_VHT_MASK    ((uint32_t)0x3F000000)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_TX_CHAINS_VHT_LSB    24
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_TX_CHAINS_VHT_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_TX_CHAINS_HT_MASK    ((uint32_t)0x003F0000)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_TX_CHAINS_HT_LSB    16
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_TX_CHAINS_HT_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_TX_CHAINS_NON_HT_MASK    ((uint32_t)0x00003F00)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_TX_CHAINS_NON_HT_LSB    8
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_TX_CHAINS_NON_HT_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_TX_CHAINS_11_B_MASK    ((uint32_t)0x0000003F)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_TX_CHAINS_11_B_LSB    0
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_TX_CHAINS_11_B_WIDTH    ((uint32_t)0x00000006)

#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_TX_CHAINS_VHT_RST    0xF
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_TX_CHAINS_HT_RST    0xF
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_TX_CHAINS_NON_HT_RST    0xF
#define MAC_HW0_MU0_TX_CHAINS_CTRL_2_TX_CHAINS_11_B_RST    0x1

__INLINE void mac_hw0_mu0_tx_chains_ctrl_2_pack(uint8_t tx_chains_vht, uint8_t tx_chains_ht, uint8_t tx_chains_non_ht, uint8_t tx_chains_11b)
{
	ASSERT_ERR((((uint32_t)tx_chains_vht << 24) & ~((uint32_t)0x3F000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_chains_ht << 16) & ~((uint32_t)0x003F0000)) == 0);
	ASSERT_ERR((((uint32_t)tx_chains_non_ht << 8) & ~((uint32_t)0x00003F00)) == 0);
	ASSERT_ERR((((uint32_t)tx_chains_11b << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR,  ((uint32_t)tx_chains_vht << 24) |((uint32_t)tx_chains_ht << 16) |((uint32_t)tx_chains_non_ht << 8) |((uint32_t)tx_chains_11b << 0));
}

__INLINE void mac_hw0_mu0_tx_chains_ctrl_2_unpack(uint8_t* tx_chains_vht, uint8_t* tx_chains_ht, uint8_t* tx_chains_non_ht, uint8_t* tx_chains_11b)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR);

	*tx_chains_vht = (localVal & ((uint32_t)0x3F000000)) >>  24;
	*tx_chains_ht = (localVal & ((uint32_t)0x003F0000)) >>  16;
	*tx_chains_non_ht = (localVal & ((uint32_t)0x00003F00)) >>  8;
	*tx_chains_11b = (localVal & ((uint32_t)0x0000003F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_tx_chains_ctrl_2_tx_chains_vht_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x3F000000)) >> 24);
}
__INLINE void mac_hw0_mu0_tx_chains_ctrl_2_tx_chains_vht_setf(uint8_t txchainsvht)
{
	ASSERT_ERR((((uint32_t)txchainsvht << 24) & ~((uint32_t)0x3F000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR) & ~((uint32_t)0x3F000000)) | ((uint32_t)txchainsvht <<24));
}
__INLINE uint8_t mac_hw0_mu0_tx_chains_ctrl_2_tx_chains_ht_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x003F0000)) >> 16);
}
__INLINE void mac_hw0_mu0_tx_chains_ctrl_2_tx_chains_ht_setf(uint8_t txchainsht)
{
	ASSERT_ERR((((uint32_t)txchainsht << 16) & ~((uint32_t)0x003F0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR) & ~((uint32_t)0x003F0000)) | ((uint32_t)txchainsht <<16));
}
__INLINE uint8_t mac_hw0_mu0_tx_chains_ctrl_2_tx_chains_non_ht_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003F00)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_chains_ctrl_2_tx_chains_non_ht_setf(uint8_t txchainsnonht)
{
	ASSERT_ERR((((uint32_t)txchainsnonht << 8) & ~((uint32_t)0x00003F00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR) & ~((uint32_t)0x00003F00)) | ((uint32_t)txchainsnonht <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_chains_ctrl_2_tx_chains_11_b_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000003F)) >> 0);
}
__INLINE void mac_hw0_mu0_tx_chains_ctrl_2_tx_chains_11_b_setf(uint8_t txchains11b)
{
	ASSERT_ERR((((uint32_t)txchains11b << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_2_ADDR) & ~((uint32_t)0x0000003F)) | ((uint32_t)txchains11b <<0));
}

/**
 * @brief TX_CHAINS_CTRL_3 register definition
 *  Indicates TX chains bit map for AR register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    13:08 tx_chains_FTM             0x1
 *    05:00 tx_chains_HE              0x3F
 * </pre>
 */
#define MAC_HW0_MU0_TX_CHAINS_CTRL_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000168)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_3_OFFSET      0x00000168
#define MAC_HW0_MU0_TX_CHAINS_CTRL_3_INDEX       0x0000005A
#define MAC_HW0_MU0_TX_CHAINS_CTRL_3_RESET       0x0000013F

__INLINE uint32_t  mac_hw0_mu0_tx_chains_ctrl_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_3_ADDR);
}

__INLINE void mac_hw0_mu0_tx_chains_ctrl_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_CHAINS_CTRL_3_TX_CHAINS_FTM_MASK    ((uint32_t)0x00003F00)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_3_TX_CHAINS_FTM_LSB    8
#define MAC_HW0_MU0_TX_CHAINS_CTRL_3_TX_CHAINS_FTM_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_3_TX_CHAINS_HE_MASK    ((uint32_t)0x0000003F)
#define MAC_HW0_MU0_TX_CHAINS_CTRL_3_TX_CHAINS_HE_LSB    0
#define MAC_HW0_MU0_TX_CHAINS_CTRL_3_TX_CHAINS_HE_WIDTH    ((uint32_t)0x00000006)

#define MAC_HW0_MU0_TX_CHAINS_CTRL_3_TX_CHAINS_FTM_RST    0x1
#define MAC_HW0_MU0_TX_CHAINS_CTRL_3_TX_CHAINS_HE_RST    0x3F

__INLINE void mac_hw0_mu0_tx_chains_ctrl_3_pack(uint8_t tx_chains_ftm, uint8_t tx_chains_he)
{
	ASSERT_ERR((((uint32_t)tx_chains_ftm << 8) & ~((uint32_t)0x00003F00)) == 0);
	ASSERT_ERR((((uint32_t)tx_chains_he << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_3_ADDR,  ((uint32_t)tx_chains_ftm << 8) |((uint32_t)tx_chains_he << 0));
}

__INLINE void mac_hw0_mu0_tx_chains_ctrl_3_unpack(uint8_t* tx_chains_ftm, uint8_t* tx_chains_he)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_3_ADDR);

	*tx_chains_ftm = (localVal & ((uint32_t)0x00003F00)) >>  8;
	*tx_chains_he = (localVal & ((uint32_t)0x0000003F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_tx_chains_ctrl_3_tx_chains_ftm_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003F00)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_chains_ctrl_3_tx_chains_ftm_setf(uint8_t txchainsftm)
{
	ASSERT_ERR((((uint32_t)txchainsftm << 8) & ~((uint32_t)0x00003F00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_3_ADDR) & ~((uint32_t)0x00003F00)) | ((uint32_t)txchainsftm <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_chains_ctrl_3_tx_chains_he_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000003F)) >> 0);
}
__INLINE void mac_hw0_mu0_tx_chains_ctrl_3_tx_chains_he_setf(uint8_t txchainshe)
{
	ASSERT_ERR((((uint32_t)txchainshe << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CHAINS_CTRL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CHAINS_CTRL_3_ADDR) & ~((uint32_t)0x0000003F)) | ((uint32_t)txchainshe <<0));
}

/**
 * @brief TX_ACK_POLICY register definition
 *  Controls ACK POLICY override register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    enable_ack_policy_override 0              
 *    11:10 ACK_POLICY_HE_TB          0x0
 *    09:08 ACK_POLICY_HE_MU          0x2
 *    07:06 ACK_POLICY_HE_SU_TRIGGER_INCL 0x2
 *    05:04 ACK_POLICY_HE_SU_TRIGGER_NOT_INCL 0x0
 *    03:02 ACK_POLICY_VHT            0x3
 *    01:00 ACK_POLICY_HT             0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_ACK_POLICY_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000178)
#define MAC_HW0_MU0_TX_ACK_POLICY_OFFSET      0x00000178
#define MAC_HW0_MU0_TX_ACK_POLICY_INDEX       0x0000005E
#define MAC_HW0_MU0_TX_ACK_POLICY_RESET       0x0000028C

__INLINE uint32_t  mac_hw0_mu0_tx_ack_policy_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_ACK_POLICY_ADDR);
}

__INLINE void mac_hw0_mu0_tx_ack_policy_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_ACK_POLICY_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_ACK_POLICY_ENABLE_ACK_POLICY_OVERRIDE_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_TX_ACK_POLICY_ENABLE_ACK_POLICY_OVERRIDE_POS    31
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HE_TB_MASK    ((uint32_t)0x00000C00)
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HE_TB_LSB    10
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HE_TB_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HE_MU_MASK    ((uint32_t)0x00000300)
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HE_MU_LSB    8
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HE_MU_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HE_SU_TRIGGER_INCL_MASK    ((uint32_t)0x000000C0)
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HE_SU_TRIGGER_INCL_LSB    6
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HE_SU_TRIGGER_INCL_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HE_SU_TRIGGER_NOT_INCL_MASK    ((uint32_t)0x00000030)
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HE_SU_TRIGGER_NOT_INCL_LSB    4
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HE_SU_TRIGGER_NOT_INCL_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_VHT_MASK    ((uint32_t)0x0000000C)
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_VHT_LSB    2
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_VHT_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HT_MASK    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HT_LSB    0
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HT_WIDTH    ((uint32_t)0x00000002)

#define MAC_HW0_MU0_TX_ACK_POLICY_ENABLE_ACK_POLICY_OVERRIDE_RST    0x0
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HE_TB_RST    0x0
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HE_MU_RST    0x2
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HE_SU_TRIGGER_INCL_RST    0x2
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HE_SU_TRIGGER_NOT_INCL_RST    0x0
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_VHT_RST    0x3
#define MAC_HW0_MU0_TX_ACK_POLICY_ACK_POLICY_HT_RST    0x0

__INLINE void mac_hw0_mu0_tx_ack_policy_pack(uint8_t enable_ack_policy_override, uint8_t ack_policy_he_tb, uint8_t ack_policy_he_mu, uint8_t ack_policy_he_su_trigger_incl, uint8_t ack_policy_he_su_trigger_not_incl, uint8_t ack_policy_vht, uint8_t ack_policy_ht)
{
	ASSERT_ERR((((uint32_t)enable_ack_policy_override << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)ack_policy_he_tb << 10) & ~((uint32_t)0x00000C00)) == 0);
	ASSERT_ERR((((uint32_t)ack_policy_he_mu << 8) & ~((uint32_t)0x00000300)) == 0);
	ASSERT_ERR((((uint32_t)ack_policy_he_su_trigger_incl << 6) & ~((uint32_t)0x000000C0)) == 0);
	ASSERT_ERR((((uint32_t)ack_policy_he_su_trigger_not_incl << 4) & ~((uint32_t)0x00000030)) == 0);
	ASSERT_ERR((((uint32_t)ack_policy_vht << 2) & ~((uint32_t)0x0000000C)) == 0);
	ASSERT_ERR((((uint32_t)ack_policy_ht << 0) & ~((uint32_t)0x00000003)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_ACK_POLICY_ADDR,  ((uint32_t)enable_ack_policy_override << 31) |((uint32_t)ack_policy_he_tb << 10) |((uint32_t)ack_policy_he_mu << 8) |((uint32_t)ack_policy_he_su_trigger_incl << 6) |((uint32_t)ack_policy_he_su_trigger_not_incl << 4) |((uint32_t)ack_policy_vht << 2) |((uint32_t)ack_policy_ht << 0));
}

__INLINE void mac_hw0_mu0_tx_ack_policy_unpack(uint8_t* enable_ack_policy_override, uint8_t* ack_policy_he_tb, uint8_t* ack_policy_he_mu, uint8_t* ack_policy_he_su_trigger_incl, uint8_t* ack_policy_he_su_trigger_not_incl, uint8_t* ack_policy_vht, uint8_t* ack_policy_ht)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_ACK_POLICY_ADDR);

	*enable_ack_policy_override = (localVal & ((uint32_t)0x80000000)) >>  31;
	*ack_policy_he_tb = (localVal & ((uint32_t)0x00000C00)) >>  10;
	*ack_policy_he_mu = (localVal & ((uint32_t)0x00000300)) >>  8;
	*ack_policy_he_su_trigger_incl = (localVal & ((uint32_t)0x000000C0)) >>  6;
	*ack_policy_he_su_trigger_not_incl = (localVal & ((uint32_t)0x00000030)) >>  4;
	*ack_policy_vht = (localVal & ((uint32_t)0x0000000C)) >>  2;
	*ack_policy_ht = (localVal & ((uint32_t)0x00000003)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_tx_ack_policy_enable_ack_policy_override_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_ACK_POLICY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_tx_ack_policy_enable_ack_policy_override_setf(uint8_t enableackpolicyoverride)
{
	ASSERT_ERR((((uint32_t)enableackpolicyoverride << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_ACK_POLICY_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_ACK_POLICY_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)enableackpolicyoverride <<31));
}
__INLINE uint8_t mac_hw0_mu0_tx_ack_policy_ack_policy_he_tb_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_ACK_POLICY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000C00)) >> 10);
}
__INLINE void mac_hw0_mu0_tx_ack_policy_ack_policy_he_tb_setf(uint8_t ackpolicyhetb)
{
	ASSERT_ERR((((uint32_t)ackpolicyhetb << 10) & ~((uint32_t)0x00000C00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_ACK_POLICY_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_ACK_POLICY_ADDR) & ~((uint32_t)0x00000C00)) | ((uint32_t)ackpolicyhetb <<10));
}
__INLINE uint8_t mac_hw0_mu0_tx_ack_policy_ack_policy_he_mu_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_ACK_POLICY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000300)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_ack_policy_ack_policy_he_mu_setf(uint8_t ackpolicyhemu)
{
	ASSERT_ERR((((uint32_t)ackpolicyhemu << 8) & ~((uint32_t)0x00000300)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_ACK_POLICY_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_ACK_POLICY_ADDR) & ~((uint32_t)0x00000300)) | ((uint32_t)ackpolicyhemu <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_ack_policy_ack_policy_he_su_trigger_incl_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_ACK_POLICY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000C0)) >> 6);
}
__INLINE void mac_hw0_mu0_tx_ack_policy_ack_policy_he_su_trigger_incl_setf(uint8_t ackpolicyhesutriggerincl)
{
	ASSERT_ERR((((uint32_t)ackpolicyhesutriggerincl << 6) & ~((uint32_t)0x000000C0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_ACK_POLICY_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_ACK_POLICY_ADDR) & ~((uint32_t)0x000000C0)) | ((uint32_t)ackpolicyhesutriggerincl <<6));
}
__INLINE uint8_t mac_hw0_mu0_tx_ack_policy_ack_policy_he_su_trigger_not_incl_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_ACK_POLICY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000030)) >> 4);
}
__INLINE void mac_hw0_mu0_tx_ack_policy_ack_policy_he_su_trigger_not_incl_setf(uint8_t ackpolicyhesutriggernotincl)
{
	ASSERT_ERR((((uint32_t)ackpolicyhesutriggernotincl << 4) & ~((uint32_t)0x00000030)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_ACK_POLICY_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_ACK_POLICY_ADDR) & ~((uint32_t)0x00000030)) | ((uint32_t)ackpolicyhesutriggernotincl <<4));
}
__INLINE uint8_t mac_hw0_mu0_tx_ack_policy_ack_policy_vht_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_ACK_POLICY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000C)) >> 2);
}
__INLINE void mac_hw0_mu0_tx_ack_policy_ack_policy_vht_setf(uint8_t ackpolicyvht)
{
	ASSERT_ERR((((uint32_t)ackpolicyvht << 2) & ~((uint32_t)0x0000000C)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_ACK_POLICY_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_ACK_POLICY_ADDR) & ~((uint32_t)0x0000000C)) | ((uint32_t)ackpolicyvht <<2));
}
__INLINE uint8_t mac_hw0_mu0_tx_ack_policy_ack_policy_ht_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_ACK_POLICY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000003)) >> 0);
}
__INLINE void mac_hw0_mu0_tx_ack_policy_ack_policy_ht_setf(uint8_t ackpolicyht)
{
	ASSERT_ERR((((uint32_t)ackpolicyht << 0) & ~((uint32_t)0x00000003)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_ACK_POLICY_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_ACK_POLICY_ADDR) & ~((uint32_t)0x00000003)) | ((uint32_t)ackpolicyht <<0));
}

/**
 * @brief HTP_RESPONSE_CTRL register definition
 *  Configures HTP response conditions register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    07:04 CS_EVALUATION_WINDOW      0x8
 *    03:00 CCA_20_BUSY_FILTER        0x0
 * </pre>
 */
#define MAC_HW0_MU0_HTP_RESPONSE_CTRL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000017C)
#define MAC_HW0_MU0_HTP_RESPONSE_CTRL_OFFSET      0x0000017C
#define MAC_HW0_MU0_HTP_RESPONSE_CTRL_INDEX       0x0000005F
#define MAC_HW0_MU0_HTP_RESPONSE_CTRL_RESET       0x00000080

__INLINE uint32_t  mac_hw0_mu0_htp_response_ctrl_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_HTP_RESPONSE_CTRL_ADDR);
}

__INLINE void mac_hw0_mu0_htp_response_ctrl_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_HTP_RESPONSE_CTRL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_HTP_RESPONSE_CTRL_CS_EVALUATION_WINDOW_MASK    ((uint32_t)0x000000F0)
#define MAC_HW0_MU0_HTP_RESPONSE_CTRL_CS_EVALUATION_WINDOW_LSB    4
#define MAC_HW0_MU0_HTP_RESPONSE_CTRL_CS_EVALUATION_WINDOW_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_HTP_RESPONSE_CTRL_CCA_20_BUSY_FILTER_MASK    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_HTP_RESPONSE_CTRL_CCA_20_BUSY_FILTER_LSB    0
#define MAC_HW0_MU0_HTP_RESPONSE_CTRL_CCA_20_BUSY_FILTER_WIDTH    ((uint32_t)0x00000004)

#define MAC_HW0_MU0_HTP_RESPONSE_CTRL_CS_EVALUATION_WINDOW_RST    0x8
#define MAC_HW0_MU0_HTP_RESPONSE_CTRL_CCA_20_BUSY_FILTER_RST    0x0

__INLINE void mac_hw0_mu0_htp_response_ctrl_pack(uint8_t cs_evaluation_window, uint8_t cca_20_busy_filter)
{
	ASSERT_ERR((((uint32_t)cs_evaluation_window << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)cca_20_busy_filter << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HTP_RESPONSE_CTRL_ADDR,  ((uint32_t)cs_evaluation_window << 4) |((uint32_t)cca_20_busy_filter << 0));
}

__INLINE void mac_hw0_mu0_htp_response_ctrl_unpack(uint8_t* cs_evaluation_window, uint8_t* cca_20_busy_filter)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HTP_RESPONSE_CTRL_ADDR);

	*cs_evaluation_window = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*cca_20_busy_filter = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_htp_response_ctrl_cs_evaluation_window_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HTP_RESPONSE_CTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void mac_hw0_mu0_htp_response_ctrl_cs_evaluation_window_setf(uint8_t csevaluationwindow)
{
	ASSERT_ERR((((uint32_t)csevaluationwindow << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HTP_RESPONSE_CTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_HTP_RESPONSE_CTRL_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)csevaluationwindow <<4));
}
__INLINE uint8_t mac_hw0_mu0_htp_response_ctrl_cca_20_busy_filter_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HTP_RESPONSE_CTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void mac_hw0_mu0_htp_response_ctrl_cca_20_busy_filter_setf(uint8_t cca20busyfilter)
{
	ASSERT_ERR((((uint32_t)cca20busyfilter << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HTP_RESPONSE_CTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_HTP_RESPONSE_CTRL_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)cca20busyfilter <<0));
}

/**
 * @brief RX_TRIG_INFO_1 register definition
 *  Holds the trigger frames common_info[31_0] register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_TRIG_INFO_1            0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_TRIG_INFO_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000180)
#define MAC_HW0_MU0_RX_TRIG_INFO_1_OFFSET      0x00000180
#define MAC_HW0_MU0_RX_TRIG_INFO_1_INDEX       0x00000060
#define MAC_HW0_MU0_RX_TRIG_INFO_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_trig_info_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_1_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_TRIG_INFO_1_RX_TRIG_INFO_1_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_TRIG_INFO_1_RX_TRIG_INFO_1_LSB    0
#define MAC_HW0_MU0_RX_TRIG_INFO_1_RX_TRIG_INFO_1_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_TRIG_INFO_1_RX_TRIG_INFO_1_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_trig_info_1_rx_trig_info_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_1_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_TRIG_INFO_2 register definition
 *  Holds the trigger frames common_info[63_32 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_TRIG_INFO_2            0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_TRIG_INFO_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000184)
#define MAC_HW0_MU0_RX_TRIG_INFO_2_OFFSET      0x00000184
#define MAC_HW0_MU0_RX_TRIG_INFO_2_INDEX       0x00000061
#define MAC_HW0_MU0_RX_TRIG_INFO_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_trig_info_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_2_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_TRIG_INFO_2_RX_TRIG_INFO_2_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_TRIG_INFO_2_RX_TRIG_INFO_2_LSB    0
#define MAC_HW0_MU0_RX_TRIG_INFO_2_RX_TRIG_INFO_2_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_TRIG_INFO_2_RX_TRIG_INFO_2_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_trig_info_2_rx_trig_info_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_2_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_TRIG_INFO_3 register definition
 *  Holds the trigger frames user_info[31_0] register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_TRIG_INFO_3            0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_TRIG_INFO_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000188)
#define MAC_HW0_MU0_RX_TRIG_INFO_3_OFFSET      0x00000188
#define MAC_HW0_MU0_RX_TRIG_INFO_3_INDEX       0x00000062
#define MAC_HW0_MU0_RX_TRIG_INFO_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_trig_info_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_3_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_TRIG_INFO_3_RX_TRIG_INFO_3_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_TRIG_INFO_3_RX_TRIG_INFO_3_LSB    0
#define MAC_HW0_MU0_RX_TRIG_INFO_3_RX_TRIG_INFO_3_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_TRIG_INFO_3_RX_TRIG_INFO_3_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_trig_info_3_rx_trig_info_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_3_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_TRIG_INFO_4 register definition
 *  Holds the trigger frames user_info[63_32] register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_TRIG_INFO_4            0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_TRIG_INFO_4_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000018C)
#define MAC_HW0_MU0_RX_TRIG_INFO_4_OFFSET      0x0000018C
#define MAC_HW0_MU0_RX_TRIG_INFO_4_INDEX       0x00000063
#define MAC_HW0_MU0_RX_TRIG_INFO_4_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_trig_info_4_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_4_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_TRIG_INFO_4_RX_TRIG_INFO_4_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_TRIG_INFO_4_RX_TRIG_INFO_4_LSB    0
#define MAC_HW0_MU0_RX_TRIG_INFO_4_RX_TRIG_INFO_4_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_TRIG_INFO_4_RX_TRIG_INFO_4_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_trig_info_4_rx_trig_info_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_4_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_TRIG_INFO_5 register definition
 *  Holds the latest PPDU RX VECTOR_1 31_0 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_TRIG_INFO_5            0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_TRIG_INFO_5_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000190)
#define MAC_HW0_MU0_RX_TRIG_INFO_5_OFFSET      0x00000190
#define MAC_HW0_MU0_RX_TRIG_INFO_5_INDEX       0x00000064
#define MAC_HW0_MU0_RX_TRIG_INFO_5_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_trig_info_5_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_5_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_TRIG_INFO_5_RX_TRIG_INFO_5_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_TRIG_INFO_5_RX_TRIG_INFO_5_LSB    0
#define MAC_HW0_MU0_RX_TRIG_INFO_5_RX_TRIG_INFO_5_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_TRIG_INFO_5_RX_TRIG_INFO_5_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_trig_info_5_rx_trig_info_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_5_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_TRIG_INFO_6 register definition
 *  Holds the latest PPDU RX VECTOR_1 63_32 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_TRIG_INFO_6            0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_TRIG_INFO_6_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000194)
#define MAC_HW0_MU0_RX_TRIG_INFO_6_OFFSET      0x00000194
#define MAC_HW0_MU0_RX_TRIG_INFO_6_INDEX       0x00000065
#define MAC_HW0_MU0_RX_TRIG_INFO_6_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_trig_info_6_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_6_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_TRIG_INFO_6_RX_TRIG_INFO_6_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_TRIG_INFO_6_RX_TRIG_INFO_6_LSB    0
#define MAC_HW0_MU0_RX_TRIG_INFO_6_RX_TRIG_INFO_6_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_TRIG_INFO_6_RX_TRIG_INFO_6_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_trig_info_6_rx_trig_info_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_6_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_TRIG_INFO_7 register definition
 *  Holds the latest PPDU RX VECTOR_1 95_64 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_TRIG_INFO_7            0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_TRIG_INFO_7_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000198)
#define MAC_HW0_MU0_RX_TRIG_INFO_7_OFFSET      0x00000198
#define MAC_HW0_MU0_RX_TRIG_INFO_7_INDEX       0x00000066
#define MAC_HW0_MU0_RX_TRIG_INFO_7_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_trig_info_7_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_7_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_TRIG_INFO_7_RX_TRIG_INFO_7_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_TRIG_INFO_7_RX_TRIG_INFO_7_LSB    0
#define MAC_HW0_MU0_RX_TRIG_INFO_7_RX_TRIG_INFO_7_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_TRIG_INFO_7_RX_TRIG_INFO_7_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_trig_info_7_rx_trig_info_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_7_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_TRIG_INFO_8 register definition
 *  Holds the latest PPDU RX VECTOR_1 127_96 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_TRIG_INFO_8            0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_TRIG_INFO_8_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000019C)
#define MAC_HW0_MU0_RX_TRIG_INFO_8_OFFSET      0x0000019C
#define MAC_HW0_MU0_RX_TRIG_INFO_8_INDEX       0x00000067
#define MAC_HW0_MU0_RX_TRIG_INFO_8_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_trig_info_8_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_8_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_TRIG_INFO_8_RX_TRIG_INFO_8_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_TRIG_INFO_8_RX_TRIG_INFO_8_LSB    0
#define MAC_HW0_MU0_RX_TRIG_INFO_8_RX_TRIG_INFO_8_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_TRIG_INFO_8_RX_TRIG_INFO_8_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_trig_info_8_rx_trig_info_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_8_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_TRIG_INFO_9 register definition
 *  Holds the latest PPDU RX VECTOR_1 159_128 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_TRIG_INFO_9            0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_TRIG_INFO_9_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001A0)
#define MAC_HW0_MU0_RX_TRIG_INFO_9_OFFSET      0x000001A0
#define MAC_HW0_MU0_RX_TRIG_INFO_9_INDEX       0x00000068
#define MAC_HW0_MU0_RX_TRIG_INFO_9_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_trig_info_9_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_9_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_TRIG_INFO_9_RX_TRIG_INFO_9_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_TRIG_INFO_9_RX_TRIG_INFO_9_LSB    0
#define MAC_HW0_MU0_RX_TRIG_INFO_9_RX_TRIG_INFO_9_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_TRIG_INFO_9_RX_TRIG_INFO_9_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_trig_info_9_rx_trig_info_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_9_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_TRIG_INFO_10 register definition
 *  Holds the latest PPDU RX VECTOR_1 191_160 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_TRIG_INFO_10           0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_TRIG_INFO_10_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001A4)
#define MAC_HW0_MU0_RX_TRIG_INFO_10_OFFSET      0x000001A4
#define MAC_HW0_MU0_RX_TRIG_INFO_10_INDEX       0x00000069
#define MAC_HW0_MU0_RX_TRIG_INFO_10_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_trig_info_10_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_10_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_TRIG_INFO_10_RX_TRIG_INFO_10_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_TRIG_INFO_10_RX_TRIG_INFO_10_LSB    0
#define MAC_HW0_MU0_RX_TRIG_INFO_10_RX_TRIG_INFO_10_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_TRIG_INFO_10_RX_TRIG_INFO_10_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_trig_info_10_rx_trig_info_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_10_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_TRIG_INFO_11 register definition
 *  Holds the latest PPDU RX VECTOR_1 223_192 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_TRIG_INFO_11           0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_TRIG_INFO_11_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001A8)
#define MAC_HW0_MU0_RX_TRIG_INFO_11_OFFSET      0x000001A8
#define MAC_HW0_MU0_RX_TRIG_INFO_11_INDEX       0x0000006A
#define MAC_HW0_MU0_RX_TRIG_INFO_11_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_trig_info_11_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_11_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_TRIG_INFO_11_RX_TRIG_INFO_11_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_TRIG_INFO_11_RX_TRIG_INFO_11_LSB    0
#define MAC_HW0_MU0_RX_TRIG_INFO_11_RX_TRIG_INFO_11_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_TRIG_INFO_11_RX_TRIG_INFO_11_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_trig_info_11_rx_trig_info_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_11_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_TRIG_INFO_12 register definition
 *  Holds the latest PPDU RX VECTOR_1 255_224 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_TRIG_INFO_12           0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_TRIG_INFO_12_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001AC)
#define MAC_HW0_MU0_RX_TRIG_INFO_12_OFFSET      0x000001AC
#define MAC_HW0_MU0_RX_TRIG_INFO_12_INDEX       0x0000006B
#define MAC_HW0_MU0_RX_TRIG_INFO_12_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_trig_info_12_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_12_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_TRIG_INFO_12_RX_TRIG_INFO_12_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_TRIG_INFO_12_RX_TRIG_INFO_12_LSB    0
#define MAC_HW0_MU0_RX_TRIG_INFO_12_RX_TRIG_INFO_12_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_TRIG_INFO_12_RX_TRIG_INFO_12_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_trig_info_12_rx_trig_info_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_12_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_RESP_STATUS_1 register definition
 *  Holds status of the PPDU that is soliciting the re register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    26    INTRA_BSS_TXOP_HOLDER_MATCH 0              
 *    25    TXOP_HOLDER_MATCH         0              
 *    24    KSR_ID_VALID              0              
 *    23:16 KSR_ID                    0x0
 *    11:08 TRIGGER_TYPE              0x0
 *    05:02 FRAME_SUB_TYPE            0x0
 *    01:00 FRAME_TYPE                0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_RESP_STATUS_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001B0)
#define MAC_HW0_MU0_RX_RESP_STATUS_1_OFFSET      0x000001B0
#define MAC_HW0_MU0_RX_RESP_STATUS_1_INDEX       0x0000006C
#define MAC_HW0_MU0_RX_RESP_STATUS_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_resp_status_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_1_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_RESP_STATUS_1_INTRA_BSS_TXOP_HOLDER_MATCH_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_RX_RESP_STATUS_1_INTRA_BSS_TXOP_HOLDER_MATCH_POS    26
#define MAC_HW0_MU0_RX_RESP_STATUS_1_TXOP_HOLDER_MATCH_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_RX_RESP_STATUS_1_TXOP_HOLDER_MATCH_POS    25
#define MAC_HW0_MU0_RX_RESP_STATUS_1_KSR_ID_VALID_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_RX_RESP_STATUS_1_KSR_ID_VALID_POS    24
#define MAC_HW0_MU0_RX_RESP_STATUS_1_KSR_ID_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_RX_RESP_STATUS_1_KSR_ID_LSB    16
#define MAC_HW0_MU0_RX_RESP_STATUS_1_KSR_ID_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_RESP_STATUS_1_TRIGGER_TYPE_MASK    ((uint32_t)0x00000F00)
#define MAC_HW0_MU0_RX_RESP_STATUS_1_TRIGGER_TYPE_LSB    8
#define MAC_HW0_MU0_RX_RESP_STATUS_1_TRIGGER_TYPE_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_RESP_STATUS_1_FRAME_SUB_TYPE_MASK    ((uint32_t)0x0000003C)
#define MAC_HW0_MU0_RX_RESP_STATUS_1_FRAME_SUB_TYPE_LSB    2
#define MAC_HW0_MU0_RX_RESP_STATUS_1_FRAME_SUB_TYPE_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_RESP_STATUS_1_FRAME_TYPE_MASK    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_RX_RESP_STATUS_1_FRAME_TYPE_LSB    0
#define MAC_HW0_MU0_RX_RESP_STATUS_1_FRAME_TYPE_WIDTH    ((uint32_t)0x00000002)

#define MAC_HW0_MU0_RX_RESP_STATUS_1_INTRA_BSS_TXOP_HOLDER_MATCH_RST    0x0
#define MAC_HW0_MU0_RX_RESP_STATUS_1_TXOP_HOLDER_MATCH_RST    0x0
#define MAC_HW0_MU0_RX_RESP_STATUS_1_KSR_ID_VALID_RST    0x0
#define MAC_HW0_MU0_RX_RESP_STATUS_1_KSR_ID_RST    0x0
#define MAC_HW0_MU0_RX_RESP_STATUS_1_TRIGGER_TYPE_RST    0x0
#define MAC_HW0_MU0_RX_RESP_STATUS_1_FRAME_SUB_TYPE_RST    0x0
#define MAC_HW0_MU0_RX_RESP_STATUS_1_FRAME_TYPE_RST    0x0

__INLINE void mac_hw0_mu0_rx_resp_status_1_unpack(uint8_t* intra_bss_txop_holder_match, uint8_t* txop_holder_match, uint8_t* ksr_id_valid, uint8_t* ksr_id, uint8_t* trigger_type, uint8_t* frame_sub_type, uint8_t* frame_type)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_1_ADDR);

	*intra_bss_txop_holder_match = (localVal & ((uint32_t)0x04000000)) >>  26;
	*txop_holder_match = (localVal & ((uint32_t)0x02000000)) >>  25;
	*ksr_id_valid = (localVal & ((uint32_t)0x01000000)) >>  24;
	*ksr_id = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*trigger_type = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*frame_sub_type = (localVal & ((uint32_t)0x0000003C)) >>  2;
	*frame_type = (localVal & ((uint32_t)0x00000003)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_resp_status_1_intra_bss_txop_holder_match_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_rx_resp_status_1_txop_holder_match_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_rx_resp_status_1_ksr_id_valid_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_rx_resp_status_1_ksr_id_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_rx_resp_status_1_trigger_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_rx_resp_status_1_frame_sub_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000003C)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_rx_resp_status_1_frame_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000003)) >> 0);
}

/**
 * @brief RX_RESP_STATUS_2 register definition
 *  Holds information about the required response register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 BA_LENGTH                 0x14
 *    11:08 ARSN                      0x0
 *    07:04 RESP_TYPE                 0x0
 *    03:02 AVAILABLE_BW              0x0
 *    01    TRIGGER_FCS_OK            0              
 *    00    RESPONSE_REQUIRED         0              
 * </pre>
 */
#define MAC_HW0_MU0_RX_RESP_STATUS_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001B4)
#define MAC_HW0_MU0_RX_RESP_STATUS_2_OFFSET      0x000001B4
#define MAC_HW0_MU0_RX_RESP_STATUS_2_INDEX       0x0000006D
#define MAC_HW0_MU0_RX_RESP_STATUS_2_RESET       0x00140000

__INLINE uint32_t  mac_hw0_mu0_rx_resp_status_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_2_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_RESP_STATUS_2_BA_LENGTH_MASK    ((uint32_t)0xFFFF0000)
#define MAC_HW0_MU0_RX_RESP_STATUS_2_BA_LENGTH_LSB    16
#define MAC_HW0_MU0_RX_RESP_STATUS_2_BA_LENGTH_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_RESP_STATUS_2_ARSN_MASK    ((uint32_t)0x00000F00)
#define MAC_HW0_MU0_RX_RESP_STATUS_2_ARSN_LSB    8
#define MAC_HW0_MU0_RX_RESP_STATUS_2_ARSN_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_RESP_STATUS_2_RESP_TYPE_MASK    ((uint32_t)0x000000F0)
#define MAC_HW0_MU0_RX_RESP_STATUS_2_RESP_TYPE_LSB    4
#define MAC_HW0_MU0_RX_RESP_STATUS_2_RESP_TYPE_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_RESP_STATUS_2_AVAILABLE_BW_MASK    ((uint32_t)0x0000000C)
#define MAC_HW0_MU0_RX_RESP_STATUS_2_AVAILABLE_BW_LSB    2
#define MAC_HW0_MU0_RX_RESP_STATUS_2_AVAILABLE_BW_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_RESP_STATUS_2_TRIGGER_FCS_OK_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_RESP_STATUS_2_TRIGGER_FCS_OK_POS    1
#define MAC_HW0_MU0_RX_RESP_STATUS_2_RESPONSE_REQUIRED_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_RESP_STATUS_2_RESPONSE_REQUIRED_POS    0

#define MAC_HW0_MU0_RX_RESP_STATUS_2_BA_LENGTH_RST    0x14
#define MAC_HW0_MU0_RX_RESP_STATUS_2_ARSN_RST    0x0
#define MAC_HW0_MU0_RX_RESP_STATUS_2_RESP_TYPE_RST    0x0
#define MAC_HW0_MU0_RX_RESP_STATUS_2_AVAILABLE_BW_RST    0x0
#define MAC_HW0_MU0_RX_RESP_STATUS_2_TRIGGER_FCS_OK_RST    0x0
#define MAC_HW0_MU0_RX_RESP_STATUS_2_RESPONSE_REQUIRED_RST    0x0

__INLINE void mac_hw0_mu0_rx_resp_status_2_unpack(uint16_t* ba_length, uint8_t* arsn, uint8_t* resp_type, uint8_t* available_bw, uint8_t* trigger_fcs_ok, uint8_t* response_required)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_2_ADDR);

	*ba_length = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*arsn = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*resp_type = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*available_bw = (localVal & ((uint32_t)0x0000000C)) >>  2;
	*trigger_fcs_ok = (localVal & ((uint32_t)0x00000002)) >>  1;
	*response_required = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_rx_resp_status_2_ba_length_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_rx_resp_status_2_arsn_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_rx_resp_status_2_resp_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_rx_resp_status_2_available_bw_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000C)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_rx_resp_status_2_trigger_fcs_ok_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_rx_resp_status_2_response_required_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESP_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief RX_TRIG_INFO_13 register definition
 *  Holds the fields extracted from the trigger frame register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    07    PE_DISAMBIGUITY           0              
 *    06    FEC_CODING_TYPE           0              
 *    05:04 PRE_FEC_PADDING_FACTOR    0x0
 *    03    LDPC_EXTRA_SYMBOL         0              
 *    02:00 NUM_LTF_SYMBOLS           0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_TRIG_INFO_13_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001B8)
#define MAC_HW0_MU0_RX_TRIG_INFO_13_OFFSET      0x000001B8
#define MAC_HW0_MU0_RX_TRIG_INFO_13_INDEX       0x0000006E
#define MAC_HW0_MU0_RX_TRIG_INFO_13_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_trig_info_13_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_13_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_TRIG_INFO_13_PE_DISAMBIGUITY_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_RX_TRIG_INFO_13_PE_DISAMBIGUITY_POS    7
#define MAC_HW0_MU0_RX_TRIG_INFO_13_FEC_CODING_TYPE_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_RX_TRIG_INFO_13_FEC_CODING_TYPE_POS    6
#define MAC_HW0_MU0_RX_TRIG_INFO_13_PRE_FEC_PADDING_FACTOR_MASK    ((uint32_t)0x00000030)
#define MAC_HW0_MU0_RX_TRIG_INFO_13_PRE_FEC_PADDING_FACTOR_LSB    4
#define MAC_HW0_MU0_RX_TRIG_INFO_13_PRE_FEC_PADDING_FACTOR_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_TRIG_INFO_13_LDPC_EXTRA_SYMBOL_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_TRIG_INFO_13_LDPC_EXTRA_SYMBOL_POS    3
#define MAC_HW0_MU0_RX_TRIG_INFO_13_NUM_LTF_SYMBOLS_MASK    ((uint32_t)0x00000007)
#define MAC_HW0_MU0_RX_TRIG_INFO_13_NUM_LTF_SYMBOLS_LSB    0
#define MAC_HW0_MU0_RX_TRIG_INFO_13_NUM_LTF_SYMBOLS_WIDTH    ((uint32_t)0x00000003)

#define MAC_HW0_MU0_RX_TRIG_INFO_13_PE_DISAMBIGUITY_RST    0x0
#define MAC_HW0_MU0_RX_TRIG_INFO_13_FEC_CODING_TYPE_RST    0x0
#define MAC_HW0_MU0_RX_TRIG_INFO_13_PRE_FEC_PADDING_FACTOR_RST    0x0
#define MAC_HW0_MU0_RX_TRIG_INFO_13_LDPC_EXTRA_SYMBOL_RST    0x0
#define MAC_HW0_MU0_RX_TRIG_INFO_13_NUM_LTF_SYMBOLS_RST    0x0

__INLINE void mac_hw0_mu0_rx_trig_info_13_unpack(uint8_t* pe_disambiguity, uint8_t* fec_coding_type, uint8_t* pre_fec_padding_factor, uint8_t* ldpc_extra_symbol, uint8_t* num_ltf_symbols)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_13_ADDR);

	*pe_disambiguity = (localVal & ((uint32_t)0x00000080)) >>  7;
	*fec_coding_type = (localVal & ((uint32_t)0x00000040)) >>  6;
	*pre_fec_padding_factor = (localVal & ((uint32_t)0x00000030)) >>  4;
	*ldpc_extra_symbol = (localVal & ((uint32_t)0x00000008)) >>  3;
	*num_ltf_symbols = (localVal & ((uint32_t)0x00000007)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_trig_info_13_pe_disambiguity_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_13_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_rx_trig_info_13_fec_coding_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_13_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_rx_trig_info_13_pre_fec_padding_factor_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_13_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000030)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_rx_trig_info_13_ldpc_extra_symbol_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_13_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t mac_hw0_mu0_rx_trig_info_13_num_ltf_symbols_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_TRIG_INFO_13_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000007)) >> 0);
}

/**
 * @brief RX_RESPONSE_PARAMS_1 register definition
 *  RX  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:24 ARSN                      0xE
 *    23:16 UPH                       0x0
 *    15:10 GROUP_VALID_FUTURE        0x0
 *    09:00 GROUP_VALID               0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001C0)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_OFFSET      0x000001C0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_INDEX       0x00000070
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_RESET       0x0E000000

__INLINE uint32_t  mac_hw0_mu0_rx_response_params_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR);
}

__INLINE void mac_hw0_mu0_rx_response_params_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ARSN_MASK    ((uint32_t)0x0F000000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ARSN_LSB    24
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ARSN_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_UPH_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_UPH_LSB    16
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_UPH_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_GROUP_VALID_FUTURE_MASK    ((uint32_t)0x0000FC00)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_GROUP_VALID_FUTURE_LSB    10
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_GROUP_VALID_FUTURE_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_GROUP_VALID_MASK    ((uint32_t)0x000003FF)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_GROUP_VALID_LSB    0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_GROUP_VALID_WIDTH    ((uint32_t)0x0000000A)

#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ARSN_RST    0xE
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_UPH_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_GROUP_VALID_FUTURE_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_GROUP_VALID_RST    0x0

__INLINE void mac_hw0_mu0_rx_response_params_1_pack(uint8_t arsn, uint8_t uph, uint8_t group_valid_future, uint16_t group_valid)
{
	ASSERT_ERR((((uint32_t)arsn << 24) & ~((uint32_t)0x0F000000)) == 0);
	ASSERT_ERR((((uint32_t)uph << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)group_valid_future << 10) & ~((uint32_t)0x0000FC00)) == 0);
	ASSERT_ERR((((uint32_t)group_valid << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR,  ((uint32_t)arsn << 24) |((uint32_t)uph << 16) |((uint32_t)group_valid_future << 10) |((uint32_t)group_valid << 0));
}

__INLINE void mac_hw0_mu0_rx_response_params_1_unpack(uint8_t* arsn, uint8_t* uph, uint8_t* group_valid_future, uint16_t* group_valid)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR);

	*arsn = (localVal & ((uint32_t)0x0F000000)) >>  24;
	*uph = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*group_valid_future = (localVal & ((uint32_t)0x0000FC00)) >>  10;
	*group_valid = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_response_params_1_arsn_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0F000000)) >> 24);
}
__INLINE void mac_hw0_mu0_rx_response_params_1_arsn_setf(uint8_t arsn)
{
	ASSERT_ERR((((uint32_t)arsn << 24) & ~((uint32_t)0x0F000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR) & ~((uint32_t)0x0F000000)) | ((uint32_t)arsn <<24));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_1_uph_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_response_params_1_uph_setf(uint8_t uph)
{
	ASSERT_ERR((((uint32_t)uph << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)uph <<16));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_1_group_valid_future_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FC00)) >> 10);
}
__INLINE void mac_hw0_mu0_rx_response_params_1_group_valid_future_setf(uint8_t groupvalidfuture)
{
	ASSERT_ERR((((uint32_t)groupvalidfuture << 10) & ~((uint32_t)0x0000FC00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR) & ~((uint32_t)0x0000FC00)) | ((uint32_t)groupvalidfuture <<10));
}
__INLINE uint16_t mac_hw0_mu0_rx_response_params_1_group_valid_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_response_params_1_group_valid_setf(uint16_t groupvalid)
{
	ASSERT_ERR((((uint32_t)groupvalid << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_1_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)groupvalid <<0));
}

/**
 * @brief RX_RESPONSE_PARAMS_2 register definition
 *  RX  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 TX_POWER_LEVEL            0x0
 *    20    TRIGGER_RESPONDING        0              
 *    19:18 GI_TYPE                   0x0
 *    17    STBC                      0              
 *    16    PREAMBLE_TYPE             0              
 *    15    FEC_CODING                0              
 *    14:08 MCS                       0x0
 *    07:04 LEG_RATE                  0x0
 *    03:00 FORMAT_MOD                0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001C4)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_OFFSET      0x000001C4
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_INDEX       0x00000071
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_response_params_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR);
}

__INLINE void mac_hw0_mu0_rx_response_params_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_TX_POWER_LEVEL_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_TX_POWER_LEVEL_LSB    24
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_TX_POWER_LEVEL_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_TRIGGER_RESPONDING_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_TRIGGER_RESPONDING_POS    20
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_GI_TYPE_MASK    ((uint32_t)0x000C0000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_GI_TYPE_LSB    18
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_GI_TYPE_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_STBC_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_STBC_POS    17
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_PREAMBLE_TYPE_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_PREAMBLE_TYPE_POS    16
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_FEC_CODING_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_FEC_CODING_POS    15
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_MCS_MASK    ((uint32_t)0x00007F00)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_MCS_LSB    8
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_MCS_WIDTH    ((uint32_t)0x00000007)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_LEG_RATE_MASK    ((uint32_t)0x000000F0)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_LEG_RATE_LSB    4
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_LEG_RATE_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_FORMAT_MOD_MASK    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_FORMAT_MOD_LSB    0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_FORMAT_MOD_WIDTH    ((uint32_t)0x00000004)

#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_TX_POWER_LEVEL_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_TRIGGER_RESPONDING_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_GI_TYPE_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_STBC_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_PREAMBLE_TYPE_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_FEC_CODING_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_MCS_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_LEG_RATE_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_FORMAT_MOD_RST    0x0

__INLINE void mac_hw0_mu0_rx_response_params_2_pack(uint8_t tx_power_level, uint8_t trigger_responding, uint8_t gi_type, uint8_t stbc, uint8_t preamble_type, uint8_t fec_coding, uint8_t mcs, uint8_t leg_rate, uint8_t format_mod)
{
	ASSERT_ERR((((uint32_t)tx_power_level << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)trigger_responding << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)gi_type << 18) & ~((uint32_t)0x000C0000)) == 0);
	ASSERT_ERR((((uint32_t)stbc << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)preamble_type << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)fec_coding << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)mcs << 8) & ~((uint32_t)0x00007F00)) == 0);
	ASSERT_ERR((((uint32_t)leg_rate << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)format_mod << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR,  ((uint32_t)tx_power_level << 24) |((uint32_t)trigger_responding << 20) |((uint32_t)gi_type << 18) |((uint32_t)stbc << 17) |((uint32_t)preamble_type << 16) |((uint32_t)fec_coding << 15) |((uint32_t)mcs << 8) |((uint32_t)leg_rate << 4) |((uint32_t)format_mod << 0));
}

__INLINE void mac_hw0_mu0_rx_response_params_2_unpack(uint8_t* tx_power_level, uint8_t* trigger_responding, uint8_t* gi_type, uint8_t* stbc, uint8_t* preamble_type, uint8_t* fec_coding, uint8_t* mcs, uint8_t* leg_rate, uint8_t* format_mod)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR);

	*tx_power_level = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*trigger_responding = (localVal & ((uint32_t)0x00100000)) >>  20;
	*gi_type = (localVal & ((uint32_t)0x000C0000)) >>  18;
	*stbc = (localVal & ((uint32_t)0x00020000)) >>  17;
	*preamble_type = (localVal & ((uint32_t)0x00010000)) >>  16;
	*fec_coding = (localVal & ((uint32_t)0x00008000)) >>  15;
	*mcs = (localVal & ((uint32_t)0x00007F00)) >>  8;
	*leg_rate = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*format_mod = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_response_params_2_tx_power_level_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_rx_response_params_2_tx_power_level_setf(uint8_t txpowerlevel)
{
	ASSERT_ERR((((uint32_t)txpowerlevel << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)txpowerlevel <<24));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_2_trigger_responding_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_rx_response_params_2_trigger_responding_setf(uint8_t triggerresponding)
{
	ASSERT_ERR((((uint32_t)triggerresponding << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)triggerresponding <<20));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_2_gi_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000C0000)) >> 18);
}
__INLINE void mac_hw0_mu0_rx_response_params_2_gi_type_setf(uint8_t gitype)
{
	ASSERT_ERR((((uint32_t)gitype << 18) & ~((uint32_t)0x000C0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR) & ~((uint32_t)0x000C0000)) | ((uint32_t)gitype <<18));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_2_stbc_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_rx_response_params_2_stbc_setf(uint8_t stbc)
{
	ASSERT_ERR((((uint32_t)stbc << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)stbc <<17));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_2_preamble_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_response_params_2_preamble_type_setf(uint8_t preambletype)
{
	ASSERT_ERR((((uint32_t)preambletype << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)preambletype <<16));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_2_fec_coding_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void mac_hw0_mu0_rx_response_params_2_fec_coding_setf(uint8_t feccoding)
{
	ASSERT_ERR((((uint32_t)feccoding << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)feccoding <<15));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_2_mcs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00007F00)) >> 8);
}
__INLINE void mac_hw0_mu0_rx_response_params_2_mcs_setf(uint8_t mcs)
{
	ASSERT_ERR((((uint32_t)mcs << 8) & ~((uint32_t)0x00007F00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR) & ~((uint32_t)0x00007F00)) | ((uint32_t)mcs <<8));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_2_leg_rate_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void mac_hw0_mu0_rx_response_params_2_leg_rate_setf(uint8_t legrate)
{
	ASSERT_ERR((((uint32_t)legrate << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)legrate <<4));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_2_format_mod_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_response_params_2_format_mod_setf(uint8_t formatmod)
{
	ASSERT_ERR((((uint32_t)formatmod << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_2_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)formatmod <<0));
}

/**
 * @brief RX_RESPONSE_PARAMS_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    17:16 CH_BW                     0x0
 *    15:00 SERVICE                   0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001C8)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_OFFSET      0x000001C8
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_INDEX       0x00000072
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_response_params_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_ADDR);
}

__INLINE void mac_hw0_mu0_rx_response_params_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_CH_BW_MASK    ((uint32_t)0x00030000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_CH_BW_LSB    16
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_CH_BW_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_SERVICE_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_SERVICE_LSB    0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_SERVICE_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_CH_BW_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_SERVICE_RST    0x0

__INLINE void mac_hw0_mu0_rx_response_params_3_pack(uint8_t ch_bw, uint16_t service)
{
	ASSERT_ERR((((uint32_t)ch_bw << 16) & ~((uint32_t)0x00030000)) == 0);
	ASSERT_ERR((((uint32_t)service << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_ADDR,  ((uint32_t)ch_bw << 16) |((uint32_t)service << 0));
}

__INLINE void mac_hw0_mu0_rx_response_params_3_unpack(uint8_t* ch_bw, uint16_t* service)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_ADDR);

	*ch_bw = (localVal & ((uint32_t)0x00030000)) >>  16;
	*service = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_response_params_3_ch_bw_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00030000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_response_params_3_ch_bw_setf(uint8_t chbw)
{
	ASSERT_ERR((((uint32_t)chbw << 16) & ~((uint32_t)0x00030000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_ADDR) & ~((uint32_t)0x00030000)) | ((uint32_t)chbw <<16));
}
__INLINE uint16_t mac_hw0_mu0_rx_response_params_3_service_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_response_params_3_service_setf(uint16_t service)
{
	ASSERT_ERR((((uint32_t)service << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_3_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)service <<0));
}

/**
 * @brief RX_RESPONSE_PARAMS_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    TXOP_DURATION_VALID       0              
 *    30:24 TXOP_DURATION             0x0
 *    17:16 MAX_PE_DURATION           0x0
 *    15    UPLINK                    0              
 *    14    DOPPLER                   0              
 *    13    BEAM_CHANGE               0              
 *    12    DCM                       0              
 *    11:08 SPATIAL_REUSE_HE_SU       0x0
 *    07:06 LTF_TYPE                  0x0
 *    05:00 BSS_COLOR                 0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001CC)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_OFFSET      0x000001CC
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_INDEX       0x00000073
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_response_params_4_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR);
}

__INLINE void mac_hw0_mu0_rx_response_params_4_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_TXOP_DURATION_VALID_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_TXOP_DURATION_VALID_POS    31
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_TXOP_DURATION_MASK    ((uint32_t)0x7F000000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_TXOP_DURATION_LSB    24
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_TXOP_DURATION_WIDTH    ((uint32_t)0x00000007)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_MAX_PE_DURATION_MASK    ((uint32_t)0x00030000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_MAX_PE_DURATION_LSB    16
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_MAX_PE_DURATION_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_UPLINK_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_UPLINK_POS    15
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_DOPPLER_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_DOPPLER_POS    14
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_BEAM_CHANGE_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_BEAM_CHANGE_POS    13
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_DCM_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_DCM_POS    12
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_SPATIAL_REUSE_HE_SU_MASK    ((uint32_t)0x00000F00)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_SPATIAL_REUSE_HE_SU_LSB    8
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_SPATIAL_REUSE_HE_SU_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_LTF_TYPE_MASK    ((uint32_t)0x000000C0)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_LTF_TYPE_LSB    6
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_LTF_TYPE_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_BSS_COLOR_MASK    ((uint32_t)0x0000003F)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_BSS_COLOR_LSB    0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_BSS_COLOR_WIDTH    ((uint32_t)0x00000006)

#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_TXOP_DURATION_VALID_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_TXOP_DURATION_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_MAX_PE_DURATION_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_UPLINK_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_DOPPLER_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_BEAM_CHANGE_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_DCM_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_SPATIAL_REUSE_HE_SU_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_LTF_TYPE_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_BSS_COLOR_RST    0x0

__INLINE void mac_hw0_mu0_rx_response_params_4_pack(uint8_t txop_duration_valid, uint8_t txop_duration, uint8_t max_pe_duration, uint8_t uplink, uint8_t doppler, uint8_t beam_change, uint8_t dcm, uint8_t spatial_reuse_he_su, uint8_t ltf_type, uint8_t bss_color)
{
	ASSERT_ERR((((uint32_t)txop_duration_valid << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)txop_duration << 24) & ~((uint32_t)0x7F000000)) == 0);
	ASSERT_ERR((((uint32_t)max_pe_duration << 16) & ~((uint32_t)0x00030000)) == 0);
	ASSERT_ERR((((uint32_t)uplink << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)doppler << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)beam_change << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)dcm << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)spatial_reuse_he_su << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)ltf_type << 6) & ~((uint32_t)0x000000C0)) == 0);
	ASSERT_ERR((((uint32_t)bss_color << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR,  ((uint32_t)txop_duration_valid << 31) |((uint32_t)txop_duration << 24) |((uint32_t)max_pe_duration << 16) |((uint32_t)uplink << 15) |((uint32_t)doppler << 14) |((uint32_t)beam_change << 13) |((uint32_t)dcm << 12) |((uint32_t)spatial_reuse_he_su << 8) |((uint32_t)ltf_type << 6) |((uint32_t)bss_color << 0));
}

__INLINE void mac_hw0_mu0_rx_response_params_4_unpack(uint8_t* txop_duration_valid, uint8_t* txop_duration, uint8_t* max_pe_duration, uint8_t* uplink, uint8_t* doppler, uint8_t* beam_change, uint8_t* dcm, uint8_t* spatial_reuse_he_su, uint8_t* ltf_type, uint8_t* bss_color)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR);

	*txop_duration_valid = (localVal & ((uint32_t)0x80000000)) >>  31;
	*txop_duration = (localVal & ((uint32_t)0x7F000000)) >>  24;
	*max_pe_duration = (localVal & ((uint32_t)0x00030000)) >>  16;
	*uplink = (localVal & ((uint32_t)0x00008000)) >>  15;
	*doppler = (localVal & ((uint32_t)0x00004000)) >>  14;
	*beam_change = (localVal & ((uint32_t)0x00002000)) >>  13;
	*dcm = (localVal & ((uint32_t)0x00001000)) >>  12;
	*spatial_reuse_he_su = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*ltf_type = (localVal & ((uint32_t)0x000000C0)) >>  6;
	*bss_color = (localVal & ((uint32_t)0x0000003F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_response_params_4_txop_duration_valid_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_rx_response_params_4_txop_duration_valid_setf(uint8_t txopdurationvalid)
{
	ASSERT_ERR((((uint32_t)txopdurationvalid << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)txopdurationvalid <<31));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_4_txop_duration_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x7F000000)) >> 24);
}
__INLINE void mac_hw0_mu0_rx_response_params_4_txop_duration_setf(uint8_t txopduration)
{
	ASSERT_ERR((((uint32_t)txopduration << 24) & ~((uint32_t)0x7F000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR) & ~((uint32_t)0x7F000000)) | ((uint32_t)txopduration <<24));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_4_max_pe_duration_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00030000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_response_params_4_max_pe_duration_setf(uint8_t maxpeduration)
{
	ASSERT_ERR((((uint32_t)maxpeduration << 16) & ~((uint32_t)0x00030000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR) & ~((uint32_t)0x00030000)) | ((uint32_t)maxpeduration <<16));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_4_uplink_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void mac_hw0_mu0_rx_response_params_4_uplink_setf(uint8_t uplink)
{
	ASSERT_ERR((((uint32_t)uplink << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)uplink <<15));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_4_doppler_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_rx_response_params_4_doppler_setf(uint8_t doppler)
{
	ASSERT_ERR((((uint32_t)doppler << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)doppler <<14));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_4_beam_change_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_rx_response_params_4_beam_change_setf(uint8_t beamchange)
{
	ASSERT_ERR((((uint32_t)beamchange << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)beamchange <<13));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_4_dcm_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_rx_response_params_4_dcm_setf(uint8_t dcm)
{
	ASSERT_ERR((((uint32_t)dcm << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)dcm <<12));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_4_spatial_reuse_he_su_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void mac_hw0_mu0_rx_response_params_4_spatial_reuse_he_su_setf(uint8_t spatialreusehesu)
{
	ASSERT_ERR((((uint32_t)spatialreusehesu << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)spatialreusehesu <<8));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_4_ltf_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000C0)) >> 6);
}
__INLINE void mac_hw0_mu0_rx_response_params_4_ltf_type_setf(uint8_t ltftype)
{
	ASSERT_ERR((((uint32_t)ltftype << 6) & ~((uint32_t)0x000000C0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR) & ~((uint32_t)0x000000C0)) | ((uint32_t)ltftype <<6));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_4_bss_color_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000003F)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_response_params_4_bss_color_setf(uint8_t bsscolor)
{
	ASSERT_ERR((((uint32_t)bsscolor << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_4_ADDR) & ~((uint32_t)0x0000003F)) | ((uint32_t)bsscolor <<0));
}

/**
 * @brief RX_RESPONSE_PARAMS_5 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 SMM_INDEX                 0x0
 *    23:22 FTM                       0x0
 *    21    DO_IMPLICIT_LEARNING      0              
 *    20    SOUNDING                  0              
 *    19    SMOOTHING                 0              
 *    18    DOZE_NOT_ALLOWED          0              
 *    17    AGGREGATION               0              
 *    16    NO_SIG_EXTN               0              
 *    15    BEAMFORMED                0              
 *    14:12 PA_DETECT                 0x0
 *    11:00 LEG_LENGTH                0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001D0)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_OFFSET      0x000001D0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_INDEX       0x00000074
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_response_params_5_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR);
}

__INLINE void mac_hw0_mu0_rx_response_params_5_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_SMM_INDEX_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_SMM_INDEX_LSB    24
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_SMM_INDEX_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_FTM_MASK    ((uint32_t)0x00C00000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_FTM_LSB    22
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_FTM_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_DO_IMPLICIT_LEARNING_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_DO_IMPLICIT_LEARNING_POS    21
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_SOUNDING_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_SOUNDING_POS    20
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_SMOOTHING_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_SMOOTHING_POS    19
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_DOZE_NOT_ALLOWED_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_DOZE_NOT_ALLOWED_POS    18
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_AGGREGATION_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_AGGREGATION_POS    17
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_NO_SIG_EXTN_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_NO_SIG_EXTN_POS    16
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_BEAMFORMED_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_BEAMFORMED_POS    15
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_PA_DETECT_MASK    ((uint32_t)0x00007000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_PA_DETECT_LSB    12
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_PA_DETECT_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_LEG_LENGTH_MASK    ((uint32_t)0x00000FFF)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_LEG_LENGTH_LSB    0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_LEG_LENGTH_WIDTH    ((uint32_t)0x0000000C)

#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_SMM_INDEX_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_FTM_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_DO_IMPLICIT_LEARNING_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_SOUNDING_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_SMOOTHING_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_DOZE_NOT_ALLOWED_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_AGGREGATION_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_NO_SIG_EXTN_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_BEAMFORMED_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_PA_DETECT_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_LEG_LENGTH_RST    0x0

__INLINE void mac_hw0_mu0_rx_response_params_5_pack(uint8_t smm_index, uint8_t ftm, uint8_t do_implicit_learning, uint8_t sounding, uint8_t smoothing, uint8_t doze_not_allowed, uint8_t aggregation, uint8_t no_sig_extn, uint8_t beamformed, uint8_t pa_detect, uint16_t leg_length)
{
	ASSERT_ERR((((uint32_t)smm_index << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)ftm << 22) & ~((uint32_t)0x00C00000)) == 0);
	ASSERT_ERR((((uint32_t)do_implicit_learning << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)sounding << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)smoothing << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)doze_not_allowed << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)aggregation << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)no_sig_extn << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)beamformed << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)pa_detect << 12) & ~((uint32_t)0x00007000)) == 0);
	ASSERT_ERR((((uint32_t)leg_length << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR,  ((uint32_t)smm_index << 24) |((uint32_t)ftm << 22) |((uint32_t)do_implicit_learning << 21) |((uint32_t)sounding << 20) |((uint32_t)smoothing << 19) |((uint32_t)doze_not_allowed << 18) |((uint32_t)aggregation << 17) |((uint32_t)no_sig_extn << 16) |((uint32_t)beamformed << 15) |((uint32_t)pa_detect << 12) |((uint32_t)leg_length << 0));
}

__INLINE void mac_hw0_mu0_rx_response_params_5_unpack(uint8_t* smm_index, uint8_t* ftm, uint8_t* do_implicit_learning, uint8_t* sounding, uint8_t* smoothing, uint8_t* doze_not_allowed, uint8_t* aggregation, uint8_t* no_sig_extn, uint8_t* beamformed, uint8_t* pa_detect, uint16_t* leg_length)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR);

	*smm_index = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*ftm = (localVal & ((uint32_t)0x00C00000)) >>  22;
	*do_implicit_learning = (localVal & ((uint32_t)0x00200000)) >>  21;
	*sounding = (localVal & ((uint32_t)0x00100000)) >>  20;
	*smoothing = (localVal & ((uint32_t)0x00080000)) >>  19;
	*doze_not_allowed = (localVal & ((uint32_t)0x00040000)) >>  18;
	*aggregation = (localVal & ((uint32_t)0x00020000)) >>  17;
	*no_sig_extn = (localVal & ((uint32_t)0x00010000)) >>  16;
	*beamformed = (localVal & ((uint32_t)0x00008000)) >>  15;
	*pa_detect = (localVal & ((uint32_t)0x00007000)) >>  12;
	*leg_length = (localVal & ((uint32_t)0x00000FFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_response_params_5_smm_index_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_rx_response_params_5_smm_index_setf(uint8_t smmindex)
{
	ASSERT_ERR((((uint32_t)smmindex << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)smmindex <<24));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_5_ftm_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00C00000)) >> 22);
}
__INLINE void mac_hw0_mu0_rx_response_params_5_ftm_setf(uint8_t ftm)
{
	ASSERT_ERR((((uint32_t)ftm << 22) & ~((uint32_t)0x00C00000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR) & ~((uint32_t)0x00C00000)) | ((uint32_t)ftm <<22));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_5_do_implicit_learning_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_rx_response_params_5_do_implicit_learning_setf(uint8_t doimplicitlearning)
{
	ASSERT_ERR((((uint32_t)doimplicitlearning << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)doimplicitlearning <<21));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_5_sounding_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_rx_response_params_5_sounding_setf(uint8_t sounding)
{
	ASSERT_ERR((((uint32_t)sounding << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)sounding <<20));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_5_smoothing_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_rx_response_params_5_smoothing_setf(uint8_t smoothing)
{
	ASSERT_ERR((((uint32_t)smoothing << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)smoothing <<19));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_5_doze_not_allowed_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_rx_response_params_5_doze_not_allowed_setf(uint8_t dozenotallowed)
{
	ASSERT_ERR((((uint32_t)dozenotallowed << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)dozenotallowed <<18));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_5_aggregation_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_rx_response_params_5_aggregation_setf(uint8_t aggregation)
{
	ASSERT_ERR((((uint32_t)aggregation << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)aggregation <<17));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_5_no_sig_extn_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_response_params_5_no_sig_extn_setf(uint8_t nosigextn)
{
	ASSERT_ERR((((uint32_t)nosigextn << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)nosigextn <<16));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_5_beamformed_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void mac_hw0_mu0_rx_response_params_5_beamformed_setf(uint8_t beamformed)
{
	ASSERT_ERR((((uint32_t)beamformed << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)beamformed <<15));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_5_pa_detect_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00007000)) >> 12);
}
__INLINE void mac_hw0_mu0_rx_response_params_5_pa_detect_setf(uint8_t padetect)
{
	ASSERT_ERR((((uint32_t)padetect << 12) & ~((uint32_t)0x00007000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR) & ~((uint32_t)0x00007000)) | ((uint32_t)padetect <<12));
}
__INLINE uint16_t mac_hw0_mu0_rx_response_params_5_leg_length_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x00000FFF)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_response_params_5_leg_length_setf(uint16_t leglength)
{
	ASSERT_ERR((((uint32_t)leglength << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_5_ADDR) & ~((uint32_t)0x00000FFF)) | ((uint32_t)leglength <<0));
}

/**
 * @brief RX_RESPONSE_PARAMS_6 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 GENERAL_RC0               0x0
 *    23:00 HT_LENGTH                 0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001D4)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_OFFSET      0x000001D4
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_INDEX       0x00000075
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_response_params_6_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_ADDR);
}

__INLINE void mac_hw0_mu0_rx_response_params_6_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_GENERAL_RC_0_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_GENERAL_RC_0_LSB    24
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_GENERAL_RC_0_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_HT_LENGTH_MASK    ((uint32_t)0x00FFFFFF)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_HT_LENGTH_LSB    0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_HT_LENGTH_WIDTH    ((uint32_t)0x00000018)

#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_GENERAL_RC_0_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_HT_LENGTH_RST    0x0

__INLINE void mac_hw0_mu0_rx_response_params_6_pack(uint8_t general_rc0, uint32_t ht_length)
{
	ASSERT_ERR((((uint32_t)general_rc0 << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)ht_length << 0) & ~((uint32_t)0x00FFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_ADDR,  ((uint32_t)general_rc0 << 24) |((uint32_t)ht_length << 0));
}

__INLINE void mac_hw0_mu0_rx_response_params_6_unpack(uint8_t* general_rc0, uint32_t* ht_length)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_ADDR);

	*general_rc0 = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*ht_length = (localVal & ((uint32_t)0x00FFFFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_response_params_6_general_rc_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_rx_response_params_6_general_rc_0_setf(uint8_t generalrc0)
{
	ASSERT_ERR((((uint32_t)generalrc0 << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)generalrc0 <<24));
}
__INLINE uint32_t mac_hw0_mu0_rx_response_params_6_ht_length_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0x00FFFFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_response_params_6_ht_length_setf(uint32_t htlength)
{
	ASSERT_ERR((((uint32_t)htlength << 0) & ~((uint32_t)0x00FFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_6_ADDR) & ~((uint32_t)0x00FFFFFF)) | ((uint32_t)htlength <<0));
}

/**
 * @brief RX_RESPONSE_PARAMS_7 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:16 ACTIVE_TX_CHAINS          0x0
 *    15:00 ANTENNA_SET               0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001D8)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_OFFSET      0x000001D8
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_INDEX       0x00000076
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_response_params_7_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ADDR);
}

__INLINE void mac_hw0_mu0_rx_response_params_7_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ACTIVE_TX_CHAINS_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ACTIVE_TX_CHAINS_LSB    16
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ACTIVE_TX_CHAINS_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ANTENNA_SET_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ANTENNA_SET_LSB    0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ANTENNA_SET_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ACTIVE_TX_CHAINS_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ANTENNA_SET_RST    0x0

__INLINE void mac_hw0_mu0_rx_response_params_7_pack(uint8_t active_tx_chains, uint16_t antenna_set)
{
	ASSERT_ERR((((uint32_t)active_tx_chains << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)antenna_set << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ADDR,  ((uint32_t)active_tx_chains << 16) |((uint32_t)antenna_set << 0));
}

__INLINE void mac_hw0_mu0_rx_response_params_7_unpack(uint8_t* active_tx_chains, uint16_t* antenna_set)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ADDR);

	*active_tx_chains = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*antenna_set = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_response_params_7_active_tx_chains_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_response_params_7_active_tx_chains_setf(uint8_t activetxchains)
{
	ASSERT_ERR((((uint32_t)activetxchains << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)activetxchains <<16));
}
__INLINE uint16_t mac_hw0_mu0_rx_response_params_7_antenna_set_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_response_params_7_antenna_set_setf(uint16_t antennaset)
{
	ASSERT_ERR((((uint32_t)antennaset << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_7_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)antennaset <<0));
}

/**
 * @brief RX_RESPONSE_PARAMS_8 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21:16 GENERAL_MAC_CTRL0         0x0
 *    12:00 GENERAL_PHY_CONTROL       0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001DC)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_OFFSET      0x000001DC
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_INDEX       0x00000077
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_response_params_8_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_ADDR);
}

__INLINE void mac_hw0_mu0_rx_response_params_8_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_GENERAL_MAC_CTRL_0_MASK    ((uint32_t)0x003F0000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_GENERAL_MAC_CTRL_0_LSB    16
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_GENERAL_MAC_CTRL_0_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_GENERAL_PHY_CONTROL_MASK    ((uint32_t)0x00001FFF)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_GENERAL_PHY_CONTROL_LSB    0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_GENERAL_PHY_CONTROL_WIDTH    ((uint32_t)0x0000000D)

#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_GENERAL_MAC_CTRL_0_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_GENERAL_PHY_CONTROL_RST    0x0

__INLINE void mac_hw0_mu0_rx_response_params_8_pack(uint8_t general_mac_ctrl0, uint16_t general_phy_control)
{
	ASSERT_ERR((((uint32_t)general_mac_ctrl0 << 16) & ~((uint32_t)0x003F0000)) == 0);
	ASSERT_ERR((((uint32_t)general_phy_control << 0) & ~((uint32_t)0x00001FFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_ADDR,  ((uint32_t)general_mac_ctrl0 << 16) |((uint32_t)general_phy_control << 0));
}

__INLINE void mac_hw0_mu0_rx_response_params_8_unpack(uint8_t* general_mac_ctrl0, uint16_t* general_phy_control)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_ADDR);

	*general_mac_ctrl0 = (localVal & ((uint32_t)0x003F0000)) >>  16;
	*general_phy_control = (localVal & ((uint32_t)0x00001FFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_response_params_8_general_mac_ctrl_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x003F0000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_response_params_8_general_mac_ctrl_0_setf(uint8_t generalmacctrl0)
{
	ASSERT_ERR((((uint32_t)generalmacctrl0 << 16) & ~((uint32_t)0x003F0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_ADDR) & ~((uint32_t)0x003F0000)) | ((uint32_t)generalmacctrl0 <<16));
}
__INLINE uint16_t mac_hw0_mu0_rx_response_params_8_general_phy_control_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x00001FFF)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_response_params_8_general_phy_control_setf(uint16_t generalphycontrol)
{
	ASSERT_ERR((((uint32_t)generalphycontrol << 0) & ~((uint32_t)0x00001FFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_8_ADDR) & ~((uint32_t)0x00001FFF)) | ((uint32_t)generalphycontrol <<0));
}

/**
 * @brief RX_RESPONSE_PARAMS_9 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    24:16 HE_SIG_A2_RESERVED        0x0
 *    15:00 SPATIAL_REUSE_HE_TRIG     0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001E0)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_OFFSET      0x000001E0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_INDEX       0x00000078
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_response_params_9_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_ADDR);
}

__INLINE void mac_hw0_mu0_rx_response_params_9_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_HE_SIG_A_2_RESERVED_MASK    ((uint32_t)0x01FF0000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_HE_SIG_A_2_RESERVED_LSB    16
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_HE_SIG_A_2_RESERVED_WIDTH    ((uint32_t)0x00000009)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_SPATIAL_REUSE_HE_TRIG_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_SPATIAL_REUSE_HE_TRIG_LSB    0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_SPATIAL_REUSE_HE_TRIG_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_HE_SIG_A_2_RESERVED_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_SPATIAL_REUSE_HE_TRIG_RST    0x0

__INLINE void mac_hw0_mu0_rx_response_params_9_pack(uint16_t he_sig_a2_reserved, uint16_t spatial_reuse_he_trig)
{
	ASSERT_ERR((((uint32_t)he_sig_a2_reserved << 16) & ~((uint32_t)0x01FF0000)) == 0);
	ASSERT_ERR((((uint32_t)spatial_reuse_he_trig << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_ADDR,  ((uint32_t)he_sig_a2_reserved << 16) |((uint32_t)spatial_reuse_he_trig << 0));
}

__INLINE void mac_hw0_mu0_rx_response_params_9_unpack(uint16_t* he_sig_a2_reserved, uint16_t* spatial_reuse_he_trig)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_ADDR);

	*he_sig_a2_reserved = (localVal & ((uint32_t)0x01FF0000)) >>  16;
	*spatial_reuse_he_trig = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_rx_response_params_9_he_sig_a_2_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x01FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_response_params_9_he_sig_a_2_reserved_setf(uint16_t hesiga2reserved)
{
	ASSERT_ERR((((uint32_t)hesiga2reserved << 16) & ~((uint32_t)0x01FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_ADDR) & ~((uint32_t)0x01FF0000)) | ((uint32_t)hesiga2reserved <<16));
}
__INLINE uint16_t mac_hw0_mu0_rx_response_params_9_spatial_reuse_he_trig_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_response_params_9_spatial_reuse_he_trig_setf(uint16_t spatialreusehetrig)
{
	ASSERT_ERR((((uint32_t)spatialreusehetrig << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_9_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)spatialreusehetrig <<0));
}

/**
 * @brief RX_RESPONSE_PARAMS_10 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21    PE_DISAMBIGUITY           0              
 *    20    LDPC_EXTRA_SYMBOL         0              
 *    19    LTF_MODE                  0              
 *    18:16 NUM_OF_HE_LTF_SYMBOLS     0x0
 *    15:14 PRE_FEC_PAD_FACTOR        0x0
 *    13:11 STARTING_STS              0x0
 *    10:08 N_STS                     0x0
 *    07:00 RU_ALLOCATION             0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001E4)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_OFFSET      0x000001E4
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_INDEX       0x00000079
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_response_params_10_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR);
}

__INLINE void mac_hw0_mu0_rx_response_params_10_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_PE_DISAMBIGUITY_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_PE_DISAMBIGUITY_POS    21
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_LDPC_EXTRA_SYMBOL_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_LDPC_EXTRA_SYMBOL_POS    20
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_LTF_MODE_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_LTF_MODE_POS    19
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_NUM_OF_HE_LTF_SYMBOLS_MASK    ((uint32_t)0x00070000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_NUM_OF_HE_LTF_SYMBOLS_LSB    16
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_NUM_OF_HE_LTF_SYMBOLS_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_PRE_FEC_PAD_FACTOR_MASK    ((uint32_t)0x0000C000)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_PRE_FEC_PAD_FACTOR_LSB    14
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_PRE_FEC_PAD_FACTOR_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_STARTING_STS_MASK    ((uint32_t)0x00003800)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_STARTING_STS_LSB    11
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_STARTING_STS_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_N_STS_MASK    ((uint32_t)0x00000700)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_N_STS_LSB    8
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_N_STS_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_RU_ALLOCATION_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_RU_ALLOCATION_LSB    0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_RU_ALLOCATION_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_PE_DISAMBIGUITY_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_LDPC_EXTRA_SYMBOL_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_LTF_MODE_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_NUM_OF_HE_LTF_SYMBOLS_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_PRE_FEC_PAD_FACTOR_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_STARTING_STS_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_N_STS_RST    0x0
#define MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_RU_ALLOCATION_RST    0x0

__INLINE void mac_hw0_mu0_rx_response_params_10_pack(uint8_t pe_disambiguity, uint8_t ldpc_extra_symbol, uint8_t ltf_mode, uint8_t num_of_he_ltf_symbols, uint8_t pre_fec_pad_factor, uint8_t starting_sts, uint8_t n_sts, uint8_t ru_allocation)
{
	ASSERT_ERR((((uint32_t)pe_disambiguity << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)ldpc_extra_symbol << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)ltf_mode << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)num_of_he_ltf_symbols << 16) & ~((uint32_t)0x00070000)) == 0);
	ASSERT_ERR((((uint32_t)pre_fec_pad_factor << 14) & ~((uint32_t)0x0000C000)) == 0);
	ASSERT_ERR((((uint32_t)starting_sts << 11) & ~((uint32_t)0x00003800)) == 0);
	ASSERT_ERR((((uint32_t)n_sts << 8) & ~((uint32_t)0x00000700)) == 0);
	ASSERT_ERR((((uint32_t)ru_allocation << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR,  ((uint32_t)pe_disambiguity << 21) |((uint32_t)ldpc_extra_symbol << 20) |((uint32_t)ltf_mode << 19) |((uint32_t)num_of_he_ltf_symbols << 16) |((uint32_t)pre_fec_pad_factor << 14) |((uint32_t)starting_sts << 11) |((uint32_t)n_sts << 8) |((uint32_t)ru_allocation << 0));
}

__INLINE void mac_hw0_mu0_rx_response_params_10_unpack(uint8_t* pe_disambiguity, uint8_t* ldpc_extra_symbol, uint8_t* ltf_mode, uint8_t* num_of_he_ltf_symbols, uint8_t* pre_fec_pad_factor, uint8_t* starting_sts, uint8_t* n_sts, uint8_t* ru_allocation)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR);

	*pe_disambiguity = (localVal & ((uint32_t)0x00200000)) >>  21;
	*ldpc_extra_symbol = (localVal & ((uint32_t)0x00100000)) >>  20;
	*ltf_mode = (localVal & ((uint32_t)0x00080000)) >>  19;
	*num_of_he_ltf_symbols = (localVal & ((uint32_t)0x00070000)) >>  16;
	*pre_fec_pad_factor = (localVal & ((uint32_t)0x0000C000)) >>  14;
	*starting_sts = (localVal & ((uint32_t)0x00003800)) >>  11;
	*n_sts = (localVal & ((uint32_t)0x00000700)) >>  8;
	*ru_allocation = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_response_params_10_pe_disambiguity_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_rx_response_params_10_pe_disambiguity_setf(uint8_t pedisambiguity)
{
	ASSERT_ERR((((uint32_t)pedisambiguity << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)pedisambiguity <<21));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_10_ldpc_extra_symbol_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_rx_response_params_10_ldpc_extra_symbol_setf(uint8_t ldpcextrasymbol)
{
	ASSERT_ERR((((uint32_t)ldpcextrasymbol << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)ldpcextrasymbol <<20));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_10_ltf_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_rx_response_params_10_ltf_mode_setf(uint8_t ltfmode)
{
	ASSERT_ERR((((uint32_t)ltfmode << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)ltfmode <<19));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_10_num_of_he_ltf_symbols_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00070000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_response_params_10_num_of_he_ltf_symbols_setf(uint8_t numofheltfsymbols)
{
	ASSERT_ERR((((uint32_t)numofheltfsymbols << 16) & ~((uint32_t)0x00070000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR) & ~((uint32_t)0x00070000)) | ((uint32_t)numofheltfsymbols <<16));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_10_pre_fec_pad_factor_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000C000)) >> 14);
}
__INLINE void mac_hw0_mu0_rx_response_params_10_pre_fec_pad_factor_setf(uint8_t prefecpadfactor)
{
	ASSERT_ERR((((uint32_t)prefecpadfactor << 14) & ~((uint32_t)0x0000C000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR) & ~((uint32_t)0x0000C000)) | ((uint32_t)prefecpadfactor <<14));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_10_starting_sts_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003800)) >> 11);
}
__INLINE void mac_hw0_mu0_rx_response_params_10_starting_sts_setf(uint8_t startingsts)
{
	ASSERT_ERR((((uint32_t)startingsts << 11) & ~((uint32_t)0x00003800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR) & ~((uint32_t)0x00003800)) | ((uint32_t)startingsts <<11));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_10_n_sts_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000700)) >> 8);
}
__INLINE void mac_hw0_mu0_rx_response_params_10_n_sts_setf(uint8_t nsts)
{
	ASSERT_ERR((((uint32_t)nsts << 8) & ~((uint32_t)0x00000700)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR) & ~((uint32_t)0x00000700)) | ((uint32_t)nsts <<8));
}
__INLINE uint8_t mac_hw0_mu0_rx_response_params_10_ru_allocation_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_response_params_10_ru_allocation_setf(uint8_t ruallocation)
{
	ASSERT_ERR((((uint32_t)ruallocation << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_RESPONSE_PARAMS_10_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)ruallocation <<0));
}

/**
 * @brief RX_OVERFLOW_AVOID register definition
 *  Controls RX fifo overflow avoidance register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    CHECK_ROOM_IN_MPIF_FIFO   0              
 *    11:00 ENCR_INIT_STALL           0x80
 * </pre>
 */
#define MAC_HW0_MU0_RX_OVERFLOW_AVOID_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001F0)
#define MAC_HW0_MU0_RX_OVERFLOW_AVOID_OFFSET      0x000001F0
#define MAC_HW0_MU0_RX_OVERFLOW_AVOID_INDEX       0x0000007C
#define MAC_HW0_MU0_RX_OVERFLOW_AVOID_RESET       0x00000080

__INLINE uint32_t  mac_hw0_mu0_rx_overflow_avoid_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_OVERFLOW_AVOID_ADDR);
}

__INLINE void mac_hw0_mu0_rx_overflow_avoid_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_OVERFLOW_AVOID_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_OVERFLOW_AVOID_CHECK_ROOM_IN_MPIF_FIFO_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_RX_OVERFLOW_AVOID_CHECK_ROOM_IN_MPIF_FIFO_POS    15
#define MAC_HW0_MU0_RX_OVERFLOW_AVOID_ENCR_INIT_STALL_MASK    ((uint32_t)0x00000FFF)
#define MAC_HW0_MU0_RX_OVERFLOW_AVOID_ENCR_INIT_STALL_LSB    0
#define MAC_HW0_MU0_RX_OVERFLOW_AVOID_ENCR_INIT_STALL_WIDTH    ((uint32_t)0x0000000C)

#define MAC_HW0_MU0_RX_OVERFLOW_AVOID_CHECK_ROOM_IN_MPIF_FIFO_RST    0x0
#define MAC_HW0_MU0_RX_OVERFLOW_AVOID_ENCR_INIT_STALL_RST    0x80

__INLINE void mac_hw0_mu0_rx_overflow_avoid_pack(uint8_t check_room_in_mpif_fifo, uint16_t encr_init_stall)
{
	ASSERT_ERR((((uint32_t)check_room_in_mpif_fifo << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)encr_init_stall << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_OVERFLOW_AVOID_ADDR,  ((uint32_t)check_room_in_mpif_fifo << 15) |((uint32_t)encr_init_stall << 0));
}

__INLINE void mac_hw0_mu0_rx_overflow_avoid_unpack(uint8_t* check_room_in_mpif_fifo, uint16_t* encr_init_stall)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_OVERFLOW_AVOID_ADDR);

	*check_room_in_mpif_fifo = (localVal & ((uint32_t)0x00008000)) >>  15;
	*encr_init_stall = (localVal & ((uint32_t)0x00000FFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_overflow_avoid_check_room_in_mpif_fifo_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_OVERFLOW_AVOID_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void mac_hw0_mu0_rx_overflow_avoid_check_room_in_mpif_fifo_setf(uint8_t checkroominmpiffifo)
{
	ASSERT_ERR((((uint32_t)checkroominmpiffifo << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_OVERFLOW_AVOID_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_OVERFLOW_AVOID_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)checkroominmpiffifo <<15));
}
__INLINE uint16_t mac_hw0_mu0_rx_overflow_avoid_encr_init_stall_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_OVERFLOW_AVOID_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x00000FFF)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_overflow_avoid_encr_init_stall_setf(uint16_t encrinitstall)
{
	ASSERT_ERR((((uint32_t)encrinitstall << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_OVERFLOW_AVOID_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_OVERFLOW_AVOID_ADDR) & ~((uint32_t)0x00000FFF)) | ((uint32_t)encrinitstall <<0));
}

/**
 * @brief RX_DISCARD_MPDU_CNT register definition
 *  Contains the number of MPDUs that were discarded  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_DISCARD_MPDU_CNT       0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_DISCARD_MPDU_CNT_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000001F4)
#define MAC_HW0_MU0_RX_DISCARD_MPDU_CNT_OFFSET      0x000001F4
#define MAC_HW0_MU0_RX_DISCARD_MPDU_CNT_INDEX       0x0000007D
#define MAC_HW0_MU0_RX_DISCARD_MPDU_CNT_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_discard_mpdu_cnt_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_DISCARD_MPDU_CNT_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_DISCARD_MPDU_CNT_RX_DISCARD_MPDU_CNT_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_DISCARD_MPDU_CNT_RX_DISCARD_MPDU_CNT_LSB    0
#define MAC_HW0_MU0_RX_DISCARD_MPDU_CNT_RX_DISCARD_MPDU_CNT_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_DISCARD_MPDU_CNT_RX_DISCARD_MPDU_CNT_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_discard_mpdu_cnt_rx_discard_mpdu_cnt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_DISCARD_MPDU_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief EDCA_AC_0 register definition
 *  Contains the AC0 parameters. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EDCA_DISABLE_0            0              
 *    27:12 TX_OP_LIMIT_0             0x0
 *    11:08 CW_MAX_0                  0xA
 *    07:04 CW_MIN_0                  0x4
 *    03:00 AIFSN_0                   0x7
 * </pre>
 */
#define MAC_HW0_MU0_EDCA_AC_0_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000200)
#define MAC_HW0_MU0_EDCA_AC_0_OFFSET      0x00000200
#define MAC_HW0_MU0_EDCA_AC_0_INDEX       0x00000080
#define MAC_HW0_MU0_EDCA_AC_0_RESET       0x00000A47

__INLINE uint32_t  mac_hw0_mu0_edca_ac_0_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_EDCA_AC_0_ADDR);
}

__INLINE void mac_hw0_mu0_edca_ac_0_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_0_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_EDCA_AC_0_EDCA_DISABLE_0_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_EDCA_AC_0_EDCA_DISABLE_0_POS    31
#define MAC_HW0_MU0_EDCA_AC_0_TX_OP_LIMIT_0_MASK    ((uint32_t)0x0FFFF000)
#define MAC_HW0_MU0_EDCA_AC_0_TX_OP_LIMIT_0_LSB    12
#define MAC_HW0_MU0_EDCA_AC_0_TX_OP_LIMIT_0_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_EDCA_AC_0_CW_MAX_0_MASK    ((uint32_t)0x00000F00)
#define MAC_HW0_MU0_EDCA_AC_0_CW_MAX_0_LSB    8
#define MAC_HW0_MU0_EDCA_AC_0_CW_MAX_0_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_EDCA_AC_0_CW_MIN_0_MASK    ((uint32_t)0x000000F0)
#define MAC_HW0_MU0_EDCA_AC_0_CW_MIN_0_LSB    4
#define MAC_HW0_MU0_EDCA_AC_0_CW_MIN_0_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_EDCA_AC_0_AIFSN_0_MASK    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_EDCA_AC_0_AIFSN_0_LSB    0
#define MAC_HW0_MU0_EDCA_AC_0_AIFSN_0_WIDTH    ((uint32_t)0x00000004)

#define MAC_HW0_MU0_EDCA_AC_0_EDCA_DISABLE_0_RST    0x0
#define MAC_HW0_MU0_EDCA_AC_0_TX_OP_LIMIT_0_RST    0x0
#define MAC_HW0_MU0_EDCA_AC_0_CW_MAX_0_RST    0xA
#define MAC_HW0_MU0_EDCA_AC_0_CW_MIN_0_RST    0x4
#define MAC_HW0_MU0_EDCA_AC_0_AIFSN_0_RST    0x7

__INLINE void mac_hw0_mu0_edca_ac_0_pack(uint8_t edca_disable_0, uint16_t tx_op_limit_0, uint8_t cw_max_0, uint8_t cw_min_0, uint8_t aifsn_0)
{
	ASSERT_ERR((((uint32_t)edca_disable_0 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_op_limit_0 << 12) & ~((uint32_t)0x0FFFF000)) == 0);
	ASSERT_ERR((((uint32_t)cw_max_0 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)cw_min_0 << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)aifsn_0 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_0_ADDR,  ((uint32_t)edca_disable_0 << 31) |((uint32_t)tx_op_limit_0 << 12) |((uint32_t)cw_max_0 << 8) |((uint32_t)cw_min_0 << 4) |((uint32_t)aifsn_0 << 0));
}

__INLINE void mac_hw0_mu0_edca_ac_0_unpack(uint8_t* edca_disable_0, uint16_t* tx_op_limit_0, uint8_t* cw_max_0, uint8_t* cw_min_0, uint8_t* aifsn_0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_0_ADDR);

	*edca_disable_0 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*tx_op_limit_0 = (localVal & ((uint32_t)0x0FFFF000)) >>  12;
	*cw_max_0 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*cw_min_0 = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*aifsn_0 = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_edca_ac_0_edca_disable_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_edca_ac_0_edca_disable_0_setf(uint8_t edcadisable0)
{
	ASSERT_ERR((((uint32_t)edcadisable0 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_0_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_0_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)edcadisable0 <<31));
}
__INLINE uint16_t mac_hw0_mu0_edca_ac_0_tx_op_limit_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_0_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0FFFF000)) >> 12);
}
__INLINE void mac_hw0_mu0_edca_ac_0_tx_op_limit_0_setf(uint16_t txoplimit0)
{
	ASSERT_ERR((((uint32_t)txoplimit0 << 12) & ~((uint32_t)0x0FFFF000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_0_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_0_ADDR) & ~((uint32_t)0x0FFFF000)) | ((uint32_t)txoplimit0 <<12));
}
__INLINE uint8_t mac_hw0_mu0_edca_ac_0_cw_max_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void mac_hw0_mu0_edca_ac_0_cw_max_0_setf(uint8_t cwmax0)
{
	ASSERT_ERR((((uint32_t)cwmax0 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_0_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_0_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)cwmax0 <<8));
}
__INLINE uint8_t mac_hw0_mu0_edca_ac_0_cw_min_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void mac_hw0_mu0_edca_ac_0_cw_min_0_setf(uint8_t cwmin0)
{
	ASSERT_ERR((((uint32_t)cwmin0 << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_0_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_0_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)cwmin0 <<4));
}
__INLINE uint8_t mac_hw0_mu0_edca_ac_0_aifsn_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void mac_hw0_mu0_edca_ac_0_aifsn_0_setf(uint8_t aifsn0)
{
	ASSERT_ERR((((uint32_t)aifsn0 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_0_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_0_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)aifsn0 <<0));
}

/**
 * @brief EDCA_AC_1 register definition
 *  Contains the AC1 parameters. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EDCA_DISABLE_1            0              
 *    27:12 TX_OP_LIMIT_1             0x0
 *    11:08 CW_MAX_1                  0xA
 *    07:04 CW_MIN_1                  0x4
 *    03:00 AIFSN_1                   0x3
 * </pre>
 */
#define MAC_HW0_MU0_EDCA_AC_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000204)
#define MAC_HW0_MU0_EDCA_AC_1_OFFSET      0x00000204
#define MAC_HW0_MU0_EDCA_AC_1_INDEX       0x00000081
#define MAC_HW0_MU0_EDCA_AC_1_RESET       0x00000A43

__INLINE uint32_t  mac_hw0_mu0_edca_ac_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_EDCA_AC_1_ADDR);
}

__INLINE void mac_hw0_mu0_edca_ac_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_EDCA_AC_1_EDCA_DISABLE_1_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_EDCA_AC_1_EDCA_DISABLE_1_POS    31
#define MAC_HW0_MU0_EDCA_AC_1_TX_OP_LIMIT_1_MASK    ((uint32_t)0x0FFFF000)
#define MAC_HW0_MU0_EDCA_AC_1_TX_OP_LIMIT_1_LSB    12
#define MAC_HW0_MU0_EDCA_AC_1_TX_OP_LIMIT_1_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_EDCA_AC_1_CW_MAX_1_MASK    ((uint32_t)0x00000F00)
#define MAC_HW0_MU0_EDCA_AC_1_CW_MAX_1_LSB    8
#define MAC_HW0_MU0_EDCA_AC_1_CW_MAX_1_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_EDCA_AC_1_CW_MIN_1_MASK    ((uint32_t)0x000000F0)
#define MAC_HW0_MU0_EDCA_AC_1_CW_MIN_1_LSB    4
#define MAC_HW0_MU0_EDCA_AC_1_CW_MIN_1_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_EDCA_AC_1_AIFSN_1_MASK    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_EDCA_AC_1_AIFSN_1_LSB    0
#define MAC_HW0_MU0_EDCA_AC_1_AIFSN_1_WIDTH    ((uint32_t)0x00000004)

#define MAC_HW0_MU0_EDCA_AC_1_EDCA_DISABLE_1_RST    0x0
#define MAC_HW0_MU0_EDCA_AC_1_TX_OP_LIMIT_1_RST    0x0
#define MAC_HW0_MU0_EDCA_AC_1_CW_MAX_1_RST    0xA
#define MAC_HW0_MU0_EDCA_AC_1_CW_MIN_1_RST    0x4
#define MAC_HW0_MU0_EDCA_AC_1_AIFSN_1_RST    0x3

__INLINE void mac_hw0_mu0_edca_ac_1_pack(uint8_t edca_disable_1, uint16_t tx_op_limit_1, uint8_t cw_max_1, uint8_t cw_min_1, uint8_t aifsn_1)
{
	ASSERT_ERR((((uint32_t)edca_disable_1 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_op_limit_1 << 12) & ~((uint32_t)0x0FFFF000)) == 0);
	ASSERT_ERR((((uint32_t)cw_max_1 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)cw_min_1 << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)aifsn_1 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_1_ADDR,  ((uint32_t)edca_disable_1 << 31) |((uint32_t)tx_op_limit_1 << 12) |((uint32_t)cw_max_1 << 8) |((uint32_t)cw_min_1 << 4) |((uint32_t)aifsn_1 << 0));
}

__INLINE void mac_hw0_mu0_edca_ac_1_unpack(uint8_t* edca_disable_1, uint16_t* tx_op_limit_1, uint8_t* cw_max_1, uint8_t* cw_min_1, uint8_t* aifsn_1)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_1_ADDR);

	*edca_disable_1 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*tx_op_limit_1 = (localVal & ((uint32_t)0x0FFFF000)) >>  12;
	*cw_max_1 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*cw_min_1 = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*aifsn_1 = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_edca_ac_1_edca_disable_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_edca_ac_1_edca_disable_1_setf(uint8_t edcadisable1)
{
	ASSERT_ERR((((uint32_t)edcadisable1 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_1_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)edcadisable1 <<31));
}
__INLINE uint16_t mac_hw0_mu0_edca_ac_1_tx_op_limit_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0FFFF000)) >> 12);
}
__INLINE void mac_hw0_mu0_edca_ac_1_tx_op_limit_1_setf(uint16_t txoplimit1)
{
	ASSERT_ERR((((uint32_t)txoplimit1 << 12) & ~((uint32_t)0x0FFFF000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_1_ADDR) & ~((uint32_t)0x0FFFF000)) | ((uint32_t)txoplimit1 <<12));
}
__INLINE uint8_t mac_hw0_mu0_edca_ac_1_cw_max_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void mac_hw0_mu0_edca_ac_1_cw_max_1_setf(uint8_t cwmax1)
{
	ASSERT_ERR((((uint32_t)cwmax1 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_1_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)cwmax1 <<8));
}
__INLINE uint8_t mac_hw0_mu0_edca_ac_1_cw_min_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void mac_hw0_mu0_edca_ac_1_cw_min_1_setf(uint8_t cwmin1)
{
	ASSERT_ERR((((uint32_t)cwmin1 << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_1_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)cwmin1 <<4));
}
__INLINE uint8_t mac_hw0_mu0_edca_ac_1_aifsn_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void mac_hw0_mu0_edca_ac_1_aifsn_1_setf(uint8_t aifsn1)
{
	ASSERT_ERR((((uint32_t)aifsn1 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_1_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)aifsn1 <<0));
}

/**
 * @brief EDCA_AC_2 register definition
 *  Contains the AC2 parameters. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EDCA_DISABLE_2            0              
 *    27:12 TX_OP_LIMIT_2             0x5E
 *    11:08 CW_MAX_2                  0x4
 *    07:04 CW_MIN_2                  0x3
 *    03:00 AIFSN_2                   0x2
 * </pre>
 */
#define MAC_HW0_MU0_EDCA_AC_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000208)
#define MAC_HW0_MU0_EDCA_AC_2_OFFSET      0x00000208
#define MAC_HW0_MU0_EDCA_AC_2_INDEX       0x00000082
#define MAC_HW0_MU0_EDCA_AC_2_RESET       0x0005E432

__INLINE uint32_t  mac_hw0_mu0_edca_ac_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_EDCA_AC_2_ADDR);
}

__INLINE void mac_hw0_mu0_edca_ac_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_EDCA_AC_2_EDCA_DISABLE_2_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_EDCA_AC_2_EDCA_DISABLE_2_POS    31
#define MAC_HW0_MU0_EDCA_AC_2_TX_OP_LIMIT_2_MASK    ((uint32_t)0x0FFFF000)
#define MAC_HW0_MU0_EDCA_AC_2_TX_OP_LIMIT_2_LSB    12
#define MAC_HW0_MU0_EDCA_AC_2_TX_OP_LIMIT_2_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_EDCA_AC_2_CW_MAX_2_MASK    ((uint32_t)0x00000F00)
#define MAC_HW0_MU0_EDCA_AC_2_CW_MAX_2_LSB    8
#define MAC_HW0_MU0_EDCA_AC_2_CW_MAX_2_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_EDCA_AC_2_CW_MIN_2_MASK    ((uint32_t)0x000000F0)
#define MAC_HW0_MU0_EDCA_AC_2_CW_MIN_2_LSB    4
#define MAC_HW0_MU0_EDCA_AC_2_CW_MIN_2_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_EDCA_AC_2_AIFSN_2_MASK    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_EDCA_AC_2_AIFSN_2_LSB    0
#define MAC_HW0_MU0_EDCA_AC_2_AIFSN_2_WIDTH    ((uint32_t)0x00000004)

#define MAC_HW0_MU0_EDCA_AC_2_EDCA_DISABLE_2_RST    0x0
#define MAC_HW0_MU0_EDCA_AC_2_TX_OP_LIMIT_2_RST    0x5E
#define MAC_HW0_MU0_EDCA_AC_2_CW_MAX_2_RST    0x4
#define MAC_HW0_MU0_EDCA_AC_2_CW_MIN_2_RST    0x3
#define MAC_HW0_MU0_EDCA_AC_2_AIFSN_2_RST    0x2

__INLINE void mac_hw0_mu0_edca_ac_2_pack(uint8_t edca_disable_2, uint16_t tx_op_limit_2, uint8_t cw_max_2, uint8_t cw_min_2, uint8_t aifsn_2)
{
	ASSERT_ERR((((uint32_t)edca_disable_2 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_op_limit_2 << 12) & ~((uint32_t)0x0FFFF000)) == 0);
	ASSERT_ERR((((uint32_t)cw_max_2 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)cw_min_2 << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)aifsn_2 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_2_ADDR,  ((uint32_t)edca_disable_2 << 31) |((uint32_t)tx_op_limit_2 << 12) |((uint32_t)cw_max_2 << 8) |((uint32_t)cw_min_2 << 4) |((uint32_t)aifsn_2 << 0));
}

__INLINE void mac_hw0_mu0_edca_ac_2_unpack(uint8_t* edca_disable_2, uint16_t* tx_op_limit_2, uint8_t* cw_max_2, uint8_t* cw_min_2, uint8_t* aifsn_2)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_2_ADDR);

	*edca_disable_2 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*tx_op_limit_2 = (localVal & ((uint32_t)0x0FFFF000)) >>  12;
	*cw_max_2 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*cw_min_2 = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*aifsn_2 = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_edca_ac_2_edca_disable_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_edca_ac_2_edca_disable_2_setf(uint8_t edcadisable2)
{
	ASSERT_ERR((((uint32_t)edcadisable2 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_2_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)edcadisable2 <<31));
}
__INLINE uint16_t mac_hw0_mu0_edca_ac_2_tx_op_limit_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0FFFF000)) >> 12);
}
__INLINE void mac_hw0_mu0_edca_ac_2_tx_op_limit_2_setf(uint16_t txoplimit2)
{
	ASSERT_ERR((((uint32_t)txoplimit2 << 12) & ~((uint32_t)0x0FFFF000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_2_ADDR) & ~((uint32_t)0x0FFFF000)) | ((uint32_t)txoplimit2 <<12));
}
__INLINE uint8_t mac_hw0_mu0_edca_ac_2_cw_max_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void mac_hw0_mu0_edca_ac_2_cw_max_2_setf(uint8_t cwmax2)
{
	ASSERT_ERR((((uint32_t)cwmax2 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_2_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)cwmax2 <<8));
}
__INLINE uint8_t mac_hw0_mu0_edca_ac_2_cw_min_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void mac_hw0_mu0_edca_ac_2_cw_min_2_setf(uint8_t cwmin2)
{
	ASSERT_ERR((((uint32_t)cwmin2 << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_2_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)cwmin2 <<4));
}
__INLINE uint8_t mac_hw0_mu0_edca_ac_2_aifsn_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void mac_hw0_mu0_edca_ac_2_aifsn_2_setf(uint8_t aifsn2)
{
	ASSERT_ERR((((uint32_t)aifsn2 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_2_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)aifsn2 <<0));
}

/**
 * @brief EDCA_AC_3 register definition
 *  Contains the AC3 parameters. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EDCA_DISABLE_3            0              
 *    27:12 TX_OP_LIMIT_3             0x2F
 *    11:08 CW_MAX_3                  0x3
 *    07:04 CW_MIN_3                  0x2
 *    03:00 AIFSN_3                   0x2
 * </pre>
 */
#define MAC_HW0_MU0_EDCA_AC_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000020C)
#define MAC_HW0_MU0_EDCA_AC_3_OFFSET      0x0000020C
#define MAC_HW0_MU0_EDCA_AC_3_INDEX       0x00000083
#define MAC_HW0_MU0_EDCA_AC_3_RESET       0x0002F322

__INLINE uint32_t  mac_hw0_mu0_edca_ac_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_EDCA_AC_3_ADDR);
}

__INLINE void mac_hw0_mu0_edca_ac_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_EDCA_AC_3_EDCA_DISABLE_3_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_EDCA_AC_3_EDCA_DISABLE_3_POS    31
#define MAC_HW0_MU0_EDCA_AC_3_TX_OP_LIMIT_3_MASK    ((uint32_t)0x0FFFF000)
#define MAC_HW0_MU0_EDCA_AC_3_TX_OP_LIMIT_3_LSB    12
#define MAC_HW0_MU0_EDCA_AC_3_TX_OP_LIMIT_3_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_EDCA_AC_3_CW_MAX_3_MASK    ((uint32_t)0x00000F00)
#define MAC_HW0_MU0_EDCA_AC_3_CW_MAX_3_LSB    8
#define MAC_HW0_MU0_EDCA_AC_3_CW_MAX_3_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_EDCA_AC_3_CW_MIN_3_MASK    ((uint32_t)0x000000F0)
#define MAC_HW0_MU0_EDCA_AC_3_CW_MIN_3_LSB    4
#define MAC_HW0_MU0_EDCA_AC_3_CW_MIN_3_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_EDCA_AC_3_AIFSN_3_MASK    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_EDCA_AC_3_AIFSN_3_LSB    0
#define MAC_HW0_MU0_EDCA_AC_3_AIFSN_3_WIDTH    ((uint32_t)0x00000004)

#define MAC_HW0_MU0_EDCA_AC_3_EDCA_DISABLE_3_RST    0x0
#define MAC_HW0_MU0_EDCA_AC_3_TX_OP_LIMIT_3_RST    0x2F
#define MAC_HW0_MU0_EDCA_AC_3_CW_MAX_3_RST    0x3
#define MAC_HW0_MU0_EDCA_AC_3_CW_MIN_3_RST    0x2
#define MAC_HW0_MU0_EDCA_AC_3_AIFSN_3_RST    0x2

__INLINE void mac_hw0_mu0_edca_ac_3_pack(uint8_t edca_disable_3, uint16_t tx_op_limit_3, uint8_t cw_max_3, uint8_t cw_min_3, uint8_t aifsn_3)
{
	ASSERT_ERR((((uint32_t)edca_disable_3 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_op_limit_3 << 12) & ~((uint32_t)0x0FFFF000)) == 0);
	ASSERT_ERR((((uint32_t)cw_max_3 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)cw_min_3 << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)aifsn_3 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_3_ADDR,  ((uint32_t)edca_disable_3 << 31) |((uint32_t)tx_op_limit_3 << 12) |((uint32_t)cw_max_3 << 8) |((uint32_t)cw_min_3 << 4) |((uint32_t)aifsn_3 << 0));
}

__INLINE void mac_hw0_mu0_edca_ac_3_unpack(uint8_t* edca_disable_3, uint16_t* tx_op_limit_3, uint8_t* cw_max_3, uint8_t* cw_min_3, uint8_t* aifsn_3)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_3_ADDR);

	*edca_disable_3 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*tx_op_limit_3 = (localVal & ((uint32_t)0x0FFFF000)) >>  12;
	*cw_max_3 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*cw_min_3 = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*aifsn_3 = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_edca_ac_3_edca_disable_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_edca_ac_3_edca_disable_3_setf(uint8_t edcadisable3)
{
	ASSERT_ERR((((uint32_t)edcadisable3 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_3_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)edcadisable3 <<31));
}
__INLINE uint16_t mac_hw0_mu0_edca_ac_3_tx_op_limit_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_3_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0FFFF000)) >> 12);
}
__INLINE void mac_hw0_mu0_edca_ac_3_tx_op_limit_3_setf(uint16_t txoplimit3)
{
	ASSERT_ERR((((uint32_t)txoplimit3 << 12) & ~((uint32_t)0x0FFFF000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_3_ADDR) & ~((uint32_t)0x0FFFF000)) | ((uint32_t)txoplimit3 <<12));
}
__INLINE uint8_t mac_hw0_mu0_edca_ac_3_cw_max_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void mac_hw0_mu0_edca_ac_3_cw_max_3_setf(uint8_t cwmax3)
{
	ASSERT_ERR((((uint32_t)cwmax3 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_3_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)cwmax3 <<8));
}
__INLINE uint8_t mac_hw0_mu0_edca_ac_3_cw_min_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void mac_hw0_mu0_edca_ac_3_cw_min_3_setf(uint8_t cwmin3)
{
	ASSERT_ERR((((uint32_t)cwmin3 << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_3_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)cwmin3 <<4));
}
__INLINE uint8_t mac_hw0_mu0_edca_ac_3_aifsn_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_AC_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void mac_hw0_mu0_edca_ac_3_aifsn_3_setf(uint8_t aifsn3)
{
	ASSERT_ERR((((uint32_t)aifsn3 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_3_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)aifsn3 <<0));
}

/**
 * @brief TIMINGS_11 register definition
 *  Controls timing and delay parameters register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 ACK_TIME3                 0x20
 *    23:16 ACK_TIME2                 0x44
 *    15:08 ACK_TIME1                 0x2C
 *    07:00 ACK_TIME0                 0x20
 * </pre>
 */
#define MAC_HW0_MU0_TIMINGS_11_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000210)
#define MAC_HW0_MU0_TIMINGS_11_OFFSET      0x00000210
#define MAC_HW0_MU0_TIMINGS_11_INDEX       0x00000084
#define MAC_HW0_MU0_TIMINGS_11_RESET       0x20442C20

__INLINE uint32_t  mac_hw0_mu0_timings_11_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMINGS_11_ADDR);
}

__INLINE void mac_hw0_mu0_timings_11_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_11_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMINGS_11_ACK_TIME_3_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_TIMINGS_11_ACK_TIME_3_LSB    24
#define MAC_HW0_MU0_TIMINGS_11_ACK_TIME_3_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TIMINGS_11_ACK_TIME_2_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_TIMINGS_11_ACK_TIME_2_LSB    16
#define MAC_HW0_MU0_TIMINGS_11_ACK_TIME_2_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TIMINGS_11_ACK_TIME_1_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_TIMINGS_11_ACK_TIME_1_LSB    8
#define MAC_HW0_MU0_TIMINGS_11_ACK_TIME_1_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TIMINGS_11_ACK_TIME_0_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_TIMINGS_11_ACK_TIME_0_LSB    0
#define MAC_HW0_MU0_TIMINGS_11_ACK_TIME_0_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_TIMINGS_11_ACK_TIME_3_RST    0x20
#define MAC_HW0_MU0_TIMINGS_11_ACK_TIME_2_RST    0x44
#define MAC_HW0_MU0_TIMINGS_11_ACK_TIME_1_RST    0x2C
#define MAC_HW0_MU0_TIMINGS_11_ACK_TIME_0_RST    0x20

__INLINE void mac_hw0_mu0_timings_11_pack(uint8_t ack_time3, uint8_t ack_time2, uint8_t ack_time1, uint8_t ack_time0)
{
	ASSERT_ERR((((uint32_t)ack_time3 << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)ack_time2 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)ack_time1 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)ack_time0 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_11_ADDR,  ((uint32_t)ack_time3 << 24) |((uint32_t)ack_time2 << 16) |((uint32_t)ack_time1 << 8) |((uint32_t)ack_time0 << 0));
}

__INLINE void mac_hw0_mu0_timings_11_unpack(uint8_t* ack_time3, uint8_t* ack_time2, uint8_t* ack_time1, uint8_t* ack_time0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_11_ADDR);

	*ack_time3 = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*ack_time2 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*ack_time1 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*ack_time0 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_timings_11_ack_time_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_11_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_timings_11_ack_time_3_setf(uint8_t acktime3)
{
	ASSERT_ERR((((uint32_t)acktime3 << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_11_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_11_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)acktime3 <<24));
}
__INLINE uint8_t mac_hw0_mu0_timings_11_ack_time_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_11_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_timings_11_ack_time_2_setf(uint8_t acktime2)
{
	ASSERT_ERR((((uint32_t)acktime2 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_11_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_11_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)acktime2 <<16));
}
__INLINE uint8_t mac_hw0_mu0_timings_11_ack_time_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_11_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_timings_11_ack_time_1_setf(uint8_t acktime1)
{
	ASSERT_ERR((((uint32_t)acktime1 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_11_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_11_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)acktime1 <<8));
}
__INLINE uint8_t mac_hw0_mu0_timings_11_ack_time_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_11_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_timings_11_ack_time_0_setf(uint8_t acktime0)
{
	ASSERT_ERR((((uint32_t)acktime0 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_11_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_11_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)acktime0 <<0));
}

/**
 * @brief TIMINGS_12 register definition
 *  Controls timing and delay parameters register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 ACK_TIME7                 0x20
 *    23:16 ACK_TIME6                 0x1C
 *    15:08 ACK_TIME5                 0x44
 *    07:00 ACK_TIME4                 0x2C
 * </pre>
 */
#define MAC_HW0_MU0_TIMINGS_12_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000214)
#define MAC_HW0_MU0_TIMINGS_12_OFFSET      0x00000214
#define MAC_HW0_MU0_TIMINGS_12_INDEX       0x00000085
#define MAC_HW0_MU0_TIMINGS_12_RESET       0x201C442C

__INLINE uint32_t  mac_hw0_mu0_timings_12_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMINGS_12_ADDR);
}

__INLINE void mac_hw0_mu0_timings_12_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_12_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMINGS_12_ACK_TIME_7_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_TIMINGS_12_ACK_TIME_7_LSB    24
#define MAC_HW0_MU0_TIMINGS_12_ACK_TIME_7_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TIMINGS_12_ACK_TIME_6_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_TIMINGS_12_ACK_TIME_6_LSB    16
#define MAC_HW0_MU0_TIMINGS_12_ACK_TIME_6_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TIMINGS_12_ACK_TIME_5_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_TIMINGS_12_ACK_TIME_5_LSB    8
#define MAC_HW0_MU0_TIMINGS_12_ACK_TIME_5_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TIMINGS_12_ACK_TIME_4_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_TIMINGS_12_ACK_TIME_4_LSB    0
#define MAC_HW0_MU0_TIMINGS_12_ACK_TIME_4_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_TIMINGS_12_ACK_TIME_7_RST    0x20
#define MAC_HW0_MU0_TIMINGS_12_ACK_TIME_6_RST    0x1C
#define MAC_HW0_MU0_TIMINGS_12_ACK_TIME_5_RST    0x44
#define MAC_HW0_MU0_TIMINGS_12_ACK_TIME_4_RST    0x2C

__INLINE void mac_hw0_mu0_timings_12_pack(uint8_t ack_time7, uint8_t ack_time6, uint8_t ack_time5, uint8_t ack_time4)
{
	ASSERT_ERR((((uint32_t)ack_time7 << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)ack_time6 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)ack_time5 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)ack_time4 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_12_ADDR,  ((uint32_t)ack_time7 << 24) |((uint32_t)ack_time6 << 16) |((uint32_t)ack_time5 << 8) |((uint32_t)ack_time4 << 0));
}

__INLINE void mac_hw0_mu0_timings_12_unpack(uint8_t* ack_time7, uint8_t* ack_time6, uint8_t* ack_time5, uint8_t* ack_time4)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_12_ADDR);

	*ack_time7 = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*ack_time6 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*ack_time5 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*ack_time4 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_timings_12_ack_time_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_timings_12_ack_time_7_setf(uint8_t acktime7)
{
	ASSERT_ERR((((uint32_t)acktime7 << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_12_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_12_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)acktime7 <<24));
}
__INLINE uint8_t mac_hw0_mu0_timings_12_ack_time_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_timings_12_ack_time_6_setf(uint8_t acktime6)
{
	ASSERT_ERR((((uint32_t)acktime6 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_12_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_12_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)acktime6 <<16));
}
__INLINE uint8_t mac_hw0_mu0_timings_12_ack_time_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_timings_12_ack_time_5_setf(uint8_t acktime5)
{
	ASSERT_ERR((((uint32_t)acktime5 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_12_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_12_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)acktime5 <<8));
}
__INLINE uint8_t mac_hw0_mu0_timings_12_ack_time_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_timings_12_ack_time_4_setf(uint8_t acktime4)
{
	ASSERT_ERR((((uint32_t)acktime4 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_12_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_12_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)acktime4 <<0));
}

/**
 * @brief TIMINGS_13 register definition
 *  Controls timing and delay parameters register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 ACK_TIME11                0x2C
 *    23:16 ACK_TIME10                0x20
 *    15:08 ACK_TIME9                 0x1C
 *    07:00 ACK_TIME8                 0x2C
 * </pre>
 */
#define MAC_HW0_MU0_TIMINGS_13_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000218)
#define MAC_HW0_MU0_TIMINGS_13_OFFSET      0x00000218
#define MAC_HW0_MU0_TIMINGS_13_INDEX       0x00000086
#define MAC_HW0_MU0_TIMINGS_13_RESET       0x2C201C2C

__INLINE uint32_t  mac_hw0_mu0_timings_13_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMINGS_13_ADDR);
}

__INLINE void mac_hw0_mu0_timings_13_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_13_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMINGS_13_ACK_TIME_11_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_TIMINGS_13_ACK_TIME_11_LSB    24
#define MAC_HW0_MU0_TIMINGS_13_ACK_TIME_11_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TIMINGS_13_ACK_TIME_10_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_TIMINGS_13_ACK_TIME_10_LSB    16
#define MAC_HW0_MU0_TIMINGS_13_ACK_TIME_10_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TIMINGS_13_ACK_TIME_9_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_TIMINGS_13_ACK_TIME_9_LSB    8
#define MAC_HW0_MU0_TIMINGS_13_ACK_TIME_9_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TIMINGS_13_ACK_TIME_8_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_TIMINGS_13_ACK_TIME_8_LSB    0
#define MAC_HW0_MU0_TIMINGS_13_ACK_TIME_8_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_TIMINGS_13_ACK_TIME_11_RST    0x2C
#define MAC_HW0_MU0_TIMINGS_13_ACK_TIME_10_RST    0x20
#define MAC_HW0_MU0_TIMINGS_13_ACK_TIME_9_RST    0x1C
#define MAC_HW0_MU0_TIMINGS_13_ACK_TIME_8_RST    0x2C

__INLINE void mac_hw0_mu0_timings_13_pack(uint8_t ack_time11, uint8_t ack_time10, uint8_t ack_time9, uint8_t ack_time8)
{
	ASSERT_ERR((((uint32_t)ack_time11 << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)ack_time10 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)ack_time9 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)ack_time8 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_13_ADDR,  ((uint32_t)ack_time11 << 24) |((uint32_t)ack_time10 << 16) |((uint32_t)ack_time9 << 8) |((uint32_t)ack_time8 << 0));
}

__INLINE void mac_hw0_mu0_timings_13_unpack(uint8_t* ack_time11, uint8_t* ack_time10, uint8_t* ack_time9, uint8_t* ack_time8)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_13_ADDR);

	*ack_time11 = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*ack_time10 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*ack_time9 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*ack_time8 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_timings_13_ack_time_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_13_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_timings_13_ack_time_11_setf(uint8_t acktime11)
{
	ASSERT_ERR((((uint32_t)acktime11 << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_13_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_13_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)acktime11 <<24));
}
__INLINE uint8_t mac_hw0_mu0_timings_13_ack_time_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_13_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_timings_13_ack_time_10_setf(uint8_t acktime10)
{
	ASSERT_ERR((((uint32_t)acktime10 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_13_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_13_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)acktime10 <<16));
}
__INLINE uint8_t mac_hw0_mu0_timings_13_ack_time_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_13_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_timings_13_ack_time_9_setf(uint8_t acktime9)
{
	ASSERT_ERR((((uint32_t)acktime9 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_13_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_13_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)acktime9 <<8));
}
__INLINE uint8_t mac_hw0_mu0_timings_13_ack_time_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_13_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_timings_13_ack_time_8_setf(uint8_t acktime8)
{
	ASSERT_ERR((((uint32_t)acktime8 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_13_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_13_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)acktime8 <<0));
}

/**
 * @brief TIMINGS_14 register definition
 *  Controls timing and delay parameters register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 ACK_TIME14                0x130
 *    19:10 ACK_TIME13                0xF8
 *    09:00 ACK_TIME12                0x98
 * </pre>
 */
#define MAC_HW0_MU0_TIMINGS_14_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000021C)
#define MAC_HW0_MU0_TIMINGS_14_OFFSET      0x0000021C
#define MAC_HW0_MU0_TIMINGS_14_INDEX       0x00000087
#define MAC_HW0_MU0_TIMINGS_14_RESET       0x1303E098

__INLINE uint32_t  mac_hw0_mu0_timings_14_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMINGS_14_ADDR);
}

__INLINE void mac_hw0_mu0_timings_14_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_14_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMINGS_14_ACK_TIME_14_MASK    ((uint32_t)0x3FF00000)
#define MAC_HW0_MU0_TIMINGS_14_ACK_TIME_14_LSB    20
#define MAC_HW0_MU0_TIMINGS_14_ACK_TIME_14_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_TIMINGS_14_ACK_TIME_13_MASK    ((uint32_t)0x000FFC00)
#define MAC_HW0_MU0_TIMINGS_14_ACK_TIME_13_LSB    10
#define MAC_HW0_MU0_TIMINGS_14_ACK_TIME_13_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_TIMINGS_14_ACK_TIME_12_MASK    ((uint32_t)0x000003FF)
#define MAC_HW0_MU0_TIMINGS_14_ACK_TIME_12_LSB    0
#define MAC_HW0_MU0_TIMINGS_14_ACK_TIME_12_WIDTH    ((uint32_t)0x0000000A)

#define MAC_HW0_MU0_TIMINGS_14_ACK_TIME_14_RST    0x130
#define MAC_HW0_MU0_TIMINGS_14_ACK_TIME_13_RST    0xF8
#define MAC_HW0_MU0_TIMINGS_14_ACK_TIME_12_RST    0x98

__INLINE void mac_hw0_mu0_timings_14_pack(uint16_t ack_time14, uint16_t ack_time13, uint16_t ack_time12)
{
	ASSERT_ERR((((uint32_t)ack_time14 << 20) & ~((uint32_t)0x3FF00000)) == 0);
	ASSERT_ERR((((uint32_t)ack_time13 << 10) & ~((uint32_t)0x000FFC00)) == 0);
	ASSERT_ERR((((uint32_t)ack_time12 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_14_ADDR,  ((uint32_t)ack_time14 << 20) |((uint32_t)ack_time13 << 10) |((uint32_t)ack_time12 << 0));
}

__INLINE void mac_hw0_mu0_timings_14_unpack(uint16_t* ack_time14, uint16_t* ack_time13, uint16_t* ack_time12)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_14_ADDR);

	*ack_time14 = (localVal & ((uint32_t)0x3FF00000)) >>  20;
	*ack_time13 = (localVal & ((uint32_t)0x000FFC00)) >>  10;
	*ack_time12 = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_timings_14_ack_time_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_14_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x3FF00000)) >> 20);
}
__INLINE void mac_hw0_mu0_timings_14_ack_time_14_setf(uint16_t acktime14)
{
	ASSERT_ERR((((uint32_t)acktime14 << 20) & ~((uint32_t)0x3FF00000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_14_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_14_ADDR) & ~((uint32_t)0x3FF00000)) | ((uint32_t)acktime14 <<20));
}
__INLINE uint16_t mac_hw0_mu0_timings_14_ack_time_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_14_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000FFC00)) >> 10);
}
__INLINE void mac_hw0_mu0_timings_14_ack_time_13_setf(uint16_t acktime13)
{
	ASSERT_ERR((((uint32_t)acktime13 << 10) & ~((uint32_t)0x000FFC00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_14_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_14_ADDR) & ~((uint32_t)0x000FFC00)) | ((uint32_t)acktime13 <<10));
}
__INLINE uint16_t mac_hw0_mu0_timings_14_ack_time_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMINGS_14_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void mac_hw0_mu0_timings_14_ack_time_12_setf(uint16_t acktime12)
{
	ASSERT_ERR((((uint32_t)acktime12 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMINGS_14_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMINGS_14_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)acktime12 <<0));
}

/**
 * @brief EDCA_CCA_BUSY register definition
 *  Indicates the CCA busy time. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_BUSY_DUR              0x0
 * </pre>
 */
#define MAC_HW0_MU0_EDCA_CCA_BUSY_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000220)
#define MAC_HW0_MU0_EDCA_CCA_BUSY_OFFSET      0x00000220
#define MAC_HW0_MU0_EDCA_CCA_BUSY_INDEX       0x00000088
#define MAC_HW0_MU0_EDCA_CCA_BUSY_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_edca_cca_busy_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_EDCA_CCA_BUSY_ADDR);
}

__INLINE void mac_hw0_mu0_edca_cca_busy_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_EDCA_CCA_BUSY_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_EDCA_CCA_BUSY_CCA_BUSY_DUR_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_EDCA_CCA_BUSY_CCA_BUSY_DUR_LSB    0
#define MAC_HW0_MU0_EDCA_CCA_BUSY_CCA_BUSY_DUR_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_EDCA_CCA_BUSY_CCA_BUSY_DUR_RST    0x0

__INLINE uint32_t mac_hw0_mu0_edca_cca_busy_cca_busy_dur_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_CCA_BUSY_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_edca_cca_busy_cca_busy_dur_setf(uint32_t ccabusydur)
{
	ASSERT_ERR((((uint32_t)ccabusydur << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_CCA_BUSY_ADDR, (uint32_t)ccabusydur << 0);
}

/**
 * @brief EDCA_CNTRL register definition
 *  Contains various settings for controlling the operation of the core in EDCA. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    05    KEEP_TXOP_OPEN            0              
 *    04    REM_TXOP_IN_DUR_FIELD     0              
 *    01    SEND_CF_END               0              
 *    00    SEND_CF_END_NOW           0              
 * </pre>
 */
#define MAC_HW0_MU0_EDCA_CNTRL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000224)
#define MAC_HW0_MU0_EDCA_CNTRL_OFFSET      0x00000224
#define MAC_HW0_MU0_EDCA_CNTRL_INDEX       0x00000089
#define MAC_HW0_MU0_EDCA_CNTRL_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_edca_cntrl_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_EDCA_CNTRL_ADDR);
}

__INLINE void mac_hw0_mu0_edca_cntrl_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_EDCA_CNTRL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_EDCA_CNTRL_KEEP_TXOP_OPEN_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_EDCA_CNTRL_KEEP_TXOP_OPEN_POS    5
#define MAC_HW0_MU0_EDCA_CNTRL_REM_TXOP_IN_DUR_FIELD_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_EDCA_CNTRL_REM_TXOP_IN_DUR_FIELD_POS    4
#define MAC_HW0_MU0_EDCA_CNTRL_SEND_CF_END_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_EDCA_CNTRL_SEND_CF_END_POS    1
#define MAC_HW0_MU0_EDCA_CNTRL_SEND_CF_END_NOW_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_EDCA_CNTRL_SEND_CF_END_NOW_POS    0

#define MAC_HW0_MU0_EDCA_CNTRL_KEEP_TXOP_OPEN_RST    0x0
#define MAC_HW0_MU0_EDCA_CNTRL_REM_TXOP_IN_DUR_FIELD_RST    0x0
#define MAC_HW0_MU0_EDCA_CNTRL_SEND_CF_END_RST    0x0
#define MAC_HW0_MU0_EDCA_CNTRL_SEND_CF_END_NOW_RST    0x0

__INLINE void mac_hw0_mu0_edca_cntrl_pack(uint8_t keep_txop_open, uint8_t rem_txop_in_dur_field, uint8_t send_cf_end, uint8_t send_cf_end_now)
{
	ASSERT_ERR((((uint32_t)keep_txop_open << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)rem_txop_in_dur_field << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)send_cf_end << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)send_cf_end_now << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_CNTRL_ADDR,  ((uint32_t)keep_txop_open << 5) |((uint32_t)rem_txop_in_dur_field << 4) |((uint32_t)send_cf_end << 1) |((uint32_t)send_cf_end_now << 0));
}

__INLINE void mac_hw0_mu0_edca_cntrl_unpack(uint8_t* keep_txop_open, uint8_t* rem_txop_in_dur_field, uint8_t* send_cf_end, uint8_t* send_cf_end_now)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_CNTRL_ADDR);

	*keep_txop_open = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rem_txop_in_dur_field = (localVal & ((uint32_t)0x00000010)) >>  4;
	*send_cf_end = (localVal & ((uint32_t)0x00000002)) >>  1;
	*send_cf_end_now = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_edca_cntrl_keep_txop_open_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_edca_cntrl_keep_txop_open_setf(uint8_t keeptxopopen)
{
	ASSERT_ERR((((uint32_t)keeptxopopen << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_CNTRL_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)keeptxopopen <<5));
}
__INLINE uint8_t mac_hw0_mu0_edca_cntrl_rem_txop_in_dur_field_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_edca_cntrl_rem_txop_in_dur_field_setf(uint8_t remtxopindurfield)
{
	ASSERT_ERR((((uint32_t)remtxopindurfield << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_CNTRL_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)remtxopindurfield <<4));
}
__INLINE uint8_t mac_hw0_mu0_edca_cntrl_send_cf_end_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_edca_cntrl_send_cf_end_setf(uint8_t sendcfend)
{
	ASSERT_ERR((((uint32_t)sendcfend << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_CNTRL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)sendcfend <<1));
}
__INLINE uint8_t mac_hw0_mu0_edca_cntrl_send_cf_end_now_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_edca_cntrl_send_cf_end_now_setf(uint8_t sendcfendnow)
{
	ASSERT_ERR((((uint32_t)sendcfendnow << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_CNTRL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)sendcfendnow <<0));
}

/**
 * @brief RX_BUSY_DELAY register definition
 *  RX Busy parameteres register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    07:00 RX_PHY_delay              0x33
 * </pre>
 */
#define MAC_HW0_MU0_RX_BUSY_DELAY_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000230)
#define MAC_HW0_MU0_RX_BUSY_DELAY_OFFSET      0x00000230
#define MAC_HW0_MU0_RX_BUSY_DELAY_INDEX       0x0000008C
#define MAC_HW0_MU0_RX_BUSY_DELAY_RESET       0x00000033

__INLINE uint32_t  mac_hw0_mu0_rx_busy_delay_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_BUSY_DELAY_ADDR);
}

__INLINE void mac_hw0_mu0_rx_busy_delay_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_BUSY_DELAY_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_BUSY_DELAY_RX_PHY_DELAY_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_RX_BUSY_DELAY_RX_PHY_DELAY_LSB    0
#define MAC_HW0_MU0_RX_BUSY_DELAY_RX_PHY_DELAY_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_RX_BUSY_DELAY_RX_PHY_DELAY_RST    0x33

__INLINE uint8_t mac_hw0_mu0_rx_busy_delay_rx_phy_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_BUSY_DELAY_ADDR);
	return (uint8_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_rx_busy_delay_rx_phy_delay_setf(uint8_t rxphydelay)
{
	ASSERT_ERR((((uint32_t)rxphydelay << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_BUSY_DELAY_ADDR, (uint32_t)rxphydelay << 0);
}

/**
 * @brief RX_MINE_BUSY register definition
 *  RX Busy time by my frames counter register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 rx_mine_time              0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_MINE_BUSY_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000234)
#define MAC_HW0_MU0_RX_MINE_BUSY_OFFSET      0x00000234
#define MAC_HW0_MU0_RX_MINE_BUSY_INDEX       0x0000008D
#define MAC_HW0_MU0_RX_MINE_BUSY_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_mine_busy_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_MINE_BUSY_ADDR);
}

__INLINE void mac_hw0_mu0_rx_mine_busy_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_MINE_BUSY_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_MINE_BUSY_RX_MINE_TIME_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_MINE_BUSY_RX_MINE_TIME_LSB    0
#define MAC_HW0_MU0_RX_MINE_BUSY_RX_MINE_TIME_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_MINE_BUSY_RX_MINE_TIME_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_mine_busy_rx_mine_time_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_MINE_BUSY_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_rx_mine_busy_rx_mine_time_setf(uint32_t rxminetime)
{
	ASSERT_ERR((((uint32_t)rxminetime << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_MINE_BUSY_ADDR, (uint32_t)rxminetime << 0);
}

/**
 * @brief TX_MINE_BUSY register definition
 *  TX BUSY time by my TX frames register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TX_MINE_TIME              0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_MINE_BUSY_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000238)
#define MAC_HW0_MU0_TX_MINE_BUSY_OFFSET      0x00000238
#define MAC_HW0_MU0_TX_MINE_BUSY_INDEX       0x0000008E
#define MAC_HW0_MU0_TX_MINE_BUSY_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_mine_busy_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_MINE_BUSY_ADDR);
}

__INLINE void mac_hw0_mu0_tx_mine_busy_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_MINE_BUSY_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_MINE_BUSY_TX_MINE_TIME_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TX_MINE_BUSY_TX_MINE_TIME_LSB    0
#define MAC_HW0_MU0_TX_MINE_BUSY_TX_MINE_TIME_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TX_MINE_BUSY_TX_MINE_TIME_RST    0x0

__INLINE uint32_t mac_hw0_mu0_tx_mine_busy_tx_mine_time_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_MINE_BUSY_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_tx_mine_busy_tx_mine_time_setf(uint32_t txminetime)
{
	ASSERT_ERR((((uint32_t)txminetime << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_MINE_BUSY_ADDR, (uint32_t)txminetime << 0);
}

/**
 * @brief RX_PPDU_DELIM_ERROR_CNT register definition
 *  Indicates RX delimiter error count register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_PPDU_DELIM_ERROR_CNT   0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_PPDU_DELIM_ERROR_CNT_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000240)
#define MAC_HW0_MU0_RX_PPDU_DELIM_ERROR_CNT_OFFSET      0x00000240
#define MAC_HW0_MU0_RX_PPDU_DELIM_ERROR_CNT_INDEX       0x00000090
#define MAC_HW0_MU0_RX_PPDU_DELIM_ERROR_CNT_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_ppdu_delim_error_cnt_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_PPDU_DELIM_ERROR_CNT_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_PPDU_DELIM_ERROR_CNT_RX_PPDU_DELIM_ERROR_CNT_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_PPDU_DELIM_ERROR_CNT_RX_PPDU_DELIM_ERROR_CNT_LSB    0
#define MAC_HW0_MU0_RX_PPDU_DELIM_ERROR_CNT_RX_PPDU_DELIM_ERROR_CNT_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_PPDU_DELIM_ERROR_CNT_RX_PPDU_DELIM_ERROR_CNT_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_ppdu_delim_error_cnt_rx_ppdu_delim_error_cnt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_PPDU_DELIM_ERROR_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_PPDU_FCS_ERROR_CNT register definition
 *  Indicates RX FCS error count register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_PPDU_FCS_ERROR_CNT     0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_PPDU_FCS_ERROR_CNT_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000244)
#define MAC_HW0_MU0_RX_PPDU_FCS_ERROR_CNT_OFFSET      0x00000244
#define MAC_HW0_MU0_RX_PPDU_FCS_ERROR_CNT_INDEX       0x00000091
#define MAC_HW0_MU0_RX_PPDU_FCS_ERROR_CNT_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_ppdu_fcs_error_cnt_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_PPDU_FCS_ERROR_CNT_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_PPDU_FCS_ERROR_CNT_RX_PPDU_FCS_ERROR_CNT_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_PPDU_FCS_ERROR_CNT_RX_PPDU_FCS_ERROR_CNT_LSB    0
#define MAC_HW0_MU0_RX_PPDU_FCS_ERROR_CNT_RX_PPDU_FCS_ERROR_CNT_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_PPDU_FCS_ERROR_CNT_RX_PPDU_FCS_ERROR_CNT_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_ppdu_fcs_error_cnt_rx_ppdu_fcs_error_cnt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_PPDU_FCS_ERROR_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief EDCA_NAV_BUSY register definition
 *  Indicates the NAV busy time register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 NAV_BUSY_DUR              0x0
 * </pre>
 */
#define MAC_HW0_MU0_EDCA_NAV_BUSY_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000248)
#define MAC_HW0_MU0_EDCA_NAV_BUSY_OFFSET      0x00000248
#define MAC_HW0_MU0_EDCA_NAV_BUSY_INDEX       0x00000092
#define MAC_HW0_MU0_EDCA_NAV_BUSY_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_edca_nav_busy_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_EDCA_NAV_BUSY_ADDR);
}

__INLINE void mac_hw0_mu0_edca_nav_busy_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_EDCA_NAV_BUSY_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_EDCA_NAV_BUSY_NAV_BUSY_DUR_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_EDCA_NAV_BUSY_NAV_BUSY_DUR_LSB    0
#define MAC_HW0_MU0_EDCA_NAV_BUSY_NAV_BUSY_DUR_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_EDCA_NAV_BUSY_NAV_BUSY_DUR_RST    0x0

__INLINE uint32_t mac_hw0_mu0_edca_nav_busy_nav_busy_dur_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_EDCA_NAV_BUSY_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_edca_nav_busy_nav_busy_dur_setf(uint32_t navbusydur)
{
	ASSERT_ERR((((uint32_t)navbusydur << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_NAV_BUSY_ADDR, (uint32_t)navbusydur << 0);
}

/**
 * @brief CLOCK_CONTROL_1 register definition
 *  Clock gating control 1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    01:00 clock_gating_mode         0x2
 * </pre>
 */
#define MAC_HW0_MU0_CLOCK_CONTROL_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000250)
#define MAC_HW0_MU0_CLOCK_CONTROL_1_OFFSET      0x00000250
#define MAC_HW0_MU0_CLOCK_CONTROL_1_INDEX       0x00000094
#define MAC_HW0_MU0_CLOCK_CONTROL_1_RESET       0x00000002

__INLINE uint32_t  mac_hw0_mu0_clock_control_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_CLOCK_CONTROL_1_ADDR);
}

__INLINE void mac_hw0_mu0_clock_control_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_CLOCK_CONTROL_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_CLOCK_CONTROL_1_CLOCK_GATING_MODE_MASK    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_CLOCK_CONTROL_1_CLOCK_GATING_MODE_LSB    0
#define MAC_HW0_MU0_CLOCK_CONTROL_1_CLOCK_GATING_MODE_WIDTH    ((uint32_t)0x00000002)

#define MAC_HW0_MU0_CLOCK_CONTROL_1_CLOCK_GATING_MODE_RST    0x2

__INLINE uint8_t mac_hw0_mu0_clock_control_1_clock_gating_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_CLOCK_CONTROL_1_ADDR);
	return (uint8_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_clock_control_1_clock_gating_mode_setf(uint8_t clockgatingmode)
{
	ASSERT_ERR((((uint32_t)clockgatingmode << 0) & ~((uint32_t)0x00000003)) == 0);
	REG_PL_WR(MAC_HW0_MU0_CLOCK_CONTROL_1_ADDR, (uint32_t)clockgatingmode << 0);
}

/**
 * @brief CLOCK_CONTROL_2 register definition
 *  Clock gating control 2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    07:01 clock_turn_on             0x0
 * </pre>
 */
#define MAC_HW0_MU0_CLOCK_CONTROL_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000254)
#define MAC_HW0_MU0_CLOCK_CONTROL_2_OFFSET      0x00000254
#define MAC_HW0_MU0_CLOCK_CONTROL_2_INDEX       0x00000095
#define MAC_HW0_MU0_CLOCK_CONTROL_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_clock_control_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_CLOCK_CONTROL_2_ADDR);
}

__INLINE void mac_hw0_mu0_clock_control_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_CLOCK_CONTROL_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_CLOCK_CONTROL_2_CLOCK_TURN_ON_MASK    ((uint32_t)0x000000FE)
#define MAC_HW0_MU0_CLOCK_CONTROL_2_CLOCK_TURN_ON_LSB    1
#define MAC_HW0_MU0_CLOCK_CONTROL_2_CLOCK_TURN_ON_WIDTH    ((uint32_t)0x00000007)

#define MAC_HW0_MU0_CLOCK_CONTROL_2_CLOCK_TURN_ON_RST    0x0

__INLINE uint8_t mac_hw0_mu0_clock_control_2_clock_turn_on_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_CLOCK_CONTROL_2_ADDR);
	return (uint8_t)(localVal >> 1);
}
__INLINE void mac_hw0_mu0_clock_control_2_clock_turn_on_setf(uint8_t clockturnon)
{
	ASSERT_ERR((((uint32_t)clockturnon << 1) & ~((uint32_t)0x000000FE)) == 0);
	REG_PL_WR(MAC_HW0_MU0_CLOCK_CONTROL_2_ADDR, (uint32_t)clockturnon << 1);
}

/**
 * @brief CLOCK_CONTROL_3 register definition
 *  Clock gating control 3 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    07:01 clock_turn_off            0x0
 * </pre>
 */
#define MAC_HW0_MU0_CLOCK_CONTROL_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000258)
#define MAC_HW0_MU0_CLOCK_CONTROL_3_OFFSET      0x00000258
#define MAC_HW0_MU0_CLOCK_CONTROL_3_INDEX       0x00000096
#define MAC_HW0_MU0_CLOCK_CONTROL_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_clock_control_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_CLOCK_CONTROL_3_ADDR);
}

__INLINE void mac_hw0_mu0_clock_control_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_CLOCK_CONTROL_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_CLOCK_CONTROL_3_CLOCK_TURN_OFF_MASK    ((uint32_t)0x000000FE)
#define MAC_HW0_MU0_CLOCK_CONTROL_3_CLOCK_TURN_OFF_LSB    1
#define MAC_HW0_MU0_CLOCK_CONTROL_3_CLOCK_TURN_OFF_WIDTH    ((uint32_t)0x00000007)

#define MAC_HW0_MU0_CLOCK_CONTROL_3_CLOCK_TURN_OFF_RST    0x0

__INLINE uint8_t mac_hw0_mu0_clock_control_3_clock_turn_off_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_CLOCK_CONTROL_3_ADDR);
	return (uint8_t)(localVal >> 1);
}
__INLINE void mac_hw0_mu0_clock_control_3_clock_turn_off_setf(uint8_t clockturnoff)
{
	ASSERT_ERR((((uint32_t)clockturnoff << 1) & ~((uint32_t)0x000000FE)) == 0);
	REG_PL_WR(MAC_HW0_MU0_CLOCK_CONTROL_3_ADDR, (uint32_t)clockturnoff << 1);
}

/**
 * @brief CLOCK_STATUS register definition
 *  Clock enable status register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    07:01 clock_enable_state        0x7F
 * </pre>
 */
#define MAC_HW0_MU0_CLOCK_STATUS_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000025C)
#define MAC_HW0_MU0_CLOCK_STATUS_OFFSET      0x0000025C
#define MAC_HW0_MU0_CLOCK_STATUS_INDEX       0x00000097
#define MAC_HW0_MU0_CLOCK_STATUS_RESET       0x000000FE

__INLINE uint32_t  mac_hw0_mu0_clock_status_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_CLOCK_STATUS_ADDR);
}

// field definitions
#define MAC_HW0_MU0_CLOCK_STATUS_CLOCK_ENABLE_STATE_MASK    ((uint32_t)0x000000FE)
#define MAC_HW0_MU0_CLOCK_STATUS_CLOCK_ENABLE_STATE_LSB    1
#define MAC_HW0_MU0_CLOCK_STATUS_CLOCK_ENABLE_STATE_WIDTH    ((uint32_t)0x00000007)

#define MAC_HW0_MU0_CLOCK_STATUS_CLOCK_ENABLE_STATE_RST    0x7F

__INLINE uint8_t mac_hw0_mu0_clock_status_clock_enable_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_CLOCK_STATUS_ADDR);
	return (uint8_t)(localVal >> 1);
}

/**
 * @brief NDPA_INFO register definition
 *  Capture NDPA information register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    16    transmit_after_ndp        0              
 *    15:08 disallowed_subchannel_bitmap 0x0
 *    07:00 sounding_dialog_token     0x0
 * </pre>
 */
#define MAC_HW0_MU0_NDPA_INFO_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000260)
#define MAC_HW0_MU0_NDPA_INFO_OFFSET      0x00000260
#define MAC_HW0_MU0_NDPA_INFO_INDEX       0x00000098
#define MAC_HW0_MU0_NDPA_INFO_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_ndpa_info_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_NDPA_INFO_ADDR);
}

// field definitions
#define MAC_HW0_MU0_NDPA_INFO_TRANSMIT_AFTER_NDP_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_NDPA_INFO_TRANSMIT_AFTER_NDP_POS    16
#define MAC_HW0_MU0_NDPA_INFO_DISALLOWED_SUBCHANNEL_BITMAP_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_NDPA_INFO_DISALLOWED_SUBCHANNEL_BITMAP_LSB    8
#define MAC_HW0_MU0_NDPA_INFO_DISALLOWED_SUBCHANNEL_BITMAP_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_NDPA_INFO_SOUNDING_DIALOG_TOKEN_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_NDPA_INFO_SOUNDING_DIALOG_TOKEN_LSB    0
#define MAC_HW0_MU0_NDPA_INFO_SOUNDING_DIALOG_TOKEN_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_NDPA_INFO_TRANSMIT_AFTER_NDP_RST    0x0
#define MAC_HW0_MU0_NDPA_INFO_DISALLOWED_SUBCHANNEL_BITMAP_RST    0x0
#define MAC_HW0_MU0_NDPA_INFO_SOUNDING_DIALOG_TOKEN_RST    0x0

__INLINE void mac_hw0_mu0_ndpa_info_unpack(uint8_t* transmit_after_ndp, uint8_t* disallowed_subchannel_bitmap, uint8_t* sounding_dialog_token)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_NDPA_INFO_ADDR);

	*transmit_after_ndp = (localVal & ((uint32_t)0x00010000)) >>  16;
	*disallowed_subchannel_bitmap = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*sounding_dialog_token = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_ndpa_info_transmit_after_ndp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_NDPA_INFO_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_ndpa_info_disallowed_subchannel_bitmap_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_NDPA_INFO_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_ndpa_info_sounding_dialog_token_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_NDPA_INFO_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}

/**
 * @brief NDPA_STA_INFO register definition
 *  CAPTURE STA INFO in NDPA register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 STA_INFO                  0x0
 * </pre>
 */
#define MAC_HW0_MU0_NDPA_STA_INFO_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000264)
#define MAC_HW0_MU0_NDPA_STA_INFO_OFFSET      0x00000264
#define MAC_HW0_MU0_NDPA_STA_INFO_INDEX       0x00000099
#define MAC_HW0_MU0_NDPA_STA_INFO_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_ndpa_sta_info_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_NDPA_STA_INFO_ADDR);
}

// field definitions
#define MAC_HW0_MU0_NDPA_STA_INFO_STA_INFO_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_NDPA_STA_INFO_STA_INFO_LSB    0
#define MAC_HW0_MU0_NDPA_STA_INFO_STA_INFO_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_NDPA_STA_INFO_STA_INFO_RST    0x0

__INLINE uint32_t mac_hw0_mu0_ndpa_sta_info_sta_info_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_NDPA_STA_INFO_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief UPLINK_BSSID_LOW register definition
 *  Contains the low part of the uplink BSS ID register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 UPLINK_BSSID_LOW          0x0
 * </pre>
 */
#define MAC_HW0_MU0_UPLINK_BSSID_LOW_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000268)
#define MAC_HW0_MU0_UPLINK_BSSID_LOW_OFFSET      0x00000268
#define MAC_HW0_MU0_UPLINK_BSSID_LOW_INDEX       0x0000009A
#define MAC_HW0_MU0_UPLINK_BSSID_LOW_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_uplink_bssid_low_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_UPLINK_BSSID_LOW_ADDR);
}

__INLINE void mac_hw0_mu0_uplink_bssid_low_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_UPLINK_BSSID_LOW_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_UPLINK_BSSID_LOW_UPLINK_BSSID_LOW_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_UPLINK_BSSID_LOW_UPLINK_BSSID_LOW_LSB    0
#define MAC_HW0_MU0_UPLINK_BSSID_LOW_UPLINK_BSSID_LOW_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_UPLINK_BSSID_LOW_UPLINK_BSSID_LOW_RST    0x0

__INLINE uint32_t mac_hw0_mu0_uplink_bssid_low_uplink_bssid_low_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_UPLINK_BSSID_LOW_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_uplink_bssid_low_uplink_bssid_low_setf(uint32_t uplinkbssidlow)
{
	ASSERT_ERR((((uint32_t)uplinkbssidlow << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_UPLINK_BSSID_LOW_ADDR, (uint32_t)uplinkbssidlow << 0);
}

/**
 * @brief UPLINK_BSSID_HIGH register definition
 *  Contains the high part of the uplink BSS ID register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21:16 UPLINK_BSS_COLOR          0x0
 *    15:00 UPLINK_BSSID_HIGH         0x0
 * </pre>
 */
#define MAC_HW0_MU0_UPLINK_BSSID_HIGH_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000026C)
#define MAC_HW0_MU0_UPLINK_BSSID_HIGH_OFFSET      0x0000026C
#define MAC_HW0_MU0_UPLINK_BSSID_HIGH_INDEX       0x0000009B
#define MAC_HW0_MU0_UPLINK_BSSID_HIGH_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_uplink_bssid_high_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_UPLINK_BSSID_HIGH_ADDR);
}

__INLINE void mac_hw0_mu0_uplink_bssid_high_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_UPLINK_BSSID_HIGH_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_UPLINK_BSSID_HIGH_UPLINK_BSS_COLOR_MASK    ((uint32_t)0x003F0000)
#define MAC_HW0_MU0_UPLINK_BSSID_HIGH_UPLINK_BSS_COLOR_LSB    16
#define MAC_HW0_MU0_UPLINK_BSSID_HIGH_UPLINK_BSS_COLOR_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_UPLINK_BSSID_HIGH_UPLINK_BSSID_HIGH_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_UPLINK_BSSID_HIGH_UPLINK_BSSID_HIGH_LSB    0
#define MAC_HW0_MU0_UPLINK_BSSID_HIGH_UPLINK_BSSID_HIGH_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_UPLINK_BSSID_HIGH_UPLINK_BSS_COLOR_RST    0x0
#define MAC_HW0_MU0_UPLINK_BSSID_HIGH_UPLINK_BSSID_HIGH_RST    0x0

__INLINE void mac_hw0_mu0_uplink_bssid_high_pack(uint8_t uplink_bss_color, uint16_t uplink_bssid_high)
{
	ASSERT_ERR((((uint32_t)uplink_bss_color << 16) & ~((uint32_t)0x003F0000)) == 0);
	ASSERT_ERR((((uint32_t)uplink_bssid_high << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_UPLINK_BSSID_HIGH_ADDR,  ((uint32_t)uplink_bss_color << 16) |((uint32_t)uplink_bssid_high << 0));
}

__INLINE void mac_hw0_mu0_uplink_bssid_high_unpack(uint8_t* uplink_bss_color, uint16_t* uplink_bssid_high)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_UPLINK_BSSID_HIGH_ADDR);

	*uplink_bss_color = (localVal & ((uint32_t)0x003F0000)) >>  16;
	*uplink_bssid_high = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_uplink_bssid_high_uplink_bss_color_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_UPLINK_BSSID_HIGH_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x003F0000)) >> 16);
}
__INLINE void mac_hw0_mu0_uplink_bssid_high_uplink_bss_color_setf(uint8_t uplinkbsscolor)
{
	ASSERT_ERR((((uint32_t)uplinkbsscolor << 16) & ~((uint32_t)0x003F0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_UPLINK_BSSID_HIGH_ADDR, (REG_PL_RD(MAC_HW0_MU0_UPLINK_BSSID_HIGH_ADDR) & ~((uint32_t)0x003F0000)) | ((uint32_t)uplinkbsscolor <<16));
}
__INLINE uint16_t mac_hw0_mu0_uplink_bssid_high_uplink_bssid_high_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_UPLINK_BSSID_HIGH_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_uplink_bssid_high_uplink_bssid_high_setf(uint16_t uplinkbssidhigh)
{
	ASSERT_ERR((((uint32_t)uplinkbssidhigh << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_UPLINK_BSSID_HIGH_ADDR, (REG_PL_RD(MAC_HW0_MU0_UPLINK_BSSID_HIGH_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)uplinkbssidhigh <<0));
}

/**
 * @brief UL_BSSID_LOW_MASK register definition
 *  Contains the low order bits of the BSSID mask register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 UPLINK_BSSID_LOW_MASK     0x0
 * </pre>
 */
#define MAC_HW0_MU0_UL_BSSID_LOW_MASK_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000270)
#define MAC_HW0_MU0_UL_BSSID_LOW_MASK_OFFSET      0x00000270
#define MAC_HW0_MU0_UL_BSSID_LOW_MASK_INDEX       0x0000009C
#define MAC_HW0_MU0_UL_BSSID_LOW_MASK_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_ul_bssid_low_mask_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_UL_BSSID_LOW_MASK_ADDR);
}

__INLINE void mac_hw0_mu0_ul_bssid_low_mask_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_UL_BSSID_LOW_MASK_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_UL_BSSID_LOW_MASK_UPLINK_BSSID_LOW_MASK_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_UL_BSSID_LOW_MASK_UPLINK_BSSID_LOW_MASK_LSB    0
#define MAC_HW0_MU0_UL_BSSID_LOW_MASK_UPLINK_BSSID_LOW_MASK_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_UL_BSSID_LOW_MASK_UPLINK_BSSID_LOW_MASK_RST    0x0

__INLINE uint32_t mac_hw0_mu0_ul_bssid_low_mask_uplink_bssid_low_mask_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_UL_BSSID_LOW_MASK_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_ul_bssid_low_mask_uplink_bssid_low_mask_setf(uint32_t uplinkbssidlowmask)
{
	ASSERT_ERR((((uint32_t)uplinkbssidlowmask << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_UL_BSSID_LOW_MASK_ADDR, (uint32_t)uplinkbssidlowmask << 0);
}

/**
 * @brief UL_BSSID_HIGH_MASK register definition
 *  Contains the high order bits of the BSSID mask register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21:16 UPLINK_BSS_COLOR_MASK     0x0
 *    15:00 UPLINK_BSSID_HIGH_MASK    0x0
 * </pre>
 */
#define MAC_HW0_MU0_UL_BSSID_HIGH_MASK_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000274)
#define MAC_HW0_MU0_UL_BSSID_HIGH_MASK_OFFSET      0x00000274
#define MAC_HW0_MU0_UL_BSSID_HIGH_MASK_INDEX       0x0000009D
#define MAC_HW0_MU0_UL_BSSID_HIGH_MASK_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_ul_bssid_high_mask_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_UL_BSSID_HIGH_MASK_ADDR);
}

__INLINE void mac_hw0_mu0_ul_bssid_high_mask_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_UL_BSSID_HIGH_MASK_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_UL_BSSID_HIGH_MASK_UPLINK_BSS_COLOR_MASK_MASK    ((uint32_t)0x003F0000)
#define MAC_HW0_MU0_UL_BSSID_HIGH_MASK_UPLINK_BSS_COLOR_MASK_LSB    16
#define MAC_HW0_MU0_UL_BSSID_HIGH_MASK_UPLINK_BSS_COLOR_MASK_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_UL_BSSID_HIGH_MASK_UPLINK_BSSID_HIGH_MASK_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_UL_BSSID_HIGH_MASK_UPLINK_BSSID_HIGH_MASK_LSB    0
#define MAC_HW0_MU0_UL_BSSID_HIGH_MASK_UPLINK_BSSID_HIGH_MASK_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_UL_BSSID_HIGH_MASK_UPLINK_BSS_COLOR_MASK_RST    0x0
#define MAC_HW0_MU0_UL_BSSID_HIGH_MASK_UPLINK_BSSID_HIGH_MASK_RST    0x0

__INLINE void mac_hw0_mu0_ul_bssid_high_mask_pack(uint8_t uplink_bss_color_mask, uint16_t uplink_bssid_high_mask)
{
	ASSERT_ERR((((uint32_t)uplink_bss_color_mask << 16) & ~((uint32_t)0x003F0000)) == 0);
	ASSERT_ERR((((uint32_t)uplink_bssid_high_mask << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_UL_BSSID_HIGH_MASK_ADDR,  ((uint32_t)uplink_bss_color_mask << 16) |((uint32_t)uplink_bssid_high_mask << 0));
}

__INLINE void mac_hw0_mu0_ul_bssid_high_mask_unpack(uint8_t* uplink_bss_color_mask, uint16_t* uplink_bssid_high_mask)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_UL_BSSID_HIGH_MASK_ADDR);

	*uplink_bss_color_mask = (localVal & ((uint32_t)0x003F0000)) >>  16;
	*uplink_bssid_high_mask = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_ul_bssid_high_mask_uplink_bss_color_mask_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_UL_BSSID_HIGH_MASK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x003F0000)) >> 16);
}
__INLINE void mac_hw0_mu0_ul_bssid_high_mask_uplink_bss_color_mask_setf(uint8_t uplinkbsscolormask)
{
	ASSERT_ERR((((uint32_t)uplinkbsscolormask << 16) & ~((uint32_t)0x003F0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_UL_BSSID_HIGH_MASK_ADDR, (REG_PL_RD(MAC_HW0_MU0_UL_BSSID_HIGH_MASK_ADDR) & ~((uint32_t)0x003F0000)) | ((uint32_t)uplinkbsscolormask <<16));
}
__INLINE uint16_t mac_hw0_mu0_ul_bssid_high_mask_uplink_bssid_high_mask_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_UL_BSSID_HIGH_MASK_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_ul_bssid_high_mask_uplink_bssid_high_mask_setf(uint16_t uplinkbssidhighmask)
{
	ASSERT_ERR((((uint32_t)uplinkbssidhighmask << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_UL_BSSID_HIGH_MASK_ADDR, (REG_PL_RD(MAC_HW0_MU0_UL_BSSID_HIGH_MASK_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)uplinkbssidhighmask <<0));
}

/**
 * @brief QUIET_ELEMENT_1_A register definition
 *  Contains parameters received in Quiet IEs. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 QUIET_DURATION_1          0x0
 *    15:08 QUIET_PERIOD_1            0x0
 *    07:00 QUIET_COUNT_1             0x0
 * </pre>
 */
#define MAC_HW0_MU0_QUIET_ELEMENT_1_A_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000280)
#define MAC_HW0_MU0_QUIET_ELEMENT_1_A_OFFSET      0x00000280
#define MAC_HW0_MU0_QUIET_ELEMENT_1_A_INDEX       0x000000A0
#define MAC_HW0_MU0_QUIET_ELEMENT_1_A_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_quiet_element_1_a_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_1_A_ADDR);
}

__INLINE void mac_hw0_mu0_quiet_element_1_a_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_QUIET_ELEMENT_1_A_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_QUIET_ELEMENT_1_A_QUIET_DURATION_1_MASK    ((uint32_t)0xFFFF0000)
#define MAC_HW0_MU0_QUIET_ELEMENT_1_A_QUIET_DURATION_1_LSB    16
#define MAC_HW0_MU0_QUIET_ELEMENT_1_A_QUIET_DURATION_1_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_QUIET_ELEMENT_1_A_QUIET_PERIOD_1_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_QUIET_ELEMENT_1_A_QUIET_PERIOD_1_LSB    8
#define MAC_HW0_MU0_QUIET_ELEMENT_1_A_QUIET_PERIOD_1_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_QUIET_ELEMENT_1_A_QUIET_COUNT_1_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_QUIET_ELEMENT_1_A_QUIET_COUNT_1_LSB    0
#define MAC_HW0_MU0_QUIET_ELEMENT_1_A_QUIET_COUNT_1_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_QUIET_ELEMENT_1_A_QUIET_DURATION_1_RST    0x0
#define MAC_HW0_MU0_QUIET_ELEMENT_1_A_QUIET_PERIOD_1_RST    0x0
#define MAC_HW0_MU0_QUIET_ELEMENT_1_A_QUIET_COUNT_1_RST    0x0

__INLINE void mac_hw0_mu0_quiet_element_1_a_pack(uint16_t quiet_duration_1, uint8_t quiet_period_1, uint8_t quiet_count_1)
{
	ASSERT_ERR((((uint32_t)quiet_duration_1 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)quiet_period_1 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)quiet_count_1 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_QUIET_ELEMENT_1_A_ADDR,  ((uint32_t)quiet_duration_1 << 16) |((uint32_t)quiet_period_1 << 8) |((uint32_t)quiet_count_1 << 0));
}

__INLINE void mac_hw0_mu0_quiet_element_1_a_unpack(uint16_t* quiet_duration_1, uint8_t* quiet_period_1, uint8_t* quiet_count_1)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_1_A_ADDR);

	*quiet_duration_1 = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*quiet_period_1 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*quiet_count_1 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_quiet_element_1_a_quiet_duration_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_1_A_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_quiet_element_1_a_quiet_duration_1_setf(uint16_t quietduration1)
{
	ASSERT_ERR((((uint32_t)quietduration1 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_QUIET_ELEMENT_1_A_ADDR, (REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_1_A_ADDR) & ~((uint32_t)0xFFFF0000)) | ((uint32_t)quietduration1 <<16));
}
__INLINE uint8_t mac_hw0_mu0_quiet_element_1_a_quiet_period_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_1_A_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_quiet_element_1_a_quiet_period_1_setf(uint8_t quietperiod1)
{
	ASSERT_ERR((((uint32_t)quietperiod1 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_QUIET_ELEMENT_1_A_ADDR, (REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_1_A_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)quietperiod1 <<8));
}
__INLINE uint8_t mac_hw0_mu0_quiet_element_1_a_quiet_count_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_1_A_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_quiet_element_1_a_quiet_count_1_setf(uint8_t quietcount1)
{
	ASSERT_ERR((((uint32_t)quietcount1 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_QUIET_ELEMENT_1_A_ADDR, (REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_1_A_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)quietcount1 <<0));
}

/**
 * @brief QUIET_ELEMENT_1_B register definition
 *  Contains parameters received in Quiet IEs. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 QUIET_OFFSET_1            0x0
 * </pre>
 */
#define MAC_HW0_MU0_QUIET_ELEMENT_1_B_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000284)
#define MAC_HW0_MU0_QUIET_ELEMENT_1_B_OFFSET      0x00000284
#define MAC_HW0_MU0_QUIET_ELEMENT_1_B_INDEX       0x000000A1
#define MAC_HW0_MU0_QUIET_ELEMENT_1_B_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_quiet_element_1_b_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_1_B_ADDR);
}

__INLINE void mac_hw0_mu0_quiet_element_1_b_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_QUIET_ELEMENT_1_B_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_QUIET_ELEMENT_1_B_QUIET_OFFSET_1_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_QUIET_ELEMENT_1_B_QUIET_OFFSET_1_LSB    0
#define MAC_HW0_MU0_QUIET_ELEMENT_1_B_QUIET_OFFSET_1_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_QUIET_ELEMENT_1_B_QUIET_OFFSET_1_RST    0x0

__INLINE uint16_t mac_hw0_mu0_quiet_element_1_b_quiet_offset_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_1_B_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_quiet_element_1_b_quiet_offset_1_setf(uint16_t quietoffset1)
{
	ASSERT_ERR((((uint32_t)quietoffset1 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_QUIET_ELEMENT_1_B_ADDR, (uint32_t)quietoffset1 << 0);
}

/**
 * @brief QUIET_ELEMENT_2_A register definition
 *  Contains parameters received in Quiet IEs. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 QUIET_DURATION_2          0x0
 *    15:08 QUIET_PERIOD_2            0x0
 *    07:00 QUIET_COUNT_2             0x0
 * </pre>
 */
#define MAC_HW0_MU0_QUIET_ELEMENT_2_A_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000288)
#define MAC_HW0_MU0_QUIET_ELEMENT_2_A_OFFSET      0x00000288
#define MAC_HW0_MU0_QUIET_ELEMENT_2_A_INDEX       0x000000A2
#define MAC_HW0_MU0_QUIET_ELEMENT_2_A_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_quiet_element_2_a_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_2_A_ADDR);
}

__INLINE void mac_hw0_mu0_quiet_element_2_a_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_QUIET_ELEMENT_2_A_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_QUIET_ELEMENT_2_A_QUIET_DURATION_2_MASK    ((uint32_t)0xFFFF0000)
#define MAC_HW0_MU0_QUIET_ELEMENT_2_A_QUIET_DURATION_2_LSB    16
#define MAC_HW0_MU0_QUIET_ELEMENT_2_A_QUIET_DURATION_2_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_QUIET_ELEMENT_2_A_QUIET_PERIOD_2_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_QUIET_ELEMENT_2_A_QUIET_PERIOD_2_LSB    8
#define MAC_HW0_MU0_QUIET_ELEMENT_2_A_QUIET_PERIOD_2_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_QUIET_ELEMENT_2_A_QUIET_COUNT_2_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_QUIET_ELEMENT_2_A_QUIET_COUNT_2_LSB    0
#define MAC_HW0_MU0_QUIET_ELEMENT_2_A_QUIET_COUNT_2_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_QUIET_ELEMENT_2_A_QUIET_DURATION_2_RST    0x0
#define MAC_HW0_MU0_QUIET_ELEMENT_2_A_QUIET_PERIOD_2_RST    0x0
#define MAC_HW0_MU0_QUIET_ELEMENT_2_A_QUIET_COUNT_2_RST    0x0

__INLINE void mac_hw0_mu0_quiet_element_2_a_pack(uint16_t quiet_duration_2, uint8_t quiet_period_2, uint8_t quiet_count_2)
{
	ASSERT_ERR((((uint32_t)quiet_duration_2 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)quiet_period_2 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)quiet_count_2 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_QUIET_ELEMENT_2_A_ADDR,  ((uint32_t)quiet_duration_2 << 16) |((uint32_t)quiet_period_2 << 8) |((uint32_t)quiet_count_2 << 0));
}

__INLINE void mac_hw0_mu0_quiet_element_2_a_unpack(uint16_t* quiet_duration_2, uint8_t* quiet_period_2, uint8_t* quiet_count_2)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_2_A_ADDR);

	*quiet_duration_2 = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*quiet_period_2 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*quiet_count_2 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_quiet_element_2_a_quiet_duration_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_2_A_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_quiet_element_2_a_quiet_duration_2_setf(uint16_t quietduration2)
{
	ASSERT_ERR((((uint32_t)quietduration2 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_QUIET_ELEMENT_2_A_ADDR, (REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_2_A_ADDR) & ~((uint32_t)0xFFFF0000)) | ((uint32_t)quietduration2 <<16));
}
__INLINE uint8_t mac_hw0_mu0_quiet_element_2_a_quiet_period_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_2_A_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_quiet_element_2_a_quiet_period_2_setf(uint8_t quietperiod2)
{
	ASSERT_ERR((((uint32_t)quietperiod2 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_QUIET_ELEMENT_2_A_ADDR, (REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_2_A_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)quietperiod2 <<8));
}
__INLINE uint8_t mac_hw0_mu0_quiet_element_2_a_quiet_count_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_2_A_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_quiet_element_2_a_quiet_count_2_setf(uint8_t quietcount2)
{
	ASSERT_ERR((((uint32_t)quietcount2 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_QUIET_ELEMENT_2_A_ADDR, (REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_2_A_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)quietcount2 <<0));
}

/**
 * @brief QUIET_ELEMENT_2_B register definition
 *  Contains parameters received in Quiet IEs. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 QUIET_OFFSET_2            0x0
 * </pre>
 */
#define MAC_HW0_MU0_QUIET_ELEMENT_2_B_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000028C)
#define MAC_HW0_MU0_QUIET_ELEMENT_2_B_OFFSET      0x0000028C
#define MAC_HW0_MU0_QUIET_ELEMENT_2_B_INDEX       0x000000A3
#define MAC_HW0_MU0_QUIET_ELEMENT_2_B_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_quiet_element_2_b_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_2_B_ADDR);
}

__INLINE void mac_hw0_mu0_quiet_element_2_b_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_QUIET_ELEMENT_2_B_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_QUIET_ELEMENT_2_B_QUIET_OFFSET_2_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_QUIET_ELEMENT_2_B_QUIET_OFFSET_2_LSB    0
#define MAC_HW0_MU0_QUIET_ELEMENT_2_B_QUIET_OFFSET_2_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_QUIET_ELEMENT_2_B_QUIET_OFFSET_2_RST    0x0

__INLINE uint16_t mac_hw0_mu0_quiet_element_2_b_quiet_offset_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_QUIET_ELEMENT_2_B_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_quiet_element_2_b_quiet_offset_2_setf(uint16_t quietoffset2)
{
	ASSERT_ERR((((uint32_t)quietoffset2 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_QUIET_ELEMENT_2_B_ADDR, (uint32_t)quietoffset2 << 0);
}

/**
 * @brief ADD_CCA_BUSY_SEC_20 register definition
 *  Indicates the CCA on Secondary 20MHz busy time. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_BUSY_DUR_SEC_20       0x0
 * </pre>
 */
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_20_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000290)
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_20_OFFSET      0x00000290
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_20_INDEX       0x000000A4
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_20_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_add_cca_busy_sec_20_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ADD_CCA_BUSY_SEC_20_ADDR);
}

__INLINE void mac_hw0_mu0_add_cca_busy_sec_20_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ADD_CCA_BUSY_SEC_20_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_20_CCA_BUSY_DUR_SEC_20_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_20_CCA_BUSY_DUR_SEC_20_LSB    0
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_20_CCA_BUSY_DUR_SEC_20_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_20_CCA_BUSY_DUR_SEC_20_RST    0x0

__INLINE uint32_t mac_hw0_mu0_add_cca_busy_sec_20_cca_busy_dur_sec_20_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ADD_CCA_BUSY_SEC_20_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_add_cca_busy_sec_20_cca_busy_dur_sec_20_setf(uint32_t ccabusydursec20)
{
	ASSERT_ERR((((uint32_t)ccabusydursec20 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ADD_CCA_BUSY_SEC_20_ADDR, (uint32_t)ccabusydursec20 << 0);
}

/**
 * @brief ADD_CCA_BUSY_SEC_40 register definition
 *  Indicates the CCA on Secondary 40MHz busy time. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_BUSY_DUR_SEC_40       0x0
 * </pre>
 */
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_40_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000294)
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_40_OFFSET      0x00000294
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_40_INDEX       0x000000A5
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_40_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_add_cca_busy_sec_40_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ADD_CCA_BUSY_SEC_40_ADDR);
}

__INLINE void mac_hw0_mu0_add_cca_busy_sec_40_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ADD_CCA_BUSY_SEC_40_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_40_CCA_BUSY_DUR_SEC_40_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_40_CCA_BUSY_DUR_SEC_40_LSB    0
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_40_CCA_BUSY_DUR_SEC_40_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_40_CCA_BUSY_DUR_SEC_40_RST    0x0

__INLINE uint32_t mac_hw0_mu0_add_cca_busy_sec_40_cca_busy_dur_sec_40_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ADD_CCA_BUSY_SEC_40_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_add_cca_busy_sec_40_cca_busy_dur_sec_40_setf(uint32_t ccabusydursec40)
{
	ASSERT_ERR((((uint32_t)ccabusydursec40 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ADD_CCA_BUSY_SEC_40_ADDR, (uint32_t)ccabusydursec40 << 0);
}

/**
 * @brief ADD_CCA_BUSY_SEC_80 register definition
 *  Indicates the CCA on Secondary 80MHz busy time. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 CCA_BUSY_DUR_SEC_80       0x0
 * </pre>
 */
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_80_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000298)
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_80_OFFSET      0x00000298
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_80_INDEX       0x000000A6
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_80_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_add_cca_busy_sec_80_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ADD_CCA_BUSY_SEC_80_ADDR);
}

__INLINE void mac_hw0_mu0_add_cca_busy_sec_80_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ADD_CCA_BUSY_SEC_80_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_80_CCA_BUSY_DUR_SEC_80_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_80_CCA_BUSY_DUR_SEC_80_LSB    0
#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_80_CCA_BUSY_DUR_SEC_80_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ADD_CCA_BUSY_SEC_80_CCA_BUSY_DUR_SEC_80_RST    0x0

__INLINE uint32_t mac_hw0_mu0_add_cca_busy_sec_80_cca_busy_dur_sec_80_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ADD_CCA_BUSY_SEC_80_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_add_cca_busy_sec_80_cca_busy_dur_sec_80_setf(uint32_t ccabusydursec80)
{
	ASSERT_ERR((((uint32_t)ccabusydursec80 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ADD_CCA_BUSY_SEC_80_ADDR, (uint32_t)ccabusydursec80 << 0);
}

/**
 * @brief BSR_0 register definition
 *  Indicate queue size for TID 0. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 queue_size                0xFFFF
 * </pre>
 */
#define MAC_HW0_MU0_BSR_0_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000002A0)
#define MAC_HW0_MU0_BSR_0_OFFSET      0x000002A0
#define MAC_HW0_MU0_BSR_0_INDEX       0x000000A8
#define MAC_HW0_MU0_BSR_0_RESET       0x0000FFFF

__INLINE uint32_t  mac_hw0_mu0_bsr_0_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BSR_0_ADDR);
}

__INLINE void mac_hw0_mu0_bsr_0_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BSR_0_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BSR_0_QUEUE_SIZE_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BSR_0_QUEUE_SIZE_LSB    0
#define MAC_HW0_MU0_BSR_0_QUEUE_SIZE_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BSR_0_QUEUE_SIZE_RST    0xFFFF

__INLINE uint16_t mac_hw0_mu0_bsr_0_queue_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSR_0_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_bsr_0_queue_size_setf(uint16_t queuesize)
{
	ASSERT_ERR((((uint32_t)queuesize << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSR_0_ADDR, (uint32_t)queuesize << 0);
}

/**
 * @brief BSR_1 register definition
 *  Indicate queue size for TID 1. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 queue_size                0xFFFF
 * </pre>
 */
#define MAC_HW0_MU0_BSR_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000002A4)
#define MAC_HW0_MU0_BSR_1_OFFSET      0x000002A4
#define MAC_HW0_MU0_BSR_1_INDEX       0x000000A9
#define MAC_HW0_MU0_BSR_1_RESET       0x0000FFFF

__INLINE uint32_t  mac_hw0_mu0_bsr_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BSR_1_ADDR);
}

__INLINE void mac_hw0_mu0_bsr_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BSR_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BSR_1_QUEUE_SIZE_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BSR_1_QUEUE_SIZE_LSB    0
#define MAC_HW0_MU0_BSR_1_QUEUE_SIZE_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BSR_1_QUEUE_SIZE_RST    0xFFFF

__INLINE uint16_t mac_hw0_mu0_bsr_1_queue_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSR_1_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_bsr_1_queue_size_setf(uint16_t queuesize)
{
	ASSERT_ERR((((uint32_t)queuesize << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSR_1_ADDR, (uint32_t)queuesize << 0);
}

/**
 * @brief BSR_2 register definition
 *  Indicate queue size for TID 2. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 queue_size                0xFFFF
 * </pre>
 */
#define MAC_HW0_MU0_BSR_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000002A8)
#define MAC_HW0_MU0_BSR_2_OFFSET      0x000002A8
#define MAC_HW0_MU0_BSR_2_INDEX       0x000000AA
#define MAC_HW0_MU0_BSR_2_RESET       0x0000FFFF

__INLINE uint32_t  mac_hw0_mu0_bsr_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BSR_2_ADDR);
}

__INLINE void mac_hw0_mu0_bsr_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BSR_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BSR_2_QUEUE_SIZE_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BSR_2_QUEUE_SIZE_LSB    0
#define MAC_HW0_MU0_BSR_2_QUEUE_SIZE_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BSR_2_QUEUE_SIZE_RST    0xFFFF

__INLINE uint16_t mac_hw0_mu0_bsr_2_queue_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSR_2_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_bsr_2_queue_size_setf(uint16_t queuesize)
{
	ASSERT_ERR((((uint32_t)queuesize << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSR_2_ADDR, (uint32_t)queuesize << 0);
}

/**
 * @brief BSR_3 register definition
 *  Indicate queue size for TID 3. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 queue_size                0xFFFF
 * </pre>
 */
#define MAC_HW0_MU0_BSR_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000002AC)
#define MAC_HW0_MU0_BSR_3_OFFSET      0x000002AC
#define MAC_HW0_MU0_BSR_3_INDEX       0x000000AB
#define MAC_HW0_MU0_BSR_3_RESET       0x0000FFFF

__INLINE uint32_t  mac_hw0_mu0_bsr_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BSR_3_ADDR);
}

__INLINE void mac_hw0_mu0_bsr_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BSR_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BSR_3_QUEUE_SIZE_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BSR_3_QUEUE_SIZE_LSB    0
#define MAC_HW0_MU0_BSR_3_QUEUE_SIZE_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BSR_3_QUEUE_SIZE_RST    0xFFFF

__INLINE uint16_t mac_hw0_mu0_bsr_3_queue_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSR_3_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_bsr_3_queue_size_setf(uint16_t queuesize)
{
	ASSERT_ERR((((uint32_t)queuesize << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSR_3_ADDR, (uint32_t)queuesize << 0);
}

/**
 * @brief BSR_4 register definition
 *  Indicate queue size for TID 4. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 queue_size                0xFFFF
 * </pre>
 */
#define MAC_HW0_MU0_BSR_4_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000002B0)
#define MAC_HW0_MU0_BSR_4_OFFSET      0x000002B0
#define MAC_HW0_MU0_BSR_4_INDEX       0x000000AC
#define MAC_HW0_MU0_BSR_4_RESET       0x0000FFFF

__INLINE uint32_t  mac_hw0_mu0_bsr_4_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BSR_4_ADDR);
}

__INLINE void mac_hw0_mu0_bsr_4_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BSR_4_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BSR_4_QUEUE_SIZE_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BSR_4_QUEUE_SIZE_LSB    0
#define MAC_HW0_MU0_BSR_4_QUEUE_SIZE_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BSR_4_QUEUE_SIZE_RST    0xFFFF

__INLINE uint16_t mac_hw0_mu0_bsr_4_queue_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSR_4_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_bsr_4_queue_size_setf(uint16_t queuesize)
{
	ASSERT_ERR((((uint32_t)queuesize << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSR_4_ADDR, (uint32_t)queuesize << 0);
}

/**
 * @brief BSR_5 register definition
 *  Indicate queue size for TID 5. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 queue_size                0xFFFF
 * </pre>
 */
#define MAC_HW0_MU0_BSR_5_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000002B4)
#define MAC_HW0_MU0_BSR_5_OFFSET      0x000002B4
#define MAC_HW0_MU0_BSR_5_INDEX       0x000000AD
#define MAC_HW0_MU0_BSR_5_RESET       0x0000FFFF

__INLINE uint32_t  mac_hw0_mu0_bsr_5_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BSR_5_ADDR);
}

__INLINE void mac_hw0_mu0_bsr_5_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BSR_5_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BSR_5_QUEUE_SIZE_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BSR_5_QUEUE_SIZE_LSB    0
#define MAC_HW0_MU0_BSR_5_QUEUE_SIZE_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BSR_5_QUEUE_SIZE_RST    0xFFFF

__INLINE uint16_t mac_hw0_mu0_bsr_5_queue_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSR_5_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_bsr_5_queue_size_setf(uint16_t queuesize)
{
	ASSERT_ERR((((uint32_t)queuesize << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSR_5_ADDR, (uint32_t)queuesize << 0);
}

/**
 * @brief BSR_6 register definition
 *  Indicate queue size for TID 6. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 queue_size                0xFFFF
 * </pre>
 */
#define MAC_HW0_MU0_BSR_6_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000002B8)
#define MAC_HW0_MU0_BSR_6_OFFSET      0x000002B8
#define MAC_HW0_MU0_BSR_6_INDEX       0x000000AE
#define MAC_HW0_MU0_BSR_6_RESET       0x0000FFFF

__INLINE uint32_t  mac_hw0_mu0_bsr_6_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BSR_6_ADDR);
}

__INLINE void mac_hw0_mu0_bsr_6_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BSR_6_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BSR_6_QUEUE_SIZE_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BSR_6_QUEUE_SIZE_LSB    0
#define MAC_HW0_MU0_BSR_6_QUEUE_SIZE_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BSR_6_QUEUE_SIZE_RST    0xFFFF

__INLINE uint16_t mac_hw0_mu0_bsr_6_queue_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSR_6_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_bsr_6_queue_size_setf(uint16_t queuesize)
{
	ASSERT_ERR((((uint32_t)queuesize << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSR_6_ADDR, (uint32_t)queuesize << 0);
}

/**
 * @brief BSR_7 register definition
 *  Indicate queue size for TID 7. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 queue_size                0xFFFF
 * </pre>
 */
#define MAC_HW0_MU0_BSR_7_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000002BC)
#define MAC_HW0_MU0_BSR_7_OFFSET      0x000002BC
#define MAC_HW0_MU0_BSR_7_INDEX       0x000000AF
#define MAC_HW0_MU0_BSR_7_RESET       0x0000FFFF

__INLINE uint32_t  mac_hw0_mu0_bsr_7_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BSR_7_ADDR);
}

__INLINE void mac_hw0_mu0_bsr_7_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BSR_7_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BSR_7_QUEUE_SIZE_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BSR_7_QUEUE_SIZE_LSB    0
#define MAC_HW0_MU0_BSR_7_QUEUE_SIZE_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BSR_7_QUEUE_SIZE_RST    0xFFFF

__INLINE uint16_t mac_hw0_mu0_bsr_7_queue_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BSR_7_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_bsr_7_queue_size_setf(uint16_t queuesize)
{
	ASSERT_ERR((((uint32_t)queuesize << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BSR_7_ADDR, (uint32_t)queuesize << 0);
}

/**
 * @brief TX_POWER_BW_CALIB_FACTOR register definition
 *  Contains TX power BW calibration factor register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 BW_CALIB_FACTOR_160       0x0
 *    23:16 BW_CALIB_FACTOR_80        0x0
 *    15:08 BW_CALIB_FACTOR_40        0x0
 *    07:00 BW_CALIB_FACTOR_20        0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000002C0)
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_OFFSET      0x000002C0
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_INDEX       0x000000B0
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_power_bw_calib_factor_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR);
}

__INLINE void mac_hw0_mu0_tx_power_bw_calib_factor_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_BW_CALIB_FACTOR_160_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_BW_CALIB_FACTOR_160_LSB    24
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_BW_CALIB_FACTOR_160_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_BW_CALIB_FACTOR_80_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_BW_CALIB_FACTOR_80_LSB    16
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_BW_CALIB_FACTOR_80_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_BW_CALIB_FACTOR_40_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_BW_CALIB_FACTOR_40_LSB    8
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_BW_CALIB_FACTOR_40_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_BW_CALIB_FACTOR_20_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_BW_CALIB_FACTOR_20_LSB    0
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_BW_CALIB_FACTOR_20_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_BW_CALIB_FACTOR_160_RST    0x0
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_BW_CALIB_FACTOR_80_RST    0x0
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_BW_CALIB_FACTOR_40_RST    0x0
#define MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_BW_CALIB_FACTOR_20_RST    0x0

__INLINE void mac_hw0_mu0_tx_power_bw_calib_factor_pack(uint8_t bw_calib_factor_160, uint8_t bw_calib_factor_80, uint8_t bw_calib_factor_40, uint8_t bw_calib_factor_20)
{
	ASSERT_ERR((((uint32_t)bw_calib_factor_160 << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)bw_calib_factor_80 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)bw_calib_factor_40 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)bw_calib_factor_20 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR,  ((uint32_t)bw_calib_factor_160 << 24) |((uint32_t)bw_calib_factor_80 << 16) |((uint32_t)bw_calib_factor_40 << 8) |((uint32_t)bw_calib_factor_20 << 0));
}

__INLINE void mac_hw0_mu0_tx_power_bw_calib_factor_unpack(uint8_t* bw_calib_factor_160, uint8_t* bw_calib_factor_80, uint8_t* bw_calib_factor_40, uint8_t* bw_calib_factor_20)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR);

	*bw_calib_factor_160 = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*bw_calib_factor_80 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*bw_calib_factor_40 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*bw_calib_factor_20 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_tx_power_bw_calib_factor_bw_calib_factor_160_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_tx_power_bw_calib_factor_bw_calib_factor_160_setf(uint8_t bwcalibfactor160)
{
	ASSERT_ERR((((uint32_t)bwcalibfactor160 << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)bwcalibfactor160 <<24));
}
__INLINE uint8_t mac_hw0_mu0_tx_power_bw_calib_factor_bw_calib_factor_80_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_tx_power_bw_calib_factor_bw_calib_factor_80_setf(uint8_t bwcalibfactor80)
{
	ASSERT_ERR((((uint32_t)bwcalibfactor80 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)bwcalibfactor80 <<16));
}
__INLINE uint8_t mac_hw0_mu0_tx_power_bw_calib_factor_bw_calib_factor_40_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_power_bw_calib_factor_bw_calib_factor_40_setf(uint8_t bwcalibfactor40)
{
	ASSERT_ERR((((uint32_t)bwcalibfactor40 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)bwcalibfactor40 <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_power_bw_calib_factor_bw_calib_factor_20_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_tx_power_bw_calib_factor_bw_calib_factor_20_setf(uint8_t bwcalibfactor20)
{
	ASSERT_ERR((((uint32_t)bwcalibfactor20 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_BW_CALIB_FACTOR_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)bwcalibfactor20 <<0));
}

/**
 * @brief TX_POWER_ANTENNA_FACTOR_1 register definition
 *  Contains TX power compensation for number of TX ch register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 ANTENNA_FACTOR_4          0x30
 *    23:16 ANTENNA_FACTOR_3          0x26
 *    15:08 ANTENNA_FACTOR_2          0x18
 *    07:00 ANTENNA_FACTOR_1          0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000002C4)
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_OFFSET      0x000002C4
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_INDEX       0x000000B1
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_RESET       0x30261800

__INLINE uint32_t  mac_hw0_mu0_tx_power_antenna_factor_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR);
}

__INLINE void mac_hw0_mu0_tx_power_antenna_factor_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ANTENNA_FACTOR_4_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ANTENNA_FACTOR_4_LSB    24
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ANTENNA_FACTOR_4_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ANTENNA_FACTOR_3_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ANTENNA_FACTOR_3_LSB    16
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ANTENNA_FACTOR_3_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ANTENNA_FACTOR_2_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ANTENNA_FACTOR_2_LSB    8
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ANTENNA_FACTOR_2_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ANTENNA_FACTOR_1_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ANTENNA_FACTOR_1_LSB    0
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ANTENNA_FACTOR_1_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ANTENNA_FACTOR_4_RST    0x30
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ANTENNA_FACTOR_3_RST    0x26
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ANTENNA_FACTOR_2_RST    0x18
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ANTENNA_FACTOR_1_RST    0x0

__INLINE void mac_hw0_mu0_tx_power_antenna_factor_1_pack(uint8_t antenna_factor_4, uint8_t antenna_factor_3, uint8_t antenna_factor_2, uint8_t antenna_factor_1)
{
	ASSERT_ERR((((uint32_t)antenna_factor_4 << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)antenna_factor_3 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)antenna_factor_2 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)antenna_factor_1 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR,  ((uint32_t)antenna_factor_4 << 24) |((uint32_t)antenna_factor_3 << 16) |((uint32_t)antenna_factor_2 << 8) |((uint32_t)antenna_factor_1 << 0));
}

__INLINE void mac_hw0_mu0_tx_power_antenna_factor_1_unpack(uint8_t* antenna_factor_4, uint8_t* antenna_factor_3, uint8_t* antenna_factor_2, uint8_t* antenna_factor_1)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR);

	*antenna_factor_4 = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*antenna_factor_3 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*antenna_factor_2 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*antenna_factor_1 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_tx_power_antenna_factor_1_antenna_factor_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_tx_power_antenna_factor_1_antenna_factor_4_setf(uint8_t antennafactor4)
{
	ASSERT_ERR((((uint32_t)antennafactor4 << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)antennafactor4 <<24));
}
__INLINE uint8_t mac_hw0_mu0_tx_power_antenna_factor_1_antenna_factor_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_tx_power_antenna_factor_1_antenna_factor_3_setf(uint8_t antennafactor3)
{
	ASSERT_ERR((((uint32_t)antennafactor3 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)antennafactor3 <<16));
}
__INLINE uint8_t mac_hw0_mu0_tx_power_antenna_factor_1_antenna_factor_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_power_antenna_factor_1_antenna_factor_2_setf(uint8_t antennafactor2)
{
	ASSERT_ERR((((uint32_t)antennafactor2 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)antennafactor2 <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_power_antenna_factor_1_antenna_factor_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_tx_power_antenna_factor_1_antenna_factor_1_setf(uint8_t antennafactor1)
{
	ASSERT_ERR((((uint32_t)antennafactor1 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_1_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)antennafactor1 <<0));
}

/**
 * @brief TX_POWER_ANTENNA_FACTOR_2 register definition
 *  Contains TX power compensation for number of TX ch register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 ANTENNA_FACTOR_8          0x48
 *    23:16 ANTENNA_FACTOR_7          0x44
 *    15:08 ANTENNA_FACTOR_6          0x3E
 *    07:00 ANTENNA_FACTOR_5          0x38
 * </pre>
 */
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000002C8)
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_OFFSET      0x000002C8
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_INDEX       0x000000B2
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_RESET       0x48443E38

__INLINE uint32_t  mac_hw0_mu0_tx_power_antenna_factor_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR);
}

__INLINE void mac_hw0_mu0_tx_power_antenna_factor_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ANTENNA_FACTOR_8_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ANTENNA_FACTOR_8_LSB    24
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ANTENNA_FACTOR_8_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ANTENNA_FACTOR_7_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ANTENNA_FACTOR_7_LSB    16
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ANTENNA_FACTOR_7_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ANTENNA_FACTOR_6_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ANTENNA_FACTOR_6_LSB    8
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ANTENNA_FACTOR_6_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ANTENNA_FACTOR_5_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ANTENNA_FACTOR_5_LSB    0
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ANTENNA_FACTOR_5_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ANTENNA_FACTOR_8_RST    0x48
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ANTENNA_FACTOR_7_RST    0x44
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ANTENNA_FACTOR_6_RST    0x3E
#define MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ANTENNA_FACTOR_5_RST    0x38

__INLINE void mac_hw0_mu0_tx_power_antenna_factor_2_pack(uint8_t antenna_factor_8, uint8_t antenna_factor_7, uint8_t antenna_factor_6, uint8_t antenna_factor_5)
{
	ASSERT_ERR((((uint32_t)antenna_factor_8 << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)antenna_factor_7 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)antenna_factor_6 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)antenna_factor_5 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR,  ((uint32_t)antenna_factor_8 << 24) |((uint32_t)antenna_factor_7 << 16) |((uint32_t)antenna_factor_6 << 8) |((uint32_t)antenna_factor_5 << 0));
}

__INLINE void mac_hw0_mu0_tx_power_antenna_factor_2_unpack(uint8_t* antenna_factor_8, uint8_t* antenna_factor_7, uint8_t* antenna_factor_6, uint8_t* antenna_factor_5)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR);

	*antenna_factor_8 = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*antenna_factor_7 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*antenna_factor_6 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*antenna_factor_5 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_tx_power_antenna_factor_2_antenna_factor_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_tx_power_antenna_factor_2_antenna_factor_8_setf(uint8_t antennafactor8)
{
	ASSERT_ERR((((uint32_t)antennafactor8 << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)antennafactor8 <<24));
}
__INLINE uint8_t mac_hw0_mu0_tx_power_antenna_factor_2_antenna_factor_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_tx_power_antenna_factor_2_antenna_factor_7_setf(uint8_t antennafactor7)
{
	ASSERT_ERR((((uint32_t)antennafactor7 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)antennafactor7 <<16));
}
__INLINE uint8_t mac_hw0_mu0_tx_power_antenna_factor_2_antenna_factor_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_power_antenna_factor_2_antenna_factor_6_setf(uint8_t antennafactor6)
{
	ASSERT_ERR((((uint32_t)antennafactor6 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)antennafactor6 <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_power_antenna_factor_2_antenna_factor_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_tx_power_antenna_factor_2_antenna_factor_5_setf(uint8_t antennafactor5)
{
	ASSERT_ERR((((uint32_t)antennafactor5 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_ANTENNA_FACTOR_2_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)antennafactor5 <<0));
}

/**
 * @brief TX_POWER_CTRL register definition
 *  Configures TX power parameters register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    09:08 DISTANCE_MSTA             0x0
 *    01:00 DEFAULT_DISTANCE          0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_POWER_CTRL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000002CC)
#define MAC_HW0_MU0_TX_POWER_CTRL_OFFSET      0x000002CC
#define MAC_HW0_MU0_TX_POWER_CTRL_INDEX       0x000000B3
#define MAC_HW0_MU0_TX_POWER_CTRL_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_power_ctrl_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_POWER_CTRL_ADDR);
}

__INLINE void mac_hw0_mu0_tx_power_ctrl_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_CTRL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_POWER_CTRL_DISTANCE_MSTA_MASK    ((uint32_t)0x00000300)
#define MAC_HW0_MU0_TX_POWER_CTRL_DISTANCE_MSTA_LSB    8
#define MAC_HW0_MU0_TX_POWER_CTRL_DISTANCE_MSTA_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_TX_POWER_CTRL_DEFAULT_DISTANCE_MASK    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_TX_POWER_CTRL_DEFAULT_DISTANCE_LSB    0
#define MAC_HW0_MU0_TX_POWER_CTRL_DEFAULT_DISTANCE_WIDTH    ((uint32_t)0x00000002)

#define MAC_HW0_MU0_TX_POWER_CTRL_DISTANCE_MSTA_RST    0x0
#define MAC_HW0_MU0_TX_POWER_CTRL_DEFAULT_DISTANCE_RST    0x0

__INLINE void mac_hw0_mu0_tx_power_ctrl_pack(uint8_t distance_msta, uint8_t default_distance)
{
	ASSERT_ERR((((uint32_t)distance_msta << 8) & ~((uint32_t)0x00000300)) == 0);
	ASSERT_ERR((((uint32_t)default_distance << 0) & ~((uint32_t)0x00000003)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_CTRL_ADDR,  ((uint32_t)distance_msta << 8) |((uint32_t)default_distance << 0));
}

__INLINE void mac_hw0_mu0_tx_power_ctrl_unpack(uint8_t* distance_msta, uint8_t* default_distance)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_CTRL_ADDR);

	*distance_msta = (localVal & ((uint32_t)0x00000300)) >>  8;
	*default_distance = (localVal & ((uint32_t)0x00000003)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_tx_power_ctrl_distance_msta_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_CTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000300)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_power_ctrl_distance_msta_setf(uint8_t distancemsta)
{
	ASSERT_ERR((((uint32_t)distancemsta << 8) & ~((uint32_t)0x00000300)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_CTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_CTRL_ADDR) & ~((uint32_t)0x00000300)) | ((uint32_t)distancemsta <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_power_ctrl_default_distance_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_CTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000003)) >> 0);
}
__INLINE void mac_hw0_mu0_tx_power_ctrl_default_distance_setf(uint8_t defaultdistance)
{
	ASSERT_ERR((((uint32_t)defaultdistance << 0) & ~((uint32_t)0x00000003)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_CTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_POWER_CTRL_ADDR) & ~((uint32_t)0x00000003)) | ((uint32_t)defaultdistance <<0));
}

/**
 * @brief TX_POWER_MEM_ADDR register definition
 *  Configures the TX power memory line address  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    06:00 TX_POWER_MEM_ADDR         0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_POWER_MEM_ADDR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000002D0)
#define MAC_HW0_MU0_TX_POWER_MEM_ADDR_OFFSET      0x000002D0
#define MAC_HW0_MU0_TX_POWER_MEM_ADDR_INDEX       0x000000B4
#define MAC_HW0_MU0_TX_POWER_MEM_ADDR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_power_mem_addr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_POWER_MEM_ADDR_ADDR);
}

__INLINE void mac_hw0_mu0_tx_power_mem_addr_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_MEM_ADDR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_POWER_MEM_ADDR_TX_POWER_MEM_ADDR_MASK    ((uint32_t)0x0000007F)
#define MAC_HW0_MU0_TX_POWER_MEM_ADDR_TX_POWER_MEM_ADDR_LSB    0
#define MAC_HW0_MU0_TX_POWER_MEM_ADDR_TX_POWER_MEM_ADDR_WIDTH    ((uint32_t)0x00000007)

#define MAC_HW0_MU0_TX_POWER_MEM_ADDR_TX_POWER_MEM_ADDR_RST    0x0

__INLINE uint8_t mac_hw0_mu0_tx_power_mem_addr_tx_power_mem_addr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_MEM_ADDR_ADDR);
	return (uint8_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_tx_power_mem_addr_tx_power_mem_addr_setf(uint8_t txpowermemaddr)
{
	ASSERT_ERR((((uint32_t)txpowermemaddr << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_MEM_ADDR_ADDR, (uint32_t)txpowermemaddr << 0);
}

/**
 * @brief TX_POWER_MEM_DATA register definition
 *  Configures the TX power memory line content register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TX_POWER_MEM_DATA         0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_POWER_MEM_DATA_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000002D4)
#define MAC_HW0_MU0_TX_POWER_MEM_DATA_OFFSET      0x000002D4
#define MAC_HW0_MU0_TX_POWER_MEM_DATA_INDEX       0x000000B5
#define MAC_HW0_MU0_TX_POWER_MEM_DATA_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_power_mem_data_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_POWER_MEM_DATA_ADDR);
}

__INLINE void mac_hw0_mu0_tx_power_mem_data_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_MEM_DATA_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_POWER_MEM_DATA_TX_POWER_MEM_DATA_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TX_POWER_MEM_DATA_TX_POWER_MEM_DATA_LSB    0
#define MAC_HW0_MU0_TX_POWER_MEM_DATA_TX_POWER_MEM_DATA_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TX_POWER_MEM_DATA_TX_POWER_MEM_DATA_RST    0x0

__INLINE uint32_t mac_hw0_mu0_tx_power_mem_data_tx_power_mem_data_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_POWER_MEM_DATA_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_tx_power_mem_data_tx_power_mem_data_setf(uint32_t txpowermemdata)
{
	ASSERT_ERR((((uint32_t)txpowermemdata << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_POWER_MEM_DATA_ADDR, (uint32_t)txpowermemdata << 0);
}

/**
 * @brief TXOP_TIMER register definition
 *  Indicates the remained TXOP time register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 REMAINED_TXOP_DURATION    0x0
 * </pre>
 */
#define MAC_HW0_MU0_TXOP_TIMER_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000002E0)
#define MAC_HW0_MU0_TXOP_TIMER_OFFSET      0x000002E0
#define MAC_HW0_MU0_TXOP_TIMER_INDEX       0x000000B8
#define MAC_HW0_MU0_TXOP_TIMER_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_txop_timer_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TXOP_TIMER_ADDR);
}

// field definitions
#define MAC_HW0_MU0_TXOP_TIMER_REMAINED_TXOP_DURATION_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_TXOP_TIMER_REMAINED_TXOP_DURATION_LSB    0
#define MAC_HW0_MU0_TXOP_TIMER_REMAINED_TXOP_DURATION_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_TXOP_TIMER_REMAINED_TXOP_DURATION_RST    0x0

__INLINE uint16_t mac_hw0_mu0_txop_timer_remained_txop_duration_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TXOP_TIMER_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief STBC_CNTRL register definition
 *  Controls STBC protection functionality. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:25 BASIC_STBCMCS             0x0
 *    24    DUAL_CTS_PROT             0              
 *    23:16 CTS_STBC_DUR              0x0
 *    15:00 CF_END_STBC_DUR           0x0
 * </pre>
 */
#define MAC_HW0_MU0_STBC_CNTRL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000300)
#define MAC_HW0_MU0_STBC_CNTRL_OFFSET      0x00000300
#define MAC_HW0_MU0_STBC_CNTRL_INDEX       0x000000C0
#define MAC_HW0_MU0_STBC_CNTRL_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_stbc_cntrl_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_STBC_CNTRL_ADDR);
}

__INLINE void mac_hw0_mu0_stbc_cntrl_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_STBC_CNTRL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_STBC_CNTRL_BASIC_STBCMCS_MASK    ((uint32_t)0xFE000000)
#define MAC_HW0_MU0_STBC_CNTRL_BASIC_STBCMCS_LSB    25
#define MAC_HW0_MU0_STBC_CNTRL_BASIC_STBCMCS_WIDTH    ((uint32_t)0x00000007)
#define MAC_HW0_MU0_STBC_CNTRL_DUAL_CTS_PROT_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_STBC_CNTRL_DUAL_CTS_PROT_POS    24
#define MAC_HW0_MU0_STBC_CNTRL_CTS_STBC_DUR_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_STBC_CNTRL_CTS_STBC_DUR_LSB    16
#define MAC_HW0_MU0_STBC_CNTRL_CTS_STBC_DUR_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_STBC_CNTRL_CF_END_STBC_DUR_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_STBC_CNTRL_CF_END_STBC_DUR_LSB    0
#define MAC_HW0_MU0_STBC_CNTRL_CF_END_STBC_DUR_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_STBC_CNTRL_BASIC_STBCMCS_RST    0x0
#define MAC_HW0_MU0_STBC_CNTRL_DUAL_CTS_PROT_RST    0x0
#define MAC_HW0_MU0_STBC_CNTRL_CTS_STBC_DUR_RST    0x0
#define MAC_HW0_MU0_STBC_CNTRL_CF_END_STBC_DUR_RST    0x0

__INLINE void mac_hw0_mu0_stbc_cntrl_pack(uint8_t basic_stbcmcs, uint8_t dual_cts_prot, uint8_t cts_stbc_dur, uint16_t cf_end_stbc_dur)
{
	ASSERT_ERR((((uint32_t)basic_stbcmcs << 25) & ~((uint32_t)0xFE000000)) == 0);
	ASSERT_ERR((((uint32_t)dual_cts_prot << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)cts_stbc_dur << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)cf_end_stbc_dur << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_STBC_CNTRL_ADDR,  ((uint32_t)basic_stbcmcs << 25) |((uint32_t)dual_cts_prot << 24) |((uint32_t)cts_stbc_dur << 16) |((uint32_t)cf_end_stbc_dur << 0));
}

__INLINE void mac_hw0_mu0_stbc_cntrl_unpack(uint8_t* basic_stbcmcs, uint8_t* dual_cts_prot, uint8_t* cts_stbc_dur, uint16_t* cf_end_stbc_dur)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_STBC_CNTRL_ADDR);

	*basic_stbcmcs = (localVal & ((uint32_t)0xFE000000)) >>  25;
	*dual_cts_prot = (localVal & ((uint32_t)0x01000000)) >>  24;
	*cts_stbc_dur = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*cf_end_stbc_dur = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_stbc_cntrl_basic_stbcmcs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_STBC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFE000000)) >> 25);
}
__INLINE void mac_hw0_mu0_stbc_cntrl_basic_stbcmcs_setf(uint8_t basicstbcmcs)
{
	ASSERT_ERR((((uint32_t)basicstbcmcs << 25) & ~((uint32_t)0xFE000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_STBC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_STBC_CNTRL_ADDR) & ~((uint32_t)0xFE000000)) | ((uint32_t)basicstbcmcs <<25));
}
__INLINE uint8_t mac_hw0_mu0_stbc_cntrl_dual_cts_prot_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_STBC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_stbc_cntrl_dual_cts_prot_setf(uint8_t dualctsprot)
{
	ASSERT_ERR((((uint32_t)dualctsprot << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_STBC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_STBC_CNTRL_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)dualctsprot <<24));
}
__INLINE uint8_t mac_hw0_mu0_stbc_cntrl_cts_stbc_dur_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_STBC_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_stbc_cntrl_cts_stbc_dur_setf(uint8_t ctsstbcdur)
{
	ASSERT_ERR((((uint32_t)ctsstbcdur << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_STBC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_STBC_CNTRL_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)ctsstbcdur <<16));
}
__INLINE uint16_t mac_hw0_mu0_stbc_cntrl_cf_end_stbc_dur_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_STBC_CNTRL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_stbc_cntrl_cf_end_stbc_dur_setf(uint16_t cfendstbcdur)
{
	ASSERT_ERR((((uint32_t)cfendstbcdur << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_STBC_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_STBC_CNTRL_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)cfendstbcdur <<0));
}

/**
 * @brief START_TX_1 register definition
 *  Used to trigger the HW to transmit a control frame at the start of a TXOP. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:28 START_TX_BW               0x0
 *    27    START_TX_PRE_TYPE         0              
 *    26:24 START_TX_FORMAT_MOD       0x0
 *    23:16 START_TX_MCS_INDEX_0      0x0
 *    15:06 START_TX_KSR_INDEX        0x0
 *    04:03 START_TX_AC               0x0
 *    02:01 START_TX_FRM_EX_TYPE      0x0
 *    00    START_TX_FRAME_EX         0              
 * </pre>
 */
#define MAC_HW0_MU0_START_TX_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000304)
#define MAC_HW0_MU0_START_TX_1_OFFSET      0x00000304
#define MAC_HW0_MU0_START_TX_1_INDEX       0x000000C1
#define MAC_HW0_MU0_START_TX_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_start_tx_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR);
}

__INLINE void mac_hw0_mu0_start_tx_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_START_TX_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_START_TX_1_START_TX_BW_MASK    ((uint32_t)0x30000000)
#define MAC_HW0_MU0_START_TX_1_START_TX_BW_LSB    28
#define MAC_HW0_MU0_START_TX_1_START_TX_BW_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_START_TX_1_START_TX_PRE_TYPE_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_START_TX_1_START_TX_PRE_TYPE_POS    27
#define MAC_HW0_MU0_START_TX_1_START_TX_FORMAT_MOD_MASK    ((uint32_t)0x07000000)
#define MAC_HW0_MU0_START_TX_1_START_TX_FORMAT_MOD_LSB    24
#define MAC_HW0_MU0_START_TX_1_START_TX_FORMAT_MOD_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_START_TX_1_START_TX_MCS_INDEX_0_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_START_TX_1_START_TX_MCS_INDEX_0_LSB    16
#define MAC_HW0_MU0_START_TX_1_START_TX_MCS_INDEX_0_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_START_TX_1_START_TX_KSR_INDEX_MASK    ((uint32_t)0x0000FFC0)
#define MAC_HW0_MU0_START_TX_1_START_TX_KSR_INDEX_LSB    6
#define MAC_HW0_MU0_START_TX_1_START_TX_KSR_INDEX_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_START_TX_1_START_TX_AC_MASK    ((uint32_t)0x00000018)
#define MAC_HW0_MU0_START_TX_1_START_TX_AC_LSB    3
#define MAC_HW0_MU0_START_TX_1_START_TX_AC_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_START_TX_1_START_TX_FRM_EX_TYPE_MASK    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_START_TX_1_START_TX_FRM_EX_TYPE_LSB    1
#define MAC_HW0_MU0_START_TX_1_START_TX_FRM_EX_TYPE_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_START_TX_1_START_TX_FRAME_EX_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_START_TX_1_START_TX_FRAME_EX_POS    0

#define MAC_HW0_MU0_START_TX_1_START_TX_BW_RST    0x0
#define MAC_HW0_MU0_START_TX_1_START_TX_PRE_TYPE_RST    0x0
#define MAC_HW0_MU0_START_TX_1_START_TX_FORMAT_MOD_RST    0x0
#define MAC_HW0_MU0_START_TX_1_START_TX_MCS_INDEX_0_RST    0x0
#define MAC_HW0_MU0_START_TX_1_START_TX_KSR_INDEX_RST    0x0
#define MAC_HW0_MU0_START_TX_1_START_TX_AC_RST    0x0
#define MAC_HW0_MU0_START_TX_1_START_TX_FRM_EX_TYPE_RST    0x0
#define MAC_HW0_MU0_START_TX_1_START_TX_FRAME_EX_RST    0x0

__INLINE void mac_hw0_mu0_start_tx_1_pack(uint8_t start_tx_bw, uint8_t start_tx_pre_type, uint8_t start_tx_format_mod, uint8_t start_tx_mcs_index_0, uint16_t start_tx_ksr_index, uint8_t start_tx_ac, uint8_t start_tx_frm_ex_type, uint8_t start_tx_frame_ex)
{
	ASSERT_ERR((((uint32_t)start_tx_bw << 28) & ~((uint32_t)0x30000000)) == 0);
	ASSERT_ERR((((uint32_t)start_tx_pre_type << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)start_tx_format_mod << 24) & ~((uint32_t)0x07000000)) == 0);
	ASSERT_ERR((((uint32_t)start_tx_mcs_index_0 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)start_tx_ksr_index << 6) & ~((uint32_t)0x0000FFC0)) == 0);
	ASSERT_ERR((((uint32_t)start_tx_ac << 3) & ~((uint32_t)0x00000018)) == 0);
	ASSERT_ERR((((uint32_t)start_tx_frm_ex_type << 1) & ~((uint32_t)0x00000006)) == 0);
	ASSERT_ERR((((uint32_t)start_tx_frame_ex << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_1_ADDR,  ((uint32_t)start_tx_bw << 28) |((uint32_t)start_tx_pre_type << 27) |((uint32_t)start_tx_format_mod << 24) |((uint32_t)start_tx_mcs_index_0 << 16) |((uint32_t)start_tx_ksr_index << 6) |((uint32_t)start_tx_ac << 3) |((uint32_t)start_tx_frm_ex_type << 1) |((uint32_t)start_tx_frame_ex << 0));
}

__INLINE void mac_hw0_mu0_start_tx_1_unpack(uint8_t* start_tx_bw, uint8_t* start_tx_pre_type, uint8_t* start_tx_format_mod, uint8_t* start_tx_mcs_index_0, uint16_t* start_tx_ksr_index, uint8_t* start_tx_ac, uint8_t* start_tx_frm_ex_type, uint8_t* start_tx_frame_ex)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR);

	*start_tx_bw = (localVal & ((uint32_t)0x30000000)) >>  28;
	*start_tx_pre_type = (localVal & ((uint32_t)0x08000000)) >>  27;
	*start_tx_format_mod = (localVal & ((uint32_t)0x07000000)) >>  24;
	*start_tx_mcs_index_0 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*start_tx_ksr_index = (localVal & ((uint32_t)0x0000FFC0)) >>  6;
	*start_tx_ac = (localVal & ((uint32_t)0x00000018)) >>  3;
	*start_tx_frm_ex_type = (localVal & ((uint32_t)0x00000006)) >>  1;
	*start_tx_frame_ex = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_start_tx_1_start_tx_bw_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x30000000)) >> 28);
}
__INLINE void mac_hw0_mu0_start_tx_1_start_tx_bw_setf(uint8_t starttxbw)
{
	ASSERT_ERR((((uint32_t)starttxbw << 28) & ~((uint32_t)0x30000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR) & ~((uint32_t)0x30000000)) | ((uint32_t)starttxbw <<28));
}
__INLINE uint8_t mac_hw0_mu0_start_tx_1_start_tx_pre_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_start_tx_1_start_tx_pre_type_setf(uint8_t starttxpretype)
{
	ASSERT_ERR((((uint32_t)starttxpretype << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)starttxpretype <<27));
}
__INLINE uint8_t mac_hw0_mu0_start_tx_1_start_tx_format_mod_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x07000000)) >> 24);
}
__INLINE void mac_hw0_mu0_start_tx_1_start_tx_format_mod_setf(uint8_t starttxformatmod)
{
	ASSERT_ERR((((uint32_t)starttxformatmod << 24) & ~((uint32_t)0x07000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR) & ~((uint32_t)0x07000000)) | ((uint32_t)starttxformatmod <<24));
}
__INLINE uint8_t mac_hw0_mu0_start_tx_1_start_tx_mcs_index_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_start_tx_1_start_tx_mcs_index_0_setf(uint8_t starttxmcsindex0)
{
	ASSERT_ERR((((uint32_t)starttxmcsindex0 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)starttxmcsindex0 <<16));
}
__INLINE uint16_t mac_hw0_mu0_start_tx_1_start_tx_ksr_index_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFC0)) >> 6);
}
__INLINE void mac_hw0_mu0_start_tx_1_start_tx_ksr_index_setf(uint16_t starttxksrindex)
{
	ASSERT_ERR((((uint32_t)starttxksrindex << 6) & ~((uint32_t)0x0000FFC0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR) & ~((uint32_t)0x0000FFC0)) | ((uint32_t)starttxksrindex <<6));
}
__INLINE uint8_t mac_hw0_mu0_start_tx_1_start_tx_ac_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000018)) >> 3);
}
__INLINE void mac_hw0_mu0_start_tx_1_start_tx_ac_setf(uint8_t starttxac)
{
	ASSERT_ERR((((uint32_t)starttxac << 3) & ~((uint32_t)0x00000018)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR) & ~((uint32_t)0x00000018)) | ((uint32_t)starttxac <<3));
}
__INLINE uint8_t mac_hw0_mu0_start_tx_1_start_tx_frm_ex_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000006)) >> 1);
}
__INLINE void mac_hw0_mu0_start_tx_1_start_tx_frm_ex_type_setf(uint8_t starttxfrmextype)
{
	ASSERT_ERR((((uint32_t)starttxfrmextype << 1) & ~((uint32_t)0x00000006)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR) & ~((uint32_t)0x00000006)) | ((uint32_t)starttxfrmextype <<1));
}
__INLINE uint8_t mac_hw0_mu0_start_tx_1_start_tx_frame_ex_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_start_tx_1_start_tx_frame_ex_setf(uint8_t starttxframeex)
{
	ASSERT_ERR((((uint32_t)starttxframeex << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_1_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)starttxframeex <<0));
}

/**
 * @brief START_TX_2 register definition
 *  Used to trigger the HW to transmit a control frame at the start of a TXOP. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 DUR_CONTROL_FRM           0xFFFF
 * </pre>
 */
#define MAC_HW0_MU0_START_TX_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000308)
#define MAC_HW0_MU0_START_TX_2_OFFSET      0x00000308
#define MAC_HW0_MU0_START_TX_2_INDEX       0x000000C2
#define MAC_HW0_MU0_START_TX_2_RESET       0x0000FFFF

__INLINE uint32_t  mac_hw0_mu0_start_tx_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_START_TX_2_ADDR);
}

__INLINE void mac_hw0_mu0_start_tx_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_START_TX_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_START_TX_2_DUR_CONTROL_FRM_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_START_TX_2_DUR_CONTROL_FRM_LSB    0
#define MAC_HW0_MU0_START_TX_2_DUR_CONTROL_FRM_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_START_TX_2_DUR_CONTROL_FRM_RST    0xFFFF

__INLINE uint16_t mac_hw0_mu0_start_tx_2_dur_control_frm_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_2_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_start_tx_2_dur_control_frm_setf(uint16_t durcontrolfrm)
{
	ASSERT_ERR((((uint32_t)durcontrolfrm << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_2_ADDR, (uint32_t)durcontrolfrm << 0);
}

/**
 * @brief START_TX_3 register definition
 *  Used to trigger the HW to transmit a control frame at the start of a TXOP. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 START_TX_SMM_INDEX        0x0
 *    23:16 START_TX_ANTENNA_SET      0x0
 *    13    START_TX_LSTP             0              
 *    12    START_TX_SMOOTHING        1              
 *    08    START_TX_SHORT_GI         0              
 *    07:05 START_TX_N_TX             0x0
 *    04    START_TX_FEC_CODING       0              
 *    03:02 START_TX_STBC             0x0
 *    01:00 START_TX_NUM_EXTN_SS      0x0
 * </pre>
 */
#define MAC_HW0_MU0_START_TX_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000030C)
#define MAC_HW0_MU0_START_TX_3_OFFSET      0x0000030C
#define MAC_HW0_MU0_START_TX_3_INDEX       0x000000C3
#define MAC_HW0_MU0_START_TX_3_RESET       0x00001000

__INLINE uint32_t  mac_hw0_mu0_start_tx_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR);
}

__INLINE void mac_hw0_mu0_start_tx_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_START_TX_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_START_TX_3_START_TX_SMM_INDEX_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_START_TX_3_START_TX_SMM_INDEX_LSB    24
#define MAC_HW0_MU0_START_TX_3_START_TX_SMM_INDEX_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_START_TX_3_START_TX_ANTENNA_SET_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_START_TX_3_START_TX_ANTENNA_SET_LSB    16
#define MAC_HW0_MU0_START_TX_3_START_TX_ANTENNA_SET_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_START_TX_3_START_TX_LSTP_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_START_TX_3_START_TX_LSTP_POS    13
#define MAC_HW0_MU0_START_TX_3_START_TX_SMOOTHING_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_START_TX_3_START_TX_SMOOTHING_POS    12
#define MAC_HW0_MU0_START_TX_3_START_TX_SHORT_GI_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_START_TX_3_START_TX_SHORT_GI_POS    8
#define MAC_HW0_MU0_START_TX_3_START_TX_N_TX_MASK    ((uint32_t)0x000000E0)
#define MAC_HW0_MU0_START_TX_3_START_TX_N_TX_LSB    5
#define MAC_HW0_MU0_START_TX_3_START_TX_N_TX_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_START_TX_3_START_TX_FEC_CODING_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_START_TX_3_START_TX_FEC_CODING_POS    4
#define MAC_HW0_MU0_START_TX_3_START_TX_STBC_MASK    ((uint32_t)0x0000000C)
#define MAC_HW0_MU0_START_TX_3_START_TX_STBC_LSB    2
#define MAC_HW0_MU0_START_TX_3_START_TX_STBC_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_START_TX_3_START_TX_NUM_EXTN_SS_MASK    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_START_TX_3_START_TX_NUM_EXTN_SS_LSB    0
#define MAC_HW0_MU0_START_TX_3_START_TX_NUM_EXTN_SS_WIDTH    ((uint32_t)0x00000002)

#define MAC_HW0_MU0_START_TX_3_START_TX_SMM_INDEX_RST    0x0
#define MAC_HW0_MU0_START_TX_3_START_TX_ANTENNA_SET_RST    0x0
#define MAC_HW0_MU0_START_TX_3_START_TX_LSTP_RST    0x0
#define MAC_HW0_MU0_START_TX_3_START_TX_SMOOTHING_RST    0x1
#define MAC_HW0_MU0_START_TX_3_START_TX_SHORT_GI_RST    0x0
#define MAC_HW0_MU0_START_TX_3_START_TX_N_TX_RST    0x0
#define MAC_HW0_MU0_START_TX_3_START_TX_FEC_CODING_RST    0x0
#define MAC_HW0_MU0_START_TX_3_START_TX_STBC_RST    0x0
#define MAC_HW0_MU0_START_TX_3_START_TX_NUM_EXTN_SS_RST    0x0

__INLINE void mac_hw0_mu0_start_tx_3_pack(uint8_t start_tx_smm_index, uint8_t start_tx_antenna_set, uint8_t start_tx_lstp, uint8_t start_tx_smoothing, uint8_t start_tx_short_gi, uint8_t start_tx_n_tx, uint8_t start_tx_fec_coding, uint8_t start_tx_stbc, uint8_t start_tx_num_extn_ss)
{
	ASSERT_ERR((((uint32_t)start_tx_smm_index << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)start_tx_antenna_set << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)start_tx_lstp << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)start_tx_smoothing << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)start_tx_short_gi << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)start_tx_n_tx << 5) & ~((uint32_t)0x000000E0)) == 0);
	ASSERT_ERR((((uint32_t)start_tx_fec_coding << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)start_tx_stbc << 2) & ~((uint32_t)0x0000000C)) == 0);
	ASSERT_ERR((((uint32_t)start_tx_num_extn_ss << 0) & ~((uint32_t)0x00000003)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_3_ADDR,  ((uint32_t)start_tx_smm_index << 24) |((uint32_t)start_tx_antenna_set << 16) |((uint32_t)start_tx_lstp << 13) |((uint32_t)start_tx_smoothing << 12) |((uint32_t)start_tx_short_gi << 8) |((uint32_t)start_tx_n_tx << 5) |((uint32_t)start_tx_fec_coding << 4) |((uint32_t)start_tx_stbc << 2) |((uint32_t)start_tx_num_extn_ss << 0));
}

__INLINE void mac_hw0_mu0_start_tx_3_unpack(uint8_t* start_tx_smm_index, uint8_t* start_tx_antenna_set, uint8_t* start_tx_lstp, uint8_t* start_tx_smoothing, uint8_t* start_tx_short_gi, uint8_t* start_tx_n_tx, uint8_t* start_tx_fec_coding, uint8_t* start_tx_stbc, uint8_t* start_tx_num_extn_ss)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR);

	*start_tx_smm_index = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*start_tx_antenna_set = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*start_tx_lstp = (localVal & ((uint32_t)0x00002000)) >>  13;
	*start_tx_smoothing = (localVal & ((uint32_t)0x00001000)) >>  12;
	*start_tx_short_gi = (localVal & ((uint32_t)0x00000100)) >>  8;
	*start_tx_n_tx = (localVal & ((uint32_t)0x000000E0)) >>  5;
	*start_tx_fec_coding = (localVal & ((uint32_t)0x00000010)) >>  4;
	*start_tx_stbc = (localVal & ((uint32_t)0x0000000C)) >>  2;
	*start_tx_num_extn_ss = (localVal & ((uint32_t)0x00000003)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_start_tx_3_start_tx_smm_index_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_start_tx_3_start_tx_smm_index_setf(uint8_t starttxsmmindex)
{
	ASSERT_ERR((((uint32_t)starttxsmmindex << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)starttxsmmindex <<24));
}
__INLINE uint8_t mac_hw0_mu0_start_tx_3_start_tx_antenna_set_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_start_tx_3_start_tx_antenna_set_setf(uint8_t starttxantennaset)
{
	ASSERT_ERR((((uint32_t)starttxantennaset << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)starttxantennaset <<16));
}
__INLINE uint8_t mac_hw0_mu0_start_tx_3_start_tx_lstp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_start_tx_3_start_tx_lstp_setf(uint8_t starttxlstp)
{
	ASSERT_ERR((((uint32_t)starttxlstp << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)starttxlstp <<13));
}
__INLINE uint8_t mac_hw0_mu0_start_tx_3_start_tx_smoothing_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_start_tx_3_start_tx_smoothing_setf(uint8_t starttxsmoothing)
{
	ASSERT_ERR((((uint32_t)starttxsmoothing << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)starttxsmoothing <<12));
}
__INLINE uint8_t mac_hw0_mu0_start_tx_3_start_tx_short_gi_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_start_tx_3_start_tx_short_gi_setf(uint8_t starttxshortgi)
{
	ASSERT_ERR((((uint32_t)starttxshortgi << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)starttxshortgi <<8));
}
__INLINE uint8_t mac_hw0_mu0_start_tx_3_start_tx_n_tx_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000E0)) >> 5);
}
__INLINE void mac_hw0_mu0_start_tx_3_start_tx_n_tx_setf(uint8_t starttxntx)
{
	ASSERT_ERR((((uint32_t)starttxntx << 5) & ~((uint32_t)0x000000E0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR) & ~((uint32_t)0x000000E0)) | ((uint32_t)starttxntx <<5));
}
__INLINE uint8_t mac_hw0_mu0_start_tx_3_start_tx_fec_coding_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_start_tx_3_start_tx_fec_coding_setf(uint8_t starttxfeccoding)
{
	ASSERT_ERR((((uint32_t)starttxfeccoding << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)starttxfeccoding <<4));
}
__INLINE uint8_t mac_hw0_mu0_start_tx_3_start_tx_stbc_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000C)) >> 2);
}
__INLINE void mac_hw0_mu0_start_tx_3_start_tx_stbc_setf(uint8_t starttxstbc)
{
	ASSERT_ERR((((uint32_t)starttxstbc << 2) & ~((uint32_t)0x0000000C)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR) & ~((uint32_t)0x0000000C)) | ((uint32_t)starttxstbc <<2));
}
__INLINE uint8_t mac_hw0_mu0_start_tx_3_start_tx_num_extn_ss_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000003)) >> 0);
}
__INLINE void mac_hw0_mu0_start_tx_3_start_tx_num_extn_ss_setf(uint8_t starttxnumextnss)
{
	ASSERT_ERR((((uint32_t)starttxnumextnss << 0) & ~((uint32_t)0x00000003)) == 0);
	REG_PL_WR(MAC_HW0_MU0_START_TX_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_START_TX_3_ADDR) & ~((uint32_t)0x00000003)) | ((uint32_t)starttxnumextnss <<0));
}

/**
 * @brief TX_BW_CNTRL register definition
 *  Controls 40 MHz HW operation register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    17:16 MAX_SUPPORTED_BW          0x3
 *    15:08 A_PPDU_MAX_TIME           0xFF
 *    07    DYN_BW_EN                 0              
 *    06:04 NUM_TRY_BW_ACQUISITION    0x1
 *    02:01 DEFAULT_BWTXOP            0x0
 *    00    DEFAULT_BWTXOPV           0              
 * </pre>
 */
#define MAC_HW0_MU0_TX_BW_CNTRL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000310)
#define MAC_HW0_MU0_TX_BW_CNTRL_OFFSET      0x00000310
#define MAC_HW0_MU0_TX_BW_CNTRL_INDEX       0x000000C4
#define MAC_HW0_MU0_TX_BW_CNTRL_RESET       0x0003FF10

__INLINE uint32_t  mac_hw0_mu0_tx_bw_cntrl_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_BW_CNTRL_ADDR);
}

__INLINE void mac_hw0_mu0_tx_bw_cntrl_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_BW_CNTRL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_BW_CNTRL_MAX_SUPPORTED_BW_MASK    ((uint32_t)0x00030000)
#define MAC_HW0_MU0_TX_BW_CNTRL_MAX_SUPPORTED_BW_LSB    16
#define MAC_HW0_MU0_TX_BW_CNTRL_MAX_SUPPORTED_BW_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_TX_BW_CNTRL_A_PPDU_MAX_TIME_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_TX_BW_CNTRL_A_PPDU_MAX_TIME_LSB    8
#define MAC_HW0_MU0_TX_BW_CNTRL_A_PPDU_MAX_TIME_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_BW_CNTRL_DYN_BW_EN_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_TX_BW_CNTRL_DYN_BW_EN_POS    7
#define MAC_HW0_MU0_TX_BW_CNTRL_NUM_TRY_BW_ACQUISITION_MASK    ((uint32_t)0x00000070)
#define MAC_HW0_MU0_TX_BW_CNTRL_NUM_TRY_BW_ACQUISITION_LSB    4
#define MAC_HW0_MU0_TX_BW_CNTRL_NUM_TRY_BW_ACQUISITION_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_TX_BW_CNTRL_DEFAULT_BWTXOP_MASK    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_TX_BW_CNTRL_DEFAULT_BWTXOP_LSB    1
#define MAC_HW0_MU0_TX_BW_CNTRL_DEFAULT_BWTXOP_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_TX_BW_CNTRL_DEFAULT_BWTXOPV_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_TX_BW_CNTRL_DEFAULT_BWTXOPV_POS    0

#define MAC_HW0_MU0_TX_BW_CNTRL_MAX_SUPPORTED_BW_RST    0x3
#define MAC_HW0_MU0_TX_BW_CNTRL_A_PPDU_MAX_TIME_RST    0xFF
#define MAC_HW0_MU0_TX_BW_CNTRL_DYN_BW_EN_RST    0x0
#define MAC_HW0_MU0_TX_BW_CNTRL_NUM_TRY_BW_ACQUISITION_RST    0x1
#define MAC_HW0_MU0_TX_BW_CNTRL_DEFAULT_BWTXOP_RST    0x0
#define MAC_HW0_MU0_TX_BW_CNTRL_DEFAULT_BWTXOPV_RST    0x0

__INLINE void mac_hw0_mu0_tx_bw_cntrl_pack(uint8_t max_supported_bw, uint8_t a_ppdu_max_time, uint8_t dyn_bw_en, uint8_t num_try_bw_acquisition, uint8_t default_bwtxop, uint8_t default_bwtxopv)
{
	ASSERT_ERR((((uint32_t)max_supported_bw << 16) & ~((uint32_t)0x00030000)) == 0);
	ASSERT_ERR((((uint32_t)a_ppdu_max_time << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)dyn_bw_en << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)num_try_bw_acquisition << 4) & ~((uint32_t)0x00000070)) == 0);
	ASSERT_ERR((((uint32_t)default_bwtxop << 1) & ~((uint32_t)0x00000006)) == 0);
	ASSERT_ERR((((uint32_t)default_bwtxopv << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_BW_CNTRL_ADDR,  ((uint32_t)max_supported_bw << 16) |((uint32_t)a_ppdu_max_time << 8) |((uint32_t)dyn_bw_en << 7) |((uint32_t)num_try_bw_acquisition << 4) |((uint32_t)default_bwtxop << 1) |((uint32_t)default_bwtxopv << 0));
}

__INLINE void mac_hw0_mu0_tx_bw_cntrl_unpack(uint8_t* max_supported_bw, uint8_t* a_ppdu_max_time, uint8_t* dyn_bw_en, uint8_t* num_try_bw_acquisition, uint8_t* default_bwtxop, uint8_t* default_bwtxopv)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_BW_CNTRL_ADDR);

	*max_supported_bw = (localVal & ((uint32_t)0x00030000)) >>  16;
	*a_ppdu_max_time = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*dyn_bw_en = (localVal & ((uint32_t)0x00000080)) >>  7;
	*num_try_bw_acquisition = (localVal & ((uint32_t)0x00000070)) >>  4;
	*default_bwtxop = (localVal & ((uint32_t)0x00000006)) >>  1;
	*default_bwtxopv = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_tx_bw_cntrl_max_supported_bw_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_BW_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00030000)) >> 16);
}
__INLINE void mac_hw0_mu0_tx_bw_cntrl_max_supported_bw_setf(uint8_t maxsupportedbw)
{
	ASSERT_ERR((((uint32_t)maxsupportedbw << 16) & ~((uint32_t)0x00030000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_BW_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_BW_CNTRL_ADDR) & ~((uint32_t)0x00030000)) | ((uint32_t)maxsupportedbw <<16));
}
__INLINE uint8_t mac_hw0_mu0_tx_bw_cntrl_a_ppdu_max_time_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_BW_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_bw_cntrl_a_ppdu_max_time_setf(uint8_t appdumaxtime)
{
	ASSERT_ERR((((uint32_t)appdumaxtime << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_BW_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_BW_CNTRL_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)appdumaxtime <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_bw_cntrl_dyn_bw_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_BW_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_tx_bw_cntrl_dyn_bw_en_setf(uint8_t dynbwen)
{
	ASSERT_ERR((((uint32_t)dynbwen << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_BW_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_BW_CNTRL_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)dynbwen <<7));
}
__INLINE uint8_t mac_hw0_mu0_tx_bw_cntrl_num_try_bw_acquisition_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_BW_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000070)) >> 4);
}
__INLINE void mac_hw0_mu0_tx_bw_cntrl_num_try_bw_acquisition_setf(uint8_t numtrybwacquisition)
{
	ASSERT_ERR((((uint32_t)numtrybwacquisition << 4) & ~((uint32_t)0x00000070)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_BW_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_BW_CNTRL_ADDR) & ~((uint32_t)0x00000070)) | ((uint32_t)numtrybwacquisition <<4));
}
__INLINE uint8_t mac_hw0_mu0_tx_bw_cntrl_default_bwtxop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_BW_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000006)) >> 1);
}
__INLINE void mac_hw0_mu0_tx_bw_cntrl_default_bwtxop_setf(uint8_t defaultbwtxop)
{
	ASSERT_ERR((((uint32_t)defaultbwtxop << 1) & ~((uint32_t)0x00000006)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_BW_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_BW_CNTRL_ADDR) & ~((uint32_t)0x00000006)) | ((uint32_t)defaultbwtxop <<1));
}
__INLINE uint8_t mac_hw0_mu0_tx_bw_cntrl_default_bwtxopv_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_BW_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_tx_bw_cntrl_default_bwtxopv_setf(uint8_t defaultbwtxopv)
{
	ASSERT_ERR((((uint32_t)defaultbwtxopv << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_BW_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_BW_CNTRL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)defaultbwtxopv <<0));
}

/**
 * @brief HTMCS register definition
 *  Indicates the BSS Basic MCS Set. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21:16 BSS_BASIC_HTMCS_SET_UM    0x0
 *    15:00 BSS_BASIC_HTMCS_SET_EM    0xFFFF
 * </pre>
 */
#define MAC_HW0_MU0_HTMCS_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000314)
#define MAC_HW0_MU0_HTMCS_OFFSET      0x00000314
#define MAC_HW0_MU0_HTMCS_INDEX       0x000000C5
#define MAC_HW0_MU0_HTMCS_RESET       0x0000FFFF

__INLINE uint32_t  mac_hw0_mu0_htmcs_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_HTMCS_ADDR);
}

__INLINE void mac_hw0_mu0_htmcs_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_HTMCS_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_HTMCS_BSS_BASIC_HTMCS_SET_UM_MASK    ((uint32_t)0x003F0000)
#define MAC_HW0_MU0_HTMCS_BSS_BASIC_HTMCS_SET_UM_LSB    16
#define MAC_HW0_MU0_HTMCS_BSS_BASIC_HTMCS_SET_UM_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_HTMCS_BSS_BASIC_HTMCS_SET_EM_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_HTMCS_BSS_BASIC_HTMCS_SET_EM_LSB    0
#define MAC_HW0_MU0_HTMCS_BSS_BASIC_HTMCS_SET_EM_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_HTMCS_BSS_BASIC_HTMCS_SET_UM_RST    0x0
#define MAC_HW0_MU0_HTMCS_BSS_BASIC_HTMCS_SET_EM_RST    0xFFFF

__INLINE void mac_hw0_mu0_htmcs_pack(uint8_t bss_basic_htmcs_set_um, uint16_t bss_basic_htmcs_set_em)
{
	ASSERT_ERR((((uint32_t)bss_basic_htmcs_set_um << 16) & ~((uint32_t)0x003F0000)) == 0);
	ASSERT_ERR((((uint32_t)bss_basic_htmcs_set_em << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HTMCS_ADDR,  ((uint32_t)bss_basic_htmcs_set_um << 16) |((uint32_t)bss_basic_htmcs_set_em << 0));
}

__INLINE void mac_hw0_mu0_htmcs_unpack(uint8_t* bss_basic_htmcs_set_um, uint16_t* bss_basic_htmcs_set_em)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HTMCS_ADDR);

	*bss_basic_htmcs_set_um = (localVal & ((uint32_t)0x003F0000)) >>  16;
	*bss_basic_htmcs_set_em = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_htmcs_bss_basic_htmcs_set_um_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HTMCS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x003F0000)) >> 16);
}
__INLINE void mac_hw0_mu0_htmcs_bss_basic_htmcs_set_um_setf(uint8_t bssbasichtmcssetum)
{
	ASSERT_ERR((((uint32_t)bssbasichtmcssetum << 16) & ~((uint32_t)0x003F0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HTMCS_ADDR, (REG_PL_RD(MAC_HW0_MU0_HTMCS_ADDR) & ~((uint32_t)0x003F0000)) | ((uint32_t)bssbasichtmcssetum <<16));
}
__INLINE uint16_t mac_hw0_mu0_htmcs_bss_basic_htmcs_set_em_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HTMCS_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_htmcs_bss_basic_htmcs_set_em_setf(uint16_t bssbasichtmcssetem)
{
	ASSERT_ERR((((uint32_t)bssbasichtmcssetem << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HTMCS_ADDR, (REG_PL_RD(MAC_HW0_MU0_HTMCS_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)bssbasichtmcssetem <<0));
}

/**
 * @brief VHTMCS register definition
 *  Indicates the BSS VHTBasic MCS Set. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 BSS_BASIC_VHTMCS_SET      0xFFFF
 * </pre>
 */
#define MAC_HW0_MU0_VHTMCS_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000031C)
#define MAC_HW0_MU0_VHTMCS_OFFSET      0x0000031C
#define MAC_HW0_MU0_VHTMCS_INDEX       0x000000C7
#define MAC_HW0_MU0_VHTMCS_RESET       0x0000FFFF

__INLINE uint32_t  mac_hw0_mu0_vhtmcs_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_VHTMCS_ADDR);
}

__INLINE void mac_hw0_mu0_vhtmcs_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_VHTMCS_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_VHTMCS_BSS_BASIC_VHTMCS_SET_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_VHTMCS_BSS_BASIC_VHTMCS_SET_LSB    0
#define MAC_HW0_MU0_VHTMCS_BSS_BASIC_VHTMCS_SET_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_VHTMCS_BSS_BASIC_VHTMCS_SET_RST    0xFFFF

__INLINE uint16_t mac_hw0_mu0_vhtmcs_bss_basic_vhtmcs_set_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_VHTMCS_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_vhtmcs_bss_basic_vhtmcs_set_setf(uint16_t bssbasicvhtmcsset)
{
	ASSERT_ERR((((uint32_t)bssbasicvhtmcsset << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_VHTMCS_ADDR, (uint32_t)bssbasicvhtmcsset << 0);
}

/**
 * @brief LSTP register definition
 *  Used to control LSTP register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    00    SUPPORT_LSTP              0              
 * </pre>
 */
#define MAC_HW0_MU0_LSTP_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000320)
#define MAC_HW0_MU0_LSTP_OFFSET      0x00000320
#define MAC_HW0_MU0_LSTP_INDEX       0x000000C8
#define MAC_HW0_MU0_LSTP_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_lstp_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_LSTP_ADDR);
}

__INLINE void mac_hw0_mu0_lstp_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_LSTP_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_LSTP_SUPPORT_LSTP_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_LSTP_SUPPORT_LSTP_POS    0

#define MAC_HW0_MU0_LSTP_SUPPORT_LSTP_RST    0x0

__INLINE uint8_t mac_hw0_mu0_lstp_support_lstp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_LSTP_ADDR);
	return (uint8_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_lstp_support_lstp_setf(uint8_t supportlstp)
{
	ASSERT_ERR((((uint32_t)supportlstp << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_LSTP_ADDR, (uint32_t)supportlstp << 0);
}

/**
 * @brief BQR register definition
 *  Contains the data to return in response to BQRP  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    08    BQR_DATA_VALID            0              
 *    07:00 BQR_DATA                  0x0
 * </pre>
 */
#define MAC_HW0_MU0_BQR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000324)
#define MAC_HW0_MU0_BQR_OFFSET      0x00000324
#define MAC_HW0_MU0_BQR_INDEX       0x000000C9
#define MAC_HW0_MU0_BQR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_bqr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BQR_ADDR);
}

__INLINE void mac_hw0_mu0_bqr_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BQR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BQR_BQR_DATA_VALID_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_BQR_BQR_DATA_VALID_POS    8
#define MAC_HW0_MU0_BQR_BQR_DATA_MASK       ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_BQR_BQR_DATA_LSB        0
#define MAC_HW0_MU0_BQR_BQR_DATA_WIDTH      ((uint32_t)0x00000008)

#define MAC_HW0_MU0_BQR_BQR_DATA_VALID_RST    0x0
#define MAC_HW0_MU0_BQR_BQR_DATA_RST        0x0

__INLINE void mac_hw0_mu0_bqr_pack(uint8_t bqr_data_valid, uint8_t bqr_data)
{
	ASSERT_ERR((((uint32_t)bqr_data_valid << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)bqr_data << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BQR_ADDR,  ((uint32_t)bqr_data_valid << 8) |((uint32_t)bqr_data << 0));
}

__INLINE void mac_hw0_mu0_bqr_unpack(uint8_t* bqr_data_valid, uint8_t* bqr_data)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BQR_ADDR);

	*bqr_data_valid = (localVal & ((uint32_t)0x00000100)) >>  8;
	*bqr_data = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_bqr_bqr_data_valid_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BQR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_bqr_bqr_data_valid_setf(uint8_t bqrdatavalid)
{
	ASSERT_ERR((((uint32_t)bqrdatavalid << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BQR_ADDR, (REG_PL_RD(MAC_HW0_MU0_BQR_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)bqrdatavalid <<8));
}
__INLINE uint8_t mac_hw0_mu0_bqr_bqr_data_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BQR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_bqr_bqr_data_setf(uint8_t bqrdata)
{
	ASSERT_ERR((((uint32_t)bqrdata << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BQR_ADDR, (REG_PL_RD(MAC_HW0_MU0_BQR_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)bqrdata <<0));
}

/**
 * @brief BQR_DEBUG register definition
 *  Indicates available channel bit map status register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 AVAIL_CHANNEL_SENT        0x0
 *    07:00 AVAIL_CHANNEL             0x0
 * </pre>
 */
#define MAC_HW0_MU0_BQR_DEBUG_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000328)
#define MAC_HW0_MU0_BQR_DEBUG_OFFSET      0x00000328
#define MAC_HW0_MU0_BQR_DEBUG_INDEX       0x000000CA
#define MAC_HW0_MU0_BQR_DEBUG_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_bqr_debug_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BQR_DEBUG_ADDR);
}

// field definitions
#define MAC_HW0_MU0_BQR_DEBUG_AVAIL_CHANNEL_SENT_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_BQR_DEBUG_AVAIL_CHANNEL_SENT_LSB    8
#define MAC_HW0_MU0_BQR_DEBUG_AVAIL_CHANNEL_SENT_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_BQR_DEBUG_AVAIL_CHANNEL_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_BQR_DEBUG_AVAIL_CHANNEL_LSB    0
#define MAC_HW0_MU0_BQR_DEBUG_AVAIL_CHANNEL_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_BQR_DEBUG_AVAIL_CHANNEL_SENT_RST    0x0
#define MAC_HW0_MU0_BQR_DEBUG_AVAIL_CHANNEL_RST    0x0

__INLINE void mac_hw0_mu0_bqr_debug_unpack(uint8_t* avail_channel_sent, uint8_t* avail_channel)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BQR_DEBUG_ADDR);

	*avail_channel_sent = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*avail_channel = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_bqr_debug_avail_channel_sent_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BQR_DEBUG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_bqr_debug_avail_channel_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BQR_DEBUG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}

/**
 * @brief SENSING_CONTROL_1 register definition
 *  sensing control 1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 RETRY_INTERVAL            0x9
 *    17:16 MIN_CHBW_1                0x3
 *    15:00 SENSING_RETRY_LIMIT_1     0x9
 * </pre>
 */
#define MAC_HW0_MU0_SENSING_CONTROL_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000032C)
#define MAC_HW0_MU0_SENSING_CONTROL_1_OFFSET      0x0000032C
#define MAC_HW0_MU0_SENSING_CONTROL_1_INDEX       0x000000CB
#define MAC_HW0_MU0_SENSING_CONTROL_1_RESET       0x09030009

__INLINE uint32_t  mac_hw0_mu0_sensing_control_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_1_ADDR);
}

__INLINE void mac_hw0_mu0_sensing_control_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SENSING_CONTROL_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SENSING_CONTROL_1_RETRY_INTERVAL_MASK    ((uint32_t)0x3F000000)
#define MAC_HW0_MU0_SENSING_CONTROL_1_RETRY_INTERVAL_LSB    24
#define MAC_HW0_MU0_SENSING_CONTROL_1_RETRY_INTERVAL_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_SENSING_CONTROL_1_MIN_CHBW_1_MASK    ((uint32_t)0x00030000)
#define MAC_HW0_MU0_SENSING_CONTROL_1_MIN_CHBW_1_LSB    16
#define MAC_HW0_MU0_SENSING_CONTROL_1_MIN_CHBW_1_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_SENSING_CONTROL_1_SENSING_RETRY_LIMIT_1_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_SENSING_CONTROL_1_SENSING_RETRY_LIMIT_1_LSB    0
#define MAC_HW0_MU0_SENSING_CONTROL_1_SENSING_RETRY_LIMIT_1_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_SENSING_CONTROL_1_RETRY_INTERVAL_RST    0x9
#define MAC_HW0_MU0_SENSING_CONTROL_1_MIN_CHBW_1_RST    0x3
#define MAC_HW0_MU0_SENSING_CONTROL_1_SENSING_RETRY_LIMIT_1_RST    0x9

__INLINE void mac_hw0_mu0_sensing_control_1_pack(uint8_t retry_interval, uint8_t min_chbw_1, uint16_t sensing_retry_limit_1)
{
	ASSERT_ERR((((uint32_t)retry_interval << 24) & ~((uint32_t)0x3F000000)) == 0);
	ASSERT_ERR((((uint32_t)min_chbw_1 << 16) & ~((uint32_t)0x00030000)) == 0);
	ASSERT_ERR((((uint32_t)sensing_retry_limit_1 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SENSING_CONTROL_1_ADDR,  ((uint32_t)retry_interval << 24) |((uint32_t)min_chbw_1 << 16) |((uint32_t)sensing_retry_limit_1 << 0));
}

__INLINE void mac_hw0_mu0_sensing_control_1_unpack(uint8_t* retry_interval, uint8_t* min_chbw_1, uint16_t* sensing_retry_limit_1)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_1_ADDR);

	*retry_interval = (localVal & ((uint32_t)0x3F000000)) >>  24;
	*min_chbw_1 = (localVal & ((uint32_t)0x00030000)) >>  16;
	*sensing_retry_limit_1 = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_sensing_control_1_retry_interval_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x3F000000)) >> 24);
}
__INLINE void mac_hw0_mu0_sensing_control_1_retry_interval_setf(uint8_t retryinterval)
{
	ASSERT_ERR((((uint32_t)retryinterval << 24) & ~((uint32_t)0x3F000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SENSING_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_1_ADDR) & ~((uint32_t)0x3F000000)) | ((uint32_t)retryinterval <<24));
}
__INLINE uint8_t mac_hw0_mu0_sensing_control_1_min_chbw_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00030000)) >> 16);
}
__INLINE void mac_hw0_mu0_sensing_control_1_min_chbw_1_setf(uint8_t minchbw1)
{
	ASSERT_ERR((((uint32_t)minchbw1 << 16) & ~((uint32_t)0x00030000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SENSING_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_1_ADDR) & ~((uint32_t)0x00030000)) | ((uint32_t)minchbw1 <<16));
}
__INLINE uint16_t mac_hw0_mu0_sensing_control_1_sensing_retry_limit_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_sensing_control_1_sensing_retry_limit_1_setf(uint16_t sensingretrylimit1)
{
	ASSERT_ERR((((uint32_t)sensingretrylimit1 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SENSING_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_1_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)sensingretrylimit1 <<0));
}

/**
 * @brief SENSING_CONTROL_2 register definition
 *  sensing control 2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 CCA_evaluation_window     0x19
 *    17:16 MIN_CHBW_2                0x2
 *    15:00 SENSING_RETRY_LIMIT_2     0x9
 * </pre>
 */
#define MAC_HW0_MU0_SENSING_CONTROL_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000330)
#define MAC_HW0_MU0_SENSING_CONTROL_2_OFFSET      0x00000330
#define MAC_HW0_MU0_SENSING_CONTROL_2_INDEX       0x000000CC
#define MAC_HW0_MU0_SENSING_CONTROL_2_RESET       0x19020009

__INLINE uint32_t  mac_hw0_mu0_sensing_control_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_2_ADDR);
}

__INLINE void mac_hw0_mu0_sensing_control_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SENSING_CONTROL_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SENSING_CONTROL_2_CCA_EVALUATION_WINDOW_MASK    ((uint32_t)0x3F000000)
#define MAC_HW0_MU0_SENSING_CONTROL_2_CCA_EVALUATION_WINDOW_LSB    24
#define MAC_HW0_MU0_SENSING_CONTROL_2_CCA_EVALUATION_WINDOW_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_SENSING_CONTROL_2_MIN_CHBW_2_MASK    ((uint32_t)0x00030000)
#define MAC_HW0_MU0_SENSING_CONTROL_2_MIN_CHBW_2_LSB    16
#define MAC_HW0_MU0_SENSING_CONTROL_2_MIN_CHBW_2_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_SENSING_CONTROL_2_SENSING_RETRY_LIMIT_2_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_SENSING_CONTROL_2_SENSING_RETRY_LIMIT_2_LSB    0
#define MAC_HW0_MU0_SENSING_CONTROL_2_SENSING_RETRY_LIMIT_2_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_SENSING_CONTROL_2_CCA_EVALUATION_WINDOW_RST    0x19
#define MAC_HW0_MU0_SENSING_CONTROL_2_MIN_CHBW_2_RST    0x2
#define MAC_HW0_MU0_SENSING_CONTROL_2_SENSING_RETRY_LIMIT_2_RST    0x9

__INLINE void mac_hw0_mu0_sensing_control_2_pack(uint8_t cca_evaluation_window, uint8_t min_chbw_2, uint16_t sensing_retry_limit_2)
{
	ASSERT_ERR((((uint32_t)cca_evaluation_window << 24) & ~((uint32_t)0x3F000000)) == 0);
	ASSERT_ERR((((uint32_t)min_chbw_2 << 16) & ~((uint32_t)0x00030000)) == 0);
	ASSERT_ERR((((uint32_t)sensing_retry_limit_2 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SENSING_CONTROL_2_ADDR,  ((uint32_t)cca_evaluation_window << 24) |((uint32_t)min_chbw_2 << 16) |((uint32_t)sensing_retry_limit_2 << 0));
}

__INLINE void mac_hw0_mu0_sensing_control_2_unpack(uint8_t* cca_evaluation_window, uint8_t* min_chbw_2, uint16_t* sensing_retry_limit_2)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_2_ADDR);

	*cca_evaluation_window = (localVal & ((uint32_t)0x3F000000)) >>  24;
	*min_chbw_2 = (localVal & ((uint32_t)0x00030000)) >>  16;
	*sensing_retry_limit_2 = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_sensing_control_2_cca_evaluation_window_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x3F000000)) >> 24);
}
__INLINE void mac_hw0_mu0_sensing_control_2_cca_evaluation_window_setf(uint8_t ccaevaluationwindow)
{
	ASSERT_ERR((((uint32_t)ccaevaluationwindow << 24) & ~((uint32_t)0x3F000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SENSING_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_2_ADDR) & ~((uint32_t)0x3F000000)) | ((uint32_t)ccaevaluationwindow <<24));
}
__INLINE uint8_t mac_hw0_mu0_sensing_control_2_min_chbw_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00030000)) >> 16);
}
__INLINE void mac_hw0_mu0_sensing_control_2_min_chbw_2_setf(uint8_t minchbw2)
{
	ASSERT_ERR((((uint32_t)minchbw2 << 16) & ~((uint32_t)0x00030000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SENSING_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_2_ADDR) & ~((uint32_t)0x00030000)) | ((uint32_t)minchbw2 <<16));
}
__INLINE uint16_t mac_hw0_mu0_sensing_control_2_sensing_retry_limit_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_sensing_control_2_sensing_retry_limit_2_setf(uint16_t sensingretrylimit2)
{
	ASSERT_ERR((((uint32_t)sensingretrylimit2 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SENSING_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_2_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)sensingretrylimit2 <<0));
}

/**
 * @brief SENSING_CONTROL_3 register definition
 *  sensing control 3 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    02    DISABLE_SENSING_INTERVAL_COUNTER 0              
 *    01    CLEAR_SENSING_INTERVAL_COUNTER 0              
 * </pre>
 */
#define MAC_HW0_MU0_SENSING_CONTROL_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000334)
#define MAC_HW0_MU0_SENSING_CONTROL_3_OFFSET      0x00000334
#define MAC_HW0_MU0_SENSING_CONTROL_3_INDEX       0x000000CD
#define MAC_HW0_MU0_SENSING_CONTROL_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_sensing_control_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_3_ADDR);
}

__INLINE void mac_hw0_mu0_sensing_control_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SENSING_CONTROL_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SENSING_CONTROL_3_DISABLE_SENSING_INTERVAL_COUNTER_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_SENSING_CONTROL_3_DISABLE_SENSING_INTERVAL_COUNTER_POS    2
#define MAC_HW0_MU0_SENSING_CONTROL_3_CLEAR_SENSING_INTERVAL_COUNTER_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_SENSING_CONTROL_3_CLEAR_SENSING_INTERVAL_COUNTER_POS    1

#define MAC_HW0_MU0_SENSING_CONTROL_3_DISABLE_SENSING_INTERVAL_COUNTER_RST    0x0
#define MAC_HW0_MU0_SENSING_CONTROL_3_CLEAR_SENSING_INTERVAL_COUNTER_RST    0x0

__INLINE void mac_hw0_mu0_sensing_control_3_pack(uint8_t disable_sensing_interval_counter, uint8_t clear_sensing_interval_counter)
{
	ASSERT_ERR((((uint32_t)disable_sensing_interval_counter << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)clear_sensing_interval_counter << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SENSING_CONTROL_3_ADDR,  ((uint32_t)disable_sensing_interval_counter << 2) |((uint32_t)clear_sensing_interval_counter << 1));
}

__INLINE void mac_hw0_mu0_sensing_control_3_unpack(uint8_t* disable_sensing_interval_counter, uint8_t* clear_sensing_interval_counter)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_3_ADDR);

	*disable_sensing_interval_counter = (localVal & ((uint32_t)0x00000004)) >>  2;
	*clear_sensing_interval_counter = (localVal & ((uint32_t)0x00000002)) >>  1;
}

__INLINE uint8_t mac_hw0_mu0_sensing_control_3_disable_sensing_interval_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_sensing_control_3_disable_sensing_interval_counter_setf(uint8_t disablesensingintervalcounter)
{
	ASSERT_ERR((((uint32_t)disablesensingintervalcounter << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SENSING_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_3_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)disablesensingintervalcounter <<2));
}
__INLINE void mac_hw0_mu0_sensing_control_3_clear_sensing_interval_counter_setf(uint8_t clearsensingintervalcounter)
{
	ASSERT_ERR((((uint32_t)clearsensingintervalcounter << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SENSING_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_3_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)clearsensingintervalcounter <<1));
}

/**
 * @brief SENSING_CONTROL_4 register definition
 *  sensing control 4 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    17:00 rx_Req_rise_delay         0x0
 * </pre>
 */
#define MAC_HW0_MU0_SENSING_CONTROL_4_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000338)
#define MAC_HW0_MU0_SENSING_CONTROL_4_OFFSET      0x00000338
#define MAC_HW0_MU0_SENSING_CONTROL_4_INDEX       0x000000CE
#define MAC_HW0_MU0_SENSING_CONTROL_4_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_sensing_control_4_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_4_ADDR);
}

__INLINE void mac_hw0_mu0_sensing_control_4_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SENSING_CONTROL_4_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SENSING_CONTROL_4_RX_REQ_RISE_DELAY_MASK    ((uint32_t)0x0003FFFF)
#define MAC_HW0_MU0_SENSING_CONTROL_4_RX_REQ_RISE_DELAY_LSB    0
#define MAC_HW0_MU0_SENSING_CONTROL_4_RX_REQ_RISE_DELAY_WIDTH    ((uint32_t)0x00000012)

#define MAC_HW0_MU0_SENSING_CONTROL_4_RX_REQ_RISE_DELAY_RST    0x0

__INLINE uint32_t mac_hw0_mu0_sensing_control_4_rx_req_rise_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SENSING_CONTROL_4_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_sensing_control_4_rx_req_rise_delay_setf(uint32_t rxreqrisedelay)
{
	ASSERT_ERR((((uint32_t)rxreqrisedelay << 0) & ~((uint32_t)0x0003FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SENSING_CONTROL_4_ADDR, (uint32_t)rxreqrisedelay << 0);
}

/**
 * @brief SENSING_STATUS_1 register definition
 *  sensing status register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    17:00 SENSING_RETRY_COUNTER     0x0
 * </pre>
 */
#define MAC_HW0_MU0_SENSING_STATUS_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000033C)
#define MAC_HW0_MU0_SENSING_STATUS_1_OFFSET      0x0000033C
#define MAC_HW0_MU0_SENSING_STATUS_1_INDEX       0x000000CF
#define MAC_HW0_MU0_SENSING_STATUS_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_sensing_status_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SENSING_STATUS_1_ADDR);
}

// field definitions
#define MAC_HW0_MU0_SENSING_STATUS_1_SENSING_RETRY_COUNTER_MASK    ((uint32_t)0x0003FFFF)
#define MAC_HW0_MU0_SENSING_STATUS_1_SENSING_RETRY_COUNTER_LSB    0
#define MAC_HW0_MU0_SENSING_STATUS_1_SENSING_RETRY_COUNTER_WIDTH    ((uint32_t)0x00000012)

#define MAC_HW0_MU0_SENSING_STATUS_1_SENSING_RETRY_COUNTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_sensing_status_1_sensing_retry_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SENSING_STATUS_1_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief SENSING_STATISTICS_1 register definition
 *  sensing statistic 1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 SENSING_PULSE_SKIPPED_COUNTER 0x0
 * </pre>
 */
#define MAC_HW0_MU0_SENSING_STATISTICS_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000340)
#define MAC_HW0_MU0_SENSING_STATISTICS_1_OFFSET      0x00000340
#define MAC_HW0_MU0_SENSING_STATISTICS_1_INDEX       0x000000D0
#define MAC_HW0_MU0_SENSING_STATISTICS_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_sensing_statistics_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SENSING_STATISTICS_1_ADDR);
}

__INLINE void mac_hw0_mu0_sensing_statistics_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SENSING_STATISTICS_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SENSING_STATISTICS_1_SENSING_PULSE_SKIPPED_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_SENSING_STATISTICS_1_SENSING_PULSE_SKIPPED_COUNTER_LSB    0
#define MAC_HW0_MU0_SENSING_STATISTICS_1_SENSING_PULSE_SKIPPED_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_SENSING_STATISTICS_1_SENSING_PULSE_SKIPPED_COUNTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_sensing_statistics_1_sensing_pulse_skipped_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SENSING_STATISTICS_1_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_sensing_statistics_1_sensing_pulse_skipped_counter_setf(uint32_t sensingpulseskippedcounter)
{
	ASSERT_ERR((((uint32_t)sensingpulseskippedcounter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SENSING_STATISTICS_1_ADDR, (uint32_t)sensingpulseskippedcounter << 0);
}

/**
 * @brief SENSING_STATISTICS_2 register definition
 *  sensing statistic 2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 SENSING_RETRY_CCA_COUNTER 0x0
 * </pre>
 */
#define MAC_HW0_MU0_SENSING_STATISTICS_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000344)
#define MAC_HW0_MU0_SENSING_STATISTICS_2_OFFSET      0x00000344
#define MAC_HW0_MU0_SENSING_STATISTICS_2_INDEX       0x000000D1
#define MAC_HW0_MU0_SENSING_STATISTICS_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_sensing_statistics_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SENSING_STATISTICS_2_ADDR);
}

__INLINE void mac_hw0_mu0_sensing_statistics_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SENSING_STATISTICS_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SENSING_STATISTICS_2_SENSING_RETRY_CCA_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_SENSING_STATISTICS_2_SENSING_RETRY_CCA_COUNTER_LSB    0
#define MAC_HW0_MU0_SENSING_STATISTICS_2_SENSING_RETRY_CCA_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_SENSING_STATISTICS_2_SENSING_RETRY_CCA_COUNTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_sensing_statistics_2_sensing_retry_cca_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SENSING_STATISTICS_2_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_sensing_statistics_2_sensing_retry_cca_counter_setf(uint32_t sensingretryccacounter)
{
	ASSERT_ERR((((uint32_t)sensingretryccacounter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SENSING_STATISTICS_2_ADDR, (uint32_t)sensingretryccacounter << 0);
}

/**
 * @brief SENSING_STATISTICS_3 register definition
 *  sensing statistic 3 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 SENSING_RETRY_PTA_COUNTER 0x0
 * </pre>
 */
#define MAC_HW0_MU0_SENSING_STATISTICS_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000348)
#define MAC_HW0_MU0_SENSING_STATISTICS_3_OFFSET      0x00000348
#define MAC_HW0_MU0_SENSING_STATISTICS_3_INDEX       0x000000D2
#define MAC_HW0_MU0_SENSING_STATISTICS_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_sensing_statistics_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SENSING_STATISTICS_3_ADDR);
}

__INLINE void mac_hw0_mu0_sensing_statistics_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SENSING_STATISTICS_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SENSING_STATISTICS_3_SENSING_RETRY_PTA_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_SENSING_STATISTICS_3_SENSING_RETRY_PTA_COUNTER_LSB    0
#define MAC_HW0_MU0_SENSING_STATISTICS_3_SENSING_RETRY_PTA_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_SENSING_STATISTICS_3_SENSING_RETRY_PTA_COUNTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_sensing_statistics_3_sensing_retry_pta_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SENSING_STATISTICS_3_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_sensing_statistics_3_sensing_retry_pta_counter_setf(uint32_t sensingretryptacounter)
{
	ASSERT_ERR((((uint32_t)sensingretryptacounter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SENSING_STATISTICS_3_ADDR, (uint32_t)sensingretryptacounter << 0);
}

/**
 * @brief SENSING_STATISTICS_4 register definition
 *  sensing statistic 4 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 SENSING_MISSING_THD_COUNTER 0x0
 * </pre>
 */
#define MAC_HW0_MU0_SENSING_STATISTICS_4_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000034C)
#define MAC_HW0_MU0_SENSING_STATISTICS_4_OFFSET      0x0000034C
#define MAC_HW0_MU0_SENSING_STATISTICS_4_INDEX       0x000000D3
#define MAC_HW0_MU0_SENSING_STATISTICS_4_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_sensing_statistics_4_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SENSING_STATISTICS_4_ADDR);
}

__INLINE void mac_hw0_mu0_sensing_statistics_4_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SENSING_STATISTICS_4_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SENSING_STATISTICS_4_SENSING_MISSING_THD_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_SENSING_STATISTICS_4_SENSING_MISSING_THD_COUNTER_LSB    0
#define MAC_HW0_MU0_SENSING_STATISTICS_4_SENSING_MISSING_THD_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_SENSING_STATISTICS_4_SENSING_MISSING_THD_COUNTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_sensing_statistics_4_sensing_missing_thd_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SENSING_STATISTICS_4_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_sensing_statistics_4_sensing_missing_thd_counter_setf(uint32_t sensingmissingthdcounter)
{
	ASSERT_ERR((((uint32_t)sensingmissingthdcounter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SENSING_STATISTICS_4_ADDR, (uint32_t)sensingmissingthdcounter << 0);
}

/**
 * @brief PTA_CONTROL_1 register definition
 *  Contains PTA control fields register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25:24 Frame_bw_bcn              0x0
 *    23:22 Frame_bw_ac3              0x0
 *    21:20 Frame_bw_ac2              0x0
 *    19:18 Frame_bw_ac1              0x0
 *    17:16 Frame_bw_ac0              0x0
 *    12    Ignore_pta_gnt_BCN        0              
 *    11    Ignore_pta_gnt_AC3        0              
 *    10    Ignore_pta_gnt_AC2        0              
 *    09    Ignore_pta_gnt_AC1        0              
 *    08    Ignore_pta_gnt_AC0        0              
 *    04    Priority_BCN              0              
 *    03    Priority_AC3              0              
 *    02    Priority_AC2              0              
 *    01    Priority_AC1              0              
 *    00    Priority_AC0              0              
 * </pre>
 */
#define MAC_HW0_MU0_PTA_CONTROL_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000350)
#define MAC_HW0_MU0_PTA_CONTROL_1_OFFSET      0x00000350
#define MAC_HW0_MU0_PTA_CONTROL_1_INDEX       0x000000D4
#define MAC_HW0_MU0_PTA_CONTROL_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_pta_control_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);
}

__INLINE void mac_hw0_mu0_pta_control_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_BCN_MASK    ((uint32_t)0x03000000)
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_BCN_LSB    24
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_BCN_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_AC_3_MASK    ((uint32_t)0x00C00000)
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_AC_3_LSB    22
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_AC_3_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_AC_2_MASK    ((uint32_t)0x00300000)
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_AC_2_LSB    20
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_AC_2_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_AC_1_MASK    ((uint32_t)0x000C0000)
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_AC_1_LSB    18
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_AC_1_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_AC_0_MASK    ((uint32_t)0x00030000)
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_AC_0_LSB    16
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_AC_0_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_PTA_CONTROL_1_IGNORE_PTA_GNT_BCN_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_PTA_CONTROL_1_IGNORE_PTA_GNT_BCN_POS    12
#define MAC_HW0_MU0_PTA_CONTROL_1_IGNORE_PTA_GNT_AC_3_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_PTA_CONTROL_1_IGNORE_PTA_GNT_AC_3_POS    11
#define MAC_HW0_MU0_PTA_CONTROL_1_IGNORE_PTA_GNT_AC_2_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_PTA_CONTROL_1_IGNORE_PTA_GNT_AC_2_POS    10
#define MAC_HW0_MU0_PTA_CONTROL_1_IGNORE_PTA_GNT_AC_1_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_PTA_CONTROL_1_IGNORE_PTA_GNT_AC_1_POS    9
#define MAC_HW0_MU0_PTA_CONTROL_1_IGNORE_PTA_GNT_AC_0_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_PTA_CONTROL_1_IGNORE_PTA_GNT_AC_0_POS    8
#define MAC_HW0_MU0_PTA_CONTROL_1_PRIORITY_BCN_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_PTA_CONTROL_1_PRIORITY_BCN_POS    4
#define MAC_HW0_MU0_PTA_CONTROL_1_PRIORITY_AC_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_PTA_CONTROL_1_PRIORITY_AC_3_POS    3
#define MAC_HW0_MU0_PTA_CONTROL_1_PRIORITY_AC_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_PTA_CONTROL_1_PRIORITY_AC_2_POS    2
#define MAC_HW0_MU0_PTA_CONTROL_1_PRIORITY_AC_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_PTA_CONTROL_1_PRIORITY_AC_1_POS    1
#define MAC_HW0_MU0_PTA_CONTROL_1_PRIORITY_AC_0_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_PTA_CONTROL_1_PRIORITY_AC_0_POS    0

#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_BCN_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_AC_3_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_AC_2_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_AC_1_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_1_FRAME_BW_AC_0_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_1_IGNORE_PTA_GNT_BCN_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_1_IGNORE_PTA_GNT_AC_3_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_1_IGNORE_PTA_GNT_AC_2_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_1_IGNORE_PTA_GNT_AC_1_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_1_IGNORE_PTA_GNT_AC_0_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_1_PRIORITY_BCN_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_1_PRIORITY_AC_3_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_1_PRIORITY_AC_2_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_1_PRIORITY_AC_1_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_1_PRIORITY_AC_0_RST    0x0

__INLINE void mac_hw0_mu0_pta_control_1_pack(uint8_t frame_bw_bcn, uint8_t frame_bw_ac3, uint8_t frame_bw_ac2, uint8_t frame_bw_ac1, uint8_t frame_bw_ac0, uint8_t ignore_pta_gnt_bcn, uint8_t ignore_pta_gnt_ac3, uint8_t ignore_pta_gnt_ac2, uint8_t ignore_pta_gnt_ac1, uint8_t ignore_pta_gnt_ac0, uint8_t priority_bcn, uint8_t priority_ac3, uint8_t priority_ac2, uint8_t priority_ac1, uint8_t priority_ac0)
{
	ASSERT_ERR((((uint32_t)frame_bw_bcn << 24) & ~((uint32_t)0x03000000)) == 0);
	ASSERT_ERR((((uint32_t)frame_bw_ac3 << 22) & ~((uint32_t)0x00C00000)) == 0);
	ASSERT_ERR((((uint32_t)frame_bw_ac2 << 20) & ~((uint32_t)0x00300000)) == 0);
	ASSERT_ERR((((uint32_t)frame_bw_ac1 << 18) & ~((uint32_t)0x000C0000)) == 0);
	ASSERT_ERR((((uint32_t)frame_bw_ac0 << 16) & ~((uint32_t)0x00030000)) == 0);
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_bcn << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_ac3 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_ac2 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_ac1 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_ac0 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)priority_bcn << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)priority_ac3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)priority_ac2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)priority_ac1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)priority_ac0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR,  ((uint32_t)frame_bw_bcn << 24) |((uint32_t)frame_bw_ac3 << 22) |((uint32_t)frame_bw_ac2 << 20) |((uint32_t)frame_bw_ac1 << 18) |((uint32_t)frame_bw_ac0 << 16) |((uint32_t)ignore_pta_gnt_bcn << 12) |((uint32_t)ignore_pta_gnt_ac3 << 11) |((uint32_t)ignore_pta_gnt_ac2 << 10) |((uint32_t)ignore_pta_gnt_ac1 << 9) |((uint32_t)ignore_pta_gnt_ac0 << 8) |((uint32_t)priority_bcn << 4) |((uint32_t)priority_ac3 << 3) |((uint32_t)priority_ac2 << 2) |((uint32_t)priority_ac1 << 1) |((uint32_t)priority_ac0 << 0));
}

__INLINE void mac_hw0_mu0_pta_control_1_unpack(uint8_t* frame_bw_bcn, uint8_t* frame_bw_ac3, uint8_t* frame_bw_ac2, uint8_t* frame_bw_ac1, uint8_t* frame_bw_ac0, uint8_t* ignore_pta_gnt_bcn, uint8_t* ignore_pta_gnt_ac3, uint8_t* ignore_pta_gnt_ac2, uint8_t* ignore_pta_gnt_ac1, uint8_t* ignore_pta_gnt_ac0, uint8_t* priority_bcn, uint8_t* priority_ac3, uint8_t* priority_ac2, uint8_t* priority_ac1, uint8_t* priority_ac0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);

	*frame_bw_bcn = (localVal & ((uint32_t)0x03000000)) >>  24;
	*frame_bw_ac3 = (localVal & ((uint32_t)0x00C00000)) >>  22;
	*frame_bw_ac2 = (localVal & ((uint32_t)0x00300000)) >>  20;
	*frame_bw_ac1 = (localVal & ((uint32_t)0x000C0000)) >>  18;
	*frame_bw_ac0 = (localVal & ((uint32_t)0x00030000)) >>  16;
	*ignore_pta_gnt_bcn = (localVal & ((uint32_t)0x00001000)) >>  12;
	*ignore_pta_gnt_ac3 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*ignore_pta_gnt_ac2 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*ignore_pta_gnt_ac1 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*ignore_pta_gnt_ac0 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*priority_bcn = (localVal & ((uint32_t)0x00000010)) >>  4;
	*priority_ac3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*priority_ac2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*priority_ac1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*priority_ac0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_pta_control_1_frame_bw_bcn_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x03000000)) >> 24);
}
__INLINE void mac_hw0_mu0_pta_control_1_frame_bw_bcn_setf(uint8_t framebwbcn)
{
	ASSERT_ERR((((uint32_t)framebwbcn << 24) & ~((uint32_t)0x03000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR) & ~((uint32_t)0x03000000)) | ((uint32_t)framebwbcn <<24));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_1_frame_bw_ac_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00C00000)) >> 22);
}
__INLINE void mac_hw0_mu0_pta_control_1_frame_bw_ac_3_setf(uint8_t framebwac3)
{
	ASSERT_ERR((((uint32_t)framebwac3 << 22) & ~((uint32_t)0x00C00000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR) & ~((uint32_t)0x00C00000)) | ((uint32_t)framebwac3 <<22));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_1_frame_bw_ac_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00300000)) >> 20);
}
__INLINE void mac_hw0_mu0_pta_control_1_frame_bw_ac_2_setf(uint8_t framebwac2)
{
	ASSERT_ERR((((uint32_t)framebwac2 << 20) & ~((uint32_t)0x00300000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR) & ~((uint32_t)0x00300000)) | ((uint32_t)framebwac2 <<20));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_1_frame_bw_ac_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000C0000)) >> 18);
}
__INLINE void mac_hw0_mu0_pta_control_1_frame_bw_ac_1_setf(uint8_t framebwac1)
{
	ASSERT_ERR((((uint32_t)framebwac1 << 18) & ~((uint32_t)0x000C0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR) & ~((uint32_t)0x000C0000)) | ((uint32_t)framebwac1 <<18));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_1_frame_bw_ac_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00030000)) >> 16);
}
__INLINE void mac_hw0_mu0_pta_control_1_frame_bw_ac_0_setf(uint8_t framebwac0)
{
	ASSERT_ERR((((uint32_t)framebwac0 << 16) & ~((uint32_t)0x00030000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR) & ~((uint32_t)0x00030000)) | ((uint32_t)framebwac0 <<16));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_1_ignore_pta_gnt_bcn_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_pta_control_1_ignore_pta_gnt_bcn_setf(uint8_t ignoreptagntbcn)
{
	ASSERT_ERR((((uint32_t)ignoreptagntbcn << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)ignoreptagntbcn <<12));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_1_ignore_pta_gnt_ac_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_pta_control_1_ignore_pta_gnt_ac_3_setf(uint8_t ignoreptagntac3)
{
	ASSERT_ERR((((uint32_t)ignoreptagntac3 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)ignoreptagntac3 <<11));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_1_ignore_pta_gnt_ac_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_pta_control_1_ignore_pta_gnt_ac_2_setf(uint8_t ignoreptagntac2)
{
	ASSERT_ERR((((uint32_t)ignoreptagntac2 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)ignoreptagntac2 <<10));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_1_ignore_pta_gnt_ac_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_pta_control_1_ignore_pta_gnt_ac_1_setf(uint8_t ignoreptagntac1)
{
	ASSERT_ERR((((uint32_t)ignoreptagntac1 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)ignoreptagntac1 <<9));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_1_ignore_pta_gnt_ac_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_pta_control_1_ignore_pta_gnt_ac_0_setf(uint8_t ignoreptagntac0)
{
	ASSERT_ERR((((uint32_t)ignoreptagntac0 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)ignoreptagntac0 <<8));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_1_priority_bcn_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_pta_control_1_priority_bcn_setf(uint8_t prioritybcn)
{
	ASSERT_ERR((((uint32_t)prioritybcn << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)prioritybcn <<4));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_1_priority_ac_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_pta_control_1_priority_ac_3_setf(uint8_t priorityac3)
{
	ASSERT_ERR((((uint32_t)priorityac3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)priorityac3 <<3));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_1_priority_ac_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_pta_control_1_priority_ac_2_setf(uint8_t priorityac2)
{
	ASSERT_ERR((((uint32_t)priorityac2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)priorityac2 <<2));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_1_priority_ac_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_pta_control_1_priority_ac_1_setf(uint8_t priorityac1)
{
	ASSERT_ERR((((uint32_t)priorityac1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)priorityac1 <<1));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_1_priority_ac_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_pta_control_1_priority_ac_0_setf(uint8_t priorityac0)
{
	ASSERT_ERR((((uint32_t)priorityac0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_1_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)priorityac0 <<0));
}

/**
 * @brief PTA_CONTROL_2 register definition
 *  Contains PTA control fields register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25    Priority_RX_HE_SU_ER      0              
 *    24    Priority_RX_HE_TB         0              
 *    23    Priority_RX_HE_MU         0              
 *    22    Priority_RX_HE_SU         0              
 *    21    Priority_RX_VHT           0              
 *    20    Priority_RX_HT_AMPDU      0              
 *    19    Priority_RX_HT_SMPDU      0              
 *    18    Priority_RX_non_HT        0              
 *    17    Priority_RX_11b           0              
 *    16    Priority_RX_default       0              
 *    11    Priority_HTP_BFR          0              
 *    10    Priority_HTP_BQR          0              
 *    09    Priority_HTP_BSR          0              
 *    08    Priority_HTP_BA           0              
 *    07    Priority_HTP_DATA         0              
 *    06    Priority_MU_CTS           0              
 *    05    Priority_BFR2             0              
 *    04    Priority_BFR1             0              
 *    03    Priority_CF_END           0              
 *    02    Priority_BA               0              
 *    01    Priority_ACK              0              
 *    00    Priority_CTS              0              
 * </pre>
 */
#define MAC_HW0_MU0_PTA_CONTROL_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000354)
#define MAC_HW0_MU0_PTA_CONTROL_2_OFFSET      0x00000354
#define MAC_HW0_MU0_PTA_CONTROL_2_INDEX       0x000000D5
#define MAC_HW0_MU0_PTA_CONTROL_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_pta_control_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
}

__INLINE void mac_hw0_mu0_pta_control_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HE_SU_ER_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HE_SU_ER_POS    25
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HE_TB_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HE_TB_POS    24
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HE_MU_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HE_MU_POS    23
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HE_SU_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HE_SU_POS    22
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_VHT_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_VHT_POS    21
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HT_AMPDU_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HT_AMPDU_POS    20
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HT_SMPDU_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HT_SMPDU_POS    19
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_NON_HT_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_NON_HT_POS    18
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_11_B_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_11_B_POS    17
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_DEFAULT_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_DEFAULT_POS    16
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_HTP_BFR_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_HTP_BFR_POS    11
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_HTP_BQR_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_HTP_BQR_POS    10
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_HTP_BSR_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_HTP_BSR_POS    9
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_HTP_BA_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_HTP_BA_POS    8
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_HTP_DATA_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_HTP_DATA_POS    7
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_MU_CTS_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_MU_CTS_POS    6
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_BFR_2_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_BFR_2_POS    5
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_BFR_1_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_BFR_1_POS    4
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_CF_END_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_CF_END_POS    3
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_BA_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_BA_POS    2
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_ACK_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_ACK_POS    1
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_CTS_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_CTS_POS    0

#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HE_SU_ER_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HE_TB_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HE_MU_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HE_SU_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_VHT_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HT_AMPDU_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_HT_SMPDU_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_NON_HT_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_11_B_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_RX_DEFAULT_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_HTP_BFR_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_HTP_BQR_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_HTP_BSR_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_HTP_BA_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_HTP_DATA_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_MU_CTS_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_BFR_2_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_BFR_1_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_CF_END_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_BA_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_ACK_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_2_PRIORITY_CTS_RST    0x0

__INLINE void mac_hw0_mu0_pta_control_2_pack(uint8_t priority_rx_he_su_er, uint8_t priority_rx_he_tb, uint8_t priority_rx_he_mu, uint8_t priority_rx_he_su, uint8_t priority_rx_vht, uint8_t priority_rx_ht_ampdu, uint8_t priority_rx_ht_smpdu, uint8_t priority_rx_non_ht, uint8_t priority_rx_11b, uint8_t priority_rx_default, uint8_t priority_htp_bfr, uint8_t priority_htp_bqr, uint8_t priority_htp_bsr, uint8_t priority_htp_ba, uint8_t priority_htp_data, uint8_t priority_mu_cts, uint8_t priority_bfr2, uint8_t priority_bfr1, uint8_t priority_cf_end, uint8_t priority_ba, uint8_t priority_ack, uint8_t priority_cts)
{
	ASSERT_ERR((((uint32_t)priority_rx_he_su_er << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)priority_rx_he_tb << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)priority_rx_he_mu << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)priority_rx_he_su << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)priority_rx_vht << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)priority_rx_ht_ampdu << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)priority_rx_ht_smpdu << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)priority_rx_non_ht << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)priority_rx_11b << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)priority_rx_default << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)priority_htp_bfr << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)priority_htp_bqr << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)priority_htp_bsr << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)priority_htp_ba << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)priority_htp_data << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)priority_mu_cts << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)priority_bfr2 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)priority_bfr1 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)priority_cf_end << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)priority_ba << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)priority_ack << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)priority_cts << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR,  ((uint32_t)priority_rx_he_su_er << 25) |((uint32_t)priority_rx_he_tb << 24) |((uint32_t)priority_rx_he_mu << 23) |((uint32_t)priority_rx_he_su << 22) |((uint32_t)priority_rx_vht << 21) |((uint32_t)priority_rx_ht_ampdu << 20) |((uint32_t)priority_rx_ht_smpdu << 19) |((uint32_t)priority_rx_non_ht << 18) |((uint32_t)priority_rx_11b << 17) |((uint32_t)priority_rx_default << 16) |((uint32_t)priority_htp_bfr << 11) |((uint32_t)priority_htp_bqr << 10) |((uint32_t)priority_htp_bsr << 9) |((uint32_t)priority_htp_ba << 8) |((uint32_t)priority_htp_data << 7) |((uint32_t)priority_mu_cts << 6) |((uint32_t)priority_bfr2 << 5) |((uint32_t)priority_bfr1 << 4) |((uint32_t)priority_cf_end << 3) |((uint32_t)priority_ba << 2) |((uint32_t)priority_ack << 1) |((uint32_t)priority_cts << 0));
}

__INLINE void mac_hw0_mu0_pta_control_2_unpack(uint8_t* priority_rx_he_su_er, uint8_t* priority_rx_he_tb, uint8_t* priority_rx_he_mu, uint8_t* priority_rx_he_su, uint8_t* priority_rx_vht, uint8_t* priority_rx_ht_ampdu, uint8_t* priority_rx_ht_smpdu, uint8_t* priority_rx_non_ht, uint8_t* priority_rx_11b, uint8_t* priority_rx_default, uint8_t* priority_htp_bfr, uint8_t* priority_htp_bqr, uint8_t* priority_htp_bsr, uint8_t* priority_htp_ba, uint8_t* priority_htp_data, uint8_t* priority_mu_cts, uint8_t* priority_bfr2, uint8_t* priority_bfr1, uint8_t* priority_cf_end, uint8_t* priority_ba, uint8_t* priority_ack, uint8_t* priority_cts)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);

	*priority_rx_he_su_er = (localVal & ((uint32_t)0x02000000)) >>  25;
	*priority_rx_he_tb = (localVal & ((uint32_t)0x01000000)) >>  24;
	*priority_rx_he_mu = (localVal & ((uint32_t)0x00800000)) >>  23;
	*priority_rx_he_su = (localVal & ((uint32_t)0x00400000)) >>  22;
	*priority_rx_vht = (localVal & ((uint32_t)0x00200000)) >>  21;
	*priority_rx_ht_ampdu = (localVal & ((uint32_t)0x00100000)) >>  20;
	*priority_rx_ht_smpdu = (localVal & ((uint32_t)0x00080000)) >>  19;
	*priority_rx_non_ht = (localVal & ((uint32_t)0x00040000)) >>  18;
	*priority_rx_11b = (localVal & ((uint32_t)0x00020000)) >>  17;
	*priority_rx_default = (localVal & ((uint32_t)0x00010000)) >>  16;
	*priority_htp_bfr = (localVal & ((uint32_t)0x00000800)) >>  11;
	*priority_htp_bqr = (localVal & ((uint32_t)0x00000400)) >>  10;
	*priority_htp_bsr = (localVal & ((uint32_t)0x00000200)) >>  9;
	*priority_htp_ba = (localVal & ((uint32_t)0x00000100)) >>  8;
	*priority_htp_data = (localVal & ((uint32_t)0x00000080)) >>  7;
	*priority_mu_cts = (localVal & ((uint32_t)0x00000040)) >>  6;
	*priority_bfr2 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*priority_bfr1 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*priority_cf_end = (localVal & ((uint32_t)0x00000008)) >>  3;
	*priority_ba = (localVal & ((uint32_t)0x00000004)) >>  2;
	*priority_ack = (localVal & ((uint32_t)0x00000002)) >>  1;
	*priority_cts = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_rx_he_su_er_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_rx_he_su_er_setf(uint8_t priorityrxhesuer)
{
	ASSERT_ERR((((uint32_t)priorityrxhesuer << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)priorityrxhesuer <<25));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_rx_he_tb_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_rx_he_tb_setf(uint8_t priorityrxhetb)
{
	ASSERT_ERR((((uint32_t)priorityrxhetb << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)priorityrxhetb <<24));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_rx_he_mu_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_rx_he_mu_setf(uint8_t priorityrxhemu)
{
	ASSERT_ERR((((uint32_t)priorityrxhemu << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)priorityrxhemu <<23));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_rx_he_su_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_rx_he_su_setf(uint8_t priorityrxhesu)
{
	ASSERT_ERR((((uint32_t)priorityrxhesu << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)priorityrxhesu <<22));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_rx_vht_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_rx_vht_setf(uint8_t priorityrxvht)
{
	ASSERT_ERR((((uint32_t)priorityrxvht << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)priorityrxvht <<21));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_rx_ht_ampdu_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_rx_ht_ampdu_setf(uint8_t priorityrxhtampdu)
{
	ASSERT_ERR((((uint32_t)priorityrxhtampdu << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)priorityrxhtampdu <<20));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_rx_ht_smpdu_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_rx_ht_smpdu_setf(uint8_t priorityrxhtsmpdu)
{
	ASSERT_ERR((((uint32_t)priorityrxhtsmpdu << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)priorityrxhtsmpdu <<19));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_rx_non_ht_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_rx_non_ht_setf(uint8_t priorityrxnonht)
{
	ASSERT_ERR((((uint32_t)priorityrxnonht << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)priorityrxnonht <<18));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_rx_11_b_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_rx_11_b_setf(uint8_t priorityrx11b)
{
	ASSERT_ERR((((uint32_t)priorityrx11b << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)priorityrx11b <<17));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_rx_default_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_rx_default_setf(uint8_t priorityrxdefault)
{
	ASSERT_ERR((((uint32_t)priorityrxdefault << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)priorityrxdefault <<16));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_htp_bfr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_htp_bfr_setf(uint8_t priorityhtpbfr)
{
	ASSERT_ERR((((uint32_t)priorityhtpbfr << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)priorityhtpbfr <<11));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_htp_bqr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_htp_bqr_setf(uint8_t priorityhtpbqr)
{
	ASSERT_ERR((((uint32_t)priorityhtpbqr << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)priorityhtpbqr <<10));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_htp_bsr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_htp_bsr_setf(uint8_t priorityhtpbsr)
{
	ASSERT_ERR((((uint32_t)priorityhtpbsr << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)priorityhtpbsr <<9));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_htp_ba_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_htp_ba_setf(uint8_t priorityhtpba)
{
	ASSERT_ERR((((uint32_t)priorityhtpba << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)priorityhtpba <<8));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_htp_data_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_htp_data_setf(uint8_t priorityhtpdata)
{
	ASSERT_ERR((((uint32_t)priorityhtpdata << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)priorityhtpdata <<7));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_mu_cts_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_mu_cts_setf(uint8_t prioritymucts)
{
	ASSERT_ERR((((uint32_t)prioritymucts << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)prioritymucts <<6));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_bfr_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_bfr_2_setf(uint8_t prioritybfr2)
{
	ASSERT_ERR((((uint32_t)prioritybfr2 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)prioritybfr2 <<5));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_bfr_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_bfr_1_setf(uint8_t prioritybfr1)
{
	ASSERT_ERR((((uint32_t)prioritybfr1 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)prioritybfr1 <<4));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_cf_end_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_cf_end_setf(uint8_t prioritycfend)
{
	ASSERT_ERR((((uint32_t)prioritycfend << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)prioritycfend <<3));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_ba_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_ba_setf(uint8_t priorityba)
{
	ASSERT_ERR((((uint32_t)priorityba << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)priorityba <<2));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_ack_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_ack_setf(uint8_t priorityack)
{
	ASSERT_ERR((((uint32_t)priorityack << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)priorityack <<1));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_2_priority_cts_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_pta_control_2_priority_cts_setf(uint8_t prioritycts)
{
	ASSERT_ERR((((uint32_t)prioritycts << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_2_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)prioritycts <<0));
}

/**
 * @brief PTA_CONTROL_3 register definition
 *  Contains PTA control fields register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    11    Ignore_pta_gnt_HTP_BFR    0              
 *    10    Ignore_pta_gnt_HTP_BQR    0              
 *    09    Ignore_pta_gnt_HTP_BSR    0              
 *    08    Ignore_pta_gnt_HTP_BA     0              
 *    07    Ignore_pta_gnt_HTP_DATA   0              
 *    06    Ignore_pta_gnt_MU_CTS     0              
 *    05    Ignore_pta_gnt_BFR2       0              
 *    04    Ignore_pta_gnt_BFR1       0              
 *    03    Ignore_pta_gnt_CF_END     0              
 *    02    Ignore_pta_gnt_BA         0              
 *    01    Ignore_pta_gnt_ACK        0              
 *    00    Ignore_pta_gnt_CTS        0              
 * </pre>
 */
#define MAC_HW0_MU0_PTA_CONTROL_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000358)
#define MAC_HW0_MU0_PTA_CONTROL_3_OFFSET      0x00000358
#define MAC_HW0_MU0_PTA_CONTROL_3_INDEX       0x000000D6
#define MAC_HW0_MU0_PTA_CONTROL_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_pta_control_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR);
}

__INLINE void mac_hw0_mu0_pta_control_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_HTP_BFR_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_HTP_BFR_POS    11
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_HTP_BQR_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_HTP_BQR_POS    10
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_HTP_BSR_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_HTP_BSR_POS    9
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_HTP_BA_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_HTP_BA_POS    8
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_HTP_DATA_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_HTP_DATA_POS    7
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_MU_CTS_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_MU_CTS_POS    6
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_BFR_2_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_BFR_2_POS    5
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_BFR_1_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_BFR_1_POS    4
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_CF_END_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_CF_END_POS    3
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_BA_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_BA_POS    2
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_ACK_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_ACK_POS    1
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_CTS_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_CTS_POS    0

#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_HTP_BFR_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_HTP_BQR_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_HTP_BSR_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_HTP_BA_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_HTP_DATA_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_MU_CTS_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_BFR_2_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_BFR_1_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_CF_END_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_BA_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_ACK_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_3_IGNORE_PTA_GNT_CTS_RST    0x0

__INLINE void mac_hw0_mu0_pta_control_3_pack(uint8_t ignore_pta_gnt_htp_bfr, uint8_t ignore_pta_gnt_htp_bqr, uint8_t ignore_pta_gnt_htp_bsr, uint8_t ignore_pta_gnt_htp_ba, uint8_t ignore_pta_gnt_htp_data, uint8_t ignore_pta_gnt_mu_cts, uint8_t ignore_pta_gnt_bfr2, uint8_t ignore_pta_gnt_bfr1, uint8_t ignore_pta_gnt_cf_end, uint8_t ignore_pta_gnt_ba, uint8_t ignore_pta_gnt_ack, uint8_t ignore_pta_gnt_cts)
{
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_htp_bfr << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_htp_bqr << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_htp_bsr << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_htp_ba << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_htp_data << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_mu_cts << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_bfr2 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_bfr1 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_cf_end << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_ba << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_ack << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)ignore_pta_gnt_cts << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_3_ADDR,  ((uint32_t)ignore_pta_gnt_htp_bfr << 11) |((uint32_t)ignore_pta_gnt_htp_bqr << 10) |((uint32_t)ignore_pta_gnt_htp_bsr << 9) |((uint32_t)ignore_pta_gnt_htp_ba << 8) |((uint32_t)ignore_pta_gnt_htp_data << 7) |((uint32_t)ignore_pta_gnt_mu_cts << 6) |((uint32_t)ignore_pta_gnt_bfr2 << 5) |((uint32_t)ignore_pta_gnt_bfr1 << 4) |((uint32_t)ignore_pta_gnt_cf_end << 3) |((uint32_t)ignore_pta_gnt_ba << 2) |((uint32_t)ignore_pta_gnt_ack << 1) |((uint32_t)ignore_pta_gnt_cts << 0));
}

__INLINE void mac_hw0_mu0_pta_control_3_unpack(uint8_t* ignore_pta_gnt_htp_bfr, uint8_t* ignore_pta_gnt_htp_bqr, uint8_t* ignore_pta_gnt_htp_bsr, uint8_t* ignore_pta_gnt_htp_ba, uint8_t* ignore_pta_gnt_htp_data, uint8_t* ignore_pta_gnt_mu_cts, uint8_t* ignore_pta_gnt_bfr2, uint8_t* ignore_pta_gnt_bfr1, uint8_t* ignore_pta_gnt_cf_end, uint8_t* ignore_pta_gnt_ba, uint8_t* ignore_pta_gnt_ack, uint8_t* ignore_pta_gnt_cts)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR);

	*ignore_pta_gnt_htp_bfr = (localVal & ((uint32_t)0x00000800)) >>  11;
	*ignore_pta_gnt_htp_bqr = (localVal & ((uint32_t)0x00000400)) >>  10;
	*ignore_pta_gnt_htp_bsr = (localVal & ((uint32_t)0x00000200)) >>  9;
	*ignore_pta_gnt_htp_ba = (localVal & ((uint32_t)0x00000100)) >>  8;
	*ignore_pta_gnt_htp_data = (localVal & ((uint32_t)0x00000080)) >>  7;
	*ignore_pta_gnt_mu_cts = (localVal & ((uint32_t)0x00000040)) >>  6;
	*ignore_pta_gnt_bfr2 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*ignore_pta_gnt_bfr1 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*ignore_pta_gnt_cf_end = (localVal & ((uint32_t)0x00000008)) >>  3;
	*ignore_pta_gnt_ba = (localVal & ((uint32_t)0x00000004)) >>  2;
	*ignore_pta_gnt_ack = (localVal & ((uint32_t)0x00000002)) >>  1;
	*ignore_pta_gnt_cts = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_pta_control_3_ignore_pta_gnt_htp_bfr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_pta_control_3_ignore_pta_gnt_htp_bfr_setf(uint8_t ignoreptagnthtpbfr)
{
	ASSERT_ERR((((uint32_t)ignoreptagnthtpbfr << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)ignoreptagnthtpbfr <<11));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_3_ignore_pta_gnt_htp_bqr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_pta_control_3_ignore_pta_gnt_htp_bqr_setf(uint8_t ignoreptagnthtpbqr)
{
	ASSERT_ERR((((uint32_t)ignoreptagnthtpbqr << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)ignoreptagnthtpbqr <<10));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_3_ignore_pta_gnt_htp_bsr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_pta_control_3_ignore_pta_gnt_htp_bsr_setf(uint8_t ignoreptagnthtpbsr)
{
	ASSERT_ERR((((uint32_t)ignoreptagnthtpbsr << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)ignoreptagnthtpbsr <<9));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_3_ignore_pta_gnt_htp_ba_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_pta_control_3_ignore_pta_gnt_htp_ba_setf(uint8_t ignoreptagnthtpba)
{
	ASSERT_ERR((((uint32_t)ignoreptagnthtpba << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)ignoreptagnthtpba <<8));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_3_ignore_pta_gnt_htp_data_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_pta_control_3_ignore_pta_gnt_htp_data_setf(uint8_t ignoreptagnthtpdata)
{
	ASSERT_ERR((((uint32_t)ignoreptagnthtpdata << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)ignoreptagnthtpdata <<7));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_3_ignore_pta_gnt_mu_cts_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_pta_control_3_ignore_pta_gnt_mu_cts_setf(uint8_t ignoreptagntmucts)
{
	ASSERT_ERR((((uint32_t)ignoreptagntmucts << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)ignoreptagntmucts <<6));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_3_ignore_pta_gnt_bfr_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_pta_control_3_ignore_pta_gnt_bfr_2_setf(uint8_t ignoreptagntbfr2)
{
	ASSERT_ERR((((uint32_t)ignoreptagntbfr2 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)ignoreptagntbfr2 <<5));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_3_ignore_pta_gnt_bfr_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_pta_control_3_ignore_pta_gnt_bfr_1_setf(uint8_t ignoreptagntbfr1)
{
	ASSERT_ERR((((uint32_t)ignoreptagntbfr1 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)ignoreptagntbfr1 <<4));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_3_ignore_pta_gnt_cf_end_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_pta_control_3_ignore_pta_gnt_cf_end_setf(uint8_t ignoreptagntcfend)
{
	ASSERT_ERR((((uint32_t)ignoreptagntcfend << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)ignoreptagntcfend <<3));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_3_ignore_pta_gnt_ba_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_pta_control_3_ignore_pta_gnt_ba_setf(uint8_t ignoreptagntba)
{
	ASSERT_ERR((((uint32_t)ignoreptagntba << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)ignoreptagntba <<2));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_3_ignore_pta_gnt_ack_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_pta_control_3_ignore_pta_gnt_ack_setf(uint8_t ignoreptagntack)
{
	ASSERT_ERR((((uint32_t)ignoreptagntack << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)ignoreptagntack <<1));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_3_ignore_pta_gnt_cts_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_pta_control_3_ignore_pta_gnt_cts_setf(uint8_t ignoreptagntcts)
{
	ASSERT_ERR((((uint32_t)ignoreptagntcts << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_3_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)ignoreptagntcts <<0));
}

/**
 * @brief PTA_CONTROL_4 register definition
 *  Contains PTA control fields register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 RX_REQ_FORCE_LOW_INTERVAL 0x1E
 *    23:16 RX_REQ_HOLD               0x20
 *    08    PTA_REQ_OVERLAP_AVOIDANCE 0              
 *    07:06 RX_seq_protection         0x1
 *    05:04 Sounding_seq_protection   0x0
 *    03:02 ndpa_protection           0x0
 *    01:00 Default_frame_BW          0x0
 * </pre>
 */
#define MAC_HW0_MU0_PTA_CONTROL_4_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000035C)
#define MAC_HW0_MU0_PTA_CONTROL_4_OFFSET      0x0000035C
#define MAC_HW0_MU0_PTA_CONTROL_4_INDEX       0x000000D7
#define MAC_HW0_MU0_PTA_CONTROL_4_RESET       0x1E200040

__INLINE uint32_t  mac_hw0_mu0_pta_control_4_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_4_ADDR);
}

__INLINE void mac_hw0_mu0_pta_control_4_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_4_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_PTA_CONTROL_4_RX_REQ_FORCE_LOW_INTERVAL_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_PTA_CONTROL_4_RX_REQ_FORCE_LOW_INTERVAL_LSB    24
#define MAC_HW0_MU0_PTA_CONTROL_4_RX_REQ_FORCE_LOW_INTERVAL_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_PTA_CONTROL_4_RX_REQ_HOLD_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_PTA_CONTROL_4_RX_REQ_HOLD_LSB    16
#define MAC_HW0_MU0_PTA_CONTROL_4_RX_REQ_HOLD_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_PTA_CONTROL_4_PTA_REQ_OVERLAP_AVOIDANCE_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_PTA_CONTROL_4_PTA_REQ_OVERLAP_AVOIDANCE_POS    8
#define MAC_HW0_MU0_PTA_CONTROL_4_RX_SEQ_PROTECTION_MASK    ((uint32_t)0x000000C0)
#define MAC_HW0_MU0_PTA_CONTROL_4_RX_SEQ_PROTECTION_LSB    6
#define MAC_HW0_MU0_PTA_CONTROL_4_RX_SEQ_PROTECTION_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_PTA_CONTROL_4_SOUNDING_SEQ_PROTECTION_MASK    ((uint32_t)0x00000030)
#define MAC_HW0_MU0_PTA_CONTROL_4_SOUNDING_SEQ_PROTECTION_LSB    4
#define MAC_HW0_MU0_PTA_CONTROL_4_SOUNDING_SEQ_PROTECTION_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_PTA_CONTROL_4_NDPA_PROTECTION_MASK    ((uint32_t)0x0000000C)
#define MAC_HW0_MU0_PTA_CONTROL_4_NDPA_PROTECTION_LSB    2
#define MAC_HW0_MU0_PTA_CONTROL_4_NDPA_PROTECTION_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_PTA_CONTROL_4_DEFAULT_FRAME_BW_MASK    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_PTA_CONTROL_4_DEFAULT_FRAME_BW_LSB    0
#define MAC_HW0_MU0_PTA_CONTROL_4_DEFAULT_FRAME_BW_WIDTH    ((uint32_t)0x00000002)

#define MAC_HW0_MU0_PTA_CONTROL_4_RX_REQ_FORCE_LOW_INTERVAL_RST    0x1E
#define MAC_HW0_MU0_PTA_CONTROL_4_RX_REQ_HOLD_RST    0x20
#define MAC_HW0_MU0_PTA_CONTROL_4_PTA_REQ_OVERLAP_AVOIDANCE_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_4_RX_SEQ_PROTECTION_RST    0x1
#define MAC_HW0_MU0_PTA_CONTROL_4_SOUNDING_SEQ_PROTECTION_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_4_NDPA_PROTECTION_RST    0x0
#define MAC_HW0_MU0_PTA_CONTROL_4_DEFAULT_FRAME_BW_RST    0x0

__INLINE void mac_hw0_mu0_pta_control_4_pack(uint8_t rx_req_force_low_interval, uint8_t rx_req_hold, uint8_t pta_req_overlap_avoidance, uint8_t rx_seq_protection, uint8_t sounding_seq_protection, uint8_t ndpa_protection, uint8_t default_frame_bw)
{
	ASSERT_ERR((((uint32_t)rx_req_force_low_interval << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_req_hold << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)pta_req_overlap_avoidance << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)rx_seq_protection << 6) & ~((uint32_t)0x000000C0)) == 0);
	ASSERT_ERR((((uint32_t)sounding_seq_protection << 4) & ~((uint32_t)0x00000030)) == 0);
	ASSERT_ERR((((uint32_t)ndpa_protection << 2) & ~((uint32_t)0x0000000C)) == 0);
	ASSERT_ERR((((uint32_t)default_frame_bw << 0) & ~((uint32_t)0x00000003)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_4_ADDR,  ((uint32_t)rx_req_force_low_interval << 24) |((uint32_t)rx_req_hold << 16) |((uint32_t)pta_req_overlap_avoidance << 8) |((uint32_t)rx_seq_protection << 6) |((uint32_t)sounding_seq_protection << 4) |((uint32_t)ndpa_protection << 2) |((uint32_t)default_frame_bw << 0));
}

__INLINE void mac_hw0_mu0_pta_control_4_unpack(uint8_t* rx_req_force_low_interval, uint8_t* rx_req_hold, uint8_t* pta_req_overlap_avoidance, uint8_t* rx_seq_protection, uint8_t* sounding_seq_protection, uint8_t* ndpa_protection, uint8_t* default_frame_bw)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_4_ADDR);

	*rx_req_force_low_interval = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*rx_req_hold = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*pta_req_overlap_avoidance = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_seq_protection = (localVal & ((uint32_t)0x000000C0)) >>  6;
	*sounding_seq_protection = (localVal & ((uint32_t)0x00000030)) >>  4;
	*ndpa_protection = (localVal & ((uint32_t)0x0000000C)) >>  2;
	*default_frame_bw = (localVal & ((uint32_t)0x00000003)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_pta_control_4_rx_req_force_low_interval_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_pta_control_4_rx_req_force_low_interval_setf(uint8_t rxreqforcelowinterval)
{
	ASSERT_ERR((((uint32_t)rxreqforcelowinterval << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_4_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)rxreqforcelowinterval <<24));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_4_rx_req_hold_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_pta_control_4_rx_req_hold_setf(uint8_t rxreqhold)
{
	ASSERT_ERR((((uint32_t)rxreqhold << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_4_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)rxreqhold <<16));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_4_pta_req_overlap_avoidance_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_pta_control_4_pta_req_overlap_avoidance_setf(uint8_t ptareqoverlapavoidance)
{
	ASSERT_ERR((((uint32_t)ptareqoverlapavoidance << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_4_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)ptareqoverlapavoidance <<8));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_4_rx_seq_protection_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000C0)) >> 6);
}
__INLINE void mac_hw0_mu0_pta_control_4_rx_seq_protection_setf(uint8_t rxseqprotection)
{
	ASSERT_ERR((((uint32_t)rxseqprotection << 6) & ~((uint32_t)0x000000C0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_4_ADDR) & ~((uint32_t)0x000000C0)) | ((uint32_t)rxseqprotection <<6));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_4_sounding_seq_protection_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000030)) >> 4);
}
__INLINE void mac_hw0_mu0_pta_control_4_sounding_seq_protection_setf(uint8_t soundingseqprotection)
{
	ASSERT_ERR((((uint32_t)soundingseqprotection << 4) & ~((uint32_t)0x00000030)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_4_ADDR) & ~((uint32_t)0x00000030)) | ((uint32_t)soundingseqprotection <<4));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_4_ndpa_protection_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000C)) >> 2);
}
__INLINE void mac_hw0_mu0_pta_control_4_ndpa_protection_setf(uint8_t ndpaprotection)
{
	ASSERT_ERR((((uint32_t)ndpaprotection << 2) & ~((uint32_t)0x0000000C)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_4_ADDR) & ~((uint32_t)0x0000000C)) | ((uint32_t)ndpaprotection <<2));
}
__INLINE uint8_t mac_hw0_mu0_pta_control_4_default_frame_bw_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000003)) >> 0);
}
__INLINE void mac_hw0_mu0_pta_control_4_default_frame_bw_setf(uint8_t defaultframebw)
{
	ASSERT_ERR((((uint32_t)defaultframebw << 0) & ~((uint32_t)0x00000003)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_PTA_CONTROL_4_ADDR) & ~((uint32_t)0x00000003)) | ((uint32_t)defaultframebw <<0));
}

/**
 * @brief TX_RESP_FAILED_PTA_COUNT register definition
 *  Contains TX_RESPONSE_FAILED_PTA counter register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TX_RESP_FAILED_PTA_COUNT  0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_RESP_FAILED_PTA_COUNT_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000360)
#define MAC_HW0_MU0_TX_RESP_FAILED_PTA_COUNT_OFFSET      0x00000360
#define MAC_HW0_MU0_TX_RESP_FAILED_PTA_COUNT_INDEX       0x000000D8
#define MAC_HW0_MU0_TX_RESP_FAILED_PTA_COUNT_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_resp_failed_pta_count_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_RESP_FAILED_PTA_COUNT_ADDR);
}

__INLINE void mac_hw0_mu0_tx_resp_failed_pta_count_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_RESP_FAILED_PTA_COUNT_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_RESP_FAILED_PTA_COUNT_TX_RESP_FAILED_PTA_COUNT_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TX_RESP_FAILED_PTA_COUNT_TX_RESP_FAILED_PTA_COUNT_LSB    0
#define MAC_HW0_MU0_TX_RESP_FAILED_PTA_COUNT_TX_RESP_FAILED_PTA_COUNT_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TX_RESP_FAILED_PTA_COUNT_TX_RESP_FAILED_PTA_COUNT_RST    0x0

__INLINE uint32_t mac_hw0_mu0_tx_resp_failed_pta_count_tx_resp_failed_pta_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_RESP_FAILED_PTA_COUNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_tx_resp_failed_pta_count_tx_resp_failed_pta_count_setf(uint32_t txrespfailedptacount)
{
	ASSERT_ERR((((uint32_t)txrespfailedptacount << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_RESP_FAILED_PTA_COUNT_ADDR, (uint32_t)txrespfailedptacount << 0);
}

/**
 * @brief PTA_CONTROL_5 register definition
 *  PTA control 5 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    00    set_tx_not_allowed        0              
 * </pre>
 */
#define MAC_HW0_MU0_PTA_CONTROL_5_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000364)
#define MAC_HW0_MU0_PTA_CONTROL_5_OFFSET      0x00000364
#define MAC_HW0_MU0_PTA_CONTROL_5_INDEX       0x000000D9
#define MAC_HW0_MU0_PTA_CONTROL_5_RESET       0x00000000

__INLINE void mac_hw0_mu0_pta_control_5_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_5_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_PTA_CONTROL_5_SET_TX_NOT_ALLOWED_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_PTA_CONTROL_5_SET_TX_NOT_ALLOWED_POS    0

#define MAC_HW0_MU0_PTA_CONTROL_5_SET_TX_NOT_ALLOWED_RST    0x0

__INLINE void mac_hw0_mu0_pta_control_5_set_tx_not_allowed_setf(uint8_t settxnotallowed)
{
	ASSERT_ERR((((uint32_t)settxnotallowed << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_PTA_CONTROL_5_ADDR, (uint32_t)settxnotallowed << 0);
}

/**
 * @brief SMA_HE_TB_VALID register definition
 *  Indicates the validity of the SMA pointers register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 SMA_VALID                 0x0
 * </pre>
 */
#define MAC_HW0_MU0_SMA_HE_TB_VALID_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000368)
#define MAC_HW0_MU0_SMA_HE_TB_VALID_OFFSET      0x00000368
#define MAC_HW0_MU0_SMA_HE_TB_VALID_INDEX       0x000000DA
#define MAC_HW0_MU0_SMA_HE_TB_VALID_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_sma_he_tb_valid_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_VALID_ADDR);
}

__INLINE void mac_hw0_mu0_sma_he_tb_valid_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_VALID_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SMA_HE_TB_VALID_SMA_VALID_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_SMA_HE_TB_VALID_SMA_VALID_LSB    0
#define MAC_HW0_MU0_SMA_HE_TB_VALID_SMA_VALID_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_SMA_HE_TB_VALID_SMA_VALID_RST    0x0

__INLINE uint16_t mac_hw0_mu0_sma_he_tb_valid_sma_valid_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_VALID_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_sma_he_tb_valid_sma_valid_setf(uint16_t smavalid)
{
	ASSERT_ERR((((uint32_t)smavalid << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_VALID_ADDR, (uint32_t)smavalid << 0);
}

/**
 * @brief SMA_HE_TB_1 register definition
 *  Contains the SMA pointers for 20MHz UL_CH register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 SMA_20_4                  0x0
 *    23:16 SMA_20_3                  0x0
 *    15:08 SMA_20_2                  0x0
 *    07:00 SMA_20_1                  0x0
 * </pre>
 */
#define MAC_HW0_MU0_SMA_HE_TB_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000036C)
#define MAC_HW0_MU0_SMA_HE_TB_1_OFFSET      0x0000036C
#define MAC_HW0_MU0_SMA_HE_TB_1_INDEX       0x000000DB
#define MAC_HW0_MU0_SMA_HE_TB_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_sma_he_tb_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_1_ADDR);
}

__INLINE void mac_hw0_mu0_sma_he_tb_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SMA_HE_TB_1_SMA_20_4_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_SMA_HE_TB_1_SMA_20_4_LSB    24
#define MAC_HW0_MU0_SMA_HE_TB_1_SMA_20_4_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_SMA_HE_TB_1_SMA_20_3_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_SMA_HE_TB_1_SMA_20_3_LSB    16
#define MAC_HW0_MU0_SMA_HE_TB_1_SMA_20_3_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_SMA_HE_TB_1_SMA_20_2_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_SMA_HE_TB_1_SMA_20_2_LSB    8
#define MAC_HW0_MU0_SMA_HE_TB_1_SMA_20_2_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_SMA_HE_TB_1_SMA_20_1_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_SMA_HE_TB_1_SMA_20_1_LSB    0
#define MAC_HW0_MU0_SMA_HE_TB_1_SMA_20_1_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_SMA_HE_TB_1_SMA_20_4_RST    0x0
#define MAC_HW0_MU0_SMA_HE_TB_1_SMA_20_3_RST    0x0
#define MAC_HW0_MU0_SMA_HE_TB_1_SMA_20_2_RST    0x0
#define MAC_HW0_MU0_SMA_HE_TB_1_SMA_20_1_RST    0x0

__INLINE void mac_hw0_mu0_sma_he_tb_1_pack(uint8_t sma_20_4, uint8_t sma_20_3, uint8_t sma_20_2, uint8_t sma_20_1)
{
	ASSERT_ERR((((uint32_t)sma_20_4 << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)sma_20_3 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)sma_20_2 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)sma_20_1 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_1_ADDR,  ((uint32_t)sma_20_4 << 24) |((uint32_t)sma_20_3 << 16) |((uint32_t)sma_20_2 << 8) |((uint32_t)sma_20_1 << 0));
}

__INLINE void mac_hw0_mu0_sma_he_tb_1_unpack(uint8_t* sma_20_4, uint8_t* sma_20_3, uint8_t* sma_20_2, uint8_t* sma_20_1)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_1_ADDR);

	*sma_20_4 = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*sma_20_3 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*sma_20_2 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*sma_20_1 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_sma_he_tb_1_sma_20_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_sma_he_tb_1_sma_20_4_setf(uint8_t sma204)
{
	ASSERT_ERR((((uint32_t)sma204 << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_1_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)sma204 <<24));
}
__INLINE uint8_t mac_hw0_mu0_sma_he_tb_1_sma_20_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_sma_he_tb_1_sma_20_3_setf(uint8_t sma203)
{
	ASSERT_ERR((((uint32_t)sma203 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_1_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)sma203 <<16));
}
__INLINE uint8_t mac_hw0_mu0_sma_he_tb_1_sma_20_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_sma_he_tb_1_sma_20_2_setf(uint8_t sma202)
{
	ASSERT_ERR((((uint32_t)sma202 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_1_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)sma202 <<8));
}
__INLINE uint8_t mac_hw0_mu0_sma_he_tb_1_sma_20_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_sma_he_tb_1_sma_20_1_setf(uint8_t sma201)
{
	ASSERT_ERR((((uint32_t)sma201 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_1_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)sma201 <<0));
}

/**
 * @brief SMA_HE_TB_2 register definition
 *  Contains the SMA pointers for 40MHz UL_CH register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 SMA_40_4                  0x0
 *    23:16 SMA_40_3                  0x0
 *    15:08 SMA_40_2                  0x0
 *    07:00 SMA_40_1                  0x0
 * </pre>
 */
#define MAC_HW0_MU0_SMA_HE_TB_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000370)
#define MAC_HW0_MU0_SMA_HE_TB_2_OFFSET      0x00000370
#define MAC_HW0_MU0_SMA_HE_TB_2_INDEX       0x000000DC
#define MAC_HW0_MU0_SMA_HE_TB_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_sma_he_tb_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_2_ADDR);
}

__INLINE void mac_hw0_mu0_sma_he_tb_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SMA_HE_TB_2_SMA_40_4_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_SMA_HE_TB_2_SMA_40_4_LSB    24
#define MAC_HW0_MU0_SMA_HE_TB_2_SMA_40_4_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_SMA_HE_TB_2_SMA_40_3_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_SMA_HE_TB_2_SMA_40_3_LSB    16
#define MAC_HW0_MU0_SMA_HE_TB_2_SMA_40_3_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_SMA_HE_TB_2_SMA_40_2_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_SMA_HE_TB_2_SMA_40_2_LSB    8
#define MAC_HW0_MU0_SMA_HE_TB_2_SMA_40_2_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_SMA_HE_TB_2_SMA_40_1_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_SMA_HE_TB_2_SMA_40_1_LSB    0
#define MAC_HW0_MU0_SMA_HE_TB_2_SMA_40_1_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_SMA_HE_TB_2_SMA_40_4_RST    0x0
#define MAC_HW0_MU0_SMA_HE_TB_2_SMA_40_3_RST    0x0
#define MAC_HW0_MU0_SMA_HE_TB_2_SMA_40_2_RST    0x0
#define MAC_HW0_MU0_SMA_HE_TB_2_SMA_40_1_RST    0x0

__INLINE void mac_hw0_mu0_sma_he_tb_2_pack(uint8_t sma_40_4, uint8_t sma_40_3, uint8_t sma_40_2, uint8_t sma_40_1)
{
	ASSERT_ERR((((uint32_t)sma_40_4 << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)sma_40_3 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)sma_40_2 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)sma_40_1 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_2_ADDR,  ((uint32_t)sma_40_4 << 24) |((uint32_t)sma_40_3 << 16) |((uint32_t)sma_40_2 << 8) |((uint32_t)sma_40_1 << 0));
}

__INLINE void mac_hw0_mu0_sma_he_tb_2_unpack(uint8_t* sma_40_4, uint8_t* sma_40_3, uint8_t* sma_40_2, uint8_t* sma_40_1)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_2_ADDR);

	*sma_40_4 = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*sma_40_3 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*sma_40_2 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*sma_40_1 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_sma_he_tb_2_sma_40_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_sma_he_tb_2_sma_40_4_setf(uint8_t sma404)
{
	ASSERT_ERR((((uint32_t)sma404 << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_2_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)sma404 <<24));
}
__INLINE uint8_t mac_hw0_mu0_sma_he_tb_2_sma_40_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_sma_he_tb_2_sma_40_3_setf(uint8_t sma403)
{
	ASSERT_ERR((((uint32_t)sma403 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_2_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)sma403 <<16));
}
__INLINE uint8_t mac_hw0_mu0_sma_he_tb_2_sma_40_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_sma_he_tb_2_sma_40_2_setf(uint8_t sma402)
{
	ASSERT_ERR((((uint32_t)sma402 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_2_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)sma402 <<8));
}
__INLINE uint8_t mac_hw0_mu0_sma_he_tb_2_sma_40_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_sma_he_tb_2_sma_40_1_setf(uint8_t sma401)
{
	ASSERT_ERR((((uint32_t)sma401 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_2_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)sma401 <<0));
}

/**
 * @brief SMA_HE_TB_3 register definition
 *  Contains the SMA pointers for 80MHz UL_CH register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 SMA_80_4                  0x0
 *    23:16 SMA_80_3                  0x0
 *    15:08 SMA_80_2                  0x0
 *    07:00 SMA_80_1                  0x0
 * </pre>
 */
#define MAC_HW0_MU0_SMA_HE_TB_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000374)
#define MAC_HW0_MU0_SMA_HE_TB_3_OFFSET      0x00000374
#define MAC_HW0_MU0_SMA_HE_TB_3_INDEX       0x000000DD
#define MAC_HW0_MU0_SMA_HE_TB_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_sma_he_tb_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_3_ADDR);
}

__INLINE void mac_hw0_mu0_sma_he_tb_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SMA_HE_TB_3_SMA_80_4_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_SMA_HE_TB_3_SMA_80_4_LSB    24
#define MAC_HW0_MU0_SMA_HE_TB_3_SMA_80_4_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_SMA_HE_TB_3_SMA_80_3_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_SMA_HE_TB_3_SMA_80_3_LSB    16
#define MAC_HW0_MU0_SMA_HE_TB_3_SMA_80_3_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_SMA_HE_TB_3_SMA_80_2_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_SMA_HE_TB_3_SMA_80_2_LSB    8
#define MAC_HW0_MU0_SMA_HE_TB_3_SMA_80_2_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_SMA_HE_TB_3_SMA_80_1_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_SMA_HE_TB_3_SMA_80_1_LSB    0
#define MAC_HW0_MU0_SMA_HE_TB_3_SMA_80_1_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_SMA_HE_TB_3_SMA_80_4_RST    0x0
#define MAC_HW0_MU0_SMA_HE_TB_3_SMA_80_3_RST    0x0
#define MAC_HW0_MU0_SMA_HE_TB_3_SMA_80_2_RST    0x0
#define MAC_HW0_MU0_SMA_HE_TB_3_SMA_80_1_RST    0x0

__INLINE void mac_hw0_mu0_sma_he_tb_3_pack(uint8_t sma_80_4, uint8_t sma_80_3, uint8_t sma_80_2, uint8_t sma_80_1)
{
	ASSERT_ERR((((uint32_t)sma_80_4 << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)sma_80_3 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)sma_80_2 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)sma_80_1 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_3_ADDR,  ((uint32_t)sma_80_4 << 24) |((uint32_t)sma_80_3 << 16) |((uint32_t)sma_80_2 << 8) |((uint32_t)sma_80_1 << 0));
}

__INLINE void mac_hw0_mu0_sma_he_tb_3_unpack(uint8_t* sma_80_4, uint8_t* sma_80_3, uint8_t* sma_80_2, uint8_t* sma_80_1)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_3_ADDR);

	*sma_80_4 = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*sma_80_3 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*sma_80_2 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*sma_80_1 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_sma_he_tb_3_sma_80_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_sma_he_tb_3_sma_80_4_setf(uint8_t sma804)
{
	ASSERT_ERR((((uint32_t)sma804 << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_3_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)sma804 <<24));
}
__INLINE uint8_t mac_hw0_mu0_sma_he_tb_3_sma_80_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_sma_he_tb_3_sma_80_3_setf(uint8_t sma803)
{
	ASSERT_ERR((((uint32_t)sma803 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_3_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)sma803 <<16));
}
__INLINE uint8_t mac_hw0_mu0_sma_he_tb_3_sma_80_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_sma_he_tb_3_sma_80_2_setf(uint8_t sma802)
{
	ASSERT_ERR((((uint32_t)sma802 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_3_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)sma802 <<8));
}
__INLINE uint8_t mac_hw0_mu0_sma_he_tb_3_sma_80_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_sma_he_tb_3_sma_80_1_setf(uint8_t sma801)
{
	ASSERT_ERR((((uint32_t)sma801 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_3_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)sma801 <<0));
}

/**
 * @brief SMA_HE_TB_4 register definition
 *  Contains the SMA pointers for 160MHz UL_CH register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 SMA_160_4                 0x0
 *    23:16 SMA_160_3                 0x0
 *    15:08 SMA_160_2                 0x0
 *    07:00 SMA_160_1                 0x0
 * </pre>
 */
#define MAC_HW0_MU0_SMA_HE_TB_4_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000378)
#define MAC_HW0_MU0_SMA_HE_TB_4_OFFSET      0x00000378
#define MAC_HW0_MU0_SMA_HE_TB_4_INDEX       0x000000DE
#define MAC_HW0_MU0_SMA_HE_TB_4_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_sma_he_tb_4_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_4_ADDR);
}

__INLINE void mac_hw0_mu0_sma_he_tb_4_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_4_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SMA_HE_TB_4_SMA_160_4_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_SMA_HE_TB_4_SMA_160_4_LSB    24
#define MAC_HW0_MU0_SMA_HE_TB_4_SMA_160_4_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_SMA_HE_TB_4_SMA_160_3_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_SMA_HE_TB_4_SMA_160_3_LSB    16
#define MAC_HW0_MU0_SMA_HE_TB_4_SMA_160_3_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_SMA_HE_TB_4_SMA_160_2_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_SMA_HE_TB_4_SMA_160_2_LSB    8
#define MAC_HW0_MU0_SMA_HE_TB_4_SMA_160_2_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_SMA_HE_TB_4_SMA_160_1_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_SMA_HE_TB_4_SMA_160_1_LSB    0
#define MAC_HW0_MU0_SMA_HE_TB_4_SMA_160_1_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_SMA_HE_TB_4_SMA_160_4_RST    0x0
#define MAC_HW0_MU0_SMA_HE_TB_4_SMA_160_3_RST    0x0
#define MAC_HW0_MU0_SMA_HE_TB_4_SMA_160_2_RST    0x0
#define MAC_HW0_MU0_SMA_HE_TB_4_SMA_160_1_RST    0x0

__INLINE void mac_hw0_mu0_sma_he_tb_4_pack(uint8_t sma_160_4, uint8_t sma_160_3, uint8_t sma_160_2, uint8_t sma_160_1)
{
	ASSERT_ERR((((uint32_t)sma_160_4 << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)sma_160_3 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)sma_160_2 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)sma_160_1 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_4_ADDR,  ((uint32_t)sma_160_4 << 24) |((uint32_t)sma_160_3 << 16) |((uint32_t)sma_160_2 << 8) |((uint32_t)sma_160_1 << 0));
}

__INLINE void mac_hw0_mu0_sma_he_tb_4_unpack(uint8_t* sma_160_4, uint8_t* sma_160_3, uint8_t* sma_160_2, uint8_t* sma_160_1)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_4_ADDR);

	*sma_160_4 = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*sma_160_3 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*sma_160_2 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*sma_160_1 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_sma_he_tb_4_sma_160_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_sma_he_tb_4_sma_160_4_setf(uint8_t sma1604)
{
	ASSERT_ERR((((uint32_t)sma1604 << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_4_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)sma1604 <<24));
}
__INLINE uint8_t mac_hw0_mu0_sma_he_tb_4_sma_160_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_sma_he_tb_4_sma_160_3_setf(uint8_t sma1603)
{
	ASSERT_ERR((((uint32_t)sma1603 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_4_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)sma1603 <<16));
}
__INLINE uint8_t mac_hw0_mu0_sma_he_tb_4_sma_160_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_sma_he_tb_4_sma_160_2_setf(uint8_t sma1602)
{
	ASSERT_ERR((((uint32_t)sma1602 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_4_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)sma1602 <<8));
}
__INLINE uint8_t mac_hw0_mu0_sma_he_tb_4_sma_160_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_sma_he_tb_4_sma_160_1_setf(uint8_t sma1601)
{
	ASSERT_ERR((((uint32_t)sma1601 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SMA_HE_TB_4_ADDR, (REG_PL_RD(MAC_HW0_MU0_SMA_HE_TB_4_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)sma1601 <<0));
}

/**
 * @brief TX_HALT_CTRL register definition
 *  Controls global halt after txop register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 GLOBAL_HALT_AFTER_TXOP    0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_HALT_CTRL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000037C)
#define MAC_HW0_MU0_TX_HALT_CTRL_OFFSET      0x0000037C
#define MAC_HW0_MU0_TX_HALT_CTRL_INDEX       0x000000DF
#define MAC_HW0_MU0_TX_HALT_CTRL_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_halt_ctrl_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_HALT_CTRL_ADDR);
}

__INLINE void mac_hw0_mu0_tx_halt_ctrl_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_HALT_CTRL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_HALT_CTRL_GLOBAL_HALT_AFTER_TXOP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TX_HALT_CTRL_GLOBAL_HALT_AFTER_TXOP_LSB    0
#define MAC_HW0_MU0_TX_HALT_CTRL_GLOBAL_HALT_AFTER_TXOP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TX_HALT_CTRL_GLOBAL_HALT_AFTER_TXOP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_tx_halt_ctrl_global_halt_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_HALT_CTRL_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_tx_halt_ctrl_global_halt_after_txop_setf(uint32_t globalhaltaftertxop)
{
	ASSERT_ERR((((uint32_t)globalhaltaftertxop << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_HALT_CTRL_ADDR, (uint32_t)globalhaltaftertxop << 0);
}

/**
 * @brief TX_CTRL register definition
 *  Tx Controls currently includes Chicken bits register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    19:08 CODEWORD_SIZE             0xFA
 *    07    BLOCK_RX_DISABLE          0              
 *    06    BW_DECISION_CB            1              
 *    05    PREVENT_BAR_THD_STAT_EN   1              
 *    04    ORIGINAL_RESP_TO_EN       0              
 *    03    FORCE_STRT_DLY_PT_EN      0              
 *    02    STOP_RX_RESP_TO           0              
 *    01    INTERNAL_COLLISION_MODE   0              
 *    00    BAR_SKIP_MODE             0              
 * </pre>
 */
#define MAC_HW0_MU0_TX_CTRL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000380)
#define MAC_HW0_MU0_TX_CTRL_OFFSET      0x00000380
#define MAC_HW0_MU0_TX_CTRL_INDEX       0x000000E0
#define MAC_HW0_MU0_TX_CTRL_RESET       0x0000FA60

__INLINE uint32_t  mac_hw0_mu0_tx_ctrl_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR);
}

__INLINE void mac_hw0_mu0_tx_ctrl_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_CTRL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_CTRL_CODEWORD_SIZE_MASK    ((uint32_t)0x000FFF00)
#define MAC_HW0_MU0_TX_CTRL_CODEWORD_SIZE_LSB    8
#define MAC_HW0_MU0_TX_CTRL_CODEWORD_SIZE_WIDTH    ((uint32_t)0x0000000C)
#define MAC_HW0_MU0_TX_CTRL_BLOCK_RX_DISABLE_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_TX_CTRL_BLOCK_RX_DISABLE_POS    7
#define MAC_HW0_MU0_TX_CTRL_BW_DECISION_CB_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_TX_CTRL_BW_DECISION_CB_POS    6
#define MAC_HW0_MU0_TX_CTRL_PREVENT_BAR_THD_STAT_EN_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_TX_CTRL_PREVENT_BAR_THD_STAT_EN_POS    5
#define MAC_HW0_MU0_TX_CTRL_ORIGINAL_RESP_TO_EN_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_TX_CTRL_ORIGINAL_RESP_TO_EN_POS    4
#define MAC_HW0_MU0_TX_CTRL_FORCE_STRT_DLY_PT_EN_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_CTRL_FORCE_STRT_DLY_PT_EN_POS    3
#define MAC_HW0_MU0_TX_CTRL_STOP_RX_RESP_TO_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_TX_CTRL_STOP_RX_RESP_TO_POS    2
#define MAC_HW0_MU0_TX_CTRL_INTERNAL_COLLISION_MODE_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_TX_CTRL_INTERNAL_COLLISION_MODE_POS    1
#define MAC_HW0_MU0_TX_CTRL_BAR_SKIP_MODE_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_TX_CTRL_BAR_SKIP_MODE_POS    0

#define MAC_HW0_MU0_TX_CTRL_CODEWORD_SIZE_RST    0xFA
#define MAC_HW0_MU0_TX_CTRL_BLOCK_RX_DISABLE_RST    0x0
#define MAC_HW0_MU0_TX_CTRL_BW_DECISION_CB_RST    0x1
#define MAC_HW0_MU0_TX_CTRL_PREVENT_BAR_THD_STAT_EN_RST    0x1
#define MAC_HW0_MU0_TX_CTRL_ORIGINAL_RESP_TO_EN_RST    0x0
#define MAC_HW0_MU0_TX_CTRL_FORCE_STRT_DLY_PT_EN_RST    0x0
#define MAC_HW0_MU0_TX_CTRL_STOP_RX_RESP_TO_RST    0x0
#define MAC_HW0_MU0_TX_CTRL_INTERNAL_COLLISION_MODE_RST    0x0
#define MAC_HW0_MU0_TX_CTRL_BAR_SKIP_MODE_RST    0x0

__INLINE void mac_hw0_mu0_tx_ctrl_pack(uint16_t codeword_size, uint8_t block_rx_disable, uint8_t bw_decision_cb, uint8_t prevent_bar_thd_stat_en, uint8_t original_resp_to_en, uint8_t force_strt_dly_pt_en, uint8_t stop_rx_resp_to, uint8_t internal_collision_mode, uint8_t bar_skip_mode)
{
	ASSERT_ERR((((uint32_t)codeword_size << 8) & ~((uint32_t)0x000FFF00)) == 0);
	ASSERT_ERR((((uint32_t)block_rx_disable << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)bw_decision_cb << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)prevent_bar_thd_stat_en << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)original_resp_to_en << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)force_strt_dly_pt_en << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)stop_rx_resp_to << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)internal_collision_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)bar_skip_mode << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CTRL_ADDR,  ((uint32_t)codeword_size << 8) |((uint32_t)block_rx_disable << 7) |((uint32_t)bw_decision_cb << 6) |((uint32_t)prevent_bar_thd_stat_en << 5) |((uint32_t)original_resp_to_en << 4) |((uint32_t)force_strt_dly_pt_en << 3) |((uint32_t)stop_rx_resp_to << 2) |((uint32_t)internal_collision_mode << 1) |((uint32_t)bar_skip_mode << 0));
}

__INLINE void mac_hw0_mu0_tx_ctrl_unpack(uint16_t* codeword_size, uint8_t* block_rx_disable, uint8_t* bw_decision_cb, uint8_t* prevent_bar_thd_stat_en, uint8_t* original_resp_to_en, uint8_t* force_strt_dly_pt_en, uint8_t* stop_rx_resp_to, uint8_t* internal_collision_mode, uint8_t* bar_skip_mode)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR);

	*codeword_size = (localVal & ((uint32_t)0x000FFF00)) >>  8;
	*block_rx_disable = (localVal & ((uint32_t)0x00000080)) >>  7;
	*bw_decision_cb = (localVal & ((uint32_t)0x00000040)) >>  6;
	*prevent_bar_thd_stat_en = (localVal & ((uint32_t)0x00000020)) >>  5;
	*original_resp_to_en = (localVal & ((uint32_t)0x00000010)) >>  4;
	*force_strt_dly_pt_en = (localVal & ((uint32_t)0x00000008)) >>  3;
	*stop_rx_resp_to = (localVal & ((uint32_t)0x00000004)) >>  2;
	*internal_collision_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*bar_skip_mode = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_tx_ctrl_codeword_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000FFF00)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_ctrl_codeword_size_setf(uint16_t codewordsize)
{
	ASSERT_ERR((((uint32_t)codewordsize << 8) & ~((uint32_t)0x000FFF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR) & ~((uint32_t)0x000FFF00)) | ((uint32_t)codewordsize <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_ctrl_block_rx_disable_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_tx_ctrl_block_rx_disable_setf(uint8_t blockrxdisable)
{
	ASSERT_ERR((((uint32_t)blockrxdisable << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)blockrxdisable <<7));
}
__INLINE uint8_t mac_hw0_mu0_tx_ctrl_bw_decision_cb_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_tx_ctrl_bw_decision_cb_setf(uint8_t bwdecisioncb)
{
	ASSERT_ERR((((uint32_t)bwdecisioncb << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)bwdecisioncb <<6));
}
__INLINE uint8_t mac_hw0_mu0_tx_ctrl_prevent_bar_thd_stat_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_tx_ctrl_prevent_bar_thd_stat_en_setf(uint8_t preventbarthdstaten)
{
	ASSERT_ERR((((uint32_t)preventbarthdstaten << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)preventbarthdstaten <<5));
}
__INLINE uint8_t mac_hw0_mu0_tx_ctrl_original_resp_to_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_tx_ctrl_original_resp_to_en_setf(uint8_t originalresptoen)
{
	ASSERT_ERR((((uint32_t)originalresptoen << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)originalresptoen <<4));
}
__INLINE uint8_t mac_hw0_mu0_tx_ctrl_force_strt_dly_pt_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_tx_ctrl_force_strt_dly_pt_en_setf(uint8_t forcestrtdlypten)
{
	ASSERT_ERR((((uint32_t)forcestrtdlypten << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)forcestrtdlypten <<3));
}
__INLINE uint8_t mac_hw0_mu0_tx_ctrl_stop_rx_resp_to_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_tx_ctrl_stop_rx_resp_to_setf(uint8_t stoprxrespto)
{
	ASSERT_ERR((((uint32_t)stoprxrespto << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)stoprxrespto <<2));
}
__INLINE uint8_t mac_hw0_mu0_tx_ctrl_internal_collision_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_tx_ctrl_internal_collision_mode_setf(uint8_t internalcollisionmode)
{
	ASSERT_ERR((((uint32_t)internalcollisionmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)internalcollisionmode <<1));
}
__INLINE uint8_t mac_hw0_mu0_tx_ctrl_bar_skip_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_tx_ctrl_bar_skip_mode_setf(uint8_t barskipmode)
{
	ASSERT_ERR((((uint32_t)barskipmode << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_CTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_CTRL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)barskipmode <<0));
}

/**
 * @brief REPEATER_CONF register definition
 *  Repeater configurations register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    02    UPDATE_TSF_AS_REPEATER_ENABLE 1              
 *    01    REPEATER_MODE             0              
 *    00    REPEATER_MODE_KSR         0              
 * </pre>
 */
#define MAC_HW0_MU0_REPEATER_CONF_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000384)
#define MAC_HW0_MU0_REPEATER_CONF_OFFSET      0x00000384
#define MAC_HW0_MU0_REPEATER_CONF_INDEX       0x000000E1
#define MAC_HW0_MU0_REPEATER_CONF_RESET       0x00000004

__INLINE uint32_t  mac_hw0_mu0_repeater_conf_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_REPEATER_CONF_ADDR);
}

__INLINE void mac_hw0_mu0_repeater_conf_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_REPEATER_CONF_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_REPEATER_CONF_UPDATE_TSF_AS_REPEATER_ENABLE_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_REPEATER_CONF_UPDATE_TSF_AS_REPEATER_ENABLE_POS    2
#define MAC_HW0_MU0_REPEATER_CONF_REPEATER_MODE_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_REPEATER_CONF_REPEATER_MODE_POS    1
#define MAC_HW0_MU0_REPEATER_CONF_REPEATER_MODE_KSR_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_REPEATER_CONF_REPEATER_MODE_KSR_POS    0

#define MAC_HW0_MU0_REPEATER_CONF_UPDATE_TSF_AS_REPEATER_ENABLE_RST    0x1
#define MAC_HW0_MU0_REPEATER_CONF_REPEATER_MODE_RST    0x0
#define MAC_HW0_MU0_REPEATER_CONF_REPEATER_MODE_KSR_RST    0x0

__INLINE void mac_hw0_mu0_repeater_conf_pack(uint8_t update_tsf_as_repeater_enable, uint8_t repeater_mode, uint8_t repeater_mode_ksr)
{
	ASSERT_ERR((((uint32_t)update_tsf_as_repeater_enable << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)repeater_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)repeater_mode_ksr << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_REPEATER_CONF_ADDR,  ((uint32_t)update_tsf_as_repeater_enable << 2) |((uint32_t)repeater_mode << 1) |((uint32_t)repeater_mode_ksr << 0));
}

__INLINE void mac_hw0_mu0_repeater_conf_unpack(uint8_t* update_tsf_as_repeater_enable, uint8_t* repeater_mode, uint8_t* repeater_mode_ksr)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_REPEATER_CONF_ADDR);

	*update_tsf_as_repeater_enable = (localVal & ((uint32_t)0x00000004)) >>  2;
	*repeater_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*repeater_mode_ksr = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_repeater_conf_update_tsf_as_repeater_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_REPEATER_CONF_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_repeater_conf_update_tsf_as_repeater_enable_setf(uint8_t updatetsfasrepeaterenable)
{
	ASSERT_ERR((((uint32_t)updatetsfasrepeaterenable << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_REPEATER_CONF_ADDR, (REG_PL_RD(MAC_HW0_MU0_REPEATER_CONF_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)updatetsfasrepeaterenable <<2));
}
__INLINE uint8_t mac_hw0_mu0_repeater_conf_repeater_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_REPEATER_CONF_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_repeater_conf_repeater_mode_setf(uint8_t repeatermode)
{
	ASSERT_ERR((((uint32_t)repeatermode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_REPEATER_CONF_ADDR, (REG_PL_RD(MAC_HW0_MU0_REPEATER_CONF_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)repeatermode <<1));
}
__INLINE uint8_t mac_hw0_mu0_repeater_conf_repeater_mode_ksr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_REPEATER_CONF_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_repeater_conf_repeater_mode_ksr_setf(uint8_t repeatermodeksr)
{
	ASSERT_ERR((((uint32_t)repeatermodeksr << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_REPEATER_CONF_ADDR, (REG_PL_RD(MAC_HW0_MU0_REPEATER_CONF_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)repeatermodeksr <<0));
}

/**
 * @brief DEF_START_PTR register definition
 *  Default start pointer address register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x60000000
 * </pre>
 */
#define MAC_HW0_MU0_DEF_START_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000388)
#define MAC_HW0_MU0_DEF_START_PTR_OFFSET      0x00000388
#define MAC_HW0_MU0_DEF_START_PTR_INDEX       0x000000E2
#define MAC_HW0_MU0_DEF_START_PTR_RESET       0x60000000

__INLINE uint32_t  mac_hw0_mu0_def_start_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEF_START_PTR_ADDR);
}

__INLINE void mac_hw0_mu0_def_start_ptr_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DEF_START_PTR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DEF_START_PTR_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEF_START_PTR_PTR_LSB    0
#define MAC_HW0_MU0_DEF_START_PTR_PTR_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEF_START_PTR_PTR_RST    0x60000000

__INLINE uint32_t mac_hw0_mu0_def_start_ptr_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEF_START_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_def_start_ptr_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEF_START_PTR_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief RX_CLASS_RULE_A register definition
 *  Includes Rx class rules 0 and 1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 RX_CLASS_RULE_1           0x0
 *    15:00 RX_CLASS_RULE_0           0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_CLASS_RULE_A_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000003C0)
#define MAC_HW0_MU0_RX_CLASS_RULE_A_OFFSET      0x000003C0
#define MAC_HW0_MU0_RX_CLASS_RULE_A_INDEX       0x000000F0
#define MAC_HW0_MU0_RX_CLASS_RULE_A_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_class_rule_a_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_A_ADDR);
}

__INLINE void mac_hw0_mu0_rx_class_rule_a_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_CLASS_RULE_A_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_CLASS_RULE_A_RX_CLASS_RULE_1_MASK    ((uint32_t)0xFFFF0000)
#define MAC_HW0_MU0_RX_CLASS_RULE_A_RX_CLASS_RULE_1_LSB    16
#define MAC_HW0_MU0_RX_CLASS_RULE_A_RX_CLASS_RULE_1_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_CLASS_RULE_A_RX_CLASS_RULE_0_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_RX_CLASS_RULE_A_RX_CLASS_RULE_0_LSB    0
#define MAC_HW0_MU0_RX_CLASS_RULE_A_RX_CLASS_RULE_0_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_RX_CLASS_RULE_A_RX_CLASS_RULE_1_RST    0x0
#define MAC_HW0_MU0_RX_CLASS_RULE_A_RX_CLASS_RULE_0_RST    0x0

__INLINE void mac_hw0_mu0_rx_class_rule_a_pack(uint16_t rx_class_rule_1, uint16_t rx_class_rule_0)
{
	ASSERT_ERR((((uint32_t)rx_class_rule_1 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule_0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CLASS_RULE_A_ADDR,  ((uint32_t)rx_class_rule_1 << 16) |((uint32_t)rx_class_rule_0 << 0));
}

__INLINE void mac_hw0_mu0_rx_class_rule_a_unpack(uint16_t* rx_class_rule_1, uint16_t* rx_class_rule_0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_A_ADDR);

	*rx_class_rule_1 = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*rx_class_rule_0 = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_rx_class_rule_a_rx_class_rule_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_A_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_class_rule_a_rx_class_rule_1_setf(uint16_t rxclassrule1)
{
	ASSERT_ERR((((uint32_t)rxclassrule1 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CLASS_RULE_A_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_A_ADDR) & ~((uint32_t)0xFFFF0000)) | ((uint32_t)rxclassrule1 <<16));
}
__INLINE uint16_t mac_hw0_mu0_rx_class_rule_a_rx_class_rule_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_A_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_class_rule_a_rx_class_rule_0_setf(uint16_t rxclassrule0)
{
	ASSERT_ERR((((uint32_t)rxclassrule0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CLASS_RULE_A_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_A_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)rxclassrule0 <<0));
}

/**
 * @brief RX_CLASS_RULE_B register definition
 *  Includes Rx class rules 2 and 3 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 RX_CLASS_RULE_3           0x0
 *    15:00 RX_CLASS_RULE_2           0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_CLASS_RULE_B_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000003C4)
#define MAC_HW0_MU0_RX_CLASS_RULE_B_OFFSET      0x000003C4
#define MAC_HW0_MU0_RX_CLASS_RULE_B_INDEX       0x000000F1
#define MAC_HW0_MU0_RX_CLASS_RULE_B_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_class_rule_b_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_B_ADDR);
}

__INLINE void mac_hw0_mu0_rx_class_rule_b_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_CLASS_RULE_B_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_CLASS_RULE_B_RX_CLASS_RULE_3_MASK    ((uint32_t)0xFFFF0000)
#define MAC_HW0_MU0_RX_CLASS_RULE_B_RX_CLASS_RULE_3_LSB    16
#define MAC_HW0_MU0_RX_CLASS_RULE_B_RX_CLASS_RULE_3_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_CLASS_RULE_B_RX_CLASS_RULE_2_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_RX_CLASS_RULE_B_RX_CLASS_RULE_2_LSB    0
#define MAC_HW0_MU0_RX_CLASS_RULE_B_RX_CLASS_RULE_2_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_RX_CLASS_RULE_B_RX_CLASS_RULE_3_RST    0x0
#define MAC_HW0_MU0_RX_CLASS_RULE_B_RX_CLASS_RULE_2_RST    0x0

__INLINE void mac_hw0_mu0_rx_class_rule_b_pack(uint16_t rx_class_rule_3, uint16_t rx_class_rule_2)
{
	ASSERT_ERR((((uint32_t)rx_class_rule_3 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule_2 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CLASS_RULE_B_ADDR,  ((uint32_t)rx_class_rule_3 << 16) |((uint32_t)rx_class_rule_2 << 0));
}

__INLINE void mac_hw0_mu0_rx_class_rule_b_unpack(uint16_t* rx_class_rule_3, uint16_t* rx_class_rule_2)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_B_ADDR);

	*rx_class_rule_3 = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*rx_class_rule_2 = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_rx_class_rule_b_rx_class_rule_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_B_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_class_rule_b_rx_class_rule_3_setf(uint16_t rxclassrule3)
{
	ASSERT_ERR((((uint32_t)rxclassrule3 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CLASS_RULE_B_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_B_ADDR) & ~((uint32_t)0xFFFF0000)) | ((uint32_t)rxclassrule3 <<16));
}
__INLINE uint16_t mac_hw0_mu0_rx_class_rule_b_rx_class_rule_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_B_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_class_rule_b_rx_class_rule_2_setf(uint16_t rxclassrule2)
{
	ASSERT_ERR((((uint32_t)rxclassrule2 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CLASS_RULE_B_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_B_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)rxclassrule2 <<0));
}

/**
 * @brief RX_CLASS_RULE_C register definition
 *  Includes Rx class rules 4 and 5 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 RX_CLASS_RULE_5           0x0
 *    15:00 RX_CLASS_RULE_4           0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_CLASS_RULE_C_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000003C8)
#define MAC_HW0_MU0_RX_CLASS_RULE_C_OFFSET      0x000003C8
#define MAC_HW0_MU0_RX_CLASS_RULE_C_INDEX       0x000000F2
#define MAC_HW0_MU0_RX_CLASS_RULE_C_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_class_rule_c_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_C_ADDR);
}

__INLINE void mac_hw0_mu0_rx_class_rule_c_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_CLASS_RULE_C_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_CLASS_RULE_C_RX_CLASS_RULE_5_MASK    ((uint32_t)0xFFFF0000)
#define MAC_HW0_MU0_RX_CLASS_RULE_C_RX_CLASS_RULE_5_LSB    16
#define MAC_HW0_MU0_RX_CLASS_RULE_C_RX_CLASS_RULE_5_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_CLASS_RULE_C_RX_CLASS_RULE_4_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_RX_CLASS_RULE_C_RX_CLASS_RULE_4_LSB    0
#define MAC_HW0_MU0_RX_CLASS_RULE_C_RX_CLASS_RULE_4_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_RX_CLASS_RULE_C_RX_CLASS_RULE_5_RST    0x0
#define MAC_HW0_MU0_RX_CLASS_RULE_C_RX_CLASS_RULE_4_RST    0x0

__INLINE void mac_hw0_mu0_rx_class_rule_c_pack(uint16_t rx_class_rule_5, uint16_t rx_class_rule_4)
{
	ASSERT_ERR((((uint32_t)rx_class_rule_5 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule_4 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CLASS_RULE_C_ADDR,  ((uint32_t)rx_class_rule_5 << 16) |((uint32_t)rx_class_rule_4 << 0));
}

__INLINE void mac_hw0_mu0_rx_class_rule_c_unpack(uint16_t* rx_class_rule_5, uint16_t* rx_class_rule_4)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_C_ADDR);

	*rx_class_rule_5 = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*rx_class_rule_4 = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_rx_class_rule_c_rx_class_rule_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_C_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_class_rule_c_rx_class_rule_5_setf(uint16_t rxclassrule5)
{
	ASSERT_ERR((((uint32_t)rxclassrule5 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CLASS_RULE_C_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_C_ADDR) & ~((uint32_t)0xFFFF0000)) | ((uint32_t)rxclassrule5 <<16));
}
__INLINE uint16_t mac_hw0_mu0_rx_class_rule_c_rx_class_rule_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_C_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_class_rule_c_rx_class_rule_4_setf(uint16_t rxclassrule4)
{
	ASSERT_ERR((((uint32_t)rxclassrule4 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_CLASS_RULE_C_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_CLASS_RULE_C_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)rxclassrule4 <<0));
}

/**
 * @brief RX_VECTOR_2_SET_0_LOW register definition
 *  Rx Vecrtor2 register set 0 lower part register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RXVEC2_L                  0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_LOW_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000003D0)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_LOW_OFFSET      0x000003D0
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_LOW_INDEX       0x000000F4
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_LOW_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_vector_2_set_0_low_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_0_LOW_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_LOW_RXVEC_2_L_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_LOW_RXVEC_2_L_LSB    0
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_LOW_RXVEC_2_L_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_LOW_RXVEC_2_L_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_vector_2_set_0_low_rxvec_2_l_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_0_LOW_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_VECTOR_2_SET_0_HIGH register definition
 *  Rx Vecrtor2 register set 0 higher part register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 RHD_INDEX                 0x0
 *    27:00 RXVEC2_H                  0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_HIGH_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000003D4)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_HIGH_OFFSET      0x000003D4
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_HIGH_INDEX       0x000000F5
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_HIGH_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_vector_2_set_0_high_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_0_HIGH_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_HIGH_RHD_INDEX_MASK    ((uint32_t)0xF0000000)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_HIGH_RHD_INDEX_LSB    28
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_HIGH_RHD_INDEX_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_HIGH_RXVEC_2_H_MASK    ((uint32_t)0x0FFFFFFF)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_HIGH_RXVEC_2_H_LSB    0
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_HIGH_RXVEC_2_H_WIDTH    ((uint32_t)0x0000001C)

#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_HIGH_RHD_INDEX_RST    0x0
#define MAC_HW0_MU0_RX_VECTOR_2_SET_0_HIGH_RXVEC_2_H_RST    0x0

__INLINE void mac_hw0_mu0_rx_vector_2_set_0_high_unpack(uint8_t* rhd_index, uint32_t* rxvec2_h)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_0_HIGH_ADDR);

	*rhd_index = (localVal & ((uint32_t)0xF0000000)) >>  28;
	*rxvec2_h = (localVal & ((uint32_t)0x0FFFFFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_vector_2_set_0_high_rhd_index_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_0_HIGH_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xF0000000)) >> 28);
}
__INLINE uint32_t mac_hw0_mu0_rx_vector_2_set_0_high_rxvec_2_h_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_0_HIGH_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0x0FFFFFFF)) >> 0);
}

/**
 * @brief RX_VECTOR_2_SET_1_LOW register definition
 *  Rx Vecrtor2 register set 1 lower part register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RXVEC2_L                  0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_LOW_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000003D8)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_LOW_OFFSET      0x000003D8
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_LOW_INDEX       0x000000F6
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_LOW_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_vector_2_set_1_low_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_1_LOW_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_LOW_RXVEC_2_L_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_LOW_RXVEC_2_L_LSB    0
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_LOW_RXVEC_2_L_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_LOW_RXVEC_2_L_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_vector_2_set_1_low_rxvec_2_l_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_1_LOW_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_VECTOR_2_SET_1_HIGH register definition
 *  Rx Vecrtor2 register set 1 higher part register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 RHD_INDEX                 0x0
 *    27:00 RXVEC2_H                  0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_HIGH_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000003DC)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_HIGH_OFFSET      0x000003DC
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_HIGH_INDEX       0x000000F7
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_HIGH_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_vector_2_set_1_high_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_1_HIGH_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_HIGH_RHD_INDEX_MASK    ((uint32_t)0xF0000000)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_HIGH_RHD_INDEX_LSB    28
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_HIGH_RHD_INDEX_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_HIGH_RXVEC_2_H_MASK    ((uint32_t)0x0FFFFFFF)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_HIGH_RXVEC_2_H_LSB    0
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_HIGH_RXVEC_2_H_WIDTH    ((uint32_t)0x0000001C)

#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_HIGH_RHD_INDEX_RST    0x0
#define MAC_HW0_MU0_RX_VECTOR_2_SET_1_HIGH_RXVEC_2_H_RST    0x0

__INLINE void mac_hw0_mu0_rx_vector_2_set_1_high_unpack(uint8_t* rhd_index, uint32_t* rxvec2_h)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_1_HIGH_ADDR);

	*rhd_index = (localVal & ((uint32_t)0xF0000000)) >>  28;
	*rxvec2_h = (localVal & ((uint32_t)0x0FFFFFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_vector_2_set_1_high_rhd_index_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_1_HIGH_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xF0000000)) >> 28);
}
__INLINE uint32_t mac_hw0_mu0_rx_vector_2_set_1_high_rxvec_2_h_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_1_HIGH_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0x0FFFFFFF)) >> 0);
}

/**
 * @brief RX_VECTOR_2_SET_2_LOW register definition
 *  Rx Vecrtor2 register set 2 lower part register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RXVEC2_L                  0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_LOW_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000003E0)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_LOW_OFFSET      0x000003E0
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_LOW_INDEX       0x000000F8
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_LOW_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_vector_2_set_2_low_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_2_LOW_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_LOW_RXVEC_2_L_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_LOW_RXVEC_2_L_LSB    0
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_LOW_RXVEC_2_L_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_LOW_RXVEC_2_L_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_vector_2_set_2_low_rxvec_2_l_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_2_LOW_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_VECTOR_2_SET_2_HIGH register definition
 *  Rx Vecrtor2 register set 2 higher part register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 RHD_INDEX                 0x0
 *    27:00 RXVEC2_H                  0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_HIGH_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000003E4)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_HIGH_OFFSET      0x000003E4
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_HIGH_INDEX       0x000000F9
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_HIGH_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_vector_2_set_2_high_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_2_HIGH_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_HIGH_RHD_INDEX_MASK    ((uint32_t)0xF0000000)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_HIGH_RHD_INDEX_LSB    28
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_HIGH_RHD_INDEX_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_HIGH_RXVEC_2_H_MASK    ((uint32_t)0x0FFFFFFF)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_HIGH_RXVEC_2_H_LSB    0
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_HIGH_RXVEC_2_H_WIDTH    ((uint32_t)0x0000001C)

#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_HIGH_RHD_INDEX_RST    0x0
#define MAC_HW0_MU0_RX_VECTOR_2_SET_2_HIGH_RXVEC_2_H_RST    0x0

__INLINE void mac_hw0_mu0_rx_vector_2_set_2_high_unpack(uint8_t* rhd_index, uint32_t* rxvec2_h)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_2_HIGH_ADDR);

	*rhd_index = (localVal & ((uint32_t)0xF0000000)) >>  28;
	*rxvec2_h = (localVal & ((uint32_t)0x0FFFFFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_vector_2_set_2_high_rhd_index_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_2_HIGH_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xF0000000)) >> 28);
}
__INLINE uint32_t mac_hw0_mu0_rx_vector_2_set_2_high_rxvec_2_h_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_2_HIGH_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0x0FFFFFFF)) >> 0);
}

/**
 * @brief RX_VECTOR_2_SET_3_LOW register definition
 *  Rx Vecrtor2 register set 3 lower part register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RXVEC2_L                  0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_LOW_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000003E8)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_LOW_OFFSET      0x000003E8
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_LOW_INDEX       0x000000FA
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_LOW_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_vector_2_set_3_low_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_3_LOW_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_LOW_RXVEC_2_L_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_LOW_RXVEC_2_L_LSB    0
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_LOW_RXVEC_2_L_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_LOW_RXVEC_2_L_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_vector_2_set_3_low_rxvec_2_l_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_3_LOW_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_VECTOR_2_SET_3_HIGH register definition
 *  Rx Vecrtor2 register set 3 higher part register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 RHD_INDEX                 0x0
 *    27:00 RXVEC2_H                  0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_HIGH_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000003EC)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_HIGH_OFFSET      0x000003EC
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_HIGH_INDEX       0x000000FB
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_HIGH_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_vector_2_set_3_high_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_3_HIGH_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_HIGH_RHD_INDEX_MASK    ((uint32_t)0xF0000000)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_HIGH_RHD_INDEX_LSB    28
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_HIGH_RHD_INDEX_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_HIGH_RXVEC_2_H_MASK    ((uint32_t)0x0FFFFFFF)
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_HIGH_RXVEC_2_H_LSB    0
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_HIGH_RXVEC_2_H_WIDTH    ((uint32_t)0x0000001C)

#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_HIGH_RHD_INDEX_RST    0x0
#define MAC_HW0_MU0_RX_VECTOR_2_SET_3_HIGH_RXVEC_2_H_RST    0x0

__INLINE void mac_hw0_mu0_rx_vector_2_set_3_high_unpack(uint8_t* rhd_index, uint32_t* rxvec2_h)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_3_HIGH_ADDR);

	*rhd_index = (localVal & ((uint32_t)0xF0000000)) >>  28;
	*rxvec2_h = (localVal & ((uint32_t)0x0FFFFFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_vector_2_set_3_high_rhd_index_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_3_HIGH_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xF0000000)) >> 28);
}
__INLINE uint32_t mac_hw0_mu0_rx_vector_2_set_3_high_rxvec_2_h_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_VECTOR_2_SET_3_HIGH_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0x0FFFFFFF)) >> 0);
}

/**
 * @brief RX_MPDU_COUNT_ARRAY_0 register definition
 *  Contains the accumulated MPDU counter register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 MPDU_COUNT_ENTRY_0        0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_0_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000003F0)
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_0_OFFSET      0x000003F0
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_0_INDEX       0x000000FC
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_0_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_mpdu_count_array_0_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_0_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_0_MPDU_COUNT_ENTRY_0_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_0_MPDU_COUNT_ENTRY_0_LSB    0
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_0_MPDU_COUNT_ENTRY_0_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_0_MPDU_COUNT_ENTRY_0_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_mpdu_count_array_0_mpdu_count_entry_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_0_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_MPDU_COUNT_ARRAY_1 register definition
 *  Contains the accumulated MPDU counter register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 MPDU_COUNT_ENTRY_1        0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000003F4)
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_1_OFFSET      0x000003F4
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_1_INDEX       0x000000FD
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_mpdu_count_array_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_1_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_1_MPDU_COUNT_ENTRY_1_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_1_MPDU_COUNT_ENTRY_1_LSB    0
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_1_MPDU_COUNT_ENTRY_1_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_1_MPDU_COUNT_ENTRY_1_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_mpdu_count_array_1_mpdu_count_entry_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_1_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_MPDU_COUNT_ARRAY_2 register definition
 *  Contains the accumulated MPDU counter register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 MPDU_COUNT_ENTRY_2        0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000003F8)
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_2_OFFSET      0x000003F8
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_2_INDEX       0x000000FE
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_mpdu_count_array_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_2_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_2_MPDU_COUNT_ENTRY_2_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_2_MPDU_COUNT_ENTRY_2_LSB    0
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_2_MPDU_COUNT_ENTRY_2_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_2_MPDU_COUNT_ENTRY_2_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_mpdu_count_array_2_mpdu_count_entry_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_2_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_MPDU_COUNT_ARRAY_3 register definition
 *  Contains the accumulated MPDU counter register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 MPDU_COUNT_ENTRY_3        0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000003FC)
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_3_OFFSET      0x000003FC
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_3_INDEX       0x000000FF
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_mpdu_count_array_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_3_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_3_MPDU_COUNT_ENTRY_3_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_3_MPDU_COUNT_ENTRY_3_LSB    0
#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_3_MPDU_COUNT_ENTRY_3_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_3_MPDU_COUNT_ENTRY_3_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_mpdu_count_array_3_mpdu_count_entry_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_MPDU_COUNT_ARRAY_3_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_MPDU_COUNT register definition
 *  Contains the accumulated MPDU counter register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 MPDU_COUNT                0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_MPDU_COUNT_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000400)
#define MAC_HW0_MU0_RX_MPDU_COUNT_OFFSET      0x00000400
#define MAC_HW0_MU0_RX_MPDU_COUNT_INDEX       0x00000100
#define MAC_HW0_MU0_RX_MPDU_COUNT_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_mpdu_count_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_MPDU_COUNT_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_MPDU_COUNT_MPDU_COUNT_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_MPDU_COUNT_MPDU_COUNT_LSB    0
#define MAC_HW0_MU0_RX_MPDU_COUNT_MPDU_COUNT_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_MPDU_COUNT_MPDU_COUNT_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_mpdu_count_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_MPDU_COUNT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_RV_2_INDEX register definition
 *  Contains RV2 index register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    03:00 RV2_INDEX                 0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_RV_2_INDEX_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000404)
#define MAC_HW0_MU0_RX_RV_2_INDEX_OFFSET      0x00000404
#define MAC_HW0_MU0_RX_RV_2_INDEX_INDEX       0x00000101
#define MAC_HW0_MU0_RX_RV_2_INDEX_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_rv_2_index_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_RV_2_INDEX_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_RV_2_INDEX_RV_2_INDEX_MASK    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_RX_RV_2_INDEX_RV_2_INDEX_LSB    0
#define MAC_HW0_MU0_RX_RV_2_INDEX_RV_2_INDEX_WIDTH    ((uint32_t)0x00000004)

#define MAC_HW0_MU0_RX_RV_2_INDEX_RV_2_INDEX_RST    0x0

__INLINE uint8_t mac_hw0_mu0_rx_rv_2_index_rv_2_index_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_RV_2_INDEX_ADDR);
	return (uint8_t)(localVal >> 0);
}

/**
 * @brief INTRA_BSS_NAV_BUSY register definition
 *  Count intra BSS NAV busy period register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INTRA_BSS_NAV_BUSY_DUR    0x0
 * </pre>
 */
#define MAC_HW0_MU0_INTRA_BSS_NAV_BUSY_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000408)
#define MAC_HW0_MU0_INTRA_BSS_NAV_BUSY_OFFSET      0x00000408
#define MAC_HW0_MU0_INTRA_BSS_NAV_BUSY_INDEX       0x00000102
#define MAC_HW0_MU0_INTRA_BSS_NAV_BUSY_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_intra_bss_nav_busy_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_INTRA_BSS_NAV_BUSY_ADDR);
}

// field definitions
#define MAC_HW0_MU0_INTRA_BSS_NAV_BUSY_INTRA_BSS_NAV_BUSY_DUR_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_INTRA_BSS_NAV_BUSY_INTRA_BSS_NAV_BUSY_DUR_LSB    0
#define MAC_HW0_MU0_INTRA_BSS_NAV_BUSY_INTRA_BSS_NAV_BUSY_DUR_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_INTRA_BSS_NAV_BUSY_INTRA_BSS_NAV_BUSY_DUR_RST    0x0

__INLINE uint32_t mac_hw0_mu0_intra_bss_nav_busy_intra_bss_nav_busy_dur_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_INTRA_BSS_NAV_BUSY_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief INTER_BSS_NAV_BUSY register definition
 *  Count inter BSS NAV busy period register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INTER_BSS_NAV_BUSY_DUR    0x0
 * </pre>
 */
#define MAC_HW0_MU0_INTER_BSS_NAV_BUSY_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000040C)
#define MAC_HW0_MU0_INTER_BSS_NAV_BUSY_OFFSET      0x0000040C
#define MAC_HW0_MU0_INTER_BSS_NAV_BUSY_INDEX       0x00000103
#define MAC_HW0_MU0_INTER_BSS_NAV_BUSY_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_inter_bss_nav_busy_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_INTER_BSS_NAV_BUSY_ADDR);
}

// field definitions
#define MAC_HW0_MU0_INTER_BSS_NAV_BUSY_INTER_BSS_NAV_BUSY_DUR_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_INTER_BSS_NAV_BUSY_INTER_BSS_NAV_BUSY_DUR_LSB    0
#define MAC_HW0_MU0_INTER_BSS_NAV_BUSY_INTER_BSS_NAV_BUSY_DUR_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_INTER_BSS_NAV_BUSY_INTER_BSS_NAV_BUSY_DUR_RST    0x0

__INLINE uint32_t mac_hw0_mu0_inter_bss_nav_busy_inter_bss_nav_busy_dur_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_INTER_BSS_NAV_BUSY_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief INTRA_BSS_NAV_VALUE register definition
 *  Reflect the current NAV count register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25:00 NAV_COUNTER               0x0
 * </pre>
 */
#define MAC_HW0_MU0_INTRA_BSS_NAV_VALUE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000410)
#define MAC_HW0_MU0_INTRA_BSS_NAV_VALUE_OFFSET      0x00000410
#define MAC_HW0_MU0_INTRA_BSS_NAV_VALUE_INDEX       0x00000104
#define MAC_HW0_MU0_INTRA_BSS_NAV_VALUE_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_intra_bss_nav_value_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_INTRA_BSS_NAV_VALUE_ADDR);
}

// field definitions
#define MAC_HW0_MU0_INTRA_BSS_NAV_VALUE_NAV_COUNTER_MASK    ((uint32_t)0x03FFFFFF)
#define MAC_HW0_MU0_INTRA_BSS_NAV_VALUE_NAV_COUNTER_LSB    0
#define MAC_HW0_MU0_INTRA_BSS_NAV_VALUE_NAV_COUNTER_WIDTH    ((uint32_t)0x0000001A)

#define MAC_HW0_MU0_INTRA_BSS_NAV_VALUE_NAV_COUNTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_intra_bss_nav_value_nav_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_INTRA_BSS_NAV_VALUE_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_INTRA_BSS_TXOP_HOLDER_LOW register definition
 *  Contains the low part of the intra BSS TXOP holder register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TXOP_HOLDER_LOW           0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_LOW_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000414)
#define MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_LOW_OFFSET      0x00000414
#define MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_LOW_INDEX       0x00000105
#define MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_LOW_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_intra_bss_txop_holder_low_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_LOW_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_LOW_TXOP_HOLDER_LOW_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_LOW_TXOP_HOLDER_LOW_LSB    0
#define MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_LOW_TXOP_HOLDER_LOW_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_LOW_TXOP_HOLDER_LOW_RST    0x0

__INLINE uint32_t mac_hw0_mu0_debug_intra_bss_txop_holder_low_txop_holder_low_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_LOW_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_INTRA_BSS_TXOP_HOLDER_HIGH register definition
 *  Contains the hi part of the intra BSS TXOP holder register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 TXOP_HOLDER_HIGH          0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_HIGH_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000418)
#define MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_HIGH_OFFSET      0x00000418
#define MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_HIGH_INDEX       0x00000106
#define MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_HIGH_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_intra_bss_txop_holder_high_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_HIGH_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_HIGH_TXOP_HOLDER_HIGH_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_HIGH_TXOP_HOLDER_HIGH_LSB    0
#define MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_HIGH_TXOP_HOLDER_HIGH_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_HIGH_TXOP_HOLDER_HIGH_RST    0x0

__INLINE uint16_t mac_hw0_mu0_debug_intra_bss_txop_holder_high_txop_holder_high_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_INTRA_BSS_TXOP_HOLDER_HIGH_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief INTRA_BSS_NAV_LIMIT register definition
 *  Control intra BSS NAV limit register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 NAV_LIMIT                 0x0
 * </pre>
 */
#define MAC_HW0_MU0_INTRA_BSS_NAV_LIMIT_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000041C)
#define MAC_HW0_MU0_INTRA_BSS_NAV_LIMIT_OFFSET      0x0000041C
#define MAC_HW0_MU0_INTRA_BSS_NAV_LIMIT_INDEX       0x00000107
#define MAC_HW0_MU0_INTRA_BSS_NAV_LIMIT_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_intra_bss_nav_limit_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_INTRA_BSS_NAV_LIMIT_ADDR);
}

__INLINE void mac_hw0_mu0_intra_bss_nav_limit_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_INTRA_BSS_NAV_LIMIT_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_INTRA_BSS_NAV_LIMIT_NAV_LIMIT_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_INTRA_BSS_NAV_LIMIT_NAV_LIMIT_LSB    0
#define MAC_HW0_MU0_INTRA_BSS_NAV_LIMIT_NAV_LIMIT_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_INTRA_BSS_NAV_LIMIT_NAV_LIMIT_RST    0x0

__INLINE uint16_t mac_hw0_mu0_intra_bss_nav_limit_nav_limit_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_INTRA_BSS_NAV_LIMIT_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_intra_bss_nav_limit_nav_limit_setf(uint16_t navlimit)
{
	ASSERT_ERR((((uint32_t)navlimit << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_INTRA_BSS_NAV_LIMIT_ADDR, (uint32_t)navlimit << 0);
}

/**
 * @brief INTRA_BSS_NAV_OVERRIDE register definition
 *  Contains intra BSS NAV override value register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 NAV_VALUE_SET             0x0
 * </pre>
 */
#define MAC_HW0_MU0_INTRA_BSS_NAV_OVERRIDE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000420)
#define MAC_HW0_MU0_INTRA_BSS_NAV_OVERRIDE_OFFSET      0x00000420
#define MAC_HW0_MU0_INTRA_BSS_NAV_OVERRIDE_INDEX       0x00000108
#define MAC_HW0_MU0_INTRA_BSS_NAV_OVERRIDE_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_intra_bss_nav_override_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_INTRA_BSS_NAV_OVERRIDE_ADDR);
}

__INLINE void mac_hw0_mu0_intra_bss_nav_override_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_INTRA_BSS_NAV_OVERRIDE_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_INTRA_BSS_NAV_OVERRIDE_NAV_VALUE_SET_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_INTRA_BSS_NAV_OVERRIDE_NAV_VALUE_SET_LSB    0
#define MAC_HW0_MU0_INTRA_BSS_NAV_OVERRIDE_NAV_VALUE_SET_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_INTRA_BSS_NAV_OVERRIDE_NAV_VALUE_SET_RST    0x0

__INLINE uint16_t mac_hw0_mu0_intra_bss_nav_override_nav_value_set_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_INTRA_BSS_NAV_OVERRIDE_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_intra_bss_nav_override_nav_value_set_setf(uint16_t navvalueset)
{
	ASSERT_ERR((((uint32_t)navvalueset << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_INTRA_BSS_NAV_OVERRIDE_ADDR, (uint32_t)navvalueset << 0);
}

/**
 * @brief DUAL_NAV_CONFIG register definition
 *  Dual NAV configuration register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    22    consider_intra_nav_for_cts 0              
 *    21    consider_intra_nav_for_he_trigger 0              
 *    20    consider_intra_nav_for_backoff 1              
 *    18    consider_basic_nav_for_cts 1              
 *    17    consider_basic_nav_for_he_trigger 1              
 *    16    consider_basic_nav_for_backoff 1              
 *    13    Ignore_classify_intra_rule_5 0              
 *    12    Ignore_classify_intra_rule_4 0              
 *    11    Ignore_classify_intra_rule_3 0              
 *    10    Ignore_classify_intra_rule_2 0              
 *    09    Ignore_classify_intra_rule_1 0              
 *    06    Ignore_classify_inter_rule_6 0              
 *    05    Ignore_classify_inter_rule_5 0              
 *    04    Ignore_classify_inter_rule_4 0              
 *    03    Ignore_classify_inter_rule_3 0              
 *    02    Ignore_classify_inter_rule_2 0              
 *    01    Ignore_classify_inter_rule_1 0              
 * </pre>
 */
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000424)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_OFFSET      0x00000424
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_INDEX       0x00000109
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_RESET       0x00170000

__INLINE uint32_t  mac_hw0_mu0_dual_nav_config_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
}

__INLINE void mac_hw0_mu0_dual_nav_config_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_INTRA_NAV_FOR_CTS_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_INTRA_NAV_FOR_CTS_POS    22
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_INTRA_NAV_FOR_HE_TRIGGER_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_INTRA_NAV_FOR_HE_TRIGGER_POS    21
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_INTRA_NAV_FOR_BACKOFF_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_INTRA_NAV_FOR_BACKOFF_POS    20
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_BASIC_NAV_FOR_CTS_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_BASIC_NAV_FOR_CTS_POS    18
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_BASIC_NAV_FOR_HE_TRIGGER_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_BASIC_NAV_FOR_HE_TRIGGER_POS    17
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_BASIC_NAV_FOR_BACKOFF_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_BASIC_NAV_FOR_BACKOFF_POS    16
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTRA_RULE_5_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTRA_RULE_5_POS    13
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTRA_RULE_4_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTRA_RULE_4_POS    12
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTRA_RULE_3_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTRA_RULE_3_POS    11
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTRA_RULE_2_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTRA_RULE_2_POS    10
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTRA_RULE_1_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTRA_RULE_1_POS    9
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_6_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_6_POS    6
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_5_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_5_POS    5
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_4_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_4_POS    4
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_3_POS    3
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_2_POS    2
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_1_POS    1

#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_INTRA_NAV_FOR_CTS_RST    0x0
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_INTRA_NAV_FOR_HE_TRIGGER_RST    0x0
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_INTRA_NAV_FOR_BACKOFF_RST    0x1
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_BASIC_NAV_FOR_CTS_RST    0x1
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_BASIC_NAV_FOR_HE_TRIGGER_RST    0x1
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_CONSIDER_BASIC_NAV_FOR_BACKOFF_RST    0x1
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTRA_RULE_5_RST    0x0
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTRA_RULE_4_RST    0x0
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTRA_RULE_3_RST    0x0
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTRA_RULE_2_RST    0x0
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTRA_RULE_1_RST    0x0
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_6_RST    0x0
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_5_RST    0x0
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_4_RST    0x0
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_3_RST    0x0
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_2_RST    0x0
#define MAC_HW0_MU0_DUAL_NAV_CONFIG_IGNORE_CLASSIFY_INTER_RULE_1_RST    0x0

__INLINE void mac_hw0_mu0_dual_nav_config_pack(uint8_t consider_intra_nav_for_cts, uint8_t consider_intra_nav_for_he_trigger, uint8_t consider_intra_nav_for_backoff, uint8_t consider_basic_nav_for_cts, uint8_t consider_basic_nav_for_he_trigger, uint8_t consider_basic_nav_for_backoff, uint8_t ignore_classify_intra_rule_5, uint8_t ignore_classify_intra_rule_4, uint8_t ignore_classify_intra_rule_3, uint8_t ignore_classify_intra_rule_2, uint8_t ignore_classify_intra_rule_1, uint8_t ignore_classify_inter_rule_6, uint8_t ignore_classify_inter_rule_5, uint8_t ignore_classify_inter_rule_4, uint8_t ignore_classify_inter_rule_3, uint8_t ignore_classify_inter_rule_2, uint8_t ignore_classify_inter_rule_1)
{
	ASSERT_ERR((((uint32_t)consider_intra_nav_for_cts << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)consider_intra_nav_for_he_trigger << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)consider_intra_nav_for_backoff << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)consider_basic_nav_for_cts << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)consider_basic_nav_for_he_trigger << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)consider_basic_nav_for_backoff << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)ignore_classify_intra_rule_5 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)ignore_classify_intra_rule_4 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)ignore_classify_intra_rule_3 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)ignore_classify_intra_rule_2 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)ignore_classify_intra_rule_1 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)ignore_classify_inter_rule_6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)ignore_classify_inter_rule_5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)ignore_classify_inter_rule_4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)ignore_classify_inter_rule_3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)ignore_classify_inter_rule_2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)ignore_classify_inter_rule_1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR,  ((uint32_t)consider_intra_nav_for_cts << 22) |((uint32_t)consider_intra_nav_for_he_trigger << 21) |((uint32_t)consider_intra_nav_for_backoff << 20) |((uint32_t)consider_basic_nav_for_cts << 18) |((uint32_t)consider_basic_nav_for_he_trigger << 17) |((uint32_t)consider_basic_nav_for_backoff << 16) |((uint32_t)ignore_classify_intra_rule_5 << 13) |((uint32_t)ignore_classify_intra_rule_4 << 12) |((uint32_t)ignore_classify_intra_rule_3 << 11) |((uint32_t)ignore_classify_intra_rule_2 << 10) |((uint32_t)ignore_classify_intra_rule_1 << 9) |((uint32_t)ignore_classify_inter_rule_6 << 6) |((uint32_t)ignore_classify_inter_rule_5 << 5) |((uint32_t)ignore_classify_inter_rule_4 << 4) |((uint32_t)ignore_classify_inter_rule_3 << 3) |((uint32_t)ignore_classify_inter_rule_2 << 2) |((uint32_t)ignore_classify_inter_rule_1 << 1));
}

__INLINE void mac_hw0_mu0_dual_nav_config_unpack(uint8_t* consider_intra_nav_for_cts, uint8_t* consider_intra_nav_for_he_trigger, uint8_t* consider_intra_nav_for_backoff, uint8_t* consider_basic_nav_for_cts, uint8_t* consider_basic_nav_for_he_trigger, uint8_t* consider_basic_nav_for_backoff, uint8_t* ignore_classify_intra_rule_5, uint8_t* ignore_classify_intra_rule_4, uint8_t* ignore_classify_intra_rule_3, uint8_t* ignore_classify_intra_rule_2, uint8_t* ignore_classify_intra_rule_1, uint8_t* ignore_classify_inter_rule_6, uint8_t* ignore_classify_inter_rule_5, uint8_t* ignore_classify_inter_rule_4, uint8_t* ignore_classify_inter_rule_3, uint8_t* ignore_classify_inter_rule_2, uint8_t* ignore_classify_inter_rule_1)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);

	*consider_intra_nav_for_cts = (localVal & ((uint32_t)0x00400000)) >>  22;
	*consider_intra_nav_for_he_trigger = (localVal & ((uint32_t)0x00200000)) >>  21;
	*consider_intra_nav_for_backoff = (localVal & ((uint32_t)0x00100000)) >>  20;
	*consider_basic_nav_for_cts = (localVal & ((uint32_t)0x00040000)) >>  18;
	*consider_basic_nav_for_he_trigger = (localVal & ((uint32_t)0x00020000)) >>  17;
	*consider_basic_nav_for_backoff = (localVal & ((uint32_t)0x00010000)) >>  16;
	*ignore_classify_intra_rule_5 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*ignore_classify_intra_rule_4 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*ignore_classify_intra_rule_3 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*ignore_classify_intra_rule_2 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*ignore_classify_intra_rule_1 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*ignore_classify_inter_rule_6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*ignore_classify_inter_rule_5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*ignore_classify_inter_rule_4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*ignore_classify_inter_rule_3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*ignore_classify_inter_rule_2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*ignore_classify_inter_rule_1 = (localVal & ((uint32_t)0x00000002)) >>  1;
}

__INLINE uint8_t mac_hw0_mu0_dual_nav_config_consider_intra_nav_for_cts_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_dual_nav_config_consider_intra_nav_for_cts_setf(uint8_t considerintranavforcts)
{
	ASSERT_ERR((((uint32_t)considerintranavforcts << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)considerintranavforcts <<22));
}
__INLINE uint8_t mac_hw0_mu0_dual_nav_config_consider_intra_nav_for_he_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_dual_nav_config_consider_intra_nav_for_he_trigger_setf(uint8_t considerintranavforhetrigger)
{
	ASSERT_ERR((((uint32_t)considerintranavforhetrigger << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)considerintranavforhetrigger <<21));
}
__INLINE uint8_t mac_hw0_mu0_dual_nav_config_consider_intra_nav_for_backoff_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_dual_nav_config_consider_intra_nav_for_backoff_setf(uint8_t considerintranavforbackoff)
{
	ASSERT_ERR((((uint32_t)considerintranavforbackoff << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)considerintranavforbackoff <<20));
}
__INLINE uint8_t mac_hw0_mu0_dual_nav_config_consider_basic_nav_for_cts_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_dual_nav_config_consider_basic_nav_for_cts_setf(uint8_t considerbasicnavforcts)
{
	ASSERT_ERR((((uint32_t)considerbasicnavforcts << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)considerbasicnavforcts <<18));
}
__INLINE uint8_t mac_hw0_mu0_dual_nav_config_consider_basic_nav_for_he_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_dual_nav_config_consider_basic_nav_for_he_trigger_setf(uint8_t considerbasicnavforhetrigger)
{
	ASSERT_ERR((((uint32_t)considerbasicnavforhetrigger << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)considerbasicnavforhetrigger <<17));
}
__INLINE uint8_t mac_hw0_mu0_dual_nav_config_consider_basic_nav_for_backoff_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_dual_nav_config_consider_basic_nav_for_backoff_setf(uint8_t considerbasicnavforbackoff)
{
	ASSERT_ERR((((uint32_t)considerbasicnavforbackoff << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)considerbasicnavforbackoff <<16));
}
__INLINE uint8_t mac_hw0_mu0_dual_nav_config_ignore_classify_intra_rule_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_dual_nav_config_ignore_classify_intra_rule_5_setf(uint8_t ignoreclassifyintrarule5)
{
	ASSERT_ERR((((uint32_t)ignoreclassifyintrarule5 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)ignoreclassifyintrarule5 <<13));
}
__INLINE uint8_t mac_hw0_mu0_dual_nav_config_ignore_classify_intra_rule_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_dual_nav_config_ignore_classify_intra_rule_4_setf(uint8_t ignoreclassifyintrarule4)
{
	ASSERT_ERR((((uint32_t)ignoreclassifyintrarule4 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)ignoreclassifyintrarule4 <<12));
}
__INLINE uint8_t mac_hw0_mu0_dual_nav_config_ignore_classify_intra_rule_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_dual_nav_config_ignore_classify_intra_rule_3_setf(uint8_t ignoreclassifyintrarule3)
{
	ASSERT_ERR((((uint32_t)ignoreclassifyintrarule3 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)ignoreclassifyintrarule3 <<11));
}
__INLINE uint8_t mac_hw0_mu0_dual_nav_config_ignore_classify_intra_rule_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_dual_nav_config_ignore_classify_intra_rule_2_setf(uint8_t ignoreclassifyintrarule2)
{
	ASSERT_ERR((((uint32_t)ignoreclassifyintrarule2 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)ignoreclassifyintrarule2 <<10));
}
__INLINE uint8_t mac_hw0_mu0_dual_nav_config_ignore_classify_intra_rule_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_dual_nav_config_ignore_classify_intra_rule_1_setf(uint8_t ignoreclassifyintrarule1)
{
	ASSERT_ERR((((uint32_t)ignoreclassifyintrarule1 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)ignoreclassifyintrarule1 <<9));
}
__INLINE uint8_t mac_hw0_mu0_dual_nav_config_ignore_classify_inter_rule_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_dual_nav_config_ignore_classify_inter_rule_6_setf(uint8_t ignoreclassifyinterrule6)
{
	ASSERT_ERR((((uint32_t)ignoreclassifyinterrule6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)ignoreclassifyinterrule6 <<6));
}
__INLINE uint8_t mac_hw0_mu0_dual_nav_config_ignore_classify_inter_rule_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_dual_nav_config_ignore_classify_inter_rule_5_setf(uint8_t ignoreclassifyinterrule5)
{
	ASSERT_ERR((((uint32_t)ignoreclassifyinterrule5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)ignoreclassifyinterrule5 <<5));
}
__INLINE uint8_t mac_hw0_mu0_dual_nav_config_ignore_classify_inter_rule_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_dual_nav_config_ignore_classify_inter_rule_4_setf(uint8_t ignoreclassifyinterrule4)
{
	ASSERT_ERR((((uint32_t)ignoreclassifyinterrule4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)ignoreclassifyinterrule4 <<4));
}
__INLINE uint8_t mac_hw0_mu0_dual_nav_config_ignore_classify_inter_rule_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_dual_nav_config_ignore_classify_inter_rule_3_setf(uint8_t ignoreclassifyinterrule3)
{
	ASSERT_ERR((((uint32_t)ignoreclassifyinterrule3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)ignoreclassifyinterrule3 <<3));
}
__INLINE uint8_t mac_hw0_mu0_dual_nav_config_ignore_classify_inter_rule_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_dual_nav_config_ignore_classify_inter_rule_2_setf(uint8_t ignoreclassifyinterrule2)
{
	ASSERT_ERR((((uint32_t)ignoreclassifyinterrule2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)ignoreclassifyinterrule2 <<2));
}
__INLINE uint8_t mac_hw0_mu0_dual_nav_config_ignore_classify_inter_rule_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_dual_nav_config_ignore_classify_inter_rule_1_setf(uint8_t ignoreclassifyinterrule1)
{
	ASSERT_ERR((((uint32_t)ignoreclassifyinterrule1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_DUAL_NAV_CONFIG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)ignoreclassifyinterrule1 <<1));
}

/**
 * @brief GCMP_CONTROL register definition
 *  Controls max number of contexts register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    num_Ctx_In_Tx_SWValid     0              
 *    30    num_Ctx_In_Rx_SWValid     0              
 *    06:04 num_Ctx_In_Tx_SW          0x0
 *    02:00 num_Ctx_In_Rx_SW          0x0
 * </pre>
 */
#define MAC_HW0_MU0_GCMP_CONTROL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000428)
#define MAC_HW0_MU0_GCMP_CONTROL_OFFSET      0x00000428
#define MAC_HW0_MU0_GCMP_CONTROL_INDEX       0x0000010A
#define MAC_HW0_MU0_GCMP_CONTROL_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_gcmp_control_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_GCMP_CONTROL_ADDR);
}

__INLINE void mac_hw0_mu0_gcmp_control_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_GCMP_CONTROL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_GCMP_CONTROL_NUM_CTX_IN_TX_SWVALID_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_GCMP_CONTROL_NUM_CTX_IN_TX_SWVALID_POS    31
#define MAC_HW0_MU0_GCMP_CONTROL_NUM_CTX_IN_RX_SWVALID_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_GCMP_CONTROL_NUM_CTX_IN_RX_SWVALID_POS    30
#define MAC_HW0_MU0_GCMP_CONTROL_NUM_CTX_IN_TX_SW_MASK    ((uint32_t)0x00000070)
#define MAC_HW0_MU0_GCMP_CONTROL_NUM_CTX_IN_TX_SW_LSB    4
#define MAC_HW0_MU0_GCMP_CONTROL_NUM_CTX_IN_TX_SW_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_GCMP_CONTROL_NUM_CTX_IN_RX_SW_MASK    ((uint32_t)0x00000007)
#define MAC_HW0_MU0_GCMP_CONTROL_NUM_CTX_IN_RX_SW_LSB    0
#define MAC_HW0_MU0_GCMP_CONTROL_NUM_CTX_IN_RX_SW_WIDTH    ((uint32_t)0x00000003)

#define MAC_HW0_MU0_GCMP_CONTROL_NUM_CTX_IN_TX_SWVALID_RST    0x0
#define MAC_HW0_MU0_GCMP_CONTROL_NUM_CTX_IN_RX_SWVALID_RST    0x0
#define MAC_HW0_MU0_GCMP_CONTROL_NUM_CTX_IN_TX_SW_RST    0x0
#define MAC_HW0_MU0_GCMP_CONTROL_NUM_CTX_IN_RX_SW_RST    0x0

__INLINE void mac_hw0_mu0_gcmp_control_pack(uint8_t num_ctx_in_tx_swvalid, uint8_t num_ctx_in_rx_swvalid, uint8_t num_ctx_in_tx_sw, uint8_t num_ctx_in_rx_sw)
{
	ASSERT_ERR((((uint32_t)num_ctx_in_tx_swvalid << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)num_ctx_in_rx_swvalid << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)num_ctx_in_tx_sw << 4) & ~((uint32_t)0x00000070)) == 0);
	ASSERT_ERR((((uint32_t)num_ctx_in_rx_sw << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GCMP_CONTROL_ADDR,  ((uint32_t)num_ctx_in_tx_swvalid << 31) |((uint32_t)num_ctx_in_rx_swvalid << 30) |((uint32_t)num_ctx_in_tx_sw << 4) |((uint32_t)num_ctx_in_rx_sw << 0));
}

__INLINE void mac_hw0_mu0_gcmp_control_unpack(uint8_t* num_ctx_in_tx_swvalid, uint8_t* num_ctx_in_rx_swvalid, uint8_t* num_ctx_in_tx_sw, uint8_t* num_ctx_in_rx_sw)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GCMP_CONTROL_ADDR);

	*num_ctx_in_tx_swvalid = (localVal & ((uint32_t)0x80000000)) >>  31;
	*num_ctx_in_rx_swvalid = (localVal & ((uint32_t)0x40000000)) >>  30;
	*num_ctx_in_tx_sw = (localVal & ((uint32_t)0x00000070)) >>  4;
	*num_ctx_in_rx_sw = (localVal & ((uint32_t)0x00000007)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_gcmp_control_num_ctx_in_tx_swvalid_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GCMP_CONTROL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_gcmp_control_num_ctx_in_tx_swvalid_setf(uint8_t numctxintxswvalid)
{
	ASSERT_ERR((((uint32_t)numctxintxswvalid << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GCMP_CONTROL_ADDR, (REG_PL_RD(MAC_HW0_MU0_GCMP_CONTROL_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)numctxintxswvalid <<31));
}
__INLINE uint8_t mac_hw0_mu0_gcmp_control_num_ctx_in_rx_swvalid_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GCMP_CONTROL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_gcmp_control_num_ctx_in_rx_swvalid_setf(uint8_t numctxinrxswvalid)
{
	ASSERT_ERR((((uint32_t)numctxinrxswvalid << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GCMP_CONTROL_ADDR, (REG_PL_RD(MAC_HW0_MU0_GCMP_CONTROL_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)numctxinrxswvalid <<30));
}
__INLINE uint8_t mac_hw0_mu0_gcmp_control_num_ctx_in_tx_sw_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GCMP_CONTROL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000070)) >> 4);
}
__INLINE void mac_hw0_mu0_gcmp_control_num_ctx_in_tx_sw_setf(uint8_t numctxintxsw)
{
	ASSERT_ERR((((uint32_t)numctxintxsw << 4) & ~((uint32_t)0x00000070)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GCMP_CONTROL_ADDR, (REG_PL_RD(MAC_HW0_MU0_GCMP_CONTROL_ADDR) & ~((uint32_t)0x00000070)) | ((uint32_t)numctxintxsw <<4));
}
__INLINE uint8_t mac_hw0_mu0_gcmp_control_num_ctx_in_rx_sw_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GCMP_CONTROL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000007)) >> 0);
}
__INLINE void mac_hw0_mu0_gcmp_control_num_ctx_in_rx_sw_setf(uint8_t numctxinrxsw)
{
	ASSERT_ERR((((uint32_t)numctxinrxsw << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GCMP_CONTROL_ADDR, (REG_PL_RD(MAC_HW0_MU0_GCMP_CONTROL_ADDR) & ~((uint32_t)0x00000007)) | ((uint32_t)numctxinrxsw <<0));
}

/**
 * @brief RX_EVENT_COUNT_1_ARRAY_0 register definition
 *  Contains per PPDU statistics counters register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 INCORRECT_RECIEVED_MPDU_COUNT 0x0
 *    19:10 CORRECT_RECIEVED_MPDU_COUNT 0x0
 *    09:00 DISCARDED_MPDU_COUNT      0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000440)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_OFFSET      0x00000440
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_INDEX       0x00000110
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_event_count_1_array_0_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_INCORRECT_RECIEVED_MPDU_COUNT_MASK    ((uint32_t)0x3FF00000)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_INCORRECT_RECIEVED_MPDU_COUNT_LSB    20
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_INCORRECT_RECIEVED_MPDU_COUNT_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_CORRECT_RECIEVED_MPDU_COUNT_MASK    ((uint32_t)0x000FFC00)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_CORRECT_RECIEVED_MPDU_COUNT_LSB    10
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_CORRECT_RECIEVED_MPDU_COUNT_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_DISCARDED_MPDU_COUNT_MASK    ((uint32_t)0x000003FF)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_DISCARDED_MPDU_COUNT_LSB    0
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_DISCARDED_MPDU_COUNT_WIDTH    ((uint32_t)0x0000000A)

#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_INCORRECT_RECIEVED_MPDU_COUNT_RST    0x0
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_CORRECT_RECIEVED_MPDU_COUNT_RST    0x0
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_DISCARDED_MPDU_COUNT_RST    0x0

__INLINE void mac_hw0_mu0_rx_event_count_1_array_0_unpack(uint16_t* incorrect_recieved_mpdu_count, uint16_t* correct_recieved_mpdu_count, uint16_t* discarded_mpdu_count)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_ADDR);

	*incorrect_recieved_mpdu_count = (localVal & ((uint32_t)0x3FF00000)) >>  20;
	*correct_recieved_mpdu_count = (localVal & ((uint32_t)0x000FFC00)) >>  10;
	*discarded_mpdu_count = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_rx_event_count_1_array_0_incorrect_recieved_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x3FF00000)) >> 20);
}
__INLINE uint16_t mac_hw0_mu0_rx_event_count_1_array_0_correct_recieved_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000FFC00)) >> 10);
}
__INLINE uint16_t mac_hw0_mu0_rx_event_count_1_array_0_discarded_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_0_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}

/**
 * @brief RX_EVENT_COUNT_2_ARRAY_0 register definition
 *  Contains per PPDU statistics counters register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 INCORRECT_DELIMITER_COUNT 0x0
 *    15:00 RX_DISCARDED_MPDU_COUNT   0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_0_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000444)
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_0_OFFSET      0x00000444
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_0_INDEX       0x00000111
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_0_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_event_count_2_array_0_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_0_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_0_INCORRECT_DELIMITER_COUNT_MASK    ((uint32_t)0xFFFF0000)
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_0_INCORRECT_DELIMITER_COUNT_LSB    16
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_0_INCORRECT_DELIMITER_COUNT_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_0_RX_DISCARDED_MPDU_COUNT_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_0_RX_DISCARDED_MPDU_COUNT_LSB    0
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_0_RX_DISCARDED_MPDU_COUNT_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_0_INCORRECT_DELIMITER_COUNT_RST    0x0
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_0_RX_DISCARDED_MPDU_COUNT_RST    0x0

__INLINE void mac_hw0_mu0_rx_event_count_2_array_0_unpack(uint16_t* incorrect_delimiter_count, uint16_t* rx_discarded_mpdu_count)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_0_ADDR);

	*incorrect_delimiter_count = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*rx_discarded_mpdu_count = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_rx_event_count_2_array_0_incorrect_delimiter_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_0_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint16_t mac_hw0_mu0_rx_event_count_2_array_0_rx_discarded_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_0_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}

/**
 * @brief RX_EVENT_COUNT_1_ARRAY_1 register definition
 *  Contains per PPDU statistics counters register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 INCORRECT_RECIEVED_MPDU_COUNT 0x0
 *    19:10 CORRECT_RECIEVED_MPDU_COUNT 0x0
 *    09:00 DISCARDED_MPDU_COUNT      0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000448)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_OFFSET      0x00000448
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_INDEX       0x00000112
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_event_count_1_array_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_INCORRECT_RECIEVED_MPDU_COUNT_MASK    ((uint32_t)0x3FF00000)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_INCORRECT_RECIEVED_MPDU_COUNT_LSB    20
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_INCORRECT_RECIEVED_MPDU_COUNT_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_CORRECT_RECIEVED_MPDU_COUNT_MASK    ((uint32_t)0x000FFC00)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_CORRECT_RECIEVED_MPDU_COUNT_LSB    10
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_CORRECT_RECIEVED_MPDU_COUNT_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_DISCARDED_MPDU_COUNT_MASK    ((uint32_t)0x000003FF)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_DISCARDED_MPDU_COUNT_LSB    0
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_DISCARDED_MPDU_COUNT_WIDTH    ((uint32_t)0x0000000A)

#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_INCORRECT_RECIEVED_MPDU_COUNT_RST    0x0
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_CORRECT_RECIEVED_MPDU_COUNT_RST    0x0
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_DISCARDED_MPDU_COUNT_RST    0x0

__INLINE void mac_hw0_mu0_rx_event_count_1_array_1_unpack(uint16_t* incorrect_recieved_mpdu_count, uint16_t* correct_recieved_mpdu_count, uint16_t* discarded_mpdu_count)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_ADDR);

	*incorrect_recieved_mpdu_count = (localVal & ((uint32_t)0x3FF00000)) >>  20;
	*correct_recieved_mpdu_count = (localVal & ((uint32_t)0x000FFC00)) >>  10;
	*discarded_mpdu_count = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_rx_event_count_1_array_1_incorrect_recieved_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x3FF00000)) >> 20);
}
__INLINE uint16_t mac_hw0_mu0_rx_event_count_1_array_1_correct_recieved_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000FFC00)) >> 10);
}
__INLINE uint16_t mac_hw0_mu0_rx_event_count_1_array_1_discarded_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}

/**
 * @brief RX_EVENT_COUNT_2_ARRAY_1 register definition
 *  Contains per PPDU statistics counters register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 INCORRECT_DELIMITER_COUNT 0x0
 *    15:00 RX_DISCARDED_MPDU_COUNT   0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000044C)
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_1_OFFSET      0x0000044C
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_1_INDEX       0x00000113
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_event_count_2_array_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_1_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_1_INCORRECT_DELIMITER_COUNT_MASK    ((uint32_t)0xFFFF0000)
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_1_INCORRECT_DELIMITER_COUNT_LSB    16
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_1_INCORRECT_DELIMITER_COUNT_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_1_RX_DISCARDED_MPDU_COUNT_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_1_RX_DISCARDED_MPDU_COUNT_LSB    0
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_1_RX_DISCARDED_MPDU_COUNT_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_1_INCORRECT_DELIMITER_COUNT_RST    0x0
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_1_RX_DISCARDED_MPDU_COUNT_RST    0x0

__INLINE void mac_hw0_mu0_rx_event_count_2_array_1_unpack(uint16_t* incorrect_delimiter_count, uint16_t* rx_discarded_mpdu_count)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_1_ADDR);

	*incorrect_delimiter_count = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*rx_discarded_mpdu_count = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_rx_event_count_2_array_1_incorrect_delimiter_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint16_t mac_hw0_mu0_rx_event_count_2_array_1_rx_discarded_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}

/**
 * @brief RX_EVENT_COUNT_1_ARRAY_2 register definition
 *  Contains per PPDU statistics counters register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 INCORRECT_RECIEVED_MPDU_COUNT 0x0
 *    19:10 CORRECT_RECIEVED_MPDU_COUNT 0x0
 *    09:00 DISCARDED_MPDU_COUNT      0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000450)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_OFFSET      0x00000450
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_INDEX       0x00000114
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_event_count_1_array_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_INCORRECT_RECIEVED_MPDU_COUNT_MASK    ((uint32_t)0x3FF00000)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_INCORRECT_RECIEVED_MPDU_COUNT_LSB    20
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_INCORRECT_RECIEVED_MPDU_COUNT_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_CORRECT_RECIEVED_MPDU_COUNT_MASK    ((uint32_t)0x000FFC00)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_CORRECT_RECIEVED_MPDU_COUNT_LSB    10
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_CORRECT_RECIEVED_MPDU_COUNT_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_DISCARDED_MPDU_COUNT_MASK    ((uint32_t)0x000003FF)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_DISCARDED_MPDU_COUNT_LSB    0
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_DISCARDED_MPDU_COUNT_WIDTH    ((uint32_t)0x0000000A)

#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_INCORRECT_RECIEVED_MPDU_COUNT_RST    0x0
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_CORRECT_RECIEVED_MPDU_COUNT_RST    0x0
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_DISCARDED_MPDU_COUNT_RST    0x0

__INLINE void mac_hw0_mu0_rx_event_count_1_array_2_unpack(uint16_t* incorrect_recieved_mpdu_count, uint16_t* correct_recieved_mpdu_count, uint16_t* discarded_mpdu_count)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_ADDR);

	*incorrect_recieved_mpdu_count = (localVal & ((uint32_t)0x3FF00000)) >>  20;
	*correct_recieved_mpdu_count = (localVal & ((uint32_t)0x000FFC00)) >>  10;
	*discarded_mpdu_count = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_rx_event_count_1_array_2_incorrect_recieved_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x3FF00000)) >> 20);
}
__INLINE uint16_t mac_hw0_mu0_rx_event_count_1_array_2_correct_recieved_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000FFC00)) >> 10);
}
__INLINE uint16_t mac_hw0_mu0_rx_event_count_1_array_2_discarded_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}

/**
 * @brief RX_EVENT_COUNT_2_ARRAY_2 register definition
 *  Contains per PPDU statistics counters register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 INCORRECT_DELIMITER_COUNT 0x0
 *    15:00 RX_DISCARDED_MPDU_COUNT   0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000454)
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_2_OFFSET      0x00000454
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_2_INDEX       0x00000115
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_event_count_2_array_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_2_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_2_INCORRECT_DELIMITER_COUNT_MASK    ((uint32_t)0xFFFF0000)
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_2_INCORRECT_DELIMITER_COUNT_LSB    16
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_2_INCORRECT_DELIMITER_COUNT_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_2_RX_DISCARDED_MPDU_COUNT_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_2_RX_DISCARDED_MPDU_COUNT_LSB    0
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_2_RX_DISCARDED_MPDU_COUNT_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_2_INCORRECT_DELIMITER_COUNT_RST    0x0
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_2_RX_DISCARDED_MPDU_COUNT_RST    0x0

__INLINE void mac_hw0_mu0_rx_event_count_2_array_2_unpack(uint16_t* incorrect_delimiter_count, uint16_t* rx_discarded_mpdu_count)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_2_ADDR);

	*incorrect_delimiter_count = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*rx_discarded_mpdu_count = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_rx_event_count_2_array_2_incorrect_delimiter_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint16_t mac_hw0_mu0_rx_event_count_2_array_2_rx_discarded_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}

/**
 * @brief RX_EVENT_COUNT_1_ARRAY_3 register definition
 *  Contains per PPDU statistics counters register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:20 INCORRECT_RECIEVED_MPDU_COUNT 0x0
 *    19:10 CORRECT_RECIEVED_MPDU_COUNT 0x0
 *    09:00 DISCARDED_MPDU_COUNT      0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000458)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_OFFSET      0x00000458
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_INDEX       0x00000116
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_event_count_1_array_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_INCORRECT_RECIEVED_MPDU_COUNT_MASK    ((uint32_t)0x3FF00000)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_INCORRECT_RECIEVED_MPDU_COUNT_LSB    20
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_INCORRECT_RECIEVED_MPDU_COUNT_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_CORRECT_RECIEVED_MPDU_COUNT_MASK    ((uint32_t)0x000FFC00)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_CORRECT_RECIEVED_MPDU_COUNT_LSB    10
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_CORRECT_RECIEVED_MPDU_COUNT_WIDTH    ((uint32_t)0x0000000A)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_DISCARDED_MPDU_COUNT_MASK    ((uint32_t)0x000003FF)
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_DISCARDED_MPDU_COUNT_LSB    0
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_DISCARDED_MPDU_COUNT_WIDTH    ((uint32_t)0x0000000A)

#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_INCORRECT_RECIEVED_MPDU_COUNT_RST    0x0
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_CORRECT_RECIEVED_MPDU_COUNT_RST    0x0
#define MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_DISCARDED_MPDU_COUNT_RST    0x0

__INLINE void mac_hw0_mu0_rx_event_count_1_array_3_unpack(uint16_t* incorrect_recieved_mpdu_count, uint16_t* correct_recieved_mpdu_count, uint16_t* discarded_mpdu_count)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_ADDR);

	*incorrect_recieved_mpdu_count = (localVal & ((uint32_t)0x3FF00000)) >>  20;
	*correct_recieved_mpdu_count = (localVal & ((uint32_t)0x000FFC00)) >>  10;
	*discarded_mpdu_count = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_rx_event_count_1_array_3_incorrect_recieved_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x3FF00000)) >> 20);
}
__INLINE uint16_t mac_hw0_mu0_rx_event_count_1_array_3_correct_recieved_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000FFC00)) >> 10);
}
__INLINE uint16_t mac_hw0_mu0_rx_event_count_1_array_3_discarded_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_1_ARRAY_3_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}

/**
 * @brief RX_EVENT_COUNT_2_ARRAY_3 register definition
 *  Contains per PPDU statistics counters register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 INCORRECT_DELIMITER_COUNT 0x0
 *    15:00 RX_DISCARDED_MPDU_COUNT   0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000045C)
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_3_OFFSET      0x0000045C
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_3_INDEX       0x00000117
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_event_count_2_array_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_3_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_3_INCORRECT_DELIMITER_COUNT_MASK    ((uint32_t)0xFFFF0000)
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_3_INCORRECT_DELIMITER_COUNT_LSB    16
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_3_INCORRECT_DELIMITER_COUNT_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_3_RX_DISCARDED_MPDU_COUNT_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_3_RX_DISCARDED_MPDU_COUNT_LSB    0
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_3_RX_DISCARDED_MPDU_COUNT_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_3_INCORRECT_DELIMITER_COUNT_RST    0x0
#define MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_3_RX_DISCARDED_MPDU_COUNT_RST    0x0

__INLINE void mac_hw0_mu0_rx_event_count_2_array_3_unpack(uint16_t* incorrect_delimiter_count, uint16_t* rx_discarded_mpdu_count)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_3_ADDR);

	*incorrect_delimiter_count = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*rx_discarded_mpdu_count = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_rx_event_count_2_array_3_incorrect_delimiter_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_3_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint16_t mac_hw0_mu0_rx_event_count_2_array_3_rx_discarded_mpdu_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_EVENT_COUNT_2_ARRAY_3_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}

/**
 * @brief DEBUG_HWSM_1 register definition
 *  Used to observe the MAC HW state machines. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30:24 MAC_CONTROL_LS            0x0
 *    16:08 TX_CONTROL_LS             0x0
 *    04:00 RX_CONTROL_LS             0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_HWSM_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000500)
#define MAC_HW0_MU0_DEBUG_HWSM_1_OFFSET      0x00000500
#define MAC_HW0_MU0_DEBUG_HWSM_1_INDEX       0x00000140
#define MAC_HW0_MU0_DEBUG_HWSM_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_hwsm_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_1_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_HWSM_1_MAC_CONTROL_LS_MASK    ((uint32_t)0x7F000000)
#define MAC_HW0_MU0_DEBUG_HWSM_1_MAC_CONTROL_LS_LSB    24
#define MAC_HW0_MU0_DEBUG_HWSM_1_MAC_CONTROL_LS_WIDTH    ((uint32_t)0x00000007)
#define MAC_HW0_MU0_DEBUG_HWSM_1_TX_CONTROL_LS_MASK    ((uint32_t)0x0001FF00)
#define MAC_HW0_MU0_DEBUG_HWSM_1_TX_CONTROL_LS_LSB    8
#define MAC_HW0_MU0_DEBUG_HWSM_1_TX_CONTROL_LS_WIDTH    ((uint32_t)0x00000009)
#define MAC_HW0_MU0_DEBUG_HWSM_1_RX_CONTROL_LS_MASK    ((uint32_t)0x0000001F)
#define MAC_HW0_MU0_DEBUG_HWSM_1_RX_CONTROL_LS_LSB    0
#define MAC_HW0_MU0_DEBUG_HWSM_1_RX_CONTROL_LS_WIDTH    ((uint32_t)0x00000005)

#define MAC_HW0_MU0_DEBUG_HWSM_1_MAC_CONTROL_LS_RST    0x0
#define MAC_HW0_MU0_DEBUG_HWSM_1_TX_CONTROL_LS_RST    0x0
#define MAC_HW0_MU0_DEBUG_HWSM_1_RX_CONTROL_LS_RST    0x0

__INLINE void mac_hw0_mu0_debug_hwsm_1_unpack(uint8_t* mac_control_ls, uint16_t* tx_control_ls, uint8_t* rx_control_ls)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_1_ADDR);

	*mac_control_ls = (localVal & ((uint32_t)0x7F000000)) >>  24;
	*tx_control_ls = (localVal & ((uint32_t)0x0001FF00)) >>  8;
	*rx_control_ls = (localVal & ((uint32_t)0x0000001F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_debug_hwsm_1_mac_control_ls_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x7F000000)) >> 24);
}
__INLINE uint16_t mac_hw0_mu0_debug_hwsm_1_tx_control_ls_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0001FF00)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_debug_hwsm_1_rx_control_ls_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000001F)) >> 0);
}

/**
 * @brief DEBUG_HWSM_2 register definition
 *  Used to observe the MAC HW state machines. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:23 TX_CONTROL_CS             0x0
 *    22:18 MAC_CONTROL_TX_CS         0x0
 *    17:14 MAC_CONTROL_MASTER_CS     0x0
 *    13:10 DEAGGREGATOR_CS           0x0
 *    09:04 RX_CONTROL_CS             0x0
 *    03:00 MAC_CONTROL_RX_CS         0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_HWSM_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000504)
#define MAC_HW0_MU0_DEBUG_HWSM_2_OFFSET      0x00000504
#define MAC_HW0_MU0_DEBUG_HWSM_2_INDEX       0x00000141
#define MAC_HW0_MU0_DEBUG_HWSM_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_hwsm_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_2_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_HWSM_2_TX_CONTROL_CS_MASK    ((uint32_t)0xFF800000)
#define MAC_HW0_MU0_DEBUG_HWSM_2_TX_CONTROL_CS_LSB    23
#define MAC_HW0_MU0_DEBUG_HWSM_2_TX_CONTROL_CS_WIDTH    ((uint32_t)0x00000009)
#define MAC_HW0_MU0_DEBUG_HWSM_2_MAC_CONTROL_TX_CS_MASK    ((uint32_t)0x007C0000)
#define MAC_HW0_MU0_DEBUG_HWSM_2_MAC_CONTROL_TX_CS_LSB    18
#define MAC_HW0_MU0_DEBUG_HWSM_2_MAC_CONTROL_TX_CS_WIDTH    ((uint32_t)0x00000005)
#define MAC_HW0_MU0_DEBUG_HWSM_2_MAC_CONTROL_MASTER_CS_MASK    ((uint32_t)0x0003C000)
#define MAC_HW0_MU0_DEBUG_HWSM_2_MAC_CONTROL_MASTER_CS_LSB    14
#define MAC_HW0_MU0_DEBUG_HWSM_2_MAC_CONTROL_MASTER_CS_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_DEBUG_HWSM_2_DEAGGREGATOR_CS_MASK    ((uint32_t)0x00003C00)
#define MAC_HW0_MU0_DEBUG_HWSM_2_DEAGGREGATOR_CS_LSB    10
#define MAC_HW0_MU0_DEBUG_HWSM_2_DEAGGREGATOR_CS_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_DEBUG_HWSM_2_RX_CONTROL_CS_MASK    ((uint32_t)0x000003F0)
#define MAC_HW0_MU0_DEBUG_HWSM_2_RX_CONTROL_CS_LSB    4
#define MAC_HW0_MU0_DEBUG_HWSM_2_RX_CONTROL_CS_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_DEBUG_HWSM_2_MAC_CONTROL_RX_CS_MASK    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_DEBUG_HWSM_2_MAC_CONTROL_RX_CS_LSB    0
#define MAC_HW0_MU0_DEBUG_HWSM_2_MAC_CONTROL_RX_CS_WIDTH    ((uint32_t)0x00000004)

#define MAC_HW0_MU0_DEBUG_HWSM_2_TX_CONTROL_CS_RST    0x0
#define MAC_HW0_MU0_DEBUG_HWSM_2_MAC_CONTROL_TX_CS_RST    0x0
#define MAC_HW0_MU0_DEBUG_HWSM_2_MAC_CONTROL_MASTER_CS_RST    0x0
#define MAC_HW0_MU0_DEBUG_HWSM_2_DEAGGREGATOR_CS_RST    0x0
#define MAC_HW0_MU0_DEBUG_HWSM_2_RX_CONTROL_CS_RST    0x0
#define MAC_HW0_MU0_DEBUG_HWSM_2_MAC_CONTROL_RX_CS_RST    0x0

__INLINE void mac_hw0_mu0_debug_hwsm_2_unpack(uint16_t* tx_control_cs, uint8_t* mac_control_tx_cs, uint8_t* mac_control_master_cs, uint8_t* deaggregator_cs, uint8_t* rx_control_cs, uint8_t* mac_control_rx_cs)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_2_ADDR);

	*tx_control_cs = (localVal & ((uint32_t)0xFF800000)) >>  23;
	*mac_control_tx_cs = (localVal & ((uint32_t)0x007C0000)) >>  18;
	*mac_control_master_cs = (localVal & ((uint32_t)0x0003C000)) >>  14;
	*deaggregator_cs = (localVal & ((uint32_t)0x00003C00)) >>  10;
	*rx_control_cs = (localVal & ((uint32_t)0x000003F0)) >>  4;
	*mac_control_rx_cs = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_debug_hwsm_2_tx_control_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFF800000)) >> 23);
}
__INLINE uint8_t mac_hw0_mu0_debug_hwsm_2_mac_control_tx_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x007C0000)) >> 18);
}
__INLINE uint8_t mac_hw0_mu0_debug_hwsm_2_mac_control_master_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0003C000)) >> 14);
}
__INLINE uint8_t mac_hw0_mu0_debug_hwsm_2_deaggregator_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003C00)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_debug_hwsm_2_rx_control_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000003F0)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_debug_hwsm_2_mac_control_rx_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}

/**
 * @brief DEBUG_HWSM_3 register definition
 *  Used to observe the MAC HW state machines. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    24:20 RX_LIST_PROC_FSM_CS       0x0
 *    19:16 DEAGGREGATOR_FSM_CS       0x0
 *    13:08 RX_CONTROLLER_FSM_CS      0x0
 *    07:04 ENCRYPT_RX_CNTRL_FSM_CS   0x0
 *    02:00 DECRYPT_FSM_CS            0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_HWSM_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000508)
#define MAC_HW0_MU0_DEBUG_HWSM_3_OFFSET      0x00000508
#define MAC_HW0_MU0_DEBUG_HWSM_3_INDEX       0x00000142
#define MAC_HW0_MU0_DEBUG_HWSM_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_hwsm_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_3_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_HWSM_3_RX_LIST_PROC_FSM_CS_MASK    ((uint32_t)0x01F00000)
#define MAC_HW0_MU0_DEBUG_HWSM_3_RX_LIST_PROC_FSM_CS_LSB    20
#define MAC_HW0_MU0_DEBUG_HWSM_3_RX_LIST_PROC_FSM_CS_WIDTH    ((uint32_t)0x00000005)
#define MAC_HW0_MU0_DEBUG_HWSM_3_DEAGGREGATOR_FSM_CS_MASK    ((uint32_t)0x000F0000)
#define MAC_HW0_MU0_DEBUG_HWSM_3_DEAGGREGATOR_FSM_CS_LSB    16
#define MAC_HW0_MU0_DEBUG_HWSM_3_DEAGGREGATOR_FSM_CS_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_DEBUG_HWSM_3_RX_CONTROLLER_FSM_CS_MASK    ((uint32_t)0x00003F00)
#define MAC_HW0_MU0_DEBUG_HWSM_3_RX_CONTROLLER_FSM_CS_LSB    8
#define MAC_HW0_MU0_DEBUG_HWSM_3_RX_CONTROLLER_FSM_CS_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_DEBUG_HWSM_3_ENCRYPT_RX_CNTRL_FSM_CS_MASK    ((uint32_t)0x000000F0)
#define MAC_HW0_MU0_DEBUG_HWSM_3_ENCRYPT_RX_CNTRL_FSM_CS_LSB    4
#define MAC_HW0_MU0_DEBUG_HWSM_3_ENCRYPT_RX_CNTRL_FSM_CS_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_DEBUG_HWSM_3_DECRYPT_FSM_CS_MASK    ((uint32_t)0x00000007)
#define MAC_HW0_MU0_DEBUG_HWSM_3_DECRYPT_FSM_CS_LSB    0
#define MAC_HW0_MU0_DEBUG_HWSM_3_DECRYPT_FSM_CS_WIDTH    ((uint32_t)0x00000003)

#define MAC_HW0_MU0_DEBUG_HWSM_3_RX_LIST_PROC_FSM_CS_RST    0x0
#define MAC_HW0_MU0_DEBUG_HWSM_3_DEAGGREGATOR_FSM_CS_RST    0x0
#define MAC_HW0_MU0_DEBUG_HWSM_3_RX_CONTROLLER_FSM_CS_RST    0x0
#define MAC_HW0_MU0_DEBUG_HWSM_3_ENCRYPT_RX_CNTRL_FSM_CS_RST    0x0
#define MAC_HW0_MU0_DEBUG_HWSM_3_DECRYPT_FSM_CS_RST    0x0

__INLINE void mac_hw0_mu0_debug_hwsm_3_unpack(uint8_t* rx_list_proc_fsm_cs, uint8_t* deaggregator_fsm_cs, uint8_t* rx_controller_fsm_cs, uint8_t* encrypt_rx_cntrl_fsm_cs, uint8_t* decrypt_fsm_cs)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_3_ADDR);

	*rx_list_proc_fsm_cs = (localVal & ((uint32_t)0x01F00000)) >>  20;
	*deaggregator_fsm_cs = (localVal & ((uint32_t)0x000F0000)) >>  16;
	*rx_controller_fsm_cs = (localVal & ((uint32_t)0x00003F00)) >>  8;
	*encrypt_rx_cntrl_fsm_cs = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*decrypt_fsm_cs = (localVal & ((uint32_t)0x00000007)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_debug_hwsm_3_rx_list_proc_fsm_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01F00000)) >> 20);
}
__INLINE uint8_t mac_hw0_mu0_debug_hwsm_3_deaggregator_fsm_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000F0000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_debug_hwsm_3_rx_controller_fsm_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003F00)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_debug_hwsm_3_encrypt_rx_cntrl_fsm_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_debug_hwsm_3_decrypt_fsm_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HWSM_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000007)) >> 0);
}

/**
 * @brief DEBUG_PORT_VALUE register definition
 *  Return the current value of the debugPort register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 DEBUG_PORT_READ           0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_PORT_VALUE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000050C)
#define MAC_HW0_MU0_DEBUG_PORT_VALUE_OFFSET      0x0000050C
#define MAC_HW0_MU0_DEBUG_PORT_VALUE_INDEX       0x00000143
#define MAC_HW0_MU0_DEBUG_PORT_VALUE_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_port_value_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_VALUE_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_PORT_VALUE_DEBUG_PORT_READ_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEBUG_PORT_VALUE_DEBUG_PORT_READ_LSB    0
#define MAC_HW0_MU0_DEBUG_PORT_VALUE_DEBUG_PORT_READ_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEBUG_PORT_VALUE_DEBUG_PORT_READ_RST    0x0

__INLINE uint32_t mac_hw0_mu0_debug_port_value_debug_port_read_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_VALUE_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_PORT_SEL_A register definition
 *  Used to multiplex different sets of signals on the debug pins. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 DEBUG_PORT_SEL_1          0x0
 *    07:00 DEBUG_PORT_SEL_0          0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_PORT_SEL_A_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000510)
#define MAC_HW0_MU0_DEBUG_PORT_SEL_A_OFFSET      0x00000510
#define MAC_HW0_MU0_DEBUG_PORT_SEL_A_INDEX       0x00000144
#define MAC_HW0_MU0_DEBUG_PORT_SEL_A_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_port_sel_a_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_A_ADDR);
}

__INLINE void mac_hw0_mu0_debug_port_sel_a_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_SEL_A_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_PORT_SEL_A_DEBUG_PORT_SEL_1_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_DEBUG_PORT_SEL_A_DEBUG_PORT_SEL_1_LSB    8
#define MAC_HW0_MU0_DEBUG_PORT_SEL_A_DEBUG_PORT_SEL_1_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DEBUG_PORT_SEL_A_DEBUG_PORT_SEL_0_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_DEBUG_PORT_SEL_A_DEBUG_PORT_SEL_0_LSB    0
#define MAC_HW0_MU0_DEBUG_PORT_SEL_A_DEBUG_PORT_SEL_0_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_DEBUG_PORT_SEL_A_DEBUG_PORT_SEL_1_RST    0x0
#define MAC_HW0_MU0_DEBUG_PORT_SEL_A_DEBUG_PORT_SEL_0_RST    0x0

__INLINE void mac_hw0_mu0_debug_port_sel_a_pack(uint8_t debug_port_sel_1, uint8_t debug_port_sel_0)
{
	ASSERT_ERR((((uint32_t)debug_port_sel_1 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)debug_port_sel_0 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_SEL_A_ADDR,  ((uint32_t)debug_port_sel_1 << 8) |((uint32_t)debug_port_sel_0 << 0));
}

__INLINE void mac_hw0_mu0_debug_port_sel_a_unpack(uint8_t* debug_port_sel_1, uint8_t* debug_port_sel_0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_A_ADDR);

	*debug_port_sel_1 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*debug_port_sel_0 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_debug_port_sel_a_debug_port_sel_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_A_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_debug_port_sel_a_debug_port_sel_1_setf(uint8_t debugportsel1)
{
	ASSERT_ERR((((uint32_t)debugportsel1 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_SEL_A_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_A_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)debugportsel1 <<8));
}
__INLINE uint8_t mac_hw0_mu0_debug_port_sel_a_debug_port_sel_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_A_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_debug_port_sel_a_debug_port_sel_0_setf(uint8_t debugportsel0)
{
	ASSERT_ERR((((uint32_t)debugportsel0 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_SEL_A_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_A_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)debugportsel0 <<0));
}

/**
 * @brief NAV_VALUE register definition
 *  Current value of the NAV and CW for debug. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25:00 NAV_COUNTER               0x0
 * </pre>
 */
#define MAC_HW0_MU0_NAV_VALUE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000514)
#define MAC_HW0_MU0_NAV_VALUE_OFFSET      0x00000514
#define MAC_HW0_MU0_NAV_VALUE_INDEX       0x00000145
#define MAC_HW0_MU0_NAV_VALUE_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_nav_value_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_NAV_VALUE_ADDR);
}

// field definitions
#define MAC_HW0_MU0_NAV_VALUE_NAV_COUNTER_MASK    ((uint32_t)0x03FFFFFF)
#define MAC_HW0_MU0_NAV_VALUE_NAV_COUNTER_LSB    0
#define MAC_HW0_MU0_NAV_VALUE_NAV_COUNTER_WIDTH    ((uint32_t)0x0000001A)

#define MAC_HW0_MU0_NAV_VALUE_NAV_COUNTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_nav_value_nav_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_NAV_VALUE_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_CW register definition
 *  Current value of the NAV and CW for debug. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25:24 BACKOFF_OFFSET            0x0
 *    18:16 ACTIVE_AC                 0x0
 *    15:12 CURRENT_CW_3              0x2
 *    11:08 CURRENT_CW_2              0x3
 *    07:04 CURRENT_CW_1              0x4
 *    03:00 CURRENT_CW_0              0x4
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_CW_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000518)
#define MAC_HW0_MU0_DEBUG_CW_OFFSET      0x00000518
#define MAC_HW0_MU0_DEBUG_CW_INDEX       0x00000146
#define MAC_HW0_MU0_DEBUG_CW_RESET       0x00002344

__INLINE uint32_t  mac_hw0_mu0_debug_cw_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_CW_ADDR);
}

__INLINE void mac_hw0_mu0_debug_cw_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DEBUG_CW_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_CW_BACKOFF_OFFSET_MASK    ((uint32_t)0x03000000)
#define MAC_HW0_MU0_DEBUG_CW_BACKOFF_OFFSET_LSB    24
#define MAC_HW0_MU0_DEBUG_CW_BACKOFF_OFFSET_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DEBUG_CW_ACTIVE_AC_MASK    ((uint32_t)0x00070000)
#define MAC_HW0_MU0_DEBUG_CW_ACTIVE_AC_LSB    16
#define MAC_HW0_MU0_DEBUG_CW_ACTIVE_AC_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_DEBUG_CW_CURRENT_CW_3_MASK    ((uint32_t)0x0000F000)
#define MAC_HW0_MU0_DEBUG_CW_CURRENT_CW_3_LSB    12
#define MAC_HW0_MU0_DEBUG_CW_CURRENT_CW_3_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_DEBUG_CW_CURRENT_CW_2_MASK    ((uint32_t)0x00000F00)
#define MAC_HW0_MU0_DEBUG_CW_CURRENT_CW_2_LSB    8
#define MAC_HW0_MU0_DEBUG_CW_CURRENT_CW_2_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_DEBUG_CW_CURRENT_CW_1_MASK    ((uint32_t)0x000000F0)
#define MAC_HW0_MU0_DEBUG_CW_CURRENT_CW_1_LSB    4
#define MAC_HW0_MU0_DEBUG_CW_CURRENT_CW_1_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_DEBUG_CW_CURRENT_CW_0_MASK    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_DEBUG_CW_CURRENT_CW_0_LSB    0
#define MAC_HW0_MU0_DEBUG_CW_CURRENT_CW_0_WIDTH    ((uint32_t)0x00000004)

#define MAC_HW0_MU0_DEBUG_CW_BACKOFF_OFFSET_RST    0x0
#define MAC_HW0_MU0_DEBUG_CW_ACTIVE_AC_RST    0x0
#define MAC_HW0_MU0_DEBUG_CW_CURRENT_CW_3_RST    0x2
#define MAC_HW0_MU0_DEBUG_CW_CURRENT_CW_2_RST    0x3
#define MAC_HW0_MU0_DEBUG_CW_CURRENT_CW_1_RST    0x4
#define MAC_HW0_MU0_DEBUG_CW_CURRENT_CW_0_RST    0x4

__INLINE void mac_hw0_mu0_debug_cw_pack(uint8_t backoff_offset, uint8_t active_ac, uint8_t current_cw_3, uint8_t current_cw_2, uint8_t current_cw_1, uint8_t current_cw_0)
{
	ASSERT_ERR((((uint32_t)backoff_offset << 24) & ~((uint32_t)0x03000000)) == 0);
	ASSERT_ERR((((uint32_t)active_ac << 16) & ~((uint32_t)0x00070000)) == 0);
	ASSERT_ERR((((uint32_t)current_cw_3 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)current_cw_2 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)current_cw_1 << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)current_cw_0 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_CW_ADDR,  ((uint32_t)backoff_offset << 24) |((uint32_t)active_ac << 16) |((uint32_t)current_cw_3 << 12) |((uint32_t)current_cw_2 << 8) |((uint32_t)current_cw_1 << 4) |((uint32_t)current_cw_0 << 0));
}

__INLINE void mac_hw0_mu0_debug_cw_unpack(uint8_t* backoff_offset, uint8_t* active_ac, uint8_t* current_cw_3, uint8_t* current_cw_2, uint8_t* current_cw_1, uint8_t* current_cw_0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_CW_ADDR);

	*backoff_offset = (localVal & ((uint32_t)0x03000000)) >>  24;
	*active_ac = (localVal & ((uint32_t)0x00070000)) >>  16;
	*current_cw_3 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*current_cw_2 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*current_cw_1 = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*current_cw_0 = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_debug_cw_backoff_offset_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_CW_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x03000000)) >> 24);
}
__INLINE void mac_hw0_mu0_debug_cw_backoff_offset_setf(uint8_t backoffoffset)
{
	ASSERT_ERR((((uint32_t)backoffoffset << 24) & ~((uint32_t)0x03000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_CW_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_CW_ADDR) & ~((uint32_t)0x03000000)) | ((uint32_t)backoffoffset <<24));
}
__INLINE uint8_t mac_hw0_mu0_debug_cw_active_ac_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_CW_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00070000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_debug_cw_current_cw_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_CW_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_debug_cw_current_cw_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_CW_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_debug_cw_current_cw_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_CW_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_debug_cw_current_cw_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_CW_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}

/**
 * @brief DEBUG_QSRC register definition
 *  Current value of the QoS Station Short Retry Counter for debug. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 AC_3_QSRC                 0x0
 *    23:16 AC_2_QSRC                 0x0
 *    15:08 AC_1_QSRC                 0x0
 *    07:00 AC_0_QSRC                 0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_QSRC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000051C)
#define MAC_HW0_MU0_DEBUG_QSRC_OFFSET      0x0000051C
#define MAC_HW0_MU0_DEBUG_QSRC_INDEX       0x00000147
#define MAC_HW0_MU0_DEBUG_QSRC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_qsrc_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_QSRC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_QSRC_AC_3_QSRC_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_DEBUG_QSRC_AC_3_QSRC_LSB    24
#define MAC_HW0_MU0_DEBUG_QSRC_AC_3_QSRC_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DEBUG_QSRC_AC_2_QSRC_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_DEBUG_QSRC_AC_2_QSRC_LSB    16
#define MAC_HW0_MU0_DEBUG_QSRC_AC_2_QSRC_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DEBUG_QSRC_AC_1_QSRC_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_DEBUG_QSRC_AC_1_QSRC_LSB    8
#define MAC_HW0_MU0_DEBUG_QSRC_AC_1_QSRC_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DEBUG_QSRC_AC_0_QSRC_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_DEBUG_QSRC_AC_0_QSRC_LSB    0
#define MAC_HW0_MU0_DEBUG_QSRC_AC_0_QSRC_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_DEBUG_QSRC_AC_3_QSRC_RST    0x0
#define MAC_HW0_MU0_DEBUG_QSRC_AC_2_QSRC_RST    0x0
#define MAC_HW0_MU0_DEBUG_QSRC_AC_1_QSRC_RST    0x0
#define MAC_HW0_MU0_DEBUG_QSRC_AC_0_QSRC_RST    0x0

__INLINE void mac_hw0_mu0_debug_qsrc_unpack(uint8_t* ac_3_qsrc, uint8_t* ac_2_qsrc, uint8_t* ac_1_qsrc, uint8_t* ac_0_qsrc)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_QSRC_ADDR);

	*ac_3_qsrc = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*ac_2_qsrc = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*ac_1_qsrc = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*ac_0_qsrc = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_debug_qsrc_ac_3_qsrc_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_QSRC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_debug_qsrc_ac_2_qsrc_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_QSRC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_debug_qsrc_ac_1_qsrc_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_QSRC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_debug_qsrc_ac_0_qsrc_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_QSRC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}

/**
 * @brief DEBUG_QLRC register definition
 *  Current value of the QoS Station Long Retry Counter for debug. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 AC_3_QLRC                 0x0
 *    23:16 AC_2_QLRC                 0x0
 *    15:08 AC_1_QLRC                 0x0
 *    07:00 AC_0_QLRC                 0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_QLRC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000520)
#define MAC_HW0_MU0_DEBUG_QLRC_OFFSET      0x00000520
#define MAC_HW0_MU0_DEBUG_QLRC_INDEX       0x00000148
#define MAC_HW0_MU0_DEBUG_QLRC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_qlrc_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_QLRC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_QLRC_AC_3_QLRC_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_DEBUG_QLRC_AC_3_QLRC_LSB    24
#define MAC_HW0_MU0_DEBUG_QLRC_AC_3_QLRC_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DEBUG_QLRC_AC_2_QLRC_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_DEBUG_QLRC_AC_2_QLRC_LSB    16
#define MAC_HW0_MU0_DEBUG_QLRC_AC_2_QLRC_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DEBUG_QLRC_AC_1_QLRC_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_DEBUG_QLRC_AC_1_QLRC_LSB    8
#define MAC_HW0_MU0_DEBUG_QLRC_AC_1_QLRC_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DEBUG_QLRC_AC_0_QLRC_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_DEBUG_QLRC_AC_0_QLRC_LSB    0
#define MAC_HW0_MU0_DEBUG_QLRC_AC_0_QLRC_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_DEBUG_QLRC_AC_3_QLRC_RST    0x0
#define MAC_HW0_MU0_DEBUG_QLRC_AC_2_QLRC_RST    0x0
#define MAC_HW0_MU0_DEBUG_QLRC_AC_1_QLRC_RST    0x0
#define MAC_HW0_MU0_DEBUG_QLRC_AC_0_QLRC_RST    0x0

__INLINE void mac_hw0_mu0_debug_qlrc_unpack(uint8_t* ac_3_qlrc, uint8_t* ac_2_qlrc, uint8_t* ac_1_qlrc, uint8_t* ac_0_qlrc)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_QLRC_ADDR);

	*ac_3_qlrc = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*ac_2_qlrc = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*ac_1_qlrc = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*ac_0_qlrc = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_debug_qlrc_ac_3_qlrc_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_QLRC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_debug_qlrc_ac_2_qlrc_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_QLRC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_debug_qlrc_ac_1_qlrc_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_QLRC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_debug_qlrc_ac_0_qlrc_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_QLRC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}

/**
 * @brief DEBUG_PORT_SEL_B register definition
 *  Used to multiplex different sets of signals on the register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 DEBUG_PORT_SEL_3          0x0
 *    07:00 DEBUG_PORT_SEL_2          0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_PORT_SEL_B_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000530)
#define MAC_HW0_MU0_DEBUG_PORT_SEL_B_OFFSET      0x00000530
#define MAC_HW0_MU0_DEBUG_PORT_SEL_B_INDEX       0x0000014C
#define MAC_HW0_MU0_DEBUG_PORT_SEL_B_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_port_sel_b_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_B_ADDR);
}

__INLINE void mac_hw0_mu0_debug_port_sel_b_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_SEL_B_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_PORT_SEL_B_DEBUG_PORT_SEL_3_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_DEBUG_PORT_SEL_B_DEBUG_PORT_SEL_3_LSB    8
#define MAC_HW0_MU0_DEBUG_PORT_SEL_B_DEBUG_PORT_SEL_3_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DEBUG_PORT_SEL_B_DEBUG_PORT_SEL_2_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_DEBUG_PORT_SEL_B_DEBUG_PORT_SEL_2_LSB    0
#define MAC_HW0_MU0_DEBUG_PORT_SEL_B_DEBUG_PORT_SEL_2_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_DEBUG_PORT_SEL_B_DEBUG_PORT_SEL_3_RST    0x0
#define MAC_HW0_MU0_DEBUG_PORT_SEL_B_DEBUG_PORT_SEL_2_RST    0x0

__INLINE void mac_hw0_mu0_debug_port_sel_b_pack(uint8_t debug_port_sel_3, uint8_t debug_port_sel_2)
{
	ASSERT_ERR((((uint32_t)debug_port_sel_3 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)debug_port_sel_2 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_SEL_B_ADDR,  ((uint32_t)debug_port_sel_3 << 8) |((uint32_t)debug_port_sel_2 << 0));
}

__INLINE void mac_hw0_mu0_debug_port_sel_b_unpack(uint8_t* debug_port_sel_3, uint8_t* debug_port_sel_2)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_B_ADDR);

	*debug_port_sel_3 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*debug_port_sel_2 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_debug_port_sel_b_debug_port_sel_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_B_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_debug_port_sel_b_debug_port_sel_3_setf(uint8_t debugportsel3)
{
	ASSERT_ERR((((uint32_t)debugportsel3 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_SEL_B_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_B_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)debugportsel3 <<8));
}
__INLINE uint8_t mac_hw0_mu0_debug_port_sel_b_debug_port_sel_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_B_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_debug_port_sel_b_debug_port_sel_2_setf(uint8_t debugportsel2)
{
	ASSERT_ERR((((uint32_t)debugportsel2 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_SEL_B_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_B_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)debugportsel2 <<0));
}

/**
 * @brief DEBUG_PORT_SEL_C register definition
 *  Used to multiplex different sets of signals on the register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 DEBUG_PORT_SEL_5          0x0
 *    07:00 DEBUG_PORT_SEL_4          0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_PORT_SEL_C_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000534)
#define MAC_HW0_MU0_DEBUG_PORT_SEL_C_OFFSET      0x00000534
#define MAC_HW0_MU0_DEBUG_PORT_SEL_C_INDEX       0x0000014D
#define MAC_HW0_MU0_DEBUG_PORT_SEL_C_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_port_sel_c_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_C_ADDR);
}

__INLINE void mac_hw0_mu0_debug_port_sel_c_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_SEL_C_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_PORT_SEL_C_DEBUG_PORT_SEL_5_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_DEBUG_PORT_SEL_C_DEBUG_PORT_SEL_5_LSB    8
#define MAC_HW0_MU0_DEBUG_PORT_SEL_C_DEBUG_PORT_SEL_5_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DEBUG_PORT_SEL_C_DEBUG_PORT_SEL_4_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_DEBUG_PORT_SEL_C_DEBUG_PORT_SEL_4_LSB    0
#define MAC_HW0_MU0_DEBUG_PORT_SEL_C_DEBUG_PORT_SEL_4_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_DEBUG_PORT_SEL_C_DEBUG_PORT_SEL_5_RST    0x0
#define MAC_HW0_MU0_DEBUG_PORT_SEL_C_DEBUG_PORT_SEL_4_RST    0x0

__INLINE void mac_hw0_mu0_debug_port_sel_c_pack(uint8_t debug_port_sel_5, uint8_t debug_port_sel_4)
{
	ASSERT_ERR((((uint32_t)debug_port_sel_5 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)debug_port_sel_4 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_SEL_C_ADDR,  ((uint32_t)debug_port_sel_5 << 8) |((uint32_t)debug_port_sel_4 << 0));
}

__INLINE void mac_hw0_mu0_debug_port_sel_c_unpack(uint8_t* debug_port_sel_5, uint8_t* debug_port_sel_4)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_C_ADDR);

	*debug_port_sel_5 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*debug_port_sel_4 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_debug_port_sel_c_debug_port_sel_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_C_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_debug_port_sel_c_debug_port_sel_5_setf(uint8_t debugportsel5)
{
	ASSERT_ERR((((uint32_t)debugportsel5 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_SEL_C_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_C_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)debugportsel5 <<8));
}
__INLINE uint8_t mac_hw0_mu0_debug_port_sel_c_debug_port_sel_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_C_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_debug_port_sel_c_debug_port_sel_4_setf(uint8_t debugportsel4)
{
	ASSERT_ERR((((uint32_t)debugportsel4 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_SEL_C_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_SEL_C_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)debugportsel4 <<0));
}

/**
 * @brief DEBUG_PORT_EN register definition
 *  Used to determine which debug ports are enabled register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    05    EN5                       0              
 *    04    EN4                       0              
 *    03    EN3                       0              
 *    02    EN2                       0              
 *    01    EN1                       0              
 *    00    EN0                       0              
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_PORT_EN_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000538)
#define MAC_HW0_MU0_DEBUG_PORT_EN_OFFSET      0x00000538
#define MAC_HW0_MU0_DEBUG_PORT_EN_INDEX       0x0000014E
#define MAC_HW0_MU0_DEBUG_PORT_EN_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_port_en_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR);
}

__INLINE void mac_hw0_mu0_debug_port_en_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_5_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_5_POS    5
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_4_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_4_POS    4
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_3_POS    3
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_2_POS    2
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_1_POS    1
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_0_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_0_POS    0

#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_5_RST    0x0
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_4_RST    0x0
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_3_RST    0x0
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_2_RST    0x0
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_1_RST    0x0
#define MAC_HW0_MU0_DEBUG_PORT_EN_EN_0_RST    0x0

__INLINE void mac_hw0_mu0_debug_port_en_pack(uint8_t en5, uint8_t en4, uint8_t en3, uint8_t en2, uint8_t en1, uint8_t en0)
{
	ASSERT_ERR((((uint32_t)en5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)en4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)en3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)en2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)en1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)en0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR,  ((uint32_t)en5 << 5) |((uint32_t)en4 << 4) |((uint32_t)en3 << 3) |((uint32_t)en2 << 2) |((uint32_t)en1 << 1) |((uint32_t)en0 << 0));
}

__INLINE void mac_hw0_mu0_debug_port_en_unpack(uint8_t* en5, uint8_t* en4, uint8_t* en3, uint8_t* en2, uint8_t* en1, uint8_t* en0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR);

	*en5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*en4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*en3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*en2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*en1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*en0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_debug_port_en_en_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_debug_port_en_en_5_setf(uint8_t en5)
{
	ASSERT_ERR((((uint32_t)en5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)en5 <<5));
}
__INLINE uint8_t mac_hw0_mu0_debug_port_en_en_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_debug_port_en_en_4_setf(uint8_t en4)
{
	ASSERT_ERR((((uint32_t)en4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)en4 <<4));
}
__INLINE uint8_t mac_hw0_mu0_debug_port_en_en_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_debug_port_en_en_3_setf(uint8_t en3)
{
	ASSERT_ERR((((uint32_t)en3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)en3 <<3));
}
__INLINE uint8_t mac_hw0_mu0_debug_port_en_en_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_debug_port_en_en_2_setf(uint8_t en2)
{
	ASSERT_ERR((((uint32_t)en2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)en2 <<2));
}
__INLINE uint8_t mac_hw0_mu0_debug_port_en_en_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_debug_port_en_en_1_setf(uint8_t en1)
{
	ASSERT_ERR((((uint32_t)en1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)en1 <<1));
}
__INLINE uint8_t mac_hw0_mu0_debug_port_en_en_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_debug_port_en_en_0_setf(uint8_t en0)
{
	ASSERT_ERR((((uint32_t)en0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_EN_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)en0 <<0));
}

/**
 * @brief DEBUG_PORT_CNTRL register definition
 *  Control debug port width and mux register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    09    MPIF_DEBUG_ENABLE         0              
 *    08    DEBUG_BUS_MODE            0              
 *    03:00 DEBUG_TOP_SELECT          0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_PORT_CNTRL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000053C)
#define MAC_HW0_MU0_DEBUG_PORT_CNTRL_OFFSET      0x0000053C
#define MAC_HW0_MU0_DEBUG_PORT_CNTRL_INDEX       0x0000014F
#define MAC_HW0_MU0_DEBUG_PORT_CNTRL_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_port_cntrl_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_CNTRL_ADDR);
}

__INLINE void mac_hw0_mu0_debug_port_cntrl_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_CNTRL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_PORT_CNTRL_MPIF_DEBUG_ENABLE_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_DEBUG_PORT_CNTRL_MPIF_DEBUG_ENABLE_POS    9
#define MAC_HW0_MU0_DEBUG_PORT_CNTRL_DEBUG_BUS_MODE_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_DEBUG_PORT_CNTRL_DEBUG_BUS_MODE_POS    8
#define MAC_HW0_MU0_DEBUG_PORT_CNTRL_DEBUG_TOP_SELECT_MASK    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_DEBUG_PORT_CNTRL_DEBUG_TOP_SELECT_LSB    0
#define MAC_HW0_MU0_DEBUG_PORT_CNTRL_DEBUG_TOP_SELECT_WIDTH    ((uint32_t)0x00000004)

#define MAC_HW0_MU0_DEBUG_PORT_CNTRL_MPIF_DEBUG_ENABLE_RST    0x0
#define MAC_HW0_MU0_DEBUG_PORT_CNTRL_DEBUG_BUS_MODE_RST    0x0
#define MAC_HW0_MU0_DEBUG_PORT_CNTRL_DEBUG_TOP_SELECT_RST    0x0

__INLINE void mac_hw0_mu0_debug_port_cntrl_pack(uint8_t mpif_debug_enable, uint8_t debug_bus_mode, uint8_t debug_top_select)
{
	ASSERT_ERR((((uint32_t)mpif_debug_enable << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)debug_bus_mode << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)debug_top_select << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_CNTRL_ADDR,  ((uint32_t)mpif_debug_enable << 9) |((uint32_t)debug_bus_mode << 8) |((uint32_t)debug_top_select << 0));
}

__INLINE void mac_hw0_mu0_debug_port_cntrl_unpack(uint8_t* mpif_debug_enable, uint8_t* debug_bus_mode, uint8_t* debug_top_select)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_CNTRL_ADDR);

	*mpif_debug_enable = (localVal & ((uint32_t)0x00000200)) >>  9;
	*debug_bus_mode = (localVal & ((uint32_t)0x00000100)) >>  8;
	*debug_top_select = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_debug_port_cntrl_mpif_debug_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_debug_port_cntrl_mpif_debug_enable_setf(uint8_t mpifdebugenable)
{
	ASSERT_ERR((((uint32_t)mpifdebugenable << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_CNTRL_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)mpifdebugenable <<9));
}
__INLINE uint8_t mac_hw0_mu0_debug_port_cntrl_debug_bus_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_debug_port_cntrl_debug_bus_mode_setf(uint8_t debugbusmode)
{
	ASSERT_ERR((((uint32_t)debugbusmode << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_CNTRL_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)debugbusmode <<8));
}
__INLINE uint8_t mac_hw0_mu0_debug_port_cntrl_debug_top_select_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void mac_hw0_mu0_debug_port_cntrl_debug_top_select_setf(uint8_t debugtopselect)
{
	ASSERT_ERR((((uint32_t)debugtopselect << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PORT_CNTRL_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PORT_CNTRL_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)debugtopselect <<0));
}

/**
 * @brief DEBUG_TXOP_HOLDER_LOW_ADD register definition
 *  Indicates TXOP HOLDER ADDR LOW register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TXOP_HOLDER_LOW_ADDR      0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_TXOP_HOLDER_LOW_ADD_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000540)
#define MAC_HW0_MU0_DEBUG_TXOP_HOLDER_LOW_ADD_OFFSET      0x00000540
#define MAC_HW0_MU0_DEBUG_TXOP_HOLDER_LOW_ADD_INDEX       0x00000150
#define MAC_HW0_MU0_DEBUG_TXOP_HOLDER_LOW_ADD_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_txop_holder_low_add_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_TXOP_HOLDER_LOW_ADD_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_TXOP_HOLDER_LOW_ADD_TXOP_HOLDER_LOW_ADDR_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEBUG_TXOP_HOLDER_LOW_ADD_TXOP_HOLDER_LOW_ADDR_LSB    0
#define MAC_HW0_MU0_DEBUG_TXOP_HOLDER_LOW_ADD_TXOP_HOLDER_LOW_ADDR_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEBUG_TXOP_HOLDER_LOW_ADD_TXOP_HOLDER_LOW_ADDR_RST    0x0

__INLINE uint32_t mac_hw0_mu0_debug_txop_holder_low_add_txop_holder_low_addr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_TXOP_HOLDER_LOW_ADD_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_TXOP_HOLDER_HIGH_AD register definition
 *  Indicates TXOP HOLDER ADDR HIGH register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 TXOP_HOLDER_HIGH_ADDR     0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_TXOP_HOLDER_HIGH_AD_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000544)
#define MAC_HW0_MU0_DEBUG_TXOP_HOLDER_HIGH_AD_OFFSET      0x00000544
#define MAC_HW0_MU0_DEBUG_TXOP_HOLDER_HIGH_AD_INDEX       0x00000151
#define MAC_HW0_MU0_DEBUG_TXOP_HOLDER_HIGH_AD_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_txop_holder_high_ad_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_TXOP_HOLDER_HIGH_AD_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_TXOP_HOLDER_HIGH_AD_TXOP_HOLDER_HIGH_ADDR_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_DEBUG_TXOP_HOLDER_HIGH_AD_TXOP_HOLDER_HIGH_ADDR_LSB    0
#define MAC_HW0_MU0_DEBUG_TXOP_HOLDER_HIGH_AD_TXOP_HOLDER_HIGH_ADDR_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_DEBUG_TXOP_HOLDER_HIGH_AD_TXOP_HOLDER_HIGH_ADDR_RST    0x0

__INLINE uint16_t mac_hw0_mu0_debug_txop_holder_high_ad_txop_holder_high_addr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_TXOP_HOLDER_HIGH_AD_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief DEBUG_PHY register definition
 *  Used to observe the DMA HW state machines. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    05:04 CCA_FILTER_CONFIG         0x0
 *    02    RX_REQ_ALWAYS_ON          0              
 *    01    FORCE_RX_REQ_ACK_MATCH    1              
 *    00    RX_REQ_FORCE_DEASSERTION  0              
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_PHY_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000055C)
#define MAC_HW0_MU0_DEBUG_PHY_OFFSET      0x0000055C
#define MAC_HW0_MU0_DEBUG_PHY_INDEX       0x00000157
#define MAC_HW0_MU0_DEBUG_PHY_RESET       0x00000002

__INLINE uint32_t  mac_hw0_mu0_debug_phy_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_PHY_ADDR);
}

__INLINE void mac_hw0_mu0_debug_phy_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PHY_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_PHY_CCA_FILTER_CONFIG_MASK    ((uint32_t)0x00000030)
#define MAC_HW0_MU0_DEBUG_PHY_CCA_FILTER_CONFIG_LSB    4
#define MAC_HW0_MU0_DEBUG_PHY_CCA_FILTER_CONFIG_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DEBUG_PHY_RX_REQ_ALWAYS_ON_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_DEBUG_PHY_RX_REQ_ALWAYS_ON_POS    2
#define MAC_HW0_MU0_DEBUG_PHY_FORCE_RX_REQ_ACK_MATCH_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DEBUG_PHY_FORCE_RX_REQ_ACK_MATCH_POS    1
#define MAC_HW0_MU0_DEBUG_PHY_RX_REQ_FORCE_DEASSERTION_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_DEBUG_PHY_RX_REQ_FORCE_DEASSERTION_POS    0

#define MAC_HW0_MU0_DEBUG_PHY_CCA_FILTER_CONFIG_RST    0x0
#define MAC_HW0_MU0_DEBUG_PHY_RX_REQ_ALWAYS_ON_RST    0x0
#define MAC_HW0_MU0_DEBUG_PHY_FORCE_RX_REQ_ACK_MATCH_RST    0x1
#define MAC_HW0_MU0_DEBUG_PHY_RX_REQ_FORCE_DEASSERTION_RST    0x0

__INLINE void mac_hw0_mu0_debug_phy_pack(uint8_t cca_filter_config, uint8_t rx_req_always_on, uint8_t force_rx_req_ack_match, uint8_t rx_req_force_deassertion)
{
	ASSERT_ERR((((uint32_t)cca_filter_config << 4) & ~((uint32_t)0x00000030)) == 0);
	ASSERT_ERR((((uint32_t)rx_req_always_on << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)force_rx_req_ack_match << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)rx_req_force_deassertion << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PHY_ADDR,  ((uint32_t)cca_filter_config << 4) |((uint32_t)rx_req_always_on << 2) |((uint32_t)force_rx_req_ack_match << 1) |((uint32_t)rx_req_force_deassertion << 0));
}

__INLINE void mac_hw0_mu0_debug_phy_unpack(uint8_t* cca_filter_config, uint8_t* rx_req_always_on, uint8_t* force_rx_req_ack_match, uint8_t* rx_req_force_deassertion)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PHY_ADDR);

	*cca_filter_config = (localVal & ((uint32_t)0x00000030)) >>  4;
	*rx_req_always_on = (localVal & ((uint32_t)0x00000004)) >>  2;
	*force_rx_req_ack_match = (localVal & ((uint32_t)0x00000002)) >>  1;
	*rx_req_force_deassertion = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_debug_phy_cca_filter_config_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PHY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000030)) >> 4);
}
__INLINE void mac_hw0_mu0_debug_phy_cca_filter_config_setf(uint8_t ccafilterconfig)
{
	ASSERT_ERR((((uint32_t)ccafilterconfig << 4) & ~((uint32_t)0x00000030)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PHY_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PHY_ADDR) & ~((uint32_t)0x00000030)) | ((uint32_t)ccafilterconfig <<4));
}
__INLINE uint8_t mac_hw0_mu0_debug_phy_rx_req_always_on_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PHY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_debug_phy_rx_req_always_on_setf(uint8_t rxreqalwayson)
{
	ASSERT_ERR((((uint32_t)rxreqalwayson << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PHY_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PHY_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)rxreqalwayson <<2));
}
__INLINE uint8_t mac_hw0_mu0_debug_phy_force_rx_req_ack_match_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PHY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_debug_phy_force_rx_req_ack_match_setf(uint8_t forcerxreqackmatch)
{
	ASSERT_ERR((((uint32_t)forcerxreqackmatch << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PHY_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PHY_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)forcerxreqackmatch <<1));
}
__INLINE uint8_t mac_hw0_mu0_debug_phy_rx_req_force_deassertion_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_PHY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_debug_phy_rx_req_force_deassertion_setf(uint8_t rxreqforcedeassertion)
{
	ASSERT_ERR((((uint32_t)rxreqforcedeassertion << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DEBUG_PHY_ADDR, (REG_PL_RD(MAC_HW0_MU0_DEBUG_PHY_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)rxreqforcedeassertion <<0));
}

/**
 * @brief BFR_TX_PCI_1 register definition
 *  BeamForming Report TX parameters 1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    16:15 user_Position             0x0
 *    14    fec_Coding_PT             0              
 *    13:12 stbc_PT                   0x0
 *    11:08 PAdetect                  0x0
 *    07:00 tx_Pwr_Level_PT           0x0
 * </pre>
 */
#define MAC_HW0_MU0_BFR_TX_PCI_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000560)
#define MAC_HW0_MU0_BFR_TX_PCI_1_OFFSET      0x00000560
#define MAC_HW0_MU0_BFR_TX_PCI_1_INDEX       0x00000158
#define MAC_HW0_MU0_BFR_TX_PCI_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_bfr_tx_pci_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR);
}

__INLINE void mac_hw0_mu0_bfr_tx_pci_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BFR_TX_PCI_1_USER_POSITION_MASK    ((uint32_t)0x00018000)
#define MAC_HW0_MU0_BFR_TX_PCI_1_USER_POSITION_LSB    15
#define MAC_HW0_MU0_BFR_TX_PCI_1_USER_POSITION_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_BFR_TX_PCI_1_FEC_CODING_PT_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_BFR_TX_PCI_1_FEC_CODING_PT_POS    14
#define MAC_HW0_MU0_BFR_TX_PCI_1_STBC_PT_MASK    ((uint32_t)0x00003000)
#define MAC_HW0_MU0_BFR_TX_PCI_1_STBC_PT_LSB    12
#define MAC_HW0_MU0_BFR_TX_PCI_1_STBC_PT_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_BFR_TX_PCI_1_PADETECT_MASK    ((uint32_t)0x00000F00)
#define MAC_HW0_MU0_BFR_TX_PCI_1_PADETECT_LSB    8
#define MAC_HW0_MU0_BFR_TX_PCI_1_PADETECT_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_BFR_TX_PCI_1_TX_PWR_LEVEL_PT_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_BFR_TX_PCI_1_TX_PWR_LEVEL_PT_LSB    0
#define MAC_HW0_MU0_BFR_TX_PCI_1_TX_PWR_LEVEL_PT_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_BFR_TX_PCI_1_USER_POSITION_RST    0x0
#define MAC_HW0_MU0_BFR_TX_PCI_1_FEC_CODING_PT_RST    0x0
#define MAC_HW0_MU0_BFR_TX_PCI_1_STBC_PT_RST    0x0
#define MAC_HW0_MU0_BFR_TX_PCI_1_PADETECT_RST    0x0
#define MAC_HW0_MU0_BFR_TX_PCI_1_TX_PWR_LEVEL_PT_RST    0x0

__INLINE void mac_hw0_mu0_bfr_tx_pci_1_pack(uint8_t user_position, uint8_t fec_coding_pt, uint8_t stbc_pt, uint8_t padetect, uint8_t tx_pwr_level_pt)
{
	ASSERT_ERR((((uint32_t)user_position << 15) & ~((uint32_t)0x00018000)) == 0);
	ASSERT_ERR((((uint32_t)fec_coding_pt << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)stbc_pt << 12) & ~((uint32_t)0x00003000)) == 0);
	ASSERT_ERR((((uint32_t)padetect << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)tx_pwr_level_pt << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR,  ((uint32_t)user_position << 15) |((uint32_t)fec_coding_pt << 14) |((uint32_t)stbc_pt << 12) |((uint32_t)padetect << 8) |((uint32_t)tx_pwr_level_pt << 0));
}

__INLINE void mac_hw0_mu0_bfr_tx_pci_1_unpack(uint8_t* user_position, uint8_t* fec_coding_pt, uint8_t* stbc_pt, uint8_t* padetect, uint8_t* tx_pwr_level_pt)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR);

	*user_position = (localVal & ((uint32_t)0x00018000)) >>  15;
	*fec_coding_pt = (localVal & ((uint32_t)0x00004000)) >>  14;
	*stbc_pt = (localVal & ((uint32_t)0x00003000)) >>  12;
	*padetect = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*tx_pwr_level_pt = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_bfr_tx_pci_1_user_position_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00018000)) >> 15);
}
__INLINE void mac_hw0_mu0_bfr_tx_pci_1_user_position_setf(uint8_t userposition)
{
	ASSERT_ERR((((uint32_t)userposition << 15) & ~((uint32_t)0x00018000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR) & ~((uint32_t)0x00018000)) | ((uint32_t)userposition <<15));
}
__INLINE uint8_t mac_hw0_mu0_bfr_tx_pci_1_fec_coding_pt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_bfr_tx_pci_1_fec_coding_pt_setf(uint8_t feccodingpt)
{
	ASSERT_ERR((((uint32_t)feccodingpt << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)feccodingpt <<14));
}
__INLINE uint8_t mac_hw0_mu0_bfr_tx_pci_1_stbc_pt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003000)) >> 12);
}
__INLINE void mac_hw0_mu0_bfr_tx_pci_1_stbc_pt_setf(uint8_t stbcpt)
{
	ASSERT_ERR((((uint32_t)stbcpt << 12) & ~((uint32_t)0x00003000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR) & ~((uint32_t)0x00003000)) | ((uint32_t)stbcpt <<12));
}
__INLINE uint8_t mac_hw0_mu0_bfr_tx_pci_1_padetect_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void mac_hw0_mu0_bfr_tx_pci_1_padetect_setf(uint8_t padetect)
{
	ASSERT_ERR((((uint32_t)padetect << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)padetect <<8));
}
__INLINE uint8_t mac_hw0_mu0_bfr_tx_pci_1_tx_pwr_level_pt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_bfr_tx_pci_1_tx_pwr_level_pt_setf(uint8_t txpwrlevelpt)
{
	ASSERT_ERR((((uint32_t)txpwrlevelpt << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_1_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)txpwrlevelpt <<0));
}

/**
 * @brief BFR_TX_PCI_2 register definition
 *  BeamForming Report TX parameters 2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    26:18 partil_Aif                0x0
 *    17    auto_Response             1              
 *    16:09 active_Tx_Chains          0x0
 *    08:01 bf_Index                  0x0
 *    00    beam_Formed_PT            0              
 * </pre>
 */
#define MAC_HW0_MU0_BFR_TX_PCI_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000564)
#define MAC_HW0_MU0_BFR_TX_PCI_2_OFFSET      0x00000564
#define MAC_HW0_MU0_BFR_TX_PCI_2_INDEX       0x00000159
#define MAC_HW0_MU0_BFR_TX_PCI_2_RESET       0x00020000

__INLINE uint32_t  mac_hw0_mu0_bfr_tx_pci_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR);
}

__INLINE void mac_hw0_mu0_bfr_tx_pci_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BFR_TX_PCI_2_PARTIL_AIF_MASK    ((uint32_t)0x07FC0000)
#define MAC_HW0_MU0_BFR_TX_PCI_2_PARTIL_AIF_LSB    18
#define MAC_HW0_MU0_BFR_TX_PCI_2_PARTIL_AIF_WIDTH    ((uint32_t)0x00000009)
#define MAC_HW0_MU0_BFR_TX_PCI_2_AUTO_RESPONSE_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_BFR_TX_PCI_2_AUTO_RESPONSE_POS    17
#define MAC_HW0_MU0_BFR_TX_PCI_2_ACTIVE_TX_CHAINS_MASK    ((uint32_t)0x0001FE00)
#define MAC_HW0_MU0_BFR_TX_PCI_2_ACTIVE_TX_CHAINS_LSB    9
#define MAC_HW0_MU0_BFR_TX_PCI_2_ACTIVE_TX_CHAINS_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_BFR_TX_PCI_2_BF_INDEX_MASK    ((uint32_t)0x000001FE)
#define MAC_HW0_MU0_BFR_TX_PCI_2_BF_INDEX_LSB    1
#define MAC_HW0_MU0_BFR_TX_PCI_2_BF_INDEX_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_BFR_TX_PCI_2_BEAM_FORMED_PT_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_BFR_TX_PCI_2_BEAM_FORMED_PT_POS    0

#define MAC_HW0_MU0_BFR_TX_PCI_2_PARTIL_AIF_RST    0x0
#define MAC_HW0_MU0_BFR_TX_PCI_2_AUTO_RESPONSE_RST    0x1
#define MAC_HW0_MU0_BFR_TX_PCI_2_ACTIVE_TX_CHAINS_RST    0x0
#define MAC_HW0_MU0_BFR_TX_PCI_2_BF_INDEX_RST    0x0
#define MAC_HW0_MU0_BFR_TX_PCI_2_BEAM_FORMED_PT_RST    0x0

__INLINE void mac_hw0_mu0_bfr_tx_pci_2_pack(uint16_t partil_aif, uint8_t auto_response, uint8_t active_tx_chains, uint8_t bf_index, uint8_t beam_formed_pt)
{
	ASSERT_ERR((((uint32_t)partil_aif << 18) & ~((uint32_t)0x07FC0000)) == 0);
	ASSERT_ERR((((uint32_t)auto_response << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)active_tx_chains << 9) & ~((uint32_t)0x0001FE00)) == 0);
	ASSERT_ERR((((uint32_t)bf_index << 1) & ~((uint32_t)0x000001FE)) == 0);
	ASSERT_ERR((((uint32_t)beam_formed_pt << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR,  ((uint32_t)partil_aif << 18) |((uint32_t)auto_response << 17) |((uint32_t)active_tx_chains << 9) |((uint32_t)bf_index << 1) |((uint32_t)beam_formed_pt << 0));
}

__INLINE void mac_hw0_mu0_bfr_tx_pci_2_unpack(uint16_t* partil_aif, uint8_t* auto_response, uint8_t* active_tx_chains, uint8_t* bf_index, uint8_t* beam_formed_pt)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR);

	*partil_aif = (localVal & ((uint32_t)0x07FC0000)) >>  18;
	*auto_response = (localVal & ((uint32_t)0x00020000)) >>  17;
	*active_tx_chains = (localVal & ((uint32_t)0x0001FE00)) >>  9;
	*bf_index = (localVal & ((uint32_t)0x000001FE)) >>  1;
	*beam_formed_pt = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_bfr_tx_pci_2_partil_aif_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x07FC0000)) >> 18);
}
__INLINE void mac_hw0_mu0_bfr_tx_pci_2_partil_aif_setf(uint16_t partilaif)
{
	ASSERT_ERR((((uint32_t)partilaif << 18) & ~((uint32_t)0x07FC0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR) & ~((uint32_t)0x07FC0000)) | ((uint32_t)partilaif <<18));
}
__INLINE uint8_t mac_hw0_mu0_bfr_tx_pci_2_auto_response_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_bfr_tx_pci_2_auto_response_setf(uint8_t autoresponse)
{
	ASSERT_ERR((((uint32_t)autoresponse << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)autoresponse <<17));
}
__INLINE uint8_t mac_hw0_mu0_bfr_tx_pci_2_active_tx_chains_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0001FE00)) >> 9);
}
__INLINE void mac_hw0_mu0_bfr_tx_pci_2_active_tx_chains_setf(uint8_t activetxchains)
{
	ASSERT_ERR((((uint32_t)activetxchains << 9) & ~((uint32_t)0x0001FE00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR) & ~((uint32_t)0x0001FE00)) | ((uint32_t)activetxchains <<9));
}
__INLINE uint8_t mac_hw0_mu0_bfr_tx_pci_2_bf_index_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000001FE)) >> 1);
}
__INLINE void mac_hw0_mu0_bfr_tx_pci_2_bf_index_setf(uint8_t bfindex)
{
	ASSERT_ERR((((uint32_t)bfindex << 1) & ~((uint32_t)0x000001FE)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR) & ~((uint32_t)0x000001FE)) | ((uint32_t)bfindex <<1));
}
__INLINE uint8_t mac_hw0_mu0_bfr_tx_pci_2_beam_formed_pt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_bfr_tx_pci_2_beam_formed_pt_setf(uint8_t beamformedpt)
{
	ASSERT_ERR((((uint32_t)beamformedpt << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_TX_PCI_2_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)beamformedpt <<0));
}

/**
 * @brief BFR_TX_RC register definition
 *  BeamForming Report TX rate control register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    13    Smoothing                 1              
 *    12:06 mcs_Index_Tx_RCX          0x0
 *    05:04 bw_Tx_RCX                 0x0
 *    03    short_GITx_RCX            0              
 *    02:00 format_Mod_Tx_RCS         0x0
 * </pre>
 */
#define MAC_HW0_MU0_BFR_TX_RC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000568)
#define MAC_HW0_MU0_BFR_TX_RC_OFFSET      0x00000568
#define MAC_HW0_MU0_BFR_TX_RC_INDEX       0x0000015A
#define MAC_HW0_MU0_BFR_TX_RC_RESET       0x00002000

__INLINE uint32_t  mac_hw0_mu0_bfr_tx_rc_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BFR_TX_RC_ADDR);
}

__INLINE void mac_hw0_mu0_bfr_tx_rc_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_RC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BFR_TX_RC_SMOOTHING_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_BFR_TX_RC_SMOOTHING_POS    13
#define MAC_HW0_MU0_BFR_TX_RC_MCS_INDEX_TX_RCX_MASK    ((uint32_t)0x00001FC0)
#define MAC_HW0_MU0_BFR_TX_RC_MCS_INDEX_TX_RCX_LSB    6
#define MAC_HW0_MU0_BFR_TX_RC_MCS_INDEX_TX_RCX_WIDTH    ((uint32_t)0x00000007)
#define MAC_HW0_MU0_BFR_TX_RC_BW_TX_RCX_MASK    ((uint32_t)0x00000030)
#define MAC_HW0_MU0_BFR_TX_RC_BW_TX_RCX_LSB    4
#define MAC_HW0_MU0_BFR_TX_RC_BW_TX_RCX_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_BFR_TX_RC_SHORT_GITX_RCX_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_BFR_TX_RC_SHORT_GITX_RCX_POS    3
#define MAC_HW0_MU0_BFR_TX_RC_FORMAT_MOD_TX_RCS_MASK    ((uint32_t)0x00000007)
#define MAC_HW0_MU0_BFR_TX_RC_FORMAT_MOD_TX_RCS_LSB    0
#define MAC_HW0_MU0_BFR_TX_RC_FORMAT_MOD_TX_RCS_WIDTH    ((uint32_t)0x00000003)

#define MAC_HW0_MU0_BFR_TX_RC_SMOOTHING_RST    0x1
#define MAC_HW0_MU0_BFR_TX_RC_MCS_INDEX_TX_RCX_RST    0x0
#define MAC_HW0_MU0_BFR_TX_RC_BW_TX_RCX_RST    0x0
#define MAC_HW0_MU0_BFR_TX_RC_SHORT_GITX_RCX_RST    0x0
#define MAC_HW0_MU0_BFR_TX_RC_FORMAT_MOD_TX_RCS_RST    0x0

__INLINE void mac_hw0_mu0_bfr_tx_rc_pack(uint8_t smoothing, uint8_t mcs_index_tx_rcx, uint8_t bw_tx_rcx, uint8_t short_gitx_rcx, uint8_t format_mod_tx_rcs)
{
	ASSERT_ERR((((uint32_t)smoothing << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)mcs_index_tx_rcx << 6) & ~((uint32_t)0x00001FC0)) == 0);
	ASSERT_ERR((((uint32_t)bw_tx_rcx << 4) & ~((uint32_t)0x00000030)) == 0);
	ASSERT_ERR((((uint32_t)short_gitx_rcx << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)format_mod_tx_rcs << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_RC_ADDR,  ((uint32_t)smoothing << 13) |((uint32_t)mcs_index_tx_rcx << 6) |((uint32_t)bw_tx_rcx << 4) |((uint32_t)short_gitx_rcx << 3) |((uint32_t)format_mod_tx_rcs << 0));
}

__INLINE void mac_hw0_mu0_bfr_tx_rc_unpack(uint8_t* smoothing, uint8_t* mcs_index_tx_rcx, uint8_t* bw_tx_rcx, uint8_t* short_gitx_rcx, uint8_t* format_mod_tx_rcs)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_RC_ADDR);

	*smoothing = (localVal & ((uint32_t)0x00002000)) >>  13;
	*mcs_index_tx_rcx = (localVal & ((uint32_t)0x00001FC0)) >>  6;
	*bw_tx_rcx = (localVal & ((uint32_t)0x00000030)) >>  4;
	*short_gitx_rcx = (localVal & ((uint32_t)0x00000008)) >>  3;
	*format_mod_tx_rcs = (localVal & ((uint32_t)0x00000007)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_bfr_tx_rc_smoothing_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_RC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_bfr_tx_rc_smoothing_setf(uint8_t smoothing)
{
	ASSERT_ERR((((uint32_t)smoothing << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_RC_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_TX_RC_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)smoothing <<13));
}
__INLINE uint8_t mac_hw0_mu0_bfr_tx_rc_mcs_index_tx_rcx_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_RC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001FC0)) >> 6);
}
__INLINE void mac_hw0_mu0_bfr_tx_rc_mcs_index_tx_rcx_setf(uint8_t mcsindextxrcx)
{
	ASSERT_ERR((((uint32_t)mcsindextxrcx << 6) & ~((uint32_t)0x00001FC0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_RC_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_TX_RC_ADDR) & ~((uint32_t)0x00001FC0)) | ((uint32_t)mcsindextxrcx <<6));
}
__INLINE uint8_t mac_hw0_mu0_bfr_tx_rc_bw_tx_rcx_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_RC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000030)) >> 4);
}
__INLINE void mac_hw0_mu0_bfr_tx_rc_bw_tx_rcx_setf(uint8_t bwtxrcx)
{
	ASSERT_ERR((((uint32_t)bwtxrcx << 4) & ~((uint32_t)0x00000030)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_RC_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_TX_RC_ADDR) & ~((uint32_t)0x00000030)) | ((uint32_t)bwtxrcx <<4));
}
__INLINE uint8_t mac_hw0_mu0_bfr_tx_rc_short_gitx_rcx_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_RC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_bfr_tx_rc_short_gitx_rcx_setf(uint8_t shortgitxrcx)
{
	ASSERT_ERR((((uint32_t)shortgitxrcx << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_RC_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_TX_RC_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)shortgitxrcx <<3));
}
__INLINE uint8_t mac_hw0_mu0_bfr_tx_rc_format_mod_tx_rcs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_TX_RC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000007)) >> 0);
}
__INLINE void mac_hw0_mu0_bfr_tx_rc_format_mod_tx_rcs_setf(uint8_t formatmodtxrcs)
{
	ASSERT_ERR((((uint32_t)formatmodtxrcs << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_TX_RC_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_TX_RC_ADDR) & ~((uint32_t)0x00000007)) | ((uint32_t)formatmodtxrcs <<0));
}

/**
 * @brief BFR_CONTROL register definition
 *  BeamForming Report control register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 BFRError_Length           0x40
 *    22:18 reserve                   0x0
 *    17    clear_all_events          0              
 *    16    Clear_all_counter         0              
 *    15:00 BFR_sequence_number       0x0
 * </pre>
 */
#define MAC_HW0_MU0_BFR_CONTROL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000056C)
#define MAC_HW0_MU0_BFR_CONTROL_OFFSET      0x0000056C
#define MAC_HW0_MU0_BFR_CONTROL_INDEX       0x0000015B
#define MAC_HW0_MU0_BFR_CONTROL_RESET       0x40000000

__INLINE uint32_t  mac_hw0_mu0_bfr_control_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_ADDR);
}

__INLINE void mac_hw0_mu0_bfr_control_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BFR_CONTROL_BFRERROR_LENGTH_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_BFR_CONTROL_BFRERROR_LENGTH_LSB    24
#define MAC_HW0_MU0_BFR_CONTROL_BFRERROR_LENGTH_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_BFR_CONTROL_RESERVE_MASK    ((uint32_t)0x007C0000)
#define MAC_HW0_MU0_BFR_CONTROL_RESERVE_LSB    18
#define MAC_HW0_MU0_BFR_CONTROL_RESERVE_WIDTH    ((uint32_t)0x00000005)
#define MAC_HW0_MU0_BFR_CONTROL_CLEAR_ALL_EVENTS_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_BFR_CONTROL_CLEAR_ALL_EVENTS_POS    17
#define MAC_HW0_MU0_BFR_CONTROL_CLEAR_ALL_COUNTER_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_BFR_CONTROL_CLEAR_ALL_COUNTER_POS    16
#define MAC_HW0_MU0_BFR_CONTROL_BFR_SEQUENCE_NUMBER_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BFR_CONTROL_BFR_SEQUENCE_NUMBER_LSB    0
#define MAC_HW0_MU0_BFR_CONTROL_BFR_SEQUENCE_NUMBER_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BFR_CONTROL_BFRERROR_LENGTH_RST    0x40
#define MAC_HW0_MU0_BFR_CONTROL_RESERVE_RST    0x0
#define MAC_HW0_MU0_BFR_CONTROL_CLEAR_ALL_EVENTS_RST    0x0
#define MAC_HW0_MU0_BFR_CONTROL_CLEAR_ALL_COUNTER_RST    0x0
#define MAC_HW0_MU0_BFR_CONTROL_BFR_SEQUENCE_NUMBER_RST    0x0

__INLINE void mac_hw0_mu0_bfr_control_pack(uint8_t bfrerror_length, uint8_t reserve, uint8_t clear_all_events, uint8_t clear_all_counter, uint16_t bfr_sequence_number)
{
	ASSERT_ERR((((uint32_t)bfrerror_length << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)reserve << 18) & ~((uint32_t)0x007C0000)) == 0);
	ASSERT_ERR((((uint32_t)clear_all_events << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)clear_all_counter << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)bfr_sequence_number << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_ADDR,  ((uint32_t)bfrerror_length << 24) |((uint32_t)reserve << 18) |((uint32_t)clear_all_events << 17) |((uint32_t)clear_all_counter << 16) |((uint32_t)bfr_sequence_number << 0));
}

__INLINE void mac_hw0_mu0_bfr_control_unpack(uint8_t* bfrerror_length, uint8_t* reserve, uint8_t* clear_all_events, uint8_t* clear_all_counter, uint16_t* bfr_sequence_number)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_ADDR);

	*bfrerror_length = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*reserve = (localVal & ((uint32_t)0x007C0000)) >>  18;
	*clear_all_events = (localVal & ((uint32_t)0x00020000)) >>  17;
	*clear_all_counter = (localVal & ((uint32_t)0x00010000)) >>  16;
	*bfr_sequence_number = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_bfr_control_bfrerror_length_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_bfr_control_bfrerror_length_setf(uint8_t bfrerrorlength)
{
	ASSERT_ERR((((uint32_t)bfrerrorlength << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)bfrerrorlength <<24));
}
__INLINE uint8_t mac_hw0_mu0_bfr_control_reserve_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x007C0000)) >> 18);
}
__INLINE void mac_hw0_mu0_bfr_control_reserve_setf(uint8_t reserve)
{
	ASSERT_ERR((((uint32_t)reserve << 18) & ~((uint32_t)0x007C0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_ADDR) & ~((uint32_t)0x007C0000)) | ((uint32_t)reserve <<18));
}
__INLINE uint8_t mac_hw0_mu0_bfr_control_clear_all_events_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_bfr_control_clear_all_events_setf(uint8_t clearallevents)
{
	ASSERT_ERR((((uint32_t)clearallevents << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)clearallevents <<17));
}
__INLINE uint8_t mac_hw0_mu0_bfr_control_clear_all_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_bfr_control_clear_all_counter_setf(uint8_t clearallcounter)
{
	ASSERT_ERR((((uint32_t)clearallcounter << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)clearallcounter <<16));
}
__INLINE uint16_t mac_hw0_mu0_bfr_control_bfr_sequence_number_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_bfr_control_bfr_sequence_number_setf(uint16_t bfrsequencenumber)
{
	ASSERT_ERR((((uint32_t)bfrsequencenumber << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)bfrsequencenumber <<0));
}

/**
 * @brief BFR_STATUS register definition
 *  BFR status register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    HTC                       0              
 *    30:24 bodyaction                0x0
 *    23:16 bodycategory              0x0
 *    15:00 HT_length                 0x0
 * </pre>
 */
#define MAC_HW0_MU0_BFR_STATUS_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000570)
#define MAC_HW0_MU0_BFR_STATUS_OFFSET      0x00000570
#define MAC_HW0_MU0_BFR_STATUS_INDEX       0x0000015C
#define MAC_HW0_MU0_BFR_STATUS_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_bfr_status_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BFR_STATUS_ADDR);
}

// field definitions
#define MAC_HW0_MU0_BFR_STATUS_HTC_BIT      ((uint32_t)0x80000000)
#define MAC_HW0_MU0_BFR_STATUS_HTC_POS      31
#define MAC_HW0_MU0_BFR_STATUS_BODYACTION_MASK    ((uint32_t)0x7F000000)
#define MAC_HW0_MU0_BFR_STATUS_BODYACTION_LSB    24
#define MAC_HW0_MU0_BFR_STATUS_BODYACTION_WIDTH    ((uint32_t)0x00000007)
#define MAC_HW0_MU0_BFR_STATUS_BODYCATEGORY_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_BFR_STATUS_BODYCATEGORY_LSB    16
#define MAC_HW0_MU0_BFR_STATUS_BODYCATEGORY_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_BFR_STATUS_HT_LENGTH_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BFR_STATUS_HT_LENGTH_LSB    0
#define MAC_HW0_MU0_BFR_STATUS_HT_LENGTH_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BFR_STATUS_HTC_RST      0x0
#define MAC_HW0_MU0_BFR_STATUS_BODYACTION_RST    0x0
#define MAC_HW0_MU0_BFR_STATUS_BODYCATEGORY_RST    0x0
#define MAC_HW0_MU0_BFR_STATUS_HT_LENGTH_RST    0x0

__INLINE void mac_hw0_mu0_bfr_status_unpack(uint8_t* htc, uint8_t* bodyaction, uint8_t* bodycategory, uint16_t* ht_length)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_STATUS_ADDR);

	*htc = (localVal & ((uint32_t)0x80000000)) >>  31;
	*bodyaction = (localVal & ((uint32_t)0x7F000000)) >>  24;
	*bodycategory = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*ht_length = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_bfr_status_htc_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t mac_hw0_mu0_bfr_status_bodyaction_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x7F000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_bfr_status_bodycategory_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE uint16_t mac_hw0_mu0_bfr_status_ht_length_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_STATUS_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}

/**
 * @brief BFR_EVENTS_COUNTERS register definition
 *  BFR events counters register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 underflo_event_counter    0x0
 *    23:16 BFRerrorcounter           0x0
 *    15:08 r_Late_Length_Conter      0x0
 *    07:00 Report_delivered_correctly_counter 0x0
 * </pre>
 */
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000574)
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_OFFSET      0x00000574
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_INDEX       0x0000015D
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_bfr_events_counters_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BFR_EVENTS_COUNTERS_ADDR);
}

// field definitions
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_UNDERFLO_EVENT_COUNTER_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_UNDERFLO_EVENT_COUNTER_LSB    24
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_UNDERFLO_EVENT_COUNTER_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_BFRERRORCOUNTER_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_BFRERRORCOUNTER_LSB    16
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_BFRERRORCOUNTER_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_R_LATE_LENGTH_CONTER_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_R_LATE_LENGTH_CONTER_LSB    8
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_R_LATE_LENGTH_CONTER_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_REPORT_DELIVERED_CORRECTLY_COUNTER_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_REPORT_DELIVERED_CORRECTLY_COUNTER_LSB    0
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_REPORT_DELIVERED_CORRECTLY_COUNTER_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_UNDERFLO_EVENT_COUNTER_RST    0x0
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_BFRERRORCOUNTER_RST    0x0
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_R_LATE_LENGTH_CONTER_RST    0x0
#define MAC_HW0_MU0_BFR_EVENTS_COUNTERS_REPORT_DELIVERED_CORRECTLY_COUNTER_RST    0x0

__INLINE void mac_hw0_mu0_bfr_events_counters_unpack(uint8_t* underflo_event_counter, uint8_t* bfrerrorcounter, uint8_t* r_late_length_conter, uint8_t* report_delivered_correctly_counter)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_EVENTS_COUNTERS_ADDR);

	*underflo_event_counter = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*bfrerrorcounter = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*r_late_length_conter = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*report_delivered_correctly_counter = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_bfr_events_counters_underflo_event_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_EVENTS_COUNTERS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_bfr_events_counters_bfrerrorcounter_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_EVENTS_COUNTERS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_bfr_events_counters_r_late_length_conter_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_EVENTS_COUNTERS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_bfr_events_counters_report_delivered_correctly_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_EVENTS_COUNTERS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}

/**
 * @brief RX_NDPA_STAT register definition
 *  MU NDPA STAINFO decoding register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 NDPA2_NDPTimeot_Cnt       0x0
 *    23:07 reserv                    0x0
 *    06    error_NDPAMu_Su           0              
 *    05    error_NDPAn_BCMu          0              
 *    04    error_NDPABCSu            0              
 *    03:00 match_Sta_Num             0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_NDPA_STAT_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000578)
#define MAC_HW0_MU0_RX_NDPA_STAT_OFFSET      0x00000578
#define MAC_HW0_MU0_RX_NDPA_STAT_INDEX       0x0000015E
#define MAC_HW0_MU0_RX_NDPA_STAT_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_ndpa_stat_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_NDPA_STAT_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_NDPA_STAT_NDPA_2_NDPTIMEOT_CNT_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_RX_NDPA_STAT_NDPA_2_NDPTIMEOT_CNT_LSB    24
#define MAC_HW0_MU0_RX_NDPA_STAT_NDPA_2_NDPTIMEOT_CNT_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_NDPA_STAT_RESERV_MASK    ((uint32_t)0x00FFFF80)
#define MAC_HW0_MU0_RX_NDPA_STAT_RESERV_LSB    7
#define MAC_HW0_MU0_RX_NDPA_STAT_RESERV_WIDTH    ((uint32_t)0x00000011)
#define MAC_HW0_MU0_RX_NDPA_STAT_ERROR_NDPAMU_SU_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_RX_NDPA_STAT_ERROR_NDPAMU_SU_POS    6
#define MAC_HW0_MU0_RX_NDPA_STAT_ERROR_NDPAN_BCMU_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_RX_NDPA_STAT_ERROR_NDPAN_BCMU_POS    5
#define MAC_HW0_MU0_RX_NDPA_STAT_ERROR_NDPABCSU_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_NDPA_STAT_ERROR_NDPABCSU_POS    4
#define MAC_HW0_MU0_RX_NDPA_STAT_MATCH_STA_NUM_MASK    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_RX_NDPA_STAT_MATCH_STA_NUM_LSB    0
#define MAC_HW0_MU0_RX_NDPA_STAT_MATCH_STA_NUM_WIDTH    ((uint32_t)0x00000004)

#define MAC_HW0_MU0_RX_NDPA_STAT_NDPA_2_NDPTIMEOT_CNT_RST    0x0
#define MAC_HW0_MU0_RX_NDPA_STAT_RESERV_RST    0x0
#define MAC_HW0_MU0_RX_NDPA_STAT_ERROR_NDPAMU_SU_RST    0x0
#define MAC_HW0_MU0_RX_NDPA_STAT_ERROR_NDPAN_BCMU_RST    0x0
#define MAC_HW0_MU0_RX_NDPA_STAT_ERROR_NDPABCSU_RST    0x0
#define MAC_HW0_MU0_RX_NDPA_STAT_MATCH_STA_NUM_RST    0x0

__INLINE void mac_hw0_mu0_rx_ndpa_stat_unpack(uint8_t* ndpa2_ndptimeot_cnt, uint32_t* reserv, uint8_t* error_ndpamu_su, uint8_t* error_ndpan_bcmu, uint8_t* error_ndpabcsu, uint8_t* match_sta_num)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_NDPA_STAT_ADDR);

	*ndpa2_ndptimeot_cnt = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*reserv = (localVal & ((uint32_t)0x00FFFF80)) >>  7;
	*error_ndpamu_su = (localVal & ((uint32_t)0x00000040)) >>  6;
	*error_ndpan_bcmu = (localVal & ((uint32_t)0x00000020)) >>  5;
	*error_ndpabcsu = (localVal & ((uint32_t)0x00000010)) >>  4;
	*match_sta_num = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_ndpa_stat_ndpa_2_ndptimeot_cnt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_NDPA_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE uint32_t mac_hw0_mu0_rx_ndpa_stat_reserv_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_NDPA_STAT_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0x00FFFF80)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_rx_ndpa_stat_error_ndpamu_su_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_NDPA_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_rx_ndpa_stat_error_ndpan_bcmu_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_NDPA_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_rx_ndpa_stat_error_ndpabcsu_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_NDPA_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_rx_ndpa_stat_match_sta_num_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_NDPA_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}

/**
 * @brief BFR_CONTROL_2 register definition
 *  Bfr control register 2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    REDUCED_TX_FIFO_ENABLE    1              
 *    27:16 AID                       0x0
 *    15:00 BFR_DURATION              0x0
 * </pre>
 */
#define MAC_HW0_MU0_BFR_CONTROL_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000580)
#define MAC_HW0_MU0_BFR_CONTROL_2_OFFSET      0x00000580
#define MAC_HW0_MU0_BFR_CONTROL_2_INDEX       0x00000160
#define MAC_HW0_MU0_BFR_CONTROL_2_RESET       0x80000000

__INLINE uint32_t  mac_hw0_mu0_bfr_control_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_2_ADDR);
}

__INLINE void mac_hw0_mu0_bfr_control_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BFR_CONTROL_2_REDUCED_TX_FIFO_ENABLE_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_BFR_CONTROL_2_REDUCED_TX_FIFO_ENABLE_POS    31
#define MAC_HW0_MU0_BFR_CONTROL_2_AID_MASK    ((uint32_t)0x0FFF0000)
#define MAC_HW0_MU0_BFR_CONTROL_2_AID_LSB    16
#define MAC_HW0_MU0_BFR_CONTROL_2_AID_WIDTH    ((uint32_t)0x0000000C)
#define MAC_HW0_MU0_BFR_CONTROL_2_BFR_DURATION_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_BFR_CONTROL_2_BFR_DURATION_LSB    0
#define MAC_HW0_MU0_BFR_CONTROL_2_BFR_DURATION_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_BFR_CONTROL_2_REDUCED_TX_FIFO_ENABLE_RST    0x1
#define MAC_HW0_MU0_BFR_CONTROL_2_AID_RST    0x0
#define MAC_HW0_MU0_BFR_CONTROL_2_BFR_DURATION_RST    0x0

__INLINE void mac_hw0_mu0_bfr_control_2_pack(uint8_t reduced_tx_fifo_enable, uint16_t aid, uint16_t bfr_duration)
{
	ASSERT_ERR((((uint32_t)reduced_tx_fifo_enable << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)aid << 16) & ~((uint32_t)0x0FFF0000)) == 0);
	ASSERT_ERR((((uint32_t)bfr_duration << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_2_ADDR,  ((uint32_t)reduced_tx_fifo_enable << 31) |((uint32_t)aid << 16) |((uint32_t)bfr_duration << 0));
}

__INLINE void mac_hw0_mu0_bfr_control_2_unpack(uint8_t* reduced_tx_fifo_enable, uint16_t* aid, uint16_t* bfr_duration)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_2_ADDR);

	*reduced_tx_fifo_enable = (localVal & ((uint32_t)0x80000000)) >>  31;
	*aid = (localVal & ((uint32_t)0x0FFF0000)) >>  16;
	*bfr_duration = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_bfr_control_2_reduced_tx_fifo_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_bfr_control_2_reduced_tx_fifo_enable_setf(uint8_t reducedtxfifoenable)
{
	ASSERT_ERR((((uint32_t)reducedtxfifoenable << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_2_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)reducedtxfifoenable <<31));
}
__INLINE uint16_t mac_hw0_mu0_bfr_control_2_aid_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0FFF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_bfr_control_2_aid_setf(uint16_t aid)
{
	ASSERT_ERR((((uint32_t)aid << 16) & ~((uint32_t)0x0FFF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_2_ADDR) & ~((uint32_t)0x0FFF0000)) | ((uint32_t)aid <<16));
}
__INLINE uint16_t mac_hw0_mu0_bfr_control_2_bfr_duration_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_bfr_control_2_bfr_duration_setf(uint16_t bfrduration)
{
	ASSERT_ERR((((uint32_t)bfrduration << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_2_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)bfrduration <<0));
}

/**
 * @brief BFR_CONTROL_3 register definition
 *  BFR timing control register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21    disable_Wait_For_NDP      0              
 *    20    skip_Ndpa_Addr_Match      0              
 *    17:16 max_BFRch_BW              0x3
 *    12:08 BFRLength_Delay           0x8
 *    04:00 BFRData_Delay             0xA
 * </pre>
 */
#define MAC_HW0_MU0_BFR_CONTROL_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000584)
#define MAC_HW0_MU0_BFR_CONTROL_3_OFFSET      0x00000584
#define MAC_HW0_MU0_BFR_CONTROL_3_INDEX       0x00000161
#define MAC_HW0_MU0_BFR_CONTROL_3_RESET       0x0003080A

__INLINE uint32_t  mac_hw0_mu0_bfr_control_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_3_ADDR);
}

__INLINE void mac_hw0_mu0_bfr_control_3_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_3_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BFR_CONTROL_3_DISABLE_WAIT_FOR_NDP_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_BFR_CONTROL_3_DISABLE_WAIT_FOR_NDP_POS    21
#define MAC_HW0_MU0_BFR_CONTROL_3_SKIP_NDPA_ADDR_MATCH_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_BFR_CONTROL_3_SKIP_NDPA_ADDR_MATCH_POS    20
#define MAC_HW0_MU0_BFR_CONTROL_3_MAX_BFRCH_BW_MASK    ((uint32_t)0x00030000)
#define MAC_HW0_MU0_BFR_CONTROL_3_MAX_BFRCH_BW_LSB    16
#define MAC_HW0_MU0_BFR_CONTROL_3_MAX_BFRCH_BW_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_BFR_CONTROL_3_BFRLENGTH_DELAY_MASK    ((uint32_t)0x00001F00)
#define MAC_HW0_MU0_BFR_CONTROL_3_BFRLENGTH_DELAY_LSB    8
#define MAC_HW0_MU0_BFR_CONTROL_3_BFRLENGTH_DELAY_WIDTH    ((uint32_t)0x00000005)
#define MAC_HW0_MU0_BFR_CONTROL_3_BFRDATA_DELAY_MASK    ((uint32_t)0x0000001F)
#define MAC_HW0_MU0_BFR_CONTROL_3_BFRDATA_DELAY_LSB    0
#define MAC_HW0_MU0_BFR_CONTROL_3_BFRDATA_DELAY_WIDTH    ((uint32_t)0x00000005)

#define MAC_HW0_MU0_BFR_CONTROL_3_DISABLE_WAIT_FOR_NDP_RST    0x0
#define MAC_HW0_MU0_BFR_CONTROL_3_SKIP_NDPA_ADDR_MATCH_RST    0x0
#define MAC_HW0_MU0_BFR_CONTROL_3_MAX_BFRCH_BW_RST    0x3
#define MAC_HW0_MU0_BFR_CONTROL_3_BFRLENGTH_DELAY_RST    0x8
#define MAC_HW0_MU0_BFR_CONTROL_3_BFRDATA_DELAY_RST    0xA

__INLINE void mac_hw0_mu0_bfr_control_3_pack(uint8_t disable_wait_for_ndp, uint8_t skip_ndpa_addr_match, uint8_t max_bfrch_bw, uint8_t bfrlength_delay, uint8_t bfrdata_delay)
{
	ASSERT_ERR((((uint32_t)disable_wait_for_ndp << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)skip_ndpa_addr_match << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)max_bfrch_bw << 16) & ~((uint32_t)0x00030000)) == 0);
	ASSERT_ERR((((uint32_t)bfrlength_delay << 8) & ~((uint32_t)0x00001F00)) == 0);
	ASSERT_ERR((((uint32_t)bfrdata_delay << 0) & ~((uint32_t)0x0000001F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_3_ADDR,  ((uint32_t)disable_wait_for_ndp << 21) |((uint32_t)skip_ndpa_addr_match << 20) |((uint32_t)max_bfrch_bw << 16) |((uint32_t)bfrlength_delay << 8) |((uint32_t)bfrdata_delay << 0));
}

__INLINE void mac_hw0_mu0_bfr_control_3_unpack(uint8_t* disable_wait_for_ndp, uint8_t* skip_ndpa_addr_match, uint8_t* max_bfrch_bw, uint8_t* bfrlength_delay, uint8_t* bfrdata_delay)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_3_ADDR);

	*disable_wait_for_ndp = (localVal & ((uint32_t)0x00200000)) >>  21;
	*skip_ndpa_addr_match = (localVal & ((uint32_t)0x00100000)) >>  20;
	*max_bfrch_bw = (localVal & ((uint32_t)0x00030000)) >>  16;
	*bfrlength_delay = (localVal & ((uint32_t)0x00001F00)) >>  8;
	*bfrdata_delay = (localVal & ((uint32_t)0x0000001F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_bfr_control_3_disable_wait_for_ndp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_bfr_control_3_disable_wait_for_ndp_setf(uint8_t disablewaitforndp)
{
	ASSERT_ERR((((uint32_t)disablewaitforndp << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_3_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)disablewaitforndp <<21));
}
__INLINE uint8_t mac_hw0_mu0_bfr_control_3_skip_ndpa_addr_match_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_bfr_control_3_skip_ndpa_addr_match_setf(uint8_t skipndpaaddrmatch)
{
	ASSERT_ERR((((uint32_t)skipndpaaddrmatch << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_3_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)skipndpaaddrmatch <<20));
}
__INLINE uint8_t mac_hw0_mu0_bfr_control_3_max_bfrch_bw_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00030000)) >> 16);
}
__INLINE void mac_hw0_mu0_bfr_control_3_max_bfrch_bw_setf(uint8_t maxbfrchbw)
{
	ASSERT_ERR((((uint32_t)maxbfrchbw << 16) & ~((uint32_t)0x00030000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_3_ADDR) & ~((uint32_t)0x00030000)) | ((uint32_t)maxbfrchbw <<16));
}
__INLINE uint8_t mac_hw0_mu0_bfr_control_3_bfrlength_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001F00)) >> 8);
}
__INLINE void mac_hw0_mu0_bfr_control_3_bfrlength_delay_setf(uint8_t bfrlengthdelay)
{
	ASSERT_ERR((((uint32_t)bfrlengthdelay << 8) & ~((uint32_t)0x00001F00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_3_ADDR) & ~((uint32_t)0x00001F00)) | ((uint32_t)bfrlengthdelay <<8));
}
__INLINE uint8_t mac_hw0_mu0_bfr_control_3_bfrdata_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000001F)) >> 0);
}
__INLINE void mac_hw0_mu0_bfr_control_3_bfrdata_delay_setf(uint8_t bfrdatadelay)
{
	ASSERT_ERR((((uint32_t)bfrdatadelay << 0) & ~((uint32_t)0x0000001F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_CONTROL_3_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_CONTROL_3_ADDR) & ~((uint32_t)0x0000001F)) | ((uint32_t)bfrdatadelay <<0));
}

/**
 * @brief BFR_GENERAL register definition
 *  General purpose indication from BFR to TxVector register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 antenna_Set               0x0
 *    15:08 general_RC0               0x0
 *    07:00 general_Mac_Ctrl0         0x0
 * </pre>
 */
#define MAC_HW0_MU0_BFR_GENERAL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000588)
#define MAC_HW0_MU0_BFR_GENERAL_OFFSET      0x00000588
#define MAC_HW0_MU0_BFR_GENERAL_INDEX       0x00000162
#define MAC_HW0_MU0_BFR_GENERAL_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_bfr_general_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_BFR_GENERAL_ADDR);
}

__INLINE void mac_hw0_mu0_bfr_general_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_BFR_GENERAL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_BFR_GENERAL_ANTENNA_SET_MASK    ((uint32_t)0xFFFF0000)
#define MAC_HW0_MU0_BFR_GENERAL_ANTENNA_SET_LSB    16
#define MAC_HW0_MU0_BFR_GENERAL_ANTENNA_SET_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_BFR_GENERAL_GENERAL_RC_0_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_BFR_GENERAL_GENERAL_RC_0_LSB    8
#define MAC_HW0_MU0_BFR_GENERAL_GENERAL_RC_0_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_BFR_GENERAL_GENERAL_MAC_CTRL_0_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_BFR_GENERAL_GENERAL_MAC_CTRL_0_LSB    0
#define MAC_HW0_MU0_BFR_GENERAL_GENERAL_MAC_CTRL_0_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_BFR_GENERAL_ANTENNA_SET_RST    0x0
#define MAC_HW0_MU0_BFR_GENERAL_GENERAL_RC_0_RST    0x0
#define MAC_HW0_MU0_BFR_GENERAL_GENERAL_MAC_CTRL_0_RST    0x0

__INLINE void mac_hw0_mu0_bfr_general_pack(uint16_t antenna_set, uint8_t general_rc0, uint8_t general_mac_ctrl0)
{
	ASSERT_ERR((((uint32_t)antenna_set << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)general_rc0 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)general_mac_ctrl0 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_GENERAL_ADDR,  ((uint32_t)antenna_set << 16) |((uint32_t)general_rc0 << 8) |((uint32_t)general_mac_ctrl0 << 0));
}

__INLINE void mac_hw0_mu0_bfr_general_unpack(uint16_t* antenna_set, uint8_t* general_rc0, uint8_t* general_mac_ctrl0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_GENERAL_ADDR);

	*antenna_set = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*general_rc0 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*general_mac_ctrl0 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_bfr_general_antenna_set_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_GENERAL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_bfr_general_antenna_set_setf(uint16_t antennaset)
{
	ASSERT_ERR((((uint32_t)antennaset << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_GENERAL_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_GENERAL_ADDR) & ~((uint32_t)0xFFFF0000)) | ((uint32_t)antennaset <<16));
}
__INLINE uint8_t mac_hw0_mu0_bfr_general_general_rc_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_GENERAL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_bfr_general_general_rc_0_setf(uint8_t generalrc0)
{
	ASSERT_ERR((((uint32_t)generalrc0 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_GENERAL_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_GENERAL_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)generalrc0 <<8));
}
__INLINE uint8_t mac_hw0_mu0_bfr_general_general_mac_ctrl_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_BFR_GENERAL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_bfr_general_general_mac_ctrl_0_setf(uint8_t generalmacctrl0)
{
	ASSERT_ERR((((uint32_t)generalmacctrl0 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_BFR_GENERAL_ADDR, (REG_PL_RD(MAC_HW0_MU0_BFR_GENERAL_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)generalmacctrl0 <<0));
}

/**
 * @brief NAV_LIMIT register definition
 *  Indicates the NAV upper LIMIT register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 NAV_LIMIT                 0x0
 * </pre>
 */
#define MAC_HW0_MU0_NAV_LIMIT_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000590)
#define MAC_HW0_MU0_NAV_LIMIT_OFFSET      0x00000590
#define MAC_HW0_MU0_NAV_LIMIT_INDEX       0x00000164
#define MAC_HW0_MU0_NAV_LIMIT_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_nav_limit_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_NAV_LIMIT_ADDR);
}

__INLINE void mac_hw0_mu0_nav_limit_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_NAV_LIMIT_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_NAV_LIMIT_NAV_LIMIT_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_NAV_LIMIT_NAV_LIMIT_LSB    0
#define MAC_HW0_MU0_NAV_LIMIT_NAV_LIMIT_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_NAV_LIMIT_NAV_LIMIT_RST    0x0

__INLINE uint16_t mac_hw0_mu0_nav_limit_nav_limit_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_NAV_LIMIT_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_nav_limit_nav_limit_setf(uint16_t navlimit)
{
	ASSERT_ERR((((uint32_t)navlimit << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_NAV_LIMIT_ADDR, (uint32_t)navlimit << 0);
}

/**
 * @brief NAV_OVERRIDE register definition
 *  Indicates NAV override value register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 NAV_VALUE_SET             0x0
 * </pre>
 */
#define MAC_HW0_MU0_NAV_OVERRIDE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000594)
#define MAC_HW0_MU0_NAV_OVERRIDE_OFFSET      0x00000594
#define MAC_HW0_MU0_NAV_OVERRIDE_INDEX       0x00000165
#define MAC_HW0_MU0_NAV_OVERRIDE_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_nav_override_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_NAV_OVERRIDE_ADDR);
}

__INLINE void mac_hw0_mu0_nav_override_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_NAV_OVERRIDE_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_NAV_OVERRIDE_NAV_VALUE_SET_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_NAV_OVERRIDE_NAV_VALUE_SET_LSB    0
#define MAC_HW0_MU0_NAV_OVERRIDE_NAV_VALUE_SET_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_NAV_OVERRIDE_NAV_VALUE_SET_RST    0x0

__INLINE uint16_t mac_hw0_mu0_nav_override_nav_value_set_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_NAV_OVERRIDE_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_nav_override_nav_value_set_setf(uint16_t navvalueset)
{
	ASSERT_ERR((((uint32_t)navvalueset << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_NAV_OVERRIDE_ADDR, (uint32_t)navvalueset << 0);
}

/**
 * @brief MAC_HW_SPARE_1_REG register definition
 *  spare register to be used for ECO fixes register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:04 SPARE                     0x0
 *    03:00 SEC_TRIG_SRC              0x0
 * </pre>
 */
#define MAC_HW0_MU0_MAC_HW_SPARE_1_REG_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000600)
#define MAC_HW0_MU0_MAC_HW_SPARE_1_REG_OFFSET      0x00000600
#define MAC_HW0_MU0_MAC_HW_SPARE_1_REG_INDEX       0x00000180
#define MAC_HW0_MU0_MAC_HW_SPARE_1_REG_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_mac_hw_spare_1_reg_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_1_REG_ADDR);
}

__INLINE void mac_hw0_mu0_mac_hw_spare_1_reg_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MAC_HW_SPARE_1_REG_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MAC_HW_SPARE_1_REG_SPARE_MASK    ((uint32_t)0xFFFFFFF0)
#define MAC_HW0_MU0_MAC_HW_SPARE_1_REG_SPARE_LSB    4
#define MAC_HW0_MU0_MAC_HW_SPARE_1_REG_SPARE_WIDTH    ((uint32_t)0x0000001C)
#define MAC_HW0_MU0_MAC_HW_SPARE_1_REG_SEC_TRIG_SRC_MASK    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_MAC_HW_SPARE_1_REG_SEC_TRIG_SRC_LSB    0
#define MAC_HW0_MU0_MAC_HW_SPARE_1_REG_SEC_TRIG_SRC_WIDTH    ((uint32_t)0x00000004)

#define MAC_HW0_MU0_MAC_HW_SPARE_1_REG_SPARE_RST    0x0
#define MAC_HW0_MU0_MAC_HW_SPARE_1_REG_SEC_TRIG_SRC_RST    0x0

__INLINE void mac_hw0_mu0_mac_hw_spare_1_reg_pack(uint32_t spare, uint8_t sec_trig_src)
{
	ASSERT_ERR((((uint32_t)spare << 4) & ~((uint32_t)0xFFFFFFF0)) == 0);
	ASSERT_ERR((((uint32_t)sec_trig_src << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_HW_SPARE_1_REG_ADDR,  ((uint32_t)spare << 4) |((uint32_t)sec_trig_src << 0));
}

__INLINE void mac_hw0_mu0_mac_hw_spare_1_reg_unpack(uint32_t* spare, uint8_t* sec_trig_src)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_1_REG_ADDR);

	*spare = (localVal & ((uint32_t)0xFFFFFFF0)) >>  4;
	*sec_trig_src = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint32_t mac_hw0_mu0_mac_hw_spare_1_reg_spare_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_1_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFF0)) >> 4);
}
__INLINE void mac_hw0_mu0_mac_hw_spare_1_reg_spare_setf(uint32_t spare)
{
	ASSERT_ERR((((uint32_t)spare << 4) & ~((uint32_t)0xFFFFFFF0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_HW_SPARE_1_REG_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_1_REG_ADDR) & ~((uint32_t)0xFFFFFFF0)) | ((uint32_t)spare <<4));
}
__INLINE uint8_t mac_hw0_mu0_mac_hw_spare_1_reg_sec_trig_src_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void mac_hw0_mu0_mac_hw_spare_1_reg_sec_trig_src_setf(uint8_t sectrigsrc)
{
	ASSERT_ERR((((uint32_t)sectrigsrc << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_HW_SPARE_1_REG_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_1_REG_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)sectrigsrc <<0));
}

/**
 * @brief ERROR_INT_MAC_SOURCE_LMAC register definition
 *  Indicates which MAC caused LMAC Error interrupt register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008000)
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_LMAC_OFFSET      0x00008000
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_LMAC_INDEX       0x00002000
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_error_int_mac_source_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_LMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_error_int_mac_source_lmac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_LMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief GEN_INT_MAC_SOURCE_LMAC register definition
 *  Indicates which MAC caused LMAC General interrupt register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008004)
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_LMAC_OFFSET      0x00008004
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_LMAC_INDEX       0x00002001
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_gen_int_mac_source_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_GEN_INT_MAC_SOURCE_LMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_gen_int_mac_source_lmac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_MAC_SOURCE_LMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief HIGH_PRI_INT_MAC_SOURCE_LMAC register definition
 *  Indicates which MAC caused LMAC Hi Priority inter register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008008)
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_LMAC_OFFSET      0x00008008
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_LMAC_INDEX       0x00002002
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_high_pri_int_mac_source_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_LMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_high_pri_int_mac_source_lmac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_LMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_INT_MAC_SOURCE_LMAC register definition
 *  Indicates which MAC caused the LMAC RX interrupt register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000800C)
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_LMAC_OFFSET      0x0000800C
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_LMAC_INDEX       0x00002003
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_int_mac_source_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_INT_MAC_SOURCE_LMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_int_mac_source_lmac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_MAC_SOURCE_LMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief TIMER_INT_MAC_SOURCE_LMAC register definition
 *  Indicates which MAC caused LMAC Timer interrupt register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008010)
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_LMAC_OFFSET      0x00008010
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_LMAC_INDEX       0x00002004
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_timer_int_mac_source_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_LMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_timer_int_mac_source_lmac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_LMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief TX_INT_MAC_SOURCE_LMAC register definition
 *  Indicates which MAC caused the LMAC TX interrupt register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008014)
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_LMAC_OFFSET      0x00008014
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_LMAC_INDEX       0x00002005
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_int_mac_source_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_INT_MAC_SOURCE_LMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_LMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_tx_int_mac_source_lmac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_MAC_SOURCE_LMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief NEXT_TBTT register definition
 *  Indicates the remaining time until the next TBTT register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25:00 NEXT_TBTT                 0x0
 * </pre>
 */
#define MAC_HW0_MU0_NEXT_TBTT_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008040)
#define MAC_HW0_MU0_NEXT_TBTT_OFFSET      0x00008040
#define MAC_HW0_MU0_NEXT_TBTT_INDEX       0x00002010
#define MAC_HW0_MU0_NEXT_TBTT_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_next_tbtt_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_NEXT_TBTT_ADDR);
}

// field definitions
#define MAC_HW0_MU0_NEXT_TBTT_NEXT_TBTT_MASK    ((uint32_t)0x03FFFFFF)
#define MAC_HW0_MU0_NEXT_TBTT_NEXT_TBTT_LSB    0
#define MAC_HW0_MU0_NEXT_TBTT_NEXT_TBTT_WIDTH    ((uint32_t)0x0000001A)

#define MAC_HW0_MU0_NEXT_TBTT_NEXT_TBTT_RST    0x0

__INLINE uint32_t mac_hw0_mu0_next_tbtt_next_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_NEXT_TBTT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DOZE_CNTRL_2 register definition
 *  Contains settings for controlling DOZE state. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    WAKE_UP_FROM_DOZE         0              
 *    00    WAKE_UP_SW                1              
 * </pre>
 */
#define MAC_HW0_MU0_DOZE_CNTRL_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008048)
#define MAC_HW0_MU0_DOZE_CNTRL_2_OFFSET      0x00008048
#define MAC_HW0_MU0_DOZE_CNTRL_2_INDEX       0x00002012
#define MAC_HW0_MU0_DOZE_CNTRL_2_RESET       0x00000001

__INLINE uint32_t  mac_hw0_mu0_doze_cntrl_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DOZE_CNTRL_2_ADDR);
}

__INLINE void mac_hw0_mu0_doze_cntrl_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DOZE_CNTRL_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DOZE_CNTRL_2_WAKE_UP_FROM_DOZE_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_DOZE_CNTRL_2_WAKE_UP_FROM_DOZE_POS    31
#define MAC_HW0_MU0_DOZE_CNTRL_2_WAKE_UP_SW_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_DOZE_CNTRL_2_WAKE_UP_SW_POS    0

#define MAC_HW0_MU0_DOZE_CNTRL_2_WAKE_UP_FROM_DOZE_RST    0x0
#define MAC_HW0_MU0_DOZE_CNTRL_2_WAKE_UP_SW_RST    0x1

__INLINE void mac_hw0_mu0_doze_cntrl_2_pack(uint8_t wake_up_from_doze, uint8_t wake_up_sw)
{
	ASSERT_ERR((((uint32_t)wake_up_from_doze << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)wake_up_sw << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DOZE_CNTRL_2_ADDR,  ((uint32_t)wake_up_from_doze << 31) |((uint32_t)wake_up_sw << 0));
}

__INLINE void mac_hw0_mu0_doze_cntrl_2_unpack(uint8_t* wake_up_from_doze, uint8_t* wake_up_sw)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DOZE_CNTRL_2_ADDR);

	*wake_up_from_doze = (localVal & ((uint32_t)0x80000000)) >>  31;
	*wake_up_sw = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_doze_cntrl_2_wake_up_from_doze_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DOZE_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_doze_cntrl_2_wake_up_from_doze_setf(uint8_t wakeupfromdoze)
{
	ASSERT_ERR((((uint32_t)wakeupfromdoze << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DOZE_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_DOZE_CNTRL_2_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)wakeupfromdoze <<31));
}
__INLINE uint8_t mac_hw0_mu0_doze_cntrl_2_wake_up_sw_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DOZE_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_doze_cntrl_2_wake_up_sw_setf(uint8_t wakeupsw)
{
	ASSERT_ERR((((uint32_t)wakeupsw << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DOZE_CNTRL_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_DOZE_CNTRL_2_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)wakeupsw <<0));
}

/**
 * @brief MAC_CNTRL_2 register definition
 *  Contains various settings for controlling the operation of the core. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    00    SOFT_RESET                0              
 * </pre>
 */
#define MAC_HW0_MU0_MAC_CNTRL_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008050)
#define MAC_HW0_MU0_MAC_CNTRL_2_OFFSET      0x00008050
#define MAC_HW0_MU0_MAC_CNTRL_2_INDEX       0x00002014
#define MAC_HW0_MU0_MAC_CNTRL_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_mac_cntrl_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_2_ADDR);
}

__INLINE void mac_hw0_mu0_mac_cntrl_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MAC_CNTRL_2_SOFT_RESET_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_MAC_CNTRL_2_SOFT_RESET_POS    0

#define MAC_HW0_MU0_MAC_CNTRL_2_SOFT_RESET_RST    0x0

__INLINE uint8_t mac_hw0_mu0_mac_cntrl_2_soft_reset_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_CNTRL_2_ADDR);
	return (uint8_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_mac_cntrl_2_soft_reset_setf(uint8_t softreset)
{
	ASSERT_ERR((((uint32_t)softreset << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_CNTRL_2_ADDR, (uint32_t)softreset << 0);
}

/**
 * @brief TSF_LO register definition
 *  Contains the TSF bits. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TSF_TIMER_LOW             0x0
 * </pre>
 */
#define MAC_HW0_MU0_TSF_LO_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000080A4)
#define MAC_HW0_MU0_TSF_LO_OFFSET      0x000080A4
#define MAC_HW0_MU0_TSF_LO_INDEX       0x00002029
#define MAC_HW0_MU0_TSF_LO_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tsf_lo_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TSF_LO_ADDR);
}

__INLINE void mac_hw0_mu0_tsf_lo_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TSF_LO_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TSF_LO_TSF_TIMER_LOW_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TSF_LO_TSF_TIMER_LOW_LSB    0
#define MAC_HW0_MU0_TSF_LO_TSF_TIMER_LOW_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TSF_LO_TSF_TIMER_LOW_RST    0x0

__INLINE uint32_t mac_hw0_mu0_tsf_lo_tsf_timer_low_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TSF_LO_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_tsf_lo_tsf_timer_low_setf(uint32_t tsftimerlow)
{
	ASSERT_ERR((((uint32_t)tsftimerlow << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TSF_LO_ADDR, (uint32_t)tsftimerlow << 0);
}

/**
 * @brief TSF_HI register definition
 *  Contains the TSF bits. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TSF_TIMER_HIGH            0x0
 * </pre>
 */
#define MAC_HW0_MU0_TSF_HI_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000080A8)
#define MAC_HW0_MU0_TSF_HI_OFFSET      0x000080A8
#define MAC_HW0_MU0_TSF_HI_INDEX       0x0000202A
#define MAC_HW0_MU0_TSF_HI_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tsf_hi_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TSF_HI_ADDR);
}

__INLINE void mac_hw0_mu0_tsf_hi_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TSF_HI_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TSF_HI_TSF_TIMER_HIGH_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TSF_HI_TSF_TIMER_HIGH_LSB    0
#define MAC_HW0_MU0_TSF_HI_TSF_TIMER_HIGH_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TSF_HI_TSF_TIMER_HIGH_RST    0x0

__INLINE uint32_t mac_hw0_mu0_tsf_hi_tsf_timer_high_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TSF_HI_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_tsf_hi_tsf_timer_high_setf(uint32_t tsftimerhigh)
{
	ASSERT_ERR((((uint32_t)tsftimerhigh << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TSF_HI_ADDR, (uint32_t)tsftimerhigh << 0);
}

/**
 * @brief AGGR_STATUS register definition
 *  Shows status debug information for the agg closing register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21:16 tx_Data_Delay_Cnt         0x0
 *    15    tx_Data_Delay_TC          1              
 *    12:08 tx_List_Proc_Cs           0x0
 *    07    wait_For_Natt             0              
 *    06    natt_Start                0              
 *    05:04 available_BW              0x0
 *    03:02 bw_Tx                     0x0
 *    01:00 Ch_BW                     0x0
 * </pre>
 */
#define MAC_HW0_MU0_AGGR_STATUS_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000080B8)
#define MAC_HW0_MU0_AGGR_STATUS_OFFSET      0x000080B8
#define MAC_HW0_MU0_AGGR_STATUS_INDEX       0x0000202E
#define MAC_HW0_MU0_AGGR_STATUS_RESET       0x00008000

__INLINE uint32_t  mac_hw0_mu0_aggr_status_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_AGGR_STATUS_ADDR);
}

// field definitions
#define MAC_HW0_MU0_AGGR_STATUS_TX_DATA_DELAY_CNT_MASK    ((uint32_t)0x003F0000)
#define MAC_HW0_MU0_AGGR_STATUS_TX_DATA_DELAY_CNT_LSB    16
#define MAC_HW0_MU0_AGGR_STATUS_TX_DATA_DELAY_CNT_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_AGGR_STATUS_TX_DATA_DELAY_TC_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_AGGR_STATUS_TX_DATA_DELAY_TC_POS    15
#define MAC_HW0_MU0_AGGR_STATUS_TX_LIST_PROC_CS_MASK    ((uint32_t)0x00001F00)
#define MAC_HW0_MU0_AGGR_STATUS_TX_LIST_PROC_CS_LSB    8
#define MAC_HW0_MU0_AGGR_STATUS_TX_LIST_PROC_CS_WIDTH    ((uint32_t)0x00000005)
#define MAC_HW0_MU0_AGGR_STATUS_WAIT_FOR_NATT_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_AGGR_STATUS_WAIT_FOR_NATT_POS    7
#define MAC_HW0_MU0_AGGR_STATUS_NATT_START_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_AGGR_STATUS_NATT_START_POS    6
#define MAC_HW0_MU0_AGGR_STATUS_AVAILABLE_BW_MASK    ((uint32_t)0x00000030)
#define MAC_HW0_MU0_AGGR_STATUS_AVAILABLE_BW_LSB    4
#define MAC_HW0_MU0_AGGR_STATUS_AVAILABLE_BW_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_AGGR_STATUS_BW_TX_MASK    ((uint32_t)0x0000000C)
#define MAC_HW0_MU0_AGGR_STATUS_BW_TX_LSB    2
#define MAC_HW0_MU0_AGGR_STATUS_BW_TX_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_AGGR_STATUS_CH_BW_MASK    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_AGGR_STATUS_CH_BW_LSB    0
#define MAC_HW0_MU0_AGGR_STATUS_CH_BW_WIDTH    ((uint32_t)0x00000002)

#define MAC_HW0_MU0_AGGR_STATUS_TX_DATA_DELAY_CNT_RST    0x0
#define MAC_HW0_MU0_AGGR_STATUS_TX_DATA_DELAY_TC_RST    0x1
#define MAC_HW0_MU0_AGGR_STATUS_TX_LIST_PROC_CS_RST    0x0
#define MAC_HW0_MU0_AGGR_STATUS_WAIT_FOR_NATT_RST    0x0
#define MAC_HW0_MU0_AGGR_STATUS_NATT_START_RST    0x0
#define MAC_HW0_MU0_AGGR_STATUS_AVAILABLE_BW_RST    0x0
#define MAC_HW0_MU0_AGGR_STATUS_BW_TX_RST    0x0
#define MAC_HW0_MU0_AGGR_STATUS_CH_BW_RST    0x0

__INLINE void mac_hw0_mu0_aggr_status_unpack(uint8_t* tx_data_delay_cnt, uint8_t* tx_data_delay_tc, uint8_t* tx_list_proc_cs, uint8_t* wait_for_natt, uint8_t* natt_start, uint8_t* available_bw, uint8_t* bw_tx, uint8_t* ch_bw)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_STATUS_ADDR);

	*tx_data_delay_cnt = (localVal & ((uint32_t)0x003F0000)) >>  16;
	*tx_data_delay_tc = (localVal & ((uint32_t)0x00008000)) >>  15;
	*tx_list_proc_cs = (localVal & ((uint32_t)0x00001F00)) >>  8;
	*wait_for_natt = (localVal & ((uint32_t)0x00000080)) >>  7;
	*natt_start = (localVal & ((uint32_t)0x00000040)) >>  6;
	*available_bw = (localVal & ((uint32_t)0x00000030)) >>  4;
	*bw_tx = (localVal & ((uint32_t)0x0000000C)) >>  2;
	*ch_bw = (localVal & ((uint32_t)0x00000003)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_aggr_status_tx_data_delay_cnt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x003F0000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_aggr_status_tx_data_delay_tc_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t mac_hw0_mu0_aggr_status_tx_list_proc_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001F00)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_aggr_status_wait_for_natt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_aggr_status_natt_start_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_aggr_status_available_bw_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000030)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_aggr_status_bw_tx_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000C)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_aggr_status_ch_bw_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000003)) >> 0);
}

/**
 * @brief AGGR_CONFIG register definition
 *  Configurations for aggregation closing register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23    PRE_TYPE_PROT_TX_CONF     0              
 *    22:16 MCS_INDEX0_PROT_TX_CONF   0x4
 *    13    MULTIPLE_AMPDU            1              
 *    12:10 FORMAT_MOD_PROT_TX_CONF   0x1
 *    09:04 TX_DATA_DELAY             0x0
 *    03    MEDIUM_TIME_ENABLED       0              
 *    02    FAILED_BW_SIGNALING_DIS   0              
 *    01    CL2400_MACPHYIFMODE       0              
 *    00    CL2400_RCMODE             0              
 * </pre>
 */
#define MAC_HW0_MU0_AGGR_CONFIG_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000080BC)
#define MAC_HW0_MU0_AGGR_CONFIG_OFFSET      0x000080BC
#define MAC_HW0_MU0_AGGR_CONFIG_INDEX       0x0000202F
#define MAC_HW0_MU0_AGGR_CONFIG_RESET       0x0F042400

__INLINE uint32_t  mac_hw0_mu0_aggr_config_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR);
}

__INLINE void mac_hw0_mu0_aggr_config_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_AGGR_CONFIG_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_AGGR_CONFIG_PRE_TYPE_PROT_TX_CONF_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_AGGR_CONFIG_PRE_TYPE_PROT_TX_CONF_POS    23
#define MAC_HW0_MU0_AGGR_CONFIG_MCS_INDEX_0_PROT_TX_CONF_MASK    ((uint32_t)0x007F0000)
#define MAC_HW0_MU0_AGGR_CONFIG_MCS_INDEX_0_PROT_TX_CONF_LSB    16
#define MAC_HW0_MU0_AGGR_CONFIG_MCS_INDEX_0_PROT_TX_CONF_WIDTH    ((uint32_t)0x00000007)
#define MAC_HW0_MU0_AGGR_CONFIG_MULTIPLE_AMPDU_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_AGGR_CONFIG_MULTIPLE_AMPDU_POS    13
#define MAC_HW0_MU0_AGGR_CONFIG_FORMAT_MOD_PROT_TX_CONF_MASK    ((uint32_t)0x00001C00)
#define MAC_HW0_MU0_AGGR_CONFIG_FORMAT_MOD_PROT_TX_CONF_LSB    10
#define MAC_HW0_MU0_AGGR_CONFIG_FORMAT_MOD_PROT_TX_CONF_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_AGGR_CONFIG_TX_DATA_DELAY_MASK    ((uint32_t)0x000003F0)
#define MAC_HW0_MU0_AGGR_CONFIG_TX_DATA_DELAY_LSB    4
#define MAC_HW0_MU0_AGGR_CONFIG_TX_DATA_DELAY_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_AGGR_CONFIG_MEDIUM_TIME_ENABLED_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_AGGR_CONFIG_MEDIUM_TIME_ENABLED_POS    3
#define MAC_HW0_MU0_AGGR_CONFIG_FAILED_BW_SIGNALING_DIS_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_AGGR_CONFIG_FAILED_BW_SIGNALING_DIS_POS    2
#define MAC_HW0_MU0_AGGR_CONFIG_CL_2400_MACPHYIFMODE_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_AGGR_CONFIG_CL_2400_MACPHYIFMODE_POS    1
#define MAC_HW0_MU0_AGGR_CONFIG_CL_2400_RCMODE_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_AGGR_CONFIG_CL_2400_RCMODE_POS    0

#define MAC_HW0_MU0_AGGR_CONFIG_PRE_TYPE_PROT_TX_CONF_RST    0x0
#define MAC_HW0_MU0_AGGR_CONFIG_MCS_INDEX_0_PROT_TX_CONF_RST    0x4
#define MAC_HW0_MU0_AGGR_CONFIG_MULTIPLE_AMPDU_RST    0x1
#define MAC_HW0_MU0_AGGR_CONFIG_FORMAT_MOD_PROT_TX_CONF_RST    0x1
#define MAC_HW0_MU0_AGGR_CONFIG_TX_DATA_DELAY_RST    0x0
#define MAC_HW0_MU0_AGGR_CONFIG_MEDIUM_TIME_ENABLED_RST    0x0
#define MAC_HW0_MU0_AGGR_CONFIG_FAILED_BW_SIGNALING_DIS_RST    0x0
#define MAC_HW0_MU0_AGGR_CONFIG_CL_2400_MACPHYIFMODE_RST    0x0
#define MAC_HW0_MU0_AGGR_CONFIG_CL_2400_RCMODE_RST    0x0

__INLINE void mac_hw0_mu0_aggr_config_pack(uint8_t pre_type_prot_tx_conf, uint8_t mcs_index0_prot_tx_conf, uint8_t multiple_ampdu, uint8_t format_mod_prot_tx_conf, uint8_t tx_data_delay, uint8_t medium_time_enabled, uint8_t failed_bw_signaling_dis, uint8_t cl2400_macphyifmode, uint8_t cl2400_rcmode)
{
	ASSERT_ERR((((uint32_t)pre_type_prot_tx_conf << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)mcs_index0_prot_tx_conf << 16) & ~((uint32_t)0x007F0000)) == 0);
	ASSERT_ERR((((uint32_t)multiple_ampdu << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)format_mod_prot_tx_conf << 10) & ~((uint32_t)0x00001C00)) == 0);
	ASSERT_ERR((((uint32_t)tx_data_delay << 4) & ~((uint32_t)0x000003F0)) == 0);
	ASSERT_ERR((((uint32_t)medium_time_enabled << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)failed_bw_signaling_dis << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)cl2400_macphyifmode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)cl2400_rcmode << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_AGGR_CONFIG_ADDR,  ((uint32_t)pre_type_prot_tx_conf << 23) |((uint32_t)mcs_index0_prot_tx_conf << 16) |((uint32_t)multiple_ampdu << 13) |((uint32_t)format_mod_prot_tx_conf << 10) |((uint32_t)tx_data_delay << 4) |((uint32_t)medium_time_enabled << 3) |((uint32_t)failed_bw_signaling_dis << 2) |((uint32_t)cl2400_macphyifmode << 1) |((uint32_t)cl2400_rcmode << 0));
}

__INLINE void mac_hw0_mu0_aggr_config_unpack(uint8_t* pre_type_prot_tx_conf, uint8_t* mcs_index0_prot_tx_conf, uint8_t* multiple_ampdu, uint8_t* format_mod_prot_tx_conf, uint8_t* tx_data_delay, uint8_t* medium_time_enabled, uint8_t* failed_bw_signaling_dis, uint8_t* cl2400_macphyifmode, uint8_t* cl2400_rcmode)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR);

	*pre_type_prot_tx_conf = (localVal & ((uint32_t)0x00800000)) >>  23;
	*mcs_index0_prot_tx_conf = (localVal & ((uint32_t)0x007F0000)) >>  16;
	*multiple_ampdu = (localVal & ((uint32_t)0x00002000)) >>  13;
	*format_mod_prot_tx_conf = (localVal & ((uint32_t)0x00001C00)) >>  10;
	*tx_data_delay = (localVal & ((uint32_t)0x000003F0)) >>  4;
	*medium_time_enabled = (localVal & ((uint32_t)0x00000008)) >>  3;
	*failed_bw_signaling_dis = (localVal & ((uint32_t)0x00000004)) >>  2;
	*cl2400_macphyifmode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*cl2400_rcmode = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_aggr_config_pre_type_prot_tx_conf_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_aggr_config_pre_type_prot_tx_conf_setf(uint8_t pretypeprottxconf)
{
	ASSERT_ERR((((uint32_t)pretypeprottxconf << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_AGGR_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)pretypeprottxconf <<23));
}
__INLINE uint8_t mac_hw0_mu0_aggr_config_mcs_index_0_prot_tx_conf_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x007F0000)) >> 16);
}
__INLINE void mac_hw0_mu0_aggr_config_mcs_index_0_prot_tx_conf_setf(uint8_t mcsindex0prottxconf)
{
	ASSERT_ERR((((uint32_t)mcsindex0prottxconf << 16) & ~((uint32_t)0x007F0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_AGGR_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR) & ~((uint32_t)0x007F0000)) | ((uint32_t)mcsindex0prottxconf <<16));
}
__INLINE uint8_t mac_hw0_mu0_aggr_config_multiple_ampdu_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_aggr_config_multiple_ampdu_setf(uint8_t multipleampdu)
{
	ASSERT_ERR((((uint32_t)multipleampdu << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_AGGR_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)multipleampdu <<13));
}
__INLINE uint8_t mac_hw0_mu0_aggr_config_format_mod_prot_tx_conf_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001C00)) >> 10);
}
__INLINE void mac_hw0_mu0_aggr_config_format_mod_prot_tx_conf_setf(uint8_t formatmodprottxconf)
{
	ASSERT_ERR((((uint32_t)formatmodprottxconf << 10) & ~((uint32_t)0x00001C00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_AGGR_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR) & ~((uint32_t)0x00001C00)) | ((uint32_t)formatmodprottxconf <<10));
}
__INLINE uint8_t mac_hw0_mu0_aggr_config_tx_data_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000003F0)) >> 4);
}
__INLINE void mac_hw0_mu0_aggr_config_tx_data_delay_setf(uint8_t txdatadelay)
{
	ASSERT_ERR((((uint32_t)txdatadelay << 4) & ~((uint32_t)0x000003F0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_AGGR_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR) & ~((uint32_t)0x000003F0)) | ((uint32_t)txdatadelay <<4));
}
__INLINE uint8_t mac_hw0_mu0_aggr_config_medium_time_enabled_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_aggr_config_medium_time_enabled_setf(uint8_t mediumtimeenabled)
{
	ASSERT_ERR((((uint32_t)mediumtimeenabled << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_AGGR_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)mediumtimeenabled <<3));
}
__INLINE uint8_t mac_hw0_mu0_aggr_config_failed_bw_signaling_dis_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_aggr_config_failed_bw_signaling_dis_setf(uint8_t failedbwsignalingdis)
{
	ASSERT_ERR((((uint32_t)failedbwsignalingdis << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_AGGR_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)failedbwsignalingdis <<2));
}
__INLINE uint8_t mac_hw0_mu0_aggr_config_cl_2400_macphyifmode_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_aggr_config_cl_2400_macphyifmode_setf(uint8_t cl2400macphyifmode)
{
	ASSERT_ERR((((uint32_t)cl2400macphyifmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_AGGR_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)cl2400macphyifmode <<1));
}
__INLINE uint8_t mac_hw0_mu0_aggr_config_cl_2400_rcmode_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_aggr_config_cl_2400_rcmode_setf(uint8_t cl2400rcmode)
{
	ASSERT_ERR((((uint32_t)cl2400rcmode << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_AGGR_CONFIG_ADDR, (REG_PL_RD(MAC_HW0_MU0_AGGR_CONFIG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)cl2400rcmode <<0));
}

/**
 * @brief TX_PROT_POWER_LEVEL register definition
 *  Tx Protection power level settings register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 TX_PROT_POWER_LEVEL_3     0x0F
 *    23:16 TX_PROT_POWER_LEVEL_2     0x0F
 *    15:08 TX_PROT_POWER_LEVEL_1     0x0F
 *    07:00 TX_PROT_POWER_LEVEL_0     0x0F
 * </pre>
 */
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000080C0)
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_OFFSET      0x000080C0
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_INDEX       0x00002030
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_RESET       0x0F0F0F0F

__INLINE uint32_t  mac_hw0_mu0_tx_prot_power_level_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR);
}

__INLINE void mac_hw0_mu0_tx_prot_power_level_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_TX_PROT_POWER_LEVEL_3_MASK    ((uint32_t)0xFF000000)
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_TX_PROT_POWER_LEVEL_3_LSB    24
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_TX_PROT_POWER_LEVEL_3_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_TX_PROT_POWER_LEVEL_2_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_TX_PROT_POWER_LEVEL_2_LSB    16
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_TX_PROT_POWER_LEVEL_2_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_TX_PROT_POWER_LEVEL_1_MASK    ((uint32_t)0x0000FF00)
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_TX_PROT_POWER_LEVEL_1_LSB    8
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_TX_PROT_POWER_LEVEL_1_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_TX_PROT_POWER_LEVEL_0_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_TX_PROT_POWER_LEVEL_0_LSB    0
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_TX_PROT_POWER_LEVEL_0_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_TX_PROT_POWER_LEVEL_3_RST    0x0F
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_TX_PROT_POWER_LEVEL_2_RST    0x0F
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_TX_PROT_POWER_LEVEL_1_RST    0x0F
#define MAC_HW0_MU0_TX_PROT_POWER_LEVEL_TX_PROT_POWER_LEVEL_0_RST    0x0F

__INLINE void mac_hw0_mu0_tx_prot_power_level_pack(uint8_t tx_prot_power_level_3, uint8_t tx_prot_power_level_2, uint8_t tx_prot_power_level_1, uint8_t tx_prot_power_level_0)
{
	ASSERT_ERR((((uint32_t)tx_prot_power_level_3 << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_prot_power_level_2 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)tx_prot_power_level_1 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)tx_prot_power_level_0 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR,  ((uint32_t)tx_prot_power_level_3 << 24) |((uint32_t)tx_prot_power_level_2 << 16) |((uint32_t)tx_prot_power_level_1 << 8) |((uint32_t)tx_prot_power_level_0 << 0));
}

__INLINE void mac_hw0_mu0_tx_prot_power_level_unpack(uint8_t* tx_prot_power_level_3, uint8_t* tx_prot_power_level_2, uint8_t* tx_prot_power_level_1, uint8_t* tx_prot_power_level_0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR);

	*tx_prot_power_level_3 = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*tx_prot_power_level_2 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*tx_prot_power_level_1 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*tx_prot_power_level_0 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_tx_prot_power_level_tx_prot_power_level_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void mac_hw0_mu0_tx_prot_power_level_tx_prot_power_level_3_setf(uint8_t txprotpowerlevel3)
{
	ASSERT_ERR((((uint32_t)txprotpowerlevel3 << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)txprotpowerlevel3 <<24));
}
__INLINE uint8_t mac_hw0_mu0_tx_prot_power_level_tx_prot_power_level_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_tx_prot_power_level_tx_prot_power_level_2_setf(uint8_t txprotpowerlevel2)
{
	ASSERT_ERR((((uint32_t)txprotpowerlevel2 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)txprotpowerlevel2 <<16));
}
__INLINE uint8_t mac_hw0_mu0_tx_prot_power_level_tx_prot_power_level_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_prot_power_level_tx_prot_power_level_1_setf(uint8_t txprotpowerlevel1)
{
	ASSERT_ERR((((uint32_t)txprotpowerlevel1 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)txprotpowerlevel1 <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_prot_power_level_tx_prot_power_level_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_tx_prot_power_level_tx_prot_power_level_0_setf(uint8_t txprotpowerlevel0)
{
	ASSERT_ERR((((uint32_t)txprotpowerlevel0 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_PROT_POWER_LEVEL_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)txprotpowerlevel0 <<0));
}

/**
 * @brief TIME_ON_AIR_PARAM_1 register definition
 *  This register contains parameters used for computing time taken for packet on air. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:30 PPDU_STBC                 0x0
 *    29:28 PPDU_NUM_EXTN_SS          0x0
 *    27    PPDU_SHORT_GI             0              
 *    26:24 PPDU_PRE_TYPE             0x0
 *    23:22 PPDU_BW                   0x0
 *    19:00 PPDU_LENGTH               0x0
 * </pre>
 */
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000080D0)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_OFFSET      0x000080D0
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_INDEX       0x00002034
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_time_on_air_param_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR);
}

__INLINE void mac_hw0_mu0_time_on_air_param_1_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_STBC_MASK    ((uint32_t)0xC0000000)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_STBC_LSB    30
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_STBC_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_NUM_EXTN_SS_MASK    ((uint32_t)0x30000000)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_NUM_EXTN_SS_LSB    28
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_NUM_EXTN_SS_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_SHORT_GI_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_SHORT_GI_POS    27
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_PRE_TYPE_MASK    ((uint32_t)0x07000000)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_PRE_TYPE_LSB    24
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_PRE_TYPE_WIDTH    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_BW_MASK    ((uint32_t)0x00C00000)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_BW_LSB    22
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_BW_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_LENGTH_MASK    ((uint32_t)0x000FFFFF)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_LENGTH_LSB    0
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_LENGTH_WIDTH    ((uint32_t)0x00000014)

#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_STBC_RST    0x0
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_NUM_EXTN_SS_RST    0x0
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_SHORT_GI_RST    0x0
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_PRE_TYPE_RST    0x0
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_BW_RST    0x0
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_PPDU_LENGTH_RST    0x0

__INLINE void mac_hw0_mu0_time_on_air_param_1_pack(uint8_t ppdu_stbc, uint8_t ppdu_num_extn_ss, uint8_t ppdu_short_gi, uint8_t ppdu_pre_type, uint8_t ppdu_bw, uint32_t ppdu_length)
{
	ASSERT_ERR((((uint32_t)ppdu_stbc << 30) & ~((uint32_t)0xC0000000)) == 0);
	ASSERT_ERR((((uint32_t)ppdu_num_extn_ss << 28) & ~((uint32_t)0x30000000)) == 0);
	ASSERT_ERR((((uint32_t)ppdu_short_gi << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)ppdu_pre_type << 24) & ~((uint32_t)0x07000000)) == 0);
	ASSERT_ERR((((uint32_t)ppdu_bw << 22) & ~((uint32_t)0x00C00000)) == 0);
	ASSERT_ERR((((uint32_t)ppdu_length << 0) & ~((uint32_t)0x000FFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR,  ((uint32_t)ppdu_stbc << 30) |((uint32_t)ppdu_num_extn_ss << 28) |((uint32_t)ppdu_short_gi << 27) |((uint32_t)ppdu_pre_type << 24) |((uint32_t)ppdu_bw << 22) |((uint32_t)ppdu_length << 0));
}

__INLINE void mac_hw0_mu0_time_on_air_param_1_unpack(uint8_t* ppdu_stbc, uint8_t* ppdu_num_extn_ss, uint8_t* ppdu_short_gi, uint8_t* ppdu_pre_type, uint8_t* ppdu_bw, uint32_t* ppdu_length)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR);

	*ppdu_stbc = (localVal & ((uint32_t)0xC0000000)) >>  30;
	*ppdu_num_extn_ss = (localVal & ((uint32_t)0x30000000)) >>  28;
	*ppdu_short_gi = (localVal & ((uint32_t)0x08000000)) >>  27;
	*ppdu_pre_type = (localVal & ((uint32_t)0x07000000)) >>  24;
	*ppdu_bw = (localVal & ((uint32_t)0x00C00000)) >>  22;
	*ppdu_length = (localVal & ((uint32_t)0x000FFFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_time_on_air_param_1_ppdu_stbc_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xC0000000)) >> 30);
}
__INLINE void mac_hw0_mu0_time_on_air_param_1_ppdu_stbc_setf(uint8_t ppdustbc)
{
	ASSERT_ERR((((uint32_t)ppdustbc << 30) & ~((uint32_t)0xC0000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR) & ~((uint32_t)0xC0000000)) | ((uint32_t)ppdustbc <<30));
}
__INLINE uint8_t mac_hw0_mu0_time_on_air_param_1_ppdu_num_extn_ss_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x30000000)) >> 28);
}
__INLINE void mac_hw0_mu0_time_on_air_param_1_ppdu_num_extn_ss_setf(uint8_t ppdunumextnss)
{
	ASSERT_ERR((((uint32_t)ppdunumextnss << 28) & ~((uint32_t)0x30000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR) & ~((uint32_t)0x30000000)) | ((uint32_t)ppdunumextnss <<28));
}
__INLINE uint8_t mac_hw0_mu0_time_on_air_param_1_ppdu_short_gi_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_time_on_air_param_1_ppdu_short_gi_setf(uint8_t ppdushortgi)
{
	ASSERT_ERR((((uint32_t)ppdushortgi << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)ppdushortgi <<27));
}
__INLINE uint8_t mac_hw0_mu0_time_on_air_param_1_ppdu_pre_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x07000000)) >> 24);
}
__INLINE void mac_hw0_mu0_time_on_air_param_1_ppdu_pre_type_setf(uint8_t ppdupretype)
{
	ASSERT_ERR((((uint32_t)ppdupretype << 24) & ~((uint32_t)0x07000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR) & ~((uint32_t)0x07000000)) | ((uint32_t)ppdupretype <<24));
}
__INLINE uint8_t mac_hw0_mu0_time_on_air_param_1_ppdu_bw_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00C00000)) >> 22);
}
__INLINE void mac_hw0_mu0_time_on_air_param_1_ppdu_bw_setf(uint8_t ppdubw)
{
	ASSERT_ERR((((uint32_t)ppdubw << 22) & ~((uint32_t)0x00C00000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR) & ~((uint32_t)0x00C00000)) | ((uint32_t)ppdubw <<22));
}
__INLINE uint32_t mac_hw0_mu0_time_on_air_param_1_ppdu_length_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0x000FFFFF)) >> 0);
}
__INLINE void mac_hw0_mu0_time_on_air_param_1_ppdu_length_setf(uint32_t ppdulength)
{
	ASSERT_ERR((((uint32_t)ppdulength << 0) & ~((uint32_t)0x000FFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_1_ADDR) & ~((uint32_t)0x000FFFFF)) | ((uint32_t)ppdulength <<0));
}

/**
 * @brief TIME_ON_AIR_PARAM_2 register definition
 *  This register contains parameters used for computing time taken for packet on air. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    13:12 PPDU_LTF_TYPE             0x0
 *    11:10 PPDU_PE_DURATION          0x0
 *    09:08 PPDU_GI_TYPE              0x0
 *    07    PPDU_DCM                  0              
 *    06:00 PPDU_MCS_INDEX            0x0
 * </pre>
 */
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000080D4)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_OFFSET      0x000080D4
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_INDEX       0x00002035
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_time_on_air_param_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR);
}

__INLINE void mac_hw0_mu0_time_on_air_param_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_LTF_TYPE_MASK    ((uint32_t)0x00003000)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_LTF_TYPE_LSB    12
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_LTF_TYPE_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_PE_DURATION_MASK    ((uint32_t)0x00000C00)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_PE_DURATION_LSB    10
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_PE_DURATION_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_GI_TYPE_MASK    ((uint32_t)0x00000300)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_GI_TYPE_LSB    8
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_GI_TYPE_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_DCM_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_DCM_POS    7
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_MCS_INDEX_MASK    ((uint32_t)0x0000007F)
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_MCS_INDEX_LSB    0
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_MCS_INDEX_WIDTH    ((uint32_t)0x00000007)

#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_LTF_TYPE_RST    0x0
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_PE_DURATION_RST    0x0
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_GI_TYPE_RST    0x0
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_DCM_RST    0x0
#define MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_PPDU_MCS_INDEX_RST    0x0

__INLINE void mac_hw0_mu0_time_on_air_param_2_pack(uint8_t ppdu_ltf_type, uint8_t ppdu_pe_duration, uint8_t ppdu_gi_type, uint8_t ppdu_dcm, uint8_t ppdu_mcs_index)
{
	ASSERT_ERR((((uint32_t)ppdu_ltf_type << 12) & ~((uint32_t)0x00003000)) == 0);
	ASSERT_ERR((((uint32_t)ppdu_pe_duration << 10) & ~((uint32_t)0x00000C00)) == 0);
	ASSERT_ERR((((uint32_t)ppdu_gi_type << 8) & ~((uint32_t)0x00000300)) == 0);
	ASSERT_ERR((((uint32_t)ppdu_dcm << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)ppdu_mcs_index << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR,  ((uint32_t)ppdu_ltf_type << 12) |((uint32_t)ppdu_pe_duration << 10) |((uint32_t)ppdu_gi_type << 8) |((uint32_t)ppdu_dcm << 7) |((uint32_t)ppdu_mcs_index << 0));
}

__INLINE void mac_hw0_mu0_time_on_air_param_2_unpack(uint8_t* ppdu_ltf_type, uint8_t* ppdu_pe_duration, uint8_t* ppdu_gi_type, uint8_t* ppdu_dcm, uint8_t* ppdu_mcs_index)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR);

	*ppdu_ltf_type = (localVal & ((uint32_t)0x00003000)) >>  12;
	*ppdu_pe_duration = (localVal & ((uint32_t)0x00000C00)) >>  10;
	*ppdu_gi_type = (localVal & ((uint32_t)0x00000300)) >>  8;
	*ppdu_dcm = (localVal & ((uint32_t)0x00000080)) >>  7;
	*ppdu_mcs_index = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_time_on_air_param_2_ppdu_ltf_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003000)) >> 12);
}
__INLINE void mac_hw0_mu0_time_on_air_param_2_ppdu_ltf_type_setf(uint8_t ppdultftype)
{
	ASSERT_ERR((((uint32_t)ppdultftype << 12) & ~((uint32_t)0x00003000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR) & ~((uint32_t)0x00003000)) | ((uint32_t)ppdultftype <<12));
}
__INLINE uint8_t mac_hw0_mu0_time_on_air_param_2_ppdu_pe_duration_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000C00)) >> 10);
}
__INLINE void mac_hw0_mu0_time_on_air_param_2_ppdu_pe_duration_setf(uint8_t ppdupeduration)
{
	ASSERT_ERR((((uint32_t)ppdupeduration << 10) & ~((uint32_t)0x00000C00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR) & ~((uint32_t)0x00000C00)) | ((uint32_t)ppdupeduration <<10));
}
__INLINE uint8_t mac_hw0_mu0_time_on_air_param_2_ppdu_gi_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000300)) >> 8);
}
__INLINE void mac_hw0_mu0_time_on_air_param_2_ppdu_gi_type_setf(uint8_t ppdugitype)
{
	ASSERT_ERR((((uint32_t)ppdugitype << 8) & ~((uint32_t)0x00000300)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR) & ~((uint32_t)0x00000300)) | ((uint32_t)ppdugitype <<8));
}
__INLINE uint8_t mac_hw0_mu0_time_on_air_param_2_ppdu_dcm_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_time_on_air_param_2_ppdu_dcm_setf(uint8_t ppdudcm)
{
	ASSERT_ERR((((uint32_t)ppdudcm << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)ppdudcm <<7));
}
__INLINE uint8_t mac_hw0_mu0_time_on_air_param_2_ppdu_mcs_index_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void mac_hw0_mu0_time_on_air_param_2_ppdu_mcs_index_setf(uint8_t ppdumcsindex)
{
	ASSERT_ERR((((uint32_t)ppdumcsindex << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_PARAM_2_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)ppdumcsindex <<0));
}

/**
 * @brief TIME_ON_AIR_VALUE register definition
 *  This register contains time taken for packet on air. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    COMPUTE_DURATION          0              
 *    30    TIME_ON_AIR_VALID         0              
 *    15:00 TIME_ON_AIR               0x0
 * </pre>
 */
#define MAC_HW0_MU0_TIME_ON_AIR_VALUE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000080D8)
#define MAC_HW0_MU0_TIME_ON_AIR_VALUE_OFFSET      0x000080D8
#define MAC_HW0_MU0_TIME_ON_AIR_VALUE_INDEX       0x00002036
#define MAC_HW0_MU0_TIME_ON_AIR_VALUE_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_time_on_air_value_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_VALUE_ADDR);
}

__INLINE void mac_hw0_mu0_time_on_air_value_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_VALUE_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIME_ON_AIR_VALUE_COMPUTE_DURATION_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_TIME_ON_AIR_VALUE_COMPUTE_DURATION_POS    31
#define MAC_HW0_MU0_TIME_ON_AIR_VALUE_TIME_ON_AIR_VALID_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_TIME_ON_AIR_VALUE_TIME_ON_AIR_VALID_POS    30
#define MAC_HW0_MU0_TIME_ON_AIR_VALUE_TIME_ON_AIR_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_TIME_ON_AIR_VALUE_TIME_ON_AIR_LSB    0
#define MAC_HW0_MU0_TIME_ON_AIR_VALUE_TIME_ON_AIR_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_TIME_ON_AIR_VALUE_COMPUTE_DURATION_RST    0x0
#define MAC_HW0_MU0_TIME_ON_AIR_VALUE_TIME_ON_AIR_VALID_RST    0x0
#define MAC_HW0_MU0_TIME_ON_AIR_VALUE_TIME_ON_AIR_RST    0x0

__INLINE void mac_hw0_mu0_time_on_air_value_pack(uint8_t compute_duration, uint8_t time_on_air_valid, uint16_t time_on_air)
{
	ASSERT_ERR((((uint32_t)compute_duration << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)time_on_air_valid << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)time_on_air << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_VALUE_ADDR,  ((uint32_t)compute_duration << 31) |((uint32_t)time_on_air_valid << 30) |((uint32_t)time_on_air << 0));
}

__INLINE void mac_hw0_mu0_time_on_air_value_unpack(uint8_t* compute_duration, uint8_t* time_on_air_valid, uint16_t* time_on_air)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_VALUE_ADDR);

	*compute_duration = (localVal & ((uint32_t)0x80000000)) >>  31;
	*time_on_air_valid = (localVal & ((uint32_t)0x40000000)) >>  30;
	*time_on_air = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_time_on_air_value_compute_duration_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_VALUE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_time_on_air_value_compute_duration_setf(uint8_t computeduration)
{
	ASSERT_ERR((((uint32_t)computeduration << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIME_ON_AIR_VALUE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_VALUE_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)computeduration <<31));
}
__INLINE uint8_t mac_hw0_mu0_time_on_air_value_time_on_air_valid_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_VALUE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint16_t mac_hw0_mu0_time_on_air_value_time_on_air_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIME_ON_AIR_VALUE_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}

/**
 * @brief ERROR_INT_RAW_STATUS register definition
 *  Indicates ERROR events raw status register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27    HTP_TX_FAILED_DMA_STATE   0              
 *    26    HTP_TX_FAILED_CS          0              
 *    25    RX_PAYLOAD_DMA_DEAD       0              
 *    24    RX_HEADER_DMA_DEAD        0              
 *    23    RX_HEADER_DMA_DEAD2       0              
 *    22    PHY_ERR                   0              
 *    21    MAC_PHYIF_UNDER_RUN       0              
 *    20    UNEXPECTED_TX_END         0              
 *    19    RX_PAYLOAD_DMA_DEAD2      0              
 *    18    HTP_TX_DMA_DEAD           0              
 *    17    BCN_TX_DMA_DEAD           0              
 *    16    AC_3_TX_DMA_DEAD          0              
 *    15    AC_2_TX_DMA_DEAD          0              
 *    14    AC_1_TX_DMA_DEAD          0              
 *    13    AC_0_TX_DMA_DEAD          0              
 *    12    PT_ERROR                  0              
 *    10    OLBC_DSSS                 0              
 *    09    OLBC_OFDM                 0              
 *    08    RX_FIFO_OVER_FLOW         0              
 *    07    RX_DMA_EMPTY              0              
 *    06    MAC_PHYIF_OVERFLOW        0              
 *    05    RX_DMA_DISCARD            0              
 * </pre>
 */
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000080E0)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_OFFSET      0x000080E0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_INDEX       0x00002038
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_error_int_raw_status_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
}

// field definitions
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_HTP_TX_FAILED_DMA_STATE_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_HTP_TX_FAILED_DMA_STATE_POS    27
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_HTP_TX_FAILED_CS_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_HTP_TX_FAILED_CS_POS    26
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_PAYLOAD_DMA_DEAD_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_PAYLOAD_DMA_DEAD_POS    25
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_HEADER_DMA_DEAD_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_HEADER_DMA_DEAD_POS    24
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_HEADER_DMA_DEAD_2_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_HEADER_DMA_DEAD_2_POS    23
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_PHY_ERR_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_PHY_ERR_POS    22
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_MAC_PHYIF_UNDER_RUN_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_MAC_PHYIF_UNDER_RUN_POS    21
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_UNEXPECTED_TX_END_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_UNEXPECTED_TX_END_POS    20
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_PAYLOAD_DMA_DEAD_2_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_PAYLOAD_DMA_DEAD_2_POS    19
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_HTP_TX_DMA_DEAD_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_HTP_TX_DMA_DEAD_POS    18
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_BCN_TX_DMA_DEAD_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_BCN_TX_DMA_DEAD_POS    17
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_AC_3_TX_DMA_DEAD_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_AC_3_TX_DMA_DEAD_POS    16
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_AC_2_TX_DMA_DEAD_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_AC_2_TX_DMA_DEAD_POS    15
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_AC_1_TX_DMA_DEAD_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_AC_1_TX_DMA_DEAD_POS    14
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_AC_0_TX_DMA_DEAD_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_AC_0_TX_DMA_DEAD_POS    13
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_PT_ERROR_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_PT_ERROR_POS    12
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_OLBC_DSSS_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_OLBC_DSSS_POS    10
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_OLBC_OFDM_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_OLBC_OFDM_POS    9
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_FIFO_OVER_FLOW_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_FIFO_OVER_FLOW_POS    8
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_DMA_EMPTY_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_DMA_EMPTY_POS    7
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_MAC_PHYIF_OVERFLOW_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_MAC_PHYIF_OVERFLOW_POS    6
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_DMA_DISCARD_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_DMA_DISCARD_POS    5

#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_HTP_TX_FAILED_DMA_STATE_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_HTP_TX_FAILED_CS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_PAYLOAD_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_HEADER_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_HEADER_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_PHY_ERR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_MAC_PHYIF_UNDER_RUN_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_UNEXPECTED_TX_END_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_PAYLOAD_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_HTP_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_BCN_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_AC_3_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_AC_2_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_AC_1_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_AC_0_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_PT_ERROR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_OLBC_DSSS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_OLBC_OFDM_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_FIFO_OVER_FLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_DMA_EMPTY_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_MAC_PHYIF_OVERFLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_RAW_STATUS_RX_DMA_DISCARD_RST    0x0

__INLINE void mac_hw0_mu0_error_int_raw_status_unpack(uint8_t* htp_tx_failed_dma_state, uint8_t* htp_tx_failed_cs, uint8_t* rx_payload_dma_dead, uint8_t* rx_header_dma_dead, uint8_t* rx_header_dma_dead2, uint8_t* phy_err, uint8_t* mac_phyif_under_run, uint8_t* unexpected_tx_end, uint8_t* rx_payload_dma_dead2, uint8_t* htp_tx_dma_dead, uint8_t* bcn_tx_dma_dead, uint8_t* ac_3_tx_dma_dead, uint8_t* ac_2_tx_dma_dead, uint8_t* ac_1_tx_dma_dead, uint8_t* ac_0_tx_dma_dead, uint8_t* pt_error, uint8_t* olbc_dsss, uint8_t* olbc_ofdm, uint8_t* rx_fifo_over_flow, uint8_t* rx_dma_empty, uint8_t* mac_phyif_overflow, uint8_t* rx_dma_discard)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);

	*htp_tx_failed_dma_state = (localVal & ((uint32_t)0x08000000)) >>  27;
	*htp_tx_failed_cs = (localVal & ((uint32_t)0x04000000)) >>  26;
	*rx_payload_dma_dead = (localVal & ((uint32_t)0x02000000)) >>  25;
	*rx_header_dma_dead = (localVal & ((uint32_t)0x01000000)) >>  24;
	*rx_header_dma_dead2 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*phy_err = (localVal & ((uint32_t)0x00400000)) >>  22;
	*mac_phyif_under_run = (localVal & ((uint32_t)0x00200000)) >>  21;
	*unexpected_tx_end = (localVal & ((uint32_t)0x00100000)) >>  20;
	*rx_payload_dma_dead2 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*htp_tx_dma_dead = (localVal & ((uint32_t)0x00040000)) >>  18;
	*bcn_tx_dma_dead = (localVal & ((uint32_t)0x00020000)) >>  17;
	*ac_3_tx_dma_dead = (localVal & ((uint32_t)0x00010000)) >>  16;
	*ac_2_tx_dma_dead = (localVal & ((uint32_t)0x00008000)) >>  15;
	*ac_1_tx_dma_dead = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ac_0_tx_dma_dead = (localVal & ((uint32_t)0x00002000)) >>  13;
	*pt_error = (localVal & ((uint32_t)0x00001000)) >>  12;
	*olbc_dsss = (localVal & ((uint32_t)0x00000400)) >>  10;
	*olbc_ofdm = (localVal & ((uint32_t)0x00000200)) >>  9;
	*rx_fifo_over_flow = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_dma_empty = (localVal & ((uint32_t)0x00000080)) >>  7;
	*mac_phyif_overflow = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rx_dma_discard = (localVal & ((uint32_t)0x00000020)) >>  5;
}

__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_htp_tx_failed_dma_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_htp_tx_failed_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_rx_payload_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_rx_header_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_rx_header_dma_dead_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_phy_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_mac_phyif_under_run_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_unexpected_tx_end_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_rx_payload_dma_dead_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_htp_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_bcn_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_ac_3_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_ac_2_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_ac_1_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_ac_0_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_pt_error_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_olbc_dsss_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_olbc_ofdm_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_rx_fifo_over_flow_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_rx_dma_empty_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_mac_phyif_overflow_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_error_int_raw_status_rx_dma_discard_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}

/**
 * @brief ERROR_INT_EVENT_EN_SMAC register definition
 *  ERROR interrupt events enable SMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27    HTP_TX_FAILED_DMA_STATE   0              
 *    26    HTP_TX_FAILED_CS          0              
 *    25    RX_PAYLOAD_DMA_DEAD       0              
 *    24    RX_HEADER_DMA_DEAD        0              
 *    23    RX_HEADER_DMA_DEAD2       0              
 *    22    PHY_ERR                   0              
 *    21    MAC_PHYIF_UNDER_RUN       0              
 *    20    UNEXPECTED_TX_END         0              
 *    19    RX_PAYLOAD_DMA_DEAD2      0              
 *    18    HTP_TX_DMA_DEAD           0              
 *    17    BCN_TX_DMA_DEAD           0              
 *    16    AC_3_TX_DMA_DEAD          0              
 *    15    AC_2_TX_DMA_DEAD          0              
 *    14    AC_1_TX_DMA_DEAD          0              
 *    13    AC_0_TX_DMA_DEAD          0              
 *    12    PT_ERROR                  0              
 *    10    OLBC_DSSS                 0              
 *    09    OLBC_OFDM                 0              
 *    08    RX_FIFO_OVER_FLOW         0              
 *    07    RX_DMA_EMPTY              0              
 *    06    MAC_PHYIF_OVERFLOW        0              
 *    05    RX_DMA_DISCARD            0              
 * </pre>
 */
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000080E4)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_OFFSET      0x000080E4
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_INDEX       0x00002039
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_error_int_event_en_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
}

__INLINE void mac_hw0_mu0_error_int_event_en_smac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_HTP_TX_FAILED_DMA_STATE_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_HTP_TX_FAILED_DMA_STATE_POS    27
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_HTP_TX_FAILED_CS_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_HTP_TX_FAILED_CS_POS    26
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_PAYLOAD_DMA_DEAD_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_PAYLOAD_DMA_DEAD_POS    25
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_HEADER_DMA_DEAD_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_HEADER_DMA_DEAD_POS    24
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_HEADER_DMA_DEAD_2_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_HEADER_DMA_DEAD_2_POS    23
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_PHY_ERR_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_PHY_ERR_POS    22
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_MAC_PHYIF_UNDER_RUN_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_MAC_PHYIF_UNDER_RUN_POS    21
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_UNEXPECTED_TX_END_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_UNEXPECTED_TX_END_POS    20
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_PAYLOAD_DMA_DEAD_2_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_PAYLOAD_DMA_DEAD_2_POS    19
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_HTP_TX_DMA_DEAD_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_HTP_TX_DMA_DEAD_POS    18
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_BCN_TX_DMA_DEAD_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_BCN_TX_DMA_DEAD_POS    17
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_AC_3_TX_DMA_DEAD_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_AC_3_TX_DMA_DEAD_POS    16
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_AC_2_TX_DMA_DEAD_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_AC_2_TX_DMA_DEAD_POS    15
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_AC_1_TX_DMA_DEAD_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_AC_1_TX_DMA_DEAD_POS    14
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_AC_0_TX_DMA_DEAD_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_AC_0_TX_DMA_DEAD_POS    13
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_PT_ERROR_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_PT_ERROR_POS    12
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_OLBC_DSSS_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_OLBC_DSSS_POS    10
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_OLBC_OFDM_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_OLBC_OFDM_POS    9
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_FIFO_OVER_FLOW_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_FIFO_OVER_FLOW_POS    8
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_DMA_EMPTY_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_DMA_EMPTY_POS    7
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_MAC_PHYIF_OVERFLOW_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_MAC_PHYIF_OVERFLOW_POS    6
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_DMA_DISCARD_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_DMA_DISCARD_POS    5

#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_HTP_TX_FAILED_DMA_STATE_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_HTP_TX_FAILED_CS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_PAYLOAD_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_HEADER_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_HEADER_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_PHY_ERR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_MAC_PHYIF_UNDER_RUN_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_UNEXPECTED_TX_END_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_PAYLOAD_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_HTP_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_BCN_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_AC_3_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_AC_2_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_AC_1_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_AC_0_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_PT_ERROR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_OLBC_DSSS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_OLBC_OFDM_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_FIFO_OVER_FLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_DMA_EMPTY_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_MAC_PHYIF_OVERFLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_RX_DMA_DISCARD_RST    0x0

__INLINE void mac_hw0_mu0_error_int_event_en_smac_pack(uint8_t htp_tx_failed_dma_state, uint8_t htp_tx_failed_cs, uint8_t rx_payload_dma_dead, uint8_t rx_header_dma_dead, uint8_t rx_header_dma_dead2, uint8_t phy_err, uint8_t mac_phyif_under_run, uint8_t unexpected_tx_end, uint8_t rx_payload_dma_dead2, uint8_t htp_tx_dma_dead, uint8_t bcn_tx_dma_dead, uint8_t ac_3_tx_dma_dead, uint8_t ac_2_tx_dma_dead, uint8_t ac_1_tx_dma_dead, uint8_t ac_0_tx_dma_dead, uint8_t pt_error, uint8_t olbc_dsss, uint8_t olbc_ofdm, uint8_t rx_fifo_over_flow, uint8_t rx_dma_empty, uint8_t mac_phyif_overflow, uint8_t rx_dma_discard)
{
	ASSERT_ERR((((uint32_t)htp_tx_failed_dma_state << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_failed_cs << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_dma_dead << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_dma_dead << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_dma_dead2 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)phy_err << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)mac_phyif_under_run << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)unexpected_tx_end << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_dma_dead2 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_dma_dead << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)bcn_tx_dma_dead << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_tx_dma_dead << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_tx_dma_dead << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_tx_dma_dead << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_tx_dma_dead << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)pt_error << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)olbc_dsss << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)olbc_ofdm << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)rx_fifo_over_flow << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)rx_dma_empty << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)mac_phyif_overflow << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)rx_dma_discard << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR,  ((uint32_t)htp_tx_failed_dma_state << 27) |((uint32_t)htp_tx_failed_cs << 26) |((uint32_t)rx_payload_dma_dead << 25) |((uint32_t)rx_header_dma_dead << 24) |((uint32_t)rx_header_dma_dead2 << 23) |((uint32_t)phy_err << 22) |((uint32_t)mac_phyif_under_run << 21) |((uint32_t)unexpected_tx_end << 20) |((uint32_t)rx_payload_dma_dead2 << 19) |((uint32_t)htp_tx_dma_dead << 18) |((uint32_t)bcn_tx_dma_dead << 17) |((uint32_t)ac_3_tx_dma_dead << 16) |((uint32_t)ac_2_tx_dma_dead << 15) |((uint32_t)ac_1_tx_dma_dead << 14) |((uint32_t)ac_0_tx_dma_dead << 13) |((uint32_t)pt_error << 12) |((uint32_t)olbc_dsss << 10) |((uint32_t)olbc_ofdm << 9) |((uint32_t)rx_fifo_over_flow << 8) |((uint32_t)rx_dma_empty << 7) |((uint32_t)mac_phyif_overflow << 6) |((uint32_t)rx_dma_discard << 5));
}

__INLINE void mac_hw0_mu0_error_int_event_en_smac_unpack(uint8_t* htp_tx_failed_dma_state, uint8_t* htp_tx_failed_cs, uint8_t* rx_payload_dma_dead, uint8_t* rx_header_dma_dead, uint8_t* rx_header_dma_dead2, uint8_t* phy_err, uint8_t* mac_phyif_under_run, uint8_t* unexpected_tx_end, uint8_t* rx_payload_dma_dead2, uint8_t* htp_tx_dma_dead, uint8_t* bcn_tx_dma_dead, uint8_t* ac_3_tx_dma_dead, uint8_t* ac_2_tx_dma_dead, uint8_t* ac_1_tx_dma_dead, uint8_t* ac_0_tx_dma_dead, uint8_t* pt_error, uint8_t* olbc_dsss, uint8_t* olbc_ofdm, uint8_t* rx_fifo_over_flow, uint8_t* rx_dma_empty, uint8_t* mac_phyif_overflow, uint8_t* rx_dma_discard)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);

	*htp_tx_failed_dma_state = (localVal & ((uint32_t)0x08000000)) >>  27;
	*htp_tx_failed_cs = (localVal & ((uint32_t)0x04000000)) >>  26;
	*rx_payload_dma_dead = (localVal & ((uint32_t)0x02000000)) >>  25;
	*rx_header_dma_dead = (localVal & ((uint32_t)0x01000000)) >>  24;
	*rx_header_dma_dead2 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*phy_err = (localVal & ((uint32_t)0x00400000)) >>  22;
	*mac_phyif_under_run = (localVal & ((uint32_t)0x00200000)) >>  21;
	*unexpected_tx_end = (localVal & ((uint32_t)0x00100000)) >>  20;
	*rx_payload_dma_dead2 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*htp_tx_dma_dead = (localVal & ((uint32_t)0x00040000)) >>  18;
	*bcn_tx_dma_dead = (localVal & ((uint32_t)0x00020000)) >>  17;
	*ac_3_tx_dma_dead = (localVal & ((uint32_t)0x00010000)) >>  16;
	*ac_2_tx_dma_dead = (localVal & ((uint32_t)0x00008000)) >>  15;
	*ac_1_tx_dma_dead = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ac_0_tx_dma_dead = (localVal & ((uint32_t)0x00002000)) >>  13;
	*pt_error = (localVal & ((uint32_t)0x00001000)) >>  12;
	*olbc_dsss = (localVal & ((uint32_t)0x00000400)) >>  10;
	*olbc_ofdm = (localVal & ((uint32_t)0x00000200)) >>  9;
	*rx_fifo_over_flow = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_dma_empty = (localVal & ((uint32_t)0x00000080)) >>  7;
	*mac_phyif_overflow = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rx_dma_discard = (localVal & ((uint32_t)0x00000020)) >>  5;
}

__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_htp_tx_failed_dma_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_htp_tx_failed_dma_state_setf(uint8_t htptxfaileddmastate)
{
	ASSERT_ERR((((uint32_t)htptxfaileddmastate << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)htptxfaileddmastate <<27));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_htp_tx_failed_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_htp_tx_failed_cs_setf(uint8_t htptxfailedcs)
{
	ASSERT_ERR((((uint32_t)htptxfailedcs << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)htptxfailedcs <<26));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_rx_payload_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_rx_payload_dma_dead_setf(uint8_t rxpayloaddmadead)
{
	ASSERT_ERR((((uint32_t)rxpayloaddmadead << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)rxpayloaddmadead <<25));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_rx_header_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_rx_header_dma_dead_setf(uint8_t rxheaderdmadead)
{
	ASSERT_ERR((((uint32_t)rxheaderdmadead << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)rxheaderdmadead <<24));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_rx_header_dma_dead_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_rx_header_dma_dead_2_setf(uint8_t rxheaderdmadead2)
{
	ASSERT_ERR((((uint32_t)rxheaderdmadead2 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)rxheaderdmadead2 <<23));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_phy_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_phy_err_setf(uint8_t phyerr)
{
	ASSERT_ERR((((uint32_t)phyerr << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)phyerr <<22));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_mac_phyif_under_run_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_mac_phyif_under_run_setf(uint8_t macphyifunderrun)
{
	ASSERT_ERR((((uint32_t)macphyifunderrun << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)macphyifunderrun <<21));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_unexpected_tx_end_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_unexpected_tx_end_setf(uint8_t unexpectedtxend)
{
	ASSERT_ERR((((uint32_t)unexpectedtxend << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)unexpectedtxend <<20));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_rx_payload_dma_dead_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_rx_payload_dma_dead_2_setf(uint8_t rxpayloaddmadead2)
{
	ASSERT_ERR((((uint32_t)rxpayloaddmadead2 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)rxpayloaddmadead2 <<19));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_htp_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_htp_tx_dma_dead_setf(uint8_t htptxdmadead)
{
	ASSERT_ERR((((uint32_t)htptxdmadead << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)htptxdmadead <<18));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_bcn_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_bcn_tx_dma_dead_setf(uint8_t bcntxdmadead)
{
	ASSERT_ERR((((uint32_t)bcntxdmadead << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)bcntxdmadead <<17));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_ac_3_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_ac_3_tx_dma_dead_setf(uint8_t ac3txdmadead)
{
	ASSERT_ERR((((uint32_t)ac3txdmadead << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)ac3txdmadead <<16));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_ac_2_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_ac_2_tx_dma_dead_setf(uint8_t ac2txdmadead)
{
	ASSERT_ERR((((uint32_t)ac2txdmadead << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)ac2txdmadead <<15));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_ac_1_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_ac_1_tx_dma_dead_setf(uint8_t ac1txdmadead)
{
	ASSERT_ERR((((uint32_t)ac1txdmadead << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)ac1txdmadead <<14));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_ac_0_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_ac_0_tx_dma_dead_setf(uint8_t ac0txdmadead)
{
	ASSERT_ERR((((uint32_t)ac0txdmadead << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)ac0txdmadead <<13));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_pt_error_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_pt_error_setf(uint8_t pterror)
{
	ASSERT_ERR((((uint32_t)pterror << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)pterror <<12));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_olbc_dsss_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_olbc_dsss_setf(uint8_t olbcdsss)
{
	ASSERT_ERR((((uint32_t)olbcdsss << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)olbcdsss <<10));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_olbc_ofdm_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_olbc_ofdm_setf(uint8_t olbcofdm)
{
	ASSERT_ERR((((uint32_t)olbcofdm << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)olbcofdm <<9));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_rx_fifo_over_flow_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_rx_fifo_over_flow_setf(uint8_t rxfifooverflow)
{
	ASSERT_ERR((((uint32_t)rxfifooverflow << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)rxfifooverflow <<8));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_rx_dma_empty_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_rx_dma_empty_setf(uint8_t rxdmaempty)
{
	ASSERT_ERR((((uint32_t)rxdmaempty << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)rxdmaempty <<7));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_mac_phyif_overflow_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_mac_phyif_overflow_setf(uint8_t macphyifoverflow)
{
	ASSERT_ERR((((uint32_t)macphyifoverflow << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)macphyifoverflow <<6));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_smac_rx_dma_discard_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_error_int_event_en_smac_rx_dma_discard_setf(uint8_t rxdmadiscard)
{
	ASSERT_ERR((((uint32_t)rxdmadiscard << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rxdmadiscard <<5));
}

/**
 * @brief ERROR_INT_EVENT_STATUS_UMAC register definition
 *  ERROR interrupt events status UMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27    HTP_TX_FAILED_DMA_STATE   0              
 *    26    HTP_TX_FAILED_CS          0              
 *    25    RX_PAYLOAD_DMA_DEAD       0              
 *    24    RX_HEADER_DMA_DEAD        0              
 *    23    RX_HEADER_DMA_DEAD2       0              
 *    22    PHY_ERR                   0              
 *    21    MAC_PHYIF_UNDER_RUN       0              
 *    20    UNEXPECTED_TX_END         0              
 *    19    RX_PAYLOAD_DMA_DEAD2      0              
 *    18    HTP_TX_DMA_DEAD           0              
 *    17    BCN_TX_DMA_DEAD           0              
 *    16    AC_3_TX_DMA_DEAD          0              
 *    15    AC_2_TX_DMA_DEAD          0              
 *    14    AC_1_TX_DMA_DEAD          0              
 *    13    AC_0_TX_DMA_DEAD          0              
 *    12    PT_ERROR                  0              
 *    10    OLBC_DSSS                 0              
 *    09    OLBC_OFDM                 0              
 *    08    RX_FIFO_OVER_FLOW         0              
 *    07    RX_DMA_EMPTY              0              
 *    06    MAC_PHYIF_OVERFLOW        0              
 *    05    RX_DMA_DISCARD            0              
 * </pre>
 */
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000080E8)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_OFFSET      0x000080E8
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_INDEX       0x0000203A
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_error_int_event_status_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_HTP_TX_FAILED_DMA_STATE_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_HTP_TX_FAILED_DMA_STATE_POS    27
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_HTP_TX_FAILED_CS_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_HTP_TX_FAILED_CS_POS    26
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_PAYLOAD_DMA_DEAD_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_PAYLOAD_DMA_DEAD_POS    25
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_HEADER_DMA_DEAD_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_HEADER_DMA_DEAD_POS    24
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_HEADER_DMA_DEAD_2_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_HEADER_DMA_DEAD_2_POS    23
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_PHY_ERR_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_PHY_ERR_POS    22
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_MAC_PHYIF_UNDER_RUN_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_MAC_PHYIF_UNDER_RUN_POS    21
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_UNEXPECTED_TX_END_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_UNEXPECTED_TX_END_POS    20
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_PAYLOAD_DMA_DEAD_2_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_PAYLOAD_DMA_DEAD_2_POS    19
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_HTP_TX_DMA_DEAD_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_HTP_TX_DMA_DEAD_POS    18
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_BCN_TX_DMA_DEAD_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_BCN_TX_DMA_DEAD_POS    17
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_AC_3_TX_DMA_DEAD_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_AC_3_TX_DMA_DEAD_POS    16
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_AC_2_TX_DMA_DEAD_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_AC_2_TX_DMA_DEAD_POS    15
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_AC_1_TX_DMA_DEAD_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_AC_1_TX_DMA_DEAD_POS    14
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_AC_0_TX_DMA_DEAD_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_AC_0_TX_DMA_DEAD_POS    13
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_PT_ERROR_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_PT_ERROR_POS    12
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_OLBC_DSSS_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_OLBC_DSSS_POS    10
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_OLBC_OFDM_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_OLBC_OFDM_POS    9
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_FIFO_OVER_FLOW_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_FIFO_OVER_FLOW_POS    8
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_DMA_EMPTY_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_DMA_EMPTY_POS    7
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_MAC_PHYIF_OVERFLOW_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_MAC_PHYIF_OVERFLOW_POS    6
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_DMA_DISCARD_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_DMA_DISCARD_POS    5

#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_HTP_TX_FAILED_DMA_STATE_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_HTP_TX_FAILED_CS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_PAYLOAD_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_HEADER_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_HEADER_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_PHY_ERR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_MAC_PHYIF_UNDER_RUN_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_UNEXPECTED_TX_END_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_PAYLOAD_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_HTP_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_BCN_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_AC_3_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_AC_2_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_AC_1_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_AC_0_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_PT_ERROR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_OLBC_DSSS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_OLBC_OFDM_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_FIFO_OVER_FLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_DMA_EMPTY_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_MAC_PHYIF_OVERFLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_RX_DMA_DISCARD_RST    0x0

__INLINE void mac_hw0_mu0_error_int_event_status_umac_unpack(uint8_t* htp_tx_failed_dma_state, uint8_t* htp_tx_failed_cs, uint8_t* rx_payload_dma_dead, uint8_t* rx_header_dma_dead, uint8_t* rx_header_dma_dead2, uint8_t* phy_err, uint8_t* mac_phyif_under_run, uint8_t* unexpected_tx_end, uint8_t* rx_payload_dma_dead2, uint8_t* htp_tx_dma_dead, uint8_t* bcn_tx_dma_dead, uint8_t* ac_3_tx_dma_dead, uint8_t* ac_2_tx_dma_dead, uint8_t* ac_1_tx_dma_dead, uint8_t* ac_0_tx_dma_dead, uint8_t* pt_error, uint8_t* olbc_dsss, uint8_t* olbc_ofdm, uint8_t* rx_fifo_over_flow, uint8_t* rx_dma_empty, uint8_t* mac_phyif_overflow, uint8_t* rx_dma_discard)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);

	*htp_tx_failed_dma_state = (localVal & ((uint32_t)0x08000000)) >>  27;
	*htp_tx_failed_cs = (localVal & ((uint32_t)0x04000000)) >>  26;
	*rx_payload_dma_dead = (localVal & ((uint32_t)0x02000000)) >>  25;
	*rx_header_dma_dead = (localVal & ((uint32_t)0x01000000)) >>  24;
	*rx_header_dma_dead2 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*phy_err = (localVal & ((uint32_t)0x00400000)) >>  22;
	*mac_phyif_under_run = (localVal & ((uint32_t)0x00200000)) >>  21;
	*unexpected_tx_end = (localVal & ((uint32_t)0x00100000)) >>  20;
	*rx_payload_dma_dead2 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*htp_tx_dma_dead = (localVal & ((uint32_t)0x00040000)) >>  18;
	*bcn_tx_dma_dead = (localVal & ((uint32_t)0x00020000)) >>  17;
	*ac_3_tx_dma_dead = (localVal & ((uint32_t)0x00010000)) >>  16;
	*ac_2_tx_dma_dead = (localVal & ((uint32_t)0x00008000)) >>  15;
	*ac_1_tx_dma_dead = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ac_0_tx_dma_dead = (localVal & ((uint32_t)0x00002000)) >>  13;
	*pt_error = (localVal & ((uint32_t)0x00001000)) >>  12;
	*olbc_dsss = (localVal & ((uint32_t)0x00000400)) >>  10;
	*olbc_ofdm = (localVal & ((uint32_t)0x00000200)) >>  9;
	*rx_fifo_over_flow = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_dma_empty = (localVal & ((uint32_t)0x00000080)) >>  7;
	*mac_phyif_overflow = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rx_dma_discard = (localVal & ((uint32_t)0x00000020)) >>  5;
}

__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_htp_tx_failed_dma_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_htp_tx_failed_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_rx_payload_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_rx_header_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_rx_header_dma_dead_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_phy_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_mac_phyif_under_run_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_unexpected_tx_end_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_rx_payload_dma_dead_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_htp_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_bcn_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_ac_3_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_ac_2_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_ac_1_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_ac_0_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_pt_error_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_olbc_dsss_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_olbc_ofdm_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_rx_fifo_over_flow_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_rx_dma_empty_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_mac_phyif_overflow_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_umac_rx_dma_discard_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}

/**
 * @brief ERROR_INT_EVENT_STATUS_SMAC register definition
 *  ERROR interrupt events status SMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27    HTP_TX_FAILED_DMA_STATE   0              
 *    26    HTP_TX_FAILED_CS          0              
 *    25    RX_PAYLOAD_DMA_DEAD       0              
 *    24    RX_HEADER_DMA_DEAD        0              
 *    23    RX_HEADER_DMA_DEAD2       0              
 *    22    PHY_ERR                   0              
 *    21    MAC_PHYIF_UNDER_RUN       0              
 *    20    UNEXPECTED_TX_END         0              
 *    19    RX_PAYLOAD_DMA_DEAD2      0              
 *    18    HTP_TX_DMA_DEAD           0              
 *    17    BCN_TX_DMA_DEAD           0              
 *    16    AC_3_TX_DMA_DEAD          0              
 *    15    AC_2_TX_DMA_DEAD          0              
 *    14    AC_1_TX_DMA_DEAD          0              
 *    13    AC_0_TX_DMA_DEAD          0              
 *    12    PT_ERROR                  0              
 *    10    OLBC_DSSS                 0              
 *    09    OLBC_OFDM                 0              
 *    08    RX_FIFO_OVER_FLOW         0              
 *    07    RX_DMA_EMPTY              0              
 *    06    MAC_PHYIF_OVERFLOW        0              
 *    05    RX_DMA_DISCARD            0              
 * </pre>
 */
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000080EC)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_OFFSET      0x000080EC
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_INDEX       0x0000203B
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_error_int_event_status_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_HTP_TX_FAILED_DMA_STATE_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_HTP_TX_FAILED_DMA_STATE_POS    27
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_HTP_TX_FAILED_CS_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_HTP_TX_FAILED_CS_POS    26
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_PAYLOAD_DMA_DEAD_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_PAYLOAD_DMA_DEAD_POS    25
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_HEADER_DMA_DEAD_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_HEADER_DMA_DEAD_POS    24
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_HEADER_DMA_DEAD_2_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_HEADER_DMA_DEAD_2_POS    23
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_PHY_ERR_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_PHY_ERR_POS    22
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_MAC_PHYIF_UNDER_RUN_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_MAC_PHYIF_UNDER_RUN_POS    21
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_UNEXPECTED_TX_END_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_UNEXPECTED_TX_END_POS    20
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_PAYLOAD_DMA_DEAD_2_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_PAYLOAD_DMA_DEAD_2_POS    19
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_HTP_TX_DMA_DEAD_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_HTP_TX_DMA_DEAD_POS    18
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_BCN_TX_DMA_DEAD_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_BCN_TX_DMA_DEAD_POS    17
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_AC_3_TX_DMA_DEAD_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_AC_3_TX_DMA_DEAD_POS    16
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_AC_2_TX_DMA_DEAD_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_AC_2_TX_DMA_DEAD_POS    15
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_AC_1_TX_DMA_DEAD_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_AC_1_TX_DMA_DEAD_POS    14
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_AC_0_TX_DMA_DEAD_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_AC_0_TX_DMA_DEAD_POS    13
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_PT_ERROR_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_PT_ERROR_POS    12
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_OLBC_DSSS_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_OLBC_DSSS_POS    10
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_OLBC_OFDM_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_OLBC_OFDM_POS    9
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_FIFO_OVER_FLOW_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_FIFO_OVER_FLOW_POS    8
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_DMA_EMPTY_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_DMA_EMPTY_POS    7
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_MAC_PHYIF_OVERFLOW_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_MAC_PHYIF_OVERFLOW_POS    6
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_DMA_DISCARD_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_DMA_DISCARD_POS    5

#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_HTP_TX_FAILED_DMA_STATE_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_HTP_TX_FAILED_CS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_PAYLOAD_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_HEADER_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_HEADER_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_PHY_ERR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_MAC_PHYIF_UNDER_RUN_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_UNEXPECTED_TX_END_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_PAYLOAD_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_HTP_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_BCN_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_AC_3_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_AC_2_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_AC_1_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_AC_0_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_PT_ERROR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_OLBC_DSSS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_OLBC_OFDM_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_FIFO_OVER_FLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_DMA_EMPTY_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_MAC_PHYIF_OVERFLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_RX_DMA_DISCARD_RST    0x0

__INLINE void mac_hw0_mu0_error_int_event_status_smac_unpack(uint8_t* htp_tx_failed_dma_state, uint8_t* htp_tx_failed_cs, uint8_t* rx_payload_dma_dead, uint8_t* rx_header_dma_dead, uint8_t* rx_header_dma_dead2, uint8_t* phy_err, uint8_t* mac_phyif_under_run, uint8_t* unexpected_tx_end, uint8_t* rx_payload_dma_dead2, uint8_t* htp_tx_dma_dead, uint8_t* bcn_tx_dma_dead, uint8_t* ac_3_tx_dma_dead, uint8_t* ac_2_tx_dma_dead, uint8_t* ac_1_tx_dma_dead, uint8_t* ac_0_tx_dma_dead, uint8_t* pt_error, uint8_t* olbc_dsss, uint8_t* olbc_ofdm, uint8_t* rx_fifo_over_flow, uint8_t* rx_dma_empty, uint8_t* mac_phyif_overflow, uint8_t* rx_dma_discard)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);

	*htp_tx_failed_dma_state = (localVal & ((uint32_t)0x08000000)) >>  27;
	*htp_tx_failed_cs = (localVal & ((uint32_t)0x04000000)) >>  26;
	*rx_payload_dma_dead = (localVal & ((uint32_t)0x02000000)) >>  25;
	*rx_header_dma_dead = (localVal & ((uint32_t)0x01000000)) >>  24;
	*rx_header_dma_dead2 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*phy_err = (localVal & ((uint32_t)0x00400000)) >>  22;
	*mac_phyif_under_run = (localVal & ((uint32_t)0x00200000)) >>  21;
	*unexpected_tx_end = (localVal & ((uint32_t)0x00100000)) >>  20;
	*rx_payload_dma_dead2 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*htp_tx_dma_dead = (localVal & ((uint32_t)0x00040000)) >>  18;
	*bcn_tx_dma_dead = (localVal & ((uint32_t)0x00020000)) >>  17;
	*ac_3_tx_dma_dead = (localVal & ((uint32_t)0x00010000)) >>  16;
	*ac_2_tx_dma_dead = (localVal & ((uint32_t)0x00008000)) >>  15;
	*ac_1_tx_dma_dead = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ac_0_tx_dma_dead = (localVal & ((uint32_t)0x00002000)) >>  13;
	*pt_error = (localVal & ((uint32_t)0x00001000)) >>  12;
	*olbc_dsss = (localVal & ((uint32_t)0x00000400)) >>  10;
	*olbc_ofdm = (localVal & ((uint32_t)0x00000200)) >>  9;
	*rx_fifo_over_flow = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_dma_empty = (localVal & ((uint32_t)0x00000080)) >>  7;
	*mac_phyif_overflow = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rx_dma_discard = (localVal & ((uint32_t)0x00000020)) >>  5;
}

__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_htp_tx_failed_dma_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_htp_tx_failed_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_rx_payload_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_rx_header_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_rx_header_dma_dead_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_phy_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_mac_phyif_under_run_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_unexpected_tx_end_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_rx_payload_dma_dead_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_htp_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_bcn_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_ac_3_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_ac_2_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_ac_1_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_ac_0_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_pt_error_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_olbc_dsss_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_olbc_ofdm_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_rx_fifo_over_flow_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_rx_dma_empty_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_mac_phyif_overflow_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_smac_rx_dma_discard_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}

/**
 * @brief ERROR_INT_EVENT_FORCE register definition
 *  ERROR interrupt events force register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27    HTP_TX_FAILED_DMA_STATE   0              
 *    26    HTP_TX_FAILED_CS          0              
 *    25    RX_PAYLOAD_DMA_DEAD       0              
 *    24    RX_HEADER_DMA_DEAD        0              
 *    23    RX_HEADER_DMA_DEAD2       0              
 *    22    PHY_ERR                   0              
 *    21    MAC_PHYIF_UNDER_RUN       0              
 *    20    UNEXPECTED_TX_END         0              
 *    19    RX_PAYLOAD_DMA_DEAD2      0              
 *    18    HTP_TX_DMA_DEAD           0              
 *    17    BCN_TX_DMA_DEAD           0              
 *    16    AC_3_TX_DMA_DEAD          0              
 *    15    AC_2_TX_DMA_DEAD          0              
 *    14    AC_1_TX_DMA_DEAD          0              
 *    13    AC_0_TX_DMA_DEAD          0              
 *    12    PT_ERROR                  0              
 *    10    OLBC_DSSS                 0              
 *    09    OLBC_OFDM                 0              
 *    08    RX_FIFO_OVER_FLOW         0              
 *    07    RX_DMA_EMPTY              0              
 *    06    MAC_PHYIF_OVERFLOW        0              
 *    05    RX_DMA_DISCARD            0              
 * </pre>
 */
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000080F0)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_OFFSET      0x000080F0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_INDEX       0x0000203C
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_error_int_event_force_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
}

__INLINE void mac_hw0_mu0_error_int_event_force_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_HTP_TX_FAILED_DMA_STATE_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_HTP_TX_FAILED_DMA_STATE_POS    27
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_HTP_TX_FAILED_CS_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_HTP_TX_FAILED_CS_POS    26
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_PAYLOAD_DMA_DEAD_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_PAYLOAD_DMA_DEAD_POS    25
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_HEADER_DMA_DEAD_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_HEADER_DMA_DEAD_POS    24
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_HEADER_DMA_DEAD_2_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_HEADER_DMA_DEAD_2_POS    23
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_PHY_ERR_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_PHY_ERR_POS    22
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_MAC_PHYIF_UNDER_RUN_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_MAC_PHYIF_UNDER_RUN_POS    21
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_UNEXPECTED_TX_END_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_UNEXPECTED_TX_END_POS    20
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_PAYLOAD_DMA_DEAD_2_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_PAYLOAD_DMA_DEAD_2_POS    19
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_HTP_TX_DMA_DEAD_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_HTP_TX_DMA_DEAD_POS    18
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_BCN_TX_DMA_DEAD_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_BCN_TX_DMA_DEAD_POS    17
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_AC_3_TX_DMA_DEAD_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_AC_3_TX_DMA_DEAD_POS    16
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_AC_2_TX_DMA_DEAD_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_AC_2_TX_DMA_DEAD_POS    15
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_AC_1_TX_DMA_DEAD_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_AC_1_TX_DMA_DEAD_POS    14
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_AC_0_TX_DMA_DEAD_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_AC_0_TX_DMA_DEAD_POS    13
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_PT_ERROR_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_PT_ERROR_POS    12
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_OLBC_DSSS_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_OLBC_DSSS_POS    10
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_OLBC_OFDM_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_OLBC_OFDM_POS    9
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_FIFO_OVER_FLOW_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_FIFO_OVER_FLOW_POS    8
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_DMA_EMPTY_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_DMA_EMPTY_POS    7
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_MAC_PHYIF_OVERFLOW_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_MAC_PHYIF_OVERFLOW_POS    6
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_DMA_DISCARD_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_DMA_DISCARD_POS    5

#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_HTP_TX_FAILED_DMA_STATE_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_HTP_TX_FAILED_CS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_PAYLOAD_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_HEADER_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_HEADER_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_PHY_ERR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_MAC_PHYIF_UNDER_RUN_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_UNEXPECTED_TX_END_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_PAYLOAD_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_HTP_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_BCN_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_AC_3_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_AC_2_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_AC_1_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_AC_0_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_PT_ERROR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_OLBC_DSSS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_OLBC_OFDM_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_FIFO_OVER_FLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_DMA_EMPTY_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_MAC_PHYIF_OVERFLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_RX_DMA_DISCARD_RST    0x0

__INLINE void mac_hw0_mu0_error_int_event_force_pack(uint8_t htp_tx_failed_dma_state, uint8_t htp_tx_failed_cs, uint8_t rx_payload_dma_dead, uint8_t rx_header_dma_dead, uint8_t rx_header_dma_dead2, uint8_t phy_err, uint8_t mac_phyif_under_run, uint8_t unexpected_tx_end, uint8_t rx_payload_dma_dead2, uint8_t htp_tx_dma_dead, uint8_t bcn_tx_dma_dead, uint8_t ac_3_tx_dma_dead, uint8_t ac_2_tx_dma_dead, uint8_t ac_1_tx_dma_dead, uint8_t ac_0_tx_dma_dead, uint8_t pt_error, uint8_t olbc_dsss, uint8_t olbc_ofdm, uint8_t rx_fifo_over_flow, uint8_t rx_dma_empty, uint8_t mac_phyif_overflow, uint8_t rx_dma_discard)
{
	ASSERT_ERR((((uint32_t)htp_tx_failed_dma_state << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_failed_cs << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_dma_dead << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_dma_dead << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_dma_dead2 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)phy_err << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)mac_phyif_under_run << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)unexpected_tx_end << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_dma_dead2 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_dma_dead << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)bcn_tx_dma_dead << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_tx_dma_dead << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_tx_dma_dead << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_tx_dma_dead << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_tx_dma_dead << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)pt_error << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)olbc_dsss << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)olbc_ofdm << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)rx_fifo_over_flow << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)rx_dma_empty << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)mac_phyif_overflow << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)rx_dma_discard << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR,  ((uint32_t)htp_tx_failed_dma_state << 27) |((uint32_t)htp_tx_failed_cs << 26) |((uint32_t)rx_payload_dma_dead << 25) |((uint32_t)rx_header_dma_dead << 24) |((uint32_t)rx_header_dma_dead2 << 23) |((uint32_t)phy_err << 22) |((uint32_t)mac_phyif_under_run << 21) |((uint32_t)unexpected_tx_end << 20) |((uint32_t)rx_payload_dma_dead2 << 19) |((uint32_t)htp_tx_dma_dead << 18) |((uint32_t)bcn_tx_dma_dead << 17) |((uint32_t)ac_3_tx_dma_dead << 16) |((uint32_t)ac_2_tx_dma_dead << 15) |((uint32_t)ac_1_tx_dma_dead << 14) |((uint32_t)ac_0_tx_dma_dead << 13) |((uint32_t)pt_error << 12) |((uint32_t)olbc_dsss << 10) |((uint32_t)olbc_ofdm << 9) |((uint32_t)rx_fifo_over_flow << 8) |((uint32_t)rx_dma_empty << 7) |((uint32_t)mac_phyif_overflow << 6) |((uint32_t)rx_dma_discard << 5));
}

__INLINE void mac_hw0_mu0_error_int_event_force_unpack(uint8_t* htp_tx_failed_dma_state, uint8_t* htp_tx_failed_cs, uint8_t* rx_payload_dma_dead, uint8_t* rx_header_dma_dead, uint8_t* rx_header_dma_dead2, uint8_t* phy_err, uint8_t* mac_phyif_under_run, uint8_t* unexpected_tx_end, uint8_t* rx_payload_dma_dead2, uint8_t* htp_tx_dma_dead, uint8_t* bcn_tx_dma_dead, uint8_t* ac_3_tx_dma_dead, uint8_t* ac_2_tx_dma_dead, uint8_t* ac_1_tx_dma_dead, uint8_t* ac_0_tx_dma_dead, uint8_t* pt_error, uint8_t* olbc_dsss, uint8_t* olbc_ofdm, uint8_t* rx_fifo_over_flow, uint8_t* rx_dma_empty, uint8_t* mac_phyif_overflow, uint8_t* rx_dma_discard)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);

	*htp_tx_failed_dma_state = (localVal & ((uint32_t)0x08000000)) >>  27;
	*htp_tx_failed_cs = (localVal & ((uint32_t)0x04000000)) >>  26;
	*rx_payload_dma_dead = (localVal & ((uint32_t)0x02000000)) >>  25;
	*rx_header_dma_dead = (localVal & ((uint32_t)0x01000000)) >>  24;
	*rx_header_dma_dead2 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*phy_err = (localVal & ((uint32_t)0x00400000)) >>  22;
	*mac_phyif_under_run = (localVal & ((uint32_t)0x00200000)) >>  21;
	*unexpected_tx_end = (localVal & ((uint32_t)0x00100000)) >>  20;
	*rx_payload_dma_dead2 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*htp_tx_dma_dead = (localVal & ((uint32_t)0x00040000)) >>  18;
	*bcn_tx_dma_dead = (localVal & ((uint32_t)0x00020000)) >>  17;
	*ac_3_tx_dma_dead = (localVal & ((uint32_t)0x00010000)) >>  16;
	*ac_2_tx_dma_dead = (localVal & ((uint32_t)0x00008000)) >>  15;
	*ac_1_tx_dma_dead = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ac_0_tx_dma_dead = (localVal & ((uint32_t)0x00002000)) >>  13;
	*pt_error = (localVal & ((uint32_t)0x00001000)) >>  12;
	*olbc_dsss = (localVal & ((uint32_t)0x00000400)) >>  10;
	*olbc_ofdm = (localVal & ((uint32_t)0x00000200)) >>  9;
	*rx_fifo_over_flow = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_dma_empty = (localVal & ((uint32_t)0x00000080)) >>  7;
	*mac_phyif_overflow = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rx_dma_discard = (localVal & ((uint32_t)0x00000020)) >>  5;
}

__INLINE uint8_t mac_hw0_mu0_error_int_event_force_htp_tx_failed_dma_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_error_int_event_force_htp_tx_failed_dma_state_setf(uint8_t htptxfaileddmastate)
{
	ASSERT_ERR((((uint32_t)htptxfaileddmastate << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)htptxfaileddmastate <<27));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_htp_tx_failed_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_error_int_event_force_htp_tx_failed_cs_setf(uint8_t htptxfailedcs)
{
	ASSERT_ERR((((uint32_t)htptxfailedcs << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)htptxfailedcs <<26));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_rx_payload_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_error_int_event_force_rx_payload_dma_dead_setf(uint8_t rxpayloaddmadead)
{
	ASSERT_ERR((((uint32_t)rxpayloaddmadead << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)rxpayloaddmadead <<25));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_rx_header_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_error_int_event_force_rx_header_dma_dead_setf(uint8_t rxheaderdmadead)
{
	ASSERT_ERR((((uint32_t)rxheaderdmadead << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)rxheaderdmadead <<24));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_rx_header_dma_dead_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_error_int_event_force_rx_header_dma_dead_2_setf(uint8_t rxheaderdmadead2)
{
	ASSERT_ERR((((uint32_t)rxheaderdmadead2 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)rxheaderdmadead2 <<23));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_phy_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_error_int_event_force_phy_err_setf(uint8_t phyerr)
{
	ASSERT_ERR((((uint32_t)phyerr << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)phyerr <<22));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_mac_phyif_under_run_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_error_int_event_force_mac_phyif_under_run_setf(uint8_t macphyifunderrun)
{
	ASSERT_ERR((((uint32_t)macphyifunderrun << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)macphyifunderrun <<21));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_unexpected_tx_end_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_error_int_event_force_unexpected_tx_end_setf(uint8_t unexpectedtxend)
{
	ASSERT_ERR((((uint32_t)unexpectedtxend << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)unexpectedtxend <<20));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_rx_payload_dma_dead_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_error_int_event_force_rx_payload_dma_dead_2_setf(uint8_t rxpayloaddmadead2)
{
	ASSERT_ERR((((uint32_t)rxpayloaddmadead2 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)rxpayloaddmadead2 <<19));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_htp_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_error_int_event_force_htp_tx_dma_dead_setf(uint8_t htptxdmadead)
{
	ASSERT_ERR((((uint32_t)htptxdmadead << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)htptxdmadead <<18));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_bcn_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_error_int_event_force_bcn_tx_dma_dead_setf(uint8_t bcntxdmadead)
{
	ASSERT_ERR((((uint32_t)bcntxdmadead << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)bcntxdmadead <<17));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_ac_3_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_error_int_event_force_ac_3_tx_dma_dead_setf(uint8_t ac3txdmadead)
{
	ASSERT_ERR((((uint32_t)ac3txdmadead << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)ac3txdmadead <<16));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_ac_2_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void mac_hw0_mu0_error_int_event_force_ac_2_tx_dma_dead_setf(uint8_t ac2txdmadead)
{
	ASSERT_ERR((((uint32_t)ac2txdmadead << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)ac2txdmadead <<15));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_ac_1_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_error_int_event_force_ac_1_tx_dma_dead_setf(uint8_t ac1txdmadead)
{
	ASSERT_ERR((((uint32_t)ac1txdmadead << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)ac1txdmadead <<14));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_ac_0_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_error_int_event_force_ac_0_tx_dma_dead_setf(uint8_t ac0txdmadead)
{
	ASSERT_ERR((((uint32_t)ac0txdmadead << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)ac0txdmadead <<13));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_pt_error_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_error_int_event_force_pt_error_setf(uint8_t pterror)
{
	ASSERT_ERR((((uint32_t)pterror << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)pterror <<12));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_olbc_dsss_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_error_int_event_force_olbc_dsss_setf(uint8_t olbcdsss)
{
	ASSERT_ERR((((uint32_t)olbcdsss << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)olbcdsss <<10));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_olbc_ofdm_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_error_int_event_force_olbc_ofdm_setf(uint8_t olbcofdm)
{
	ASSERT_ERR((((uint32_t)olbcofdm << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)olbcofdm <<9));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_rx_fifo_over_flow_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_error_int_event_force_rx_fifo_over_flow_setf(uint8_t rxfifooverflow)
{
	ASSERT_ERR((((uint32_t)rxfifooverflow << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)rxfifooverflow <<8));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_rx_dma_empty_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_error_int_event_force_rx_dma_empty_setf(uint8_t rxdmaempty)
{
	ASSERT_ERR((((uint32_t)rxdmaempty << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)rxdmaempty <<7));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_mac_phyif_overflow_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_error_int_event_force_mac_phyif_overflow_setf(uint8_t macphyifoverflow)
{
	ASSERT_ERR((((uint32_t)macphyifoverflow << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)macphyifoverflow <<6));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_force_rx_dma_discard_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_error_int_event_force_rx_dma_discard_setf(uint8_t rxdmadiscard)
{
	ASSERT_ERR((((uint32_t)rxdmadiscard << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rxdmadiscard <<5));
}

/**
 * @brief ERROR_INT_MAC_SOURCE_UMAC register definition
 *  Indicates UMAC ERROR interrupt MAC source register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000080F4)
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_UMAC_OFFSET      0x000080F4
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_UMAC_INDEX       0x0000203D
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_error_int_mac_source_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_UMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_error_int_mac_source_umac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_UMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief ERROR_INT_MAC_SOURCE_SMAC register definition
 *  Indicates SMAC ERROR interrupt MAC source register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000080F8)
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_SMAC_OFFSET      0x000080F8
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_SMAC_INDEX       0x0000203E
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_error_int_mac_source_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_SMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_error_int_mac_source_smac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_MAC_SOURCE_SMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief GEN_INT_EVENT_RAW_STATUS register definition
 *  Indicates general events raw status register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    UL_BSS_COLOR_COLLISION    0              
 *    30    DL_BSS_COLOR_COLLISION    0              
 *    29    ABS_TIMERS_9              0              
 *    28    ABS_TIMERS_8              0              
 *    27    ABS_TIMERS_7              0              
 *    26    ABS_TIMERS_6              0              
 *    25    ABS_TIMERS_5              0              
 *    24    ABS_TIMERS_4              0              
 *    23    ABS_TIMERS_3              0              
 *    22    ABS_TIMERS_2              0              
 *    21    ABS_TIMERS_1              0              
 *    20    ABS_TIMERS_0              0              
 *    19    IMP_SEC_DTIM              0              
 *    18    IMP_PRI_DTIM              0              
 *    11    TIM_SET                   0              
 *    02    IDLE_INTERRUPT            0              
 *    01    IMP_SEC_TBTT              0              
 *    00    IMP_PRI_TBTT              0              
 * </pre>
 */
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000080FC)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_OFFSET      0x000080FC
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_INDEX       0x0000203F
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_gen_int_event_raw_status_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
}

// field definitions
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_UL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_UL_BSS_COLOR_COLLISION_POS    31
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_DL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_DL_BSS_COLOR_COLLISION_POS    30
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_9_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_9_POS    29
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_8_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_8_POS    28
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_7_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_7_POS    27
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_6_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_6_POS    26
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_5_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_5_POS    25
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_4_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_4_POS    24
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_3_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_3_POS    23
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_2_POS    22
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_1_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_1_POS    21
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_0_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_0_POS    20
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_IMP_SEC_DTIM_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_IMP_SEC_DTIM_POS    19
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_IMP_PRI_DTIM_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_IMP_PRI_DTIM_POS    18
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_TIM_SET_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_TIM_SET_POS    11
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_IDLE_INTERRUPT_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_IDLE_INTERRUPT_POS    2
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_IMP_SEC_TBTT_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_IMP_SEC_TBTT_POS    1
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_IMP_PRI_TBTT_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_IMP_PRI_TBTT_POS    0

#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_UL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_DL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_9_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_8_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_7_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_6_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_5_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_4_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_3_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_2_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_1_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ABS_TIMERS_0_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_IMP_SEC_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_IMP_PRI_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_TIM_SET_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_IDLE_INTERRUPT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_IMP_SEC_TBTT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_IMP_PRI_TBTT_RST    0x0

__INLINE void mac_hw0_mu0_gen_int_event_raw_status_unpack(uint8_t* ul_bss_color_collision, uint8_t* dl_bss_color_collision, uint8_t* abs_timers_9, uint8_t* abs_timers_8, uint8_t* abs_timers_7, uint8_t* abs_timers_6, uint8_t* abs_timers_5, uint8_t* abs_timers_4, uint8_t* abs_timers_3, uint8_t* abs_timers_2, uint8_t* abs_timers_1, uint8_t* abs_timers_0, uint8_t* imp_sec_dtim, uint8_t* imp_pri_dtim, uint8_t* tim_set, uint8_t* idle_interrupt, uint8_t* imp_sec_tbtt, uint8_t* imp_pri_tbtt)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);

	*ul_bss_color_collision = (localVal & ((uint32_t)0x80000000)) >>  31;
	*dl_bss_color_collision = (localVal & ((uint32_t)0x40000000)) >>  30;
	*abs_timers_9 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*abs_timers_8 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*abs_timers_7 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*abs_timers_6 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*abs_timers_5 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*abs_timers_4 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*abs_timers_3 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*abs_timers_2 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*abs_timers_1 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*abs_timers_0 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*imp_sec_dtim = (localVal & ((uint32_t)0x00080000)) >>  19;
	*imp_pri_dtim = (localVal & ((uint32_t)0x00040000)) >>  18;
	*tim_set = (localVal & ((uint32_t)0x00000800)) >>  11;
	*idle_interrupt = (localVal & ((uint32_t)0x00000004)) >>  2;
	*imp_sec_tbtt = (localVal & ((uint32_t)0x00000002)) >>  1;
	*imp_pri_tbtt = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_ul_bss_color_collision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_dl_bss_color_collision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_abs_timers_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_abs_timers_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_abs_timers_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_abs_timers_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_abs_timers_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_abs_timers_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_abs_timers_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_abs_timers_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_abs_timers_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_abs_timers_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_imp_sec_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_imp_pri_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_tim_set_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_idle_interrupt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_imp_sec_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_raw_status_imp_pri_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief GEN_INT_EVENT_EN_SMAC register definition
 *  GENERAL interrupt events enable SMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    UL_BSS_COLOR_COLLISION    0              
 *    30    DL_BSS_COLOR_COLLISION    0              
 *    29    ABS_TIMERS_9              0              
 *    28    ABS_TIMERS_8              0              
 *    27    ABS_TIMERS_7              0              
 *    26    ABS_TIMERS_6              0              
 *    25    ABS_TIMERS_5              0              
 *    24    ABS_TIMERS_4              0              
 *    23    ABS_TIMERS_3              0              
 *    22    ABS_TIMERS_2              0              
 *    21    ABS_TIMERS_1              0              
 *    20    ABS_TIMERS_0              0              
 *    19    IMP_SEC_DTIM              0              
 *    18    IMP_PRI_DTIM              0              
 *    11    TIM_SET                   0              
 *    02    IDLE_INTERRUPT            0              
 *    01    IMP_SEC_TBTT              0              
 *    00    IMP_PRI_TBTT              0              
 * </pre>
 */
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008100)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_OFFSET      0x00008100
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_INDEX       0x00002040
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_gen_int_event_en_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
}

__INLINE void mac_hw0_mu0_gen_int_event_en_smac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_UL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_UL_BSS_COLOR_COLLISION_POS    31
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_DL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_DL_BSS_COLOR_COLLISION_POS    30
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_9_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_9_POS    29
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_8_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_8_POS    28
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_7_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_7_POS    27
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_6_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_6_POS    26
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_5_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_5_POS    25
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_4_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_4_POS    24
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_3_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_3_POS    23
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_2_POS    22
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_1_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_1_POS    21
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_0_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_0_POS    20
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_IMP_SEC_DTIM_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_IMP_SEC_DTIM_POS    19
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_IMP_PRI_DTIM_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_IMP_PRI_DTIM_POS    18
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_TIM_SET_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_TIM_SET_POS    11
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_IDLE_INTERRUPT_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_IDLE_INTERRUPT_POS    2
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_IMP_SEC_TBTT_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_IMP_SEC_TBTT_POS    1
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_IMP_PRI_TBTT_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_IMP_PRI_TBTT_POS    0

#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_UL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_DL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_9_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_8_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_7_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_6_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_5_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_4_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_3_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_2_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_1_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ABS_TIMERS_0_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_IMP_SEC_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_IMP_PRI_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_TIM_SET_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_IDLE_INTERRUPT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_IMP_SEC_TBTT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_IMP_PRI_TBTT_RST    0x0

__INLINE void mac_hw0_mu0_gen_int_event_en_smac_pack(uint8_t ul_bss_color_collision, uint8_t dl_bss_color_collision, uint8_t abs_timers_9, uint8_t abs_timers_8, uint8_t abs_timers_7, uint8_t abs_timers_6, uint8_t abs_timers_5, uint8_t abs_timers_4, uint8_t abs_timers_3, uint8_t abs_timers_2, uint8_t abs_timers_1, uint8_t abs_timers_0, uint8_t imp_sec_dtim, uint8_t imp_pri_dtim, uint8_t tim_set, uint8_t idle_interrupt, uint8_t imp_sec_tbtt, uint8_t imp_pri_tbtt)
{
	ASSERT_ERR((((uint32_t)ul_bss_color_collision << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)dl_bss_color_collision << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_9 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_8 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_7 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_6 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_5 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_4 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_3 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_2 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_1 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_0 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)imp_sec_dtim << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)imp_pri_dtim << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)tim_set << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)idle_interrupt << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)imp_sec_tbtt << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)imp_pri_tbtt << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR,  ((uint32_t)ul_bss_color_collision << 31) |((uint32_t)dl_bss_color_collision << 30) |((uint32_t)abs_timers_9 << 29) |((uint32_t)abs_timers_8 << 28) |((uint32_t)abs_timers_7 << 27) |((uint32_t)abs_timers_6 << 26) |((uint32_t)abs_timers_5 << 25) |((uint32_t)abs_timers_4 << 24) |((uint32_t)abs_timers_3 << 23) |((uint32_t)abs_timers_2 << 22) |((uint32_t)abs_timers_1 << 21) |((uint32_t)abs_timers_0 << 20) |((uint32_t)imp_sec_dtim << 19) |((uint32_t)imp_pri_dtim << 18) |((uint32_t)tim_set << 11) |((uint32_t)idle_interrupt << 2) |((uint32_t)imp_sec_tbtt << 1) |((uint32_t)imp_pri_tbtt << 0));
}

__INLINE void mac_hw0_mu0_gen_int_event_en_smac_unpack(uint8_t* ul_bss_color_collision, uint8_t* dl_bss_color_collision, uint8_t* abs_timers_9, uint8_t* abs_timers_8, uint8_t* abs_timers_7, uint8_t* abs_timers_6, uint8_t* abs_timers_5, uint8_t* abs_timers_4, uint8_t* abs_timers_3, uint8_t* abs_timers_2, uint8_t* abs_timers_1, uint8_t* abs_timers_0, uint8_t* imp_sec_dtim, uint8_t* imp_pri_dtim, uint8_t* tim_set, uint8_t* idle_interrupt, uint8_t* imp_sec_tbtt, uint8_t* imp_pri_tbtt)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);

	*ul_bss_color_collision = (localVal & ((uint32_t)0x80000000)) >>  31;
	*dl_bss_color_collision = (localVal & ((uint32_t)0x40000000)) >>  30;
	*abs_timers_9 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*abs_timers_8 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*abs_timers_7 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*abs_timers_6 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*abs_timers_5 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*abs_timers_4 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*abs_timers_3 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*abs_timers_2 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*abs_timers_1 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*abs_timers_0 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*imp_sec_dtim = (localVal & ((uint32_t)0x00080000)) >>  19;
	*imp_pri_dtim = (localVal & ((uint32_t)0x00040000)) >>  18;
	*tim_set = (localVal & ((uint32_t)0x00000800)) >>  11;
	*idle_interrupt = (localVal & ((uint32_t)0x00000004)) >>  2;
	*imp_sec_tbtt = (localVal & ((uint32_t)0x00000002)) >>  1;
	*imp_pri_tbtt = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_ul_bss_color_collision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_ul_bss_color_collision_setf(uint8_t ulbsscolorcollision)
{
	ASSERT_ERR((((uint32_t)ulbsscolorcollision << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)ulbsscolorcollision <<31));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_dl_bss_color_collision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_dl_bss_color_collision_setf(uint8_t dlbsscolorcollision)
{
	ASSERT_ERR((((uint32_t)dlbsscolorcollision << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)dlbsscolorcollision <<30));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_abs_timers_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_abs_timers_9_setf(uint8_t abstimers9)
{
	ASSERT_ERR((((uint32_t)abstimers9 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)abstimers9 <<29));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_abs_timers_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_abs_timers_8_setf(uint8_t abstimers8)
{
	ASSERT_ERR((((uint32_t)abstimers8 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)abstimers8 <<28));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_abs_timers_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_abs_timers_7_setf(uint8_t abstimers7)
{
	ASSERT_ERR((((uint32_t)abstimers7 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)abstimers7 <<27));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_abs_timers_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_abs_timers_6_setf(uint8_t abstimers6)
{
	ASSERT_ERR((((uint32_t)abstimers6 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)abstimers6 <<26));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_abs_timers_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_abs_timers_5_setf(uint8_t abstimers5)
{
	ASSERT_ERR((((uint32_t)abstimers5 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)abstimers5 <<25));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_abs_timers_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_abs_timers_4_setf(uint8_t abstimers4)
{
	ASSERT_ERR((((uint32_t)abstimers4 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)abstimers4 <<24));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_abs_timers_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_abs_timers_3_setf(uint8_t abstimers3)
{
	ASSERT_ERR((((uint32_t)abstimers3 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)abstimers3 <<23));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_abs_timers_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_abs_timers_2_setf(uint8_t abstimers2)
{
	ASSERT_ERR((((uint32_t)abstimers2 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)abstimers2 <<22));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_abs_timers_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_abs_timers_1_setf(uint8_t abstimers1)
{
	ASSERT_ERR((((uint32_t)abstimers1 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)abstimers1 <<21));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_abs_timers_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_abs_timers_0_setf(uint8_t abstimers0)
{
	ASSERT_ERR((((uint32_t)abstimers0 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)abstimers0 <<20));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_imp_sec_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_imp_sec_dtim_setf(uint8_t impsecdtim)
{
	ASSERT_ERR((((uint32_t)impsecdtim << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)impsecdtim <<19));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_imp_pri_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_imp_pri_dtim_setf(uint8_t imppridtim)
{
	ASSERT_ERR((((uint32_t)imppridtim << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)imppridtim <<18));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_tim_set_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_tim_set_setf(uint8_t timset)
{
	ASSERT_ERR((((uint32_t)timset << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)timset <<11));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_idle_interrupt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_idle_interrupt_setf(uint8_t idleinterrupt)
{
	ASSERT_ERR((((uint32_t)idleinterrupt << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)idleinterrupt <<2));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_imp_sec_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_imp_sec_tbtt_setf(uint8_t impsectbtt)
{
	ASSERT_ERR((((uint32_t)impsectbtt << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)impsectbtt <<1));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_smac_imp_pri_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_smac_imp_pri_tbtt_setf(uint8_t imppritbtt)
{
	ASSERT_ERR((((uint32_t)imppritbtt << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)imppritbtt <<0));
}

/**
 * @brief GEN_INT_EVENT_STATUS_UMAC register definition
 *  GENERAL interrupt events status UMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    UL_BSS_COLOR_COLLISION    0              
 *    30    DL_BSS_COLOR_COLLISION    0              
 *    29    ABS_TIMERS_9              0              
 *    28    ABS_TIMERS_8              0              
 *    27    ABS_TIMERS_7              0              
 *    26    ABS_TIMERS_6              0              
 *    25    ABS_TIMERS_5              0              
 *    24    ABS_TIMERS_4              0              
 *    23    ABS_TIMERS_3              0              
 *    22    ABS_TIMERS_2              0              
 *    21    ABS_TIMERS_1              0              
 *    20    ABS_TIMERS_0              0              
 *    19    IMP_SEC_DTIM              0              
 *    18    IMP_PRI_DTIM              0              
 *    11    TIM_SET                   0              
 *    02    IDLE_INTERRUPT            0              
 *    01    IMP_SEC_TBTT              0              
 *    00    IMP_PRI_TBTT              0              
 * </pre>
 */
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008104)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_OFFSET      0x00008104
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_INDEX       0x00002041
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_gen_int_event_status_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_UL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_UL_BSS_COLOR_COLLISION_POS    31
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_DL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_DL_BSS_COLOR_COLLISION_POS    30
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_9_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_9_POS    29
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_8_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_8_POS    28
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_7_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_7_POS    27
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_6_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_6_POS    26
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_5_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_5_POS    25
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_4_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_4_POS    24
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_3_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_3_POS    23
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_2_POS    22
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_1_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_1_POS    21
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_0_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_0_POS    20
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_IMP_SEC_DTIM_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_IMP_SEC_DTIM_POS    19
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_IMP_PRI_DTIM_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_IMP_PRI_DTIM_POS    18
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_TIM_SET_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_TIM_SET_POS    11
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_IDLE_INTERRUPT_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_IDLE_INTERRUPT_POS    2
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_IMP_SEC_TBTT_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_IMP_SEC_TBTT_POS    1
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_IMP_PRI_TBTT_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_IMP_PRI_TBTT_POS    0

#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_UL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_DL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_9_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_8_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_7_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_6_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_5_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_4_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_3_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_2_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_1_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ABS_TIMERS_0_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_IMP_SEC_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_IMP_PRI_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_TIM_SET_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_IDLE_INTERRUPT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_IMP_SEC_TBTT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_IMP_PRI_TBTT_RST    0x0

__INLINE void mac_hw0_mu0_gen_int_event_status_umac_unpack(uint8_t* ul_bss_color_collision, uint8_t* dl_bss_color_collision, uint8_t* abs_timers_9, uint8_t* abs_timers_8, uint8_t* abs_timers_7, uint8_t* abs_timers_6, uint8_t* abs_timers_5, uint8_t* abs_timers_4, uint8_t* abs_timers_3, uint8_t* abs_timers_2, uint8_t* abs_timers_1, uint8_t* abs_timers_0, uint8_t* imp_sec_dtim, uint8_t* imp_pri_dtim, uint8_t* tim_set, uint8_t* idle_interrupt, uint8_t* imp_sec_tbtt, uint8_t* imp_pri_tbtt)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);

	*ul_bss_color_collision = (localVal & ((uint32_t)0x80000000)) >>  31;
	*dl_bss_color_collision = (localVal & ((uint32_t)0x40000000)) >>  30;
	*abs_timers_9 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*abs_timers_8 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*abs_timers_7 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*abs_timers_6 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*abs_timers_5 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*abs_timers_4 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*abs_timers_3 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*abs_timers_2 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*abs_timers_1 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*abs_timers_0 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*imp_sec_dtim = (localVal & ((uint32_t)0x00080000)) >>  19;
	*imp_pri_dtim = (localVal & ((uint32_t)0x00040000)) >>  18;
	*tim_set = (localVal & ((uint32_t)0x00000800)) >>  11;
	*idle_interrupt = (localVal & ((uint32_t)0x00000004)) >>  2;
	*imp_sec_tbtt = (localVal & ((uint32_t)0x00000002)) >>  1;
	*imp_pri_tbtt = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_ul_bss_color_collision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_dl_bss_color_collision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_abs_timers_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_abs_timers_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_abs_timers_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_abs_timers_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_abs_timers_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_abs_timers_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_abs_timers_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_abs_timers_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_abs_timers_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_abs_timers_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_imp_sec_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_imp_pri_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_tim_set_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_idle_interrupt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_imp_sec_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_umac_imp_pri_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief GEN_INT_EVENT_STATUS_SMAC register definition
 *  GENERAL interrupt events status SMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    UL_BSS_COLOR_COLLISION    0              
 *    30    DL_BSS_COLOR_COLLISION    0              
 *    29    ABS_TIMERS_9              0              
 *    28    ABS_TIMERS_8              0              
 *    27    ABS_TIMERS_7              0              
 *    26    ABS_TIMERS_6              0              
 *    25    ABS_TIMERS_5              0              
 *    24    ABS_TIMERS_4              0              
 *    23    ABS_TIMERS_3              0              
 *    22    ABS_TIMERS_2              0              
 *    21    ABS_TIMERS_1              0              
 *    20    ABS_TIMERS_0              0              
 *    19    IMP_SEC_DTIM              0              
 *    18    IMP_PRI_DTIM              0              
 *    11    TIM_SET                   0              
 *    02    IDLE_INTERRUPT            0              
 *    01    IMP_SEC_TBTT              0              
 *    00    IMP_PRI_TBTT              0              
 * </pre>
 */
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008108)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_OFFSET      0x00008108
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_INDEX       0x00002042
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_gen_int_event_status_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_UL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_UL_BSS_COLOR_COLLISION_POS    31
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_DL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_DL_BSS_COLOR_COLLISION_POS    30
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_9_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_9_POS    29
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_8_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_8_POS    28
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_7_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_7_POS    27
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_6_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_6_POS    26
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_5_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_5_POS    25
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_4_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_4_POS    24
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_3_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_3_POS    23
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_2_POS    22
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_1_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_1_POS    21
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_0_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_0_POS    20
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_IMP_SEC_DTIM_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_IMP_SEC_DTIM_POS    19
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_IMP_PRI_DTIM_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_IMP_PRI_DTIM_POS    18
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_TIM_SET_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_TIM_SET_POS    11
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_IDLE_INTERRUPT_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_IDLE_INTERRUPT_POS    2
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_IMP_SEC_TBTT_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_IMP_SEC_TBTT_POS    1
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_IMP_PRI_TBTT_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_IMP_PRI_TBTT_POS    0

#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_UL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_DL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_9_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_8_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_7_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_6_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_5_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_4_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_3_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_2_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_1_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ABS_TIMERS_0_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_IMP_SEC_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_IMP_PRI_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_TIM_SET_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_IDLE_INTERRUPT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_IMP_SEC_TBTT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_IMP_PRI_TBTT_RST    0x0

__INLINE void mac_hw0_mu0_gen_int_event_status_smac_unpack(uint8_t* ul_bss_color_collision, uint8_t* dl_bss_color_collision, uint8_t* abs_timers_9, uint8_t* abs_timers_8, uint8_t* abs_timers_7, uint8_t* abs_timers_6, uint8_t* abs_timers_5, uint8_t* abs_timers_4, uint8_t* abs_timers_3, uint8_t* abs_timers_2, uint8_t* abs_timers_1, uint8_t* abs_timers_0, uint8_t* imp_sec_dtim, uint8_t* imp_pri_dtim, uint8_t* tim_set, uint8_t* idle_interrupt, uint8_t* imp_sec_tbtt, uint8_t* imp_pri_tbtt)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);

	*ul_bss_color_collision = (localVal & ((uint32_t)0x80000000)) >>  31;
	*dl_bss_color_collision = (localVal & ((uint32_t)0x40000000)) >>  30;
	*abs_timers_9 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*abs_timers_8 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*abs_timers_7 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*abs_timers_6 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*abs_timers_5 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*abs_timers_4 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*abs_timers_3 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*abs_timers_2 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*abs_timers_1 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*abs_timers_0 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*imp_sec_dtim = (localVal & ((uint32_t)0x00080000)) >>  19;
	*imp_pri_dtim = (localVal & ((uint32_t)0x00040000)) >>  18;
	*tim_set = (localVal & ((uint32_t)0x00000800)) >>  11;
	*idle_interrupt = (localVal & ((uint32_t)0x00000004)) >>  2;
	*imp_sec_tbtt = (localVal & ((uint32_t)0x00000002)) >>  1;
	*imp_pri_tbtt = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_ul_bss_color_collision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_dl_bss_color_collision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_abs_timers_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_abs_timers_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_abs_timers_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_abs_timers_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_abs_timers_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_abs_timers_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_abs_timers_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_abs_timers_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_abs_timers_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_abs_timers_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_imp_sec_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_imp_pri_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_tim_set_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_idle_interrupt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_imp_sec_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_smac_imp_pri_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief GEN_INT_EVENT_FORCE register definition
 *  GENERAL interrupt events force register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    UL_BSS_COLOR_COLLISION    0              
 *    30    DL_BSS_COLOR_COLLISION    0              
 *    29    ABS_TIMERS_9              0              
 *    28    ABS_TIMERS_8              0              
 *    27    ABS_TIMERS_7              0              
 *    26    ABS_TIMERS_6              0              
 *    25    ABS_TIMERS_5              0              
 *    24    ABS_TIMERS_4              0              
 *    23    ABS_TIMERS_3              0              
 *    22    ABS_TIMERS_2              0              
 *    21    ABS_TIMERS_1              0              
 *    20    ABS_TIMERS_0              0              
 *    19    IMP_SEC_DTIM              0              
 *    18    IMP_PRI_DTIM              0              
 *    11    TIM_SET                   0              
 *    02    IDLE_INTERRUPT            0              
 *    01    IMP_SEC_TBTT              0              
 *    00    IMP_PRI_TBTT              0              
 * </pre>
 */
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000810C)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_OFFSET      0x0000810C
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_INDEX       0x00002043
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_gen_int_event_force_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
}

__INLINE void mac_hw0_mu0_gen_int_event_force_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_UL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_UL_BSS_COLOR_COLLISION_POS    31
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_DL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_DL_BSS_COLOR_COLLISION_POS    30
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_9_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_9_POS    29
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_8_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_8_POS    28
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_7_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_7_POS    27
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_6_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_6_POS    26
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_5_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_5_POS    25
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_4_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_4_POS    24
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_3_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_3_POS    23
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_2_POS    22
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_1_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_1_POS    21
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_0_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_0_POS    20
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_IMP_SEC_DTIM_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_IMP_SEC_DTIM_POS    19
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_IMP_PRI_DTIM_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_IMP_PRI_DTIM_POS    18
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_TIM_SET_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_TIM_SET_POS    11
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_IDLE_INTERRUPT_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_IDLE_INTERRUPT_POS    2
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_IMP_SEC_TBTT_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_IMP_SEC_TBTT_POS    1
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_IMP_PRI_TBTT_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_IMP_PRI_TBTT_POS    0

#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_UL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_DL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_9_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_8_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_7_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_6_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_5_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_4_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_3_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_2_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_1_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ABS_TIMERS_0_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_IMP_SEC_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_IMP_PRI_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_TIM_SET_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_IDLE_INTERRUPT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_IMP_SEC_TBTT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_FORCE_IMP_PRI_TBTT_RST    0x0

__INLINE void mac_hw0_mu0_gen_int_event_force_pack(uint8_t ul_bss_color_collision, uint8_t dl_bss_color_collision, uint8_t abs_timers_9, uint8_t abs_timers_8, uint8_t abs_timers_7, uint8_t abs_timers_6, uint8_t abs_timers_5, uint8_t abs_timers_4, uint8_t abs_timers_3, uint8_t abs_timers_2, uint8_t abs_timers_1, uint8_t abs_timers_0, uint8_t imp_sec_dtim, uint8_t imp_pri_dtim, uint8_t tim_set, uint8_t idle_interrupt, uint8_t imp_sec_tbtt, uint8_t imp_pri_tbtt)
{
	ASSERT_ERR((((uint32_t)ul_bss_color_collision << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)dl_bss_color_collision << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_9 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_8 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_7 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_6 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_5 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_4 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_3 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_2 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_1 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_0 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)imp_sec_dtim << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)imp_pri_dtim << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)tim_set << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)idle_interrupt << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)imp_sec_tbtt << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)imp_pri_tbtt << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR,  ((uint32_t)ul_bss_color_collision << 31) |((uint32_t)dl_bss_color_collision << 30) |((uint32_t)abs_timers_9 << 29) |((uint32_t)abs_timers_8 << 28) |((uint32_t)abs_timers_7 << 27) |((uint32_t)abs_timers_6 << 26) |((uint32_t)abs_timers_5 << 25) |((uint32_t)abs_timers_4 << 24) |((uint32_t)abs_timers_3 << 23) |((uint32_t)abs_timers_2 << 22) |((uint32_t)abs_timers_1 << 21) |((uint32_t)abs_timers_0 << 20) |((uint32_t)imp_sec_dtim << 19) |((uint32_t)imp_pri_dtim << 18) |((uint32_t)tim_set << 11) |((uint32_t)idle_interrupt << 2) |((uint32_t)imp_sec_tbtt << 1) |((uint32_t)imp_pri_tbtt << 0));
}

__INLINE void mac_hw0_mu0_gen_int_event_force_unpack(uint8_t* ul_bss_color_collision, uint8_t* dl_bss_color_collision, uint8_t* abs_timers_9, uint8_t* abs_timers_8, uint8_t* abs_timers_7, uint8_t* abs_timers_6, uint8_t* abs_timers_5, uint8_t* abs_timers_4, uint8_t* abs_timers_3, uint8_t* abs_timers_2, uint8_t* abs_timers_1, uint8_t* abs_timers_0, uint8_t* imp_sec_dtim, uint8_t* imp_pri_dtim, uint8_t* tim_set, uint8_t* idle_interrupt, uint8_t* imp_sec_tbtt, uint8_t* imp_pri_tbtt)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);

	*ul_bss_color_collision = (localVal & ((uint32_t)0x80000000)) >>  31;
	*dl_bss_color_collision = (localVal & ((uint32_t)0x40000000)) >>  30;
	*abs_timers_9 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*abs_timers_8 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*abs_timers_7 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*abs_timers_6 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*abs_timers_5 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*abs_timers_4 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*abs_timers_3 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*abs_timers_2 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*abs_timers_1 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*abs_timers_0 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*imp_sec_dtim = (localVal & ((uint32_t)0x00080000)) >>  19;
	*imp_pri_dtim = (localVal & ((uint32_t)0x00040000)) >>  18;
	*tim_set = (localVal & ((uint32_t)0x00000800)) >>  11;
	*idle_interrupt = (localVal & ((uint32_t)0x00000004)) >>  2;
	*imp_sec_tbtt = (localVal & ((uint32_t)0x00000002)) >>  1;
	*imp_pri_tbtt = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_ul_bss_color_collision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_ul_bss_color_collision_setf(uint8_t ulbsscolorcollision)
{
	ASSERT_ERR((((uint32_t)ulbsscolorcollision << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)ulbsscolorcollision <<31));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_dl_bss_color_collision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_dl_bss_color_collision_setf(uint8_t dlbsscolorcollision)
{
	ASSERT_ERR((((uint32_t)dlbsscolorcollision << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)dlbsscolorcollision <<30));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_abs_timers_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_abs_timers_9_setf(uint8_t abstimers9)
{
	ASSERT_ERR((((uint32_t)abstimers9 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)abstimers9 <<29));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_abs_timers_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_abs_timers_8_setf(uint8_t abstimers8)
{
	ASSERT_ERR((((uint32_t)abstimers8 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)abstimers8 <<28));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_abs_timers_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_abs_timers_7_setf(uint8_t abstimers7)
{
	ASSERT_ERR((((uint32_t)abstimers7 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)abstimers7 <<27));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_abs_timers_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_abs_timers_6_setf(uint8_t abstimers6)
{
	ASSERT_ERR((((uint32_t)abstimers6 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)abstimers6 <<26));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_abs_timers_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_abs_timers_5_setf(uint8_t abstimers5)
{
	ASSERT_ERR((((uint32_t)abstimers5 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)abstimers5 <<25));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_abs_timers_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_abs_timers_4_setf(uint8_t abstimers4)
{
	ASSERT_ERR((((uint32_t)abstimers4 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)abstimers4 <<24));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_abs_timers_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_abs_timers_3_setf(uint8_t abstimers3)
{
	ASSERT_ERR((((uint32_t)abstimers3 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)abstimers3 <<23));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_abs_timers_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_abs_timers_2_setf(uint8_t abstimers2)
{
	ASSERT_ERR((((uint32_t)abstimers2 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)abstimers2 <<22));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_abs_timers_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_abs_timers_1_setf(uint8_t abstimers1)
{
	ASSERT_ERR((((uint32_t)abstimers1 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)abstimers1 <<21));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_abs_timers_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_abs_timers_0_setf(uint8_t abstimers0)
{
	ASSERT_ERR((((uint32_t)abstimers0 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)abstimers0 <<20));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_imp_sec_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_imp_sec_dtim_setf(uint8_t impsecdtim)
{
	ASSERT_ERR((((uint32_t)impsecdtim << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)impsecdtim <<19));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_imp_pri_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_imp_pri_dtim_setf(uint8_t imppridtim)
{
	ASSERT_ERR((((uint32_t)imppridtim << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)imppridtim <<18));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_tim_set_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_tim_set_setf(uint8_t timset)
{
	ASSERT_ERR((((uint32_t)timset << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)timset <<11));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_idle_interrupt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_idle_interrupt_setf(uint8_t idleinterrupt)
{
	ASSERT_ERR((((uint32_t)idleinterrupt << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)idleinterrupt <<2));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_imp_sec_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_imp_sec_tbtt_setf(uint8_t impsectbtt)
{
	ASSERT_ERR((((uint32_t)impsectbtt << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)impsectbtt <<1));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_force_imp_pri_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_gen_int_event_force_imp_pri_tbtt_setf(uint8_t imppritbtt)
{
	ASSERT_ERR((((uint32_t)imppritbtt << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)imppritbtt <<0));
}

/**
 * @brief GEN_INT_MAC_SOURCE_UMAC register definition
 *  Indicates UMAC GENERAL interrupt MAC source  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008110)
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_UMAC_OFFSET      0x00008110
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_UMAC_INDEX       0x00002044
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_gen_int_mac_source_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_GEN_INT_MAC_SOURCE_UMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_gen_int_mac_source_umac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_MAC_SOURCE_UMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief GEN_INT_MAC_SOURCE_SMAC register definition
 *  Indicates SMAC GENERAL interrupt MAC source  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008114)
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_SMAC_OFFSET      0x00008114
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_SMAC_INDEX       0x00002045
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_gen_int_mac_source_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_GEN_INT_MAC_SOURCE_SMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_GEN_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_gen_int_mac_source_smac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_MAC_SOURCE_SMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief HIGH_PRI_INT_EVENT_RAW_STATUS register definition
 *  Indicates HIGH PRIORITY events raw status register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30    TX_HTP_AMPDU_UND          0              
 *    29    TX_AC3_AMPDU_UND          0              
 *    28    TX_AC2_AMPDU_UND          0              
 *    27    TX_AC1_AMPDU_UND          0              
 *    26    TX_AC0_AMPDU_UND          0              
 *    14    SW_RTS_SUCCESS            0              
 *    13    AC3_TX_BW_DECISION        0              
 *    12    AC2_TX_BW_DECISION        0              
 *    11    AC1_TX_BW_DECISION        0              
 *    10    AC0_TX_BW_DECISION        0              
 *    09    HTP_TX_BW_DECISION        0              
 *    08    BFR_RESP_CANCELLED        0              
 *    07    END_OF_PPDU               0              
 *    06    NEED_RESPONSE             0              
 *    05    RD_PROT_TRIGGER           0              
 *    04    HCCA_PROT_TRIGGER         0              
 *    03    AC_3_PROT_TRIGGER         0              
 *    02    AC_2_PROT_TRIGGER         0              
 *    01    AC_1_PROT_TRIGGER         0              
 *    00    AC_0_PROT_TRIGGER         0              
 * </pre>
 */
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008118)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_OFFSET      0x00008118
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_INDEX       0x00002046
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_high_pri_int_event_raw_status_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
}

// field definitions
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_TX_HTP_AMPDU_UND_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_TX_HTP_AMPDU_UND_POS    30
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_TX_AC_3_AMPDU_UND_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_TX_AC_3_AMPDU_UND_POS    29
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_TX_AC_2_AMPDU_UND_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_TX_AC_2_AMPDU_UND_POS    28
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_TX_AC_1_AMPDU_UND_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_TX_AC_1_AMPDU_UND_POS    27
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_TX_AC_0_AMPDU_UND_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_TX_AC_0_AMPDU_UND_POS    26
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_SW_RTS_SUCCESS_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_SW_RTS_SUCCESS_POS    14
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_3_TX_BW_DECISION_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_3_TX_BW_DECISION_POS    13
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_2_TX_BW_DECISION_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_2_TX_BW_DECISION_POS    12
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_1_TX_BW_DECISION_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_1_TX_BW_DECISION_POS    11
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_0_TX_BW_DECISION_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_0_TX_BW_DECISION_POS    10
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_HTP_TX_BW_DECISION_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_HTP_TX_BW_DECISION_POS    9
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_BFR_RESP_CANCELLED_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_BFR_RESP_CANCELLED_POS    8
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_END_OF_PPDU_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_END_OF_PPDU_POS    7
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_NEED_RESPONSE_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_NEED_RESPONSE_POS    6
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_RD_PROT_TRIGGER_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_RD_PROT_TRIGGER_POS    5
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_HCCA_PROT_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_HCCA_PROT_TRIGGER_POS    4
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_3_PROT_TRIGGER_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_3_PROT_TRIGGER_POS    3
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_2_PROT_TRIGGER_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_2_PROT_TRIGGER_POS    2
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_1_PROT_TRIGGER_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_1_PROT_TRIGGER_POS    1
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_0_PROT_TRIGGER_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_0_PROT_TRIGGER_POS    0

#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_TX_HTP_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_TX_AC_3_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_TX_AC_2_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_TX_AC_1_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_TX_AC_0_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_SW_RTS_SUCCESS_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_3_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_2_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_1_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_0_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_HTP_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_BFR_RESP_CANCELLED_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_END_OF_PPDU_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_NEED_RESPONSE_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_RD_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_HCCA_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_3_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_2_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_1_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_AC_0_PROT_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_high_pri_int_event_raw_status_unpack(uint8_t* tx_htp_ampdu_und, uint8_t* tx_ac3_ampdu_und, uint8_t* tx_ac2_ampdu_und, uint8_t* tx_ac1_ampdu_und, uint8_t* tx_ac0_ampdu_und, uint8_t* sw_rts_success, uint8_t* ac3_tx_bw_decision, uint8_t* ac2_tx_bw_decision, uint8_t* ac1_tx_bw_decision, uint8_t* ac0_tx_bw_decision, uint8_t* htp_tx_bw_decision, uint8_t* bfr_resp_cancelled, uint8_t* end_of_ppdu, uint8_t* need_response, uint8_t* rd_prot_trigger, uint8_t* hcca_prot_trigger, uint8_t* ac_3_prot_trigger, uint8_t* ac_2_prot_trigger, uint8_t* ac_1_prot_trigger, uint8_t* ac_0_prot_trigger)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);

	*tx_htp_ampdu_und = (localVal & ((uint32_t)0x40000000)) >>  30;
	*tx_ac3_ampdu_und = (localVal & ((uint32_t)0x20000000)) >>  29;
	*tx_ac2_ampdu_und = (localVal & ((uint32_t)0x10000000)) >>  28;
	*tx_ac1_ampdu_und = (localVal & ((uint32_t)0x08000000)) >>  27;
	*tx_ac0_ampdu_und = (localVal & ((uint32_t)0x04000000)) >>  26;
	*sw_rts_success = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ac3_tx_bw_decision = (localVal & ((uint32_t)0x00002000)) >>  13;
	*ac2_tx_bw_decision = (localVal & ((uint32_t)0x00001000)) >>  12;
	*ac1_tx_bw_decision = (localVal & ((uint32_t)0x00000800)) >>  11;
	*ac0_tx_bw_decision = (localVal & ((uint32_t)0x00000400)) >>  10;
	*htp_tx_bw_decision = (localVal & ((uint32_t)0x00000200)) >>  9;
	*bfr_resp_cancelled = (localVal & ((uint32_t)0x00000100)) >>  8;
	*end_of_ppdu = (localVal & ((uint32_t)0x00000080)) >>  7;
	*need_response = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rd_prot_trigger = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hcca_prot_trigger = (localVal & ((uint32_t)0x00000010)) >>  4;
	*ac_3_prot_trigger = (localVal & ((uint32_t)0x00000008)) >>  3;
	*ac_2_prot_trigger = (localVal & ((uint32_t)0x00000004)) >>  2;
	*ac_1_prot_trigger = (localVal & ((uint32_t)0x00000002)) >>  1;
	*ac_0_prot_trigger = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_tx_htp_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_tx_ac_3_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_tx_ac_2_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_tx_ac_1_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_tx_ac_0_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_sw_rts_success_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_ac_3_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_ac_2_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_ac_1_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_ac_0_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_htp_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_bfr_resp_cancelled_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_end_of_ppdu_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_need_response_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_rd_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_hcca_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_ac_3_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_ac_2_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_ac_1_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_raw_status_ac_0_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief HIGH_PRI_INT_EVENT_EN_SMAC register definition
 *  HIGH PRIORITY interrupt events enable SMAC  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30    TX_HTP_AMPDU_UND          0              
 *    29    TX_AC3_AMPDU_UND          0              
 *    28    TX_AC2_AMPDU_UND          0              
 *    27    TX_AC1_AMPDU_UND          0              
 *    26    TX_AC0_AMPDU_UND          0              
 *    14    SW_RTS_SUCCESS            0              
 *    13    AC3_TX_BW_DECISION        0              
 *    12    AC2_TX_BW_DECISION        0              
 *    11    AC1_TX_BW_DECISION        0              
 *    10    AC0_TX_BW_DECISION        0              
 *    09    HTP_TX_BW_DECISION        0              
 *    08    BFR_RESP_CANCELLED        0              
 *    07    END_OF_PPDU               0              
 *    06    NEED_RESPONSE             0              
 *    05    RD_PROT_TRIGGER           0              
 *    04    HCCA_PROT_TRIGGER         0              
 *    03    AC_3_PROT_TRIGGER         0              
 *    02    AC_2_PROT_TRIGGER         0              
 *    01    AC_1_PROT_TRIGGER         0              
 *    00    AC_0_PROT_TRIGGER         0              
 * </pre>
 */
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000811C)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_OFFSET      0x0000811C
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_INDEX       0x00002047
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_high_pri_int_event_en_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
}

__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_TX_HTP_AMPDU_UND_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_TX_HTP_AMPDU_UND_POS    30
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_TX_AC_3_AMPDU_UND_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_TX_AC_3_AMPDU_UND_POS    29
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_TX_AC_2_AMPDU_UND_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_TX_AC_2_AMPDU_UND_POS    28
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_TX_AC_1_AMPDU_UND_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_TX_AC_1_AMPDU_UND_POS    27
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_TX_AC_0_AMPDU_UND_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_TX_AC_0_AMPDU_UND_POS    26
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_SW_RTS_SUCCESS_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_SW_RTS_SUCCESS_POS    14
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_3_TX_BW_DECISION_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_3_TX_BW_DECISION_POS    13
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_2_TX_BW_DECISION_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_2_TX_BW_DECISION_POS    12
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_1_TX_BW_DECISION_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_1_TX_BW_DECISION_POS    11
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_0_TX_BW_DECISION_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_0_TX_BW_DECISION_POS    10
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_HTP_TX_BW_DECISION_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_HTP_TX_BW_DECISION_POS    9
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_BFR_RESP_CANCELLED_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_BFR_RESP_CANCELLED_POS    8
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_END_OF_PPDU_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_END_OF_PPDU_POS    7
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_NEED_RESPONSE_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_NEED_RESPONSE_POS    6
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_RD_PROT_TRIGGER_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_RD_PROT_TRIGGER_POS    5
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_HCCA_PROT_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_HCCA_PROT_TRIGGER_POS    4
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_3_PROT_TRIGGER_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_3_PROT_TRIGGER_POS    3
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_2_PROT_TRIGGER_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_2_PROT_TRIGGER_POS    2
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_1_PROT_TRIGGER_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_1_PROT_TRIGGER_POS    1
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_0_PROT_TRIGGER_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_0_PROT_TRIGGER_POS    0

#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_TX_HTP_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_TX_AC_3_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_TX_AC_2_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_TX_AC_1_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_TX_AC_0_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_SW_RTS_SUCCESS_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_3_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_2_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_1_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_0_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_HTP_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_BFR_RESP_CANCELLED_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_END_OF_PPDU_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_NEED_RESPONSE_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_RD_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_HCCA_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_3_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_2_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_1_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_AC_0_PROT_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_pack(uint8_t tx_htp_ampdu_und, uint8_t tx_ac3_ampdu_und, uint8_t tx_ac2_ampdu_und, uint8_t tx_ac1_ampdu_und, uint8_t tx_ac0_ampdu_und, uint8_t sw_rts_success, uint8_t ac3_tx_bw_decision, uint8_t ac2_tx_bw_decision, uint8_t ac1_tx_bw_decision, uint8_t ac0_tx_bw_decision, uint8_t htp_tx_bw_decision, uint8_t bfr_resp_cancelled, uint8_t end_of_ppdu, uint8_t need_response, uint8_t rd_prot_trigger, uint8_t hcca_prot_trigger, uint8_t ac_3_prot_trigger, uint8_t ac_2_prot_trigger, uint8_t ac_1_prot_trigger, uint8_t ac_0_prot_trigger)
{
	ASSERT_ERR((((uint32_t)tx_htp_ampdu_und << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac3_ampdu_und << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac2_ampdu_und << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac1_ampdu_und << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac0_ampdu_und << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_rts_success << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)ac3_tx_bw_decision << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)ac2_tx_bw_decision << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)ac1_tx_bw_decision << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)ac0_tx_bw_decision << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_bw_decision << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)bfr_resp_cancelled << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)end_of_ppdu << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)need_response << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)rd_prot_trigger << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)hcca_prot_trigger << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_prot_trigger << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_prot_trigger << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_prot_trigger << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_prot_trigger << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR,  ((uint32_t)tx_htp_ampdu_und << 30) |((uint32_t)tx_ac3_ampdu_und << 29) |((uint32_t)tx_ac2_ampdu_und << 28) |((uint32_t)tx_ac1_ampdu_und << 27) |((uint32_t)tx_ac0_ampdu_und << 26) |((uint32_t)sw_rts_success << 14) |((uint32_t)ac3_tx_bw_decision << 13) |((uint32_t)ac2_tx_bw_decision << 12) |((uint32_t)ac1_tx_bw_decision << 11) |((uint32_t)ac0_tx_bw_decision << 10) |((uint32_t)htp_tx_bw_decision << 9) |((uint32_t)bfr_resp_cancelled << 8) |((uint32_t)end_of_ppdu << 7) |((uint32_t)need_response << 6) |((uint32_t)rd_prot_trigger << 5) |((uint32_t)hcca_prot_trigger << 4) |((uint32_t)ac_3_prot_trigger << 3) |((uint32_t)ac_2_prot_trigger << 2) |((uint32_t)ac_1_prot_trigger << 1) |((uint32_t)ac_0_prot_trigger << 0));
}

__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_unpack(uint8_t* tx_htp_ampdu_und, uint8_t* tx_ac3_ampdu_und, uint8_t* tx_ac2_ampdu_und, uint8_t* tx_ac1_ampdu_und, uint8_t* tx_ac0_ampdu_und, uint8_t* sw_rts_success, uint8_t* ac3_tx_bw_decision, uint8_t* ac2_tx_bw_decision, uint8_t* ac1_tx_bw_decision, uint8_t* ac0_tx_bw_decision, uint8_t* htp_tx_bw_decision, uint8_t* bfr_resp_cancelled, uint8_t* end_of_ppdu, uint8_t* need_response, uint8_t* rd_prot_trigger, uint8_t* hcca_prot_trigger, uint8_t* ac_3_prot_trigger, uint8_t* ac_2_prot_trigger, uint8_t* ac_1_prot_trigger, uint8_t* ac_0_prot_trigger)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);

	*tx_htp_ampdu_und = (localVal & ((uint32_t)0x40000000)) >>  30;
	*tx_ac3_ampdu_und = (localVal & ((uint32_t)0x20000000)) >>  29;
	*tx_ac2_ampdu_und = (localVal & ((uint32_t)0x10000000)) >>  28;
	*tx_ac1_ampdu_und = (localVal & ((uint32_t)0x08000000)) >>  27;
	*tx_ac0_ampdu_und = (localVal & ((uint32_t)0x04000000)) >>  26;
	*sw_rts_success = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ac3_tx_bw_decision = (localVal & ((uint32_t)0x00002000)) >>  13;
	*ac2_tx_bw_decision = (localVal & ((uint32_t)0x00001000)) >>  12;
	*ac1_tx_bw_decision = (localVal & ((uint32_t)0x00000800)) >>  11;
	*ac0_tx_bw_decision = (localVal & ((uint32_t)0x00000400)) >>  10;
	*htp_tx_bw_decision = (localVal & ((uint32_t)0x00000200)) >>  9;
	*bfr_resp_cancelled = (localVal & ((uint32_t)0x00000100)) >>  8;
	*end_of_ppdu = (localVal & ((uint32_t)0x00000080)) >>  7;
	*need_response = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rd_prot_trigger = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hcca_prot_trigger = (localVal & ((uint32_t)0x00000010)) >>  4;
	*ac_3_prot_trigger = (localVal & ((uint32_t)0x00000008)) >>  3;
	*ac_2_prot_trigger = (localVal & ((uint32_t)0x00000004)) >>  2;
	*ac_1_prot_trigger = (localVal & ((uint32_t)0x00000002)) >>  1;
	*ac_0_prot_trigger = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_tx_htp_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_tx_htp_ampdu_und_setf(uint8_t txhtpampduund)
{
	ASSERT_ERR((((uint32_t)txhtpampduund << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)txhtpampduund <<30));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_tx_ac_3_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_tx_ac_3_ampdu_und_setf(uint8_t txac3ampduund)
{
	ASSERT_ERR((((uint32_t)txac3ampduund << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)txac3ampduund <<29));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_tx_ac_2_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_tx_ac_2_ampdu_und_setf(uint8_t txac2ampduund)
{
	ASSERT_ERR((((uint32_t)txac2ampduund << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)txac2ampduund <<28));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_tx_ac_1_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_tx_ac_1_ampdu_und_setf(uint8_t txac1ampduund)
{
	ASSERT_ERR((((uint32_t)txac1ampduund << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)txac1ampduund <<27));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_tx_ac_0_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_tx_ac_0_ampdu_und_setf(uint8_t txac0ampduund)
{
	ASSERT_ERR((((uint32_t)txac0ampduund << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)txac0ampduund <<26));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_sw_rts_success_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_sw_rts_success_setf(uint8_t swrtssuccess)
{
	ASSERT_ERR((((uint32_t)swrtssuccess << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)swrtssuccess <<14));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_ac_3_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_ac_3_tx_bw_decision_setf(uint8_t ac3txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac3txbwdecision << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)ac3txbwdecision <<13));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_ac_2_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_ac_2_tx_bw_decision_setf(uint8_t ac2txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac2txbwdecision << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)ac2txbwdecision <<12));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_ac_1_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_ac_1_tx_bw_decision_setf(uint8_t ac1txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac1txbwdecision << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)ac1txbwdecision <<11));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_ac_0_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_ac_0_tx_bw_decision_setf(uint8_t ac0txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac0txbwdecision << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)ac0txbwdecision <<10));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_htp_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_htp_tx_bw_decision_setf(uint8_t htptxbwdecision)
{
	ASSERT_ERR((((uint32_t)htptxbwdecision << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)htptxbwdecision <<9));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_bfr_resp_cancelled_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_bfr_resp_cancelled_setf(uint8_t bfrrespcancelled)
{
	ASSERT_ERR((((uint32_t)bfrrespcancelled << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)bfrrespcancelled <<8));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_end_of_ppdu_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_end_of_ppdu_setf(uint8_t endofppdu)
{
	ASSERT_ERR((((uint32_t)endofppdu << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)endofppdu <<7));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_need_response_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_need_response_setf(uint8_t needresponse)
{
	ASSERT_ERR((((uint32_t)needresponse << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)needresponse <<6));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_rd_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_rd_prot_trigger_setf(uint8_t rdprottrigger)
{
	ASSERT_ERR((((uint32_t)rdprottrigger << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rdprottrigger <<5));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_hcca_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_hcca_prot_trigger_setf(uint8_t hccaprottrigger)
{
	ASSERT_ERR((((uint32_t)hccaprottrigger << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)hccaprottrigger <<4));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_ac_3_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_ac_3_prot_trigger_setf(uint8_t ac3prottrigger)
{
	ASSERT_ERR((((uint32_t)ac3prottrigger << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)ac3prottrigger <<3));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_ac_2_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_ac_2_prot_trigger_setf(uint8_t ac2prottrigger)
{
	ASSERT_ERR((((uint32_t)ac2prottrigger << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)ac2prottrigger <<2));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_ac_1_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_ac_1_prot_trigger_setf(uint8_t ac1prottrigger)
{
	ASSERT_ERR((((uint32_t)ac1prottrigger << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)ac1prottrigger <<1));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_smac_ac_0_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_smac_ac_0_prot_trigger_setf(uint8_t ac0prottrigger)
{
	ASSERT_ERR((((uint32_t)ac0prottrigger << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)ac0prottrigger <<0));
}

/**
 * @brief HIGH_PRI_INT_EVENT_STA_UMAC register definition
 *  HIGH PRIORITY interrupt events status UMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30    TX_HTP_AMPDU_UND          0              
 *    29    TX_AC3_AMPDU_UND          0              
 *    28    TX_AC2_AMPDU_UND          0              
 *    27    TX_AC1_AMPDU_UND          0              
 *    26    TX_AC0_AMPDU_UND          0              
 *    14    SW_RTS_SUCCESS            0              
 *    13    AC3_TX_BW_DECISION        0              
 *    12    AC2_TX_BW_DECISION        0              
 *    11    AC1_TX_BW_DECISION        0              
 *    10    AC0_TX_BW_DECISION        0              
 *    09    HTP_TX_BW_DECISION        0              
 *    08    BFR_RESP_CANCELLED        0              
 *    07    END_OF_PPDU               0              
 *    06    NEED_RESPONSE             0              
 *    05    RD_PROT_TRIGGER           0              
 *    04    HCCA_PROT_TRIGGER         0              
 *    03    AC_3_PROT_TRIGGER         0              
 *    02    AC_2_PROT_TRIGGER         0              
 *    01    AC_1_PROT_TRIGGER         0              
 *    00    AC_0_PROT_TRIGGER         0              
 * </pre>
 */
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008120)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_OFFSET      0x00008120
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_INDEX       0x00002048
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_high_pri_int_event_sta_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_TX_HTP_AMPDU_UND_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_TX_HTP_AMPDU_UND_POS    30
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_TX_AC_3_AMPDU_UND_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_TX_AC_3_AMPDU_UND_POS    29
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_TX_AC_2_AMPDU_UND_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_TX_AC_2_AMPDU_UND_POS    28
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_TX_AC_1_AMPDU_UND_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_TX_AC_1_AMPDU_UND_POS    27
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_TX_AC_0_AMPDU_UND_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_TX_AC_0_AMPDU_UND_POS    26
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_SW_RTS_SUCCESS_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_SW_RTS_SUCCESS_POS    14
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_3_TX_BW_DECISION_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_3_TX_BW_DECISION_POS    13
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_2_TX_BW_DECISION_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_2_TX_BW_DECISION_POS    12
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_1_TX_BW_DECISION_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_1_TX_BW_DECISION_POS    11
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_0_TX_BW_DECISION_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_0_TX_BW_DECISION_POS    10
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_HTP_TX_BW_DECISION_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_HTP_TX_BW_DECISION_POS    9
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_BFR_RESP_CANCELLED_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_BFR_RESP_CANCELLED_POS    8
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_END_OF_PPDU_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_END_OF_PPDU_POS    7
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_NEED_RESPONSE_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_NEED_RESPONSE_POS    6
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_RD_PROT_TRIGGER_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_RD_PROT_TRIGGER_POS    5
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_HCCA_PROT_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_HCCA_PROT_TRIGGER_POS    4
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_3_PROT_TRIGGER_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_3_PROT_TRIGGER_POS    3
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_2_PROT_TRIGGER_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_2_PROT_TRIGGER_POS    2
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_1_PROT_TRIGGER_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_1_PROT_TRIGGER_POS    1
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_0_PROT_TRIGGER_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_0_PROT_TRIGGER_POS    0

#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_TX_HTP_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_TX_AC_3_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_TX_AC_2_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_TX_AC_1_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_TX_AC_0_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_SW_RTS_SUCCESS_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_3_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_2_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_1_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_0_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_HTP_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_BFR_RESP_CANCELLED_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_END_OF_PPDU_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_NEED_RESPONSE_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_RD_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_HCCA_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_3_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_2_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_1_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_AC_0_PROT_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_high_pri_int_event_sta_umac_unpack(uint8_t* tx_htp_ampdu_und, uint8_t* tx_ac3_ampdu_und, uint8_t* tx_ac2_ampdu_und, uint8_t* tx_ac1_ampdu_und, uint8_t* tx_ac0_ampdu_und, uint8_t* sw_rts_success, uint8_t* ac3_tx_bw_decision, uint8_t* ac2_tx_bw_decision, uint8_t* ac1_tx_bw_decision, uint8_t* ac0_tx_bw_decision, uint8_t* htp_tx_bw_decision, uint8_t* bfr_resp_cancelled, uint8_t* end_of_ppdu, uint8_t* need_response, uint8_t* rd_prot_trigger, uint8_t* hcca_prot_trigger, uint8_t* ac_3_prot_trigger, uint8_t* ac_2_prot_trigger, uint8_t* ac_1_prot_trigger, uint8_t* ac_0_prot_trigger)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);

	*tx_htp_ampdu_und = (localVal & ((uint32_t)0x40000000)) >>  30;
	*tx_ac3_ampdu_und = (localVal & ((uint32_t)0x20000000)) >>  29;
	*tx_ac2_ampdu_und = (localVal & ((uint32_t)0x10000000)) >>  28;
	*tx_ac1_ampdu_und = (localVal & ((uint32_t)0x08000000)) >>  27;
	*tx_ac0_ampdu_und = (localVal & ((uint32_t)0x04000000)) >>  26;
	*sw_rts_success = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ac3_tx_bw_decision = (localVal & ((uint32_t)0x00002000)) >>  13;
	*ac2_tx_bw_decision = (localVal & ((uint32_t)0x00001000)) >>  12;
	*ac1_tx_bw_decision = (localVal & ((uint32_t)0x00000800)) >>  11;
	*ac0_tx_bw_decision = (localVal & ((uint32_t)0x00000400)) >>  10;
	*htp_tx_bw_decision = (localVal & ((uint32_t)0x00000200)) >>  9;
	*bfr_resp_cancelled = (localVal & ((uint32_t)0x00000100)) >>  8;
	*end_of_ppdu = (localVal & ((uint32_t)0x00000080)) >>  7;
	*need_response = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rd_prot_trigger = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hcca_prot_trigger = (localVal & ((uint32_t)0x00000010)) >>  4;
	*ac_3_prot_trigger = (localVal & ((uint32_t)0x00000008)) >>  3;
	*ac_2_prot_trigger = (localVal & ((uint32_t)0x00000004)) >>  2;
	*ac_1_prot_trigger = (localVal & ((uint32_t)0x00000002)) >>  1;
	*ac_0_prot_trigger = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_tx_htp_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_tx_ac_3_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_tx_ac_2_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_tx_ac_1_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_tx_ac_0_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_sw_rts_success_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_ac_3_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_ac_2_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_ac_1_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_ac_0_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_htp_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_bfr_resp_cancelled_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_end_of_ppdu_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_need_response_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_rd_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_hcca_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_ac_3_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_ac_2_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_ac_1_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_umac_ac_0_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief HIGH_PRI_INT_EVENT_STA_SMAC register definition
 *  HIGH PRIORITY interrupt events status SMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30    TX_HTP_AMPDU_UND          0              
 *    29    TX_AC3_AMPDU_UND          0              
 *    28    TX_AC2_AMPDU_UND          0              
 *    27    TX_AC1_AMPDU_UND          0              
 *    26    TX_AC0_AMPDU_UND          0              
 *    14    SW_RTS_SUCCESS            0              
 *    13    AC3_TX_BW_DECISION        0              
 *    12    AC2_TX_BW_DECISION        0              
 *    11    AC1_TX_BW_DECISION        0              
 *    10    AC0_TX_BW_DECISION        0              
 *    09    HTP_TX_BW_DECISION        0              
 *    08    BFR_RESP_CANCELLED        0              
 *    07    END_OF_PPDU               0              
 *    06    NEED_RESPONSE             0              
 *    05    RD_PROT_TRIGGER           0              
 *    04    HCCA_PROT_TRIGGER         0              
 *    03    AC_3_PROT_TRIGGER         0              
 *    02    AC_2_PROT_TRIGGER         0              
 *    01    AC_1_PROT_TRIGGER         0              
 *    00    AC_0_PROT_TRIGGER         0              
 * </pre>
 */
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008124)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_OFFSET      0x00008124
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_INDEX       0x00002049
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_high_pri_int_event_sta_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_TX_HTP_AMPDU_UND_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_TX_HTP_AMPDU_UND_POS    30
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_TX_AC_3_AMPDU_UND_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_TX_AC_3_AMPDU_UND_POS    29
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_TX_AC_2_AMPDU_UND_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_TX_AC_2_AMPDU_UND_POS    28
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_TX_AC_1_AMPDU_UND_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_TX_AC_1_AMPDU_UND_POS    27
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_TX_AC_0_AMPDU_UND_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_TX_AC_0_AMPDU_UND_POS    26
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_SW_RTS_SUCCESS_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_SW_RTS_SUCCESS_POS    14
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_3_TX_BW_DECISION_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_3_TX_BW_DECISION_POS    13
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_2_TX_BW_DECISION_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_2_TX_BW_DECISION_POS    12
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_1_TX_BW_DECISION_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_1_TX_BW_DECISION_POS    11
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_0_TX_BW_DECISION_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_0_TX_BW_DECISION_POS    10
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_HTP_TX_BW_DECISION_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_HTP_TX_BW_DECISION_POS    9
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_BFR_RESP_CANCELLED_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_BFR_RESP_CANCELLED_POS    8
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_END_OF_PPDU_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_END_OF_PPDU_POS    7
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_NEED_RESPONSE_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_NEED_RESPONSE_POS    6
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_RD_PROT_TRIGGER_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_RD_PROT_TRIGGER_POS    5
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_HCCA_PROT_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_HCCA_PROT_TRIGGER_POS    4
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_3_PROT_TRIGGER_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_3_PROT_TRIGGER_POS    3
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_2_PROT_TRIGGER_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_2_PROT_TRIGGER_POS    2
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_1_PROT_TRIGGER_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_1_PROT_TRIGGER_POS    1
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_0_PROT_TRIGGER_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_0_PROT_TRIGGER_POS    0

#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_TX_HTP_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_TX_AC_3_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_TX_AC_2_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_TX_AC_1_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_TX_AC_0_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_SW_RTS_SUCCESS_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_3_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_2_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_1_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_0_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_HTP_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_BFR_RESP_CANCELLED_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_END_OF_PPDU_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_NEED_RESPONSE_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_RD_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_HCCA_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_3_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_2_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_1_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_AC_0_PROT_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_high_pri_int_event_sta_smac_unpack(uint8_t* tx_htp_ampdu_und, uint8_t* tx_ac3_ampdu_und, uint8_t* tx_ac2_ampdu_und, uint8_t* tx_ac1_ampdu_und, uint8_t* tx_ac0_ampdu_und, uint8_t* sw_rts_success, uint8_t* ac3_tx_bw_decision, uint8_t* ac2_tx_bw_decision, uint8_t* ac1_tx_bw_decision, uint8_t* ac0_tx_bw_decision, uint8_t* htp_tx_bw_decision, uint8_t* bfr_resp_cancelled, uint8_t* end_of_ppdu, uint8_t* need_response, uint8_t* rd_prot_trigger, uint8_t* hcca_prot_trigger, uint8_t* ac_3_prot_trigger, uint8_t* ac_2_prot_trigger, uint8_t* ac_1_prot_trigger, uint8_t* ac_0_prot_trigger)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);

	*tx_htp_ampdu_und = (localVal & ((uint32_t)0x40000000)) >>  30;
	*tx_ac3_ampdu_und = (localVal & ((uint32_t)0x20000000)) >>  29;
	*tx_ac2_ampdu_und = (localVal & ((uint32_t)0x10000000)) >>  28;
	*tx_ac1_ampdu_und = (localVal & ((uint32_t)0x08000000)) >>  27;
	*tx_ac0_ampdu_und = (localVal & ((uint32_t)0x04000000)) >>  26;
	*sw_rts_success = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ac3_tx_bw_decision = (localVal & ((uint32_t)0x00002000)) >>  13;
	*ac2_tx_bw_decision = (localVal & ((uint32_t)0x00001000)) >>  12;
	*ac1_tx_bw_decision = (localVal & ((uint32_t)0x00000800)) >>  11;
	*ac0_tx_bw_decision = (localVal & ((uint32_t)0x00000400)) >>  10;
	*htp_tx_bw_decision = (localVal & ((uint32_t)0x00000200)) >>  9;
	*bfr_resp_cancelled = (localVal & ((uint32_t)0x00000100)) >>  8;
	*end_of_ppdu = (localVal & ((uint32_t)0x00000080)) >>  7;
	*need_response = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rd_prot_trigger = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hcca_prot_trigger = (localVal & ((uint32_t)0x00000010)) >>  4;
	*ac_3_prot_trigger = (localVal & ((uint32_t)0x00000008)) >>  3;
	*ac_2_prot_trigger = (localVal & ((uint32_t)0x00000004)) >>  2;
	*ac_1_prot_trigger = (localVal & ((uint32_t)0x00000002)) >>  1;
	*ac_0_prot_trigger = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_tx_htp_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_tx_ac_3_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_tx_ac_2_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_tx_ac_1_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_tx_ac_0_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_sw_rts_success_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_ac_3_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_ac_2_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_ac_1_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_ac_0_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_htp_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_bfr_resp_cancelled_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_end_of_ppdu_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_need_response_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_rd_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_hcca_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_ac_3_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_ac_2_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_ac_1_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_smac_ac_0_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief HIGH_PRI_INT_EVENT_FORCE register definition
 *  HIGH PRIORITY interrupt event force register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30    TX_HTP_AMPDU_UND          0              
 *    29    TX_AC3_AMPDU_UND          0              
 *    28    TX_AC2_AMPDU_UND          0              
 *    27    TX_AC1_AMPDU_UND          0              
 *    26    TX_AC0_AMPDU_UND          0              
 *    14    SW_RTS_SUCCESS            0              
 *    13    AC3_TX_BW_DECISION        0              
 *    12    AC2_TX_BW_DECISION        0              
 *    11    AC1_TX_BW_DECISION        0              
 *    10    AC0_TX_BW_DECISION        0              
 *    09    HTP_TX_BW_DECISION        0              
 *    08    BFR_RESP_CANCELLED        0              
 *    07    END_OF_PPDU               0              
 *    06    NEED_RESPONSE             0              
 *    05    RD_PROT_TRIGGER           0              
 *    04    HCCA_PROT_TRIGGER         0              
 *    03    AC_3_PROT_TRIGGER         0              
 *    02    AC_2_PROT_TRIGGER         0              
 *    01    AC_1_PROT_TRIGGER         0              
 *    00    AC_0_PROT_TRIGGER         0              
 * </pre>
 */
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008128)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_OFFSET      0x00008128
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_INDEX       0x0000204A
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_high_pri_int_event_force_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
}

__INLINE void mac_hw0_mu0_high_pri_int_event_force_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_TX_HTP_AMPDU_UND_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_TX_HTP_AMPDU_UND_POS    30
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_TX_AC_3_AMPDU_UND_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_TX_AC_3_AMPDU_UND_POS    29
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_TX_AC_2_AMPDU_UND_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_TX_AC_2_AMPDU_UND_POS    28
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_TX_AC_1_AMPDU_UND_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_TX_AC_1_AMPDU_UND_POS    27
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_TX_AC_0_AMPDU_UND_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_TX_AC_0_AMPDU_UND_POS    26
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_SW_RTS_SUCCESS_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_SW_RTS_SUCCESS_POS    14
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_3_TX_BW_DECISION_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_3_TX_BW_DECISION_POS    13
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_2_TX_BW_DECISION_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_2_TX_BW_DECISION_POS    12
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_1_TX_BW_DECISION_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_1_TX_BW_DECISION_POS    11
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_0_TX_BW_DECISION_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_0_TX_BW_DECISION_POS    10
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_HTP_TX_BW_DECISION_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_HTP_TX_BW_DECISION_POS    9
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_BFR_RESP_CANCELLED_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_BFR_RESP_CANCELLED_POS    8
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_END_OF_PPDU_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_END_OF_PPDU_POS    7
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_NEED_RESPONSE_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_NEED_RESPONSE_POS    6
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_RD_PROT_TRIGGER_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_RD_PROT_TRIGGER_POS    5
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_HCCA_PROT_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_HCCA_PROT_TRIGGER_POS    4
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_3_PROT_TRIGGER_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_3_PROT_TRIGGER_POS    3
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_2_PROT_TRIGGER_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_2_PROT_TRIGGER_POS    2
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_1_PROT_TRIGGER_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_1_PROT_TRIGGER_POS    1
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_0_PROT_TRIGGER_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_0_PROT_TRIGGER_POS    0

#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_TX_HTP_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_TX_AC_3_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_TX_AC_2_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_TX_AC_1_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_TX_AC_0_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_SW_RTS_SUCCESS_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_3_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_2_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_1_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_0_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_HTP_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_BFR_RESP_CANCELLED_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_END_OF_PPDU_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_NEED_RESPONSE_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_RD_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_HCCA_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_3_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_2_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_1_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_AC_0_PROT_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_high_pri_int_event_force_pack(uint8_t tx_htp_ampdu_und, uint8_t tx_ac3_ampdu_und, uint8_t tx_ac2_ampdu_und, uint8_t tx_ac1_ampdu_und, uint8_t tx_ac0_ampdu_und, uint8_t sw_rts_success, uint8_t ac3_tx_bw_decision, uint8_t ac2_tx_bw_decision, uint8_t ac1_tx_bw_decision, uint8_t ac0_tx_bw_decision, uint8_t htp_tx_bw_decision, uint8_t bfr_resp_cancelled, uint8_t end_of_ppdu, uint8_t need_response, uint8_t rd_prot_trigger, uint8_t hcca_prot_trigger, uint8_t ac_3_prot_trigger, uint8_t ac_2_prot_trigger, uint8_t ac_1_prot_trigger, uint8_t ac_0_prot_trigger)
{
	ASSERT_ERR((((uint32_t)tx_htp_ampdu_und << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac3_ampdu_und << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac2_ampdu_und << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac1_ampdu_und << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac0_ampdu_und << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_rts_success << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)ac3_tx_bw_decision << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)ac2_tx_bw_decision << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)ac1_tx_bw_decision << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)ac0_tx_bw_decision << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_bw_decision << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)bfr_resp_cancelled << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)end_of_ppdu << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)need_response << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)rd_prot_trigger << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)hcca_prot_trigger << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_prot_trigger << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_prot_trigger << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_prot_trigger << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_prot_trigger << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR,  ((uint32_t)tx_htp_ampdu_und << 30) |((uint32_t)tx_ac3_ampdu_und << 29) |((uint32_t)tx_ac2_ampdu_und << 28) |((uint32_t)tx_ac1_ampdu_und << 27) |((uint32_t)tx_ac0_ampdu_und << 26) |((uint32_t)sw_rts_success << 14) |((uint32_t)ac3_tx_bw_decision << 13) |((uint32_t)ac2_tx_bw_decision << 12) |((uint32_t)ac1_tx_bw_decision << 11) |((uint32_t)ac0_tx_bw_decision << 10) |((uint32_t)htp_tx_bw_decision << 9) |((uint32_t)bfr_resp_cancelled << 8) |((uint32_t)end_of_ppdu << 7) |((uint32_t)need_response << 6) |((uint32_t)rd_prot_trigger << 5) |((uint32_t)hcca_prot_trigger << 4) |((uint32_t)ac_3_prot_trigger << 3) |((uint32_t)ac_2_prot_trigger << 2) |((uint32_t)ac_1_prot_trigger << 1) |((uint32_t)ac_0_prot_trigger << 0));
}

__INLINE void mac_hw0_mu0_high_pri_int_event_force_unpack(uint8_t* tx_htp_ampdu_und, uint8_t* tx_ac3_ampdu_und, uint8_t* tx_ac2_ampdu_und, uint8_t* tx_ac1_ampdu_und, uint8_t* tx_ac0_ampdu_und, uint8_t* sw_rts_success, uint8_t* ac3_tx_bw_decision, uint8_t* ac2_tx_bw_decision, uint8_t* ac1_tx_bw_decision, uint8_t* ac0_tx_bw_decision, uint8_t* htp_tx_bw_decision, uint8_t* bfr_resp_cancelled, uint8_t* end_of_ppdu, uint8_t* need_response, uint8_t* rd_prot_trigger, uint8_t* hcca_prot_trigger, uint8_t* ac_3_prot_trigger, uint8_t* ac_2_prot_trigger, uint8_t* ac_1_prot_trigger, uint8_t* ac_0_prot_trigger)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);

	*tx_htp_ampdu_und = (localVal & ((uint32_t)0x40000000)) >>  30;
	*tx_ac3_ampdu_und = (localVal & ((uint32_t)0x20000000)) >>  29;
	*tx_ac2_ampdu_und = (localVal & ((uint32_t)0x10000000)) >>  28;
	*tx_ac1_ampdu_und = (localVal & ((uint32_t)0x08000000)) >>  27;
	*tx_ac0_ampdu_und = (localVal & ((uint32_t)0x04000000)) >>  26;
	*sw_rts_success = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ac3_tx_bw_decision = (localVal & ((uint32_t)0x00002000)) >>  13;
	*ac2_tx_bw_decision = (localVal & ((uint32_t)0x00001000)) >>  12;
	*ac1_tx_bw_decision = (localVal & ((uint32_t)0x00000800)) >>  11;
	*ac0_tx_bw_decision = (localVal & ((uint32_t)0x00000400)) >>  10;
	*htp_tx_bw_decision = (localVal & ((uint32_t)0x00000200)) >>  9;
	*bfr_resp_cancelled = (localVal & ((uint32_t)0x00000100)) >>  8;
	*end_of_ppdu = (localVal & ((uint32_t)0x00000080)) >>  7;
	*need_response = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rd_prot_trigger = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hcca_prot_trigger = (localVal & ((uint32_t)0x00000010)) >>  4;
	*ac_3_prot_trigger = (localVal & ((uint32_t)0x00000008)) >>  3;
	*ac_2_prot_trigger = (localVal & ((uint32_t)0x00000004)) >>  2;
	*ac_1_prot_trigger = (localVal & ((uint32_t)0x00000002)) >>  1;
	*ac_0_prot_trigger = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_tx_htp_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_tx_htp_ampdu_und_setf(uint8_t txhtpampduund)
{
	ASSERT_ERR((((uint32_t)txhtpampduund << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)txhtpampduund <<30));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_tx_ac_3_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_tx_ac_3_ampdu_und_setf(uint8_t txac3ampduund)
{
	ASSERT_ERR((((uint32_t)txac3ampduund << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)txac3ampduund <<29));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_tx_ac_2_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_tx_ac_2_ampdu_und_setf(uint8_t txac2ampduund)
{
	ASSERT_ERR((((uint32_t)txac2ampduund << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)txac2ampduund <<28));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_tx_ac_1_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_tx_ac_1_ampdu_und_setf(uint8_t txac1ampduund)
{
	ASSERT_ERR((((uint32_t)txac1ampduund << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)txac1ampduund <<27));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_tx_ac_0_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_tx_ac_0_ampdu_und_setf(uint8_t txac0ampduund)
{
	ASSERT_ERR((((uint32_t)txac0ampduund << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)txac0ampduund <<26));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_sw_rts_success_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_sw_rts_success_setf(uint8_t swrtssuccess)
{
	ASSERT_ERR((((uint32_t)swrtssuccess << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)swrtssuccess <<14));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_ac_3_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_ac_3_tx_bw_decision_setf(uint8_t ac3txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac3txbwdecision << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)ac3txbwdecision <<13));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_ac_2_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_ac_2_tx_bw_decision_setf(uint8_t ac2txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac2txbwdecision << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)ac2txbwdecision <<12));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_ac_1_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_ac_1_tx_bw_decision_setf(uint8_t ac1txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac1txbwdecision << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)ac1txbwdecision <<11));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_ac_0_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_ac_0_tx_bw_decision_setf(uint8_t ac0txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac0txbwdecision << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)ac0txbwdecision <<10));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_htp_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_htp_tx_bw_decision_setf(uint8_t htptxbwdecision)
{
	ASSERT_ERR((((uint32_t)htptxbwdecision << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)htptxbwdecision <<9));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_bfr_resp_cancelled_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_bfr_resp_cancelled_setf(uint8_t bfrrespcancelled)
{
	ASSERT_ERR((((uint32_t)bfrrespcancelled << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)bfrrespcancelled <<8));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_end_of_ppdu_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_end_of_ppdu_setf(uint8_t endofppdu)
{
	ASSERT_ERR((((uint32_t)endofppdu << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)endofppdu <<7));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_need_response_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_need_response_setf(uint8_t needresponse)
{
	ASSERT_ERR((((uint32_t)needresponse << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)needresponse <<6));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_rd_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_rd_prot_trigger_setf(uint8_t rdprottrigger)
{
	ASSERT_ERR((((uint32_t)rdprottrigger << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rdprottrigger <<5));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_hcca_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_hcca_prot_trigger_setf(uint8_t hccaprottrigger)
{
	ASSERT_ERR((((uint32_t)hccaprottrigger << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)hccaprottrigger <<4));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_ac_3_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_ac_3_prot_trigger_setf(uint8_t ac3prottrigger)
{
	ASSERT_ERR((((uint32_t)ac3prottrigger << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)ac3prottrigger <<3));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_ac_2_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_ac_2_prot_trigger_setf(uint8_t ac2prottrigger)
{
	ASSERT_ERR((((uint32_t)ac2prottrigger << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)ac2prottrigger <<2));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_ac_1_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_ac_1_prot_trigger_setf(uint8_t ac1prottrigger)
{
	ASSERT_ERR((((uint32_t)ac1prottrigger << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)ac1prottrigger <<1));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_force_ac_0_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_force_ac_0_prot_trigger_setf(uint8_t ac0prottrigger)
{
	ASSERT_ERR((((uint32_t)ac0prottrigger << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)ac0prottrigger <<0));
}

/**
 * @brief HIGH_PRI_INT_MAC_SOURCE_UMAC register definition
 *  Indicates the UMAC HIGH PRIORITY interrupt MAC sou register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000812C)
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_UMAC_OFFSET      0x0000812C
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_UMAC_INDEX       0x0000204B
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_high_pri_int_mac_source_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_UMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_high_pri_int_mac_source_umac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_UMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief HIGH_PRI_INT_MAC_SOURCE_SMAC register definition
 *  Indicates the SMAC HIGH PRIORITY interrupt MAC sou register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008130)
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_SMAC_OFFSET      0x00008130
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_SMAC_INDEX       0x0000204C
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_high_pri_int_mac_source_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_SMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_high_pri_int_mac_source_smac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_MAC_SOURCE_SMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_INT_EVENT_RAW_STATUS register definition
 *  Indicates RX events raw status register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25    EOP_FILTERED              0              
 *    24    COUNTER_RX_TRIGGER2       0              
 *    23    PHY_RX_START              0              
 *    22    BA_RX_TRIGGER2            0              
 *    20    RX_TRIGGER2               0              
 *    19    COUNTER_RX_TRIGGER        0              
 *    18    BA_RX_TRIGGER             0              
 *    16    RX_TRIGGER                0              
 *    08    RX_IMPLICIT_BF            0              
 *    05    RX_CLASS_RULE5            0              
 *    04    RX_CLASS_RULE4            0              
 *    03    RX_CLASS_RULE3            0              
 *    02    RX_CLASS_RULE2            0              
 *    01    RX_CLASS_RULE1            0              
 *    00    RX_CLASS_RULE0            0              
 * </pre>
 */
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008134)
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_OFFSET      0x00008134
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_INDEX       0x0000204D
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_int_event_raw_status_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_EOP_FILTERED_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_EOP_FILTERED_POS    25
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_COUNTER_RX_TRIGGER_2_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_COUNTER_RX_TRIGGER_2_POS    24
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_PHY_RX_START_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_PHY_RX_START_POS    23
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_BA_RX_TRIGGER_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_BA_RX_TRIGGER_2_POS    22
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_TRIGGER_2_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_TRIGGER_2_POS    20
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_COUNTER_RX_TRIGGER_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_COUNTER_RX_TRIGGER_POS    19
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_BA_RX_TRIGGER_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_BA_RX_TRIGGER_POS    18
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_TRIGGER_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_TRIGGER_POS    16
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_IMPLICIT_BF_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_IMPLICIT_BF_POS    8
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_5_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_5_POS    5
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_4_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_4_POS    4
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_3_POS    3
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_2_POS    2
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_1_POS    1
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_0_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_0_POS    0

#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_EOP_FILTERED_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_COUNTER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_PHY_RX_START_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_BA_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_COUNTER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_BA_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_IMPLICIT_BF_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_5_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_4_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_3_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_1_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_RX_CLASS_RULE_0_RST    0x0

__INLINE void mac_hw0_mu0_rx_int_event_raw_status_unpack(uint8_t* eop_filtered, uint8_t* counter_rx_trigger2, uint8_t* phy_rx_start, uint8_t* ba_rx_trigger2, uint8_t* rx_trigger2, uint8_t* counter_rx_trigger, uint8_t* ba_rx_trigger, uint8_t* rx_trigger, uint8_t* rx_implicit_bf, uint8_t* rx_class_rule5, uint8_t* rx_class_rule4, uint8_t* rx_class_rule3, uint8_t* rx_class_rule2, uint8_t* rx_class_rule1, uint8_t* rx_class_rule0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);

	*eop_filtered = (localVal & ((uint32_t)0x02000000)) >>  25;
	*counter_rx_trigger2 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*phy_rx_start = (localVal & ((uint32_t)0x00800000)) >>  23;
	*ba_rx_trigger2 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*rx_trigger2 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*counter_rx_trigger = (localVal & ((uint32_t)0x00080000)) >>  19;
	*ba_rx_trigger = (localVal & ((uint32_t)0x00040000)) >>  18;
	*rx_trigger = (localVal & ((uint32_t)0x00010000)) >>  16;
	*rx_implicit_bf = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_class_rule5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rx_class_rule4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*rx_class_rule3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*rx_class_rule2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*rx_class_rule1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*rx_class_rule0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_int_event_raw_status_eop_filtered_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_raw_status_counter_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_raw_status_phy_rx_start_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_raw_status_ba_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_raw_status_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_raw_status_counter_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_raw_status_ba_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_raw_status_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_raw_status_rx_implicit_bf_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_raw_status_rx_class_rule_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_raw_status_rx_class_rule_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_raw_status_rx_class_rule_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_raw_status_rx_class_rule_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_raw_status_rx_class_rule_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_raw_status_rx_class_rule_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief RX_INT_EVENT_EN_SMAC register definition
 *  RX interrupt events enable SMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25    EOP_FILTERED              0              
 *    24    COUNTER_RX_TRIGGER2       0              
 *    23    PHY_RX_START              0              
 *    22    BA_RX_TRIGGER2            0              
 *    20    RX_TRIGGER2               0              
 *    19    COUNTER_RX_TRIGGER        0              
 *    18    BA_RX_TRIGGER             0              
 *    16    RX_TRIGGER                0              
 *    08    RX_IMPLICIT_BF            0              
 *    05    RX_CLASS_RULE5            0              
 *    04    RX_CLASS_RULE4            0              
 *    03    RX_CLASS_RULE3            0              
 *    02    RX_CLASS_RULE2            0              
 *    01    RX_CLASS_RULE1            0              
 *    00    RX_CLASS_RULE0            0              
 * </pre>
 */
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008138)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_OFFSET      0x00008138
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_INDEX       0x0000204E
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_int_event_en_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);
}

__INLINE void mac_hw0_mu0_rx_int_event_en_smac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_EOP_FILTERED_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_EOP_FILTERED_POS    25
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_COUNTER_RX_TRIGGER_2_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_COUNTER_RX_TRIGGER_2_POS    24
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_PHY_RX_START_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_PHY_RX_START_POS    23
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_BA_RX_TRIGGER_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_BA_RX_TRIGGER_2_POS    22
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_TRIGGER_2_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_TRIGGER_2_POS    20
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_COUNTER_RX_TRIGGER_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_COUNTER_RX_TRIGGER_POS    19
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_BA_RX_TRIGGER_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_BA_RX_TRIGGER_POS    18
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_TRIGGER_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_TRIGGER_POS    16
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_IMPLICIT_BF_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_IMPLICIT_BF_POS    8
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_5_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_5_POS    5
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_4_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_4_POS    4
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_3_POS    3
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_2_POS    2
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_1_POS    1
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_0_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_0_POS    0

#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_EOP_FILTERED_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_COUNTER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_PHY_RX_START_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_BA_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_COUNTER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_BA_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_IMPLICIT_BF_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_5_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_4_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_3_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_1_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_RX_CLASS_RULE_0_RST    0x0

__INLINE void mac_hw0_mu0_rx_int_event_en_smac_pack(uint8_t eop_filtered, uint8_t counter_rx_trigger2, uint8_t phy_rx_start, uint8_t ba_rx_trigger2, uint8_t rx_trigger2, uint8_t counter_rx_trigger, uint8_t ba_rx_trigger, uint8_t rx_trigger, uint8_t rx_implicit_bf, uint8_t rx_class_rule5, uint8_t rx_class_rule4, uint8_t rx_class_rule3, uint8_t rx_class_rule2, uint8_t rx_class_rule1, uint8_t rx_class_rule0)
{
	ASSERT_ERR((((uint32_t)eop_filtered << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)counter_rx_trigger2 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)phy_rx_start << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)ba_rx_trigger2 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)rx_trigger2 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)counter_rx_trigger << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)ba_rx_trigger << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)rx_trigger << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)rx_implicit_bf << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR,  ((uint32_t)eop_filtered << 25) |((uint32_t)counter_rx_trigger2 << 24) |((uint32_t)phy_rx_start << 23) |((uint32_t)ba_rx_trigger2 << 22) |((uint32_t)rx_trigger2 << 20) |((uint32_t)counter_rx_trigger << 19) |((uint32_t)ba_rx_trigger << 18) |((uint32_t)rx_trigger << 16) |((uint32_t)rx_implicit_bf << 8) |((uint32_t)rx_class_rule5 << 5) |((uint32_t)rx_class_rule4 << 4) |((uint32_t)rx_class_rule3 << 3) |((uint32_t)rx_class_rule2 << 2) |((uint32_t)rx_class_rule1 << 1) |((uint32_t)rx_class_rule0 << 0));
}

__INLINE void mac_hw0_mu0_rx_int_event_en_smac_unpack(uint8_t* eop_filtered, uint8_t* counter_rx_trigger2, uint8_t* phy_rx_start, uint8_t* ba_rx_trigger2, uint8_t* rx_trigger2, uint8_t* counter_rx_trigger, uint8_t* ba_rx_trigger, uint8_t* rx_trigger, uint8_t* rx_implicit_bf, uint8_t* rx_class_rule5, uint8_t* rx_class_rule4, uint8_t* rx_class_rule3, uint8_t* rx_class_rule2, uint8_t* rx_class_rule1, uint8_t* rx_class_rule0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);

	*eop_filtered = (localVal & ((uint32_t)0x02000000)) >>  25;
	*counter_rx_trigger2 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*phy_rx_start = (localVal & ((uint32_t)0x00800000)) >>  23;
	*ba_rx_trigger2 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*rx_trigger2 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*counter_rx_trigger = (localVal & ((uint32_t)0x00080000)) >>  19;
	*ba_rx_trigger = (localVal & ((uint32_t)0x00040000)) >>  18;
	*rx_trigger = (localVal & ((uint32_t)0x00010000)) >>  16;
	*rx_implicit_bf = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_class_rule5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rx_class_rule4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*rx_class_rule3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*rx_class_rule2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*rx_class_rule1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*rx_class_rule0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_smac_eop_filtered_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_smac_eop_filtered_setf(uint8_t eopfiltered)
{
	ASSERT_ERR((((uint32_t)eopfiltered << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)eopfiltered <<25));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_smac_counter_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_smac_counter_rx_trigger_2_setf(uint8_t counterrxtrigger2)
{
	ASSERT_ERR((((uint32_t)counterrxtrigger2 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)counterrxtrigger2 <<24));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_smac_phy_rx_start_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_smac_phy_rx_start_setf(uint8_t phyrxstart)
{
	ASSERT_ERR((((uint32_t)phyrxstart << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)phyrxstart <<23));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_smac_ba_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_smac_ba_rx_trigger_2_setf(uint8_t barxtrigger2)
{
	ASSERT_ERR((((uint32_t)barxtrigger2 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)barxtrigger2 <<22));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_smac_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_smac_rx_trigger_2_setf(uint8_t rxtrigger2)
{
	ASSERT_ERR((((uint32_t)rxtrigger2 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)rxtrigger2 <<20));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_smac_counter_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_smac_counter_rx_trigger_setf(uint8_t counterrxtrigger)
{
	ASSERT_ERR((((uint32_t)counterrxtrigger << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)counterrxtrigger <<19));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_smac_ba_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_smac_ba_rx_trigger_setf(uint8_t barxtrigger)
{
	ASSERT_ERR((((uint32_t)barxtrigger << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)barxtrigger <<18));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_smac_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_smac_rx_trigger_setf(uint8_t rxtrigger)
{
	ASSERT_ERR((((uint32_t)rxtrigger << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)rxtrigger <<16));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_smac_rx_implicit_bf_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_smac_rx_implicit_bf_setf(uint8_t rximplicitbf)
{
	ASSERT_ERR((((uint32_t)rximplicitbf << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)rximplicitbf <<8));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_smac_rx_class_rule_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_smac_rx_class_rule_5_setf(uint8_t rxclassrule5)
{
	ASSERT_ERR((((uint32_t)rxclassrule5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rxclassrule5 <<5));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_smac_rx_class_rule_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_smac_rx_class_rule_4_setf(uint8_t rxclassrule4)
{
	ASSERT_ERR((((uint32_t)rxclassrule4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)rxclassrule4 <<4));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_smac_rx_class_rule_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_smac_rx_class_rule_3_setf(uint8_t rxclassrule3)
{
	ASSERT_ERR((((uint32_t)rxclassrule3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)rxclassrule3 <<3));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_smac_rx_class_rule_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_smac_rx_class_rule_2_setf(uint8_t rxclassrule2)
{
	ASSERT_ERR((((uint32_t)rxclassrule2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)rxclassrule2 <<2));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_smac_rx_class_rule_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_smac_rx_class_rule_1_setf(uint8_t rxclassrule1)
{
	ASSERT_ERR((((uint32_t)rxclassrule1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)rxclassrule1 <<1));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_smac_rx_class_rule_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_smac_rx_class_rule_0_setf(uint8_t rxclassrule0)
{
	ASSERT_ERR((((uint32_t)rxclassrule0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)rxclassrule0 <<0));
}

/**
 * @brief RX_INT_EVENT_STATUS_UMAC register definition
 *  RX interrupt events status UMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25    EOP_FILTERED              0              
 *    24    COUNTER_RX_TRIGGER2       0              
 *    23    PHY_RX_START              0              
 *    22    BA_RX_TRIGGER2            0              
 *    20    RX_TRIGGER2               0              
 *    19    COUNTER_RX_TRIGGER        0              
 *    18    BA_RX_TRIGGER             0              
 *    16    RX_TRIGGER                0              
 *    08    RX_IMPLICIT_BF            0              
 *    05    RX_CLASS_RULE5            0              
 *    04    RX_CLASS_RULE4            0              
 *    03    RX_CLASS_RULE3            0              
 *    02    RX_CLASS_RULE2            0              
 *    01    RX_CLASS_RULE1            0              
 *    00    RX_CLASS_RULE0            0              
 * </pre>
 */
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000813C)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_OFFSET      0x0000813C
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_INDEX       0x0000204F
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_int_event_status_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_EOP_FILTERED_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_EOP_FILTERED_POS    25
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_COUNTER_RX_TRIGGER_2_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_COUNTER_RX_TRIGGER_2_POS    24
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_PHY_RX_START_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_PHY_RX_START_POS    23
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_BA_RX_TRIGGER_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_BA_RX_TRIGGER_2_POS    22
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_TRIGGER_2_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_TRIGGER_2_POS    20
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_COUNTER_RX_TRIGGER_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_COUNTER_RX_TRIGGER_POS    19
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_BA_RX_TRIGGER_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_BA_RX_TRIGGER_POS    18
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_TRIGGER_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_TRIGGER_POS    16
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_IMPLICIT_BF_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_IMPLICIT_BF_POS    8
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_5_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_5_POS    5
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_4_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_4_POS    4
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_3_POS    3
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_2_POS    2
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_1_POS    1
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_0_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_0_POS    0

#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_EOP_FILTERED_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_COUNTER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_PHY_RX_START_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_BA_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_COUNTER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_BA_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_IMPLICIT_BF_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_5_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_4_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_3_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_1_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_RX_CLASS_RULE_0_RST    0x0

__INLINE void mac_hw0_mu0_rx_int_event_status_umac_unpack(uint8_t* eop_filtered, uint8_t* counter_rx_trigger2, uint8_t* phy_rx_start, uint8_t* ba_rx_trigger2, uint8_t* rx_trigger2, uint8_t* counter_rx_trigger, uint8_t* ba_rx_trigger, uint8_t* rx_trigger, uint8_t* rx_implicit_bf, uint8_t* rx_class_rule5, uint8_t* rx_class_rule4, uint8_t* rx_class_rule3, uint8_t* rx_class_rule2, uint8_t* rx_class_rule1, uint8_t* rx_class_rule0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);

	*eop_filtered = (localVal & ((uint32_t)0x02000000)) >>  25;
	*counter_rx_trigger2 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*phy_rx_start = (localVal & ((uint32_t)0x00800000)) >>  23;
	*ba_rx_trigger2 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*rx_trigger2 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*counter_rx_trigger = (localVal & ((uint32_t)0x00080000)) >>  19;
	*ba_rx_trigger = (localVal & ((uint32_t)0x00040000)) >>  18;
	*rx_trigger = (localVal & ((uint32_t)0x00010000)) >>  16;
	*rx_implicit_bf = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_class_rule5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rx_class_rule4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*rx_class_rule3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*rx_class_rule2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*rx_class_rule1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*rx_class_rule0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_umac_eop_filtered_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_umac_counter_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_umac_phy_rx_start_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_umac_ba_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_umac_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_umac_counter_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_umac_ba_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_umac_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_umac_rx_implicit_bf_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_umac_rx_class_rule_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_umac_rx_class_rule_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_umac_rx_class_rule_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_umac_rx_class_rule_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_umac_rx_class_rule_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_umac_rx_class_rule_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief RX_INT_EVENT_STATUS_SMAC register definition
 *  RX interrupt events status SMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25    EOP_FILTERED              0              
 *    24    COUNTER_RX_TRIGGER2       0              
 *    23    PHY_RX_START              0              
 *    22    BA_RX_TRIGGER2            0              
 *    20    RX_TRIGGER2               0              
 *    19    COUNTER_RX_TRIGGER        0              
 *    18    BA_RX_TRIGGER             0              
 *    16    RX_TRIGGER                0              
 *    08    RX_IMPLICIT_BF            0              
 *    05    RX_CLASS_RULE5            0              
 *    04    RX_CLASS_RULE4            0              
 *    03    RX_CLASS_RULE3            0              
 *    02    RX_CLASS_RULE2            0              
 *    01    RX_CLASS_RULE1            0              
 *    00    RX_CLASS_RULE0            0              
 * </pre>
 */
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008140)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_OFFSET      0x00008140
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_INDEX       0x00002050
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_int_event_status_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_EOP_FILTERED_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_EOP_FILTERED_POS    25
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_COUNTER_RX_TRIGGER_2_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_COUNTER_RX_TRIGGER_2_POS    24
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_PHY_RX_START_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_PHY_RX_START_POS    23
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_BA_RX_TRIGGER_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_BA_RX_TRIGGER_2_POS    22
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_TRIGGER_2_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_TRIGGER_2_POS    20
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_COUNTER_RX_TRIGGER_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_COUNTER_RX_TRIGGER_POS    19
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_BA_RX_TRIGGER_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_BA_RX_TRIGGER_POS    18
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_TRIGGER_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_TRIGGER_POS    16
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_IMPLICIT_BF_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_IMPLICIT_BF_POS    8
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_5_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_5_POS    5
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_4_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_4_POS    4
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_3_POS    3
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_2_POS    2
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_1_POS    1
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_0_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_0_POS    0

#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_EOP_FILTERED_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_COUNTER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_PHY_RX_START_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_BA_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_COUNTER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_BA_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_IMPLICIT_BF_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_5_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_4_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_3_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_1_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_RX_CLASS_RULE_0_RST    0x0

__INLINE void mac_hw0_mu0_rx_int_event_status_smac_unpack(uint8_t* eop_filtered, uint8_t* counter_rx_trigger2, uint8_t* phy_rx_start, uint8_t* ba_rx_trigger2, uint8_t* rx_trigger2, uint8_t* counter_rx_trigger, uint8_t* ba_rx_trigger, uint8_t* rx_trigger, uint8_t* rx_implicit_bf, uint8_t* rx_class_rule5, uint8_t* rx_class_rule4, uint8_t* rx_class_rule3, uint8_t* rx_class_rule2, uint8_t* rx_class_rule1, uint8_t* rx_class_rule0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);

	*eop_filtered = (localVal & ((uint32_t)0x02000000)) >>  25;
	*counter_rx_trigger2 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*phy_rx_start = (localVal & ((uint32_t)0x00800000)) >>  23;
	*ba_rx_trigger2 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*rx_trigger2 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*counter_rx_trigger = (localVal & ((uint32_t)0x00080000)) >>  19;
	*ba_rx_trigger = (localVal & ((uint32_t)0x00040000)) >>  18;
	*rx_trigger = (localVal & ((uint32_t)0x00010000)) >>  16;
	*rx_implicit_bf = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_class_rule5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rx_class_rule4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*rx_class_rule3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*rx_class_rule2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*rx_class_rule1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*rx_class_rule0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_smac_eop_filtered_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_smac_counter_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_smac_phy_rx_start_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_smac_ba_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_smac_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_smac_counter_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_smac_ba_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_smac_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_smac_rx_implicit_bf_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_smac_rx_class_rule_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_smac_rx_class_rule_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_smac_rx_class_rule_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_smac_rx_class_rule_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_smac_rx_class_rule_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_smac_rx_class_rule_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief RX_INT_EVENT_FORCE register definition
 *  RX interrupt events force register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25    EOP_FILTERED              0              
 *    24    COUNTER_RX_TRIGGER2       0              
 *    23    PHY_RX_START              0              
 *    22    BA_RX_TRIGGER2            0              
 *    20    RX_TRIGGER2               0              
 *    19    COUNTER_RX_TRIGGER        0              
 *    18    BA_RX_TRIGGER             0              
 *    16    RX_TRIGGER                0              
 *    08    RX_IMPLICIT_BF            0              
 *    05    RX_CLASS_RULE5            0              
 *    04    RX_CLASS_RULE4            0              
 *    03    RX_CLASS_RULE3            0              
 *    02    RX_CLASS_RULE2            0              
 *    01    RX_CLASS_RULE1            0              
 *    00    RX_CLASS_RULE0            0              
 * </pre>
 */
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008144)
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_OFFSET      0x00008144
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_INDEX       0x00002051
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_int_event_force_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);
}

__INLINE void mac_hw0_mu0_rx_int_event_force_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_EOP_FILTERED_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_EOP_FILTERED_POS    25
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_COUNTER_RX_TRIGGER_2_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_COUNTER_RX_TRIGGER_2_POS    24
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_PHY_RX_START_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_PHY_RX_START_POS    23
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_BA_RX_TRIGGER_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_BA_RX_TRIGGER_2_POS    22
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_TRIGGER_2_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_TRIGGER_2_POS    20
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_COUNTER_RX_TRIGGER_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_COUNTER_RX_TRIGGER_POS    19
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_BA_RX_TRIGGER_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_BA_RX_TRIGGER_POS    18
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_TRIGGER_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_TRIGGER_POS    16
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_IMPLICIT_BF_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_IMPLICIT_BF_POS    8
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_5_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_5_POS    5
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_4_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_4_POS    4
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_3_POS    3
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_2_POS    2
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_1_POS    1
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_0_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_0_POS    0

#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_EOP_FILTERED_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_COUNTER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_PHY_RX_START_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_BA_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_COUNTER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_BA_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_IMPLICIT_BF_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_5_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_4_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_3_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_1_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_FORCE_RX_CLASS_RULE_0_RST    0x0

__INLINE void mac_hw0_mu0_rx_int_event_force_pack(uint8_t eop_filtered, uint8_t counter_rx_trigger2, uint8_t phy_rx_start, uint8_t ba_rx_trigger2, uint8_t rx_trigger2, uint8_t counter_rx_trigger, uint8_t ba_rx_trigger, uint8_t rx_trigger, uint8_t rx_implicit_bf, uint8_t rx_class_rule5, uint8_t rx_class_rule4, uint8_t rx_class_rule3, uint8_t rx_class_rule2, uint8_t rx_class_rule1, uint8_t rx_class_rule0)
{
	ASSERT_ERR((((uint32_t)eop_filtered << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)counter_rx_trigger2 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)phy_rx_start << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)ba_rx_trigger2 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)rx_trigger2 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)counter_rx_trigger << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)ba_rx_trigger << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)rx_trigger << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)rx_implicit_bf << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR,  ((uint32_t)eop_filtered << 25) |((uint32_t)counter_rx_trigger2 << 24) |((uint32_t)phy_rx_start << 23) |((uint32_t)ba_rx_trigger2 << 22) |((uint32_t)rx_trigger2 << 20) |((uint32_t)counter_rx_trigger << 19) |((uint32_t)ba_rx_trigger << 18) |((uint32_t)rx_trigger << 16) |((uint32_t)rx_implicit_bf << 8) |((uint32_t)rx_class_rule5 << 5) |((uint32_t)rx_class_rule4 << 4) |((uint32_t)rx_class_rule3 << 3) |((uint32_t)rx_class_rule2 << 2) |((uint32_t)rx_class_rule1 << 1) |((uint32_t)rx_class_rule0 << 0));
}

__INLINE void mac_hw0_mu0_rx_int_event_force_unpack(uint8_t* eop_filtered, uint8_t* counter_rx_trigger2, uint8_t* phy_rx_start, uint8_t* ba_rx_trigger2, uint8_t* rx_trigger2, uint8_t* counter_rx_trigger, uint8_t* ba_rx_trigger, uint8_t* rx_trigger, uint8_t* rx_implicit_bf, uint8_t* rx_class_rule5, uint8_t* rx_class_rule4, uint8_t* rx_class_rule3, uint8_t* rx_class_rule2, uint8_t* rx_class_rule1, uint8_t* rx_class_rule0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);

	*eop_filtered = (localVal & ((uint32_t)0x02000000)) >>  25;
	*counter_rx_trigger2 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*phy_rx_start = (localVal & ((uint32_t)0x00800000)) >>  23;
	*ba_rx_trigger2 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*rx_trigger2 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*counter_rx_trigger = (localVal & ((uint32_t)0x00080000)) >>  19;
	*ba_rx_trigger = (localVal & ((uint32_t)0x00040000)) >>  18;
	*rx_trigger = (localVal & ((uint32_t)0x00010000)) >>  16;
	*rx_implicit_bf = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_class_rule5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rx_class_rule4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*rx_class_rule3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*rx_class_rule2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*rx_class_rule1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*rx_class_rule0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_int_event_force_eop_filtered_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_rx_int_event_force_eop_filtered_setf(uint8_t eopfiltered)
{
	ASSERT_ERR((((uint32_t)eopfiltered << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)eopfiltered <<25));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_force_counter_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_rx_int_event_force_counter_rx_trigger_2_setf(uint8_t counterrxtrigger2)
{
	ASSERT_ERR((((uint32_t)counterrxtrigger2 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)counterrxtrigger2 <<24));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_force_phy_rx_start_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_rx_int_event_force_phy_rx_start_setf(uint8_t phyrxstart)
{
	ASSERT_ERR((((uint32_t)phyrxstart << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)phyrxstart <<23));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_force_ba_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_rx_int_event_force_ba_rx_trigger_2_setf(uint8_t barxtrigger2)
{
	ASSERT_ERR((((uint32_t)barxtrigger2 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)barxtrigger2 <<22));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_force_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_rx_int_event_force_rx_trigger_2_setf(uint8_t rxtrigger2)
{
	ASSERT_ERR((((uint32_t)rxtrigger2 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)rxtrigger2 <<20));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_force_counter_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_rx_int_event_force_counter_rx_trigger_setf(uint8_t counterrxtrigger)
{
	ASSERT_ERR((((uint32_t)counterrxtrigger << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)counterrxtrigger <<19));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_force_ba_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_rx_int_event_force_ba_rx_trigger_setf(uint8_t barxtrigger)
{
	ASSERT_ERR((((uint32_t)barxtrigger << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)barxtrigger <<18));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_force_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_int_event_force_rx_trigger_setf(uint8_t rxtrigger)
{
	ASSERT_ERR((((uint32_t)rxtrigger << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)rxtrigger <<16));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_force_rx_implicit_bf_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_rx_int_event_force_rx_implicit_bf_setf(uint8_t rximplicitbf)
{
	ASSERT_ERR((((uint32_t)rximplicitbf << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)rximplicitbf <<8));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_force_rx_class_rule_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_rx_int_event_force_rx_class_rule_5_setf(uint8_t rxclassrule5)
{
	ASSERT_ERR((((uint32_t)rxclassrule5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rxclassrule5 <<5));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_force_rx_class_rule_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_rx_int_event_force_rx_class_rule_4_setf(uint8_t rxclassrule4)
{
	ASSERT_ERR((((uint32_t)rxclassrule4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)rxclassrule4 <<4));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_force_rx_class_rule_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_rx_int_event_force_rx_class_rule_3_setf(uint8_t rxclassrule3)
{
	ASSERT_ERR((((uint32_t)rxclassrule3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)rxclassrule3 <<3));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_force_rx_class_rule_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_rx_int_event_force_rx_class_rule_2_setf(uint8_t rxclassrule2)
{
	ASSERT_ERR((((uint32_t)rxclassrule2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)rxclassrule2 <<2));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_force_rx_class_rule_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_rx_int_event_force_rx_class_rule_1_setf(uint8_t rxclassrule1)
{
	ASSERT_ERR((((uint32_t)rxclassrule1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)rxclassrule1 <<1));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_force_rx_class_rule_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_int_event_force_rx_class_rule_0_setf(uint8_t rxclassrule0)
{
	ASSERT_ERR((((uint32_t)rxclassrule0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)rxclassrule0 <<0));
}

/**
 * @brief RX_INT_MAC_SOURCE_UMAC register definition
 *  Indicates the UMAC RX interrupt MAC source register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008148)
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_UMAC_OFFSET      0x00008148
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_UMAC_INDEX       0x00002052
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_int_mac_source_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_INT_MAC_SOURCE_UMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_int_mac_source_umac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_MAC_SOURCE_UMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_INT_MAC_SOURCE_SMAC register definition
 *  Indicates the SMAC RX interrupt MAC source register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000814C)
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_SMAC_OFFSET      0x0000814C
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_SMAC_INDEX       0x00002053
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_int_mac_source_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_INT_MAC_SOURCE_SMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_RX_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_rx_int_mac_source_smac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_MAC_SOURCE_SMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief TX_INT_EVENT_RAW_STATUS register definition
 *  Indicates TX events raw status register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    HTP_TX_BUF_TRIGGER        0              
 *    28    BCN_TX_BUF_TRIGGER        0              
 *    27    AC_3_TX_BUF_TRIGGER       0              
 *    26    AC_2_TX_BUF_TRIGGER       0              
 *    25    AC_1_TX_BUF_TRIGGER       0              
 *    24    AC_0_TX_BUF_TRIGGER       0              
 *    13    TXM_TX_TRIGGER            0              
 *    12    HTP_TX_TRIGGER            0              
 *    11    HCCA_TX_TRIGGER           0              
 *    10    BCN_TX_TRIGGER            0              
 *    09    AC_3_TX_TRIGGER           0              
 *    08    AC_2_TX_TRIGGER           0              
 *    07    AC_1_TX_TRIGGER           0              
 *    06    AC_0_TX_TRIGGER           0              
 *    05    TXOP_COMPLETE             0              
 *    04    RD_TX_TRIGGER             0              
 *    03    TX_ABORT                  0              
 * </pre>
 */
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008150)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_OFFSET      0x00008150
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_INDEX       0x00002054
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_int_event_raw_status_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
}

// field definitions
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_HTP_TX_BUF_TRIGGER_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_HTP_TX_BUF_TRIGGER_POS    29
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_BCN_TX_BUF_TRIGGER_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_BCN_TX_BUF_TRIGGER_POS    28
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_3_TX_BUF_TRIGGER_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_3_TX_BUF_TRIGGER_POS    27
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_2_TX_BUF_TRIGGER_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_2_TX_BUF_TRIGGER_POS    26
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_1_TX_BUF_TRIGGER_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_1_TX_BUF_TRIGGER_POS    25
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_0_TX_BUF_TRIGGER_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_0_TX_BUF_TRIGGER_POS    24
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_TXM_TX_TRIGGER_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_TXM_TX_TRIGGER_POS    13
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_HTP_TX_TRIGGER_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_HTP_TX_TRIGGER_POS    12
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_HCCA_TX_TRIGGER_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_HCCA_TX_TRIGGER_POS    11
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_BCN_TX_TRIGGER_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_BCN_TX_TRIGGER_POS    10
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_3_TX_TRIGGER_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_3_TX_TRIGGER_POS    9
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_2_TX_TRIGGER_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_2_TX_TRIGGER_POS    8
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_1_TX_TRIGGER_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_1_TX_TRIGGER_POS    7
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_0_TX_TRIGGER_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_0_TX_TRIGGER_POS    6
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_TXOP_COMPLETE_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_TXOP_COMPLETE_POS    5
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_RD_TX_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_RD_TX_TRIGGER_POS    4
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_TX_ABORT_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_TX_ABORT_POS    3

#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_HTP_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_BCN_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_3_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_2_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_1_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_0_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_TXM_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_HTP_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_HCCA_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_BCN_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_3_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_2_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_1_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_AC_0_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_TXOP_COMPLETE_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_RD_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_TX_ABORT_RST    0x0

__INLINE void mac_hw0_mu0_tx_int_event_raw_status_unpack(uint8_t* htp_tx_buf_trigger, uint8_t* bcn_tx_buf_trigger, uint8_t* ac_3_tx_buf_trigger, uint8_t* ac_2_tx_buf_trigger, uint8_t* ac_1_tx_buf_trigger, uint8_t* ac_0_tx_buf_trigger, uint8_t* txm_tx_trigger, uint8_t* htp_tx_trigger, uint8_t* hcca_tx_trigger, uint8_t* bcn_tx_trigger, uint8_t* ac_3_tx_trigger, uint8_t* ac_2_tx_trigger, uint8_t* ac_1_tx_trigger, uint8_t* ac_0_tx_trigger, uint8_t* txop_complete, uint8_t* rd_tx_trigger, uint8_t* tx_abort)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);

	*htp_tx_buf_trigger = (localVal & ((uint32_t)0x20000000)) >>  29;
	*bcn_tx_buf_trigger = (localVal & ((uint32_t)0x10000000)) >>  28;
	*ac_3_tx_buf_trigger = (localVal & ((uint32_t)0x08000000)) >>  27;
	*ac_2_tx_buf_trigger = (localVal & ((uint32_t)0x04000000)) >>  26;
	*ac_1_tx_buf_trigger = (localVal & ((uint32_t)0x02000000)) >>  25;
	*ac_0_tx_buf_trigger = (localVal & ((uint32_t)0x01000000)) >>  24;
	*txm_tx_trigger = (localVal & ((uint32_t)0x00002000)) >>  13;
	*htp_tx_trigger = (localVal & ((uint32_t)0x00001000)) >>  12;
	*hcca_tx_trigger = (localVal & ((uint32_t)0x00000800)) >>  11;
	*bcn_tx_trigger = (localVal & ((uint32_t)0x00000400)) >>  10;
	*ac_3_tx_trigger = (localVal & ((uint32_t)0x00000200)) >>  9;
	*ac_2_tx_trigger = (localVal & ((uint32_t)0x00000100)) >>  8;
	*ac_1_tx_trigger = (localVal & ((uint32_t)0x00000080)) >>  7;
	*ac_0_tx_trigger = (localVal & ((uint32_t)0x00000040)) >>  6;
	*txop_complete = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rd_tx_trigger = (localVal & ((uint32_t)0x00000010)) >>  4;
	*tx_abort = (localVal & ((uint32_t)0x00000008)) >>  3;
}

__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_htp_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_bcn_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_ac_3_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_ac_2_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_ac_1_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_ac_0_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_txm_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_htp_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_hcca_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_bcn_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_ac_3_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_ac_2_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_ac_1_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_ac_0_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_txop_complete_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_rd_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_raw_status_tx_abort_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}

/**
 * @brief TX_INT_EVENT_EN_SMAC register definition
 *  TX interrupt events enable SMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    HTP_TX_BUF_TRIGGER        0              
 *    28    BCN_TX_BUF_TRIGGER        0              
 *    27    AC_3_TX_BUF_TRIGGER       0              
 *    26    AC_2_TX_BUF_TRIGGER       0              
 *    25    AC_1_TX_BUF_TRIGGER       0              
 *    24    AC_0_TX_BUF_TRIGGER       0              
 *    12    HTP_TX_TRIGGER            0              
 *    11    HCCA_TX_TRIGGER           0              
 *    10    BCN_TX_TRIGGER            0              
 *    09    AC_3_TX_TRIGGER           0              
 *    08    AC_2_TX_TRIGGER           0              
 *    07    AC_1_TX_TRIGGER           0              
 *    06    AC_0_TX_TRIGGER           0              
 *    05    TXOP_COMPLETE             0              
 *    04    RD_TX_TRIGGER             0              
 *    03    TX_ABORT                  0              
 * </pre>
 */
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008154)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_OFFSET      0x00008154
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_INDEX       0x00002055
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_int_event_en_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
}

__INLINE void mac_hw0_mu0_tx_int_event_en_smac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_HTP_TX_BUF_TRIGGER_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_HTP_TX_BUF_TRIGGER_POS    29
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_BCN_TX_BUF_TRIGGER_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_BCN_TX_BUF_TRIGGER_POS    28
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_3_TX_BUF_TRIGGER_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_3_TX_BUF_TRIGGER_POS    27
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_2_TX_BUF_TRIGGER_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_2_TX_BUF_TRIGGER_POS    26
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_1_TX_BUF_TRIGGER_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_1_TX_BUF_TRIGGER_POS    25
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_0_TX_BUF_TRIGGER_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_0_TX_BUF_TRIGGER_POS    24
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_HTP_TX_TRIGGER_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_HTP_TX_TRIGGER_POS    12
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_HCCA_TX_TRIGGER_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_HCCA_TX_TRIGGER_POS    11
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_BCN_TX_TRIGGER_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_BCN_TX_TRIGGER_POS    10
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_3_TX_TRIGGER_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_3_TX_TRIGGER_POS    9
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_2_TX_TRIGGER_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_2_TX_TRIGGER_POS    8
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_1_TX_TRIGGER_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_1_TX_TRIGGER_POS    7
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_0_TX_TRIGGER_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_0_TX_TRIGGER_POS    6
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_TXOP_COMPLETE_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_TXOP_COMPLETE_POS    5
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_RD_TX_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_RD_TX_TRIGGER_POS    4
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_TX_ABORT_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_TX_ABORT_POS    3

#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_HTP_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_BCN_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_3_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_2_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_1_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_0_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_HTP_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_HCCA_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_BCN_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_3_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_2_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_1_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_AC_0_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_TXOP_COMPLETE_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_RD_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_TX_ABORT_RST    0x0

__INLINE void mac_hw0_mu0_tx_int_event_en_smac_pack(uint8_t htp_tx_buf_trigger, uint8_t bcn_tx_buf_trigger, uint8_t ac_3_tx_buf_trigger, uint8_t ac_2_tx_buf_trigger, uint8_t ac_1_tx_buf_trigger, uint8_t ac_0_tx_buf_trigger, uint8_t htp_tx_trigger, uint8_t hcca_tx_trigger, uint8_t bcn_tx_trigger, uint8_t ac_3_tx_trigger, uint8_t ac_2_tx_trigger, uint8_t ac_1_tx_trigger, uint8_t ac_0_tx_trigger, uint8_t txop_complete, uint8_t rd_tx_trigger, uint8_t tx_abort)
{
	ASSERT_ERR((((uint32_t)htp_tx_buf_trigger << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)bcn_tx_buf_trigger << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_tx_buf_trigger << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_tx_buf_trigger << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_tx_buf_trigger << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_tx_buf_trigger << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_trigger << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)hcca_tx_trigger << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)bcn_tx_trigger << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_tx_trigger << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_tx_trigger << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_tx_trigger << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_tx_trigger << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)txop_complete << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)rd_tx_trigger << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)tx_abort << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR,  ((uint32_t)htp_tx_buf_trigger << 29) |((uint32_t)bcn_tx_buf_trigger << 28) |((uint32_t)ac_3_tx_buf_trigger << 27) |((uint32_t)ac_2_tx_buf_trigger << 26) |((uint32_t)ac_1_tx_buf_trigger << 25) |((uint32_t)ac_0_tx_buf_trigger << 24) |((uint32_t)htp_tx_trigger << 12) |((uint32_t)hcca_tx_trigger << 11) |((uint32_t)bcn_tx_trigger << 10) |((uint32_t)ac_3_tx_trigger << 9) |((uint32_t)ac_2_tx_trigger << 8) |((uint32_t)ac_1_tx_trigger << 7) |((uint32_t)ac_0_tx_trigger << 6) |((uint32_t)txop_complete << 5) |((uint32_t)rd_tx_trigger << 4) |((uint32_t)tx_abort << 3));
}

__INLINE void mac_hw0_mu0_tx_int_event_en_smac_unpack(uint8_t* htp_tx_buf_trigger, uint8_t* bcn_tx_buf_trigger, uint8_t* ac_3_tx_buf_trigger, uint8_t* ac_2_tx_buf_trigger, uint8_t* ac_1_tx_buf_trigger, uint8_t* ac_0_tx_buf_trigger, uint8_t* htp_tx_trigger, uint8_t* hcca_tx_trigger, uint8_t* bcn_tx_trigger, uint8_t* ac_3_tx_trigger, uint8_t* ac_2_tx_trigger, uint8_t* ac_1_tx_trigger, uint8_t* ac_0_tx_trigger, uint8_t* txop_complete, uint8_t* rd_tx_trigger, uint8_t* tx_abort)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);

	*htp_tx_buf_trigger = (localVal & ((uint32_t)0x20000000)) >>  29;
	*bcn_tx_buf_trigger = (localVal & ((uint32_t)0x10000000)) >>  28;
	*ac_3_tx_buf_trigger = (localVal & ((uint32_t)0x08000000)) >>  27;
	*ac_2_tx_buf_trigger = (localVal & ((uint32_t)0x04000000)) >>  26;
	*ac_1_tx_buf_trigger = (localVal & ((uint32_t)0x02000000)) >>  25;
	*ac_0_tx_buf_trigger = (localVal & ((uint32_t)0x01000000)) >>  24;
	*htp_tx_trigger = (localVal & ((uint32_t)0x00001000)) >>  12;
	*hcca_tx_trigger = (localVal & ((uint32_t)0x00000800)) >>  11;
	*bcn_tx_trigger = (localVal & ((uint32_t)0x00000400)) >>  10;
	*ac_3_tx_trigger = (localVal & ((uint32_t)0x00000200)) >>  9;
	*ac_2_tx_trigger = (localVal & ((uint32_t)0x00000100)) >>  8;
	*ac_1_tx_trigger = (localVal & ((uint32_t)0x00000080)) >>  7;
	*ac_0_tx_trigger = (localVal & ((uint32_t)0x00000040)) >>  6;
	*txop_complete = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rd_tx_trigger = (localVal & ((uint32_t)0x00000010)) >>  4;
	*tx_abort = (localVal & ((uint32_t)0x00000008)) >>  3;
}

__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_smac_htp_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_smac_htp_tx_buf_trigger_setf(uint8_t htptxbuftrigger)
{
	ASSERT_ERR((((uint32_t)htptxbuftrigger << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)htptxbuftrigger <<29));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_smac_bcn_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_smac_bcn_tx_buf_trigger_setf(uint8_t bcntxbuftrigger)
{
	ASSERT_ERR((((uint32_t)bcntxbuftrigger << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)bcntxbuftrigger <<28));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_smac_ac_3_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_smac_ac_3_tx_buf_trigger_setf(uint8_t ac3txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac3txbuftrigger << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)ac3txbuftrigger <<27));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_smac_ac_2_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_smac_ac_2_tx_buf_trigger_setf(uint8_t ac2txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac2txbuftrigger << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)ac2txbuftrigger <<26));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_smac_ac_1_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_smac_ac_1_tx_buf_trigger_setf(uint8_t ac1txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac1txbuftrigger << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)ac1txbuftrigger <<25));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_smac_ac_0_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_smac_ac_0_tx_buf_trigger_setf(uint8_t ac0txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac0txbuftrigger << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)ac0txbuftrigger <<24));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_smac_htp_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_smac_htp_tx_trigger_setf(uint8_t htptxtrigger)
{
	ASSERT_ERR((((uint32_t)htptxtrigger << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)htptxtrigger <<12));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_smac_hcca_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_smac_hcca_tx_trigger_setf(uint8_t hccatxtrigger)
{
	ASSERT_ERR((((uint32_t)hccatxtrigger << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)hccatxtrigger <<11));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_smac_bcn_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_smac_bcn_tx_trigger_setf(uint8_t bcntxtrigger)
{
	ASSERT_ERR((((uint32_t)bcntxtrigger << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)bcntxtrigger <<10));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_smac_ac_3_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_smac_ac_3_tx_trigger_setf(uint8_t ac3txtrigger)
{
	ASSERT_ERR((((uint32_t)ac3txtrigger << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)ac3txtrigger <<9));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_smac_ac_2_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_smac_ac_2_tx_trigger_setf(uint8_t ac2txtrigger)
{
	ASSERT_ERR((((uint32_t)ac2txtrigger << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)ac2txtrigger <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_smac_ac_1_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_smac_ac_1_tx_trigger_setf(uint8_t ac1txtrigger)
{
	ASSERT_ERR((((uint32_t)ac1txtrigger << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)ac1txtrigger <<7));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_smac_ac_0_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_smac_ac_0_tx_trigger_setf(uint8_t ac0txtrigger)
{
	ASSERT_ERR((((uint32_t)ac0txtrigger << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)ac0txtrigger <<6));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_smac_txop_complete_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_smac_txop_complete_setf(uint8_t txopcomplete)
{
	ASSERT_ERR((((uint32_t)txopcomplete << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)txopcomplete <<5));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_smac_rd_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_smac_rd_tx_trigger_setf(uint8_t rdtxtrigger)
{
	ASSERT_ERR((((uint32_t)rdtxtrigger << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)rdtxtrigger <<4));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_smac_tx_abort_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_smac_tx_abort_setf(uint8_t txabort)
{
	ASSERT_ERR((((uint32_t)txabort << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)txabort <<3));
}

/**
 * @brief TX_INT_EVENT_STATUS_UMAC register definition
 *  TX interrupt events status UMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    HTP_TX_BUF_TRIGGER        0              
 *    28    BCN_TX_BUF_TRIGGER        0              
 *    27    AC_3_TX_BUF_TRIGGER       0              
 *    26    AC_2_TX_BUF_TRIGGER       0              
 *    25    AC_1_TX_BUF_TRIGGER       0              
 *    24    AC_0_TX_BUF_TRIGGER       0              
 *    12    HTP_TX_TRIGGER            0              
 *    11    HCCA_TX_TRIGGER           0              
 *    10    BCN_TX_TRIGGER            0              
 *    09    AC_3_TX_TRIGGER           0              
 *    08    AC_2_TX_TRIGGER           0              
 *    07    AC_1_TX_TRIGGER           0              
 *    06    AC_0_TX_TRIGGER           0              
 *    05    TXOP_COMPLETE             0              
 *    04    RD_TX_TRIGGER             0              
 *    03    TX_ABORT                  0              
 * </pre>
 */
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008158)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_OFFSET      0x00008158
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_INDEX       0x00002056
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_int_event_status_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_HTP_TX_BUF_TRIGGER_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_HTP_TX_BUF_TRIGGER_POS    29
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_BCN_TX_BUF_TRIGGER_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_BCN_TX_BUF_TRIGGER_POS    28
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_3_TX_BUF_TRIGGER_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_3_TX_BUF_TRIGGER_POS    27
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_2_TX_BUF_TRIGGER_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_2_TX_BUF_TRIGGER_POS    26
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_1_TX_BUF_TRIGGER_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_1_TX_BUF_TRIGGER_POS    25
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_0_TX_BUF_TRIGGER_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_0_TX_BUF_TRIGGER_POS    24
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_HTP_TX_TRIGGER_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_HTP_TX_TRIGGER_POS    12
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_HCCA_TX_TRIGGER_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_HCCA_TX_TRIGGER_POS    11
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_BCN_TX_TRIGGER_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_BCN_TX_TRIGGER_POS    10
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_3_TX_TRIGGER_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_3_TX_TRIGGER_POS    9
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_2_TX_TRIGGER_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_2_TX_TRIGGER_POS    8
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_1_TX_TRIGGER_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_1_TX_TRIGGER_POS    7
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_0_TX_TRIGGER_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_0_TX_TRIGGER_POS    6
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_TXOP_COMPLETE_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_TXOP_COMPLETE_POS    5
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_RD_TX_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_RD_TX_TRIGGER_POS    4
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_TX_ABORT_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_TX_ABORT_POS    3

#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_HTP_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_BCN_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_3_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_2_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_1_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_0_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_HTP_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_HCCA_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_BCN_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_3_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_2_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_1_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_AC_0_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_TXOP_COMPLETE_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_RD_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_TX_ABORT_RST    0x0

__INLINE void mac_hw0_mu0_tx_int_event_status_umac_unpack(uint8_t* htp_tx_buf_trigger, uint8_t* bcn_tx_buf_trigger, uint8_t* ac_3_tx_buf_trigger, uint8_t* ac_2_tx_buf_trigger, uint8_t* ac_1_tx_buf_trigger, uint8_t* ac_0_tx_buf_trigger, uint8_t* htp_tx_trigger, uint8_t* hcca_tx_trigger, uint8_t* bcn_tx_trigger, uint8_t* ac_3_tx_trigger, uint8_t* ac_2_tx_trigger, uint8_t* ac_1_tx_trigger, uint8_t* ac_0_tx_trigger, uint8_t* txop_complete, uint8_t* rd_tx_trigger, uint8_t* tx_abort)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);

	*htp_tx_buf_trigger = (localVal & ((uint32_t)0x20000000)) >>  29;
	*bcn_tx_buf_trigger = (localVal & ((uint32_t)0x10000000)) >>  28;
	*ac_3_tx_buf_trigger = (localVal & ((uint32_t)0x08000000)) >>  27;
	*ac_2_tx_buf_trigger = (localVal & ((uint32_t)0x04000000)) >>  26;
	*ac_1_tx_buf_trigger = (localVal & ((uint32_t)0x02000000)) >>  25;
	*ac_0_tx_buf_trigger = (localVal & ((uint32_t)0x01000000)) >>  24;
	*htp_tx_trigger = (localVal & ((uint32_t)0x00001000)) >>  12;
	*hcca_tx_trigger = (localVal & ((uint32_t)0x00000800)) >>  11;
	*bcn_tx_trigger = (localVal & ((uint32_t)0x00000400)) >>  10;
	*ac_3_tx_trigger = (localVal & ((uint32_t)0x00000200)) >>  9;
	*ac_2_tx_trigger = (localVal & ((uint32_t)0x00000100)) >>  8;
	*ac_1_tx_trigger = (localVal & ((uint32_t)0x00000080)) >>  7;
	*ac_0_tx_trigger = (localVal & ((uint32_t)0x00000040)) >>  6;
	*txop_complete = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rd_tx_trigger = (localVal & ((uint32_t)0x00000010)) >>  4;
	*tx_abort = (localVal & ((uint32_t)0x00000008)) >>  3;
}

__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_umac_htp_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_umac_bcn_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_umac_ac_3_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_umac_ac_2_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_umac_ac_1_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_umac_ac_0_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_umac_htp_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_umac_hcca_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_umac_bcn_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_umac_ac_3_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_umac_ac_2_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_umac_ac_1_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_umac_ac_0_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_umac_txop_complete_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_umac_rd_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_umac_tx_abort_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}

/**
 * @brief TX_INT_EVENT_STATUS_SMAC register definition
 *  TX interrupt events status SMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    HTP_TX_BUF_TRIGGER        0              
 *    28    BCN_TX_BUF_TRIGGER        0              
 *    27    AC_3_TX_BUF_TRIGGER       0              
 *    26    AC_2_TX_BUF_TRIGGER       0              
 *    25    AC_1_TX_BUF_TRIGGER       0              
 *    24    AC_0_TX_BUF_TRIGGER       0              
 *    12    HTP_TX_TRIGGER            0              
 *    11    HCCA_TX_TRIGGER           0              
 *    10    BCN_TX_TRIGGER            0              
 *    09    AC_3_TX_TRIGGER           0              
 *    08    AC_2_TX_TRIGGER           0              
 *    07    AC_1_TX_TRIGGER           0              
 *    06    AC_0_TX_TRIGGER           0              
 *    05    TXOP_COMPLETE             0              
 *    04    RD_TX_TRIGGER             0              
 *    03    TX_ABORT                  0              
 * </pre>
 */
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000815C)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_OFFSET      0x0000815C
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_INDEX       0x00002057
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_int_event_status_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_HTP_TX_BUF_TRIGGER_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_HTP_TX_BUF_TRIGGER_POS    29
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_BCN_TX_BUF_TRIGGER_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_BCN_TX_BUF_TRIGGER_POS    28
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_3_TX_BUF_TRIGGER_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_3_TX_BUF_TRIGGER_POS    27
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_2_TX_BUF_TRIGGER_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_2_TX_BUF_TRIGGER_POS    26
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_1_TX_BUF_TRIGGER_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_1_TX_BUF_TRIGGER_POS    25
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_0_TX_BUF_TRIGGER_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_0_TX_BUF_TRIGGER_POS    24
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_HTP_TX_TRIGGER_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_HTP_TX_TRIGGER_POS    12
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_HCCA_TX_TRIGGER_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_HCCA_TX_TRIGGER_POS    11
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_BCN_TX_TRIGGER_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_BCN_TX_TRIGGER_POS    10
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_3_TX_TRIGGER_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_3_TX_TRIGGER_POS    9
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_2_TX_TRIGGER_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_2_TX_TRIGGER_POS    8
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_1_TX_TRIGGER_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_1_TX_TRIGGER_POS    7
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_0_TX_TRIGGER_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_0_TX_TRIGGER_POS    6
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_TXOP_COMPLETE_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_TXOP_COMPLETE_POS    5
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_RD_TX_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_RD_TX_TRIGGER_POS    4
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_TX_ABORT_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_TX_ABORT_POS    3

#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_HTP_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_BCN_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_3_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_2_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_1_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_0_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_HTP_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_HCCA_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_BCN_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_3_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_2_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_1_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_AC_0_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_TXOP_COMPLETE_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_RD_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_TX_ABORT_RST    0x0

__INLINE void mac_hw0_mu0_tx_int_event_status_smac_unpack(uint8_t* htp_tx_buf_trigger, uint8_t* bcn_tx_buf_trigger, uint8_t* ac_3_tx_buf_trigger, uint8_t* ac_2_tx_buf_trigger, uint8_t* ac_1_tx_buf_trigger, uint8_t* ac_0_tx_buf_trigger, uint8_t* htp_tx_trigger, uint8_t* hcca_tx_trigger, uint8_t* bcn_tx_trigger, uint8_t* ac_3_tx_trigger, uint8_t* ac_2_tx_trigger, uint8_t* ac_1_tx_trigger, uint8_t* ac_0_tx_trigger, uint8_t* txop_complete, uint8_t* rd_tx_trigger, uint8_t* tx_abort)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);

	*htp_tx_buf_trigger = (localVal & ((uint32_t)0x20000000)) >>  29;
	*bcn_tx_buf_trigger = (localVal & ((uint32_t)0x10000000)) >>  28;
	*ac_3_tx_buf_trigger = (localVal & ((uint32_t)0x08000000)) >>  27;
	*ac_2_tx_buf_trigger = (localVal & ((uint32_t)0x04000000)) >>  26;
	*ac_1_tx_buf_trigger = (localVal & ((uint32_t)0x02000000)) >>  25;
	*ac_0_tx_buf_trigger = (localVal & ((uint32_t)0x01000000)) >>  24;
	*htp_tx_trigger = (localVal & ((uint32_t)0x00001000)) >>  12;
	*hcca_tx_trigger = (localVal & ((uint32_t)0x00000800)) >>  11;
	*bcn_tx_trigger = (localVal & ((uint32_t)0x00000400)) >>  10;
	*ac_3_tx_trigger = (localVal & ((uint32_t)0x00000200)) >>  9;
	*ac_2_tx_trigger = (localVal & ((uint32_t)0x00000100)) >>  8;
	*ac_1_tx_trigger = (localVal & ((uint32_t)0x00000080)) >>  7;
	*ac_0_tx_trigger = (localVal & ((uint32_t)0x00000040)) >>  6;
	*txop_complete = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rd_tx_trigger = (localVal & ((uint32_t)0x00000010)) >>  4;
	*tx_abort = (localVal & ((uint32_t)0x00000008)) >>  3;
}

__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_smac_htp_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_smac_bcn_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_smac_ac_3_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_smac_ac_2_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_smac_ac_1_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_smac_ac_0_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_smac_htp_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_smac_hcca_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_smac_bcn_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_smac_ac_3_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_smac_ac_2_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_smac_ac_1_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_smac_ac_0_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_smac_txop_complete_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_smac_rd_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_smac_tx_abort_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}

/**
 * @brief TX_INT_EVENT_FORCE register definition
 *  TX interrupt events force register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    HTP_TX_BUF_TRIGGER        0              
 *    28    BCN_TX_BUF_TRIGGER        0              
 *    27    AC_3_TX_BUF_TRIGGER       0              
 *    26    AC_2_TX_BUF_TRIGGER       0              
 *    25    AC_1_TX_BUF_TRIGGER       0              
 *    24    AC_0_TX_BUF_TRIGGER       0              
 *    12    HTP_TX_TRIGGER            0              
 *    11    HCCA_TX_TRIGGER           0              
 *    10    BCN_TX_TRIGGER            0              
 *    09    AC_3_TX_TRIGGER           0              
 *    08    AC_2_TX_TRIGGER           0              
 *    07    AC_1_TX_TRIGGER           0              
 *    06    AC_0_TX_TRIGGER           0              
 *    05    TXOP_COMPLETE             0              
 *    04    RD_TX_TRIGGER             0              
 *    03    TX_ABORT                  0              
 * </pre>
 */
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008160)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_OFFSET      0x00008160
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_INDEX       0x00002058
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_int_event_force_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
}

__INLINE void mac_hw0_mu0_tx_int_event_force_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_HTP_TX_BUF_TRIGGER_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_HTP_TX_BUF_TRIGGER_POS    29
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_BCN_TX_BUF_TRIGGER_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_BCN_TX_BUF_TRIGGER_POS    28
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_3_TX_BUF_TRIGGER_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_3_TX_BUF_TRIGGER_POS    27
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_2_TX_BUF_TRIGGER_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_2_TX_BUF_TRIGGER_POS    26
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_1_TX_BUF_TRIGGER_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_1_TX_BUF_TRIGGER_POS    25
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_0_TX_BUF_TRIGGER_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_0_TX_BUF_TRIGGER_POS    24
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_HTP_TX_TRIGGER_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_HTP_TX_TRIGGER_POS    12
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_HCCA_TX_TRIGGER_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_HCCA_TX_TRIGGER_POS    11
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_BCN_TX_TRIGGER_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_BCN_TX_TRIGGER_POS    10
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_3_TX_TRIGGER_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_3_TX_TRIGGER_POS    9
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_2_TX_TRIGGER_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_2_TX_TRIGGER_POS    8
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_1_TX_TRIGGER_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_1_TX_TRIGGER_POS    7
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_0_TX_TRIGGER_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_0_TX_TRIGGER_POS    6
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_TXOP_COMPLETE_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_TXOP_COMPLETE_POS    5
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_RD_TX_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_RD_TX_TRIGGER_POS    4
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_TX_ABORT_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_TX_ABORT_POS    3

#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_HTP_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_BCN_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_3_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_2_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_1_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_0_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_HTP_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_HCCA_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_BCN_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_3_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_2_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_1_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_AC_0_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_TXOP_COMPLETE_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_RD_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_FORCE_TX_ABORT_RST    0x0

__INLINE void mac_hw0_mu0_tx_int_event_force_pack(uint8_t htp_tx_buf_trigger, uint8_t bcn_tx_buf_trigger, uint8_t ac_3_tx_buf_trigger, uint8_t ac_2_tx_buf_trigger, uint8_t ac_1_tx_buf_trigger, uint8_t ac_0_tx_buf_trigger, uint8_t htp_tx_trigger, uint8_t hcca_tx_trigger, uint8_t bcn_tx_trigger, uint8_t ac_3_tx_trigger, uint8_t ac_2_tx_trigger, uint8_t ac_1_tx_trigger, uint8_t ac_0_tx_trigger, uint8_t txop_complete, uint8_t rd_tx_trigger, uint8_t tx_abort)
{
	ASSERT_ERR((((uint32_t)htp_tx_buf_trigger << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)bcn_tx_buf_trigger << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_tx_buf_trigger << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_tx_buf_trigger << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_tx_buf_trigger << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_tx_buf_trigger << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_trigger << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)hcca_tx_trigger << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)bcn_tx_trigger << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_tx_trigger << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_tx_trigger << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_tx_trigger << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_tx_trigger << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)txop_complete << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)rd_tx_trigger << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)tx_abort << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR,  ((uint32_t)htp_tx_buf_trigger << 29) |((uint32_t)bcn_tx_buf_trigger << 28) |((uint32_t)ac_3_tx_buf_trigger << 27) |((uint32_t)ac_2_tx_buf_trigger << 26) |((uint32_t)ac_1_tx_buf_trigger << 25) |((uint32_t)ac_0_tx_buf_trigger << 24) |((uint32_t)htp_tx_trigger << 12) |((uint32_t)hcca_tx_trigger << 11) |((uint32_t)bcn_tx_trigger << 10) |((uint32_t)ac_3_tx_trigger << 9) |((uint32_t)ac_2_tx_trigger << 8) |((uint32_t)ac_1_tx_trigger << 7) |((uint32_t)ac_0_tx_trigger << 6) |((uint32_t)txop_complete << 5) |((uint32_t)rd_tx_trigger << 4) |((uint32_t)tx_abort << 3));
}

__INLINE void mac_hw0_mu0_tx_int_event_force_unpack(uint8_t* htp_tx_buf_trigger, uint8_t* bcn_tx_buf_trigger, uint8_t* ac_3_tx_buf_trigger, uint8_t* ac_2_tx_buf_trigger, uint8_t* ac_1_tx_buf_trigger, uint8_t* ac_0_tx_buf_trigger, uint8_t* htp_tx_trigger, uint8_t* hcca_tx_trigger, uint8_t* bcn_tx_trigger, uint8_t* ac_3_tx_trigger, uint8_t* ac_2_tx_trigger, uint8_t* ac_1_tx_trigger, uint8_t* ac_0_tx_trigger, uint8_t* txop_complete, uint8_t* rd_tx_trigger, uint8_t* tx_abort)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);

	*htp_tx_buf_trigger = (localVal & ((uint32_t)0x20000000)) >>  29;
	*bcn_tx_buf_trigger = (localVal & ((uint32_t)0x10000000)) >>  28;
	*ac_3_tx_buf_trigger = (localVal & ((uint32_t)0x08000000)) >>  27;
	*ac_2_tx_buf_trigger = (localVal & ((uint32_t)0x04000000)) >>  26;
	*ac_1_tx_buf_trigger = (localVal & ((uint32_t)0x02000000)) >>  25;
	*ac_0_tx_buf_trigger = (localVal & ((uint32_t)0x01000000)) >>  24;
	*htp_tx_trigger = (localVal & ((uint32_t)0x00001000)) >>  12;
	*hcca_tx_trigger = (localVal & ((uint32_t)0x00000800)) >>  11;
	*bcn_tx_trigger = (localVal & ((uint32_t)0x00000400)) >>  10;
	*ac_3_tx_trigger = (localVal & ((uint32_t)0x00000200)) >>  9;
	*ac_2_tx_trigger = (localVal & ((uint32_t)0x00000100)) >>  8;
	*ac_1_tx_trigger = (localVal & ((uint32_t)0x00000080)) >>  7;
	*ac_0_tx_trigger = (localVal & ((uint32_t)0x00000040)) >>  6;
	*txop_complete = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rd_tx_trigger = (localVal & ((uint32_t)0x00000010)) >>  4;
	*tx_abort = (localVal & ((uint32_t)0x00000008)) >>  3;
}

__INLINE uint8_t mac_hw0_mu0_tx_int_event_force_htp_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_tx_int_event_force_htp_tx_buf_trigger_setf(uint8_t htptxbuftrigger)
{
	ASSERT_ERR((((uint32_t)htptxbuftrigger << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)htptxbuftrigger <<29));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_force_bcn_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void mac_hw0_mu0_tx_int_event_force_bcn_tx_buf_trigger_setf(uint8_t bcntxbuftrigger)
{
	ASSERT_ERR((((uint32_t)bcntxbuftrigger << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)bcntxbuftrigger <<28));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_force_ac_3_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_tx_int_event_force_ac_3_tx_buf_trigger_setf(uint8_t ac3txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac3txbuftrigger << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)ac3txbuftrigger <<27));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_force_ac_2_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_tx_int_event_force_ac_2_tx_buf_trigger_setf(uint8_t ac2txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac2txbuftrigger << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)ac2txbuftrigger <<26));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_force_ac_1_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_tx_int_event_force_ac_1_tx_buf_trigger_setf(uint8_t ac1txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac1txbuftrigger << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)ac1txbuftrigger <<25));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_force_ac_0_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_tx_int_event_force_ac_0_tx_buf_trigger_setf(uint8_t ac0txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac0txbuftrigger << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)ac0txbuftrigger <<24));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_force_htp_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_tx_int_event_force_htp_tx_trigger_setf(uint8_t htptxtrigger)
{
	ASSERT_ERR((((uint32_t)htptxtrigger << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)htptxtrigger <<12));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_force_hcca_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_tx_int_event_force_hcca_tx_trigger_setf(uint8_t hccatxtrigger)
{
	ASSERT_ERR((((uint32_t)hccatxtrigger << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)hccatxtrigger <<11));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_force_bcn_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_tx_int_event_force_bcn_tx_trigger_setf(uint8_t bcntxtrigger)
{
	ASSERT_ERR((((uint32_t)bcntxtrigger << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)bcntxtrigger <<10));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_force_ac_3_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_tx_int_event_force_ac_3_tx_trigger_setf(uint8_t ac3txtrigger)
{
	ASSERT_ERR((((uint32_t)ac3txtrigger << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)ac3txtrigger <<9));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_force_ac_2_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_int_event_force_ac_2_tx_trigger_setf(uint8_t ac2txtrigger)
{
	ASSERT_ERR((((uint32_t)ac2txtrigger << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)ac2txtrigger <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_force_ac_1_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_tx_int_event_force_ac_1_tx_trigger_setf(uint8_t ac1txtrigger)
{
	ASSERT_ERR((((uint32_t)ac1txtrigger << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)ac1txtrigger <<7));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_force_ac_0_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_tx_int_event_force_ac_0_tx_trigger_setf(uint8_t ac0txtrigger)
{
	ASSERT_ERR((((uint32_t)ac0txtrigger << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)ac0txtrigger <<6));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_force_txop_complete_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_tx_int_event_force_txop_complete_setf(uint8_t txopcomplete)
{
	ASSERT_ERR((((uint32_t)txopcomplete << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)txopcomplete <<5));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_force_rd_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_tx_int_event_force_rd_tx_trigger_setf(uint8_t rdtxtrigger)
{
	ASSERT_ERR((((uint32_t)rdtxtrigger << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)rdtxtrigger <<4));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_force_tx_abort_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_tx_int_event_force_tx_abort_setf(uint8_t txabort)
{
	ASSERT_ERR((((uint32_t)txabort << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)txabort <<3));
}

/**
 * @brief TX_INT_MAC_SOURCE_UMAC register definition
 *  Indicates UMAC TX interrupt MAC source register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008164)
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_UMAC_OFFSET      0x00008164
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_UMAC_INDEX       0x00002059
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_int_mac_source_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_INT_MAC_SOURCE_UMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_tx_int_mac_source_umac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_MAC_SOURCE_UMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief TX_INT_MAC_SOURCE_SMAC register definition
 *  Indicates SMAC TX interrupt MAC source register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008168)
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_SMAC_OFFSET      0x00008168
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_SMAC_INDEX       0x0000205A
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_int_mac_source_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_INT_MAC_SOURCE_SMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TX_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_tx_int_mac_source_smac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_MAC_SOURCE_SMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief TX_HTP_HEAD_PTR register definition
 *  Head Pointer of the HTP DMA channel is programmed  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TX_HTP_HEAD_PTR           0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_HTP_HEAD_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000817C)
#define MAC_HW0_MU0_TX_HTP_HEAD_PTR_OFFSET      0x0000817C
#define MAC_HW0_MU0_TX_HTP_HEAD_PTR_INDEX       0x0000205F
#define MAC_HW0_MU0_TX_HTP_HEAD_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_htp_head_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_HTP_HEAD_PTR_ADDR);
}

__INLINE void mac_hw0_mu0_tx_htp_head_ptr_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_HTP_HEAD_PTR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_HTP_HEAD_PTR_TX_HTP_HEAD_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TX_HTP_HEAD_PTR_TX_HTP_HEAD_PTR_LSB    0
#define MAC_HW0_MU0_TX_HTP_HEAD_PTR_TX_HTP_HEAD_PTR_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TX_HTP_HEAD_PTR_TX_HTP_HEAD_PTR_RST    0x0

__INLINE uint32_t mac_hw0_mu0_tx_htp_head_ptr_tx_htp_head_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_HTP_HEAD_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_tx_htp_head_ptr_tx_htp_head_ptr_setf(uint32_t txhtpheadptr)
{
	ASSERT_ERR((((uint32_t)txhtpheadptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_HTP_HEAD_PTR_ADDR, (uint32_t)txhtpheadptr << 0);
}

/**
 * @brief DMA_CNTRL_SET register definition
 *  Contains control set bits for the DMA channels. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    RX_PAYLOAD_NEW_HEAD2      0              
 *    30    RX_HEADER_NEW_HEAD2       0              
 *    29    RX_PAYLOAD_NEW_TAIL2      0              
 *    28    RX_HEADER_NEW_TAIL2       0              
 *    27    RX_PAYLOAD_NEW_HEAD       0              
 *    26    RX_HEADER_NEW_HEAD        0              
 *    25    RX_PAYLOAD_NEW_TAIL       0              
 *    24    RX_HEADER_NEW_TAIL        0              
 *    20    HALT_HTP_AFTER_TXOP       0              
 *    19    HALT_AC_3_AFTER_TXOP      0              
 *    18    HALT_AC_2_AFTER_TXOP      0              
 *    17    HALT_AC_1_AFTER_TXOP      0              
 *    16    HALT_AC_0_AFTER_TXOP      0              
 *    15    HALT_BCN_AFTER_TXOP       0              
 *    13    TX_HTP_NEW_HEAD           0              
 *    12    TX_AC_3_NEW_HEAD          0              
 *    11    TX_AC_2_NEW_HEAD          0              
 *    10    TX_AC_1_NEW_HEAD          0              
 *    09    TX_AC_0_NEW_HEAD          0              
 *    08    TX_BCN_NEW_HEAD           0              
 *    05    TX_HTP_NEW_TAIL           0              
 *    04    TX_AC_3_NEW_TAIL          0              
 *    03    TX_AC_2_NEW_TAIL          0              
 *    02    TX_AC_1_NEW_TAIL          0              
 *    01    TX_AC_0_NEW_TAIL          0              
 *    00    TX_BCN_NEW_TAIL           0              
 * </pre>
 */
#define MAC_HW0_MU0_DMA_CNTRL_SET_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008180)
#define MAC_HW0_MU0_DMA_CNTRL_SET_OFFSET      0x00008180
#define MAC_HW0_MU0_DMA_CNTRL_SET_INDEX       0x00002060
#define MAC_HW0_MU0_DMA_CNTRL_SET_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_dma_cntrl_set_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
}

__INLINE void mac_hw0_mu0_dma_cntrl_set_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_PAYLOAD_NEW_HEAD_2_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_PAYLOAD_NEW_HEAD_2_POS    31
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_HEADER_NEW_HEAD_2_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_HEADER_NEW_HEAD_2_POS    30
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_PAYLOAD_NEW_TAIL_2_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_PAYLOAD_NEW_TAIL_2_POS    29
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_HEADER_NEW_TAIL_2_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_HEADER_NEW_TAIL_2_POS    28
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_PAYLOAD_NEW_HEAD_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_PAYLOAD_NEW_HEAD_POS    27
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_HEADER_NEW_HEAD_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_HEADER_NEW_HEAD_POS    26
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_PAYLOAD_NEW_TAIL_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_PAYLOAD_NEW_TAIL_POS    25
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_HEADER_NEW_TAIL_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_HEADER_NEW_TAIL_POS    24
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_HTP_AFTER_TXOP_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_HTP_AFTER_TXOP_POS    20
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_AC_3_AFTER_TXOP_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_AC_3_AFTER_TXOP_POS    19
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_AC_2_AFTER_TXOP_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_AC_2_AFTER_TXOP_POS    18
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_AC_1_AFTER_TXOP_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_AC_1_AFTER_TXOP_POS    17
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_AC_0_AFTER_TXOP_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_AC_0_AFTER_TXOP_POS    16
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_BCN_AFTER_TXOP_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_BCN_AFTER_TXOP_POS    15
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_HTP_NEW_HEAD_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_HTP_NEW_HEAD_POS    13
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_3_NEW_HEAD_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_3_NEW_HEAD_POS    12
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_2_NEW_HEAD_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_2_NEW_HEAD_POS    11
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_1_NEW_HEAD_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_1_NEW_HEAD_POS    10
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_0_NEW_HEAD_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_0_NEW_HEAD_POS    9
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_BCN_NEW_HEAD_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_BCN_NEW_HEAD_POS    8
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_HTP_NEW_TAIL_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_HTP_NEW_TAIL_POS    5
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_3_NEW_TAIL_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_3_NEW_TAIL_POS    4
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_2_NEW_TAIL_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_2_NEW_TAIL_POS    3
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_1_NEW_TAIL_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_1_NEW_TAIL_POS    2
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_0_NEW_TAIL_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_0_NEW_TAIL_POS    1
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_BCN_NEW_TAIL_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_BCN_NEW_TAIL_POS    0

#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_PAYLOAD_NEW_HEAD_2_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_HEADER_NEW_HEAD_2_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_PAYLOAD_NEW_TAIL_2_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_HEADER_NEW_TAIL_2_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_PAYLOAD_NEW_HEAD_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_HEADER_NEW_HEAD_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_PAYLOAD_NEW_TAIL_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_RX_HEADER_NEW_TAIL_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_HTP_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_AC_3_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_AC_2_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_AC_1_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_AC_0_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_HALT_BCN_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_HTP_NEW_HEAD_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_3_NEW_HEAD_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_2_NEW_HEAD_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_1_NEW_HEAD_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_0_NEW_HEAD_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_BCN_NEW_HEAD_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_HTP_NEW_TAIL_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_3_NEW_TAIL_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_2_NEW_TAIL_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_1_NEW_TAIL_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_AC_0_NEW_TAIL_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_SET_TX_BCN_NEW_TAIL_RST    0x0

__INLINE void mac_hw0_mu0_dma_cntrl_set_pack(uint8_t rx_payload_new_head2, uint8_t rx_header_new_head2, uint8_t rx_payload_new_tail2, uint8_t rx_header_new_tail2, uint8_t rx_payload_new_head, uint8_t rx_header_new_head, uint8_t rx_payload_new_tail, uint8_t rx_header_new_tail, uint8_t halt_htp_after_txop, uint8_t halt_ac_3_after_txop, uint8_t halt_ac_2_after_txop, uint8_t halt_ac_1_after_txop, uint8_t halt_ac_0_after_txop, uint8_t halt_bcn_after_txop, uint8_t tx_htp_new_head, uint8_t tx_ac_3_new_head, uint8_t tx_ac_2_new_head, uint8_t tx_ac_1_new_head, uint8_t tx_ac_0_new_head, uint8_t tx_bcn_new_head, uint8_t tx_htp_new_tail, uint8_t tx_ac_3_new_tail, uint8_t tx_ac_2_new_tail, uint8_t tx_ac_1_new_tail, uint8_t tx_ac_0_new_tail, uint8_t tx_bcn_new_tail)
{
	ASSERT_ERR((((uint32_t)rx_payload_new_head2 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_new_head2 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_new_tail2 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_new_tail2 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_new_head << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_new_head << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_new_tail << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_new_tail << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)halt_htp_after_txop << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)halt_ac_3_after_txop << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)halt_ac_2_after_txop << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)halt_ac_1_after_txop << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)halt_ac_0_after_txop << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)halt_bcn_after_txop << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)tx_htp_new_head << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac_3_new_head << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac_2_new_head << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac_1_new_head << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac_0_new_head << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)tx_bcn_new_head << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)tx_htp_new_tail << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac_3_new_tail << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac_2_new_tail << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac_1_new_tail << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac_0_new_tail << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)tx_bcn_new_tail << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR,  ((uint32_t)rx_payload_new_head2 << 31) |((uint32_t)rx_header_new_head2 << 30) |((uint32_t)rx_payload_new_tail2 << 29) |((uint32_t)rx_header_new_tail2 << 28) |((uint32_t)rx_payload_new_head << 27) |((uint32_t)rx_header_new_head << 26) |((uint32_t)rx_payload_new_tail << 25) |((uint32_t)rx_header_new_tail << 24) |((uint32_t)halt_htp_after_txop << 20) |((uint32_t)halt_ac_3_after_txop << 19) |((uint32_t)halt_ac_2_after_txop << 18) |((uint32_t)halt_ac_1_after_txop << 17) |((uint32_t)halt_ac_0_after_txop << 16) |((uint32_t)halt_bcn_after_txop << 15) |((uint32_t)tx_htp_new_head << 13) |((uint32_t)tx_ac_3_new_head << 12) |((uint32_t)tx_ac_2_new_head << 11) |((uint32_t)tx_ac_1_new_head << 10) |((uint32_t)tx_ac_0_new_head << 9) |((uint32_t)tx_bcn_new_head << 8) |((uint32_t)tx_htp_new_tail << 5) |((uint32_t)tx_ac_3_new_tail << 4) |((uint32_t)tx_ac_2_new_tail << 3) |((uint32_t)tx_ac_1_new_tail << 2) |((uint32_t)tx_ac_0_new_tail << 1) |((uint32_t)tx_bcn_new_tail << 0));
}

__INLINE void mac_hw0_mu0_dma_cntrl_set_unpack(uint8_t* rx_payload_new_head2, uint8_t* rx_header_new_head2, uint8_t* rx_payload_new_tail2, uint8_t* rx_header_new_tail2, uint8_t* rx_payload_new_head, uint8_t* rx_header_new_head, uint8_t* rx_payload_new_tail, uint8_t* rx_header_new_tail, uint8_t* halt_htp_after_txop, uint8_t* halt_ac_3_after_txop, uint8_t* halt_ac_2_after_txop, uint8_t* halt_ac_1_after_txop, uint8_t* halt_ac_0_after_txop, uint8_t* halt_bcn_after_txop, uint8_t* tx_htp_new_head, uint8_t* tx_ac_3_new_head, uint8_t* tx_ac_2_new_head, uint8_t* tx_ac_1_new_head, uint8_t* tx_ac_0_new_head, uint8_t* tx_bcn_new_head, uint8_t* tx_htp_new_tail, uint8_t* tx_ac_3_new_tail, uint8_t* tx_ac_2_new_tail, uint8_t* tx_ac_1_new_tail, uint8_t* tx_ac_0_new_tail, uint8_t* tx_bcn_new_tail)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);

	*rx_payload_new_head2 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*rx_header_new_head2 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*rx_payload_new_tail2 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*rx_header_new_tail2 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*rx_payload_new_head = (localVal & ((uint32_t)0x08000000)) >>  27;
	*rx_header_new_head = (localVal & ((uint32_t)0x04000000)) >>  26;
	*rx_payload_new_tail = (localVal & ((uint32_t)0x02000000)) >>  25;
	*rx_header_new_tail = (localVal & ((uint32_t)0x01000000)) >>  24;
	*halt_htp_after_txop = (localVal & ((uint32_t)0x00100000)) >>  20;
	*halt_ac_3_after_txop = (localVal & ((uint32_t)0x00080000)) >>  19;
	*halt_ac_2_after_txop = (localVal & ((uint32_t)0x00040000)) >>  18;
	*halt_ac_1_after_txop = (localVal & ((uint32_t)0x00020000)) >>  17;
	*halt_ac_0_after_txop = (localVal & ((uint32_t)0x00010000)) >>  16;
	*halt_bcn_after_txop = (localVal & ((uint32_t)0x00008000)) >>  15;
	*tx_htp_new_head = (localVal & ((uint32_t)0x00002000)) >>  13;
	*tx_ac_3_new_head = (localVal & ((uint32_t)0x00001000)) >>  12;
	*tx_ac_2_new_head = (localVal & ((uint32_t)0x00000800)) >>  11;
	*tx_ac_1_new_head = (localVal & ((uint32_t)0x00000400)) >>  10;
	*tx_ac_0_new_head = (localVal & ((uint32_t)0x00000200)) >>  9;
	*tx_bcn_new_head = (localVal & ((uint32_t)0x00000100)) >>  8;
	*tx_htp_new_tail = (localVal & ((uint32_t)0x00000020)) >>  5;
	*tx_ac_3_new_tail = (localVal & ((uint32_t)0x00000010)) >>  4;
	*tx_ac_2_new_tail = (localVal & ((uint32_t)0x00000008)) >>  3;
	*tx_ac_1_new_tail = (localVal & ((uint32_t)0x00000004)) >>  2;
	*tx_ac_0_new_tail = (localVal & ((uint32_t)0x00000002)) >>  1;
	*tx_bcn_new_tail = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_rx_payload_new_head_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_rx_payload_new_head_2_setf(uint8_t rxpayloadnewhead2)
{
	ASSERT_ERR((((uint32_t)rxpayloadnewhead2 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)rxpayloadnewhead2 <<31));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_rx_header_new_head_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_rx_header_new_head_2_setf(uint8_t rxheadernewhead2)
{
	ASSERT_ERR((((uint32_t)rxheadernewhead2 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)rxheadernewhead2 <<30));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_rx_payload_new_tail_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_rx_payload_new_tail_2_setf(uint8_t rxpayloadnewtail2)
{
	ASSERT_ERR((((uint32_t)rxpayloadnewtail2 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)rxpayloadnewtail2 <<29));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_rx_header_new_tail_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_rx_header_new_tail_2_setf(uint8_t rxheadernewtail2)
{
	ASSERT_ERR((((uint32_t)rxheadernewtail2 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)rxheadernewtail2 <<28));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_rx_payload_new_head_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_rx_payload_new_head_setf(uint8_t rxpayloadnewhead)
{
	ASSERT_ERR((((uint32_t)rxpayloadnewhead << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)rxpayloadnewhead <<27));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_rx_header_new_head_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_rx_header_new_head_setf(uint8_t rxheadernewhead)
{
	ASSERT_ERR((((uint32_t)rxheadernewhead << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)rxheadernewhead <<26));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_rx_payload_new_tail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_rx_payload_new_tail_setf(uint8_t rxpayloadnewtail)
{
	ASSERT_ERR((((uint32_t)rxpayloadnewtail << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)rxpayloadnewtail <<25));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_rx_header_new_tail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_rx_header_new_tail_setf(uint8_t rxheadernewtail)
{
	ASSERT_ERR((((uint32_t)rxheadernewtail << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)rxheadernewtail <<24));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_halt_htp_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_halt_htp_after_txop_setf(uint8_t halthtpaftertxop)
{
	ASSERT_ERR((((uint32_t)halthtpaftertxop << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)halthtpaftertxop <<20));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_halt_ac_3_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_halt_ac_3_after_txop_setf(uint8_t haltac3aftertxop)
{
	ASSERT_ERR((((uint32_t)haltac3aftertxop << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)haltac3aftertxop <<19));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_halt_ac_2_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_halt_ac_2_after_txop_setf(uint8_t haltac2aftertxop)
{
	ASSERT_ERR((((uint32_t)haltac2aftertxop << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)haltac2aftertxop <<18));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_halt_ac_1_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_halt_ac_1_after_txop_setf(uint8_t haltac1aftertxop)
{
	ASSERT_ERR((((uint32_t)haltac1aftertxop << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)haltac1aftertxop <<17));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_halt_ac_0_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_halt_ac_0_after_txop_setf(uint8_t haltac0aftertxop)
{
	ASSERT_ERR((((uint32_t)haltac0aftertxop << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)haltac0aftertxop <<16));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_halt_bcn_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_halt_bcn_after_txop_setf(uint8_t haltbcnaftertxop)
{
	ASSERT_ERR((((uint32_t)haltbcnaftertxop << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)haltbcnaftertxop <<15));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_tx_htp_new_head_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_tx_htp_new_head_setf(uint8_t txhtpnewhead)
{
	ASSERT_ERR((((uint32_t)txhtpnewhead << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)txhtpnewhead <<13));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_tx_ac_3_new_head_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_tx_ac_3_new_head_setf(uint8_t txac3newhead)
{
	ASSERT_ERR((((uint32_t)txac3newhead << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)txac3newhead <<12));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_tx_ac_2_new_head_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_tx_ac_2_new_head_setf(uint8_t txac2newhead)
{
	ASSERT_ERR((((uint32_t)txac2newhead << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)txac2newhead <<11));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_tx_ac_1_new_head_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_tx_ac_1_new_head_setf(uint8_t txac1newhead)
{
	ASSERT_ERR((((uint32_t)txac1newhead << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)txac1newhead <<10));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_tx_ac_0_new_head_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_tx_ac_0_new_head_setf(uint8_t txac0newhead)
{
	ASSERT_ERR((((uint32_t)txac0newhead << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)txac0newhead <<9));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_tx_bcn_new_head_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_tx_bcn_new_head_setf(uint8_t txbcnnewhead)
{
	ASSERT_ERR((((uint32_t)txbcnnewhead << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)txbcnnewhead <<8));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_tx_htp_new_tail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_tx_htp_new_tail_setf(uint8_t txhtpnewtail)
{
	ASSERT_ERR((((uint32_t)txhtpnewtail << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)txhtpnewtail <<5));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_tx_ac_3_new_tail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_tx_ac_3_new_tail_setf(uint8_t txac3newtail)
{
	ASSERT_ERR((((uint32_t)txac3newtail << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)txac3newtail <<4));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_tx_ac_2_new_tail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_tx_ac_2_new_tail_setf(uint8_t txac2newtail)
{
	ASSERT_ERR((((uint32_t)txac2newtail << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)txac2newtail <<3));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_tx_ac_1_new_tail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_tx_ac_1_new_tail_setf(uint8_t txac1newtail)
{
	ASSERT_ERR((((uint32_t)txac1newtail << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)txac1newtail <<2));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_tx_ac_0_new_tail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_tx_ac_0_new_tail_setf(uint8_t txac0newtail)
{
	ASSERT_ERR((((uint32_t)txac0newtail << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)txac0newtail <<1));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_set_tx_bcn_new_tail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_dma_cntrl_set_tx_bcn_new_tail_setf(uint8_t txbcnnewtail)
{
	ASSERT_ERR((((uint32_t)txbcnnewtail << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_SET_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)txbcnnewtail <<0));
}

/**
 * @brief DMA_CNTRL_CLEAR register definition
 *  Contains control clear bits for the DMA channels. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    RX_PAYLOAD_NEW_HEAD2      0              
 *    30    RX_HEADER_NEW_HEAD2       0              
 *    29    RX_PAYLOAD_NEW_TAIL2      0              
 *    28    RX_HEADER_NEW_TAIL2       0              
 *    27    RX_PAYLOAD_NEW_HEAD       0              
 *    26    RX_HEADER_NEW_HEAD        0              
 *    25    RX_PAYLOAD_NEW_TAIL       0              
 *    24    RX_HEADER_NEW_TAIL        0              
 *    20    HALT_HTP_AFTER_TXOP       0              
 *    19    HALT_AC_3_AFTER_TXOP      0              
 *    18    HALT_AC_2_AFTER_TXOP      0              
 *    17    HALT_AC_1_AFTER_TXOP      0              
 *    16    HALT_AC_0_AFTER_TXOP      0              
 *    15    HALT_BCN_AFTER_TXOP       0              
 *    13    TX_HTP_NEW_HEAD           0              
 *    12    TX_AC_3_NEW_HEAD          0              
 *    11    TX_AC_2_NEW_HEAD          0              
 *    10    TX_AC_1_NEW_HEAD          0              
 *    09    TX_AC_0_NEW_HEAD          0              
 *    08    TX_BCN_NEW_HEAD           0              
 *    05    TX_HTP_NEW_TAIL           0              
 *    04    TX_AC_3_NEW_TAIL          0              
 *    03    TX_AC_2_NEW_TAIL          0              
 *    02    TX_AC_1_NEW_TAIL          0              
 *    01    TX_AC_0_NEW_TAIL          0              
 *    00    TX_BCN_NEW_TAIL           0              
 * </pre>
 */
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008184)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_OFFSET      0x00008184
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_INDEX       0x00002061
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_dma_cntrl_clear_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
}

__INLINE void mac_hw0_mu0_dma_cntrl_clear_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_PAYLOAD_NEW_HEAD_2_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_PAYLOAD_NEW_HEAD_2_POS    31
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_HEADER_NEW_HEAD_2_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_HEADER_NEW_HEAD_2_POS    30
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_PAYLOAD_NEW_TAIL_2_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_PAYLOAD_NEW_TAIL_2_POS    29
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_HEADER_NEW_TAIL_2_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_HEADER_NEW_TAIL_2_POS    28
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_PAYLOAD_NEW_HEAD_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_PAYLOAD_NEW_HEAD_POS    27
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_HEADER_NEW_HEAD_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_HEADER_NEW_HEAD_POS    26
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_PAYLOAD_NEW_TAIL_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_PAYLOAD_NEW_TAIL_POS    25
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_HEADER_NEW_TAIL_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_HEADER_NEW_TAIL_POS    24
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_HTP_AFTER_TXOP_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_HTP_AFTER_TXOP_POS    20
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_AC_3_AFTER_TXOP_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_AC_3_AFTER_TXOP_POS    19
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_AC_2_AFTER_TXOP_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_AC_2_AFTER_TXOP_POS    18
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_AC_1_AFTER_TXOP_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_AC_1_AFTER_TXOP_POS    17
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_AC_0_AFTER_TXOP_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_AC_0_AFTER_TXOP_POS    16
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_BCN_AFTER_TXOP_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_BCN_AFTER_TXOP_POS    15
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_HTP_NEW_HEAD_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_HTP_NEW_HEAD_POS    13
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_3_NEW_HEAD_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_3_NEW_HEAD_POS    12
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_2_NEW_HEAD_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_2_NEW_HEAD_POS    11
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_1_NEW_HEAD_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_1_NEW_HEAD_POS    10
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_0_NEW_HEAD_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_0_NEW_HEAD_POS    9
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_BCN_NEW_HEAD_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_BCN_NEW_HEAD_POS    8
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_HTP_NEW_TAIL_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_HTP_NEW_TAIL_POS    5
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_3_NEW_TAIL_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_3_NEW_TAIL_POS    4
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_2_NEW_TAIL_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_2_NEW_TAIL_POS    3
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_1_NEW_TAIL_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_1_NEW_TAIL_POS    2
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_0_NEW_TAIL_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_0_NEW_TAIL_POS    1
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_BCN_NEW_TAIL_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_BCN_NEW_TAIL_POS    0

#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_PAYLOAD_NEW_HEAD_2_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_HEADER_NEW_HEAD_2_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_PAYLOAD_NEW_TAIL_2_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_HEADER_NEW_TAIL_2_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_PAYLOAD_NEW_HEAD_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_HEADER_NEW_HEAD_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_PAYLOAD_NEW_TAIL_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_RX_HEADER_NEW_TAIL_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_HTP_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_AC_3_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_AC_2_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_AC_1_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_AC_0_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_HALT_BCN_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_HTP_NEW_HEAD_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_3_NEW_HEAD_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_2_NEW_HEAD_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_1_NEW_HEAD_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_0_NEW_HEAD_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_BCN_NEW_HEAD_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_HTP_NEW_TAIL_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_3_NEW_TAIL_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_2_NEW_TAIL_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_1_NEW_TAIL_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_AC_0_NEW_TAIL_RST    0x0
#define MAC_HW0_MU0_DMA_CNTRL_CLEAR_TX_BCN_NEW_TAIL_RST    0x0

__INLINE void mac_hw0_mu0_dma_cntrl_clear_pack(uint8_t rx_payload_new_head2, uint8_t rx_header_new_head2, uint8_t rx_payload_new_tail2, uint8_t rx_header_new_tail2, uint8_t rx_payload_new_head, uint8_t rx_header_new_head, uint8_t rx_payload_new_tail, uint8_t rx_header_new_tail, uint8_t halt_htp_after_txop, uint8_t halt_ac_3_after_txop, uint8_t halt_ac_2_after_txop, uint8_t halt_ac_1_after_txop, uint8_t halt_ac_0_after_txop, uint8_t halt_bcn_after_txop, uint8_t tx_htp_new_head, uint8_t tx_ac_3_new_head, uint8_t tx_ac_2_new_head, uint8_t tx_ac_1_new_head, uint8_t tx_ac_0_new_head, uint8_t tx_bcn_new_head, uint8_t tx_htp_new_tail, uint8_t tx_ac_3_new_tail, uint8_t tx_ac_2_new_tail, uint8_t tx_ac_1_new_tail, uint8_t tx_ac_0_new_tail, uint8_t tx_bcn_new_tail)
{
	ASSERT_ERR((((uint32_t)rx_payload_new_head2 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_new_head2 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_new_tail2 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_new_tail2 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_new_head << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_new_head << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_new_tail << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_new_tail << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)halt_htp_after_txop << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)halt_ac_3_after_txop << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)halt_ac_2_after_txop << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)halt_ac_1_after_txop << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)halt_ac_0_after_txop << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)halt_bcn_after_txop << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)tx_htp_new_head << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac_3_new_head << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac_2_new_head << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac_1_new_head << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac_0_new_head << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)tx_bcn_new_head << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)tx_htp_new_tail << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac_3_new_tail << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac_2_new_tail << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac_1_new_tail << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac_0_new_tail << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)tx_bcn_new_tail << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR,  ((uint32_t)rx_payload_new_head2 << 31) |((uint32_t)rx_header_new_head2 << 30) |((uint32_t)rx_payload_new_tail2 << 29) |((uint32_t)rx_header_new_tail2 << 28) |((uint32_t)rx_payload_new_head << 27) |((uint32_t)rx_header_new_head << 26) |((uint32_t)rx_payload_new_tail << 25) |((uint32_t)rx_header_new_tail << 24) |((uint32_t)halt_htp_after_txop << 20) |((uint32_t)halt_ac_3_after_txop << 19) |((uint32_t)halt_ac_2_after_txop << 18) |((uint32_t)halt_ac_1_after_txop << 17) |((uint32_t)halt_ac_0_after_txop << 16) |((uint32_t)halt_bcn_after_txop << 15) |((uint32_t)tx_htp_new_head << 13) |((uint32_t)tx_ac_3_new_head << 12) |((uint32_t)tx_ac_2_new_head << 11) |((uint32_t)tx_ac_1_new_head << 10) |((uint32_t)tx_ac_0_new_head << 9) |((uint32_t)tx_bcn_new_head << 8) |((uint32_t)tx_htp_new_tail << 5) |((uint32_t)tx_ac_3_new_tail << 4) |((uint32_t)tx_ac_2_new_tail << 3) |((uint32_t)tx_ac_1_new_tail << 2) |((uint32_t)tx_ac_0_new_tail << 1) |((uint32_t)tx_bcn_new_tail << 0));
}

__INLINE void mac_hw0_mu0_dma_cntrl_clear_unpack(uint8_t* rx_payload_new_head2, uint8_t* rx_header_new_head2, uint8_t* rx_payload_new_tail2, uint8_t* rx_header_new_tail2, uint8_t* rx_payload_new_head, uint8_t* rx_header_new_head, uint8_t* rx_payload_new_tail, uint8_t* rx_header_new_tail, uint8_t* halt_htp_after_txop, uint8_t* halt_ac_3_after_txop, uint8_t* halt_ac_2_after_txop, uint8_t* halt_ac_1_after_txop, uint8_t* halt_ac_0_after_txop, uint8_t* halt_bcn_after_txop, uint8_t* tx_htp_new_head, uint8_t* tx_ac_3_new_head, uint8_t* tx_ac_2_new_head, uint8_t* tx_ac_1_new_head, uint8_t* tx_ac_0_new_head, uint8_t* tx_bcn_new_head, uint8_t* tx_htp_new_tail, uint8_t* tx_ac_3_new_tail, uint8_t* tx_ac_2_new_tail, uint8_t* tx_ac_1_new_tail, uint8_t* tx_ac_0_new_tail, uint8_t* tx_bcn_new_tail)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);

	*rx_payload_new_head2 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*rx_header_new_head2 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*rx_payload_new_tail2 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*rx_header_new_tail2 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*rx_payload_new_head = (localVal & ((uint32_t)0x08000000)) >>  27;
	*rx_header_new_head = (localVal & ((uint32_t)0x04000000)) >>  26;
	*rx_payload_new_tail = (localVal & ((uint32_t)0x02000000)) >>  25;
	*rx_header_new_tail = (localVal & ((uint32_t)0x01000000)) >>  24;
	*halt_htp_after_txop = (localVal & ((uint32_t)0x00100000)) >>  20;
	*halt_ac_3_after_txop = (localVal & ((uint32_t)0x00080000)) >>  19;
	*halt_ac_2_after_txop = (localVal & ((uint32_t)0x00040000)) >>  18;
	*halt_ac_1_after_txop = (localVal & ((uint32_t)0x00020000)) >>  17;
	*halt_ac_0_after_txop = (localVal & ((uint32_t)0x00010000)) >>  16;
	*halt_bcn_after_txop = (localVal & ((uint32_t)0x00008000)) >>  15;
	*tx_htp_new_head = (localVal & ((uint32_t)0x00002000)) >>  13;
	*tx_ac_3_new_head = (localVal & ((uint32_t)0x00001000)) >>  12;
	*tx_ac_2_new_head = (localVal & ((uint32_t)0x00000800)) >>  11;
	*tx_ac_1_new_head = (localVal & ((uint32_t)0x00000400)) >>  10;
	*tx_ac_0_new_head = (localVal & ((uint32_t)0x00000200)) >>  9;
	*tx_bcn_new_head = (localVal & ((uint32_t)0x00000100)) >>  8;
	*tx_htp_new_tail = (localVal & ((uint32_t)0x00000020)) >>  5;
	*tx_ac_3_new_tail = (localVal & ((uint32_t)0x00000010)) >>  4;
	*tx_ac_2_new_tail = (localVal & ((uint32_t)0x00000008)) >>  3;
	*tx_ac_1_new_tail = (localVal & ((uint32_t)0x00000004)) >>  2;
	*tx_ac_0_new_tail = (localVal & ((uint32_t)0x00000002)) >>  1;
	*tx_bcn_new_tail = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_rx_payload_new_head_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_rx_payload_new_head_2_setf(uint8_t rxpayloadnewhead2)
{
	ASSERT_ERR((((uint32_t)rxpayloadnewhead2 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)rxpayloadnewhead2 <<31));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_rx_header_new_head_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_rx_header_new_head_2_setf(uint8_t rxheadernewhead2)
{
	ASSERT_ERR((((uint32_t)rxheadernewhead2 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)rxheadernewhead2 <<30));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_rx_payload_new_tail_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_rx_payload_new_tail_2_setf(uint8_t rxpayloadnewtail2)
{
	ASSERT_ERR((((uint32_t)rxpayloadnewtail2 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)rxpayloadnewtail2 <<29));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_rx_header_new_tail_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_rx_header_new_tail_2_setf(uint8_t rxheadernewtail2)
{
	ASSERT_ERR((((uint32_t)rxheadernewtail2 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)rxheadernewtail2 <<28));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_rx_payload_new_head_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_rx_payload_new_head_setf(uint8_t rxpayloadnewhead)
{
	ASSERT_ERR((((uint32_t)rxpayloadnewhead << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)rxpayloadnewhead <<27));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_rx_header_new_head_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_rx_header_new_head_setf(uint8_t rxheadernewhead)
{
	ASSERT_ERR((((uint32_t)rxheadernewhead << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)rxheadernewhead <<26));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_rx_payload_new_tail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_rx_payload_new_tail_setf(uint8_t rxpayloadnewtail)
{
	ASSERT_ERR((((uint32_t)rxpayloadnewtail << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)rxpayloadnewtail <<25));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_rx_header_new_tail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_rx_header_new_tail_setf(uint8_t rxheadernewtail)
{
	ASSERT_ERR((((uint32_t)rxheadernewtail << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)rxheadernewtail <<24));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_halt_htp_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_halt_htp_after_txop_setf(uint8_t halthtpaftertxop)
{
	ASSERT_ERR((((uint32_t)halthtpaftertxop << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)halthtpaftertxop <<20));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_halt_ac_3_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_halt_ac_3_after_txop_setf(uint8_t haltac3aftertxop)
{
	ASSERT_ERR((((uint32_t)haltac3aftertxop << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)haltac3aftertxop <<19));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_halt_ac_2_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_halt_ac_2_after_txop_setf(uint8_t haltac2aftertxop)
{
	ASSERT_ERR((((uint32_t)haltac2aftertxop << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)haltac2aftertxop <<18));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_halt_ac_1_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_halt_ac_1_after_txop_setf(uint8_t haltac1aftertxop)
{
	ASSERT_ERR((((uint32_t)haltac1aftertxop << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)haltac1aftertxop <<17));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_halt_ac_0_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_halt_ac_0_after_txop_setf(uint8_t haltac0aftertxop)
{
	ASSERT_ERR((((uint32_t)haltac0aftertxop << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)haltac0aftertxop <<16));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_halt_bcn_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_halt_bcn_after_txop_setf(uint8_t haltbcnaftertxop)
{
	ASSERT_ERR((((uint32_t)haltbcnaftertxop << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)haltbcnaftertxop <<15));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_tx_htp_new_head_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_tx_htp_new_head_setf(uint8_t txhtpnewhead)
{
	ASSERT_ERR((((uint32_t)txhtpnewhead << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)txhtpnewhead <<13));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_tx_ac_3_new_head_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_tx_ac_3_new_head_setf(uint8_t txac3newhead)
{
	ASSERT_ERR((((uint32_t)txac3newhead << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)txac3newhead <<12));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_tx_ac_2_new_head_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_tx_ac_2_new_head_setf(uint8_t txac2newhead)
{
	ASSERT_ERR((((uint32_t)txac2newhead << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)txac2newhead <<11));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_tx_ac_1_new_head_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_tx_ac_1_new_head_setf(uint8_t txac1newhead)
{
	ASSERT_ERR((((uint32_t)txac1newhead << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)txac1newhead <<10));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_tx_ac_0_new_head_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_tx_ac_0_new_head_setf(uint8_t txac0newhead)
{
	ASSERT_ERR((((uint32_t)txac0newhead << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)txac0newhead <<9));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_tx_bcn_new_head_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_tx_bcn_new_head_setf(uint8_t txbcnnewhead)
{
	ASSERT_ERR((((uint32_t)txbcnnewhead << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)txbcnnewhead <<8));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_tx_htp_new_tail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_tx_htp_new_tail_setf(uint8_t txhtpnewtail)
{
	ASSERT_ERR((((uint32_t)txhtpnewtail << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)txhtpnewtail <<5));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_tx_ac_3_new_tail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_tx_ac_3_new_tail_setf(uint8_t txac3newtail)
{
	ASSERT_ERR((((uint32_t)txac3newtail << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)txac3newtail <<4));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_tx_ac_2_new_tail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_tx_ac_2_new_tail_setf(uint8_t txac2newtail)
{
	ASSERT_ERR((((uint32_t)txac2newtail << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)txac2newtail <<3));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_tx_ac_1_new_tail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_tx_ac_1_new_tail_setf(uint8_t txac1newtail)
{
	ASSERT_ERR((((uint32_t)txac1newtail << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)txac1newtail <<2));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_tx_ac_0_new_tail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_tx_ac_0_new_tail_setf(uint8_t txac0newtail)
{
	ASSERT_ERR((((uint32_t)txac0newtail << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)txac0newtail <<1));
}
__INLINE uint8_t mac_hw0_mu0_dma_cntrl_clear_tx_bcn_new_tail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_dma_cntrl_clear_tx_bcn_new_tail_setf(uint8_t txbcnnewtail)
{
	ASSERT_ERR((((uint32_t)txbcnnewtail << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_CNTRL_CLEAR_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)txbcnnewtail <<0));
}

/**
 * @brief DMA_STATUS_1 register definition
 *  Indicates HW DMA status. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:30 RX_PAYLOAD2_STATE         0x0
 *    29:28 RX_PAYLOAD_STATE          0x0
 *    27:26 RX_HEADER2_STATE          0x0
 *    25:24 RX_HEADER_STATE           0x0
 *    21:20 TX_HTP_STATE              0x0
 *    17:16 TX_AC_3_STATE             0x0
 *    13:12 TX_AC_2_STATE             0x0
 *    09:08 TX_AC_1_STATE             0x0
 *    05:04 TX_AC_0_STATE             0x0
 *    01:00 TX_BCN_STATE              0x0
 * </pre>
 */
#define MAC_HW0_MU0_DMA_STATUS_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008188)
#define MAC_HW0_MU0_DMA_STATUS_1_OFFSET      0x00008188
#define MAC_HW0_MU0_DMA_STATUS_1_INDEX       0x00002062
#define MAC_HW0_MU0_DMA_STATUS_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_dma_status_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_1_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DMA_STATUS_1_RX_PAYLOAD_2_STATE_MASK    ((uint32_t)0xC0000000)
#define MAC_HW0_MU0_DMA_STATUS_1_RX_PAYLOAD_2_STATE_LSB    30
#define MAC_HW0_MU0_DMA_STATUS_1_RX_PAYLOAD_2_STATE_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_STATUS_1_RX_PAYLOAD_STATE_MASK    ((uint32_t)0x30000000)
#define MAC_HW0_MU0_DMA_STATUS_1_RX_PAYLOAD_STATE_LSB    28
#define MAC_HW0_MU0_DMA_STATUS_1_RX_PAYLOAD_STATE_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_STATUS_1_RX_HEADER_2_STATE_MASK    ((uint32_t)0x0C000000)
#define MAC_HW0_MU0_DMA_STATUS_1_RX_HEADER_2_STATE_LSB    26
#define MAC_HW0_MU0_DMA_STATUS_1_RX_HEADER_2_STATE_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_STATUS_1_RX_HEADER_STATE_MASK    ((uint32_t)0x03000000)
#define MAC_HW0_MU0_DMA_STATUS_1_RX_HEADER_STATE_LSB    24
#define MAC_HW0_MU0_DMA_STATUS_1_RX_HEADER_STATE_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_STATUS_1_TX_HTP_STATE_MASK    ((uint32_t)0x00300000)
#define MAC_HW0_MU0_DMA_STATUS_1_TX_HTP_STATE_LSB    20
#define MAC_HW0_MU0_DMA_STATUS_1_TX_HTP_STATE_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_STATUS_1_TX_AC_3_STATE_MASK    ((uint32_t)0x00030000)
#define MAC_HW0_MU0_DMA_STATUS_1_TX_AC_3_STATE_LSB    16
#define MAC_HW0_MU0_DMA_STATUS_1_TX_AC_3_STATE_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_STATUS_1_TX_AC_2_STATE_MASK    ((uint32_t)0x00003000)
#define MAC_HW0_MU0_DMA_STATUS_1_TX_AC_2_STATE_LSB    12
#define MAC_HW0_MU0_DMA_STATUS_1_TX_AC_2_STATE_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_STATUS_1_TX_AC_1_STATE_MASK    ((uint32_t)0x00000300)
#define MAC_HW0_MU0_DMA_STATUS_1_TX_AC_1_STATE_LSB    8
#define MAC_HW0_MU0_DMA_STATUS_1_TX_AC_1_STATE_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_STATUS_1_TX_AC_0_STATE_MASK    ((uint32_t)0x00000030)
#define MAC_HW0_MU0_DMA_STATUS_1_TX_AC_0_STATE_LSB    4
#define MAC_HW0_MU0_DMA_STATUS_1_TX_AC_0_STATE_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_STATUS_1_TX_BCN_STATE_MASK    ((uint32_t)0x00000003)
#define MAC_HW0_MU0_DMA_STATUS_1_TX_BCN_STATE_LSB    0
#define MAC_HW0_MU0_DMA_STATUS_1_TX_BCN_STATE_WIDTH    ((uint32_t)0x00000002)

#define MAC_HW0_MU0_DMA_STATUS_1_RX_PAYLOAD_2_STATE_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_1_RX_PAYLOAD_STATE_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_1_RX_HEADER_2_STATE_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_1_RX_HEADER_STATE_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_1_TX_HTP_STATE_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_1_TX_AC_3_STATE_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_1_TX_AC_2_STATE_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_1_TX_AC_1_STATE_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_1_TX_AC_0_STATE_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_1_TX_BCN_STATE_RST    0x0

__INLINE void mac_hw0_mu0_dma_status_1_unpack(uint8_t* rx_payload2_state, uint8_t* rx_payload_state, uint8_t* rx_header2_state, uint8_t* rx_header_state, uint8_t* tx_htp_state, uint8_t* tx_ac_3_state, uint8_t* tx_ac_2_state, uint8_t* tx_ac_1_state, uint8_t* tx_ac_0_state, uint8_t* tx_bcn_state)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_1_ADDR);

	*rx_payload2_state = (localVal & ((uint32_t)0xC0000000)) >>  30;
	*rx_payload_state = (localVal & ((uint32_t)0x30000000)) >>  28;
	*rx_header2_state = (localVal & ((uint32_t)0x0C000000)) >>  26;
	*rx_header_state = (localVal & ((uint32_t)0x03000000)) >>  24;
	*tx_htp_state = (localVal & ((uint32_t)0x00300000)) >>  20;
	*tx_ac_3_state = (localVal & ((uint32_t)0x00030000)) >>  16;
	*tx_ac_2_state = (localVal & ((uint32_t)0x00003000)) >>  12;
	*tx_ac_1_state = (localVal & ((uint32_t)0x00000300)) >>  8;
	*tx_ac_0_state = (localVal & ((uint32_t)0x00000030)) >>  4;
	*tx_bcn_state = (localVal & ((uint32_t)0x00000003)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_dma_status_1_rx_payload_2_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xC0000000)) >> 30);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_1_rx_payload_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x30000000)) >> 28);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_1_rx_header_2_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0C000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_1_rx_header_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x03000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_1_tx_htp_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00300000)) >> 20);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_1_tx_ac_3_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00030000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_1_tx_ac_2_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_1_tx_ac_1_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000300)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_1_tx_ac_0_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000030)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_1_tx_bcn_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000003)) >> 0);
}

/**
 * @brief DMA_STATUS_2 register definition
 *  Indicates HW DMA status. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    TX_AC_3_NEW_HEAD_ERR      0              
 *    28    TX_AC_2_NEW_HEAD_ERR      0              
 *    27    TX_AC_1_NEW_HEAD_ERR      0              
 *    26    TX_AC_0_NEW_HEAD_ERR      0              
 *    25    TX_BCN_NEW_HEAD_ERR       0              
 *    24    TX_AC_3_BUS_ERR           0              
 *    23    TX_AC_2_BUS_ERR           0              
 *    22    TX_AC_1_BUS_ERR           0              
 *    21    TX_AC_0_BUS_ERR           0              
 *    20    TX_BCN_BUS_ERR            0              
 *    19    TX_AC_3_PT_ADDRESS_ERR    0              
 *    18    TX_AC_2_PT_ADDRESS_ERR    0              
 *    17    TX_AC_1_PT_ADDRESS_ERR    0              
 *    16    TX_AC_0_PT_ADDRESS_ERR    0              
 *    15    TX_BCN_PT_ADDRESS_ERR     0              
 *    14    TX_AC_3_NEXT_POINTER_ERR  0              
 *    13    TX_AC_2_NEXT_POINTER_ERR  0              
 *    12    TX_AC_1_NEXT_POINTER_ERR  0              
 *    11    TX_AC_0_NEXT_POINTER_ERR  0              
 *    10    TX_BCN_NEXT_POINTER_ERR   0              
 *    09    TX_AC_3_U_PATTERN_ERR     0              
 *    08    TX_AC_2_U_PATTERN_ERR     0              
 *    07    TX_AC_1_U_PATTERN_ERR     0              
 *    06    TX_AC_0_U_PATTERN_ERR     0              
 *    05    TX_BCN_U_PATTERN_ERR      0              
 *    04    TX_AC_3_LEN_MISMATCH      0              
 *    03    TX_AC_2_LEN_MISMATCH      0              
 *    02    TX_AC_1_LEN_MISMATCH      0              
 *    01    TX_AC_0_LEN_MISMATCH      0              
 *    00    TX_BCN_LEN_MISMATCH       0              
 * </pre>
 */
#define MAC_HW0_MU0_DMA_STATUS_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000818C)
#define MAC_HW0_MU0_DMA_STATUS_2_OFFSET      0x0000818C
#define MAC_HW0_MU0_DMA_STATUS_2_INDEX       0x00002063
#define MAC_HW0_MU0_DMA_STATUS_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_dma_status_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_NEW_HEAD_ERR_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_NEW_HEAD_ERR_POS    29
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_NEW_HEAD_ERR_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_NEW_HEAD_ERR_POS    28
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_NEW_HEAD_ERR_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_NEW_HEAD_ERR_POS    27
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_NEW_HEAD_ERR_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_NEW_HEAD_ERR_POS    26
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_NEW_HEAD_ERR_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_NEW_HEAD_ERR_POS    25
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_BUS_ERR_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_BUS_ERR_POS    24
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_BUS_ERR_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_BUS_ERR_POS    23
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_BUS_ERR_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_BUS_ERR_POS    22
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_BUS_ERR_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_BUS_ERR_POS    21
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_BUS_ERR_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_BUS_ERR_POS    20
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_PT_ADDRESS_ERR_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_PT_ADDRESS_ERR_POS    19
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_PT_ADDRESS_ERR_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_PT_ADDRESS_ERR_POS    18
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_PT_ADDRESS_ERR_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_PT_ADDRESS_ERR_POS    17
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_PT_ADDRESS_ERR_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_PT_ADDRESS_ERR_POS    16
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_PT_ADDRESS_ERR_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_PT_ADDRESS_ERR_POS    15
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_NEXT_POINTER_ERR_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_NEXT_POINTER_ERR_POS    14
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_NEXT_POINTER_ERR_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_NEXT_POINTER_ERR_POS    13
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_NEXT_POINTER_ERR_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_NEXT_POINTER_ERR_POS    12
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_NEXT_POINTER_ERR_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_NEXT_POINTER_ERR_POS    11
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_NEXT_POINTER_ERR_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_NEXT_POINTER_ERR_POS    10
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_U_PATTERN_ERR_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_U_PATTERN_ERR_POS    9
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_U_PATTERN_ERR_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_U_PATTERN_ERR_POS    8
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_U_PATTERN_ERR_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_U_PATTERN_ERR_POS    7
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_U_PATTERN_ERR_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_U_PATTERN_ERR_POS    6
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_U_PATTERN_ERR_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_U_PATTERN_ERR_POS    5
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_LEN_MISMATCH_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_LEN_MISMATCH_POS    4
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_LEN_MISMATCH_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_LEN_MISMATCH_POS    3
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_LEN_MISMATCH_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_LEN_MISMATCH_POS    2
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_LEN_MISMATCH_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_LEN_MISMATCH_POS    1
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_LEN_MISMATCH_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_LEN_MISMATCH_POS    0

#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_NEW_HEAD_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_NEW_HEAD_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_NEW_HEAD_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_NEW_HEAD_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_NEW_HEAD_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_BUS_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_BUS_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_BUS_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_BUS_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_BUS_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_PT_ADDRESS_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_PT_ADDRESS_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_PT_ADDRESS_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_PT_ADDRESS_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_PT_ADDRESS_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_NEXT_POINTER_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_NEXT_POINTER_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_NEXT_POINTER_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_NEXT_POINTER_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_NEXT_POINTER_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_U_PATTERN_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_U_PATTERN_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_U_PATTERN_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_U_PATTERN_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_U_PATTERN_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_3_LEN_MISMATCH_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_2_LEN_MISMATCH_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_1_LEN_MISMATCH_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_AC_0_LEN_MISMATCH_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_2_TX_BCN_LEN_MISMATCH_RST    0x0

__INLINE void mac_hw0_mu0_dma_status_2_unpack(uint8_t* tx_ac_3_new_head_err, uint8_t* tx_ac_2_new_head_err, uint8_t* tx_ac_1_new_head_err, uint8_t* tx_ac_0_new_head_err, uint8_t* tx_bcn_new_head_err, uint8_t* tx_ac_3_bus_err, uint8_t* tx_ac_2_bus_err, uint8_t* tx_ac_1_bus_err, uint8_t* tx_ac_0_bus_err, uint8_t* tx_bcn_bus_err, uint8_t* tx_ac_3_pt_address_err, uint8_t* tx_ac_2_pt_address_err, uint8_t* tx_ac_1_pt_address_err, uint8_t* tx_ac_0_pt_address_err, uint8_t* tx_bcn_pt_address_err, uint8_t* tx_ac_3_next_pointer_err, uint8_t* tx_ac_2_next_pointer_err, uint8_t* tx_ac_1_next_pointer_err, uint8_t* tx_ac_0_next_pointer_err, uint8_t* tx_bcn_next_pointer_err, uint8_t* tx_ac_3_u_pattern_err, uint8_t* tx_ac_2_u_pattern_err, uint8_t* tx_ac_1_u_pattern_err, uint8_t* tx_ac_0_u_pattern_err, uint8_t* tx_bcn_u_pattern_err, uint8_t* tx_ac_3_len_mismatch, uint8_t* tx_ac_2_len_mismatch, uint8_t* tx_ac_1_len_mismatch, uint8_t* tx_ac_0_len_mismatch, uint8_t* tx_bcn_len_mismatch)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);

	*tx_ac_3_new_head_err = (localVal & ((uint32_t)0x20000000)) >>  29;
	*tx_ac_2_new_head_err = (localVal & ((uint32_t)0x10000000)) >>  28;
	*tx_ac_1_new_head_err = (localVal & ((uint32_t)0x08000000)) >>  27;
	*tx_ac_0_new_head_err = (localVal & ((uint32_t)0x04000000)) >>  26;
	*tx_bcn_new_head_err = (localVal & ((uint32_t)0x02000000)) >>  25;
	*tx_ac_3_bus_err = (localVal & ((uint32_t)0x01000000)) >>  24;
	*tx_ac_2_bus_err = (localVal & ((uint32_t)0x00800000)) >>  23;
	*tx_ac_1_bus_err = (localVal & ((uint32_t)0x00400000)) >>  22;
	*tx_ac_0_bus_err = (localVal & ((uint32_t)0x00200000)) >>  21;
	*tx_bcn_bus_err = (localVal & ((uint32_t)0x00100000)) >>  20;
	*tx_ac_3_pt_address_err = (localVal & ((uint32_t)0x00080000)) >>  19;
	*tx_ac_2_pt_address_err = (localVal & ((uint32_t)0x00040000)) >>  18;
	*tx_ac_1_pt_address_err = (localVal & ((uint32_t)0x00020000)) >>  17;
	*tx_ac_0_pt_address_err = (localVal & ((uint32_t)0x00010000)) >>  16;
	*tx_bcn_pt_address_err = (localVal & ((uint32_t)0x00008000)) >>  15;
	*tx_ac_3_next_pointer_err = (localVal & ((uint32_t)0x00004000)) >>  14;
	*tx_ac_2_next_pointer_err = (localVal & ((uint32_t)0x00002000)) >>  13;
	*tx_ac_1_next_pointer_err = (localVal & ((uint32_t)0x00001000)) >>  12;
	*tx_ac_0_next_pointer_err = (localVal & ((uint32_t)0x00000800)) >>  11;
	*tx_bcn_next_pointer_err = (localVal & ((uint32_t)0x00000400)) >>  10;
	*tx_ac_3_u_pattern_err = (localVal & ((uint32_t)0x00000200)) >>  9;
	*tx_ac_2_u_pattern_err = (localVal & ((uint32_t)0x00000100)) >>  8;
	*tx_ac_1_u_pattern_err = (localVal & ((uint32_t)0x00000080)) >>  7;
	*tx_ac_0_u_pattern_err = (localVal & ((uint32_t)0x00000040)) >>  6;
	*tx_bcn_u_pattern_err = (localVal & ((uint32_t)0x00000020)) >>  5;
	*tx_ac_3_len_mismatch = (localVal & ((uint32_t)0x00000010)) >>  4;
	*tx_ac_2_len_mismatch = (localVal & ((uint32_t)0x00000008)) >>  3;
	*tx_ac_1_len_mismatch = (localVal & ((uint32_t)0x00000004)) >>  2;
	*tx_ac_0_len_mismatch = (localVal & ((uint32_t)0x00000002)) >>  1;
	*tx_bcn_len_mismatch = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_3_new_head_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_2_new_head_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_1_new_head_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_0_new_head_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_bcn_new_head_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_3_bus_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_2_bus_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_1_bus_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_0_bus_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_bcn_bus_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_3_pt_address_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_2_pt_address_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_1_pt_address_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_0_pt_address_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_bcn_pt_address_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_3_next_pointer_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_2_next_pointer_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_1_next_pointer_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_0_next_pointer_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_bcn_next_pointer_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_3_u_pattern_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_2_u_pattern_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_1_u_pattern_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_0_u_pattern_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_bcn_u_pattern_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_3_len_mismatch_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_2_len_mismatch_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_1_len_mismatch_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_ac_0_len_mismatch_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_2_tx_bcn_len_mismatch_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief DMA_STATUS_3 register definition
 *  Indicates HW DMA status. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    TX_HTP_NEW_HEAD_ERR       0              
 *    28    TX_HTP_BUS_ERR            0              
 *    27    TX_HTP_PT_ADDRESS_ERR     0              
 *    26    TX_HTP_NEXT_POINTER_ERR   0              
 *    25    TX_HTP_U_PATTERN_ERR      0              
 *    24    TX_HTP_LEN_MISMATCH       0              
 *    15    RX_PAY_NEW_HEAD2_ERR      0              
 *    14    RX_HDR_NEW_HEAD2_ERR      0              
 *    13    RX_PAY_BUS_2_ERR          0              
 *    12    RX_HDR_BUS_2_ERR          0              
 *    11    RX_PAY_NEXT_POINTER2_ERR  0              
 *    10    RX_HDR_NEXT_POINTER2_ERR  0              
 *    09    RX_PAY_U_PATTERN2_ERR     0              
 *    08    RX_HDR_U_PATTERN2_ERR     0              
 *    07    RX_PAY_NEW_HEAD_ERR       0              
 *    06    RX_HDR_NEW_HEAD_ERR       0              
 *    05    RX_PAY_BUS_ERR            0              
 *    04    RX_HDR_BUS_ERR            0              
 *    03    RX_PAY_NEXT_POINTER_ERR   0              
 *    02    RX_HDR_NEXT_POINTER_ERR   0              
 *    01    RX_PAY_U_PATTERN_ERR      0              
 *    00    RX_HDR_U_PATTERN_ERR      0              
 * </pre>
 */
#define MAC_HW0_MU0_DMA_STATUS_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008190)
#define MAC_HW0_MU0_DMA_STATUS_3_OFFSET      0x00008190
#define MAC_HW0_MU0_DMA_STATUS_3_INDEX       0x00002064
#define MAC_HW0_MU0_DMA_STATUS_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_dma_status_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_NEW_HEAD_ERR_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_NEW_HEAD_ERR_POS    29
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_BUS_ERR_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_BUS_ERR_POS    28
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_PT_ADDRESS_ERR_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_PT_ADDRESS_ERR_POS    27
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_NEXT_POINTER_ERR_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_NEXT_POINTER_ERR_POS    26
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_U_PATTERN_ERR_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_U_PATTERN_ERR_POS    25
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_LEN_MISMATCH_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_LEN_MISMATCH_POS    24
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_NEW_HEAD_2_ERR_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_NEW_HEAD_2_ERR_POS    15
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_NEW_HEAD_2_ERR_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_NEW_HEAD_2_ERR_POS    14
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_BUS_2_ERR_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_BUS_2_ERR_POS    13
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_BUS_2_ERR_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_BUS_2_ERR_POS    12
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_NEXT_POINTER_2_ERR_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_NEXT_POINTER_2_ERR_POS    11
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_NEXT_POINTER_2_ERR_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_NEXT_POINTER_2_ERR_POS    10
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_U_PATTERN_2_ERR_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_U_PATTERN_2_ERR_POS    9
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_U_PATTERN_2_ERR_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_U_PATTERN_2_ERR_POS    8
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_NEW_HEAD_ERR_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_NEW_HEAD_ERR_POS    7
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_NEW_HEAD_ERR_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_NEW_HEAD_ERR_POS    6
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_BUS_ERR_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_BUS_ERR_POS    5
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_BUS_ERR_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_BUS_ERR_POS    4
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_NEXT_POINTER_ERR_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_NEXT_POINTER_ERR_POS    3
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_NEXT_POINTER_ERR_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_NEXT_POINTER_ERR_POS    2
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_U_PATTERN_ERR_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_U_PATTERN_ERR_POS    1
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_U_PATTERN_ERR_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_U_PATTERN_ERR_POS    0

#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_NEW_HEAD_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_BUS_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_PT_ADDRESS_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_NEXT_POINTER_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_U_PATTERN_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_TX_HTP_LEN_MISMATCH_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_NEW_HEAD_2_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_NEW_HEAD_2_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_BUS_2_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_BUS_2_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_NEXT_POINTER_2_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_NEXT_POINTER_2_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_U_PATTERN_2_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_U_PATTERN_2_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_NEW_HEAD_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_NEW_HEAD_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_BUS_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_BUS_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_NEXT_POINTER_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_NEXT_POINTER_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_RX_PAY_U_PATTERN_ERR_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_3_RX_HDR_U_PATTERN_ERR_RST    0x0

__INLINE void mac_hw0_mu0_dma_status_3_unpack(uint8_t* tx_htp_new_head_err, uint8_t* tx_htp_bus_err, uint8_t* tx_htp_pt_address_err, uint8_t* tx_htp_next_pointer_err, uint8_t* tx_htp_u_pattern_err, uint8_t* tx_htp_len_mismatch, uint8_t* rx_pay_new_head2_err, uint8_t* rx_hdr_new_head2_err, uint8_t* rx_pay_bus_2_err, uint8_t* rx_hdr_bus_2_err, uint8_t* rx_pay_next_pointer2_err, uint8_t* rx_hdr_next_pointer2_err, uint8_t* rx_pay_u_pattern2_err, uint8_t* rx_hdr_u_pattern2_err, uint8_t* rx_pay_new_head_err, uint8_t* rx_hdr_new_head_err, uint8_t* rx_pay_bus_err, uint8_t* rx_hdr_bus_err, uint8_t* rx_pay_next_pointer_err, uint8_t* rx_hdr_next_pointer_err, uint8_t* rx_pay_u_pattern_err, uint8_t* rx_hdr_u_pattern_err)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);

	*tx_htp_new_head_err = (localVal & ((uint32_t)0x20000000)) >>  29;
	*tx_htp_bus_err = (localVal & ((uint32_t)0x10000000)) >>  28;
	*tx_htp_pt_address_err = (localVal & ((uint32_t)0x08000000)) >>  27;
	*tx_htp_next_pointer_err = (localVal & ((uint32_t)0x04000000)) >>  26;
	*tx_htp_u_pattern_err = (localVal & ((uint32_t)0x02000000)) >>  25;
	*tx_htp_len_mismatch = (localVal & ((uint32_t)0x01000000)) >>  24;
	*rx_pay_new_head2_err = (localVal & ((uint32_t)0x00008000)) >>  15;
	*rx_hdr_new_head2_err = (localVal & ((uint32_t)0x00004000)) >>  14;
	*rx_pay_bus_2_err = (localVal & ((uint32_t)0x00002000)) >>  13;
	*rx_hdr_bus_2_err = (localVal & ((uint32_t)0x00001000)) >>  12;
	*rx_pay_next_pointer2_err = (localVal & ((uint32_t)0x00000800)) >>  11;
	*rx_hdr_next_pointer2_err = (localVal & ((uint32_t)0x00000400)) >>  10;
	*rx_pay_u_pattern2_err = (localVal & ((uint32_t)0x00000200)) >>  9;
	*rx_hdr_u_pattern2_err = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_pay_new_head_err = (localVal & ((uint32_t)0x00000080)) >>  7;
	*rx_hdr_new_head_err = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rx_pay_bus_err = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rx_hdr_bus_err = (localVal & ((uint32_t)0x00000010)) >>  4;
	*rx_pay_next_pointer_err = (localVal & ((uint32_t)0x00000008)) >>  3;
	*rx_hdr_next_pointer_err = (localVal & ((uint32_t)0x00000004)) >>  2;
	*rx_pay_u_pattern_err = (localVal & ((uint32_t)0x00000002)) >>  1;
	*rx_hdr_u_pattern_err = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_dma_status_3_tx_htp_new_head_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_tx_htp_bus_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_tx_htp_pt_address_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_tx_htp_next_pointer_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_tx_htp_u_pattern_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_tx_htp_len_mismatch_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_rx_pay_new_head_2_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_rx_hdr_new_head_2_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_rx_pay_bus_2_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_rx_hdr_bus_2_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_rx_pay_next_pointer_2_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_rx_hdr_next_pointer_2_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_rx_pay_u_pattern_2_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_rx_hdr_u_pattern_2_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_rx_pay_new_head_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_rx_hdr_new_head_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_rx_pay_bus_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_rx_hdr_bus_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_rx_pay_next_pointer_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_rx_hdr_next_pointer_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_rx_pay_u_pattern_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_3_rx_hdr_u_pattern_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief DMA_STATUS_4 register definition
 *  Indicates HW DMA status. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    20    TX_HTP_RESP_DISABLED      0              
 *    19    TX_HTP_RX_NOT_IDLE        0              
 *    18    TX_HTP_TRIGGER_FCS_FAIL   0              
 *    17    TX_HTP_HALT_AFTER_TXOP    1              
 *    16    TX_HTP_END_Q              0              
 *    15    TX_HTP_STARTUP            1              
 *    14    TX_AC_3_HALT_AFTER_TXOP   0              
 *    13    TX_AC_2_HALT_AFTER_TXOP   0              
 *    12    TX_AC_1_HALT_AFTER_TXOP   0              
 *    11    TX_AC_0_HALT_AFTER_TXOP   0              
 *    10    TX_BCN_HALT_AFTER_TXOP    0              
 *    09    TX_AC_3_END_Q             0              
 *    08    TX_AC_2_END_Q             0              
 *    07    TX_AC_1_END_Q             0              
 *    06    TX_AC_0_END_Q             0              
 *    05    TX_BCN_END_Q              0              
 *    04    TX_AC_3_STARTUP           1              
 *    03    TX_AC_2_STARTUP           1              
 *    02    TX_AC_1_STARTUP           1              
 *    01    TX_AC_0_STARTUP           1              
 *    00    TX_BCN_STARTUP            1              
 * </pre>
 */
#define MAC_HW0_MU0_DMA_STATUS_4_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008194)
#define MAC_HW0_MU0_DMA_STATUS_4_OFFSET      0x00008194
#define MAC_HW0_MU0_DMA_STATUS_4_INDEX       0x00002065
#define MAC_HW0_MU0_DMA_STATUS_4_RESET       0x0002801F

__INLINE uint32_t  mac_hw0_mu0_dma_status_4_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_RESP_DISABLED_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_RESP_DISABLED_POS    20
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_RX_NOT_IDLE_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_RX_NOT_IDLE_POS    19
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_TRIGGER_FCS_FAIL_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_TRIGGER_FCS_FAIL_POS    18
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_HALT_AFTER_TXOP_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_HALT_AFTER_TXOP_POS    17
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_END_Q_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_END_Q_POS    16
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_STARTUP_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_STARTUP_POS    15
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_3_HALT_AFTER_TXOP_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_3_HALT_AFTER_TXOP_POS    14
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_2_HALT_AFTER_TXOP_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_2_HALT_AFTER_TXOP_POS    13
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_1_HALT_AFTER_TXOP_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_1_HALT_AFTER_TXOP_POS    12
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_0_HALT_AFTER_TXOP_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_0_HALT_AFTER_TXOP_POS    11
#define MAC_HW0_MU0_DMA_STATUS_4_TX_BCN_HALT_AFTER_TXOP_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_BCN_HALT_AFTER_TXOP_POS    10
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_3_END_Q_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_3_END_Q_POS    9
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_2_END_Q_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_2_END_Q_POS    8
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_1_END_Q_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_1_END_Q_POS    7
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_0_END_Q_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_0_END_Q_POS    6
#define MAC_HW0_MU0_DMA_STATUS_4_TX_BCN_END_Q_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_BCN_END_Q_POS    5
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_3_STARTUP_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_3_STARTUP_POS    4
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_2_STARTUP_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_2_STARTUP_POS    3
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_1_STARTUP_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_1_STARTUP_POS    2
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_0_STARTUP_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_0_STARTUP_POS    1
#define MAC_HW0_MU0_DMA_STATUS_4_TX_BCN_STARTUP_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_DMA_STATUS_4_TX_BCN_STARTUP_POS    0

#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_RESP_DISABLED_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_RX_NOT_IDLE_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_TRIGGER_FCS_FAIL_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_HALT_AFTER_TXOP_RST    0x1
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_END_Q_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_4_TX_HTP_STARTUP_RST    0x1
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_3_HALT_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_2_HALT_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_1_HALT_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_0_HALT_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_4_TX_BCN_HALT_AFTER_TXOP_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_3_END_Q_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_2_END_Q_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_1_END_Q_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_0_END_Q_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_4_TX_BCN_END_Q_RST    0x0
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_3_STARTUP_RST    0x1
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_2_STARTUP_RST    0x1
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_1_STARTUP_RST    0x1
#define MAC_HW0_MU0_DMA_STATUS_4_TX_AC_0_STARTUP_RST    0x1
#define MAC_HW0_MU0_DMA_STATUS_4_TX_BCN_STARTUP_RST    0x1

__INLINE void mac_hw0_mu0_dma_status_4_unpack(uint8_t* tx_htp_resp_disabled, uint8_t* tx_htp_rx_not_idle, uint8_t* tx_htp_trigger_fcs_fail, uint8_t* tx_htp_halt_after_txop, uint8_t* tx_htp_end_q, uint8_t* tx_htp_startup, uint8_t* tx_ac_3_halt_after_txop, uint8_t* tx_ac_2_halt_after_txop, uint8_t* tx_ac_1_halt_after_txop, uint8_t* tx_ac_0_halt_after_txop, uint8_t* tx_bcn_halt_after_txop, uint8_t* tx_ac_3_end_q, uint8_t* tx_ac_2_end_q, uint8_t* tx_ac_1_end_q, uint8_t* tx_ac_0_end_q, uint8_t* tx_bcn_end_q, uint8_t* tx_ac_3_startup, uint8_t* tx_ac_2_startup, uint8_t* tx_ac_1_startup, uint8_t* tx_ac_0_startup, uint8_t* tx_bcn_startup)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);

	*tx_htp_resp_disabled = (localVal & ((uint32_t)0x00100000)) >>  20;
	*tx_htp_rx_not_idle = (localVal & ((uint32_t)0x00080000)) >>  19;
	*tx_htp_trigger_fcs_fail = (localVal & ((uint32_t)0x00040000)) >>  18;
	*tx_htp_halt_after_txop = (localVal & ((uint32_t)0x00020000)) >>  17;
	*tx_htp_end_q = (localVal & ((uint32_t)0x00010000)) >>  16;
	*tx_htp_startup = (localVal & ((uint32_t)0x00008000)) >>  15;
	*tx_ac_3_halt_after_txop = (localVal & ((uint32_t)0x00004000)) >>  14;
	*tx_ac_2_halt_after_txop = (localVal & ((uint32_t)0x00002000)) >>  13;
	*tx_ac_1_halt_after_txop = (localVal & ((uint32_t)0x00001000)) >>  12;
	*tx_ac_0_halt_after_txop = (localVal & ((uint32_t)0x00000800)) >>  11;
	*tx_bcn_halt_after_txop = (localVal & ((uint32_t)0x00000400)) >>  10;
	*tx_ac_3_end_q = (localVal & ((uint32_t)0x00000200)) >>  9;
	*tx_ac_2_end_q = (localVal & ((uint32_t)0x00000100)) >>  8;
	*tx_ac_1_end_q = (localVal & ((uint32_t)0x00000080)) >>  7;
	*tx_ac_0_end_q = (localVal & ((uint32_t)0x00000040)) >>  6;
	*tx_bcn_end_q = (localVal & ((uint32_t)0x00000020)) >>  5;
	*tx_ac_3_startup = (localVal & ((uint32_t)0x00000010)) >>  4;
	*tx_ac_2_startup = (localVal & ((uint32_t)0x00000008)) >>  3;
	*tx_ac_1_startup = (localVal & ((uint32_t)0x00000004)) >>  2;
	*tx_ac_0_startup = (localVal & ((uint32_t)0x00000002)) >>  1;
	*tx_bcn_startup = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_htp_resp_disabled_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_htp_rx_not_idle_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_htp_trigger_fcs_fail_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_htp_halt_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_htp_end_q_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_htp_startup_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_ac_3_halt_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_ac_2_halt_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_ac_1_halt_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_ac_0_halt_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_bcn_halt_after_txop_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_ac_3_end_q_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_ac_2_end_q_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_ac_1_end_q_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_ac_0_end_q_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_bcn_end_q_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_ac_3_startup_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_ac_2_startup_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_ac_1_startup_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_ac_0_startup_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_dma_status_4_tx_bcn_startup_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_STATUS_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief TX_BCN_HEAD_PTR register definition
 *  Head Pointer of the Beacon DMA channel is programmed here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TX_BCN_HEAD_PTR           0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_BCN_HEAD_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008198)
#define MAC_HW0_MU0_TX_BCN_HEAD_PTR_OFFSET      0x00008198
#define MAC_HW0_MU0_TX_BCN_HEAD_PTR_INDEX       0x00002066
#define MAC_HW0_MU0_TX_BCN_HEAD_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_bcn_head_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_BCN_HEAD_PTR_ADDR);
}

__INLINE void mac_hw0_mu0_tx_bcn_head_ptr_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_BCN_HEAD_PTR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_BCN_HEAD_PTR_TX_BCN_HEAD_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TX_BCN_HEAD_PTR_TX_BCN_HEAD_PTR_LSB    0
#define MAC_HW0_MU0_TX_BCN_HEAD_PTR_TX_BCN_HEAD_PTR_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TX_BCN_HEAD_PTR_TX_BCN_HEAD_PTR_RST    0x0

__INLINE uint32_t mac_hw0_mu0_tx_bcn_head_ptr_tx_bcn_head_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_BCN_HEAD_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_tx_bcn_head_ptr_tx_bcn_head_ptr_setf(uint32_t txbcnheadptr)
{
	ASSERT_ERR((((uint32_t)txbcnheadptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_BCN_HEAD_PTR_ADDR, (uint32_t)txbcnheadptr << 0);
}

/**
 * @brief TX_AC_0_HEAD_PTR register definition
 *  Head Pointer of the AC_BK DMA channel is programmed here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TX_AC_0_HEAD_PTR          0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_AC_0_HEAD_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000819C)
#define MAC_HW0_MU0_TX_AC_0_HEAD_PTR_OFFSET      0x0000819C
#define MAC_HW0_MU0_TX_AC_0_HEAD_PTR_INDEX       0x00002067
#define MAC_HW0_MU0_TX_AC_0_HEAD_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_ac_0_head_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_AC_0_HEAD_PTR_ADDR);
}

__INLINE void mac_hw0_mu0_tx_ac_0_head_ptr_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_AC_0_HEAD_PTR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_AC_0_HEAD_PTR_TX_AC_0_HEAD_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TX_AC_0_HEAD_PTR_TX_AC_0_HEAD_PTR_LSB    0
#define MAC_HW0_MU0_TX_AC_0_HEAD_PTR_TX_AC_0_HEAD_PTR_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TX_AC_0_HEAD_PTR_TX_AC_0_HEAD_PTR_RST    0x0

__INLINE uint32_t mac_hw0_mu0_tx_ac_0_head_ptr_tx_ac_0_head_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_AC_0_HEAD_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_tx_ac_0_head_ptr_tx_ac_0_head_ptr_setf(uint32_t txac0headptr)
{
	ASSERT_ERR((((uint32_t)txac0headptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_AC_0_HEAD_PTR_ADDR, (uint32_t)txac0headptr << 0);
}

/**
 * @brief TX_AC_1_HEAD_PTR register definition
 *  Head Pointer of the AC_BE DMA channel is programmed here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TX_AC_1_HEAD_PTR          0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_AC_1_HEAD_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000081A0)
#define MAC_HW0_MU0_TX_AC_1_HEAD_PTR_OFFSET      0x000081A0
#define MAC_HW0_MU0_TX_AC_1_HEAD_PTR_INDEX       0x00002068
#define MAC_HW0_MU0_TX_AC_1_HEAD_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_ac_1_head_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_AC_1_HEAD_PTR_ADDR);
}

__INLINE void mac_hw0_mu0_tx_ac_1_head_ptr_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_AC_1_HEAD_PTR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_AC_1_HEAD_PTR_TX_AC_1_HEAD_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TX_AC_1_HEAD_PTR_TX_AC_1_HEAD_PTR_LSB    0
#define MAC_HW0_MU0_TX_AC_1_HEAD_PTR_TX_AC_1_HEAD_PTR_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TX_AC_1_HEAD_PTR_TX_AC_1_HEAD_PTR_RST    0x0

__INLINE uint32_t mac_hw0_mu0_tx_ac_1_head_ptr_tx_ac_1_head_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_AC_1_HEAD_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_tx_ac_1_head_ptr_tx_ac_1_head_ptr_setf(uint32_t txac1headptr)
{
	ASSERT_ERR((((uint32_t)txac1headptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_AC_1_HEAD_PTR_ADDR, (uint32_t)txac1headptr << 0);
}

/**
 * @brief TX_AC_2_HEAD_PTR register definition
 *  Head Pointer of the AC_VI DMA channel is programmed here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TX_AC_2_HEAD_PTR          0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_AC_2_HEAD_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000081A4)
#define MAC_HW0_MU0_TX_AC_2_HEAD_PTR_OFFSET      0x000081A4
#define MAC_HW0_MU0_TX_AC_2_HEAD_PTR_INDEX       0x00002069
#define MAC_HW0_MU0_TX_AC_2_HEAD_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_ac_2_head_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_AC_2_HEAD_PTR_ADDR);
}

__INLINE void mac_hw0_mu0_tx_ac_2_head_ptr_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_AC_2_HEAD_PTR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_AC_2_HEAD_PTR_TX_AC_2_HEAD_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TX_AC_2_HEAD_PTR_TX_AC_2_HEAD_PTR_LSB    0
#define MAC_HW0_MU0_TX_AC_2_HEAD_PTR_TX_AC_2_HEAD_PTR_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TX_AC_2_HEAD_PTR_TX_AC_2_HEAD_PTR_RST    0x0

__INLINE uint32_t mac_hw0_mu0_tx_ac_2_head_ptr_tx_ac_2_head_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_AC_2_HEAD_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_tx_ac_2_head_ptr_tx_ac_2_head_ptr_setf(uint32_t txac2headptr)
{
	ASSERT_ERR((((uint32_t)txac2headptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_AC_2_HEAD_PTR_ADDR, (uint32_t)txac2headptr << 0);
}

/**
 * @brief TX_AC_3_HEAD_PTR register definition
 *  Head Pointer of the AC_VO DMA channel is programmed here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TX_AC_3_HEAD_PTR          0x0
 * </pre>
 */
#define MAC_HW0_MU0_TX_AC_3_HEAD_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000081A8)
#define MAC_HW0_MU0_TX_AC_3_HEAD_PTR_OFFSET      0x000081A8
#define MAC_HW0_MU0_TX_AC_3_HEAD_PTR_INDEX       0x0000206A
#define MAC_HW0_MU0_TX_AC_3_HEAD_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_ac_3_head_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_AC_3_HEAD_PTR_ADDR);
}

__INLINE void mac_hw0_mu0_tx_ac_3_head_ptr_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_AC_3_HEAD_PTR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_AC_3_HEAD_PTR_TX_AC_3_HEAD_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TX_AC_3_HEAD_PTR_TX_AC_3_HEAD_PTR_LSB    0
#define MAC_HW0_MU0_TX_AC_3_HEAD_PTR_TX_AC_3_HEAD_PTR_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TX_AC_3_HEAD_PTR_TX_AC_3_HEAD_PTR_RST    0x0

__INLINE uint32_t mac_hw0_mu0_tx_ac_3_head_ptr_tx_ac_3_head_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_AC_3_HEAD_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_tx_ac_3_head_ptr_tx_ac_3_head_ptr_setf(uint32_t txac3headptr)
{
	ASSERT_ERR((((uint32_t)txac3headptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_AC_3_HEAD_PTR_ADDR, (uint32_t)txac3headptr << 0);
}

/**
 * @brief TX_STRUCT_SIZES register definition
 *  Indicates size of DMA structures register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29:24 DMA_RBD_SIZE              0x5
 *    23:18 DMA_RHD_SIZE              0x11
 *    17:12 DMA_TBD_SIZE              0x4
 *    11:06 DMA_THD_SIZE              0x10
 *    05:00 PT_ENTRY_SIZE             0x9
 * </pre>
 */
#define MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000081AC)
#define MAC_HW0_MU0_TX_STRUCT_SIZES_OFFSET      0x000081AC
#define MAC_HW0_MU0_TX_STRUCT_SIZES_INDEX       0x0000206B
#define MAC_HW0_MU0_TX_STRUCT_SIZES_RESET       0x05444409

__INLINE uint32_t  mac_hw0_mu0_tx_struct_sizes_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR);
}

__INLINE void mac_hw0_mu0_tx_struct_sizes_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_STRUCT_SIZES_DMA_RBD_SIZE_MASK    ((uint32_t)0x3F000000)
#define MAC_HW0_MU0_TX_STRUCT_SIZES_DMA_RBD_SIZE_LSB    24
#define MAC_HW0_MU0_TX_STRUCT_SIZES_DMA_RBD_SIZE_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_TX_STRUCT_SIZES_DMA_RHD_SIZE_MASK    ((uint32_t)0x00FC0000)
#define MAC_HW0_MU0_TX_STRUCT_SIZES_DMA_RHD_SIZE_LSB    18
#define MAC_HW0_MU0_TX_STRUCT_SIZES_DMA_RHD_SIZE_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_TX_STRUCT_SIZES_DMA_TBD_SIZE_MASK    ((uint32_t)0x0003F000)
#define MAC_HW0_MU0_TX_STRUCT_SIZES_DMA_TBD_SIZE_LSB    12
#define MAC_HW0_MU0_TX_STRUCT_SIZES_DMA_TBD_SIZE_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_TX_STRUCT_SIZES_DMA_THD_SIZE_MASK    ((uint32_t)0x00000FC0)
#define MAC_HW0_MU0_TX_STRUCT_SIZES_DMA_THD_SIZE_LSB    6
#define MAC_HW0_MU0_TX_STRUCT_SIZES_DMA_THD_SIZE_WIDTH    ((uint32_t)0x00000006)
#define MAC_HW0_MU0_TX_STRUCT_SIZES_PT_ENTRY_SIZE_MASK    ((uint32_t)0x0000003F)
#define MAC_HW0_MU0_TX_STRUCT_SIZES_PT_ENTRY_SIZE_LSB    0
#define MAC_HW0_MU0_TX_STRUCT_SIZES_PT_ENTRY_SIZE_WIDTH    ((uint32_t)0x00000006)

#define MAC_HW0_MU0_TX_STRUCT_SIZES_DMA_RBD_SIZE_RST    0x5
#define MAC_HW0_MU0_TX_STRUCT_SIZES_DMA_RHD_SIZE_RST    0x11
#define MAC_HW0_MU0_TX_STRUCT_SIZES_DMA_TBD_SIZE_RST    0x4
#define MAC_HW0_MU0_TX_STRUCT_SIZES_DMA_THD_SIZE_RST    0x10
#define MAC_HW0_MU0_TX_STRUCT_SIZES_PT_ENTRY_SIZE_RST    0x9

__INLINE void mac_hw0_mu0_tx_struct_sizes_pack(uint8_t dma_rbd_size, uint8_t dma_rhd_size, uint8_t dma_tbd_size, uint8_t dma_thd_size, uint8_t pt_entry_size)
{
	ASSERT_ERR((((uint32_t)dma_rbd_size << 24) & ~((uint32_t)0x3F000000)) == 0);
	ASSERT_ERR((((uint32_t)dma_rhd_size << 18) & ~((uint32_t)0x00FC0000)) == 0);
	ASSERT_ERR((((uint32_t)dma_tbd_size << 12) & ~((uint32_t)0x0003F000)) == 0);
	ASSERT_ERR((((uint32_t)dma_thd_size << 6) & ~((uint32_t)0x00000FC0)) == 0);
	ASSERT_ERR((((uint32_t)pt_entry_size << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR,  ((uint32_t)dma_rbd_size << 24) |((uint32_t)dma_rhd_size << 18) |((uint32_t)dma_tbd_size << 12) |((uint32_t)dma_thd_size << 6) |((uint32_t)pt_entry_size << 0));
}

__INLINE void mac_hw0_mu0_tx_struct_sizes_unpack(uint8_t* dma_rbd_size, uint8_t* dma_rhd_size, uint8_t* dma_tbd_size, uint8_t* dma_thd_size, uint8_t* pt_entry_size)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR);

	*dma_rbd_size = (localVal & ((uint32_t)0x3F000000)) >>  24;
	*dma_rhd_size = (localVal & ((uint32_t)0x00FC0000)) >>  18;
	*dma_tbd_size = (localVal & ((uint32_t)0x0003F000)) >>  12;
	*dma_thd_size = (localVal & ((uint32_t)0x00000FC0)) >>  6;
	*pt_entry_size = (localVal & ((uint32_t)0x0000003F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_tx_struct_sizes_dma_rbd_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x3F000000)) >> 24);
}
__INLINE void mac_hw0_mu0_tx_struct_sizes_dma_rbd_size_setf(uint8_t dmarbdsize)
{
	ASSERT_ERR((((uint32_t)dmarbdsize << 24) & ~((uint32_t)0x3F000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR) & ~((uint32_t)0x3F000000)) | ((uint32_t)dmarbdsize <<24));
}
__INLINE uint8_t mac_hw0_mu0_tx_struct_sizes_dma_rhd_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FC0000)) >> 18);
}
__INLINE void mac_hw0_mu0_tx_struct_sizes_dma_rhd_size_setf(uint8_t dmarhdsize)
{
	ASSERT_ERR((((uint32_t)dmarhdsize << 18) & ~((uint32_t)0x00FC0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR) & ~((uint32_t)0x00FC0000)) | ((uint32_t)dmarhdsize <<18));
}
__INLINE uint8_t mac_hw0_mu0_tx_struct_sizes_dma_tbd_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0003F000)) >> 12);
}
__INLINE void mac_hw0_mu0_tx_struct_sizes_dma_tbd_size_setf(uint8_t dmatbdsize)
{
	ASSERT_ERR((((uint32_t)dmatbdsize << 12) & ~((uint32_t)0x0003F000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR) & ~((uint32_t)0x0003F000)) | ((uint32_t)dmatbdsize <<12));
}
__INLINE uint8_t mac_hw0_mu0_tx_struct_sizes_dma_thd_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000FC0)) >> 6);
}
__INLINE void mac_hw0_mu0_tx_struct_sizes_dma_thd_size_setf(uint8_t dmathdsize)
{
	ASSERT_ERR((((uint32_t)dmathdsize << 6) & ~((uint32_t)0x00000FC0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR) & ~((uint32_t)0x00000FC0)) | ((uint32_t)dmathdsize <<6));
}
__INLINE uint8_t mac_hw0_mu0_tx_struct_sizes_pt_entry_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000003F)) >> 0);
}
__INLINE void mac_hw0_mu0_tx_struct_sizes_pt_entry_size_setf(uint8_t ptentrysize)
{
	ASSERT_ERR((((uint32_t)ptentrysize << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_STRUCT_SIZES_ADDR) & ~((uint32_t)0x0000003F)) | ((uint32_t)ptentrysize <<0));
}

/**
 * @brief RX_HEADER_HEAD_2_PTR register definition
 *  Head Pointer of the Rec 2 Header DMA channel is  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:02 RX_HEADER_HEAD_PTR        0x0
 *    00    RX_HEADER_HEAD_PTR_VALID  0              
 * </pre>
 */
#define MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000081B0)
#define MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_OFFSET      0x000081B0
#define MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_INDEX       0x0000206C
#define MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_header_head_2_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_ADDR);
}

__INLINE void mac_hw0_mu0_rx_header_head_2_ptr_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_RX_HEADER_HEAD_PTR_MASK    ((uint32_t)0xFFFFFFFC)
#define MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_RX_HEADER_HEAD_PTR_LSB    2
#define MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_RX_HEADER_HEAD_PTR_WIDTH    ((uint32_t)0x0000001E)
#define MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_RX_HEADER_HEAD_PTR_VALID_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_RX_HEADER_HEAD_PTR_VALID_POS    0

#define MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_RX_HEADER_HEAD_PTR_RST    0x0
#define MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_RX_HEADER_HEAD_PTR_VALID_RST    0x0

__INLINE void mac_hw0_mu0_rx_header_head_2_ptr_pack(uint32_t rx_header_head_ptr, uint8_t rx_header_head_ptr_valid)
{
	ASSERT_ERR((((uint32_t)rx_header_head_ptr << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_head_ptr_valid << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_ADDR,  ((uint32_t)rx_header_head_ptr << 2) |((uint32_t)rx_header_head_ptr_valid << 0));
}

__INLINE void mac_hw0_mu0_rx_header_head_2_ptr_unpack(uint32_t* rx_header_head_ptr, uint8_t* rx_header_head_ptr_valid)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_ADDR);

	*rx_header_head_ptr = (localVal & ((uint32_t)0xFFFFFFFC)) >>  2;
	*rx_header_head_ptr_valid = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t mac_hw0_mu0_rx_header_head_2_ptr_rx_header_head_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFFC)) >> 2);
}
__INLINE void mac_hw0_mu0_rx_header_head_2_ptr_rx_header_head_ptr_setf(uint32_t rxheaderheadptr)
{
	ASSERT_ERR((((uint32_t)rxheaderheadptr << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_ADDR) & ~((uint32_t)0xFFFFFFFC)) | ((uint32_t)rxheaderheadptr <<2));
}
__INLINE uint8_t mac_hw0_mu0_rx_header_head_2_ptr_rx_header_head_ptr_valid_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_header_head_2_ptr_rx_header_head_ptr_valid_setf(uint8_t rxheaderheadptrvalid)
{
	ASSERT_ERR((((uint32_t)rxheaderheadptrvalid << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_HEADER_HEAD_2_PTR_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)rxheaderheadptrvalid <<0));
}

/**
 * @brief RX_PAYLOAD_HEAD_2_PTR register definition
 *  Head Pointer of the Rec 2 Payload DMA channel is register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:02 RX_PAYLOAD_HEAD2_PTR      0x0
 *    00    RX_PAYLOAD_HEAD2_PTR_VALID 0              
 * </pre>
 */
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000081B4)
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_OFFSET      0x000081B4
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_INDEX       0x0000206D
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_payload_head_2_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_ADDR);
}

__INLINE void mac_hw0_mu0_rx_payload_head_2_ptr_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_RX_PAYLOAD_HEAD_2_PTR_MASK    ((uint32_t)0xFFFFFFFC)
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_RX_PAYLOAD_HEAD_2_PTR_LSB    2
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_RX_PAYLOAD_HEAD_2_PTR_WIDTH    ((uint32_t)0x0000001E)
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_RX_PAYLOAD_HEAD_2_PTR_VALID_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_RX_PAYLOAD_HEAD_2_PTR_VALID_POS    0

#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_RX_PAYLOAD_HEAD_2_PTR_RST    0x0
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_RX_PAYLOAD_HEAD_2_PTR_VALID_RST    0x0

__INLINE void mac_hw0_mu0_rx_payload_head_2_ptr_pack(uint32_t rx_payload_head2_ptr, uint8_t rx_payload_head2_ptr_valid)
{
	ASSERT_ERR((((uint32_t)rx_payload_head2_ptr << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_head2_ptr_valid << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_ADDR,  ((uint32_t)rx_payload_head2_ptr << 2) |((uint32_t)rx_payload_head2_ptr_valid << 0));
}

__INLINE void mac_hw0_mu0_rx_payload_head_2_ptr_unpack(uint32_t* rx_payload_head2_ptr, uint8_t* rx_payload_head2_ptr_valid)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_ADDR);

	*rx_payload_head2_ptr = (localVal & ((uint32_t)0xFFFFFFFC)) >>  2;
	*rx_payload_head2_ptr_valid = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t mac_hw0_mu0_rx_payload_head_2_ptr_rx_payload_head_2_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFFC)) >> 2);
}
__INLINE void mac_hw0_mu0_rx_payload_head_2_ptr_rx_payload_head_2_ptr_setf(uint32_t rxpayloadhead2ptr)
{
	ASSERT_ERR((((uint32_t)rxpayloadhead2ptr << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_ADDR) & ~((uint32_t)0xFFFFFFFC)) | ((uint32_t)rxpayloadhead2ptr <<2));
}
__INLINE uint8_t mac_hw0_mu0_rx_payload_head_2_ptr_rx_payload_head_2_ptr_valid_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_payload_head_2_ptr_rx_payload_head_2_ptr_valid_setf(uint8_t rxpayloadhead2ptrvalid)
{
	ASSERT_ERR((((uint32_t)rxpayloadhead2ptrvalid << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_PAYLOAD_HEAD_2_PTR_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)rxpayloadhead2ptrvalid <<0));
}

/**
 * @brief RX_HEADER_HEAD_PTR register definition
 *  Head Pointer of the Receive Header DMA channel is programmed here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:02 RX_HEADER_HEAD_PTR        0x0
 *    00    RX_HEADER_HEAD_PTR_VALID  0              
 * </pre>
 */
#define MAC_HW0_MU0_RX_HEADER_HEAD_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000081B8)
#define MAC_HW0_MU0_RX_HEADER_HEAD_PTR_OFFSET      0x000081B8
#define MAC_HW0_MU0_RX_HEADER_HEAD_PTR_INDEX       0x0000206E
#define MAC_HW0_MU0_RX_HEADER_HEAD_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_header_head_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_HEADER_HEAD_PTR_ADDR);
}

__INLINE void mac_hw0_mu0_rx_header_head_ptr_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_HEADER_HEAD_PTR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_HEADER_HEAD_PTR_RX_HEADER_HEAD_PTR_MASK    ((uint32_t)0xFFFFFFFC)
#define MAC_HW0_MU0_RX_HEADER_HEAD_PTR_RX_HEADER_HEAD_PTR_LSB    2
#define MAC_HW0_MU0_RX_HEADER_HEAD_PTR_RX_HEADER_HEAD_PTR_WIDTH    ((uint32_t)0x0000001E)
#define MAC_HW0_MU0_RX_HEADER_HEAD_PTR_RX_HEADER_HEAD_PTR_VALID_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_HEADER_HEAD_PTR_RX_HEADER_HEAD_PTR_VALID_POS    0

#define MAC_HW0_MU0_RX_HEADER_HEAD_PTR_RX_HEADER_HEAD_PTR_RST    0x0
#define MAC_HW0_MU0_RX_HEADER_HEAD_PTR_RX_HEADER_HEAD_PTR_VALID_RST    0x0

__INLINE void mac_hw0_mu0_rx_header_head_ptr_pack(uint32_t rx_header_head_ptr, uint8_t rx_header_head_ptr_valid)
{
	ASSERT_ERR((((uint32_t)rx_header_head_ptr << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_head_ptr_valid << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_HEADER_HEAD_PTR_ADDR,  ((uint32_t)rx_header_head_ptr << 2) |((uint32_t)rx_header_head_ptr_valid << 0));
}

__INLINE void mac_hw0_mu0_rx_header_head_ptr_unpack(uint32_t* rx_header_head_ptr, uint8_t* rx_header_head_ptr_valid)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_HEADER_HEAD_PTR_ADDR);

	*rx_header_head_ptr = (localVal & ((uint32_t)0xFFFFFFFC)) >>  2;
	*rx_header_head_ptr_valid = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t mac_hw0_mu0_rx_header_head_ptr_rx_header_head_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_HEADER_HEAD_PTR_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFFC)) >> 2);
}
__INLINE void mac_hw0_mu0_rx_header_head_ptr_rx_header_head_ptr_setf(uint32_t rxheaderheadptr)
{
	ASSERT_ERR((((uint32_t)rxheaderheadptr << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_HEADER_HEAD_PTR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_HEADER_HEAD_PTR_ADDR) & ~((uint32_t)0xFFFFFFFC)) | ((uint32_t)rxheaderheadptr <<2));
}
__INLINE uint8_t mac_hw0_mu0_rx_header_head_ptr_rx_header_head_ptr_valid_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_HEADER_HEAD_PTR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_header_head_ptr_rx_header_head_ptr_valid_setf(uint8_t rxheaderheadptrvalid)
{
	ASSERT_ERR((((uint32_t)rxheaderheadptrvalid << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_HEADER_HEAD_PTR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_HEADER_HEAD_PTR_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)rxheaderheadptrvalid <<0));
}

/**
 * @brief RX_PAYLOAD_HEAD_PTR register definition
 *  Head Pointer of the Receive Payload DMA channel is programmed here. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:02 RX_PAYLOAD_HEAD_PTR       0x0
 *    00    RX_PAYLOAD_HEAD_PTR_VALID 0              
 * </pre>
 */
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000081BC)
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_OFFSET      0x000081BC
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_INDEX       0x0000206F
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_payload_head_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_ADDR);
}

__INLINE void mac_hw0_mu0_rx_payload_head_ptr_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_RX_PAYLOAD_HEAD_PTR_MASK    ((uint32_t)0xFFFFFFFC)
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_RX_PAYLOAD_HEAD_PTR_LSB    2
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_RX_PAYLOAD_HEAD_PTR_WIDTH    ((uint32_t)0x0000001E)
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_RX_PAYLOAD_HEAD_PTR_VALID_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_RX_PAYLOAD_HEAD_PTR_VALID_POS    0

#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_RX_PAYLOAD_HEAD_PTR_RST    0x0
#define MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_RX_PAYLOAD_HEAD_PTR_VALID_RST    0x0

__INLINE void mac_hw0_mu0_rx_payload_head_ptr_pack(uint32_t rx_payload_head_ptr, uint8_t rx_payload_head_ptr_valid)
{
	ASSERT_ERR((((uint32_t)rx_payload_head_ptr << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_head_ptr_valid << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_ADDR,  ((uint32_t)rx_payload_head_ptr << 2) |((uint32_t)rx_payload_head_ptr_valid << 0));
}

__INLINE void mac_hw0_mu0_rx_payload_head_ptr_unpack(uint32_t* rx_payload_head_ptr, uint8_t* rx_payload_head_ptr_valid)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_ADDR);

	*rx_payload_head_ptr = (localVal & ((uint32_t)0xFFFFFFFC)) >>  2;
	*rx_payload_head_ptr_valid = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t mac_hw0_mu0_rx_payload_head_ptr_rx_payload_head_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFFC)) >> 2);
}
__INLINE void mac_hw0_mu0_rx_payload_head_ptr_rx_payload_head_ptr_setf(uint32_t rxpayloadheadptr)
{
	ASSERT_ERR((((uint32_t)rxpayloadheadptr << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_ADDR) & ~((uint32_t)0xFFFFFFFC)) | ((uint32_t)rxpayloadheadptr <<2));
}
__INLINE uint8_t mac_hw0_mu0_rx_payload_head_ptr_rx_payload_head_ptr_valid_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_payload_head_ptr_rx_payload_head_ptr_valid_setf(uint8_t rxpayloadheadptrvalid)
{
	ASSERT_ERR((((uint32_t)rxpayloadheadptrvalid << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_PAYLOAD_HEAD_PTR_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)rxpayloadheadptrvalid <<0));
}

/**
 * @brief DMA_THRESHOLD register definition
 *  Contains FIFO threshold value for DMA triggering register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:16 RX_FIFO_THRESHOLD         0x10
 *    07:00 TX_FIFO_THRESHOLD         0x10
 * </pre>
 */
#define MAC_HW0_MU0_DMA_THRESHOLD_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000081C0)
#define MAC_HW0_MU0_DMA_THRESHOLD_OFFSET      0x000081C0
#define MAC_HW0_MU0_DMA_THRESHOLD_INDEX       0x00002070
#define MAC_HW0_MU0_DMA_THRESHOLD_RESET       0x00100010

__INLINE uint32_t  mac_hw0_mu0_dma_threshold_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DMA_THRESHOLD_ADDR);
}

__INLINE void mac_hw0_mu0_dma_threshold_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DMA_THRESHOLD_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DMA_THRESHOLD_RX_FIFO_THRESHOLD_MASK    ((uint32_t)0x00FF0000)
#define MAC_HW0_MU0_DMA_THRESHOLD_RX_FIFO_THRESHOLD_LSB    16
#define MAC_HW0_MU0_DMA_THRESHOLD_RX_FIFO_THRESHOLD_WIDTH    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_DMA_THRESHOLD_TX_FIFO_THRESHOLD_MASK    ((uint32_t)0x000000FF)
#define MAC_HW0_MU0_DMA_THRESHOLD_TX_FIFO_THRESHOLD_LSB    0
#define MAC_HW0_MU0_DMA_THRESHOLD_TX_FIFO_THRESHOLD_WIDTH    ((uint32_t)0x00000008)

#define MAC_HW0_MU0_DMA_THRESHOLD_RX_FIFO_THRESHOLD_RST    0x10
#define MAC_HW0_MU0_DMA_THRESHOLD_TX_FIFO_THRESHOLD_RST    0x10

__INLINE void mac_hw0_mu0_dma_threshold_pack(uint8_t rx_fifo_threshold, uint8_t tx_fifo_threshold)
{
	ASSERT_ERR((((uint32_t)rx_fifo_threshold << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)tx_fifo_threshold << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_THRESHOLD_ADDR,  ((uint32_t)rx_fifo_threshold << 16) |((uint32_t)tx_fifo_threshold << 0));
}

__INLINE void mac_hw0_mu0_dma_threshold_unpack(uint8_t* rx_fifo_threshold, uint8_t* tx_fifo_threshold)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_THRESHOLD_ADDR);

	*rx_fifo_threshold = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*tx_fifo_threshold = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_dma_threshold_rx_fifo_threshold_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_THRESHOLD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void mac_hw0_mu0_dma_threshold_rx_fifo_threshold_setf(uint8_t rxfifothreshold)
{
	ASSERT_ERR((((uint32_t)rxfifothreshold << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_THRESHOLD_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_THRESHOLD_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)rxfifothreshold <<16));
}
__INLINE uint8_t mac_hw0_mu0_dma_threshold_tx_fifo_threshold_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_THRESHOLD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void mac_hw0_mu0_dma_threshold_tx_fifo_threshold_setf(uint8_t txfifothreshold)
{
	ASSERT_ERR((((uint32_t)txfifothreshold << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_THRESHOLD_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_THRESHOLD_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)txfifothreshold <<0));
}

/**
 * @brief CONT_DMA register definition
 *  Continue DMA Tx command register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    00    CONT_AFTER_NATT           0              
 * </pre>
 */
#define MAC_HW0_MU0_CONT_DMA_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000081C4)
#define MAC_HW0_MU0_CONT_DMA_OFFSET      0x000081C4
#define MAC_HW0_MU0_CONT_DMA_INDEX       0x00002071
#define MAC_HW0_MU0_CONT_DMA_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_cont_dma_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_CONT_DMA_ADDR);
}

__INLINE void mac_hw0_mu0_cont_dma_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_CONT_DMA_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_CONT_DMA_CONT_AFTER_NATT_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_CONT_DMA_CONT_AFTER_NATT_POS    0

#define MAC_HW0_MU0_CONT_DMA_CONT_AFTER_NATT_RST    0x0

__INLINE uint8_t mac_hw0_mu0_cont_dma_cont_after_natt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_CONT_DMA_ADDR);
	return (uint8_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_cont_dma_cont_after_natt_setf(uint8_t contafternatt)
{
	ASSERT_ERR((((uint32_t)contafternatt << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_CONT_DMA_ADDR, (uint32_t)contafternatt << 0);
}

/**
 * @brief RX_LIST_2_FRAME_TYPE register definition
 *  required frame types for LL2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30    NDP                       0              
 *    29:28 FRAME_TYPE_4              0x3
 *    27:24 SUB_FRAME_TYPE_4          0x0
 *    23:22 FRAME_TYPE_3              0x3
 *    21:18 SUB_FRAME_TYPE_3          0x0
 *    17:16 FRAME_TYPE_2              0x3
 *    15:12 SUB_FRAME_TYPE_2          0x0
 *    11:10 FRAME_TYPE_1              0x3
 *    09:06 SUB_FRAME_TYPE_1          0x0
 *    05:04 FRAME_TYPE_0              0x3
 *    03:00 SUB_FRAME_TYPE_0          0x0
 * </pre>
 */
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000081C8)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_OFFSET      0x000081C8
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_INDEX       0x00002072
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_RESET       0x30C30C30

__INLINE uint32_t  mac_hw0_mu0_rx_list_2_frame_type_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR);
}

__INLINE void mac_hw0_mu0_rx_list_2_frame_type_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_NDP_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_NDP_POS    30
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_4_MASK    ((uint32_t)0x30000000)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_4_LSB    28
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_4_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_4_MASK    ((uint32_t)0x0F000000)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_4_LSB    24
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_4_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_3_MASK    ((uint32_t)0x00C00000)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_3_LSB    22
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_3_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_3_MASK    ((uint32_t)0x003C0000)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_3_LSB    18
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_3_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_2_MASK    ((uint32_t)0x00030000)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_2_LSB    16
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_2_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_2_MASK    ((uint32_t)0x0000F000)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_2_LSB    12
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_2_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_1_MASK    ((uint32_t)0x00000C00)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_1_LSB    10
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_1_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_1_MASK    ((uint32_t)0x000003C0)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_1_LSB    6
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_1_WIDTH    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_0_MASK    ((uint32_t)0x00000030)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_0_LSB    4
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_0_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_0_MASK    ((uint32_t)0x0000000F)
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_0_LSB    0
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_0_WIDTH    ((uint32_t)0x00000004)

#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_NDP_RST    0x0
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_4_RST    0x3
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_4_RST    0x0
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_3_RST    0x3
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_3_RST    0x0
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_2_RST    0x3
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_2_RST    0x0
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_1_RST    0x3
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_1_RST    0x0
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_FRAME_TYPE_0_RST    0x3
#define MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_SUB_FRAME_TYPE_0_RST    0x0

__INLINE void mac_hw0_mu0_rx_list_2_frame_type_pack(uint8_t ndp, uint8_t frame_type_4, uint8_t sub_frame_type_4, uint8_t frame_type_3, uint8_t sub_frame_type_3, uint8_t frame_type_2, uint8_t sub_frame_type_2, uint8_t frame_type_1, uint8_t sub_frame_type_1, uint8_t frame_type_0, uint8_t sub_frame_type_0)
{
	ASSERT_ERR((((uint32_t)ndp << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)frame_type_4 << 28) & ~((uint32_t)0x30000000)) == 0);
	ASSERT_ERR((((uint32_t)sub_frame_type_4 << 24) & ~((uint32_t)0x0F000000)) == 0);
	ASSERT_ERR((((uint32_t)frame_type_3 << 22) & ~((uint32_t)0x00C00000)) == 0);
	ASSERT_ERR((((uint32_t)sub_frame_type_3 << 18) & ~((uint32_t)0x003C0000)) == 0);
	ASSERT_ERR((((uint32_t)frame_type_2 << 16) & ~((uint32_t)0x00030000)) == 0);
	ASSERT_ERR((((uint32_t)sub_frame_type_2 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)frame_type_1 << 10) & ~((uint32_t)0x00000C00)) == 0);
	ASSERT_ERR((((uint32_t)sub_frame_type_1 << 6) & ~((uint32_t)0x000003C0)) == 0);
	ASSERT_ERR((((uint32_t)frame_type_0 << 4) & ~((uint32_t)0x00000030)) == 0);
	ASSERT_ERR((((uint32_t)sub_frame_type_0 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR,  ((uint32_t)ndp << 30) |((uint32_t)frame_type_4 << 28) |((uint32_t)sub_frame_type_4 << 24) |((uint32_t)frame_type_3 << 22) |((uint32_t)sub_frame_type_3 << 18) |((uint32_t)frame_type_2 << 16) |((uint32_t)sub_frame_type_2 << 12) |((uint32_t)frame_type_1 << 10) |((uint32_t)sub_frame_type_1 << 6) |((uint32_t)frame_type_0 << 4) |((uint32_t)sub_frame_type_0 << 0));
}

__INLINE void mac_hw0_mu0_rx_list_2_frame_type_unpack(uint8_t* ndp, uint8_t* frame_type_4, uint8_t* sub_frame_type_4, uint8_t* frame_type_3, uint8_t* sub_frame_type_3, uint8_t* frame_type_2, uint8_t* sub_frame_type_2, uint8_t* frame_type_1, uint8_t* sub_frame_type_1, uint8_t* frame_type_0, uint8_t* sub_frame_type_0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR);

	*ndp = (localVal & ((uint32_t)0x40000000)) >>  30;
	*frame_type_4 = (localVal & ((uint32_t)0x30000000)) >>  28;
	*sub_frame_type_4 = (localVal & ((uint32_t)0x0F000000)) >>  24;
	*frame_type_3 = (localVal & ((uint32_t)0x00C00000)) >>  22;
	*sub_frame_type_3 = (localVal & ((uint32_t)0x003C0000)) >>  18;
	*frame_type_2 = (localVal & ((uint32_t)0x00030000)) >>  16;
	*sub_frame_type_2 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*frame_type_1 = (localVal & ((uint32_t)0x00000C00)) >>  10;
	*sub_frame_type_1 = (localVal & ((uint32_t)0x000003C0)) >>  6;
	*frame_type_0 = (localVal & ((uint32_t)0x00000030)) >>  4;
	*sub_frame_type_0 = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_list_2_frame_type_ndp_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_rx_list_2_frame_type_ndp_setf(uint8_t ndp)
{
	ASSERT_ERR((((uint32_t)ndp << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)ndp <<30));
}
__INLINE uint8_t mac_hw0_mu0_rx_list_2_frame_type_frame_type_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x30000000)) >> 28);
}
__INLINE void mac_hw0_mu0_rx_list_2_frame_type_frame_type_4_setf(uint8_t frametype4)
{
	ASSERT_ERR((((uint32_t)frametype4 << 28) & ~((uint32_t)0x30000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR) & ~((uint32_t)0x30000000)) | ((uint32_t)frametype4 <<28));
}
__INLINE uint8_t mac_hw0_mu0_rx_list_2_frame_type_sub_frame_type_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0F000000)) >> 24);
}
__INLINE void mac_hw0_mu0_rx_list_2_frame_type_sub_frame_type_4_setf(uint8_t subframetype4)
{
	ASSERT_ERR((((uint32_t)subframetype4 << 24) & ~((uint32_t)0x0F000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR) & ~((uint32_t)0x0F000000)) | ((uint32_t)subframetype4 <<24));
}
__INLINE uint8_t mac_hw0_mu0_rx_list_2_frame_type_frame_type_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00C00000)) >> 22);
}
__INLINE void mac_hw0_mu0_rx_list_2_frame_type_frame_type_3_setf(uint8_t frametype3)
{
	ASSERT_ERR((((uint32_t)frametype3 << 22) & ~((uint32_t)0x00C00000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR) & ~((uint32_t)0x00C00000)) | ((uint32_t)frametype3 <<22));
}
__INLINE uint8_t mac_hw0_mu0_rx_list_2_frame_type_sub_frame_type_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x003C0000)) >> 18);
}
__INLINE void mac_hw0_mu0_rx_list_2_frame_type_sub_frame_type_3_setf(uint8_t subframetype3)
{
	ASSERT_ERR((((uint32_t)subframetype3 << 18) & ~((uint32_t)0x003C0000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR) & ~((uint32_t)0x003C0000)) | ((uint32_t)subframetype3 <<18));
}
__INLINE uint8_t mac_hw0_mu0_rx_list_2_frame_type_frame_type_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00030000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_list_2_frame_type_frame_type_2_setf(uint8_t frametype2)
{
	ASSERT_ERR((((uint32_t)frametype2 << 16) & ~((uint32_t)0x00030000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR) & ~((uint32_t)0x00030000)) | ((uint32_t)frametype2 <<16));
}
__INLINE uint8_t mac_hw0_mu0_rx_list_2_frame_type_sub_frame_type_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void mac_hw0_mu0_rx_list_2_frame_type_sub_frame_type_2_setf(uint8_t subframetype2)
{
	ASSERT_ERR((((uint32_t)subframetype2 << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)subframetype2 <<12));
}
__INLINE uint8_t mac_hw0_mu0_rx_list_2_frame_type_frame_type_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000C00)) >> 10);
}
__INLINE void mac_hw0_mu0_rx_list_2_frame_type_frame_type_1_setf(uint8_t frametype1)
{
	ASSERT_ERR((((uint32_t)frametype1 << 10) & ~((uint32_t)0x00000C00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR) & ~((uint32_t)0x00000C00)) | ((uint32_t)frametype1 <<10));
}
__INLINE uint8_t mac_hw0_mu0_rx_list_2_frame_type_sub_frame_type_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000003C0)) >> 6);
}
__INLINE void mac_hw0_mu0_rx_list_2_frame_type_sub_frame_type_1_setf(uint8_t subframetype1)
{
	ASSERT_ERR((((uint32_t)subframetype1 << 6) & ~((uint32_t)0x000003C0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR) & ~((uint32_t)0x000003C0)) | ((uint32_t)subframetype1 <<6));
}
__INLINE uint8_t mac_hw0_mu0_rx_list_2_frame_type_frame_type_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000030)) >> 4);
}
__INLINE void mac_hw0_mu0_rx_list_2_frame_type_frame_type_0_setf(uint8_t frametype0)
{
	ASSERT_ERR((((uint32_t)frametype0 << 4) & ~((uint32_t)0x00000030)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR) & ~((uint32_t)0x00000030)) | ((uint32_t)frametype0 <<4));
}
__INLINE uint8_t mac_hw0_mu0_rx_list_2_frame_type_sub_frame_type_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_list_2_frame_type_sub_frame_type_0_setf(uint8_t subframetype0)
{
	ASSERT_ERR((((uint32_t)subframetype0 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_LIST_2_FRAME_TYPE_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)subframetype0 <<0));
}

/**
 * @brief DMA_RX_CELENO_MODES register definition
 *  Define Rx behavior in new Celeno modes register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    07:06 RX_CYCLIC_BUFFER_SIZE_LL2 0x0
 *    05:04 RX_CYCLIC_BUFFER_SIZE_LL1 0x0
 *    01    RX_CYCLIC_BUFFER_MODE     0              
 * </pre>
 */
#define MAC_HW0_MU0_DMA_RX_CELENO_MODES_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000081CC)
#define MAC_HW0_MU0_DMA_RX_CELENO_MODES_OFFSET      0x000081CC
#define MAC_HW0_MU0_DMA_RX_CELENO_MODES_INDEX       0x00002073
#define MAC_HW0_MU0_DMA_RX_CELENO_MODES_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_dma_rx_celeno_modes_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DMA_RX_CELENO_MODES_ADDR);
}

__INLINE void mac_hw0_mu0_dma_rx_celeno_modes_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DMA_RX_CELENO_MODES_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DMA_RX_CELENO_MODES_RX_CYCLIC_BUFFER_SIZE_LL_2_MASK    ((uint32_t)0x000000C0)
#define MAC_HW0_MU0_DMA_RX_CELENO_MODES_RX_CYCLIC_BUFFER_SIZE_LL_2_LSB    6
#define MAC_HW0_MU0_DMA_RX_CELENO_MODES_RX_CYCLIC_BUFFER_SIZE_LL_2_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_RX_CELENO_MODES_RX_CYCLIC_BUFFER_SIZE_LL_1_MASK    ((uint32_t)0x00000030)
#define MAC_HW0_MU0_DMA_RX_CELENO_MODES_RX_CYCLIC_BUFFER_SIZE_LL_1_LSB    4
#define MAC_HW0_MU0_DMA_RX_CELENO_MODES_RX_CYCLIC_BUFFER_SIZE_LL_1_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_RX_CELENO_MODES_RX_CYCLIC_BUFFER_MODE_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_DMA_RX_CELENO_MODES_RX_CYCLIC_BUFFER_MODE_POS    1

#define MAC_HW0_MU0_DMA_RX_CELENO_MODES_RX_CYCLIC_BUFFER_SIZE_LL_2_RST    0x0
#define MAC_HW0_MU0_DMA_RX_CELENO_MODES_RX_CYCLIC_BUFFER_SIZE_LL_1_RST    0x0
#define MAC_HW0_MU0_DMA_RX_CELENO_MODES_RX_CYCLIC_BUFFER_MODE_RST    0x0

__INLINE void mac_hw0_mu0_dma_rx_celeno_modes_pack(uint8_t rx_cyclic_buffer_size_ll2, uint8_t rx_cyclic_buffer_size_ll1, uint8_t rx_cyclic_buffer_mode)
{
	ASSERT_ERR((((uint32_t)rx_cyclic_buffer_size_ll2 << 6) & ~((uint32_t)0x000000C0)) == 0);
	ASSERT_ERR((((uint32_t)rx_cyclic_buffer_size_ll1 << 4) & ~((uint32_t)0x00000030)) == 0);
	ASSERT_ERR((((uint32_t)rx_cyclic_buffer_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_RX_CELENO_MODES_ADDR,  ((uint32_t)rx_cyclic_buffer_size_ll2 << 6) |((uint32_t)rx_cyclic_buffer_size_ll1 << 4) |((uint32_t)rx_cyclic_buffer_mode << 1));
}

__INLINE void mac_hw0_mu0_dma_rx_celeno_modes_unpack(uint8_t* rx_cyclic_buffer_size_ll2, uint8_t* rx_cyclic_buffer_size_ll1, uint8_t* rx_cyclic_buffer_mode)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_RX_CELENO_MODES_ADDR);

	*rx_cyclic_buffer_size_ll2 = (localVal & ((uint32_t)0x000000C0)) >>  6;
	*rx_cyclic_buffer_size_ll1 = (localVal & ((uint32_t)0x00000030)) >>  4;
	*rx_cyclic_buffer_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
}

__INLINE uint8_t mac_hw0_mu0_dma_rx_celeno_modes_rx_cyclic_buffer_size_ll_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_RX_CELENO_MODES_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000C0)) >> 6);
}
__INLINE void mac_hw0_mu0_dma_rx_celeno_modes_rx_cyclic_buffer_size_ll_2_setf(uint8_t rxcyclicbuffersizell2)
{
	ASSERT_ERR((((uint32_t)rxcyclicbuffersizell2 << 6) & ~((uint32_t)0x000000C0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_RX_CELENO_MODES_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_RX_CELENO_MODES_ADDR) & ~((uint32_t)0x000000C0)) | ((uint32_t)rxcyclicbuffersizell2 <<6));
}
__INLINE uint8_t mac_hw0_mu0_dma_rx_celeno_modes_rx_cyclic_buffer_size_ll_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_RX_CELENO_MODES_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000030)) >> 4);
}
__INLINE void mac_hw0_mu0_dma_rx_celeno_modes_rx_cyclic_buffer_size_ll_1_setf(uint8_t rxcyclicbuffersizell1)
{
	ASSERT_ERR((((uint32_t)rxcyclicbuffersizell1 << 4) & ~((uint32_t)0x00000030)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_RX_CELENO_MODES_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_RX_CELENO_MODES_ADDR) & ~((uint32_t)0x00000030)) | ((uint32_t)rxcyclicbuffersizell1 <<4));
}
__INLINE uint8_t mac_hw0_mu0_dma_rx_celeno_modes_rx_cyclic_buffer_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_RX_CELENO_MODES_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_dma_rx_celeno_modes_rx_cyclic_buffer_mode_setf(uint8_t rxcyclicbuffermode)
{
	ASSERT_ERR((((uint32_t)rxcyclicbuffermode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_RX_CELENO_MODES_ADDR, (REG_PL_RD(MAC_HW0_MU0_DMA_RX_CELENO_MODES_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)rxcyclicbuffermode <<1));
}

/**
 * @brief DMA_FW_PLD_START_PTR register definition
 *  DMA Payload FW start pointer and HW write pointer register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:05 DMA_FW_PLD_START_PTR      0x0
 * </pre>
 */
#define MAC_HW0_MU0_DMA_FW_PLD_START_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000081D0)
#define MAC_HW0_MU0_DMA_FW_PLD_START_PTR_OFFSET      0x000081D0
#define MAC_HW0_MU0_DMA_FW_PLD_START_PTR_INDEX       0x00002074
#define MAC_HW0_MU0_DMA_FW_PLD_START_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_dma_fw_pld_start_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DMA_FW_PLD_START_PTR_ADDR);
}

__INLINE void mac_hw0_mu0_dma_fw_pld_start_ptr_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DMA_FW_PLD_START_PTR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DMA_FW_PLD_START_PTR_DMA_FW_PLD_START_PTR_MASK    ((uint32_t)0xFFFFFFE0)
#define MAC_HW0_MU0_DMA_FW_PLD_START_PTR_DMA_FW_PLD_START_PTR_LSB    5
#define MAC_HW0_MU0_DMA_FW_PLD_START_PTR_DMA_FW_PLD_START_PTR_WIDTH    ((uint32_t)0x0000001B)

#define MAC_HW0_MU0_DMA_FW_PLD_START_PTR_DMA_FW_PLD_START_PTR_RST    0x0

__INLINE uint32_t mac_hw0_mu0_dma_fw_pld_start_ptr_dma_fw_pld_start_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_FW_PLD_START_PTR_ADDR);
	return (uint32_t)(localVal >> 5);
}
__INLINE void mac_hw0_mu0_dma_fw_pld_start_ptr_dma_fw_pld_start_ptr_setf(uint32_t dmafwpldstartptr)
{
	ASSERT_ERR((((uint32_t)dmafwpldstartptr << 5) & ~((uint32_t)0xFFFFFFE0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_FW_PLD_START_PTR_ADDR, (uint32_t)dmafwpldstartptr << 5);
}

/**
 * @brief DMA_FW_PLD_START_PTR_2 register definition
 *  DMA Payload FW start pointer2 and HW write pointer register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:05 DMA_FW_PLD_START_PTR2     0x0
 * </pre>
 */
#define MAC_HW0_MU0_DMA_FW_PLD_START_PTR_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000081D4)
#define MAC_HW0_MU0_DMA_FW_PLD_START_PTR_2_OFFSET      0x000081D4
#define MAC_HW0_MU0_DMA_FW_PLD_START_PTR_2_INDEX       0x00002075
#define MAC_HW0_MU0_DMA_FW_PLD_START_PTR_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_dma_fw_pld_start_ptr_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DMA_FW_PLD_START_PTR_2_ADDR);
}

__INLINE void mac_hw0_mu0_dma_fw_pld_start_ptr_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_DMA_FW_PLD_START_PTR_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_DMA_FW_PLD_START_PTR_2_DMA_FW_PLD_START_PTR_2_MASK    ((uint32_t)0xFFFFFFE0)
#define MAC_HW0_MU0_DMA_FW_PLD_START_PTR_2_DMA_FW_PLD_START_PTR_2_LSB    5
#define MAC_HW0_MU0_DMA_FW_PLD_START_PTR_2_DMA_FW_PLD_START_PTR_2_WIDTH    ((uint32_t)0x0000001B)

#define MAC_HW0_MU0_DMA_FW_PLD_START_PTR_2_DMA_FW_PLD_START_PTR_2_RST    0x0

__INLINE uint32_t mac_hw0_mu0_dma_fw_pld_start_ptr_2_dma_fw_pld_start_ptr_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_FW_PLD_START_PTR_2_ADDR);
	return (uint32_t)(localVal >> 5);
}
__INLINE void mac_hw0_mu0_dma_fw_pld_start_ptr_2_dma_fw_pld_start_ptr_2_setf(uint32_t dmafwpldstartptr2)
{
	ASSERT_ERR((((uint32_t)dmafwpldstartptr2 << 5) & ~((uint32_t)0xFFFFFFE0)) == 0);
	REG_PL_WR(MAC_HW0_MU0_DMA_FW_PLD_START_PTR_2_ADDR, (uint32_t)dmafwpldstartptr2 << 5);
}

/**
 * @brief CYCLIC_BUFFER_READ_PTR register definition
 *  Cyclic Buffer FW read pointer for LL1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 FW_CYCLIC_BUFFER_READ_PTR 0x0
 * </pre>
 */
#define MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000081D8)
#define MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_OFFSET      0x000081D8
#define MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_INDEX       0x00002076
#define MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_cyclic_buffer_read_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_ADDR);
}

__INLINE void mac_hw0_mu0_cyclic_buffer_read_ptr_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_FW_CYCLIC_BUFFER_READ_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_FW_CYCLIC_BUFFER_READ_PTR_LSB    0
#define MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_FW_CYCLIC_BUFFER_READ_PTR_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_FW_CYCLIC_BUFFER_READ_PTR_RST    0x0

__INLINE uint32_t mac_hw0_mu0_cyclic_buffer_read_ptr_fw_cyclic_buffer_read_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_cyclic_buffer_read_ptr_fw_cyclic_buffer_read_ptr_setf(uint32_t fwcyclicbufferreadptr)
{
	ASSERT_ERR((((uint32_t)fwcyclicbufferreadptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_ADDR, (uint32_t)fwcyclicbufferreadptr << 0);
}

/**
 * @brief CYCLIC_BUFFER_READ_PTR_2 register definition
 *  Cyclic Buffer FW read pointer for LL2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 FW_CYCLIC_BUFFER_READ_PTR2 0x0
 * </pre>
 */
#define MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x000081DC)
#define MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_2_OFFSET      0x000081DC
#define MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_2_INDEX       0x00002077
#define MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_cyclic_buffer_read_ptr_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_2_ADDR);
}

__INLINE void mac_hw0_mu0_cyclic_buffer_read_ptr_2_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_2_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_2_FW_CYCLIC_BUFFER_READ_PTR_2_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_2_FW_CYCLIC_BUFFER_READ_PTR_2_LSB    0
#define MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_2_FW_CYCLIC_BUFFER_READ_PTR_2_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_2_FW_CYCLIC_BUFFER_READ_PTR_2_RST    0x0

__INLINE uint32_t mac_hw0_mu0_cyclic_buffer_read_ptr_2_fw_cyclic_buffer_read_ptr_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_2_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void mac_hw0_mu0_cyclic_buffer_read_ptr_2_fw_cyclic_buffer_read_ptr_2_setf(uint32_t fwcyclicbufferreadptr2)
{
	ASSERT_ERR((((uint32_t)fwcyclicbufferreadptr2 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(MAC_HW0_MU0_CYCLIC_BUFFER_READ_PTR_2_ADDR, (uint32_t)fwcyclicbufferreadptr2 << 0);
}

/**
 * @brief AMSDU_HISTOGRAM_1 register definition
 *  AMSDU histogram register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 AMSDU_3_COUNT             0x0
 *    11:00 AMSDU_2_COUNT             0x0
 * </pre>
 */
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008200)
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_1_OFFSET      0x00008200
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_1_INDEX       0x00002080
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_amsdu_histogram_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_AMSDU_HISTOGRAM_1_ADDR);
}

// field definitions
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_1_AMSDU_3_COUNT_MASK    ((uint32_t)0x0FFF0000)
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_1_AMSDU_3_COUNT_LSB    16
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_1_AMSDU_3_COUNT_WIDTH    ((uint32_t)0x0000000C)
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_1_AMSDU_2_COUNT_MASK    ((uint32_t)0x00000FFF)
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_1_AMSDU_2_COUNT_LSB    0
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_1_AMSDU_2_COUNT_WIDTH    ((uint32_t)0x0000000C)

#define MAC_HW0_MU0_AMSDU_HISTOGRAM_1_AMSDU_3_COUNT_RST    0x0
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_1_AMSDU_2_COUNT_RST    0x0

__INLINE void mac_hw0_mu0_amsdu_histogram_1_unpack(uint16_t* amsdu_3_count, uint16_t* amsdu_2_count)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AMSDU_HISTOGRAM_1_ADDR);

	*amsdu_3_count = (localVal & ((uint32_t)0x0FFF0000)) >>  16;
	*amsdu_2_count = (localVal & ((uint32_t)0x00000FFF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_amsdu_histogram_1_amsdu_3_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AMSDU_HISTOGRAM_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0FFF0000)) >> 16);
}
__INLINE uint16_t mac_hw0_mu0_amsdu_histogram_1_amsdu_2_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AMSDU_HISTOGRAM_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x00000FFF)) >> 0);
}

/**
 * @brief AMSDU_HISTOGRAM_2 register definition
 *  AMSDU histogram register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27:16 AMSDU_5_COUNT             0x0
 *    11:00 AMSDU_4_COUNT             0x0
 * </pre>
 */
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008204)
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_2_OFFSET      0x00008204
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_2_INDEX       0x00002081
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_amsdu_histogram_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_AMSDU_HISTOGRAM_2_ADDR);
}

// field definitions
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_2_AMSDU_5_COUNT_MASK    ((uint32_t)0x0FFF0000)
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_2_AMSDU_5_COUNT_LSB    16
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_2_AMSDU_5_COUNT_WIDTH    ((uint32_t)0x0000000C)
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_2_AMSDU_4_COUNT_MASK    ((uint32_t)0x00000FFF)
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_2_AMSDU_4_COUNT_LSB    0
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_2_AMSDU_4_COUNT_WIDTH    ((uint32_t)0x0000000C)

#define MAC_HW0_MU0_AMSDU_HISTOGRAM_2_AMSDU_5_COUNT_RST    0x0
#define MAC_HW0_MU0_AMSDU_HISTOGRAM_2_AMSDU_4_COUNT_RST    0x0

__INLINE void mac_hw0_mu0_amsdu_histogram_2_unpack(uint16_t* amsdu_5_count, uint16_t* amsdu_4_count)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AMSDU_HISTOGRAM_2_ADDR);

	*amsdu_5_count = (localVal & ((uint32_t)0x0FFF0000)) >>  16;
	*amsdu_4_count = (localVal & ((uint32_t)0x00000FFF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_amsdu_histogram_2_amsdu_5_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AMSDU_HISTOGRAM_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0FFF0000)) >> 16);
}
__INLINE uint16_t mac_hw0_mu0_amsdu_histogram_2_amsdu_4_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_AMSDU_HISTOGRAM_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x00000FFF)) >> 0);
}

/**
 * @brief EDCA_AC_HAS_DATA_SET register definition
 *  Indicates whether an AC queue in SW has data register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    03    AC_3_HAS_DATA             0              
 *    02    AC_2_HAS_DATA             0              
 *    01    AC_1_HAS_DATA             0              
 *    00    AC_0_HAS_DATA             0              
 * </pre>
 */
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008210)
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_OFFSET      0x00008210
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_INDEX       0x00002084
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_RESET       0x00000000

__INLINE void mac_hw0_mu0_edca_ac_has_data_set_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_AC_3_HAS_DATA_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_AC_3_HAS_DATA_POS    3
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_AC_2_HAS_DATA_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_AC_2_HAS_DATA_POS    2
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_AC_1_HAS_DATA_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_AC_1_HAS_DATA_POS    1
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_AC_0_HAS_DATA_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_AC_0_HAS_DATA_POS    0

#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_AC_3_HAS_DATA_RST    0x0
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_AC_2_HAS_DATA_RST    0x0
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_AC_1_HAS_DATA_RST    0x0
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_AC_0_HAS_DATA_RST    0x0

__INLINE void mac_hw0_mu0_edca_ac_has_data_set_pack(uint8_t ac_3_has_data, uint8_t ac_2_has_data, uint8_t ac_1_has_data, uint8_t ac_0_has_data)
{
	ASSERT_ERR((((uint32_t)ac_3_has_data << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_has_data << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_has_data << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_has_data << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_ADDR,  ((uint32_t)ac_3_has_data << 3) |((uint32_t)ac_2_has_data << 2) |((uint32_t)ac_1_has_data << 1) |((uint32_t)ac_0_has_data << 0));
}

__INLINE void mac_hw0_mu0_edca_ac_has_data_set_ac_3_has_data_setf(uint8_t ac3hasdata)
{
	ASSERT_ERR((((uint32_t)ac3hasdata << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)ac3hasdata <<3));
}
__INLINE void mac_hw0_mu0_edca_ac_has_data_set_ac_2_has_data_setf(uint8_t ac2hasdata)
{
	ASSERT_ERR((((uint32_t)ac2hasdata << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)ac2hasdata <<2));
}
__INLINE void mac_hw0_mu0_edca_ac_has_data_set_ac_1_has_data_setf(uint8_t ac1hasdata)
{
	ASSERT_ERR((((uint32_t)ac1hasdata << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)ac1hasdata <<1));
}
__INLINE void mac_hw0_mu0_edca_ac_has_data_set_ac_0_has_data_setf(uint8_t ac0hasdata)
{
	ASSERT_ERR((((uint32_t)ac0hasdata << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_HAS_DATA_SET_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)ac0hasdata <<0));
}

/**
 * @brief EDCA_AC_HAS_DATA_CLEAR register definition
 *  Indicates whether an AC queue in SW has data register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    03    AC_3_HAS_DATA             0              
 *    02    AC_2_HAS_DATA             0              
 *    01    AC_1_HAS_DATA             0              
 *    00    AC_0_HAS_DATA             0              
 * </pre>
 */
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008214)
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_OFFSET      0x00008214
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_INDEX       0x00002085
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_RESET       0x00000000

__INLINE void mac_hw0_mu0_edca_ac_has_data_clear_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_AC_3_HAS_DATA_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_AC_3_HAS_DATA_POS    3
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_AC_2_HAS_DATA_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_AC_2_HAS_DATA_POS    2
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_AC_1_HAS_DATA_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_AC_1_HAS_DATA_POS    1
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_AC_0_HAS_DATA_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_AC_0_HAS_DATA_POS    0

#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_AC_3_HAS_DATA_RST    0x0
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_AC_2_HAS_DATA_RST    0x0
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_AC_1_HAS_DATA_RST    0x0
#define MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_AC_0_HAS_DATA_RST    0x0

__INLINE void mac_hw0_mu0_edca_ac_has_data_clear_pack(uint8_t ac_3_has_data, uint8_t ac_2_has_data, uint8_t ac_1_has_data, uint8_t ac_0_has_data)
{
	ASSERT_ERR((((uint32_t)ac_3_has_data << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_has_data << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_has_data << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_has_data << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_ADDR,  ((uint32_t)ac_3_has_data << 3) |((uint32_t)ac_2_has_data << 2) |((uint32_t)ac_1_has_data << 1) |((uint32_t)ac_0_has_data << 0));
}

__INLINE void mac_hw0_mu0_edca_ac_has_data_clear_ac_3_has_data_setf(uint8_t ac3hasdata)
{
	ASSERT_ERR((((uint32_t)ac3hasdata << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)ac3hasdata <<3));
}
__INLINE void mac_hw0_mu0_edca_ac_has_data_clear_ac_2_has_data_setf(uint8_t ac2hasdata)
{
	ASSERT_ERR((((uint32_t)ac2hasdata << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)ac2hasdata <<2));
}
__INLINE void mac_hw0_mu0_edca_ac_has_data_clear_ac_1_has_data_setf(uint8_t ac1hasdata)
{
	ASSERT_ERR((((uint32_t)ac1hasdata << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)ac1hasdata <<1));
}
__INLINE void mac_hw0_mu0_edca_ac_has_data_clear_ac_0_has_data_setf(uint8_t ac0hasdata)
{
	ASSERT_ERR((((uint32_t)ac0hasdata << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_EDCA_AC_HAS_DATA_CLEAR_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)ac0hasdata <<0));
}

/**
 * @brief MOT_1 register definition
 *  Provides the value of the TXOP for EDCA, HCCA and RD. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 AC_1_MOT                  0x0
 *    15:00 AC_0_MOT                  0x0
 * </pre>
 */
#define MAC_HW0_MU0_MOT_1_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008228)
#define MAC_HW0_MU0_MOT_1_OFFSET      0x00008228
#define MAC_HW0_MU0_MOT_1_INDEX       0x0000208A
#define MAC_HW0_MU0_MOT_1_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_mot_1_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MOT_1_ADDR);
}

// field definitions
#define MAC_HW0_MU0_MOT_1_AC_1_MOT_MASK     ((uint32_t)0xFFFF0000)
#define MAC_HW0_MU0_MOT_1_AC_1_MOT_LSB      16
#define MAC_HW0_MU0_MOT_1_AC_1_MOT_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_MOT_1_AC_0_MOT_MASK     ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_MOT_1_AC_0_MOT_LSB      0
#define MAC_HW0_MU0_MOT_1_AC_0_MOT_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_MOT_1_AC_1_MOT_RST      0x0
#define MAC_HW0_MU0_MOT_1_AC_0_MOT_RST      0x0

__INLINE void mac_hw0_mu0_mot_1_unpack(uint16_t* ac_1_mot, uint16_t* ac_0_mot)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MOT_1_ADDR);

	*ac_1_mot = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*ac_0_mot = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_mot_1_ac_1_mot_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MOT_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint16_t mac_hw0_mu0_mot_1_ac_0_mot_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MOT_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}

/**
 * @brief MOT_2 register definition
 *  Provides the value of the TXOP for EDCA, HCCA and RD. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 AC_3_MOT                  0x2F
 *    15:00 AC_2_MOT                  0x5E
 * </pre>
 */
#define MAC_HW0_MU0_MOT_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000822C)
#define MAC_HW0_MU0_MOT_2_OFFSET      0x0000822C
#define MAC_HW0_MU0_MOT_2_INDEX       0x0000208B
#define MAC_HW0_MU0_MOT_2_RESET       0x002F005E

__INLINE uint32_t  mac_hw0_mu0_mot_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MOT_2_ADDR);
}

// field definitions
#define MAC_HW0_MU0_MOT_2_AC_3_MOT_MASK     ((uint32_t)0xFFFF0000)
#define MAC_HW0_MU0_MOT_2_AC_3_MOT_LSB      16
#define MAC_HW0_MU0_MOT_2_AC_3_MOT_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_MOT_2_AC_2_MOT_MASK     ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_MOT_2_AC_2_MOT_LSB      0
#define MAC_HW0_MU0_MOT_2_AC_2_MOT_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_MOT_2_AC_3_MOT_RST      0x2F
#define MAC_HW0_MU0_MOT_2_AC_2_MOT_RST      0x5E

__INLINE void mac_hw0_mu0_mot_2_unpack(uint16_t* ac_3_mot, uint16_t* ac_2_mot)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MOT_2_ADDR);

	*ac_3_mot = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*ac_2_mot = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_mot_2_ac_3_mot_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MOT_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint16_t mac_hw0_mu0_mot_2_ac_2_mot_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MOT_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}

/**
 * @brief MOT_3 register definition
 *  Provides the value of the TXOP for EDCA, HCCA and RD. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 MISC_MOT                  0x0
 *    15:00 HCCA_QAPMOT               0x0
 * </pre>
 */
#define MAC_HW0_MU0_MOT_3_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008230)
#define MAC_HW0_MU0_MOT_3_OFFSET      0x00008230
#define MAC_HW0_MU0_MOT_3_INDEX       0x0000208C
#define MAC_HW0_MU0_MOT_3_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_mot_3_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MOT_3_ADDR);
}

// field definitions
#define MAC_HW0_MU0_MOT_3_MISC_MOT_MASK     ((uint32_t)0xFFFF0000)
#define MAC_HW0_MU0_MOT_3_MISC_MOT_LSB      16
#define MAC_HW0_MU0_MOT_3_MISC_MOT_WIDTH    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_MOT_3_HCCA_QAPMOT_MASK    ((uint32_t)0x0000FFFF)
#define MAC_HW0_MU0_MOT_3_HCCA_QAPMOT_LSB    0
#define MAC_HW0_MU0_MOT_3_HCCA_QAPMOT_WIDTH    ((uint32_t)0x00000010)

#define MAC_HW0_MU0_MOT_3_MISC_MOT_RST      0x0
#define MAC_HW0_MU0_MOT_3_HCCA_QAPMOT_RST    0x0

__INLINE void mac_hw0_mu0_mot_3_unpack(uint16_t* misc_mot, uint16_t* hcca_qapmot)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MOT_3_ADDR);

	*misc_mot = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*hcca_qapmot = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t mac_hw0_mu0_mot_3_misc_mot_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MOT_3_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint16_t mac_hw0_mu0_mot_3_hcca_qapmot_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MOT_3_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}

/**
 * @brief TIMER_INT_EVENT_RAW_STATUS register definition
 *  Indicates TIMER interrupt events raw status register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21    TIMER_RX_TRIGGER2         0              
 *    17    TIMER_RX_TRIGGER          0              
 *    14    TIMER_TX_TRIGGER          0              
 * </pre>
 */
#define MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008240)
#define MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_OFFSET      0x00008240
#define MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_INDEX       0x00002090
#define MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_timer_int_event_raw_status_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_ADDR);
}

// field definitions
#define MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_TIMER_RX_TRIGGER_2_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_TIMER_RX_TRIGGER_2_POS    21
#define MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_TIMER_RX_TRIGGER_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_TIMER_RX_TRIGGER_POS    17
#define MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_TIMER_TX_TRIGGER_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_TIMER_TX_TRIGGER_POS    14

#define MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_TIMER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_TIMER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_TIMER_TX_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_timer_int_event_raw_status_unpack(uint8_t* timer_rx_trigger2, uint8_t* timer_rx_trigger, uint8_t* timer_tx_trigger)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_ADDR);

	*timer_rx_trigger2 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*timer_rx_trigger = (localVal & ((uint32_t)0x00020000)) >>  17;
	*timer_tx_trigger = (localVal & ((uint32_t)0x00004000)) >>  14;
}

__INLINE uint8_t mac_hw0_mu0_timer_int_event_raw_status_timer_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t mac_hw0_mu0_timer_int_event_raw_status_timer_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t mac_hw0_mu0_timer_int_event_raw_status_timer_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_RAW_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}

/**
 * @brief TIMER_INT_EVENT_EN_SMAC register definition
 *  TIMER interrupt events enable SMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21    TIMER_RX_TRIGGER2         0              
 *    17    TIMER_RX_TRIGGER          0              
 *    14    TIMER_TX_TRIGGER          0              
 * </pre>
 */
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008244)
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_OFFSET      0x00008244
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_INDEX       0x00002091
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_timer_int_event_en_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_ADDR);
}

__INLINE void mac_hw0_mu0_timer_int_event_en_smac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_TIMER_RX_TRIGGER_2_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_TIMER_RX_TRIGGER_2_POS    21
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_TIMER_RX_TRIGGER_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_TIMER_RX_TRIGGER_POS    17
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_TIMER_TX_TRIGGER_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_TIMER_TX_TRIGGER_POS    14

#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_TIMER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_TIMER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_TIMER_TX_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_timer_int_event_en_smac_pack(uint8_t timer_rx_trigger2, uint8_t timer_rx_trigger, uint8_t timer_tx_trigger)
{
	ASSERT_ERR((((uint32_t)timer_rx_trigger2 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)timer_rx_trigger << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)timer_tx_trigger << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_ADDR,  ((uint32_t)timer_rx_trigger2 << 21) |((uint32_t)timer_rx_trigger << 17) |((uint32_t)timer_tx_trigger << 14));
}

__INLINE void mac_hw0_mu0_timer_int_event_en_smac_unpack(uint8_t* timer_rx_trigger2, uint8_t* timer_rx_trigger, uint8_t* timer_tx_trigger)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_ADDR);

	*timer_rx_trigger2 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*timer_rx_trigger = (localVal & ((uint32_t)0x00020000)) >>  17;
	*timer_tx_trigger = (localVal & ((uint32_t)0x00004000)) >>  14;
}

__INLINE uint8_t mac_hw0_mu0_timer_int_event_en_smac_timer_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_timer_int_event_en_smac_timer_rx_trigger_2_setf(uint8_t timerrxtrigger2)
{
	ASSERT_ERR((((uint32_t)timerrxtrigger2 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)timerrxtrigger2 <<21));
}
__INLINE uint8_t mac_hw0_mu0_timer_int_event_en_smac_timer_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_timer_int_event_en_smac_timer_rx_trigger_setf(uint8_t timerrxtrigger)
{
	ASSERT_ERR((((uint32_t)timerrxtrigger << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)timerrxtrigger <<17));
}
__INLINE uint8_t mac_hw0_mu0_timer_int_event_en_smac_timer_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_timer_int_event_en_smac_timer_tx_trigger_setf(uint8_t timertxtrigger)
{
	ASSERT_ERR((((uint32_t)timertxtrigger << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_SMAC_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)timertxtrigger <<14));
}

/**
 * @brief TIMER_INT_EVENT_STATUS_UMAC register definition
 *  TIMER interrupt events status UMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21    TIMER_RX_TRIGGER2         0              
 *    17    TIMER_RX_TRIGGER          0              
 *    14    TIMER_TX_TRIGGER          0              
 * </pre>
 */
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008248)
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_OFFSET      0x00008248
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_INDEX       0x00002092
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_timer_int_event_status_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_TIMER_RX_TRIGGER_2_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_TIMER_RX_TRIGGER_2_POS    21
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_TIMER_RX_TRIGGER_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_TIMER_RX_TRIGGER_POS    17
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_TIMER_TX_TRIGGER_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_TIMER_TX_TRIGGER_POS    14

#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_TIMER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_TIMER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_TIMER_TX_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_timer_int_event_status_umac_unpack(uint8_t* timer_rx_trigger2, uint8_t* timer_rx_trigger, uint8_t* timer_tx_trigger)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_ADDR);

	*timer_rx_trigger2 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*timer_rx_trigger = (localVal & ((uint32_t)0x00020000)) >>  17;
	*timer_tx_trigger = (localVal & ((uint32_t)0x00004000)) >>  14;
}

__INLINE uint8_t mac_hw0_mu0_timer_int_event_status_umac_timer_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t mac_hw0_mu0_timer_int_event_status_umac_timer_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t mac_hw0_mu0_timer_int_event_status_umac_timer_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}

/**
 * @brief TIMER_INT_EVENT_STATUS_SMAC register definition
 *  TIMER interrupt events status SMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21    TIMER_RX_TRIGGER2         0              
 *    17    TIMER_RX_TRIGGER          0              
 *    14    TIMER_TX_TRIGGER          0              
 * </pre>
 */
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000824C)
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_OFFSET      0x0000824C
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_INDEX       0x00002093
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_timer_int_event_status_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_TIMER_RX_TRIGGER_2_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_TIMER_RX_TRIGGER_2_POS    21
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_TIMER_RX_TRIGGER_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_TIMER_RX_TRIGGER_POS    17
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_TIMER_TX_TRIGGER_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_TIMER_TX_TRIGGER_POS    14

#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_TIMER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_TIMER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_TIMER_TX_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_timer_int_event_status_smac_unpack(uint8_t* timer_rx_trigger2, uint8_t* timer_rx_trigger, uint8_t* timer_tx_trigger)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_ADDR);

	*timer_rx_trigger2 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*timer_rx_trigger = (localVal & ((uint32_t)0x00020000)) >>  17;
	*timer_tx_trigger = (localVal & ((uint32_t)0x00004000)) >>  14;
}

__INLINE uint8_t mac_hw0_mu0_timer_int_event_status_smac_timer_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t mac_hw0_mu0_timer_int_event_status_smac_timer_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t mac_hw0_mu0_timer_int_event_status_smac_timer_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_SMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}

/**
 * @brief TIMER_INT_EVENT_FORCE register definition
 *  TIMER interrupt events force register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21    TIMER_RX_TRIGGER2         0              
 *    17    TIMER_RX_TRIGGER          0              
 *    14    TIMER_TX_TRIGGER          0              
 * </pre>
 */
#define MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008250)
#define MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_OFFSET      0x00008250
#define MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_INDEX       0x00002094
#define MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_timer_int_event_force_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_ADDR);
}

__INLINE void mac_hw0_mu0_timer_int_event_force_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_TIMER_RX_TRIGGER_2_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_TIMER_RX_TRIGGER_2_POS    21
#define MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_TIMER_RX_TRIGGER_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_TIMER_RX_TRIGGER_POS    17
#define MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_TIMER_TX_TRIGGER_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_TIMER_TX_TRIGGER_POS    14

#define MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_TIMER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_TIMER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_TIMER_TX_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_timer_int_event_force_pack(uint8_t timer_rx_trigger2, uint8_t timer_rx_trigger, uint8_t timer_tx_trigger)
{
	ASSERT_ERR((((uint32_t)timer_rx_trigger2 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)timer_rx_trigger << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)timer_tx_trigger << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_ADDR,  ((uint32_t)timer_rx_trigger2 << 21) |((uint32_t)timer_rx_trigger << 17) |((uint32_t)timer_tx_trigger << 14));
}

__INLINE void mac_hw0_mu0_timer_int_event_force_unpack(uint8_t* timer_rx_trigger2, uint8_t* timer_rx_trigger, uint8_t* timer_tx_trigger)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_ADDR);

	*timer_rx_trigger2 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*timer_rx_trigger = (localVal & ((uint32_t)0x00020000)) >>  17;
	*timer_tx_trigger = (localVal & ((uint32_t)0x00004000)) >>  14;
}

__INLINE uint8_t mac_hw0_mu0_timer_int_event_force_timer_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_timer_int_event_force_timer_rx_trigger_2_setf(uint8_t timerrxtrigger2)
{
	ASSERT_ERR((((uint32_t)timerrxtrigger2 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)timerrxtrigger2 <<21));
}
__INLINE uint8_t mac_hw0_mu0_timer_int_event_force_timer_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_timer_int_event_force_timer_rx_trigger_setf(uint8_t timerrxtrigger)
{
	ASSERT_ERR((((uint32_t)timerrxtrigger << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)timerrxtrigger <<17));
}
__INLINE uint8_t mac_hw0_mu0_timer_int_event_force_timer_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_timer_int_event_force_timer_tx_trigger_setf(uint8_t timertxtrigger)
{
	ASSERT_ERR((((uint32_t)timertxtrigger << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_FORCE_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)timertxtrigger <<14));
}

/**
 * @brief TIMER_INT_MAC_SOURCE_UMAC register definition
 *  Indicates UMAC TIMER interrupt MAC source register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008254)
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_UMAC_OFFSET      0x00008254
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_UMAC_INDEX       0x00002095
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_timer_int_mac_source_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_UMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_UMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_timer_int_mac_source_umac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_UMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief TIMER_INT_MAC_SOURCE_SMAC register definition
 *  Indicates SMAC TIMER interrupt MAC source register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 INT_SOURCE_BIT_MAP        0x0
 * </pre>
 */
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_SMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008258)
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_SMAC_OFFSET      0x00008258
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_SMAC_INDEX       0x00002096
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_SMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_timer_int_mac_source_smac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_SMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_LSB    0
#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_SMAC_INT_SOURCE_BIT_MAP_RST    0x0

__INLINE uint32_t mac_hw0_mu0_timer_int_mac_source_smac_int_source_bit_map_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_MAC_SOURCE_SMAC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_HTP_S_PTR register definition
 *  Current value of the HTP status pointer for deb register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 HTP_STATUS_POINTER        0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_HTP_S_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008520)
#define MAC_HW0_MU0_DEBUG_HTP_S_PTR_OFFSET      0x00008520
#define MAC_HW0_MU0_DEBUG_HTP_S_PTR_INDEX       0x00002148
#define MAC_HW0_MU0_DEBUG_HTP_S_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_htp_s_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_HTP_S_PTR_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_HTP_S_PTR_HTP_STATUS_POINTER_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEBUG_HTP_S_PTR_HTP_STATUS_POINTER_LSB    0
#define MAC_HW0_MU0_DEBUG_HTP_S_PTR_HTP_STATUS_POINTER_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEBUG_HTP_S_PTR_HTP_STATUS_POINTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_debug_htp_s_ptr_htp_status_pointer_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_HTP_S_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_BCN_S_PTR register definition
 *  Current value of the Beacon status pointer for debug. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 BCN_STATUS_POINTER        0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_BCN_S_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008524)
#define MAC_HW0_MU0_DEBUG_BCN_S_PTR_OFFSET      0x00008524
#define MAC_HW0_MU0_DEBUG_BCN_S_PTR_INDEX       0x00002149
#define MAC_HW0_MU0_DEBUG_BCN_S_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_bcn_s_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_BCN_S_PTR_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_BCN_S_PTR_BCN_STATUS_POINTER_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEBUG_BCN_S_PTR_BCN_STATUS_POINTER_LSB    0
#define MAC_HW0_MU0_DEBUG_BCN_S_PTR_BCN_STATUS_POINTER_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEBUG_BCN_S_PTR_BCN_STATUS_POINTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_debug_bcn_s_ptr_bcn_status_pointer_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_BCN_S_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_AC_0_S_PTR register definition
 *  Current value of the AC_BK status pointer for debug. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 AC_0_STATUS_POINTER       0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_AC_0_S_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008528)
#define MAC_HW0_MU0_DEBUG_AC_0_S_PTR_OFFSET      0x00008528
#define MAC_HW0_MU0_DEBUG_AC_0_S_PTR_INDEX       0x0000214A
#define MAC_HW0_MU0_DEBUG_AC_0_S_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_ac_0_s_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_AC_0_S_PTR_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_AC_0_S_PTR_AC_0_STATUS_POINTER_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEBUG_AC_0_S_PTR_AC_0_STATUS_POINTER_LSB    0
#define MAC_HW0_MU0_DEBUG_AC_0_S_PTR_AC_0_STATUS_POINTER_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEBUG_AC_0_S_PTR_AC_0_STATUS_POINTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_debug_ac_0_s_ptr_ac_0_status_pointer_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_AC_0_S_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_AC_1_S_PTR register definition
 *  Current value of the AC_BE status pointer for debug. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 AC_1_STATUS_POINTER       0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_AC_1_S_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000852C)
#define MAC_HW0_MU0_DEBUG_AC_1_S_PTR_OFFSET      0x0000852C
#define MAC_HW0_MU0_DEBUG_AC_1_S_PTR_INDEX       0x0000214B
#define MAC_HW0_MU0_DEBUG_AC_1_S_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_ac_1_s_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_AC_1_S_PTR_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_AC_1_S_PTR_AC_1_STATUS_POINTER_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEBUG_AC_1_S_PTR_AC_1_STATUS_POINTER_LSB    0
#define MAC_HW0_MU0_DEBUG_AC_1_S_PTR_AC_1_STATUS_POINTER_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEBUG_AC_1_S_PTR_AC_1_STATUS_POINTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_debug_ac_1_s_ptr_ac_1_status_pointer_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_AC_1_S_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_AC_2_S_PTR register definition
 *  Current value of the AC_VI status pointer for debug. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 AC_2_STATUS_POINTER       0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_AC_2_S_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008530)
#define MAC_HW0_MU0_DEBUG_AC_2_S_PTR_OFFSET      0x00008530
#define MAC_HW0_MU0_DEBUG_AC_2_S_PTR_INDEX       0x0000214C
#define MAC_HW0_MU0_DEBUG_AC_2_S_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_ac_2_s_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_AC_2_S_PTR_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_AC_2_S_PTR_AC_2_STATUS_POINTER_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEBUG_AC_2_S_PTR_AC_2_STATUS_POINTER_LSB    0
#define MAC_HW0_MU0_DEBUG_AC_2_S_PTR_AC_2_STATUS_POINTER_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEBUG_AC_2_S_PTR_AC_2_STATUS_POINTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_debug_ac_2_s_ptr_ac_2_status_pointer_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_AC_2_S_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_AC_3_S_PTR register definition
 *  Current value of the AC_VO status pointer for debug. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 AC_3_STATUS_POINTER       0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_AC_3_S_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008534)
#define MAC_HW0_MU0_DEBUG_AC_3_S_PTR_OFFSET      0x00008534
#define MAC_HW0_MU0_DEBUG_AC_3_S_PTR_INDEX       0x0000214D
#define MAC_HW0_MU0_DEBUG_AC_3_S_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_ac_3_s_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_AC_3_S_PTR_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_AC_3_S_PTR_AC_3_STATUS_POINTER_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEBUG_AC_3_S_PTR_AC_3_STATUS_POINTER_LSB    0
#define MAC_HW0_MU0_DEBUG_AC_3_S_PTR_AC_3_STATUS_POINTER_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEBUG_AC_3_S_PTR_AC_3_STATUS_POINTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_debug_ac_3_s_ptr_ac_3_status_pointer_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_AC_3_S_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_TX_C_PTR register definition
 *  Current value of the Transmit DMA current pointer for debug. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TX_CURRENT_POINTER        0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_TX_C_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008540)
#define MAC_HW0_MU0_DEBUG_TX_C_PTR_OFFSET      0x00008540
#define MAC_HW0_MU0_DEBUG_TX_C_PTR_INDEX       0x00002150
#define MAC_HW0_MU0_DEBUG_TX_C_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_tx_c_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_TX_C_PTR_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_TX_C_PTR_TX_CURRENT_POINTER_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEBUG_TX_C_PTR_TX_CURRENT_POINTER_LSB    0
#define MAC_HW0_MU0_DEBUG_TX_C_PTR_TX_CURRENT_POINTER_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEBUG_TX_C_PTR_TX_CURRENT_POINTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_debug_tx_c_ptr_tx_current_pointer_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_TX_C_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_RX_PAY_S_PTR register definition
 *  Current value of the Receive Payload DMA status pointer for debug. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_PAY_STAT_POINTER       0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008544)
#define MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_OFFSET      0x00008544
#define MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_INDEX       0x00002151
#define MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_rx_pay_s_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_RX_PAY_STAT_POINTER_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_RX_PAY_STAT_POINTER_LSB    0
#define MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_RX_PAY_STAT_POINTER_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_RX_PAY_STAT_POINTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_debug_rx_pay_s_ptr_rx_pay_stat_pointer_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_RX_HDR_S_PTR register definition
 *  Current value of the Receive Header DMA status pointer for debug. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_HDR_STAT_POINTER       0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008548)
#define MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_OFFSET      0x00008548
#define MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_INDEX       0x00002152
#define MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_rx_hdr_s_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_RX_HDR_STAT_POINTER_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_RX_HDR_STAT_POINTER_LSB    0
#define MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_RX_HDR_STAT_POINTER_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_RX_HDR_STAT_POINTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_debug_rx_hdr_s_ptr_rx_hdr_stat_pointer_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_RX_PAY_C_PTR register definition
 *  Current value of the Receive Payload DMA current pointer for debug. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_PAY_CURRENT_POINTER    0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000854C)
#define MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_OFFSET      0x0000854C
#define MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_INDEX       0x00002153
#define MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_rx_pay_c_ptr_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_RX_PAY_CURRENT_POINTER_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_RX_PAY_CURRENT_POINTER_LSB    0
#define MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_RX_PAY_CURRENT_POINTER_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_RX_PAY_CURRENT_POINTER_RST    0x0

__INLINE uint32_t mac_hw0_mu0_debug_rx_pay_c_ptr_rx_pay_current_pointer_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief SW_PROFILING register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SW_PROF_31                0              
 *    30    SW_PROF_30                0              
 *    29    SW_PROF_29                0              
 *    28    SW_PROF_28                0              
 *    27    SW_PROF_27                0              
 *    26    SW_PROF_26                0              
 *    25    SW_PROF_25                0              
 *    24    SW_PROF_24                0              
 *    23    SW_PROF_23                0              
 *    22    SW_PROF_22                0              
 *    21    SW_PROF_21                0              
 *    20    SW_PROF_20                0              
 *    19    SW_PROF_19                0              
 *    18    SW_PROF_18                0              
 *    17    SW_PROF_17                0              
 *    16    SW_PROF_16                0              
 *    15    SW_PROF_15                0              
 *    14    SW_PROF_14                0              
 *    13    SW_PROF_13                0              
 *    12    SW_PROF_12                0              
 *    11    SW_PROF_11                0              
 *    10    SW_PROF_10                0              
 *    09    SW_PROF_9                 0              
 *    08    SW_PROF_8                 0              
 *    07    SW_PROF_7                 0              
 *    06    SW_PROF_6                 0              
 *    05    SW_PROF_5                 0              
 *    04    SW_PROF_4                 0              
 *    03    SW_PROF_3                 0              
 *    02    SW_PROF_2                 0              
 *    01    SW_PROF_1                 0              
 *    00    SW_PROF_0                 0              
 * </pre>
 */
#define MAC_HW0_MU0_SW_PROFILING_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008560)
#define MAC_HW0_MU0_SW_PROFILING_OFFSET      0x00008560
#define MAC_HW0_MU0_SW_PROFILING_INDEX       0x00002158
#define MAC_HW0_MU0_SW_PROFILING_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_sw_profiling_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
}

__INLINE void mac_hw0_mu0_sw_profiling_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_31_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_31_POS    31
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_30_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_30_POS    30
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_29_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_29_POS    29
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_28_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_28_POS    28
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_27_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_27_POS    27
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_26_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_26_POS    26
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_25_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_25_POS    25
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_24_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_24_POS    24
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_23_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_23_POS    23
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_22_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_22_POS    22
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_21_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_21_POS    21
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_20_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_20_POS    20
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_19_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_19_POS    19
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_18_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_18_POS    18
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_17_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_17_POS    17
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_16_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_16_POS    16
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_15_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_15_POS    15
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_14_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_14_POS    14
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_13_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_13_POS    13
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_12_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_12_POS    12
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_11_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_11_POS    11
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_10_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_10_POS    10
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_9_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_9_POS    9
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_8_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_8_POS    8
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_7_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_7_POS    7
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_6_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_6_POS    6
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_5_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_5_POS    5
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_4_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_4_POS    4
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_3_POS    3
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_2_POS    2
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_1_POS    1
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_0_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_0_POS    0

#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_31_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_30_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_29_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_28_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_27_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_26_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_25_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_24_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_23_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_22_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_21_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_20_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_19_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_18_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_17_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_16_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_15_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_14_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_13_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_12_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_11_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_10_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_9_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_8_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_7_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_6_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_5_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_4_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_3_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_2_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_1_RST    0x0
#define MAC_HW0_MU0_SW_PROFILING_SW_PROF_0_RST    0x0

__INLINE void mac_hw0_mu0_sw_profiling_pack(uint8_t sw_prof_31, uint8_t sw_prof_30, uint8_t sw_prof_29, uint8_t sw_prof_28, uint8_t sw_prof_27, uint8_t sw_prof_26, uint8_t sw_prof_25, uint8_t sw_prof_24, uint8_t sw_prof_23, uint8_t sw_prof_22, uint8_t sw_prof_21, uint8_t sw_prof_20, uint8_t sw_prof_19, uint8_t sw_prof_18, uint8_t sw_prof_17, uint8_t sw_prof_16, uint8_t sw_prof_15, uint8_t sw_prof_14, uint8_t sw_prof_13, uint8_t sw_prof_12, uint8_t sw_prof_11, uint8_t sw_prof_10, uint8_t sw_prof_9, uint8_t sw_prof_8, uint8_t sw_prof_7, uint8_t sw_prof_6, uint8_t sw_prof_5, uint8_t sw_prof_4, uint8_t sw_prof_3, uint8_t sw_prof_2, uint8_t sw_prof_1, uint8_t sw_prof_0)
{
	ASSERT_ERR((((uint32_t)sw_prof_31 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_30 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_29 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_28 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_27 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_26 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_25 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_24 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_23 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_22 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_21 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_20 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_19 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_18 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_17 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_16 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)sw_prof_0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR,  ((uint32_t)sw_prof_31 << 31) |((uint32_t)sw_prof_30 << 30) |((uint32_t)sw_prof_29 << 29) |((uint32_t)sw_prof_28 << 28) |((uint32_t)sw_prof_27 << 27) |((uint32_t)sw_prof_26 << 26) |((uint32_t)sw_prof_25 << 25) |((uint32_t)sw_prof_24 << 24) |((uint32_t)sw_prof_23 << 23) |((uint32_t)sw_prof_22 << 22) |((uint32_t)sw_prof_21 << 21) |((uint32_t)sw_prof_20 << 20) |((uint32_t)sw_prof_19 << 19) |((uint32_t)sw_prof_18 << 18) |((uint32_t)sw_prof_17 << 17) |((uint32_t)sw_prof_16 << 16) |((uint32_t)sw_prof_15 << 15) |((uint32_t)sw_prof_14 << 14) |((uint32_t)sw_prof_13 << 13) |((uint32_t)sw_prof_12 << 12) |((uint32_t)sw_prof_11 << 11) |((uint32_t)sw_prof_10 << 10) |((uint32_t)sw_prof_9 << 9) |((uint32_t)sw_prof_8 << 8) |((uint32_t)sw_prof_7 << 7) |((uint32_t)sw_prof_6 << 6) |((uint32_t)sw_prof_5 << 5) |((uint32_t)sw_prof_4 << 4) |((uint32_t)sw_prof_3 << 3) |((uint32_t)sw_prof_2 << 2) |((uint32_t)sw_prof_1 << 1) |((uint32_t)sw_prof_0 << 0));
}

__INLINE void mac_hw0_mu0_sw_profiling_unpack(uint8_t* sw_prof_31, uint8_t* sw_prof_30, uint8_t* sw_prof_29, uint8_t* sw_prof_28, uint8_t* sw_prof_27, uint8_t* sw_prof_26, uint8_t* sw_prof_25, uint8_t* sw_prof_24, uint8_t* sw_prof_23, uint8_t* sw_prof_22, uint8_t* sw_prof_21, uint8_t* sw_prof_20, uint8_t* sw_prof_19, uint8_t* sw_prof_18, uint8_t* sw_prof_17, uint8_t* sw_prof_16, uint8_t* sw_prof_15, uint8_t* sw_prof_14, uint8_t* sw_prof_13, uint8_t* sw_prof_12, uint8_t* sw_prof_11, uint8_t* sw_prof_10, uint8_t* sw_prof_9, uint8_t* sw_prof_8, uint8_t* sw_prof_7, uint8_t* sw_prof_6, uint8_t* sw_prof_5, uint8_t* sw_prof_4, uint8_t* sw_prof_3, uint8_t* sw_prof_2, uint8_t* sw_prof_1, uint8_t* sw_prof_0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);

	*sw_prof_31 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*sw_prof_30 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*sw_prof_29 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*sw_prof_28 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*sw_prof_27 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*sw_prof_26 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*sw_prof_25 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*sw_prof_24 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*sw_prof_23 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*sw_prof_22 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*sw_prof_21 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*sw_prof_20 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*sw_prof_19 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*sw_prof_18 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*sw_prof_17 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*sw_prof_16 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*sw_prof_15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*sw_prof_14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*sw_prof_13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*sw_prof_12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*sw_prof_11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*sw_prof_10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*sw_prof_9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*sw_prof_8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*sw_prof_7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*sw_prof_6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*sw_prof_5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*sw_prof_4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*sw_prof_3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*sw_prof_2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*sw_prof_1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*sw_prof_0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_31_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_31_setf(uint8_t swprof31)
{
	ASSERT_ERR((((uint32_t)swprof31 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)swprof31 <<31));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_30_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_30_setf(uint8_t swprof30)
{
	ASSERT_ERR((((uint32_t)swprof30 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)swprof30 <<30));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_29_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_29_setf(uint8_t swprof29)
{
	ASSERT_ERR((((uint32_t)swprof29 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)swprof29 <<29));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_28_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_28_setf(uint8_t swprof28)
{
	ASSERT_ERR((((uint32_t)swprof28 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)swprof28 <<28));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_27_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_27_setf(uint8_t swprof27)
{
	ASSERT_ERR((((uint32_t)swprof27 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)swprof27 <<27));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_26_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_26_setf(uint8_t swprof26)
{
	ASSERT_ERR((((uint32_t)swprof26 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)swprof26 <<26));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_25_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_25_setf(uint8_t swprof25)
{
	ASSERT_ERR((((uint32_t)swprof25 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)swprof25 <<25));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_24_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_24_setf(uint8_t swprof24)
{
	ASSERT_ERR((((uint32_t)swprof24 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)swprof24 <<24));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_23_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_23_setf(uint8_t swprof23)
{
	ASSERT_ERR((((uint32_t)swprof23 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)swprof23 <<23));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_22_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_22_setf(uint8_t swprof22)
{
	ASSERT_ERR((((uint32_t)swprof22 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)swprof22 <<22));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_21_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_21_setf(uint8_t swprof21)
{
	ASSERT_ERR((((uint32_t)swprof21 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)swprof21 <<21));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_20_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_20_setf(uint8_t swprof20)
{
	ASSERT_ERR((((uint32_t)swprof20 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)swprof20 <<20));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_19_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_19_setf(uint8_t swprof19)
{
	ASSERT_ERR((((uint32_t)swprof19 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)swprof19 <<19));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_18_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_18_setf(uint8_t swprof18)
{
	ASSERT_ERR((((uint32_t)swprof18 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)swprof18 <<18));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_17_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_17_setf(uint8_t swprof17)
{
	ASSERT_ERR((((uint32_t)swprof17 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)swprof17 <<17));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_16_setf(uint8_t swprof16)
{
	ASSERT_ERR((((uint32_t)swprof16 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)swprof16 <<16));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_15_setf(uint8_t swprof15)
{
	ASSERT_ERR((((uint32_t)swprof15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)swprof15 <<15));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_14_setf(uint8_t swprof14)
{
	ASSERT_ERR((((uint32_t)swprof14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)swprof14 <<14));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_13_setf(uint8_t swprof13)
{
	ASSERT_ERR((((uint32_t)swprof13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)swprof13 <<13));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_12_setf(uint8_t swprof12)
{
	ASSERT_ERR((((uint32_t)swprof12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)swprof12 <<12));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_11_setf(uint8_t swprof11)
{
	ASSERT_ERR((((uint32_t)swprof11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)swprof11 <<11));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_10_setf(uint8_t swprof10)
{
	ASSERT_ERR((((uint32_t)swprof10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)swprof10 <<10));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_9_setf(uint8_t swprof9)
{
	ASSERT_ERR((((uint32_t)swprof9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)swprof9 <<9));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_8_setf(uint8_t swprof8)
{
	ASSERT_ERR((((uint32_t)swprof8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)swprof8 <<8));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_7_setf(uint8_t swprof7)
{
	ASSERT_ERR((((uint32_t)swprof7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)swprof7 <<7));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_6_setf(uint8_t swprof6)
{
	ASSERT_ERR((((uint32_t)swprof6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)swprof6 <<6));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_5_setf(uint8_t swprof5)
{
	ASSERT_ERR((((uint32_t)swprof5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)swprof5 <<5));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_4_setf(uint8_t swprof4)
{
	ASSERT_ERR((((uint32_t)swprof4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)swprof4 <<4));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_3_setf(uint8_t swprof3)
{
	ASSERT_ERR((((uint32_t)swprof3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)swprof3 <<3));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_2_setf(uint8_t swprof2)
{
	ASSERT_ERR((((uint32_t)swprof2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)swprof2 <<2));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_1_setf(uint8_t swprof1)
{
	ASSERT_ERR((((uint32_t)swprof1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)swprof1 <<1));
}
__INLINE uint8_t mac_hw0_mu0_sw_profiling_sw_prof_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_sw_profiling_sw_prof_0_setf(uint8_t swprof0)
{
	ASSERT_ERR((((uint32_t)swprof0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_PROFILING_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)swprof0 <<0));
}

/**
 * @brief SW_SET_PROFILING register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SW_SET_PROF_31            0              
 *    30    SW_SET_PROF_30            0              
 *    29    SW_SET_PROF_29            0              
 *    28    SW_SET_PROF_28            0              
 *    27    SW_SET_PROF_27            0              
 *    26    SW_SET_PROF_26            0              
 *    25    SW_SET_PROF_25            0              
 *    24    SW_SET_PROF_24            0              
 *    23    SW_SET_PROF_23            0              
 *    22    SW_SET_PROF_22            0              
 *    21    SW_SET_PROF_21            0              
 *    20    SW_SET_PROF_20            0              
 *    19    SW_SET_PROF_19            0              
 *    18    SW_SET_PROF_18            0              
 *    17    SW_SET_PROF_17            0              
 *    16    SW_SET_PROF_16            0              
 *    15    SW_SET_PROF_15            0              
 *    14    SW_SET_PROF_14            0              
 *    13    SW_SET_PROF_13            0              
 *    12    SW_SET_PROF_12            0              
 *    11    SW_SET_PROF_11            0              
 *    10    SW_SET_PROF_10            0              
 *    09    SW_SET_PROF_9             0              
 *    08    SW_SET_PROF_8             0              
 *    07    SW_SET_PROF_7             0              
 *    06    SW_SET_PROF_6             0              
 *    05    SW_SET_PROF_5             0              
 *    04    SW_SET_PROF_4             0              
 *    03    SW_SET_PROF_3             0              
 *    02    SW_SET_PROF_2             0              
 *    01    SW_SET_PROF_1             0              
 *    00    SW_SET_PROF_0             0              
 * </pre>
 */
#define MAC_HW0_MU0_SW_SET_PROFILING_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008564)
#define MAC_HW0_MU0_SW_SET_PROFILING_OFFSET      0x00008564
#define MAC_HW0_MU0_SW_SET_PROFILING_INDEX       0x00002159
#define MAC_HW0_MU0_SW_SET_PROFILING_RESET       0x00000000

__INLINE void mac_hw0_mu0_sw_set_profiling_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_31_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_31_POS    31
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_30_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_30_POS    30
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_29_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_29_POS    29
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_28_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_28_POS    28
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_27_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_27_POS    27
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_26_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_26_POS    26
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_25_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_25_POS    25
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_24_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_24_POS    24
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_23_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_23_POS    23
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_22_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_22_POS    22
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_21_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_21_POS    21
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_20_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_20_POS    20
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_19_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_19_POS    19
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_18_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_18_POS    18
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_17_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_17_POS    17
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_16_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_16_POS    16
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_15_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_15_POS    15
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_14_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_14_POS    14
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_13_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_13_POS    13
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_12_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_12_POS    12
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_11_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_11_POS    11
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_10_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_10_POS    10
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_9_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_9_POS    9
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_8_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_8_POS    8
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_7_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_7_POS    7
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_6_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_6_POS    6
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_5_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_5_POS    5
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_4_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_4_POS    4
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_3_POS    3
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_2_POS    2
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_1_POS    1
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_0_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_0_POS    0

#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_31_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_30_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_29_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_28_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_27_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_26_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_25_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_24_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_23_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_22_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_21_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_20_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_19_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_18_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_17_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_16_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_15_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_14_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_13_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_12_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_11_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_10_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_9_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_8_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_7_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_6_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_5_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_4_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_3_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_2_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_1_RST    0x0
#define MAC_HW0_MU0_SW_SET_PROFILING_SW_SET_PROF_0_RST    0x0

__INLINE void mac_hw0_mu0_sw_set_profiling_pack(uint8_t sw_set_prof_31, uint8_t sw_set_prof_30, uint8_t sw_set_prof_29, uint8_t sw_set_prof_28, uint8_t sw_set_prof_27, uint8_t sw_set_prof_26, uint8_t sw_set_prof_25, uint8_t sw_set_prof_24, uint8_t sw_set_prof_23, uint8_t sw_set_prof_22, uint8_t sw_set_prof_21, uint8_t sw_set_prof_20, uint8_t sw_set_prof_19, uint8_t sw_set_prof_18, uint8_t sw_set_prof_17, uint8_t sw_set_prof_16, uint8_t sw_set_prof_15, uint8_t sw_set_prof_14, uint8_t sw_set_prof_13, uint8_t sw_set_prof_12, uint8_t sw_set_prof_11, uint8_t sw_set_prof_10, uint8_t sw_set_prof_9, uint8_t sw_set_prof_8, uint8_t sw_set_prof_7, uint8_t sw_set_prof_6, uint8_t sw_set_prof_5, uint8_t sw_set_prof_4, uint8_t sw_set_prof_3, uint8_t sw_set_prof_2, uint8_t sw_set_prof_1, uint8_t sw_set_prof_0)
{
	ASSERT_ERR((((uint32_t)sw_set_prof_31 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_30 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_29 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_28 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_27 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_26 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_25 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_24 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_23 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_22 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_21 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_20 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_19 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_18 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_17 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_16 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)sw_set_prof_0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR,  ((uint32_t)sw_set_prof_31 << 31) |((uint32_t)sw_set_prof_30 << 30) |((uint32_t)sw_set_prof_29 << 29) |((uint32_t)sw_set_prof_28 << 28) |((uint32_t)sw_set_prof_27 << 27) |((uint32_t)sw_set_prof_26 << 26) |((uint32_t)sw_set_prof_25 << 25) |((uint32_t)sw_set_prof_24 << 24) |((uint32_t)sw_set_prof_23 << 23) |((uint32_t)sw_set_prof_22 << 22) |((uint32_t)sw_set_prof_21 << 21) |((uint32_t)sw_set_prof_20 << 20) |((uint32_t)sw_set_prof_19 << 19) |((uint32_t)sw_set_prof_18 << 18) |((uint32_t)sw_set_prof_17 << 17) |((uint32_t)sw_set_prof_16 << 16) |((uint32_t)sw_set_prof_15 << 15) |((uint32_t)sw_set_prof_14 << 14) |((uint32_t)sw_set_prof_13 << 13) |((uint32_t)sw_set_prof_12 << 12) |((uint32_t)sw_set_prof_11 << 11) |((uint32_t)sw_set_prof_10 << 10) |((uint32_t)sw_set_prof_9 << 9) |((uint32_t)sw_set_prof_8 << 8) |((uint32_t)sw_set_prof_7 << 7) |((uint32_t)sw_set_prof_6 << 6) |((uint32_t)sw_set_prof_5 << 5) |((uint32_t)sw_set_prof_4 << 4) |((uint32_t)sw_set_prof_3 << 3) |((uint32_t)sw_set_prof_2 << 2) |((uint32_t)sw_set_prof_1 << 1) |((uint32_t)sw_set_prof_0 << 0));
}

__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_31_setf(uint8_t swsetprof31)
{
	ASSERT_ERR((((uint32_t)swsetprof31 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)swsetprof31 <<31));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_30_setf(uint8_t swsetprof30)
{
	ASSERT_ERR((((uint32_t)swsetprof30 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)swsetprof30 <<30));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_29_setf(uint8_t swsetprof29)
{
	ASSERT_ERR((((uint32_t)swsetprof29 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)swsetprof29 <<29));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_28_setf(uint8_t swsetprof28)
{
	ASSERT_ERR((((uint32_t)swsetprof28 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)swsetprof28 <<28));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_27_setf(uint8_t swsetprof27)
{
	ASSERT_ERR((((uint32_t)swsetprof27 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)swsetprof27 <<27));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_26_setf(uint8_t swsetprof26)
{
	ASSERT_ERR((((uint32_t)swsetprof26 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)swsetprof26 <<26));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_25_setf(uint8_t swsetprof25)
{
	ASSERT_ERR((((uint32_t)swsetprof25 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)swsetprof25 <<25));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_24_setf(uint8_t swsetprof24)
{
	ASSERT_ERR((((uint32_t)swsetprof24 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)swsetprof24 <<24));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_23_setf(uint8_t swsetprof23)
{
	ASSERT_ERR((((uint32_t)swsetprof23 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)swsetprof23 <<23));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_22_setf(uint8_t swsetprof22)
{
	ASSERT_ERR((((uint32_t)swsetprof22 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)swsetprof22 <<22));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_21_setf(uint8_t swsetprof21)
{
	ASSERT_ERR((((uint32_t)swsetprof21 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)swsetprof21 <<21));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_20_setf(uint8_t swsetprof20)
{
	ASSERT_ERR((((uint32_t)swsetprof20 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)swsetprof20 <<20));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_19_setf(uint8_t swsetprof19)
{
	ASSERT_ERR((((uint32_t)swsetprof19 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)swsetprof19 <<19));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_18_setf(uint8_t swsetprof18)
{
	ASSERT_ERR((((uint32_t)swsetprof18 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)swsetprof18 <<18));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_17_setf(uint8_t swsetprof17)
{
	ASSERT_ERR((((uint32_t)swsetprof17 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)swsetprof17 <<17));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_16_setf(uint8_t swsetprof16)
{
	ASSERT_ERR((((uint32_t)swsetprof16 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)swsetprof16 <<16));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_15_setf(uint8_t swsetprof15)
{
	ASSERT_ERR((((uint32_t)swsetprof15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)swsetprof15 <<15));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_14_setf(uint8_t swsetprof14)
{
	ASSERT_ERR((((uint32_t)swsetprof14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)swsetprof14 <<14));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_13_setf(uint8_t swsetprof13)
{
	ASSERT_ERR((((uint32_t)swsetprof13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)swsetprof13 <<13));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_12_setf(uint8_t swsetprof12)
{
	ASSERT_ERR((((uint32_t)swsetprof12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)swsetprof12 <<12));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_11_setf(uint8_t swsetprof11)
{
	ASSERT_ERR((((uint32_t)swsetprof11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)swsetprof11 <<11));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_10_setf(uint8_t swsetprof10)
{
	ASSERT_ERR((((uint32_t)swsetprof10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)swsetprof10 <<10));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_9_setf(uint8_t swsetprof9)
{
	ASSERT_ERR((((uint32_t)swsetprof9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)swsetprof9 <<9));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_8_setf(uint8_t swsetprof8)
{
	ASSERT_ERR((((uint32_t)swsetprof8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)swsetprof8 <<8));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_7_setf(uint8_t swsetprof7)
{
	ASSERT_ERR((((uint32_t)swsetprof7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)swsetprof7 <<7));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_6_setf(uint8_t swsetprof6)
{
	ASSERT_ERR((((uint32_t)swsetprof6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)swsetprof6 <<6));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_5_setf(uint8_t swsetprof5)
{
	ASSERT_ERR((((uint32_t)swsetprof5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)swsetprof5 <<5));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_4_setf(uint8_t swsetprof4)
{
	ASSERT_ERR((((uint32_t)swsetprof4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)swsetprof4 <<4));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_3_setf(uint8_t swsetprof3)
{
	ASSERT_ERR((((uint32_t)swsetprof3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)swsetprof3 <<3));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_2_setf(uint8_t swsetprof2)
{
	ASSERT_ERR((((uint32_t)swsetprof2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)swsetprof2 <<2));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_1_setf(uint8_t swsetprof1)
{
	ASSERT_ERR((((uint32_t)swsetprof1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)swsetprof1 <<1));
}
__INLINE void mac_hw0_mu0_sw_set_profiling_sw_set_prof_0_setf(uint8_t swsetprof0)
{
	ASSERT_ERR((((uint32_t)swsetprof0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_SET_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_SET_PROFILING_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)swsetprof0 <<0));
}

/**
 * @brief SW_CLEAR_PROFILING register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    SW_CLEAR_PROF_31          0              
 *    30    SW_CLEAR_PROF_30          0              
 *    29    SW_CLEAR_PROF_29          0              
 *    28    SW_CLEAR_PROF_28          0              
 *    27    SW_CLEAR_PROF_27          0              
 *    26    SW_CLEAR_PROF_26          0              
 *    25    SW_CLEAR_PROF_25          0              
 *    24    SW_CLEAR_PROF_24          0              
 *    23    SW_CLEAR_PROF_23          0              
 *    22    SW_CLEAR_PROF_22          0              
 *    21    SW_CLEAR_PROF_21          0              
 *    20    SW_CLEAR_PROF_20          0              
 *    19    SW_CLEAR_PROF_19          0              
 *    18    SW_CLEAR_PROF_18          0              
 *    17    SW_CLEAR_PROF_17          0              
 *    16    SW_CLEAR_PROF_16          0              
 *    15    SW_CLEAR_PROF_15          0              
 *    14    SW_CLEAR_PROF_14          0              
 *    13    SW_CLEAR_PROF_13          0              
 *    12    SW_CLEAR_PROF_12          0              
 *    11    SW_CLEAR_PROF_11          0              
 *    10    SW_CLEAR_PROF_10          0              
 *    09    SW_CLEAR_PROF_9           0              
 *    08    SW_CLEAR_PROF_8           0              
 *    07    SW_CLEAR_PROF_7           0              
 *    06    SW_CLEAR_PROF_6           0              
 *    05    SW_CLEAR_PROF_5           0              
 *    04    SW_CLEAR_PROF_4           0              
 *    03    SW_CLEAR_PROF_3           0              
 *    02    SW_CLEAR_PROF_2           0              
 *    01    SW_CLEAR_PROF_1           0              
 *    00    SW_CLEAR_PROF_0           0              
 * </pre>
 */
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008568)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_OFFSET      0x00008568
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_INDEX       0x0000215A
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_RESET       0x00000000

__INLINE void mac_hw0_mu0_sw_clear_profiling_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_31_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_31_POS    31
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_30_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_30_POS    30
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_29_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_29_POS    29
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_28_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_28_POS    28
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_27_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_27_POS    27
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_26_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_26_POS    26
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_25_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_25_POS    25
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_24_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_24_POS    24
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_23_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_23_POS    23
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_22_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_22_POS    22
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_21_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_21_POS    21
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_20_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_20_POS    20
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_19_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_19_POS    19
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_18_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_18_POS    18
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_17_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_17_POS    17
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_16_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_16_POS    16
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_15_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_15_POS    15
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_14_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_14_POS    14
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_13_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_13_POS    13
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_12_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_12_POS    12
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_11_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_11_POS    11
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_10_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_10_POS    10
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_9_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_9_POS    9
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_8_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_8_POS    8
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_7_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_7_POS    7
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_6_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_6_POS    6
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_5_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_5_POS    5
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_4_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_4_POS    4
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_3_POS    3
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_2_POS    2
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_1_POS    1
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_0_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_0_POS    0

#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_31_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_30_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_29_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_28_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_27_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_26_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_25_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_24_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_23_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_22_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_21_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_20_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_19_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_18_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_17_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_16_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_15_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_14_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_13_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_12_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_11_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_10_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_9_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_8_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_7_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_6_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_5_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_4_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_3_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_2_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_1_RST    0x0
#define MAC_HW0_MU0_SW_CLEAR_PROFILING_SW_CLEAR_PROF_0_RST    0x0

__INLINE void mac_hw0_mu0_sw_clear_profiling_pack(uint8_t sw_clear_prof_31, uint8_t sw_clear_prof_30, uint8_t sw_clear_prof_29, uint8_t sw_clear_prof_28, uint8_t sw_clear_prof_27, uint8_t sw_clear_prof_26, uint8_t sw_clear_prof_25, uint8_t sw_clear_prof_24, uint8_t sw_clear_prof_23, uint8_t sw_clear_prof_22, uint8_t sw_clear_prof_21, uint8_t sw_clear_prof_20, uint8_t sw_clear_prof_19, uint8_t sw_clear_prof_18, uint8_t sw_clear_prof_17, uint8_t sw_clear_prof_16, uint8_t sw_clear_prof_15, uint8_t sw_clear_prof_14, uint8_t sw_clear_prof_13, uint8_t sw_clear_prof_12, uint8_t sw_clear_prof_11, uint8_t sw_clear_prof_10, uint8_t sw_clear_prof_9, uint8_t sw_clear_prof_8, uint8_t sw_clear_prof_7, uint8_t sw_clear_prof_6, uint8_t sw_clear_prof_5, uint8_t sw_clear_prof_4, uint8_t sw_clear_prof_3, uint8_t sw_clear_prof_2, uint8_t sw_clear_prof_1, uint8_t sw_clear_prof_0)
{
	ASSERT_ERR((((uint32_t)sw_clear_prof_31 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_30 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_29 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_28 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_27 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_26 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_25 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_24 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_23 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_22 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_21 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_20 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_19 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_18 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_17 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_16 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)sw_clear_prof_0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR,  ((uint32_t)sw_clear_prof_31 << 31) |((uint32_t)sw_clear_prof_30 << 30) |((uint32_t)sw_clear_prof_29 << 29) |((uint32_t)sw_clear_prof_28 << 28) |((uint32_t)sw_clear_prof_27 << 27) |((uint32_t)sw_clear_prof_26 << 26) |((uint32_t)sw_clear_prof_25 << 25) |((uint32_t)sw_clear_prof_24 << 24) |((uint32_t)sw_clear_prof_23 << 23) |((uint32_t)sw_clear_prof_22 << 22) |((uint32_t)sw_clear_prof_21 << 21) |((uint32_t)sw_clear_prof_20 << 20) |((uint32_t)sw_clear_prof_19 << 19) |((uint32_t)sw_clear_prof_18 << 18) |((uint32_t)sw_clear_prof_17 << 17) |((uint32_t)sw_clear_prof_16 << 16) |((uint32_t)sw_clear_prof_15 << 15) |((uint32_t)sw_clear_prof_14 << 14) |((uint32_t)sw_clear_prof_13 << 13) |((uint32_t)sw_clear_prof_12 << 12) |((uint32_t)sw_clear_prof_11 << 11) |((uint32_t)sw_clear_prof_10 << 10) |((uint32_t)sw_clear_prof_9 << 9) |((uint32_t)sw_clear_prof_8 << 8) |((uint32_t)sw_clear_prof_7 << 7) |((uint32_t)sw_clear_prof_6 << 6) |((uint32_t)sw_clear_prof_5 << 5) |((uint32_t)sw_clear_prof_4 << 4) |((uint32_t)sw_clear_prof_3 << 3) |((uint32_t)sw_clear_prof_2 << 2) |((uint32_t)sw_clear_prof_1 << 1) |((uint32_t)sw_clear_prof_0 << 0));
}

__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_31_setf(uint8_t swclearprof31)
{
	ASSERT_ERR((((uint32_t)swclearprof31 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)swclearprof31 <<31));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_30_setf(uint8_t swclearprof30)
{
	ASSERT_ERR((((uint32_t)swclearprof30 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)swclearprof30 <<30));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_29_setf(uint8_t swclearprof29)
{
	ASSERT_ERR((((uint32_t)swclearprof29 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)swclearprof29 <<29));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_28_setf(uint8_t swclearprof28)
{
	ASSERT_ERR((((uint32_t)swclearprof28 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)swclearprof28 <<28));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_27_setf(uint8_t swclearprof27)
{
	ASSERT_ERR((((uint32_t)swclearprof27 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)swclearprof27 <<27));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_26_setf(uint8_t swclearprof26)
{
	ASSERT_ERR((((uint32_t)swclearprof26 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)swclearprof26 <<26));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_25_setf(uint8_t swclearprof25)
{
	ASSERT_ERR((((uint32_t)swclearprof25 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)swclearprof25 <<25));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_24_setf(uint8_t swclearprof24)
{
	ASSERT_ERR((((uint32_t)swclearprof24 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)swclearprof24 <<24));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_23_setf(uint8_t swclearprof23)
{
	ASSERT_ERR((((uint32_t)swclearprof23 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)swclearprof23 <<23));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_22_setf(uint8_t swclearprof22)
{
	ASSERT_ERR((((uint32_t)swclearprof22 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)swclearprof22 <<22));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_21_setf(uint8_t swclearprof21)
{
	ASSERT_ERR((((uint32_t)swclearprof21 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)swclearprof21 <<21));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_20_setf(uint8_t swclearprof20)
{
	ASSERT_ERR((((uint32_t)swclearprof20 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)swclearprof20 <<20));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_19_setf(uint8_t swclearprof19)
{
	ASSERT_ERR((((uint32_t)swclearprof19 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)swclearprof19 <<19));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_18_setf(uint8_t swclearprof18)
{
	ASSERT_ERR((((uint32_t)swclearprof18 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)swclearprof18 <<18));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_17_setf(uint8_t swclearprof17)
{
	ASSERT_ERR((((uint32_t)swclearprof17 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)swclearprof17 <<17));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_16_setf(uint8_t swclearprof16)
{
	ASSERT_ERR((((uint32_t)swclearprof16 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)swclearprof16 <<16));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_15_setf(uint8_t swclearprof15)
{
	ASSERT_ERR((((uint32_t)swclearprof15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)swclearprof15 <<15));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_14_setf(uint8_t swclearprof14)
{
	ASSERT_ERR((((uint32_t)swclearprof14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)swclearprof14 <<14));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_13_setf(uint8_t swclearprof13)
{
	ASSERT_ERR((((uint32_t)swclearprof13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)swclearprof13 <<13));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_12_setf(uint8_t swclearprof12)
{
	ASSERT_ERR((((uint32_t)swclearprof12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)swclearprof12 <<12));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_11_setf(uint8_t swclearprof11)
{
	ASSERT_ERR((((uint32_t)swclearprof11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)swclearprof11 <<11));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_10_setf(uint8_t swclearprof10)
{
	ASSERT_ERR((((uint32_t)swclearprof10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)swclearprof10 <<10));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_9_setf(uint8_t swclearprof9)
{
	ASSERT_ERR((((uint32_t)swclearprof9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)swclearprof9 <<9));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_8_setf(uint8_t swclearprof8)
{
	ASSERT_ERR((((uint32_t)swclearprof8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)swclearprof8 <<8));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_7_setf(uint8_t swclearprof7)
{
	ASSERT_ERR((((uint32_t)swclearprof7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)swclearprof7 <<7));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_6_setf(uint8_t swclearprof6)
{
	ASSERT_ERR((((uint32_t)swclearprof6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)swclearprof6 <<6));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_5_setf(uint8_t swclearprof5)
{
	ASSERT_ERR((((uint32_t)swclearprof5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)swclearprof5 <<5));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_4_setf(uint8_t swclearprof4)
{
	ASSERT_ERR((((uint32_t)swclearprof4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)swclearprof4 <<4));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_3_setf(uint8_t swclearprof3)
{
	ASSERT_ERR((((uint32_t)swclearprof3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)swclearprof3 <<3));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_2_setf(uint8_t swclearprof2)
{
	ASSERT_ERR((((uint32_t)swclearprof2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)swclearprof2 <<2));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_1_setf(uint8_t swclearprof1)
{
	ASSERT_ERR((((uint32_t)swclearprof1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)swclearprof1 <<1));
}
__INLINE void mac_hw0_mu0_sw_clear_profiling_sw_clear_prof_0_setf(uint8_t swclearprof0)
{
	ASSERT_ERR((((uint32_t)swclearprof0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR, (REG_PL_RD(MAC_HW0_MU0_SW_CLEAR_PROFILING_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)swclearprof0 <<0));
}

/**
 * @brief DEBUG_RX_PAY_S_PTR_2 register definition
 *  Debug Rx Payload Status Pointer for LL2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 Rx_Pay_Stat_Pointer2      0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000856C)
#define MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_2_OFFSET      0x0000856C
#define MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_2_INDEX       0x0000215B
#define MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_rx_pay_s_ptr_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_2_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_2_RX_PAY_STAT_POINTER_2_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_2_RX_PAY_STAT_POINTER_2_LSB    0
#define MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_2_RX_PAY_STAT_POINTER_2_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_2_RX_PAY_STAT_POINTER_2_RST    0x0

__INLINE uint32_t mac_hw0_mu0_debug_rx_pay_s_ptr_2_rx_pay_stat_pointer_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_RX_PAY_S_PTR_2_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_RX_HDR_S_PTR_2 register definition
 *  Debug Rx Header Status Pointer for LL2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 rx_Hdr_Stat_Pointer2      0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008570)
#define MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_2_OFFSET      0x00008570
#define MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_2_INDEX       0x0000215C
#define MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_rx_hdr_s_ptr_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_2_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_2_RX_HDR_STAT_POINTER_2_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_2_RX_HDR_STAT_POINTER_2_LSB    0
#define MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_2_RX_HDR_STAT_POINTER_2_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_2_RX_HDR_STAT_POINTER_2_RST    0x0

__INLINE uint32_t mac_hw0_mu0_debug_rx_hdr_s_ptr_2_rx_hdr_stat_pointer_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_RX_HDR_S_PTR_2_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief DEBUG_RX_PAY_C_PTR_2 register definition
 *  Debug Rx Payload Current Pointer for LL2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 rx_Pay_Current_Pointer2   0x0
 * </pre>
 */
#define MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_2_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008574)
#define MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_2_OFFSET      0x00008574
#define MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_2_INDEX       0x0000215D
#define MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_2_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_debug_rx_pay_c_ptr_2_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_2_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_2_RX_PAY_CURRENT_POINTER_2_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_2_RX_PAY_CURRENT_POINTER_2_LSB    0
#define MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_2_RX_PAY_CURRENT_POINTER_2_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_2_RX_PAY_CURRENT_POINTER_2_RST    0x0

__INLINE uint32_t mac_hw0_mu0_debug_rx_pay_c_ptr_2_rx_pay_current_pointer_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DEBUG_RX_PAY_C_PTR_2_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief MAC_HW_SPARE_2_REG register definition
 *  spare register to be used for ECO fixes register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:08 SPARE_2                   0x0
 *    07    PLD_SPARE_ENABLE          0              
 *    06    HDR_SPARE_ENABLE          0              
 *    05:04 MY_MAX_PE_DURATION        0x0
 *    03    SPARE_1                   0              
 *    02    SEC_TRIG_OLD_METHOD_EN    0              
 *    01    MPIF_TX_FIFO_HALF_SIZE    0              
 *    00    SPARE_BIT                 0              
 * </pre>
 */
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008604)
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_OFFSET      0x00008604
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_INDEX       0x00002181
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_mac_hw_spare_2_reg_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR);
}

__INLINE void mac_hw0_mu0_mac_hw_spare_2_reg_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_SPARE_2_MASK    ((uint32_t)0xFFFFFF00)
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_SPARE_2_LSB    8
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_SPARE_2_WIDTH    ((uint32_t)0x00000018)
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_PLD_SPARE_ENABLE_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_PLD_SPARE_ENABLE_POS    7
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_HDR_SPARE_ENABLE_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_HDR_SPARE_ENABLE_POS    6
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_MY_MAX_PE_DURATION_MASK    ((uint32_t)0x00000030)
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_MY_MAX_PE_DURATION_LSB    4
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_MY_MAX_PE_DURATION_WIDTH    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_SPARE_1_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_SPARE_1_POS    3
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_SEC_TRIG_OLD_METHOD_EN_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_SEC_TRIG_OLD_METHOD_EN_POS    2
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_MPIF_TX_FIFO_HALF_SIZE_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_MPIF_TX_FIFO_HALF_SIZE_POS    1
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_SPARE_BIT_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_SPARE_BIT_POS    0

#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_SPARE_2_RST    0x0
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_PLD_SPARE_ENABLE_RST    0x0
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_HDR_SPARE_ENABLE_RST    0x0
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_MY_MAX_PE_DURATION_RST    0x0
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_SPARE_1_RST    0x0
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_SEC_TRIG_OLD_METHOD_EN_RST    0x0
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_MPIF_TX_FIFO_HALF_SIZE_RST    0x0
#define MAC_HW0_MU0_MAC_HW_SPARE_2_REG_SPARE_BIT_RST    0x0

__INLINE void mac_hw0_mu0_mac_hw_spare_2_reg_pack(uint32_t spare_2, uint8_t pld_spare_enable, uint8_t hdr_spare_enable, uint8_t my_max_pe_duration, uint8_t spare_1, uint8_t sec_trig_old_method_en, uint8_t mpif_tx_fifo_half_size, uint8_t spare_bit)
{
	ASSERT_ERR((((uint32_t)spare_2 << 8) & ~((uint32_t)0xFFFFFF00)) == 0);
	ASSERT_ERR((((uint32_t)pld_spare_enable << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)hdr_spare_enable << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)my_max_pe_duration << 4) & ~((uint32_t)0x00000030)) == 0);
	ASSERT_ERR((((uint32_t)spare_1 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)sec_trig_old_method_en << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)mpif_tx_fifo_half_size << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spare_bit << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR,  ((uint32_t)spare_2 << 8) |((uint32_t)pld_spare_enable << 7) |((uint32_t)hdr_spare_enable << 6) |((uint32_t)my_max_pe_duration << 4) |((uint32_t)spare_1 << 3) |((uint32_t)sec_trig_old_method_en << 2) |((uint32_t)mpif_tx_fifo_half_size << 1) |((uint32_t)spare_bit << 0));
}

__INLINE void mac_hw0_mu0_mac_hw_spare_2_reg_unpack(uint32_t* spare_2, uint8_t* pld_spare_enable, uint8_t* hdr_spare_enable, uint8_t* my_max_pe_duration, uint8_t* spare_1, uint8_t* sec_trig_old_method_en, uint8_t* mpif_tx_fifo_half_size, uint8_t* spare_bit)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR);

	*spare_2 = (localVal & ((uint32_t)0xFFFFFF00)) >>  8;
	*pld_spare_enable = (localVal & ((uint32_t)0x00000080)) >>  7;
	*hdr_spare_enable = (localVal & ((uint32_t)0x00000040)) >>  6;
	*my_max_pe_duration = (localVal & ((uint32_t)0x00000030)) >>  4;
	*spare_1 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*sec_trig_old_method_en = (localVal & ((uint32_t)0x00000004)) >>  2;
	*mpif_tx_fifo_half_size = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spare_bit = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t mac_hw0_mu0_mac_hw_spare_2_reg_spare_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFF00)) >> 8);
}
__INLINE void mac_hw0_mu0_mac_hw_spare_2_reg_spare_2_setf(uint32_t spare2)
{
	ASSERT_ERR((((uint32_t)spare2 << 8) & ~((uint32_t)0xFFFFFF00)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR) & ~((uint32_t)0xFFFFFF00)) | ((uint32_t)spare2 <<8));
}
__INLINE uint8_t mac_hw0_mu0_mac_hw_spare_2_reg_pld_spare_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_mac_hw_spare_2_reg_pld_spare_enable_setf(uint8_t pldspareenable)
{
	ASSERT_ERR((((uint32_t)pldspareenable << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)pldspareenable <<7));
}
__INLINE uint8_t mac_hw0_mu0_mac_hw_spare_2_reg_hdr_spare_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_mac_hw_spare_2_reg_hdr_spare_enable_setf(uint8_t hdrspareenable)
{
	ASSERT_ERR((((uint32_t)hdrspareenable << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)hdrspareenable <<6));
}
__INLINE uint8_t mac_hw0_mu0_mac_hw_spare_2_reg_my_max_pe_duration_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000030)) >> 4);
}
__INLINE void mac_hw0_mu0_mac_hw_spare_2_reg_my_max_pe_duration_setf(uint8_t mymaxpeduration)
{
	ASSERT_ERR((((uint32_t)mymaxpeduration << 4) & ~((uint32_t)0x00000030)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR) & ~((uint32_t)0x00000030)) | ((uint32_t)mymaxpeduration <<4));
}
__INLINE uint8_t mac_hw0_mu0_mac_hw_spare_2_reg_spare_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_mac_hw_spare_2_reg_spare_1_setf(uint8_t spare1)
{
	ASSERT_ERR((((uint32_t)spare1 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)spare1 <<3));
}
__INLINE uint8_t mac_hw0_mu0_mac_hw_spare_2_reg_sec_trig_old_method_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_mac_hw_spare_2_reg_sec_trig_old_method_en_setf(uint8_t sectrigoldmethoden)
{
	ASSERT_ERR((((uint32_t)sectrigoldmethoden << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)sectrigoldmethoden <<2));
}
__INLINE uint8_t mac_hw0_mu0_mac_hw_spare_2_reg_mpif_tx_fifo_half_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_mac_hw_spare_2_reg_mpif_tx_fifo_half_size_setf(uint8_t mpiftxfifohalfsize)
{
	ASSERT_ERR((((uint32_t)mpiftxfifohalfsize << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)mpiftxfifohalfsize <<1));
}
__INLINE uint8_t mac_hw0_mu0_mac_hw_spare_2_reg_spare_bit_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_mac_hw_spare_2_reg_spare_bit_setf(uint8_t sparebit)
{
	ASSERT_ERR((((uint32_t)sparebit << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR, (REG_PL_RD(MAC_HW0_MU0_MAC_HW_SPARE_2_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)sparebit <<0));
}

/**
 * @brief DMA_HIF_ADDR_DEBUG register definition
 *  indicate the last address on AHB master port register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 dma_HIFAddress            0x0
 * </pre>
 */
#define MAC_HW0_MU0_DMA_HIF_ADDR_DEBUG_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008608)
#define MAC_HW0_MU0_DMA_HIF_ADDR_DEBUG_OFFSET      0x00008608
#define MAC_HW0_MU0_DMA_HIF_ADDR_DEBUG_INDEX       0x00002182
#define MAC_HW0_MU0_DMA_HIF_ADDR_DEBUG_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_dma_hif_addr_debug_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_DMA_HIF_ADDR_DEBUG_ADDR);
}

// field definitions
#define MAC_HW0_MU0_DMA_HIF_ADDR_DEBUG_DMA_HIFADDRESS_MASK    ((uint32_t)0xFFFFFFFF)
#define MAC_HW0_MU0_DMA_HIF_ADDR_DEBUG_DMA_HIFADDRESS_LSB    0
#define MAC_HW0_MU0_DMA_HIF_ADDR_DEBUG_DMA_HIFADDRESS_WIDTH    ((uint32_t)0x00000020)

#define MAC_HW0_MU0_DMA_HIF_ADDR_DEBUG_DMA_HIFADDRESS_RST    0x0

__INLINE uint32_t mac_hw0_mu0_dma_hif_addr_debug_dma_hifaddress_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_DMA_HIF_ADDR_DEBUG_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief ERROR_INT_EVENT_STATUS_LMAC register definition
 *  Error interrupts events status LMAC register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27    HTP_TX_FAILED_DMA_STATE   0              
 *    26    HTP_TX_FAILED_CS          0              
 *    25    RX_PAYLOAD_DMA_DEAD       0              
 *    24    RX_HEADER_DMA_DEAD        0              
 *    23    RX_HEADER_DMA_DEAD2       0              
 *    22    PHY_ERR                   0              
 *    21    MAC_PHYIF_UNDER_RUN       0              
 *    20    UNEXPECTED_TX_END         0              
 *    19    RX_PAYLOAD_DMA_DEAD2      0              
 *    18    HTP_TX_DMA_DEAD           0              
 *    17    BCN_TX_DMA_DEAD           0              
 *    16    AC_3_TX_DMA_DEAD          0              
 *    15    AC_2_TX_DMA_DEAD          0              
 *    14    AC_1_TX_DMA_DEAD          0              
 *    13    AC_0_TX_DMA_DEAD          0              
 *    12    PT_ERROR                  0              
 *    10    OLBC_DSSS                 0              
 *    09    OLBC_OFDM                 0              
 *    08    RX_FIFO_OVER_FLOW         0              
 *    07    RX_DMA_EMPTY              0              
 *    06    MAC_PHYIF_OVERFLOW        0              
 *    05    RX_DMA_DISCARD            0              
 * </pre>
 */
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008700)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_OFFSET      0x00008700
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_INDEX       0x000021C0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_error_int_event_status_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_HTP_TX_FAILED_DMA_STATE_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_HTP_TX_FAILED_DMA_STATE_POS    27
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_HTP_TX_FAILED_CS_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_HTP_TX_FAILED_CS_POS    26
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_PAYLOAD_DMA_DEAD_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_PAYLOAD_DMA_DEAD_POS    25
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_HEADER_DMA_DEAD_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_HEADER_DMA_DEAD_POS    24
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_HEADER_DMA_DEAD_2_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_HEADER_DMA_DEAD_2_POS    23
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_PHY_ERR_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_PHY_ERR_POS    22
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_MAC_PHYIF_UNDER_RUN_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_MAC_PHYIF_UNDER_RUN_POS    21
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_UNEXPECTED_TX_END_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_UNEXPECTED_TX_END_POS    20
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_PAYLOAD_DMA_DEAD_2_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_PAYLOAD_DMA_DEAD_2_POS    19
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_HTP_TX_DMA_DEAD_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_HTP_TX_DMA_DEAD_POS    18
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_BCN_TX_DMA_DEAD_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_BCN_TX_DMA_DEAD_POS    17
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_AC_3_TX_DMA_DEAD_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_AC_3_TX_DMA_DEAD_POS    16
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_AC_2_TX_DMA_DEAD_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_AC_2_TX_DMA_DEAD_POS    15
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_AC_1_TX_DMA_DEAD_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_AC_1_TX_DMA_DEAD_POS    14
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_AC_0_TX_DMA_DEAD_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_AC_0_TX_DMA_DEAD_POS    13
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_PT_ERROR_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_PT_ERROR_POS    12
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_OLBC_DSSS_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_OLBC_DSSS_POS    10
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_OLBC_OFDM_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_OLBC_OFDM_POS    9
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_FIFO_OVER_FLOW_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_FIFO_OVER_FLOW_POS    8
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_DMA_EMPTY_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_DMA_EMPTY_POS    7
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_MAC_PHYIF_OVERFLOW_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_MAC_PHYIF_OVERFLOW_POS    6
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_DMA_DISCARD_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_DMA_DISCARD_POS    5

#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_HTP_TX_FAILED_DMA_STATE_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_HTP_TX_FAILED_CS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_PAYLOAD_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_HEADER_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_HEADER_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_PHY_ERR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_MAC_PHYIF_UNDER_RUN_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_UNEXPECTED_TX_END_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_PAYLOAD_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_HTP_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_BCN_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_AC_3_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_AC_2_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_AC_1_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_AC_0_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_PT_ERROR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_OLBC_DSSS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_OLBC_OFDM_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_FIFO_OVER_FLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_DMA_EMPTY_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_MAC_PHYIF_OVERFLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_RX_DMA_DISCARD_RST    0x0

__INLINE void mac_hw0_mu0_error_int_event_status_lmac_unpack(uint8_t* htp_tx_failed_dma_state, uint8_t* htp_tx_failed_cs, uint8_t* rx_payload_dma_dead, uint8_t* rx_header_dma_dead, uint8_t* rx_header_dma_dead2, uint8_t* phy_err, uint8_t* mac_phyif_under_run, uint8_t* unexpected_tx_end, uint8_t* rx_payload_dma_dead2, uint8_t* htp_tx_dma_dead, uint8_t* bcn_tx_dma_dead, uint8_t* ac_3_tx_dma_dead, uint8_t* ac_2_tx_dma_dead, uint8_t* ac_1_tx_dma_dead, uint8_t* ac_0_tx_dma_dead, uint8_t* pt_error, uint8_t* olbc_dsss, uint8_t* olbc_ofdm, uint8_t* rx_fifo_over_flow, uint8_t* rx_dma_empty, uint8_t* mac_phyif_overflow, uint8_t* rx_dma_discard)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);

	*htp_tx_failed_dma_state = (localVal & ((uint32_t)0x08000000)) >>  27;
	*htp_tx_failed_cs = (localVal & ((uint32_t)0x04000000)) >>  26;
	*rx_payload_dma_dead = (localVal & ((uint32_t)0x02000000)) >>  25;
	*rx_header_dma_dead = (localVal & ((uint32_t)0x01000000)) >>  24;
	*rx_header_dma_dead2 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*phy_err = (localVal & ((uint32_t)0x00400000)) >>  22;
	*mac_phyif_under_run = (localVal & ((uint32_t)0x00200000)) >>  21;
	*unexpected_tx_end = (localVal & ((uint32_t)0x00100000)) >>  20;
	*rx_payload_dma_dead2 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*htp_tx_dma_dead = (localVal & ((uint32_t)0x00040000)) >>  18;
	*bcn_tx_dma_dead = (localVal & ((uint32_t)0x00020000)) >>  17;
	*ac_3_tx_dma_dead = (localVal & ((uint32_t)0x00010000)) >>  16;
	*ac_2_tx_dma_dead = (localVal & ((uint32_t)0x00008000)) >>  15;
	*ac_1_tx_dma_dead = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ac_0_tx_dma_dead = (localVal & ((uint32_t)0x00002000)) >>  13;
	*pt_error = (localVal & ((uint32_t)0x00001000)) >>  12;
	*olbc_dsss = (localVal & ((uint32_t)0x00000400)) >>  10;
	*olbc_ofdm = (localVal & ((uint32_t)0x00000200)) >>  9;
	*rx_fifo_over_flow = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_dma_empty = (localVal & ((uint32_t)0x00000080)) >>  7;
	*mac_phyif_overflow = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rx_dma_discard = (localVal & ((uint32_t)0x00000020)) >>  5;
}

__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_htp_tx_failed_dma_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_htp_tx_failed_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_rx_payload_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_rx_header_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_rx_header_dma_dead_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_phy_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_mac_phyif_under_run_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_unexpected_tx_end_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_rx_payload_dma_dead_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_htp_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_bcn_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_ac_3_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_ac_2_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_ac_1_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_ac_0_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_pt_error_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_olbc_dsss_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_olbc_ofdm_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_rx_fifo_over_flow_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_rx_dma_empty_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_mac_phyif_overflow_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_status_lmac_rx_dma_discard_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}

/**
 * @brief ERROR_INT_EVENT_CLEAR register definition
 *  Error interrupts status clear register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27    HTP_TX_FAILED_DMA_STATE   0              
 *    26    HTP_TX_FAILED_CS          0              
 *    25    RX_PAYLOAD_DMA_DEAD       0              
 *    24    RX_HEADER_DMA_DEAD        0              
 *    23    RX_HEADER_DMA_DEAD2       0              
 *    22    PHY_ERR                   0              
 *    21    MAC_PHYIF_UNDER_RUN       0              
 *    20    UNEXPECTED_TX_END         0              
 *    19    RX_PAYLOAD_DMA_DEAD2      0              
 *    18    HTP_TX_DMA_DEAD           0              
 *    17    BCN_TX_DMA_DEAD           0              
 *    16    AC_3_TX_DMA_DEAD          0              
 *    15    AC_2_TX_DMA_DEAD          0              
 *    14    AC_1_TX_DMA_DEAD          0              
 *    13    AC_0_TX_DMA_DEAD          0              
 *    12    PT_ERROR                  0              
 *    10    OLBC_DSSS                 0              
 *    09    OLBC_OFDM                 0              
 *    08    RX_FIFO_OVER_FLOW         0              
 *    07    RX_DMA_EMPTY              0              
 *    06    MAC_PHYIF_OVERFLOW        0              
 *    05    RX_DMA_DISCARD            0              
 * </pre>
 */
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008704)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_OFFSET      0x00008704
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_INDEX       0x000021C1
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RESET       0x00000000

__INLINE void mac_hw0_mu0_error_int_event_clear_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_HTP_TX_FAILED_DMA_STATE_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_HTP_TX_FAILED_DMA_STATE_POS    27
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_HTP_TX_FAILED_CS_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_HTP_TX_FAILED_CS_POS    26
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_PAYLOAD_DMA_DEAD_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_PAYLOAD_DMA_DEAD_POS    25
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_HEADER_DMA_DEAD_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_HEADER_DMA_DEAD_POS    24
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_HEADER_DMA_DEAD_2_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_HEADER_DMA_DEAD_2_POS    23
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_PHY_ERR_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_PHY_ERR_POS    22
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_MAC_PHYIF_UNDER_RUN_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_MAC_PHYIF_UNDER_RUN_POS    21
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_UNEXPECTED_TX_END_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_UNEXPECTED_TX_END_POS    20
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_PAYLOAD_DMA_DEAD_2_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_PAYLOAD_DMA_DEAD_2_POS    19
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_HTP_TX_DMA_DEAD_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_HTP_TX_DMA_DEAD_POS    18
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_BCN_TX_DMA_DEAD_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_BCN_TX_DMA_DEAD_POS    17
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_AC_3_TX_DMA_DEAD_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_AC_3_TX_DMA_DEAD_POS    16
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_AC_2_TX_DMA_DEAD_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_AC_2_TX_DMA_DEAD_POS    15
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_AC_1_TX_DMA_DEAD_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_AC_1_TX_DMA_DEAD_POS    14
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_AC_0_TX_DMA_DEAD_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_AC_0_TX_DMA_DEAD_POS    13
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_PT_ERROR_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_PT_ERROR_POS    12
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_OLBC_DSSS_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_OLBC_DSSS_POS    10
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_OLBC_OFDM_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_OLBC_OFDM_POS    9
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_FIFO_OVER_FLOW_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_FIFO_OVER_FLOW_POS    8
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_DMA_EMPTY_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_DMA_EMPTY_POS    7
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_MAC_PHYIF_OVERFLOW_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_MAC_PHYIF_OVERFLOW_POS    6
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_DMA_DISCARD_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_DMA_DISCARD_POS    5

#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_HTP_TX_FAILED_DMA_STATE_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_HTP_TX_FAILED_CS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_PAYLOAD_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_HEADER_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_HEADER_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_PHY_ERR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_MAC_PHYIF_UNDER_RUN_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_UNEXPECTED_TX_END_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_PAYLOAD_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_HTP_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_BCN_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_AC_3_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_AC_2_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_AC_1_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_AC_0_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_PT_ERROR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_OLBC_DSSS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_OLBC_OFDM_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_FIFO_OVER_FLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_DMA_EMPTY_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_MAC_PHYIF_OVERFLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_RX_DMA_DISCARD_RST    0x0

__INLINE void mac_hw0_mu0_error_int_event_clear_pack(uint8_t htp_tx_failed_dma_state, uint8_t htp_tx_failed_cs, uint8_t rx_payload_dma_dead, uint8_t rx_header_dma_dead, uint8_t rx_header_dma_dead2, uint8_t phy_err, uint8_t mac_phyif_under_run, uint8_t unexpected_tx_end, uint8_t rx_payload_dma_dead2, uint8_t htp_tx_dma_dead, uint8_t bcn_tx_dma_dead, uint8_t ac_3_tx_dma_dead, uint8_t ac_2_tx_dma_dead, uint8_t ac_1_tx_dma_dead, uint8_t ac_0_tx_dma_dead, uint8_t pt_error, uint8_t olbc_dsss, uint8_t olbc_ofdm, uint8_t rx_fifo_over_flow, uint8_t rx_dma_empty, uint8_t mac_phyif_overflow, uint8_t rx_dma_discard)
{
	ASSERT_ERR((((uint32_t)htp_tx_failed_dma_state << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_failed_cs << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_dma_dead << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_dma_dead << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_dma_dead2 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)phy_err << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)mac_phyif_under_run << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)unexpected_tx_end << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_dma_dead2 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_dma_dead << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)bcn_tx_dma_dead << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_tx_dma_dead << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_tx_dma_dead << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_tx_dma_dead << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_tx_dma_dead << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)pt_error << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)olbc_dsss << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)olbc_ofdm << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)rx_fifo_over_flow << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)rx_dma_empty << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)mac_phyif_overflow << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)rx_dma_discard << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR,  ((uint32_t)htp_tx_failed_dma_state << 27) |((uint32_t)htp_tx_failed_cs << 26) |((uint32_t)rx_payload_dma_dead << 25) |((uint32_t)rx_header_dma_dead << 24) |((uint32_t)rx_header_dma_dead2 << 23) |((uint32_t)phy_err << 22) |((uint32_t)mac_phyif_under_run << 21) |((uint32_t)unexpected_tx_end << 20) |((uint32_t)rx_payload_dma_dead2 << 19) |((uint32_t)htp_tx_dma_dead << 18) |((uint32_t)bcn_tx_dma_dead << 17) |((uint32_t)ac_3_tx_dma_dead << 16) |((uint32_t)ac_2_tx_dma_dead << 15) |((uint32_t)ac_1_tx_dma_dead << 14) |((uint32_t)ac_0_tx_dma_dead << 13) |((uint32_t)pt_error << 12) |((uint32_t)olbc_dsss << 10) |((uint32_t)olbc_ofdm << 9) |((uint32_t)rx_fifo_over_flow << 8) |((uint32_t)rx_dma_empty << 7) |((uint32_t)mac_phyif_overflow << 6) |((uint32_t)rx_dma_discard << 5));
}

__INLINE void mac_hw0_mu0_error_int_event_clear_htp_tx_failed_dma_state_setf(uint8_t htptxfaileddmastate)
{
	ASSERT_ERR((((uint32_t)htptxfaileddmastate << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)htptxfaileddmastate <<27));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_htp_tx_failed_cs_setf(uint8_t htptxfailedcs)
{
	ASSERT_ERR((((uint32_t)htptxfailedcs << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)htptxfailedcs <<26));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_rx_payload_dma_dead_setf(uint8_t rxpayloaddmadead)
{
	ASSERT_ERR((((uint32_t)rxpayloaddmadead << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)rxpayloaddmadead <<25));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_rx_header_dma_dead_setf(uint8_t rxheaderdmadead)
{
	ASSERT_ERR((((uint32_t)rxheaderdmadead << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)rxheaderdmadead <<24));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_rx_header_dma_dead_2_setf(uint8_t rxheaderdmadead2)
{
	ASSERT_ERR((((uint32_t)rxheaderdmadead2 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)rxheaderdmadead2 <<23));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_phy_err_setf(uint8_t phyerr)
{
	ASSERT_ERR((((uint32_t)phyerr << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)phyerr <<22));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_mac_phyif_under_run_setf(uint8_t macphyifunderrun)
{
	ASSERT_ERR((((uint32_t)macphyifunderrun << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)macphyifunderrun <<21));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_unexpected_tx_end_setf(uint8_t unexpectedtxend)
{
	ASSERT_ERR((((uint32_t)unexpectedtxend << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)unexpectedtxend <<20));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_rx_payload_dma_dead_2_setf(uint8_t rxpayloaddmadead2)
{
	ASSERT_ERR((((uint32_t)rxpayloaddmadead2 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)rxpayloaddmadead2 <<19));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_htp_tx_dma_dead_setf(uint8_t htptxdmadead)
{
	ASSERT_ERR((((uint32_t)htptxdmadead << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)htptxdmadead <<18));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_bcn_tx_dma_dead_setf(uint8_t bcntxdmadead)
{
	ASSERT_ERR((((uint32_t)bcntxdmadead << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)bcntxdmadead <<17));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_ac_3_tx_dma_dead_setf(uint8_t ac3txdmadead)
{
	ASSERT_ERR((((uint32_t)ac3txdmadead << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)ac3txdmadead <<16));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_ac_2_tx_dma_dead_setf(uint8_t ac2txdmadead)
{
	ASSERT_ERR((((uint32_t)ac2txdmadead << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)ac2txdmadead <<15));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_ac_1_tx_dma_dead_setf(uint8_t ac1txdmadead)
{
	ASSERT_ERR((((uint32_t)ac1txdmadead << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)ac1txdmadead <<14));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_ac_0_tx_dma_dead_setf(uint8_t ac0txdmadead)
{
	ASSERT_ERR((((uint32_t)ac0txdmadead << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)ac0txdmadead <<13));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_pt_error_setf(uint8_t pterror)
{
	ASSERT_ERR((((uint32_t)pterror << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)pterror <<12));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_olbc_dsss_setf(uint8_t olbcdsss)
{
	ASSERT_ERR((((uint32_t)olbcdsss << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)olbcdsss <<10));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_olbc_ofdm_setf(uint8_t olbcofdm)
{
	ASSERT_ERR((((uint32_t)olbcofdm << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)olbcofdm <<9));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_rx_fifo_over_flow_setf(uint8_t rxfifooverflow)
{
	ASSERT_ERR((((uint32_t)rxfifooverflow << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)rxfifooverflow <<8));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_rx_dma_empty_setf(uint8_t rxdmaempty)
{
	ASSERT_ERR((((uint32_t)rxdmaempty << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)rxdmaempty <<7));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_mac_phyif_overflow_setf(uint8_t macphyifoverflow)
{
	ASSERT_ERR((((uint32_t)macphyifoverflow << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)macphyifoverflow <<6));
}
__INLINE void mac_hw0_mu0_error_int_event_clear_rx_dma_discard_setf(uint8_t rxdmadiscard)
{
	ASSERT_ERR((((uint32_t)rxdmadiscard << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rxdmadiscard <<5));
}

/**
 * @brief ERROR_INT_EVENT_EN_LMAC register definition
 *  Error interrupts enable LMAC register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27    HTP_TX_FAILED_DMA_STATE   0              
 *    26    HTP_TX_FAILED_CS          0              
 *    25    RX_PAYLOAD_DMA_DEAD       0              
 *    24    RX_HEADER_DMA_DEAD        0              
 *    23    RX_HEADER_DMA_DEAD2       0              
 *    22    PHY_ERR                   0              
 *    21    MAC_PHYIF_UNDER_RUN       0              
 *    20    UNEXPECTED_TX_END         0              
 *    19    RX_PAYLOAD_DMA_DEAD2      0              
 *    18    HTP_TX_DMA_DEAD           0              
 *    17    BCN_TX_DMA_DEAD           0              
 *    16    AC_3_TX_DMA_DEAD          0              
 *    15    AC_2_TX_DMA_DEAD          0              
 *    14    AC_1_TX_DMA_DEAD          0              
 *    13    AC_0_TX_DMA_DEAD          0              
 *    12    PT_ERROR                  0              
 *    10    OLBC_DSSS                 0              
 *    09    OLBC_OFDM                 0              
 *    08    RX_FIFO_OVER_FLOW         0              
 *    07    RX_DMA_EMPTY              0              
 *    06    MAC_PHYIF_OVERFLOW        0              
 *    05    RX_DMA_DISCARD            0              
 * </pre>
 */
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008708)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_OFFSET      0x00008708
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_INDEX       0x000021C2
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_error_int_event_en_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
}

__INLINE void mac_hw0_mu0_error_int_event_en_lmac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_HTP_TX_FAILED_DMA_STATE_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_HTP_TX_FAILED_DMA_STATE_POS    27
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_HTP_TX_FAILED_CS_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_HTP_TX_FAILED_CS_POS    26
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_PAYLOAD_DMA_DEAD_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_PAYLOAD_DMA_DEAD_POS    25
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_HEADER_DMA_DEAD_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_HEADER_DMA_DEAD_POS    24
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_HEADER_DMA_DEAD_2_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_HEADER_DMA_DEAD_2_POS    23
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_PHY_ERR_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_PHY_ERR_POS    22
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_MAC_PHYIF_UNDER_RUN_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_MAC_PHYIF_UNDER_RUN_POS    21
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_UNEXPECTED_TX_END_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_UNEXPECTED_TX_END_POS    20
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_PAYLOAD_DMA_DEAD_2_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_PAYLOAD_DMA_DEAD_2_POS    19
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_HTP_TX_DMA_DEAD_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_HTP_TX_DMA_DEAD_POS    18
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_BCN_TX_DMA_DEAD_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_BCN_TX_DMA_DEAD_POS    17
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_AC_3_TX_DMA_DEAD_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_AC_3_TX_DMA_DEAD_POS    16
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_AC_2_TX_DMA_DEAD_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_AC_2_TX_DMA_DEAD_POS    15
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_AC_1_TX_DMA_DEAD_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_AC_1_TX_DMA_DEAD_POS    14
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_AC_0_TX_DMA_DEAD_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_AC_0_TX_DMA_DEAD_POS    13
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_PT_ERROR_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_PT_ERROR_POS    12
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_OLBC_DSSS_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_OLBC_DSSS_POS    10
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_OLBC_OFDM_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_OLBC_OFDM_POS    9
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_FIFO_OVER_FLOW_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_FIFO_OVER_FLOW_POS    8
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_DMA_EMPTY_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_DMA_EMPTY_POS    7
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_MAC_PHYIF_OVERFLOW_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_MAC_PHYIF_OVERFLOW_POS    6
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_DMA_DISCARD_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_DMA_DISCARD_POS    5

#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_HTP_TX_FAILED_DMA_STATE_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_HTP_TX_FAILED_CS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_PAYLOAD_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_HEADER_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_HEADER_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_PHY_ERR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_MAC_PHYIF_UNDER_RUN_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_UNEXPECTED_TX_END_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_PAYLOAD_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_HTP_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_BCN_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_AC_3_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_AC_2_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_AC_1_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_AC_0_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_PT_ERROR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_OLBC_DSSS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_OLBC_OFDM_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_FIFO_OVER_FLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_DMA_EMPTY_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_MAC_PHYIF_OVERFLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_RX_DMA_DISCARD_RST    0x0

__INLINE void mac_hw0_mu0_error_int_event_en_lmac_pack(uint8_t htp_tx_failed_dma_state, uint8_t htp_tx_failed_cs, uint8_t rx_payload_dma_dead, uint8_t rx_header_dma_dead, uint8_t rx_header_dma_dead2, uint8_t phy_err, uint8_t mac_phyif_under_run, uint8_t unexpected_tx_end, uint8_t rx_payload_dma_dead2, uint8_t htp_tx_dma_dead, uint8_t bcn_tx_dma_dead, uint8_t ac_3_tx_dma_dead, uint8_t ac_2_tx_dma_dead, uint8_t ac_1_tx_dma_dead, uint8_t ac_0_tx_dma_dead, uint8_t pt_error, uint8_t olbc_dsss, uint8_t olbc_ofdm, uint8_t rx_fifo_over_flow, uint8_t rx_dma_empty, uint8_t mac_phyif_overflow, uint8_t rx_dma_discard)
{
	ASSERT_ERR((((uint32_t)htp_tx_failed_dma_state << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_failed_cs << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_dma_dead << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_dma_dead << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_dma_dead2 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)phy_err << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)mac_phyif_under_run << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)unexpected_tx_end << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_dma_dead2 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_dma_dead << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)bcn_tx_dma_dead << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_tx_dma_dead << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_tx_dma_dead << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_tx_dma_dead << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_tx_dma_dead << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)pt_error << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)olbc_dsss << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)olbc_ofdm << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)rx_fifo_over_flow << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)rx_dma_empty << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)mac_phyif_overflow << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)rx_dma_discard << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR,  ((uint32_t)htp_tx_failed_dma_state << 27) |((uint32_t)htp_tx_failed_cs << 26) |((uint32_t)rx_payload_dma_dead << 25) |((uint32_t)rx_header_dma_dead << 24) |((uint32_t)rx_header_dma_dead2 << 23) |((uint32_t)phy_err << 22) |((uint32_t)mac_phyif_under_run << 21) |((uint32_t)unexpected_tx_end << 20) |((uint32_t)rx_payload_dma_dead2 << 19) |((uint32_t)htp_tx_dma_dead << 18) |((uint32_t)bcn_tx_dma_dead << 17) |((uint32_t)ac_3_tx_dma_dead << 16) |((uint32_t)ac_2_tx_dma_dead << 15) |((uint32_t)ac_1_tx_dma_dead << 14) |((uint32_t)ac_0_tx_dma_dead << 13) |((uint32_t)pt_error << 12) |((uint32_t)olbc_dsss << 10) |((uint32_t)olbc_ofdm << 9) |((uint32_t)rx_fifo_over_flow << 8) |((uint32_t)rx_dma_empty << 7) |((uint32_t)mac_phyif_overflow << 6) |((uint32_t)rx_dma_discard << 5));
}

__INLINE void mac_hw0_mu0_error_int_event_en_lmac_unpack(uint8_t* htp_tx_failed_dma_state, uint8_t* htp_tx_failed_cs, uint8_t* rx_payload_dma_dead, uint8_t* rx_header_dma_dead, uint8_t* rx_header_dma_dead2, uint8_t* phy_err, uint8_t* mac_phyif_under_run, uint8_t* unexpected_tx_end, uint8_t* rx_payload_dma_dead2, uint8_t* htp_tx_dma_dead, uint8_t* bcn_tx_dma_dead, uint8_t* ac_3_tx_dma_dead, uint8_t* ac_2_tx_dma_dead, uint8_t* ac_1_tx_dma_dead, uint8_t* ac_0_tx_dma_dead, uint8_t* pt_error, uint8_t* olbc_dsss, uint8_t* olbc_ofdm, uint8_t* rx_fifo_over_flow, uint8_t* rx_dma_empty, uint8_t* mac_phyif_overflow, uint8_t* rx_dma_discard)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);

	*htp_tx_failed_dma_state = (localVal & ((uint32_t)0x08000000)) >>  27;
	*htp_tx_failed_cs = (localVal & ((uint32_t)0x04000000)) >>  26;
	*rx_payload_dma_dead = (localVal & ((uint32_t)0x02000000)) >>  25;
	*rx_header_dma_dead = (localVal & ((uint32_t)0x01000000)) >>  24;
	*rx_header_dma_dead2 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*phy_err = (localVal & ((uint32_t)0x00400000)) >>  22;
	*mac_phyif_under_run = (localVal & ((uint32_t)0x00200000)) >>  21;
	*unexpected_tx_end = (localVal & ((uint32_t)0x00100000)) >>  20;
	*rx_payload_dma_dead2 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*htp_tx_dma_dead = (localVal & ((uint32_t)0x00040000)) >>  18;
	*bcn_tx_dma_dead = (localVal & ((uint32_t)0x00020000)) >>  17;
	*ac_3_tx_dma_dead = (localVal & ((uint32_t)0x00010000)) >>  16;
	*ac_2_tx_dma_dead = (localVal & ((uint32_t)0x00008000)) >>  15;
	*ac_1_tx_dma_dead = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ac_0_tx_dma_dead = (localVal & ((uint32_t)0x00002000)) >>  13;
	*pt_error = (localVal & ((uint32_t)0x00001000)) >>  12;
	*olbc_dsss = (localVal & ((uint32_t)0x00000400)) >>  10;
	*olbc_ofdm = (localVal & ((uint32_t)0x00000200)) >>  9;
	*rx_fifo_over_flow = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_dma_empty = (localVal & ((uint32_t)0x00000080)) >>  7;
	*mac_phyif_overflow = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rx_dma_discard = (localVal & ((uint32_t)0x00000020)) >>  5;
}

__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_htp_tx_failed_dma_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_htp_tx_failed_dma_state_setf(uint8_t htptxfaileddmastate)
{
	ASSERT_ERR((((uint32_t)htptxfaileddmastate << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)htptxfaileddmastate <<27));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_htp_tx_failed_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_htp_tx_failed_cs_setf(uint8_t htptxfailedcs)
{
	ASSERT_ERR((((uint32_t)htptxfailedcs << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)htptxfailedcs <<26));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_rx_payload_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_rx_payload_dma_dead_setf(uint8_t rxpayloaddmadead)
{
	ASSERT_ERR((((uint32_t)rxpayloaddmadead << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)rxpayloaddmadead <<25));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_rx_header_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_rx_header_dma_dead_setf(uint8_t rxheaderdmadead)
{
	ASSERT_ERR((((uint32_t)rxheaderdmadead << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)rxheaderdmadead <<24));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_rx_header_dma_dead_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_rx_header_dma_dead_2_setf(uint8_t rxheaderdmadead2)
{
	ASSERT_ERR((((uint32_t)rxheaderdmadead2 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)rxheaderdmadead2 <<23));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_phy_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_phy_err_setf(uint8_t phyerr)
{
	ASSERT_ERR((((uint32_t)phyerr << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)phyerr <<22));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_mac_phyif_under_run_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_mac_phyif_under_run_setf(uint8_t macphyifunderrun)
{
	ASSERT_ERR((((uint32_t)macphyifunderrun << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)macphyifunderrun <<21));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_unexpected_tx_end_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_unexpected_tx_end_setf(uint8_t unexpectedtxend)
{
	ASSERT_ERR((((uint32_t)unexpectedtxend << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)unexpectedtxend <<20));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_rx_payload_dma_dead_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_rx_payload_dma_dead_2_setf(uint8_t rxpayloaddmadead2)
{
	ASSERT_ERR((((uint32_t)rxpayloaddmadead2 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)rxpayloaddmadead2 <<19));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_htp_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_htp_tx_dma_dead_setf(uint8_t htptxdmadead)
{
	ASSERT_ERR((((uint32_t)htptxdmadead << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)htptxdmadead <<18));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_bcn_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_bcn_tx_dma_dead_setf(uint8_t bcntxdmadead)
{
	ASSERT_ERR((((uint32_t)bcntxdmadead << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)bcntxdmadead <<17));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_ac_3_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_ac_3_tx_dma_dead_setf(uint8_t ac3txdmadead)
{
	ASSERT_ERR((((uint32_t)ac3txdmadead << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)ac3txdmadead <<16));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_ac_2_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_ac_2_tx_dma_dead_setf(uint8_t ac2txdmadead)
{
	ASSERT_ERR((((uint32_t)ac2txdmadead << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)ac2txdmadead <<15));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_ac_1_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_ac_1_tx_dma_dead_setf(uint8_t ac1txdmadead)
{
	ASSERT_ERR((((uint32_t)ac1txdmadead << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)ac1txdmadead <<14));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_ac_0_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_ac_0_tx_dma_dead_setf(uint8_t ac0txdmadead)
{
	ASSERT_ERR((((uint32_t)ac0txdmadead << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)ac0txdmadead <<13));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_pt_error_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_pt_error_setf(uint8_t pterror)
{
	ASSERT_ERR((((uint32_t)pterror << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)pterror <<12));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_olbc_dsss_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_olbc_dsss_setf(uint8_t olbcdsss)
{
	ASSERT_ERR((((uint32_t)olbcdsss << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)olbcdsss <<10));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_olbc_ofdm_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_olbc_ofdm_setf(uint8_t olbcofdm)
{
	ASSERT_ERR((((uint32_t)olbcofdm << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)olbcofdm <<9));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_rx_fifo_over_flow_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_rx_fifo_over_flow_setf(uint8_t rxfifooverflow)
{
	ASSERT_ERR((((uint32_t)rxfifooverflow << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)rxfifooverflow <<8));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_rx_dma_empty_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_rx_dma_empty_setf(uint8_t rxdmaempty)
{
	ASSERT_ERR((((uint32_t)rxdmaempty << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)rxdmaempty <<7));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_mac_phyif_overflow_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_mac_phyif_overflow_setf(uint8_t macphyifoverflow)
{
	ASSERT_ERR((((uint32_t)macphyifoverflow << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)macphyifoverflow <<6));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_lmac_rx_dma_discard_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_error_int_event_en_lmac_rx_dma_discard_setf(uint8_t rxdmadiscard)
{
	ASSERT_ERR((((uint32_t)rxdmadiscard << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rxdmadiscard <<5));
}

/**
 * @brief ERROR_INT_EVENT_EN_UMAC register definition
 *  Error interrupts enable UMAC register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    27    HTP_TX_FAILED_DMA_STATE   0              
 *    26    HTP_TX_FAILED_CS          0              
 *    25    RX_PAYLOAD_DMA_DEAD       0              
 *    24    RX_HEADER_DMA_DEAD        0              
 *    23    RX_HEADER_DMA_DEAD2       0              
 *    22    PHY_ERR                   0              
 *    21    MAC_PHYIF_UNDER_RUN       0              
 *    20    UNEXPECTED_TX_END         0              
 *    19    RX_PAYLOAD_DMA_DEAD2      0              
 *    18    HTP_TX_DMA_DEAD           0              
 *    17    BCN_TX_DMA_DEAD           0              
 *    16    AC_3_TX_DMA_DEAD          0              
 *    15    AC_2_TX_DMA_DEAD          0              
 *    14    AC_1_TX_DMA_DEAD          0              
 *    13    AC_0_TX_DMA_DEAD          0              
 *    12    PT_ERROR                  0              
 *    10    OLBC_DSSS                 0              
 *    09    OLBC_OFDM                 0              
 *    08    RX_FIFO_OVER_FLOW         0              
 *    07    RX_DMA_EMPTY              0              
 *    06    MAC_PHYIF_OVERFLOW        0              
 *    05    RX_DMA_DISCARD            0              
 * </pre>
 */
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000870C)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_OFFSET      0x0000870C
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_INDEX       0x000021C3
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_error_int_event_en_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
}

__INLINE void mac_hw0_mu0_error_int_event_en_umac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_HTP_TX_FAILED_DMA_STATE_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_HTP_TX_FAILED_DMA_STATE_POS    27
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_HTP_TX_FAILED_CS_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_HTP_TX_FAILED_CS_POS    26
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_PAYLOAD_DMA_DEAD_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_PAYLOAD_DMA_DEAD_POS    25
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_HEADER_DMA_DEAD_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_HEADER_DMA_DEAD_POS    24
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_HEADER_DMA_DEAD_2_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_HEADER_DMA_DEAD_2_POS    23
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_PHY_ERR_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_PHY_ERR_POS    22
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_MAC_PHYIF_UNDER_RUN_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_MAC_PHYIF_UNDER_RUN_POS    21
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_UNEXPECTED_TX_END_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_UNEXPECTED_TX_END_POS    20
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_PAYLOAD_DMA_DEAD_2_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_PAYLOAD_DMA_DEAD_2_POS    19
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_HTP_TX_DMA_DEAD_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_HTP_TX_DMA_DEAD_POS    18
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_BCN_TX_DMA_DEAD_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_BCN_TX_DMA_DEAD_POS    17
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_AC_3_TX_DMA_DEAD_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_AC_3_TX_DMA_DEAD_POS    16
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_AC_2_TX_DMA_DEAD_BIT    ((uint32_t)0x00008000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_AC_2_TX_DMA_DEAD_POS    15
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_AC_1_TX_DMA_DEAD_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_AC_1_TX_DMA_DEAD_POS    14
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_AC_0_TX_DMA_DEAD_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_AC_0_TX_DMA_DEAD_POS    13
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_PT_ERROR_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_PT_ERROR_POS    12
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_OLBC_DSSS_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_OLBC_DSSS_POS    10
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_OLBC_OFDM_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_OLBC_OFDM_POS    9
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_FIFO_OVER_FLOW_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_FIFO_OVER_FLOW_POS    8
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_DMA_EMPTY_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_DMA_EMPTY_POS    7
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_MAC_PHYIF_OVERFLOW_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_MAC_PHYIF_OVERFLOW_POS    6
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_DMA_DISCARD_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_DMA_DISCARD_POS    5

#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_HTP_TX_FAILED_DMA_STATE_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_HTP_TX_FAILED_CS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_PAYLOAD_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_HEADER_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_HEADER_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_PHY_ERR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_MAC_PHYIF_UNDER_RUN_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_UNEXPECTED_TX_END_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_PAYLOAD_DMA_DEAD_2_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_HTP_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_BCN_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_AC_3_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_AC_2_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_AC_1_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_AC_0_TX_DMA_DEAD_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_PT_ERROR_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_OLBC_DSSS_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_OLBC_OFDM_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_FIFO_OVER_FLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_DMA_EMPTY_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_MAC_PHYIF_OVERFLOW_RST    0x0
#define MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_RX_DMA_DISCARD_RST    0x0

__INLINE void mac_hw0_mu0_error_int_event_en_umac_pack(uint8_t htp_tx_failed_dma_state, uint8_t htp_tx_failed_cs, uint8_t rx_payload_dma_dead, uint8_t rx_header_dma_dead, uint8_t rx_header_dma_dead2, uint8_t phy_err, uint8_t mac_phyif_under_run, uint8_t unexpected_tx_end, uint8_t rx_payload_dma_dead2, uint8_t htp_tx_dma_dead, uint8_t bcn_tx_dma_dead, uint8_t ac_3_tx_dma_dead, uint8_t ac_2_tx_dma_dead, uint8_t ac_1_tx_dma_dead, uint8_t ac_0_tx_dma_dead, uint8_t pt_error, uint8_t olbc_dsss, uint8_t olbc_ofdm, uint8_t rx_fifo_over_flow, uint8_t rx_dma_empty, uint8_t mac_phyif_overflow, uint8_t rx_dma_discard)
{
	ASSERT_ERR((((uint32_t)htp_tx_failed_dma_state << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_failed_cs << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_dma_dead << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_dma_dead << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_header_dma_dead2 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)phy_err << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)mac_phyif_under_run << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)unexpected_tx_end << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_dma_dead2 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_dma_dead << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)bcn_tx_dma_dead << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_tx_dma_dead << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_tx_dma_dead << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_tx_dma_dead << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_tx_dma_dead << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)pt_error << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)olbc_dsss << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)olbc_ofdm << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)rx_fifo_over_flow << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)rx_dma_empty << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)mac_phyif_overflow << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)rx_dma_discard << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR,  ((uint32_t)htp_tx_failed_dma_state << 27) |((uint32_t)htp_tx_failed_cs << 26) |((uint32_t)rx_payload_dma_dead << 25) |((uint32_t)rx_header_dma_dead << 24) |((uint32_t)rx_header_dma_dead2 << 23) |((uint32_t)phy_err << 22) |((uint32_t)mac_phyif_under_run << 21) |((uint32_t)unexpected_tx_end << 20) |((uint32_t)rx_payload_dma_dead2 << 19) |((uint32_t)htp_tx_dma_dead << 18) |((uint32_t)bcn_tx_dma_dead << 17) |((uint32_t)ac_3_tx_dma_dead << 16) |((uint32_t)ac_2_tx_dma_dead << 15) |((uint32_t)ac_1_tx_dma_dead << 14) |((uint32_t)ac_0_tx_dma_dead << 13) |((uint32_t)pt_error << 12) |((uint32_t)olbc_dsss << 10) |((uint32_t)olbc_ofdm << 9) |((uint32_t)rx_fifo_over_flow << 8) |((uint32_t)rx_dma_empty << 7) |((uint32_t)mac_phyif_overflow << 6) |((uint32_t)rx_dma_discard << 5));
}

__INLINE void mac_hw0_mu0_error_int_event_en_umac_unpack(uint8_t* htp_tx_failed_dma_state, uint8_t* htp_tx_failed_cs, uint8_t* rx_payload_dma_dead, uint8_t* rx_header_dma_dead, uint8_t* rx_header_dma_dead2, uint8_t* phy_err, uint8_t* mac_phyif_under_run, uint8_t* unexpected_tx_end, uint8_t* rx_payload_dma_dead2, uint8_t* htp_tx_dma_dead, uint8_t* bcn_tx_dma_dead, uint8_t* ac_3_tx_dma_dead, uint8_t* ac_2_tx_dma_dead, uint8_t* ac_1_tx_dma_dead, uint8_t* ac_0_tx_dma_dead, uint8_t* pt_error, uint8_t* olbc_dsss, uint8_t* olbc_ofdm, uint8_t* rx_fifo_over_flow, uint8_t* rx_dma_empty, uint8_t* mac_phyif_overflow, uint8_t* rx_dma_discard)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);

	*htp_tx_failed_dma_state = (localVal & ((uint32_t)0x08000000)) >>  27;
	*htp_tx_failed_cs = (localVal & ((uint32_t)0x04000000)) >>  26;
	*rx_payload_dma_dead = (localVal & ((uint32_t)0x02000000)) >>  25;
	*rx_header_dma_dead = (localVal & ((uint32_t)0x01000000)) >>  24;
	*rx_header_dma_dead2 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*phy_err = (localVal & ((uint32_t)0x00400000)) >>  22;
	*mac_phyif_under_run = (localVal & ((uint32_t)0x00200000)) >>  21;
	*unexpected_tx_end = (localVal & ((uint32_t)0x00100000)) >>  20;
	*rx_payload_dma_dead2 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*htp_tx_dma_dead = (localVal & ((uint32_t)0x00040000)) >>  18;
	*bcn_tx_dma_dead = (localVal & ((uint32_t)0x00020000)) >>  17;
	*ac_3_tx_dma_dead = (localVal & ((uint32_t)0x00010000)) >>  16;
	*ac_2_tx_dma_dead = (localVal & ((uint32_t)0x00008000)) >>  15;
	*ac_1_tx_dma_dead = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ac_0_tx_dma_dead = (localVal & ((uint32_t)0x00002000)) >>  13;
	*pt_error = (localVal & ((uint32_t)0x00001000)) >>  12;
	*olbc_dsss = (localVal & ((uint32_t)0x00000400)) >>  10;
	*olbc_ofdm = (localVal & ((uint32_t)0x00000200)) >>  9;
	*rx_fifo_over_flow = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_dma_empty = (localVal & ((uint32_t)0x00000080)) >>  7;
	*mac_phyif_overflow = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rx_dma_discard = (localVal & ((uint32_t)0x00000020)) >>  5;
}

__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_htp_tx_failed_dma_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_htp_tx_failed_dma_state_setf(uint8_t htptxfaileddmastate)
{
	ASSERT_ERR((((uint32_t)htptxfaileddmastate << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)htptxfaileddmastate <<27));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_htp_tx_failed_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_htp_tx_failed_cs_setf(uint8_t htptxfailedcs)
{
	ASSERT_ERR((((uint32_t)htptxfailedcs << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)htptxfailedcs <<26));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_rx_payload_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_rx_payload_dma_dead_setf(uint8_t rxpayloaddmadead)
{
	ASSERT_ERR((((uint32_t)rxpayloaddmadead << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)rxpayloaddmadead <<25));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_rx_header_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_rx_header_dma_dead_setf(uint8_t rxheaderdmadead)
{
	ASSERT_ERR((((uint32_t)rxheaderdmadead << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)rxheaderdmadead <<24));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_rx_header_dma_dead_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_rx_header_dma_dead_2_setf(uint8_t rxheaderdmadead2)
{
	ASSERT_ERR((((uint32_t)rxheaderdmadead2 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)rxheaderdmadead2 <<23));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_phy_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_phy_err_setf(uint8_t phyerr)
{
	ASSERT_ERR((((uint32_t)phyerr << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)phyerr <<22));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_mac_phyif_under_run_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_mac_phyif_under_run_setf(uint8_t macphyifunderrun)
{
	ASSERT_ERR((((uint32_t)macphyifunderrun << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)macphyifunderrun <<21));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_unexpected_tx_end_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_unexpected_tx_end_setf(uint8_t unexpectedtxend)
{
	ASSERT_ERR((((uint32_t)unexpectedtxend << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)unexpectedtxend <<20));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_rx_payload_dma_dead_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_rx_payload_dma_dead_2_setf(uint8_t rxpayloaddmadead2)
{
	ASSERT_ERR((((uint32_t)rxpayloaddmadead2 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)rxpayloaddmadead2 <<19));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_htp_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_htp_tx_dma_dead_setf(uint8_t htptxdmadead)
{
	ASSERT_ERR((((uint32_t)htptxdmadead << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)htptxdmadead <<18));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_bcn_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_bcn_tx_dma_dead_setf(uint8_t bcntxdmadead)
{
	ASSERT_ERR((((uint32_t)bcntxdmadead << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)bcntxdmadead <<17));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_ac_3_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_ac_3_tx_dma_dead_setf(uint8_t ac3txdmadead)
{
	ASSERT_ERR((((uint32_t)ac3txdmadead << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)ac3txdmadead <<16));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_ac_2_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_ac_2_tx_dma_dead_setf(uint8_t ac2txdmadead)
{
	ASSERT_ERR((((uint32_t)ac2txdmadead << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)ac2txdmadead <<15));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_ac_1_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_ac_1_tx_dma_dead_setf(uint8_t ac1txdmadead)
{
	ASSERT_ERR((((uint32_t)ac1txdmadead << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)ac1txdmadead <<14));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_ac_0_tx_dma_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_ac_0_tx_dma_dead_setf(uint8_t ac0txdmadead)
{
	ASSERT_ERR((((uint32_t)ac0txdmadead << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)ac0txdmadead <<13));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_pt_error_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_pt_error_setf(uint8_t pterror)
{
	ASSERT_ERR((((uint32_t)pterror << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)pterror <<12));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_olbc_dsss_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_olbc_dsss_setf(uint8_t olbcdsss)
{
	ASSERT_ERR((((uint32_t)olbcdsss << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)olbcdsss <<10));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_olbc_ofdm_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_olbc_ofdm_setf(uint8_t olbcofdm)
{
	ASSERT_ERR((((uint32_t)olbcofdm << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)olbcofdm <<9));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_rx_fifo_over_flow_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_rx_fifo_over_flow_setf(uint8_t rxfifooverflow)
{
	ASSERT_ERR((((uint32_t)rxfifooverflow << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)rxfifooverflow <<8));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_rx_dma_empty_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_rx_dma_empty_setf(uint8_t rxdmaempty)
{
	ASSERT_ERR((((uint32_t)rxdmaempty << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)rxdmaempty <<7));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_mac_phyif_overflow_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_mac_phyif_overflow_setf(uint8_t macphyifoverflow)
{
	ASSERT_ERR((((uint32_t)macphyifoverflow << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)macphyifoverflow <<6));
}
__INLINE uint8_t mac_hw0_mu0_error_int_event_en_umac_rx_dma_discard_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_error_int_event_en_umac_rx_dma_discard_setf(uint8_t rxdmadiscard)
{
	ASSERT_ERR((((uint32_t)rxdmadiscard << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_ERROR_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rxdmadiscard <<5));
}

/**
 * @brief GEN_INT_EVENT_STATUS_LMAC register definition
 *  General interrupts events status LMAC register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    UL_BSS_COLOR_COLLISION    0              
 *    30    DL_BSS_COLOR_COLLISION    0              
 *    29    ABS_TIMERS_9              0              
 *    28    ABS_TIMERS_8              0              
 *    27    ABS_TIMERS_7              0              
 *    26    ABS_TIMERS_6              0              
 *    25    ABS_TIMERS_5              0              
 *    24    ABS_TIMERS_4              0              
 *    23    ABS_TIMERS_3              0              
 *    22    ABS_TIMERS_2              0              
 *    21    ABS_TIMERS_1              0              
 *    20    ABS_TIMERS_0              0              
 *    19    IMP_SEC_DTIM              0              
 *    18    IMP_PRI_DTIM              0              
 *    11    TIM_SET                   0              
 *    02    IDLE_INTERRUPT            0              
 *    01    IMP_SEC_TBTT              0              
 *    00    IMP_PRI_TBTT              0              
 * </pre>
 */
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008710)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_OFFSET      0x00008710
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_INDEX       0x000021C4
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_gen_int_event_status_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_UL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_UL_BSS_COLOR_COLLISION_POS    31
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_DL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_DL_BSS_COLOR_COLLISION_POS    30
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_9_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_9_POS    29
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_8_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_8_POS    28
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_7_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_7_POS    27
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_6_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_6_POS    26
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_5_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_5_POS    25
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_4_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_4_POS    24
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_3_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_3_POS    23
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_2_POS    22
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_1_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_1_POS    21
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_0_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_0_POS    20
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_IMP_SEC_DTIM_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_IMP_SEC_DTIM_POS    19
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_IMP_PRI_DTIM_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_IMP_PRI_DTIM_POS    18
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_TIM_SET_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_TIM_SET_POS    11
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_IDLE_INTERRUPT_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_IDLE_INTERRUPT_POS    2
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_IMP_SEC_TBTT_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_IMP_SEC_TBTT_POS    1
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_IMP_PRI_TBTT_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_IMP_PRI_TBTT_POS    0

#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_UL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_DL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_9_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_8_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_7_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_6_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_5_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_4_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_3_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_2_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_1_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ABS_TIMERS_0_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_IMP_SEC_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_IMP_PRI_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_TIM_SET_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_IDLE_INTERRUPT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_IMP_SEC_TBTT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_IMP_PRI_TBTT_RST    0x0

__INLINE void mac_hw0_mu0_gen_int_event_status_lmac_unpack(uint8_t* ul_bss_color_collision, uint8_t* dl_bss_color_collision, uint8_t* abs_timers_9, uint8_t* abs_timers_8, uint8_t* abs_timers_7, uint8_t* abs_timers_6, uint8_t* abs_timers_5, uint8_t* abs_timers_4, uint8_t* abs_timers_3, uint8_t* abs_timers_2, uint8_t* abs_timers_1, uint8_t* abs_timers_0, uint8_t* imp_sec_dtim, uint8_t* imp_pri_dtim, uint8_t* tim_set, uint8_t* idle_interrupt, uint8_t* imp_sec_tbtt, uint8_t* imp_pri_tbtt)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);

	*ul_bss_color_collision = (localVal & ((uint32_t)0x80000000)) >>  31;
	*dl_bss_color_collision = (localVal & ((uint32_t)0x40000000)) >>  30;
	*abs_timers_9 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*abs_timers_8 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*abs_timers_7 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*abs_timers_6 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*abs_timers_5 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*abs_timers_4 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*abs_timers_3 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*abs_timers_2 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*abs_timers_1 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*abs_timers_0 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*imp_sec_dtim = (localVal & ((uint32_t)0x00080000)) >>  19;
	*imp_pri_dtim = (localVal & ((uint32_t)0x00040000)) >>  18;
	*tim_set = (localVal & ((uint32_t)0x00000800)) >>  11;
	*idle_interrupt = (localVal & ((uint32_t)0x00000004)) >>  2;
	*imp_sec_tbtt = (localVal & ((uint32_t)0x00000002)) >>  1;
	*imp_pri_tbtt = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_ul_bss_color_collision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_dl_bss_color_collision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_abs_timers_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_abs_timers_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_abs_timers_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_abs_timers_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_abs_timers_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_abs_timers_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_abs_timers_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_abs_timers_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_abs_timers_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_abs_timers_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_imp_sec_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_imp_pri_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_tim_set_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_idle_interrupt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_imp_sec_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_status_lmac_imp_pri_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief GEN_INT_EVENT_CLEAR register definition
 *  General interrupts status clear register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    UL_BSS_COLOR_COLLISION    0              
 *    30    DL_BSS_COLOR_COLLISION    0              
 *    29    ABS_TIMERS_9              0              
 *    28    ABS_TIMERS_8              0              
 *    27    ABS_TIMERS_7              0              
 *    26    ABS_TIMERS_6              0              
 *    25    ABS_TIMERS_5              0              
 *    24    ABS_TIMERS_4              0              
 *    23    ABS_TIMERS_3              0              
 *    22    ABS_TIMERS_2              0              
 *    21    ABS_TIMERS_1              0              
 *    20    ABS_TIMERS_0              0              
 *    19    IMP_SEC_DTIM              0              
 *    18    IMP_PRI_DTIM              0              
 *    11    TIM_SET                   0              
 *    02    IDLE_INTERRUPT            0              
 *    01    IMP_SEC_TBTT              0              
 *    00    IMP_PRI_TBTT              0              
 * </pre>
 */
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008714)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_OFFSET      0x00008714
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_INDEX       0x000021C5
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_RESET       0x00000000

__INLINE void mac_hw0_mu0_gen_int_event_clear_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_UL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_UL_BSS_COLOR_COLLISION_POS    31
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_DL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_DL_BSS_COLOR_COLLISION_POS    30
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_9_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_9_POS    29
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_8_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_8_POS    28
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_7_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_7_POS    27
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_6_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_6_POS    26
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_5_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_5_POS    25
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_4_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_4_POS    24
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_3_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_3_POS    23
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_2_POS    22
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_1_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_1_POS    21
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_0_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_0_POS    20
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_IMP_SEC_DTIM_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_IMP_SEC_DTIM_POS    19
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_IMP_PRI_DTIM_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_IMP_PRI_DTIM_POS    18
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_TIM_SET_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_TIM_SET_POS    11
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_IDLE_INTERRUPT_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_IDLE_INTERRUPT_POS    2
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_IMP_SEC_TBTT_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_IMP_SEC_TBTT_POS    1
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_IMP_PRI_TBTT_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_IMP_PRI_TBTT_POS    0

#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_UL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_DL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_9_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_8_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_7_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_6_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_5_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_4_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_3_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_2_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_1_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ABS_TIMERS_0_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_IMP_SEC_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_IMP_PRI_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_TIM_SET_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_IDLE_INTERRUPT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_IMP_SEC_TBTT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_IMP_PRI_TBTT_RST    0x0

__INLINE void mac_hw0_mu0_gen_int_event_clear_pack(uint8_t ul_bss_color_collision, uint8_t dl_bss_color_collision, uint8_t abs_timers_9, uint8_t abs_timers_8, uint8_t abs_timers_7, uint8_t abs_timers_6, uint8_t abs_timers_5, uint8_t abs_timers_4, uint8_t abs_timers_3, uint8_t abs_timers_2, uint8_t abs_timers_1, uint8_t abs_timers_0, uint8_t imp_sec_dtim, uint8_t imp_pri_dtim, uint8_t tim_set, uint8_t idle_interrupt, uint8_t imp_sec_tbtt, uint8_t imp_pri_tbtt)
{
	ASSERT_ERR((((uint32_t)ul_bss_color_collision << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)dl_bss_color_collision << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_9 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_8 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_7 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_6 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_5 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_4 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_3 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_2 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_1 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_0 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)imp_sec_dtim << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)imp_pri_dtim << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)tim_set << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)idle_interrupt << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)imp_sec_tbtt << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)imp_pri_tbtt << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR,  ((uint32_t)ul_bss_color_collision << 31) |((uint32_t)dl_bss_color_collision << 30) |((uint32_t)abs_timers_9 << 29) |((uint32_t)abs_timers_8 << 28) |((uint32_t)abs_timers_7 << 27) |((uint32_t)abs_timers_6 << 26) |((uint32_t)abs_timers_5 << 25) |((uint32_t)abs_timers_4 << 24) |((uint32_t)abs_timers_3 << 23) |((uint32_t)abs_timers_2 << 22) |((uint32_t)abs_timers_1 << 21) |((uint32_t)abs_timers_0 << 20) |((uint32_t)imp_sec_dtim << 19) |((uint32_t)imp_pri_dtim << 18) |((uint32_t)tim_set << 11) |((uint32_t)idle_interrupt << 2) |((uint32_t)imp_sec_tbtt << 1) |((uint32_t)imp_pri_tbtt << 0));
}

__INLINE void mac_hw0_mu0_gen_int_event_clear_ul_bss_color_collision_setf(uint8_t ulbsscolorcollision)
{
	ASSERT_ERR((((uint32_t)ulbsscolorcollision << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)ulbsscolorcollision <<31));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_dl_bss_color_collision_setf(uint8_t dlbsscolorcollision)
{
	ASSERT_ERR((((uint32_t)dlbsscolorcollision << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)dlbsscolorcollision <<30));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_abs_timers_9_setf(uint8_t abstimers9)
{
	ASSERT_ERR((((uint32_t)abstimers9 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)abstimers9 <<29));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_abs_timers_8_setf(uint8_t abstimers8)
{
	ASSERT_ERR((((uint32_t)abstimers8 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)abstimers8 <<28));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_abs_timers_7_setf(uint8_t abstimers7)
{
	ASSERT_ERR((((uint32_t)abstimers7 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)abstimers7 <<27));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_abs_timers_6_setf(uint8_t abstimers6)
{
	ASSERT_ERR((((uint32_t)abstimers6 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)abstimers6 <<26));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_abs_timers_5_setf(uint8_t abstimers5)
{
	ASSERT_ERR((((uint32_t)abstimers5 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)abstimers5 <<25));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_abs_timers_4_setf(uint8_t abstimers4)
{
	ASSERT_ERR((((uint32_t)abstimers4 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)abstimers4 <<24));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_abs_timers_3_setf(uint8_t abstimers3)
{
	ASSERT_ERR((((uint32_t)abstimers3 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)abstimers3 <<23));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_abs_timers_2_setf(uint8_t abstimers2)
{
	ASSERT_ERR((((uint32_t)abstimers2 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)abstimers2 <<22));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_abs_timers_1_setf(uint8_t abstimers1)
{
	ASSERT_ERR((((uint32_t)abstimers1 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)abstimers1 <<21));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_abs_timers_0_setf(uint8_t abstimers0)
{
	ASSERT_ERR((((uint32_t)abstimers0 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)abstimers0 <<20));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_imp_sec_dtim_setf(uint8_t impsecdtim)
{
	ASSERT_ERR((((uint32_t)impsecdtim << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)impsecdtim <<19));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_imp_pri_dtim_setf(uint8_t imppridtim)
{
	ASSERT_ERR((((uint32_t)imppridtim << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)imppridtim <<18));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_tim_set_setf(uint8_t timset)
{
	ASSERT_ERR((((uint32_t)timset << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)timset <<11));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_idle_interrupt_setf(uint8_t idleinterrupt)
{
	ASSERT_ERR((((uint32_t)idleinterrupt << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)idleinterrupt <<2));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_imp_sec_tbtt_setf(uint8_t impsectbtt)
{
	ASSERT_ERR((((uint32_t)impsectbtt << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)impsectbtt <<1));
}
__INLINE void mac_hw0_mu0_gen_int_event_clear_imp_pri_tbtt_setf(uint8_t imppritbtt)
{
	ASSERT_ERR((((uint32_t)imppritbtt << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)imppritbtt <<0));
}

/**
 * @brief GEN_INT_EVENT_EN_LMAC register definition
 *  General interrupts enable LMAC register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    UL_BSS_COLOR_COLLISION    0              
 *    30    DL_BSS_COLOR_COLLISION    0              
 *    29    ABS_TIMERS_9              0              
 *    28    ABS_TIMERS_8              0              
 *    27    ABS_TIMERS_7              0              
 *    26    ABS_TIMERS_6              0              
 *    25    ABS_TIMERS_5              0              
 *    24    ABS_TIMERS_4              0              
 *    23    ABS_TIMERS_3              0              
 *    22    ABS_TIMERS_2              0              
 *    21    ABS_TIMERS_1              0              
 *    20    ABS_TIMERS_0              0              
 *    19    IMP_SEC_DTIM              0              
 *    18    IMP_PRI_DTIM              0              
 *    11    TIM_SET                   0              
 *    02    IDLE_INTERRUPT            0              
 *    01    IMP_SEC_TBTT              0              
 *    00    IMP_PRI_TBTT              0              
 * </pre>
 */
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008718)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_OFFSET      0x00008718
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_INDEX       0x000021C6
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_gen_int_event_en_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
}

__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_UL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_UL_BSS_COLOR_COLLISION_POS    31
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_DL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_DL_BSS_COLOR_COLLISION_POS    30
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_9_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_9_POS    29
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_8_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_8_POS    28
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_7_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_7_POS    27
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_6_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_6_POS    26
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_5_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_5_POS    25
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_4_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_4_POS    24
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_3_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_3_POS    23
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_2_POS    22
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_1_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_1_POS    21
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_0_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_0_POS    20
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_IMP_SEC_DTIM_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_IMP_SEC_DTIM_POS    19
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_IMP_PRI_DTIM_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_IMP_PRI_DTIM_POS    18
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_TIM_SET_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_TIM_SET_POS    11
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_IDLE_INTERRUPT_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_IDLE_INTERRUPT_POS    2
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_IMP_SEC_TBTT_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_IMP_SEC_TBTT_POS    1
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_IMP_PRI_TBTT_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_IMP_PRI_TBTT_POS    0

#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_UL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_DL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_9_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_8_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_7_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_6_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_5_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_4_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_3_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_2_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_1_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ABS_TIMERS_0_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_IMP_SEC_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_IMP_PRI_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_TIM_SET_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_IDLE_INTERRUPT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_IMP_SEC_TBTT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_IMP_PRI_TBTT_RST    0x0

__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_pack(uint8_t ul_bss_color_collision, uint8_t dl_bss_color_collision, uint8_t abs_timers_9, uint8_t abs_timers_8, uint8_t abs_timers_7, uint8_t abs_timers_6, uint8_t abs_timers_5, uint8_t abs_timers_4, uint8_t abs_timers_3, uint8_t abs_timers_2, uint8_t abs_timers_1, uint8_t abs_timers_0, uint8_t imp_sec_dtim, uint8_t imp_pri_dtim, uint8_t tim_set, uint8_t idle_interrupt, uint8_t imp_sec_tbtt, uint8_t imp_pri_tbtt)
{
	ASSERT_ERR((((uint32_t)ul_bss_color_collision << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)dl_bss_color_collision << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_9 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_8 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_7 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_6 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_5 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_4 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_3 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_2 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_1 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_0 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)imp_sec_dtim << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)imp_pri_dtim << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)tim_set << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)idle_interrupt << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)imp_sec_tbtt << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)imp_pri_tbtt << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR,  ((uint32_t)ul_bss_color_collision << 31) |((uint32_t)dl_bss_color_collision << 30) |((uint32_t)abs_timers_9 << 29) |((uint32_t)abs_timers_8 << 28) |((uint32_t)abs_timers_7 << 27) |((uint32_t)abs_timers_6 << 26) |((uint32_t)abs_timers_5 << 25) |((uint32_t)abs_timers_4 << 24) |((uint32_t)abs_timers_3 << 23) |((uint32_t)abs_timers_2 << 22) |((uint32_t)abs_timers_1 << 21) |((uint32_t)abs_timers_0 << 20) |((uint32_t)imp_sec_dtim << 19) |((uint32_t)imp_pri_dtim << 18) |((uint32_t)tim_set << 11) |((uint32_t)idle_interrupt << 2) |((uint32_t)imp_sec_tbtt << 1) |((uint32_t)imp_pri_tbtt << 0));
}

__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_unpack(uint8_t* ul_bss_color_collision, uint8_t* dl_bss_color_collision, uint8_t* abs_timers_9, uint8_t* abs_timers_8, uint8_t* abs_timers_7, uint8_t* abs_timers_6, uint8_t* abs_timers_5, uint8_t* abs_timers_4, uint8_t* abs_timers_3, uint8_t* abs_timers_2, uint8_t* abs_timers_1, uint8_t* abs_timers_0, uint8_t* imp_sec_dtim, uint8_t* imp_pri_dtim, uint8_t* tim_set, uint8_t* idle_interrupt, uint8_t* imp_sec_tbtt, uint8_t* imp_pri_tbtt)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);

	*ul_bss_color_collision = (localVal & ((uint32_t)0x80000000)) >>  31;
	*dl_bss_color_collision = (localVal & ((uint32_t)0x40000000)) >>  30;
	*abs_timers_9 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*abs_timers_8 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*abs_timers_7 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*abs_timers_6 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*abs_timers_5 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*abs_timers_4 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*abs_timers_3 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*abs_timers_2 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*abs_timers_1 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*abs_timers_0 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*imp_sec_dtim = (localVal & ((uint32_t)0x00080000)) >>  19;
	*imp_pri_dtim = (localVal & ((uint32_t)0x00040000)) >>  18;
	*tim_set = (localVal & ((uint32_t)0x00000800)) >>  11;
	*idle_interrupt = (localVal & ((uint32_t)0x00000004)) >>  2;
	*imp_sec_tbtt = (localVal & ((uint32_t)0x00000002)) >>  1;
	*imp_pri_tbtt = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_ul_bss_color_collision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_ul_bss_color_collision_setf(uint8_t ulbsscolorcollision)
{
	ASSERT_ERR((((uint32_t)ulbsscolorcollision << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)ulbsscolorcollision <<31));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_dl_bss_color_collision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_dl_bss_color_collision_setf(uint8_t dlbsscolorcollision)
{
	ASSERT_ERR((((uint32_t)dlbsscolorcollision << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)dlbsscolorcollision <<30));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_9_setf(uint8_t abstimers9)
{
	ASSERT_ERR((((uint32_t)abstimers9 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)abstimers9 <<29));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_8_setf(uint8_t abstimers8)
{
	ASSERT_ERR((((uint32_t)abstimers8 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)abstimers8 <<28));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_7_setf(uint8_t abstimers7)
{
	ASSERT_ERR((((uint32_t)abstimers7 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)abstimers7 <<27));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_6_setf(uint8_t abstimers6)
{
	ASSERT_ERR((((uint32_t)abstimers6 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)abstimers6 <<26));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_5_setf(uint8_t abstimers5)
{
	ASSERT_ERR((((uint32_t)abstimers5 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)abstimers5 <<25));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_4_setf(uint8_t abstimers4)
{
	ASSERT_ERR((((uint32_t)abstimers4 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)abstimers4 <<24));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_3_setf(uint8_t abstimers3)
{
	ASSERT_ERR((((uint32_t)abstimers3 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)abstimers3 <<23));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_2_setf(uint8_t abstimers2)
{
	ASSERT_ERR((((uint32_t)abstimers2 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)abstimers2 <<22));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_1_setf(uint8_t abstimers1)
{
	ASSERT_ERR((((uint32_t)abstimers1 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)abstimers1 <<21));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_abs_timers_0_setf(uint8_t abstimers0)
{
	ASSERT_ERR((((uint32_t)abstimers0 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)abstimers0 <<20));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_imp_sec_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_imp_sec_dtim_setf(uint8_t impsecdtim)
{
	ASSERT_ERR((((uint32_t)impsecdtim << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)impsecdtim <<19));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_imp_pri_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_imp_pri_dtim_setf(uint8_t imppridtim)
{
	ASSERT_ERR((((uint32_t)imppridtim << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)imppridtim <<18));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_tim_set_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_tim_set_setf(uint8_t timset)
{
	ASSERT_ERR((((uint32_t)timset << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)timset <<11));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_idle_interrupt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_idle_interrupt_setf(uint8_t idleinterrupt)
{
	ASSERT_ERR((((uint32_t)idleinterrupt << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)idleinterrupt <<2));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_imp_sec_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_imp_sec_tbtt_setf(uint8_t impsectbtt)
{
	ASSERT_ERR((((uint32_t)impsectbtt << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)impsectbtt <<1));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_lmac_imp_pri_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_lmac_imp_pri_tbtt_setf(uint8_t imppritbtt)
{
	ASSERT_ERR((((uint32_t)imppritbtt << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)imppritbtt <<0));
}

/**
 * @brief GEN_INT_EVENT_EN_UMAC register definition
 *  General interrupts enable UMAC register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    UL_BSS_COLOR_COLLISION    0              
 *    30    DL_BSS_COLOR_COLLISION    0              
 *    29    ABS_TIMERS_9              0              
 *    28    ABS_TIMERS_8              0              
 *    27    ABS_TIMERS_7              0              
 *    26    ABS_TIMERS_6              0              
 *    25    ABS_TIMERS_5              0              
 *    24    ABS_TIMERS_4              0              
 *    23    ABS_TIMERS_3              0              
 *    22    ABS_TIMERS_2              0              
 *    21    ABS_TIMERS_1              0              
 *    20    ABS_TIMERS_0              0              
 *    19    IMP_SEC_DTIM              0              
 *    18    IMP_PRI_DTIM              0              
 *    11    TIM_SET                   0              
 *    02    IDLE_INTERRUPT            0              
 *    01    IMP_SEC_TBTT              0              
 *    00    IMP_PRI_TBTT              0              
 * </pre>
 */
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000871C)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_OFFSET      0x0000871C
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_INDEX       0x000021C7
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_gen_int_event_en_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
}

__INLINE void mac_hw0_mu0_gen_int_event_en_umac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_UL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x80000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_UL_BSS_COLOR_COLLISION_POS    31
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_DL_BSS_COLOR_COLLISION_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_DL_BSS_COLOR_COLLISION_POS    30
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_9_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_9_POS    29
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_8_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_8_POS    28
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_7_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_7_POS    27
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_6_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_6_POS    26
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_5_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_5_POS    25
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_4_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_4_POS    24
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_3_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_3_POS    23
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_2_POS    22
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_1_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_1_POS    21
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_0_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_0_POS    20
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_IMP_SEC_DTIM_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_IMP_SEC_DTIM_POS    19
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_IMP_PRI_DTIM_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_IMP_PRI_DTIM_POS    18
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_TIM_SET_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_TIM_SET_POS    11
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_IDLE_INTERRUPT_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_IDLE_INTERRUPT_POS    2
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_IMP_SEC_TBTT_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_IMP_SEC_TBTT_POS    1
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_IMP_PRI_TBTT_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_IMP_PRI_TBTT_POS    0

#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_UL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_DL_BSS_COLOR_COLLISION_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_9_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_8_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_7_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_6_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_5_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_4_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_3_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_2_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_1_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ABS_TIMERS_0_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_IMP_SEC_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_IMP_PRI_DTIM_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_TIM_SET_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_IDLE_INTERRUPT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_IMP_SEC_TBTT_RST    0x0
#define MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_IMP_PRI_TBTT_RST    0x0

__INLINE void mac_hw0_mu0_gen_int_event_en_umac_pack(uint8_t ul_bss_color_collision, uint8_t dl_bss_color_collision, uint8_t abs_timers_9, uint8_t abs_timers_8, uint8_t abs_timers_7, uint8_t abs_timers_6, uint8_t abs_timers_5, uint8_t abs_timers_4, uint8_t abs_timers_3, uint8_t abs_timers_2, uint8_t abs_timers_1, uint8_t abs_timers_0, uint8_t imp_sec_dtim, uint8_t imp_pri_dtim, uint8_t tim_set, uint8_t idle_interrupt, uint8_t imp_sec_tbtt, uint8_t imp_pri_tbtt)
{
	ASSERT_ERR((((uint32_t)ul_bss_color_collision << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)dl_bss_color_collision << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_9 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_8 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_7 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_6 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_5 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_4 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_3 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_2 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_1 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)abs_timers_0 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)imp_sec_dtim << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)imp_pri_dtim << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)tim_set << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)idle_interrupt << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)imp_sec_tbtt << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)imp_pri_tbtt << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR,  ((uint32_t)ul_bss_color_collision << 31) |((uint32_t)dl_bss_color_collision << 30) |((uint32_t)abs_timers_9 << 29) |((uint32_t)abs_timers_8 << 28) |((uint32_t)abs_timers_7 << 27) |((uint32_t)abs_timers_6 << 26) |((uint32_t)abs_timers_5 << 25) |((uint32_t)abs_timers_4 << 24) |((uint32_t)abs_timers_3 << 23) |((uint32_t)abs_timers_2 << 22) |((uint32_t)abs_timers_1 << 21) |((uint32_t)abs_timers_0 << 20) |((uint32_t)imp_sec_dtim << 19) |((uint32_t)imp_pri_dtim << 18) |((uint32_t)tim_set << 11) |((uint32_t)idle_interrupt << 2) |((uint32_t)imp_sec_tbtt << 1) |((uint32_t)imp_pri_tbtt << 0));
}

__INLINE void mac_hw0_mu0_gen_int_event_en_umac_unpack(uint8_t* ul_bss_color_collision, uint8_t* dl_bss_color_collision, uint8_t* abs_timers_9, uint8_t* abs_timers_8, uint8_t* abs_timers_7, uint8_t* abs_timers_6, uint8_t* abs_timers_5, uint8_t* abs_timers_4, uint8_t* abs_timers_3, uint8_t* abs_timers_2, uint8_t* abs_timers_1, uint8_t* abs_timers_0, uint8_t* imp_sec_dtim, uint8_t* imp_pri_dtim, uint8_t* tim_set, uint8_t* idle_interrupt, uint8_t* imp_sec_tbtt, uint8_t* imp_pri_tbtt)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);

	*ul_bss_color_collision = (localVal & ((uint32_t)0x80000000)) >>  31;
	*dl_bss_color_collision = (localVal & ((uint32_t)0x40000000)) >>  30;
	*abs_timers_9 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*abs_timers_8 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*abs_timers_7 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*abs_timers_6 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*abs_timers_5 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*abs_timers_4 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*abs_timers_3 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*abs_timers_2 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*abs_timers_1 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*abs_timers_0 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*imp_sec_dtim = (localVal & ((uint32_t)0x00080000)) >>  19;
	*imp_pri_dtim = (localVal & ((uint32_t)0x00040000)) >>  18;
	*tim_set = (localVal & ((uint32_t)0x00000800)) >>  11;
	*idle_interrupt = (localVal & ((uint32_t)0x00000004)) >>  2;
	*imp_sec_tbtt = (localVal & ((uint32_t)0x00000002)) >>  1;
	*imp_pri_tbtt = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_ul_bss_color_collision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_ul_bss_color_collision_setf(uint8_t ulbsscolorcollision)
{
	ASSERT_ERR((((uint32_t)ulbsscolorcollision << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)ulbsscolorcollision <<31));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_dl_bss_color_collision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_dl_bss_color_collision_setf(uint8_t dlbsscolorcollision)
{
	ASSERT_ERR((((uint32_t)dlbsscolorcollision << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)dlbsscolorcollision <<30));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_abs_timers_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_abs_timers_9_setf(uint8_t abstimers9)
{
	ASSERT_ERR((((uint32_t)abstimers9 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)abstimers9 <<29));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_abs_timers_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_abs_timers_8_setf(uint8_t abstimers8)
{
	ASSERT_ERR((((uint32_t)abstimers8 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)abstimers8 <<28));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_abs_timers_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_abs_timers_7_setf(uint8_t abstimers7)
{
	ASSERT_ERR((((uint32_t)abstimers7 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)abstimers7 <<27));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_abs_timers_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_abs_timers_6_setf(uint8_t abstimers6)
{
	ASSERT_ERR((((uint32_t)abstimers6 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)abstimers6 <<26));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_abs_timers_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_abs_timers_5_setf(uint8_t abstimers5)
{
	ASSERT_ERR((((uint32_t)abstimers5 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)abstimers5 <<25));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_abs_timers_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_abs_timers_4_setf(uint8_t abstimers4)
{
	ASSERT_ERR((((uint32_t)abstimers4 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)abstimers4 <<24));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_abs_timers_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_abs_timers_3_setf(uint8_t abstimers3)
{
	ASSERT_ERR((((uint32_t)abstimers3 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)abstimers3 <<23));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_abs_timers_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_abs_timers_2_setf(uint8_t abstimers2)
{
	ASSERT_ERR((((uint32_t)abstimers2 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)abstimers2 <<22));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_abs_timers_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_abs_timers_1_setf(uint8_t abstimers1)
{
	ASSERT_ERR((((uint32_t)abstimers1 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)abstimers1 <<21));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_abs_timers_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_abs_timers_0_setf(uint8_t abstimers0)
{
	ASSERT_ERR((((uint32_t)abstimers0 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)abstimers0 <<20));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_imp_sec_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_imp_sec_dtim_setf(uint8_t impsecdtim)
{
	ASSERT_ERR((((uint32_t)impsecdtim << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)impsecdtim <<19));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_imp_pri_dtim_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_imp_pri_dtim_setf(uint8_t imppridtim)
{
	ASSERT_ERR((((uint32_t)imppridtim << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)imppridtim <<18));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_tim_set_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_tim_set_setf(uint8_t timset)
{
	ASSERT_ERR((((uint32_t)timset << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)timset <<11));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_idle_interrupt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_idle_interrupt_setf(uint8_t idleinterrupt)
{
	ASSERT_ERR((((uint32_t)idleinterrupt << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)idleinterrupt <<2));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_imp_sec_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_imp_sec_tbtt_setf(uint8_t impsectbtt)
{
	ASSERT_ERR((((uint32_t)impsectbtt << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)impsectbtt <<1));
}
__INLINE uint8_t mac_hw0_mu0_gen_int_event_en_umac_imp_pri_tbtt_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_gen_int_event_en_umac_imp_pri_tbtt_setf(uint8_t imppritbtt)
{
	ASSERT_ERR((((uint32_t)imppritbtt << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_GEN_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)imppritbtt <<0));
}

/**
 * @brief HIGH_PRI_INT_EVENT_STA_LMAC register definition
 *  High pri interrupts events status LMAC register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30    TX_HTP_AMPDU_UND          0              
 *    29    TX_AC3_AMPDU_UND          0              
 *    28    TX_AC2_AMPDU_UND          0              
 *    27    TX_AC1_AMPDU_UND          0              
 *    26    TX_AC0_AMPDU_UND          0              
 *    14    SW_RTS_SUCCESS            0              
 *    13    AC3_TX_BW_DECISION        0              
 *    12    AC2_TX_BW_DECISION        0              
 *    11    AC1_TX_BW_DECISION        0              
 *    10    AC0_TX_BW_DECISION        0              
 *    09    HTP_TX_BW_DECISION        0              
 *    08    BFR_RESP_CANCELLED        0              
 *    07    END_OF_PPDU               0              
 *    06    NEED_RESPONSE             0              
 *    05    RD_PROT_TRIGGER           0              
 *    04    HCCA_PROT_TRIGGER         0              
 *    03    AC_3_PROT_TRIGGER         0              
 *    02    AC_2_PROT_TRIGGER         0              
 *    01    AC_1_PROT_TRIGGER         0              
 *    00    AC_0_PROT_TRIGGER         0              
 * </pre>
 */
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008720)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_OFFSET      0x00008720
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_INDEX       0x000021C8
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_high_pri_int_event_sta_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_TX_HTP_AMPDU_UND_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_TX_HTP_AMPDU_UND_POS    30
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_TX_AC_3_AMPDU_UND_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_TX_AC_3_AMPDU_UND_POS    29
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_TX_AC_2_AMPDU_UND_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_TX_AC_2_AMPDU_UND_POS    28
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_TX_AC_1_AMPDU_UND_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_TX_AC_1_AMPDU_UND_POS    27
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_TX_AC_0_AMPDU_UND_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_TX_AC_0_AMPDU_UND_POS    26
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_SW_RTS_SUCCESS_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_SW_RTS_SUCCESS_POS    14
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_3_TX_BW_DECISION_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_3_TX_BW_DECISION_POS    13
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_2_TX_BW_DECISION_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_2_TX_BW_DECISION_POS    12
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_1_TX_BW_DECISION_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_1_TX_BW_DECISION_POS    11
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_0_TX_BW_DECISION_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_0_TX_BW_DECISION_POS    10
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_HTP_TX_BW_DECISION_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_HTP_TX_BW_DECISION_POS    9
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_BFR_RESP_CANCELLED_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_BFR_RESP_CANCELLED_POS    8
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_END_OF_PPDU_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_END_OF_PPDU_POS    7
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_NEED_RESPONSE_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_NEED_RESPONSE_POS    6
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_RD_PROT_TRIGGER_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_RD_PROT_TRIGGER_POS    5
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_HCCA_PROT_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_HCCA_PROT_TRIGGER_POS    4
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_3_PROT_TRIGGER_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_3_PROT_TRIGGER_POS    3
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_2_PROT_TRIGGER_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_2_PROT_TRIGGER_POS    2
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_1_PROT_TRIGGER_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_1_PROT_TRIGGER_POS    1
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_0_PROT_TRIGGER_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_0_PROT_TRIGGER_POS    0

#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_TX_HTP_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_TX_AC_3_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_TX_AC_2_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_TX_AC_1_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_TX_AC_0_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_SW_RTS_SUCCESS_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_3_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_2_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_1_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_0_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_HTP_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_BFR_RESP_CANCELLED_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_END_OF_PPDU_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_NEED_RESPONSE_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_RD_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_HCCA_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_3_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_2_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_1_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_AC_0_PROT_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_high_pri_int_event_sta_lmac_unpack(uint8_t* tx_htp_ampdu_und, uint8_t* tx_ac3_ampdu_und, uint8_t* tx_ac2_ampdu_und, uint8_t* tx_ac1_ampdu_und, uint8_t* tx_ac0_ampdu_und, uint8_t* sw_rts_success, uint8_t* ac3_tx_bw_decision, uint8_t* ac2_tx_bw_decision, uint8_t* ac1_tx_bw_decision, uint8_t* ac0_tx_bw_decision, uint8_t* htp_tx_bw_decision, uint8_t* bfr_resp_cancelled, uint8_t* end_of_ppdu, uint8_t* need_response, uint8_t* rd_prot_trigger, uint8_t* hcca_prot_trigger, uint8_t* ac_3_prot_trigger, uint8_t* ac_2_prot_trigger, uint8_t* ac_1_prot_trigger, uint8_t* ac_0_prot_trigger)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);

	*tx_htp_ampdu_und = (localVal & ((uint32_t)0x40000000)) >>  30;
	*tx_ac3_ampdu_und = (localVal & ((uint32_t)0x20000000)) >>  29;
	*tx_ac2_ampdu_und = (localVal & ((uint32_t)0x10000000)) >>  28;
	*tx_ac1_ampdu_und = (localVal & ((uint32_t)0x08000000)) >>  27;
	*tx_ac0_ampdu_und = (localVal & ((uint32_t)0x04000000)) >>  26;
	*sw_rts_success = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ac3_tx_bw_decision = (localVal & ((uint32_t)0x00002000)) >>  13;
	*ac2_tx_bw_decision = (localVal & ((uint32_t)0x00001000)) >>  12;
	*ac1_tx_bw_decision = (localVal & ((uint32_t)0x00000800)) >>  11;
	*ac0_tx_bw_decision = (localVal & ((uint32_t)0x00000400)) >>  10;
	*htp_tx_bw_decision = (localVal & ((uint32_t)0x00000200)) >>  9;
	*bfr_resp_cancelled = (localVal & ((uint32_t)0x00000100)) >>  8;
	*end_of_ppdu = (localVal & ((uint32_t)0x00000080)) >>  7;
	*need_response = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rd_prot_trigger = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hcca_prot_trigger = (localVal & ((uint32_t)0x00000010)) >>  4;
	*ac_3_prot_trigger = (localVal & ((uint32_t)0x00000008)) >>  3;
	*ac_2_prot_trigger = (localVal & ((uint32_t)0x00000004)) >>  2;
	*ac_1_prot_trigger = (localVal & ((uint32_t)0x00000002)) >>  1;
	*ac_0_prot_trigger = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_tx_htp_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_tx_ac_3_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_tx_ac_2_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_tx_ac_1_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_tx_ac_0_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_sw_rts_success_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_ac_3_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_ac_2_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_ac_1_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_ac_0_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_htp_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_bfr_resp_cancelled_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_end_of_ppdu_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_need_response_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_rd_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_hcca_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_ac_3_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_ac_2_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_ac_1_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_sta_lmac_ac_0_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_STA_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief HIGH_PRI_INT_EVENT_CLEAR register definition
 *  High priority interrupts status clear register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30    TX_HTP_AMPDU_UND          0              
 *    29    TX_AC3_AMPDU_UND          0              
 *    28    TX_AC2_AMPDU_UND          0              
 *    27    TX_AC1_AMPDU_UND          0              
 *    26    TX_AC0_AMPDU_UND          0              
 *    14    SW_RTS_SUCCESS            0              
 *    13    AC3_TX_BW_DECISION        0              
 *    12    AC2_TX_BW_DECISION        0              
 *    11    AC1_TX_BW_DECISION        0              
 *    10    AC0_TX_BW_DECISION        0              
 *    09    HTP_TX_BW_DECISION        0              
 *    08    BFR_RESP_CANCELLED        0              
 *    07    END_OF_PPDU               0              
 *    06    NEED_RESPONSE             0              
 *    05    RD_PROT_TRIGGER           0              
 *    04    HCCA_PROT_TRIGGER         0              
 *    03    AC_3_PROT_TRIGGER         0              
 *    02    AC_2_PROT_TRIGGER         0              
 *    01    AC_1_PROT_TRIGGER         0              
 *    00    AC_0_PROT_TRIGGER         0              
 * </pre>
 */
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008724)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_OFFSET      0x00008724
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_INDEX       0x000021C9
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_RESET       0x00000000

__INLINE void mac_hw0_mu0_high_pri_int_event_clear_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_TX_HTP_AMPDU_UND_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_TX_HTP_AMPDU_UND_POS    30
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_TX_AC_3_AMPDU_UND_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_TX_AC_3_AMPDU_UND_POS    29
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_TX_AC_2_AMPDU_UND_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_TX_AC_2_AMPDU_UND_POS    28
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_TX_AC_1_AMPDU_UND_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_TX_AC_1_AMPDU_UND_POS    27
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_TX_AC_0_AMPDU_UND_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_TX_AC_0_AMPDU_UND_POS    26
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_SW_RTS_SUCCESS_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_SW_RTS_SUCCESS_POS    14
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_3_TX_BW_DECISION_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_3_TX_BW_DECISION_POS    13
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_2_TX_BW_DECISION_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_2_TX_BW_DECISION_POS    12
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_1_TX_BW_DECISION_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_1_TX_BW_DECISION_POS    11
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_0_TX_BW_DECISION_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_0_TX_BW_DECISION_POS    10
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_HTP_TX_BW_DECISION_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_HTP_TX_BW_DECISION_POS    9
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_BFR_RESP_CANCELLED_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_BFR_RESP_CANCELLED_POS    8
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_END_OF_PPDU_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_END_OF_PPDU_POS    7
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_NEED_RESPONSE_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_NEED_RESPONSE_POS    6
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_RD_PROT_TRIGGER_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_RD_PROT_TRIGGER_POS    5
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_HCCA_PROT_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_HCCA_PROT_TRIGGER_POS    4
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_3_PROT_TRIGGER_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_3_PROT_TRIGGER_POS    3
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_2_PROT_TRIGGER_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_2_PROT_TRIGGER_POS    2
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_1_PROT_TRIGGER_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_1_PROT_TRIGGER_POS    1
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_0_PROT_TRIGGER_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_0_PROT_TRIGGER_POS    0

#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_TX_HTP_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_TX_AC_3_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_TX_AC_2_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_TX_AC_1_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_TX_AC_0_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_SW_RTS_SUCCESS_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_3_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_2_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_1_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_0_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_HTP_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_BFR_RESP_CANCELLED_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_END_OF_PPDU_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_NEED_RESPONSE_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_RD_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_HCCA_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_3_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_2_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_1_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_AC_0_PROT_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_high_pri_int_event_clear_pack(uint8_t tx_htp_ampdu_und, uint8_t tx_ac3_ampdu_und, uint8_t tx_ac2_ampdu_und, uint8_t tx_ac1_ampdu_und, uint8_t tx_ac0_ampdu_und, uint8_t sw_rts_success, uint8_t ac3_tx_bw_decision, uint8_t ac2_tx_bw_decision, uint8_t ac1_tx_bw_decision, uint8_t ac0_tx_bw_decision, uint8_t htp_tx_bw_decision, uint8_t bfr_resp_cancelled, uint8_t end_of_ppdu, uint8_t need_response, uint8_t rd_prot_trigger, uint8_t hcca_prot_trigger, uint8_t ac_3_prot_trigger, uint8_t ac_2_prot_trigger, uint8_t ac_1_prot_trigger, uint8_t ac_0_prot_trigger)
{
	ASSERT_ERR((((uint32_t)tx_htp_ampdu_und << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac3_ampdu_und << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac2_ampdu_und << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac1_ampdu_und << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac0_ampdu_und << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_rts_success << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)ac3_tx_bw_decision << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)ac2_tx_bw_decision << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)ac1_tx_bw_decision << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)ac0_tx_bw_decision << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_bw_decision << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)bfr_resp_cancelled << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)end_of_ppdu << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)need_response << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)rd_prot_trigger << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)hcca_prot_trigger << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_prot_trigger << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_prot_trigger << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_prot_trigger << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_prot_trigger << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR,  ((uint32_t)tx_htp_ampdu_und << 30) |((uint32_t)tx_ac3_ampdu_und << 29) |((uint32_t)tx_ac2_ampdu_und << 28) |((uint32_t)tx_ac1_ampdu_und << 27) |((uint32_t)tx_ac0_ampdu_und << 26) |((uint32_t)sw_rts_success << 14) |((uint32_t)ac3_tx_bw_decision << 13) |((uint32_t)ac2_tx_bw_decision << 12) |((uint32_t)ac1_tx_bw_decision << 11) |((uint32_t)ac0_tx_bw_decision << 10) |((uint32_t)htp_tx_bw_decision << 9) |((uint32_t)bfr_resp_cancelled << 8) |((uint32_t)end_of_ppdu << 7) |((uint32_t)need_response << 6) |((uint32_t)rd_prot_trigger << 5) |((uint32_t)hcca_prot_trigger << 4) |((uint32_t)ac_3_prot_trigger << 3) |((uint32_t)ac_2_prot_trigger << 2) |((uint32_t)ac_1_prot_trigger << 1) |((uint32_t)ac_0_prot_trigger << 0));
}

__INLINE void mac_hw0_mu0_high_pri_int_event_clear_tx_htp_ampdu_und_setf(uint8_t txhtpampduund)
{
	ASSERT_ERR((((uint32_t)txhtpampduund << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)txhtpampduund <<30));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_tx_ac_3_ampdu_und_setf(uint8_t txac3ampduund)
{
	ASSERT_ERR((((uint32_t)txac3ampduund << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)txac3ampduund <<29));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_tx_ac_2_ampdu_und_setf(uint8_t txac2ampduund)
{
	ASSERT_ERR((((uint32_t)txac2ampduund << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)txac2ampduund <<28));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_tx_ac_1_ampdu_und_setf(uint8_t txac1ampduund)
{
	ASSERT_ERR((((uint32_t)txac1ampduund << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)txac1ampduund <<27));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_tx_ac_0_ampdu_und_setf(uint8_t txac0ampduund)
{
	ASSERT_ERR((((uint32_t)txac0ampduund << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)txac0ampduund <<26));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_sw_rts_success_setf(uint8_t swrtssuccess)
{
	ASSERT_ERR((((uint32_t)swrtssuccess << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)swrtssuccess <<14));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_ac_3_tx_bw_decision_setf(uint8_t ac3txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac3txbwdecision << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)ac3txbwdecision <<13));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_ac_2_tx_bw_decision_setf(uint8_t ac2txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac2txbwdecision << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)ac2txbwdecision <<12));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_ac_1_tx_bw_decision_setf(uint8_t ac1txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac1txbwdecision << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)ac1txbwdecision <<11));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_ac_0_tx_bw_decision_setf(uint8_t ac0txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac0txbwdecision << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)ac0txbwdecision <<10));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_htp_tx_bw_decision_setf(uint8_t htptxbwdecision)
{
	ASSERT_ERR((((uint32_t)htptxbwdecision << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)htptxbwdecision <<9));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_bfr_resp_cancelled_setf(uint8_t bfrrespcancelled)
{
	ASSERT_ERR((((uint32_t)bfrrespcancelled << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)bfrrespcancelled <<8));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_end_of_ppdu_setf(uint8_t endofppdu)
{
	ASSERT_ERR((((uint32_t)endofppdu << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)endofppdu <<7));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_need_response_setf(uint8_t needresponse)
{
	ASSERT_ERR((((uint32_t)needresponse << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)needresponse <<6));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_rd_prot_trigger_setf(uint8_t rdprottrigger)
{
	ASSERT_ERR((((uint32_t)rdprottrigger << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rdprottrigger <<5));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_hcca_prot_trigger_setf(uint8_t hccaprottrigger)
{
	ASSERT_ERR((((uint32_t)hccaprottrigger << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)hccaprottrigger <<4));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_ac_3_prot_trigger_setf(uint8_t ac3prottrigger)
{
	ASSERT_ERR((((uint32_t)ac3prottrigger << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)ac3prottrigger <<3));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_ac_2_prot_trigger_setf(uint8_t ac2prottrigger)
{
	ASSERT_ERR((((uint32_t)ac2prottrigger << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)ac2prottrigger <<2));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_ac_1_prot_trigger_setf(uint8_t ac1prottrigger)
{
	ASSERT_ERR((((uint32_t)ac1prottrigger << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)ac1prottrigger <<1));
}
__INLINE void mac_hw0_mu0_high_pri_int_event_clear_ac_0_prot_trigger_setf(uint8_t ac0prottrigger)
{
	ASSERT_ERR((((uint32_t)ac0prottrigger << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)ac0prottrigger <<0));
}

/**
 * @brief HIGH_PRI_INT_EVENT_EN_LMAC register definition
 *  High priority interrupts enable LMAC register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30    TX_HTP_AMPDU_UND          0              
 *    29    TX_AC3_AMPDU_UND          0              
 *    28    TX_AC2_AMPDU_UND          0              
 *    27    TX_AC1_AMPDU_UND          0              
 *    26    TX_AC0_AMPDU_UND          0              
 *    14    SW_RTS_SUCCESS            0              
 *    13    AC3_TX_BW_DECISION        0              
 *    12    AC2_TX_BW_DECISION        0              
 *    11    AC1_TX_BW_DECISION        0              
 *    10    AC0_TX_BW_DECISION        0              
 *    09    HTP_TX_BW_DECISION        0              
 *    08    BFR_RESP_CANCELLED        0              
 *    07    END_OF_PPDU               0              
 *    06    NEED_RESPONSE             0              
 *    05    RD_PROT_TRIGGER           0              
 *    04    HCCA_PROT_TRIGGER         0              
 *    03    AC_3_PROT_TRIGGER         0              
 *    02    AC_2_PROT_TRIGGER         0              
 *    01    AC_1_PROT_TRIGGER         0              
 *    00    AC_0_PROT_TRIGGER         0              
 * </pre>
 */
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008728)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_OFFSET      0x00008728
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_INDEX       0x000021CA
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_high_pri_int_event_en_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
}

__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_TX_HTP_AMPDU_UND_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_TX_HTP_AMPDU_UND_POS    30
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_TX_AC_3_AMPDU_UND_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_TX_AC_3_AMPDU_UND_POS    29
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_TX_AC_2_AMPDU_UND_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_TX_AC_2_AMPDU_UND_POS    28
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_TX_AC_1_AMPDU_UND_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_TX_AC_1_AMPDU_UND_POS    27
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_TX_AC_0_AMPDU_UND_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_TX_AC_0_AMPDU_UND_POS    26
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_SW_RTS_SUCCESS_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_SW_RTS_SUCCESS_POS    14
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_3_TX_BW_DECISION_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_3_TX_BW_DECISION_POS    13
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_2_TX_BW_DECISION_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_2_TX_BW_DECISION_POS    12
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_1_TX_BW_DECISION_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_1_TX_BW_DECISION_POS    11
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_0_TX_BW_DECISION_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_0_TX_BW_DECISION_POS    10
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_HTP_TX_BW_DECISION_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_HTP_TX_BW_DECISION_POS    9
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_BFR_RESP_CANCELLED_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_BFR_RESP_CANCELLED_POS    8
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_END_OF_PPDU_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_END_OF_PPDU_POS    7
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_NEED_RESPONSE_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_NEED_RESPONSE_POS    6
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_RD_PROT_TRIGGER_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_RD_PROT_TRIGGER_POS    5
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_HCCA_PROT_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_HCCA_PROT_TRIGGER_POS    4
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_3_PROT_TRIGGER_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_3_PROT_TRIGGER_POS    3
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_2_PROT_TRIGGER_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_2_PROT_TRIGGER_POS    2
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_1_PROT_TRIGGER_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_1_PROT_TRIGGER_POS    1
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_0_PROT_TRIGGER_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_0_PROT_TRIGGER_POS    0

#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_TX_HTP_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_TX_AC_3_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_TX_AC_2_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_TX_AC_1_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_TX_AC_0_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_SW_RTS_SUCCESS_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_3_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_2_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_1_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_0_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_HTP_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_BFR_RESP_CANCELLED_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_END_OF_PPDU_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_NEED_RESPONSE_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_RD_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_HCCA_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_3_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_2_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_1_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_AC_0_PROT_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_pack(uint8_t tx_htp_ampdu_und, uint8_t tx_ac3_ampdu_und, uint8_t tx_ac2_ampdu_und, uint8_t tx_ac1_ampdu_und, uint8_t tx_ac0_ampdu_und, uint8_t sw_rts_success, uint8_t ac3_tx_bw_decision, uint8_t ac2_tx_bw_decision, uint8_t ac1_tx_bw_decision, uint8_t ac0_tx_bw_decision, uint8_t htp_tx_bw_decision, uint8_t bfr_resp_cancelled, uint8_t end_of_ppdu, uint8_t need_response, uint8_t rd_prot_trigger, uint8_t hcca_prot_trigger, uint8_t ac_3_prot_trigger, uint8_t ac_2_prot_trigger, uint8_t ac_1_prot_trigger, uint8_t ac_0_prot_trigger)
{
	ASSERT_ERR((((uint32_t)tx_htp_ampdu_und << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac3_ampdu_und << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac2_ampdu_und << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac1_ampdu_und << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac0_ampdu_und << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_rts_success << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)ac3_tx_bw_decision << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)ac2_tx_bw_decision << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)ac1_tx_bw_decision << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)ac0_tx_bw_decision << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_bw_decision << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)bfr_resp_cancelled << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)end_of_ppdu << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)need_response << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)rd_prot_trigger << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)hcca_prot_trigger << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_prot_trigger << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_prot_trigger << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_prot_trigger << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_prot_trigger << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR,  ((uint32_t)tx_htp_ampdu_und << 30) |((uint32_t)tx_ac3_ampdu_und << 29) |((uint32_t)tx_ac2_ampdu_und << 28) |((uint32_t)tx_ac1_ampdu_und << 27) |((uint32_t)tx_ac0_ampdu_und << 26) |((uint32_t)sw_rts_success << 14) |((uint32_t)ac3_tx_bw_decision << 13) |((uint32_t)ac2_tx_bw_decision << 12) |((uint32_t)ac1_tx_bw_decision << 11) |((uint32_t)ac0_tx_bw_decision << 10) |((uint32_t)htp_tx_bw_decision << 9) |((uint32_t)bfr_resp_cancelled << 8) |((uint32_t)end_of_ppdu << 7) |((uint32_t)need_response << 6) |((uint32_t)rd_prot_trigger << 5) |((uint32_t)hcca_prot_trigger << 4) |((uint32_t)ac_3_prot_trigger << 3) |((uint32_t)ac_2_prot_trigger << 2) |((uint32_t)ac_1_prot_trigger << 1) |((uint32_t)ac_0_prot_trigger << 0));
}

__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_unpack(uint8_t* tx_htp_ampdu_und, uint8_t* tx_ac3_ampdu_und, uint8_t* tx_ac2_ampdu_und, uint8_t* tx_ac1_ampdu_und, uint8_t* tx_ac0_ampdu_und, uint8_t* sw_rts_success, uint8_t* ac3_tx_bw_decision, uint8_t* ac2_tx_bw_decision, uint8_t* ac1_tx_bw_decision, uint8_t* ac0_tx_bw_decision, uint8_t* htp_tx_bw_decision, uint8_t* bfr_resp_cancelled, uint8_t* end_of_ppdu, uint8_t* need_response, uint8_t* rd_prot_trigger, uint8_t* hcca_prot_trigger, uint8_t* ac_3_prot_trigger, uint8_t* ac_2_prot_trigger, uint8_t* ac_1_prot_trigger, uint8_t* ac_0_prot_trigger)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);

	*tx_htp_ampdu_und = (localVal & ((uint32_t)0x40000000)) >>  30;
	*tx_ac3_ampdu_und = (localVal & ((uint32_t)0x20000000)) >>  29;
	*tx_ac2_ampdu_und = (localVal & ((uint32_t)0x10000000)) >>  28;
	*tx_ac1_ampdu_und = (localVal & ((uint32_t)0x08000000)) >>  27;
	*tx_ac0_ampdu_und = (localVal & ((uint32_t)0x04000000)) >>  26;
	*sw_rts_success = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ac3_tx_bw_decision = (localVal & ((uint32_t)0x00002000)) >>  13;
	*ac2_tx_bw_decision = (localVal & ((uint32_t)0x00001000)) >>  12;
	*ac1_tx_bw_decision = (localVal & ((uint32_t)0x00000800)) >>  11;
	*ac0_tx_bw_decision = (localVal & ((uint32_t)0x00000400)) >>  10;
	*htp_tx_bw_decision = (localVal & ((uint32_t)0x00000200)) >>  9;
	*bfr_resp_cancelled = (localVal & ((uint32_t)0x00000100)) >>  8;
	*end_of_ppdu = (localVal & ((uint32_t)0x00000080)) >>  7;
	*need_response = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rd_prot_trigger = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hcca_prot_trigger = (localVal & ((uint32_t)0x00000010)) >>  4;
	*ac_3_prot_trigger = (localVal & ((uint32_t)0x00000008)) >>  3;
	*ac_2_prot_trigger = (localVal & ((uint32_t)0x00000004)) >>  2;
	*ac_1_prot_trigger = (localVal & ((uint32_t)0x00000002)) >>  1;
	*ac_0_prot_trigger = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_tx_htp_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_tx_htp_ampdu_und_setf(uint8_t txhtpampduund)
{
	ASSERT_ERR((((uint32_t)txhtpampduund << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)txhtpampduund <<30));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_tx_ac_3_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_tx_ac_3_ampdu_und_setf(uint8_t txac3ampduund)
{
	ASSERT_ERR((((uint32_t)txac3ampduund << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)txac3ampduund <<29));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_tx_ac_2_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_tx_ac_2_ampdu_und_setf(uint8_t txac2ampduund)
{
	ASSERT_ERR((((uint32_t)txac2ampduund << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)txac2ampduund <<28));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_tx_ac_1_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_tx_ac_1_ampdu_und_setf(uint8_t txac1ampduund)
{
	ASSERT_ERR((((uint32_t)txac1ampduund << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)txac1ampduund <<27));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_tx_ac_0_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_tx_ac_0_ampdu_und_setf(uint8_t txac0ampduund)
{
	ASSERT_ERR((((uint32_t)txac0ampduund << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)txac0ampduund <<26));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_sw_rts_success_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_sw_rts_success_setf(uint8_t swrtssuccess)
{
	ASSERT_ERR((((uint32_t)swrtssuccess << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)swrtssuccess <<14));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_ac_3_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_ac_3_tx_bw_decision_setf(uint8_t ac3txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac3txbwdecision << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)ac3txbwdecision <<13));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_ac_2_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_ac_2_tx_bw_decision_setf(uint8_t ac2txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac2txbwdecision << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)ac2txbwdecision <<12));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_ac_1_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_ac_1_tx_bw_decision_setf(uint8_t ac1txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac1txbwdecision << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)ac1txbwdecision <<11));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_ac_0_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_ac_0_tx_bw_decision_setf(uint8_t ac0txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac0txbwdecision << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)ac0txbwdecision <<10));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_htp_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_htp_tx_bw_decision_setf(uint8_t htptxbwdecision)
{
	ASSERT_ERR((((uint32_t)htptxbwdecision << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)htptxbwdecision <<9));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_bfr_resp_cancelled_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_bfr_resp_cancelled_setf(uint8_t bfrrespcancelled)
{
	ASSERT_ERR((((uint32_t)bfrrespcancelled << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)bfrrespcancelled <<8));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_end_of_ppdu_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_end_of_ppdu_setf(uint8_t endofppdu)
{
	ASSERT_ERR((((uint32_t)endofppdu << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)endofppdu <<7));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_need_response_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_need_response_setf(uint8_t needresponse)
{
	ASSERT_ERR((((uint32_t)needresponse << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)needresponse <<6));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_rd_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_rd_prot_trigger_setf(uint8_t rdprottrigger)
{
	ASSERT_ERR((((uint32_t)rdprottrigger << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rdprottrigger <<5));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_hcca_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_hcca_prot_trigger_setf(uint8_t hccaprottrigger)
{
	ASSERT_ERR((((uint32_t)hccaprottrigger << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)hccaprottrigger <<4));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_ac_3_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_ac_3_prot_trigger_setf(uint8_t ac3prottrigger)
{
	ASSERT_ERR((((uint32_t)ac3prottrigger << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)ac3prottrigger <<3));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_ac_2_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_ac_2_prot_trigger_setf(uint8_t ac2prottrigger)
{
	ASSERT_ERR((((uint32_t)ac2prottrigger << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)ac2prottrigger <<2));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_ac_1_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_ac_1_prot_trigger_setf(uint8_t ac1prottrigger)
{
	ASSERT_ERR((((uint32_t)ac1prottrigger << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)ac1prottrigger <<1));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_lmac_ac_0_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_lmac_ac_0_prot_trigger_setf(uint8_t ac0prottrigger)
{
	ASSERT_ERR((((uint32_t)ac0prottrigger << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)ac0prottrigger <<0));
}

/**
 * @brief HIGH_PRI_INT_EVENT_EN_UMAC register definition
 *  High priority interrupts enable UMAC register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    30    TX_HTP_AMPDU_UND          0              
 *    29    TX_AC3_AMPDU_UND          0              
 *    28    TX_AC2_AMPDU_UND          0              
 *    27    TX_AC1_AMPDU_UND          0              
 *    26    TX_AC0_AMPDU_UND          0              
 *    14    SW_RTS_SUCCESS            0              
 *    13    AC3_TX_BW_DECISION        0              
 *    12    AC2_TX_BW_DECISION        0              
 *    11    AC1_TX_BW_DECISION        0              
 *    10    AC0_TX_BW_DECISION        0              
 *    09    HTP_TX_BW_DECISION        0              
 *    08    BFR_RESP_CANCELLED        0              
 *    07    END_OF_PPDU               0              
 *    06    NEED_RESPONSE             0              
 *    05    RD_PROT_TRIGGER           0              
 *    04    HCCA_PROT_TRIGGER         0              
 *    03    AC_3_PROT_TRIGGER         0              
 *    02    AC_2_PROT_TRIGGER         0              
 *    01    AC_1_PROT_TRIGGER         0              
 *    00    AC_0_PROT_TRIGGER         0              
 * </pre>
 */
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000872C)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_OFFSET      0x0000872C
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_INDEX       0x000021CB
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_high_pri_int_event_en_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
}

__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_TX_HTP_AMPDU_UND_BIT    ((uint32_t)0x40000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_TX_HTP_AMPDU_UND_POS    30
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_TX_AC_3_AMPDU_UND_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_TX_AC_3_AMPDU_UND_POS    29
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_TX_AC_2_AMPDU_UND_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_TX_AC_2_AMPDU_UND_POS    28
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_TX_AC_1_AMPDU_UND_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_TX_AC_1_AMPDU_UND_POS    27
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_TX_AC_0_AMPDU_UND_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_TX_AC_0_AMPDU_UND_POS    26
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_SW_RTS_SUCCESS_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_SW_RTS_SUCCESS_POS    14
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_3_TX_BW_DECISION_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_3_TX_BW_DECISION_POS    13
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_2_TX_BW_DECISION_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_2_TX_BW_DECISION_POS    12
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_1_TX_BW_DECISION_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_1_TX_BW_DECISION_POS    11
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_0_TX_BW_DECISION_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_0_TX_BW_DECISION_POS    10
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_HTP_TX_BW_DECISION_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_HTP_TX_BW_DECISION_POS    9
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_BFR_RESP_CANCELLED_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_BFR_RESP_CANCELLED_POS    8
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_END_OF_PPDU_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_END_OF_PPDU_POS    7
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_NEED_RESPONSE_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_NEED_RESPONSE_POS    6
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_RD_PROT_TRIGGER_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_RD_PROT_TRIGGER_POS    5
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_HCCA_PROT_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_HCCA_PROT_TRIGGER_POS    4
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_3_PROT_TRIGGER_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_3_PROT_TRIGGER_POS    3
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_2_PROT_TRIGGER_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_2_PROT_TRIGGER_POS    2
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_1_PROT_TRIGGER_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_1_PROT_TRIGGER_POS    1
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_0_PROT_TRIGGER_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_0_PROT_TRIGGER_POS    0

#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_TX_HTP_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_TX_AC_3_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_TX_AC_2_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_TX_AC_1_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_TX_AC_0_AMPDU_UND_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_SW_RTS_SUCCESS_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_3_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_2_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_1_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_0_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_HTP_TX_BW_DECISION_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_BFR_RESP_CANCELLED_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_END_OF_PPDU_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_NEED_RESPONSE_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_RD_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_HCCA_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_3_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_2_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_1_PROT_TRIGGER_RST    0x0
#define MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_AC_0_PROT_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_pack(uint8_t tx_htp_ampdu_und, uint8_t tx_ac3_ampdu_und, uint8_t tx_ac2_ampdu_und, uint8_t tx_ac1_ampdu_und, uint8_t tx_ac0_ampdu_und, uint8_t sw_rts_success, uint8_t ac3_tx_bw_decision, uint8_t ac2_tx_bw_decision, uint8_t ac1_tx_bw_decision, uint8_t ac0_tx_bw_decision, uint8_t htp_tx_bw_decision, uint8_t bfr_resp_cancelled, uint8_t end_of_ppdu, uint8_t need_response, uint8_t rd_prot_trigger, uint8_t hcca_prot_trigger, uint8_t ac_3_prot_trigger, uint8_t ac_2_prot_trigger, uint8_t ac_1_prot_trigger, uint8_t ac_0_prot_trigger)
{
	ASSERT_ERR((((uint32_t)tx_htp_ampdu_und << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac3_ampdu_und << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac2_ampdu_und << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac1_ampdu_und << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_ac0_ampdu_und << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)sw_rts_success << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)ac3_tx_bw_decision << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)ac2_tx_bw_decision << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)ac1_tx_bw_decision << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)ac0_tx_bw_decision << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_bw_decision << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)bfr_resp_cancelled << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)end_of_ppdu << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)need_response << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)rd_prot_trigger << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)hcca_prot_trigger << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_prot_trigger << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_prot_trigger << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_prot_trigger << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_prot_trigger << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR,  ((uint32_t)tx_htp_ampdu_und << 30) |((uint32_t)tx_ac3_ampdu_und << 29) |((uint32_t)tx_ac2_ampdu_und << 28) |((uint32_t)tx_ac1_ampdu_und << 27) |((uint32_t)tx_ac0_ampdu_und << 26) |((uint32_t)sw_rts_success << 14) |((uint32_t)ac3_tx_bw_decision << 13) |((uint32_t)ac2_tx_bw_decision << 12) |((uint32_t)ac1_tx_bw_decision << 11) |((uint32_t)ac0_tx_bw_decision << 10) |((uint32_t)htp_tx_bw_decision << 9) |((uint32_t)bfr_resp_cancelled << 8) |((uint32_t)end_of_ppdu << 7) |((uint32_t)need_response << 6) |((uint32_t)rd_prot_trigger << 5) |((uint32_t)hcca_prot_trigger << 4) |((uint32_t)ac_3_prot_trigger << 3) |((uint32_t)ac_2_prot_trigger << 2) |((uint32_t)ac_1_prot_trigger << 1) |((uint32_t)ac_0_prot_trigger << 0));
}

__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_unpack(uint8_t* tx_htp_ampdu_und, uint8_t* tx_ac3_ampdu_und, uint8_t* tx_ac2_ampdu_und, uint8_t* tx_ac1_ampdu_und, uint8_t* tx_ac0_ampdu_und, uint8_t* sw_rts_success, uint8_t* ac3_tx_bw_decision, uint8_t* ac2_tx_bw_decision, uint8_t* ac1_tx_bw_decision, uint8_t* ac0_tx_bw_decision, uint8_t* htp_tx_bw_decision, uint8_t* bfr_resp_cancelled, uint8_t* end_of_ppdu, uint8_t* need_response, uint8_t* rd_prot_trigger, uint8_t* hcca_prot_trigger, uint8_t* ac_3_prot_trigger, uint8_t* ac_2_prot_trigger, uint8_t* ac_1_prot_trigger, uint8_t* ac_0_prot_trigger)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);

	*tx_htp_ampdu_und = (localVal & ((uint32_t)0x40000000)) >>  30;
	*tx_ac3_ampdu_und = (localVal & ((uint32_t)0x20000000)) >>  29;
	*tx_ac2_ampdu_und = (localVal & ((uint32_t)0x10000000)) >>  28;
	*tx_ac1_ampdu_und = (localVal & ((uint32_t)0x08000000)) >>  27;
	*tx_ac0_ampdu_und = (localVal & ((uint32_t)0x04000000)) >>  26;
	*sw_rts_success = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ac3_tx_bw_decision = (localVal & ((uint32_t)0x00002000)) >>  13;
	*ac2_tx_bw_decision = (localVal & ((uint32_t)0x00001000)) >>  12;
	*ac1_tx_bw_decision = (localVal & ((uint32_t)0x00000800)) >>  11;
	*ac0_tx_bw_decision = (localVal & ((uint32_t)0x00000400)) >>  10;
	*htp_tx_bw_decision = (localVal & ((uint32_t)0x00000200)) >>  9;
	*bfr_resp_cancelled = (localVal & ((uint32_t)0x00000100)) >>  8;
	*end_of_ppdu = (localVal & ((uint32_t)0x00000080)) >>  7;
	*need_response = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rd_prot_trigger = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hcca_prot_trigger = (localVal & ((uint32_t)0x00000010)) >>  4;
	*ac_3_prot_trigger = (localVal & ((uint32_t)0x00000008)) >>  3;
	*ac_2_prot_trigger = (localVal & ((uint32_t)0x00000004)) >>  2;
	*ac_1_prot_trigger = (localVal & ((uint32_t)0x00000002)) >>  1;
	*ac_0_prot_trigger = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_tx_htp_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_tx_htp_ampdu_und_setf(uint8_t txhtpampduund)
{
	ASSERT_ERR((((uint32_t)txhtpampduund << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)txhtpampduund <<30));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_tx_ac_3_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_tx_ac_3_ampdu_und_setf(uint8_t txac3ampduund)
{
	ASSERT_ERR((((uint32_t)txac3ampduund << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)txac3ampduund <<29));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_tx_ac_2_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_tx_ac_2_ampdu_und_setf(uint8_t txac2ampduund)
{
	ASSERT_ERR((((uint32_t)txac2ampduund << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)txac2ampduund <<28));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_tx_ac_1_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_tx_ac_1_ampdu_und_setf(uint8_t txac1ampduund)
{
	ASSERT_ERR((((uint32_t)txac1ampduund << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)txac1ampduund <<27));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_tx_ac_0_ampdu_und_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_tx_ac_0_ampdu_und_setf(uint8_t txac0ampduund)
{
	ASSERT_ERR((((uint32_t)txac0ampduund << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)txac0ampduund <<26));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_sw_rts_success_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_sw_rts_success_setf(uint8_t swrtssuccess)
{
	ASSERT_ERR((((uint32_t)swrtssuccess << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)swrtssuccess <<14));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_ac_3_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_ac_3_tx_bw_decision_setf(uint8_t ac3txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac3txbwdecision << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)ac3txbwdecision <<13));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_ac_2_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_ac_2_tx_bw_decision_setf(uint8_t ac2txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac2txbwdecision << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)ac2txbwdecision <<12));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_ac_1_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_ac_1_tx_bw_decision_setf(uint8_t ac1txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac1txbwdecision << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)ac1txbwdecision <<11));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_ac_0_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_ac_0_tx_bw_decision_setf(uint8_t ac0txbwdecision)
{
	ASSERT_ERR((((uint32_t)ac0txbwdecision << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)ac0txbwdecision <<10));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_htp_tx_bw_decision_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_htp_tx_bw_decision_setf(uint8_t htptxbwdecision)
{
	ASSERT_ERR((((uint32_t)htptxbwdecision << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)htptxbwdecision <<9));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_bfr_resp_cancelled_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_bfr_resp_cancelled_setf(uint8_t bfrrespcancelled)
{
	ASSERT_ERR((((uint32_t)bfrrespcancelled << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)bfrrespcancelled <<8));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_end_of_ppdu_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_end_of_ppdu_setf(uint8_t endofppdu)
{
	ASSERT_ERR((((uint32_t)endofppdu << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)endofppdu <<7));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_need_response_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_need_response_setf(uint8_t needresponse)
{
	ASSERT_ERR((((uint32_t)needresponse << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)needresponse <<6));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_rd_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_rd_prot_trigger_setf(uint8_t rdprottrigger)
{
	ASSERT_ERR((((uint32_t)rdprottrigger << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rdprottrigger <<5));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_hcca_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_hcca_prot_trigger_setf(uint8_t hccaprottrigger)
{
	ASSERT_ERR((((uint32_t)hccaprottrigger << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)hccaprottrigger <<4));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_ac_3_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_ac_3_prot_trigger_setf(uint8_t ac3prottrigger)
{
	ASSERT_ERR((((uint32_t)ac3prottrigger << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)ac3prottrigger <<3));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_ac_2_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_ac_2_prot_trigger_setf(uint8_t ac2prottrigger)
{
	ASSERT_ERR((((uint32_t)ac2prottrigger << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)ac2prottrigger <<2));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_ac_1_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_ac_1_prot_trigger_setf(uint8_t ac1prottrigger)
{
	ASSERT_ERR((((uint32_t)ac1prottrigger << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)ac1prottrigger <<1));
}
__INLINE uint8_t mac_hw0_mu0_high_pri_int_event_en_umac_ac_0_prot_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_high_pri_int_event_en_umac_ac_0_prot_trigger_setf(uint8_t ac0prottrigger)
{
	ASSERT_ERR((((uint32_t)ac0prottrigger << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_HIGH_PRI_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)ac0prottrigger <<0));
}

/**
 * @brief RX_INT_EVENT_STATUS_LMAC register definition
 *  Rx interrupts events status LMAC register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25    EOP_FILTERED              0              
 *    24    COUNTER_RX_TRIGGER2       0              
 *    23    PHY_RX_START              0              
 *    22    BA_RX_TRIGGER2            0              
 *    20    RX_TRIGGER2               0              
 *    19    COUNTER_RX_TRIGGER        0              
 *    18    BA_RX_TRIGGER             0              
 *    16    RX_TRIGGER                0              
 *    08    RX_IMPLICIT_BF            0              
 *    05    RX_CLASS_RULE5            0              
 *    04    RX_CLASS_RULE4            0              
 *    03    RX_CLASS_RULE3            0              
 *    02    RX_CLASS_RULE2            0              
 *    01    RX_CLASS_RULE1            0              
 *    00    RX_CLASS_RULE0            0              
 * </pre>
 */
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008730)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_OFFSET      0x00008730
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_INDEX       0x000021CC
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_int_event_status_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_EOP_FILTERED_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_EOP_FILTERED_POS    25
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_COUNTER_RX_TRIGGER_2_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_COUNTER_RX_TRIGGER_2_POS    24
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_PHY_RX_START_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_PHY_RX_START_POS    23
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_BA_RX_TRIGGER_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_BA_RX_TRIGGER_2_POS    22
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_TRIGGER_2_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_TRIGGER_2_POS    20
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_COUNTER_RX_TRIGGER_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_COUNTER_RX_TRIGGER_POS    19
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_BA_RX_TRIGGER_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_BA_RX_TRIGGER_POS    18
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_TRIGGER_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_TRIGGER_POS    16
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_IMPLICIT_BF_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_IMPLICIT_BF_POS    8
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_5_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_5_POS    5
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_4_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_4_POS    4
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_3_POS    3
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_2_POS    2
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_1_POS    1
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_0_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_0_POS    0

#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_EOP_FILTERED_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_COUNTER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_PHY_RX_START_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_BA_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_COUNTER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_BA_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_IMPLICIT_BF_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_5_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_4_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_3_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_1_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_RX_CLASS_RULE_0_RST    0x0

__INLINE void mac_hw0_mu0_rx_int_event_status_lmac_unpack(uint8_t* eop_filtered, uint8_t* counter_rx_trigger2, uint8_t* phy_rx_start, uint8_t* ba_rx_trigger2, uint8_t* rx_trigger2, uint8_t* counter_rx_trigger, uint8_t* ba_rx_trigger, uint8_t* rx_trigger, uint8_t* rx_implicit_bf, uint8_t* rx_class_rule5, uint8_t* rx_class_rule4, uint8_t* rx_class_rule3, uint8_t* rx_class_rule2, uint8_t* rx_class_rule1, uint8_t* rx_class_rule0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);

	*eop_filtered = (localVal & ((uint32_t)0x02000000)) >>  25;
	*counter_rx_trigger2 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*phy_rx_start = (localVal & ((uint32_t)0x00800000)) >>  23;
	*ba_rx_trigger2 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*rx_trigger2 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*counter_rx_trigger = (localVal & ((uint32_t)0x00080000)) >>  19;
	*ba_rx_trigger = (localVal & ((uint32_t)0x00040000)) >>  18;
	*rx_trigger = (localVal & ((uint32_t)0x00010000)) >>  16;
	*rx_implicit_bf = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_class_rule5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rx_class_rule4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*rx_class_rule3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*rx_class_rule2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*rx_class_rule1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*rx_class_rule0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_lmac_eop_filtered_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_lmac_counter_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_lmac_phy_rx_start_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_lmac_ba_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_lmac_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_lmac_counter_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_lmac_ba_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_lmac_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_lmac_rx_implicit_bf_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_lmac_rx_class_rule_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_lmac_rx_class_rule_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_lmac_rx_class_rule_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_lmac_rx_class_rule_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_lmac_rx_class_rule_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_status_lmac_rx_class_rule_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief RX_INT_EVENT_CLEAR register definition
 *  Rx interrupts status clear register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25    EOP_FILTERED              0              
 *    24    COUNTER_RX_TRIGGER2       0              
 *    23    PHY_RX_START              0              
 *    22    BA_RX_TRIGGER2            0              
 *    20    RX_TRIGGER2               0              
 *    19    COUNTER_RX_TRIGGER        0              
 *    18    BA_RX_TRIGGER             0              
 *    16    RX_TRIGGER                0              
 *    08    RX_IMPLICIT_BF            0              
 *    05    RX_CLASS_RULE5            0              
 *    04    RX_CLASS_RULE4            0              
 *    03    RX_CLASS_RULE3            0              
 *    02    RX_CLASS_RULE2            0              
 *    01    RX_CLASS_RULE1            0              
 *    00    RX_CLASS_RULE0            0              
 * </pre>
 */
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008734)
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_OFFSET      0x00008734
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_INDEX       0x000021CD
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RESET       0x00000000

__INLINE void mac_hw0_mu0_rx_int_event_clear_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_EOP_FILTERED_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_EOP_FILTERED_POS    25
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_COUNTER_RX_TRIGGER_2_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_COUNTER_RX_TRIGGER_2_POS    24
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_PHY_RX_START_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_PHY_RX_START_POS    23
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_BA_RX_TRIGGER_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_BA_RX_TRIGGER_2_POS    22
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_TRIGGER_2_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_TRIGGER_2_POS    20
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_COUNTER_RX_TRIGGER_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_COUNTER_RX_TRIGGER_POS    19
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_BA_RX_TRIGGER_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_BA_RX_TRIGGER_POS    18
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_TRIGGER_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_TRIGGER_POS    16
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_IMPLICIT_BF_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_IMPLICIT_BF_POS    8
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_5_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_5_POS    5
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_4_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_4_POS    4
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_3_POS    3
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_2_POS    2
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_1_POS    1
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_0_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_0_POS    0

#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_EOP_FILTERED_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_COUNTER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_PHY_RX_START_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_BA_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_COUNTER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_BA_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_IMPLICIT_BF_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_5_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_4_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_3_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_1_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_CLEAR_RX_CLASS_RULE_0_RST    0x0

__INLINE void mac_hw0_mu0_rx_int_event_clear_pack(uint8_t eop_filtered, uint8_t counter_rx_trigger2, uint8_t phy_rx_start, uint8_t ba_rx_trigger2, uint8_t rx_trigger2, uint8_t counter_rx_trigger, uint8_t ba_rx_trigger, uint8_t rx_trigger, uint8_t rx_implicit_bf, uint8_t rx_class_rule5, uint8_t rx_class_rule4, uint8_t rx_class_rule3, uint8_t rx_class_rule2, uint8_t rx_class_rule1, uint8_t rx_class_rule0)
{
	ASSERT_ERR((((uint32_t)eop_filtered << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)counter_rx_trigger2 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)phy_rx_start << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)ba_rx_trigger2 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)rx_trigger2 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)counter_rx_trigger << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)ba_rx_trigger << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)rx_trigger << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)rx_implicit_bf << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR,  ((uint32_t)eop_filtered << 25) |((uint32_t)counter_rx_trigger2 << 24) |((uint32_t)phy_rx_start << 23) |((uint32_t)ba_rx_trigger2 << 22) |((uint32_t)rx_trigger2 << 20) |((uint32_t)counter_rx_trigger << 19) |((uint32_t)ba_rx_trigger << 18) |((uint32_t)rx_trigger << 16) |((uint32_t)rx_implicit_bf << 8) |((uint32_t)rx_class_rule5 << 5) |((uint32_t)rx_class_rule4 << 4) |((uint32_t)rx_class_rule3 << 3) |((uint32_t)rx_class_rule2 << 2) |((uint32_t)rx_class_rule1 << 1) |((uint32_t)rx_class_rule0 << 0));
}

__INLINE void mac_hw0_mu0_rx_int_event_clear_eop_filtered_setf(uint8_t eopfiltered)
{
	ASSERT_ERR((((uint32_t)eopfiltered << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)eopfiltered <<25));
}
__INLINE void mac_hw0_mu0_rx_int_event_clear_counter_rx_trigger_2_setf(uint8_t counterrxtrigger2)
{
	ASSERT_ERR((((uint32_t)counterrxtrigger2 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)counterrxtrigger2 <<24));
}
__INLINE void mac_hw0_mu0_rx_int_event_clear_phy_rx_start_setf(uint8_t phyrxstart)
{
	ASSERT_ERR((((uint32_t)phyrxstart << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)phyrxstart <<23));
}
__INLINE void mac_hw0_mu0_rx_int_event_clear_ba_rx_trigger_2_setf(uint8_t barxtrigger2)
{
	ASSERT_ERR((((uint32_t)barxtrigger2 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)barxtrigger2 <<22));
}
__INLINE void mac_hw0_mu0_rx_int_event_clear_rx_trigger_2_setf(uint8_t rxtrigger2)
{
	ASSERT_ERR((((uint32_t)rxtrigger2 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)rxtrigger2 <<20));
}
__INLINE void mac_hw0_mu0_rx_int_event_clear_counter_rx_trigger_setf(uint8_t counterrxtrigger)
{
	ASSERT_ERR((((uint32_t)counterrxtrigger << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)counterrxtrigger <<19));
}
__INLINE void mac_hw0_mu0_rx_int_event_clear_ba_rx_trigger_setf(uint8_t barxtrigger)
{
	ASSERT_ERR((((uint32_t)barxtrigger << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)barxtrigger <<18));
}
__INLINE void mac_hw0_mu0_rx_int_event_clear_rx_trigger_setf(uint8_t rxtrigger)
{
	ASSERT_ERR((((uint32_t)rxtrigger << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)rxtrigger <<16));
}
__INLINE void mac_hw0_mu0_rx_int_event_clear_rx_implicit_bf_setf(uint8_t rximplicitbf)
{
	ASSERT_ERR((((uint32_t)rximplicitbf << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)rximplicitbf <<8));
}
__INLINE void mac_hw0_mu0_rx_int_event_clear_rx_class_rule_5_setf(uint8_t rxclassrule5)
{
	ASSERT_ERR((((uint32_t)rxclassrule5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rxclassrule5 <<5));
}
__INLINE void mac_hw0_mu0_rx_int_event_clear_rx_class_rule_4_setf(uint8_t rxclassrule4)
{
	ASSERT_ERR((((uint32_t)rxclassrule4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)rxclassrule4 <<4));
}
__INLINE void mac_hw0_mu0_rx_int_event_clear_rx_class_rule_3_setf(uint8_t rxclassrule3)
{
	ASSERT_ERR((((uint32_t)rxclassrule3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)rxclassrule3 <<3));
}
__INLINE void mac_hw0_mu0_rx_int_event_clear_rx_class_rule_2_setf(uint8_t rxclassrule2)
{
	ASSERT_ERR((((uint32_t)rxclassrule2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)rxclassrule2 <<2));
}
__INLINE void mac_hw0_mu0_rx_int_event_clear_rx_class_rule_1_setf(uint8_t rxclassrule1)
{
	ASSERT_ERR((((uint32_t)rxclassrule1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)rxclassrule1 <<1));
}
__INLINE void mac_hw0_mu0_rx_int_event_clear_rx_class_rule_0_setf(uint8_t rxclassrule0)
{
	ASSERT_ERR((((uint32_t)rxclassrule0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)rxclassrule0 <<0));
}

/**
 * @brief RX_INT_EVENT_EN_LMAC register definition
 *  Rx interrupts enable LMAC register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25    EOP_FILTERED              0              
 *    24    COUNTER_RX_TRIGGER2       0              
 *    23    PHY_RX_START              0              
 *    22    BA_RX_TRIGGER2            0              
 *    20    RX_TRIGGER2               0              
 *    19    COUNTER_RX_TRIGGER        0              
 *    18    BA_RX_TRIGGER             0              
 *    16    RX_TRIGGER                0              
 *    08    RX_IMPLICIT_BF            0              
 *    05    RX_CLASS_RULE5            0              
 *    04    RX_CLASS_RULE4            0              
 *    03    RX_CLASS_RULE3            0              
 *    02    RX_CLASS_RULE2            0              
 *    01    RX_CLASS_RULE1            0              
 *    00    RX_CLASS_RULE0            0              
 * </pre>
 */
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008738)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_OFFSET      0x00008738
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_INDEX       0x000021CE
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_int_event_en_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);
}

__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_EOP_FILTERED_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_EOP_FILTERED_POS    25
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_COUNTER_RX_TRIGGER_2_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_COUNTER_RX_TRIGGER_2_POS    24
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_PHY_RX_START_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_PHY_RX_START_POS    23
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_BA_RX_TRIGGER_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_BA_RX_TRIGGER_2_POS    22
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_TRIGGER_2_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_TRIGGER_2_POS    20
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_COUNTER_RX_TRIGGER_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_COUNTER_RX_TRIGGER_POS    19
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_BA_RX_TRIGGER_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_BA_RX_TRIGGER_POS    18
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_TRIGGER_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_TRIGGER_POS    16
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_IMPLICIT_BF_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_IMPLICIT_BF_POS    8
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_5_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_5_POS    5
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_4_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_4_POS    4
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_3_POS    3
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_2_POS    2
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_1_POS    1
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_0_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_0_POS    0

#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_EOP_FILTERED_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_COUNTER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_PHY_RX_START_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_BA_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_COUNTER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_BA_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_IMPLICIT_BF_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_5_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_4_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_3_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_1_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_RX_CLASS_RULE_0_RST    0x0

__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_pack(uint8_t eop_filtered, uint8_t counter_rx_trigger2, uint8_t phy_rx_start, uint8_t ba_rx_trigger2, uint8_t rx_trigger2, uint8_t counter_rx_trigger, uint8_t ba_rx_trigger, uint8_t rx_trigger, uint8_t rx_implicit_bf, uint8_t rx_class_rule5, uint8_t rx_class_rule4, uint8_t rx_class_rule3, uint8_t rx_class_rule2, uint8_t rx_class_rule1, uint8_t rx_class_rule0)
{
	ASSERT_ERR((((uint32_t)eop_filtered << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)counter_rx_trigger2 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)phy_rx_start << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)ba_rx_trigger2 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)rx_trigger2 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)counter_rx_trigger << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)ba_rx_trigger << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)rx_trigger << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)rx_implicit_bf << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR,  ((uint32_t)eop_filtered << 25) |((uint32_t)counter_rx_trigger2 << 24) |((uint32_t)phy_rx_start << 23) |((uint32_t)ba_rx_trigger2 << 22) |((uint32_t)rx_trigger2 << 20) |((uint32_t)counter_rx_trigger << 19) |((uint32_t)ba_rx_trigger << 18) |((uint32_t)rx_trigger << 16) |((uint32_t)rx_implicit_bf << 8) |((uint32_t)rx_class_rule5 << 5) |((uint32_t)rx_class_rule4 << 4) |((uint32_t)rx_class_rule3 << 3) |((uint32_t)rx_class_rule2 << 2) |((uint32_t)rx_class_rule1 << 1) |((uint32_t)rx_class_rule0 << 0));
}

__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_unpack(uint8_t* eop_filtered, uint8_t* counter_rx_trigger2, uint8_t* phy_rx_start, uint8_t* ba_rx_trigger2, uint8_t* rx_trigger2, uint8_t* counter_rx_trigger, uint8_t* ba_rx_trigger, uint8_t* rx_trigger, uint8_t* rx_implicit_bf, uint8_t* rx_class_rule5, uint8_t* rx_class_rule4, uint8_t* rx_class_rule3, uint8_t* rx_class_rule2, uint8_t* rx_class_rule1, uint8_t* rx_class_rule0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);

	*eop_filtered = (localVal & ((uint32_t)0x02000000)) >>  25;
	*counter_rx_trigger2 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*phy_rx_start = (localVal & ((uint32_t)0x00800000)) >>  23;
	*ba_rx_trigger2 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*rx_trigger2 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*counter_rx_trigger = (localVal & ((uint32_t)0x00080000)) >>  19;
	*ba_rx_trigger = (localVal & ((uint32_t)0x00040000)) >>  18;
	*rx_trigger = (localVal & ((uint32_t)0x00010000)) >>  16;
	*rx_implicit_bf = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_class_rule5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rx_class_rule4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*rx_class_rule3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*rx_class_rule2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*rx_class_rule1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*rx_class_rule0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_lmac_eop_filtered_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_eop_filtered_setf(uint8_t eopfiltered)
{
	ASSERT_ERR((((uint32_t)eopfiltered << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)eopfiltered <<25));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_lmac_counter_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_counter_rx_trigger_2_setf(uint8_t counterrxtrigger2)
{
	ASSERT_ERR((((uint32_t)counterrxtrigger2 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)counterrxtrigger2 <<24));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_lmac_phy_rx_start_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_phy_rx_start_setf(uint8_t phyrxstart)
{
	ASSERT_ERR((((uint32_t)phyrxstart << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)phyrxstart <<23));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_lmac_ba_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_ba_rx_trigger_2_setf(uint8_t barxtrigger2)
{
	ASSERT_ERR((((uint32_t)barxtrigger2 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)barxtrigger2 <<22));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_lmac_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_rx_trigger_2_setf(uint8_t rxtrigger2)
{
	ASSERT_ERR((((uint32_t)rxtrigger2 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)rxtrigger2 <<20));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_lmac_counter_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_counter_rx_trigger_setf(uint8_t counterrxtrigger)
{
	ASSERT_ERR((((uint32_t)counterrxtrigger << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)counterrxtrigger <<19));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_lmac_ba_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_ba_rx_trigger_setf(uint8_t barxtrigger)
{
	ASSERT_ERR((((uint32_t)barxtrigger << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)barxtrigger <<18));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_lmac_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_rx_trigger_setf(uint8_t rxtrigger)
{
	ASSERT_ERR((((uint32_t)rxtrigger << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)rxtrigger <<16));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_lmac_rx_implicit_bf_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_rx_implicit_bf_setf(uint8_t rximplicitbf)
{
	ASSERT_ERR((((uint32_t)rximplicitbf << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)rximplicitbf <<8));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_lmac_rx_class_rule_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_rx_class_rule_5_setf(uint8_t rxclassrule5)
{
	ASSERT_ERR((((uint32_t)rxclassrule5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rxclassrule5 <<5));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_lmac_rx_class_rule_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_rx_class_rule_4_setf(uint8_t rxclassrule4)
{
	ASSERT_ERR((((uint32_t)rxclassrule4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)rxclassrule4 <<4));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_lmac_rx_class_rule_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_rx_class_rule_3_setf(uint8_t rxclassrule3)
{
	ASSERT_ERR((((uint32_t)rxclassrule3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)rxclassrule3 <<3));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_lmac_rx_class_rule_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_rx_class_rule_2_setf(uint8_t rxclassrule2)
{
	ASSERT_ERR((((uint32_t)rxclassrule2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)rxclassrule2 <<2));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_lmac_rx_class_rule_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_rx_class_rule_1_setf(uint8_t rxclassrule1)
{
	ASSERT_ERR((((uint32_t)rxclassrule1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)rxclassrule1 <<1));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_lmac_rx_class_rule_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_lmac_rx_class_rule_0_setf(uint8_t rxclassrule0)
{
	ASSERT_ERR((((uint32_t)rxclassrule0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)rxclassrule0 <<0));
}

/**
 * @brief RX_INT_EVENT_EN_UMAC register definition
 *  Rx interrupts enable UMAC register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    25    EOP_FILTERED              0              
 *    24    COUNTER_RX_TRIGGER2       0              
 *    23    PHY_RX_START              0              
 *    22    BA_RX_TRIGGER2            0              
 *    20    RX_TRIGGER2               0              
 *    19    COUNTER_RX_TRIGGER        0              
 *    18    BA_RX_TRIGGER             0              
 *    16    RX_TRIGGER                0              
 *    08    RX_IMPLICIT_BF            0              
 *    05    RX_CLASS_RULE5            0              
 *    04    RX_CLASS_RULE4            0              
 *    03    RX_CLASS_RULE3            0              
 *    02    RX_CLASS_RULE2            0              
 *    01    RX_CLASS_RULE1            0              
 *    00    RX_CLASS_RULE0            0              
 * </pre>
 */
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000873C)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_OFFSET      0x0000873C
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_INDEX       0x000021CF
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_rx_int_event_en_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);
}

__INLINE void mac_hw0_mu0_rx_int_event_en_umac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_EOP_FILTERED_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_EOP_FILTERED_POS    25
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_COUNTER_RX_TRIGGER_2_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_COUNTER_RX_TRIGGER_2_POS    24
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_PHY_RX_START_BIT    ((uint32_t)0x00800000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_PHY_RX_START_POS    23
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_BA_RX_TRIGGER_2_BIT    ((uint32_t)0x00400000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_BA_RX_TRIGGER_2_POS    22
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_TRIGGER_2_BIT    ((uint32_t)0x00100000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_TRIGGER_2_POS    20
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_COUNTER_RX_TRIGGER_BIT    ((uint32_t)0x00080000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_COUNTER_RX_TRIGGER_POS    19
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_BA_RX_TRIGGER_BIT    ((uint32_t)0x00040000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_BA_RX_TRIGGER_POS    18
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_TRIGGER_BIT    ((uint32_t)0x00010000)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_TRIGGER_POS    16
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_IMPLICIT_BF_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_IMPLICIT_BF_POS    8
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_5_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_5_POS    5
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_4_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_4_POS    4
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_3_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_3_POS    3
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_2_BIT    ((uint32_t)0x00000004)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_2_POS    2
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_1_BIT    ((uint32_t)0x00000002)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_1_POS    1
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_0_BIT    ((uint32_t)0x00000001)
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_0_POS    0

#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_EOP_FILTERED_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_COUNTER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_PHY_RX_START_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_BA_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_COUNTER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_BA_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_IMPLICIT_BF_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_5_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_4_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_3_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_2_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_1_RST    0x0
#define MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_RX_CLASS_RULE_0_RST    0x0

__INLINE void mac_hw0_mu0_rx_int_event_en_umac_pack(uint8_t eop_filtered, uint8_t counter_rx_trigger2, uint8_t phy_rx_start, uint8_t ba_rx_trigger2, uint8_t rx_trigger2, uint8_t counter_rx_trigger, uint8_t ba_rx_trigger, uint8_t rx_trigger, uint8_t rx_implicit_bf, uint8_t rx_class_rule5, uint8_t rx_class_rule4, uint8_t rx_class_rule3, uint8_t rx_class_rule2, uint8_t rx_class_rule1, uint8_t rx_class_rule0)
{
	ASSERT_ERR((((uint32_t)eop_filtered << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)counter_rx_trigger2 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)phy_rx_start << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)ba_rx_trigger2 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)rx_trigger2 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)counter_rx_trigger << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)ba_rx_trigger << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)rx_trigger << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)rx_implicit_bf << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)rx_class_rule0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR,  ((uint32_t)eop_filtered << 25) |((uint32_t)counter_rx_trigger2 << 24) |((uint32_t)phy_rx_start << 23) |((uint32_t)ba_rx_trigger2 << 22) |((uint32_t)rx_trigger2 << 20) |((uint32_t)counter_rx_trigger << 19) |((uint32_t)ba_rx_trigger << 18) |((uint32_t)rx_trigger << 16) |((uint32_t)rx_implicit_bf << 8) |((uint32_t)rx_class_rule5 << 5) |((uint32_t)rx_class_rule4 << 4) |((uint32_t)rx_class_rule3 << 3) |((uint32_t)rx_class_rule2 << 2) |((uint32_t)rx_class_rule1 << 1) |((uint32_t)rx_class_rule0 << 0));
}

__INLINE void mac_hw0_mu0_rx_int_event_en_umac_unpack(uint8_t* eop_filtered, uint8_t* counter_rx_trigger2, uint8_t* phy_rx_start, uint8_t* ba_rx_trigger2, uint8_t* rx_trigger2, uint8_t* counter_rx_trigger, uint8_t* ba_rx_trigger, uint8_t* rx_trigger, uint8_t* rx_implicit_bf, uint8_t* rx_class_rule5, uint8_t* rx_class_rule4, uint8_t* rx_class_rule3, uint8_t* rx_class_rule2, uint8_t* rx_class_rule1, uint8_t* rx_class_rule0)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);

	*eop_filtered = (localVal & ((uint32_t)0x02000000)) >>  25;
	*counter_rx_trigger2 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*phy_rx_start = (localVal & ((uint32_t)0x00800000)) >>  23;
	*ba_rx_trigger2 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*rx_trigger2 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*counter_rx_trigger = (localVal & ((uint32_t)0x00080000)) >>  19;
	*ba_rx_trigger = (localVal & ((uint32_t)0x00040000)) >>  18;
	*rx_trigger = (localVal & ((uint32_t)0x00010000)) >>  16;
	*rx_implicit_bf = (localVal & ((uint32_t)0x00000100)) >>  8;
	*rx_class_rule5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rx_class_rule4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*rx_class_rule3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*rx_class_rule2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*rx_class_rule1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*rx_class_rule0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_umac_eop_filtered_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_umac_eop_filtered_setf(uint8_t eopfiltered)
{
	ASSERT_ERR((((uint32_t)eopfiltered << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)eopfiltered <<25));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_umac_counter_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_umac_counter_rx_trigger_2_setf(uint8_t counterrxtrigger2)
{
	ASSERT_ERR((((uint32_t)counterrxtrigger2 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)counterrxtrigger2 <<24));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_umac_phy_rx_start_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_umac_phy_rx_start_setf(uint8_t phyrxstart)
{
	ASSERT_ERR((((uint32_t)phyrxstart << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)phyrxstart <<23));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_umac_ba_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_umac_ba_rx_trigger_2_setf(uint8_t barxtrigger2)
{
	ASSERT_ERR((((uint32_t)barxtrigger2 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)barxtrigger2 <<22));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_umac_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_umac_rx_trigger_2_setf(uint8_t rxtrigger2)
{
	ASSERT_ERR((((uint32_t)rxtrigger2 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)rxtrigger2 <<20));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_umac_counter_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_umac_counter_rx_trigger_setf(uint8_t counterrxtrigger)
{
	ASSERT_ERR((((uint32_t)counterrxtrigger << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)counterrxtrigger <<19));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_umac_ba_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_umac_ba_rx_trigger_setf(uint8_t barxtrigger)
{
	ASSERT_ERR((((uint32_t)barxtrigger << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)barxtrigger <<18));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_umac_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_umac_rx_trigger_setf(uint8_t rxtrigger)
{
	ASSERT_ERR((((uint32_t)rxtrigger << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)rxtrigger <<16));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_umac_rx_implicit_bf_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_umac_rx_implicit_bf_setf(uint8_t rximplicitbf)
{
	ASSERT_ERR((((uint32_t)rximplicitbf << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)rximplicitbf <<8));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_umac_rx_class_rule_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_umac_rx_class_rule_5_setf(uint8_t rxclassrule5)
{
	ASSERT_ERR((((uint32_t)rxclassrule5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rxclassrule5 <<5));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_umac_rx_class_rule_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_umac_rx_class_rule_4_setf(uint8_t rxclassrule4)
{
	ASSERT_ERR((((uint32_t)rxclassrule4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)rxclassrule4 <<4));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_umac_rx_class_rule_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_umac_rx_class_rule_3_setf(uint8_t rxclassrule3)
{
	ASSERT_ERR((((uint32_t)rxclassrule3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)rxclassrule3 <<3));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_umac_rx_class_rule_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_umac_rx_class_rule_2_setf(uint8_t rxclassrule2)
{
	ASSERT_ERR((((uint32_t)rxclassrule2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)rxclassrule2 <<2));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_umac_rx_class_rule_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_umac_rx_class_rule_1_setf(uint8_t rxclassrule1)
{
	ASSERT_ERR((((uint32_t)rxclassrule1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)rxclassrule1 <<1));
}
__INLINE uint8_t mac_hw0_mu0_rx_int_event_en_umac_rx_class_rule_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void mac_hw0_mu0_rx_int_event_en_umac_rx_class_rule_0_setf(uint8_t rxclassrule0)
{
	ASSERT_ERR((((uint32_t)rxclassrule0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_RX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)rxclassrule0 <<0));
}

/**
 * @brief TIMER_INT_EVENT_STATUS_LMAC register definition
 *  Timer interrupts events status LMAC register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21    TIMER_RX_TRIGGER2         0              
 *    17    TIMER_RX_TRIGGER          0              
 *    14    TIMER_TX_TRIGGER          0              
 * </pre>
 */
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008740)
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_OFFSET      0x00008740
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_INDEX       0x000021D0
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_timer_int_event_status_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_TIMER_RX_TRIGGER_2_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_TIMER_RX_TRIGGER_2_POS    21
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_TIMER_RX_TRIGGER_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_TIMER_RX_TRIGGER_POS    17
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_TIMER_TX_TRIGGER_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_TIMER_TX_TRIGGER_POS    14

#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_TIMER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_TIMER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_TIMER_TX_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_timer_int_event_status_lmac_unpack(uint8_t* timer_rx_trigger2, uint8_t* timer_rx_trigger, uint8_t* timer_tx_trigger)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_ADDR);

	*timer_rx_trigger2 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*timer_rx_trigger = (localVal & ((uint32_t)0x00020000)) >>  17;
	*timer_tx_trigger = (localVal & ((uint32_t)0x00004000)) >>  14;
}

__INLINE uint8_t mac_hw0_mu0_timer_int_event_status_lmac_timer_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t mac_hw0_mu0_timer_int_event_status_lmac_timer_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t mac_hw0_mu0_timer_int_event_status_lmac_timer_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}

/**
 * @brief TIMER_INT_EVENT_CLEAR register definition
 *  Timer interrupts status clear register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21    TIMER_RX_TRIGGER2         0              
 *    17    TIMER_RX_TRIGGER          0              
 *    14    TIMER_TX_TRIGGER          0              
 * </pre>
 */
#define MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008744)
#define MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_OFFSET      0x00008744
#define MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_INDEX       0x000021D1
#define MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_RESET       0x00000000

__INLINE void mac_hw0_mu0_timer_int_event_clear_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_TIMER_RX_TRIGGER_2_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_TIMER_RX_TRIGGER_2_POS    21
#define MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_TIMER_RX_TRIGGER_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_TIMER_RX_TRIGGER_POS    17
#define MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_TIMER_TX_TRIGGER_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_TIMER_TX_TRIGGER_POS    14

#define MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_TIMER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_TIMER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_TIMER_TX_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_timer_int_event_clear_pack(uint8_t timer_rx_trigger2, uint8_t timer_rx_trigger, uint8_t timer_tx_trigger)
{
	ASSERT_ERR((((uint32_t)timer_rx_trigger2 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)timer_rx_trigger << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)timer_tx_trigger << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_ADDR,  ((uint32_t)timer_rx_trigger2 << 21) |((uint32_t)timer_rx_trigger << 17) |((uint32_t)timer_tx_trigger << 14));
}

__INLINE void mac_hw0_mu0_timer_int_event_clear_timer_rx_trigger_2_setf(uint8_t timerrxtrigger2)
{
	ASSERT_ERR((((uint32_t)timerrxtrigger2 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)timerrxtrigger2 <<21));
}
__INLINE void mac_hw0_mu0_timer_int_event_clear_timer_rx_trigger_setf(uint8_t timerrxtrigger)
{
	ASSERT_ERR((((uint32_t)timerrxtrigger << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)timerrxtrigger <<17));
}
__INLINE void mac_hw0_mu0_timer_int_event_clear_timer_tx_trigger_setf(uint8_t timertxtrigger)
{
	ASSERT_ERR((((uint32_t)timertxtrigger << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)timertxtrigger <<14));
}

/**
 * @brief TIMER_INT_EVENT_EN_LMAC register definition
 *  Timer interrupts enable LMAC register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21    TIMER_RX_TRIGGER2         0              
 *    17    TIMER_RX_TRIGGER          0              
 *    14    TIMER_TX_TRIGGER          0              
 * </pre>
 */
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008748)
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_OFFSET      0x00008748
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_INDEX       0x000021D2
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_timer_int_event_en_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_ADDR);
}

__INLINE void mac_hw0_mu0_timer_int_event_en_lmac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_TIMER_RX_TRIGGER_2_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_TIMER_RX_TRIGGER_2_POS    21
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_TIMER_RX_TRIGGER_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_TIMER_RX_TRIGGER_POS    17
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_TIMER_TX_TRIGGER_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_TIMER_TX_TRIGGER_POS    14

#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_TIMER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_TIMER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_TIMER_TX_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_timer_int_event_en_lmac_pack(uint8_t timer_rx_trigger2, uint8_t timer_rx_trigger, uint8_t timer_tx_trigger)
{
	ASSERT_ERR((((uint32_t)timer_rx_trigger2 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)timer_rx_trigger << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)timer_tx_trigger << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_ADDR,  ((uint32_t)timer_rx_trigger2 << 21) |((uint32_t)timer_rx_trigger << 17) |((uint32_t)timer_tx_trigger << 14));
}

__INLINE void mac_hw0_mu0_timer_int_event_en_lmac_unpack(uint8_t* timer_rx_trigger2, uint8_t* timer_rx_trigger, uint8_t* timer_tx_trigger)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_ADDR);

	*timer_rx_trigger2 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*timer_rx_trigger = (localVal & ((uint32_t)0x00020000)) >>  17;
	*timer_tx_trigger = (localVal & ((uint32_t)0x00004000)) >>  14;
}

__INLINE uint8_t mac_hw0_mu0_timer_int_event_en_lmac_timer_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_timer_int_event_en_lmac_timer_rx_trigger_2_setf(uint8_t timerrxtrigger2)
{
	ASSERT_ERR((((uint32_t)timerrxtrigger2 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)timerrxtrigger2 <<21));
}
__INLINE uint8_t mac_hw0_mu0_timer_int_event_en_lmac_timer_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_timer_int_event_en_lmac_timer_rx_trigger_setf(uint8_t timerrxtrigger)
{
	ASSERT_ERR((((uint32_t)timerrxtrigger << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)timerrxtrigger <<17));
}
__INLINE uint8_t mac_hw0_mu0_timer_int_event_en_lmac_timer_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_timer_int_event_en_lmac_timer_tx_trigger_setf(uint8_t timertxtrigger)
{
	ASSERT_ERR((((uint32_t)timertxtrigger << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)timertxtrigger <<14));
}

/**
 * @brief TIMER_INT_EVENT_EN_UMAC register definition
 *  Timer interrupts enable UMAC register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    21    TIMER_RX_TRIGGER2         0              
 *    17    TIMER_RX_TRIGGER          0              
 *    14    TIMER_TX_TRIGGER          0              
 * </pre>
 */
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000874C)
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_OFFSET      0x0000874C
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_INDEX       0x000021D3
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_timer_int_event_en_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_ADDR);
}

__INLINE void mac_hw0_mu0_timer_int_event_en_umac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_TIMER_RX_TRIGGER_2_BIT    ((uint32_t)0x00200000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_TIMER_RX_TRIGGER_2_POS    21
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_TIMER_RX_TRIGGER_BIT    ((uint32_t)0x00020000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_TIMER_RX_TRIGGER_POS    17
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_TIMER_TX_TRIGGER_BIT    ((uint32_t)0x00004000)
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_TIMER_TX_TRIGGER_POS    14

#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_TIMER_RX_TRIGGER_2_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_TIMER_RX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_TIMER_TX_TRIGGER_RST    0x0

__INLINE void mac_hw0_mu0_timer_int_event_en_umac_pack(uint8_t timer_rx_trigger2, uint8_t timer_rx_trigger, uint8_t timer_tx_trigger)
{
	ASSERT_ERR((((uint32_t)timer_rx_trigger2 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)timer_rx_trigger << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)timer_tx_trigger << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_ADDR,  ((uint32_t)timer_rx_trigger2 << 21) |((uint32_t)timer_rx_trigger << 17) |((uint32_t)timer_tx_trigger << 14));
}

__INLINE void mac_hw0_mu0_timer_int_event_en_umac_unpack(uint8_t* timer_rx_trigger2, uint8_t* timer_rx_trigger, uint8_t* timer_tx_trigger)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_ADDR);

	*timer_rx_trigger2 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*timer_rx_trigger = (localVal & ((uint32_t)0x00020000)) >>  17;
	*timer_tx_trigger = (localVal & ((uint32_t)0x00004000)) >>  14;
}

__INLINE uint8_t mac_hw0_mu0_timer_int_event_en_umac_timer_rx_trigger_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void mac_hw0_mu0_timer_int_event_en_umac_timer_rx_trigger_2_setf(uint8_t timerrxtrigger2)
{
	ASSERT_ERR((((uint32_t)timerrxtrigger2 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)timerrxtrigger2 <<21));
}
__INLINE uint8_t mac_hw0_mu0_timer_int_event_en_umac_timer_rx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void mac_hw0_mu0_timer_int_event_en_umac_timer_rx_trigger_setf(uint8_t timerrxtrigger)
{
	ASSERT_ERR((((uint32_t)timerrxtrigger << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)timerrxtrigger <<17));
}
__INLINE uint8_t mac_hw0_mu0_timer_int_event_en_umac_timer_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void mac_hw0_mu0_timer_int_event_en_umac_timer_tx_trigger_setf(uint8_t timertxtrigger)
{
	ASSERT_ERR((((uint32_t)timertxtrigger << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TIMER_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)timertxtrigger <<14));
}

/**
 * @brief TX_INT_EVENT_STATUS_LMAC register definition
 *  Tx interrupts events status LMAC register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    HTP_TX_BUF_TRIGGER        0              
 *    28    BCN_TX_BUF_TRIGGER        0              
 *    27    AC_3_TX_BUF_TRIGGER       0              
 *    26    AC_2_TX_BUF_TRIGGER       0              
 *    25    AC_1_TX_BUF_TRIGGER       0              
 *    24    AC_0_TX_BUF_TRIGGER       0              
 *    12    HTP_TX_TRIGGER            0              
 *    11    HCCA_TX_TRIGGER           0              
 *    10    BCN_TX_TRIGGER            0              
 *    09    AC_3_TX_TRIGGER           0              
 *    08    AC_2_TX_TRIGGER           0              
 *    07    AC_1_TX_TRIGGER           0              
 *    06    AC_0_TX_TRIGGER           0              
 *    05    TXOP_COMPLETE             0              
 *    04    RD_TX_TRIGGER             0              
 *    03    TX_ABORT                  0              
 * </pre>
 */
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008750)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_OFFSET      0x00008750
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_INDEX       0x000021D4
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_int_event_status_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
}

// field definitions
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_HTP_TX_BUF_TRIGGER_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_HTP_TX_BUF_TRIGGER_POS    29
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_BCN_TX_BUF_TRIGGER_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_BCN_TX_BUF_TRIGGER_POS    28
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_3_TX_BUF_TRIGGER_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_3_TX_BUF_TRIGGER_POS    27
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_2_TX_BUF_TRIGGER_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_2_TX_BUF_TRIGGER_POS    26
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_1_TX_BUF_TRIGGER_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_1_TX_BUF_TRIGGER_POS    25
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_0_TX_BUF_TRIGGER_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_0_TX_BUF_TRIGGER_POS    24
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_HTP_TX_TRIGGER_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_HTP_TX_TRIGGER_POS    12
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_HCCA_TX_TRIGGER_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_HCCA_TX_TRIGGER_POS    11
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_BCN_TX_TRIGGER_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_BCN_TX_TRIGGER_POS    10
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_3_TX_TRIGGER_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_3_TX_TRIGGER_POS    9
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_2_TX_TRIGGER_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_2_TX_TRIGGER_POS    8
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_1_TX_TRIGGER_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_1_TX_TRIGGER_POS    7
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_0_TX_TRIGGER_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_0_TX_TRIGGER_POS    6
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_TXOP_COMPLETE_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_TXOP_COMPLETE_POS    5
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_RD_TX_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_RD_TX_TRIGGER_POS    4
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_TX_ABORT_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_TX_ABORT_POS    3

#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_HTP_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_BCN_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_3_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_2_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_1_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_0_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_HTP_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_HCCA_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_BCN_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_3_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_2_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_1_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_AC_0_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_TXOP_COMPLETE_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_RD_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_TX_ABORT_RST    0x0

__INLINE void mac_hw0_mu0_tx_int_event_status_lmac_unpack(uint8_t* htp_tx_buf_trigger, uint8_t* bcn_tx_buf_trigger, uint8_t* ac_3_tx_buf_trigger, uint8_t* ac_2_tx_buf_trigger, uint8_t* ac_1_tx_buf_trigger, uint8_t* ac_0_tx_buf_trigger, uint8_t* htp_tx_trigger, uint8_t* hcca_tx_trigger, uint8_t* bcn_tx_trigger, uint8_t* ac_3_tx_trigger, uint8_t* ac_2_tx_trigger, uint8_t* ac_1_tx_trigger, uint8_t* ac_0_tx_trigger, uint8_t* txop_complete, uint8_t* rd_tx_trigger, uint8_t* tx_abort)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);

	*htp_tx_buf_trigger = (localVal & ((uint32_t)0x20000000)) >>  29;
	*bcn_tx_buf_trigger = (localVal & ((uint32_t)0x10000000)) >>  28;
	*ac_3_tx_buf_trigger = (localVal & ((uint32_t)0x08000000)) >>  27;
	*ac_2_tx_buf_trigger = (localVal & ((uint32_t)0x04000000)) >>  26;
	*ac_1_tx_buf_trigger = (localVal & ((uint32_t)0x02000000)) >>  25;
	*ac_0_tx_buf_trigger = (localVal & ((uint32_t)0x01000000)) >>  24;
	*htp_tx_trigger = (localVal & ((uint32_t)0x00001000)) >>  12;
	*hcca_tx_trigger = (localVal & ((uint32_t)0x00000800)) >>  11;
	*bcn_tx_trigger = (localVal & ((uint32_t)0x00000400)) >>  10;
	*ac_3_tx_trigger = (localVal & ((uint32_t)0x00000200)) >>  9;
	*ac_2_tx_trigger = (localVal & ((uint32_t)0x00000100)) >>  8;
	*ac_1_tx_trigger = (localVal & ((uint32_t)0x00000080)) >>  7;
	*ac_0_tx_trigger = (localVal & ((uint32_t)0x00000040)) >>  6;
	*txop_complete = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rd_tx_trigger = (localVal & ((uint32_t)0x00000010)) >>  4;
	*tx_abort = (localVal & ((uint32_t)0x00000008)) >>  3;
}

__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_lmac_htp_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_lmac_bcn_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_lmac_ac_3_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_lmac_ac_2_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_lmac_ac_1_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_lmac_ac_0_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_lmac_htp_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_lmac_hcca_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_lmac_bcn_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_lmac_ac_3_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_lmac_ac_2_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_lmac_ac_1_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_lmac_ac_0_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_lmac_txop_complete_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_lmac_rd_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_status_lmac_tx_abort_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_STATUS_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}

/**
 * @brief TX_INT_EVENT_CLEAR register definition
 *  Tx interrupts status clear register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    HTP_TX_BUF_TRIGGER        0              
 *    28    BCN_TX_BUF_TRIGGER        0              
 *    27    AC_3_TX_BUF_TRIGGER       0              
 *    26    AC_2_TX_BUF_TRIGGER       0              
 *    25    AC_1_TX_BUF_TRIGGER       0              
 *    24    AC_0_TX_BUF_TRIGGER       0              
 *    13    TXM_TX_TRIGGER            0              
 *    12    HTP_TX_TRIGGER            0              
 *    11    HCCA_TX_TRIGGER           0              
 *    10    BCN_TX_TRIGGER            0              
 *    09    AC_3_TX_TRIGGER           0              
 *    08    AC_2_TX_TRIGGER           0              
 *    07    AC_1_TX_TRIGGER           0              
 *    06    AC_0_TX_TRIGGER           0              
 *    05    TXOP_COMPLETE             0              
 *    04    RD_TX_TRIGGER             0              
 *    03    TX_ABORT                  0              
 * </pre>
 */
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008754)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_OFFSET      0x00008754
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_INDEX       0x000021D5
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_RESET       0x00000000

__INLINE void mac_hw0_mu0_tx_int_event_clear_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_HTP_TX_BUF_TRIGGER_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_HTP_TX_BUF_TRIGGER_POS    29
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_BCN_TX_BUF_TRIGGER_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_BCN_TX_BUF_TRIGGER_POS    28
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_3_TX_BUF_TRIGGER_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_3_TX_BUF_TRIGGER_POS    27
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_2_TX_BUF_TRIGGER_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_2_TX_BUF_TRIGGER_POS    26
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_1_TX_BUF_TRIGGER_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_1_TX_BUF_TRIGGER_POS    25
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_0_TX_BUF_TRIGGER_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_0_TX_BUF_TRIGGER_POS    24
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_TXM_TX_TRIGGER_BIT    ((uint32_t)0x00002000)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_TXM_TX_TRIGGER_POS    13
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_HTP_TX_TRIGGER_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_HTP_TX_TRIGGER_POS    12
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_HCCA_TX_TRIGGER_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_HCCA_TX_TRIGGER_POS    11
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_BCN_TX_TRIGGER_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_BCN_TX_TRIGGER_POS    10
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_3_TX_TRIGGER_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_3_TX_TRIGGER_POS    9
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_2_TX_TRIGGER_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_2_TX_TRIGGER_POS    8
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_1_TX_TRIGGER_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_1_TX_TRIGGER_POS    7
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_0_TX_TRIGGER_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_0_TX_TRIGGER_POS    6
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_TXOP_COMPLETE_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_TXOP_COMPLETE_POS    5
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_RD_TX_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_RD_TX_TRIGGER_POS    4
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_TX_ABORT_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_TX_ABORT_POS    3

#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_HTP_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_BCN_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_3_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_2_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_1_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_0_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_TXM_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_HTP_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_HCCA_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_BCN_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_3_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_2_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_1_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_AC_0_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_TXOP_COMPLETE_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_RD_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_CLEAR_TX_ABORT_RST    0x0

__INLINE void mac_hw0_mu0_tx_int_event_clear_pack(uint8_t htp_tx_buf_trigger, uint8_t bcn_tx_buf_trigger, uint8_t ac_3_tx_buf_trigger, uint8_t ac_2_tx_buf_trigger, uint8_t ac_1_tx_buf_trigger, uint8_t ac_0_tx_buf_trigger, uint8_t txm_tx_trigger, uint8_t htp_tx_trigger, uint8_t hcca_tx_trigger, uint8_t bcn_tx_trigger, uint8_t ac_3_tx_trigger, uint8_t ac_2_tx_trigger, uint8_t ac_1_tx_trigger, uint8_t ac_0_tx_trigger, uint8_t txop_complete, uint8_t rd_tx_trigger, uint8_t tx_abort)
{
	ASSERT_ERR((((uint32_t)htp_tx_buf_trigger << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)bcn_tx_buf_trigger << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_tx_buf_trigger << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_tx_buf_trigger << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_tx_buf_trigger << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_tx_buf_trigger << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)txm_tx_trigger << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_trigger << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)hcca_tx_trigger << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)bcn_tx_trigger << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_tx_trigger << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_tx_trigger << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_tx_trigger << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_tx_trigger << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)txop_complete << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)rd_tx_trigger << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)tx_abort << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR,  ((uint32_t)htp_tx_buf_trigger << 29) |((uint32_t)bcn_tx_buf_trigger << 28) |((uint32_t)ac_3_tx_buf_trigger << 27) |((uint32_t)ac_2_tx_buf_trigger << 26) |((uint32_t)ac_1_tx_buf_trigger << 25) |((uint32_t)ac_0_tx_buf_trigger << 24) |((uint32_t)txm_tx_trigger << 13) |((uint32_t)htp_tx_trigger << 12) |((uint32_t)hcca_tx_trigger << 11) |((uint32_t)bcn_tx_trigger << 10) |((uint32_t)ac_3_tx_trigger << 9) |((uint32_t)ac_2_tx_trigger << 8) |((uint32_t)ac_1_tx_trigger << 7) |((uint32_t)ac_0_tx_trigger << 6) |((uint32_t)txop_complete << 5) |((uint32_t)rd_tx_trigger << 4) |((uint32_t)tx_abort << 3));
}

__INLINE void mac_hw0_mu0_tx_int_event_clear_htp_tx_buf_trigger_setf(uint8_t htptxbuftrigger)
{
	ASSERT_ERR((((uint32_t)htptxbuftrigger << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)htptxbuftrigger <<29));
}
__INLINE void mac_hw0_mu0_tx_int_event_clear_bcn_tx_buf_trigger_setf(uint8_t bcntxbuftrigger)
{
	ASSERT_ERR((((uint32_t)bcntxbuftrigger << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)bcntxbuftrigger <<28));
}
__INLINE void mac_hw0_mu0_tx_int_event_clear_ac_3_tx_buf_trigger_setf(uint8_t ac3txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac3txbuftrigger << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)ac3txbuftrigger <<27));
}
__INLINE void mac_hw0_mu0_tx_int_event_clear_ac_2_tx_buf_trigger_setf(uint8_t ac2txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac2txbuftrigger << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)ac2txbuftrigger <<26));
}
__INLINE void mac_hw0_mu0_tx_int_event_clear_ac_1_tx_buf_trigger_setf(uint8_t ac1txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac1txbuftrigger << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)ac1txbuftrigger <<25));
}
__INLINE void mac_hw0_mu0_tx_int_event_clear_ac_0_tx_buf_trigger_setf(uint8_t ac0txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac0txbuftrigger << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)ac0txbuftrigger <<24));
}
__INLINE void mac_hw0_mu0_tx_int_event_clear_txm_tx_trigger_setf(uint8_t txmtxtrigger)
{
	ASSERT_ERR((((uint32_t)txmtxtrigger << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)txmtxtrigger <<13));
}
__INLINE void mac_hw0_mu0_tx_int_event_clear_htp_tx_trigger_setf(uint8_t htptxtrigger)
{
	ASSERT_ERR((((uint32_t)htptxtrigger << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)htptxtrigger <<12));
}
__INLINE void mac_hw0_mu0_tx_int_event_clear_hcca_tx_trigger_setf(uint8_t hccatxtrigger)
{
	ASSERT_ERR((((uint32_t)hccatxtrigger << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)hccatxtrigger <<11));
}
__INLINE void mac_hw0_mu0_tx_int_event_clear_bcn_tx_trigger_setf(uint8_t bcntxtrigger)
{
	ASSERT_ERR((((uint32_t)bcntxtrigger << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)bcntxtrigger <<10));
}
__INLINE void mac_hw0_mu0_tx_int_event_clear_ac_3_tx_trigger_setf(uint8_t ac3txtrigger)
{
	ASSERT_ERR((((uint32_t)ac3txtrigger << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)ac3txtrigger <<9));
}
__INLINE void mac_hw0_mu0_tx_int_event_clear_ac_2_tx_trigger_setf(uint8_t ac2txtrigger)
{
	ASSERT_ERR((((uint32_t)ac2txtrigger << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)ac2txtrigger <<8));
}
__INLINE void mac_hw0_mu0_tx_int_event_clear_ac_1_tx_trigger_setf(uint8_t ac1txtrigger)
{
	ASSERT_ERR((((uint32_t)ac1txtrigger << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)ac1txtrigger <<7));
}
__INLINE void mac_hw0_mu0_tx_int_event_clear_ac_0_tx_trigger_setf(uint8_t ac0txtrigger)
{
	ASSERT_ERR((((uint32_t)ac0txtrigger << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)ac0txtrigger <<6));
}
__INLINE void mac_hw0_mu0_tx_int_event_clear_txop_complete_setf(uint8_t txopcomplete)
{
	ASSERT_ERR((((uint32_t)txopcomplete << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)txopcomplete <<5));
}
__INLINE void mac_hw0_mu0_tx_int_event_clear_rd_tx_trigger_setf(uint8_t rdtxtrigger)
{
	ASSERT_ERR((((uint32_t)rdtxtrigger << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)rdtxtrigger <<4));
}
__INLINE void mac_hw0_mu0_tx_int_event_clear_tx_abort_setf(uint8_t txabort)
{
	ASSERT_ERR((((uint32_t)txabort << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_CLEAR_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)txabort <<3));
}

/**
 * @brief TX_INT_EVENT_EN_LMAC register definition
 *  Tx interrupts enable LMAC register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    HTP_TX_BUF_TRIGGER        0              
 *    28    BCN_TX_BUF_TRIGGER        0              
 *    27    AC_3_TX_BUF_TRIGGER       0              
 *    26    AC_2_TX_BUF_TRIGGER       0              
 *    25    AC_1_TX_BUF_TRIGGER       0              
 *    24    AC_0_TX_BUF_TRIGGER       0              
 *    12    HTP_TX_TRIGGER            0              
 *    11    HCCA_TX_TRIGGER           0              
 *    10    BCN_TX_TRIGGER            0              
 *    09    AC_3_TX_TRIGGER           0              
 *    08    AC_2_TX_TRIGGER           0              
 *    07    AC_1_TX_TRIGGER           0              
 *    06    AC_0_TX_TRIGGER           0              
 *    05    TXOP_COMPLETE             0              
 *    04    RD_TX_TRIGGER             0              
 *    03    TX_ABORT                  0              
 * </pre>
 */
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00008758)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_OFFSET      0x00008758
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_INDEX       0x000021D6
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_int_event_en_lmac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
}

__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_HTP_TX_BUF_TRIGGER_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_HTP_TX_BUF_TRIGGER_POS    29
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_BCN_TX_BUF_TRIGGER_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_BCN_TX_BUF_TRIGGER_POS    28
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_3_TX_BUF_TRIGGER_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_3_TX_BUF_TRIGGER_POS    27
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_2_TX_BUF_TRIGGER_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_2_TX_BUF_TRIGGER_POS    26
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_1_TX_BUF_TRIGGER_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_1_TX_BUF_TRIGGER_POS    25
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_0_TX_BUF_TRIGGER_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_0_TX_BUF_TRIGGER_POS    24
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_HTP_TX_TRIGGER_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_HTP_TX_TRIGGER_POS    12
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_HCCA_TX_TRIGGER_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_HCCA_TX_TRIGGER_POS    11
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_BCN_TX_TRIGGER_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_BCN_TX_TRIGGER_POS    10
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_3_TX_TRIGGER_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_3_TX_TRIGGER_POS    9
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_2_TX_TRIGGER_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_2_TX_TRIGGER_POS    8
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_1_TX_TRIGGER_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_1_TX_TRIGGER_POS    7
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_0_TX_TRIGGER_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_0_TX_TRIGGER_POS    6
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_TXOP_COMPLETE_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_TXOP_COMPLETE_POS    5
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_RD_TX_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_RD_TX_TRIGGER_POS    4
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_TX_ABORT_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_TX_ABORT_POS    3

#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_HTP_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_BCN_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_3_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_2_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_1_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_0_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_HTP_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_HCCA_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_BCN_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_3_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_2_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_1_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_AC_0_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_TXOP_COMPLETE_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_RD_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_TX_ABORT_RST    0x0

__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_pack(uint8_t htp_tx_buf_trigger, uint8_t bcn_tx_buf_trigger, uint8_t ac_3_tx_buf_trigger, uint8_t ac_2_tx_buf_trigger, uint8_t ac_1_tx_buf_trigger, uint8_t ac_0_tx_buf_trigger, uint8_t htp_tx_trigger, uint8_t hcca_tx_trigger, uint8_t bcn_tx_trigger, uint8_t ac_3_tx_trigger, uint8_t ac_2_tx_trigger, uint8_t ac_1_tx_trigger, uint8_t ac_0_tx_trigger, uint8_t txop_complete, uint8_t rd_tx_trigger, uint8_t tx_abort)
{
	ASSERT_ERR((((uint32_t)htp_tx_buf_trigger << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)bcn_tx_buf_trigger << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_tx_buf_trigger << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_tx_buf_trigger << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_tx_buf_trigger << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_tx_buf_trigger << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_trigger << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)hcca_tx_trigger << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)bcn_tx_trigger << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_tx_trigger << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_tx_trigger << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_tx_trigger << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_tx_trigger << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)txop_complete << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)rd_tx_trigger << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)tx_abort << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR,  ((uint32_t)htp_tx_buf_trigger << 29) |((uint32_t)bcn_tx_buf_trigger << 28) |((uint32_t)ac_3_tx_buf_trigger << 27) |((uint32_t)ac_2_tx_buf_trigger << 26) |((uint32_t)ac_1_tx_buf_trigger << 25) |((uint32_t)ac_0_tx_buf_trigger << 24) |((uint32_t)htp_tx_trigger << 12) |((uint32_t)hcca_tx_trigger << 11) |((uint32_t)bcn_tx_trigger << 10) |((uint32_t)ac_3_tx_trigger << 9) |((uint32_t)ac_2_tx_trigger << 8) |((uint32_t)ac_1_tx_trigger << 7) |((uint32_t)ac_0_tx_trigger << 6) |((uint32_t)txop_complete << 5) |((uint32_t)rd_tx_trigger << 4) |((uint32_t)tx_abort << 3));
}

__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_unpack(uint8_t* htp_tx_buf_trigger, uint8_t* bcn_tx_buf_trigger, uint8_t* ac_3_tx_buf_trigger, uint8_t* ac_2_tx_buf_trigger, uint8_t* ac_1_tx_buf_trigger, uint8_t* ac_0_tx_buf_trigger, uint8_t* htp_tx_trigger, uint8_t* hcca_tx_trigger, uint8_t* bcn_tx_trigger, uint8_t* ac_3_tx_trigger, uint8_t* ac_2_tx_trigger, uint8_t* ac_1_tx_trigger, uint8_t* ac_0_tx_trigger, uint8_t* txop_complete, uint8_t* rd_tx_trigger, uint8_t* tx_abort)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);

	*htp_tx_buf_trigger = (localVal & ((uint32_t)0x20000000)) >>  29;
	*bcn_tx_buf_trigger = (localVal & ((uint32_t)0x10000000)) >>  28;
	*ac_3_tx_buf_trigger = (localVal & ((uint32_t)0x08000000)) >>  27;
	*ac_2_tx_buf_trigger = (localVal & ((uint32_t)0x04000000)) >>  26;
	*ac_1_tx_buf_trigger = (localVal & ((uint32_t)0x02000000)) >>  25;
	*ac_0_tx_buf_trigger = (localVal & ((uint32_t)0x01000000)) >>  24;
	*htp_tx_trigger = (localVal & ((uint32_t)0x00001000)) >>  12;
	*hcca_tx_trigger = (localVal & ((uint32_t)0x00000800)) >>  11;
	*bcn_tx_trigger = (localVal & ((uint32_t)0x00000400)) >>  10;
	*ac_3_tx_trigger = (localVal & ((uint32_t)0x00000200)) >>  9;
	*ac_2_tx_trigger = (localVal & ((uint32_t)0x00000100)) >>  8;
	*ac_1_tx_trigger = (localVal & ((uint32_t)0x00000080)) >>  7;
	*ac_0_tx_trigger = (localVal & ((uint32_t)0x00000040)) >>  6;
	*txop_complete = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rd_tx_trigger = (localVal & ((uint32_t)0x00000010)) >>  4;
	*tx_abort = (localVal & ((uint32_t)0x00000008)) >>  3;
}

__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_lmac_htp_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_htp_tx_buf_trigger_setf(uint8_t htptxbuftrigger)
{
	ASSERT_ERR((((uint32_t)htptxbuftrigger << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)htptxbuftrigger <<29));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_lmac_bcn_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_bcn_tx_buf_trigger_setf(uint8_t bcntxbuftrigger)
{
	ASSERT_ERR((((uint32_t)bcntxbuftrigger << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)bcntxbuftrigger <<28));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_lmac_ac_3_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_ac_3_tx_buf_trigger_setf(uint8_t ac3txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac3txbuftrigger << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)ac3txbuftrigger <<27));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_lmac_ac_2_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_ac_2_tx_buf_trigger_setf(uint8_t ac2txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac2txbuftrigger << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)ac2txbuftrigger <<26));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_lmac_ac_1_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_ac_1_tx_buf_trigger_setf(uint8_t ac1txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac1txbuftrigger << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)ac1txbuftrigger <<25));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_lmac_ac_0_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_ac_0_tx_buf_trigger_setf(uint8_t ac0txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac0txbuftrigger << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)ac0txbuftrigger <<24));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_lmac_htp_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_htp_tx_trigger_setf(uint8_t htptxtrigger)
{
	ASSERT_ERR((((uint32_t)htptxtrigger << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)htptxtrigger <<12));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_lmac_hcca_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_hcca_tx_trigger_setf(uint8_t hccatxtrigger)
{
	ASSERT_ERR((((uint32_t)hccatxtrigger << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)hccatxtrigger <<11));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_lmac_bcn_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_bcn_tx_trigger_setf(uint8_t bcntxtrigger)
{
	ASSERT_ERR((((uint32_t)bcntxtrigger << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)bcntxtrigger <<10));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_lmac_ac_3_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_ac_3_tx_trigger_setf(uint8_t ac3txtrigger)
{
	ASSERT_ERR((((uint32_t)ac3txtrigger << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)ac3txtrigger <<9));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_lmac_ac_2_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_ac_2_tx_trigger_setf(uint8_t ac2txtrigger)
{
	ASSERT_ERR((((uint32_t)ac2txtrigger << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)ac2txtrigger <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_lmac_ac_1_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_ac_1_tx_trigger_setf(uint8_t ac1txtrigger)
{
	ASSERT_ERR((((uint32_t)ac1txtrigger << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)ac1txtrigger <<7));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_lmac_ac_0_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_ac_0_tx_trigger_setf(uint8_t ac0txtrigger)
{
	ASSERT_ERR((((uint32_t)ac0txtrigger << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)ac0txtrigger <<6));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_lmac_txop_complete_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_txop_complete_setf(uint8_t txopcomplete)
{
	ASSERT_ERR((((uint32_t)txopcomplete << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)txopcomplete <<5));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_lmac_rd_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_rd_tx_trigger_setf(uint8_t rdtxtrigger)
{
	ASSERT_ERR((((uint32_t)rdtxtrigger << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)rdtxtrigger <<4));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_lmac_tx_abort_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_lmac_tx_abort_setf(uint8_t txabort)
{
	ASSERT_ERR((((uint32_t)txabort << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_LMAC_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)txabort <<3));
}

/**
 * @brief TX_INT_EVENT_EN_UMAC register definition
 *  Tx interrupts enable UMAC register. register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    29    HTP_TX_BUF_TRIGGER        0              
 *    28    BCN_TX_BUF_TRIGGER        0              
 *    27    AC_3_TX_BUF_TRIGGER       0              
 *    26    AC_2_TX_BUF_TRIGGER       0              
 *    25    AC_1_TX_BUF_TRIGGER       0              
 *    24    AC_0_TX_BUF_TRIGGER       0              
 *    12    HTP_TX_TRIGGER            0              
 *    11    HCCA_TX_TRIGGER           0              
 *    10    BCN_TX_TRIGGER            0              
 *    09    AC_3_TX_TRIGGER           0              
 *    08    AC_2_TX_TRIGGER           0              
 *    07    AC_1_TX_TRIGGER           0              
 *    06    AC_0_TX_TRIGGER           0              
 *    05    TXOP_COMPLETE             0              
 *    04    RD_TX_TRIGGER             0              
 *    03    TX_ABORT                  0              
 * </pre>
 */
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x0000875C)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_OFFSET      0x0000875C
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_INDEX       0x000021D7
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_RESET       0x00000000

__INLINE uint32_t  mac_hw0_mu0_tx_int_event_en_umac_get(void)
{
	return REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
}

__INLINE void mac_hw0_mu0_tx_int_event_en_umac_set(uint32_t value)
{
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, value);
}

// field definitions
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_HTP_TX_BUF_TRIGGER_BIT    ((uint32_t)0x20000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_HTP_TX_BUF_TRIGGER_POS    29
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_BCN_TX_BUF_TRIGGER_BIT    ((uint32_t)0x10000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_BCN_TX_BUF_TRIGGER_POS    28
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_3_TX_BUF_TRIGGER_BIT    ((uint32_t)0x08000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_3_TX_BUF_TRIGGER_POS    27
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_2_TX_BUF_TRIGGER_BIT    ((uint32_t)0x04000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_2_TX_BUF_TRIGGER_POS    26
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_1_TX_BUF_TRIGGER_BIT    ((uint32_t)0x02000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_1_TX_BUF_TRIGGER_POS    25
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_0_TX_BUF_TRIGGER_BIT    ((uint32_t)0x01000000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_0_TX_BUF_TRIGGER_POS    24
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_HTP_TX_TRIGGER_BIT    ((uint32_t)0x00001000)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_HTP_TX_TRIGGER_POS    12
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_HCCA_TX_TRIGGER_BIT    ((uint32_t)0x00000800)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_HCCA_TX_TRIGGER_POS    11
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_BCN_TX_TRIGGER_BIT    ((uint32_t)0x00000400)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_BCN_TX_TRIGGER_POS    10
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_3_TX_TRIGGER_BIT    ((uint32_t)0x00000200)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_3_TX_TRIGGER_POS    9
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_2_TX_TRIGGER_BIT    ((uint32_t)0x00000100)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_2_TX_TRIGGER_POS    8
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_1_TX_TRIGGER_BIT    ((uint32_t)0x00000080)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_1_TX_TRIGGER_POS    7
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_0_TX_TRIGGER_BIT    ((uint32_t)0x00000040)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_0_TX_TRIGGER_POS    6
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_TXOP_COMPLETE_BIT    ((uint32_t)0x00000020)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_TXOP_COMPLETE_POS    5
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_RD_TX_TRIGGER_BIT    ((uint32_t)0x00000010)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_RD_TX_TRIGGER_POS    4
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_TX_ABORT_BIT    ((uint32_t)0x00000008)
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_TX_ABORT_POS    3

#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_HTP_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_BCN_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_3_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_2_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_1_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_0_TX_BUF_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_HTP_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_HCCA_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_BCN_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_3_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_2_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_1_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_AC_0_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_TXOP_COMPLETE_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_RD_TX_TRIGGER_RST    0x0
#define MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_TX_ABORT_RST    0x0

__INLINE void mac_hw0_mu0_tx_int_event_en_umac_pack(uint8_t htp_tx_buf_trigger, uint8_t bcn_tx_buf_trigger, uint8_t ac_3_tx_buf_trigger, uint8_t ac_2_tx_buf_trigger, uint8_t ac_1_tx_buf_trigger, uint8_t ac_0_tx_buf_trigger, uint8_t htp_tx_trigger, uint8_t hcca_tx_trigger, uint8_t bcn_tx_trigger, uint8_t ac_3_tx_trigger, uint8_t ac_2_tx_trigger, uint8_t ac_1_tx_trigger, uint8_t ac_0_tx_trigger, uint8_t txop_complete, uint8_t rd_tx_trigger, uint8_t tx_abort)
{
	ASSERT_ERR((((uint32_t)htp_tx_buf_trigger << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)bcn_tx_buf_trigger << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_tx_buf_trigger << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_tx_buf_trigger << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_tx_buf_trigger << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_tx_buf_trigger << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)htp_tx_trigger << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)hcca_tx_trigger << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)bcn_tx_trigger << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)ac_3_tx_trigger << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)ac_2_tx_trigger << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)ac_1_tx_trigger << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)ac_0_tx_trigger << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)txop_complete << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)rd_tx_trigger << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)tx_abort << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR,  ((uint32_t)htp_tx_buf_trigger << 29) |((uint32_t)bcn_tx_buf_trigger << 28) |((uint32_t)ac_3_tx_buf_trigger << 27) |((uint32_t)ac_2_tx_buf_trigger << 26) |((uint32_t)ac_1_tx_buf_trigger << 25) |((uint32_t)ac_0_tx_buf_trigger << 24) |((uint32_t)htp_tx_trigger << 12) |((uint32_t)hcca_tx_trigger << 11) |((uint32_t)bcn_tx_trigger << 10) |((uint32_t)ac_3_tx_trigger << 9) |((uint32_t)ac_2_tx_trigger << 8) |((uint32_t)ac_1_tx_trigger << 7) |((uint32_t)ac_0_tx_trigger << 6) |((uint32_t)txop_complete << 5) |((uint32_t)rd_tx_trigger << 4) |((uint32_t)tx_abort << 3));
}

__INLINE void mac_hw0_mu0_tx_int_event_en_umac_unpack(uint8_t* htp_tx_buf_trigger, uint8_t* bcn_tx_buf_trigger, uint8_t* ac_3_tx_buf_trigger, uint8_t* ac_2_tx_buf_trigger, uint8_t* ac_1_tx_buf_trigger, uint8_t* ac_0_tx_buf_trigger, uint8_t* htp_tx_trigger, uint8_t* hcca_tx_trigger, uint8_t* bcn_tx_trigger, uint8_t* ac_3_tx_trigger, uint8_t* ac_2_tx_trigger, uint8_t* ac_1_tx_trigger, uint8_t* ac_0_tx_trigger, uint8_t* txop_complete, uint8_t* rd_tx_trigger, uint8_t* tx_abort)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);

	*htp_tx_buf_trigger = (localVal & ((uint32_t)0x20000000)) >>  29;
	*bcn_tx_buf_trigger = (localVal & ((uint32_t)0x10000000)) >>  28;
	*ac_3_tx_buf_trigger = (localVal & ((uint32_t)0x08000000)) >>  27;
	*ac_2_tx_buf_trigger = (localVal & ((uint32_t)0x04000000)) >>  26;
	*ac_1_tx_buf_trigger = (localVal & ((uint32_t)0x02000000)) >>  25;
	*ac_0_tx_buf_trigger = (localVal & ((uint32_t)0x01000000)) >>  24;
	*htp_tx_trigger = (localVal & ((uint32_t)0x00001000)) >>  12;
	*hcca_tx_trigger = (localVal & ((uint32_t)0x00000800)) >>  11;
	*bcn_tx_trigger = (localVal & ((uint32_t)0x00000400)) >>  10;
	*ac_3_tx_trigger = (localVal & ((uint32_t)0x00000200)) >>  9;
	*ac_2_tx_trigger = (localVal & ((uint32_t)0x00000100)) >>  8;
	*ac_1_tx_trigger = (localVal & ((uint32_t)0x00000080)) >>  7;
	*ac_0_tx_trigger = (localVal & ((uint32_t)0x00000040)) >>  6;
	*txop_complete = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rd_tx_trigger = (localVal & ((uint32_t)0x00000010)) >>  4;
	*tx_abort = (localVal & ((uint32_t)0x00000008)) >>  3;
}

__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_umac_htp_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_umac_htp_tx_buf_trigger_setf(uint8_t htptxbuftrigger)
{
	ASSERT_ERR((((uint32_t)htptxbuftrigger << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)htptxbuftrigger <<29));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_umac_bcn_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_umac_bcn_tx_buf_trigger_setf(uint8_t bcntxbuftrigger)
{
	ASSERT_ERR((((uint32_t)bcntxbuftrigger << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)bcntxbuftrigger <<28));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_umac_ac_3_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_umac_ac_3_tx_buf_trigger_setf(uint8_t ac3txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac3txbuftrigger << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)ac3txbuftrigger <<27));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_umac_ac_2_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_umac_ac_2_tx_buf_trigger_setf(uint8_t ac2txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac2txbuftrigger << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)ac2txbuftrigger <<26));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_umac_ac_1_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_umac_ac_1_tx_buf_trigger_setf(uint8_t ac1txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac1txbuftrigger << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)ac1txbuftrigger <<25));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_umac_ac_0_tx_buf_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_umac_ac_0_tx_buf_trigger_setf(uint8_t ac0txbuftrigger)
{
	ASSERT_ERR((((uint32_t)ac0txbuftrigger << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)ac0txbuftrigger <<24));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_umac_htp_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_umac_htp_tx_trigger_setf(uint8_t htptxtrigger)
{
	ASSERT_ERR((((uint32_t)htptxtrigger << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)htptxtrigger <<12));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_umac_hcca_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_umac_hcca_tx_trigger_setf(uint8_t hccatxtrigger)
{
	ASSERT_ERR((((uint32_t)hccatxtrigger << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)hccatxtrigger <<11));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_umac_bcn_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_umac_bcn_tx_trigger_setf(uint8_t bcntxtrigger)
{
	ASSERT_ERR((((uint32_t)bcntxtrigger << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)bcntxtrigger <<10));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_umac_ac_3_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_umac_ac_3_tx_trigger_setf(uint8_t ac3txtrigger)
{
	ASSERT_ERR((((uint32_t)ac3txtrigger << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)ac3txtrigger <<9));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_umac_ac_2_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_umac_ac_2_tx_trigger_setf(uint8_t ac2txtrigger)
{
	ASSERT_ERR((((uint32_t)ac2txtrigger << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)ac2txtrigger <<8));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_umac_ac_1_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_umac_ac_1_tx_trigger_setf(uint8_t ac1txtrigger)
{
	ASSERT_ERR((((uint32_t)ac1txtrigger << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)ac1txtrigger <<7));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_umac_ac_0_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_umac_ac_0_tx_trigger_setf(uint8_t ac0txtrigger)
{
	ASSERT_ERR((((uint32_t)ac0txtrigger << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)ac0txtrigger <<6));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_umac_txop_complete_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_umac_txop_complete_setf(uint8_t txopcomplete)
{
	ASSERT_ERR((((uint32_t)txopcomplete << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)txopcomplete <<5));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_umac_rd_tx_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_umac_rd_tx_trigger_setf(uint8_t rdtxtrigger)
{
	ASSERT_ERR((((uint32_t)rdtxtrigger << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)rdtxtrigger <<4));
}
__INLINE uint8_t mac_hw0_mu0_tx_int_event_en_umac_tx_abort_getf(void)
{
	uint32_t localVal = REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void mac_hw0_mu0_tx_int_event_en_umac_tx_abort_setf(uint8_t txabort)
{
	ASSERT_ERR((((uint32_t)txabort << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR, (REG_PL_RD(MAC_HW0_MU0_TX_INT_EVENT_EN_UMAC_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)txabort <<3));
}
/**
 * @brief MIB_TABLE register definition
 *  MIB table register description
 *  1024 memory size
 * </pre>
 */
#define MAC_HW0_MU0_MIB_TABLE_ADDR        (REG_MAC_HW0_MU0_BASE_ADDR+0x00000800)
#define MAC_HW0_MU0_MIB_TABLE_OFFSET      0x00000800
#define MAC_HW0_MU0_MIB_TABLE_SIZE        0x00000400
#define MAC_HW0_MU0_MIB_TABLE_END_ADDR    (MAC_HW0_MU0_MIB_TABLE_ADDR + MAC_HW0_MU0_MIB_TABLE_SIZE - 1)


#undef DBG_FILEID
#endif //_REG_MAC_HW0_MU0_H_
