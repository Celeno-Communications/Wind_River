#ifndef _REG_PCIE_WRAP_H_
#define _REG_PCIE_WRAP_H_

#include <stdint.h>
#include "_reg_pcie_wrap.h"
#include "compiler.h"
#include "arch.h"
#include "reg_access.h"

#define DBG_FILEID __REG_PCIE_WRAP__H__FILEID__

#define REG_PCIE_WRAP_COUNT  226


/**
 * @brief PCIEW_U_0_LLI_BASE register definition
 *  LLI base address for channel U0 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_0_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000000)
#define PCIE_WRAP_PCIEW_U_0_LLI_BASE_OFFSET      0x00000000
#define PCIE_WRAP_PCIEW_U_0_LLI_BASE_INDEX       0x00000000
#define PCIE_WRAP_PCIEW_U_0_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_0_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_0_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_u_0_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_0_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_0_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_0_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_0_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_0_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_0_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_0_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_0_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_0_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_U_1_LLI_BASE register definition
 *  LLI base address for channel U1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_1_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000004)
#define PCIE_WRAP_PCIEW_U_1_LLI_BASE_OFFSET      0x00000004
#define PCIE_WRAP_PCIEW_U_1_LLI_BASE_INDEX       0x00000001
#define PCIE_WRAP_PCIEW_U_1_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_1_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_1_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_u_1_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_1_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_1_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_1_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_1_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_1_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_1_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_1_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_1_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_1_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_U_2_LLI_BASE register definition
 *  LLI base address for channel U2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_2_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000008)
#define PCIE_WRAP_PCIEW_U_2_LLI_BASE_OFFSET      0x00000008
#define PCIE_WRAP_PCIEW_U_2_LLI_BASE_INDEX       0x00000002
#define PCIE_WRAP_PCIEW_U_2_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_2_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_2_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_u_2_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_2_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_2_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_2_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_2_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_2_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_2_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_2_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_2_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_2_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_U_3_LLI_BASE register definition
 *  LLI base address for channel U3 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_3_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000000C)
#define PCIE_WRAP_PCIEW_U_3_LLI_BASE_OFFSET      0x0000000C
#define PCIE_WRAP_PCIEW_U_3_LLI_BASE_INDEX       0x00000003
#define PCIE_WRAP_PCIEW_U_3_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_3_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_3_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_u_3_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_3_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_3_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_3_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_3_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_3_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_3_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_3_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_3_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_3_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_U_4_LLI_BASE register definition
 *  LLI base address for channel U4 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_4_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000010)
#define PCIE_WRAP_PCIEW_U_4_LLI_BASE_OFFSET      0x00000010
#define PCIE_WRAP_PCIEW_U_4_LLI_BASE_INDEX       0x00000004
#define PCIE_WRAP_PCIEW_U_4_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_4_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_4_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_u_4_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_4_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_4_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_4_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_4_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_4_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_4_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_4_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_4_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_4_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_U_5_LLI_BASE register definition
 *  LLI base address for channel U5 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_5_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000014)
#define PCIE_WRAP_PCIEW_U_5_LLI_BASE_OFFSET      0x00000014
#define PCIE_WRAP_PCIEW_U_5_LLI_BASE_INDEX       0x00000005
#define PCIE_WRAP_PCIEW_U_5_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_5_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_5_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_u_5_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_5_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_5_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_5_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_5_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_5_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_5_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_5_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_5_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_5_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_U_6_LLI_BASE register definition
 *  LLI base address for channel U6 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_6_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000018)
#define PCIE_WRAP_PCIEW_U_6_LLI_BASE_OFFSET      0x00000018
#define PCIE_WRAP_PCIEW_U_6_LLI_BASE_INDEX       0x00000006
#define PCIE_WRAP_PCIEW_U_6_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_6_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_6_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_u_6_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_6_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_6_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_6_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_6_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_6_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_6_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_6_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_6_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_6_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_U_7_LLI_BASE register definition
 *  LLI base address for channel U7 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_7_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000001C)
#define PCIE_WRAP_PCIEW_U_7_LLI_BASE_OFFSET      0x0000001C
#define PCIE_WRAP_PCIEW_U_7_LLI_BASE_INDEX       0x00000007
#define PCIE_WRAP_PCIEW_U_7_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_7_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_7_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_u_7_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_7_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_7_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_7_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_7_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_7_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_7_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_U_8_LLI_BASE register definition
 *  LLI base address for channel U8 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_8_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000020)
#define PCIE_WRAP_PCIEW_U_8_LLI_BASE_OFFSET      0x00000020
#define PCIE_WRAP_PCIEW_U_8_LLI_BASE_INDEX       0x00000008
#define PCIE_WRAP_PCIEW_U_8_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_8_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_8_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_u_8_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_8_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_8_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_8_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_8_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_8_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_8_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_8_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_8_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_8_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_U_9_LLI_BASE register definition
 *  LLI base address for channel U9 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_9_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000024)
#define PCIE_WRAP_PCIEW_U_9_LLI_BASE_OFFSET      0x00000024
#define PCIE_WRAP_PCIEW_U_9_LLI_BASE_INDEX       0x00000009
#define PCIE_WRAP_PCIEW_U_9_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_9_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_9_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_u_9_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_9_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_9_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_9_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_9_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_9_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_9_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_9_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_9_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_9_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_U_10_LLI_BASE register definition
 *  LLI base address for channel U10 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_10_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000028)
#define PCIE_WRAP_PCIEW_U_10_LLI_BASE_OFFSET      0x00000028
#define PCIE_WRAP_PCIEW_U_10_LLI_BASE_INDEX       0x0000000A
#define PCIE_WRAP_PCIEW_U_10_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_10_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_10_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_u_10_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_10_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_10_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_10_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_10_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_10_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_10_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_10_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_10_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_10_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_U_11_LLI_BASE register definition
 *  LLI base address for channel U11 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_11_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000002C)
#define PCIE_WRAP_PCIEW_U_11_LLI_BASE_OFFSET      0x0000002C
#define PCIE_WRAP_PCIEW_U_11_LLI_BASE_INDEX       0x0000000B
#define PCIE_WRAP_PCIEW_U_11_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_11_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_11_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_u_11_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_11_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_11_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_11_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_11_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_11_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_11_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_11_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_11_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_11_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_U_12_LLI_BASE register definition
 *  LLI base address for channel U12 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_12_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000030)
#define PCIE_WRAP_PCIEW_U_12_LLI_BASE_OFFSET      0x00000030
#define PCIE_WRAP_PCIEW_U_12_LLI_BASE_INDEX       0x0000000C
#define PCIE_WRAP_PCIEW_U_12_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_12_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_12_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_u_12_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_12_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_12_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_12_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_12_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_12_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_12_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_12_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_12_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_12_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_U_13_LLI_BASE register definition
 *  LLI base address for channel U13 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_13_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000034)
#define PCIE_WRAP_PCIEW_U_13_LLI_BASE_OFFSET      0x00000034
#define PCIE_WRAP_PCIEW_U_13_LLI_BASE_INDEX       0x0000000D
#define PCIE_WRAP_PCIEW_U_13_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_13_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_13_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_u_13_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_13_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_13_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_13_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_13_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_13_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_13_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_13_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_13_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_13_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_U_14_LLI_BASE register definition
 *  LLI base address for channel U14 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_14_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000038)
#define PCIE_WRAP_PCIEW_U_14_LLI_BASE_OFFSET      0x00000038
#define PCIE_WRAP_PCIEW_U_14_LLI_BASE_INDEX       0x0000000E
#define PCIE_WRAP_PCIEW_U_14_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_14_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_14_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_u_14_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_14_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_14_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_14_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_14_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_14_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_14_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_14_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_14_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_14_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_U_15_LLI_BASE register definition
 *  LLI base address for channel U15 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_15_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000003C)
#define PCIE_WRAP_PCIEW_U_15_LLI_BASE_OFFSET      0x0000003C
#define PCIE_WRAP_PCIEW_U_15_LLI_BASE_INDEX       0x0000000F
#define PCIE_WRAP_PCIEW_U_15_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_15_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_15_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_u_15_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_15_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_15_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_15_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_15_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_15_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_15_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_D_0_LLI_BASE register definition
 *  LLI base address for channel D0 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_0_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000040)
#define PCIE_WRAP_PCIEW_D_0_LLI_BASE_OFFSET      0x00000040
#define PCIE_WRAP_PCIEW_D_0_LLI_BASE_INDEX       0x00000010
#define PCIE_WRAP_PCIEW_D_0_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_0_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_0_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_d_0_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_0_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_0_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_0_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_0_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_0_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_0_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_0_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_0_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_0_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_D_1_LLI_BASE register definition
 *  LLI base address for channel D1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_1_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000044)
#define PCIE_WRAP_PCIEW_D_1_LLI_BASE_OFFSET      0x00000044
#define PCIE_WRAP_PCIEW_D_1_LLI_BASE_INDEX       0x00000011
#define PCIE_WRAP_PCIEW_D_1_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_1_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_1_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_d_1_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_1_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_1_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_1_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_1_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_1_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_1_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_1_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_1_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_1_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_D_2_LLI_BASE register definition
 *  LLI base address for channel D2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_2_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000048)
#define PCIE_WRAP_PCIEW_D_2_LLI_BASE_OFFSET      0x00000048
#define PCIE_WRAP_PCIEW_D_2_LLI_BASE_INDEX       0x00000012
#define PCIE_WRAP_PCIEW_D_2_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_2_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_2_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_d_2_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_2_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_2_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_2_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_2_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_2_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_2_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_2_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_2_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_2_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_D_3_LLI_BASE register definition
 *  LLI base address for channel D3 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_3_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000004C)
#define PCIE_WRAP_PCIEW_D_3_LLI_BASE_OFFSET      0x0000004C
#define PCIE_WRAP_PCIEW_D_3_LLI_BASE_INDEX       0x00000013
#define PCIE_WRAP_PCIEW_D_3_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_3_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_3_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_d_3_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_3_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_3_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_3_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_3_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_3_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_3_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_3_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_3_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_3_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_D_4_LLI_BASE register definition
 *  LLI base address for channel D4 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_4_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000050)
#define PCIE_WRAP_PCIEW_D_4_LLI_BASE_OFFSET      0x00000050
#define PCIE_WRAP_PCIEW_D_4_LLI_BASE_INDEX       0x00000014
#define PCIE_WRAP_PCIEW_D_4_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_4_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_4_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_d_4_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_4_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_4_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_4_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_4_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_4_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_4_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_4_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_4_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_4_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_D_5_LLI_BASE register definition
 *  LLI base address for channel D5 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_5_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000054)
#define PCIE_WRAP_PCIEW_D_5_LLI_BASE_OFFSET      0x00000054
#define PCIE_WRAP_PCIEW_D_5_LLI_BASE_INDEX       0x00000015
#define PCIE_WRAP_PCIEW_D_5_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_5_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_5_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_d_5_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_5_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_5_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_5_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_5_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_5_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_5_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_5_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_5_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_5_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_D_6_LLI_BASE register definition
 *  LLI base address for channel D6 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_6_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000058)
#define PCIE_WRAP_PCIEW_D_6_LLI_BASE_OFFSET      0x00000058
#define PCIE_WRAP_PCIEW_D_6_LLI_BASE_INDEX       0x00000016
#define PCIE_WRAP_PCIEW_D_6_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_6_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_6_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_d_6_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_6_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_6_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_6_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_6_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_6_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_6_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_6_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_6_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_6_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_D_7_LLI_BASE register definition
 *  LLI base address for channel D7 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_7_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000005C)
#define PCIE_WRAP_PCIEW_D_7_LLI_BASE_OFFSET      0x0000005C
#define PCIE_WRAP_PCIEW_D_7_LLI_BASE_INDEX       0x00000017
#define PCIE_WRAP_PCIEW_D_7_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_7_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_7_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_d_7_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_7_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_7_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_7_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_7_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_7_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_7_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_D_8_LLI_BASE register definition
 *  LLI base address for channel D8 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_8_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000060)
#define PCIE_WRAP_PCIEW_D_8_LLI_BASE_OFFSET      0x00000060
#define PCIE_WRAP_PCIEW_D_8_LLI_BASE_INDEX       0x00000018
#define PCIE_WRAP_PCIEW_D_8_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_8_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_8_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_d_8_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_8_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_8_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_8_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_8_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_8_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_8_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_8_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_8_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_8_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_D_9_LLI_BASE register definition
 *  LLI base address for channel D9 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_9_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000064)
#define PCIE_WRAP_PCIEW_D_9_LLI_BASE_OFFSET      0x00000064
#define PCIE_WRAP_PCIEW_D_9_LLI_BASE_INDEX       0x00000019
#define PCIE_WRAP_PCIEW_D_9_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_9_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_9_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_d_9_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_9_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_9_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_9_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_9_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_9_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_9_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_9_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_9_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_9_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_D_10_LLI_BASE register definition
 *  LLI base address for channel D10 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_10_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000068)
#define PCIE_WRAP_PCIEW_D_10_LLI_BASE_OFFSET      0x00000068
#define PCIE_WRAP_PCIEW_D_10_LLI_BASE_INDEX       0x0000001A
#define PCIE_WRAP_PCIEW_D_10_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_10_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_10_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_d_10_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_10_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_10_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_10_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_10_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_10_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_10_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_10_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_10_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_10_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_D_11_LLI_BASE register definition
 *  LLI base address for channel D11 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_11_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000006C)
#define PCIE_WRAP_PCIEW_D_11_LLI_BASE_OFFSET      0x0000006C
#define PCIE_WRAP_PCIEW_D_11_LLI_BASE_INDEX       0x0000001B
#define PCIE_WRAP_PCIEW_D_11_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_11_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_11_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_d_11_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_11_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_11_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_11_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_11_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_11_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_11_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_11_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_11_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_11_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_D_12_LLI_BASE register definition
 *  LLI base address for channel D12 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_12_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000070)
#define PCIE_WRAP_PCIEW_D_12_LLI_BASE_OFFSET      0x00000070
#define PCIE_WRAP_PCIEW_D_12_LLI_BASE_INDEX       0x0000001C
#define PCIE_WRAP_PCIEW_D_12_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_12_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_12_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_d_12_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_12_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_12_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_12_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_12_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_12_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_12_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_12_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_12_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_12_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_D_13_LLI_BASE register definition
 *  LLI base address for channel D13 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_13_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000074)
#define PCIE_WRAP_PCIEW_D_13_LLI_BASE_OFFSET      0x00000074
#define PCIE_WRAP_PCIEW_D_13_LLI_BASE_INDEX       0x0000001D
#define PCIE_WRAP_PCIEW_D_13_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_13_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_13_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_d_13_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_13_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_13_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_13_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_13_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_13_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_13_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_13_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_13_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_13_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_D_14_LLI_BASE register definition
 *  LLI base address for channel D14 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_14_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000078)
#define PCIE_WRAP_PCIEW_D_14_LLI_BASE_OFFSET      0x00000078
#define PCIE_WRAP_PCIEW_D_14_LLI_BASE_INDEX       0x0000001E
#define PCIE_WRAP_PCIEW_D_14_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_14_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_14_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_d_14_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_14_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_14_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_14_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_14_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_14_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_14_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_14_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_14_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_14_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_D_15_LLI_BASE register definition
 *  LLI base address for channel D15 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_15_LLI_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000007C)
#define PCIE_WRAP_PCIEW_D_15_LLI_BASE_OFFSET      0x0000007C
#define PCIE_WRAP_PCIEW_D_15_LLI_BASE_INDEX       0x0000001F
#define PCIE_WRAP_PCIEW_D_15_LLI_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_15_lli_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_15_LLI_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_d_15_lli_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_LLI_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_15_LLI_BASE_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_15_LLI_BASE_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_15_LLI_BASE_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_15_LLI_BASE_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_15_lli_base_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_LLI_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_15_lli_base_ptr_setf(uint32_t ptr)
{
	ASSERT_ERR((((uint32_t)ptr << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_LLI_BASE_ADDR, (uint32_t)ptr << 0);
}

/**
 * @brief PCIEW_U_0_LLI_NEXT register definition
 *  LLI next address for channel U0 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_0_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000080)
#define PCIE_WRAP_PCIEW_U_0_LLI_NEXT_OFFSET      0x00000080
#define PCIE_WRAP_PCIEW_U_0_LLI_NEXT_INDEX       0x00000020
#define PCIE_WRAP_PCIEW_U_0_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_0_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_0_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_0_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_0_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_0_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_0_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_0_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_0_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_1_LLI_NEXT register definition
 *  LLI next address for channel U1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_1_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000084)
#define PCIE_WRAP_PCIEW_U_1_LLI_NEXT_OFFSET      0x00000084
#define PCIE_WRAP_PCIEW_U_1_LLI_NEXT_INDEX       0x00000021
#define PCIE_WRAP_PCIEW_U_1_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_1_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_1_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_1_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_1_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_1_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_1_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_1_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_1_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_2_LLI_NEXT register definition
 *  LLI next address for channel U2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_2_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000088)
#define PCIE_WRAP_PCIEW_U_2_LLI_NEXT_OFFSET      0x00000088
#define PCIE_WRAP_PCIEW_U_2_LLI_NEXT_INDEX       0x00000022
#define PCIE_WRAP_PCIEW_U_2_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_2_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_2_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_2_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_2_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_2_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_2_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_2_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_2_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_3_LLI_NEXT register definition
 *  LLI next address for channel U3 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_3_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000008C)
#define PCIE_WRAP_PCIEW_U_3_LLI_NEXT_OFFSET      0x0000008C
#define PCIE_WRAP_PCIEW_U_3_LLI_NEXT_INDEX       0x00000023
#define PCIE_WRAP_PCIEW_U_3_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_3_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_3_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_3_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_3_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_3_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_3_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_3_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_3_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_4_LLI_NEXT register definition
 *  LLI next address for channel U4 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_4_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000090)
#define PCIE_WRAP_PCIEW_U_4_LLI_NEXT_OFFSET      0x00000090
#define PCIE_WRAP_PCIEW_U_4_LLI_NEXT_INDEX       0x00000024
#define PCIE_WRAP_PCIEW_U_4_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_4_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_4_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_4_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_4_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_4_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_4_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_4_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_4_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_5_LLI_NEXT register definition
 *  LLI next address for channel U5 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_5_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000094)
#define PCIE_WRAP_PCIEW_U_5_LLI_NEXT_OFFSET      0x00000094
#define PCIE_WRAP_PCIEW_U_5_LLI_NEXT_INDEX       0x00000025
#define PCIE_WRAP_PCIEW_U_5_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_5_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_5_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_5_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_5_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_5_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_5_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_5_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_5_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_6_LLI_NEXT register definition
 *  LLI next address for channel U6 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_6_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000098)
#define PCIE_WRAP_PCIEW_U_6_LLI_NEXT_OFFSET      0x00000098
#define PCIE_WRAP_PCIEW_U_6_LLI_NEXT_INDEX       0x00000026
#define PCIE_WRAP_PCIEW_U_6_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_6_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_6_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_6_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_6_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_6_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_6_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_6_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_6_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_7_LLI_NEXT register definition
 *  LLI next address for channel U7 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_7_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000009C)
#define PCIE_WRAP_PCIEW_U_7_LLI_NEXT_OFFSET      0x0000009C
#define PCIE_WRAP_PCIEW_U_7_LLI_NEXT_INDEX       0x00000027
#define PCIE_WRAP_PCIEW_U_7_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_7_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_7_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_7_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_7_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_7_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_7_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_7_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_8_LLI_NEXT register definition
 *  LLI next address for channel U8 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_8_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000A0)
#define PCIE_WRAP_PCIEW_U_8_LLI_NEXT_OFFSET      0x000000A0
#define PCIE_WRAP_PCIEW_U_8_LLI_NEXT_INDEX       0x00000028
#define PCIE_WRAP_PCIEW_U_8_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_8_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_8_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_8_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_8_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_8_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_8_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_8_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_8_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_9_LLI_NEXT register definition
 *  LLI next address for channel U9 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_9_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000A4)
#define PCIE_WRAP_PCIEW_U_9_LLI_NEXT_OFFSET      0x000000A4
#define PCIE_WRAP_PCIEW_U_9_LLI_NEXT_INDEX       0x00000029
#define PCIE_WRAP_PCIEW_U_9_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_9_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_9_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_9_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_9_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_9_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_9_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_9_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_9_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_10_LLI_NEXT register definition
 *  LLI next address for channel U10 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_10_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000A8)
#define PCIE_WRAP_PCIEW_U_10_LLI_NEXT_OFFSET      0x000000A8
#define PCIE_WRAP_PCIEW_U_10_LLI_NEXT_INDEX       0x0000002A
#define PCIE_WRAP_PCIEW_U_10_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_10_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_10_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_10_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_10_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_10_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_10_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_10_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_10_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_11_LLI_NEXT register definition
 *  LLI next address for channel U11 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_11_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000AC)
#define PCIE_WRAP_PCIEW_U_11_LLI_NEXT_OFFSET      0x000000AC
#define PCIE_WRAP_PCIEW_U_11_LLI_NEXT_INDEX       0x0000002B
#define PCIE_WRAP_PCIEW_U_11_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_11_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_11_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_11_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_11_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_11_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_11_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_11_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_11_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_12_LLI_NEXT register definition
 *  LLI next address for channel U12 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_12_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000B0)
#define PCIE_WRAP_PCIEW_U_12_LLI_NEXT_OFFSET      0x000000B0
#define PCIE_WRAP_PCIEW_U_12_LLI_NEXT_INDEX       0x0000002C
#define PCIE_WRAP_PCIEW_U_12_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_12_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_12_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_12_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_12_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_12_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_12_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_12_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_12_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_13_LLI_NEXT register definition
 *  LLI next address for channel U13 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_13_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000B4)
#define PCIE_WRAP_PCIEW_U_13_LLI_NEXT_OFFSET      0x000000B4
#define PCIE_WRAP_PCIEW_U_13_LLI_NEXT_INDEX       0x0000002D
#define PCIE_WRAP_PCIEW_U_13_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_13_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_13_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_13_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_13_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_13_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_13_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_13_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_13_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_14_LLI_NEXT register definition
 *  LLI next address for channel U14 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_14_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000B8)
#define PCIE_WRAP_PCIEW_U_14_LLI_NEXT_OFFSET      0x000000B8
#define PCIE_WRAP_PCIEW_U_14_LLI_NEXT_INDEX       0x0000002E
#define PCIE_WRAP_PCIEW_U_14_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_14_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_14_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_14_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_14_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_14_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_14_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_14_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_14_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_15_LLI_NEXT register definition
 *  LLI next address for channel U15 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_15_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000BC)
#define PCIE_WRAP_PCIEW_U_15_LLI_NEXT_OFFSET      0x000000BC
#define PCIE_WRAP_PCIEW_U_15_LLI_NEXT_INDEX       0x0000002F
#define PCIE_WRAP_PCIEW_U_15_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_15_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_15_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_15_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_15_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_15_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_15_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_15_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_0_LLI_NEXT register definition
 *  LLI next address for channel D0 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_0_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000C0)
#define PCIE_WRAP_PCIEW_D_0_LLI_NEXT_OFFSET      0x000000C0
#define PCIE_WRAP_PCIEW_D_0_LLI_NEXT_INDEX       0x00000030
#define PCIE_WRAP_PCIEW_D_0_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_0_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_0_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_0_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_0_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_0_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_0_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_0_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_0_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_1_LLI_NEXT register definition
 *  LLI next address for channel D1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_1_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000C4)
#define PCIE_WRAP_PCIEW_D_1_LLI_NEXT_OFFSET      0x000000C4
#define PCIE_WRAP_PCIEW_D_1_LLI_NEXT_INDEX       0x00000031
#define PCIE_WRAP_PCIEW_D_1_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_1_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_1_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_1_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_1_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_1_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_1_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_1_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_1_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_2_LLI_NEXT register definition
 *  LLI next address for channel D2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_2_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000C8)
#define PCIE_WRAP_PCIEW_D_2_LLI_NEXT_OFFSET      0x000000C8
#define PCIE_WRAP_PCIEW_D_2_LLI_NEXT_INDEX       0x00000032
#define PCIE_WRAP_PCIEW_D_2_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_2_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_2_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_2_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_2_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_2_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_2_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_2_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_2_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_3_LLI_NEXT register definition
 *  LLI next address for channel D3 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_3_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000CC)
#define PCIE_WRAP_PCIEW_D_3_LLI_NEXT_OFFSET      0x000000CC
#define PCIE_WRAP_PCIEW_D_3_LLI_NEXT_INDEX       0x00000033
#define PCIE_WRAP_PCIEW_D_3_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_3_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_3_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_3_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_3_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_3_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_3_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_3_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_3_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_4_LLI_NEXT register definition
 *  LLI next address for channel D4 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_4_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000D0)
#define PCIE_WRAP_PCIEW_D_4_LLI_NEXT_OFFSET      0x000000D0
#define PCIE_WRAP_PCIEW_D_4_LLI_NEXT_INDEX       0x00000034
#define PCIE_WRAP_PCIEW_D_4_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_4_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_4_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_4_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_4_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_4_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_4_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_4_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_4_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_5_LLI_NEXT register definition
 *  LLI next address for channel D5 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_5_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000D4)
#define PCIE_WRAP_PCIEW_D_5_LLI_NEXT_OFFSET      0x000000D4
#define PCIE_WRAP_PCIEW_D_5_LLI_NEXT_INDEX       0x00000035
#define PCIE_WRAP_PCIEW_D_5_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_5_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_5_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_5_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_5_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_5_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_5_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_5_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_5_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_6_LLI_NEXT register definition
 *  LLI next address for channel D6 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_6_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000D8)
#define PCIE_WRAP_PCIEW_D_6_LLI_NEXT_OFFSET      0x000000D8
#define PCIE_WRAP_PCIEW_D_6_LLI_NEXT_INDEX       0x00000036
#define PCIE_WRAP_PCIEW_D_6_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_6_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_6_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_6_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_6_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_6_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_6_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_6_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_6_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_7_LLI_NEXT register definition
 *  LLI next address for channel D7 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_7_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000DC)
#define PCIE_WRAP_PCIEW_D_7_LLI_NEXT_OFFSET      0x000000DC
#define PCIE_WRAP_PCIEW_D_7_LLI_NEXT_INDEX       0x00000037
#define PCIE_WRAP_PCIEW_D_7_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_7_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_7_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_7_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_7_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_7_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_7_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_7_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_8_LLI_NEXT register definition
 *  LLI next address for channel D8 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_8_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000E0)
#define PCIE_WRAP_PCIEW_D_8_LLI_NEXT_OFFSET      0x000000E0
#define PCIE_WRAP_PCIEW_D_8_LLI_NEXT_INDEX       0x00000038
#define PCIE_WRAP_PCIEW_D_8_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_8_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_8_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_8_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_8_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_8_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_8_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_8_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_8_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_9_LLI_NEXT register definition
 *  LLI next address for channel D9 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_9_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000E4)
#define PCIE_WRAP_PCIEW_D_9_LLI_NEXT_OFFSET      0x000000E4
#define PCIE_WRAP_PCIEW_D_9_LLI_NEXT_INDEX       0x00000039
#define PCIE_WRAP_PCIEW_D_9_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_9_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_9_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_9_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_9_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_9_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_9_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_9_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_9_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_10_LLI_NEXT register definition
 *  LLI next address for channel D10 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_10_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000E8)
#define PCIE_WRAP_PCIEW_D_10_LLI_NEXT_OFFSET      0x000000E8
#define PCIE_WRAP_PCIEW_D_10_LLI_NEXT_INDEX       0x0000003A
#define PCIE_WRAP_PCIEW_D_10_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_10_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_10_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_10_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_10_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_10_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_10_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_10_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_10_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_11_LLI_NEXT register definition
 *  LLI next address for channel D11 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_11_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000EC)
#define PCIE_WRAP_PCIEW_D_11_LLI_NEXT_OFFSET      0x000000EC
#define PCIE_WRAP_PCIEW_D_11_LLI_NEXT_INDEX       0x0000003B
#define PCIE_WRAP_PCIEW_D_11_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_11_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_11_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_11_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_11_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_11_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_11_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_11_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_11_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_12_LLI_NEXT register definition
 *  LLI next address for channel D12 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_12_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000F0)
#define PCIE_WRAP_PCIEW_D_12_LLI_NEXT_OFFSET      0x000000F0
#define PCIE_WRAP_PCIEW_D_12_LLI_NEXT_INDEX       0x0000003C
#define PCIE_WRAP_PCIEW_D_12_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_12_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_12_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_12_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_12_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_12_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_12_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_12_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_12_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_13_LLI_NEXT register definition
 *  LLI next address for channel D13 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_13_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000F4)
#define PCIE_WRAP_PCIEW_D_13_LLI_NEXT_OFFSET      0x000000F4
#define PCIE_WRAP_PCIEW_D_13_LLI_NEXT_INDEX       0x0000003D
#define PCIE_WRAP_PCIEW_D_13_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_13_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_13_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_13_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_13_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_13_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_13_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_13_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_13_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_14_LLI_NEXT register definition
 *  LLI next address for channel D14 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_14_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000F8)
#define PCIE_WRAP_PCIEW_D_14_LLI_NEXT_OFFSET      0x000000F8
#define PCIE_WRAP_PCIEW_D_14_LLI_NEXT_INDEX       0x0000003E
#define PCIE_WRAP_PCIEW_D_14_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_14_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_14_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_14_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_14_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_14_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_14_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_14_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_14_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_15_LLI_NEXT register definition
 *  LLI next address for channel D15 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_15_LLI_NEXT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000000FC)
#define PCIE_WRAP_PCIEW_D_15_LLI_NEXT_OFFSET      0x000000FC
#define PCIE_WRAP_PCIEW_D_15_LLI_NEXT_INDEX       0x0000003F
#define PCIE_WRAP_PCIEW_D_15_LLI_NEXT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_15_lli_next_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_15_LLI_NEXT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_15_LLI_NEXT_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_15_LLI_NEXT_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_15_LLI_NEXT_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_15_LLI_NEXT_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_15_lli_next_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_LLI_NEXT_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_0_LLI_CTL register definition
 *  LLI control register for channel U0 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000100)
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_OFFSET      0x00000100
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_INDEX       0x00000040
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_0_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_0_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_u_0_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_0_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_U_0_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_u_0_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_0_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_u_0_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_0_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_u_0_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_0_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_u_0_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_0_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_u_0_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_0_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_u_0_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_0_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_u_0_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_0_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_0_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_u_0_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_0_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_0_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_0_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_0_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_U_1_LLI_CTL register definition
 *  LLI control register for channel U1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000104)
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_OFFSET      0x00000104
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_INDEX       0x00000041
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_1_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_1_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_u_1_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_1_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_U_1_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_u_1_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_1_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_u_1_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_1_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_u_1_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_1_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_u_1_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_1_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_u_1_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_1_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_u_1_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_1_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_u_1_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_1_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_1_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_u_1_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_1_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_1_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_1_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_1_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_U_2_LLI_CTL register definition
 *  LLI control register for channel U2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000108)
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_OFFSET      0x00000108
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_INDEX       0x00000042
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_2_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_2_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_u_2_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_2_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_U_2_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_u_2_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_2_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_u_2_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_2_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_u_2_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_2_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_u_2_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_2_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_u_2_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_2_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_u_2_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_2_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_u_2_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_2_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_2_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_u_2_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_2_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_2_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_2_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_2_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_U_3_LLI_CTL register definition
 *  LLI control register for channel U3 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000010C)
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_OFFSET      0x0000010C
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_INDEX       0x00000043
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_3_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_3_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_u_3_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_3_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_U_3_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_u_3_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_3_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_u_3_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_3_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_u_3_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_3_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_u_3_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_3_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_u_3_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_3_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_u_3_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_3_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_u_3_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_3_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_3_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_u_3_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_3_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_3_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_3_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_3_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_U_4_LLI_CTL register definition
 *  LLI control register for channel U4 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000110)
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_OFFSET      0x00000110
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_INDEX       0x00000044
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_4_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_4_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_u_4_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_4_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_U_4_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_u_4_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_4_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_u_4_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_4_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_u_4_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_4_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_u_4_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_4_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_u_4_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_4_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_u_4_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_4_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_u_4_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_4_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_4_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_u_4_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_4_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_4_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_4_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_4_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_U_5_LLI_CTL register definition
 *  LLI control register for channel U5 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000114)
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_OFFSET      0x00000114
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_INDEX       0x00000045
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_5_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_5_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_u_5_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_5_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_U_5_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_u_5_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_5_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_u_5_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_5_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_u_5_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_5_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_u_5_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_5_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_u_5_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_5_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_u_5_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_5_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_u_5_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_5_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_5_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_u_5_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_5_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_5_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_5_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_5_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_U_6_LLI_CTL register definition
 *  LLI control register for channel U6 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000118)
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_OFFSET      0x00000118
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_INDEX       0x00000046
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_6_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_6_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_u_6_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_6_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_U_6_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_u_6_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_6_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_u_6_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_6_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_u_6_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_6_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_u_6_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_6_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_u_6_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_6_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_u_6_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_6_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_u_6_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_6_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_6_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_u_6_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_6_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_6_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_6_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_6_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_U_7_LLI_CTL register definition
 *  LLI control register for channel U7 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000011C)
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_OFFSET      0x0000011C
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_INDEX       0x00000047
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_7_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_7_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_u_7_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_U_7_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_u_7_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_u_7_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_u_7_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_u_7_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_u_7_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_u_7_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_u_7_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_7_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_u_7_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_7_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_7_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_U_8_LLI_CTL register definition
 *  LLI control register for channel U8 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000120)
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_OFFSET      0x00000120
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_INDEX       0x00000048
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_8_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_8_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_u_8_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_8_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_U_8_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_u_8_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_8_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_u_8_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_8_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_u_8_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_8_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_u_8_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_8_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_u_8_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_8_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_u_8_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_8_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_u_8_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_8_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_8_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_u_8_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_8_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_8_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_8_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_8_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_U_9_LLI_CTL register definition
 *  LLI control register for channel U9 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000124)
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_OFFSET      0x00000124
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_INDEX       0x00000049
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_9_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_9_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_u_9_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_9_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_U_9_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_u_9_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_9_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_u_9_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_9_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_u_9_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_9_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_u_9_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_9_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_u_9_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_9_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_u_9_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_9_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_u_9_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_9_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_9_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_u_9_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_9_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_9_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_9_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_9_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_U_10_LLI_CTL register definition
 *  LLI control register for channel U10 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000128)
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_OFFSET      0x00000128
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_INDEX       0x0000004A
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_10_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_10_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_u_10_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_10_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_U_10_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_u_10_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_10_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_u_10_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_10_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_u_10_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_10_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_u_10_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_10_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_u_10_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_10_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_u_10_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_10_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_u_10_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_10_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_10_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_u_10_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_10_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_10_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_10_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_10_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_U_11_LLI_CTL register definition
 *  LLI control register for channel U11 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000012C)
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_OFFSET      0x0000012C
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_INDEX       0x0000004B
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_11_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_11_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_u_11_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_11_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_U_11_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_u_11_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_11_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_u_11_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_11_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_u_11_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_11_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_u_11_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_11_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_u_11_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_11_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_u_11_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_11_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_u_11_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_11_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_11_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_u_11_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_11_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_11_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_11_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_11_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_U_12_LLI_CTL register definition
 *  LLI control register for channel U12 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000130)
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_OFFSET      0x00000130
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_INDEX       0x0000004C
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_12_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_12_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_u_12_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_12_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_U_12_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_u_12_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_12_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_u_12_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_12_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_u_12_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_12_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_u_12_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_12_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_u_12_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_12_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_u_12_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_12_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_u_12_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_12_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_12_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_u_12_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_12_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_12_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_12_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_12_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_U_13_LLI_CTL register definition
 *  LLI control register for channel U13 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000134)
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_OFFSET      0x00000134
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_INDEX       0x0000004D
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_13_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_13_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_u_13_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_13_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_U_13_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_u_13_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_13_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_u_13_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_13_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_u_13_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_13_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_u_13_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_13_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_u_13_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_13_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_u_13_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_13_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_u_13_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_13_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_13_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_u_13_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_13_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_13_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_13_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_13_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_U_14_LLI_CTL register definition
 *  LLI control register for channel U14 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000138)
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_OFFSET      0x00000138
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_INDEX       0x0000004E
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_14_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_14_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_u_14_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_14_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_U_14_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_u_14_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_14_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_u_14_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_14_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_u_14_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_14_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_u_14_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_14_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_u_14_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_14_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_u_14_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_14_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_u_14_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_14_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_14_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_u_14_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_14_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_14_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_14_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_14_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_U_15_LLI_CTL register definition
 *  LLI control register for channel U15 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000013C)
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_OFFSET      0x0000013C
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_INDEX       0x0000004F
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_15_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_15_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_u_15_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_U_15_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_u_15_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_u_15_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_u_15_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_u_15_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_u_15_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_u_15_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_u_15_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_15_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_u_15_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_15_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_15_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_D_0_LLI_CTL register definition
 *  LLI control register for channel D0 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000140)
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_OFFSET      0x00000140
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_INDEX       0x00000050
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_0_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_0_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_d_0_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_0_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_D_0_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_d_0_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_0_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_d_0_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_0_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_d_0_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_0_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_d_0_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_0_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_d_0_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_0_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_d_0_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_0_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_d_0_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_0_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_0_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_d_0_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_0_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_0_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_0_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_0_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_D_1_LLI_CTL register definition
 *  LLI control register for channel D1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000144)
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_OFFSET      0x00000144
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_INDEX       0x00000051
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_1_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_1_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_d_1_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_1_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_D_1_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_d_1_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_1_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_d_1_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_1_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_d_1_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_1_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_d_1_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_1_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_d_1_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_1_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_d_1_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_1_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_d_1_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_1_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_1_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_d_1_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_1_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_1_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_1_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_1_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_D_2_LLI_CTL register definition
 *  LLI control register for channel D2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000148)
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_OFFSET      0x00000148
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_INDEX       0x00000052
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_2_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_2_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_d_2_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_2_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_D_2_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_d_2_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_2_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_d_2_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_2_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_d_2_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_2_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_d_2_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_2_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_d_2_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_2_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_d_2_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_2_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_d_2_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_2_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_2_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_d_2_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_2_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_2_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_2_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_2_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_D_3_LLI_CTL register definition
 *  LLI control register for channel D3 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000014C)
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_OFFSET      0x0000014C
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_INDEX       0x00000053
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_3_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_3_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_d_3_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_3_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_D_3_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_d_3_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_3_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_d_3_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_3_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_d_3_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_3_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_d_3_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_3_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_d_3_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_3_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_d_3_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_3_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_d_3_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_3_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_3_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_d_3_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_3_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_3_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_3_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_3_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_D_4_LLI_CTL register definition
 *  LLI control register for channel D4 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000150)
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_OFFSET      0x00000150
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_INDEX       0x00000054
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_4_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_4_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_d_4_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_4_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_D_4_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_d_4_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_4_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_d_4_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_4_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_d_4_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_4_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_d_4_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_4_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_d_4_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_4_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_d_4_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_4_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_d_4_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_4_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_4_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_d_4_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_4_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_4_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_4_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_4_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_D_5_LLI_CTL register definition
 *  LLI control register for channel D5 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000154)
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_OFFSET      0x00000154
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_INDEX       0x00000055
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_5_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_5_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_d_5_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_5_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_D_5_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_d_5_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_5_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_d_5_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_5_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_d_5_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_5_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_d_5_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_5_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_d_5_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_5_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_d_5_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_5_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_d_5_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_5_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_5_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_d_5_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_5_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_5_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_5_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_5_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_D_6_LLI_CTL register definition
 *  LLI control register for channel D6 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000158)
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_OFFSET      0x00000158
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_INDEX       0x00000056
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_6_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_6_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_d_6_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_6_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_D_6_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_d_6_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_6_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_d_6_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_6_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_d_6_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_6_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_d_6_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_6_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_d_6_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_6_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_d_6_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_6_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_d_6_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_6_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_6_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_d_6_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_6_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_6_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_6_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_6_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_D_7_LLI_CTL register definition
 *  LLI control register for channel D7 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000015C)
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_OFFSET      0x0000015C
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_INDEX       0x00000057
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_7_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_7_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_d_7_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_D_7_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_d_7_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_d_7_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_d_7_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_d_7_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_d_7_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_d_7_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_d_7_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_7_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_d_7_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_7_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_7_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_D_8_LLI_CTL register definition
 *  LLI control register for channel D8 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000160)
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_OFFSET      0x00000160
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_INDEX       0x00000058
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_8_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_8_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_d_8_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_8_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_D_8_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_d_8_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_8_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_d_8_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_8_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_d_8_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_8_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_d_8_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_8_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_d_8_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_8_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_d_8_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_8_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_d_8_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_8_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_8_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_d_8_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_8_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_8_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_8_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_8_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_D_9_LLI_CTL register definition
 *  LLI control register for channel D9 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000164)
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_OFFSET      0x00000164
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_INDEX       0x00000059
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_9_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_9_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_d_9_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_9_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_D_9_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_d_9_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_9_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_d_9_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_9_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_d_9_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_9_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_d_9_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_9_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_d_9_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_9_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_d_9_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_9_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_d_9_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_9_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_9_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_d_9_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_9_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_9_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_9_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_9_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_D_10_LLI_CTL register definition
 *  LLI control register for channel D10 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000168)
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_OFFSET      0x00000168
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_INDEX       0x0000005A
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_10_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_10_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_d_10_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_10_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_D_10_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_d_10_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_10_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_d_10_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_10_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_d_10_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_10_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_d_10_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_10_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_d_10_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_10_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_d_10_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_10_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_d_10_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_10_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_10_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_d_10_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_10_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_10_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_10_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_10_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_D_11_LLI_CTL register definition
 *  LLI control register for channel D11 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000016C)
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_OFFSET      0x0000016C
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_INDEX       0x0000005B
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_11_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_11_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_d_11_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_11_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_D_11_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_d_11_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_11_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_d_11_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_11_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_d_11_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_11_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_d_11_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_11_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_d_11_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_11_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_d_11_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_11_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_d_11_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_11_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_11_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_d_11_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_11_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_11_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_11_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_11_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_D_12_LLI_CTL register definition
 *  LLI control register for channel D12 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000170)
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_OFFSET      0x00000170
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_INDEX       0x0000005C
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_12_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_12_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_d_12_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_12_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_D_12_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_d_12_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_12_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_d_12_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_12_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_d_12_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_12_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_d_12_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_12_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_d_12_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_12_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_d_12_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_12_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_d_12_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_12_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_12_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_d_12_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_12_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_12_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_12_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_12_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_D_13_LLI_CTL register definition
 *  LLI control register for channel D13 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000174)
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_OFFSET      0x00000174
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_INDEX       0x0000005D
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_13_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_13_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_d_13_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_13_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_D_13_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_d_13_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_13_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_d_13_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_13_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_d_13_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_13_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_d_13_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_13_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_d_13_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_13_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_d_13_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_13_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_d_13_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_13_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_13_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_d_13_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_13_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_13_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_13_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_13_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_D_14_LLI_CTL register definition
 *  LLI control register for channel D14 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000178)
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_OFFSET      0x00000178
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_INDEX       0x0000005E
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_14_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_14_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_d_14_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_14_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_D_14_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_d_14_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_14_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_d_14_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_14_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_d_14_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_14_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_d_14_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_14_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_d_14_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_14_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_d_14_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_14_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_d_14_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_14_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_14_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_d_14_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_14_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_14_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_14_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_14_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_D_15_LLI_CTL register definition
 *  LLI control register for channel D15 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 COUNTER                   0x0
 *    15:08 ACTIVE_PHY_CHANNELS       0x0
 *    04    ACTIVE                    0              
 *    01    ALT_NEXT_MODE             0              
 *    00    SPINLOCK                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000017C)
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_OFFSET      0x0000017C
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_INDEX       0x0000005F
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_15_lli_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_15_LLI_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_d_15_lli_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_LLI_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_COUNTER_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_COUNTER_LSB    16
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_COUNTER_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_ACTIVE_PHY_CHANNELS_MASK    ((uint32_t)0x0000FF00)
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_ACTIVE_PHY_CHANNELS_LSB    8
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_ACTIVE_PHY_CHANNELS_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_ACTIVE_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_ACTIVE_POS    4
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_ALT_NEXT_MODE_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_ALT_NEXT_MODE_POS    1
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_SPINLOCK_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_SPINLOCK_POS    0

#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_COUNTER_RST    0x0
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_ACTIVE_PHY_CHANNELS_RST    0x0
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_ACTIVE_RST    0x0
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_ALT_NEXT_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_D_15_LLI_CTL_SPINLOCK_RST    0x0

__INLINE void pcie_wrap_pciew_d_15_lli_ctl_pack(uint16_t counter, uint8_t active_phy_channels, uint8_t active, uint8_t alt_next_mode, uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)counter << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)active_phy_channels << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)active << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)alt_next_mode << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_LLI_CTL_ADDR,  ((uint32_t)counter << 16) |((uint32_t)active_phy_channels << 8) |((uint32_t)active << 4) |((uint32_t)alt_next_mode << 1) |((uint32_t)spinlock << 0));
}

__INLINE void pcie_wrap_pciew_d_15_lli_ctl_unpack(uint16_t* counter, uint8_t* active_phy_channels, uint8_t* active, uint8_t* alt_next_mode, uint8_t* spinlock)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_LLI_CTL_ADDR);

	*counter = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*active_phy_channels = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*active = (localVal & ((uint32_t)0x00000010)) >>  4;
	*alt_next_mode = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spinlock = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_d_15_lli_ctl_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_LLI_CTL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_d_15_lli_ctl_active_phy_channels_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_d_15_lli_ctl_active_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_d_15_lli_ctl_alt_next_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_d_15_lli_ctl_alt_next_mode_setf(uint8_t altnextmode)
{
	ASSERT_ERR((((uint32_t)altnextmode << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_15_LLI_CTL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)altnextmode <<1));
}
__INLINE uint8_t pcie_wrap_pciew_d_15_lli_ctl_spinlock_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_LLI_CTL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_15_lli_ctl_spinlock_setf(uint8_t spinlock)
{
	ASSERT_ERR((((uint32_t)spinlock << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_LLI_CTL_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_15_LLI_CTL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spinlock <<0));
}

/**
 * @brief PCIEW_U_0_LLI_DESC register definition
 *  LLI next descriptor address for channel U0 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_0_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000180)
#define PCIE_WRAP_PCIEW_U_0_LLI_DESC_OFFSET      0x00000180
#define PCIE_WRAP_PCIEW_U_0_LLI_DESC_INDEX       0x00000060
#define PCIE_WRAP_PCIEW_U_0_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_0_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_0_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_0_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_0_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_0_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_0_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_0_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_0_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_1_LLI_DESC register definition
 *  LLI next descriptor address for channel U1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_1_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000184)
#define PCIE_WRAP_PCIEW_U_1_LLI_DESC_OFFSET      0x00000184
#define PCIE_WRAP_PCIEW_U_1_LLI_DESC_INDEX       0x00000061
#define PCIE_WRAP_PCIEW_U_1_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_1_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_1_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_1_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_1_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_1_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_1_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_1_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_1_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_2_LLI_DESC register definition
 *  LLI next descriptor address for channel U2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_2_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000188)
#define PCIE_WRAP_PCIEW_U_2_LLI_DESC_OFFSET      0x00000188
#define PCIE_WRAP_PCIEW_U_2_LLI_DESC_INDEX       0x00000062
#define PCIE_WRAP_PCIEW_U_2_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_2_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_2_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_2_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_2_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_2_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_2_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_2_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_2_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_3_LLI_DESC register definition
 *  LLI next descriptor address for channel U3 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_3_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000018C)
#define PCIE_WRAP_PCIEW_U_3_LLI_DESC_OFFSET      0x0000018C
#define PCIE_WRAP_PCIEW_U_3_LLI_DESC_INDEX       0x00000063
#define PCIE_WRAP_PCIEW_U_3_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_3_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_3_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_3_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_3_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_3_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_3_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_3_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_3_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_4_LLI_DESC register definition
 *  LLI next descriptor address for channel U4 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_4_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000190)
#define PCIE_WRAP_PCIEW_U_4_LLI_DESC_OFFSET      0x00000190
#define PCIE_WRAP_PCIEW_U_4_LLI_DESC_INDEX       0x00000064
#define PCIE_WRAP_PCIEW_U_4_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_4_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_4_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_4_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_4_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_4_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_4_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_4_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_4_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_5_LLI_DESC register definition
 *  LLI next descriptor address for channel U5 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_5_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000194)
#define PCIE_WRAP_PCIEW_U_5_LLI_DESC_OFFSET      0x00000194
#define PCIE_WRAP_PCIEW_U_5_LLI_DESC_INDEX       0x00000065
#define PCIE_WRAP_PCIEW_U_5_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_5_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_5_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_5_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_5_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_5_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_5_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_5_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_5_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_6_LLI_DESC register definition
 *  LLI next descriptor address for channel U6 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_6_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000198)
#define PCIE_WRAP_PCIEW_U_6_LLI_DESC_OFFSET      0x00000198
#define PCIE_WRAP_PCIEW_U_6_LLI_DESC_INDEX       0x00000066
#define PCIE_WRAP_PCIEW_U_6_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_6_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_6_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_6_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_6_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_6_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_6_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_6_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_6_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_7_LLI_DESC register definition
 *  LLI next descriptor address for channel U7 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_7_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000019C)
#define PCIE_WRAP_PCIEW_U_7_LLI_DESC_OFFSET      0x0000019C
#define PCIE_WRAP_PCIEW_U_7_LLI_DESC_INDEX       0x00000067
#define PCIE_WRAP_PCIEW_U_7_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_7_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_7_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_7_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_7_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_7_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_7_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_7_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_8_LLI_DESC register definition
 *  LLI next descriptor address for channel U8 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_8_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001A0)
#define PCIE_WRAP_PCIEW_U_8_LLI_DESC_OFFSET      0x000001A0
#define PCIE_WRAP_PCIEW_U_8_LLI_DESC_INDEX       0x00000068
#define PCIE_WRAP_PCIEW_U_8_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_8_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_8_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_8_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_8_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_8_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_8_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_8_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_8_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_9_LLI_DESC register definition
 *  LLI next descriptor address for channel U9 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_9_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001A4)
#define PCIE_WRAP_PCIEW_U_9_LLI_DESC_OFFSET      0x000001A4
#define PCIE_WRAP_PCIEW_U_9_LLI_DESC_INDEX       0x00000069
#define PCIE_WRAP_PCIEW_U_9_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_9_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_9_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_9_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_9_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_9_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_9_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_9_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_9_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_10_LLI_DESC register definition
 *  LLI next descriptor address for channel U10 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_10_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001A8)
#define PCIE_WRAP_PCIEW_U_10_LLI_DESC_OFFSET      0x000001A8
#define PCIE_WRAP_PCIEW_U_10_LLI_DESC_INDEX       0x0000006A
#define PCIE_WRAP_PCIEW_U_10_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_10_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_10_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_10_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_10_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_10_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_10_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_10_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_10_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_11_LLI_DESC register definition
 *  LLI next descriptor address for channel U11 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_11_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001AC)
#define PCIE_WRAP_PCIEW_U_11_LLI_DESC_OFFSET      0x000001AC
#define PCIE_WRAP_PCIEW_U_11_LLI_DESC_INDEX       0x0000006B
#define PCIE_WRAP_PCIEW_U_11_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_11_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_11_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_11_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_11_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_11_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_11_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_11_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_11_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_12_LLI_DESC register definition
 *  LLI next descriptor address for channel U12 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_12_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001B0)
#define PCIE_WRAP_PCIEW_U_12_LLI_DESC_OFFSET      0x000001B0
#define PCIE_WRAP_PCIEW_U_12_LLI_DESC_INDEX       0x0000006C
#define PCIE_WRAP_PCIEW_U_12_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_12_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_12_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_12_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_12_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_12_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_12_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_12_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_12_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_13_LLI_DESC register definition
 *  LLI next descriptor address for channel U13 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_13_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001B4)
#define PCIE_WRAP_PCIEW_U_13_LLI_DESC_OFFSET      0x000001B4
#define PCIE_WRAP_PCIEW_U_13_LLI_DESC_INDEX       0x0000006D
#define PCIE_WRAP_PCIEW_U_13_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_13_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_13_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_13_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_13_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_13_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_13_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_13_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_13_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_14_LLI_DESC register definition
 *  LLI next descriptor address for channel U14 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_14_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001B8)
#define PCIE_WRAP_PCIEW_U_14_LLI_DESC_OFFSET      0x000001B8
#define PCIE_WRAP_PCIEW_U_14_LLI_DESC_INDEX       0x0000006E
#define PCIE_WRAP_PCIEW_U_14_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_14_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_14_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_14_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_14_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_14_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_14_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_14_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_14_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_U_15_LLI_DESC register definition
 *  LLI next descriptor address for channel U15 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_15_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001BC)
#define PCIE_WRAP_PCIEW_U_15_LLI_DESC_OFFSET      0x000001BC
#define PCIE_WRAP_PCIEW_U_15_LLI_DESC_INDEX       0x0000006F
#define PCIE_WRAP_PCIEW_U_15_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_15_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_15_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_15_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_15_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_U_15_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_15_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_15_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_0_LLI_DESC register definition
 *  LLI next descriptor address for channel D0 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_0_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001C0)
#define PCIE_WRAP_PCIEW_D_0_LLI_DESC_OFFSET      0x000001C0
#define PCIE_WRAP_PCIEW_D_0_LLI_DESC_INDEX       0x00000070
#define PCIE_WRAP_PCIEW_D_0_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_0_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_0_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_0_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_0_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_0_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_0_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_0_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_0_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_1_LLI_DESC register definition
 *  LLI next descriptor address for channel D1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_1_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001C4)
#define PCIE_WRAP_PCIEW_D_1_LLI_DESC_OFFSET      0x000001C4
#define PCIE_WRAP_PCIEW_D_1_LLI_DESC_INDEX       0x00000071
#define PCIE_WRAP_PCIEW_D_1_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_1_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_1_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_1_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_1_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_1_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_1_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_1_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_1_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_2_LLI_DESC register definition
 *  LLI next descriptor address for channel D2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_2_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001C8)
#define PCIE_WRAP_PCIEW_D_2_LLI_DESC_OFFSET      0x000001C8
#define PCIE_WRAP_PCIEW_D_2_LLI_DESC_INDEX       0x00000072
#define PCIE_WRAP_PCIEW_D_2_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_2_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_2_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_2_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_2_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_2_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_2_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_2_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_2_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_3_LLI_DESC register definition
 *  LLI next descriptor address for channel D3 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_3_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001CC)
#define PCIE_WRAP_PCIEW_D_3_LLI_DESC_OFFSET      0x000001CC
#define PCIE_WRAP_PCIEW_D_3_LLI_DESC_INDEX       0x00000073
#define PCIE_WRAP_PCIEW_D_3_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_3_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_3_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_3_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_3_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_3_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_3_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_3_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_3_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_4_LLI_DESC register definition
 *  LLI next descriptor address for channel D4 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_4_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001D0)
#define PCIE_WRAP_PCIEW_D_4_LLI_DESC_OFFSET      0x000001D0
#define PCIE_WRAP_PCIEW_D_4_LLI_DESC_INDEX       0x00000074
#define PCIE_WRAP_PCIEW_D_4_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_4_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_4_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_4_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_4_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_4_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_4_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_4_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_4_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_5_LLI_DESC register definition
 *  LLI next descriptor address for channel D5 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_5_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001D4)
#define PCIE_WRAP_PCIEW_D_5_LLI_DESC_OFFSET      0x000001D4
#define PCIE_WRAP_PCIEW_D_5_LLI_DESC_INDEX       0x00000075
#define PCIE_WRAP_PCIEW_D_5_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_5_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_5_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_5_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_5_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_5_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_5_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_5_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_5_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_6_LLI_DESC register definition
 *  LLI next descriptor address for channel D6 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_6_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001D8)
#define PCIE_WRAP_PCIEW_D_6_LLI_DESC_OFFSET      0x000001D8
#define PCIE_WRAP_PCIEW_D_6_LLI_DESC_INDEX       0x00000076
#define PCIE_WRAP_PCIEW_D_6_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_6_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_6_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_6_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_6_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_6_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_6_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_6_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_6_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_7_LLI_DESC register definition
 *  LLI next descriptor address for channel D7 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_7_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001DC)
#define PCIE_WRAP_PCIEW_D_7_LLI_DESC_OFFSET      0x000001DC
#define PCIE_WRAP_PCIEW_D_7_LLI_DESC_INDEX       0x00000077
#define PCIE_WRAP_PCIEW_D_7_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_7_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_7_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_7_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_7_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_7_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_7_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_7_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_8_LLI_DESC register definition
 *  LLI next descriptor address for channel D8 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_8_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001E0)
#define PCIE_WRAP_PCIEW_D_8_LLI_DESC_OFFSET      0x000001E0
#define PCIE_WRAP_PCIEW_D_8_LLI_DESC_INDEX       0x00000078
#define PCIE_WRAP_PCIEW_D_8_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_8_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_8_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_8_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_8_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_8_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_8_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_8_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_8_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_9_LLI_DESC register definition
 *  LLI next descriptor address for channel D9 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_9_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001E4)
#define PCIE_WRAP_PCIEW_D_9_LLI_DESC_OFFSET      0x000001E4
#define PCIE_WRAP_PCIEW_D_9_LLI_DESC_INDEX       0x00000079
#define PCIE_WRAP_PCIEW_D_9_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_9_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_9_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_9_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_9_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_9_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_9_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_9_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_9_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_10_LLI_DESC register definition
 *  LLI next descriptor address for channel D10 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_10_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001E8)
#define PCIE_WRAP_PCIEW_D_10_LLI_DESC_OFFSET      0x000001E8
#define PCIE_WRAP_PCIEW_D_10_LLI_DESC_INDEX       0x0000007A
#define PCIE_WRAP_PCIEW_D_10_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_10_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_10_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_10_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_10_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_10_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_10_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_10_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_10_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_11_LLI_DESC register definition
 *  LLI next descriptor address for channel D11 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_11_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001EC)
#define PCIE_WRAP_PCIEW_D_11_LLI_DESC_OFFSET      0x000001EC
#define PCIE_WRAP_PCIEW_D_11_LLI_DESC_INDEX       0x0000007B
#define PCIE_WRAP_PCIEW_D_11_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_11_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_11_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_11_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_11_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_11_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_11_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_11_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_11_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_12_LLI_DESC register definition
 *  LLI next descriptor address for channel D12 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_12_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001F0)
#define PCIE_WRAP_PCIEW_D_12_LLI_DESC_OFFSET      0x000001F0
#define PCIE_WRAP_PCIEW_D_12_LLI_DESC_INDEX       0x0000007C
#define PCIE_WRAP_PCIEW_D_12_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_12_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_12_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_12_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_12_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_12_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_12_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_12_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_12_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_13_LLI_DESC register definition
 *  LLI next descriptor address for channel D13 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_13_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001F4)
#define PCIE_WRAP_PCIEW_D_13_LLI_DESC_OFFSET      0x000001F4
#define PCIE_WRAP_PCIEW_D_13_LLI_DESC_INDEX       0x0000007D
#define PCIE_WRAP_PCIEW_D_13_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_13_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_13_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_13_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_13_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_13_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_13_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_13_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_13_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_14_LLI_DESC register definition
 *  LLI next descriptor address for channel D14 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_14_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001F8)
#define PCIE_WRAP_PCIEW_D_14_LLI_DESC_OFFSET      0x000001F8
#define PCIE_WRAP_PCIEW_D_14_LLI_DESC_INDEX       0x0000007E
#define PCIE_WRAP_PCIEW_D_14_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_14_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_14_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_14_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_14_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_14_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_14_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_14_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_14_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_D_15_LLI_DESC register definition
 *  LLI next descriptor address for channel D15 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 PTR                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_15_LLI_DESC_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000001FC)
#define PCIE_WRAP_PCIEW_D_15_LLI_DESC_OFFSET      0x000001FC
#define PCIE_WRAP_PCIEW_D_15_LLI_DESC_INDEX       0x0000007F
#define PCIE_WRAP_PCIEW_D_15_LLI_DESC_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_15_lli_desc_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_15_LLI_DESC_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_15_LLI_DESC_PTR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_15_LLI_DESC_PTR_LSB    0
#define PCIE_WRAP_PCIEW_D_15_LLI_DESC_PTR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_15_LLI_DESC_PTR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_15_lli_desc_ptr_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_LLI_DESC_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PCIEW_LLI_START register definition
 *  LLI start register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    START_D15                 0              
 *    30    START_D14                 0              
 *    29    START_D13                 0              
 *    28    START_D12                 0              
 *    27    START_D11                 0              
 *    26    START_D10                 0              
 *    25    START_D9                  0              
 *    24    START_D8                  0              
 *    23    START_D7                  0              
 *    22    START_D6                  0              
 *    21    START_D5                  0              
 *    20    START_D4                  0              
 *    19    START_D3                  0              
 *    18    START_D2                  0              
 *    17    START_D1                  0              
 *    16    START_D0                  0              
 *    15    START_U15                 0              
 *    14    START_U14                 0              
 *    13    START_U13                 0              
 *    12    START_U12                 0              
 *    11    START_U11                 0              
 *    10    START_U10                 0              
 *    09    START_U9                  0              
 *    08    START_U8                  0              
 *    07    START_U7                  0              
 *    06    START_U6                  0              
 *    05    START_U5                  0              
 *    04    START_U4                  0              
 *    03    START_U3                  0              
 *    02    START_U2                  0              
 *    01    START_U1                  0              
 *    00    START_U0                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_LLI_START_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000200)
#define PCIE_WRAP_PCIEW_LLI_START_OFFSET      0x00000200
#define PCIE_WRAP_PCIEW_LLI_START_INDEX       0x00000080
#define PCIE_WRAP_PCIEW_LLI_START_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_lli_start_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
}

__INLINE void pcie_wrap_pciew_lli_start_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_LLI_START_START_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_LLI_START_START_D_15_POS    31
#define PCIE_WRAP_PCIEW_LLI_START_START_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_LLI_START_START_D_14_POS    30
#define PCIE_WRAP_PCIEW_LLI_START_START_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_LLI_START_START_D_13_POS    29
#define PCIE_WRAP_PCIEW_LLI_START_START_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_LLI_START_START_D_12_POS    28
#define PCIE_WRAP_PCIEW_LLI_START_START_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_LLI_START_START_D_11_POS    27
#define PCIE_WRAP_PCIEW_LLI_START_START_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_LLI_START_START_D_10_POS    26
#define PCIE_WRAP_PCIEW_LLI_START_START_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_LLI_START_START_D_9_POS    25
#define PCIE_WRAP_PCIEW_LLI_START_START_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_LLI_START_START_D_8_POS    24
#define PCIE_WRAP_PCIEW_LLI_START_START_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_LLI_START_START_D_7_POS    23
#define PCIE_WRAP_PCIEW_LLI_START_START_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_LLI_START_START_D_6_POS    22
#define PCIE_WRAP_PCIEW_LLI_START_START_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_LLI_START_START_D_5_POS    21
#define PCIE_WRAP_PCIEW_LLI_START_START_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_LLI_START_START_D_4_POS    20
#define PCIE_WRAP_PCIEW_LLI_START_START_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_LLI_START_START_D_3_POS    19
#define PCIE_WRAP_PCIEW_LLI_START_START_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_LLI_START_START_D_2_POS    18
#define PCIE_WRAP_PCIEW_LLI_START_START_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_LLI_START_START_D_1_POS    17
#define PCIE_WRAP_PCIEW_LLI_START_START_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_LLI_START_START_D_0_POS    16
#define PCIE_WRAP_PCIEW_LLI_START_START_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_LLI_START_START_U_15_POS    15
#define PCIE_WRAP_PCIEW_LLI_START_START_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_LLI_START_START_U_14_POS    14
#define PCIE_WRAP_PCIEW_LLI_START_START_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_LLI_START_START_U_13_POS    13
#define PCIE_WRAP_PCIEW_LLI_START_START_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_LLI_START_START_U_12_POS    12
#define PCIE_WRAP_PCIEW_LLI_START_START_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_LLI_START_START_U_11_POS    11
#define PCIE_WRAP_PCIEW_LLI_START_START_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_LLI_START_START_U_10_POS    10
#define PCIE_WRAP_PCIEW_LLI_START_START_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_LLI_START_START_U_9_POS    9
#define PCIE_WRAP_PCIEW_LLI_START_START_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_LLI_START_START_U_8_POS    8
#define PCIE_WRAP_PCIEW_LLI_START_START_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_LLI_START_START_U_7_POS    7
#define PCIE_WRAP_PCIEW_LLI_START_START_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_LLI_START_START_U_6_POS    6
#define PCIE_WRAP_PCIEW_LLI_START_START_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_LLI_START_START_U_5_POS    5
#define PCIE_WRAP_PCIEW_LLI_START_START_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_LLI_START_START_U_4_POS    4
#define PCIE_WRAP_PCIEW_LLI_START_START_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_LLI_START_START_U_3_POS    3
#define PCIE_WRAP_PCIEW_LLI_START_START_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_LLI_START_START_U_2_POS    2
#define PCIE_WRAP_PCIEW_LLI_START_START_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_LLI_START_START_U_1_POS    1
#define PCIE_WRAP_PCIEW_LLI_START_START_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_LLI_START_START_U_0_POS    0

#define PCIE_WRAP_PCIEW_LLI_START_START_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_START_START_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_lli_start_pack(uint8_t start_d15, uint8_t start_d14, uint8_t start_d13, uint8_t start_d12, uint8_t start_d11, uint8_t start_d10, uint8_t start_d9, uint8_t start_d8, uint8_t start_d7, uint8_t start_d6, uint8_t start_d5, uint8_t start_d4, uint8_t start_d3, uint8_t start_d2, uint8_t start_d1, uint8_t start_d0, uint8_t start_u15, uint8_t start_u14, uint8_t start_u13, uint8_t start_u12, uint8_t start_u11, uint8_t start_u10, uint8_t start_u9, uint8_t start_u8, uint8_t start_u7, uint8_t start_u6, uint8_t start_u5, uint8_t start_u4, uint8_t start_u3, uint8_t start_u2, uint8_t start_u1, uint8_t start_u0)
{
	ASSERT_ERR((((uint32_t)start_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)start_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)start_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)start_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)start_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)start_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)start_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)start_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)start_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)start_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)start_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)start_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)start_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)start_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)start_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)start_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)start_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)start_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)start_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)start_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)start_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)start_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)start_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)start_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)start_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)start_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)start_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)start_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)start_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)start_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)start_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)start_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR,  ((uint32_t)start_d15 << 31) |((uint32_t)start_d14 << 30) |((uint32_t)start_d13 << 29) |((uint32_t)start_d12 << 28) |((uint32_t)start_d11 << 27) |((uint32_t)start_d10 << 26) |((uint32_t)start_d9 << 25) |((uint32_t)start_d8 << 24) |((uint32_t)start_d7 << 23) |((uint32_t)start_d6 << 22) |((uint32_t)start_d5 << 21) |((uint32_t)start_d4 << 20) |((uint32_t)start_d3 << 19) |((uint32_t)start_d2 << 18) |((uint32_t)start_d1 << 17) |((uint32_t)start_d0 << 16) |((uint32_t)start_u15 << 15) |((uint32_t)start_u14 << 14) |((uint32_t)start_u13 << 13) |((uint32_t)start_u12 << 12) |((uint32_t)start_u11 << 11) |((uint32_t)start_u10 << 10) |((uint32_t)start_u9 << 9) |((uint32_t)start_u8 << 8) |((uint32_t)start_u7 << 7) |((uint32_t)start_u6 << 6) |((uint32_t)start_u5 << 5) |((uint32_t)start_u4 << 4) |((uint32_t)start_u3 << 3) |((uint32_t)start_u2 << 2) |((uint32_t)start_u1 << 1) |((uint32_t)start_u0 << 0));
}

__INLINE void pcie_wrap_pciew_lli_start_unpack(uint8_t* start_d15, uint8_t* start_d14, uint8_t* start_d13, uint8_t* start_d12, uint8_t* start_d11, uint8_t* start_d10, uint8_t* start_d9, uint8_t* start_d8, uint8_t* start_d7, uint8_t* start_d6, uint8_t* start_d5, uint8_t* start_d4, uint8_t* start_d3, uint8_t* start_d2, uint8_t* start_d1, uint8_t* start_d0, uint8_t* start_u15, uint8_t* start_u14, uint8_t* start_u13, uint8_t* start_u12, uint8_t* start_u11, uint8_t* start_u10, uint8_t* start_u9, uint8_t* start_u8, uint8_t* start_u7, uint8_t* start_u6, uint8_t* start_u5, uint8_t* start_u4, uint8_t* start_u3, uint8_t* start_u2, uint8_t* start_u1, uint8_t* start_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);

	*start_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*start_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*start_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*start_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*start_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*start_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*start_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*start_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*start_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*start_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*start_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*start_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*start_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*start_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*start_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*start_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*start_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*start_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*start_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*start_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*start_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*start_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*start_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*start_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*start_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*start_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*start_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*start_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*start_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*start_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*start_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*start_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_lli_start_start_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_lli_start_start_d_15_setf(uint8_t startd15)
{
	ASSERT_ERR((((uint32_t)startd15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)startd15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_lli_start_start_d_14_setf(uint8_t startd14)
{
	ASSERT_ERR((((uint32_t)startd14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)startd14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_lli_start_start_d_13_setf(uint8_t startd13)
{
	ASSERT_ERR((((uint32_t)startd13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)startd13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_lli_start_start_d_12_setf(uint8_t startd12)
{
	ASSERT_ERR((((uint32_t)startd12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)startd12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_lli_start_start_d_11_setf(uint8_t startd11)
{
	ASSERT_ERR((((uint32_t)startd11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)startd11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_lli_start_start_d_10_setf(uint8_t startd10)
{
	ASSERT_ERR((((uint32_t)startd10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)startd10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_lli_start_start_d_9_setf(uint8_t startd9)
{
	ASSERT_ERR((((uint32_t)startd9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)startd9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_lli_start_start_d_8_setf(uint8_t startd8)
{
	ASSERT_ERR((((uint32_t)startd8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)startd8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_lli_start_start_d_7_setf(uint8_t startd7)
{
	ASSERT_ERR((((uint32_t)startd7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)startd7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_lli_start_start_d_6_setf(uint8_t startd6)
{
	ASSERT_ERR((((uint32_t)startd6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)startd6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_lli_start_start_d_5_setf(uint8_t startd5)
{
	ASSERT_ERR((((uint32_t)startd5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)startd5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_lli_start_start_d_4_setf(uint8_t startd4)
{
	ASSERT_ERR((((uint32_t)startd4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)startd4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_lli_start_start_d_3_setf(uint8_t startd3)
{
	ASSERT_ERR((((uint32_t)startd3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)startd3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_lli_start_start_d_2_setf(uint8_t startd2)
{
	ASSERT_ERR((((uint32_t)startd2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)startd2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_lli_start_start_d_1_setf(uint8_t startd1)
{
	ASSERT_ERR((((uint32_t)startd1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)startd1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_lli_start_start_d_0_setf(uint8_t startd0)
{
	ASSERT_ERR((((uint32_t)startd0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)startd0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_lli_start_start_u_15_setf(uint8_t startu15)
{
	ASSERT_ERR((((uint32_t)startu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)startu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_lli_start_start_u_14_setf(uint8_t startu14)
{
	ASSERT_ERR((((uint32_t)startu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)startu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_lli_start_start_u_13_setf(uint8_t startu13)
{
	ASSERT_ERR((((uint32_t)startu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)startu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_lli_start_start_u_12_setf(uint8_t startu12)
{
	ASSERT_ERR((((uint32_t)startu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)startu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_lli_start_start_u_11_setf(uint8_t startu11)
{
	ASSERT_ERR((((uint32_t)startu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)startu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_lli_start_start_u_10_setf(uint8_t startu10)
{
	ASSERT_ERR((((uint32_t)startu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)startu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_lli_start_start_u_9_setf(uint8_t startu9)
{
	ASSERT_ERR((((uint32_t)startu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)startu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_lli_start_start_u_8_setf(uint8_t startu8)
{
	ASSERT_ERR((((uint32_t)startu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)startu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_lli_start_start_u_7_setf(uint8_t startu7)
{
	ASSERT_ERR((((uint32_t)startu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)startu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_lli_start_start_u_6_setf(uint8_t startu6)
{
	ASSERT_ERR((((uint32_t)startu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)startu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_lli_start_start_u_5_setf(uint8_t startu5)
{
	ASSERT_ERR((((uint32_t)startu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)startu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_lli_start_start_u_4_setf(uint8_t startu4)
{
	ASSERT_ERR((((uint32_t)startu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)startu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_lli_start_start_u_3_setf(uint8_t startu3)
{
	ASSERT_ERR((((uint32_t)startu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)startu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_lli_start_start_u_2_setf(uint8_t startu2)
{
	ASSERT_ERR((((uint32_t)startu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)startu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_lli_start_start_u_1_setf(uint8_t startu1)
{
	ASSERT_ERR((((uint32_t)startu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)startu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_lli_start_start_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_lli_start_start_u_0_setf(uint8_t startu0)
{
	ASSERT_ERR((((uint32_t)startu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_START_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_START_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)startu0 <<0));
}

/**
 * @brief PCIEW_LLI_STOP register definition
 *  LLI stop register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    STOP_D15                  0              
 *    30    STOP_D14                  0              
 *    29    STOP_D13                  0              
 *    28    STOP_D12                  0              
 *    27    STOP_D11                  0              
 *    26    STOP_D10                  0              
 *    25    STOP_D9                   0              
 *    24    STOP_D8                   0              
 *    23    STOP_D7                   0              
 *    22    STOP_D6                   0              
 *    21    STOP_D5                   0              
 *    20    STOP_D4                   0              
 *    19    STOP_D3                   0              
 *    18    STOP_D2                   0              
 *    17    STOP_D1                   0              
 *    16    STOP_D0                   0              
 *    15    STOP_U15                  0              
 *    14    STOP_U14                  0              
 *    13    STOP_U13                  0              
 *    12    STOP_U12                  0              
 *    11    STOP_U11                  0              
 *    10    STOP_U10                  0              
 *    09    STOP_U9                   0              
 *    08    STOP_U8                   0              
 *    07    STOP_U7                   0              
 *    06    STOP_U6                   0              
 *    05    STOP_U5                   0              
 *    04    STOP_U4                   0              
 *    03    STOP_U3                   0              
 *    02    STOP_U2                   0              
 *    01    STOP_U1                   0              
 *    00    STOP_U0                   0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_LLI_STOP_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000204)
#define PCIE_WRAP_PCIEW_LLI_STOP_OFFSET      0x00000204
#define PCIE_WRAP_PCIEW_LLI_STOP_INDEX       0x00000081
#define PCIE_WRAP_PCIEW_LLI_STOP_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_lli_stop_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
}

__INLINE void pcie_wrap_pciew_lli_stop_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_15_POS    31
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_14_POS    30
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_13_POS    29
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_12_POS    28
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_11_POS    27
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_10_POS    26
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_9_POS    25
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_8_POS    24
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_7_POS    23
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_6_POS    22
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_5_POS    21
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_4_POS    20
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_3_POS    19
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_2_POS    18
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_1_POS    17
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_0_POS    16
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_15_POS    15
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_14_POS    14
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_13_POS    13
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_12_POS    12
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_11_POS    11
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_10_POS    10
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_9_POS    9
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_8_POS    8
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_7_POS    7
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_6_POS    6
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_5_POS    5
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_4_POS    4
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_3_POS    3
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_2_POS    2
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_1_POS    1
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_0_POS    0

#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_STOP_STOP_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_lli_stop_pack(uint8_t stop_d15, uint8_t stop_d14, uint8_t stop_d13, uint8_t stop_d12, uint8_t stop_d11, uint8_t stop_d10, uint8_t stop_d9, uint8_t stop_d8, uint8_t stop_d7, uint8_t stop_d6, uint8_t stop_d5, uint8_t stop_d4, uint8_t stop_d3, uint8_t stop_d2, uint8_t stop_d1, uint8_t stop_d0, uint8_t stop_u15, uint8_t stop_u14, uint8_t stop_u13, uint8_t stop_u12, uint8_t stop_u11, uint8_t stop_u10, uint8_t stop_u9, uint8_t stop_u8, uint8_t stop_u7, uint8_t stop_u6, uint8_t stop_u5, uint8_t stop_u4, uint8_t stop_u3, uint8_t stop_u2, uint8_t stop_u1, uint8_t stop_u0)
{
	ASSERT_ERR((((uint32_t)stop_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)stop_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)stop_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)stop_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)stop_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)stop_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)stop_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)stop_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)stop_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)stop_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)stop_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)stop_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)stop_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)stop_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)stop_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)stop_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)stop_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)stop_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)stop_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)stop_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)stop_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)stop_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)stop_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)stop_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)stop_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)stop_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)stop_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)stop_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)stop_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)stop_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)stop_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)stop_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR,  ((uint32_t)stop_d15 << 31) |((uint32_t)stop_d14 << 30) |((uint32_t)stop_d13 << 29) |((uint32_t)stop_d12 << 28) |((uint32_t)stop_d11 << 27) |((uint32_t)stop_d10 << 26) |((uint32_t)stop_d9 << 25) |((uint32_t)stop_d8 << 24) |((uint32_t)stop_d7 << 23) |((uint32_t)stop_d6 << 22) |((uint32_t)stop_d5 << 21) |((uint32_t)stop_d4 << 20) |((uint32_t)stop_d3 << 19) |((uint32_t)stop_d2 << 18) |((uint32_t)stop_d1 << 17) |((uint32_t)stop_d0 << 16) |((uint32_t)stop_u15 << 15) |((uint32_t)stop_u14 << 14) |((uint32_t)stop_u13 << 13) |((uint32_t)stop_u12 << 12) |((uint32_t)stop_u11 << 11) |((uint32_t)stop_u10 << 10) |((uint32_t)stop_u9 << 9) |((uint32_t)stop_u8 << 8) |((uint32_t)stop_u7 << 7) |((uint32_t)stop_u6 << 6) |((uint32_t)stop_u5 << 5) |((uint32_t)stop_u4 << 4) |((uint32_t)stop_u3 << 3) |((uint32_t)stop_u2 << 2) |((uint32_t)stop_u1 << 1) |((uint32_t)stop_u0 << 0));
}

__INLINE void pcie_wrap_pciew_lli_stop_unpack(uint8_t* stop_d15, uint8_t* stop_d14, uint8_t* stop_d13, uint8_t* stop_d12, uint8_t* stop_d11, uint8_t* stop_d10, uint8_t* stop_d9, uint8_t* stop_d8, uint8_t* stop_d7, uint8_t* stop_d6, uint8_t* stop_d5, uint8_t* stop_d4, uint8_t* stop_d3, uint8_t* stop_d2, uint8_t* stop_d1, uint8_t* stop_d0, uint8_t* stop_u15, uint8_t* stop_u14, uint8_t* stop_u13, uint8_t* stop_u12, uint8_t* stop_u11, uint8_t* stop_u10, uint8_t* stop_u9, uint8_t* stop_u8, uint8_t* stop_u7, uint8_t* stop_u6, uint8_t* stop_u5, uint8_t* stop_u4, uint8_t* stop_u3, uint8_t* stop_u2, uint8_t* stop_u1, uint8_t* stop_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);

	*stop_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*stop_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*stop_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*stop_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*stop_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*stop_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*stop_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*stop_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*stop_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*stop_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*stop_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*stop_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*stop_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*stop_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*stop_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*stop_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*stop_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*stop_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*stop_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*stop_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*stop_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*stop_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*stop_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*stop_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*stop_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*stop_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*stop_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*stop_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*stop_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*stop_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*stop_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*stop_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_d_15_setf(uint8_t stopd15)
{
	ASSERT_ERR((((uint32_t)stopd15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)stopd15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_d_14_setf(uint8_t stopd14)
{
	ASSERT_ERR((((uint32_t)stopd14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)stopd14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_d_13_setf(uint8_t stopd13)
{
	ASSERT_ERR((((uint32_t)stopd13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)stopd13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_d_12_setf(uint8_t stopd12)
{
	ASSERT_ERR((((uint32_t)stopd12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)stopd12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_d_11_setf(uint8_t stopd11)
{
	ASSERT_ERR((((uint32_t)stopd11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)stopd11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_d_10_setf(uint8_t stopd10)
{
	ASSERT_ERR((((uint32_t)stopd10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)stopd10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_d_9_setf(uint8_t stopd9)
{
	ASSERT_ERR((((uint32_t)stopd9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)stopd9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_d_8_setf(uint8_t stopd8)
{
	ASSERT_ERR((((uint32_t)stopd8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)stopd8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_d_7_setf(uint8_t stopd7)
{
	ASSERT_ERR((((uint32_t)stopd7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)stopd7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_d_6_setf(uint8_t stopd6)
{
	ASSERT_ERR((((uint32_t)stopd6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)stopd6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_d_5_setf(uint8_t stopd5)
{
	ASSERT_ERR((((uint32_t)stopd5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)stopd5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_d_4_setf(uint8_t stopd4)
{
	ASSERT_ERR((((uint32_t)stopd4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)stopd4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_d_3_setf(uint8_t stopd3)
{
	ASSERT_ERR((((uint32_t)stopd3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)stopd3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_d_2_setf(uint8_t stopd2)
{
	ASSERT_ERR((((uint32_t)stopd2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)stopd2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_d_1_setf(uint8_t stopd1)
{
	ASSERT_ERR((((uint32_t)stopd1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)stopd1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_d_0_setf(uint8_t stopd0)
{
	ASSERT_ERR((((uint32_t)stopd0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)stopd0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_u_15_setf(uint8_t stopu15)
{
	ASSERT_ERR((((uint32_t)stopu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)stopu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_u_14_setf(uint8_t stopu14)
{
	ASSERT_ERR((((uint32_t)stopu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)stopu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_u_13_setf(uint8_t stopu13)
{
	ASSERT_ERR((((uint32_t)stopu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)stopu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_u_12_setf(uint8_t stopu12)
{
	ASSERT_ERR((((uint32_t)stopu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)stopu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_u_11_setf(uint8_t stopu11)
{
	ASSERT_ERR((((uint32_t)stopu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)stopu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_u_10_setf(uint8_t stopu10)
{
	ASSERT_ERR((((uint32_t)stopu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)stopu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_u_9_setf(uint8_t stopu9)
{
	ASSERT_ERR((((uint32_t)stopu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)stopu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_u_8_setf(uint8_t stopu8)
{
	ASSERT_ERR((((uint32_t)stopu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)stopu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_u_7_setf(uint8_t stopu7)
{
	ASSERT_ERR((((uint32_t)stopu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)stopu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_u_6_setf(uint8_t stopu6)
{
	ASSERT_ERR((((uint32_t)stopu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)stopu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_u_5_setf(uint8_t stopu5)
{
	ASSERT_ERR((((uint32_t)stopu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)stopu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_u_4_setf(uint8_t stopu4)
{
	ASSERT_ERR((((uint32_t)stopu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)stopu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_u_3_setf(uint8_t stopu3)
{
	ASSERT_ERR((((uint32_t)stopu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)stopu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_u_2_setf(uint8_t stopu2)
{
	ASSERT_ERR((((uint32_t)stopu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)stopu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_u_1_setf(uint8_t stopu1)
{
	ASSERT_ERR((((uint32_t)stopu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)stopu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_lli_stop_stop_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_lli_stop_stop_u_0_setf(uint8_t stopu0)
{
	ASSERT_ERR((((uint32_t)stopu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_STOP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_STOP_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)stopu0 <<0));
}

/**
 * @brief PCIEW_COUNTER_RST register definition
 *  Clears the channel counters register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    CNT_RST_D15               0              
 *    30    CNT_RST_D14               0              
 *    29    CNT_RST_D13               0              
 *    28    CNT_RST_D12               0              
 *    27    CNT_RST_D11               0              
 *    26    CNT_RST_D10               0              
 *    25    CNT_RST_D9                0              
 *    24    CNT_RST_D8                0              
 *    23    CNT_RST_D7                0              
 *    22    CNT_RST_D6                0              
 *    21    CNT_RST_D5                0              
 *    20    CNT_RST_D4                0              
 *    19    CNT_RST_D3                0              
 *    18    CNT_RST_D2                0              
 *    17    CNT_RST_D1                0              
 *    16    CNT_RST_D0                0              
 *    15    CNT_RST_U15               0              
 *    14    CNT_RST_U14               0              
 *    13    CNT_RST_U13               0              
 *    12    CNT_RST_U12               0              
 *    11    CNT_RST_U11               0              
 *    10    CNT_RST_U10               0              
 *    09    CNT_RST_U9                0              
 *    08    CNT_RST_U8                0              
 *    07    CNT_RST_U7                0              
 *    06    CNT_RST_U6                0              
 *    05    CNT_RST_U5                0              
 *    04    CNT_RST_U4                0              
 *    03    CNT_RST_U3                0              
 *    02    CNT_RST_U2                0              
 *    01    CNT_RST_U1                0              
 *    00    CNT_RST_U0                0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_COUNTER_RST_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000208)
#define PCIE_WRAP_PCIEW_COUNTER_RST_OFFSET      0x00000208
#define PCIE_WRAP_PCIEW_COUNTER_RST_INDEX       0x00000082
#define PCIE_WRAP_PCIEW_COUNTER_RST_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_counter_rst_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
}

__INLINE void pcie_wrap_pciew_counter_rst_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_15_POS    31
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_14_POS    30
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_13_POS    29
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_12_POS    28
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_11_POS    27
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_10_POS    26
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_9_POS    25
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_8_POS    24
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_7_POS    23
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_6_POS    22
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_5_POS    21
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_4_POS    20
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_3_POS    19
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_2_POS    18
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_1_POS    17
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_0_POS    16
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_15_POS    15
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_14_POS    14
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_13_POS    13
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_12_POS    12
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_11_POS    11
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_10_POS    10
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_9_POS    9
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_8_POS    8
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_7_POS    7
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_6_POS    6
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_5_POS    5
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_4_POS    4
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_3_POS    3
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_2_POS    2
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_1_POS    1
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_0_POS    0

#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_COUNTER_RST_CNT_RST_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_counter_rst_pack(uint8_t cnt_rst_d15, uint8_t cnt_rst_d14, uint8_t cnt_rst_d13, uint8_t cnt_rst_d12, uint8_t cnt_rst_d11, uint8_t cnt_rst_d10, uint8_t cnt_rst_d9, uint8_t cnt_rst_d8, uint8_t cnt_rst_d7, uint8_t cnt_rst_d6, uint8_t cnt_rst_d5, uint8_t cnt_rst_d4, uint8_t cnt_rst_d3, uint8_t cnt_rst_d2, uint8_t cnt_rst_d1, uint8_t cnt_rst_d0, uint8_t cnt_rst_u15, uint8_t cnt_rst_u14, uint8_t cnt_rst_u13, uint8_t cnt_rst_u12, uint8_t cnt_rst_u11, uint8_t cnt_rst_u10, uint8_t cnt_rst_u9, uint8_t cnt_rst_u8, uint8_t cnt_rst_u7, uint8_t cnt_rst_u6, uint8_t cnt_rst_u5, uint8_t cnt_rst_u4, uint8_t cnt_rst_u3, uint8_t cnt_rst_u2, uint8_t cnt_rst_u1, uint8_t cnt_rst_u0)
{
	ASSERT_ERR((((uint32_t)cnt_rst_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)cnt_rst_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR,  ((uint32_t)cnt_rst_d15 << 31) |((uint32_t)cnt_rst_d14 << 30) |((uint32_t)cnt_rst_d13 << 29) |((uint32_t)cnt_rst_d12 << 28) |((uint32_t)cnt_rst_d11 << 27) |((uint32_t)cnt_rst_d10 << 26) |((uint32_t)cnt_rst_d9 << 25) |((uint32_t)cnt_rst_d8 << 24) |((uint32_t)cnt_rst_d7 << 23) |((uint32_t)cnt_rst_d6 << 22) |((uint32_t)cnt_rst_d5 << 21) |((uint32_t)cnt_rst_d4 << 20) |((uint32_t)cnt_rst_d3 << 19) |((uint32_t)cnt_rst_d2 << 18) |((uint32_t)cnt_rst_d1 << 17) |((uint32_t)cnt_rst_d0 << 16) |((uint32_t)cnt_rst_u15 << 15) |((uint32_t)cnt_rst_u14 << 14) |((uint32_t)cnt_rst_u13 << 13) |((uint32_t)cnt_rst_u12 << 12) |((uint32_t)cnt_rst_u11 << 11) |((uint32_t)cnt_rst_u10 << 10) |((uint32_t)cnt_rst_u9 << 9) |((uint32_t)cnt_rst_u8 << 8) |((uint32_t)cnt_rst_u7 << 7) |((uint32_t)cnt_rst_u6 << 6) |((uint32_t)cnt_rst_u5 << 5) |((uint32_t)cnt_rst_u4 << 4) |((uint32_t)cnt_rst_u3 << 3) |((uint32_t)cnt_rst_u2 << 2) |((uint32_t)cnt_rst_u1 << 1) |((uint32_t)cnt_rst_u0 << 0));
}

__INLINE void pcie_wrap_pciew_counter_rst_unpack(uint8_t* cnt_rst_d15, uint8_t* cnt_rst_d14, uint8_t* cnt_rst_d13, uint8_t* cnt_rst_d12, uint8_t* cnt_rst_d11, uint8_t* cnt_rst_d10, uint8_t* cnt_rst_d9, uint8_t* cnt_rst_d8, uint8_t* cnt_rst_d7, uint8_t* cnt_rst_d6, uint8_t* cnt_rst_d5, uint8_t* cnt_rst_d4, uint8_t* cnt_rst_d3, uint8_t* cnt_rst_d2, uint8_t* cnt_rst_d1, uint8_t* cnt_rst_d0, uint8_t* cnt_rst_u15, uint8_t* cnt_rst_u14, uint8_t* cnt_rst_u13, uint8_t* cnt_rst_u12, uint8_t* cnt_rst_u11, uint8_t* cnt_rst_u10, uint8_t* cnt_rst_u9, uint8_t* cnt_rst_u8, uint8_t* cnt_rst_u7, uint8_t* cnt_rst_u6, uint8_t* cnt_rst_u5, uint8_t* cnt_rst_u4, uint8_t* cnt_rst_u3, uint8_t* cnt_rst_u2, uint8_t* cnt_rst_u1, uint8_t* cnt_rst_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);

	*cnt_rst_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*cnt_rst_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*cnt_rst_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*cnt_rst_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*cnt_rst_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*cnt_rst_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*cnt_rst_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*cnt_rst_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*cnt_rst_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*cnt_rst_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*cnt_rst_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*cnt_rst_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*cnt_rst_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*cnt_rst_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*cnt_rst_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*cnt_rst_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*cnt_rst_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*cnt_rst_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*cnt_rst_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*cnt_rst_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*cnt_rst_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*cnt_rst_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*cnt_rst_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*cnt_rst_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*cnt_rst_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*cnt_rst_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*cnt_rst_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*cnt_rst_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*cnt_rst_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*cnt_rst_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*cnt_rst_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*cnt_rst_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_d_15_setf(uint8_t cntrstd15)
{
	ASSERT_ERR((((uint32_t)cntrstd15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)cntrstd15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_d_14_setf(uint8_t cntrstd14)
{
	ASSERT_ERR((((uint32_t)cntrstd14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)cntrstd14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_d_13_setf(uint8_t cntrstd13)
{
	ASSERT_ERR((((uint32_t)cntrstd13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)cntrstd13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_d_12_setf(uint8_t cntrstd12)
{
	ASSERT_ERR((((uint32_t)cntrstd12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)cntrstd12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_d_11_setf(uint8_t cntrstd11)
{
	ASSERT_ERR((((uint32_t)cntrstd11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)cntrstd11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_d_10_setf(uint8_t cntrstd10)
{
	ASSERT_ERR((((uint32_t)cntrstd10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)cntrstd10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_d_9_setf(uint8_t cntrstd9)
{
	ASSERT_ERR((((uint32_t)cntrstd9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)cntrstd9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_d_8_setf(uint8_t cntrstd8)
{
	ASSERT_ERR((((uint32_t)cntrstd8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)cntrstd8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_d_7_setf(uint8_t cntrstd7)
{
	ASSERT_ERR((((uint32_t)cntrstd7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)cntrstd7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_d_6_setf(uint8_t cntrstd6)
{
	ASSERT_ERR((((uint32_t)cntrstd6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)cntrstd6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_d_5_setf(uint8_t cntrstd5)
{
	ASSERT_ERR((((uint32_t)cntrstd5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)cntrstd5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_d_4_setf(uint8_t cntrstd4)
{
	ASSERT_ERR((((uint32_t)cntrstd4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)cntrstd4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_d_3_setf(uint8_t cntrstd3)
{
	ASSERT_ERR((((uint32_t)cntrstd3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)cntrstd3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_d_2_setf(uint8_t cntrstd2)
{
	ASSERT_ERR((((uint32_t)cntrstd2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)cntrstd2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_d_1_setf(uint8_t cntrstd1)
{
	ASSERT_ERR((((uint32_t)cntrstd1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)cntrstd1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_d_0_setf(uint8_t cntrstd0)
{
	ASSERT_ERR((((uint32_t)cntrstd0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)cntrstd0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_u_15_setf(uint8_t cntrstu15)
{
	ASSERT_ERR((((uint32_t)cntrstu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)cntrstu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_u_14_setf(uint8_t cntrstu14)
{
	ASSERT_ERR((((uint32_t)cntrstu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)cntrstu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_u_13_setf(uint8_t cntrstu13)
{
	ASSERT_ERR((((uint32_t)cntrstu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)cntrstu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_u_12_setf(uint8_t cntrstu12)
{
	ASSERT_ERR((((uint32_t)cntrstu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)cntrstu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_u_11_setf(uint8_t cntrstu11)
{
	ASSERT_ERR((((uint32_t)cntrstu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)cntrstu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_u_10_setf(uint8_t cntrstu10)
{
	ASSERT_ERR((((uint32_t)cntrstu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)cntrstu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_u_9_setf(uint8_t cntrstu9)
{
	ASSERT_ERR((((uint32_t)cntrstu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)cntrstu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_u_8_setf(uint8_t cntrstu8)
{
	ASSERT_ERR((((uint32_t)cntrstu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)cntrstu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_u_7_setf(uint8_t cntrstu7)
{
	ASSERT_ERR((((uint32_t)cntrstu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)cntrstu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_u_6_setf(uint8_t cntrstu6)
{
	ASSERT_ERR((((uint32_t)cntrstu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)cntrstu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_u_5_setf(uint8_t cntrstu5)
{
	ASSERT_ERR((((uint32_t)cntrstu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)cntrstu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_u_4_setf(uint8_t cntrstu4)
{
	ASSERT_ERR((((uint32_t)cntrstu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)cntrstu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_u_3_setf(uint8_t cntrstu3)
{
	ASSERT_ERR((((uint32_t)cntrstu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)cntrstu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_u_2_setf(uint8_t cntrstu2)
{
	ASSERT_ERR((((uint32_t)cntrstu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)cntrstu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_u_1_setf(uint8_t cntrstu1)
{
	ASSERT_ERR((((uint32_t)cntrstu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)cntrstu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_counter_rst_cnt_rst_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_counter_rst_cnt_rst_u_0_setf(uint8_t cntrstu0)
{
	ASSERT_ERR((((uint32_t)cntrstu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_COUNTER_RST_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)cntrstu0 <<0));
}

/**
 * @brief PCIEW_INT_LMAC_EN register definition
 *  LMAC interrupt enable register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EN_D15                    0              
 *    30    EN_D14                    0              
 *    29    EN_D13                    0              
 *    28    EN_D12                    0              
 *    27    EN_D11                    0              
 *    26    EN_D10                    0              
 *    25    EN_D9                     0              
 *    24    EN_D8                     0              
 *    23    EN_D7                     0              
 *    22    EN_D6                     0              
 *    21    EN_D5                     0              
 *    20    EN_D4                     0              
 *    19    EN_D3                     0              
 *    18    EN_D2                     0              
 *    17    EN_D1                     0              
 *    16    EN_D0                     0              
 *    15    EN_U15                    0              
 *    14    EN_U14                    0              
 *    13    EN_U13                    0              
 *    12    EN_U12                    0              
 *    11    EN_U11                    0              
 *    10    EN_U10                    0              
 *    09    EN_U9                     0              
 *    08    EN_U8                     0              
 *    07    EN_U7                     0              
 *    06    EN_U6                     0              
 *    05    EN_U5                     0              
 *    04    EN_U4                     0              
 *    03    EN_U3                     0              
 *    02    EN_U2                     0              
 *    01    EN_U1                     0              
 *    00    EN_U0                     0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000020C)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_OFFSET      0x0000020C
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_INDEX       0x00000083
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_lmac_en_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
}

__INLINE void pcie_wrap_pciew_int_lmac_en_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_EN_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_lmac_en_pack(uint8_t en_d15, uint8_t en_d14, uint8_t en_d13, uint8_t en_d12, uint8_t en_d11, uint8_t en_d10, uint8_t en_d9, uint8_t en_d8, uint8_t en_d7, uint8_t en_d6, uint8_t en_d5, uint8_t en_d4, uint8_t en_d3, uint8_t en_d2, uint8_t en_d1, uint8_t en_d0, uint8_t en_u15, uint8_t en_u14, uint8_t en_u13, uint8_t en_u12, uint8_t en_u11, uint8_t en_u10, uint8_t en_u9, uint8_t en_u8, uint8_t en_u7, uint8_t en_u6, uint8_t en_u5, uint8_t en_u4, uint8_t en_u3, uint8_t en_u2, uint8_t en_u1, uint8_t en_u0)
{
	ASSERT_ERR((((uint32_t)en_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)en_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)en_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)en_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)en_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)en_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)en_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)en_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)en_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)en_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)en_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)en_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)en_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)en_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)en_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)en_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)en_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)en_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)en_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)en_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)en_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)en_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)en_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)en_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR,  ((uint32_t)en_d15 << 31) |((uint32_t)en_d14 << 30) |((uint32_t)en_d13 << 29) |((uint32_t)en_d12 << 28) |((uint32_t)en_d11 << 27) |((uint32_t)en_d10 << 26) |((uint32_t)en_d9 << 25) |((uint32_t)en_d8 << 24) |((uint32_t)en_d7 << 23) |((uint32_t)en_d6 << 22) |((uint32_t)en_d5 << 21) |((uint32_t)en_d4 << 20) |((uint32_t)en_d3 << 19) |((uint32_t)en_d2 << 18) |((uint32_t)en_d1 << 17) |((uint32_t)en_d0 << 16) |((uint32_t)en_u15 << 15) |((uint32_t)en_u14 << 14) |((uint32_t)en_u13 << 13) |((uint32_t)en_u12 << 12) |((uint32_t)en_u11 << 11) |((uint32_t)en_u10 << 10) |((uint32_t)en_u9 << 9) |((uint32_t)en_u8 << 8) |((uint32_t)en_u7 << 7) |((uint32_t)en_u6 << 6) |((uint32_t)en_u5 << 5) |((uint32_t)en_u4 << 4) |((uint32_t)en_u3 << 3) |((uint32_t)en_u2 << 2) |((uint32_t)en_u1 << 1) |((uint32_t)en_u0 << 0));
}

__INLINE void pcie_wrap_pciew_int_lmac_en_unpack(uint8_t* en_d15, uint8_t* en_d14, uint8_t* en_d13, uint8_t* en_d12, uint8_t* en_d11, uint8_t* en_d10, uint8_t* en_d9, uint8_t* en_d8, uint8_t* en_d7, uint8_t* en_d6, uint8_t* en_d5, uint8_t* en_d4, uint8_t* en_d3, uint8_t* en_d2, uint8_t* en_d1, uint8_t* en_d0, uint8_t* en_u15, uint8_t* en_u14, uint8_t* en_u13, uint8_t* en_u12, uint8_t* en_u11, uint8_t* en_u10, uint8_t* en_u9, uint8_t* en_u8, uint8_t* en_u7, uint8_t* en_u6, uint8_t* en_u5, uint8_t* en_u4, uint8_t* en_u3, uint8_t* en_u2, uint8_t* en_u1, uint8_t* en_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);

	*en_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*en_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*en_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*en_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*en_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*en_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*en_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*en_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*en_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*en_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*en_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*en_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*en_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*en_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*en_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*en_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*en_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*en_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*en_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*en_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*en_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*en_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*en_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*en_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*en_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*en_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*en_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*en_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*en_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*en_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*en_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*en_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_d_15_setf(uint8_t end15)
{
	ASSERT_ERR((((uint32_t)end15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)end15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_d_14_setf(uint8_t end14)
{
	ASSERT_ERR((((uint32_t)end14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)end14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_d_13_setf(uint8_t end13)
{
	ASSERT_ERR((((uint32_t)end13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)end13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_d_12_setf(uint8_t end12)
{
	ASSERT_ERR((((uint32_t)end12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)end12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_d_11_setf(uint8_t end11)
{
	ASSERT_ERR((((uint32_t)end11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)end11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_d_10_setf(uint8_t end10)
{
	ASSERT_ERR((((uint32_t)end10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)end10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_d_9_setf(uint8_t end9)
{
	ASSERT_ERR((((uint32_t)end9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)end9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_d_8_setf(uint8_t end8)
{
	ASSERT_ERR((((uint32_t)end8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)end8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_d_7_setf(uint8_t end7)
{
	ASSERT_ERR((((uint32_t)end7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)end7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_d_6_setf(uint8_t end6)
{
	ASSERT_ERR((((uint32_t)end6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)end6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_d_5_setf(uint8_t end5)
{
	ASSERT_ERR((((uint32_t)end5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)end5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_d_4_setf(uint8_t end4)
{
	ASSERT_ERR((((uint32_t)end4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)end4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_d_3_setf(uint8_t end3)
{
	ASSERT_ERR((((uint32_t)end3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)end3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_d_2_setf(uint8_t end2)
{
	ASSERT_ERR((((uint32_t)end2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)end2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_d_1_setf(uint8_t end1)
{
	ASSERT_ERR((((uint32_t)end1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)end1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_d_0_setf(uint8_t end0)
{
	ASSERT_ERR((((uint32_t)end0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)end0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_u_15_setf(uint8_t enu15)
{
	ASSERT_ERR((((uint32_t)enu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)enu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_u_14_setf(uint8_t enu14)
{
	ASSERT_ERR((((uint32_t)enu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)enu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_u_13_setf(uint8_t enu13)
{
	ASSERT_ERR((((uint32_t)enu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)enu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_u_12_setf(uint8_t enu12)
{
	ASSERT_ERR((((uint32_t)enu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)enu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_u_11_setf(uint8_t enu11)
{
	ASSERT_ERR((((uint32_t)enu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)enu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_u_10_setf(uint8_t enu10)
{
	ASSERT_ERR((((uint32_t)enu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)enu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_u_9_setf(uint8_t enu9)
{
	ASSERT_ERR((((uint32_t)enu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)enu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_u_8_setf(uint8_t enu8)
{
	ASSERT_ERR((((uint32_t)enu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)enu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_u_7_setf(uint8_t enu7)
{
	ASSERT_ERR((((uint32_t)enu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)enu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_u_6_setf(uint8_t enu6)
{
	ASSERT_ERR((((uint32_t)enu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)enu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_u_5_setf(uint8_t enu5)
{
	ASSERT_ERR((((uint32_t)enu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)enu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_u_4_setf(uint8_t enu4)
{
	ASSERT_ERR((((uint32_t)enu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)enu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_u_3_setf(uint8_t enu3)
{
	ASSERT_ERR((((uint32_t)enu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)enu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_u_2_setf(uint8_t enu2)
{
	ASSERT_ERR((((uint32_t)enu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)enu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_u_1_setf(uint8_t enu1)
{
	ASSERT_ERR((((uint32_t)enu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)enu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_en_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_en_u_0_setf(uint8_t enu0)
{
	ASSERT_ERR((((uint32_t)enu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)enu0 <<0));
}

/**
 * @brief PCIEW_INT_UMAC_EN register definition
 *  UMAC interrupt enable register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EN_D15                    0              
 *    30    EN_D14                    0              
 *    29    EN_D13                    0              
 *    28    EN_D12                    0              
 *    27    EN_D11                    0              
 *    26    EN_D10                    0              
 *    25    EN_D9                     0              
 *    24    EN_D8                     0              
 *    23    EN_D7                     0              
 *    22    EN_D6                     0              
 *    21    EN_D5                     0              
 *    20    EN_D4                     0              
 *    19    EN_D3                     0              
 *    18    EN_D2                     0              
 *    17    EN_D1                     0              
 *    16    EN_D0                     0              
 *    15    EN_U15                    0              
 *    14    EN_U14                    0              
 *    13    EN_U13                    0              
 *    12    EN_U12                    0              
 *    11    EN_U11                    0              
 *    10    EN_U10                    0              
 *    09    EN_U9                     0              
 *    08    EN_U8                     0              
 *    07    EN_U7                     0              
 *    06    EN_U6                     0              
 *    05    EN_U5                     0              
 *    04    EN_U4                     0              
 *    03    EN_U3                     0              
 *    02    EN_U2                     0              
 *    01    EN_U1                     0              
 *    00    EN_U0                     0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000210)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_OFFSET      0x00000210
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_INDEX       0x00000084
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_umac_en_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
}

__INLINE void pcie_wrap_pciew_int_umac_en_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_EN_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_umac_en_pack(uint8_t en_d15, uint8_t en_d14, uint8_t en_d13, uint8_t en_d12, uint8_t en_d11, uint8_t en_d10, uint8_t en_d9, uint8_t en_d8, uint8_t en_d7, uint8_t en_d6, uint8_t en_d5, uint8_t en_d4, uint8_t en_d3, uint8_t en_d2, uint8_t en_d1, uint8_t en_d0, uint8_t en_u15, uint8_t en_u14, uint8_t en_u13, uint8_t en_u12, uint8_t en_u11, uint8_t en_u10, uint8_t en_u9, uint8_t en_u8, uint8_t en_u7, uint8_t en_u6, uint8_t en_u5, uint8_t en_u4, uint8_t en_u3, uint8_t en_u2, uint8_t en_u1, uint8_t en_u0)
{
	ASSERT_ERR((((uint32_t)en_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)en_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)en_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)en_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)en_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)en_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)en_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)en_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)en_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)en_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)en_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)en_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)en_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)en_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)en_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)en_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)en_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)en_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)en_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)en_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)en_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)en_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)en_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)en_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR,  ((uint32_t)en_d15 << 31) |((uint32_t)en_d14 << 30) |((uint32_t)en_d13 << 29) |((uint32_t)en_d12 << 28) |((uint32_t)en_d11 << 27) |((uint32_t)en_d10 << 26) |((uint32_t)en_d9 << 25) |((uint32_t)en_d8 << 24) |((uint32_t)en_d7 << 23) |((uint32_t)en_d6 << 22) |((uint32_t)en_d5 << 21) |((uint32_t)en_d4 << 20) |((uint32_t)en_d3 << 19) |((uint32_t)en_d2 << 18) |((uint32_t)en_d1 << 17) |((uint32_t)en_d0 << 16) |((uint32_t)en_u15 << 15) |((uint32_t)en_u14 << 14) |((uint32_t)en_u13 << 13) |((uint32_t)en_u12 << 12) |((uint32_t)en_u11 << 11) |((uint32_t)en_u10 << 10) |((uint32_t)en_u9 << 9) |((uint32_t)en_u8 << 8) |((uint32_t)en_u7 << 7) |((uint32_t)en_u6 << 6) |((uint32_t)en_u5 << 5) |((uint32_t)en_u4 << 4) |((uint32_t)en_u3 << 3) |((uint32_t)en_u2 << 2) |((uint32_t)en_u1 << 1) |((uint32_t)en_u0 << 0));
}

__INLINE void pcie_wrap_pciew_int_umac_en_unpack(uint8_t* en_d15, uint8_t* en_d14, uint8_t* en_d13, uint8_t* en_d12, uint8_t* en_d11, uint8_t* en_d10, uint8_t* en_d9, uint8_t* en_d8, uint8_t* en_d7, uint8_t* en_d6, uint8_t* en_d5, uint8_t* en_d4, uint8_t* en_d3, uint8_t* en_d2, uint8_t* en_d1, uint8_t* en_d0, uint8_t* en_u15, uint8_t* en_u14, uint8_t* en_u13, uint8_t* en_u12, uint8_t* en_u11, uint8_t* en_u10, uint8_t* en_u9, uint8_t* en_u8, uint8_t* en_u7, uint8_t* en_u6, uint8_t* en_u5, uint8_t* en_u4, uint8_t* en_u3, uint8_t* en_u2, uint8_t* en_u1, uint8_t* en_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);

	*en_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*en_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*en_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*en_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*en_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*en_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*en_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*en_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*en_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*en_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*en_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*en_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*en_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*en_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*en_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*en_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*en_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*en_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*en_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*en_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*en_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*en_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*en_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*en_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*en_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*en_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*en_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*en_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*en_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*en_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*en_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*en_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_d_15_setf(uint8_t end15)
{
	ASSERT_ERR((((uint32_t)end15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)end15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_d_14_setf(uint8_t end14)
{
	ASSERT_ERR((((uint32_t)end14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)end14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_d_13_setf(uint8_t end13)
{
	ASSERT_ERR((((uint32_t)end13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)end13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_d_12_setf(uint8_t end12)
{
	ASSERT_ERR((((uint32_t)end12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)end12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_d_11_setf(uint8_t end11)
{
	ASSERT_ERR((((uint32_t)end11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)end11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_d_10_setf(uint8_t end10)
{
	ASSERT_ERR((((uint32_t)end10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)end10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_d_9_setf(uint8_t end9)
{
	ASSERT_ERR((((uint32_t)end9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)end9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_d_8_setf(uint8_t end8)
{
	ASSERT_ERR((((uint32_t)end8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)end8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_d_7_setf(uint8_t end7)
{
	ASSERT_ERR((((uint32_t)end7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)end7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_d_6_setf(uint8_t end6)
{
	ASSERT_ERR((((uint32_t)end6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)end6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_d_5_setf(uint8_t end5)
{
	ASSERT_ERR((((uint32_t)end5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)end5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_d_4_setf(uint8_t end4)
{
	ASSERT_ERR((((uint32_t)end4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)end4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_d_3_setf(uint8_t end3)
{
	ASSERT_ERR((((uint32_t)end3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)end3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_d_2_setf(uint8_t end2)
{
	ASSERT_ERR((((uint32_t)end2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)end2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_d_1_setf(uint8_t end1)
{
	ASSERT_ERR((((uint32_t)end1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)end1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_d_0_setf(uint8_t end0)
{
	ASSERT_ERR((((uint32_t)end0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)end0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_u_15_setf(uint8_t enu15)
{
	ASSERT_ERR((((uint32_t)enu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)enu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_u_14_setf(uint8_t enu14)
{
	ASSERT_ERR((((uint32_t)enu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)enu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_u_13_setf(uint8_t enu13)
{
	ASSERT_ERR((((uint32_t)enu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)enu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_u_12_setf(uint8_t enu12)
{
	ASSERT_ERR((((uint32_t)enu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)enu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_u_11_setf(uint8_t enu11)
{
	ASSERT_ERR((((uint32_t)enu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)enu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_u_10_setf(uint8_t enu10)
{
	ASSERT_ERR((((uint32_t)enu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)enu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_u_9_setf(uint8_t enu9)
{
	ASSERT_ERR((((uint32_t)enu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)enu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_u_8_setf(uint8_t enu8)
{
	ASSERT_ERR((((uint32_t)enu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)enu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_u_7_setf(uint8_t enu7)
{
	ASSERT_ERR((((uint32_t)enu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)enu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_u_6_setf(uint8_t enu6)
{
	ASSERT_ERR((((uint32_t)enu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)enu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_u_5_setf(uint8_t enu5)
{
	ASSERT_ERR((((uint32_t)enu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)enu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_u_4_setf(uint8_t enu4)
{
	ASSERT_ERR((((uint32_t)enu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)enu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_u_3_setf(uint8_t enu3)
{
	ASSERT_ERR((((uint32_t)enu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)enu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_u_2_setf(uint8_t enu2)
{
	ASSERT_ERR((((uint32_t)enu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)enu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_u_1_setf(uint8_t enu1)
{
	ASSERT_ERR((((uint32_t)enu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)enu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_en_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_int_umac_en_en_u_0_setf(uint8_t enu0)
{
	ASSERT_ERR((((uint32_t)enu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)enu0 <<0));
}

/**
 * @brief PCIEW_INT_RAWSTAT register definition
 *  Interrupts raw status register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    DONE_D15                  0              
 *    30    DONE_D14                  0              
 *    29    DONE_D13                  0              
 *    28    DONE_D12                  0              
 *    27    DONE_D11                  0              
 *    26    DONE_D10                  0              
 *    25    DONE_D9                   0              
 *    24    DONE_D8                   0              
 *    23    DONE_D7                   0              
 *    22    DONE_D6                   0              
 *    21    DONE_D5                   0              
 *    20    DONE_D4                   0              
 *    19    DONE_D3                   0              
 *    18    DONE_D2                   0              
 *    17    DONE_D1                   0              
 *    16    DONE_D0                   0              
 *    15    DONE_U15                  0              
 *    14    DONE_U14                  0              
 *    13    DONE_U13                  0              
 *    12    DONE_U12                  0              
 *    11    DONE_U11                  0              
 *    10    DONE_U10                  0              
 *    09    DONE_U9                   0              
 *    08    DONE_U8                   0              
 *    07    DONE_U7                   0              
 *    06    DONE_U6                   0              
 *    05    DONE_U5                   0              
 *    04    DONE_U4                   0              
 *    03    DONE_U3                   0              
 *    02    DONE_U2                   0              
 *    01    DONE_U1                   0              
 *    00    DONE_U0                   0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000214)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_OFFSET      0x00000214
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_INDEX       0x00000085
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_rawstat_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_DONE_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_rawstat_unpack(uint8_t* done_d15, uint8_t* done_d14, uint8_t* done_d13, uint8_t* done_d12, uint8_t* done_d11, uint8_t* done_d10, uint8_t* done_d9, uint8_t* done_d8, uint8_t* done_d7, uint8_t* done_d6, uint8_t* done_d5, uint8_t* done_d4, uint8_t* done_d3, uint8_t* done_d2, uint8_t* done_d1, uint8_t* done_d0, uint8_t* done_u15, uint8_t* done_u14, uint8_t* done_u13, uint8_t* done_u12, uint8_t* done_u11, uint8_t* done_u10, uint8_t* done_u9, uint8_t* done_u8, uint8_t* done_u7, uint8_t* done_u6, uint8_t* done_u5, uint8_t* done_u4, uint8_t* done_u3, uint8_t* done_u2, uint8_t* done_u1, uint8_t* done_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);

	*done_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*done_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*done_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*done_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*done_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*done_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*done_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*done_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*done_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*done_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*done_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*done_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*done_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*done_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*done_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*done_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*done_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*done_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*done_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*done_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*done_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*done_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*done_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*done_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*done_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*done_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*done_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*done_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*done_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*done_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*done_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*done_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_done_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief PCIEW_INT_LMAC_STAT register definition
 *  Interrupts LMAC status register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    DONE_D15                  0              
 *    30    DONE_D14                  0              
 *    29    DONE_D13                  0              
 *    28    DONE_D12                  0              
 *    27    DONE_D11                  0              
 *    26    DONE_D10                  0              
 *    25    DONE_D9                   0              
 *    24    DONE_D8                   0              
 *    23    DONE_D7                   0              
 *    22    DONE_D6                   0              
 *    21    DONE_D5                   0              
 *    20    DONE_D4                   0              
 *    19    DONE_D3                   0              
 *    18    DONE_D2                   0              
 *    17    DONE_D1                   0              
 *    16    DONE_D0                   0              
 *    15    DONE_U15                  0              
 *    14    DONE_U14                  0              
 *    13    DONE_U13                  0              
 *    12    DONE_U12                  0              
 *    11    DONE_U11                  0              
 *    10    DONE_U10                  0              
 *    09    DONE_U9                   0              
 *    08    DONE_U8                   0              
 *    07    DONE_U7                   0              
 *    06    DONE_U6                   0              
 *    05    DONE_U5                   0              
 *    04    DONE_U4                   0              
 *    03    DONE_U3                   0              
 *    02    DONE_U2                   0              
 *    01    DONE_U1                   0              
 *    00    DONE_U0                   0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000218)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_OFFSET      0x00000218
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_INDEX       0x00000086
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_lmac_stat_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_STAT_DONE_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_lmac_stat_unpack(uint8_t* done_d15, uint8_t* done_d14, uint8_t* done_d13, uint8_t* done_d12, uint8_t* done_d11, uint8_t* done_d10, uint8_t* done_d9, uint8_t* done_d8, uint8_t* done_d7, uint8_t* done_d6, uint8_t* done_d5, uint8_t* done_d4, uint8_t* done_d3, uint8_t* done_d2, uint8_t* done_d1, uint8_t* done_d0, uint8_t* done_u15, uint8_t* done_u14, uint8_t* done_u13, uint8_t* done_u12, uint8_t* done_u11, uint8_t* done_u10, uint8_t* done_u9, uint8_t* done_u8, uint8_t* done_u7, uint8_t* done_u6, uint8_t* done_u5, uint8_t* done_u4, uint8_t* done_u3, uint8_t* done_u2, uint8_t* done_u1, uint8_t* done_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);

	*done_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*done_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*done_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*done_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*done_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*done_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*done_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*done_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*done_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*done_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*done_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*done_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*done_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*done_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*done_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*done_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*done_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*done_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*done_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*done_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*done_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*done_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*done_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*done_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*done_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*done_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*done_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*done_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*done_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*done_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*done_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*done_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_stat_done_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief PCIEW_INT_UMAC_STAT register definition
 *  Interrupts UMAC status register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    DONE_D15                  0              
 *    30    DONE_D14                  0              
 *    29    DONE_D13                  0              
 *    28    DONE_D12                  0              
 *    27    DONE_D11                  0              
 *    26    DONE_D10                  0              
 *    25    DONE_D9                   0              
 *    24    DONE_D8                   0              
 *    23    DONE_D7                   0              
 *    22    DONE_D6                   0              
 *    21    DONE_D5                   0              
 *    20    DONE_D4                   0              
 *    19    DONE_D3                   0              
 *    18    DONE_D2                   0              
 *    17    DONE_D1                   0              
 *    16    DONE_D0                   0              
 *    15    DONE_U15                  0              
 *    14    DONE_U14                  0              
 *    13    DONE_U13                  0              
 *    12    DONE_U12                  0              
 *    11    DONE_U11                  0              
 *    10    DONE_U10                  0              
 *    09    DONE_U9                   0              
 *    08    DONE_U8                   0              
 *    07    DONE_U7                   0              
 *    06    DONE_U6                   0              
 *    05    DONE_U5                   0              
 *    04    DONE_U4                   0              
 *    03    DONE_U3                   0              
 *    02    DONE_U2                   0              
 *    01    DONE_U1                   0              
 *    00    DONE_U0                   0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000021C)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_OFFSET      0x0000021C
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_INDEX       0x00000087
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_umac_stat_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_STAT_DONE_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_umac_stat_unpack(uint8_t* done_d15, uint8_t* done_d14, uint8_t* done_d13, uint8_t* done_d12, uint8_t* done_d11, uint8_t* done_d10, uint8_t* done_d9, uint8_t* done_d8, uint8_t* done_d7, uint8_t* done_d6, uint8_t* done_d5, uint8_t* done_d4, uint8_t* done_d3, uint8_t* done_d2, uint8_t* done_d1, uint8_t* done_d0, uint8_t* done_u15, uint8_t* done_u14, uint8_t* done_u13, uint8_t* done_u12, uint8_t* done_u11, uint8_t* done_u10, uint8_t* done_u9, uint8_t* done_u8, uint8_t* done_u7, uint8_t* done_u6, uint8_t* done_u5, uint8_t* done_u4, uint8_t* done_u3, uint8_t* done_u2, uint8_t* done_u1, uint8_t* done_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);

	*done_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*done_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*done_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*done_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*done_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*done_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*done_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*done_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*done_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*done_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*done_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*done_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*done_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*done_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*done_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*done_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*done_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*done_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*done_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*done_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*done_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*done_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*done_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*done_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*done_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*done_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*done_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*done_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*done_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*done_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*done_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*done_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_stat_done_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief PCIEW_INT_CLR register definition
 *  Interrupts clear register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    CLR_D15                   0              
 *    30    CLR_D14                   0              
 *    29    CLR_D13                   0              
 *    28    CLR_D12                   0              
 *    27    CLR_D11                   0              
 *    26    CLR_D10                   0              
 *    25    CLR_D9                    0              
 *    24    CLR_D8                    0              
 *    23    CLR_D7                    0              
 *    22    CLR_D6                    0              
 *    21    CLR_D5                    0              
 *    20    CLR_D4                    0              
 *    19    CLR_D3                    0              
 *    18    CLR_D2                    0              
 *    17    CLR_D1                    0              
 *    16    CLR_D0                    0              
 *    15    CLR_U15                   0              
 *    14    CLR_U14                   0              
 *    13    CLR_U13                   0              
 *    12    CLR_U12                   0              
 *    11    CLR_U11                   0              
 *    10    CLR_U10                   0              
 *    09    CLR_U9                    0              
 *    08    CLR_U8                    0              
 *    07    CLR_U7                    0              
 *    06    CLR_U6                    0              
 *    05    CLR_U5                    0              
 *    04    CLR_U4                    0              
 *    03    CLR_U3                    0              
 *    02    CLR_U2                    0              
 *    01    CLR_U1                    0              
 *    00    CLR_U0                    0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_CLR_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000220)
#define PCIE_WRAP_PCIEW_INT_CLR_OFFSET      0x00000220
#define PCIE_WRAP_PCIEW_INT_CLR_INDEX       0x00000088
#define PCIE_WRAP_PCIEW_INT_CLR_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_clr_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
}

__INLINE void pcie_wrap_pciew_int_clr_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_CLR_CLR_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_clr_pack(uint8_t clr_d15, uint8_t clr_d14, uint8_t clr_d13, uint8_t clr_d12, uint8_t clr_d11, uint8_t clr_d10, uint8_t clr_d9, uint8_t clr_d8, uint8_t clr_d7, uint8_t clr_d6, uint8_t clr_d5, uint8_t clr_d4, uint8_t clr_d3, uint8_t clr_d2, uint8_t clr_d1, uint8_t clr_d0, uint8_t clr_u15, uint8_t clr_u14, uint8_t clr_u13, uint8_t clr_u12, uint8_t clr_u11, uint8_t clr_u10, uint8_t clr_u9, uint8_t clr_u8, uint8_t clr_u7, uint8_t clr_u6, uint8_t clr_u5, uint8_t clr_u4, uint8_t clr_u3, uint8_t clr_u2, uint8_t clr_u1, uint8_t clr_u0)
{
	ASSERT_ERR((((uint32_t)clr_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)clr_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)clr_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)clr_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)clr_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)clr_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)clr_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)clr_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)clr_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)clr_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)clr_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)clr_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)clr_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)clr_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)clr_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)clr_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)clr_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR,  ((uint32_t)clr_d15 << 31) |((uint32_t)clr_d14 << 30) |((uint32_t)clr_d13 << 29) |((uint32_t)clr_d12 << 28) |((uint32_t)clr_d11 << 27) |((uint32_t)clr_d10 << 26) |((uint32_t)clr_d9 << 25) |((uint32_t)clr_d8 << 24) |((uint32_t)clr_d7 << 23) |((uint32_t)clr_d6 << 22) |((uint32_t)clr_d5 << 21) |((uint32_t)clr_d4 << 20) |((uint32_t)clr_d3 << 19) |((uint32_t)clr_d2 << 18) |((uint32_t)clr_d1 << 17) |((uint32_t)clr_d0 << 16) |((uint32_t)clr_u15 << 15) |((uint32_t)clr_u14 << 14) |((uint32_t)clr_u13 << 13) |((uint32_t)clr_u12 << 12) |((uint32_t)clr_u11 << 11) |((uint32_t)clr_u10 << 10) |((uint32_t)clr_u9 << 9) |((uint32_t)clr_u8 << 8) |((uint32_t)clr_u7 << 7) |((uint32_t)clr_u6 << 6) |((uint32_t)clr_u5 << 5) |((uint32_t)clr_u4 << 4) |((uint32_t)clr_u3 << 3) |((uint32_t)clr_u2 << 2) |((uint32_t)clr_u1 << 1) |((uint32_t)clr_u0 << 0));
}

__INLINE void pcie_wrap_pciew_int_clr_unpack(uint8_t* clr_d15, uint8_t* clr_d14, uint8_t* clr_d13, uint8_t* clr_d12, uint8_t* clr_d11, uint8_t* clr_d10, uint8_t* clr_d9, uint8_t* clr_d8, uint8_t* clr_d7, uint8_t* clr_d6, uint8_t* clr_d5, uint8_t* clr_d4, uint8_t* clr_d3, uint8_t* clr_d2, uint8_t* clr_d1, uint8_t* clr_d0, uint8_t* clr_u15, uint8_t* clr_u14, uint8_t* clr_u13, uint8_t* clr_u12, uint8_t* clr_u11, uint8_t* clr_u10, uint8_t* clr_u9, uint8_t* clr_u8, uint8_t* clr_u7, uint8_t* clr_u6, uint8_t* clr_u5, uint8_t* clr_u4, uint8_t* clr_u3, uint8_t* clr_u2, uint8_t* clr_u1, uint8_t* clr_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);

	*clr_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*clr_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*clr_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*clr_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*clr_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*clr_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*clr_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*clr_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*clr_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*clr_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*clr_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*clr_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*clr_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*clr_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*clr_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*clr_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*clr_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*clr_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*clr_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*clr_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*clr_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*clr_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*clr_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*clr_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*clr_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*clr_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*clr_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*clr_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*clr_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*clr_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*clr_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*clr_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_d_15_setf(uint8_t clrd15)
{
	ASSERT_ERR((((uint32_t)clrd15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)clrd15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_d_14_setf(uint8_t clrd14)
{
	ASSERT_ERR((((uint32_t)clrd14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)clrd14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_d_13_setf(uint8_t clrd13)
{
	ASSERT_ERR((((uint32_t)clrd13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)clrd13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_d_12_setf(uint8_t clrd12)
{
	ASSERT_ERR((((uint32_t)clrd12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)clrd12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_d_11_setf(uint8_t clrd11)
{
	ASSERT_ERR((((uint32_t)clrd11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)clrd11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_d_10_setf(uint8_t clrd10)
{
	ASSERT_ERR((((uint32_t)clrd10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)clrd10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_d_9_setf(uint8_t clrd9)
{
	ASSERT_ERR((((uint32_t)clrd9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)clrd9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_d_8_setf(uint8_t clrd8)
{
	ASSERT_ERR((((uint32_t)clrd8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)clrd8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_d_7_setf(uint8_t clrd7)
{
	ASSERT_ERR((((uint32_t)clrd7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)clrd7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_d_6_setf(uint8_t clrd6)
{
	ASSERT_ERR((((uint32_t)clrd6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)clrd6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_d_5_setf(uint8_t clrd5)
{
	ASSERT_ERR((((uint32_t)clrd5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)clrd5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_d_4_setf(uint8_t clrd4)
{
	ASSERT_ERR((((uint32_t)clrd4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)clrd4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_d_3_setf(uint8_t clrd3)
{
	ASSERT_ERR((((uint32_t)clrd3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)clrd3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_d_2_setf(uint8_t clrd2)
{
	ASSERT_ERR((((uint32_t)clrd2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)clrd2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_d_1_setf(uint8_t clrd1)
{
	ASSERT_ERR((((uint32_t)clrd1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)clrd1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_d_0_setf(uint8_t clrd0)
{
	ASSERT_ERR((((uint32_t)clrd0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)clrd0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_u_15_setf(uint8_t clru15)
{
	ASSERT_ERR((((uint32_t)clru15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)clru15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_u_14_setf(uint8_t clru14)
{
	ASSERT_ERR((((uint32_t)clru14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)clru14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_u_13_setf(uint8_t clru13)
{
	ASSERT_ERR((((uint32_t)clru13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)clru13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_u_12_setf(uint8_t clru12)
{
	ASSERT_ERR((((uint32_t)clru12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)clru12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_u_11_setf(uint8_t clru11)
{
	ASSERT_ERR((((uint32_t)clru11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)clru11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_u_10_setf(uint8_t clru10)
{
	ASSERT_ERR((((uint32_t)clru10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)clru10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_u_9_setf(uint8_t clru9)
{
	ASSERT_ERR((((uint32_t)clru9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)clru9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_u_8_setf(uint8_t clru8)
{
	ASSERT_ERR((((uint32_t)clru8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)clru8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_u_7_setf(uint8_t clru7)
{
	ASSERT_ERR((((uint32_t)clru7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)clru7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_u_6_setf(uint8_t clru6)
{
	ASSERT_ERR((((uint32_t)clru6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)clru6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_u_5_setf(uint8_t clru5)
{
	ASSERT_ERR((((uint32_t)clru5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)clru5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_u_4_setf(uint8_t clru4)
{
	ASSERT_ERR((((uint32_t)clru4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)clru4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_u_3_setf(uint8_t clru3)
{
	ASSERT_ERR((((uint32_t)clru3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)clru3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_u_2_setf(uint8_t clru2)
{
	ASSERT_ERR((((uint32_t)clru2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)clru2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_u_1_setf(uint8_t clru1)
{
	ASSERT_ERR((((uint32_t)clru1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)clru1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_int_clr_clr_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_int_clr_clr_u_0_setf(uint8_t clru0)
{
	ASSERT_ERR((((uint32_t)clru0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_CLR_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)clru0 <<0));
}

/**
 * @brief PCIEW_WAIT_CONF register definition
 *  Configuration of minimal wait cycles between LLIs register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 READ_WAIT_CONF            0x0
 *    15:00 WRITE_WAIT_CONF           0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_WAIT_CONF_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000224)
#define PCIE_WRAP_PCIEW_WAIT_CONF_OFFSET      0x00000224
#define PCIE_WRAP_PCIEW_WAIT_CONF_INDEX       0x00000089
#define PCIE_WRAP_PCIEW_WAIT_CONF_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_wait_conf_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_WAIT_CONF_ADDR);
}

__INLINE void pcie_wrap_pciew_wait_conf_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_WAIT_CONF_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_WAIT_CONF_READ_WAIT_CONF_MASK    ((uint32_t)0xFFFF0000)
#define PCIE_WRAP_PCIEW_WAIT_CONF_READ_WAIT_CONF_LSB    16
#define PCIE_WRAP_PCIEW_WAIT_CONF_READ_WAIT_CONF_WIDTH    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_WAIT_CONF_WRITE_WAIT_CONF_MASK    ((uint32_t)0x0000FFFF)
#define PCIE_WRAP_PCIEW_WAIT_CONF_WRITE_WAIT_CONF_LSB    0
#define PCIE_WRAP_PCIEW_WAIT_CONF_WRITE_WAIT_CONF_WIDTH    ((uint32_t)0x00000010)

#define PCIE_WRAP_PCIEW_WAIT_CONF_READ_WAIT_CONF_RST    0x0
#define PCIE_WRAP_PCIEW_WAIT_CONF_WRITE_WAIT_CONF_RST    0x0

__INLINE void pcie_wrap_pciew_wait_conf_pack(uint16_t read_wait_conf, uint16_t write_wait_conf)
{
	ASSERT_ERR((((uint32_t)read_wait_conf << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)write_wait_conf << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_WAIT_CONF_ADDR,  ((uint32_t)read_wait_conf << 16) |((uint32_t)write_wait_conf << 0));
}

__INLINE void pcie_wrap_pciew_wait_conf_unpack(uint16_t* read_wait_conf, uint16_t* write_wait_conf)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_WAIT_CONF_ADDR);

	*read_wait_conf = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*write_wait_conf = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t pcie_wrap_pciew_wait_conf_read_wait_conf_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_WAIT_CONF_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE void pcie_wrap_pciew_wait_conf_read_wait_conf_setf(uint16_t readwaitconf)
{
	ASSERT_ERR((((uint32_t)readwaitconf << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_WAIT_CONF_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_WAIT_CONF_ADDR) & ~((uint32_t)0xFFFF0000)) | ((uint32_t)readwaitconf <<16));
}
__INLINE uint16_t pcie_wrap_pciew_wait_conf_write_wait_conf_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_WAIT_CONF_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void pcie_wrap_pciew_wait_conf_write_wait_conf_setf(uint16_t writewaitconf)
{
	ASSERT_ERR((((uint32_t)writewaitconf << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_WAIT_CONF_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_WAIT_CONF_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)writewaitconf <<0));
}

/**
 * @brief PCIEW_MAX_XFER_SIZE register definition
 *  Configuration of maximal transfer size register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    07:04 READ_CODE                 0x9
 *    03:00 WRITE_CODE                0x9
 * </pre>
 */
#define PCIE_WRAP_PCIEW_MAX_XFER_SIZE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000228)
#define PCIE_WRAP_PCIEW_MAX_XFER_SIZE_OFFSET      0x00000228
#define PCIE_WRAP_PCIEW_MAX_XFER_SIZE_INDEX       0x0000008A
#define PCIE_WRAP_PCIEW_MAX_XFER_SIZE_RESET       0x00000099

__INLINE uint32_t  pcie_wrap_pciew_max_xfer_size_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_MAX_XFER_SIZE_ADDR);
}

__INLINE void pcie_wrap_pciew_max_xfer_size_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_MAX_XFER_SIZE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_MAX_XFER_SIZE_READ_CODE_MASK    ((uint32_t)0x000000F0)
#define PCIE_WRAP_PCIEW_MAX_XFER_SIZE_READ_CODE_LSB    4
#define PCIE_WRAP_PCIEW_MAX_XFER_SIZE_READ_CODE_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_MAX_XFER_SIZE_WRITE_CODE_MASK    ((uint32_t)0x0000000F)
#define PCIE_WRAP_PCIEW_MAX_XFER_SIZE_WRITE_CODE_LSB    0
#define PCIE_WRAP_PCIEW_MAX_XFER_SIZE_WRITE_CODE_WIDTH    ((uint32_t)0x00000004)

#define PCIE_WRAP_PCIEW_MAX_XFER_SIZE_READ_CODE_RST    0x9
#define PCIE_WRAP_PCIEW_MAX_XFER_SIZE_WRITE_CODE_RST    0x9

__INLINE void pcie_wrap_pciew_max_xfer_size_pack(uint8_t read_code, uint8_t write_code)
{
	ASSERT_ERR((((uint32_t)read_code << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)write_code << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_MAX_XFER_SIZE_ADDR,  ((uint32_t)read_code << 4) |((uint32_t)write_code << 0));
}

__INLINE void pcie_wrap_pciew_max_xfer_size_unpack(uint8_t* read_code, uint8_t* write_code)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_MAX_XFER_SIZE_ADDR);

	*read_code = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*write_code = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_max_xfer_size_read_code_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_MAX_XFER_SIZE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void pcie_wrap_pciew_max_xfer_size_read_code_setf(uint8_t readcode)
{
	ASSERT_ERR((((uint32_t)readcode << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_MAX_XFER_SIZE_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_MAX_XFER_SIZE_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)readcode <<4));
}
__INLINE uint8_t pcie_wrap_pciew_max_xfer_size_write_code_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_MAX_XFER_SIZE_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void pcie_wrap_pciew_max_xfer_size_write_code_setf(uint8_t writecode)
{
	ASSERT_ERR((((uint32_t)writecode << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_MAX_XFER_SIZE_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_MAX_XFER_SIZE_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)writecode <<0));
}

/**
 * @brief PCIEW_INT_LMAC_EN_CMD register definition
 *  LMAC interrupt enable command register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EN_CMD_D15                0              
 *    30    EN_CMD_D14                0              
 *    29    EN_CMD_D13                0              
 *    28    EN_CMD_D12                0              
 *    27    EN_CMD_D11                0              
 *    26    EN_CMD_D10                0              
 *    25    EN_CMD_D9                 0              
 *    24    EN_CMD_D8                 0              
 *    23    EN_CMD_D7                 0              
 *    22    EN_CMD_D6                 0              
 *    21    EN_CMD_D5                 0              
 *    20    EN_CMD_D4                 0              
 *    19    EN_CMD_D3                 0              
 *    18    EN_CMD_D2                 0              
 *    17    EN_CMD_D1                 0              
 *    16    EN_CMD_D0                 0              
 *    15    EN_CMD_U15                0              
 *    14    EN_CMD_U14                0              
 *    13    EN_CMD_U13                0              
 *    12    EN_CMD_U12                0              
 *    11    EN_CMD_U11                0              
 *    10    EN_CMD_U10                0              
 *    09    EN_CMD_U9                 0              
 *    08    EN_CMD_U8                 0              
 *    07    EN_CMD_U7                 0              
 *    06    EN_CMD_U6                 0              
 *    05    EN_CMD_U5                 0              
 *    04    EN_CMD_U4                 0              
 *    03    EN_CMD_U3                 0              
 *    02    EN_CMD_U2                 0              
 *    01    EN_CMD_U1                 0              
 *    00    EN_CMD_U0                 0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000022C)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_OFFSET      0x0000022C
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_INDEX       0x0000008B
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_lmac_en_cmd_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
}

__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_EN_CMD_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_pack(uint8_t en_cmd_d15, uint8_t en_cmd_d14, uint8_t en_cmd_d13, uint8_t en_cmd_d12, uint8_t en_cmd_d11, uint8_t en_cmd_d10, uint8_t en_cmd_d9, uint8_t en_cmd_d8, uint8_t en_cmd_d7, uint8_t en_cmd_d6, uint8_t en_cmd_d5, uint8_t en_cmd_d4, uint8_t en_cmd_d3, uint8_t en_cmd_d2, uint8_t en_cmd_d1, uint8_t en_cmd_d0, uint8_t en_cmd_u15, uint8_t en_cmd_u14, uint8_t en_cmd_u13, uint8_t en_cmd_u12, uint8_t en_cmd_u11, uint8_t en_cmd_u10, uint8_t en_cmd_u9, uint8_t en_cmd_u8, uint8_t en_cmd_u7, uint8_t en_cmd_u6, uint8_t en_cmd_u5, uint8_t en_cmd_u4, uint8_t en_cmd_u3, uint8_t en_cmd_u2, uint8_t en_cmd_u1, uint8_t en_cmd_u0)
{
	ASSERT_ERR((((uint32_t)en_cmd_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR,  ((uint32_t)en_cmd_d15 << 31) |((uint32_t)en_cmd_d14 << 30) |((uint32_t)en_cmd_d13 << 29) |((uint32_t)en_cmd_d12 << 28) |((uint32_t)en_cmd_d11 << 27) |((uint32_t)en_cmd_d10 << 26) |((uint32_t)en_cmd_d9 << 25) |((uint32_t)en_cmd_d8 << 24) |((uint32_t)en_cmd_d7 << 23) |((uint32_t)en_cmd_d6 << 22) |((uint32_t)en_cmd_d5 << 21) |((uint32_t)en_cmd_d4 << 20) |((uint32_t)en_cmd_d3 << 19) |((uint32_t)en_cmd_d2 << 18) |((uint32_t)en_cmd_d1 << 17) |((uint32_t)en_cmd_d0 << 16) |((uint32_t)en_cmd_u15 << 15) |((uint32_t)en_cmd_u14 << 14) |((uint32_t)en_cmd_u13 << 13) |((uint32_t)en_cmd_u12 << 12) |((uint32_t)en_cmd_u11 << 11) |((uint32_t)en_cmd_u10 << 10) |((uint32_t)en_cmd_u9 << 9) |((uint32_t)en_cmd_u8 << 8) |((uint32_t)en_cmd_u7 << 7) |((uint32_t)en_cmd_u6 << 6) |((uint32_t)en_cmd_u5 << 5) |((uint32_t)en_cmd_u4 << 4) |((uint32_t)en_cmd_u3 << 3) |((uint32_t)en_cmd_u2 << 2) |((uint32_t)en_cmd_u1 << 1) |((uint32_t)en_cmd_u0 << 0));
}

__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_unpack(uint8_t* en_cmd_d15, uint8_t* en_cmd_d14, uint8_t* en_cmd_d13, uint8_t* en_cmd_d12, uint8_t* en_cmd_d11, uint8_t* en_cmd_d10, uint8_t* en_cmd_d9, uint8_t* en_cmd_d8, uint8_t* en_cmd_d7, uint8_t* en_cmd_d6, uint8_t* en_cmd_d5, uint8_t* en_cmd_d4, uint8_t* en_cmd_d3, uint8_t* en_cmd_d2, uint8_t* en_cmd_d1, uint8_t* en_cmd_d0, uint8_t* en_cmd_u15, uint8_t* en_cmd_u14, uint8_t* en_cmd_u13, uint8_t* en_cmd_u12, uint8_t* en_cmd_u11, uint8_t* en_cmd_u10, uint8_t* en_cmd_u9, uint8_t* en_cmd_u8, uint8_t* en_cmd_u7, uint8_t* en_cmd_u6, uint8_t* en_cmd_u5, uint8_t* en_cmd_u4, uint8_t* en_cmd_u3, uint8_t* en_cmd_u2, uint8_t* en_cmd_u1, uint8_t* en_cmd_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);

	*en_cmd_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*en_cmd_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*en_cmd_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*en_cmd_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*en_cmd_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*en_cmd_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*en_cmd_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*en_cmd_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*en_cmd_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*en_cmd_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*en_cmd_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*en_cmd_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*en_cmd_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*en_cmd_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*en_cmd_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*en_cmd_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*en_cmd_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*en_cmd_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*en_cmd_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*en_cmd_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*en_cmd_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*en_cmd_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*en_cmd_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*en_cmd_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*en_cmd_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*en_cmd_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*en_cmd_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*en_cmd_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*en_cmd_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*en_cmd_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*en_cmd_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*en_cmd_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_15_setf(uint8_t encmdd15)
{
	ASSERT_ERR((((uint32_t)encmdd15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)encmdd15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_14_setf(uint8_t encmdd14)
{
	ASSERT_ERR((((uint32_t)encmdd14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)encmdd14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_13_setf(uint8_t encmdd13)
{
	ASSERT_ERR((((uint32_t)encmdd13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)encmdd13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_12_setf(uint8_t encmdd12)
{
	ASSERT_ERR((((uint32_t)encmdd12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)encmdd12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_11_setf(uint8_t encmdd11)
{
	ASSERT_ERR((((uint32_t)encmdd11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)encmdd11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_10_setf(uint8_t encmdd10)
{
	ASSERT_ERR((((uint32_t)encmdd10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)encmdd10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_9_setf(uint8_t encmdd9)
{
	ASSERT_ERR((((uint32_t)encmdd9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)encmdd9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_8_setf(uint8_t encmdd8)
{
	ASSERT_ERR((((uint32_t)encmdd8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)encmdd8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_7_setf(uint8_t encmdd7)
{
	ASSERT_ERR((((uint32_t)encmdd7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)encmdd7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_6_setf(uint8_t encmdd6)
{
	ASSERT_ERR((((uint32_t)encmdd6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)encmdd6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_5_setf(uint8_t encmdd5)
{
	ASSERT_ERR((((uint32_t)encmdd5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)encmdd5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_4_setf(uint8_t encmdd4)
{
	ASSERT_ERR((((uint32_t)encmdd4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)encmdd4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_3_setf(uint8_t encmdd3)
{
	ASSERT_ERR((((uint32_t)encmdd3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)encmdd3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_2_setf(uint8_t encmdd2)
{
	ASSERT_ERR((((uint32_t)encmdd2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)encmdd2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_1_setf(uint8_t encmdd1)
{
	ASSERT_ERR((((uint32_t)encmdd1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)encmdd1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_0_setf(uint8_t encmdd0)
{
	ASSERT_ERR((((uint32_t)encmdd0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)encmdd0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_15_setf(uint8_t encmdu15)
{
	ASSERT_ERR((((uint32_t)encmdu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)encmdu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_14_setf(uint8_t encmdu14)
{
	ASSERT_ERR((((uint32_t)encmdu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)encmdu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_13_setf(uint8_t encmdu13)
{
	ASSERT_ERR((((uint32_t)encmdu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)encmdu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_12_setf(uint8_t encmdu12)
{
	ASSERT_ERR((((uint32_t)encmdu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)encmdu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_11_setf(uint8_t encmdu11)
{
	ASSERT_ERR((((uint32_t)encmdu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)encmdu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_10_setf(uint8_t encmdu10)
{
	ASSERT_ERR((((uint32_t)encmdu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)encmdu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_9_setf(uint8_t encmdu9)
{
	ASSERT_ERR((((uint32_t)encmdu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)encmdu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_8_setf(uint8_t encmdu8)
{
	ASSERT_ERR((((uint32_t)encmdu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)encmdu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_7_setf(uint8_t encmdu7)
{
	ASSERT_ERR((((uint32_t)encmdu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)encmdu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_6_setf(uint8_t encmdu6)
{
	ASSERT_ERR((((uint32_t)encmdu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)encmdu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_5_setf(uint8_t encmdu5)
{
	ASSERT_ERR((((uint32_t)encmdu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)encmdu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_4_setf(uint8_t encmdu4)
{
	ASSERT_ERR((((uint32_t)encmdu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)encmdu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_3_setf(uint8_t encmdu3)
{
	ASSERT_ERR((((uint32_t)encmdu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)encmdu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_2_setf(uint8_t encmdu2)
{
	ASSERT_ERR((((uint32_t)encmdu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)encmdu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_1_setf(uint8_t encmdu1)
{
	ASSERT_ERR((((uint32_t)encmdu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)encmdu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_0_setf(uint8_t encmdu0)
{
	ASSERT_ERR((((uint32_t)encmdu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)encmdu0 <<0));
}

/**
 * @brief PCIEW_INT_LMAC_DIS_CMD register definition
 *  LMAC interrupt disable command register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    DIS_CMD_D15               0              
 *    30    DIS_CMD_D14               0              
 *    29    DIS_CMD_D13               0              
 *    28    DIS_CMD_D12               0              
 *    27    DIS_CMD_D11               0              
 *    26    DIS_CMD_D10               0              
 *    25    DIS_CMD_D9                0              
 *    24    DIS_CMD_D8                0              
 *    23    DIS_CMD_D7                0              
 *    22    DIS_CMD_D6                0              
 *    21    DIS_CMD_D5                0              
 *    20    DIS_CMD_D4                0              
 *    19    DIS_CMD_D3                0              
 *    18    DIS_CMD_D2                0              
 *    17    DIS_CMD_D1                0              
 *    16    DIS_CMD_D0                0              
 *    15    DIS_CMD_U15               0              
 *    14    DIS_CMD_U14               0              
 *    13    DIS_CMD_U13               0              
 *    12    DIS_CMD_U12               0              
 *    11    DIS_CMD_U11               0              
 *    10    DIS_CMD_U10               0              
 *    09    DIS_CMD_U9                0              
 *    08    DIS_CMD_U8                0              
 *    07    DIS_CMD_U7                0              
 *    06    DIS_CMD_U6                0              
 *    05    DIS_CMD_U5                0              
 *    04    DIS_CMD_U4                0              
 *    03    DIS_CMD_U3                0              
 *    02    DIS_CMD_U2                0              
 *    01    DIS_CMD_U1                0              
 *    00    DIS_CMD_U0                0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000230)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_OFFSET      0x00000230
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_INDEX       0x0000008C
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_lmac_dis_cmd_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
}

__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_DIS_CMD_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_pack(uint8_t dis_cmd_d15, uint8_t dis_cmd_d14, uint8_t dis_cmd_d13, uint8_t dis_cmd_d12, uint8_t dis_cmd_d11, uint8_t dis_cmd_d10, uint8_t dis_cmd_d9, uint8_t dis_cmd_d8, uint8_t dis_cmd_d7, uint8_t dis_cmd_d6, uint8_t dis_cmd_d5, uint8_t dis_cmd_d4, uint8_t dis_cmd_d3, uint8_t dis_cmd_d2, uint8_t dis_cmd_d1, uint8_t dis_cmd_d0, uint8_t dis_cmd_u15, uint8_t dis_cmd_u14, uint8_t dis_cmd_u13, uint8_t dis_cmd_u12, uint8_t dis_cmd_u11, uint8_t dis_cmd_u10, uint8_t dis_cmd_u9, uint8_t dis_cmd_u8, uint8_t dis_cmd_u7, uint8_t dis_cmd_u6, uint8_t dis_cmd_u5, uint8_t dis_cmd_u4, uint8_t dis_cmd_u3, uint8_t dis_cmd_u2, uint8_t dis_cmd_u1, uint8_t dis_cmd_u0)
{
	ASSERT_ERR((((uint32_t)dis_cmd_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR,  ((uint32_t)dis_cmd_d15 << 31) |((uint32_t)dis_cmd_d14 << 30) |((uint32_t)dis_cmd_d13 << 29) |((uint32_t)dis_cmd_d12 << 28) |((uint32_t)dis_cmd_d11 << 27) |((uint32_t)dis_cmd_d10 << 26) |((uint32_t)dis_cmd_d9 << 25) |((uint32_t)dis_cmd_d8 << 24) |((uint32_t)dis_cmd_d7 << 23) |((uint32_t)dis_cmd_d6 << 22) |((uint32_t)dis_cmd_d5 << 21) |((uint32_t)dis_cmd_d4 << 20) |((uint32_t)dis_cmd_d3 << 19) |((uint32_t)dis_cmd_d2 << 18) |((uint32_t)dis_cmd_d1 << 17) |((uint32_t)dis_cmd_d0 << 16) |((uint32_t)dis_cmd_u15 << 15) |((uint32_t)dis_cmd_u14 << 14) |((uint32_t)dis_cmd_u13 << 13) |((uint32_t)dis_cmd_u12 << 12) |((uint32_t)dis_cmd_u11 << 11) |((uint32_t)dis_cmd_u10 << 10) |((uint32_t)dis_cmd_u9 << 9) |((uint32_t)dis_cmd_u8 << 8) |((uint32_t)dis_cmd_u7 << 7) |((uint32_t)dis_cmd_u6 << 6) |((uint32_t)dis_cmd_u5 << 5) |((uint32_t)dis_cmd_u4 << 4) |((uint32_t)dis_cmd_u3 << 3) |((uint32_t)dis_cmd_u2 << 2) |((uint32_t)dis_cmd_u1 << 1) |((uint32_t)dis_cmd_u0 << 0));
}

__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_unpack(uint8_t* dis_cmd_d15, uint8_t* dis_cmd_d14, uint8_t* dis_cmd_d13, uint8_t* dis_cmd_d12, uint8_t* dis_cmd_d11, uint8_t* dis_cmd_d10, uint8_t* dis_cmd_d9, uint8_t* dis_cmd_d8, uint8_t* dis_cmd_d7, uint8_t* dis_cmd_d6, uint8_t* dis_cmd_d5, uint8_t* dis_cmd_d4, uint8_t* dis_cmd_d3, uint8_t* dis_cmd_d2, uint8_t* dis_cmd_d1, uint8_t* dis_cmd_d0, uint8_t* dis_cmd_u15, uint8_t* dis_cmd_u14, uint8_t* dis_cmd_u13, uint8_t* dis_cmd_u12, uint8_t* dis_cmd_u11, uint8_t* dis_cmd_u10, uint8_t* dis_cmd_u9, uint8_t* dis_cmd_u8, uint8_t* dis_cmd_u7, uint8_t* dis_cmd_u6, uint8_t* dis_cmd_u5, uint8_t* dis_cmd_u4, uint8_t* dis_cmd_u3, uint8_t* dis_cmd_u2, uint8_t* dis_cmd_u1, uint8_t* dis_cmd_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);

	*dis_cmd_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*dis_cmd_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*dis_cmd_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*dis_cmd_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*dis_cmd_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*dis_cmd_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*dis_cmd_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*dis_cmd_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*dis_cmd_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*dis_cmd_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*dis_cmd_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*dis_cmd_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*dis_cmd_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*dis_cmd_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*dis_cmd_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*dis_cmd_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*dis_cmd_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*dis_cmd_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*dis_cmd_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*dis_cmd_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*dis_cmd_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*dis_cmd_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*dis_cmd_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*dis_cmd_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*dis_cmd_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*dis_cmd_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*dis_cmd_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*dis_cmd_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*dis_cmd_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*dis_cmd_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*dis_cmd_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*dis_cmd_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_15_setf(uint8_t discmdd15)
{
	ASSERT_ERR((((uint32_t)discmdd15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)discmdd15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_14_setf(uint8_t discmdd14)
{
	ASSERT_ERR((((uint32_t)discmdd14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)discmdd14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_13_setf(uint8_t discmdd13)
{
	ASSERT_ERR((((uint32_t)discmdd13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)discmdd13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_12_setf(uint8_t discmdd12)
{
	ASSERT_ERR((((uint32_t)discmdd12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)discmdd12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_11_setf(uint8_t discmdd11)
{
	ASSERT_ERR((((uint32_t)discmdd11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)discmdd11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_10_setf(uint8_t discmdd10)
{
	ASSERT_ERR((((uint32_t)discmdd10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)discmdd10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_9_setf(uint8_t discmdd9)
{
	ASSERT_ERR((((uint32_t)discmdd9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)discmdd9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_8_setf(uint8_t discmdd8)
{
	ASSERT_ERR((((uint32_t)discmdd8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)discmdd8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_7_setf(uint8_t discmdd7)
{
	ASSERT_ERR((((uint32_t)discmdd7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)discmdd7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_6_setf(uint8_t discmdd6)
{
	ASSERT_ERR((((uint32_t)discmdd6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)discmdd6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_5_setf(uint8_t discmdd5)
{
	ASSERT_ERR((((uint32_t)discmdd5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)discmdd5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_4_setf(uint8_t discmdd4)
{
	ASSERT_ERR((((uint32_t)discmdd4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)discmdd4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_3_setf(uint8_t discmdd3)
{
	ASSERT_ERR((((uint32_t)discmdd3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)discmdd3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_2_setf(uint8_t discmdd2)
{
	ASSERT_ERR((((uint32_t)discmdd2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)discmdd2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_1_setf(uint8_t discmdd1)
{
	ASSERT_ERR((((uint32_t)discmdd1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)discmdd1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_0_setf(uint8_t discmdd0)
{
	ASSERT_ERR((((uint32_t)discmdd0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)discmdd0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_15_setf(uint8_t discmdu15)
{
	ASSERT_ERR((((uint32_t)discmdu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)discmdu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_14_setf(uint8_t discmdu14)
{
	ASSERT_ERR((((uint32_t)discmdu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)discmdu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_13_setf(uint8_t discmdu13)
{
	ASSERT_ERR((((uint32_t)discmdu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)discmdu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_12_setf(uint8_t discmdu12)
{
	ASSERT_ERR((((uint32_t)discmdu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)discmdu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_11_setf(uint8_t discmdu11)
{
	ASSERT_ERR((((uint32_t)discmdu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)discmdu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_10_setf(uint8_t discmdu10)
{
	ASSERT_ERR((((uint32_t)discmdu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)discmdu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_9_setf(uint8_t discmdu9)
{
	ASSERT_ERR((((uint32_t)discmdu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)discmdu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_8_setf(uint8_t discmdu8)
{
	ASSERT_ERR((((uint32_t)discmdu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)discmdu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_7_setf(uint8_t discmdu7)
{
	ASSERT_ERR((((uint32_t)discmdu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)discmdu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_6_setf(uint8_t discmdu6)
{
	ASSERT_ERR((((uint32_t)discmdu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)discmdu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_5_setf(uint8_t discmdu5)
{
	ASSERT_ERR((((uint32_t)discmdu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)discmdu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_4_setf(uint8_t discmdu4)
{
	ASSERT_ERR((((uint32_t)discmdu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)discmdu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_3_setf(uint8_t discmdu3)
{
	ASSERT_ERR((((uint32_t)discmdu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)discmdu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_2_setf(uint8_t discmdu2)
{
	ASSERT_ERR((((uint32_t)discmdu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)discmdu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_1_setf(uint8_t discmdu1)
{
	ASSERT_ERR((((uint32_t)discmdu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)discmdu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_0_setf(uint8_t discmdu0)
{
	ASSERT_ERR((((uint32_t)discmdu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)discmdu0 <<0));
}

/**
 * @brief PCIEW_INT_UMAC_EN_CMD register definition
 *  UMAC interrupt enable command register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EN_CMD_D15                0              
 *    30    EN_CMD_D14                0              
 *    29    EN_CMD_D13                0              
 *    28    EN_CMD_D12                0              
 *    27    EN_CMD_D11                0              
 *    26    EN_CMD_D10                0              
 *    25    EN_CMD_D9                 0              
 *    24    EN_CMD_D8                 0              
 *    23    EN_CMD_D7                 0              
 *    22    EN_CMD_D6                 0              
 *    21    EN_CMD_D5                 0              
 *    20    EN_CMD_D4                 0              
 *    19    EN_CMD_D3                 0              
 *    18    EN_CMD_D2                 0              
 *    17    EN_CMD_D1                 0              
 *    16    EN_CMD_D0                 0              
 *    15    EN_CMD_U15                0              
 *    14    EN_CMD_U14                0              
 *    13    EN_CMD_U13                0              
 *    12    EN_CMD_U12                0              
 *    11    EN_CMD_U11                0              
 *    10    EN_CMD_U10                0              
 *    09    EN_CMD_U9                 0              
 *    08    EN_CMD_U8                 0              
 *    07    EN_CMD_U7                 0              
 *    06    EN_CMD_U6                 0              
 *    05    EN_CMD_U5                 0              
 *    04    EN_CMD_U4                 0              
 *    03    EN_CMD_U3                 0              
 *    02    EN_CMD_U2                 0              
 *    01    EN_CMD_U1                 0              
 *    00    EN_CMD_U0                 0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000234)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_OFFSET      0x00000234
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_INDEX       0x0000008D
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_umac_en_cmd_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
}

__INLINE void pcie_wrap_pciew_int_umac_en_cmd_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_EN_CMD_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_umac_en_cmd_pack(uint8_t en_cmd_d15, uint8_t en_cmd_d14, uint8_t en_cmd_d13, uint8_t en_cmd_d12, uint8_t en_cmd_d11, uint8_t en_cmd_d10, uint8_t en_cmd_d9, uint8_t en_cmd_d8, uint8_t en_cmd_d7, uint8_t en_cmd_d6, uint8_t en_cmd_d5, uint8_t en_cmd_d4, uint8_t en_cmd_d3, uint8_t en_cmd_d2, uint8_t en_cmd_d1, uint8_t en_cmd_d0, uint8_t en_cmd_u15, uint8_t en_cmd_u14, uint8_t en_cmd_u13, uint8_t en_cmd_u12, uint8_t en_cmd_u11, uint8_t en_cmd_u10, uint8_t en_cmd_u9, uint8_t en_cmd_u8, uint8_t en_cmd_u7, uint8_t en_cmd_u6, uint8_t en_cmd_u5, uint8_t en_cmd_u4, uint8_t en_cmd_u3, uint8_t en_cmd_u2, uint8_t en_cmd_u1, uint8_t en_cmd_u0)
{
	ASSERT_ERR((((uint32_t)en_cmd_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR,  ((uint32_t)en_cmd_d15 << 31) |((uint32_t)en_cmd_d14 << 30) |((uint32_t)en_cmd_d13 << 29) |((uint32_t)en_cmd_d12 << 28) |((uint32_t)en_cmd_d11 << 27) |((uint32_t)en_cmd_d10 << 26) |((uint32_t)en_cmd_d9 << 25) |((uint32_t)en_cmd_d8 << 24) |((uint32_t)en_cmd_d7 << 23) |((uint32_t)en_cmd_d6 << 22) |((uint32_t)en_cmd_d5 << 21) |((uint32_t)en_cmd_d4 << 20) |((uint32_t)en_cmd_d3 << 19) |((uint32_t)en_cmd_d2 << 18) |((uint32_t)en_cmd_d1 << 17) |((uint32_t)en_cmd_d0 << 16) |((uint32_t)en_cmd_u15 << 15) |((uint32_t)en_cmd_u14 << 14) |((uint32_t)en_cmd_u13 << 13) |((uint32_t)en_cmd_u12 << 12) |((uint32_t)en_cmd_u11 << 11) |((uint32_t)en_cmd_u10 << 10) |((uint32_t)en_cmd_u9 << 9) |((uint32_t)en_cmd_u8 << 8) |((uint32_t)en_cmd_u7 << 7) |((uint32_t)en_cmd_u6 << 6) |((uint32_t)en_cmd_u5 << 5) |((uint32_t)en_cmd_u4 << 4) |((uint32_t)en_cmd_u3 << 3) |((uint32_t)en_cmd_u2 << 2) |((uint32_t)en_cmd_u1 << 1) |((uint32_t)en_cmd_u0 << 0));
}

__INLINE void pcie_wrap_pciew_int_umac_en_cmd_unpack(uint8_t* en_cmd_d15, uint8_t* en_cmd_d14, uint8_t* en_cmd_d13, uint8_t* en_cmd_d12, uint8_t* en_cmd_d11, uint8_t* en_cmd_d10, uint8_t* en_cmd_d9, uint8_t* en_cmd_d8, uint8_t* en_cmd_d7, uint8_t* en_cmd_d6, uint8_t* en_cmd_d5, uint8_t* en_cmd_d4, uint8_t* en_cmd_d3, uint8_t* en_cmd_d2, uint8_t* en_cmd_d1, uint8_t* en_cmd_d0, uint8_t* en_cmd_u15, uint8_t* en_cmd_u14, uint8_t* en_cmd_u13, uint8_t* en_cmd_u12, uint8_t* en_cmd_u11, uint8_t* en_cmd_u10, uint8_t* en_cmd_u9, uint8_t* en_cmd_u8, uint8_t* en_cmd_u7, uint8_t* en_cmd_u6, uint8_t* en_cmd_u5, uint8_t* en_cmd_u4, uint8_t* en_cmd_u3, uint8_t* en_cmd_u2, uint8_t* en_cmd_u1, uint8_t* en_cmd_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);

	*en_cmd_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*en_cmd_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*en_cmd_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*en_cmd_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*en_cmd_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*en_cmd_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*en_cmd_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*en_cmd_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*en_cmd_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*en_cmd_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*en_cmd_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*en_cmd_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*en_cmd_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*en_cmd_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*en_cmd_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*en_cmd_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*en_cmd_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*en_cmd_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*en_cmd_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*en_cmd_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*en_cmd_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*en_cmd_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*en_cmd_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*en_cmd_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*en_cmd_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*en_cmd_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*en_cmd_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*en_cmd_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*en_cmd_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*en_cmd_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*en_cmd_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*en_cmd_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_15_setf(uint8_t encmdd15)
{
	ASSERT_ERR((((uint32_t)encmdd15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)encmdd15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_14_setf(uint8_t encmdd14)
{
	ASSERT_ERR((((uint32_t)encmdd14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)encmdd14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_13_setf(uint8_t encmdd13)
{
	ASSERT_ERR((((uint32_t)encmdd13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)encmdd13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_12_setf(uint8_t encmdd12)
{
	ASSERT_ERR((((uint32_t)encmdd12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)encmdd12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_11_setf(uint8_t encmdd11)
{
	ASSERT_ERR((((uint32_t)encmdd11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)encmdd11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_10_setf(uint8_t encmdd10)
{
	ASSERT_ERR((((uint32_t)encmdd10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)encmdd10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_9_setf(uint8_t encmdd9)
{
	ASSERT_ERR((((uint32_t)encmdd9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)encmdd9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_8_setf(uint8_t encmdd8)
{
	ASSERT_ERR((((uint32_t)encmdd8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)encmdd8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_7_setf(uint8_t encmdd7)
{
	ASSERT_ERR((((uint32_t)encmdd7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)encmdd7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_6_setf(uint8_t encmdd6)
{
	ASSERT_ERR((((uint32_t)encmdd6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)encmdd6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_5_setf(uint8_t encmdd5)
{
	ASSERT_ERR((((uint32_t)encmdd5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)encmdd5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_4_setf(uint8_t encmdd4)
{
	ASSERT_ERR((((uint32_t)encmdd4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)encmdd4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_3_setf(uint8_t encmdd3)
{
	ASSERT_ERR((((uint32_t)encmdd3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)encmdd3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_2_setf(uint8_t encmdd2)
{
	ASSERT_ERR((((uint32_t)encmdd2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)encmdd2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_1_setf(uint8_t encmdd1)
{
	ASSERT_ERR((((uint32_t)encmdd1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)encmdd1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_d_0_setf(uint8_t encmdd0)
{
	ASSERT_ERR((((uint32_t)encmdd0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)encmdd0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_15_setf(uint8_t encmdu15)
{
	ASSERT_ERR((((uint32_t)encmdu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)encmdu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_14_setf(uint8_t encmdu14)
{
	ASSERT_ERR((((uint32_t)encmdu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)encmdu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_13_setf(uint8_t encmdu13)
{
	ASSERT_ERR((((uint32_t)encmdu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)encmdu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_12_setf(uint8_t encmdu12)
{
	ASSERT_ERR((((uint32_t)encmdu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)encmdu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_11_setf(uint8_t encmdu11)
{
	ASSERT_ERR((((uint32_t)encmdu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)encmdu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_10_setf(uint8_t encmdu10)
{
	ASSERT_ERR((((uint32_t)encmdu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)encmdu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_9_setf(uint8_t encmdu9)
{
	ASSERT_ERR((((uint32_t)encmdu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)encmdu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_8_setf(uint8_t encmdu8)
{
	ASSERT_ERR((((uint32_t)encmdu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)encmdu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_7_setf(uint8_t encmdu7)
{
	ASSERT_ERR((((uint32_t)encmdu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)encmdu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_6_setf(uint8_t encmdu6)
{
	ASSERT_ERR((((uint32_t)encmdu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)encmdu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_5_setf(uint8_t encmdu5)
{
	ASSERT_ERR((((uint32_t)encmdu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)encmdu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_4_setf(uint8_t encmdu4)
{
	ASSERT_ERR((((uint32_t)encmdu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)encmdu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_3_setf(uint8_t encmdu3)
{
	ASSERT_ERR((((uint32_t)encmdu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)encmdu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_2_setf(uint8_t encmdu2)
{
	ASSERT_ERR((((uint32_t)encmdu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)encmdu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_1_setf(uint8_t encmdu1)
{
	ASSERT_ERR((((uint32_t)encmdu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)encmdu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_int_umac_en_cmd_en_cmd_u_0_setf(uint8_t encmdu0)
{
	ASSERT_ERR((((uint32_t)encmdu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)encmdu0 <<0));
}

/**
 * @brief PCIEW_INT_UMAC_DIS_CMD register definition
 *  UMAC interrupt disable command register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    DIS_CMD_D15               0              
 *    30    DIS_CMD_D14               0              
 *    29    DIS_CMD_D13               0              
 *    28    DIS_CMD_D12               0              
 *    27    DIS_CMD_D11               0              
 *    26    DIS_CMD_D10               0              
 *    25    DIS_CMD_D9                0              
 *    24    DIS_CMD_D8                0              
 *    23    DIS_CMD_D7                0              
 *    22    DIS_CMD_D6                0              
 *    21    DIS_CMD_D5                0              
 *    20    DIS_CMD_D4                0              
 *    19    DIS_CMD_D3                0              
 *    18    DIS_CMD_D2                0              
 *    17    DIS_CMD_D1                0              
 *    16    DIS_CMD_D0                0              
 *    15    DIS_CMD_U15               0              
 *    14    DIS_CMD_U14               0              
 *    13    DIS_CMD_U13               0              
 *    12    DIS_CMD_U12               0              
 *    11    DIS_CMD_U11               0              
 *    10    DIS_CMD_U10               0              
 *    09    DIS_CMD_U9                0              
 *    08    DIS_CMD_U8                0              
 *    07    DIS_CMD_U7                0              
 *    06    DIS_CMD_U6                0              
 *    05    DIS_CMD_U5                0              
 *    04    DIS_CMD_U4                0              
 *    03    DIS_CMD_U3                0              
 *    02    DIS_CMD_U2                0              
 *    01    DIS_CMD_U1                0              
 *    00    DIS_CMD_U0                0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000238)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_OFFSET      0x00000238
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_INDEX       0x0000008E
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_umac_dis_cmd_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
}

__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_DIS_CMD_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_pack(uint8_t dis_cmd_d15, uint8_t dis_cmd_d14, uint8_t dis_cmd_d13, uint8_t dis_cmd_d12, uint8_t dis_cmd_d11, uint8_t dis_cmd_d10, uint8_t dis_cmd_d9, uint8_t dis_cmd_d8, uint8_t dis_cmd_d7, uint8_t dis_cmd_d6, uint8_t dis_cmd_d5, uint8_t dis_cmd_d4, uint8_t dis_cmd_d3, uint8_t dis_cmd_d2, uint8_t dis_cmd_d1, uint8_t dis_cmd_d0, uint8_t dis_cmd_u15, uint8_t dis_cmd_u14, uint8_t dis_cmd_u13, uint8_t dis_cmd_u12, uint8_t dis_cmd_u11, uint8_t dis_cmd_u10, uint8_t dis_cmd_u9, uint8_t dis_cmd_u8, uint8_t dis_cmd_u7, uint8_t dis_cmd_u6, uint8_t dis_cmd_u5, uint8_t dis_cmd_u4, uint8_t dis_cmd_u3, uint8_t dis_cmd_u2, uint8_t dis_cmd_u1, uint8_t dis_cmd_u0)
{
	ASSERT_ERR((((uint32_t)dis_cmd_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR,  ((uint32_t)dis_cmd_d15 << 31) |((uint32_t)dis_cmd_d14 << 30) |((uint32_t)dis_cmd_d13 << 29) |((uint32_t)dis_cmd_d12 << 28) |((uint32_t)dis_cmd_d11 << 27) |((uint32_t)dis_cmd_d10 << 26) |((uint32_t)dis_cmd_d9 << 25) |((uint32_t)dis_cmd_d8 << 24) |((uint32_t)dis_cmd_d7 << 23) |((uint32_t)dis_cmd_d6 << 22) |((uint32_t)dis_cmd_d5 << 21) |((uint32_t)dis_cmd_d4 << 20) |((uint32_t)dis_cmd_d3 << 19) |((uint32_t)dis_cmd_d2 << 18) |((uint32_t)dis_cmd_d1 << 17) |((uint32_t)dis_cmd_d0 << 16) |((uint32_t)dis_cmd_u15 << 15) |((uint32_t)dis_cmd_u14 << 14) |((uint32_t)dis_cmd_u13 << 13) |((uint32_t)dis_cmd_u12 << 12) |((uint32_t)dis_cmd_u11 << 11) |((uint32_t)dis_cmd_u10 << 10) |((uint32_t)dis_cmd_u9 << 9) |((uint32_t)dis_cmd_u8 << 8) |((uint32_t)dis_cmd_u7 << 7) |((uint32_t)dis_cmd_u6 << 6) |((uint32_t)dis_cmd_u5 << 5) |((uint32_t)dis_cmd_u4 << 4) |((uint32_t)dis_cmd_u3 << 3) |((uint32_t)dis_cmd_u2 << 2) |((uint32_t)dis_cmd_u1 << 1) |((uint32_t)dis_cmd_u0 << 0));
}

__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_unpack(uint8_t* dis_cmd_d15, uint8_t* dis_cmd_d14, uint8_t* dis_cmd_d13, uint8_t* dis_cmd_d12, uint8_t* dis_cmd_d11, uint8_t* dis_cmd_d10, uint8_t* dis_cmd_d9, uint8_t* dis_cmd_d8, uint8_t* dis_cmd_d7, uint8_t* dis_cmd_d6, uint8_t* dis_cmd_d5, uint8_t* dis_cmd_d4, uint8_t* dis_cmd_d3, uint8_t* dis_cmd_d2, uint8_t* dis_cmd_d1, uint8_t* dis_cmd_d0, uint8_t* dis_cmd_u15, uint8_t* dis_cmd_u14, uint8_t* dis_cmd_u13, uint8_t* dis_cmd_u12, uint8_t* dis_cmd_u11, uint8_t* dis_cmd_u10, uint8_t* dis_cmd_u9, uint8_t* dis_cmd_u8, uint8_t* dis_cmd_u7, uint8_t* dis_cmd_u6, uint8_t* dis_cmd_u5, uint8_t* dis_cmd_u4, uint8_t* dis_cmd_u3, uint8_t* dis_cmd_u2, uint8_t* dis_cmd_u1, uint8_t* dis_cmd_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);

	*dis_cmd_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*dis_cmd_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*dis_cmd_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*dis_cmd_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*dis_cmd_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*dis_cmd_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*dis_cmd_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*dis_cmd_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*dis_cmd_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*dis_cmd_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*dis_cmd_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*dis_cmd_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*dis_cmd_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*dis_cmd_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*dis_cmd_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*dis_cmd_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*dis_cmd_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*dis_cmd_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*dis_cmd_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*dis_cmd_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*dis_cmd_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*dis_cmd_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*dis_cmd_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*dis_cmd_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*dis_cmd_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*dis_cmd_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*dis_cmd_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*dis_cmd_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*dis_cmd_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*dis_cmd_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*dis_cmd_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*dis_cmd_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_15_setf(uint8_t discmdd15)
{
	ASSERT_ERR((((uint32_t)discmdd15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)discmdd15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_14_setf(uint8_t discmdd14)
{
	ASSERT_ERR((((uint32_t)discmdd14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)discmdd14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_13_setf(uint8_t discmdd13)
{
	ASSERT_ERR((((uint32_t)discmdd13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)discmdd13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_12_setf(uint8_t discmdd12)
{
	ASSERT_ERR((((uint32_t)discmdd12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)discmdd12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_11_setf(uint8_t discmdd11)
{
	ASSERT_ERR((((uint32_t)discmdd11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)discmdd11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_10_setf(uint8_t discmdd10)
{
	ASSERT_ERR((((uint32_t)discmdd10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)discmdd10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_9_setf(uint8_t discmdd9)
{
	ASSERT_ERR((((uint32_t)discmdd9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)discmdd9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_8_setf(uint8_t discmdd8)
{
	ASSERT_ERR((((uint32_t)discmdd8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)discmdd8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_7_setf(uint8_t discmdd7)
{
	ASSERT_ERR((((uint32_t)discmdd7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)discmdd7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_6_setf(uint8_t discmdd6)
{
	ASSERT_ERR((((uint32_t)discmdd6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)discmdd6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_5_setf(uint8_t discmdd5)
{
	ASSERT_ERR((((uint32_t)discmdd5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)discmdd5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_4_setf(uint8_t discmdd4)
{
	ASSERT_ERR((((uint32_t)discmdd4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)discmdd4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_3_setf(uint8_t discmdd3)
{
	ASSERT_ERR((((uint32_t)discmdd3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)discmdd3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_2_setf(uint8_t discmdd2)
{
	ASSERT_ERR((((uint32_t)discmdd2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)discmdd2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_1_setf(uint8_t discmdd1)
{
	ASSERT_ERR((((uint32_t)discmdd1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)discmdd1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_d_0_setf(uint8_t discmdd0)
{
	ASSERT_ERR((((uint32_t)discmdd0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)discmdd0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_15_setf(uint8_t discmdu15)
{
	ASSERT_ERR((((uint32_t)discmdu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)discmdu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_14_setf(uint8_t discmdu14)
{
	ASSERT_ERR((((uint32_t)discmdu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)discmdu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_13_setf(uint8_t discmdu13)
{
	ASSERT_ERR((((uint32_t)discmdu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)discmdu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_12_setf(uint8_t discmdu12)
{
	ASSERT_ERR((((uint32_t)discmdu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)discmdu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_11_setf(uint8_t discmdu11)
{
	ASSERT_ERR((((uint32_t)discmdu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)discmdu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_10_setf(uint8_t discmdu10)
{
	ASSERT_ERR((((uint32_t)discmdu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)discmdu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_9_setf(uint8_t discmdu9)
{
	ASSERT_ERR((((uint32_t)discmdu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)discmdu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_8_setf(uint8_t discmdu8)
{
	ASSERT_ERR((((uint32_t)discmdu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)discmdu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_7_setf(uint8_t discmdu7)
{
	ASSERT_ERR((((uint32_t)discmdu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)discmdu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_6_setf(uint8_t discmdu6)
{
	ASSERT_ERR((((uint32_t)discmdu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)discmdu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_5_setf(uint8_t discmdu5)
{
	ASSERT_ERR((((uint32_t)discmdu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)discmdu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_4_setf(uint8_t discmdu4)
{
	ASSERT_ERR((((uint32_t)discmdu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)discmdu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_3_setf(uint8_t discmdu3)
{
	ASSERT_ERR((((uint32_t)discmdu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)discmdu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_2_setf(uint8_t discmdu2)
{
	ASSERT_ERR((((uint32_t)discmdu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)discmdu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_1_setf(uint8_t discmdu1)
{
	ASSERT_ERR((((uint32_t)discmdu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)discmdu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_int_umac_dis_cmd_dis_cmd_u_0_setf(uint8_t discmdu0)
{
	ASSERT_ERR((((uint32_t)discmdu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)discmdu0 <<0));
}

/**
 * @brief PCIEW_CONF register definition
 *  PCIEW general configuration register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    10:08 DEBUG_BUS_SELECT          0x0
 *    07:04 DW_LLI_EXTENSION          0x0
 *    03    HOST_ADDRESS_MODE         0              
 *    02    ENFORCE_WR_CPL_ORDER      1              
 *    01    ENFORCE_RD_CPL_ORDER      1              
 *    00    USE_EDMA_INT              1              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_CONF_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000023C)
#define PCIE_WRAP_PCIEW_CONF_OFFSET      0x0000023C
#define PCIE_WRAP_PCIEW_CONF_INDEX       0x0000008F
#define PCIE_WRAP_PCIEW_CONF_RESET       0x00000007

__INLINE uint32_t  pcie_wrap_pciew_conf_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_CONF_ADDR);
}

__INLINE void pcie_wrap_pciew_conf_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_CONF_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_CONF_DEBUG_BUS_SELECT_MASK    ((uint32_t)0x00000700)
#define PCIE_WRAP_PCIEW_CONF_DEBUG_BUS_SELECT_LSB    8
#define PCIE_WRAP_PCIEW_CONF_DEBUG_BUS_SELECT_WIDTH    ((uint32_t)0x00000003)
#define PCIE_WRAP_PCIEW_CONF_DW_LLI_EXTENSION_MASK    ((uint32_t)0x000000F0)
#define PCIE_WRAP_PCIEW_CONF_DW_LLI_EXTENSION_LSB    4
#define PCIE_WRAP_PCIEW_CONF_DW_LLI_EXTENSION_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_CONF_HOST_ADDRESS_MODE_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_CONF_HOST_ADDRESS_MODE_POS    3
#define PCIE_WRAP_PCIEW_CONF_ENFORCE_WR_CPL_ORDER_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_CONF_ENFORCE_WR_CPL_ORDER_POS    2
#define PCIE_WRAP_PCIEW_CONF_ENFORCE_RD_CPL_ORDER_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_CONF_ENFORCE_RD_CPL_ORDER_POS    1
#define PCIE_WRAP_PCIEW_CONF_USE_EDMA_INT_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_CONF_USE_EDMA_INT_POS    0

#define PCIE_WRAP_PCIEW_CONF_DEBUG_BUS_SELECT_RST    0x0
#define PCIE_WRAP_PCIEW_CONF_DW_LLI_EXTENSION_RST    0x0
#define PCIE_WRAP_PCIEW_CONF_HOST_ADDRESS_MODE_RST    0x0
#define PCIE_WRAP_PCIEW_CONF_ENFORCE_WR_CPL_ORDER_RST    0x1
#define PCIE_WRAP_PCIEW_CONF_ENFORCE_RD_CPL_ORDER_RST    0x1
#define PCIE_WRAP_PCIEW_CONF_USE_EDMA_INT_RST    0x1

__INLINE void pcie_wrap_pciew_conf_pack(uint8_t debug_bus_select, uint8_t dw_lli_extension, uint8_t host_address_mode, uint8_t enforce_wr_cpl_order, uint8_t enforce_rd_cpl_order, uint8_t use_edma_int)
{
	ASSERT_ERR((((uint32_t)debug_bus_select << 8) & ~((uint32_t)0x00000700)) == 0);
	ASSERT_ERR((((uint32_t)dw_lli_extension << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)host_address_mode << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)enforce_wr_cpl_order << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)enforce_rd_cpl_order << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)use_edma_int << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CONF_ADDR,  ((uint32_t)debug_bus_select << 8) |((uint32_t)dw_lli_extension << 4) |((uint32_t)host_address_mode << 3) |((uint32_t)enforce_wr_cpl_order << 2) |((uint32_t)enforce_rd_cpl_order << 1) |((uint32_t)use_edma_int << 0));
}

__INLINE void pcie_wrap_pciew_conf_unpack(uint8_t* debug_bus_select, uint8_t* dw_lli_extension, uint8_t* host_address_mode, uint8_t* enforce_wr_cpl_order, uint8_t* enforce_rd_cpl_order, uint8_t* use_edma_int)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CONF_ADDR);

	*debug_bus_select = (localVal & ((uint32_t)0x00000700)) >>  8;
	*dw_lli_extension = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*host_address_mode = (localVal & ((uint32_t)0x00000008)) >>  3;
	*enforce_wr_cpl_order = (localVal & ((uint32_t)0x00000004)) >>  2;
	*enforce_rd_cpl_order = (localVal & ((uint32_t)0x00000002)) >>  1;
	*use_edma_int = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_conf_debug_bus_select_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CONF_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000700)) >> 8);
}
__INLINE void pcie_wrap_pciew_conf_debug_bus_select_setf(uint8_t debugbusselect)
{
	ASSERT_ERR((((uint32_t)debugbusselect << 8) & ~((uint32_t)0x00000700)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CONF_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CONF_ADDR) & ~((uint32_t)0x00000700)) | ((uint32_t)debugbusselect <<8));
}
__INLINE uint8_t pcie_wrap_pciew_conf_dw_lli_extension_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CONF_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void pcie_wrap_pciew_conf_dw_lli_extension_setf(uint8_t dwlliextension)
{
	ASSERT_ERR((((uint32_t)dwlliextension << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CONF_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CONF_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)dwlliextension <<4));
}
__INLINE uint8_t pcie_wrap_pciew_conf_host_address_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CONF_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_conf_host_address_mode_setf(uint8_t hostaddressmode)
{
	ASSERT_ERR((((uint32_t)hostaddressmode << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CONF_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CONF_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)hostaddressmode <<3));
}
__INLINE uint8_t pcie_wrap_pciew_conf_enforce_wr_cpl_order_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CONF_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_conf_enforce_wr_cpl_order_setf(uint8_t enforcewrcplorder)
{
	ASSERT_ERR((((uint32_t)enforcewrcplorder << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CONF_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CONF_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)enforcewrcplorder <<2));
}
__INLINE uint8_t pcie_wrap_pciew_conf_enforce_rd_cpl_order_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CONF_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_conf_enforce_rd_cpl_order_setf(uint8_t enforcerdcplorder)
{
	ASSERT_ERR((((uint32_t)enforcerdcplorder << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CONF_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CONF_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)enforcerdcplorder <<1));
}
__INLINE uint8_t pcie_wrap_pciew_conf_use_edma_int_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CONF_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_conf_use_edma_int_setf(uint8_t useedmaint)
{
	ASSERT_ERR((((uint32_t)useedmaint << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CONF_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CONF_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)useedmaint <<0));
}

/**
 * @brief PCIEW_U_7_0_CHAN_LIMIT register definition
 *  Number of channels per write logical ch 0 to 7 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 MAX_CH_U7                 0x1
 *    27:24 MAX_CH_U6                 0x1
 *    23:20 MAX_CH_U5                 0x1
 *    19:16 MAX_CH_U4                 0x1
 *    15:12 MAX_CH_U3                 0x1
 *    11:08 MAX_CH_U2                 0x1
 *    07:04 MAX_CH_U1                 0x1
 *    03:00 MAX_CH_U0                 0x1
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000240)
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_OFFSET      0x00000240
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_INDEX       0x00000090
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_RESET       0x11111111

__INLINE uint32_t  pcie_wrap_pciew_u_7_0_chan_limit_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_7_0_chan_limit_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_7_MASK    ((uint32_t)0xF0000000)
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_7_LSB    28
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_7_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_6_MASK    ((uint32_t)0x0F000000)
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_6_LSB    24
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_6_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_5_MASK    ((uint32_t)0x00F00000)
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_5_LSB    20
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_5_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_4_MASK    ((uint32_t)0x000F0000)
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_4_LSB    16
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_4_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_3_MASK    ((uint32_t)0x0000F000)
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_3_LSB    12
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_3_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_2_MASK    ((uint32_t)0x00000F00)
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_2_LSB    8
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_2_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_1_MASK    ((uint32_t)0x000000F0)
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_1_LSB    4
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_1_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_0_MASK    ((uint32_t)0x0000000F)
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_0_LSB    0
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_0_WIDTH    ((uint32_t)0x00000004)

#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_7_RST    0x1
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_6_RST    0x1
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_5_RST    0x1
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_4_RST    0x1
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_3_RST    0x1
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_2_RST    0x1
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_1_RST    0x1
#define PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_MAX_CH_U_0_RST    0x1

__INLINE void pcie_wrap_pciew_u_7_0_chan_limit_pack(uint8_t max_ch_u7, uint8_t max_ch_u6, uint8_t max_ch_u5, uint8_t max_ch_u4, uint8_t max_ch_u3, uint8_t max_ch_u2, uint8_t max_ch_u1, uint8_t max_ch_u0)
{
	ASSERT_ERR((((uint32_t)max_ch_u7 << 28) & ~((uint32_t)0xF0000000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_u6 << 24) & ~((uint32_t)0x0F000000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_u5 << 20) & ~((uint32_t)0x00F00000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_u4 << 16) & ~((uint32_t)0x000F0000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_u3 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_u2 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_u1 << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_u0 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR,  ((uint32_t)max_ch_u7 << 28) |((uint32_t)max_ch_u6 << 24) |((uint32_t)max_ch_u5 << 20) |((uint32_t)max_ch_u4 << 16) |((uint32_t)max_ch_u3 << 12) |((uint32_t)max_ch_u2 << 8) |((uint32_t)max_ch_u1 << 4) |((uint32_t)max_ch_u0 << 0));
}

__INLINE void pcie_wrap_pciew_u_7_0_chan_limit_unpack(uint8_t* max_ch_u7, uint8_t* max_ch_u6, uint8_t* max_ch_u5, uint8_t* max_ch_u4, uint8_t* max_ch_u3, uint8_t* max_ch_u2, uint8_t* max_ch_u1, uint8_t* max_ch_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR);

	*max_ch_u7 = (localVal & ((uint32_t)0xF0000000)) >>  28;
	*max_ch_u6 = (localVal & ((uint32_t)0x0F000000)) >>  24;
	*max_ch_u5 = (localVal & ((uint32_t)0x00F00000)) >>  20;
	*max_ch_u4 = (localVal & ((uint32_t)0x000F0000)) >>  16;
	*max_ch_u3 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*max_ch_u2 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*max_ch_u1 = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*max_ch_u0 = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_u_7_0_chan_limit_max_ch_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xF0000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_u_7_0_chan_limit_max_ch_u_7_setf(uint8_t maxchu7)
{
	ASSERT_ERR((((uint32_t)maxchu7 << 28) & ~((uint32_t)0xF0000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR) & ~((uint32_t)0xF0000000)) | ((uint32_t)maxchu7 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_u_7_0_chan_limit_max_ch_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0F000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_u_7_0_chan_limit_max_ch_u_6_setf(uint8_t maxchu6)
{
	ASSERT_ERR((((uint32_t)maxchu6 << 24) & ~((uint32_t)0x0F000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR) & ~((uint32_t)0x0F000000)) | ((uint32_t)maxchu6 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_u_7_0_chan_limit_max_ch_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00F00000)) >> 20);
}
__INLINE void pcie_wrap_pciew_u_7_0_chan_limit_max_ch_u_5_setf(uint8_t maxchu5)
{
	ASSERT_ERR((((uint32_t)maxchu5 << 20) & ~((uint32_t)0x00F00000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR) & ~((uint32_t)0x00F00000)) | ((uint32_t)maxchu5 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_u_7_0_chan_limit_max_ch_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000F0000)) >> 16);
}
__INLINE void pcie_wrap_pciew_u_7_0_chan_limit_max_ch_u_4_setf(uint8_t maxchu4)
{
	ASSERT_ERR((((uint32_t)maxchu4 << 16) & ~((uint32_t)0x000F0000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR) & ~((uint32_t)0x000F0000)) | ((uint32_t)maxchu4 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_u_7_0_chan_limit_max_ch_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void pcie_wrap_pciew_u_7_0_chan_limit_max_ch_u_3_setf(uint8_t maxchu3)
{
	ASSERT_ERR((((uint32_t)maxchu3 << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)maxchu3 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_u_7_0_chan_limit_max_ch_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void pcie_wrap_pciew_u_7_0_chan_limit_max_ch_u_2_setf(uint8_t maxchu2)
{
	ASSERT_ERR((((uint32_t)maxchu2 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)maxchu2 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_u_7_0_chan_limit_max_ch_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void pcie_wrap_pciew_u_7_0_chan_limit_max_ch_u_1_setf(uint8_t maxchu1)
{
	ASSERT_ERR((((uint32_t)maxchu1 << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)maxchu1 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_u_7_0_chan_limit_max_ch_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_7_0_chan_limit_max_ch_u_0_setf(uint8_t maxchu0)
{
	ASSERT_ERR((((uint32_t)maxchu0 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_7_0_CHAN_LIMIT_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)maxchu0 <<0));
}

/**
 * @brief PCIEW_U_15_8_CHAN_LIMIT register definition
 *  Number of channels per write logical ch 8 to 15 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 MAX_CH_U15                0x1
 *    27:24 MAX_CH_U14                0x1
 *    23:20 MAX_CH_U13                0x1
 *    19:16 MAX_CH_U12                0x1
 *    15:12 MAX_CH_U11                0x1
 *    11:08 MAX_CH_U10                0x1
 *    07:04 MAX_CH_U9                 0x1
 *    03:00 MAX_CH_U8                 0x1
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000244)
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_OFFSET      0x00000244
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_INDEX       0x00000091
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_RESET       0x11111111

__INLINE uint32_t  pcie_wrap_pciew_u_15_8_chan_limit_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_15_8_chan_limit_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_15_MASK    ((uint32_t)0xF0000000)
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_15_LSB    28
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_15_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_14_MASK    ((uint32_t)0x0F000000)
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_14_LSB    24
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_14_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_13_MASK    ((uint32_t)0x00F00000)
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_13_LSB    20
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_13_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_12_MASK    ((uint32_t)0x000F0000)
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_12_LSB    16
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_12_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_11_MASK    ((uint32_t)0x0000F000)
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_11_LSB    12
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_11_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_10_MASK    ((uint32_t)0x00000F00)
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_10_LSB    8
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_10_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_9_MASK    ((uint32_t)0x000000F0)
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_9_LSB    4
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_9_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_8_MASK    ((uint32_t)0x0000000F)
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_8_LSB    0
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_8_WIDTH    ((uint32_t)0x00000004)

#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_15_RST    0x1
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_14_RST    0x1
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_13_RST    0x1
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_12_RST    0x1
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_11_RST    0x1
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_10_RST    0x1
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_9_RST    0x1
#define PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_MAX_CH_U_8_RST    0x1

__INLINE void pcie_wrap_pciew_u_15_8_chan_limit_pack(uint8_t max_ch_u15, uint8_t max_ch_u14, uint8_t max_ch_u13, uint8_t max_ch_u12, uint8_t max_ch_u11, uint8_t max_ch_u10, uint8_t max_ch_u9, uint8_t max_ch_u8)
{
	ASSERT_ERR((((uint32_t)max_ch_u15 << 28) & ~((uint32_t)0xF0000000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_u14 << 24) & ~((uint32_t)0x0F000000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_u13 << 20) & ~((uint32_t)0x00F00000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_u12 << 16) & ~((uint32_t)0x000F0000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_u11 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_u10 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_u9 << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_u8 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR,  ((uint32_t)max_ch_u15 << 28) |((uint32_t)max_ch_u14 << 24) |((uint32_t)max_ch_u13 << 20) |((uint32_t)max_ch_u12 << 16) |((uint32_t)max_ch_u11 << 12) |((uint32_t)max_ch_u10 << 8) |((uint32_t)max_ch_u9 << 4) |((uint32_t)max_ch_u8 << 0));
}

__INLINE void pcie_wrap_pciew_u_15_8_chan_limit_unpack(uint8_t* max_ch_u15, uint8_t* max_ch_u14, uint8_t* max_ch_u13, uint8_t* max_ch_u12, uint8_t* max_ch_u11, uint8_t* max_ch_u10, uint8_t* max_ch_u9, uint8_t* max_ch_u8)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR);

	*max_ch_u15 = (localVal & ((uint32_t)0xF0000000)) >>  28;
	*max_ch_u14 = (localVal & ((uint32_t)0x0F000000)) >>  24;
	*max_ch_u13 = (localVal & ((uint32_t)0x00F00000)) >>  20;
	*max_ch_u12 = (localVal & ((uint32_t)0x000F0000)) >>  16;
	*max_ch_u11 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*max_ch_u10 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*max_ch_u9 = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*max_ch_u8 = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_u_15_8_chan_limit_max_ch_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xF0000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_u_15_8_chan_limit_max_ch_u_15_setf(uint8_t maxchu15)
{
	ASSERT_ERR((((uint32_t)maxchu15 << 28) & ~((uint32_t)0xF0000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR) & ~((uint32_t)0xF0000000)) | ((uint32_t)maxchu15 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_u_15_8_chan_limit_max_ch_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0F000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_u_15_8_chan_limit_max_ch_u_14_setf(uint8_t maxchu14)
{
	ASSERT_ERR((((uint32_t)maxchu14 << 24) & ~((uint32_t)0x0F000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR) & ~((uint32_t)0x0F000000)) | ((uint32_t)maxchu14 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_u_15_8_chan_limit_max_ch_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00F00000)) >> 20);
}
__INLINE void pcie_wrap_pciew_u_15_8_chan_limit_max_ch_u_13_setf(uint8_t maxchu13)
{
	ASSERT_ERR((((uint32_t)maxchu13 << 20) & ~((uint32_t)0x00F00000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR) & ~((uint32_t)0x00F00000)) | ((uint32_t)maxchu13 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_u_15_8_chan_limit_max_ch_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000F0000)) >> 16);
}
__INLINE void pcie_wrap_pciew_u_15_8_chan_limit_max_ch_u_12_setf(uint8_t maxchu12)
{
	ASSERT_ERR((((uint32_t)maxchu12 << 16) & ~((uint32_t)0x000F0000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR) & ~((uint32_t)0x000F0000)) | ((uint32_t)maxchu12 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_u_15_8_chan_limit_max_ch_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void pcie_wrap_pciew_u_15_8_chan_limit_max_ch_u_11_setf(uint8_t maxchu11)
{
	ASSERT_ERR((((uint32_t)maxchu11 << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)maxchu11 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_u_15_8_chan_limit_max_ch_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void pcie_wrap_pciew_u_15_8_chan_limit_max_ch_u_10_setf(uint8_t maxchu10)
{
	ASSERT_ERR((((uint32_t)maxchu10 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)maxchu10 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_u_15_8_chan_limit_max_ch_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void pcie_wrap_pciew_u_15_8_chan_limit_max_ch_u_9_setf(uint8_t maxchu9)
{
	ASSERT_ERR((((uint32_t)maxchu9 << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)maxchu9 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_u_15_8_chan_limit_max_ch_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void pcie_wrap_pciew_u_15_8_chan_limit_max_ch_u_8_setf(uint8_t maxchu8)
{
	ASSERT_ERR((((uint32_t)maxchu8 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_U_15_8_CHAN_LIMIT_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)maxchu8 <<0));
}

/**
 * @brief PCIEW_D_7_0_CHAN_LIMIT register definition
 *  Number of channels per read logical ch 0 to 7 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 MAX_CH_D7                 0x1
 *    27:24 MAX_CH_D6                 0x1
 *    23:20 MAX_CH_D5                 0x1
 *    19:16 MAX_CH_D4                 0x1
 *    15:12 MAX_CH_D3                 0x1
 *    11:08 MAX_CH_D2                 0x1
 *    07:04 MAX_CH_D1                 0x1
 *    03:00 MAX_CH_D0                 0x1
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000248)
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_OFFSET      0x00000248
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_INDEX       0x00000092
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_RESET       0x11111111

__INLINE uint32_t  pcie_wrap_pciew_d_7_0_chan_limit_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_7_0_chan_limit_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_7_MASK    ((uint32_t)0xF0000000)
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_7_LSB    28
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_7_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_6_MASK    ((uint32_t)0x0F000000)
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_6_LSB    24
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_6_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_5_MASK    ((uint32_t)0x00F00000)
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_5_LSB    20
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_5_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_4_MASK    ((uint32_t)0x000F0000)
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_4_LSB    16
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_4_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_3_MASK    ((uint32_t)0x0000F000)
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_3_LSB    12
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_3_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_2_MASK    ((uint32_t)0x00000F00)
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_2_LSB    8
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_2_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_1_MASK    ((uint32_t)0x000000F0)
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_1_LSB    4
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_1_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_0_MASK    ((uint32_t)0x0000000F)
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_0_LSB    0
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_0_WIDTH    ((uint32_t)0x00000004)

#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_7_RST    0x1
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_6_RST    0x1
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_5_RST    0x1
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_4_RST    0x1
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_3_RST    0x1
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_2_RST    0x1
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_1_RST    0x1
#define PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_MAX_CH_D_0_RST    0x1

__INLINE void pcie_wrap_pciew_d_7_0_chan_limit_pack(uint8_t max_ch_d7, uint8_t max_ch_d6, uint8_t max_ch_d5, uint8_t max_ch_d4, uint8_t max_ch_d3, uint8_t max_ch_d2, uint8_t max_ch_d1, uint8_t max_ch_d0)
{
	ASSERT_ERR((((uint32_t)max_ch_d7 << 28) & ~((uint32_t)0xF0000000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_d6 << 24) & ~((uint32_t)0x0F000000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_d5 << 20) & ~((uint32_t)0x00F00000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_d4 << 16) & ~((uint32_t)0x000F0000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_d3 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_d2 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_d1 << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_d0 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR,  ((uint32_t)max_ch_d7 << 28) |((uint32_t)max_ch_d6 << 24) |((uint32_t)max_ch_d5 << 20) |((uint32_t)max_ch_d4 << 16) |((uint32_t)max_ch_d3 << 12) |((uint32_t)max_ch_d2 << 8) |((uint32_t)max_ch_d1 << 4) |((uint32_t)max_ch_d0 << 0));
}

__INLINE void pcie_wrap_pciew_d_7_0_chan_limit_unpack(uint8_t* max_ch_d7, uint8_t* max_ch_d6, uint8_t* max_ch_d5, uint8_t* max_ch_d4, uint8_t* max_ch_d3, uint8_t* max_ch_d2, uint8_t* max_ch_d1, uint8_t* max_ch_d0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR);

	*max_ch_d7 = (localVal & ((uint32_t)0xF0000000)) >>  28;
	*max_ch_d6 = (localVal & ((uint32_t)0x0F000000)) >>  24;
	*max_ch_d5 = (localVal & ((uint32_t)0x00F00000)) >>  20;
	*max_ch_d4 = (localVal & ((uint32_t)0x000F0000)) >>  16;
	*max_ch_d3 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*max_ch_d2 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*max_ch_d1 = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*max_ch_d0 = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_d_7_0_chan_limit_max_ch_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xF0000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_d_7_0_chan_limit_max_ch_d_7_setf(uint8_t maxchd7)
{
	ASSERT_ERR((((uint32_t)maxchd7 << 28) & ~((uint32_t)0xF0000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR) & ~((uint32_t)0xF0000000)) | ((uint32_t)maxchd7 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_d_7_0_chan_limit_max_ch_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0F000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_d_7_0_chan_limit_max_ch_d_6_setf(uint8_t maxchd6)
{
	ASSERT_ERR((((uint32_t)maxchd6 << 24) & ~((uint32_t)0x0F000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR) & ~((uint32_t)0x0F000000)) | ((uint32_t)maxchd6 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_d_7_0_chan_limit_max_ch_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00F00000)) >> 20);
}
__INLINE void pcie_wrap_pciew_d_7_0_chan_limit_max_ch_d_5_setf(uint8_t maxchd5)
{
	ASSERT_ERR((((uint32_t)maxchd5 << 20) & ~((uint32_t)0x00F00000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR) & ~((uint32_t)0x00F00000)) | ((uint32_t)maxchd5 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_d_7_0_chan_limit_max_ch_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000F0000)) >> 16);
}
__INLINE void pcie_wrap_pciew_d_7_0_chan_limit_max_ch_d_4_setf(uint8_t maxchd4)
{
	ASSERT_ERR((((uint32_t)maxchd4 << 16) & ~((uint32_t)0x000F0000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR) & ~((uint32_t)0x000F0000)) | ((uint32_t)maxchd4 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_d_7_0_chan_limit_max_ch_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void pcie_wrap_pciew_d_7_0_chan_limit_max_ch_d_3_setf(uint8_t maxchd3)
{
	ASSERT_ERR((((uint32_t)maxchd3 << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)maxchd3 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_d_7_0_chan_limit_max_ch_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void pcie_wrap_pciew_d_7_0_chan_limit_max_ch_d_2_setf(uint8_t maxchd2)
{
	ASSERT_ERR((((uint32_t)maxchd2 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)maxchd2 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_d_7_0_chan_limit_max_ch_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void pcie_wrap_pciew_d_7_0_chan_limit_max_ch_d_1_setf(uint8_t maxchd1)
{
	ASSERT_ERR((((uint32_t)maxchd1 << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)maxchd1 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_d_7_0_chan_limit_max_ch_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_7_0_chan_limit_max_ch_d_0_setf(uint8_t maxchd0)
{
	ASSERT_ERR((((uint32_t)maxchd0 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_7_0_CHAN_LIMIT_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)maxchd0 <<0));
}

/**
 * @brief PCIEW_D_15_8_CHAN_LIMIT register definition
 *  Number of channels per read logical ch 8 to 15 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 MAX_CH_D15                0x1
 *    27:24 MAX_CH_D14                0x1
 *    23:20 MAX_CH_D13                0x1
 *    19:16 MAX_CH_D12                0x1
 *    15:12 MAX_CH_D11                0x1
 *    11:08 MAX_CH_D10                0x1
 *    07:04 MAX_CH_D9                 0x1
 *    03:00 MAX_CH_D8                 0x1
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000024C)
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_OFFSET      0x0000024C
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_INDEX       0x00000093
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_RESET       0x11111111

__INLINE uint32_t  pcie_wrap_pciew_d_15_8_chan_limit_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_15_8_chan_limit_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_15_MASK    ((uint32_t)0xF0000000)
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_15_LSB    28
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_15_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_14_MASK    ((uint32_t)0x0F000000)
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_14_LSB    24
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_14_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_13_MASK    ((uint32_t)0x00F00000)
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_13_LSB    20
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_13_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_12_MASK    ((uint32_t)0x000F0000)
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_12_LSB    16
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_12_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_11_MASK    ((uint32_t)0x0000F000)
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_11_LSB    12
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_11_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_10_MASK    ((uint32_t)0x00000F00)
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_10_LSB    8
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_10_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_9_MASK    ((uint32_t)0x000000F0)
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_9_LSB    4
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_9_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_8_MASK    ((uint32_t)0x0000000F)
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_8_LSB    0
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_8_WIDTH    ((uint32_t)0x00000004)

#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_15_RST    0x1
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_14_RST    0x1
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_13_RST    0x1
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_12_RST    0x1
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_11_RST    0x1
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_10_RST    0x1
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_9_RST    0x1
#define PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_MAX_CH_D_8_RST    0x1

__INLINE void pcie_wrap_pciew_d_15_8_chan_limit_pack(uint8_t max_ch_d15, uint8_t max_ch_d14, uint8_t max_ch_d13, uint8_t max_ch_d12, uint8_t max_ch_d11, uint8_t max_ch_d10, uint8_t max_ch_d9, uint8_t max_ch_d8)
{
	ASSERT_ERR((((uint32_t)max_ch_d15 << 28) & ~((uint32_t)0xF0000000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_d14 << 24) & ~((uint32_t)0x0F000000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_d13 << 20) & ~((uint32_t)0x00F00000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_d12 << 16) & ~((uint32_t)0x000F0000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_d11 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_d10 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_d9 << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)max_ch_d8 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR,  ((uint32_t)max_ch_d15 << 28) |((uint32_t)max_ch_d14 << 24) |((uint32_t)max_ch_d13 << 20) |((uint32_t)max_ch_d12 << 16) |((uint32_t)max_ch_d11 << 12) |((uint32_t)max_ch_d10 << 8) |((uint32_t)max_ch_d9 << 4) |((uint32_t)max_ch_d8 << 0));
}

__INLINE void pcie_wrap_pciew_d_15_8_chan_limit_unpack(uint8_t* max_ch_d15, uint8_t* max_ch_d14, uint8_t* max_ch_d13, uint8_t* max_ch_d12, uint8_t* max_ch_d11, uint8_t* max_ch_d10, uint8_t* max_ch_d9, uint8_t* max_ch_d8)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR);

	*max_ch_d15 = (localVal & ((uint32_t)0xF0000000)) >>  28;
	*max_ch_d14 = (localVal & ((uint32_t)0x0F000000)) >>  24;
	*max_ch_d13 = (localVal & ((uint32_t)0x00F00000)) >>  20;
	*max_ch_d12 = (localVal & ((uint32_t)0x000F0000)) >>  16;
	*max_ch_d11 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*max_ch_d10 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*max_ch_d9 = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*max_ch_d8 = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_d_15_8_chan_limit_max_ch_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xF0000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_d_15_8_chan_limit_max_ch_d_15_setf(uint8_t maxchd15)
{
	ASSERT_ERR((((uint32_t)maxchd15 << 28) & ~((uint32_t)0xF0000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR) & ~((uint32_t)0xF0000000)) | ((uint32_t)maxchd15 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_d_15_8_chan_limit_max_ch_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0F000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_d_15_8_chan_limit_max_ch_d_14_setf(uint8_t maxchd14)
{
	ASSERT_ERR((((uint32_t)maxchd14 << 24) & ~((uint32_t)0x0F000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR) & ~((uint32_t)0x0F000000)) | ((uint32_t)maxchd14 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_d_15_8_chan_limit_max_ch_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00F00000)) >> 20);
}
__INLINE void pcie_wrap_pciew_d_15_8_chan_limit_max_ch_d_13_setf(uint8_t maxchd13)
{
	ASSERT_ERR((((uint32_t)maxchd13 << 20) & ~((uint32_t)0x00F00000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR) & ~((uint32_t)0x00F00000)) | ((uint32_t)maxchd13 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_d_15_8_chan_limit_max_ch_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000F0000)) >> 16);
}
__INLINE void pcie_wrap_pciew_d_15_8_chan_limit_max_ch_d_12_setf(uint8_t maxchd12)
{
	ASSERT_ERR((((uint32_t)maxchd12 << 16) & ~((uint32_t)0x000F0000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR) & ~((uint32_t)0x000F0000)) | ((uint32_t)maxchd12 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_d_15_8_chan_limit_max_ch_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void pcie_wrap_pciew_d_15_8_chan_limit_max_ch_d_11_setf(uint8_t maxchd11)
{
	ASSERT_ERR((((uint32_t)maxchd11 << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)maxchd11 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_d_15_8_chan_limit_max_ch_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void pcie_wrap_pciew_d_15_8_chan_limit_max_ch_d_10_setf(uint8_t maxchd10)
{
	ASSERT_ERR((((uint32_t)maxchd10 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)maxchd10 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_d_15_8_chan_limit_max_ch_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void pcie_wrap_pciew_d_15_8_chan_limit_max_ch_d_9_setf(uint8_t maxchd9)
{
	ASSERT_ERR((((uint32_t)maxchd9 << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)maxchd9 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_d_15_8_chan_limit_max_ch_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void pcie_wrap_pciew_d_15_8_chan_limit_max_ch_d_8_setf(uint8_t maxchd8)
{
	ASSERT_ERR((((uint32_t)maxchd8 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_D_15_8_CHAN_LIMIT_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)maxchd8 <<0));
}

/**
 * @brief PCIEW_KA_CTL register definition
 *  keep alive trigger period, in 1024 cycles units   register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 KA_TRIGGER_PERIOD         0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_KA_CTL_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000250)
#define PCIE_WRAP_PCIEW_KA_CTL_OFFSET      0x00000250
#define PCIE_WRAP_PCIEW_KA_CTL_INDEX       0x00000094
#define PCIE_WRAP_PCIEW_KA_CTL_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_ka_ctl_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_KA_CTL_ADDR);
}

__INLINE void pcie_wrap_pciew_ka_ctl_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_KA_CTL_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_KA_CTL_KA_TRIGGER_PERIOD_MASK    ((uint32_t)0x0000FFFF)
#define PCIE_WRAP_PCIEW_KA_CTL_KA_TRIGGER_PERIOD_LSB    0
#define PCIE_WRAP_PCIEW_KA_CTL_KA_TRIGGER_PERIOD_WIDTH    ((uint32_t)0x00000010)

#define PCIE_WRAP_PCIEW_KA_CTL_KA_TRIGGER_PERIOD_RST    0x0

__INLINE uint16_t pcie_wrap_pciew_ka_ctl_ka_trigger_period_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_KA_CTL_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_ka_ctl_ka_trigger_period_setf(uint16_t katriggerperiod)
{
	ASSERT_ERR((((uint32_t)katriggerperiod << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_KA_CTL_ADDR, (uint32_t)katriggerperiod << 0);
}

/**
 * @brief PCIEW_KA_SAR_BASE register definition
 *  high order bits of src addr of keep alive transfer register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 KA_SAR_BASE               0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_KA_SAR_BASE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000254)
#define PCIE_WRAP_PCIEW_KA_SAR_BASE_OFFSET      0x00000254
#define PCIE_WRAP_PCIEW_KA_SAR_BASE_INDEX       0x00000095
#define PCIE_WRAP_PCIEW_KA_SAR_BASE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_ka_sar_base_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_KA_SAR_BASE_ADDR);
}

__INLINE void pcie_wrap_pciew_ka_sar_base_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_KA_SAR_BASE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_KA_SAR_BASE_KA_SAR_BASE_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_KA_SAR_BASE_KA_SAR_BASE_LSB    0
#define PCIE_WRAP_PCIEW_KA_SAR_BASE_KA_SAR_BASE_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_KA_SAR_BASE_KA_SAR_BASE_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_ka_sar_base_ka_sar_base_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_KA_SAR_BASE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_ka_sar_base_ka_sar_base_setf(uint32_t kasarbase)
{
	ASSERT_ERR((((uint32_t)kasarbase << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_KA_SAR_BASE_ADDR, (uint32_t)kasarbase << 0);
}

/**
 * @brief PCIEW_KA_SAR register definition
 *  low order bits of src addr of keep alive transfer register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 KA_SAR                    0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_KA_SAR_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000258)
#define PCIE_WRAP_PCIEW_KA_SAR_OFFSET      0x00000258
#define PCIE_WRAP_PCIEW_KA_SAR_INDEX       0x00000096
#define PCIE_WRAP_PCIEW_KA_SAR_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_ka_sar_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_KA_SAR_ADDR);
}

__INLINE void pcie_wrap_pciew_ka_sar_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_KA_SAR_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_KA_SAR_KA_SAR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_KA_SAR_KA_SAR_LSB    0
#define PCIE_WRAP_PCIEW_KA_SAR_KA_SAR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_KA_SAR_KA_SAR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_ka_sar_ka_sar_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_KA_SAR_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_ka_sar_ka_sar_setf(uint32_t kasar)
{
	ASSERT_ERR((((uint32_t)kasar << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_KA_SAR_ADDR, (uint32_t)kasar << 0);
}

/**
 * @brief PCIEW_KA_DAR register definition
 *  dest addr of the keep alive transfer register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 KA_DAR                    0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_KA_DAR_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000025C)
#define PCIE_WRAP_PCIEW_KA_DAR_OFFSET      0x0000025C
#define PCIE_WRAP_PCIEW_KA_DAR_INDEX       0x00000097
#define PCIE_WRAP_PCIEW_KA_DAR_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_ka_dar_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_KA_DAR_ADDR);
}

__INLINE void pcie_wrap_pciew_ka_dar_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_KA_DAR_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_KA_DAR_KA_DAR_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_KA_DAR_KA_DAR_LSB    0
#define PCIE_WRAP_PCIEW_KA_DAR_KA_DAR_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_KA_DAR_KA_DAR_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_ka_dar_ka_dar_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_KA_DAR_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_ka_dar_ka_dar_setf(uint32_t kadar)
{
	ASSERT_ERR((((uint32_t)kadar << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_KA_DAR_ADDR, (uint32_t)kadar << 0);
}

/**
 * @brief PCIEW_KA_XFR_SIZE register definition
 *  size (in bytes) of the keep alive transfer register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    11:00 KA_XFR_SIZE               0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_KA_XFR_SIZE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000260)
#define PCIE_WRAP_PCIEW_KA_XFR_SIZE_OFFSET      0x00000260
#define PCIE_WRAP_PCIEW_KA_XFR_SIZE_INDEX       0x00000098
#define PCIE_WRAP_PCIEW_KA_XFR_SIZE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_ka_xfr_size_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_KA_XFR_SIZE_ADDR);
}

__INLINE void pcie_wrap_pciew_ka_xfr_size_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_KA_XFR_SIZE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_KA_XFR_SIZE_KA_XFR_SIZE_MASK    ((uint32_t)0x00000FFF)
#define PCIE_WRAP_PCIEW_KA_XFR_SIZE_KA_XFR_SIZE_LSB    0
#define PCIE_WRAP_PCIEW_KA_XFR_SIZE_KA_XFR_SIZE_WIDTH    ((uint32_t)0x0000000C)

#define PCIE_WRAP_PCIEW_KA_XFR_SIZE_KA_XFR_SIZE_RST    0x0

__INLINE uint16_t pcie_wrap_pciew_ka_xfr_size_ka_xfr_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_KA_XFR_SIZE_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_ka_xfr_size_ka_xfr_size_setf(uint16_t kaxfrsize)
{
	ASSERT_ERR((((uint32_t)kaxfrsize << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_KA_XFR_SIZE_ADDR, (uint32_t)kaxfrsize << 0);
}

/**
 * @brief PCIEW_DEBUG_TIMER_INIT register definition
 *  Debug Timer init value register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TIMER_INIT                0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_DEBUG_TIMER_INIT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000264)
#define PCIE_WRAP_PCIEW_DEBUG_TIMER_INIT_OFFSET      0x00000264
#define PCIE_WRAP_PCIEW_DEBUG_TIMER_INIT_INDEX       0x00000099
#define PCIE_WRAP_PCIEW_DEBUG_TIMER_INIT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_debug_timer_init_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_DEBUG_TIMER_INIT_ADDR);
}

__INLINE void pcie_wrap_pciew_debug_timer_init_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_DEBUG_TIMER_INIT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_DEBUG_TIMER_INIT_TIMER_INIT_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_DEBUG_TIMER_INIT_TIMER_INIT_LSB    0
#define PCIE_WRAP_PCIEW_DEBUG_TIMER_INIT_TIMER_INIT_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_DEBUG_TIMER_INIT_TIMER_INIT_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_debug_timer_init_timer_init_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_DEBUG_TIMER_INIT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_debug_timer_init_timer_init_setf(uint32_t timerinit)
{
	ASSERT_ERR((((uint32_t)timerinit << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_DEBUG_TIMER_INIT_ADDR, (uint32_t)timerinit << 0);
}

/**
 * @brief PCIEW_DEBUG_TIMER_VALUE register definition
 *  Debug timer current value register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TIMER_VALUE               0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_DEBUG_TIMER_VALUE_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000268)
#define PCIE_WRAP_PCIEW_DEBUG_TIMER_VALUE_OFFSET      0x00000268
#define PCIE_WRAP_PCIEW_DEBUG_TIMER_VALUE_INDEX       0x0000009A
#define PCIE_WRAP_PCIEW_DEBUG_TIMER_VALUE_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_debug_timer_value_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_DEBUG_TIMER_VALUE_ADDR);
}

__INLINE void pcie_wrap_pciew_debug_timer_value_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_DEBUG_TIMER_VALUE_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_DEBUG_TIMER_VALUE_TIMER_VALUE_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_DEBUG_TIMER_VALUE_TIMER_VALUE_LSB    0
#define PCIE_WRAP_PCIEW_DEBUG_TIMER_VALUE_TIMER_VALUE_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_DEBUG_TIMER_VALUE_TIMER_VALUE_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_debug_timer_value_timer_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_DEBUG_TIMER_VALUE_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_debug_timer_value_timer_value_setf(uint32_t timervalue)
{
	ASSERT_ERR((((uint32_t)timervalue << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_DEBUG_TIMER_VALUE_ADDR, (uint32_t)timervalue << 0);
}

/**
 * @brief PCIEW_DEBUG_CONF register definition
 *  Debug configurations register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    23:16 COUNTER_DIFF              0x0
 *    03:00 CHANNEL                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_DEBUG_CONF_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000026C)
#define PCIE_WRAP_PCIEW_DEBUG_CONF_OFFSET      0x0000026C
#define PCIE_WRAP_PCIEW_DEBUG_CONF_INDEX       0x0000009B
#define PCIE_WRAP_PCIEW_DEBUG_CONF_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_debug_conf_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_DEBUG_CONF_ADDR);
}

__INLINE void pcie_wrap_pciew_debug_conf_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_DEBUG_CONF_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_DEBUG_CONF_COUNTER_DIFF_MASK    ((uint32_t)0x00FF0000)
#define PCIE_WRAP_PCIEW_DEBUG_CONF_COUNTER_DIFF_LSB    16
#define PCIE_WRAP_PCIEW_DEBUG_CONF_COUNTER_DIFF_WIDTH    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_DEBUG_CONF_CHANNEL_MASK    ((uint32_t)0x0000000F)
#define PCIE_WRAP_PCIEW_DEBUG_CONF_CHANNEL_LSB    0
#define PCIE_WRAP_PCIEW_DEBUG_CONF_CHANNEL_WIDTH    ((uint32_t)0x00000004)

#define PCIE_WRAP_PCIEW_DEBUG_CONF_COUNTER_DIFF_RST    0x0
#define PCIE_WRAP_PCIEW_DEBUG_CONF_CHANNEL_RST    0x0

__INLINE void pcie_wrap_pciew_debug_conf_pack(uint8_t counter_diff, uint8_t channel)
{
	ASSERT_ERR((((uint32_t)counter_diff << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)channel << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_DEBUG_CONF_ADDR,  ((uint32_t)counter_diff << 16) |((uint32_t)channel << 0));
}

__INLINE void pcie_wrap_pciew_debug_conf_unpack(uint8_t* counter_diff, uint8_t* channel)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_DEBUG_CONF_ADDR);

	*counter_diff = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*channel = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_debug_conf_counter_diff_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_DEBUG_CONF_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void pcie_wrap_pciew_debug_conf_counter_diff_setf(uint8_t counterdiff)
{
	ASSERT_ERR((((uint32_t)counterdiff << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_DEBUG_CONF_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_DEBUG_CONF_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)counterdiff <<16));
}
__INLINE uint8_t pcie_wrap_pciew_debug_conf_channel_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_DEBUG_CONF_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void pcie_wrap_pciew_debug_conf_channel_setf(uint8_t channel)
{
	ASSERT_ERR((((uint32_t)channel << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_DEBUG_CONF_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_DEBUG_CONF_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)channel <<0));
}

/**
 * @brief PCIEW_DEBUG_STATUS register definition
 *  Debug status register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 TRIGGER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_DEBUG_STATUS_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000270)
#define PCIE_WRAP_PCIEW_DEBUG_STATUS_OFFSET      0x00000270
#define PCIE_WRAP_PCIEW_DEBUG_STATUS_INDEX       0x0000009C
#define PCIE_WRAP_PCIEW_DEBUG_STATUS_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_debug_status_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_DEBUG_STATUS_ADDR);
}

__INLINE void pcie_wrap_pciew_debug_status_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_DEBUG_STATUS_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_DEBUG_STATUS_TRIGGER_MASK    ((uint32_t)0x0000FFFF)
#define PCIE_WRAP_PCIEW_DEBUG_STATUS_TRIGGER_LSB    0
#define PCIE_WRAP_PCIEW_DEBUG_STATUS_TRIGGER_WIDTH    ((uint32_t)0x00000010)

#define PCIE_WRAP_PCIEW_DEBUG_STATUS_TRIGGER_RST    0x0

__INLINE uint16_t pcie_wrap_pciew_debug_status_trigger_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_DEBUG_STATUS_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_debug_status_trigger_setf(uint16_t trigger)
{
	ASSERT_ERR((((uint32_t)trigger << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_DEBUG_STATUS_ADDR, (uint32_t)trigger << 0);
}

/**
 * @brief PCIEW_DEBUG_START register definition
 *  Debug start register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 START                     0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_DEBUG_START_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000274)
#define PCIE_WRAP_PCIEW_DEBUG_START_OFFSET      0x00000274
#define PCIE_WRAP_PCIEW_DEBUG_START_INDEX       0x0000009D
#define PCIE_WRAP_PCIEW_DEBUG_START_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_debug_start_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_DEBUG_START_ADDR);
}

__INLINE void pcie_wrap_pciew_debug_start_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_DEBUG_START_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_DEBUG_START_START_MASK    ((uint32_t)0x0000FFFF)
#define PCIE_WRAP_PCIEW_DEBUG_START_START_LSB    0
#define PCIE_WRAP_PCIEW_DEBUG_START_START_WIDTH    ((uint32_t)0x00000010)

#define PCIE_WRAP_PCIEW_DEBUG_START_START_RST    0x0

__INLINE uint16_t pcie_wrap_pciew_debug_start_start_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_DEBUG_START_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_debug_start_start_setf(uint16_t start)
{
	ASSERT_ERR((((uint32_t)start << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_DEBUG_START_ADDR, (uint32_t)start << 0);
}

/**
 * @brief PCIEW_INT_RAWSTAT_ERR register definition
 *  Interrupts raw status register (without enables) register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    ERR_D15                   0              
 *    30    ERR_D14                   0              
 *    29    ERR_D13                   0              
 *    28    ERR_D12                   0              
 *    27    ERR_D11                   0              
 *    26    ERR_D10                   0              
 *    25    ERR_D9                    0              
 *    24    ERR_D8                    0              
 *    23    ERR_D7                    0              
 *    22    ERR_D6                    0              
 *    21    ERR_D5                    0              
 *    20    ERR_D4                    0              
 *    19    ERR_D3                    0              
 *    18    ERR_D2                    0              
 *    17    ERR_D1                    0              
 *    16    ERR_D0                    0              
 *    15    ERR_U15                   0              
 *    14    ERR_U14                   0              
 *    13    ERR_U13                   0              
 *    12    ERR_U12                   0              
 *    11    ERR_U11                   0              
 *    10    ERR_U10                   0              
 *    09    ERR_U9                    0              
 *    08    ERR_U8                    0              
 *    07    ERR_U7                    0              
 *    06    ERR_U6                    0              
 *    05    ERR_U5                    0              
 *    04    ERR_U4                    0              
 *    03    ERR_U3                    0              
 *    02    ERR_U2                    0              
 *    01    ERR_U1                    0              
 *    00    ERR_U0                    0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000278)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_OFFSET      0x00000278
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_INDEX       0x0000009E
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_rawstat_err_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ERR_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_rawstat_err_unpack(uint8_t* err_d15, uint8_t* err_d14, uint8_t* err_d13, uint8_t* err_d12, uint8_t* err_d11, uint8_t* err_d10, uint8_t* err_d9, uint8_t* err_d8, uint8_t* err_d7, uint8_t* err_d6, uint8_t* err_d5, uint8_t* err_d4, uint8_t* err_d3, uint8_t* err_d2, uint8_t* err_d1, uint8_t* err_d0, uint8_t* err_u15, uint8_t* err_u14, uint8_t* err_u13, uint8_t* err_u12, uint8_t* err_u11, uint8_t* err_u10, uint8_t* err_u9, uint8_t* err_u8, uint8_t* err_u7, uint8_t* err_u6, uint8_t* err_u5, uint8_t* err_u4, uint8_t* err_u3, uint8_t* err_u2, uint8_t* err_u1, uint8_t* err_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);

	*err_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*err_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*err_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*err_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*err_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*err_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*err_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*err_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*err_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*err_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*err_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*err_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*err_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*err_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*err_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*err_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*err_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*err_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*err_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*err_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*err_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*err_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*err_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*err_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*err_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*err_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*err_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*err_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*err_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*err_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*err_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*err_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t pcie_wrap_pciew_int_rawstat_err_err_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RAWSTAT_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief PCIEW_INT_LMAC_ERR_STAT register definition
 *  Interrupts status register for the LMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    ERR_D15                   0              
 *    30    ERR_D14                   0              
 *    29    ERR_D13                   0              
 *    28    ERR_D12                   0              
 *    27    ERR_D11                   0              
 *    26    ERR_D10                   0              
 *    25    ERR_D9                    0              
 *    24    ERR_D8                    0              
 *    23    ERR_D7                    0              
 *    22    ERR_D6                    0              
 *    21    ERR_D5                    0              
 *    20    ERR_D4                    0              
 *    19    ERR_D3                    0              
 *    18    ERR_D2                    0              
 *    17    ERR_D1                    0              
 *    16    ERR_D0                    0              
 *    15    ERR_U15                   0              
 *    14    ERR_U14                   0              
 *    13    ERR_U13                   0              
 *    12    ERR_U12                   0              
 *    11    ERR_U11                   0              
 *    10    ERR_U10                   0              
 *    09    ERR_U9                    0              
 *    08    ERR_U8                    0              
 *    07    ERR_U7                    0              
 *    06    ERR_U6                    0              
 *    05    ERR_U5                    0              
 *    04    ERR_U4                    0              
 *    03    ERR_U3                    0              
 *    02    ERR_U2                    0              
 *    01    ERR_U1                    0              
 *    00    ERR_U0                    0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000027C)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_OFFSET      0x0000027C
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_INDEX       0x0000009F
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_lmac_err_stat_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ERR_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_lmac_err_stat_unpack(uint8_t* err_d15, uint8_t* err_d14, uint8_t* err_d13, uint8_t* err_d12, uint8_t* err_d11, uint8_t* err_d10, uint8_t* err_d9, uint8_t* err_d8, uint8_t* err_d7, uint8_t* err_d6, uint8_t* err_d5, uint8_t* err_d4, uint8_t* err_d3, uint8_t* err_d2, uint8_t* err_d1, uint8_t* err_d0, uint8_t* err_u15, uint8_t* err_u14, uint8_t* err_u13, uint8_t* err_u12, uint8_t* err_u11, uint8_t* err_u10, uint8_t* err_u9, uint8_t* err_u8, uint8_t* err_u7, uint8_t* err_u6, uint8_t* err_u5, uint8_t* err_u4, uint8_t* err_u3, uint8_t* err_u2, uint8_t* err_u1, uint8_t* err_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);

	*err_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*err_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*err_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*err_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*err_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*err_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*err_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*err_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*err_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*err_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*err_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*err_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*err_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*err_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*err_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*err_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*err_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*err_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*err_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*err_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*err_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*err_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*err_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*err_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*err_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*err_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*err_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*err_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*err_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*err_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*err_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*err_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t pcie_wrap_pciew_int_lmac_err_stat_err_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_LMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief PCIEW_INT_UMAC_ERR_STAT register definition
 *  Interrupts status register for the UMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    ERR_D15                   0              
 *    30    ERR_D14                   0              
 *    29    ERR_D13                   0              
 *    28    ERR_D12                   0              
 *    27    ERR_D11                   0              
 *    26    ERR_D10                   0              
 *    25    ERR_D9                    0              
 *    24    ERR_D8                    0              
 *    23    ERR_D7                    0              
 *    22    ERR_D6                    0              
 *    21    ERR_D5                    0              
 *    20    ERR_D4                    0              
 *    19    ERR_D3                    0              
 *    18    ERR_D2                    0              
 *    17    ERR_D1                    0              
 *    16    ERR_D0                    0              
 *    15    ERR_U15                   0              
 *    14    ERR_U14                   0              
 *    13    ERR_U13                   0              
 *    12    ERR_U12                   0              
 *    11    ERR_U11                   0              
 *    10    ERR_U10                   0              
 *    09    ERR_U9                    0              
 *    08    ERR_U8                    0              
 *    07    ERR_U7                    0              
 *    06    ERR_U6                    0              
 *    05    ERR_U5                    0              
 *    04    ERR_U4                    0              
 *    03    ERR_U3                    0              
 *    02    ERR_U2                    0              
 *    01    ERR_U1                    0              
 *    00    ERR_U0                    0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000280)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_OFFSET      0x00000280
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_INDEX       0x000000A0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_umac_err_stat_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ERR_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_umac_err_stat_unpack(uint8_t* err_d15, uint8_t* err_d14, uint8_t* err_d13, uint8_t* err_d12, uint8_t* err_d11, uint8_t* err_d10, uint8_t* err_d9, uint8_t* err_d8, uint8_t* err_d7, uint8_t* err_d6, uint8_t* err_d5, uint8_t* err_d4, uint8_t* err_d3, uint8_t* err_d2, uint8_t* err_d1, uint8_t* err_d0, uint8_t* err_u15, uint8_t* err_u14, uint8_t* err_u13, uint8_t* err_u12, uint8_t* err_u11, uint8_t* err_u10, uint8_t* err_u9, uint8_t* err_u8, uint8_t* err_u7, uint8_t* err_u6, uint8_t* err_u5, uint8_t* err_u4, uint8_t* err_u3, uint8_t* err_u2, uint8_t* err_u1, uint8_t* err_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);

	*err_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*err_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*err_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*err_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*err_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*err_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*err_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*err_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*err_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*err_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*err_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*err_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*err_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*err_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*err_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*err_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*err_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*err_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*err_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*err_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*err_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*err_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*err_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*err_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*err_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*err_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*err_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*err_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*err_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*err_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*err_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*err_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t pcie_wrap_pciew_int_umac_err_stat_err_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_UMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief PCIEW_SEQ_ERR register definition
 *  PCI EDMA SEQ physical channels status register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    ERR_P15                   0              
 *    14    ERR_P14                   0              
 *    13    ERR_P13                   0              
 *    12    ERR_P12                   0              
 *    11    ERR_P11                   0              
 *    10    ERR_P10                   0              
 *    09    ERR_P9                    0              
 *    08    ERR_P8                    0              
 *    07    ERR_P7                    0              
 *    06    ERR_P6                    0              
 *    05    ERR_P5                    0              
 *    04    ERR_P4                    0              
 *    03    ERR_P3                    0              
 *    02    ERR_P2                    0              
 *    01    ERR_P1                    0              
 *    00    ERR_P0                    0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_SEQ_ERR_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000284)
#define PCIE_WRAP_PCIEW_SEQ_ERR_OFFSET      0x00000284
#define PCIE_WRAP_PCIEW_SEQ_ERR_INDEX       0x000000A1
#define PCIE_WRAP_PCIEW_SEQ_ERR_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_seq_err_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_15_POS    15
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_14_POS    14
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_13_POS    13
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_12_POS    12
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_11_POS    11
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_10_POS    10
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_9_POS    9
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_8_POS    8
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_7_POS    7
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_6_POS    6
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_5_POS    5
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_4_POS    4
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_3_POS    3
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_2_POS    2
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_1_POS    1
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_0_POS    0

#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_15_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_14_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_13_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_12_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_11_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_10_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_9_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_8_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_7_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_6_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_5_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_4_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_3_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_2_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_1_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_ERR_P_0_RST    0x0

__INLINE void pcie_wrap_pciew_seq_err_unpack(uint8_t* err_p15, uint8_t* err_p14, uint8_t* err_p13, uint8_t* err_p12, uint8_t* err_p11, uint8_t* err_p10, uint8_t* err_p9, uint8_t* err_p8, uint8_t* err_p7, uint8_t* err_p6, uint8_t* err_p5, uint8_t* err_p4, uint8_t* err_p3, uint8_t* err_p2, uint8_t* err_p1, uint8_t* err_p0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);

	*err_p15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*err_p14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*err_p13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*err_p12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*err_p11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*err_p10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*err_p9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*err_p8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*err_p7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*err_p6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*err_p5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*err_p4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*err_p3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*err_p2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*err_p1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*err_p0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_seq_err_err_p_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t pcie_wrap_pciew_seq_err_err_p_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t pcie_wrap_pciew_seq_err_err_p_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t pcie_wrap_pciew_seq_err_err_p_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_seq_err_err_p_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t pcie_wrap_pciew_seq_err_err_p_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t pcie_wrap_pciew_seq_err_err_p_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t pcie_wrap_pciew_seq_err_err_p_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_seq_err_err_p_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t pcie_wrap_pciew_seq_err_err_p_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t pcie_wrap_pciew_seq_err_err_p_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t pcie_wrap_pciew_seq_err_err_p_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_seq_err_err_p_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t pcie_wrap_pciew_seq_err_err_p_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t pcie_wrap_pciew_seq_err_err_p_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t pcie_wrap_pciew_seq_err_err_p_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief PCIEW_SEQ_ERR_CLR register definition
 *  clears the error state of the faulty EDMA channel register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    CLR_P15                   0              
 *    14    CLR_P14                   0              
 *    13    CLR_P13                   0              
 *    12    CLR_P12                   0              
 *    11    CLR_P11                   0              
 *    10    CLR_P10                   0              
 *    09    CLR_P9                    0              
 *    08    CLR_P8                    0              
 *    07    CLR_P7                    0              
 *    06    CLR_P6                    0              
 *    05    CLR_P5                    0              
 *    04    CLR_P4                    0              
 *    03    CLR_P3                    0              
 *    02    CLR_P2                    0              
 *    01    CLR_P1                    0              
 *    00    CLR_P0                    0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000288)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_OFFSET      0x00000288
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_INDEX       0x000000A2
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_RESET       0x00000000

__INLINE void pcie_wrap_pciew_seq_err_clr_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_15_POS    15
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_14_POS    14
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_13_POS    13
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_12_POS    12
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_11_POS    11
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_10_POS    10
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_9_POS    9
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_8_POS    8
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_7_POS    7
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_6_POS    6
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_5_POS    5
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_4_POS    4
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_3_POS    3
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_2_POS    2
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_1_POS    1
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_0_POS    0

#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_15_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_14_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_13_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_12_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_11_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_10_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_9_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_8_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_7_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_6_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_5_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_4_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_3_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_2_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_1_RST    0x0
#define PCIE_WRAP_PCIEW_SEQ_ERR_CLR_CLR_P_0_RST    0x0

__INLINE void pcie_wrap_pciew_seq_err_clr_pack(uint8_t clr_p15, uint8_t clr_p14, uint8_t clr_p13, uint8_t clr_p12, uint8_t clr_p11, uint8_t clr_p10, uint8_t clr_p9, uint8_t clr_p8, uint8_t clr_p7, uint8_t clr_p6, uint8_t clr_p5, uint8_t clr_p4, uint8_t clr_p3, uint8_t clr_p2, uint8_t clr_p1, uint8_t clr_p0)
{
	ASSERT_ERR((((uint32_t)clr_p15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)clr_p14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)clr_p13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)clr_p12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)clr_p11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)clr_p10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)clr_p9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)clr_p8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)clr_p7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)clr_p6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)clr_p5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)clr_p4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)clr_p3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)clr_p2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)clr_p1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)clr_p0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR,  ((uint32_t)clr_p15 << 15) |((uint32_t)clr_p14 << 14) |((uint32_t)clr_p13 << 13) |((uint32_t)clr_p12 << 12) |((uint32_t)clr_p11 << 11) |((uint32_t)clr_p10 << 10) |((uint32_t)clr_p9 << 9) |((uint32_t)clr_p8 << 8) |((uint32_t)clr_p7 << 7) |((uint32_t)clr_p6 << 6) |((uint32_t)clr_p5 << 5) |((uint32_t)clr_p4 << 4) |((uint32_t)clr_p3 << 3) |((uint32_t)clr_p2 << 2) |((uint32_t)clr_p1 << 1) |((uint32_t)clr_p0 << 0));
}

__INLINE void pcie_wrap_pciew_seq_err_clr_clr_p_15_setf(uint8_t clrp15)
{
	ASSERT_ERR((((uint32_t)clrp15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)clrp15 <<15));
}
__INLINE void pcie_wrap_pciew_seq_err_clr_clr_p_14_setf(uint8_t clrp14)
{
	ASSERT_ERR((((uint32_t)clrp14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)clrp14 <<14));
}
__INLINE void pcie_wrap_pciew_seq_err_clr_clr_p_13_setf(uint8_t clrp13)
{
	ASSERT_ERR((((uint32_t)clrp13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)clrp13 <<13));
}
__INLINE void pcie_wrap_pciew_seq_err_clr_clr_p_12_setf(uint8_t clrp12)
{
	ASSERT_ERR((((uint32_t)clrp12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)clrp12 <<12));
}
__INLINE void pcie_wrap_pciew_seq_err_clr_clr_p_11_setf(uint8_t clrp11)
{
	ASSERT_ERR((((uint32_t)clrp11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)clrp11 <<11));
}
__INLINE void pcie_wrap_pciew_seq_err_clr_clr_p_10_setf(uint8_t clrp10)
{
	ASSERT_ERR((((uint32_t)clrp10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)clrp10 <<10));
}
__INLINE void pcie_wrap_pciew_seq_err_clr_clr_p_9_setf(uint8_t clrp9)
{
	ASSERT_ERR((((uint32_t)clrp9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)clrp9 <<9));
}
__INLINE void pcie_wrap_pciew_seq_err_clr_clr_p_8_setf(uint8_t clrp8)
{
	ASSERT_ERR((((uint32_t)clrp8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)clrp8 <<8));
}
__INLINE void pcie_wrap_pciew_seq_err_clr_clr_p_7_setf(uint8_t clrp7)
{
	ASSERT_ERR((((uint32_t)clrp7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)clrp7 <<7));
}
__INLINE void pcie_wrap_pciew_seq_err_clr_clr_p_6_setf(uint8_t clrp6)
{
	ASSERT_ERR((((uint32_t)clrp6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)clrp6 <<6));
}
__INLINE void pcie_wrap_pciew_seq_err_clr_clr_p_5_setf(uint8_t clrp5)
{
	ASSERT_ERR((((uint32_t)clrp5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)clrp5 <<5));
}
__INLINE void pcie_wrap_pciew_seq_err_clr_clr_p_4_setf(uint8_t clrp4)
{
	ASSERT_ERR((((uint32_t)clrp4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)clrp4 <<4));
}
__INLINE void pcie_wrap_pciew_seq_err_clr_clr_p_3_setf(uint8_t clrp3)
{
	ASSERT_ERR((((uint32_t)clrp3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)clrp3 <<3));
}
__INLINE void pcie_wrap_pciew_seq_err_clr_clr_p_2_setf(uint8_t clrp2)
{
	ASSERT_ERR((((uint32_t)clrp2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)clrp2 <<2));
}
__INLINE void pcie_wrap_pciew_seq_err_clr_clr_p_1_setf(uint8_t clrp1)
{
	ASSERT_ERR((((uint32_t)clrp1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)clrp1 <<1));
}
__INLINE void pcie_wrap_pciew_seq_err_clr_clr_p_0_setf(uint8_t clrp0)
{
	ASSERT_ERR((((uint32_t)clrp0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SEQ_ERR_CLR_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)clrp0 <<0));
}

/**
 * @brief PCIEW_INT_SMAC_EN register definition
 *  SMAC interrupt enable register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EN_D15                    0              
 *    30    EN_D14                    0              
 *    29    EN_D13                    0              
 *    28    EN_D12                    0              
 *    27    EN_D11                    0              
 *    26    EN_D10                    0              
 *    25    EN_D9                     0              
 *    24    EN_D8                     0              
 *    23    EN_D7                     0              
 *    22    EN_D6                     0              
 *    21    EN_D5                     0              
 *    20    EN_D4                     0              
 *    19    EN_D3                     0              
 *    18    EN_D2                     0              
 *    17    EN_D1                     0              
 *    16    EN_D0                     0              
 *    15    EN_U15                    0              
 *    14    EN_U14                    0              
 *    13    EN_U13                    0              
 *    12    EN_U12                    0              
 *    11    EN_U11                    0              
 *    10    EN_U10                    0              
 *    09    EN_U9                     0              
 *    08    EN_U8                     0              
 *    07    EN_U7                     0              
 *    06    EN_U6                     0              
 *    05    EN_U5                     0              
 *    04    EN_U4                     0              
 *    03    EN_U3                     0              
 *    02    EN_U2                     0              
 *    01    EN_U1                     0              
 *    00    EN_U0                     0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000028C)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_OFFSET      0x0000028C
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_INDEX       0x000000A3
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_smac_en_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
}

__INLINE void pcie_wrap_pciew_int_smac_en_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_EN_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_smac_en_pack(uint8_t en_d15, uint8_t en_d14, uint8_t en_d13, uint8_t en_d12, uint8_t en_d11, uint8_t en_d10, uint8_t en_d9, uint8_t en_d8, uint8_t en_d7, uint8_t en_d6, uint8_t en_d5, uint8_t en_d4, uint8_t en_d3, uint8_t en_d2, uint8_t en_d1, uint8_t en_d0, uint8_t en_u15, uint8_t en_u14, uint8_t en_u13, uint8_t en_u12, uint8_t en_u11, uint8_t en_u10, uint8_t en_u9, uint8_t en_u8, uint8_t en_u7, uint8_t en_u6, uint8_t en_u5, uint8_t en_u4, uint8_t en_u3, uint8_t en_u2, uint8_t en_u1, uint8_t en_u0)
{
	ASSERT_ERR((((uint32_t)en_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)en_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)en_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)en_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)en_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)en_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)en_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)en_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)en_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)en_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)en_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)en_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)en_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)en_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)en_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)en_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)en_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)en_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)en_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)en_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)en_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)en_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)en_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)en_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR,  ((uint32_t)en_d15 << 31) |((uint32_t)en_d14 << 30) |((uint32_t)en_d13 << 29) |((uint32_t)en_d12 << 28) |((uint32_t)en_d11 << 27) |((uint32_t)en_d10 << 26) |((uint32_t)en_d9 << 25) |((uint32_t)en_d8 << 24) |((uint32_t)en_d7 << 23) |((uint32_t)en_d6 << 22) |((uint32_t)en_d5 << 21) |((uint32_t)en_d4 << 20) |((uint32_t)en_d3 << 19) |((uint32_t)en_d2 << 18) |((uint32_t)en_d1 << 17) |((uint32_t)en_d0 << 16) |((uint32_t)en_u15 << 15) |((uint32_t)en_u14 << 14) |((uint32_t)en_u13 << 13) |((uint32_t)en_u12 << 12) |((uint32_t)en_u11 << 11) |((uint32_t)en_u10 << 10) |((uint32_t)en_u9 << 9) |((uint32_t)en_u8 << 8) |((uint32_t)en_u7 << 7) |((uint32_t)en_u6 << 6) |((uint32_t)en_u5 << 5) |((uint32_t)en_u4 << 4) |((uint32_t)en_u3 << 3) |((uint32_t)en_u2 << 2) |((uint32_t)en_u1 << 1) |((uint32_t)en_u0 << 0));
}

__INLINE void pcie_wrap_pciew_int_smac_en_unpack(uint8_t* en_d15, uint8_t* en_d14, uint8_t* en_d13, uint8_t* en_d12, uint8_t* en_d11, uint8_t* en_d10, uint8_t* en_d9, uint8_t* en_d8, uint8_t* en_d7, uint8_t* en_d6, uint8_t* en_d5, uint8_t* en_d4, uint8_t* en_d3, uint8_t* en_d2, uint8_t* en_d1, uint8_t* en_d0, uint8_t* en_u15, uint8_t* en_u14, uint8_t* en_u13, uint8_t* en_u12, uint8_t* en_u11, uint8_t* en_u10, uint8_t* en_u9, uint8_t* en_u8, uint8_t* en_u7, uint8_t* en_u6, uint8_t* en_u5, uint8_t* en_u4, uint8_t* en_u3, uint8_t* en_u2, uint8_t* en_u1, uint8_t* en_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);

	*en_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*en_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*en_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*en_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*en_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*en_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*en_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*en_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*en_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*en_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*en_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*en_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*en_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*en_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*en_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*en_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*en_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*en_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*en_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*en_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*en_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*en_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*en_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*en_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*en_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*en_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*en_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*en_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*en_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*en_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*en_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*en_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_d_15_setf(uint8_t end15)
{
	ASSERT_ERR((((uint32_t)end15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)end15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_d_14_setf(uint8_t end14)
{
	ASSERT_ERR((((uint32_t)end14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)end14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_d_13_setf(uint8_t end13)
{
	ASSERT_ERR((((uint32_t)end13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)end13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_d_12_setf(uint8_t end12)
{
	ASSERT_ERR((((uint32_t)end12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)end12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_d_11_setf(uint8_t end11)
{
	ASSERT_ERR((((uint32_t)end11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)end11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_d_10_setf(uint8_t end10)
{
	ASSERT_ERR((((uint32_t)end10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)end10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_d_9_setf(uint8_t end9)
{
	ASSERT_ERR((((uint32_t)end9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)end9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_d_8_setf(uint8_t end8)
{
	ASSERT_ERR((((uint32_t)end8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)end8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_d_7_setf(uint8_t end7)
{
	ASSERT_ERR((((uint32_t)end7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)end7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_d_6_setf(uint8_t end6)
{
	ASSERT_ERR((((uint32_t)end6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)end6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_d_5_setf(uint8_t end5)
{
	ASSERT_ERR((((uint32_t)end5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)end5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_d_4_setf(uint8_t end4)
{
	ASSERT_ERR((((uint32_t)end4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)end4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_d_3_setf(uint8_t end3)
{
	ASSERT_ERR((((uint32_t)end3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)end3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_d_2_setf(uint8_t end2)
{
	ASSERT_ERR((((uint32_t)end2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)end2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_d_1_setf(uint8_t end1)
{
	ASSERT_ERR((((uint32_t)end1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)end1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_d_0_setf(uint8_t end0)
{
	ASSERT_ERR((((uint32_t)end0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)end0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_u_15_setf(uint8_t enu15)
{
	ASSERT_ERR((((uint32_t)enu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)enu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_u_14_setf(uint8_t enu14)
{
	ASSERT_ERR((((uint32_t)enu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)enu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_u_13_setf(uint8_t enu13)
{
	ASSERT_ERR((((uint32_t)enu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)enu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_u_12_setf(uint8_t enu12)
{
	ASSERT_ERR((((uint32_t)enu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)enu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_u_11_setf(uint8_t enu11)
{
	ASSERT_ERR((((uint32_t)enu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)enu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_u_10_setf(uint8_t enu10)
{
	ASSERT_ERR((((uint32_t)enu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)enu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_u_9_setf(uint8_t enu9)
{
	ASSERT_ERR((((uint32_t)enu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)enu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_u_8_setf(uint8_t enu8)
{
	ASSERT_ERR((((uint32_t)enu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)enu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_u_7_setf(uint8_t enu7)
{
	ASSERT_ERR((((uint32_t)enu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)enu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_u_6_setf(uint8_t enu6)
{
	ASSERT_ERR((((uint32_t)enu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)enu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_u_5_setf(uint8_t enu5)
{
	ASSERT_ERR((((uint32_t)enu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)enu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_u_4_setf(uint8_t enu4)
{
	ASSERT_ERR((((uint32_t)enu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)enu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_u_3_setf(uint8_t enu3)
{
	ASSERT_ERR((((uint32_t)enu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)enu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_u_2_setf(uint8_t enu2)
{
	ASSERT_ERR((((uint32_t)enu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)enu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_u_1_setf(uint8_t enu1)
{
	ASSERT_ERR((((uint32_t)enu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)enu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_en_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_int_smac_en_en_u_0_setf(uint8_t enu0)
{
	ASSERT_ERR((((uint32_t)enu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)enu0 <<0));
}

/**
 * @brief PCIEW_INT_SMAC_STAT register definition
 *  Interrupts SMAC status register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    DONE_D15                  0              
 *    30    DONE_D14                  0              
 *    29    DONE_D13                  0              
 *    28    DONE_D12                  0              
 *    27    DONE_D11                  0              
 *    26    DONE_D10                  0              
 *    25    DONE_D9                   0              
 *    24    DONE_D8                   0              
 *    23    DONE_D7                   0              
 *    22    DONE_D6                   0              
 *    21    DONE_D5                   0              
 *    20    DONE_D4                   0              
 *    19    DONE_D3                   0              
 *    18    DONE_D2                   0              
 *    17    DONE_D1                   0              
 *    16    DONE_D0                   0              
 *    15    DONE_U15                  0              
 *    14    DONE_U14                  0              
 *    13    DONE_U13                  0              
 *    12    DONE_U12                  0              
 *    11    DONE_U11                  0              
 *    10    DONE_U10                  0              
 *    09    DONE_U9                   0              
 *    08    DONE_U8                   0              
 *    07    DONE_U7                   0              
 *    06    DONE_U6                   0              
 *    05    DONE_U5                   0              
 *    04    DONE_U4                   0              
 *    03    DONE_U3                   0              
 *    02    DONE_U2                   0              
 *    01    DONE_U1                   0              
 *    00    DONE_U0                   0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000290)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_OFFSET      0x00000290
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_INDEX       0x000000A4
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_smac_stat_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_STAT_DONE_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_smac_stat_unpack(uint8_t* done_d15, uint8_t* done_d14, uint8_t* done_d13, uint8_t* done_d12, uint8_t* done_d11, uint8_t* done_d10, uint8_t* done_d9, uint8_t* done_d8, uint8_t* done_d7, uint8_t* done_d6, uint8_t* done_d5, uint8_t* done_d4, uint8_t* done_d3, uint8_t* done_d2, uint8_t* done_d1, uint8_t* done_d0, uint8_t* done_u15, uint8_t* done_u14, uint8_t* done_u13, uint8_t* done_u12, uint8_t* done_u11, uint8_t* done_u10, uint8_t* done_u9, uint8_t* done_u8, uint8_t* done_u7, uint8_t* done_u6, uint8_t* done_u5, uint8_t* done_u4, uint8_t* done_u3, uint8_t* done_u2, uint8_t* done_u1, uint8_t* done_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);

	*done_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*done_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*done_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*done_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*done_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*done_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*done_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*done_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*done_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*done_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*done_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*done_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*done_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*done_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*done_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*done_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*done_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*done_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*done_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*done_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*done_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*done_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*done_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*done_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*done_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*done_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*done_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*done_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*done_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*done_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*done_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*done_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_stat_done_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief PCIEW_INT_SMAC_EN_CMD register definition
 *  SMAC interrupt enable command register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EN_CMD_D15                0              
 *    30    EN_CMD_D14                0              
 *    29    EN_CMD_D13                0              
 *    28    EN_CMD_D12                0              
 *    27    EN_CMD_D11                0              
 *    26    EN_CMD_D10                0              
 *    25    EN_CMD_D9                 0              
 *    24    EN_CMD_D8                 0              
 *    23    EN_CMD_D7                 0              
 *    22    EN_CMD_D6                 0              
 *    21    EN_CMD_D5                 0              
 *    20    EN_CMD_D4                 0              
 *    19    EN_CMD_D3                 0              
 *    18    EN_CMD_D2                 0              
 *    17    EN_CMD_D1                 0              
 *    16    EN_CMD_D0                 0              
 *    15    EN_CMD_U15                0              
 *    14    EN_CMD_U14                0              
 *    13    EN_CMD_U13                0              
 *    12    EN_CMD_U12                0              
 *    11    EN_CMD_U11                0              
 *    10    EN_CMD_U10                0              
 *    09    EN_CMD_U9                 0              
 *    08    EN_CMD_U8                 0              
 *    07    EN_CMD_U7                 0              
 *    06    EN_CMD_U6                 0              
 *    05    EN_CMD_U5                 0              
 *    04    EN_CMD_U4                 0              
 *    03    EN_CMD_U3                 0              
 *    02    EN_CMD_U2                 0              
 *    01    EN_CMD_U1                 0              
 *    00    EN_CMD_U0                 0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000294)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_OFFSET      0x00000294
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_INDEX       0x000000A5
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_smac_en_cmd_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
}

__INLINE void pcie_wrap_pciew_int_smac_en_cmd_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_EN_CMD_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_smac_en_cmd_pack(uint8_t en_cmd_d15, uint8_t en_cmd_d14, uint8_t en_cmd_d13, uint8_t en_cmd_d12, uint8_t en_cmd_d11, uint8_t en_cmd_d10, uint8_t en_cmd_d9, uint8_t en_cmd_d8, uint8_t en_cmd_d7, uint8_t en_cmd_d6, uint8_t en_cmd_d5, uint8_t en_cmd_d4, uint8_t en_cmd_d3, uint8_t en_cmd_d2, uint8_t en_cmd_d1, uint8_t en_cmd_d0, uint8_t en_cmd_u15, uint8_t en_cmd_u14, uint8_t en_cmd_u13, uint8_t en_cmd_u12, uint8_t en_cmd_u11, uint8_t en_cmd_u10, uint8_t en_cmd_u9, uint8_t en_cmd_u8, uint8_t en_cmd_u7, uint8_t en_cmd_u6, uint8_t en_cmd_u5, uint8_t en_cmd_u4, uint8_t en_cmd_u3, uint8_t en_cmd_u2, uint8_t en_cmd_u1, uint8_t en_cmd_u0)
{
	ASSERT_ERR((((uint32_t)en_cmd_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)en_cmd_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR,  ((uint32_t)en_cmd_d15 << 31) |((uint32_t)en_cmd_d14 << 30) |((uint32_t)en_cmd_d13 << 29) |((uint32_t)en_cmd_d12 << 28) |((uint32_t)en_cmd_d11 << 27) |((uint32_t)en_cmd_d10 << 26) |((uint32_t)en_cmd_d9 << 25) |((uint32_t)en_cmd_d8 << 24) |((uint32_t)en_cmd_d7 << 23) |((uint32_t)en_cmd_d6 << 22) |((uint32_t)en_cmd_d5 << 21) |((uint32_t)en_cmd_d4 << 20) |((uint32_t)en_cmd_d3 << 19) |((uint32_t)en_cmd_d2 << 18) |((uint32_t)en_cmd_d1 << 17) |((uint32_t)en_cmd_d0 << 16) |((uint32_t)en_cmd_u15 << 15) |((uint32_t)en_cmd_u14 << 14) |((uint32_t)en_cmd_u13 << 13) |((uint32_t)en_cmd_u12 << 12) |((uint32_t)en_cmd_u11 << 11) |((uint32_t)en_cmd_u10 << 10) |((uint32_t)en_cmd_u9 << 9) |((uint32_t)en_cmd_u8 << 8) |((uint32_t)en_cmd_u7 << 7) |((uint32_t)en_cmd_u6 << 6) |((uint32_t)en_cmd_u5 << 5) |((uint32_t)en_cmd_u4 << 4) |((uint32_t)en_cmd_u3 << 3) |((uint32_t)en_cmd_u2 << 2) |((uint32_t)en_cmd_u1 << 1) |((uint32_t)en_cmd_u0 << 0));
}

__INLINE void pcie_wrap_pciew_int_smac_en_cmd_unpack(uint8_t* en_cmd_d15, uint8_t* en_cmd_d14, uint8_t* en_cmd_d13, uint8_t* en_cmd_d12, uint8_t* en_cmd_d11, uint8_t* en_cmd_d10, uint8_t* en_cmd_d9, uint8_t* en_cmd_d8, uint8_t* en_cmd_d7, uint8_t* en_cmd_d6, uint8_t* en_cmd_d5, uint8_t* en_cmd_d4, uint8_t* en_cmd_d3, uint8_t* en_cmd_d2, uint8_t* en_cmd_d1, uint8_t* en_cmd_d0, uint8_t* en_cmd_u15, uint8_t* en_cmd_u14, uint8_t* en_cmd_u13, uint8_t* en_cmd_u12, uint8_t* en_cmd_u11, uint8_t* en_cmd_u10, uint8_t* en_cmd_u9, uint8_t* en_cmd_u8, uint8_t* en_cmd_u7, uint8_t* en_cmd_u6, uint8_t* en_cmd_u5, uint8_t* en_cmd_u4, uint8_t* en_cmd_u3, uint8_t* en_cmd_u2, uint8_t* en_cmd_u1, uint8_t* en_cmd_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);

	*en_cmd_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*en_cmd_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*en_cmd_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*en_cmd_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*en_cmd_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*en_cmd_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*en_cmd_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*en_cmd_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*en_cmd_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*en_cmd_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*en_cmd_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*en_cmd_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*en_cmd_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*en_cmd_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*en_cmd_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*en_cmd_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*en_cmd_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*en_cmd_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*en_cmd_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*en_cmd_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*en_cmd_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*en_cmd_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*en_cmd_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*en_cmd_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*en_cmd_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*en_cmd_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*en_cmd_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*en_cmd_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*en_cmd_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*en_cmd_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*en_cmd_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*en_cmd_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_15_setf(uint8_t encmdd15)
{
	ASSERT_ERR((((uint32_t)encmdd15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)encmdd15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_14_setf(uint8_t encmdd14)
{
	ASSERT_ERR((((uint32_t)encmdd14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)encmdd14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_13_setf(uint8_t encmdd13)
{
	ASSERT_ERR((((uint32_t)encmdd13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)encmdd13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_12_setf(uint8_t encmdd12)
{
	ASSERT_ERR((((uint32_t)encmdd12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)encmdd12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_11_setf(uint8_t encmdd11)
{
	ASSERT_ERR((((uint32_t)encmdd11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)encmdd11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_10_setf(uint8_t encmdd10)
{
	ASSERT_ERR((((uint32_t)encmdd10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)encmdd10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_9_setf(uint8_t encmdd9)
{
	ASSERT_ERR((((uint32_t)encmdd9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)encmdd9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_8_setf(uint8_t encmdd8)
{
	ASSERT_ERR((((uint32_t)encmdd8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)encmdd8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_7_setf(uint8_t encmdd7)
{
	ASSERT_ERR((((uint32_t)encmdd7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)encmdd7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_6_setf(uint8_t encmdd6)
{
	ASSERT_ERR((((uint32_t)encmdd6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)encmdd6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_5_setf(uint8_t encmdd5)
{
	ASSERT_ERR((((uint32_t)encmdd5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)encmdd5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_4_setf(uint8_t encmdd4)
{
	ASSERT_ERR((((uint32_t)encmdd4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)encmdd4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_3_setf(uint8_t encmdd3)
{
	ASSERT_ERR((((uint32_t)encmdd3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)encmdd3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_2_setf(uint8_t encmdd2)
{
	ASSERT_ERR((((uint32_t)encmdd2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)encmdd2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_1_setf(uint8_t encmdd1)
{
	ASSERT_ERR((((uint32_t)encmdd1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)encmdd1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_0_setf(uint8_t encmdd0)
{
	ASSERT_ERR((((uint32_t)encmdd0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)encmdd0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_15_setf(uint8_t encmdu15)
{
	ASSERT_ERR((((uint32_t)encmdu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)encmdu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_14_setf(uint8_t encmdu14)
{
	ASSERT_ERR((((uint32_t)encmdu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)encmdu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_13_setf(uint8_t encmdu13)
{
	ASSERT_ERR((((uint32_t)encmdu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)encmdu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_12_setf(uint8_t encmdu12)
{
	ASSERT_ERR((((uint32_t)encmdu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)encmdu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_11_setf(uint8_t encmdu11)
{
	ASSERT_ERR((((uint32_t)encmdu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)encmdu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_10_setf(uint8_t encmdu10)
{
	ASSERT_ERR((((uint32_t)encmdu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)encmdu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_9_setf(uint8_t encmdu9)
{
	ASSERT_ERR((((uint32_t)encmdu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)encmdu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_8_setf(uint8_t encmdu8)
{
	ASSERT_ERR((((uint32_t)encmdu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)encmdu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_7_setf(uint8_t encmdu7)
{
	ASSERT_ERR((((uint32_t)encmdu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)encmdu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_6_setf(uint8_t encmdu6)
{
	ASSERT_ERR((((uint32_t)encmdu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)encmdu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_5_setf(uint8_t encmdu5)
{
	ASSERT_ERR((((uint32_t)encmdu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)encmdu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_4_setf(uint8_t encmdu4)
{
	ASSERT_ERR((((uint32_t)encmdu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)encmdu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_3_setf(uint8_t encmdu3)
{
	ASSERT_ERR((((uint32_t)encmdu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)encmdu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_2_setf(uint8_t encmdu2)
{
	ASSERT_ERR((((uint32_t)encmdu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)encmdu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_1_setf(uint8_t encmdu1)
{
	ASSERT_ERR((((uint32_t)encmdu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)encmdu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_0_setf(uint8_t encmdu0)
{
	ASSERT_ERR((((uint32_t)encmdu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_EN_CMD_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)encmdu0 <<0));
}

/**
 * @brief PCIEW_INT_SMAC_DIS_CMD register definition
 *  SMAC interrupt disable command register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    DIS_CMD_D15               0              
 *    30    DIS_CMD_D14               0              
 *    29    DIS_CMD_D13               0              
 *    28    DIS_CMD_D12               0              
 *    27    DIS_CMD_D11               0              
 *    26    DIS_CMD_D10               0              
 *    25    DIS_CMD_D9                0              
 *    24    DIS_CMD_D8                0              
 *    23    DIS_CMD_D7                0              
 *    22    DIS_CMD_D6                0              
 *    21    DIS_CMD_D5                0              
 *    20    DIS_CMD_D4                0              
 *    19    DIS_CMD_D3                0              
 *    18    DIS_CMD_D2                0              
 *    17    DIS_CMD_D1                0              
 *    16    DIS_CMD_D0                0              
 *    15    DIS_CMD_U15               0              
 *    14    DIS_CMD_U14               0              
 *    13    DIS_CMD_U13               0              
 *    12    DIS_CMD_U12               0              
 *    11    DIS_CMD_U11               0              
 *    10    DIS_CMD_U10               0              
 *    09    DIS_CMD_U9                0              
 *    08    DIS_CMD_U8                0              
 *    07    DIS_CMD_U7                0              
 *    06    DIS_CMD_U6                0              
 *    05    DIS_CMD_U5                0              
 *    04    DIS_CMD_U4                0              
 *    03    DIS_CMD_U3                0              
 *    02    DIS_CMD_U2                0              
 *    01    DIS_CMD_U1                0              
 *    00    DIS_CMD_U0                0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000298)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_OFFSET      0x00000298
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_INDEX       0x000000A6
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_smac_dis_cmd_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
}

__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_DIS_CMD_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_pack(uint8_t dis_cmd_d15, uint8_t dis_cmd_d14, uint8_t dis_cmd_d13, uint8_t dis_cmd_d12, uint8_t dis_cmd_d11, uint8_t dis_cmd_d10, uint8_t dis_cmd_d9, uint8_t dis_cmd_d8, uint8_t dis_cmd_d7, uint8_t dis_cmd_d6, uint8_t dis_cmd_d5, uint8_t dis_cmd_d4, uint8_t dis_cmd_d3, uint8_t dis_cmd_d2, uint8_t dis_cmd_d1, uint8_t dis_cmd_d0, uint8_t dis_cmd_u15, uint8_t dis_cmd_u14, uint8_t dis_cmd_u13, uint8_t dis_cmd_u12, uint8_t dis_cmd_u11, uint8_t dis_cmd_u10, uint8_t dis_cmd_u9, uint8_t dis_cmd_u8, uint8_t dis_cmd_u7, uint8_t dis_cmd_u6, uint8_t dis_cmd_u5, uint8_t dis_cmd_u4, uint8_t dis_cmd_u3, uint8_t dis_cmd_u2, uint8_t dis_cmd_u1, uint8_t dis_cmd_u0)
{
	ASSERT_ERR((((uint32_t)dis_cmd_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)dis_cmd_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR,  ((uint32_t)dis_cmd_d15 << 31) |((uint32_t)dis_cmd_d14 << 30) |((uint32_t)dis_cmd_d13 << 29) |((uint32_t)dis_cmd_d12 << 28) |((uint32_t)dis_cmd_d11 << 27) |((uint32_t)dis_cmd_d10 << 26) |((uint32_t)dis_cmd_d9 << 25) |((uint32_t)dis_cmd_d8 << 24) |((uint32_t)dis_cmd_d7 << 23) |((uint32_t)dis_cmd_d6 << 22) |((uint32_t)dis_cmd_d5 << 21) |((uint32_t)dis_cmd_d4 << 20) |((uint32_t)dis_cmd_d3 << 19) |((uint32_t)dis_cmd_d2 << 18) |((uint32_t)dis_cmd_d1 << 17) |((uint32_t)dis_cmd_d0 << 16) |((uint32_t)dis_cmd_u15 << 15) |((uint32_t)dis_cmd_u14 << 14) |((uint32_t)dis_cmd_u13 << 13) |((uint32_t)dis_cmd_u12 << 12) |((uint32_t)dis_cmd_u11 << 11) |((uint32_t)dis_cmd_u10 << 10) |((uint32_t)dis_cmd_u9 << 9) |((uint32_t)dis_cmd_u8 << 8) |((uint32_t)dis_cmd_u7 << 7) |((uint32_t)dis_cmd_u6 << 6) |((uint32_t)dis_cmd_u5 << 5) |((uint32_t)dis_cmd_u4 << 4) |((uint32_t)dis_cmd_u3 << 3) |((uint32_t)dis_cmd_u2 << 2) |((uint32_t)dis_cmd_u1 << 1) |((uint32_t)dis_cmd_u0 << 0));
}

__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_unpack(uint8_t* dis_cmd_d15, uint8_t* dis_cmd_d14, uint8_t* dis_cmd_d13, uint8_t* dis_cmd_d12, uint8_t* dis_cmd_d11, uint8_t* dis_cmd_d10, uint8_t* dis_cmd_d9, uint8_t* dis_cmd_d8, uint8_t* dis_cmd_d7, uint8_t* dis_cmd_d6, uint8_t* dis_cmd_d5, uint8_t* dis_cmd_d4, uint8_t* dis_cmd_d3, uint8_t* dis_cmd_d2, uint8_t* dis_cmd_d1, uint8_t* dis_cmd_d0, uint8_t* dis_cmd_u15, uint8_t* dis_cmd_u14, uint8_t* dis_cmd_u13, uint8_t* dis_cmd_u12, uint8_t* dis_cmd_u11, uint8_t* dis_cmd_u10, uint8_t* dis_cmd_u9, uint8_t* dis_cmd_u8, uint8_t* dis_cmd_u7, uint8_t* dis_cmd_u6, uint8_t* dis_cmd_u5, uint8_t* dis_cmd_u4, uint8_t* dis_cmd_u3, uint8_t* dis_cmd_u2, uint8_t* dis_cmd_u1, uint8_t* dis_cmd_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);

	*dis_cmd_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*dis_cmd_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*dis_cmd_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*dis_cmd_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*dis_cmd_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*dis_cmd_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*dis_cmd_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*dis_cmd_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*dis_cmd_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*dis_cmd_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*dis_cmd_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*dis_cmd_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*dis_cmd_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*dis_cmd_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*dis_cmd_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*dis_cmd_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*dis_cmd_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*dis_cmd_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*dis_cmd_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*dis_cmd_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*dis_cmd_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*dis_cmd_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*dis_cmd_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*dis_cmd_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*dis_cmd_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*dis_cmd_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*dis_cmd_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*dis_cmd_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*dis_cmd_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*dis_cmd_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*dis_cmd_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*dis_cmd_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_15_setf(uint8_t discmdd15)
{
	ASSERT_ERR((((uint32_t)discmdd15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)discmdd15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_14_setf(uint8_t discmdd14)
{
	ASSERT_ERR((((uint32_t)discmdd14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)discmdd14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_13_setf(uint8_t discmdd13)
{
	ASSERT_ERR((((uint32_t)discmdd13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)discmdd13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_12_setf(uint8_t discmdd12)
{
	ASSERT_ERR((((uint32_t)discmdd12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)discmdd12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_11_setf(uint8_t discmdd11)
{
	ASSERT_ERR((((uint32_t)discmdd11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)discmdd11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_10_setf(uint8_t discmdd10)
{
	ASSERT_ERR((((uint32_t)discmdd10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)discmdd10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_9_setf(uint8_t discmdd9)
{
	ASSERT_ERR((((uint32_t)discmdd9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)discmdd9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_8_setf(uint8_t discmdd8)
{
	ASSERT_ERR((((uint32_t)discmdd8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)discmdd8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_7_setf(uint8_t discmdd7)
{
	ASSERT_ERR((((uint32_t)discmdd7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)discmdd7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_6_setf(uint8_t discmdd6)
{
	ASSERT_ERR((((uint32_t)discmdd6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)discmdd6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_5_setf(uint8_t discmdd5)
{
	ASSERT_ERR((((uint32_t)discmdd5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)discmdd5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_4_setf(uint8_t discmdd4)
{
	ASSERT_ERR((((uint32_t)discmdd4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)discmdd4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_3_setf(uint8_t discmdd3)
{
	ASSERT_ERR((((uint32_t)discmdd3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)discmdd3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_2_setf(uint8_t discmdd2)
{
	ASSERT_ERR((((uint32_t)discmdd2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)discmdd2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_1_setf(uint8_t discmdd1)
{
	ASSERT_ERR((((uint32_t)discmdd1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)discmdd1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_0_setf(uint8_t discmdd0)
{
	ASSERT_ERR((((uint32_t)discmdd0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)discmdd0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_15_setf(uint8_t discmdu15)
{
	ASSERT_ERR((((uint32_t)discmdu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)discmdu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_14_setf(uint8_t discmdu14)
{
	ASSERT_ERR((((uint32_t)discmdu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)discmdu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_13_setf(uint8_t discmdu13)
{
	ASSERT_ERR((((uint32_t)discmdu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)discmdu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_12_setf(uint8_t discmdu12)
{
	ASSERT_ERR((((uint32_t)discmdu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)discmdu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_11_setf(uint8_t discmdu11)
{
	ASSERT_ERR((((uint32_t)discmdu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)discmdu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_10_setf(uint8_t discmdu10)
{
	ASSERT_ERR((((uint32_t)discmdu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)discmdu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_9_setf(uint8_t discmdu9)
{
	ASSERT_ERR((((uint32_t)discmdu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)discmdu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_8_setf(uint8_t discmdu8)
{
	ASSERT_ERR((((uint32_t)discmdu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)discmdu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_7_setf(uint8_t discmdu7)
{
	ASSERT_ERR((((uint32_t)discmdu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)discmdu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_6_setf(uint8_t discmdu6)
{
	ASSERT_ERR((((uint32_t)discmdu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)discmdu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_5_setf(uint8_t discmdu5)
{
	ASSERT_ERR((((uint32_t)discmdu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)discmdu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_4_setf(uint8_t discmdu4)
{
	ASSERT_ERR((((uint32_t)discmdu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)discmdu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_3_setf(uint8_t discmdu3)
{
	ASSERT_ERR((((uint32_t)discmdu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)discmdu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_2_setf(uint8_t discmdu2)
{
	ASSERT_ERR((((uint32_t)discmdu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)discmdu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_1_setf(uint8_t discmdu1)
{
	ASSERT_ERR((((uint32_t)discmdu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)discmdu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_0_setf(uint8_t discmdu0)
{
	ASSERT_ERR((((uint32_t)discmdu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_DIS_CMD_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)discmdu0 <<0));
}

/**
 * @brief PCIEW_INT_SMAC_ERR_STAT register definition
 *  Interrupts status register for the SMAC register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    ERR_D15                   0              
 *    30    ERR_D14                   0              
 *    29    ERR_D13                   0              
 *    28    ERR_D12                   0              
 *    27    ERR_D11                   0              
 *    26    ERR_D10                   0              
 *    25    ERR_D9                    0              
 *    24    ERR_D8                    0              
 *    23    ERR_D7                    0              
 *    22    ERR_D6                    0              
 *    21    ERR_D5                    0              
 *    20    ERR_D4                    0              
 *    19    ERR_D3                    0              
 *    18    ERR_D2                    0              
 *    17    ERR_D1                    0              
 *    16    ERR_D0                    0              
 *    15    ERR_U15                   0              
 *    14    ERR_U14                   0              
 *    13    ERR_U13                   0              
 *    12    ERR_U12                   0              
 *    11    ERR_U11                   0              
 *    10    ERR_U10                   0              
 *    09    ERR_U9                    0              
 *    08    ERR_U8                    0              
 *    07    ERR_U7                    0              
 *    06    ERR_U6                    0              
 *    05    ERR_U5                    0              
 *    04    ERR_U4                    0              
 *    03    ERR_U3                    0              
 *    02    ERR_U2                    0              
 *    01    ERR_U1                    0              
 *    00    ERR_U0                    0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000029C)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_OFFSET      0x0000029C
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_INDEX       0x000000A7
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_smac_err_stat_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ERR_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_smac_err_stat_unpack(uint8_t* err_d15, uint8_t* err_d14, uint8_t* err_d13, uint8_t* err_d12, uint8_t* err_d11, uint8_t* err_d10, uint8_t* err_d9, uint8_t* err_d8, uint8_t* err_d7, uint8_t* err_d6, uint8_t* err_d5, uint8_t* err_d4, uint8_t* err_d3, uint8_t* err_d2, uint8_t* err_d1, uint8_t* err_d0, uint8_t* err_u15, uint8_t* err_u14, uint8_t* err_u13, uint8_t* err_u12, uint8_t* err_u11, uint8_t* err_u10, uint8_t* err_u9, uint8_t* err_u8, uint8_t* err_u7, uint8_t* err_u6, uint8_t* err_u5, uint8_t* err_u4, uint8_t* err_u3, uint8_t* err_u2, uint8_t* err_u1, uint8_t* err_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);

	*err_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*err_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*err_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*err_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*err_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*err_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*err_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*err_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*err_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*err_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*err_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*err_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*err_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*err_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*err_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*err_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*err_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*err_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*err_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*err_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*err_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*err_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*err_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*err_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*err_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*err_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*err_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*err_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*err_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*err_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*err_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*err_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t pcie_wrap_pciew_int_smac_err_stat_err_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_SMAC_ERR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief PCIEW_LLI_GROUP register definition
 *  Per LLI group Configuration register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    GROUP_D15                 0              
 *    30    GROUP_D14                 0              
 *    29    GROUP_D13                 0              
 *    28    GROUP_D12                 0              
 *    27    GROUP_D11                 0              
 *    26    GROUP_D10                 0              
 *    25    GROUP_D9                  0              
 *    24    GROUP_D8                  0              
 *    23    GROUP_D7                  0              
 *    22    GROUP_D6                  0              
 *    21    GROUP_D5                  0              
 *    20    GROUP_D4                  0              
 *    19    GROUP_D3                  0              
 *    18    GROUP_D2                  0              
 *    17    GROUP_D1                  0              
 *    16    GROUP_D0                  0              
 *    15    GROUP_U15                 0              
 *    14    GROUP_U14                 0              
 *    13    GROUP_U13                 0              
 *    12    GROUP_U12                 0              
 *    11    GROUP_U11                 0              
 *    10    GROUP_U10                 0              
 *    09    GROUP_U9                  0              
 *    08    GROUP_U8                  0              
 *    07    GROUP_U7                  0              
 *    06    GROUP_U6                  0              
 *    05    GROUP_U5                  0              
 *    04    GROUP_U4                  0              
 *    03    GROUP_U3                  0              
 *    02    GROUP_U2                  0              
 *    01    GROUP_U1                  0              
 *    00    GROUP_U0                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_LLI_GROUP_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002A0)
#define PCIE_WRAP_PCIEW_LLI_GROUP_OFFSET      0x000002A0
#define PCIE_WRAP_PCIEW_LLI_GROUP_INDEX       0x000000A8
#define PCIE_WRAP_PCIEW_LLI_GROUP_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_lli_group_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
}

__INLINE void pcie_wrap_pciew_lli_group_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_15_POS    31
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_14_POS    30
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_13_POS    29
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_12_POS    28
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_11_POS    27
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_10_POS    26
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_9_POS    25
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_8_POS    24
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_7_POS    23
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_6_POS    22
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_5_POS    21
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_4_POS    20
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_3_POS    19
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_2_POS    18
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_1_POS    17
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_0_POS    16
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_15_POS    15
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_14_POS    14
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_13_POS    13
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_12_POS    12
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_11_POS    11
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_10_POS    10
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_9_POS    9
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_8_POS    8
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_7_POS    7
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_6_POS    6
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_5_POS    5
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_4_POS    4
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_3_POS    3
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_2_POS    2
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_1_POS    1
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_0_POS    0

#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_GROUP_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_lli_group_pack(uint8_t group_d15, uint8_t group_d14, uint8_t group_d13, uint8_t group_d12, uint8_t group_d11, uint8_t group_d10, uint8_t group_d9, uint8_t group_d8, uint8_t group_d7, uint8_t group_d6, uint8_t group_d5, uint8_t group_d4, uint8_t group_d3, uint8_t group_d2, uint8_t group_d1, uint8_t group_d0, uint8_t group_u15, uint8_t group_u14, uint8_t group_u13, uint8_t group_u12, uint8_t group_u11, uint8_t group_u10, uint8_t group_u9, uint8_t group_u8, uint8_t group_u7, uint8_t group_u6, uint8_t group_u5, uint8_t group_u4, uint8_t group_u3, uint8_t group_u2, uint8_t group_u1, uint8_t group_u0)
{
	ASSERT_ERR((((uint32_t)group_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)group_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)group_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)group_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)group_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)group_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)group_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)group_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)group_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)group_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)group_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)group_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)group_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)group_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)group_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)group_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)group_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)group_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)group_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)group_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)group_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)group_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)group_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)group_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)group_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)group_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)group_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)group_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)group_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)group_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)group_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)group_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR,  ((uint32_t)group_d15 << 31) |((uint32_t)group_d14 << 30) |((uint32_t)group_d13 << 29) |((uint32_t)group_d12 << 28) |((uint32_t)group_d11 << 27) |((uint32_t)group_d10 << 26) |((uint32_t)group_d9 << 25) |((uint32_t)group_d8 << 24) |((uint32_t)group_d7 << 23) |((uint32_t)group_d6 << 22) |((uint32_t)group_d5 << 21) |((uint32_t)group_d4 << 20) |((uint32_t)group_d3 << 19) |((uint32_t)group_d2 << 18) |((uint32_t)group_d1 << 17) |((uint32_t)group_d0 << 16) |((uint32_t)group_u15 << 15) |((uint32_t)group_u14 << 14) |((uint32_t)group_u13 << 13) |((uint32_t)group_u12 << 12) |((uint32_t)group_u11 << 11) |((uint32_t)group_u10 << 10) |((uint32_t)group_u9 << 9) |((uint32_t)group_u8 << 8) |((uint32_t)group_u7 << 7) |((uint32_t)group_u6 << 6) |((uint32_t)group_u5 << 5) |((uint32_t)group_u4 << 4) |((uint32_t)group_u3 << 3) |((uint32_t)group_u2 << 2) |((uint32_t)group_u1 << 1) |((uint32_t)group_u0 << 0));
}

__INLINE void pcie_wrap_pciew_lli_group_unpack(uint8_t* group_d15, uint8_t* group_d14, uint8_t* group_d13, uint8_t* group_d12, uint8_t* group_d11, uint8_t* group_d10, uint8_t* group_d9, uint8_t* group_d8, uint8_t* group_d7, uint8_t* group_d6, uint8_t* group_d5, uint8_t* group_d4, uint8_t* group_d3, uint8_t* group_d2, uint8_t* group_d1, uint8_t* group_d0, uint8_t* group_u15, uint8_t* group_u14, uint8_t* group_u13, uint8_t* group_u12, uint8_t* group_u11, uint8_t* group_u10, uint8_t* group_u9, uint8_t* group_u8, uint8_t* group_u7, uint8_t* group_u6, uint8_t* group_u5, uint8_t* group_u4, uint8_t* group_u3, uint8_t* group_u2, uint8_t* group_u1, uint8_t* group_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);

	*group_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*group_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*group_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*group_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*group_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*group_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*group_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*group_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*group_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*group_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*group_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*group_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*group_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*group_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*group_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*group_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*group_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*group_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*group_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*group_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*group_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*group_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*group_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*group_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*group_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*group_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*group_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*group_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*group_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*group_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*group_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*group_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_lli_group_group_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_lli_group_group_d_15_setf(uint8_t groupd15)
{
	ASSERT_ERR((((uint32_t)groupd15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)groupd15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_lli_group_group_d_14_setf(uint8_t groupd14)
{
	ASSERT_ERR((((uint32_t)groupd14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)groupd14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_lli_group_group_d_13_setf(uint8_t groupd13)
{
	ASSERT_ERR((((uint32_t)groupd13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)groupd13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_lli_group_group_d_12_setf(uint8_t groupd12)
{
	ASSERT_ERR((((uint32_t)groupd12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)groupd12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_lli_group_group_d_11_setf(uint8_t groupd11)
{
	ASSERT_ERR((((uint32_t)groupd11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)groupd11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_lli_group_group_d_10_setf(uint8_t groupd10)
{
	ASSERT_ERR((((uint32_t)groupd10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)groupd10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_lli_group_group_d_9_setf(uint8_t groupd9)
{
	ASSERT_ERR((((uint32_t)groupd9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)groupd9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_lli_group_group_d_8_setf(uint8_t groupd8)
{
	ASSERT_ERR((((uint32_t)groupd8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)groupd8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_lli_group_group_d_7_setf(uint8_t groupd7)
{
	ASSERT_ERR((((uint32_t)groupd7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)groupd7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_lli_group_group_d_6_setf(uint8_t groupd6)
{
	ASSERT_ERR((((uint32_t)groupd6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)groupd6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_lli_group_group_d_5_setf(uint8_t groupd5)
{
	ASSERT_ERR((((uint32_t)groupd5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)groupd5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_lli_group_group_d_4_setf(uint8_t groupd4)
{
	ASSERT_ERR((((uint32_t)groupd4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)groupd4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_lli_group_group_d_3_setf(uint8_t groupd3)
{
	ASSERT_ERR((((uint32_t)groupd3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)groupd3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_lli_group_group_d_2_setf(uint8_t groupd2)
{
	ASSERT_ERR((((uint32_t)groupd2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)groupd2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_lli_group_group_d_1_setf(uint8_t groupd1)
{
	ASSERT_ERR((((uint32_t)groupd1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)groupd1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_lli_group_group_d_0_setf(uint8_t groupd0)
{
	ASSERT_ERR((((uint32_t)groupd0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)groupd0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_lli_group_group_u_15_setf(uint8_t groupu15)
{
	ASSERT_ERR((((uint32_t)groupu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)groupu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_lli_group_group_u_14_setf(uint8_t groupu14)
{
	ASSERT_ERR((((uint32_t)groupu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)groupu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_lli_group_group_u_13_setf(uint8_t groupu13)
{
	ASSERT_ERR((((uint32_t)groupu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)groupu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_lli_group_group_u_12_setf(uint8_t groupu12)
{
	ASSERT_ERR((((uint32_t)groupu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)groupu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_lli_group_group_u_11_setf(uint8_t groupu11)
{
	ASSERT_ERR((((uint32_t)groupu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)groupu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_lli_group_group_u_10_setf(uint8_t groupu10)
{
	ASSERT_ERR((((uint32_t)groupu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)groupu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_lli_group_group_u_9_setf(uint8_t groupu9)
{
	ASSERT_ERR((((uint32_t)groupu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)groupu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_lli_group_group_u_8_setf(uint8_t groupu8)
{
	ASSERT_ERR((((uint32_t)groupu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)groupu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_lli_group_group_u_7_setf(uint8_t groupu7)
{
	ASSERT_ERR((((uint32_t)groupu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)groupu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_lli_group_group_u_6_setf(uint8_t groupu6)
{
	ASSERT_ERR((((uint32_t)groupu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)groupu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_lli_group_group_u_5_setf(uint8_t groupu5)
{
	ASSERT_ERR((((uint32_t)groupu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)groupu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_lli_group_group_u_4_setf(uint8_t groupu4)
{
	ASSERT_ERR((((uint32_t)groupu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)groupu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_lli_group_group_u_3_setf(uint8_t groupu3)
{
	ASSERT_ERR((((uint32_t)groupu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)groupu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_lli_group_group_u_2_setf(uint8_t groupu2)
{
	ASSERT_ERR((((uint32_t)groupu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)groupu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_lli_group_group_u_1_setf(uint8_t groupu1)
{
	ASSERT_ERR((((uint32_t)groupu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)groupu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_group_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_lli_group_group_u_0_setf(uint8_t groupu0)
{
	ASSERT_ERR((((uint32_t)groupu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)groupu0 <<0));
}

/**
 * @brief PCIEW_LLI_GROUP_LIMIT register definition
 *  LLI groups limit Configuration register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 RSVD_3                    0x0
 *    27:24 LIMIT_DW_GROUP1           0x8
 *    23:20 RSVD_2                    0x0
 *    19:16 LIMIT_DW_GROUP0           0x8
 *    15:12 RSVD_1                    0x0
 *    11:08 LIMIT_UP_GROUP1           0x8
 *    07:04 RSVD_0                    0x0
 *    03:00 LIMIT_UP_GROUP0           0x8
 * </pre>
 */
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002A4)
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_OFFSET      0x000002A4
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_INDEX       0x000000A9
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RESET       0x08080808

__INLINE uint32_t  pcie_wrap_pciew_lli_group_limit_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR);
}

__INLINE void pcie_wrap_pciew_lli_group_limit_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RSVD_3_MASK    ((uint32_t)0xF0000000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RSVD_3_LSB    28
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RSVD_3_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_LIMIT_DW_GROUP_1_MASK    ((uint32_t)0x0F000000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_LIMIT_DW_GROUP_1_LSB    24
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_LIMIT_DW_GROUP_1_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RSVD_2_MASK    ((uint32_t)0x00F00000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RSVD_2_LSB    20
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RSVD_2_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_LIMIT_DW_GROUP_0_MASK    ((uint32_t)0x000F0000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_LIMIT_DW_GROUP_0_LSB    16
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_LIMIT_DW_GROUP_0_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RSVD_1_MASK    ((uint32_t)0x0000F000)
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RSVD_1_LSB    12
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RSVD_1_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_LIMIT_UP_GROUP_1_MASK    ((uint32_t)0x00000F00)
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_LIMIT_UP_GROUP_1_LSB    8
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_LIMIT_UP_GROUP_1_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RSVD_0_MASK    ((uint32_t)0x000000F0)
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RSVD_0_LSB    4
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RSVD_0_WIDTH    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_LIMIT_UP_GROUP_0_MASK    ((uint32_t)0x0000000F)
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_LIMIT_UP_GROUP_0_LSB    0
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_LIMIT_UP_GROUP_0_WIDTH    ((uint32_t)0x00000004)

#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RSVD_3_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_LIMIT_DW_GROUP_1_RST    0x8
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RSVD_2_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_LIMIT_DW_GROUP_0_RST    0x8
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RSVD_1_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_LIMIT_UP_GROUP_1_RST    0x8
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_RSVD_0_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_LIMIT_UP_GROUP_0_RST    0x8

__INLINE void pcie_wrap_pciew_lli_group_limit_pack(uint8_t rsvd_3, uint8_t limit_dw_group1, uint8_t rsvd_2, uint8_t limit_dw_group0, uint8_t rsvd_1, uint8_t limit_up_group1, uint8_t rsvd_0, uint8_t limit_up_group0)
{
	ASSERT_ERR((((uint32_t)rsvd_3 << 28) & ~((uint32_t)0xF0000000)) == 0);
	ASSERT_ERR((((uint32_t)limit_dw_group1 << 24) & ~((uint32_t)0x0F000000)) == 0);
	ASSERT_ERR((((uint32_t)rsvd_2 << 20) & ~((uint32_t)0x00F00000)) == 0);
	ASSERT_ERR((((uint32_t)limit_dw_group0 << 16) & ~((uint32_t)0x000F0000)) == 0);
	ASSERT_ERR((((uint32_t)rsvd_1 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)limit_up_group1 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)rsvd_0 << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)limit_up_group0 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR,  ((uint32_t)rsvd_3 << 28) |((uint32_t)limit_dw_group1 << 24) |((uint32_t)rsvd_2 << 20) |((uint32_t)limit_dw_group0 << 16) |((uint32_t)rsvd_1 << 12) |((uint32_t)limit_up_group1 << 8) |((uint32_t)rsvd_0 << 4) |((uint32_t)limit_up_group0 << 0));
}

__INLINE void pcie_wrap_pciew_lli_group_limit_unpack(uint8_t* rsvd_3, uint8_t* limit_dw_group1, uint8_t* rsvd_2, uint8_t* limit_dw_group0, uint8_t* rsvd_1, uint8_t* limit_up_group1, uint8_t* rsvd_0, uint8_t* limit_up_group0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR);

	*rsvd_3 = (localVal & ((uint32_t)0xF0000000)) >>  28;
	*limit_dw_group1 = (localVal & ((uint32_t)0x0F000000)) >>  24;
	*rsvd_2 = (localVal & ((uint32_t)0x00F00000)) >>  20;
	*limit_dw_group0 = (localVal & ((uint32_t)0x000F0000)) >>  16;
	*rsvd_1 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*limit_up_group1 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*rsvd_0 = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*limit_up_group0 = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_lli_group_limit_rsvd_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xF0000000)) >> 28);
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_limit_limit_dw_group_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0F000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_lli_group_limit_limit_dw_group_1_setf(uint8_t limitdwgroup1)
{
	ASSERT_ERR((((uint32_t)limitdwgroup1 << 24) & ~((uint32_t)0x0F000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR) & ~((uint32_t)0x0F000000)) | ((uint32_t)limitdwgroup1 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_limit_rsvd_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00F00000)) >> 20);
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_limit_limit_dw_group_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000F0000)) >> 16);
}
__INLINE void pcie_wrap_pciew_lli_group_limit_limit_dw_group_0_setf(uint8_t limitdwgroup0)
{
	ASSERT_ERR((((uint32_t)limitdwgroup0 << 16) & ~((uint32_t)0x000F0000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR) & ~((uint32_t)0x000F0000)) | ((uint32_t)limitdwgroup0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_limit_rsvd_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_limit_limit_up_group_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void pcie_wrap_pciew_lli_group_limit_limit_up_group_1_setf(uint8_t limitupgroup1)
{
	ASSERT_ERR((((uint32_t)limitupgroup1 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)limitupgroup1 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_limit_rsvd_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_lli_group_limit_limit_up_group_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void pcie_wrap_pciew_lli_group_limit_limit_up_group_0_setf(uint8_t limitupgroup0)
{
	ASSERT_ERR((((uint32_t)limitupgroup0 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_LLI_GROUP_LIMIT_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)limitupgroup0 <<0));
}

/**
 * @brief PCIEW_SOFT_INT_RAWSTAT register definition
 *  Software triggered raw status interrupt register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    TRIG_D15                  0              
 *    30    TRIG_D14                  0              
 *    29    TRIG_D13                  0              
 *    28    TRIG_D12                  0              
 *    27    TRIG_D11                  0              
 *    26    TRIG_D10                  0              
 *    25    TRIG_D9                   0              
 *    24    TRIG_D8                   0              
 *    23    TRIG_D7                   0              
 *    22    TRIG_D6                   0              
 *    21    TRIG_D5                   0              
 *    20    TRIG_D4                   0              
 *    19    TRIG_D3                   0              
 *    18    TRIG_D2                   0              
 *    17    TRIG_D1                   0              
 *    16    TRIG_D0                   0              
 *    15    TRIG_U15                  0              
 *    14    TRIG_U14                  0              
 *    13    TRIG_U13                  0              
 *    12    TRIG_U12                  0              
 *    11    TRIG_U11                  0              
 *    10    TRIG_U10                  0              
 *    09    TRIG_U9                   0              
 *    08    TRIG_U8                   0              
 *    07    TRIG_U7                   0              
 *    06    TRIG_U6                   0              
 *    05    TRIG_U5                   0              
 *    04    TRIG_U4                   0              
 *    03    TRIG_U3                   0              
 *    02    TRIG_U2                   0              
 *    01    TRIG_U1                   0              
 *    00    TRIG_U0                   0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002A8)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_OFFSET      0x000002A8
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_INDEX       0x000000AA
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_soft_int_rawstat_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
}

__INLINE void pcie_wrap_pciew_soft_int_rawstat_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_15_POS    31
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_14_POS    30
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_13_POS    29
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_12_POS    28
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_11_POS    27
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_10_POS    26
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_9_POS    25
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_8_POS    24
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_7_POS    23
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_6_POS    22
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_5_POS    21
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_4_POS    20
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_3_POS    19
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_2_POS    18
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_1_POS    17
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_0_POS    16
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_15_POS    15
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_14_POS    14
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_13_POS    13
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_12_POS    12
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_11_POS    11
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_10_POS    10
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_9_POS    9
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_8_POS    8
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_7_POS    7
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_6_POS    6
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_5_POS    5
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_4_POS    4
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_3_POS    3
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_2_POS    2
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_1_POS    1
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_0_POS    0

#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_TRIG_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_soft_int_rawstat_pack(uint8_t trig_d15, uint8_t trig_d14, uint8_t trig_d13, uint8_t trig_d12, uint8_t trig_d11, uint8_t trig_d10, uint8_t trig_d9, uint8_t trig_d8, uint8_t trig_d7, uint8_t trig_d6, uint8_t trig_d5, uint8_t trig_d4, uint8_t trig_d3, uint8_t trig_d2, uint8_t trig_d1, uint8_t trig_d0, uint8_t trig_u15, uint8_t trig_u14, uint8_t trig_u13, uint8_t trig_u12, uint8_t trig_u11, uint8_t trig_u10, uint8_t trig_u9, uint8_t trig_u8, uint8_t trig_u7, uint8_t trig_u6, uint8_t trig_u5, uint8_t trig_u4, uint8_t trig_u3, uint8_t trig_u2, uint8_t trig_u1, uint8_t trig_u0)
{
	ASSERT_ERR((((uint32_t)trig_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)trig_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)trig_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)trig_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)trig_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)trig_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)trig_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)trig_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)trig_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)trig_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)trig_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)trig_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)trig_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)trig_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)trig_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)trig_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)trig_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)trig_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)trig_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)trig_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)trig_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)trig_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)trig_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)trig_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)trig_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)trig_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)trig_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)trig_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)trig_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)trig_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)trig_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)trig_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR,  ((uint32_t)trig_d15 << 31) |((uint32_t)trig_d14 << 30) |((uint32_t)trig_d13 << 29) |((uint32_t)trig_d12 << 28) |((uint32_t)trig_d11 << 27) |((uint32_t)trig_d10 << 26) |((uint32_t)trig_d9 << 25) |((uint32_t)trig_d8 << 24) |((uint32_t)trig_d7 << 23) |((uint32_t)trig_d6 << 22) |((uint32_t)trig_d5 << 21) |((uint32_t)trig_d4 << 20) |((uint32_t)trig_d3 << 19) |((uint32_t)trig_d2 << 18) |((uint32_t)trig_d1 << 17) |((uint32_t)trig_d0 << 16) |((uint32_t)trig_u15 << 15) |((uint32_t)trig_u14 << 14) |((uint32_t)trig_u13 << 13) |((uint32_t)trig_u12 << 12) |((uint32_t)trig_u11 << 11) |((uint32_t)trig_u10 << 10) |((uint32_t)trig_u9 << 9) |((uint32_t)trig_u8 << 8) |((uint32_t)trig_u7 << 7) |((uint32_t)trig_u6 << 6) |((uint32_t)trig_u5 << 5) |((uint32_t)trig_u4 << 4) |((uint32_t)trig_u3 << 3) |((uint32_t)trig_u2 << 2) |((uint32_t)trig_u1 << 1) |((uint32_t)trig_u0 << 0));
}

__INLINE void pcie_wrap_pciew_soft_int_rawstat_unpack(uint8_t* trig_d15, uint8_t* trig_d14, uint8_t* trig_d13, uint8_t* trig_d12, uint8_t* trig_d11, uint8_t* trig_d10, uint8_t* trig_d9, uint8_t* trig_d8, uint8_t* trig_d7, uint8_t* trig_d6, uint8_t* trig_d5, uint8_t* trig_d4, uint8_t* trig_d3, uint8_t* trig_d2, uint8_t* trig_d1, uint8_t* trig_d0, uint8_t* trig_u15, uint8_t* trig_u14, uint8_t* trig_u13, uint8_t* trig_u12, uint8_t* trig_u11, uint8_t* trig_u10, uint8_t* trig_u9, uint8_t* trig_u8, uint8_t* trig_u7, uint8_t* trig_u6, uint8_t* trig_u5, uint8_t* trig_u4, uint8_t* trig_u3, uint8_t* trig_u2, uint8_t* trig_u1, uint8_t* trig_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);

	*trig_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*trig_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*trig_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*trig_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*trig_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*trig_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*trig_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*trig_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*trig_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*trig_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*trig_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*trig_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*trig_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*trig_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*trig_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*trig_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*trig_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*trig_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*trig_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*trig_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*trig_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*trig_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*trig_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*trig_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*trig_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*trig_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*trig_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*trig_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*trig_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*trig_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*trig_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*trig_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_d_15_setf(uint8_t trigd15)
{
	ASSERT_ERR((((uint32_t)trigd15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)trigd15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_d_14_setf(uint8_t trigd14)
{
	ASSERT_ERR((((uint32_t)trigd14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)trigd14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_d_13_setf(uint8_t trigd13)
{
	ASSERT_ERR((((uint32_t)trigd13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)trigd13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_d_12_setf(uint8_t trigd12)
{
	ASSERT_ERR((((uint32_t)trigd12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)trigd12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_d_11_setf(uint8_t trigd11)
{
	ASSERT_ERR((((uint32_t)trigd11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)trigd11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_d_10_setf(uint8_t trigd10)
{
	ASSERT_ERR((((uint32_t)trigd10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)trigd10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_d_9_setf(uint8_t trigd9)
{
	ASSERT_ERR((((uint32_t)trigd9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)trigd9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_d_8_setf(uint8_t trigd8)
{
	ASSERT_ERR((((uint32_t)trigd8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)trigd8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_d_7_setf(uint8_t trigd7)
{
	ASSERT_ERR((((uint32_t)trigd7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)trigd7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_d_6_setf(uint8_t trigd6)
{
	ASSERT_ERR((((uint32_t)trigd6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)trigd6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_d_5_setf(uint8_t trigd5)
{
	ASSERT_ERR((((uint32_t)trigd5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)trigd5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_d_4_setf(uint8_t trigd4)
{
	ASSERT_ERR((((uint32_t)trigd4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)trigd4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_d_3_setf(uint8_t trigd3)
{
	ASSERT_ERR((((uint32_t)trigd3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)trigd3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_d_2_setf(uint8_t trigd2)
{
	ASSERT_ERR((((uint32_t)trigd2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)trigd2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_d_1_setf(uint8_t trigd1)
{
	ASSERT_ERR((((uint32_t)trigd1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)trigd1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_d_0_setf(uint8_t trigd0)
{
	ASSERT_ERR((((uint32_t)trigd0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)trigd0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_u_15_setf(uint8_t trigu15)
{
	ASSERT_ERR((((uint32_t)trigu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)trigu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_u_14_setf(uint8_t trigu14)
{
	ASSERT_ERR((((uint32_t)trigu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)trigu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_u_13_setf(uint8_t trigu13)
{
	ASSERT_ERR((((uint32_t)trigu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)trigu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_u_12_setf(uint8_t trigu12)
{
	ASSERT_ERR((((uint32_t)trigu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)trigu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_u_11_setf(uint8_t trigu11)
{
	ASSERT_ERR((((uint32_t)trigu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)trigu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_u_10_setf(uint8_t trigu10)
{
	ASSERT_ERR((((uint32_t)trigu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)trigu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_u_9_setf(uint8_t trigu9)
{
	ASSERT_ERR((((uint32_t)trigu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)trigu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_u_8_setf(uint8_t trigu8)
{
	ASSERT_ERR((((uint32_t)trigu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)trigu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_u_7_setf(uint8_t trigu7)
{
	ASSERT_ERR((((uint32_t)trigu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)trigu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_u_6_setf(uint8_t trigu6)
{
	ASSERT_ERR((((uint32_t)trigu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)trigu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_u_5_setf(uint8_t trigu5)
{
	ASSERT_ERR((((uint32_t)trigu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)trigu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_u_4_setf(uint8_t trigu4)
{
	ASSERT_ERR((((uint32_t)trigu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)trigu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_u_3_setf(uint8_t trigu3)
{
	ASSERT_ERR((((uint32_t)trigu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)trigu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_u_2_setf(uint8_t trigu2)
{
	ASSERT_ERR((((uint32_t)trigu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)trigu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_u_1_setf(uint8_t trigu1)
{
	ASSERT_ERR((((uint32_t)trigu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)trigu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_soft_int_rawstat_trig_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_soft_int_rawstat_trig_u_0_setf(uint8_t trigu0)
{
	ASSERT_ERR((((uint32_t)trigu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_SOFT_INT_RAWSTAT_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)trigu0 <<0));
}

/**
 * @brief PCIEW_LLI_BUSY register definition
 *  Per LLI true Idle state register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    BUSY_D15                  0              
 *    30    BUSY_D14                  0              
 *    29    BUSY_D13                  0              
 *    28    BUSY_D12                  0              
 *    27    BUSY_D11                  0              
 *    26    BUSY_D10                  0              
 *    25    BUSY_D9                   0              
 *    24    BUSY_D8                   0              
 *    23    BUSY_D7                   0              
 *    22    BUSY_D6                   0              
 *    21    BUSY_D5                   0              
 *    20    BUSY_D4                   0              
 *    19    BUSY_D3                   0              
 *    18    BUSY_D2                   0              
 *    17    BUSY_D1                   0              
 *    16    BUSY_D0                   0              
 *    15    BUSY_U15                  0              
 *    14    BUSY_U14                  0              
 *    13    BUSY_U13                  0              
 *    12    BUSY_U12                  0              
 *    11    BUSY_U11                  0              
 *    10    BUSY_U10                  0              
 *    09    BUSY_U9                   0              
 *    08    BUSY_U8                   0              
 *    07    BUSY_U7                   0              
 *    06    BUSY_U6                   0              
 *    05    BUSY_U5                   0              
 *    04    BUSY_U4                   0              
 *    03    BUSY_U3                   0              
 *    02    BUSY_U2                   0              
 *    01    BUSY_U1                   0              
 *    00    BUSY_U0                   0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_LLI_BUSY_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002AC)
#define PCIE_WRAP_PCIEW_LLI_BUSY_OFFSET      0x000002AC
#define PCIE_WRAP_PCIEW_LLI_BUSY_INDEX       0x000000AB
#define PCIE_WRAP_PCIEW_LLI_BUSY_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_lli_busy_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_15_POS    31
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_14_POS    30
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_13_POS    29
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_12_POS    28
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_11_POS    27
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_10_POS    26
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_9_POS    25
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_8_POS    24
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_7_POS    23
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_6_POS    22
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_5_POS    21
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_4_POS    20
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_3_POS    19
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_2_POS    18
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_1_POS    17
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_0_POS    16
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_15_POS    15
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_14_POS    14
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_13_POS    13
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_12_POS    12
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_11_POS    11
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_10_POS    10
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_9_POS    9
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_8_POS    8
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_7_POS    7
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_6_POS    6
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_5_POS    5
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_4_POS    4
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_3_POS    3
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_2_POS    2
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_1_POS    1
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_0_POS    0

#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_LLI_BUSY_BUSY_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_lli_busy_unpack(uint8_t* busy_d15, uint8_t* busy_d14, uint8_t* busy_d13, uint8_t* busy_d12, uint8_t* busy_d11, uint8_t* busy_d10, uint8_t* busy_d9, uint8_t* busy_d8, uint8_t* busy_d7, uint8_t* busy_d6, uint8_t* busy_d5, uint8_t* busy_d4, uint8_t* busy_d3, uint8_t* busy_d2, uint8_t* busy_d1, uint8_t* busy_d0, uint8_t* busy_u15, uint8_t* busy_u14, uint8_t* busy_u13, uint8_t* busy_u12, uint8_t* busy_u11, uint8_t* busy_u10, uint8_t* busy_u9, uint8_t* busy_u8, uint8_t* busy_u7, uint8_t* busy_u6, uint8_t* busy_u5, uint8_t* busy_u4, uint8_t* busy_u3, uint8_t* busy_u2, uint8_t* busy_u1, uint8_t* busy_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);

	*busy_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*busy_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*busy_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*busy_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*busy_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*busy_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*busy_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*busy_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*busy_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*busy_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*busy_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*busy_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*busy_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*busy_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*busy_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*busy_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*busy_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*busy_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*busy_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*busy_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*busy_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*busy_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*busy_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*busy_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*busy_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*busy_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*busy_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*busy_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*busy_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*busy_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*busy_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*busy_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t pcie_wrap_pciew_lli_busy_busy_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_LLI_BUSY_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief PCIEW_INT_RXM_0_EN register definition
 *  RXM0 interrupt enable register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EN_D15                    0              
 *    30    EN_D14                    0              
 *    29    EN_D13                    0              
 *    28    EN_D12                    0              
 *    27    EN_D11                    0              
 *    26    EN_D10                    0              
 *    25    EN_D9                     0              
 *    24    EN_D8                     0              
 *    23    EN_D7                     0              
 *    22    EN_D6                     0              
 *    21    EN_D5                     0              
 *    20    EN_D4                     0              
 *    19    EN_D3                     0              
 *    18    EN_D2                     0              
 *    17    EN_D1                     0              
 *    16    EN_D0                     0              
 *    15    EN_U15                    0              
 *    14    EN_U14                    0              
 *    13    EN_U13                    0              
 *    12    EN_U12                    0              
 *    11    EN_U11                    0              
 *    10    EN_U10                    0              
 *    09    EN_U9                     0              
 *    08    EN_U8                     0              
 *    07    EN_U7                     0              
 *    06    EN_U6                     0              
 *    05    EN_U5                     0              
 *    04    EN_U4                     0              
 *    03    EN_U3                     0              
 *    02    EN_U2                     0              
 *    01    EN_U1                     0              
 *    00    EN_U0                     0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002C0)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_OFFSET      0x000002C0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_INDEX       0x000000B0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_rxm_0_en_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
}

__INLINE void pcie_wrap_pciew_int_rxm_0_en_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_EN_EN_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_rxm_0_en_pack(uint8_t en_d15, uint8_t en_d14, uint8_t en_d13, uint8_t en_d12, uint8_t en_d11, uint8_t en_d10, uint8_t en_d9, uint8_t en_d8, uint8_t en_d7, uint8_t en_d6, uint8_t en_d5, uint8_t en_d4, uint8_t en_d3, uint8_t en_d2, uint8_t en_d1, uint8_t en_d0, uint8_t en_u15, uint8_t en_u14, uint8_t en_u13, uint8_t en_u12, uint8_t en_u11, uint8_t en_u10, uint8_t en_u9, uint8_t en_u8, uint8_t en_u7, uint8_t en_u6, uint8_t en_u5, uint8_t en_u4, uint8_t en_u3, uint8_t en_u2, uint8_t en_u1, uint8_t en_u0)
{
	ASSERT_ERR((((uint32_t)en_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)en_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)en_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)en_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)en_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)en_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)en_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)en_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)en_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)en_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)en_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)en_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)en_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)en_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)en_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)en_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)en_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)en_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)en_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)en_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)en_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)en_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)en_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)en_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR,  ((uint32_t)en_d15 << 31) |((uint32_t)en_d14 << 30) |((uint32_t)en_d13 << 29) |((uint32_t)en_d12 << 28) |((uint32_t)en_d11 << 27) |((uint32_t)en_d10 << 26) |((uint32_t)en_d9 << 25) |((uint32_t)en_d8 << 24) |((uint32_t)en_d7 << 23) |((uint32_t)en_d6 << 22) |((uint32_t)en_d5 << 21) |((uint32_t)en_d4 << 20) |((uint32_t)en_d3 << 19) |((uint32_t)en_d2 << 18) |((uint32_t)en_d1 << 17) |((uint32_t)en_d0 << 16) |((uint32_t)en_u15 << 15) |((uint32_t)en_u14 << 14) |((uint32_t)en_u13 << 13) |((uint32_t)en_u12 << 12) |((uint32_t)en_u11 << 11) |((uint32_t)en_u10 << 10) |((uint32_t)en_u9 << 9) |((uint32_t)en_u8 << 8) |((uint32_t)en_u7 << 7) |((uint32_t)en_u6 << 6) |((uint32_t)en_u5 << 5) |((uint32_t)en_u4 << 4) |((uint32_t)en_u3 << 3) |((uint32_t)en_u2 << 2) |((uint32_t)en_u1 << 1) |((uint32_t)en_u0 << 0));
}

__INLINE void pcie_wrap_pciew_int_rxm_0_en_unpack(uint8_t* en_d15, uint8_t* en_d14, uint8_t* en_d13, uint8_t* en_d12, uint8_t* en_d11, uint8_t* en_d10, uint8_t* en_d9, uint8_t* en_d8, uint8_t* en_d7, uint8_t* en_d6, uint8_t* en_d5, uint8_t* en_d4, uint8_t* en_d3, uint8_t* en_d2, uint8_t* en_d1, uint8_t* en_d0, uint8_t* en_u15, uint8_t* en_u14, uint8_t* en_u13, uint8_t* en_u12, uint8_t* en_u11, uint8_t* en_u10, uint8_t* en_u9, uint8_t* en_u8, uint8_t* en_u7, uint8_t* en_u6, uint8_t* en_u5, uint8_t* en_u4, uint8_t* en_u3, uint8_t* en_u2, uint8_t* en_u1, uint8_t* en_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);

	*en_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*en_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*en_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*en_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*en_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*en_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*en_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*en_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*en_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*en_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*en_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*en_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*en_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*en_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*en_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*en_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*en_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*en_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*en_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*en_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*en_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*en_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*en_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*en_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*en_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*en_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*en_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*en_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*en_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*en_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*en_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*en_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_d_15_setf(uint8_t end15)
{
	ASSERT_ERR((((uint32_t)end15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)end15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_d_14_setf(uint8_t end14)
{
	ASSERT_ERR((((uint32_t)end14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)end14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_d_13_setf(uint8_t end13)
{
	ASSERT_ERR((((uint32_t)end13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)end13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_d_12_setf(uint8_t end12)
{
	ASSERT_ERR((((uint32_t)end12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)end12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_d_11_setf(uint8_t end11)
{
	ASSERT_ERR((((uint32_t)end11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)end11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_d_10_setf(uint8_t end10)
{
	ASSERT_ERR((((uint32_t)end10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)end10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_d_9_setf(uint8_t end9)
{
	ASSERT_ERR((((uint32_t)end9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)end9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_d_8_setf(uint8_t end8)
{
	ASSERT_ERR((((uint32_t)end8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)end8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_d_7_setf(uint8_t end7)
{
	ASSERT_ERR((((uint32_t)end7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)end7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_d_6_setf(uint8_t end6)
{
	ASSERT_ERR((((uint32_t)end6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)end6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_d_5_setf(uint8_t end5)
{
	ASSERT_ERR((((uint32_t)end5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)end5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_d_4_setf(uint8_t end4)
{
	ASSERT_ERR((((uint32_t)end4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)end4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_d_3_setf(uint8_t end3)
{
	ASSERT_ERR((((uint32_t)end3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)end3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_d_2_setf(uint8_t end2)
{
	ASSERT_ERR((((uint32_t)end2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)end2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_d_1_setf(uint8_t end1)
{
	ASSERT_ERR((((uint32_t)end1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)end1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_d_0_setf(uint8_t end0)
{
	ASSERT_ERR((((uint32_t)end0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)end0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_u_15_setf(uint8_t enu15)
{
	ASSERT_ERR((((uint32_t)enu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)enu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_u_14_setf(uint8_t enu14)
{
	ASSERT_ERR((((uint32_t)enu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)enu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_u_13_setf(uint8_t enu13)
{
	ASSERT_ERR((((uint32_t)enu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)enu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_u_12_setf(uint8_t enu12)
{
	ASSERT_ERR((((uint32_t)enu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)enu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_u_11_setf(uint8_t enu11)
{
	ASSERT_ERR((((uint32_t)enu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)enu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_u_10_setf(uint8_t enu10)
{
	ASSERT_ERR((((uint32_t)enu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)enu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_u_9_setf(uint8_t enu9)
{
	ASSERT_ERR((((uint32_t)enu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)enu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_u_8_setf(uint8_t enu8)
{
	ASSERT_ERR((((uint32_t)enu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)enu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_u_7_setf(uint8_t enu7)
{
	ASSERT_ERR((((uint32_t)enu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)enu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_u_6_setf(uint8_t enu6)
{
	ASSERT_ERR((((uint32_t)enu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)enu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_u_5_setf(uint8_t enu5)
{
	ASSERT_ERR((((uint32_t)enu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)enu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_u_4_setf(uint8_t enu4)
{
	ASSERT_ERR((((uint32_t)enu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)enu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_u_3_setf(uint8_t enu3)
{
	ASSERT_ERR((((uint32_t)enu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)enu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_u_2_setf(uint8_t enu2)
{
	ASSERT_ERR((((uint32_t)enu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)enu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_u_1_setf(uint8_t enu1)
{
	ASSERT_ERR((((uint32_t)enu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)enu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_en_en_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_int_rxm_0_en_en_u_0_setf(uint8_t enu0)
{
	ASSERT_ERR((((uint32_t)enu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_EN_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)enu0 <<0));
}

/**
 * @brief PCIEW_INT_RXM_0_STAT register definition
 *  RXM0 interrupt status register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    DONE_D15                  0              
 *    30    DONE_D14                  0              
 *    29    DONE_D13                  0              
 *    28    DONE_D12                  0              
 *    27    DONE_D11                  0              
 *    26    DONE_D10                  0              
 *    25    DONE_D9                   0              
 *    24    DONE_D8                   0              
 *    23    DONE_D7                   0              
 *    22    DONE_D6                   0              
 *    21    DONE_D5                   0              
 *    20    DONE_D4                   0              
 *    19    DONE_D3                   0              
 *    18    DONE_D2                   0              
 *    17    DONE_D1                   0              
 *    16    DONE_D0                   0              
 *    15    DONE_U15                  0              
 *    14    DONE_U14                  0              
 *    13    DONE_U13                  0              
 *    12    DONE_U12                  0              
 *    11    DONE_U11                  0              
 *    10    DONE_U10                  0              
 *    09    DONE_U9                   0              
 *    08    DONE_U8                   0              
 *    07    DONE_U7                   0              
 *    06    DONE_U6                   0              
 *    05    DONE_U5                   0              
 *    04    DONE_U4                   0              
 *    03    DONE_U3                   0              
 *    02    DONE_U2                   0              
 *    01    DONE_U1                   0              
 *    00    DONE_U0                   0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002C4)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_OFFSET      0x000002C4
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_INDEX       0x000000B1
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_rxm_0_stat_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_0_STAT_DONE_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_rxm_0_stat_unpack(uint8_t* done_d15, uint8_t* done_d14, uint8_t* done_d13, uint8_t* done_d12, uint8_t* done_d11, uint8_t* done_d10, uint8_t* done_d9, uint8_t* done_d8, uint8_t* done_d7, uint8_t* done_d6, uint8_t* done_d5, uint8_t* done_d4, uint8_t* done_d3, uint8_t* done_d2, uint8_t* done_d1, uint8_t* done_d0, uint8_t* done_u15, uint8_t* done_u14, uint8_t* done_u13, uint8_t* done_u12, uint8_t* done_u11, uint8_t* done_u10, uint8_t* done_u9, uint8_t* done_u8, uint8_t* done_u7, uint8_t* done_u6, uint8_t* done_u5, uint8_t* done_u4, uint8_t* done_u3, uint8_t* done_u2, uint8_t* done_u1, uint8_t* done_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);

	*done_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*done_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*done_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*done_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*done_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*done_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*done_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*done_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*done_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*done_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*done_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*done_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*done_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*done_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*done_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*done_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*done_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*done_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*done_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*done_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*done_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*done_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*done_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*done_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*done_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*done_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*done_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*done_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*done_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*done_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*done_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*done_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_0_stat_done_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_0_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief PCIEW_INT_RXM_1_EN register definition
 *  RXM1 interrupt enable register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EN_D15                    0              
 *    30    EN_D14                    0              
 *    29    EN_D13                    0              
 *    28    EN_D12                    0              
 *    27    EN_D11                    0              
 *    26    EN_D10                    0              
 *    25    EN_D9                     0              
 *    24    EN_D8                     0              
 *    23    EN_D7                     0              
 *    22    EN_D6                     0              
 *    21    EN_D5                     0              
 *    20    EN_D4                     0              
 *    19    EN_D3                     0              
 *    18    EN_D2                     0              
 *    17    EN_D1                     0              
 *    16    EN_D0                     0              
 *    15    EN_U15                    0              
 *    14    EN_U14                    0              
 *    13    EN_U13                    0              
 *    12    EN_U12                    0              
 *    11    EN_U11                    0              
 *    10    EN_U10                    0              
 *    09    EN_U9                     0              
 *    08    EN_U8                     0              
 *    07    EN_U7                     0              
 *    06    EN_U6                     0              
 *    05    EN_U5                     0              
 *    04    EN_U4                     0              
 *    03    EN_U3                     0              
 *    02    EN_U2                     0              
 *    01    EN_U1                     0              
 *    00    EN_U0                     0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002C8)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_OFFSET      0x000002C8
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_INDEX       0x000000B2
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_rxm_1_en_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
}

__INLINE void pcie_wrap_pciew_int_rxm_1_en_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_EN_EN_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_rxm_1_en_pack(uint8_t en_d15, uint8_t en_d14, uint8_t en_d13, uint8_t en_d12, uint8_t en_d11, uint8_t en_d10, uint8_t en_d9, uint8_t en_d8, uint8_t en_d7, uint8_t en_d6, uint8_t en_d5, uint8_t en_d4, uint8_t en_d3, uint8_t en_d2, uint8_t en_d1, uint8_t en_d0, uint8_t en_u15, uint8_t en_u14, uint8_t en_u13, uint8_t en_u12, uint8_t en_u11, uint8_t en_u10, uint8_t en_u9, uint8_t en_u8, uint8_t en_u7, uint8_t en_u6, uint8_t en_u5, uint8_t en_u4, uint8_t en_u3, uint8_t en_u2, uint8_t en_u1, uint8_t en_u0)
{
	ASSERT_ERR((((uint32_t)en_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)en_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)en_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)en_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)en_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)en_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)en_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)en_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)en_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)en_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)en_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)en_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)en_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)en_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)en_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)en_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)en_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)en_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)en_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)en_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)en_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)en_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)en_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)en_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR,  ((uint32_t)en_d15 << 31) |((uint32_t)en_d14 << 30) |((uint32_t)en_d13 << 29) |((uint32_t)en_d12 << 28) |((uint32_t)en_d11 << 27) |((uint32_t)en_d10 << 26) |((uint32_t)en_d9 << 25) |((uint32_t)en_d8 << 24) |((uint32_t)en_d7 << 23) |((uint32_t)en_d6 << 22) |((uint32_t)en_d5 << 21) |((uint32_t)en_d4 << 20) |((uint32_t)en_d3 << 19) |((uint32_t)en_d2 << 18) |((uint32_t)en_d1 << 17) |((uint32_t)en_d0 << 16) |((uint32_t)en_u15 << 15) |((uint32_t)en_u14 << 14) |((uint32_t)en_u13 << 13) |((uint32_t)en_u12 << 12) |((uint32_t)en_u11 << 11) |((uint32_t)en_u10 << 10) |((uint32_t)en_u9 << 9) |((uint32_t)en_u8 << 8) |((uint32_t)en_u7 << 7) |((uint32_t)en_u6 << 6) |((uint32_t)en_u5 << 5) |((uint32_t)en_u4 << 4) |((uint32_t)en_u3 << 3) |((uint32_t)en_u2 << 2) |((uint32_t)en_u1 << 1) |((uint32_t)en_u0 << 0));
}

__INLINE void pcie_wrap_pciew_int_rxm_1_en_unpack(uint8_t* en_d15, uint8_t* en_d14, uint8_t* en_d13, uint8_t* en_d12, uint8_t* en_d11, uint8_t* en_d10, uint8_t* en_d9, uint8_t* en_d8, uint8_t* en_d7, uint8_t* en_d6, uint8_t* en_d5, uint8_t* en_d4, uint8_t* en_d3, uint8_t* en_d2, uint8_t* en_d1, uint8_t* en_d0, uint8_t* en_u15, uint8_t* en_u14, uint8_t* en_u13, uint8_t* en_u12, uint8_t* en_u11, uint8_t* en_u10, uint8_t* en_u9, uint8_t* en_u8, uint8_t* en_u7, uint8_t* en_u6, uint8_t* en_u5, uint8_t* en_u4, uint8_t* en_u3, uint8_t* en_u2, uint8_t* en_u1, uint8_t* en_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);

	*en_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*en_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*en_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*en_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*en_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*en_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*en_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*en_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*en_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*en_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*en_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*en_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*en_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*en_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*en_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*en_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*en_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*en_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*en_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*en_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*en_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*en_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*en_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*en_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*en_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*en_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*en_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*en_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*en_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*en_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*en_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*en_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_d_15_setf(uint8_t end15)
{
	ASSERT_ERR((((uint32_t)end15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)end15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_d_14_setf(uint8_t end14)
{
	ASSERT_ERR((((uint32_t)end14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)end14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_d_13_setf(uint8_t end13)
{
	ASSERT_ERR((((uint32_t)end13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)end13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_d_12_setf(uint8_t end12)
{
	ASSERT_ERR((((uint32_t)end12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)end12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_d_11_setf(uint8_t end11)
{
	ASSERT_ERR((((uint32_t)end11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)end11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_d_10_setf(uint8_t end10)
{
	ASSERT_ERR((((uint32_t)end10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)end10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_d_9_setf(uint8_t end9)
{
	ASSERT_ERR((((uint32_t)end9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)end9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_d_8_setf(uint8_t end8)
{
	ASSERT_ERR((((uint32_t)end8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)end8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_d_7_setf(uint8_t end7)
{
	ASSERT_ERR((((uint32_t)end7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)end7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_d_6_setf(uint8_t end6)
{
	ASSERT_ERR((((uint32_t)end6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)end6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_d_5_setf(uint8_t end5)
{
	ASSERT_ERR((((uint32_t)end5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)end5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_d_4_setf(uint8_t end4)
{
	ASSERT_ERR((((uint32_t)end4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)end4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_d_3_setf(uint8_t end3)
{
	ASSERT_ERR((((uint32_t)end3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)end3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_d_2_setf(uint8_t end2)
{
	ASSERT_ERR((((uint32_t)end2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)end2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_d_1_setf(uint8_t end1)
{
	ASSERT_ERR((((uint32_t)end1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)end1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_d_0_setf(uint8_t end0)
{
	ASSERT_ERR((((uint32_t)end0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)end0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_u_15_setf(uint8_t enu15)
{
	ASSERT_ERR((((uint32_t)enu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)enu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_u_14_setf(uint8_t enu14)
{
	ASSERT_ERR((((uint32_t)enu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)enu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_u_13_setf(uint8_t enu13)
{
	ASSERT_ERR((((uint32_t)enu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)enu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_u_12_setf(uint8_t enu12)
{
	ASSERT_ERR((((uint32_t)enu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)enu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_u_11_setf(uint8_t enu11)
{
	ASSERT_ERR((((uint32_t)enu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)enu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_u_10_setf(uint8_t enu10)
{
	ASSERT_ERR((((uint32_t)enu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)enu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_u_9_setf(uint8_t enu9)
{
	ASSERT_ERR((((uint32_t)enu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)enu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_u_8_setf(uint8_t enu8)
{
	ASSERT_ERR((((uint32_t)enu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)enu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_u_7_setf(uint8_t enu7)
{
	ASSERT_ERR((((uint32_t)enu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)enu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_u_6_setf(uint8_t enu6)
{
	ASSERT_ERR((((uint32_t)enu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)enu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_u_5_setf(uint8_t enu5)
{
	ASSERT_ERR((((uint32_t)enu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)enu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_u_4_setf(uint8_t enu4)
{
	ASSERT_ERR((((uint32_t)enu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)enu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_u_3_setf(uint8_t enu3)
{
	ASSERT_ERR((((uint32_t)enu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)enu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_u_2_setf(uint8_t enu2)
{
	ASSERT_ERR((((uint32_t)enu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)enu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_u_1_setf(uint8_t enu1)
{
	ASSERT_ERR((((uint32_t)enu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)enu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_en_en_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_int_rxm_1_en_en_u_0_setf(uint8_t enu0)
{
	ASSERT_ERR((((uint32_t)enu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_EN_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)enu0 <<0));
}

/**
 * @brief PCIEW_INT_RXM_1_STAT register definition
 *  RXM1 interrupt status register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    DONE_D15                  0              
 *    30    DONE_D14                  0              
 *    29    DONE_D13                  0              
 *    28    DONE_D12                  0              
 *    27    DONE_D11                  0              
 *    26    DONE_D10                  0              
 *    25    DONE_D9                   0              
 *    24    DONE_D8                   0              
 *    23    DONE_D7                   0              
 *    22    DONE_D6                   0              
 *    21    DONE_D5                   0              
 *    20    DONE_D4                   0              
 *    19    DONE_D3                   0              
 *    18    DONE_D2                   0              
 *    17    DONE_D1                   0              
 *    16    DONE_D0                   0              
 *    15    DONE_U15                  0              
 *    14    DONE_U14                  0              
 *    13    DONE_U13                  0              
 *    12    DONE_U12                  0              
 *    11    DONE_U11                  0              
 *    10    DONE_U10                  0              
 *    09    DONE_U9                   0              
 *    08    DONE_U8                   0              
 *    07    DONE_U7                   0              
 *    06    DONE_U6                   0              
 *    05    DONE_U5                   0              
 *    04    DONE_U4                   0              
 *    03    DONE_U3                   0              
 *    02    DONE_U2                   0              
 *    01    DONE_U1                   0              
 *    00    DONE_U0                   0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002CC)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_OFFSET      0x000002CC
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_INDEX       0x000000B3
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_int_rxm_1_stat_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_15_POS    31
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_14_POS    30
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_13_POS    29
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_12_POS    28
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_11_POS    27
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_10_POS    26
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_9_POS    25
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_8_POS    24
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_7_POS    23
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_6_POS    22
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_5_POS    21
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_4_POS    20
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_3_POS    19
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_2_POS    18
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_1_POS    17
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_0_POS    16
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_15_POS    15
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_14_POS    14
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_13_POS    13
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_12_POS    12
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_11_POS    11
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_10_POS    10
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_9_POS    9
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_8_POS    8
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_7_POS    7
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_6_POS    6
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_5_POS    5
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_4_POS    4
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_3_POS    3
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_2_POS    2
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_1_POS    1
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_0_POS    0

#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_INT_RXM_1_STAT_DONE_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_int_rxm_1_stat_unpack(uint8_t* done_d15, uint8_t* done_d14, uint8_t* done_d13, uint8_t* done_d12, uint8_t* done_d11, uint8_t* done_d10, uint8_t* done_d9, uint8_t* done_d8, uint8_t* done_d7, uint8_t* done_d6, uint8_t* done_d5, uint8_t* done_d4, uint8_t* done_d3, uint8_t* done_d2, uint8_t* done_d1, uint8_t* done_d0, uint8_t* done_u15, uint8_t* done_u14, uint8_t* done_u13, uint8_t* done_u12, uint8_t* done_u11, uint8_t* done_u10, uint8_t* done_u9, uint8_t* done_u8, uint8_t* done_u7, uint8_t* done_u6, uint8_t* done_u5, uint8_t* done_u4, uint8_t* done_u3, uint8_t* done_u2, uint8_t* done_u1, uint8_t* done_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);

	*done_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*done_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*done_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*done_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*done_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*done_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*done_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*done_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*done_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*done_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*done_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*done_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*done_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*done_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*done_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*done_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*done_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*done_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*done_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*done_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*done_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*done_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*done_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*done_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*done_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*done_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*done_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*done_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*done_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*done_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*done_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*done_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t pcie_wrap_pciew_int_rxm_1_stat_done_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_INT_RXM_1_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief PCIEW_ERROR_INT_LMAC_EN register definition
 *  LMAC error interrupt enable register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EN_D15                    0              
 *    30    EN_D14                    0              
 *    29    EN_D13                    0              
 *    28    EN_D12                    0              
 *    27    EN_D11                    0              
 *    26    EN_D10                    0              
 *    25    EN_D9                     0              
 *    24    EN_D8                     0              
 *    23    EN_D7                     0              
 *    22    EN_D6                     0              
 *    21    EN_D5                     0              
 *    20    EN_D4                     0              
 *    19    EN_D3                     0              
 *    18    EN_D2                     0              
 *    17    EN_D1                     0              
 *    16    EN_D0                     0              
 *    15    EN_U15                    0              
 *    14    EN_U14                    0              
 *    13    EN_U13                    0              
 *    12    EN_U12                    0              
 *    11    EN_U11                    0              
 *    10    EN_U10                    0              
 *    09    EN_U9                     0              
 *    08    EN_U8                     0              
 *    07    EN_U7                     0              
 *    06    EN_U6                     0              
 *    05    EN_U5                     0              
 *    04    EN_U4                     0              
 *    03    EN_U3                     0              
 *    02    EN_U2                     0              
 *    01    EN_U1                     0              
 *    00    EN_U0                     0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002D0)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_OFFSET      0x000002D0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_INDEX       0x000000B4
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_error_int_lmac_en_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
}

__INLINE void pcie_wrap_pciew_error_int_lmac_en_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_15_POS    31
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_14_POS    30
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_13_POS    29
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_12_POS    28
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_11_POS    27
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_10_POS    26
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_9_POS    25
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_8_POS    24
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_7_POS    23
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_6_POS    22
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_5_POS    21
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_4_POS    20
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_3_POS    19
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_2_POS    18
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_1_POS    17
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_0_POS    16
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_15_POS    15
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_14_POS    14
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_13_POS    13
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_12_POS    12
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_11_POS    11
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_10_POS    10
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_9_POS    9
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_8_POS    8
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_7_POS    7
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_6_POS    6
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_5_POS    5
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_4_POS    4
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_3_POS    3
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_2_POS    2
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_1_POS    1
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_0_POS    0

#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_EN_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_error_int_lmac_en_pack(uint8_t en_d15, uint8_t en_d14, uint8_t en_d13, uint8_t en_d12, uint8_t en_d11, uint8_t en_d10, uint8_t en_d9, uint8_t en_d8, uint8_t en_d7, uint8_t en_d6, uint8_t en_d5, uint8_t en_d4, uint8_t en_d3, uint8_t en_d2, uint8_t en_d1, uint8_t en_d0, uint8_t en_u15, uint8_t en_u14, uint8_t en_u13, uint8_t en_u12, uint8_t en_u11, uint8_t en_u10, uint8_t en_u9, uint8_t en_u8, uint8_t en_u7, uint8_t en_u6, uint8_t en_u5, uint8_t en_u4, uint8_t en_u3, uint8_t en_u2, uint8_t en_u1, uint8_t en_u0)
{
	ASSERT_ERR((((uint32_t)en_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)en_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)en_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)en_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)en_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)en_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)en_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)en_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)en_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)en_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)en_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)en_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)en_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)en_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)en_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)en_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)en_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)en_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)en_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)en_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)en_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)en_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)en_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)en_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR,  ((uint32_t)en_d15 << 31) |((uint32_t)en_d14 << 30) |((uint32_t)en_d13 << 29) |((uint32_t)en_d12 << 28) |((uint32_t)en_d11 << 27) |((uint32_t)en_d10 << 26) |((uint32_t)en_d9 << 25) |((uint32_t)en_d8 << 24) |((uint32_t)en_d7 << 23) |((uint32_t)en_d6 << 22) |((uint32_t)en_d5 << 21) |((uint32_t)en_d4 << 20) |((uint32_t)en_d3 << 19) |((uint32_t)en_d2 << 18) |((uint32_t)en_d1 << 17) |((uint32_t)en_d0 << 16) |((uint32_t)en_u15 << 15) |((uint32_t)en_u14 << 14) |((uint32_t)en_u13 << 13) |((uint32_t)en_u12 << 12) |((uint32_t)en_u11 << 11) |((uint32_t)en_u10 << 10) |((uint32_t)en_u9 << 9) |((uint32_t)en_u8 << 8) |((uint32_t)en_u7 << 7) |((uint32_t)en_u6 << 6) |((uint32_t)en_u5 << 5) |((uint32_t)en_u4 << 4) |((uint32_t)en_u3 << 3) |((uint32_t)en_u2 << 2) |((uint32_t)en_u1 << 1) |((uint32_t)en_u0 << 0));
}

__INLINE void pcie_wrap_pciew_error_int_lmac_en_unpack(uint8_t* en_d15, uint8_t* en_d14, uint8_t* en_d13, uint8_t* en_d12, uint8_t* en_d11, uint8_t* en_d10, uint8_t* en_d9, uint8_t* en_d8, uint8_t* en_d7, uint8_t* en_d6, uint8_t* en_d5, uint8_t* en_d4, uint8_t* en_d3, uint8_t* en_d2, uint8_t* en_d1, uint8_t* en_d0, uint8_t* en_u15, uint8_t* en_u14, uint8_t* en_u13, uint8_t* en_u12, uint8_t* en_u11, uint8_t* en_u10, uint8_t* en_u9, uint8_t* en_u8, uint8_t* en_u7, uint8_t* en_u6, uint8_t* en_u5, uint8_t* en_u4, uint8_t* en_u3, uint8_t* en_u2, uint8_t* en_u1, uint8_t* en_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);

	*en_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*en_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*en_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*en_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*en_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*en_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*en_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*en_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*en_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*en_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*en_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*en_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*en_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*en_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*en_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*en_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*en_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*en_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*en_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*en_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*en_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*en_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*en_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*en_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*en_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*en_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*en_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*en_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*en_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*en_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*en_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*en_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_d_15_setf(uint8_t end15)
{
	ASSERT_ERR((((uint32_t)end15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)end15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_d_14_setf(uint8_t end14)
{
	ASSERT_ERR((((uint32_t)end14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)end14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_d_13_setf(uint8_t end13)
{
	ASSERT_ERR((((uint32_t)end13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)end13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_d_12_setf(uint8_t end12)
{
	ASSERT_ERR((((uint32_t)end12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)end12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_d_11_setf(uint8_t end11)
{
	ASSERT_ERR((((uint32_t)end11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)end11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_d_10_setf(uint8_t end10)
{
	ASSERT_ERR((((uint32_t)end10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)end10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_d_9_setf(uint8_t end9)
{
	ASSERT_ERR((((uint32_t)end9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)end9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_d_8_setf(uint8_t end8)
{
	ASSERT_ERR((((uint32_t)end8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)end8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_d_7_setf(uint8_t end7)
{
	ASSERT_ERR((((uint32_t)end7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)end7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_d_6_setf(uint8_t end6)
{
	ASSERT_ERR((((uint32_t)end6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)end6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_d_5_setf(uint8_t end5)
{
	ASSERT_ERR((((uint32_t)end5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)end5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_d_4_setf(uint8_t end4)
{
	ASSERT_ERR((((uint32_t)end4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)end4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_d_3_setf(uint8_t end3)
{
	ASSERT_ERR((((uint32_t)end3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)end3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_d_2_setf(uint8_t end2)
{
	ASSERT_ERR((((uint32_t)end2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)end2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_d_1_setf(uint8_t end1)
{
	ASSERT_ERR((((uint32_t)end1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)end1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_d_0_setf(uint8_t end0)
{
	ASSERT_ERR((((uint32_t)end0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)end0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_u_15_setf(uint8_t enu15)
{
	ASSERT_ERR((((uint32_t)enu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)enu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_u_14_setf(uint8_t enu14)
{
	ASSERT_ERR((((uint32_t)enu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)enu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_u_13_setf(uint8_t enu13)
{
	ASSERT_ERR((((uint32_t)enu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)enu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_u_12_setf(uint8_t enu12)
{
	ASSERT_ERR((((uint32_t)enu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)enu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_u_11_setf(uint8_t enu11)
{
	ASSERT_ERR((((uint32_t)enu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)enu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_u_10_setf(uint8_t enu10)
{
	ASSERT_ERR((((uint32_t)enu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)enu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_u_9_setf(uint8_t enu9)
{
	ASSERT_ERR((((uint32_t)enu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)enu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_u_8_setf(uint8_t enu8)
{
	ASSERT_ERR((((uint32_t)enu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)enu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_u_7_setf(uint8_t enu7)
{
	ASSERT_ERR((((uint32_t)enu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)enu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_u_6_setf(uint8_t enu6)
{
	ASSERT_ERR((((uint32_t)enu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)enu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_u_5_setf(uint8_t enu5)
{
	ASSERT_ERR((((uint32_t)enu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)enu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_u_4_setf(uint8_t enu4)
{
	ASSERT_ERR((((uint32_t)enu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)enu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_u_3_setf(uint8_t enu3)
{
	ASSERT_ERR((((uint32_t)enu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)enu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_u_2_setf(uint8_t enu2)
{
	ASSERT_ERR((((uint32_t)enu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)enu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_u_1_setf(uint8_t enu1)
{
	ASSERT_ERR((((uint32_t)enu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)enu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_lmac_en_en_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_error_int_lmac_en_en_u_0_setf(uint8_t enu0)
{
	ASSERT_ERR((((uint32_t)enu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)enu0 <<0));
}

/**
 * @brief PCIEW_ERROR_INT_UMAC_EN register definition
 *  UMAC error interrupt enable register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EN_D15                    0              
 *    30    EN_D14                    0              
 *    29    EN_D13                    0              
 *    28    EN_D12                    0              
 *    27    EN_D11                    0              
 *    26    EN_D10                    0              
 *    25    EN_D9                     0              
 *    24    EN_D8                     0              
 *    23    EN_D7                     0              
 *    22    EN_D6                     0              
 *    21    EN_D5                     0              
 *    20    EN_D4                     0              
 *    19    EN_D3                     0              
 *    18    EN_D2                     0              
 *    17    EN_D1                     0              
 *    16    EN_D0                     0              
 *    15    EN_U15                    0              
 *    14    EN_U14                    0              
 *    13    EN_U13                    0              
 *    12    EN_U12                    0              
 *    11    EN_U11                    0              
 *    10    EN_U10                    0              
 *    09    EN_U9                     0              
 *    08    EN_U8                     0              
 *    07    EN_U7                     0              
 *    06    EN_U6                     0              
 *    05    EN_U5                     0              
 *    04    EN_U4                     0              
 *    03    EN_U3                     0              
 *    02    EN_U2                     0              
 *    01    EN_U1                     0              
 *    00    EN_U0                     0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002D4)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_OFFSET      0x000002D4
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_INDEX       0x000000B5
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_error_int_umac_en_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
}

__INLINE void pcie_wrap_pciew_error_int_umac_en_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_15_POS    31
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_14_POS    30
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_13_POS    29
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_12_POS    28
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_11_POS    27
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_10_POS    26
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_9_POS    25
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_8_POS    24
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_7_POS    23
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_6_POS    22
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_5_POS    21
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_4_POS    20
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_3_POS    19
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_2_POS    18
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_1_POS    17
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_0_POS    16
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_15_POS    15
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_14_POS    14
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_13_POS    13
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_12_POS    12
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_11_POS    11
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_10_POS    10
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_9_POS    9
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_8_POS    8
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_7_POS    7
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_6_POS    6
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_5_POS    5
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_4_POS    4
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_3_POS    3
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_2_POS    2
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_1_POS    1
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_0_POS    0

#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_EN_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_error_int_umac_en_pack(uint8_t en_d15, uint8_t en_d14, uint8_t en_d13, uint8_t en_d12, uint8_t en_d11, uint8_t en_d10, uint8_t en_d9, uint8_t en_d8, uint8_t en_d7, uint8_t en_d6, uint8_t en_d5, uint8_t en_d4, uint8_t en_d3, uint8_t en_d2, uint8_t en_d1, uint8_t en_d0, uint8_t en_u15, uint8_t en_u14, uint8_t en_u13, uint8_t en_u12, uint8_t en_u11, uint8_t en_u10, uint8_t en_u9, uint8_t en_u8, uint8_t en_u7, uint8_t en_u6, uint8_t en_u5, uint8_t en_u4, uint8_t en_u3, uint8_t en_u2, uint8_t en_u1, uint8_t en_u0)
{
	ASSERT_ERR((((uint32_t)en_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)en_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)en_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)en_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)en_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)en_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)en_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)en_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)en_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)en_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)en_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)en_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)en_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)en_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)en_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)en_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)en_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)en_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)en_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)en_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)en_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)en_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)en_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)en_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR,  ((uint32_t)en_d15 << 31) |((uint32_t)en_d14 << 30) |((uint32_t)en_d13 << 29) |((uint32_t)en_d12 << 28) |((uint32_t)en_d11 << 27) |((uint32_t)en_d10 << 26) |((uint32_t)en_d9 << 25) |((uint32_t)en_d8 << 24) |((uint32_t)en_d7 << 23) |((uint32_t)en_d6 << 22) |((uint32_t)en_d5 << 21) |((uint32_t)en_d4 << 20) |((uint32_t)en_d3 << 19) |((uint32_t)en_d2 << 18) |((uint32_t)en_d1 << 17) |((uint32_t)en_d0 << 16) |((uint32_t)en_u15 << 15) |((uint32_t)en_u14 << 14) |((uint32_t)en_u13 << 13) |((uint32_t)en_u12 << 12) |((uint32_t)en_u11 << 11) |((uint32_t)en_u10 << 10) |((uint32_t)en_u9 << 9) |((uint32_t)en_u8 << 8) |((uint32_t)en_u7 << 7) |((uint32_t)en_u6 << 6) |((uint32_t)en_u5 << 5) |((uint32_t)en_u4 << 4) |((uint32_t)en_u3 << 3) |((uint32_t)en_u2 << 2) |((uint32_t)en_u1 << 1) |((uint32_t)en_u0 << 0));
}

__INLINE void pcie_wrap_pciew_error_int_umac_en_unpack(uint8_t* en_d15, uint8_t* en_d14, uint8_t* en_d13, uint8_t* en_d12, uint8_t* en_d11, uint8_t* en_d10, uint8_t* en_d9, uint8_t* en_d8, uint8_t* en_d7, uint8_t* en_d6, uint8_t* en_d5, uint8_t* en_d4, uint8_t* en_d3, uint8_t* en_d2, uint8_t* en_d1, uint8_t* en_d0, uint8_t* en_u15, uint8_t* en_u14, uint8_t* en_u13, uint8_t* en_u12, uint8_t* en_u11, uint8_t* en_u10, uint8_t* en_u9, uint8_t* en_u8, uint8_t* en_u7, uint8_t* en_u6, uint8_t* en_u5, uint8_t* en_u4, uint8_t* en_u3, uint8_t* en_u2, uint8_t* en_u1, uint8_t* en_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);

	*en_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*en_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*en_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*en_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*en_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*en_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*en_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*en_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*en_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*en_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*en_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*en_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*en_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*en_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*en_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*en_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*en_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*en_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*en_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*en_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*en_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*en_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*en_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*en_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*en_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*en_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*en_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*en_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*en_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*en_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*en_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*en_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_d_15_setf(uint8_t end15)
{
	ASSERT_ERR((((uint32_t)end15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)end15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_d_14_setf(uint8_t end14)
{
	ASSERT_ERR((((uint32_t)end14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)end14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_d_13_setf(uint8_t end13)
{
	ASSERT_ERR((((uint32_t)end13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)end13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_d_12_setf(uint8_t end12)
{
	ASSERT_ERR((((uint32_t)end12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)end12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_d_11_setf(uint8_t end11)
{
	ASSERT_ERR((((uint32_t)end11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)end11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_d_10_setf(uint8_t end10)
{
	ASSERT_ERR((((uint32_t)end10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)end10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_d_9_setf(uint8_t end9)
{
	ASSERT_ERR((((uint32_t)end9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)end9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_d_8_setf(uint8_t end8)
{
	ASSERT_ERR((((uint32_t)end8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)end8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_d_7_setf(uint8_t end7)
{
	ASSERT_ERR((((uint32_t)end7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)end7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_d_6_setf(uint8_t end6)
{
	ASSERT_ERR((((uint32_t)end6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)end6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_d_5_setf(uint8_t end5)
{
	ASSERT_ERR((((uint32_t)end5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)end5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_d_4_setf(uint8_t end4)
{
	ASSERT_ERR((((uint32_t)end4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)end4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_d_3_setf(uint8_t end3)
{
	ASSERT_ERR((((uint32_t)end3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)end3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_d_2_setf(uint8_t end2)
{
	ASSERT_ERR((((uint32_t)end2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)end2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_d_1_setf(uint8_t end1)
{
	ASSERT_ERR((((uint32_t)end1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)end1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_d_0_setf(uint8_t end0)
{
	ASSERT_ERR((((uint32_t)end0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)end0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_u_15_setf(uint8_t enu15)
{
	ASSERT_ERR((((uint32_t)enu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)enu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_u_14_setf(uint8_t enu14)
{
	ASSERT_ERR((((uint32_t)enu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)enu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_u_13_setf(uint8_t enu13)
{
	ASSERT_ERR((((uint32_t)enu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)enu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_u_12_setf(uint8_t enu12)
{
	ASSERT_ERR((((uint32_t)enu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)enu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_u_11_setf(uint8_t enu11)
{
	ASSERT_ERR((((uint32_t)enu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)enu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_u_10_setf(uint8_t enu10)
{
	ASSERT_ERR((((uint32_t)enu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)enu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_u_9_setf(uint8_t enu9)
{
	ASSERT_ERR((((uint32_t)enu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)enu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_u_8_setf(uint8_t enu8)
{
	ASSERT_ERR((((uint32_t)enu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)enu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_u_7_setf(uint8_t enu7)
{
	ASSERT_ERR((((uint32_t)enu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)enu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_u_6_setf(uint8_t enu6)
{
	ASSERT_ERR((((uint32_t)enu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)enu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_u_5_setf(uint8_t enu5)
{
	ASSERT_ERR((((uint32_t)enu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)enu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_u_4_setf(uint8_t enu4)
{
	ASSERT_ERR((((uint32_t)enu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)enu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_u_3_setf(uint8_t enu3)
{
	ASSERT_ERR((((uint32_t)enu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)enu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_u_2_setf(uint8_t enu2)
{
	ASSERT_ERR((((uint32_t)enu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)enu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_u_1_setf(uint8_t enu1)
{
	ASSERT_ERR((((uint32_t)enu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)enu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_umac_en_en_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_error_int_umac_en_en_u_0_setf(uint8_t enu0)
{
	ASSERT_ERR((((uint32_t)enu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)enu0 <<0));
}

/**
 * @brief PCIEW_ERROR_INT_SMAC_EN register definition
 *  SMAC error interrupt enable register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EN_D15                    0              
 *    30    EN_D14                    0              
 *    29    EN_D13                    0              
 *    28    EN_D12                    0              
 *    27    EN_D11                    0              
 *    26    EN_D10                    0              
 *    25    EN_D9                     0              
 *    24    EN_D8                     0              
 *    23    EN_D7                     0              
 *    22    EN_D6                     0              
 *    21    EN_D5                     0              
 *    20    EN_D4                     0              
 *    19    EN_D3                     0              
 *    18    EN_D2                     0              
 *    17    EN_D1                     0              
 *    16    EN_D0                     0              
 *    15    EN_U15                    0              
 *    14    EN_U14                    0              
 *    13    EN_U13                    0              
 *    12    EN_U12                    0              
 *    11    EN_U11                    0              
 *    10    EN_U10                    0              
 *    09    EN_U9                     0              
 *    08    EN_U8                     0              
 *    07    EN_U7                     0              
 *    06    EN_U6                     0              
 *    05    EN_U5                     0              
 *    04    EN_U4                     0              
 *    03    EN_U3                     0              
 *    02    EN_U2                     0              
 *    01    EN_U1                     0              
 *    00    EN_U0                     0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002D8)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_OFFSET      0x000002D8
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_INDEX       0x000000B6
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_error_int_smac_en_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
}

__INLINE void pcie_wrap_pciew_error_int_smac_en_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_15_POS    31
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_14_POS    30
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_13_POS    29
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_12_POS    28
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_11_POS    27
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_10_POS    26
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_9_POS    25
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_8_POS    24
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_7_POS    23
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_6_POS    22
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_5_POS    21
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_4_POS    20
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_3_POS    19
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_2_POS    18
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_1_POS    17
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_0_POS    16
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_15_POS    15
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_14_POS    14
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_13_POS    13
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_12_POS    12
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_11_POS    11
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_10_POS    10
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_9_POS    9
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_8_POS    8
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_7_POS    7
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_6_POS    6
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_5_POS    5
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_4_POS    4
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_3_POS    3
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_2_POS    2
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_1_POS    1
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_0_POS    0

#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_EN_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_error_int_smac_en_pack(uint8_t en_d15, uint8_t en_d14, uint8_t en_d13, uint8_t en_d12, uint8_t en_d11, uint8_t en_d10, uint8_t en_d9, uint8_t en_d8, uint8_t en_d7, uint8_t en_d6, uint8_t en_d5, uint8_t en_d4, uint8_t en_d3, uint8_t en_d2, uint8_t en_d1, uint8_t en_d0, uint8_t en_u15, uint8_t en_u14, uint8_t en_u13, uint8_t en_u12, uint8_t en_u11, uint8_t en_u10, uint8_t en_u9, uint8_t en_u8, uint8_t en_u7, uint8_t en_u6, uint8_t en_u5, uint8_t en_u4, uint8_t en_u3, uint8_t en_u2, uint8_t en_u1, uint8_t en_u0)
{
	ASSERT_ERR((((uint32_t)en_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)en_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)en_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)en_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)en_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)en_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)en_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)en_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)en_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)en_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)en_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)en_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)en_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)en_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)en_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)en_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)en_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)en_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)en_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)en_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)en_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)en_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)en_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)en_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR,  ((uint32_t)en_d15 << 31) |((uint32_t)en_d14 << 30) |((uint32_t)en_d13 << 29) |((uint32_t)en_d12 << 28) |((uint32_t)en_d11 << 27) |((uint32_t)en_d10 << 26) |((uint32_t)en_d9 << 25) |((uint32_t)en_d8 << 24) |((uint32_t)en_d7 << 23) |((uint32_t)en_d6 << 22) |((uint32_t)en_d5 << 21) |((uint32_t)en_d4 << 20) |((uint32_t)en_d3 << 19) |((uint32_t)en_d2 << 18) |((uint32_t)en_d1 << 17) |((uint32_t)en_d0 << 16) |((uint32_t)en_u15 << 15) |((uint32_t)en_u14 << 14) |((uint32_t)en_u13 << 13) |((uint32_t)en_u12 << 12) |((uint32_t)en_u11 << 11) |((uint32_t)en_u10 << 10) |((uint32_t)en_u9 << 9) |((uint32_t)en_u8 << 8) |((uint32_t)en_u7 << 7) |((uint32_t)en_u6 << 6) |((uint32_t)en_u5 << 5) |((uint32_t)en_u4 << 4) |((uint32_t)en_u3 << 3) |((uint32_t)en_u2 << 2) |((uint32_t)en_u1 << 1) |((uint32_t)en_u0 << 0));
}

__INLINE void pcie_wrap_pciew_error_int_smac_en_unpack(uint8_t* en_d15, uint8_t* en_d14, uint8_t* en_d13, uint8_t* en_d12, uint8_t* en_d11, uint8_t* en_d10, uint8_t* en_d9, uint8_t* en_d8, uint8_t* en_d7, uint8_t* en_d6, uint8_t* en_d5, uint8_t* en_d4, uint8_t* en_d3, uint8_t* en_d2, uint8_t* en_d1, uint8_t* en_d0, uint8_t* en_u15, uint8_t* en_u14, uint8_t* en_u13, uint8_t* en_u12, uint8_t* en_u11, uint8_t* en_u10, uint8_t* en_u9, uint8_t* en_u8, uint8_t* en_u7, uint8_t* en_u6, uint8_t* en_u5, uint8_t* en_u4, uint8_t* en_u3, uint8_t* en_u2, uint8_t* en_u1, uint8_t* en_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);

	*en_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*en_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*en_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*en_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*en_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*en_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*en_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*en_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*en_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*en_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*en_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*en_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*en_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*en_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*en_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*en_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*en_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*en_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*en_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*en_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*en_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*en_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*en_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*en_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*en_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*en_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*en_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*en_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*en_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*en_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*en_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*en_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_d_15_setf(uint8_t end15)
{
	ASSERT_ERR((((uint32_t)end15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)end15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_d_14_setf(uint8_t end14)
{
	ASSERT_ERR((((uint32_t)end14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)end14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_d_13_setf(uint8_t end13)
{
	ASSERT_ERR((((uint32_t)end13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)end13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_d_12_setf(uint8_t end12)
{
	ASSERT_ERR((((uint32_t)end12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)end12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_d_11_setf(uint8_t end11)
{
	ASSERT_ERR((((uint32_t)end11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)end11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_d_10_setf(uint8_t end10)
{
	ASSERT_ERR((((uint32_t)end10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)end10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_d_9_setf(uint8_t end9)
{
	ASSERT_ERR((((uint32_t)end9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)end9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_d_8_setf(uint8_t end8)
{
	ASSERT_ERR((((uint32_t)end8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)end8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_d_7_setf(uint8_t end7)
{
	ASSERT_ERR((((uint32_t)end7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)end7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_d_6_setf(uint8_t end6)
{
	ASSERT_ERR((((uint32_t)end6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)end6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_d_5_setf(uint8_t end5)
{
	ASSERT_ERR((((uint32_t)end5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)end5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_d_4_setf(uint8_t end4)
{
	ASSERT_ERR((((uint32_t)end4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)end4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_d_3_setf(uint8_t end3)
{
	ASSERT_ERR((((uint32_t)end3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)end3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_d_2_setf(uint8_t end2)
{
	ASSERT_ERR((((uint32_t)end2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)end2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_d_1_setf(uint8_t end1)
{
	ASSERT_ERR((((uint32_t)end1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)end1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_d_0_setf(uint8_t end0)
{
	ASSERT_ERR((((uint32_t)end0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)end0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_u_15_setf(uint8_t enu15)
{
	ASSERT_ERR((((uint32_t)enu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)enu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_u_14_setf(uint8_t enu14)
{
	ASSERT_ERR((((uint32_t)enu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)enu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_u_13_setf(uint8_t enu13)
{
	ASSERT_ERR((((uint32_t)enu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)enu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_u_12_setf(uint8_t enu12)
{
	ASSERT_ERR((((uint32_t)enu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)enu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_u_11_setf(uint8_t enu11)
{
	ASSERT_ERR((((uint32_t)enu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)enu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_u_10_setf(uint8_t enu10)
{
	ASSERT_ERR((((uint32_t)enu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)enu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_u_9_setf(uint8_t enu9)
{
	ASSERT_ERR((((uint32_t)enu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)enu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_u_8_setf(uint8_t enu8)
{
	ASSERT_ERR((((uint32_t)enu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)enu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_u_7_setf(uint8_t enu7)
{
	ASSERT_ERR((((uint32_t)enu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)enu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_u_6_setf(uint8_t enu6)
{
	ASSERT_ERR((((uint32_t)enu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)enu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_u_5_setf(uint8_t enu5)
{
	ASSERT_ERR((((uint32_t)enu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)enu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_u_4_setf(uint8_t enu4)
{
	ASSERT_ERR((((uint32_t)enu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)enu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_u_3_setf(uint8_t enu3)
{
	ASSERT_ERR((((uint32_t)enu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)enu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_u_2_setf(uint8_t enu2)
{
	ASSERT_ERR((((uint32_t)enu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)enu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_u_1_setf(uint8_t enu1)
{
	ASSERT_ERR((((uint32_t)enu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)enu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_smac_en_en_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_error_int_smac_en_en_u_0_setf(uint8_t enu0)
{
	ASSERT_ERR((((uint32_t)enu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)enu0 <<0));
}

/**
 * @brief PCIEW_ERROR_INT_CLR register definition
 *  Error interrupts clear register register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    CLR_D15                   0              
 *    30    CLR_D14                   0              
 *    29    CLR_D13                   0              
 *    28    CLR_D12                   0              
 *    27    CLR_D11                   0              
 *    26    CLR_D10                   0              
 *    25    CLR_D9                    0              
 *    24    CLR_D8                    0              
 *    23    CLR_D7                    0              
 *    22    CLR_D6                    0              
 *    21    CLR_D5                    0              
 *    20    CLR_D4                    0              
 *    19    CLR_D3                    0              
 *    18    CLR_D2                    0              
 *    17    CLR_D1                    0              
 *    16    CLR_D0                    0              
 *    15    CLR_U15                   0              
 *    14    CLR_U14                   0              
 *    13    CLR_U13                   0              
 *    12    CLR_U12                   0              
 *    11    CLR_U11                   0              
 *    10    CLR_U10                   0              
 *    09    CLR_U9                    0              
 *    08    CLR_U8                    0              
 *    07    CLR_U7                    0              
 *    06    CLR_U6                    0              
 *    05    CLR_U5                    0              
 *    04    CLR_U4                    0              
 *    03    CLR_U3                    0              
 *    02    CLR_U2                    0              
 *    01    CLR_U1                    0              
 *    00    CLR_U0                    0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002DC)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_OFFSET      0x000002DC
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_INDEX       0x000000B7
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_error_int_clr_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
}

__INLINE void pcie_wrap_pciew_error_int_clr_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_15_POS    31
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_14_POS    30
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_13_POS    29
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_12_POS    28
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_11_POS    27
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_10_POS    26
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_9_POS    25
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_8_POS    24
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_7_POS    23
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_6_POS    22
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_5_POS    21
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_4_POS    20
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_3_POS    19
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_2_POS    18
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_1_POS    17
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_0_POS    16
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_15_POS    15
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_14_POS    14
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_13_POS    13
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_12_POS    12
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_11_POS    11
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_10_POS    10
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_9_POS    9
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_8_POS    8
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_7_POS    7
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_6_POS    6
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_5_POS    5
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_4_POS    4
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_3_POS    3
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_2_POS    2
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_1_POS    1
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_0_POS    0

#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_ERROR_INT_CLR_CLR_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_error_int_clr_pack(uint8_t clr_d15, uint8_t clr_d14, uint8_t clr_d13, uint8_t clr_d12, uint8_t clr_d11, uint8_t clr_d10, uint8_t clr_d9, uint8_t clr_d8, uint8_t clr_d7, uint8_t clr_d6, uint8_t clr_d5, uint8_t clr_d4, uint8_t clr_d3, uint8_t clr_d2, uint8_t clr_d1, uint8_t clr_d0, uint8_t clr_u15, uint8_t clr_u14, uint8_t clr_u13, uint8_t clr_u12, uint8_t clr_u11, uint8_t clr_u10, uint8_t clr_u9, uint8_t clr_u8, uint8_t clr_u7, uint8_t clr_u6, uint8_t clr_u5, uint8_t clr_u4, uint8_t clr_u3, uint8_t clr_u2, uint8_t clr_u1, uint8_t clr_u0)
{
	ASSERT_ERR((((uint32_t)clr_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)clr_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)clr_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)clr_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)clr_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)clr_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)clr_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)clr_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)clr_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)clr_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)clr_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)clr_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)clr_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)clr_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)clr_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)clr_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)clr_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)clr_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR,  ((uint32_t)clr_d15 << 31) |((uint32_t)clr_d14 << 30) |((uint32_t)clr_d13 << 29) |((uint32_t)clr_d12 << 28) |((uint32_t)clr_d11 << 27) |((uint32_t)clr_d10 << 26) |((uint32_t)clr_d9 << 25) |((uint32_t)clr_d8 << 24) |((uint32_t)clr_d7 << 23) |((uint32_t)clr_d6 << 22) |((uint32_t)clr_d5 << 21) |((uint32_t)clr_d4 << 20) |((uint32_t)clr_d3 << 19) |((uint32_t)clr_d2 << 18) |((uint32_t)clr_d1 << 17) |((uint32_t)clr_d0 << 16) |((uint32_t)clr_u15 << 15) |((uint32_t)clr_u14 << 14) |((uint32_t)clr_u13 << 13) |((uint32_t)clr_u12 << 12) |((uint32_t)clr_u11 << 11) |((uint32_t)clr_u10 << 10) |((uint32_t)clr_u9 << 9) |((uint32_t)clr_u8 << 8) |((uint32_t)clr_u7 << 7) |((uint32_t)clr_u6 << 6) |((uint32_t)clr_u5 << 5) |((uint32_t)clr_u4 << 4) |((uint32_t)clr_u3 << 3) |((uint32_t)clr_u2 << 2) |((uint32_t)clr_u1 << 1) |((uint32_t)clr_u0 << 0));
}

__INLINE void pcie_wrap_pciew_error_int_clr_unpack(uint8_t* clr_d15, uint8_t* clr_d14, uint8_t* clr_d13, uint8_t* clr_d12, uint8_t* clr_d11, uint8_t* clr_d10, uint8_t* clr_d9, uint8_t* clr_d8, uint8_t* clr_d7, uint8_t* clr_d6, uint8_t* clr_d5, uint8_t* clr_d4, uint8_t* clr_d3, uint8_t* clr_d2, uint8_t* clr_d1, uint8_t* clr_d0, uint8_t* clr_u15, uint8_t* clr_u14, uint8_t* clr_u13, uint8_t* clr_u12, uint8_t* clr_u11, uint8_t* clr_u10, uint8_t* clr_u9, uint8_t* clr_u8, uint8_t* clr_u7, uint8_t* clr_u6, uint8_t* clr_u5, uint8_t* clr_u4, uint8_t* clr_u3, uint8_t* clr_u2, uint8_t* clr_u1, uint8_t* clr_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);

	*clr_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*clr_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*clr_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*clr_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*clr_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*clr_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*clr_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*clr_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*clr_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*clr_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*clr_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*clr_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*clr_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*clr_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*clr_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*clr_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*clr_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*clr_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*clr_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*clr_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*clr_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*clr_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*clr_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*clr_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*clr_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*clr_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*clr_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*clr_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*clr_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*clr_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*clr_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*clr_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_d_15_setf(uint8_t clrd15)
{
	ASSERT_ERR((((uint32_t)clrd15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)clrd15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_d_14_setf(uint8_t clrd14)
{
	ASSERT_ERR((((uint32_t)clrd14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)clrd14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_d_13_setf(uint8_t clrd13)
{
	ASSERT_ERR((((uint32_t)clrd13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)clrd13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_d_12_setf(uint8_t clrd12)
{
	ASSERT_ERR((((uint32_t)clrd12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)clrd12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_d_11_setf(uint8_t clrd11)
{
	ASSERT_ERR((((uint32_t)clrd11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)clrd11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_d_10_setf(uint8_t clrd10)
{
	ASSERT_ERR((((uint32_t)clrd10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)clrd10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_d_9_setf(uint8_t clrd9)
{
	ASSERT_ERR((((uint32_t)clrd9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)clrd9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_d_8_setf(uint8_t clrd8)
{
	ASSERT_ERR((((uint32_t)clrd8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)clrd8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_d_7_setf(uint8_t clrd7)
{
	ASSERT_ERR((((uint32_t)clrd7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)clrd7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_d_6_setf(uint8_t clrd6)
{
	ASSERT_ERR((((uint32_t)clrd6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)clrd6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_d_5_setf(uint8_t clrd5)
{
	ASSERT_ERR((((uint32_t)clrd5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)clrd5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_d_4_setf(uint8_t clrd4)
{
	ASSERT_ERR((((uint32_t)clrd4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)clrd4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_d_3_setf(uint8_t clrd3)
{
	ASSERT_ERR((((uint32_t)clrd3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)clrd3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_d_2_setf(uint8_t clrd2)
{
	ASSERT_ERR((((uint32_t)clrd2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)clrd2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_d_1_setf(uint8_t clrd1)
{
	ASSERT_ERR((((uint32_t)clrd1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)clrd1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_d_0_setf(uint8_t clrd0)
{
	ASSERT_ERR((((uint32_t)clrd0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)clrd0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_u_15_setf(uint8_t clru15)
{
	ASSERT_ERR((((uint32_t)clru15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)clru15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_u_14_setf(uint8_t clru14)
{
	ASSERT_ERR((((uint32_t)clru14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)clru14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_u_13_setf(uint8_t clru13)
{
	ASSERT_ERR((((uint32_t)clru13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)clru13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_u_12_setf(uint8_t clru12)
{
	ASSERT_ERR((((uint32_t)clru12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)clru12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_u_11_setf(uint8_t clru11)
{
	ASSERT_ERR((((uint32_t)clru11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)clru11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_u_10_setf(uint8_t clru10)
{
	ASSERT_ERR((((uint32_t)clru10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)clru10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_u_9_setf(uint8_t clru9)
{
	ASSERT_ERR((((uint32_t)clru9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)clru9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_u_8_setf(uint8_t clru8)
{
	ASSERT_ERR((((uint32_t)clru8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)clru8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_u_7_setf(uint8_t clru7)
{
	ASSERT_ERR((((uint32_t)clru7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)clru7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_u_6_setf(uint8_t clru6)
{
	ASSERT_ERR((((uint32_t)clru6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)clru6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_u_5_setf(uint8_t clru5)
{
	ASSERT_ERR((((uint32_t)clru5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)clru5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_u_4_setf(uint8_t clru4)
{
	ASSERT_ERR((((uint32_t)clru4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)clru4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_u_3_setf(uint8_t clru3)
{
	ASSERT_ERR((((uint32_t)clru3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)clru3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_u_2_setf(uint8_t clru2)
{
	ASSERT_ERR((((uint32_t)clru2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)clru2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_u_1_setf(uint8_t clru1)
{
	ASSERT_ERR((((uint32_t)clru1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)clru1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_error_int_clr_clr_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_error_int_clr_clr_u_0_setf(uint8_t clru0)
{
	ASSERT_ERR((((uint32_t)clru0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_ERROR_INT_CLR_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)clru0 <<0));
}

/**
 * @brief PCIEW_CH_CLEAN_INT_LMAC_EN register definition
 *  LMAC channel clean interrupt enable register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EN_D15                    0              
 *    30    EN_D14                    0              
 *    29    EN_D13                    0              
 *    28    EN_D12                    0              
 *    27    EN_D11                    0              
 *    26    EN_D10                    0              
 *    25    EN_D9                     0              
 *    24    EN_D8                     0              
 *    23    EN_D7                     0              
 *    22    EN_D6                     0              
 *    21    EN_D5                     0              
 *    20    EN_D4                     0              
 *    19    EN_D3                     0              
 *    18    EN_D2                     0              
 *    17    EN_D1                     0              
 *    16    EN_D0                     0              
 *    15    EN_U15                    0              
 *    14    EN_U14                    0              
 *    13    EN_U13                    0              
 *    12    EN_U12                    0              
 *    11    EN_U11                    0              
 *    10    EN_U10                    0              
 *    09    EN_U9                     0              
 *    08    EN_U8                     0              
 *    07    EN_U7                     0              
 *    06    EN_U6                     0              
 *    05    EN_U5                     0              
 *    04    EN_U4                     0              
 *    03    EN_U3                     0              
 *    02    EN_U2                     0              
 *    01    EN_U1                     0              
 *    00    EN_U0                     0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002E0)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_OFFSET      0x000002E0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_INDEX       0x000000B8
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_ch_clean_int_lmac_en_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
}

__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_15_POS    31
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_14_POS    30
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_13_POS    29
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_12_POS    28
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_11_POS    27
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_10_POS    26
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_9_POS    25
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_8_POS    24
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_7_POS    23
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_6_POS    22
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_5_POS    21
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_4_POS    20
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_3_POS    19
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_2_POS    18
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_1_POS    17
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_0_POS    16
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_15_POS    15
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_14_POS    14
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_13_POS    13
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_12_POS    12
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_11_POS    11
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_10_POS    10
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_9_POS    9
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_8_POS    8
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_7_POS    7
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_6_POS    6
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_5_POS    5
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_4_POS    4
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_3_POS    3
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_2_POS    2
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_1_POS    1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_0_POS    0

#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_EN_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_pack(uint8_t en_d15, uint8_t en_d14, uint8_t en_d13, uint8_t en_d12, uint8_t en_d11, uint8_t en_d10, uint8_t en_d9, uint8_t en_d8, uint8_t en_d7, uint8_t en_d6, uint8_t en_d5, uint8_t en_d4, uint8_t en_d3, uint8_t en_d2, uint8_t en_d1, uint8_t en_d0, uint8_t en_u15, uint8_t en_u14, uint8_t en_u13, uint8_t en_u12, uint8_t en_u11, uint8_t en_u10, uint8_t en_u9, uint8_t en_u8, uint8_t en_u7, uint8_t en_u6, uint8_t en_u5, uint8_t en_u4, uint8_t en_u3, uint8_t en_u2, uint8_t en_u1, uint8_t en_u0)
{
	ASSERT_ERR((((uint32_t)en_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)en_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)en_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)en_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)en_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)en_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)en_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)en_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)en_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)en_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)en_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)en_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)en_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)en_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)en_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)en_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)en_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)en_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)en_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)en_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)en_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)en_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)en_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)en_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR,  ((uint32_t)en_d15 << 31) |((uint32_t)en_d14 << 30) |((uint32_t)en_d13 << 29) |((uint32_t)en_d12 << 28) |((uint32_t)en_d11 << 27) |((uint32_t)en_d10 << 26) |((uint32_t)en_d9 << 25) |((uint32_t)en_d8 << 24) |((uint32_t)en_d7 << 23) |((uint32_t)en_d6 << 22) |((uint32_t)en_d5 << 21) |((uint32_t)en_d4 << 20) |((uint32_t)en_d3 << 19) |((uint32_t)en_d2 << 18) |((uint32_t)en_d1 << 17) |((uint32_t)en_d0 << 16) |((uint32_t)en_u15 << 15) |((uint32_t)en_u14 << 14) |((uint32_t)en_u13 << 13) |((uint32_t)en_u12 << 12) |((uint32_t)en_u11 << 11) |((uint32_t)en_u10 << 10) |((uint32_t)en_u9 << 9) |((uint32_t)en_u8 << 8) |((uint32_t)en_u7 << 7) |((uint32_t)en_u6 << 6) |((uint32_t)en_u5 << 5) |((uint32_t)en_u4 << 4) |((uint32_t)en_u3 << 3) |((uint32_t)en_u2 << 2) |((uint32_t)en_u1 << 1) |((uint32_t)en_u0 << 0));
}

__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_unpack(uint8_t* en_d15, uint8_t* en_d14, uint8_t* en_d13, uint8_t* en_d12, uint8_t* en_d11, uint8_t* en_d10, uint8_t* en_d9, uint8_t* en_d8, uint8_t* en_d7, uint8_t* en_d6, uint8_t* en_d5, uint8_t* en_d4, uint8_t* en_d3, uint8_t* en_d2, uint8_t* en_d1, uint8_t* en_d0, uint8_t* en_u15, uint8_t* en_u14, uint8_t* en_u13, uint8_t* en_u12, uint8_t* en_u11, uint8_t* en_u10, uint8_t* en_u9, uint8_t* en_u8, uint8_t* en_u7, uint8_t* en_u6, uint8_t* en_u5, uint8_t* en_u4, uint8_t* en_u3, uint8_t* en_u2, uint8_t* en_u1, uint8_t* en_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);

	*en_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*en_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*en_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*en_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*en_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*en_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*en_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*en_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*en_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*en_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*en_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*en_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*en_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*en_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*en_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*en_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*en_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*en_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*en_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*en_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*en_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*en_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*en_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*en_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*en_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*en_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*en_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*en_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*en_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*en_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*en_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*en_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_15_setf(uint8_t end15)
{
	ASSERT_ERR((((uint32_t)end15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)end15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_14_setf(uint8_t end14)
{
	ASSERT_ERR((((uint32_t)end14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)end14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_13_setf(uint8_t end13)
{
	ASSERT_ERR((((uint32_t)end13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)end13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_12_setf(uint8_t end12)
{
	ASSERT_ERR((((uint32_t)end12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)end12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_11_setf(uint8_t end11)
{
	ASSERT_ERR((((uint32_t)end11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)end11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_10_setf(uint8_t end10)
{
	ASSERT_ERR((((uint32_t)end10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)end10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_9_setf(uint8_t end9)
{
	ASSERT_ERR((((uint32_t)end9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)end9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_8_setf(uint8_t end8)
{
	ASSERT_ERR((((uint32_t)end8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)end8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_7_setf(uint8_t end7)
{
	ASSERT_ERR((((uint32_t)end7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)end7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_6_setf(uint8_t end6)
{
	ASSERT_ERR((((uint32_t)end6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)end6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_5_setf(uint8_t end5)
{
	ASSERT_ERR((((uint32_t)end5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)end5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_4_setf(uint8_t end4)
{
	ASSERT_ERR((((uint32_t)end4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)end4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_3_setf(uint8_t end3)
{
	ASSERT_ERR((((uint32_t)end3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)end3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_2_setf(uint8_t end2)
{
	ASSERT_ERR((((uint32_t)end2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)end2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_1_setf(uint8_t end1)
{
	ASSERT_ERR((((uint32_t)end1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)end1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_0_setf(uint8_t end0)
{
	ASSERT_ERR((((uint32_t)end0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)end0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_15_setf(uint8_t enu15)
{
	ASSERT_ERR((((uint32_t)enu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)enu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_14_setf(uint8_t enu14)
{
	ASSERT_ERR((((uint32_t)enu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)enu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_13_setf(uint8_t enu13)
{
	ASSERT_ERR((((uint32_t)enu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)enu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_12_setf(uint8_t enu12)
{
	ASSERT_ERR((((uint32_t)enu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)enu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_11_setf(uint8_t enu11)
{
	ASSERT_ERR((((uint32_t)enu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)enu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_10_setf(uint8_t enu10)
{
	ASSERT_ERR((((uint32_t)enu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)enu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_9_setf(uint8_t enu9)
{
	ASSERT_ERR((((uint32_t)enu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)enu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_8_setf(uint8_t enu8)
{
	ASSERT_ERR((((uint32_t)enu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)enu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_7_setf(uint8_t enu7)
{
	ASSERT_ERR((((uint32_t)enu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)enu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_6_setf(uint8_t enu6)
{
	ASSERT_ERR((((uint32_t)enu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)enu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_5_setf(uint8_t enu5)
{
	ASSERT_ERR((((uint32_t)enu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)enu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_4_setf(uint8_t enu4)
{
	ASSERT_ERR((((uint32_t)enu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)enu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_3_setf(uint8_t enu3)
{
	ASSERT_ERR((((uint32_t)enu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)enu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_2_setf(uint8_t enu2)
{
	ASSERT_ERR((((uint32_t)enu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)enu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_1_setf(uint8_t enu1)
{
	ASSERT_ERR((((uint32_t)enu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)enu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_0_setf(uint8_t enu0)
{
	ASSERT_ERR((((uint32_t)enu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_EN_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)enu0 <<0));
}

/**
 * @brief PCIEW_CH_CLEAN_INT_UMAC_EN register definition
 *  UMAC channel clean interrupt enable register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EN_D15                    0              
 *    30    EN_D14                    0              
 *    29    EN_D13                    0              
 *    28    EN_D12                    0              
 *    27    EN_D11                    0              
 *    26    EN_D10                    0              
 *    25    EN_D9                     0              
 *    24    EN_D8                     0              
 *    23    EN_D7                     0              
 *    22    EN_D6                     0              
 *    21    EN_D5                     0              
 *    20    EN_D4                     0              
 *    19    EN_D3                     0              
 *    18    EN_D2                     0              
 *    17    EN_D1                     0              
 *    16    EN_D0                     0              
 *    15    EN_U15                    0              
 *    14    EN_U14                    0              
 *    13    EN_U13                    0              
 *    12    EN_U12                    0              
 *    11    EN_U11                    0              
 *    10    EN_U10                    0              
 *    09    EN_U9                     0              
 *    08    EN_U8                     0              
 *    07    EN_U7                     0              
 *    06    EN_U6                     0              
 *    05    EN_U5                     0              
 *    04    EN_U4                     0              
 *    03    EN_U3                     0              
 *    02    EN_U2                     0              
 *    01    EN_U1                     0              
 *    00    EN_U0                     0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002E4)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_OFFSET      0x000002E4
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_INDEX       0x000000B9
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_ch_clean_int_umac_en_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
}

__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_15_POS    31
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_14_POS    30
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_13_POS    29
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_12_POS    28
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_11_POS    27
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_10_POS    26
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_9_POS    25
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_8_POS    24
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_7_POS    23
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_6_POS    22
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_5_POS    21
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_4_POS    20
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_3_POS    19
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_2_POS    18
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_1_POS    17
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_0_POS    16
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_15_POS    15
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_14_POS    14
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_13_POS    13
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_12_POS    12
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_11_POS    11
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_10_POS    10
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_9_POS    9
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_8_POS    8
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_7_POS    7
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_6_POS    6
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_5_POS    5
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_4_POS    4
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_3_POS    3
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_2_POS    2
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_1_POS    1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_0_POS    0

#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_EN_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_pack(uint8_t en_d15, uint8_t en_d14, uint8_t en_d13, uint8_t en_d12, uint8_t en_d11, uint8_t en_d10, uint8_t en_d9, uint8_t en_d8, uint8_t en_d7, uint8_t en_d6, uint8_t en_d5, uint8_t en_d4, uint8_t en_d3, uint8_t en_d2, uint8_t en_d1, uint8_t en_d0, uint8_t en_u15, uint8_t en_u14, uint8_t en_u13, uint8_t en_u12, uint8_t en_u11, uint8_t en_u10, uint8_t en_u9, uint8_t en_u8, uint8_t en_u7, uint8_t en_u6, uint8_t en_u5, uint8_t en_u4, uint8_t en_u3, uint8_t en_u2, uint8_t en_u1, uint8_t en_u0)
{
	ASSERT_ERR((((uint32_t)en_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)en_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)en_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)en_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)en_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)en_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)en_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)en_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)en_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)en_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)en_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)en_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)en_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)en_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)en_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)en_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)en_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)en_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)en_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)en_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)en_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)en_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)en_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)en_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR,  ((uint32_t)en_d15 << 31) |((uint32_t)en_d14 << 30) |((uint32_t)en_d13 << 29) |((uint32_t)en_d12 << 28) |((uint32_t)en_d11 << 27) |((uint32_t)en_d10 << 26) |((uint32_t)en_d9 << 25) |((uint32_t)en_d8 << 24) |((uint32_t)en_d7 << 23) |((uint32_t)en_d6 << 22) |((uint32_t)en_d5 << 21) |((uint32_t)en_d4 << 20) |((uint32_t)en_d3 << 19) |((uint32_t)en_d2 << 18) |((uint32_t)en_d1 << 17) |((uint32_t)en_d0 << 16) |((uint32_t)en_u15 << 15) |((uint32_t)en_u14 << 14) |((uint32_t)en_u13 << 13) |((uint32_t)en_u12 << 12) |((uint32_t)en_u11 << 11) |((uint32_t)en_u10 << 10) |((uint32_t)en_u9 << 9) |((uint32_t)en_u8 << 8) |((uint32_t)en_u7 << 7) |((uint32_t)en_u6 << 6) |((uint32_t)en_u5 << 5) |((uint32_t)en_u4 << 4) |((uint32_t)en_u3 << 3) |((uint32_t)en_u2 << 2) |((uint32_t)en_u1 << 1) |((uint32_t)en_u0 << 0));
}

__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_unpack(uint8_t* en_d15, uint8_t* en_d14, uint8_t* en_d13, uint8_t* en_d12, uint8_t* en_d11, uint8_t* en_d10, uint8_t* en_d9, uint8_t* en_d8, uint8_t* en_d7, uint8_t* en_d6, uint8_t* en_d5, uint8_t* en_d4, uint8_t* en_d3, uint8_t* en_d2, uint8_t* en_d1, uint8_t* en_d0, uint8_t* en_u15, uint8_t* en_u14, uint8_t* en_u13, uint8_t* en_u12, uint8_t* en_u11, uint8_t* en_u10, uint8_t* en_u9, uint8_t* en_u8, uint8_t* en_u7, uint8_t* en_u6, uint8_t* en_u5, uint8_t* en_u4, uint8_t* en_u3, uint8_t* en_u2, uint8_t* en_u1, uint8_t* en_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);

	*en_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*en_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*en_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*en_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*en_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*en_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*en_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*en_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*en_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*en_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*en_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*en_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*en_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*en_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*en_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*en_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*en_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*en_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*en_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*en_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*en_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*en_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*en_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*en_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*en_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*en_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*en_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*en_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*en_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*en_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*en_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*en_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_d_15_setf(uint8_t end15)
{
	ASSERT_ERR((((uint32_t)end15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)end15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_d_14_setf(uint8_t end14)
{
	ASSERT_ERR((((uint32_t)end14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)end14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_d_13_setf(uint8_t end13)
{
	ASSERT_ERR((((uint32_t)end13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)end13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_d_12_setf(uint8_t end12)
{
	ASSERT_ERR((((uint32_t)end12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)end12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_d_11_setf(uint8_t end11)
{
	ASSERT_ERR((((uint32_t)end11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)end11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_d_10_setf(uint8_t end10)
{
	ASSERT_ERR((((uint32_t)end10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)end10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_d_9_setf(uint8_t end9)
{
	ASSERT_ERR((((uint32_t)end9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)end9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_d_8_setf(uint8_t end8)
{
	ASSERT_ERR((((uint32_t)end8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)end8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_d_7_setf(uint8_t end7)
{
	ASSERT_ERR((((uint32_t)end7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)end7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_d_6_setf(uint8_t end6)
{
	ASSERT_ERR((((uint32_t)end6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)end6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_d_5_setf(uint8_t end5)
{
	ASSERT_ERR((((uint32_t)end5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)end5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_d_4_setf(uint8_t end4)
{
	ASSERT_ERR((((uint32_t)end4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)end4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_d_3_setf(uint8_t end3)
{
	ASSERT_ERR((((uint32_t)end3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)end3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_d_2_setf(uint8_t end2)
{
	ASSERT_ERR((((uint32_t)end2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)end2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_d_1_setf(uint8_t end1)
{
	ASSERT_ERR((((uint32_t)end1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)end1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_d_0_setf(uint8_t end0)
{
	ASSERT_ERR((((uint32_t)end0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)end0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_u_15_setf(uint8_t enu15)
{
	ASSERT_ERR((((uint32_t)enu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)enu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_u_14_setf(uint8_t enu14)
{
	ASSERT_ERR((((uint32_t)enu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)enu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_u_13_setf(uint8_t enu13)
{
	ASSERT_ERR((((uint32_t)enu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)enu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_u_12_setf(uint8_t enu12)
{
	ASSERT_ERR((((uint32_t)enu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)enu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_u_11_setf(uint8_t enu11)
{
	ASSERT_ERR((((uint32_t)enu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)enu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_u_10_setf(uint8_t enu10)
{
	ASSERT_ERR((((uint32_t)enu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)enu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_u_9_setf(uint8_t enu9)
{
	ASSERT_ERR((((uint32_t)enu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)enu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_u_8_setf(uint8_t enu8)
{
	ASSERT_ERR((((uint32_t)enu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)enu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_u_7_setf(uint8_t enu7)
{
	ASSERT_ERR((((uint32_t)enu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)enu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_u_6_setf(uint8_t enu6)
{
	ASSERT_ERR((((uint32_t)enu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)enu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_u_5_setf(uint8_t enu5)
{
	ASSERT_ERR((((uint32_t)enu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)enu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_u_4_setf(uint8_t enu4)
{
	ASSERT_ERR((((uint32_t)enu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)enu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_u_3_setf(uint8_t enu3)
{
	ASSERT_ERR((((uint32_t)enu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)enu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_u_2_setf(uint8_t enu2)
{
	ASSERT_ERR((((uint32_t)enu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)enu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_u_1_setf(uint8_t enu1)
{
	ASSERT_ERR((((uint32_t)enu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)enu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_en_en_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_umac_en_en_u_0_setf(uint8_t enu0)
{
	ASSERT_ERR((((uint32_t)enu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_EN_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)enu0 <<0));
}

/**
 * @brief PCIEW_CH_CLEAN_INT_SMAC_EN register definition
 *  SMAC channel clean interrupt enable register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    EN_D15                    0              
 *    30    EN_D14                    0              
 *    29    EN_D13                    0              
 *    28    EN_D12                    0              
 *    27    EN_D11                    0              
 *    26    EN_D10                    0              
 *    25    EN_D9                     0              
 *    24    EN_D8                     0              
 *    23    EN_D7                     0              
 *    22    EN_D6                     0              
 *    21    EN_D5                     0              
 *    20    EN_D4                     0              
 *    19    EN_D3                     0              
 *    18    EN_D2                     0              
 *    17    EN_D1                     0              
 *    16    EN_D0                     0              
 *    15    EN_U15                    0              
 *    14    EN_U14                    0              
 *    13    EN_U13                    0              
 *    12    EN_U12                    0              
 *    11    EN_U11                    0              
 *    10    EN_U10                    0              
 *    09    EN_U9                     0              
 *    08    EN_U8                     0              
 *    07    EN_U7                     0              
 *    06    EN_U6                     0              
 *    05    EN_U5                     0              
 *    04    EN_U4                     0              
 *    03    EN_U3                     0              
 *    02    EN_U2                     0              
 *    01    EN_U1                     0              
 *    00    EN_U0                     0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002E8)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_OFFSET      0x000002E8
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_INDEX       0x000000BA
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_ch_clean_int_smac_en_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
}

__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_15_POS    31
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_14_POS    30
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_13_POS    29
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_12_POS    28
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_11_POS    27
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_10_POS    26
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_9_POS    25
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_8_POS    24
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_7_POS    23
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_6_POS    22
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_5_POS    21
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_4_POS    20
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_3_POS    19
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_2_POS    18
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_1_POS    17
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_0_POS    16
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_15_POS    15
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_14_POS    14
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_13_POS    13
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_12_POS    12
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_11_POS    11
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_10_POS    10
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_9_POS    9
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_8_POS    8
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_7_POS    7
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_6_POS    6
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_5_POS    5
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_4_POS    4
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_3_POS    3
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_2_POS    2
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_1_POS    1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_0_POS    0

#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_15_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_14_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_13_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_12_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_11_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_10_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_9_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_8_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_7_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_6_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_5_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_4_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_3_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_2_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_1_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_D_0_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_15_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_14_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_13_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_12_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_11_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_10_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_9_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_8_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_7_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_6_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_5_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_4_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_3_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_2_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_1_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_EN_U_0_RST    0x0

__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_pack(uint8_t en_d15, uint8_t en_d14, uint8_t en_d13, uint8_t en_d12, uint8_t en_d11, uint8_t en_d10, uint8_t en_d9, uint8_t en_d8, uint8_t en_d7, uint8_t en_d6, uint8_t en_d5, uint8_t en_d4, uint8_t en_d3, uint8_t en_d2, uint8_t en_d1, uint8_t en_d0, uint8_t en_u15, uint8_t en_u14, uint8_t en_u13, uint8_t en_u12, uint8_t en_u11, uint8_t en_u10, uint8_t en_u9, uint8_t en_u8, uint8_t en_u7, uint8_t en_u6, uint8_t en_u5, uint8_t en_u4, uint8_t en_u3, uint8_t en_u2, uint8_t en_u1, uint8_t en_u0)
{
	ASSERT_ERR((((uint32_t)en_d15 << 31) & ~((uint32_t)0x80000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d14 << 30) & ~((uint32_t)0x40000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d13 << 29) & ~((uint32_t)0x20000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d12 << 28) & ~((uint32_t)0x10000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d11 << 27) & ~((uint32_t)0x08000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d10 << 26) & ~((uint32_t)0x04000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d9 << 25) & ~((uint32_t)0x02000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d8 << 24) & ~((uint32_t)0x01000000)) == 0);
	ASSERT_ERR((((uint32_t)en_d7 << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)en_d6 << 22) & ~((uint32_t)0x00400000)) == 0);
	ASSERT_ERR((((uint32_t)en_d5 << 21) & ~((uint32_t)0x00200000)) == 0);
	ASSERT_ERR((((uint32_t)en_d4 << 20) & ~((uint32_t)0x00100000)) == 0);
	ASSERT_ERR((((uint32_t)en_d3 << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)en_d2 << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)en_d1 << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)en_d0 << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)en_u15 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)en_u14 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)en_u13 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)en_u12 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)en_u11 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)en_u10 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)en_u9 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)en_u8 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)en_u7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)en_u6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)en_u5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)en_u4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)en_u3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)en_u2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)en_u1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)en_u0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR,  ((uint32_t)en_d15 << 31) |((uint32_t)en_d14 << 30) |((uint32_t)en_d13 << 29) |((uint32_t)en_d12 << 28) |((uint32_t)en_d11 << 27) |((uint32_t)en_d10 << 26) |((uint32_t)en_d9 << 25) |((uint32_t)en_d8 << 24) |((uint32_t)en_d7 << 23) |((uint32_t)en_d6 << 22) |((uint32_t)en_d5 << 21) |((uint32_t)en_d4 << 20) |((uint32_t)en_d3 << 19) |((uint32_t)en_d2 << 18) |((uint32_t)en_d1 << 17) |((uint32_t)en_d0 << 16) |((uint32_t)en_u15 << 15) |((uint32_t)en_u14 << 14) |((uint32_t)en_u13 << 13) |((uint32_t)en_u12 << 12) |((uint32_t)en_u11 << 11) |((uint32_t)en_u10 << 10) |((uint32_t)en_u9 << 9) |((uint32_t)en_u8 << 8) |((uint32_t)en_u7 << 7) |((uint32_t)en_u6 << 6) |((uint32_t)en_u5 << 5) |((uint32_t)en_u4 << 4) |((uint32_t)en_u3 << 3) |((uint32_t)en_u2 << 2) |((uint32_t)en_u1 << 1) |((uint32_t)en_u0 << 0));
}

__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_unpack(uint8_t* en_d15, uint8_t* en_d14, uint8_t* en_d13, uint8_t* en_d12, uint8_t* en_d11, uint8_t* en_d10, uint8_t* en_d9, uint8_t* en_d8, uint8_t* en_d7, uint8_t* en_d6, uint8_t* en_d5, uint8_t* en_d4, uint8_t* en_d3, uint8_t* en_d2, uint8_t* en_d1, uint8_t* en_d0, uint8_t* en_u15, uint8_t* en_u14, uint8_t* en_u13, uint8_t* en_u12, uint8_t* en_u11, uint8_t* en_u10, uint8_t* en_u9, uint8_t* en_u8, uint8_t* en_u7, uint8_t* en_u6, uint8_t* en_u5, uint8_t* en_u4, uint8_t* en_u3, uint8_t* en_u2, uint8_t* en_u1, uint8_t* en_u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);

	*en_d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*en_d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*en_d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*en_d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*en_d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*en_d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*en_d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*en_d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*en_d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*en_d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*en_d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*en_d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*en_d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*en_d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*en_d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*en_d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*en_u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*en_u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*en_u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*en_u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*en_u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*en_u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*en_u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*en_u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*en_u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*en_u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*en_u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*en_u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*en_u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*en_u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*en_u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*en_u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_d_15_setf(uint8_t end15)
{
	ASSERT_ERR((((uint32_t)end15 << 31) & ~((uint32_t)0x80000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x80000000)) | ((uint32_t)end15 <<31));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_d_14_setf(uint8_t end14)
{
	ASSERT_ERR((((uint32_t)end14 << 30) & ~((uint32_t)0x40000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x40000000)) | ((uint32_t)end14 <<30));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_d_13_setf(uint8_t end13)
{
	ASSERT_ERR((((uint32_t)end13 << 29) & ~((uint32_t)0x20000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x20000000)) | ((uint32_t)end13 <<29));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_d_12_setf(uint8_t end12)
{
	ASSERT_ERR((((uint32_t)end12 << 28) & ~((uint32_t)0x10000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x10000000)) | ((uint32_t)end12 <<28));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_d_11_setf(uint8_t end11)
{
	ASSERT_ERR((((uint32_t)end11 << 27) & ~((uint32_t)0x08000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x08000000)) | ((uint32_t)end11 <<27));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_d_10_setf(uint8_t end10)
{
	ASSERT_ERR((((uint32_t)end10 << 26) & ~((uint32_t)0x04000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x04000000)) | ((uint32_t)end10 <<26));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_d_9_setf(uint8_t end9)
{
	ASSERT_ERR((((uint32_t)end9 << 25) & ~((uint32_t)0x02000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x02000000)) | ((uint32_t)end9 <<25));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_d_8_setf(uint8_t end8)
{
	ASSERT_ERR((((uint32_t)end8 << 24) & ~((uint32_t)0x01000000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x01000000)) | ((uint32_t)end8 <<24));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_d_7_setf(uint8_t end7)
{
	ASSERT_ERR((((uint32_t)end7 << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)end7 <<23));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_d_6_setf(uint8_t end6)
{
	ASSERT_ERR((((uint32_t)end6 << 22) & ~((uint32_t)0x00400000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00400000)) | ((uint32_t)end6 <<22));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_d_5_setf(uint8_t end5)
{
	ASSERT_ERR((((uint32_t)end5 << 21) & ~((uint32_t)0x00200000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00200000)) | ((uint32_t)end5 <<21));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_d_4_setf(uint8_t end4)
{
	ASSERT_ERR((((uint32_t)end4 << 20) & ~((uint32_t)0x00100000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00100000)) | ((uint32_t)end4 <<20));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_d_3_setf(uint8_t end3)
{
	ASSERT_ERR((((uint32_t)end3 << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)end3 <<19));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_d_2_setf(uint8_t end2)
{
	ASSERT_ERR((((uint32_t)end2 << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)end2 <<18));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_d_1_setf(uint8_t end1)
{
	ASSERT_ERR((((uint32_t)end1 << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)end1 <<17));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_d_0_setf(uint8_t end0)
{
	ASSERT_ERR((((uint32_t)end0 << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)end0 <<16));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_u_15_setf(uint8_t enu15)
{
	ASSERT_ERR((((uint32_t)enu15 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)enu15 <<15));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_u_14_setf(uint8_t enu14)
{
	ASSERT_ERR((((uint32_t)enu14 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)enu14 <<14));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_u_13_setf(uint8_t enu13)
{
	ASSERT_ERR((((uint32_t)enu13 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)enu13 <<13));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_u_12_setf(uint8_t enu12)
{
	ASSERT_ERR((((uint32_t)enu12 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)enu12 <<12));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_u_11_setf(uint8_t enu11)
{
	ASSERT_ERR((((uint32_t)enu11 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)enu11 <<11));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_u_10_setf(uint8_t enu10)
{
	ASSERT_ERR((((uint32_t)enu10 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)enu10 <<10));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_u_9_setf(uint8_t enu9)
{
	ASSERT_ERR((((uint32_t)enu9 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)enu9 <<9));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_u_8_setf(uint8_t enu8)
{
	ASSERT_ERR((((uint32_t)enu8 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)enu8 <<8));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_u_7_setf(uint8_t enu7)
{
	ASSERT_ERR((((uint32_t)enu7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)enu7 <<7));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_u_6_setf(uint8_t enu6)
{
	ASSERT_ERR((((uint32_t)enu6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)enu6 <<6));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_u_5_setf(uint8_t enu5)
{
	ASSERT_ERR((((uint32_t)enu5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)enu5 <<5));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_u_4_setf(uint8_t enu4)
{
	ASSERT_ERR((((uint32_t)enu4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)enu4 <<4));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_u_3_setf(uint8_t enu3)
{
	ASSERT_ERR((((uint32_t)enu3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)enu3 <<3));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_u_2_setf(uint8_t enu2)
{
	ASSERT_ERR((((uint32_t)enu2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)enu2 <<2));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_u_1_setf(uint8_t enu1)
{
	ASSERT_ERR((((uint32_t)enu1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)enu1 <<1));
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_en_en_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void pcie_wrap_pciew_ch_clean_int_smac_en_en_u_0_setf(uint8_t enu0)
{
	ASSERT_ERR((((uint32_t)enu0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR, (REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_EN_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)enu0 <<0));
}

/**
 * @brief PCIEW_CH_CLEAN_INT_RAWSTAT register definition
 *  Channel clean interrupt raw status register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    D15                       1              
 *    30    D14                       1              
 *    29    D13                       1              
 *    28    D12                       1              
 *    27    D11                       1              
 *    26    D10                       1              
 *    25    D9                        1              
 *    24    D8                        1              
 *    23    D7                        1              
 *    22    D6                        1              
 *    21    D5                        1              
 *    20    D4                        1              
 *    19    D3                        1              
 *    18    D2                        1              
 *    17    D1                        1              
 *    16    D0                        1              
 *    15    U15                       1              
 *    14    U14                       1              
 *    13    U13                       1              
 *    12    U12                       1              
 *    11    U11                       1              
 *    10    U10                       1              
 *    09    U9                        1              
 *    08    U8                        1              
 *    07    U7                        1              
 *    06    U6                        1              
 *    05    U5                        1              
 *    04    U4                        1              
 *    03    U3                        1              
 *    02    U2                        1              
 *    01    U1                        1              
 *    00    U0                        1              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002EC)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_OFFSET      0x000002EC
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_INDEX       0x000000BB
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_RESET       0xFFFFFFFF

__INLINE uint32_t  pcie_wrap_pciew_ch_clean_int_rawstat_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_15_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_15_POS    31
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_14_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_14_POS    30
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_13_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_13_POS    29
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_12_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_12_POS    28
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_11_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_11_POS    27
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_10_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_10_POS    26
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_9_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_9_POS    25
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_8_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_8_POS    24
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_7_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_7_POS    23
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_6_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_6_POS    22
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_5_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_5_POS    21
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_4_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_4_POS    20
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_3_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_3_POS    19
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_2_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_2_POS    18
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_1_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_1_POS    17
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_0_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_0_POS    16
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_15_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_15_POS    15
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_14_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_14_POS    14
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_13_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_13_POS    13
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_12_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_12_POS    12
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_11_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_11_POS    11
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_10_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_10_POS    10
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_9_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_9_POS    9
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_8_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_8_POS    8
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_7_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_7_POS    7
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_6_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_6_POS    6
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_5_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_5_POS    5
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_4_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_4_POS    4
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_3_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_3_POS    3
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_2_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_2_POS    2
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_1_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_1_POS    1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_0_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_0_POS    0

#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_15_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_14_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_13_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_12_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_11_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_10_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_9_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_8_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_7_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_6_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_5_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_4_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_3_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_2_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_1_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_D_0_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_15_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_14_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_13_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_12_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_11_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_10_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_9_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_8_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_7_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_6_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_5_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_4_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_3_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_2_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_1_RST    0x1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_U_0_RST    0x1

__INLINE void pcie_wrap_pciew_ch_clean_int_rawstat_unpack(uint8_t* d15, uint8_t* d14, uint8_t* d13, uint8_t* d12, uint8_t* d11, uint8_t* d10, uint8_t* d9, uint8_t* d8, uint8_t* d7, uint8_t* d6, uint8_t* d5, uint8_t* d4, uint8_t* d3, uint8_t* d2, uint8_t* d1, uint8_t* d0, uint8_t* u15, uint8_t* u14, uint8_t* u13, uint8_t* u12, uint8_t* u11, uint8_t* u10, uint8_t* u9, uint8_t* u8, uint8_t* u7, uint8_t* u6, uint8_t* u5, uint8_t* u4, uint8_t* u3, uint8_t* u2, uint8_t* u1, uint8_t* u0)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);

	*d15 = (localVal & ((uint32_t)0x80000000)) >>  31;
	*d14 = (localVal & ((uint32_t)0x40000000)) >>  30;
	*d13 = (localVal & ((uint32_t)0x20000000)) >>  29;
	*d12 = (localVal & ((uint32_t)0x10000000)) >>  28;
	*d11 = (localVal & ((uint32_t)0x08000000)) >>  27;
	*d10 = (localVal & ((uint32_t)0x04000000)) >>  26;
	*d9 = (localVal & ((uint32_t)0x02000000)) >>  25;
	*d8 = (localVal & ((uint32_t)0x01000000)) >>  24;
	*d7 = (localVal & ((uint32_t)0x00800000)) >>  23;
	*d6 = (localVal & ((uint32_t)0x00400000)) >>  22;
	*d5 = (localVal & ((uint32_t)0x00200000)) >>  21;
	*d4 = (localVal & ((uint32_t)0x00100000)) >>  20;
	*d3 = (localVal & ((uint32_t)0x00080000)) >>  19;
	*d2 = (localVal & ((uint32_t)0x00040000)) >>  18;
	*d1 = (localVal & ((uint32_t)0x00020000)) >>  17;
	*d0 = (localVal & ((uint32_t)0x00010000)) >>  16;
	*u15 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*u14 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*u13 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*u12 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*u11 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*u10 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*u9 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*u8 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*u7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*u6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*u5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*u4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*u3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*u2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*u1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*u0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_d_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_d_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_d_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_d_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_d_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_d_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_d_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_d_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_d_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_d_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_d_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_d_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_d_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_d_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_d_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_d_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_u_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_u_14_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_u_13_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_u_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_u_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_u_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_u_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_u_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_u_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_u_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_u_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_u_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_u_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_u_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_u_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_rawstat_u_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_RAWSTAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief PCIEW_CH_CLEAN_INT_LMAC_STAT register definition
 *  LMAC channel clean interrupt status register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    D16_CLEAN                 0              
 *    30    D15_CLEAN                 0              
 *    29    D14_CLEAN                 0              
 *    28    D13_CLEAN                 0              
 *    27    D12_CLEAN                 0              
 *    26    D11_CLEAN                 0              
 *    25    D10_CLEAN                 0              
 *    24    D9_CLEAN                  0              
 *    23    D7_CLEAN                  0              
 *    22    D6_CLEAN                  0              
 *    21    D5_CLEAN                  0              
 *    20    D4_CLEAN                  0              
 *    19    D3_CLEAN                  0              
 *    18    D2_CLEAN                  0              
 *    17    D1_CLEAN                  0              
 *    16    D0_CLEAN                  0              
 *    15    U15_CLEAN                 0              
 *    14    U14_CLEAN                 0              
 *    13    U13_CLEAN                 0              
 *    12    U12_CLEAN                 0              
 *    11    U11_CLEAN                 0              
 *    10    U10_CLEAN                 0              
 *    09    U9_CLEAN                  0              
 *    08    U8_CLEAN                  0              
 *    07    U7_CLEAN                  0              
 *    06    U6_CLEAN                  0              
 *    05    U5_CLEAN                  0              
 *    04    U4_CLEAN                  0              
 *    03    U3_CLEAN                  0              
 *    02    U2_CLEAN                  0              
 *    01    U1_CLEAN                  0              
 *    00    U0_CLEAN                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002F0)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_OFFSET      0x000002F0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_INDEX       0x000000BC
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_ch_clean_int_lmac_stat_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_16_CLEAN_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_16_CLEAN_POS    31
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_15_CLEAN_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_15_CLEAN_POS    30
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_14_CLEAN_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_14_CLEAN_POS    29
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_13_CLEAN_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_13_CLEAN_POS    28
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_12_CLEAN_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_12_CLEAN_POS    27
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_11_CLEAN_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_11_CLEAN_POS    26
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_10_CLEAN_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_10_CLEAN_POS    25
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_9_CLEAN_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_9_CLEAN_POS    24
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_7_CLEAN_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_7_CLEAN_POS    23
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_6_CLEAN_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_6_CLEAN_POS    22
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_5_CLEAN_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_5_CLEAN_POS    21
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_4_CLEAN_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_4_CLEAN_POS    20
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_3_CLEAN_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_3_CLEAN_POS    19
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_2_CLEAN_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_2_CLEAN_POS    18
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_1_CLEAN_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_1_CLEAN_POS    17
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_0_CLEAN_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_0_CLEAN_POS    16
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_15_CLEAN_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_15_CLEAN_POS    15
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_14_CLEAN_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_14_CLEAN_POS    14
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_13_CLEAN_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_13_CLEAN_POS    13
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_12_CLEAN_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_12_CLEAN_POS    12
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_11_CLEAN_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_11_CLEAN_POS    11
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_10_CLEAN_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_10_CLEAN_POS    10
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_9_CLEAN_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_9_CLEAN_POS    9
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_8_CLEAN_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_8_CLEAN_POS    8
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_7_CLEAN_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_7_CLEAN_POS    7
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_6_CLEAN_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_6_CLEAN_POS    6
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_5_CLEAN_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_5_CLEAN_POS    5
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_4_CLEAN_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_4_CLEAN_POS    4
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_3_CLEAN_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_3_CLEAN_POS    3
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_2_CLEAN_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_2_CLEAN_POS    2
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_1_CLEAN_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_1_CLEAN_POS    1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_0_CLEAN_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_0_CLEAN_POS    0

#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_16_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_15_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_14_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_13_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_12_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_11_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_10_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_9_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_7_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_6_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_5_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_4_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_3_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_2_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_1_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_D_0_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_15_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_14_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_13_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_12_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_11_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_10_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_9_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_8_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_7_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_6_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_5_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_4_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_3_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_2_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_1_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_U_0_CLEAN_RST    0x0

__INLINE void pcie_wrap_pciew_ch_clean_int_lmac_stat_unpack(uint8_t* d16_clean, uint8_t* d15_clean, uint8_t* d14_clean, uint8_t* d13_clean, uint8_t* d12_clean, uint8_t* d11_clean, uint8_t* d10_clean, uint8_t* d9_clean, uint8_t* d7_clean, uint8_t* d6_clean, uint8_t* d5_clean, uint8_t* d4_clean, uint8_t* d3_clean, uint8_t* d2_clean, uint8_t* d1_clean, uint8_t* d0_clean, uint8_t* u15_clean, uint8_t* u14_clean, uint8_t* u13_clean, uint8_t* u12_clean, uint8_t* u11_clean, uint8_t* u10_clean, uint8_t* u9_clean, uint8_t* u8_clean, uint8_t* u7_clean, uint8_t* u6_clean, uint8_t* u5_clean, uint8_t* u4_clean, uint8_t* u3_clean, uint8_t* u2_clean, uint8_t* u1_clean, uint8_t* u0_clean)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);

	*d16_clean = (localVal & ((uint32_t)0x80000000)) >>  31;
	*d15_clean = (localVal & ((uint32_t)0x40000000)) >>  30;
	*d14_clean = (localVal & ((uint32_t)0x20000000)) >>  29;
	*d13_clean = (localVal & ((uint32_t)0x10000000)) >>  28;
	*d12_clean = (localVal & ((uint32_t)0x08000000)) >>  27;
	*d11_clean = (localVal & ((uint32_t)0x04000000)) >>  26;
	*d10_clean = (localVal & ((uint32_t)0x02000000)) >>  25;
	*d9_clean = (localVal & ((uint32_t)0x01000000)) >>  24;
	*d7_clean = (localVal & ((uint32_t)0x00800000)) >>  23;
	*d6_clean = (localVal & ((uint32_t)0x00400000)) >>  22;
	*d5_clean = (localVal & ((uint32_t)0x00200000)) >>  21;
	*d4_clean = (localVal & ((uint32_t)0x00100000)) >>  20;
	*d3_clean = (localVal & ((uint32_t)0x00080000)) >>  19;
	*d2_clean = (localVal & ((uint32_t)0x00040000)) >>  18;
	*d1_clean = (localVal & ((uint32_t)0x00020000)) >>  17;
	*d0_clean = (localVal & ((uint32_t)0x00010000)) >>  16;
	*u15_clean = (localVal & ((uint32_t)0x00008000)) >>  15;
	*u14_clean = (localVal & ((uint32_t)0x00004000)) >>  14;
	*u13_clean = (localVal & ((uint32_t)0x00002000)) >>  13;
	*u12_clean = (localVal & ((uint32_t)0x00001000)) >>  12;
	*u11_clean = (localVal & ((uint32_t)0x00000800)) >>  11;
	*u10_clean = (localVal & ((uint32_t)0x00000400)) >>  10;
	*u9_clean = (localVal & ((uint32_t)0x00000200)) >>  9;
	*u8_clean = (localVal & ((uint32_t)0x00000100)) >>  8;
	*u7_clean = (localVal & ((uint32_t)0x00000080)) >>  7;
	*u6_clean = (localVal & ((uint32_t)0x00000040)) >>  6;
	*u5_clean = (localVal & ((uint32_t)0x00000020)) >>  5;
	*u4_clean = (localVal & ((uint32_t)0x00000010)) >>  4;
	*u3_clean = (localVal & ((uint32_t)0x00000008)) >>  3;
	*u2_clean = (localVal & ((uint32_t)0x00000004)) >>  2;
	*u1_clean = (localVal & ((uint32_t)0x00000002)) >>  1;
	*u0_clean = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_d_16_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_d_15_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_d_14_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_d_13_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_d_12_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_d_11_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_d_10_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_d_9_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_d_7_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_d_6_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_d_5_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_d_4_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_d_3_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_d_2_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_d_1_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_d_0_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_u_15_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_u_14_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_u_13_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_u_12_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_u_11_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_u_10_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_u_9_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_u_8_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_u_7_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_u_6_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_u_5_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_u_4_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_u_3_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_u_2_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_u_1_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_lmac_stat_u_0_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_LMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief PCIEW_CH_CLEAN_INT_UMAC_STAT register definition
 *  UMAC channel clean interrupt status register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    D15_CLEAN                 0              
 *    30    D14_CLEAN                 0              
 *    29    D13_CLEAN                 0              
 *    28    D12_CLEAN                 0              
 *    27    D11_CLEAN                 0              
 *    26    D10_CLEAN                 0              
 *    25    D9_CLEAN                  0              
 *    24    D8_CLEAN                  0              
 *    23    D7_CLEAN                  0              
 *    22    D6_CLEAN                  0              
 *    21    D5_CLEAN                  0              
 *    20    D4_CLEAN                  0              
 *    19    D3_CLEAN                  0              
 *    18    D2_CLEAN                  0              
 *    17    D1_CLEAN                  0              
 *    16    D0_CLEAN                  0              
 *    15    U15_CLEAN                 0              
 *    14    U14_CLEAN                 0              
 *    13    U13_CLEAN                 0              
 *    12    U12_CLEAN                 0              
 *    11    U11_CLEAN                 0              
 *    10    U10_CLEAN                 0              
 *    09    U9_CLEAN                  0              
 *    08    U8_CLEAN                  0              
 *    07    U7_CLEAN                  0              
 *    06    U6_CLEAN                  0              
 *    05    U5_CLEAN                  0              
 *    04    U4_CLEAN                  0              
 *    03    U3_CLEAN                  0              
 *    02    U2_CLEAN                  0              
 *    01    U1_CLEAN                  0              
 *    00    U0_CLEAN                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002F4)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_OFFSET      0x000002F4
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_INDEX       0x000000BD
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_ch_clean_int_umac_stat_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_15_CLEAN_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_15_CLEAN_POS    31
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_14_CLEAN_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_14_CLEAN_POS    30
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_13_CLEAN_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_13_CLEAN_POS    29
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_12_CLEAN_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_12_CLEAN_POS    28
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_11_CLEAN_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_11_CLEAN_POS    27
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_10_CLEAN_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_10_CLEAN_POS    26
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_9_CLEAN_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_9_CLEAN_POS    25
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_8_CLEAN_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_8_CLEAN_POS    24
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_7_CLEAN_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_7_CLEAN_POS    23
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_6_CLEAN_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_6_CLEAN_POS    22
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_5_CLEAN_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_5_CLEAN_POS    21
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_4_CLEAN_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_4_CLEAN_POS    20
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_3_CLEAN_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_3_CLEAN_POS    19
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_2_CLEAN_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_2_CLEAN_POS    18
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_1_CLEAN_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_1_CLEAN_POS    17
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_0_CLEAN_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_0_CLEAN_POS    16
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_15_CLEAN_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_15_CLEAN_POS    15
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_14_CLEAN_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_14_CLEAN_POS    14
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_13_CLEAN_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_13_CLEAN_POS    13
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_12_CLEAN_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_12_CLEAN_POS    12
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_11_CLEAN_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_11_CLEAN_POS    11
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_10_CLEAN_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_10_CLEAN_POS    10
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_9_CLEAN_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_9_CLEAN_POS    9
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_8_CLEAN_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_8_CLEAN_POS    8
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_7_CLEAN_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_7_CLEAN_POS    7
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_6_CLEAN_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_6_CLEAN_POS    6
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_5_CLEAN_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_5_CLEAN_POS    5
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_4_CLEAN_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_4_CLEAN_POS    4
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_3_CLEAN_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_3_CLEAN_POS    3
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_2_CLEAN_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_2_CLEAN_POS    2
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_1_CLEAN_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_1_CLEAN_POS    1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_0_CLEAN_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_0_CLEAN_POS    0

#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_15_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_14_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_13_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_12_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_11_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_10_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_9_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_8_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_7_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_6_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_5_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_4_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_3_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_2_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_1_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_D_0_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_15_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_14_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_13_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_12_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_11_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_10_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_9_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_8_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_7_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_6_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_5_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_4_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_3_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_2_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_1_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_U_0_CLEAN_RST    0x0

__INLINE void pcie_wrap_pciew_ch_clean_int_umac_stat_unpack(uint8_t* d15_clean, uint8_t* d14_clean, uint8_t* d13_clean, uint8_t* d12_clean, uint8_t* d11_clean, uint8_t* d10_clean, uint8_t* d9_clean, uint8_t* d8_clean, uint8_t* d7_clean, uint8_t* d6_clean, uint8_t* d5_clean, uint8_t* d4_clean, uint8_t* d3_clean, uint8_t* d2_clean, uint8_t* d1_clean, uint8_t* d0_clean, uint8_t* u15_clean, uint8_t* u14_clean, uint8_t* u13_clean, uint8_t* u12_clean, uint8_t* u11_clean, uint8_t* u10_clean, uint8_t* u9_clean, uint8_t* u8_clean, uint8_t* u7_clean, uint8_t* u6_clean, uint8_t* u5_clean, uint8_t* u4_clean, uint8_t* u3_clean, uint8_t* u2_clean, uint8_t* u1_clean, uint8_t* u0_clean)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);

	*d15_clean = (localVal & ((uint32_t)0x80000000)) >>  31;
	*d14_clean = (localVal & ((uint32_t)0x40000000)) >>  30;
	*d13_clean = (localVal & ((uint32_t)0x20000000)) >>  29;
	*d12_clean = (localVal & ((uint32_t)0x10000000)) >>  28;
	*d11_clean = (localVal & ((uint32_t)0x08000000)) >>  27;
	*d10_clean = (localVal & ((uint32_t)0x04000000)) >>  26;
	*d9_clean = (localVal & ((uint32_t)0x02000000)) >>  25;
	*d8_clean = (localVal & ((uint32_t)0x01000000)) >>  24;
	*d7_clean = (localVal & ((uint32_t)0x00800000)) >>  23;
	*d6_clean = (localVal & ((uint32_t)0x00400000)) >>  22;
	*d5_clean = (localVal & ((uint32_t)0x00200000)) >>  21;
	*d4_clean = (localVal & ((uint32_t)0x00100000)) >>  20;
	*d3_clean = (localVal & ((uint32_t)0x00080000)) >>  19;
	*d2_clean = (localVal & ((uint32_t)0x00040000)) >>  18;
	*d1_clean = (localVal & ((uint32_t)0x00020000)) >>  17;
	*d0_clean = (localVal & ((uint32_t)0x00010000)) >>  16;
	*u15_clean = (localVal & ((uint32_t)0x00008000)) >>  15;
	*u14_clean = (localVal & ((uint32_t)0x00004000)) >>  14;
	*u13_clean = (localVal & ((uint32_t)0x00002000)) >>  13;
	*u12_clean = (localVal & ((uint32_t)0x00001000)) >>  12;
	*u11_clean = (localVal & ((uint32_t)0x00000800)) >>  11;
	*u10_clean = (localVal & ((uint32_t)0x00000400)) >>  10;
	*u9_clean = (localVal & ((uint32_t)0x00000200)) >>  9;
	*u8_clean = (localVal & ((uint32_t)0x00000100)) >>  8;
	*u7_clean = (localVal & ((uint32_t)0x00000080)) >>  7;
	*u6_clean = (localVal & ((uint32_t)0x00000040)) >>  6;
	*u5_clean = (localVal & ((uint32_t)0x00000020)) >>  5;
	*u4_clean = (localVal & ((uint32_t)0x00000010)) >>  4;
	*u3_clean = (localVal & ((uint32_t)0x00000008)) >>  3;
	*u2_clean = (localVal & ((uint32_t)0x00000004)) >>  2;
	*u1_clean = (localVal & ((uint32_t)0x00000002)) >>  1;
	*u0_clean = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_d_15_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_d_14_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_d_13_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_d_12_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_d_11_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_d_10_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_d_9_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_d_8_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_d_7_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_d_6_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_d_5_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_d_4_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_d_3_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_d_2_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_d_1_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_d_0_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_u_15_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_u_14_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_u_13_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_u_12_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_u_11_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_u_10_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_u_9_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_u_8_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_u_7_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_u_6_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_u_5_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_u_4_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_u_3_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_u_2_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_u_1_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_umac_stat_u_0_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_UMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief PCIEW_CH_CLEAN_INT_SMAC_STAT register definition
 *  SMAC channel clean interrupt status register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31    D15_CLEAN                 0              
 *    30    D14_CLEAN                 0              
 *    29    D13_CLEAN                 0              
 *    28    D12_CLEAN                 0              
 *    27    D11_CLEAN                 0              
 *    26    D10_CLEAN                 0              
 *    25    D9_CLEAN                  0              
 *    24    D8_CLEAN                  0              
 *    23    D7_CLEAN                  0              
 *    22    D6_CLEAN                  0              
 *    21    D5_CLEAN                  0              
 *    20    D4_CLEAN                  0              
 *    19    D3_CLEAN                  0              
 *    18    D2_CLEAN                  0              
 *    17    D1_CLEAN                  0              
 *    16    D0_CLEAN                  0              
 *    15    U15_CLEAN                 0              
 *    14    U14_CLEAN                 0              
 *    13    U13_CLEAN                 0              
 *    12    U12_CLEAN                 0              
 *    11    U11_CLEAN                 0              
 *    10    U10_CLEAN                 0              
 *    09    U9_CLEAN                  0              
 *    08    U8_CLEAN                  0              
 *    07    U7_CLEAN                  0              
 *    06    U6_CLEAN                  0              
 *    05    U5_CLEAN                  0              
 *    04    U4_CLEAN                  0              
 *    03    U3_CLEAN                  0              
 *    02    U2_CLEAN                  0              
 *    01    U1_CLEAN                  0              
 *    00    U0_CLEAN                  0              
 * </pre>
 */
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000002F8)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_OFFSET      0x000002F8
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_INDEX       0x000000BE
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_ch_clean_int_smac_stat_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
}

// field definitions
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_15_CLEAN_BIT    ((uint32_t)0x80000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_15_CLEAN_POS    31
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_14_CLEAN_BIT    ((uint32_t)0x40000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_14_CLEAN_POS    30
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_13_CLEAN_BIT    ((uint32_t)0x20000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_13_CLEAN_POS    29
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_12_CLEAN_BIT    ((uint32_t)0x10000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_12_CLEAN_POS    28
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_11_CLEAN_BIT    ((uint32_t)0x08000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_11_CLEAN_POS    27
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_10_CLEAN_BIT    ((uint32_t)0x04000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_10_CLEAN_POS    26
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_9_CLEAN_BIT    ((uint32_t)0x02000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_9_CLEAN_POS    25
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_8_CLEAN_BIT    ((uint32_t)0x01000000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_8_CLEAN_POS    24
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_7_CLEAN_BIT    ((uint32_t)0x00800000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_7_CLEAN_POS    23
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_6_CLEAN_BIT    ((uint32_t)0x00400000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_6_CLEAN_POS    22
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_5_CLEAN_BIT    ((uint32_t)0x00200000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_5_CLEAN_POS    21
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_4_CLEAN_BIT    ((uint32_t)0x00100000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_4_CLEAN_POS    20
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_3_CLEAN_BIT    ((uint32_t)0x00080000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_3_CLEAN_POS    19
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_2_CLEAN_BIT    ((uint32_t)0x00040000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_2_CLEAN_POS    18
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_1_CLEAN_BIT    ((uint32_t)0x00020000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_1_CLEAN_POS    17
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_0_CLEAN_BIT    ((uint32_t)0x00010000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_0_CLEAN_POS    16
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_15_CLEAN_BIT    ((uint32_t)0x00008000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_15_CLEAN_POS    15
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_14_CLEAN_BIT    ((uint32_t)0x00004000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_14_CLEAN_POS    14
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_13_CLEAN_BIT    ((uint32_t)0x00002000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_13_CLEAN_POS    13
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_12_CLEAN_BIT    ((uint32_t)0x00001000)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_12_CLEAN_POS    12
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_11_CLEAN_BIT    ((uint32_t)0x00000800)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_11_CLEAN_POS    11
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_10_CLEAN_BIT    ((uint32_t)0x00000400)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_10_CLEAN_POS    10
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_9_CLEAN_BIT    ((uint32_t)0x00000200)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_9_CLEAN_POS    9
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_8_CLEAN_BIT    ((uint32_t)0x00000100)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_8_CLEAN_POS    8
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_7_CLEAN_BIT    ((uint32_t)0x00000080)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_7_CLEAN_POS    7
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_6_CLEAN_BIT    ((uint32_t)0x00000040)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_6_CLEAN_POS    6
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_5_CLEAN_BIT    ((uint32_t)0x00000020)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_5_CLEAN_POS    5
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_4_CLEAN_BIT    ((uint32_t)0x00000010)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_4_CLEAN_POS    4
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_3_CLEAN_BIT    ((uint32_t)0x00000008)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_3_CLEAN_POS    3
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_2_CLEAN_BIT    ((uint32_t)0x00000004)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_2_CLEAN_POS    2
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_1_CLEAN_BIT    ((uint32_t)0x00000002)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_1_CLEAN_POS    1
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_0_CLEAN_BIT    ((uint32_t)0x00000001)
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_0_CLEAN_POS    0

#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_15_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_14_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_13_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_12_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_11_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_10_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_9_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_8_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_7_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_6_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_5_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_4_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_3_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_2_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_1_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_D_0_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_15_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_14_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_13_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_12_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_11_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_10_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_9_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_8_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_7_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_6_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_5_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_4_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_3_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_2_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_1_CLEAN_RST    0x0
#define PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_U_0_CLEAN_RST    0x0

__INLINE void pcie_wrap_pciew_ch_clean_int_smac_stat_unpack(uint8_t* d15_clean, uint8_t* d14_clean, uint8_t* d13_clean, uint8_t* d12_clean, uint8_t* d11_clean, uint8_t* d10_clean, uint8_t* d9_clean, uint8_t* d8_clean, uint8_t* d7_clean, uint8_t* d6_clean, uint8_t* d5_clean, uint8_t* d4_clean, uint8_t* d3_clean, uint8_t* d2_clean, uint8_t* d1_clean, uint8_t* d0_clean, uint8_t* u15_clean, uint8_t* u14_clean, uint8_t* u13_clean, uint8_t* u12_clean, uint8_t* u11_clean, uint8_t* u10_clean, uint8_t* u9_clean, uint8_t* u8_clean, uint8_t* u7_clean, uint8_t* u6_clean, uint8_t* u5_clean, uint8_t* u4_clean, uint8_t* u3_clean, uint8_t* u2_clean, uint8_t* u1_clean, uint8_t* u0_clean)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);

	*d15_clean = (localVal & ((uint32_t)0x80000000)) >>  31;
	*d14_clean = (localVal & ((uint32_t)0x40000000)) >>  30;
	*d13_clean = (localVal & ((uint32_t)0x20000000)) >>  29;
	*d12_clean = (localVal & ((uint32_t)0x10000000)) >>  28;
	*d11_clean = (localVal & ((uint32_t)0x08000000)) >>  27;
	*d10_clean = (localVal & ((uint32_t)0x04000000)) >>  26;
	*d9_clean = (localVal & ((uint32_t)0x02000000)) >>  25;
	*d8_clean = (localVal & ((uint32_t)0x01000000)) >>  24;
	*d7_clean = (localVal & ((uint32_t)0x00800000)) >>  23;
	*d6_clean = (localVal & ((uint32_t)0x00400000)) >>  22;
	*d5_clean = (localVal & ((uint32_t)0x00200000)) >>  21;
	*d4_clean = (localVal & ((uint32_t)0x00100000)) >>  20;
	*d3_clean = (localVal & ((uint32_t)0x00080000)) >>  19;
	*d2_clean = (localVal & ((uint32_t)0x00040000)) >>  18;
	*d1_clean = (localVal & ((uint32_t)0x00020000)) >>  17;
	*d0_clean = (localVal & ((uint32_t)0x00010000)) >>  16;
	*u15_clean = (localVal & ((uint32_t)0x00008000)) >>  15;
	*u14_clean = (localVal & ((uint32_t)0x00004000)) >>  14;
	*u13_clean = (localVal & ((uint32_t)0x00002000)) >>  13;
	*u12_clean = (localVal & ((uint32_t)0x00001000)) >>  12;
	*u11_clean = (localVal & ((uint32_t)0x00000800)) >>  11;
	*u10_clean = (localVal & ((uint32_t)0x00000400)) >>  10;
	*u9_clean = (localVal & ((uint32_t)0x00000200)) >>  9;
	*u8_clean = (localVal & ((uint32_t)0x00000100)) >>  8;
	*u7_clean = (localVal & ((uint32_t)0x00000080)) >>  7;
	*u6_clean = (localVal & ((uint32_t)0x00000040)) >>  6;
	*u5_clean = (localVal & ((uint32_t)0x00000020)) >>  5;
	*u4_clean = (localVal & ((uint32_t)0x00000010)) >>  4;
	*u3_clean = (localVal & ((uint32_t)0x00000008)) >>  3;
	*u2_clean = (localVal & ((uint32_t)0x00000004)) >>  2;
	*u1_clean = (localVal & ((uint32_t)0x00000002)) >>  1;
	*u0_clean = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_d_15_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x80000000)) >> 31);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_d_14_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x40000000)) >> 30);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_d_13_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x20000000)) >> 29);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_d_12_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x10000000)) >> 28);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_d_11_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x08000000)) >> 27);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_d_10_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x04000000)) >> 26);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_d_9_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x02000000)) >> 25);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_d_8_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x01000000)) >> 24);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_d_7_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_d_6_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00400000)) >> 22);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_d_5_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_d_4_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_d_3_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_d_2_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_d_1_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_d_0_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_u_15_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_u_14_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_u_13_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_u_12_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_u_11_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_u_10_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_u_9_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_u_8_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_u_7_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_u_6_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_u_5_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_u_4_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_u_3_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_u_2_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_u_1_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t pcie_wrap_pciew_ch_clean_int_smac_stat_u_0_clean_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CH_CLEAN_INT_SMAC_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief PCIEW_CLOCK_CNT register definition
 *  Clock cycle counter for throughput measurements register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_CLOCK_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000300)
#define PCIE_WRAP_PCIEW_CLOCK_CNT_OFFSET      0x00000300
#define PCIE_WRAP_PCIEW_CLOCK_CNT_INDEX       0x000000C0
#define PCIE_WRAP_PCIEW_CLOCK_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_clock_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_CLOCK_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_clock_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_CLOCK_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_CLOCK_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_CLOCK_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_CLOCK_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_CLOCK_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_clock_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_CLOCK_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_clock_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_CLOCK_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_M_1_WR_CNT register definition
 *  PCIe AHB M1 write transaction counter register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_M_1_WR_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000304)
#define PCIE_WRAP_PCIEW_M_1_WR_CNT_OFFSET      0x00000304
#define PCIE_WRAP_PCIEW_M_1_WR_CNT_INDEX       0x000000C1
#define PCIE_WRAP_PCIEW_M_1_WR_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_m_1_wr_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_M_1_WR_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_m_1_wr_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_M_1_WR_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_M_1_WR_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_M_1_WR_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_M_1_WR_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_M_1_WR_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_m_1_wr_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_M_1_WR_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_m_1_wr_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_M_1_WR_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_M_1_RD_CNT register definition
 *  PCIe AHB M1 read transaction counter register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_M_1_RD_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000310)
#define PCIE_WRAP_PCIEW_M_1_RD_CNT_OFFSET      0x00000310
#define PCIE_WRAP_PCIEW_M_1_RD_CNT_INDEX       0x000000C4
#define PCIE_WRAP_PCIEW_M_1_RD_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_m_1_rd_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_M_1_RD_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_m_1_rd_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_M_1_RD_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_M_1_RD_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_M_1_RD_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_M_1_RD_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_M_1_RD_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_m_1_rd_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_M_1_RD_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_m_1_rd_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_M_1_RD_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_LATENCY_WIN_CNT register definition
 *  Downlink latency measures counter register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_LATENCY_WIN_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000370)
#define PCIE_WRAP_PCIEW_D_LATENCY_WIN_CNT_OFFSET      0x00000370
#define PCIE_WRAP_PCIEW_D_LATENCY_WIN_CNT_INDEX       0x000000DC
#define PCIE_WRAP_PCIEW_D_LATENCY_WIN_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_latency_win_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_LATENCY_WIN_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_latency_win_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_LATENCY_WIN_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_LATENCY_WIN_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_LATENCY_WIN_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_LATENCY_WIN_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_LATENCY_WIN_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_latency_win_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_LATENCY_WIN_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_latency_win_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_LATENCY_WIN_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_MIN_LATENCY register definition
 *  Minimum Downlink latency value  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 MIN                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_MIN_LATENCY_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000374)
#define PCIE_WRAP_PCIEW_D_MIN_LATENCY_OFFSET      0x00000374
#define PCIE_WRAP_PCIEW_D_MIN_LATENCY_INDEX       0x000000DD
#define PCIE_WRAP_PCIEW_D_MIN_LATENCY_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_min_latency_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_MIN_LATENCY_ADDR);
}

__INLINE void pcie_wrap_pciew_d_min_latency_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_MIN_LATENCY_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_MIN_LATENCY_MIN_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_MIN_LATENCY_MIN_LSB    0
#define PCIE_WRAP_PCIEW_D_MIN_LATENCY_MIN_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_MIN_LATENCY_MIN_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_min_latency_min_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_MIN_LATENCY_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_min_latency_min_setf(uint32_t min)
{
	ASSERT_ERR((((uint32_t)min << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_MIN_LATENCY_ADDR, (uint32_t)min << 0);
}

/**
 * @brief PCIEW_D_MAX_LATENCY register definition
 *  Maximum Downlink latency value  register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 MAX                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_MAX_LATENCY_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000378)
#define PCIE_WRAP_PCIEW_D_MAX_LATENCY_OFFSET      0x00000378
#define PCIE_WRAP_PCIEW_D_MAX_LATENCY_INDEX       0x000000DE
#define PCIE_WRAP_PCIEW_D_MAX_LATENCY_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_max_latency_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_MAX_LATENCY_ADDR);
}

__INLINE void pcie_wrap_pciew_d_max_latency_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_MAX_LATENCY_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_MAX_LATENCY_MAX_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_MAX_LATENCY_MAX_LSB    0
#define PCIE_WRAP_PCIEW_D_MAX_LATENCY_MAX_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_MAX_LATENCY_MAX_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_max_latency_max_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_MAX_LATENCY_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_max_latency_max_setf(uint32_t max)
{
	ASSERT_ERR((((uint32_t)max << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_MAX_LATENCY_ADDR, (uint32_t)max << 0);
}

/**
 * @brief PCIEW_D_SUM_LATENCY register definition
 *  Sum of all downlink latency measures register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 SUM                       0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_SUM_LATENCY_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000037C)
#define PCIE_WRAP_PCIEW_D_SUM_LATENCY_OFFSET      0x0000037C
#define PCIE_WRAP_PCIEW_D_SUM_LATENCY_INDEX       0x000000DF
#define PCIE_WRAP_PCIEW_D_SUM_LATENCY_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_sum_latency_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_SUM_LATENCY_ADDR);
}

__INLINE void pcie_wrap_pciew_d_sum_latency_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_SUM_LATENCY_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_SUM_LATENCY_SUM_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_SUM_LATENCY_SUM_LSB    0
#define PCIE_WRAP_PCIEW_D_SUM_LATENCY_SUM_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_SUM_LATENCY_SUM_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_sum_latency_sum_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_SUM_LATENCY_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_sum_latency_sum_setf(uint32_t sum)
{
	ASSERT_ERR((((uint32_t)sum << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_SUM_LATENCY_ADDR, (uint32_t)sum << 0);
}

/**
 * @brief PCIEW_U_0_TM_CNT register definition
 *  LLI throughput word counter for ch U0 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_0_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000380)
#define PCIE_WRAP_PCIEW_U_0_TM_CNT_OFFSET      0x00000380
#define PCIE_WRAP_PCIEW_U_0_TM_CNT_INDEX       0x000000E0
#define PCIE_WRAP_PCIEW_U_0_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_0_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_0_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_0_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_0_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_0_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_0_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_U_0_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_0_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_0_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_0_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_0_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_0_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_U_1_TM_CNT register definition
 *  LLI throughput word counter for ch U1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_1_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000384)
#define PCIE_WRAP_PCIEW_U_1_TM_CNT_OFFSET      0x00000384
#define PCIE_WRAP_PCIEW_U_1_TM_CNT_INDEX       0x000000E1
#define PCIE_WRAP_PCIEW_U_1_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_1_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_1_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_1_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_1_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_1_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_1_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_U_1_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_1_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_1_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_1_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_1_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_1_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_U_2_TM_CNT register definition
 *  LLI throughput word counter for ch U2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_2_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000388)
#define PCIE_WRAP_PCIEW_U_2_TM_CNT_OFFSET      0x00000388
#define PCIE_WRAP_PCIEW_U_2_TM_CNT_INDEX       0x000000E2
#define PCIE_WRAP_PCIEW_U_2_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_2_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_2_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_2_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_2_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_2_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_2_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_U_2_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_2_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_2_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_2_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_2_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_2_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_U_3_TM_CNT register definition
 *  LLI throughput word counter for ch U3 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_3_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000038C)
#define PCIE_WRAP_PCIEW_U_3_TM_CNT_OFFSET      0x0000038C
#define PCIE_WRAP_PCIEW_U_3_TM_CNT_INDEX       0x000000E3
#define PCIE_WRAP_PCIEW_U_3_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_3_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_3_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_3_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_3_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_3_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_3_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_U_3_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_3_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_3_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_3_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_3_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_3_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_U_4_TM_CNT register definition
 *  LLI throughput word counter for ch U4 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_4_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000390)
#define PCIE_WRAP_PCIEW_U_4_TM_CNT_OFFSET      0x00000390
#define PCIE_WRAP_PCIEW_U_4_TM_CNT_INDEX       0x000000E4
#define PCIE_WRAP_PCIEW_U_4_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_4_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_4_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_4_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_4_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_4_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_4_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_U_4_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_4_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_4_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_4_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_4_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_4_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_U_5_TM_CNT register definition
 *  LLI throughput word counter for ch U5 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_5_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000394)
#define PCIE_WRAP_PCIEW_U_5_TM_CNT_OFFSET      0x00000394
#define PCIE_WRAP_PCIEW_U_5_TM_CNT_INDEX       0x000000E5
#define PCIE_WRAP_PCIEW_U_5_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_5_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_5_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_5_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_5_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_5_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_5_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_U_5_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_5_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_5_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_5_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_5_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_5_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_U_6_TM_CNT register definition
 *  LLI throughput word counter for ch U6 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_6_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x00000398)
#define PCIE_WRAP_PCIEW_U_6_TM_CNT_OFFSET      0x00000398
#define PCIE_WRAP_PCIEW_U_6_TM_CNT_INDEX       0x000000E6
#define PCIE_WRAP_PCIEW_U_6_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_6_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_6_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_6_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_6_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_6_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_6_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_U_6_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_6_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_6_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_6_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_6_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_6_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_U_7_TM_CNT register definition
 *  LLI throughput word counter for ch U7 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_7_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x0000039C)
#define PCIE_WRAP_PCIEW_U_7_TM_CNT_OFFSET      0x0000039C
#define PCIE_WRAP_PCIEW_U_7_TM_CNT_INDEX       0x000000E7
#define PCIE_WRAP_PCIEW_U_7_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_7_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_7_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_7_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_7_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_7_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_U_7_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_7_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_7_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_7_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_7_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_7_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_U_8_TM_CNT register definition
 *  LLI throughput word counter for ch U8 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_8_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003A0)
#define PCIE_WRAP_PCIEW_U_8_TM_CNT_OFFSET      0x000003A0
#define PCIE_WRAP_PCIEW_U_8_TM_CNT_INDEX       0x000000E8
#define PCIE_WRAP_PCIEW_U_8_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_8_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_8_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_8_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_8_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_8_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_8_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_U_8_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_8_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_8_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_8_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_8_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_8_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_U_9_TM_CNT register definition
 *  LLI throughput word counter for ch U9 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_9_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003A4)
#define PCIE_WRAP_PCIEW_U_9_TM_CNT_OFFSET      0x000003A4
#define PCIE_WRAP_PCIEW_U_9_TM_CNT_INDEX       0x000000E9
#define PCIE_WRAP_PCIEW_U_9_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_9_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_9_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_9_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_9_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_9_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_9_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_U_9_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_9_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_9_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_9_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_9_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_9_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_U_10_TM_CNT register definition
 *  LLI throughput word counter for ch U10 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_10_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003A8)
#define PCIE_WRAP_PCIEW_U_10_TM_CNT_OFFSET      0x000003A8
#define PCIE_WRAP_PCIEW_U_10_TM_CNT_INDEX       0x000000EA
#define PCIE_WRAP_PCIEW_U_10_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_10_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_10_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_10_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_10_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_10_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_10_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_U_10_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_10_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_10_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_10_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_10_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_10_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_U_11_TM_CNT register definition
 *  LLI throughput word counter for ch U11 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_11_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003AC)
#define PCIE_WRAP_PCIEW_U_11_TM_CNT_OFFSET      0x000003AC
#define PCIE_WRAP_PCIEW_U_11_TM_CNT_INDEX       0x000000EB
#define PCIE_WRAP_PCIEW_U_11_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_11_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_11_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_11_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_11_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_11_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_11_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_U_11_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_11_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_11_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_11_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_11_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_11_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_U_12_TM_CNT register definition
 *  LLI throughput word counter for ch U12 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_12_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003B0)
#define PCIE_WRAP_PCIEW_U_12_TM_CNT_OFFSET      0x000003B0
#define PCIE_WRAP_PCIEW_U_12_TM_CNT_INDEX       0x000000EC
#define PCIE_WRAP_PCIEW_U_12_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_12_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_12_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_12_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_12_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_12_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_12_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_U_12_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_12_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_12_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_12_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_12_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_12_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_U_13_TM_CNT register definition
 *  LLI throughput word counter for ch U13 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_13_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003B4)
#define PCIE_WRAP_PCIEW_U_13_TM_CNT_OFFSET      0x000003B4
#define PCIE_WRAP_PCIEW_U_13_TM_CNT_INDEX       0x000000ED
#define PCIE_WRAP_PCIEW_U_13_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_13_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_13_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_13_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_13_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_13_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_13_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_U_13_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_13_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_13_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_13_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_13_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_13_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_U_14_TM_CNT register definition
 *  LLI throughput word counter for ch U14 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_14_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003B8)
#define PCIE_WRAP_PCIEW_U_14_TM_CNT_OFFSET      0x000003B8
#define PCIE_WRAP_PCIEW_U_14_TM_CNT_INDEX       0x000000EE
#define PCIE_WRAP_PCIEW_U_14_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_14_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_14_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_14_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_14_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_14_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_14_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_U_14_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_14_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_14_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_14_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_14_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_14_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_U_15_TM_CNT register definition
 *  LLI throughput word counter for ch U15 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_U_15_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003BC)
#define PCIE_WRAP_PCIEW_U_15_TM_CNT_OFFSET      0x000003BC
#define PCIE_WRAP_PCIEW_U_15_TM_CNT_INDEX       0x000000EF
#define PCIE_WRAP_PCIEW_U_15_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_u_15_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_U_15_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_u_15_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_U_15_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_U_15_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_U_15_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_U_15_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_u_15_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_U_15_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_u_15_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_U_15_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_0_TM_CNT register definition
 *  LLI throughput word counter for ch D0 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_0_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003C0)
#define PCIE_WRAP_PCIEW_D_0_TM_CNT_OFFSET      0x000003C0
#define PCIE_WRAP_PCIEW_D_0_TM_CNT_INDEX       0x000000F0
#define PCIE_WRAP_PCIEW_D_0_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_0_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_0_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_0_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_0_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_0_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_0_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_0_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_0_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_0_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_0_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_0_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_0_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_1_TM_CNT register definition
 *  LLI throughput word counter for ch D1 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_1_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003C4)
#define PCIE_WRAP_PCIEW_D_1_TM_CNT_OFFSET      0x000003C4
#define PCIE_WRAP_PCIEW_D_1_TM_CNT_INDEX       0x000000F1
#define PCIE_WRAP_PCIEW_D_1_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_1_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_1_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_1_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_1_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_1_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_1_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_1_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_1_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_1_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_1_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_1_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_1_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_2_TM_CNT register definition
 *  LLI throughput word counter for ch D2 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_2_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003C8)
#define PCIE_WRAP_PCIEW_D_2_TM_CNT_OFFSET      0x000003C8
#define PCIE_WRAP_PCIEW_D_2_TM_CNT_INDEX       0x000000F2
#define PCIE_WRAP_PCIEW_D_2_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_2_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_2_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_2_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_2_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_2_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_2_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_2_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_2_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_2_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_2_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_2_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_2_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_3_TM_CNT register definition
 *  LLI throughput word counter for ch D3 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_3_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003CC)
#define PCIE_WRAP_PCIEW_D_3_TM_CNT_OFFSET      0x000003CC
#define PCIE_WRAP_PCIEW_D_3_TM_CNT_INDEX       0x000000F3
#define PCIE_WRAP_PCIEW_D_3_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_3_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_3_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_3_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_3_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_3_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_3_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_3_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_3_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_3_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_3_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_3_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_3_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_4_TM_CNT register definition
 *  LLI throughput word counter for ch D4 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_4_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003D0)
#define PCIE_WRAP_PCIEW_D_4_TM_CNT_OFFSET      0x000003D0
#define PCIE_WRAP_PCIEW_D_4_TM_CNT_INDEX       0x000000F4
#define PCIE_WRAP_PCIEW_D_4_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_4_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_4_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_4_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_4_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_4_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_4_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_4_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_4_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_4_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_4_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_4_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_4_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_5_TM_CNT register definition
 *  LLI throughput word counter for ch D5 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_5_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003D4)
#define PCIE_WRAP_PCIEW_D_5_TM_CNT_OFFSET      0x000003D4
#define PCIE_WRAP_PCIEW_D_5_TM_CNT_INDEX       0x000000F5
#define PCIE_WRAP_PCIEW_D_5_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_5_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_5_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_5_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_5_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_5_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_5_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_5_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_5_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_5_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_5_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_5_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_5_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_6_TM_CNT register definition
 *  LLI throughput word counter for ch D6 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_6_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003D8)
#define PCIE_WRAP_PCIEW_D_6_TM_CNT_OFFSET      0x000003D8
#define PCIE_WRAP_PCIEW_D_6_TM_CNT_INDEX       0x000000F6
#define PCIE_WRAP_PCIEW_D_6_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_6_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_6_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_6_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_6_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_6_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_6_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_6_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_6_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_6_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_6_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_6_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_6_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_7_TM_CNT register definition
 *  LLI throughput word counter for ch D7 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_7_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003DC)
#define PCIE_WRAP_PCIEW_D_7_TM_CNT_OFFSET      0x000003DC
#define PCIE_WRAP_PCIEW_D_7_TM_CNT_INDEX       0x000000F7
#define PCIE_WRAP_PCIEW_D_7_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_7_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_7_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_7_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_7_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_7_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_7_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_7_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_7_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_7_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_7_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_7_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_8_TM_CNT register definition
 *  LLI throughput word counter for ch D8 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_8_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003E0)
#define PCIE_WRAP_PCIEW_D_8_TM_CNT_OFFSET      0x000003E0
#define PCIE_WRAP_PCIEW_D_8_TM_CNT_INDEX       0x000000F8
#define PCIE_WRAP_PCIEW_D_8_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_8_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_8_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_8_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_8_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_8_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_8_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_8_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_8_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_8_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_8_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_8_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_8_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_9_TM_CNT register definition
 *  LLI throughput word counter for ch D9 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_9_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003E4)
#define PCIE_WRAP_PCIEW_D_9_TM_CNT_OFFSET      0x000003E4
#define PCIE_WRAP_PCIEW_D_9_TM_CNT_INDEX       0x000000F9
#define PCIE_WRAP_PCIEW_D_9_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_9_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_9_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_9_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_9_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_9_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_9_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_9_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_9_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_9_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_9_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_9_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_9_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_10_TM_CNT register definition
 *  LLI throughput word counter for ch D10 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_10_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003E8)
#define PCIE_WRAP_PCIEW_D_10_TM_CNT_OFFSET      0x000003E8
#define PCIE_WRAP_PCIEW_D_10_TM_CNT_INDEX       0x000000FA
#define PCIE_WRAP_PCIEW_D_10_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_10_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_10_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_10_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_10_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_10_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_10_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_10_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_10_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_10_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_10_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_10_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_10_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_11_TM_CNT register definition
 *  LLI throughput word counter for ch D11 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_11_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003EC)
#define PCIE_WRAP_PCIEW_D_11_TM_CNT_OFFSET      0x000003EC
#define PCIE_WRAP_PCIEW_D_11_TM_CNT_INDEX       0x000000FB
#define PCIE_WRAP_PCIEW_D_11_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_11_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_11_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_11_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_11_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_11_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_11_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_11_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_11_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_11_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_11_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_11_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_11_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_12_TM_CNT register definition
 *  LLI throughput word counter for ch D12 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_12_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003F0)
#define PCIE_WRAP_PCIEW_D_12_TM_CNT_OFFSET      0x000003F0
#define PCIE_WRAP_PCIEW_D_12_TM_CNT_INDEX       0x000000FC
#define PCIE_WRAP_PCIEW_D_12_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_12_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_12_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_12_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_12_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_12_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_12_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_12_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_12_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_12_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_12_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_12_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_12_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_13_TM_CNT register definition
 *  LLI throughput word counter for ch D13 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_13_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003F4)
#define PCIE_WRAP_PCIEW_D_13_TM_CNT_OFFSET      0x000003F4
#define PCIE_WRAP_PCIEW_D_13_TM_CNT_INDEX       0x000000FD
#define PCIE_WRAP_PCIEW_D_13_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_13_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_13_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_13_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_13_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_13_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_13_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_13_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_13_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_13_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_13_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_13_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_13_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_14_TM_CNT register definition
 *  LLI throughput word counter for ch D14 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_14_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003F8)
#define PCIE_WRAP_PCIEW_D_14_TM_CNT_OFFSET      0x000003F8
#define PCIE_WRAP_PCIEW_D_14_TM_CNT_INDEX       0x000000FE
#define PCIE_WRAP_PCIEW_D_14_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_14_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_14_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_14_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_14_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_14_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_14_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_14_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_14_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_14_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_14_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_14_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_14_TM_CNT_ADDR, (uint32_t)counter << 0);
}

/**
 * @brief PCIEW_D_15_TM_CNT register definition
 *  LLI throughput word counter for ch D15 register description
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 COUNTER                   0x0
 * </pre>
 */
#define PCIE_WRAP_PCIEW_D_15_TM_CNT_ADDR        (REG_PCIE_WRAP_BASE_ADDR+0x000003FC)
#define PCIE_WRAP_PCIEW_D_15_TM_CNT_OFFSET      0x000003FC
#define PCIE_WRAP_PCIEW_D_15_TM_CNT_INDEX       0x000000FF
#define PCIE_WRAP_PCIEW_D_15_TM_CNT_RESET       0x00000000

__INLINE uint32_t  pcie_wrap_pciew_d_15_tm_cnt_get(void)
{
	return REG_PL_RD(PCIE_WRAP_PCIEW_D_15_TM_CNT_ADDR);
}

__INLINE void pcie_wrap_pciew_d_15_tm_cnt_set(uint32_t value)
{
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_TM_CNT_ADDR, value);
}

// field definitions
#define PCIE_WRAP_PCIEW_D_15_TM_CNT_COUNTER_MASK    ((uint32_t)0xFFFFFFFF)
#define PCIE_WRAP_PCIEW_D_15_TM_CNT_COUNTER_LSB    0
#define PCIE_WRAP_PCIEW_D_15_TM_CNT_COUNTER_WIDTH    ((uint32_t)0x00000020)

#define PCIE_WRAP_PCIEW_D_15_TM_CNT_COUNTER_RST    0x0

__INLINE uint32_t pcie_wrap_pciew_d_15_tm_cnt_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(PCIE_WRAP_PCIEW_D_15_TM_CNT_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void pcie_wrap_pciew_d_15_tm_cnt_counter_setf(uint32_t counter)
{
	ASSERT_ERR((((uint32_t)counter << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(PCIE_WRAP_PCIEW_D_15_TM_CNT_ADDR, (uint32_t)counter << 0);
}


/** --------------------------------------
 *  CDB support 
 *  parsing all _lmac_ type func
 *  PRIM_BAND functions are _lmac_ type. 
 *  SEC_BAND  functions are _smac_ type. 
 * -----------------------------------------
 **/


#if PRIM_BAND
#define   pcie_wrap_pciew_int_en_get  pcie_wrap_pciew_int_lmac_en_get
#else
#define   pcie_wrap_pciew_int_en_get   pcie_wrap_pciew_int_smac_en_get
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_set pcie_wrap_pciew_int_lmac_en_set
#else
#define  pcie_wrap_pciew_int_en_set  pcie_wrap_pciew_int_smac_en_set
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_pack pcie_wrap_pciew_int_lmac_en_pack
#else
#define  pcie_wrap_pciew_int_en_pack  pcie_wrap_pciew_int_smac_en_pack
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_unpack pcie_wrap_pciew_int_lmac_en_unpack
#else
#define  pcie_wrap_pciew_int_en_unpack  pcie_wrap_pciew_int_smac_en_unpack
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_15_getf pcie_wrap_pciew_int_lmac_en_en_d_15_getf
#else
#define  pcie_wrap_pciew_int_en_en_d_15_getf  pcie_wrap_pciew_int_smac_en_en_d_15_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_15_setf pcie_wrap_pciew_int_lmac_en_en_d_15_setf
#else
#define  pcie_wrap_pciew_int_en_en_d_15_setf  pcie_wrap_pciew_int_smac_en_en_d_15_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_14_getf pcie_wrap_pciew_int_lmac_en_en_d_14_getf
#else
#define  pcie_wrap_pciew_int_en_en_d_14_getf  pcie_wrap_pciew_int_smac_en_en_d_14_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_14_setf pcie_wrap_pciew_int_lmac_en_en_d_14_setf
#else
#define  pcie_wrap_pciew_int_en_en_d_14_setf  pcie_wrap_pciew_int_smac_en_en_d_14_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_13_getf pcie_wrap_pciew_int_lmac_en_en_d_13_getf
#else
#define  pcie_wrap_pciew_int_en_en_d_13_getf  pcie_wrap_pciew_int_smac_en_en_d_13_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_13_setf pcie_wrap_pciew_int_lmac_en_en_d_13_setf
#else
#define  pcie_wrap_pciew_int_en_en_d_13_setf  pcie_wrap_pciew_int_smac_en_en_d_13_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_12_getf pcie_wrap_pciew_int_lmac_en_en_d_12_getf
#else
#define  pcie_wrap_pciew_int_en_en_d_12_getf  pcie_wrap_pciew_int_smac_en_en_d_12_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_12_setf pcie_wrap_pciew_int_lmac_en_en_d_12_setf
#else
#define  pcie_wrap_pciew_int_en_en_d_12_setf  pcie_wrap_pciew_int_smac_en_en_d_12_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_11_getf pcie_wrap_pciew_int_lmac_en_en_d_11_getf
#else
#define  pcie_wrap_pciew_int_en_en_d_11_getf  pcie_wrap_pciew_int_smac_en_en_d_11_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_11_setf pcie_wrap_pciew_int_lmac_en_en_d_11_setf
#else
#define  pcie_wrap_pciew_int_en_en_d_11_setf  pcie_wrap_pciew_int_smac_en_en_d_11_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_10_getf pcie_wrap_pciew_int_lmac_en_en_d_10_getf
#else
#define  pcie_wrap_pciew_int_en_en_d_10_getf  pcie_wrap_pciew_int_smac_en_en_d_10_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_10_setf pcie_wrap_pciew_int_lmac_en_en_d_10_setf
#else
#define  pcie_wrap_pciew_int_en_en_d_10_setf  pcie_wrap_pciew_int_smac_en_en_d_10_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_9_getf pcie_wrap_pciew_int_lmac_en_en_d_9_getf
#else
#define  pcie_wrap_pciew_int_en_en_d_9_getf  pcie_wrap_pciew_int_smac_en_en_d_9_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_9_setf pcie_wrap_pciew_int_lmac_en_en_d_9_setf
#else
#define  pcie_wrap_pciew_int_en_en_d_9_setf  pcie_wrap_pciew_int_smac_en_en_d_9_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_8_getf pcie_wrap_pciew_int_lmac_en_en_d_8_getf
#else
#define  pcie_wrap_pciew_int_en_en_d_8_getf  pcie_wrap_pciew_int_smac_en_en_d_8_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_8_setf pcie_wrap_pciew_int_lmac_en_en_d_8_setf
#else
#define  pcie_wrap_pciew_int_en_en_d_8_setf  pcie_wrap_pciew_int_smac_en_en_d_8_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_7_getf pcie_wrap_pciew_int_lmac_en_en_d_7_getf
#else
#define  pcie_wrap_pciew_int_en_en_d_7_getf  pcie_wrap_pciew_int_smac_en_en_d_7_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_7_setf pcie_wrap_pciew_int_lmac_en_en_d_7_setf
#else
#define  pcie_wrap_pciew_int_en_en_d_7_setf  pcie_wrap_pciew_int_smac_en_en_d_7_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_6_getf pcie_wrap_pciew_int_lmac_en_en_d_6_getf
#else
#define  pcie_wrap_pciew_int_en_en_d_6_getf  pcie_wrap_pciew_int_smac_en_en_d_6_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_6_setf pcie_wrap_pciew_int_lmac_en_en_d_6_setf
#else
#define  pcie_wrap_pciew_int_en_en_d_6_setf  pcie_wrap_pciew_int_smac_en_en_d_6_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_5_getf pcie_wrap_pciew_int_lmac_en_en_d_5_getf
#else
#define  pcie_wrap_pciew_int_en_en_d_5_getf  pcie_wrap_pciew_int_smac_en_en_d_5_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_5_setf pcie_wrap_pciew_int_lmac_en_en_d_5_setf
#else
#define  pcie_wrap_pciew_int_en_en_d_5_setf  pcie_wrap_pciew_int_smac_en_en_d_5_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_4_getf pcie_wrap_pciew_int_lmac_en_en_d_4_getf
#else
#define  pcie_wrap_pciew_int_en_en_d_4_getf  pcie_wrap_pciew_int_smac_en_en_d_4_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_4_setf pcie_wrap_pciew_int_lmac_en_en_d_4_setf
#else
#define  pcie_wrap_pciew_int_en_en_d_4_setf  pcie_wrap_pciew_int_smac_en_en_d_4_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_3_getf pcie_wrap_pciew_int_lmac_en_en_d_3_getf
#else
#define  pcie_wrap_pciew_int_en_en_d_3_getf  pcie_wrap_pciew_int_smac_en_en_d_3_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_3_setf pcie_wrap_pciew_int_lmac_en_en_d_3_setf
#else
#define  pcie_wrap_pciew_int_en_en_d_3_setf  pcie_wrap_pciew_int_smac_en_en_d_3_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_2_getf pcie_wrap_pciew_int_lmac_en_en_d_2_getf
#else
#define  pcie_wrap_pciew_int_en_en_d_2_getf  pcie_wrap_pciew_int_smac_en_en_d_2_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_2_setf pcie_wrap_pciew_int_lmac_en_en_d_2_setf
#else
#define  pcie_wrap_pciew_int_en_en_d_2_setf  pcie_wrap_pciew_int_smac_en_en_d_2_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_1_getf pcie_wrap_pciew_int_lmac_en_en_d_1_getf
#else
#define  pcie_wrap_pciew_int_en_en_d_1_getf  pcie_wrap_pciew_int_smac_en_en_d_1_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_1_setf pcie_wrap_pciew_int_lmac_en_en_d_1_setf
#else
#define  pcie_wrap_pciew_int_en_en_d_1_setf  pcie_wrap_pciew_int_smac_en_en_d_1_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_0_getf pcie_wrap_pciew_int_lmac_en_en_d_0_getf
#else
#define  pcie_wrap_pciew_int_en_en_d_0_getf  pcie_wrap_pciew_int_smac_en_en_d_0_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_d_0_setf pcie_wrap_pciew_int_lmac_en_en_d_0_setf
#else
#define  pcie_wrap_pciew_int_en_en_d_0_setf  pcie_wrap_pciew_int_smac_en_en_d_0_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_15_getf pcie_wrap_pciew_int_lmac_en_en_u_15_getf
#else
#define  pcie_wrap_pciew_int_en_en_u_15_getf  pcie_wrap_pciew_int_smac_en_en_u_15_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_15_setf pcie_wrap_pciew_int_lmac_en_en_u_15_setf
#else
#define  pcie_wrap_pciew_int_en_en_u_15_setf  pcie_wrap_pciew_int_smac_en_en_u_15_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_14_getf pcie_wrap_pciew_int_lmac_en_en_u_14_getf
#else
#define  pcie_wrap_pciew_int_en_en_u_14_getf  pcie_wrap_pciew_int_smac_en_en_u_14_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_14_setf pcie_wrap_pciew_int_lmac_en_en_u_14_setf
#else
#define  pcie_wrap_pciew_int_en_en_u_14_setf  pcie_wrap_pciew_int_smac_en_en_u_14_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_13_getf pcie_wrap_pciew_int_lmac_en_en_u_13_getf
#else
#define  pcie_wrap_pciew_int_en_en_u_13_getf  pcie_wrap_pciew_int_smac_en_en_u_13_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_13_setf pcie_wrap_pciew_int_lmac_en_en_u_13_setf
#else
#define  pcie_wrap_pciew_int_en_en_u_13_setf  pcie_wrap_pciew_int_smac_en_en_u_13_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_12_getf pcie_wrap_pciew_int_lmac_en_en_u_12_getf
#else
#define  pcie_wrap_pciew_int_en_en_u_12_getf  pcie_wrap_pciew_int_smac_en_en_u_12_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_12_setf pcie_wrap_pciew_int_lmac_en_en_u_12_setf
#else
#define  pcie_wrap_pciew_int_en_en_u_12_setf  pcie_wrap_pciew_int_smac_en_en_u_12_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_11_getf pcie_wrap_pciew_int_lmac_en_en_u_11_getf
#else
#define  pcie_wrap_pciew_int_en_en_u_11_getf  pcie_wrap_pciew_int_smac_en_en_u_11_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_11_setf pcie_wrap_pciew_int_lmac_en_en_u_11_setf
#else
#define  pcie_wrap_pciew_int_en_en_u_11_setf  pcie_wrap_pciew_int_smac_en_en_u_11_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_10_getf pcie_wrap_pciew_int_lmac_en_en_u_10_getf
#else
#define  pcie_wrap_pciew_int_en_en_u_10_getf  pcie_wrap_pciew_int_smac_en_en_u_10_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_10_setf pcie_wrap_pciew_int_lmac_en_en_u_10_setf
#else
#define  pcie_wrap_pciew_int_en_en_u_10_setf  pcie_wrap_pciew_int_smac_en_en_u_10_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_9_getf pcie_wrap_pciew_int_lmac_en_en_u_9_getf
#else
#define  pcie_wrap_pciew_int_en_en_u_9_getf  pcie_wrap_pciew_int_smac_en_en_u_9_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_9_setf pcie_wrap_pciew_int_lmac_en_en_u_9_setf
#else
#define  pcie_wrap_pciew_int_en_en_u_9_setf  pcie_wrap_pciew_int_smac_en_en_u_9_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_8_getf pcie_wrap_pciew_int_lmac_en_en_u_8_getf
#else
#define  pcie_wrap_pciew_int_en_en_u_8_getf  pcie_wrap_pciew_int_smac_en_en_u_8_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_8_setf pcie_wrap_pciew_int_lmac_en_en_u_8_setf
#else
#define  pcie_wrap_pciew_int_en_en_u_8_setf  pcie_wrap_pciew_int_smac_en_en_u_8_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_7_getf pcie_wrap_pciew_int_lmac_en_en_u_7_getf
#else
#define  pcie_wrap_pciew_int_en_en_u_7_getf  pcie_wrap_pciew_int_smac_en_en_u_7_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_7_setf pcie_wrap_pciew_int_lmac_en_en_u_7_setf
#else
#define  pcie_wrap_pciew_int_en_en_u_7_setf  pcie_wrap_pciew_int_smac_en_en_u_7_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_6_getf pcie_wrap_pciew_int_lmac_en_en_u_6_getf
#else
#define  pcie_wrap_pciew_int_en_en_u_6_getf  pcie_wrap_pciew_int_smac_en_en_u_6_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_6_setf pcie_wrap_pciew_int_lmac_en_en_u_6_setf
#else
#define  pcie_wrap_pciew_int_en_en_u_6_setf  pcie_wrap_pciew_int_smac_en_en_u_6_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_5_getf pcie_wrap_pciew_int_lmac_en_en_u_5_getf
#else
#define  pcie_wrap_pciew_int_en_en_u_5_getf  pcie_wrap_pciew_int_smac_en_en_u_5_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_5_setf pcie_wrap_pciew_int_lmac_en_en_u_5_setf
#else
#define  pcie_wrap_pciew_int_en_en_u_5_setf  pcie_wrap_pciew_int_smac_en_en_u_5_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_4_getf pcie_wrap_pciew_int_lmac_en_en_u_4_getf
#else
#define  pcie_wrap_pciew_int_en_en_u_4_getf  pcie_wrap_pciew_int_smac_en_en_u_4_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_4_setf pcie_wrap_pciew_int_lmac_en_en_u_4_setf
#else
#define  pcie_wrap_pciew_int_en_en_u_4_setf  pcie_wrap_pciew_int_smac_en_en_u_4_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_3_getf pcie_wrap_pciew_int_lmac_en_en_u_3_getf
#else
#define  pcie_wrap_pciew_int_en_en_u_3_getf  pcie_wrap_pciew_int_smac_en_en_u_3_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_3_setf pcie_wrap_pciew_int_lmac_en_en_u_3_setf
#else
#define  pcie_wrap_pciew_int_en_en_u_3_setf  pcie_wrap_pciew_int_smac_en_en_u_3_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_2_getf pcie_wrap_pciew_int_lmac_en_en_u_2_getf
#else
#define  pcie_wrap_pciew_int_en_en_u_2_getf  pcie_wrap_pciew_int_smac_en_en_u_2_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_2_setf pcie_wrap_pciew_int_lmac_en_en_u_2_setf
#else
#define  pcie_wrap_pciew_int_en_en_u_2_setf  pcie_wrap_pciew_int_smac_en_en_u_2_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_1_getf pcie_wrap_pciew_int_lmac_en_en_u_1_getf
#else
#define  pcie_wrap_pciew_int_en_en_u_1_getf  pcie_wrap_pciew_int_smac_en_en_u_1_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_1_setf pcie_wrap_pciew_int_lmac_en_en_u_1_setf
#else
#define  pcie_wrap_pciew_int_en_en_u_1_setf  pcie_wrap_pciew_int_smac_en_en_u_1_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_0_getf pcie_wrap_pciew_int_lmac_en_en_u_0_getf
#else
#define  pcie_wrap_pciew_int_en_en_u_0_getf  pcie_wrap_pciew_int_smac_en_en_u_0_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_en_u_0_setf pcie_wrap_pciew_int_lmac_en_en_u_0_setf
#else
#define  pcie_wrap_pciew_int_en_en_u_0_setf  pcie_wrap_pciew_int_smac_en_en_u_0_setf
#endif


#if PRIM_BAND
#define   pcie_wrap_pciew_int_stat_get  pcie_wrap_pciew_int_lmac_stat_get
#else
#define   pcie_wrap_pciew_int_stat_get   pcie_wrap_pciew_int_smac_stat_get
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_unpack pcie_wrap_pciew_int_lmac_stat_unpack
#else
#define  pcie_wrap_pciew_int_stat_unpack  pcie_wrap_pciew_int_smac_stat_unpack
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_d_15_getf pcie_wrap_pciew_int_lmac_stat_done_d_15_getf
#else
#define  pcie_wrap_pciew_int_stat_done_d_15_getf  pcie_wrap_pciew_int_smac_stat_done_d_15_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_d_14_getf pcie_wrap_pciew_int_lmac_stat_done_d_14_getf
#else
#define  pcie_wrap_pciew_int_stat_done_d_14_getf  pcie_wrap_pciew_int_smac_stat_done_d_14_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_d_13_getf pcie_wrap_pciew_int_lmac_stat_done_d_13_getf
#else
#define  pcie_wrap_pciew_int_stat_done_d_13_getf  pcie_wrap_pciew_int_smac_stat_done_d_13_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_d_12_getf pcie_wrap_pciew_int_lmac_stat_done_d_12_getf
#else
#define  pcie_wrap_pciew_int_stat_done_d_12_getf  pcie_wrap_pciew_int_smac_stat_done_d_12_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_d_11_getf pcie_wrap_pciew_int_lmac_stat_done_d_11_getf
#else
#define  pcie_wrap_pciew_int_stat_done_d_11_getf  pcie_wrap_pciew_int_smac_stat_done_d_11_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_d_10_getf pcie_wrap_pciew_int_lmac_stat_done_d_10_getf
#else
#define  pcie_wrap_pciew_int_stat_done_d_10_getf  pcie_wrap_pciew_int_smac_stat_done_d_10_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_d_9_getf pcie_wrap_pciew_int_lmac_stat_done_d_9_getf
#else
#define  pcie_wrap_pciew_int_stat_done_d_9_getf  pcie_wrap_pciew_int_smac_stat_done_d_9_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_d_8_getf pcie_wrap_pciew_int_lmac_stat_done_d_8_getf
#else
#define  pcie_wrap_pciew_int_stat_done_d_8_getf  pcie_wrap_pciew_int_smac_stat_done_d_8_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_d_7_getf pcie_wrap_pciew_int_lmac_stat_done_d_7_getf
#else
#define  pcie_wrap_pciew_int_stat_done_d_7_getf  pcie_wrap_pciew_int_smac_stat_done_d_7_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_d_6_getf pcie_wrap_pciew_int_lmac_stat_done_d_6_getf
#else
#define  pcie_wrap_pciew_int_stat_done_d_6_getf  pcie_wrap_pciew_int_smac_stat_done_d_6_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_d_5_getf pcie_wrap_pciew_int_lmac_stat_done_d_5_getf
#else
#define  pcie_wrap_pciew_int_stat_done_d_5_getf  pcie_wrap_pciew_int_smac_stat_done_d_5_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_d_4_getf pcie_wrap_pciew_int_lmac_stat_done_d_4_getf
#else
#define  pcie_wrap_pciew_int_stat_done_d_4_getf  pcie_wrap_pciew_int_smac_stat_done_d_4_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_d_3_getf pcie_wrap_pciew_int_lmac_stat_done_d_3_getf
#else
#define  pcie_wrap_pciew_int_stat_done_d_3_getf  pcie_wrap_pciew_int_smac_stat_done_d_3_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_d_2_getf pcie_wrap_pciew_int_lmac_stat_done_d_2_getf
#else
#define  pcie_wrap_pciew_int_stat_done_d_2_getf  pcie_wrap_pciew_int_smac_stat_done_d_2_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_d_1_getf pcie_wrap_pciew_int_lmac_stat_done_d_1_getf
#else
#define  pcie_wrap_pciew_int_stat_done_d_1_getf  pcie_wrap_pciew_int_smac_stat_done_d_1_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_d_0_getf pcie_wrap_pciew_int_lmac_stat_done_d_0_getf
#else
#define  pcie_wrap_pciew_int_stat_done_d_0_getf  pcie_wrap_pciew_int_smac_stat_done_d_0_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_u_15_getf pcie_wrap_pciew_int_lmac_stat_done_u_15_getf
#else
#define  pcie_wrap_pciew_int_stat_done_u_15_getf  pcie_wrap_pciew_int_smac_stat_done_u_15_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_u_14_getf pcie_wrap_pciew_int_lmac_stat_done_u_14_getf
#else
#define  pcie_wrap_pciew_int_stat_done_u_14_getf  pcie_wrap_pciew_int_smac_stat_done_u_14_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_u_13_getf pcie_wrap_pciew_int_lmac_stat_done_u_13_getf
#else
#define  pcie_wrap_pciew_int_stat_done_u_13_getf  pcie_wrap_pciew_int_smac_stat_done_u_13_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_u_12_getf pcie_wrap_pciew_int_lmac_stat_done_u_12_getf
#else
#define  pcie_wrap_pciew_int_stat_done_u_12_getf  pcie_wrap_pciew_int_smac_stat_done_u_12_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_u_11_getf pcie_wrap_pciew_int_lmac_stat_done_u_11_getf
#else
#define  pcie_wrap_pciew_int_stat_done_u_11_getf  pcie_wrap_pciew_int_smac_stat_done_u_11_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_u_10_getf pcie_wrap_pciew_int_lmac_stat_done_u_10_getf
#else
#define  pcie_wrap_pciew_int_stat_done_u_10_getf  pcie_wrap_pciew_int_smac_stat_done_u_10_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_u_9_getf pcie_wrap_pciew_int_lmac_stat_done_u_9_getf
#else
#define  pcie_wrap_pciew_int_stat_done_u_9_getf  pcie_wrap_pciew_int_smac_stat_done_u_9_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_u_8_getf pcie_wrap_pciew_int_lmac_stat_done_u_8_getf
#else
#define  pcie_wrap_pciew_int_stat_done_u_8_getf  pcie_wrap_pciew_int_smac_stat_done_u_8_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_u_7_getf pcie_wrap_pciew_int_lmac_stat_done_u_7_getf
#else
#define  pcie_wrap_pciew_int_stat_done_u_7_getf  pcie_wrap_pciew_int_smac_stat_done_u_7_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_u_6_getf pcie_wrap_pciew_int_lmac_stat_done_u_6_getf
#else
#define  pcie_wrap_pciew_int_stat_done_u_6_getf  pcie_wrap_pciew_int_smac_stat_done_u_6_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_u_5_getf pcie_wrap_pciew_int_lmac_stat_done_u_5_getf
#else
#define  pcie_wrap_pciew_int_stat_done_u_5_getf  pcie_wrap_pciew_int_smac_stat_done_u_5_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_u_4_getf pcie_wrap_pciew_int_lmac_stat_done_u_4_getf
#else
#define  pcie_wrap_pciew_int_stat_done_u_4_getf  pcie_wrap_pciew_int_smac_stat_done_u_4_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_u_3_getf pcie_wrap_pciew_int_lmac_stat_done_u_3_getf
#else
#define  pcie_wrap_pciew_int_stat_done_u_3_getf  pcie_wrap_pciew_int_smac_stat_done_u_3_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_u_2_getf pcie_wrap_pciew_int_lmac_stat_done_u_2_getf
#else
#define  pcie_wrap_pciew_int_stat_done_u_2_getf  pcie_wrap_pciew_int_smac_stat_done_u_2_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_u_1_getf pcie_wrap_pciew_int_lmac_stat_done_u_1_getf
#else
#define  pcie_wrap_pciew_int_stat_done_u_1_getf  pcie_wrap_pciew_int_smac_stat_done_u_1_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_stat_done_u_0_getf pcie_wrap_pciew_int_lmac_stat_done_u_0_getf
#else
#define  pcie_wrap_pciew_int_stat_done_u_0_getf  pcie_wrap_pciew_int_smac_stat_done_u_0_getf
#endif


#if PRIM_BAND
#define   pcie_wrap_pciew_int_en_cmd_get  pcie_wrap_pciew_int_lmac_en_cmd_get
#else
#define   pcie_wrap_pciew_int_en_cmd_get   pcie_wrap_pciew_int_smac_en_cmd_get
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_set pcie_wrap_pciew_int_lmac_en_cmd_set
#else
#define  pcie_wrap_pciew_int_en_cmd_set  pcie_wrap_pciew_int_smac_en_cmd_set
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_pack pcie_wrap_pciew_int_lmac_en_cmd_pack
#else
#define  pcie_wrap_pciew_int_en_cmd_pack  pcie_wrap_pciew_int_smac_en_cmd_pack
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_unpack pcie_wrap_pciew_int_lmac_en_cmd_unpack
#else
#define  pcie_wrap_pciew_int_en_cmd_unpack  pcie_wrap_pciew_int_smac_en_cmd_unpack
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_15_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_15_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_15_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_15_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_15_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_15_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_15_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_15_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_14_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_14_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_14_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_14_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_14_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_14_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_14_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_14_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_13_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_13_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_13_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_13_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_13_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_13_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_13_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_13_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_12_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_12_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_12_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_12_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_12_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_12_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_12_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_12_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_11_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_11_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_11_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_11_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_11_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_11_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_11_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_11_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_10_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_10_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_10_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_10_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_10_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_10_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_10_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_10_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_9_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_9_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_9_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_9_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_9_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_9_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_9_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_9_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_8_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_8_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_8_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_8_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_8_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_8_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_8_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_8_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_7_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_7_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_7_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_7_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_7_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_7_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_7_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_7_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_6_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_6_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_6_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_6_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_6_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_6_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_6_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_6_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_5_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_5_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_5_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_5_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_5_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_5_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_5_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_5_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_4_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_4_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_4_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_4_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_4_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_4_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_4_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_4_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_3_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_3_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_3_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_3_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_3_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_3_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_3_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_3_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_2_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_2_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_2_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_2_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_2_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_2_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_2_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_2_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_1_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_1_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_1_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_1_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_1_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_1_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_1_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_1_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_0_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_0_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_0_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_0_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_0_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_d_0_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_d_0_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_d_0_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_15_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_15_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_15_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_15_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_15_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_15_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_15_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_15_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_14_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_14_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_14_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_14_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_14_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_14_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_14_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_14_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_13_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_13_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_13_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_13_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_13_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_13_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_13_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_13_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_12_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_12_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_12_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_12_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_12_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_12_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_12_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_12_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_11_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_11_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_11_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_11_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_11_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_11_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_11_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_11_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_10_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_10_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_10_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_10_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_10_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_10_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_10_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_10_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_9_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_9_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_9_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_9_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_9_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_9_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_9_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_9_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_8_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_8_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_8_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_8_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_8_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_8_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_8_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_8_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_7_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_7_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_7_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_7_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_7_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_7_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_7_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_7_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_6_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_6_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_6_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_6_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_6_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_6_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_6_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_6_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_5_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_5_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_5_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_5_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_5_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_5_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_5_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_5_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_4_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_4_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_4_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_4_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_4_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_4_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_4_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_4_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_3_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_3_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_3_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_3_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_3_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_3_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_3_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_3_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_2_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_2_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_2_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_2_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_2_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_2_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_2_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_2_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_1_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_1_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_1_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_1_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_1_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_1_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_1_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_1_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_0_getf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_0_getf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_0_getf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_0_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_0_setf pcie_wrap_pciew_int_lmac_en_cmd_en_cmd_u_0_setf
#else
#define  pcie_wrap_pciew_int_en_cmd_en_cmd_u_0_setf  pcie_wrap_pciew_int_smac_en_cmd_en_cmd_u_0_setf
#endif


#if PRIM_BAND
#define   pcie_wrap_pciew_int_dis_cmd_get  pcie_wrap_pciew_int_lmac_dis_cmd_get
#else
#define   pcie_wrap_pciew_int_dis_cmd_get   pcie_wrap_pciew_int_smac_dis_cmd_get
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_set pcie_wrap_pciew_int_lmac_dis_cmd_set
#else
#define  pcie_wrap_pciew_int_dis_cmd_set  pcie_wrap_pciew_int_smac_dis_cmd_set
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_pack pcie_wrap_pciew_int_lmac_dis_cmd_pack
#else
#define  pcie_wrap_pciew_int_dis_cmd_pack  pcie_wrap_pciew_int_smac_dis_cmd_pack
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_unpack pcie_wrap_pciew_int_lmac_dis_cmd_unpack
#else
#define  pcie_wrap_pciew_int_dis_cmd_unpack  pcie_wrap_pciew_int_smac_dis_cmd_unpack
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_15_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_15_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_15_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_15_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_15_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_15_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_15_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_15_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_14_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_14_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_14_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_14_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_14_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_14_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_14_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_14_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_13_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_13_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_13_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_13_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_13_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_13_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_13_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_13_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_12_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_12_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_12_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_12_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_12_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_12_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_12_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_12_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_11_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_11_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_11_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_11_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_11_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_11_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_11_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_11_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_10_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_10_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_10_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_10_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_10_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_10_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_10_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_10_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_9_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_9_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_9_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_9_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_9_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_9_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_9_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_9_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_8_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_8_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_8_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_8_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_8_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_8_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_8_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_8_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_7_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_7_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_7_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_7_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_7_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_7_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_7_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_7_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_6_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_6_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_6_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_6_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_6_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_6_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_6_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_6_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_5_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_5_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_5_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_5_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_5_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_5_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_5_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_5_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_4_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_4_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_4_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_4_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_4_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_4_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_4_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_4_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_3_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_3_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_3_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_3_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_3_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_3_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_3_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_3_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_2_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_2_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_2_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_2_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_2_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_2_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_2_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_2_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_1_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_1_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_1_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_1_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_1_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_1_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_1_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_1_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_0_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_0_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_0_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_0_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_0_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_d_0_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_d_0_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_d_0_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_15_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_15_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_15_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_15_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_15_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_15_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_15_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_15_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_14_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_14_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_14_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_14_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_14_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_14_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_14_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_14_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_13_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_13_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_13_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_13_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_13_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_13_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_13_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_13_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_12_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_12_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_12_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_12_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_12_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_12_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_12_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_12_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_11_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_11_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_11_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_11_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_11_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_11_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_11_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_11_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_10_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_10_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_10_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_10_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_10_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_10_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_10_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_10_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_9_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_9_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_9_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_9_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_9_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_9_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_9_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_9_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_8_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_8_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_8_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_8_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_8_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_8_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_8_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_8_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_7_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_7_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_7_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_7_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_7_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_7_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_7_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_7_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_6_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_6_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_6_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_6_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_6_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_6_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_6_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_6_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_5_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_5_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_5_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_5_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_5_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_5_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_5_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_5_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_4_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_4_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_4_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_4_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_4_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_4_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_4_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_4_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_3_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_3_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_3_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_3_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_3_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_3_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_3_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_3_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_2_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_2_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_2_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_2_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_2_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_2_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_2_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_2_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_1_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_1_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_1_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_1_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_1_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_1_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_1_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_1_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_0_getf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_0_getf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_0_getf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_0_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_0_setf pcie_wrap_pciew_int_lmac_dis_cmd_dis_cmd_u_0_setf
#else
#define  pcie_wrap_pciew_int_dis_cmd_dis_cmd_u_0_setf  pcie_wrap_pciew_int_smac_dis_cmd_dis_cmd_u_0_setf
#endif


#if PRIM_BAND
#define   pcie_wrap_pciew_int_err_stat_get  pcie_wrap_pciew_int_lmac_err_stat_get
#else
#define   pcie_wrap_pciew_int_err_stat_get   pcie_wrap_pciew_int_smac_err_stat_get
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_unpack pcie_wrap_pciew_int_lmac_err_stat_unpack
#else
#define  pcie_wrap_pciew_int_err_stat_unpack  pcie_wrap_pciew_int_smac_err_stat_unpack
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_d_15_getf pcie_wrap_pciew_int_lmac_err_stat_err_d_15_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_d_15_getf  pcie_wrap_pciew_int_smac_err_stat_err_d_15_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_d_14_getf pcie_wrap_pciew_int_lmac_err_stat_err_d_14_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_d_14_getf  pcie_wrap_pciew_int_smac_err_stat_err_d_14_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_d_13_getf pcie_wrap_pciew_int_lmac_err_stat_err_d_13_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_d_13_getf  pcie_wrap_pciew_int_smac_err_stat_err_d_13_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_d_12_getf pcie_wrap_pciew_int_lmac_err_stat_err_d_12_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_d_12_getf  pcie_wrap_pciew_int_smac_err_stat_err_d_12_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_d_11_getf pcie_wrap_pciew_int_lmac_err_stat_err_d_11_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_d_11_getf  pcie_wrap_pciew_int_smac_err_stat_err_d_11_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_d_10_getf pcie_wrap_pciew_int_lmac_err_stat_err_d_10_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_d_10_getf  pcie_wrap_pciew_int_smac_err_stat_err_d_10_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_d_9_getf pcie_wrap_pciew_int_lmac_err_stat_err_d_9_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_d_9_getf  pcie_wrap_pciew_int_smac_err_stat_err_d_9_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_d_8_getf pcie_wrap_pciew_int_lmac_err_stat_err_d_8_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_d_8_getf  pcie_wrap_pciew_int_smac_err_stat_err_d_8_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_d_7_getf pcie_wrap_pciew_int_lmac_err_stat_err_d_7_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_d_7_getf  pcie_wrap_pciew_int_smac_err_stat_err_d_7_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_d_6_getf pcie_wrap_pciew_int_lmac_err_stat_err_d_6_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_d_6_getf  pcie_wrap_pciew_int_smac_err_stat_err_d_6_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_d_5_getf pcie_wrap_pciew_int_lmac_err_stat_err_d_5_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_d_5_getf  pcie_wrap_pciew_int_smac_err_stat_err_d_5_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_d_4_getf pcie_wrap_pciew_int_lmac_err_stat_err_d_4_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_d_4_getf  pcie_wrap_pciew_int_smac_err_stat_err_d_4_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_d_3_getf pcie_wrap_pciew_int_lmac_err_stat_err_d_3_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_d_3_getf  pcie_wrap_pciew_int_smac_err_stat_err_d_3_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_d_2_getf pcie_wrap_pciew_int_lmac_err_stat_err_d_2_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_d_2_getf  pcie_wrap_pciew_int_smac_err_stat_err_d_2_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_d_1_getf pcie_wrap_pciew_int_lmac_err_stat_err_d_1_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_d_1_getf  pcie_wrap_pciew_int_smac_err_stat_err_d_1_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_d_0_getf pcie_wrap_pciew_int_lmac_err_stat_err_d_0_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_d_0_getf  pcie_wrap_pciew_int_smac_err_stat_err_d_0_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_u_15_getf pcie_wrap_pciew_int_lmac_err_stat_err_u_15_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_u_15_getf  pcie_wrap_pciew_int_smac_err_stat_err_u_15_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_u_14_getf pcie_wrap_pciew_int_lmac_err_stat_err_u_14_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_u_14_getf  pcie_wrap_pciew_int_smac_err_stat_err_u_14_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_u_13_getf pcie_wrap_pciew_int_lmac_err_stat_err_u_13_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_u_13_getf  pcie_wrap_pciew_int_smac_err_stat_err_u_13_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_u_12_getf pcie_wrap_pciew_int_lmac_err_stat_err_u_12_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_u_12_getf  pcie_wrap_pciew_int_smac_err_stat_err_u_12_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_u_11_getf pcie_wrap_pciew_int_lmac_err_stat_err_u_11_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_u_11_getf  pcie_wrap_pciew_int_smac_err_stat_err_u_11_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_u_10_getf pcie_wrap_pciew_int_lmac_err_stat_err_u_10_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_u_10_getf  pcie_wrap_pciew_int_smac_err_stat_err_u_10_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_u_9_getf pcie_wrap_pciew_int_lmac_err_stat_err_u_9_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_u_9_getf  pcie_wrap_pciew_int_smac_err_stat_err_u_9_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_u_8_getf pcie_wrap_pciew_int_lmac_err_stat_err_u_8_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_u_8_getf  pcie_wrap_pciew_int_smac_err_stat_err_u_8_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_u_7_getf pcie_wrap_pciew_int_lmac_err_stat_err_u_7_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_u_7_getf  pcie_wrap_pciew_int_smac_err_stat_err_u_7_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_u_6_getf pcie_wrap_pciew_int_lmac_err_stat_err_u_6_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_u_6_getf  pcie_wrap_pciew_int_smac_err_stat_err_u_6_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_u_5_getf pcie_wrap_pciew_int_lmac_err_stat_err_u_5_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_u_5_getf  pcie_wrap_pciew_int_smac_err_stat_err_u_5_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_u_4_getf pcie_wrap_pciew_int_lmac_err_stat_err_u_4_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_u_4_getf  pcie_wrap_pciew_int_smac_err_stat_err_u_4_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_u_3_getf pcie_wrap_pciew_int_lmac_err_stat_err_u_3_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_u_3_getf  pcie_wrap_pciew_int_smac_err_stat_err_u_3_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_u_2_getf pcie_wrap_pciew_int_lmac_err_stat_err_u_2_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_u_2_getf  pcie_wrap_pciew_int_smac_err_stat_err_u_2_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_u_1_getf pcie_wrap_pciew_int_lmac_err_stat_err_u_1_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_u_1_getf  pcie_wrap_pciew_int_smac_err_stat_err_u_1_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_int_err_stat_err_u_0_getf pcie_wrap_pciew_int_lmac_err_stat_err_u_0_getf
#else
#define  pcie_wrap_pciew_int_err_stat_err_u_0_getf  pcie_wrap_pciew_int_smac_err_stat_err_u_0_getf
#endif


#if PRIM_BAND
#define   pcie_wrap_pciew_error_int_en_get  pcie_wrap_pciew_error_int_lmac_en_get
#else
#define   pcie_wrap_pciew_error_int_en_get   pcie_wrap_pciew_error_int_smac_en_get
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_set pcie_wrap_pciew_error_int_lmac_en_set
#else
#define  pcie_wrap_pciew_error_int_en_set  pcie_wrap_pciew_error_int_smac_en_set
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_pack pcie_wrap_pciew_error_int_lmac_en_pack
#else
#define  pcie_wrap_pciew_error_int_en_pack  pcie_wrap_pciew_error_int_smac_en_pack
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_unpack pcie_wrap_pciew_error_int_lmac_en_unpack
#else
#define  pcie_wrap_pciew_error_int_en_unpack  pcie_wrap_pciew_error_int_smac_en_unpack
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_15_getf pcie_wrap_pciew_error_int_lmac_en_en_d_15_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_15_getf  pcie_wrap_pciew_error_int_smac_en_en_d_15_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_15_setf pcie_wrap_pciew_error_int_lmac_en_en_d_15_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_15_setf  pcie_wrap_pciew_error_int_smac_en_en_d_15_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_14_getf pcie_wrap_pciew_error_int_lmac_en_en_d_14_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_14_getf  pcie_wrap_pciew_error_int_smac_en_en_d_14_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_14_setf pcie_wrap_pciew_error_int_lmac_en_en_d_14_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_14_setf  pcie_wrap_pciew_error_int_smac_en_en_d_14_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_13_getf pcie_wrap_pciew_error_int_lmac_en_en_d_13_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_13_getf  pcie_wrap_pciew_error_int_smac_en_en_d_13_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_13_setf pcie_wrap_pciew_error_int_lmac_en_en_d_13_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_13_setf  pcie_wrap_pciew_error_int_smac_en_en_d_13_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_12_getf pcie_wrap_pciew_error_int_lmac_en_en_d_12_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_12_getf  pcie_wrap_pciew_error_int_smac_en_en_d_12_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_12_setf pcie_wrap_pciew_error_int_lmac_en_en_d_12_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_12_setf  pcie_wrap_pciew_error_int_smac_en_en_d_12_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_11_getf pcie_wrap_pciew_error_int_lmac_en_en_d_11_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_11_getf  pcie_wrap_pciew_error_int_smac_en_en_d_11_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_11_setf pcie_wrap_pciew_error_int_lmac_en_en_d_11_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_11_setf  pcie_wrap_pciew_error_int_smac_en_en_d_11_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_10_getf pcie_wrap_pciew_error_int_lmac_en_en_d_10_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_10_getf  pcie_wrap_pciew_error_int_smac_en_en_d_10_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_10_setf pcie_wrap_pciew_error_int_lmac_en_en_d_10_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_10_setf  pcie_wrap_pciew_error_int_smac_en_en_d_10_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_9_getf pcie_wrap_pciew_error_int_lmac_en_en_d_9_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_9_getf  pcie_wrap_pciew_error_int_smac_en_en_d_9_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_9_setf pcie_wrap_pciew_error_int_lmac_en_en_d_9_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_9_setf  pcie_wrap_pciew_error_int_smac_en_en_d_9_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_8_getf pcie_wrap_pciew_error_int_lmac_en_en_d_8_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_8_getf  pcie_wrap_pciew_error_int_smac_en_en_d_8_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_8_setf pcie_wrap_pciew_error_int_lmac_en_en_d_8_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_8_setf  pcie_wrap_pciew_error_int_smac_en_en_d_8_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_7_getf pcie_wrap_pciew_error_int_lmac_en_en_d_7_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_7_getf  pcie_wrap_pciew_error_int_smac_en_en_d_7_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_7_setf pcie_wrap_pciew_error_int_lmac_en_en_d_7_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_7_setf  pcie_wrap_pciew_error_int_smac_en_en_d_7_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_6_getf pcie_wrap_pciew_error_int_lmac_en_en_d_6_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_6_getf  pcie_wrap_pciew_error_int_smac_en_en_d_6_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_6_setf pcie_wrap_pciew_error_int_lmac_en_en_d_6_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_6_setf  pcie_wrap_pciew_error_int_smac_en_en_d_6_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_5_getf pcie_wrap_pciew_error_int_lmac_en_en_d_5_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_5_getf  pcie_wrap_pciew_error_int_smac_en_en_d_5_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_5_setf pcie_wrap_pciew_error_int_lmac_en_en_d_5_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_5_setf  pcie_wrap_pciew_error_int_smac_en_en_d_5_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_4_getf pcie_wrap_pciew_error_int_lmac_en_en_d_4_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_4_getf  pcie_wrap_pciew_error_int_smac_en_en_d_4_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_4_setf pcie_wrap_pciew_error_int_lmac_en_en_d_4_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_4_setf  pcie_wrap_pciew_error_int_smac_en_en_d_4_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_3_getf pcie_wrap_pciew_error_int_lmac_en_en_d_3_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_3_getf  pcie_wrap_pciew_error_int_smac_en_en_d_3_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_3_setf pcie_wrap_pciew_error_int_lmac_en_en_d_3_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_3_setf  pcie_wrap_pciew_error_int_smac_en_en_d_3_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_2_getf pcie_wrap_pciew_error_int_lmac_en_en_d_2_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_2_getf  pcie_wrap_pciew_error_int_smac_en_en_d_2_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_2_setf pcie_wrap_pciew_error_int_lmac_en_en_d_2_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_2_setf  pcie_wrap_pciew_error_int_smac_en_en_d_2_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_1_getf pcie_wrap_pciew_error_int_lmac_en_en_d_1_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_1_getf  pcie_wrap_pciew_error_int_smac_en_en_d_1_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_1_setf pcie_wrap_pciew_error_int_lmac_en_en_d_1_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_1_setf  pcie_wrap_pciew_error_int_smac_en_en_d_1_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_0_getf pcie_wrap_pciew_error_int_lmac_en_en_d_0_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_0_getf  pcie_wrap_pciew_error_int_smac_en_en_d_0_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_d_0_setf pcie_wrap_pciew_error_int_lmac_en_en_d_0_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_d_0_setf  pcie_wrap_pciew_error_int_smac_en_en_d_0_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_15_getf pcie_wrap_pciew_error_int_lmac_en_en_u_15_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_15_getf  pcie_wrap_pciew_error_int_smac_en_en_u_15_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_15_setf pcie_wrap_pciew_error_int_lmac_en_en_u_15_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_15_setf  pcie_wrap_pciew_error_int_smac_en_en_u_15_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_14_getf pcie_wrap_pciew_error_int_lmac_en_en_u_14_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_14_getf  pcie_wrap_pciew_error_int_smac_en_en_u_14_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_14_setf pcie_wrap_pciew_error_int_lmac_en_en_u_14_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_14_setf  pcie_wrap_pciew_error_int_smac_en_en_u_14_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_13_getf pcie_wrap_pciew_error_int_lmac_en_en_u_13_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_13_getf  pcie_wrap_pciew_error_int_smac_en_en_u_13_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_13_setf pcie_wrap_pciew_error_int_lmac_en_en_u_13_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_13_setf  pcie_wrap_pciew_error_int_smac_en_en_u_13_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_12_getf pcie_wrap_pciew_error_int_lmac_en_en_u_12_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_12_getf  pcie_wrap_pciew_error_int_smac_en_en_u_12_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_12_setf pcie_wrap_pciew_error_int_lmac_en_en_u_12_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_12_setf  pcie_wrap_pciew_error_int_smac_en_en_u_12_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_11_getf pcie_wrap_pciew_error_int_lmac_en_en_u_11_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_11_getf  pcie_wrap_pciew_error_int_smac_en_en_u_11_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_11_setf pcie_wrap_pciew_error_int_lmac_en_en_u_11_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_11_setf  pcie_wrap_pciew_error_int_smac_en_en_u_11_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_10_getf pcie_wrap_pciew_error_int_lmac_en_en_u_10_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_10_getf  pcie_wrap_pciew_error_int_smac_en_en_u_10_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_10_setf pcie_wrap_pciew_error_int_lmac_en_en_u_10_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_10_setf  pcie_wrap_pciew_error_int_smac_en_en_u_10_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_9_getf pcie_wrap_pciew_error_int_lmac_en_en_u_9_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_9_getf  pcie_wrap_pciew_error_int_smac_en_en_u_9_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_9_setf pcie_wrap_pciew_error_int_lmac_en_en_u_9_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_9_setf  pcie_wrap_pciew_error_int_smac_en_en_u_9_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_8_getf pcie_wrap_pciew_error_int_lmac_en_en_u_8_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_8_getf  pcie_wrap_pciew_error_int_smac_en_en_u_8_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_8_setf pcie_wrap_pciew_error_int_lmac_en_en_u_8_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_8_setf  pcie_wrap_pciew_error_int_smac_en_en_u_8_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_7_getf pcie_wrap_pciew_error_int_lmac_en_en_u_7_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_7_getf  pcie_wrap_pciew_error_int_smac_en_en_u_7_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_7_setf pcie_wrap_pciew_error_int_lmac_en_en_u_7_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_7_setf  pcie_wrap_pciew_error_int_smac_en_en_u_7_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_6_getf pcie_wrap_pciew_error_int_lmac_en_en_u_6_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_6_getf  pcie_wrap_pciew_error_int_smac_en_en_u_6_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_6_setf pcie_wrap_pciew_error_int_lmac_en_en_u_6_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_6_setf  pcie_wrap_pciew_error_int_smac_en_en_u_6_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_5_getf pcie_wrap_pciew_error_int_lmac_en_en_u_5_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_5_getf  pcie_wrap_pciew_error_int_smac_en_en_u_5_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_5_setf pcie_wrap_pciew_error_int_lmac_en_en_u_5_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_5_setf  pcie_wrap_pciew_error_int_smac_en_en_u_5_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_4_getf pcie_wrap_pciew_error_int_lmac_en_en_u_4_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_4_getf  pcie_wrap_pciew_error_int_smac_en_en_u_4_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_4_setf pcie_wrap_pciew_error_int_lmac_en_en_u_4_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_4_setf  pcie_wrap_pciew_error_int_smac_en_en_u_4_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_3_getf pcie_wrap_pciew_error_int_lmac_en_en_u_3_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_3_getf  pcie_wrap_pciew_error_int_smac_en_en_u_3_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_3_setf pcie_wrap_pciew_error_int_lmac_en_en_u_3_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_3_setf  pcie_wrap_pciew_error_int_smac_en_en_u_3_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_2_getf pcie_wrap_pciew_error_int_lmac_en_en_u_2_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_2_getf  pcie_wrap_pciew_error_int_smac_en_en_u_2_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_2_setf pcie_wrap_pciew_error_int_lmac_en_en_u_2_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_2_setf  pcie_wrap_pciew_error_int_smac_en_en_u_2_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_1_getf pcie_wrap_pciew_error_int_lmac_en_en_u_1_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_1_getf  pcie_wrap_pciew_error_int_smac_en_en_u_1_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_1_setf pcie_wrap_pciew_error_int_lmac_en_en_u_1_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_1_setf  pcie_wrap_pciew_error_int_smac_en_en_u_1_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_0_getf pcie_wrap_pciew_error_int_lmac_en_en_u_0_getf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_0_getf  pcie_wrap_pciew_error_int_smac_en_en_u_0_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_error_int_en_en_u_0_setf pcie_wrap_pciew_error_int_lmac_en_en_u_0_setf
#else
#define  pcie_wrap_pciew_error_int_en_en_u_0_setf  pcie_wrap_pciew_error_int_smac_en_en_u_0_setf
#endif


#if PRIM_BAND
#define   pcie_wrap_pciew_ch_clean_int_en_get  pcie_wrap_pciew_ch_clean_int_lmac_en_get
#else
#define   pcie_wrap_pciew_ch_clean_int_en_get   pcie_wrap_pciew_ch_clean_int_smac_en_get
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_set pcie_wrap_pciew_ch_clean_int_lmac_en_set
#else
#define  pcie_wrap_pciew_ch_clean_int_en_set  pcie_wrap_pciew_ch_clean_int_smac_en_set
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_pack pcie_wrap_pciew_ch_clean_int_lmac_en_pack
#else
#define  pcie_wrap_pciew_ch_clean_int_en_pack  pcie_wrap_pciew_ch_clean_int_smac_en_pack
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_unpack pcie_wrap_pciew_ch_clean_int_lmac_en_unpack
#else
#define  pcie_wrap_pciew_ch_clean_int_en_unpack  pcie_wrap_pciew_ch_clean_int_smac_en_unpack
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_15_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_15_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_15_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_15_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_15_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_15_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_15_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_15_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_14_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_14_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_14_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_14_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_14_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_14_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_14_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_14_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_13_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_13_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_13_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_13_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_13_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_13_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_13_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_13_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_12_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_12_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_12_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_12_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_12_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_12_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_12_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_12_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_11_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_11_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_11_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_11_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_11_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_11_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_11_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_11_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_10_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_10_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_10_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_10_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_10_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_10_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_10_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_10_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_9_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_9_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_9_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_9_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_9_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_9_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_9_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_9_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_8_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_8_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_8_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_8_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_8_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_8_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_8_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_8_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_7_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_7_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_7_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_7_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_7_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_7_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_7_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_7_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_6_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_6_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_6_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_6_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_6_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_6_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_6_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_6_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_5_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_5_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_5_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_5_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_5_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_5_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_5_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_5_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_4_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_4_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_4_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_4_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_4_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_4_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_4_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_4_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_3_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_3_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_3_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_3_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_3_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_3_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_3_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_3_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_2_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_2_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_2_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_2_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_2_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_2_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_2_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_2_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_1_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_1_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_1_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_1_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_1_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_1_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_1_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_1_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_0_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_0_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_0_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_0_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_0_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_d_0_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_d_0_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_d_0_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_15_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_15_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_15_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_15_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_15_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_15_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_15_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_15_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_14_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_14_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_14_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_14_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_14_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_14_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_14_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_14_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_13_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_13_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_13_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_13_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_13_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_13_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_13_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_13_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_12_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_12_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_12_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_12_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_12_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_12_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_12_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_12_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_11_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_11_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_11_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_11_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_11_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_11_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_11_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_11_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_10_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_10_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_10_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_10_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_10_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_10_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_10_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_10_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_9_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_9_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_9_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_9_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_9_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_9_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_9_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_9_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_8_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_8_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_8_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_8_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_8_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_8_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_8_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_8_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_7_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_7_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_7_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_7_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_7_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_7_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_7_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_7_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_6_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_6_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_6_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_6_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_6_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_6_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_6_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_6_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_5_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_5_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_5_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_5_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_5_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_5_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_5_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_5_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_4_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_4_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_4_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_4_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_4_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_4_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_4_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_4_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_3_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_3_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_3_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_3_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_3_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_3_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_3_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_3_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_2_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_2_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_2_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_2_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_2_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_2_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_2_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_2_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_1_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_1_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_1_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_1_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_1_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_1_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_1_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_1_setf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_0_getf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_0_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_0_getf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_0_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_0_setf pcie_wrap_pciew_ch_clean_int_lmac_en_en_u_0_setf
#else
#define  pcie_wrap_pciew_ch_clean_int_en_en_u_0_setf  pcie_wrap_pciew_ch_clean_int_smac_en_en_u_0_setf
#endif


#if PRIM_BAND
#define   pcie_wrap_pciew_ch_clean_int_stat_get  pcie_wrap_pciew_ch_clean_int_lmac_stat_get
#else
#define   pcie_wrap_pciew_ch_clean_int_stat_get   pcie_wrap_pciew_ch_clean_int_smac_stat_get
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_unpack pcie_wrap_pciew_ch_clean_int_lmac_stat_unpack
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_unpack  pcie_wrap_pciew_ch_clean_int_smac_stat_unpack
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_d_16_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_d_16_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_d_16_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_d_16_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_d_15_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_d_15_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_d_15_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_d_15_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_d_14_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_d_14_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_d_14_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_d_14_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_d_13_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_d_13_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_d_13_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_d_13_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_d_12_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_d_12_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_d_12_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_d_12_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_d_11_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_d_11_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_d_11_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_d_11_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_d_10_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_d_10_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_d_10_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_d_10_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_d_9_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_d_9_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_d_9_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_d_9_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_d_7_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_d_7_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_d_7_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_d_7_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_d_6_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_d_6_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_d_6_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_d_6_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_d_5_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_d_5_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_d_5_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_d_5_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_d_4_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_d_4_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_d_4_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_d_4_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_d_3_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_d_3_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_d_3_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_d_3_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_d_2_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_d_2_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_d_2_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_d_2_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_d_1_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_d_1_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_d_1_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_d_1_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_d_0_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_d_0_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_d_0_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_d_0_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_u_15_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_u_15_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_u_15_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_u_15_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_u_14_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_u_14_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_u_14_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_u_14_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_u_13_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_u_13_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_u_13_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_u_13_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_u_12_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_u_12_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_u_12_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_u_12_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_u_11_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_u_11_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_u_11_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_u_11_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_u_10_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_u_10_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_u_10_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_u_10_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_u_9_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_u_9_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_u_9_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_u_9_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_u_8_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_u_8_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_u_8_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_u_8_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_u_7_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_u_7_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_u_7_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_u_7_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_u_6_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_u_6_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_u_6_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_u_6_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_u_5_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_u_5_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_u_5_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_u_5_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_u_4_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_u_4_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_u_4_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_u_4_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_u_3_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_u_3_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_u_3_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_u_3_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_u_2_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_u_2_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_u_2_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_u_2_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_u_1_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_u_1_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_u_1_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_u_1_clean_getf
#endif


#if PRIM_BAND
#define  pcie_wrap_pciew_ch_clean_int_stat_u_0_clean_getf pcie_wrap_pciew_ch_clean_int_lmac_stat_u_0_clean_getf
#else
#define  pcie_wrap_pciew_ch_clean_int_stat_u_0_clean_getf  pcie_wrap_pciew_ch_clean_int_smac_stat_u_0_clean_getf
#endif


// end CDB support section
//-------------------------
#undef DBG_FILEID
#endif //_REG_PCIE_WRAP_H_
