#ifndef _REG_BT_CONTROLLER_H_
#define _REG_BT_CONTROLLER_H_

#include <stdint.h>
#include "_reg_bt_controller.h"
#include "compiler.h"
#include "arch.h"
#include "reg_access.h"

#define DBG_FILEID __REG_BT_CONTROLLER__H__FILEID__

#define REG_BT_CONTROLLER_COUNT  430


/**
 * @brief INSTRUCTION_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 instruction_reg_8_bits_are_reserved 0x0
 *    07:00 instruction               0x0
 * </pre>
 */
#define BT_CONTROLLER_INSTRUCTION_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000000)
#define BT_CONTROLLER_INSTRUCTION_REGISTER_OFFSET      0x00000000
#define BT_CONTROLLER_INSTRUCTION_REGISTER_INDEX       0x00000000
#define BT_CONTROLLER_INSTRUCTION_REGISTER_RESET       0x00000000

__INLINE uint32_t  bt_controller_instruction_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_INSTRUCTION_REGISTER_ADDR);
}

__INLINE void bt_controller_instruction_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_INSTRUCTION_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_INSTRUCTION_REGISTER_INSTRUCTION_REG_8_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_INSTRUCTION_REGISTER_INSTRUCTION_REG_8_BITS_ARE_RESERVED_LSB    8
#define BT_CONTROLLER_INSTRUCTION_REGISTER_INSTRUCTION_REG_8_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_INSTRUCTION_REGISTER_INSTRUCTION_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_INSTRUCTION_REGISTER_INSTRUCTION_LSB    0
#define BT_CONTROLLER_INSTRUCTION_REGISTER_INSTRUCTION_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_INSTRUCTION_REGISTER_INSTRUCTION_REG_8_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_INSTRUCTION_REGISTER_INSTRUCTION_RST    0x0

__INLINE void bt_controller_instruction_register_pack(uint8_t instruction_reg_8_bits_are_reserved, uint8_t instruction)
{
	ASSERT_ERR((((uint32_t)instruction_reg_8_bits_are_reserved << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)instruction << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_INSTRUCTION_REGISTER_ADDR,  ((uint32_t)instruction_reg_8_bits_are_reserved << 8) |((uint32_t)instruction << 0));
}

__INLINE void bt_controller_instruction_register_unpack(uint8_t* instruction_reg_8_bits_are_reserved, uint8_t* instruction)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INSTRUCTION_REGISTER_ADDR);

	*instruction_reg_8_bits_are_reserved = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*instruction = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_instruction_register_instruction_reg_8_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INSTRUCTION_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_instruction_register_instruction_setf(uint8_t instruction)
{
	ASSERT_ERR((((uint32_t)instruction << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_INSTRUCTION_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_INSTRUCTION_REGISTER_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)instruction <<0));
}

/**
 * @brief CONNECTOR_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    mss_pnid                  0              
 *    14:13 connector_reg_13_to_14_bits_are_reserved 0x0
 *    12:11 Piconet                   0x0
 *    10    Codec_link                0              
 *    09    e_SCO                     0              
 *    08    Tdd                       0              
 *    07:05 lt_addr                   0x0
 *    04    Make                      0              
 *    03    Acl                       0              
 *    02:00 Sco_or_Esco_index         0x0
 * </pre>
 */
#define BT_CONTROLLER_CONNECTOR_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000004)
#define BT_CONTROLLER_CONNECTOR_REGISTER_OFFSET      0x00000004
#define BT_CONTROLLER_CONNECTOR_REGISTER_INDEX       0x00000001
#define BT_CONTROLLER_CONNECTOR_REGISTER_RESET       0x00000000

__INLINE uint32_t  bt_controller_connector_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR);
}

__INLINE void bt_controller_connector_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CONNECTOR_REGISTER_MSS_PNID_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_CONNECTOR_REGISTER_MSS_PNID_POS    15
#define BT_CONTROLLER_CONNECTOR_REGISTER_CONNECTOR_REG_13_TO_14_BITS_ARE_RESERVED_MASK    ((uint32_t)0x00006000)
#define BT_CONTROLLER_CONNECTOR_REGISTER_CONNECTOR_REG_13_TO_14_BITS_ARE_RESERVED_LSB    13
#define BT_CONTROLLER_CONNECTOR_REGISTER_CONNECTOR_REG_13_TO_14_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_CONNECTOR_REGISTER_PICONET_MASK    ((uint32_t)0x00001800)
#define BT_CONTROLLER_CONNECTOR_REGISTER_PICONET_LSB    11
#define BT_CONTROLLER_CONNECTOR_REGISTER_PICONET_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_CONNECTOR_REGISTER_CODEC_LINK_BIT    ((uint32_t)0x00000400)
#define BT_CONTROLLER_CONNECTOR_REGISTER_CODEC_LINK_POS    10
#define BT_CONTROLLER_CONNECTOR_REGISTER_E_SCO_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_CONNECTOR_REGISTER_E_SCO_POS    9
#define BT_CONTROLLER_CONNECTOR_REGISTER_TDD_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_CONNECTOR_REGISTER_TDD_POS    8
#define BT_CONTROLLER_CONNECTOR_REGISTER_LT_ADDR_MASK    ((uint32_t)0x000000E0)
#define BT_CONTROLLER_CONNECTOR_REGISTER_LT_ADDR_LSB    5
#define BT_CONTROLLER_CONNECTOR_REGISTER_LT_ADDR_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_CONNECTOR_REGISTER_MAKE_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_CONNECTOR_REGISTER_MAKE_POS    4
#define BT_CONTROLLER_CONNECTOR_REGISTER_ACL_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_CONNECTOR_REGISTER_ACL_POS    3
#define BT_CONTROLLER_CONNECTOR_REGISTER_SCO_OR_ESCO_INDEX_MASK    ((uint32_t)0x00000007)
#define BT_CONTROLLER_CONNECTOR_REGISTER_SCO_OR_ESCO_INDEX_LSB    0
#define BT_CONTROLLER_CONNECTOR_REGISTER_SCO_OR_ESCO_INDEX_WIDTH    ((uint32_t)0x00000003)

#define BT_CONTROLLER_CONNECTOR_REGISTER_MSS_PNID_RST    0x0
#define BT_CONTROLLER_CONNECTOR_REGISTER_CONNECTOR_REG_13_TO_14_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_CONNECTOR_REGISTER_PICONET_RST    0x0
#define BT_CONTROLLER_CONNECTOR_REGISTER_CODEC_LINK_RST    0x0
#define BT_CONTROLLER_CONNECTOR_REGISTER_E_SCO_RST    0x0
#define BT_CONTROLLER_CONNECTOR_REGISTER_TDD_RST    0x0
#define BT_CONTROLLER_CONNECTOR_REGISTER_LT_ADDR_RST    0x0
#define BT_CONTROLLER_CONNECTOR_REGISTER_MAKE_RST    0x0
#define BT_CONTROLLER_CONNECTOR_REGISTER_ACL_RST    0x0
#define BT_CONTROLLER_CONNECTOR_REGISTER_SCO_OR_ESCO_INDEX_RST    0x0

__INLINE void bt_controller_connector_register_pack(uint8_t mss_pnid, uint8_t connector_reg_13_to_14_bits_are_reserved, uint8_t piconet, uint8_t codec_link, uint8_t e_sco, uint8_t tdd, uint8_t lt_addr, uint8_t make, uint8_t acl, uint8_t sco_or_esco_index)
{
	ASSERT_ERR((((uint32_t)mss_pnid << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)connector_reg_13_to_14_bits_are_reserved << 13) & ~((uint32_t)0x00006000)) == 0);
	ASSERT_ERR((((uint32_t)piconet << 11) & ~((uint32_t)0x00001800)) == 0);
	ASSERT_ERR((((uint32_t)codec_link << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)e_sco << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)tdd << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)lt_addr << 5) & ~((uint32_t)0x000000E0)) == 0);
	ASSERT_ERR((((uint32_t)make << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)acl << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)sco_or_esco_index << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR,  ((uint32_t)mss_pnid << 15) |((uint32_t)connector_reg_13_to_14_bits_are_reserved << 13) |((uint32_t)piconet << 11) |((uint32_t)codec_link << 10) |((uint32_t)e_sco << 9) |((uint32_t)tdd << 8) |((uint32_t)lt_addr << 5) |((uint32_t)make << 4) |((uint32_t)acl << 3) |((uint32_t)sco_or_esco_index << 0));
}

__INLINE void bt_controller_connector_register_unpack(uint8_t* mss_pnid, uint8_t* connector_reg_13_to_14_bits_are_reserved, uint8_t* piconet, uint8_t* codec_link, uint8_t* e_sco, uint8_t* tdd, uint8_t* lt_addr, uint8_t* make, uint8_t* acl, uint8_t* sco_or_esco_index)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR);

	*mss_pnid = (localVal & ((uint32_t)0x00008000)) >>  15;
	*connector_reg_13_to_14_bits_are_reserved = (localVal & ((uint32_t)0x00006000)) >>  13;
	*piconet = (localVal & ((uint32_t)0x00001800)) >>  11;
	*codec_link = (localVal & ((uint32_t)0x00000400)) >>  10;
	*e_sco = (localVal & ((uint32_t)0x00000200)) >>  9;
	*tdd = (localVal & ((uint32_t)0x00000100)) >>  8;
	*lt_addr = (localVal & ((uint32_t)0x000000E0)) >>  5;
	*make = (localVal & ((uint32_t)0x00000010)) >>  4;
	*acl = (localVal & ((uint32_t)0x00000008)) >>  3;
	*sco_or_esco_index = (localVal & ((uint32_t)0x00000007)) >>  0;
}

__INLINE uint8_t bt_controller_connector_register_mss_pnid_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_connector_register_mss_pnid_setf(uint8_t msspnid)
{
	ASSERT_ERR((((uint32_t)msspnid << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)msspnid <<15));
}
__INLINE uint8_t bt_controller_connector_register_connector_reg_13_to_14_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00006000)) >> 13);
}
__INLINE uint8_t bt_controller_connector_register_piconet_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001800)) >> 11);
}
__INLINE void bt_controller_connector_register_piconet_setf(uint8_t piconet)
{
	ASSERT_ERR((((uint32_t)piconet << 11) & ~((uint32_t)0x00001800)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR) & ~((uint32_t)0x00001800)) | ((uint32_t)piconet <<11));
}
__INLINE void bt_controller_connector_register_codec_link_setf(uint8_t codeclink)
{
	ASSERT_ERR((((uint32_t)codeclink << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)codeclink <<10));
}
__INLINE void bt_controller_connector_register_e_sco_setf(uint8_t esco)
{
	ASSERT_ERR((((uint32_t)esco << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)esco <<9));
}
__INLINE void bt_controller_connector_register_tdd_setf(uint8_t tdd)
{
	ASSERT_ERR((((uint32_t)tdd << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)tdd <<8));
}
__INLINE uint8_t bt_controller_connector_register_lt_addr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000E0)) >> 5);
}
__INLINE void bt_controller_connector_register_lt_addr_setf(uint8_t ltaddr)
{
	ASSERT_ERR((((uint32_t)ltaddr << 5) & ~((uint32_t)0x000000E0)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR) & ~((uint32_t)0x000000E0)) | ((uint32_t)ltaddr <<5));
}
__INLINE uint8_t bt_controller_connector_register_make_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_connector_register_make_setf(uint8_t make)
{
	ASSERT_ERR((((uint32_t)make << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)make <<4));
}
__INLINE uint8_t bt_controller_connector_register_acl_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_connector_register_acl_setf(uint8_t acl)
{
	ASSERT_ERR((((uint32_t)acl << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)acl <<3));
}
__INLINE uint8_t bt_controller_connector_register_sco_or_esco_index_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000007)) >> 0);
}
__INLINE void bt_controller_connector_register_sco_or_esco_index_setf(uint8_t scoorescoindex)
{
	ASSERT_ERR((((uint32_t)scoorescoindex << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CONNECTOR_REGISTER_ADDR) & ~((uint32_t)0x00000007)) | ((uint32_t)scoorescoindex <<0));
}

/**
 * @brief RECEIVED_PAYLOAD_HEADER_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    Sco_rx                    0              
 *    14    Flow_bit                  0              
 *    13:12 Lch                       0x0
 *    11:10 received_payload_reg_10_11_bits_are_reserved 0x0
 *    09:00 Receive_length            0x0
 * </pre>
 */
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000008)
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_OFFSET      0x00000008
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_INDEX       0x00000002
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_RESET       0x00000000

__INLINE uint32_t  bt_controller_received_payload_header_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_ADDR);
}

// field definitions
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_SCO_RX_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_SCO_RX_POS    15
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_FLOW_BIT_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_FLOW_BIT_POS    14
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_LCH_MASK    ((uint32_t)0x00003000)
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_LCH_LSB    12
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_LCH_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_RECEIVED_PAYLOAD_REG_10_11_BITS_ARE_RESERVED_MASK    ((uint32_t)0x00000C00)
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_RECEIVED_PAYLOAD_REG_10_11_BITS_ARE_RESERVED_LSB    10
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_RECEIVED_PAYLOAD_REG_10_11_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_RECEIVE_LENGTH_MASK    ((uint32_t)0x000003FF)
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_RECEIVE_LENGTH_LSB    0
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_RECEIVE_LENGTH_WIDTH    ((uint32_t)0x0000000A)

#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_SCO_RX_RST    0x0
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_FLOW_BIT_RST    0x0
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_LCH_RST    0x0
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_RECEIVED_PAYLOAD_REG_10_11_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_RECEIVE_LENGTH_RST    0x0

__INLINE void bt_controller_received_payload_header_register_unpack(uint8_t* sco_rx, uint8_t* flow_bit, uint8_t* lch, uint8_t* received_payload_reg_10_11_bits_are_reserved, uint16_t* receive_length)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_ADDR);

	*sco_rx = (localVal & ((uint32_t)0x00008000)) >>  15;
	*flow_bit = (localVal & ((uint32_t)0x00004000)) >>  14;
	*lch = (localVal & ((uint32_t)0x00003000)) >>  12;
	*received_payload_reg_10_11_bits_are_reserved = (localVal & ((uint32_t)0x00000C00)) >>  10;
	*receive_length = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint8_t bt_controller_received_payload_header_register_sco_rx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t bt_controller_received_payload_header_register_flow_bit_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t bt_controller_received_payload_header_register_lch_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003000)) >> 12);
}
__INLINE uint8_t bt_controller_received_payload_header_register_received_payload_reg_10_11_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000C00)) >> 10);
}
__INLINE uint16_t bt_controller_received_payload_header_register_receive_length_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVED_PAYLOAD_HEADER_REGISTER_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}

/**
 * @brief RECEIVE_STATUS_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    Pic_sts_rx                0              
 *    14    Ar_id                     0              
 *    13:11 Am_addr                   0x0
 *    10    Flow                      0              
 *    09    Arqn                      0              
 *    08    Seqn                      0              
 *    07:04 Type                      0x0
 *    03    Crc_err                   0              
 *    02    Sts_eir                   0              
 *    01    Hec_err                   0              
 *    00    Pkt_rx                    0              
 * </pre>
 */
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000000C)
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_OFFSET      0x0000000C
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_INDEX       0x00000003
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_RESET       0x00000000

__INLINE uint32_t  bt_controller_receive_status_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ADDR);
}

// field definitions
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_PIC_STS_RX_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_PIC_STS_RX_POS    15
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_AR_ID_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_AR_ID_POS    14
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_AM_ADDR_MASK    ((uint32_t)0x00003800)
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_AM_ADDR_LSB    11
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_AM_ADDR_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_FLOW_BIT    ((uint32_t)0x00000400)
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_FLOW_POS    10
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ARQN_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ARQN_POS    9
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_SEQN_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_SEQN_POS    8
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_TYPE_MASK    ((uint32_t)0x000000F0)
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_TYPE_LSB    4
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_TYPE_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_CRC_ERR_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_CRC_ERR_POS    3
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_STS_EIR_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_STS_EIR_POS    2
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_HEC_ERR_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_HEC_ERR_POS    1
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_PKT_RX_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_PKT_RX_POS    0

#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_PIC_STS_RX_RST    0x0
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_AR_ID_RST    0x0
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_AM_ADDR_RST    0x0
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_FLOW_RST    0x0
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ARQN_RST    0x0
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_SEQN_RST    0x0
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_TYPE_RST    0x0
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_CRC_ERR_RST    0x0
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_STS_EIR_RST    0x0
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_HEC_ERR_RST    0x0
#define BT_CONTROLLER_RECEIVE_STATUS_REGISTER_PKT_RX_RST    0x0

__INLINE void bt_controller_receive_status_register_unpack(uint8_t* pic_sts_rx, uint8_t* ar_id, uint8_t* am_addr, uint8_t* flow, uint8_t* arqn, uint8_t* seqn, uint8_t* type, uint8_t* crc_err, uint8_t* sts_eir, uint8_t* hec_err, uint8_t* pkt_rx)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ADDR);

	*pic_sts_rx = (localVal & ((uint32_t)0x00008000)) >>  15;
	*ar_id = (localVal & ((uint32_t)0x00004000)) >>  14;
	*am_addr = (localVal & ((uint32_t)0x00003800)) >>  11;
	*flow = (localVal & ((uint32_t)0x00000400)) >>  10;
	*arqn = (localVal & ((uint32_t)0x00000200)) >>  9;
	*seqn = (localVal & ((uint32_t)0x00000100)) >>  8;
	*type = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*crc_err = (localVal & ((uint32_t)0x00000008)) >>  3;
	*sts_eir = (localVal & ((uint32_t)0x00000004)) >>  2;
	*hec_err = (localVal & ((uint32_t)0x00000002)) >>  1;
	*pkt_rx = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_receive_status_register_pic_sts_rx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t bt_controller_receive_status_register_ar_id_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t bt_controller_receive_status_register_am_addr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003800)) >> 11);
}
__INLINE uint8_t bt_controller_receive_status_register_flow_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t bt_controller_receive_status_register_arqn_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t bt_controller_receive_status_register_seqn_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t bt_controller_receive_status_register_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE uint8_t bt_controller_receive_status_register_crc_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t bt_controller_receive_status_register_sts_eir_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t bt_controller_receive_status_register_hec_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t bt_controller_receive_status_register_pkt_rx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RECEIVE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief TRANSMIT_STATUS register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:11 transmit_sts_reg_11_to_15_bits_are_reserved 0x0
 *    10    Sco_tx                    0              
 *    09    Pic_tx                    0              
 *    08    Tx_id                     0              
 *    07:04 Tx_Type                   0x0
 *    03:01 Tx_am_addr                0x0
 *    00    Pkt_tx                    0              
 * </pre>
 */
#define BT_CONTROLLER_TRANSMIT_STATUS_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000010)
#define BT_CONTROLLER_TRANSMIT_STATUS_OFFSET      0x00000010
#define BT_CONTROLLER_TRANSMIT_STATUS_INDEX       0x00000004
#define BT_CONTROLLER_TRANSMIT_STATUS_RESET       0x00000000

__INLINE uint32_t  bt_controller_transmit_status_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TRANSMIT_STATUS_ADDR);
}

// field definitions
#define BT_CONTROLLER_TRANSMIT_STATUS_TRANSMIT_STS_REG_11_TO_15_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000F800)
#define BT_CONTROLLER_TRANSMIT_STATUS_TRANSMIT_STS_REG_11_TO_15_BITS_ARE_RESERVED_LSB    11
#define BT_CONTROLLER_TRANSMIT_STATUS_TRANSMIT_STS_REG_11_TO_15_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_TRANSMIT_STATUS_SCO_TX_BIT    ((uint32_t)0x00000400)
#define BT_CONTROLLER_TRANSMIT_STATUS_SCO_TX_POS    10
#define BT_CONTROLLER_TRANSMIT_STATUS_PIC_TX_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_TRANSMIT_STATUS_PIC_TX_POS    9
#define BT_CONTROLLER_TRANSMIT_STATUS_TX_ID_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_TRANSMIT_STATUS_TX_ID_POS    8
#define BT_CONTROLLER_TRANSMIT_STATUS_TX_TYPE_MASK    ((uint32_t)0x000000F0)
#define BT_CONTROLLER_TRANSMIT_STATUS_TX_TYPE_LSB    4
#define BT_CONTROLLER_TRANSMIT_STATUS_TX_TYPE_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_TRANSMIT_STATUS_TX_AM_ADDR_MASK    ((uint32_t)0x0000000E)
#define BT_CONTROLLER_TRANSMIT_STATUS_TX_AM_ADDR_LSB    1
#define BT_CONTROLLER_TRANSMIT_STATUS_TX_AM_ADDR_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_TRANSMIT_STATUS_PKT_TX_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TRANSMIT_STATUS_PKT_TX_POS    0

#define BT_CONTROLLER_TRANSMIT_STATUS_TRANSMIT_STS_REG_11_TO_15_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TRANSMIT_STATUS_SCO_TX_RST    0x0
#define BT_CONTROLLER_TRANSMIT_STATUS_PIC_TX_RST    0x0
#define BT_CONTROLLER_TRANSMIT_STATUS_TX_ID_RST    0x0
#define BT_CONTROLLER_TRANSMIT_STATUS_TX_TYPE_RST    0x0
#define BT_CONTROLLER_TRANSMIT_STATUS_TX_AM_ADDR_RST    0x0
#define BT_CONTROLLER_TRANSMIT_STATUS_PKT_TX_RST    0x0

__INLINE void bt_controller_transmit_status_unpack(uint8_t* transmit_sts_reg_11_to_15_bits_are_reserved, uint8_t* sco_tx, uint8_t* pic_tx, uint8_t* tx_id, uint8_t* tx_type, uint8_t* tx_am_addr, uint8_t* pkt_tx)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRANSMIT_STATUS_ADDR);

	*transmit_sts_reg_11_to_15_bits_are_reserved = (localVal & ((uint32_t)0x0000F800)) >>  11;
	*sco_tx = (localVal & ((uint32_t)0x00000400)) >>  10;
	*pic_tx = (localVal & ((uint32_t)0x00000200)) >>  9;
	*tx_id = (localVal & ((uint32_t)0x00000100)) >>  8;
	*tx_type = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*tx_am_addr = (localVal & ((uint32_t)0x0000000E)) >>  1;
	*pkt_tx = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_transmit_status_transmit_sts_reg_11_to_15_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRANSMIT_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F800)) >> 11);
}
__INLINE uint8_t bt_controller_transmit_status_sco_tx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRANSMIT_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t bt_controller_transmit_status_pic_tx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRANSMIT_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t bt_controller_transmit_status_tx_id_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRANSMIT_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t bt_controller_transmit_status_tx_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRANSMIT_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE uint8_t bt_controller_transmit_status_tx_am_addr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRANSMIT_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000E)) >> 1);
}
__INLINE uint8_t bt_controller_transmit_status_pkt_tx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRANSMIT_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief FRXSTS_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:09 rx_fifo1_reg_mask_bits    0x0
 *    08:02 rx_fifo1_sts_reg_7_to_2_bits_are_reserved 0x1
 *    01    rx_fifo1_rx_fifo_empty    1              
 *    00    rx_fifo1_rx_fifo_full     0              
 * </pre>
 */
#define BT_CONTROLLER_FRXSTS_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000018)
#define BT_CONTROLLER_FRXSTS_1_REG_OFFSET      0x00000018
#define BT_CONTROLLER_FRXSTS_1_REG_INDEX       0x00000006
#define BT_CONTROLLER_FRXSTS_1_REG_RESET       0x00000002

__INLINE uint32_t  bt_controller_frxsts_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_FRXSTS_1_REG_ADDR);
}

__INLINE void bt_controller_frxsts_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_FRXSTS_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_FRXSTS_1_REG_RX_FIFO_1_REG_MASK_BITS_MASK    ((uint32_t)0x0000FE00)
#define BT_CONTROLLER_FRXSTS_1_REG_RX_FIFO_1_REG_MASK_BITS_LSB    9
#define BT_CONTROLLER_FRXSTS_1_REG_RX_FIFO_1_REG_MASK_BITS_WIDTH    ((uint32_t)0x00000007)
#define BT_CONTROLLER_FRXSTS_1_REG_RX_FIFO_1_STS_REG_7_TO_2_BITS_ARE_RESERVED_MASK    ((uint32_t)0x000001FC)
#define BT_CONTROLLER_FRXSTS_1_REG_RX_FIFO_1_STS_REG_7_TO_2_BITS_ARE_RESERVED_LSB    2
#define BT_CONTROLLER_FRXSTS_1_REG_RX_FIFO_1_STS_REG_7_TO_2_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000007)
#define BT_CONTROLLER_FRXSTS_1_REG_RX_FIFO_1_RX_FIFO_EMPTY_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_FRXSTS_1_REG_RX_FIFO_1_RX_FIFO_EMPTY_POS    1
#define BT_CONTROLLER_FRXSTS_1_REG_RX_FIFO_1_RX_FIFO_FULL_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_FRXSTS_1_REG_RX_FIFO_1_RX_FIFO_FULL_POS    0

#define BT_CONTROLLER_FRXSTS_1_REG_RX_FIFO_1_REG_MASK_BITS_RST    0x0
#define BT_CONTROLLER_FRXSTS_1_REG_RX_FIFO_1_STS_REG_7_TO_2_BITS_ARE_RESERVED_RST    0x1
#define BT_CONTROLLER_FRXSTS_1_REG_RX_FIFO_1_RX_FIFO_EMPTY_RST    0x1
#define BT_CONTROLLER_FRXSTS_1_REG_RX_FIFO_1_RX_FIFO_FULL_RST    0x0

__INLINE void bt_controller_frxsts_1_reg_pack(uint8_t rx_fifo1_reg_mask_bits, uint8_t rx_fifo1_sts_reg_7_to_2_bits_are_reserved, uint8_t rx_fifo1_rx_fifo_empty, uint8_t rx_fifo1_rx_fifo_full)
{
	ASSERT_ERR((((uint32_t)rx_fifo1_reg_mask_bits << 9) & ~((uint32_t)0x0000FE00)) == 0);
	ASSERT_ERR((((uint32_t)rx_fifo1_sts_reg_7_to_2_bits_are_reserved << 2) & ~((uint32_t)0x000001FC)) == 0);
	ASSERT_ERR((((uint32_t)rx_fifo1_rx_fifo_empty << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)rx_fifo1_rx_fifo_full << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_FRXSTS_1_REG_ADDR,  ((uint32_t)rx_fifo1_reg_mask_bits << 9) |((uint32_t)rx_fifo1_sts_reg_7_to_2_bits_are_reserved << 2) |((uint32_t)rx_fifo1_rx_fifo_empty << 1) |((uint32_t)rx_fifo1_rx_fifo_full << 0));
}

__INLINE void bt_controller_frxsts_1_reg_unpack(uint8_t* rx_fifo1_reg_mask_bits, uint8_t* rx_fifo1_sts_reg_7_to_2_bits_are_reserved, uint8_t* rx_fifo1_rx_fifo_empty, uint8_t* rx_fifo1_rx_fifo_full)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FRXSTS_1_REG_ADDR);

	*rx_fifo1_reg_mask_bits = (localVal & ((uint32_t)0x0000FE00)) >>  9;
	*rx_fifo1_sts_reg_7_to_2_bits_are_reserved = (localVal & ((uint32_t)0x000001FC)) >>  2;
	*rx_fifo1_rx_fifo_empty = (localVal & ((uint32_t)0x00000002)) >>  1;
	*rx_fifo1_rx_fifo_full = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_frxsts_1_reg_rx_fifo_1_reg_mask_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FRXSTS_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FE00)) >> 9);
}
__INLINE void bt_controller_frxsts_1_reg_rx_fifo_1_reg_mask_bits_setf(uint8_t rxfifo1regmaskbits)
{
	ASSERT_ERR((((uint32_t)rxfifo1regmaskbits << 9) & ~((uint32_t)0x0000FE00)) == 0);
	REG_PL_WR(BT_CONTROLLER_FRXSTS_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_FRXSTS_1_REG_ADDR) & ~((uint32_t)0x0000FE00)) | ((uint32_t)rxfifo1regmaskbits <<9));
}
__INLINE uint8_t bt_controller_frxsts_1_reg_rx_fifo_1_sts_reg_7_to_2_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FRXSTS_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000001FC)) >> 2);
}
__INLINE uint8_t bt_controller_frxsts_1_reg_rx_fifo_1_rx_fifo_empty_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FRXSTS_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t bt_controller_frxsts_1_reg_rx_fifo_1_rx_fifo_full_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FRXSTS_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief FRXSTS_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:09 rx_fifo2_reg_mask_bits    0x0
 *    08:02 rx_fifo2_sts_reg_7_to_2_bits_are_reserved 0x0
 *    01    rx_fifo2_rx_fifo_empty    1              
 *    00    rx_fifo2_rx_fifo_full     0              
 * </pre>
 */
#define BT_CONTROLLER_FRXSTS_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000001C)
#define BT_CONTROLLER_FRXSTS_2_REG_OFFSET      0x0000001C
#define BT_CONTROLLER_FRXSTS_2_REG_INDEX       0x00000007
#define BT_CONTROLLER_FRXSTS_2_REG_RESET       0x00000002

__INLINE uint32_t  bt_controller_frxsts_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_FRXSTS_2_REG_ADDR);
}

__INLINE void bt_controller_frxsts_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_FRXSTS_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_FRXSTS_2_REG_RX_FIFO_2_REG_MASK_BITS_MASK    ((uint32_t)0x0000FE00)
#define BT_CONTROLLER_FRXSTS_2_REG_RX_FIFO_2_REG_MASK_BITS_LSB    9
#define BT_CONTROLLER_FRXSTS_2_REG_RX_FIFO_2_REG_MASK_BITS_WIDTH    ((uint32_t)0x00000007)
#define BT_CONTROLLER_FRXSTS_2_REG_RX_FIFO_2_STS_REG_7_TO_2_BITS_ARE_RESERVED_MASK    ((uint32_t)0x000001FC)
#define BT_CONTROLLER_FRXSTS_2_REG_RX_FIFO_2_STS_REG_7_TO_2_BITS_ARE_RESERVED_LSB    2
#define BT_CONTROLLER_FRXSTS_2_REG_RX_FIFO_2_STS_REG_7_TO_2_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000007)
#define BT_CONTROLLER_FRXSTS_2_REG_RX_FIFO_2_RX_FIFO_EMPTY_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_FRXSTS_2_REG_RX_FIFO_2_RX_FIFO_EMPTY_POS    1
#define BT_CONTROLLER_FRXSTS_2_REG_RX_FIFO_2_RX_FIFO_FULL_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_FRXSTS_2_REG_RX_FIFO_2_RX_FIFO_FULL_POS    0

#define BT_CONTROLLER_FRXSTS_2_REG_RX_FIFO_2_REG_MASK_BITS_RST    0x0
#define BT_CONTROLLER_FRXSTS_2_REG_RX_FIFO_2_STS_REG_7_TO_2_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_FRXSTS_2_REG_RX_FIFO_2_RX_FIFO_EMPTY_RST    0x1
#define BT_CONTROLLER_FRXSTS_2_REG_RX_FIFO_2_RX_FIFO_FULL_RST    0x0

__INLINE void bt_controller_frxsts_2_reg_pack(uint8_t rx_fifo2_reg_mask_bits, uint8_t rx_fifo2_sts_reg_7_to_2_bits_are_reserved, uint8_t rx_fifo2_rx_fifo_empty, uint8_t rx_fifo2_rx_fifo_full)
{
	ASSERT_ERR((((uint32_t)rx_fifo2_reg_mask_bits << 9) & ~((uint32_t)0x0000FE00)) == 0);
	ASSERT_ERR((((uint32_t)rx_fifo2_sts_reg_7_to_2_bits_are_reserved << 2) & ~((uint32_t)0x000001FC)) == 0);
	ASSERT_ERR((((uint32_t)rx_fifo2_rx_fifo_empty << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)rx_fifo2_rx_fifo_full << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_FRXSTS_2_REG_ADDR,  ((uint32_t)rx_fifo2_reg_mask_bits << 9) |((uint32_t)rx_fifo2_sts_reg_7_to_2_bits_are_reserved << 2) |((uint32_t)rx_fifo2_rx_fifo_empty << 1) |((uint32_t)rx_fifo2_rx_fifo_full << 0));
}

__INLINE void bt_controller_frxsts_2_reg_unpack(uint8_t* rx_fifo2_reg_mask_bits, uint8_t* rx_fifo2_sts_reg_7_to_2_bits_are_reserved, uint8_t* rx_fifo2_rx_fifo_empty, uint8_t* rx_fifo2_rx_fifo_full)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FRXSTS_2_REG_ADDR);

	*rx_fifo2_reg_mask_bits = (localVal & ((uint32_t)0x0000FE00)) >>  9;
	*rx_fifo2_sts_reg_7_to_2_bits_are_reserved = (localVal & ((uint32_t)0x000001FC)) >>  2;
	*rx_fifo2_rx_fifo_empty = (localVal & ((uint32_t)0x00000002)) >>  1;
	*rx_fifo2_rx_fifo_full = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_frxsts_2_reg_rx_fifo_2_reg_mask_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FRXSTS_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FE00)) >> 9);
}
__INLINE void bt_controller_frxsts_2_reg_rx_fifo_2_reg_mask_bits_setf(uint8_t rxfifo2regmaskbits)
{
	ASSERT_ERR((((uint32_t)rxfifo2regmaskbits << 9) & ~((uint32_t)0x0000FE00)) == 0);
	REG_PL_WR(BT_CONTROLLER_FRXSTS_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_FRXSTS_2_REG_ADDR) & ~((uint32_t)0x0000FE00)) | ((uint32_t)rxfifo2regmaskbits <<9));
}
__INLINE uint8_t bt_controller_frxsts_2_reg_rx_fifo_2_sts_reg_7_to_2_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FRXSTS_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000001FC)) >> 2);
}
__INLINE uint8_t bt_controller_frxsts_2_reg_rx_fifo_2_rx_fifo_empty_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FRXSTS_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t bt_controller_frxsts_2_reg_rx_fifo_2_rx_fifo_full_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FRXSTS_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief INQ_PARITY_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Inq_parity_bits_15_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_INQ_PARITY_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000020)
#define BT_CONTROLLER_INQ_PARITY_1_REG_OFFSET      0x00000020
#define BT_CONTROLLER_INQ_PARITY_1_REG_INDEX       0x00000008
#define BT_CONTROLLER_INQ_PARITY_1_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_inq_parity_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_INQ_PARITY_1_REG_ADDR);
}

__INLINE void bt_controller_inq_parity_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_INQ_PARITY_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_INQ_PARITY_1_REG_INQ_PARITY_BITS_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_INQ_PARITY_1_REG_INQ_PARITY_BITS_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_INQ_PARITY_1_REG_INQ_PARITY_BITS_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_INQ_PARITY_1_REG_INQ_PARITY_BITS_15_DOWNTO_0_RST    0x0

__INLINE uint16_t bt_controller_inq_parity_1_reg_inq_parity_bits_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INQ_PARITY_1_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_inq_parity_1_reg_inq_parity_bits_15_downto_0_setf(uint16_t inqparitybits15downto0)
{
	ASSERT_ERR((((uint32_t)inqparitybits15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_INQ_PARITY_1_REG_ADDR, (uint32_t)inqparitybits15downto0 << 0);
}

/**
 * @brief INQ_PARITY_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Inq_parity_bits_31_downto_16 0x0
 * </pre>
 */
#define BT_CONTROLLER_INQ_PARITY_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000024)
#define BT_CONTROLLER_INQ_PARITY_2_REG_OFFSET      0x00000024
#define BT_CONTROLLER_INQ_PARITY_2_REG_INDEX       0x00000009
#define BT_CONTROLLER_INQ_PARITY_2_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_inq_parity_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_INQ_PARITY_2_REG_ADDR);
}

__INLINE void bt_controller_inq_parity_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_INQ_PARITY_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_INQ_PARITY_2_REG_INQ_PARITY_BITS_31_DOWNTO_16_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_INQ_PARITY_2_REG_INQ_PARITY_BITS_31_DOWNTO_16_LSB    0
#define BT_CONTROLLER_INQ_PARITY_2_REG_INQ_PARITY_BITS_31_DOWNTO_16_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_INQ_PARITY_2_REG_INQ_PARITY_BITS_31_DOWNTO_16_RST    0x0

__INLINE uint16_t bt_controller_inq_parity_2_reg_inq_parity_bits_31_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INQ_PARITY_2_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_inq_parity_2_reg_inq_parity_bits_31_downto_16_setf(uint16_t inqparitybits31downto16)
{
	ASSERT_ERR((((uint32_t)inqparitybits31downto16 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_INQ_PARITY_2_REG_ADDR, (uint32_t)inqparitybits31downto16 << 0);
}

/**
 * @brief INQ_LAP_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Inq_lap_bits_15_downto_0  0x0
 * </pre>
 */
#define BT_CONTROLLER_INQ_LAP_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000028)
#define BT_CONTROLLER_INQ_LAP_1_REG_OFFSET      0x00000028
#define BT_CONTROLLER_INQ_LAP_1_REG_INDEX       0x0000000A
#define BT_CONTROLLER_INQ_LAP_1_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_inq_lap_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_INQ_LAP_1_REG_ADDR);
}

__INLINE void bt_controller_inq_lap_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_INQ_LAP_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_INQ_LAP_1_REG_INQ_LAP_BITS_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_INQ_LAP_1_REG_INQ_LAP_BITS_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_INQ_LAP_1_REG_INQ_LAP_BITS_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_INQ_LAP_1_REG_INQ_LAP_BITS_15_DOWNTO_0_RST    0x0

__INLINE uint16_t bt_controller_inq_lap_1_reg_inq_lap_bits_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INQ_LAP_1_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_inq_lap_1_reg_inq_lap_bits_15_downto_0_setf(uint16_t inqlapbits15downto0)
{
	ASSERT_ERR((((uint32_t)inqlapbits15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_INQ_LAP_1_REG_ADDR, (uint32_t)inqlapbits15downto0 << 0);
}

/**
 * @brief INQ_LAP_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:14 Inq_parity_bits           0x0
 *    13:12 Pn0_parity_bits           0x0
 *    11:10 own_parity_bits           0x0
 *    09    Eir_tx_en                 0              
 *    08    Eir_rx_en                 0              
 *    07:00 Inq_lap_bits_23_downto_16 0x0
 * </pre>
 */
#define BT_CONTROLLER_INQ_LAP_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000002C)
#define BT_CONTROLLER_INQ_LAP_2_REG_OFFSET      0x0000002C
#define BT_CONTROLLER_INQ_LAP_2_REG_INDEX       0x0000000B
#define BT_CONTROLLER_INQ_LAP_2_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_inq_lap_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_INQ_LAP_2_REG_ADDR);
}

__INLINE void bt_controller_inq_lap_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_INQ_LAP_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_INQ_LAP_2_REG_INQ_PARITY_BITS_MASK    ((uint32_t)0x0000C000)
#define BT_CONTROLLER_INQ_LAP_2_REG_INQ_PARITY_BITS_LSB    14
#define BT_CONTROLLER_INQ_LAP_2_REG_INQ_PARITY_BITS_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_INQ_LAP_2_REG_PN_0_PARITY_BITS_MASK    ((uint32_t)0x00003000)
#define BT_CONTROLLER_INQ_LAP_2_REG_PN_0_PARITY_BITS_LSB    12
#define BT_CONTROLLER_INQ_LAP_2_REG_PN_0_PARITY_BITS_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_INQ_LAP_2_REG_OWN_PARITY_BITS_MASK    ((uint32_t)0x00000C00)
#define BT_CONTROLLER_INQ_LAP_2_REG_OWN_PARITY_BITS_LSB    10
#define BT_CONTROLLER_INQ_LAP_2_REG_OWN_PARITY_BITS_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_INQ_LAP_2_REG_EIR_TX_EN_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_INQ_LAP_2_REG_EIR_TX_EN_POS    9
#define BT_CONTROLLER_INQ_LAP_2_REG_EIR_RX_EN_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_INQ_LAP_2_REG_EIR_RX_EN_POS    8
#define BT_CONTROLLER_INQ_LAP_2_REG_INQ_LAP_BITS_23_DOWNTO_16_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_INQ_LAP_2_REG_INQ_LAP_BITS_23_DOWNTO_16_LSB    0
#define BT_CONTROLLER_INQ_LAP_2_REG_INQ_LAP_BITS_23_DOWNTO_16_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_INQ_LAP_2_REG_INQ_PARITY_BITS_RST    0x0
#define BT_CONTROLLER_INQ_LAP_2_REG_PN_0_PARITY_BITS_RST    0x0
#define BT_CONTROLLER_INQ_LAP_2_REG_OWN_PARITY_BITS_RST    0x0
#define BT_CONTROLLER_INQ_LAP_2_REG_EIR_TX_EN_RST    0x0
#define BT_CONTROLLER_INQ_LAP_2_REG_EIR_RX_EN_RST    0x0
#define BT_CONTROLLER_INQ_LAP_2_REG_INQ_LAP_BITS_23_DOWNTO_16_RST    0x0

__INLINE void bt_controller_inq_lap_2_reg_pack(uint8_t inq_parity_bits, uint8_t pn0_parity_bits, uint8_t own_parity_bits, uint8_t eir_tx_en, uint8_t eir_rx_en, uint8_t inq_lap_bits_23_downto_16)
{
	ASSERT_ERR((((uint32_t)inq_parity_bits << 14) & ~((uint32_t)0x0000C000)) == 0);
	ASSERT_ERR((((uint32_t)pn0_parity_bits << 12) & ~((uint32_t)0x00003000)) == 0);
	ASSERT_ERR((((uint32_t)own_parity_bits << 10) & ~((uint32_t)0x00000C00)) == 0);
	ASSERT_ERR((((uint32_t)eir_tx_en << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)eir_rx_en << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)inq_lap_bits_23_downto_16 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_INQ_LAP_2_REG_ADDR,  ((uint32_t)inq_parity_bits << 14) |((uint32_t)pn0_parity_bits << 12) |((uint32_t)own_parity_bits << 10) |((uint32_t)eir_tx_en << 9) |((uint32_t)eir_rx_en << 8) |((uint32_t)inq_lap_bits_23_downto_16 << 0));
}

__INLINE void bt_controller_inq_lap_2_reg_unpack(uint8_t* inq_parity_bits, uint8_t* pn0_parity_bits, uint8_t* own_parity_bits, uint8_t* eir_tx_en, uint8_t* eir_rx_en, uint8_t* inq_lap_bits_23_downto_16)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INQ_LAP_2_REG_ADDR);

	*inq_parity_bits = (localVal & ((uint32_t)0x0000C000)) >>  14;
	*pn0_parity_bits = (localVal & ((uint32_t)0x00003000)) >>  12;
	*own_parity_bits = (localVal & ((uint32_t)0x00000C00)) >>  10;
	*eir_tx_en = (localVal & ((uint32_t)0x00000200)) >>  9;
	*eir_rx_en = (localVal & ((uint32_t)0x00000100)) >>  8;
	*inq_lap_bits_23_downto_16 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_inq_lap_2_reg_inq_parity_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INQ_LAP_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000C000)) >> 14);
}
__INLINE void bt_controller_inq_lap_2_reg_inq_parity_bits_setf(uint8_t inqparitybits)
{
	ASSERT_ERR((((uint32_t)inqparitybits << 14) & ~((uint32_t)0x0000C000)) == 0);
	REG_PL_WR(BT_CONTROLLER_INQ_LAP_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INQ_LAP_2_REG_ADDR) & ~((uint32_t)0x0000C000)) | ((uint32_t)inqparitybits <<14));
}
__INLINE uint8_t bt_controller_inq_lap_2_reg_pn_0_parity_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INQ_LAP_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003000)) >> 12);
}
__INLINE void bt_controller_inq_lap_2_reg_pn_0_parity_bits_setf(uint8_t pn0paritybits)
{
	ASSERT_ERR((((uint32_t)pn0paritybits << 12) & ~((uint32_t)0x00003000)) == 0);
	REG_PL_WR(BT_CONTROLLER_INQ_LAP_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INQ_LAP_2_REG_ADDR) & ~((uint32_t)0x00003000)) | ((uint32_t)pn0paritybits <<12));
}
__INLINE uint8_t bt_controller_inq_lap_2_reg_own_parity_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INQ_LAP_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000C00)) >> 10);
}
__INLINE void bt_controller_inq_lap_2_reg_own_parity_bits_setf(uint8_t ownparitybits)
{
	ASSERT_ERR((((uint32_t)ownparitybits << 10) & ~((uint32_t)0x00000C00)) == 0);
	REG_PL_WR(BT_CONTROLLER_INQ_LAP_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INQ_LAP_2_REG_ADDR) & ~((uint32_t)0x00000C00)) | ((uint32_t)ownparitybits <<10));
}
__INLINE uint8_t bt_controller_inq_lap_2_reg_eir_tx_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INQ_LAP_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void bt_controller_inq_lap_2_reg_eir_tx_en_setf(uint8_t eirtxen)
{
	ASSERT_ERR((((uint32_t)eirtxen << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(BT_CONTROLLER_INQ_LAP_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INQ_LAP_2_REG_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)eirtxen <<9));
}
__INLINE uint8_t bt_controller_inq_lap_2_reg_eir_rx_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INQ_LAP_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_inq_lap_2_reg_eir_rx_en_setf(uint8_t eirrxen)
{
	ASSERT_ERR((((uint32_t)eirrxen << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_INQ_LAP_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INQ_LAP_2_REG_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)eirrxen <<8));
}
__INLINE uint8_t bt_controller_inq_lap_2_reg_inq_lap_bits_23_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INQ_LAP_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_inq_lap_2_reg_inq_lap_bits_23_downto_16_setf(uint8_t inqlapbits23downto16)
{
	ASSERT_ERR((((uint32_t)inqlapbits23downto16 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_INQ_LAP_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INQ_LAP_2_REG_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)inqlapbits23downto16 <<0));
}

/**
 * @brief PN_0_BADDR_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 pn0_bd_addr1              0x0
 * </pre>
 */
#define BT_CONTROLLER_PN_0_BADDR_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000030)
#define BT_CONTROLLER_PN_0_BADDR_1_REG_OFFSET      0x00000030
#define BT_CONTROLLER_PN_0_BADDR_1_REG_INDEX       0x0000000C
#define BT_CONTROLLER_PN_0_BADDR_1_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_pn_0_baddr_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PN_0_BADDR_1_REG_ADDR);
}

__INLINE void bt_controller_pn_0_baddr_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PN_0_BADDR_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PN_0_BADDR_1_REG_PN_0_BD_ADDR_1_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PN_0_BADDR_1_REG_PN_0_BD_ADDR_1_LSB    0
#define BT_CONTROLLER_PN_0_BADDR_1_REG_PN_0_BD_ADDR_1_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PN_0_BADDR_1_REG_PN_0_BD_ADDR_1_RST    0x0

__INLINE uint16_t bt_controller_pn_0_baddr_1_reg_pn_0_bd_addr_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_BADDR_1_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_pn_0_baddr_1_reg_pn_0_bd_addr_1_setf(uint16_t pn0bdaddr1)
{
	ASSERT_ERR((((uint32_t)pn0bdaddr1 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_0_BADDR_1_REG_ADDR, (uint32_t)pn0bdaddr1 << 0);
}

/**
 * @brief PN_0_BADDR_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 pn0_bd_addr2              0x0
 * </pre>
 */
#define BT_CONTROLLER_PN_0_BADDR_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000034)
#define BT_CONTROLLER_PN_0_BADDR_2_REG_OFFSET      0x00000034
#define BT_CONTROLLER_PN_0_BADDR_2_REG_INDEX       0x0000000D
#define BT_CONTROLLER_PN_0_BADDR_2_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_pn_0_baddr_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PN_0_BADDR_2_REG_ADDR);
}

__INLINE void bt_controller_pn_0_baddr_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PN_0_BADDR_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PN_0_BADDR_2_REG_PN_0_BD_ADDR_2_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PN_0_BADDR_2_REG_PN_0_BD_ADDR_2_LSB    0
#define BT_CONTROLLER_PN_0_BADDR_2_REG_PN_0_BD_ADDR_2_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PN_0_BADDR_2_REG_PN_0_BD_ADDR_2_RST    0x0

__INLINE uint16_t bt_controller_pn_0_baddr_2_reg_pn_0_bd_addr_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_BADDR_2_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_pn_0_baddr_2_reg_pn_0_bd_addr_2_setf(uint16_t pn0bdaddr2)
{
	ASSERT_ERR((((uint32_t)pn0bdaddr2 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_0_BADDR_2_REG_ADDR, (uint32_t)pn0bdaddr2 << 0);
}

/**
 * @brief PN_0_BADDR_3_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 pn0_bd_addr3              0x0
 * </pre>
 */
#define BT_CONTROLLER_PN_0_BADDR_3_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000038)
#define BT_CONTROLLER_PN_0_BADDR_3_REG_OFFSET      0x00000038
#define BT_CONTROLLER_PN_0_BADDR_3_REG_INDEX       0x0000000E
#define BT_CONTROLLER_PN_0_BADDR_3_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_pn_0_baddr_3_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PN_0_BADDR_3_REG_ADDR);
}

__INLINE void bt_controller_pn_0_baddr_3_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PN_0_BADDR_3_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PN_0_BADDR_3_REG_PN_0_BD_ADDR_3_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PN_0_BADDR_3_REG_PN_0_BD_ADDR_3_LSB    0
#define BT_CONTROLLER_PN_0_BADDR_3_REG_PN_0_BD_ADDR_3_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PN_0_BADDR_3_REG_PN_0_BD_ADDR_3_RST    0x0

__INLINE uint16_t bt_controller_pn_0_baddr_3_reg_pn_0_bd_addr_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_BADDR_3_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_pn_0_baddr_3_reg_pn_0_bd_addr_3_setf(uint16_t pn0bdaddr3)
{
	ASSERT_ERR((((uint32_t)pn0bdaddr3 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_0_BADDR_3_REG_ADDR, (uint32_t)pn0bdaddr3 << 0);
}

/**
 * @brief PN_0_PARITY_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 pno_parity_addr_15_to_0   0x0
 * </pre>
 */
#define BT_CONTROLLER_PN_0_PARITY_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000003C)
#define BT_CONTROLLER_PN_0_PARITY_1_REG_OFFSET      0x0000003C
#define BT_CONTROLLER_PN_0_PARITY_1_REG_INDEX       0x0000000F
#define BT_CONTROLLER_PN_0_PARITY_1_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_pn_0_parity_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PN_0_PARITY_1_REG_ADDR);
}

__INLINE void bt_controller_pn_0_parity_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PN_0_PARITY_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PN_0_PARITY_1_REG_PNO_PARITY_ADDR_15_TO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PN_0_PARITY_1_REG_PNO_PARITY_ADDR_15_TO_0_LSB    0
#define BT_CONTROLLER_PN_0_PARITY_1_REG_PNO_PARITY_ADDR_15_TO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PN_0_PARITY_1_REG_PNO_PARITY_ADDR_15_TO_0_RST    0x0

__INLINE uint16_t bt_controller_pn_0_parity_1_reg_pno_parity_addr_15_to_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_PARITY_1_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_pn_0_parity_1_reg_pno_parity_addr_15_to_0_setf(uint16_t pnoparityaddr15to0)
{
	ASSERT_ERR((((uint32_t)pnoparityaddr15to0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_0_PARITY_1_REG_ADDR, (uint32_t)pnoparityaddr15to0 << 0);
}

/**
 * @brief PN_0_PARITY_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 pno_parity_addr_31_to_16  0x0
 * </pre>
 */
#define BT_CONTROLLER_PN_0_PARITY_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000040)
#define BT_CONTROLLER_PN_0_PARITY_2_REG_OFFSET      0x00000040
#define BT_CONTROLLER_PN_0_PARITY_2_REG_INDEX       0x00000010
#define BT_CONTROLLER_PN_0_PARITY_2_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_pn_0_parity_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PN_0_PARITY_2_REG_ADDR);
}

__INLINE void bt_controller_pn_0_parity_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PN_0_PARITY_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PN_0_PARITY_2_REG_PNO_PARITY_ADDR_31_TO_16_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PN_0_PARITY_2_REG_PNO_PARITY_ADDR_31_TO_16_LSB    0
#define BT_CONTROLLER_PN_0_PARITY_2_REG_PNO_PARITY_ADDR_31_TO_16_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PN_0_PARITY_2_REG_PNO_PARITY_ADDR_31_TO_16_RST    0x0

__INLINE uint16_t bt_controller_pn_0_parity_2_reg_pno_parity_addr_31_to_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_PARITY_2_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_pn_0_parity_2_reg_pno_parity_addr_31_to_16_setf(uint16_t pnoparityaddr31to16)
{
	ASSERT_ERR((((uint32_t)pnoparityaddr31to16 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_0_PARITY_2_REG_ADDR, (uint32_t)pnoparityaddr31to16 << 0);
}

/**
 * @brief DBADDR_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 dev_bd_addr_15_to_0       0x0
 * </pre>
 */
#define BT_CONTROLLER_DBADDR_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000044)
#define BT_CONTROLLER_DBADDR_1_REG_OFFSET      0x00000044
#define BT_CONTROLLER_DBADDR_1_REG_INDEX       0x00000011
#define BT_CONTROLLER_DBADDR_1_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_dbaddr_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_DBADDR_1_REG_ADDR);
}

__INLINE void bt_controller_dbaddr_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_DBADDR_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_DBADDR_1_REG_DEV_BD_ADDR_15_TO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_DBADDR_1_REG_DEV_BD_ADDR_15_TO_0_LSB    0
#define BT_CONTROLLER_DBADDR_1_REG_DEV_BD_ADDR_15_TO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_DBADDR_1_REG_DEV_BD_ADDR_15_TO_0_RST    0x0

__INLINE uint16_t bt_controller_dbaddr_1_reg_dev_bd_addr_15_to_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DBADDR_1_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_dbaddr_1_reg_dev_bd_addr_15_to_0_setf(uint16_t devbdaddr15to0)
{
	ASSERT_ERR((((uint32_t)devbdaddr15to0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_DBADDR_1_REG_ADDR, (uint32_t)devbdaddr15to0 << 0);
}

/**
 * @brief DBADDR_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 dev_bd_addr_31_to_16      0x0
 * </pre>
 */
#define BT_CONTROLLER_DBADDR_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000048)
#define BT_CONTROLLER_DBADDR_2_REG_OFFSET      0x00000048
#define BT_CONTROLLER_DBADDR_2_REG_INDEX       0x00000012
#define BT_CONTROLLER_DBADDR_2_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_dbaddr_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_DBADDR_2_REG_ADDR);
}

__INLINE void bt_controller_dbaddr_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_DBADDR_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_DBADDR_2_REG_DEV_BD_ADDR_31_TO_16_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_DBADDR_2_REG_DEV_BD_ADDR_31_TO_16_LSB    0
#define BT_CONTROLLER_DBADDR_2_REG_DEV_BD_ADDR_31_TO_16_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_DBADDR_2_REG_DEV_BD_ADDR_31_TO_16_RST    0x0

__INLINE uint16_t bt_controller_dbaddr_2_reg_dev_bd_addr_31_to_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DBADDR_2_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_dbaddr_2_reg_dev_bd_addr_31_to_16_setf(uint16_t devbdaddr31to16)
{
	ASSERT_ERR((((uint32_t)devbdaddr31to16 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_DBADDR_2_REG_ADDR, (uint32_t)devbdaddr31to16 << 0);
}

/**
 * @brief DBADDR_3_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 dev_bd_addr_47_to_32      0x0
 * </pre>
 */
#define BT_CONTROLLER_DBADDR_3_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000004C)
#define BT_CONTROLLER_DBADDR_3_REG_OFFSET      0x0000004C
#define BT_CONTROLLER_DBADDR_3_REG_INDEX       0x00000013
#define BT_CONTROLLER_DBADDR_3_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_dbaddr_3_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_DBADDR_3_REG_ADDR);
}

__INLINE void bt_controller_dbaddr_3_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_DBADDR_3_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_DBADDR_3_REG_DEV_BD_ADDR_47_TO_32_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_DBADDR_3_REG_DEV_BD_ADDR_47_TO_32_LSB    0
#define BT_CONTROLLER_DBADDR_3_REG_DEV_BD_ADDR_47_TO_32_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_DBADDR_3_REG_DEV_BD_ADDR_47_TO_32_RST    0x0

__INLINE uint16_t bt_controller_dbaddr_3_reg_dev_bd_addr_47_to_32_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DBADDR_3_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_dbaddr_3_reg_dev_bd_addr_47_to_32_setf(uint16_t devbdaddr47to32)
{
	ASSERT_ERR((((uint32_t)devbdaddr47to32 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_DBADDR_3_REG_ADDR, (uint32_t)devbdaddr47to32 << 0);
}

/**
 * @brief OWN_PARITY_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 own_parity_bits_15_to_0   0x0
 * </pre>
 */
#define BT_CONTROLLER_OWN_PARITY_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000050)
#define BT_CONTROLLER_OWN_PARITY_1_REG_OFFSET      0x00000050
#define BT_CONTROLLER_OWN_PARITY_1_REG_INDEX       0x00000014
#define BT_CONTROLLER_OWN_PARITY_1_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_own_parity_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_OWN_PARITY_1_REG_ADDR);
}

__INLINE void bt_controller_own_parity_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_OWN_PARITY_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_OWN_PARITY_1_REG_OWN_PARITY_BITS_15_TO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_OWN_PARITY_1_REG_OWN_PARITY_BITS_15_TO_0_LSB    0
#define BT_CONTROLLER_OWN_PARITY_1_REG_OWN_PARITY_BITS_15_TO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_OWN_PARITY_1_REG_OWN_PARITY_BITS_15_TO_0_RST    0x0

__INLINE uint16_t bt_controller_own_parity_1_reg_own_parity_bits_15_to_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_OWN_PARITY_1_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_own_parity_1_reg_own_parity_bits_15_to_0_setf(uint16_t ownparitybits15to0)
{
	ASSERT_ERR((((uint32_t)ownparitybits15to0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_OWN_PARITY_1_REG_ADDR, (uint32_t)ownparitybits15to0 << 0);
}

/**
 * @brief OWN_PARITY_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 own_parity_bits_31_to_16  0x0
 * </pre>
 */
#define BT_CONTROLLER_OWN_PARITY_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000054)
#define BT_CONTROLLER_OWN_PARITY_2_REG_OFFSET      0x00000054
#define BT_CONTROLLER_OWN_PARITY_2_REG_INDEX       0x00000015
#define BT_CONTROLLER_OWN_PARITY_2_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_own_parity_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_OWN_PARITY_2_REG_ADDR);
}

__INLINE void bt_controller_own_parity_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_OWN_PARITY_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_OWN_PARITY_2_REG_OWN_PARITY_BITS_31_TO_16_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_OWN_PARITY_2_REG_OWN_PARITY_BITS_31_TO_16_LSB    0
#define BT_CONTROLLER_OWN_PARITY_2_REG_OWN_PARITY_BITS_31_TO_16_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_OWN_PARITY_2_REG_OWN_PARITY_BITS_31_TO_16_RST    0x0

__INLINE uint16_t bt_controller_own_parity_2_reg_own_parity_bits_31_to_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_OWN_PARITY_2_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_own_parity_2_reg_own_parity_bits_31_to_16_setf(uint16_t ownparitybits31to16)
{
	ASSERT_ERR((((uint32_t)ownparitybits31to16 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_OWN_PARITY_2_REG_ADDR, (uint32_t)ownparitybits31to16 << 0);
}

/**
 * @brief NINQ_NPAGE_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Ninquiry_or_npage         0x0
 * </pre>
 */
#define BT_CONTROLLER_NINQ_NPAGE_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000058)
#define BT_CONTROLLER_NINQ_NPAGE_REG_OFFSET      0x00000058
#define BT_CONTROLLER_NINQ_NPAGE_REG_INDEX       0x00000016
#define BT_CONTROLLER_NINQ_NPAGE_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_ninq_npage_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_NINQ_NPAGE_REG_ADDR);
}

__INLINE void bt_controller_ninq_npage_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_NINQ_NPAGE_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_NINQ_NPAGE_REG_NINQUIRY_OR_NPAGE_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_NINQ_NPAGE_REG_NINQUIRY_OR_NPAGE_LSB    0
#define BT_CONTROLLER_NINQ_NPAGE_REG_NINQUIRY_OR_NPAGE_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_NINQ_NPAGE_REG_NINQUIRY_OR_NPAGE_RST    0x0

__INLINE uint16_t bt_controller_ninq_npage_reg_ninquiry_or_npage_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_NINQ_NPAGE_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_ninq_npage_reg_ninquiry_or_npage_setf(uint16_t ninquiryornpage)
{
	ASSERT_ERR((((uint32_t)ninquiryornpage << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_NINQ_NPAGE_REG_ADDR, (uint32_t)ninquiryornpage << 0);
}

/**
 * @brief INQTO_PGTO_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Inquiry_to_or_Page_to     0x0
 * </pre>
 */
#define BT_CONTROLLER_INQTO_PGTO_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000005C)
#define BT_CONTROLLER_INQTO_PGTO_REG_OFFSET      0x0000005C
#define BT_CONTROLLER_INQTO_PGTO_REG_INDEX       0x00000017
#define BT_CONTROLLER_INQTO_PGTO_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_inqto_pgto_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_INQTO_PGTO_REG_ADDR);
}

__INLINE void bt_controller_inqto_pgto_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_INQTO_PGTO_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_INQTO_PGTO_REG_INQUIRY_TO_OR_PAGE_TO_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_INQTO_PGTO_REG_INQUIRY_TO_OR_PAGE_TO_LSB    0
#define BT_CONTROLLER_INQTO_PGTO_REG_INQUIRY_TO_OR_PAGE_TO_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_INQTO_PGTO_REG_INQUIRY_TO_OR_PAGE_TO_RST    0x0

__INLINE uint16_t bt_controller_inqto_pgto_reg_inquiry_to_or_page_to_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INQTO_PGTO_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_inqto_pgto_reg_inquiry_to_or_page_to_setf(uint16_t inquirytoorpageto)
{
	ASSERT_ERR((((uint32_t)inquirytoorpageto << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_INQTO_PGTO_REG_ADDR, (uint32_t)inquirytoorpageto << 0);
}

/**
 * @brief PS_INTERVAL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:14 ps_interval_14_15_bites_are_reserved 0x0
 *    13    Ps_intr                   0              
 *    12    is_intr                   0              
 *    11:00 page_scan_interval        0x0
 * </pre>
 */
#define BT_CONTROLLER_PS_INTERVAL_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000060)
#define BT_CONTROLLER_PS_INTERVAL_OFFSET      0x00000060
#define BT_CONTROLLER_PS_INTERVAL_INDEX       0x00000018
#define BT_CONTROLLER_PS_INTERVAL_RESET       0x00000000

__INLINE uint32_t  bt_controller_ps_interval_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PS_INTERVAL_ADDR);
}

__INLINE void bt_controller_ps_interval_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PS_INTERVAL_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PS_INTERVAL_PS_INTERVAL_14_15_BITES_ARE_RESERVED_MASK    ((uint32_t)0x0000C000)
#define BT_CONTROLLER_PS_INTERVAL_PS_INTERVAL_14_15_BITES_ARE_RESERVED_LSB    14
#define BT_CONTROLLER_PS_INTERVAL_PS_INTERVAL_14_15_BITES_ARE_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_PS_INTERVAL_PS_INTR_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_PS_INTERVAL_PS_INTR_POS    13
#define BT_CONTROLLER_PS_INTERVAL_IS_INTR_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_PS_INTERVAL_IS_INTR_POS    12
#define BT_CONTROLLER_PS_INTERVAL_PAGE_SCAN_INTERVAL_MASK    ((uint32_t)0x00000FFF)
#define BT_CONTROLLER_PS_INTERVAL_PAGE_SCAN_INTERVAL_LSB    0
#define BT_CONTROLLER_PS_INTERVAL_PAGE_SCAN_INTERVAL_WIDTH    ((uint32_t)0x0000000C)

#define BT_CONTROLLER_PS_INTERVAL_PS_INTERVAL_14_15_BITES_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_PS_INTERVAL_PS_INTR_RST    0x0
#define BT_CONTROLLER_PS_INTERVAL_IS_INTR_RST    0x0
#define BT_CONTROLLER_PS_INTERVAL_PAGE_SCAN_INTERVAL_RST    0x0

__INLINE void bt_controller_ps_interval_pack(uint8_t ps_interval_14_15_bites_are_reserved, uint8_t ps_intr, uint8_t is_intr, uint16_t page_scan_interval)
{
	ASSERT_ERR((((uint32_t)ps_interval_14_15_bites_are_reserved << 14) & ~((uint32_t)0x0000C000)) == 0);
	ASSERT_ERR((((uint32_t)ps_intr << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)is_intr << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)page_scan_interval << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PS_INTERVAL_ADDR,  ((uint32_t)ps_interval_14_15_bites_are_reserved << 14) |((uint32_t)ps_intr << 13) |((uint32_t)is_intr << 12) |((uint32_t)page_scan_interval << 0));
}

__INLINE void bt_controller_ps_interval_unpack(uint8_t* ps_interval_14_15_bites_are_reserved, uint8_t* ps_intr, uint8_t* is_intr, uint16_t* page_scan_interval)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PS_INTERVAL_ADDR);

	*ps_interval_14_15_bites_are_reserved = (localVal & ((uint32_t)0x0000C000)) >>  14;
	*ps_intr = (localVal & ((uint32_t)0x00002000)) >>  13;
	*is_intr = (localVal & ((uint32_t)0x00001000)) >>  12;
	*page_scan_interval = (localVal & ((uint32_t)0x00000FFF)) >>  0;
}

__INLINE uint8_t bt_controller_ps_interval_ps_interval_14_15_bites_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PS_INTERVAL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000C000)) >> 14);
}
__INLINE uint8_t bt_controller_ps_interval_ps_intr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PS_INTERVAL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t bt_controller_ps_interval_is_intr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PS_INTERVAL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint16_t bt_controller_ps_interval_page_scan_interval_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PS_INTERVAL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x00000FFF)) >> 0);
}
__INLINE void bt_controller_ps_interval_page_scan_interval_setf(uint16_t pagescaninterval)
{
	ASSERT_ERR((((uint32_t)pagescaninterval << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PS_INTERVAL_ADDR, (REG_PL_RD(BT_CONTROLLER_PS_INTERVAL_ADDR) & ~((uint32_t)0x00000FFF)) | ((uint32_t)pagescaninterval <<0));
}

/**
 * @brief PS_WINDOW register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    Ps_timer_run              0              
 *    14    Ps_timer_ctrl             0              
 *    13    Ps_int_en                 0              
 *    12    Override_bb_scan          0              
 *    11:00 Ps_window                 0x0
 * </pre>
 */
#define BT_CONTROLLER_PS_WINDOW_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000064)
#define BT_CONTROLLER_PS_WINDOW_OFFSET      0x00000064
#define BT_CONTROLLER_PS_WINDOW_INDEX       0x00000019
#define BT_CONTROLLER_PS_WINDOW_RESET       0x00000000

__INLINE uint32_t  bt_controller_ps_window_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PS_WINDOW_ADDR);
}

__INLINE void bt_controller_ps_window_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PS_WINDOW_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PS_WINDOW_PS_TIMER_RUN_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_PS_WINDOW_PS_TIMER_RUN_POS    15
#define BT_CONTROLLER_PS_WINDOW_PS_TIMER_CTRL_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_PS_WINDOW_PS_TIMER_CTRL_POS    14
#define BT_CONTROLLER_PS_WINDOW_PS_INT_EN_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_PS_WINDOW_PS_INT_EN_POS    13
#define BT_CONTROLLER_PS_WINDOW_OVERRIDE_BB_SCAN_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_PS_WINDOW_OVERRIDE_BB_SCAN_POS    12
#define BT_CONTROLLER_PS_WINDOW_PS_WINDOW_MASK    ((uint32_t)0x00000FFF)
#define BT_CONTROLLER_PS_WINDOW_PS_WINDOW_LSB    0
#define BT_CONTROLLER_PS_WINDOW_PS_WINDOW_WIDTH    ((uint32_t)0x0000000C)

#define BT_CONTROLLER_PS_WINDOW_PS_TIMER_RUN_RST    0x0
#define BT_CONTROLLER_PS_WINDOW_PS_TIMER_CTRL_RST    0x0
#define BT_CONTROLLER_PS_WINDOW_PS_INT_EN_RST    0x0
#define BT_CONTROLLER_PS_WINDOW_OVERRIDE_BB_SCAN_RST    0x0
#define BT_CONTROLLER_PS_WINDOW_PS_WINDOW_RST    0x0

__INLINE void bt_controller_ps_window_pack(uint8_t ps_timer_run, uint8_t ps_timer_ctrl, uint8_t ps_int_en, uint8_t override_bb_scan, uint16_t ps_window)
{
	ASSERT_ERR((((uint32_t)ps_timer_run << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)ps_timer_ctrl << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)ps_int_en << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)override_bb_scan << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)ps_window << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PS_WINDOW_ADDR,  ((uint32_t)ps_timer_run << 15) |((uint32_t)ps_timer_ctrl << 14) |((uint32_t)ps_int_en << 13) |((uint32_t)override_bb_scan << 12) |((uint32_t)ps_window << 0));
}

__INLINE void bt_controller_ps_window_unpack(uint8_t* ps_timer_run, uint8_t* ps_timer_ctrl, uint8_t* ps_int_en, uint8_t* override_bb_scan, uint16_t* ps_window)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PS_WINDOW_ADDR);

	*ps_timer_run = (localVal & ((uint32_t)0x00008000)) >>  15;
	*ps_timer_ctrl = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ps_int_en = (localVal & ((uint32_t)0x00002000)) >>  13;
	*override_bb_scan = (localVal & ((uint32_t)0x00001000)) >>  12;
	*ps_window = (localVal & ((uint32_t)0x00000FFF)) >>  0;
}

__INLINE uint8_t bt_controller_ps_window_ps_timer_run_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PS_WINDOW_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_ps_window_ps_timer_run_setf(uint8_t pstimerrun)
{
	ASSERT_ERR((((uint32_t)pstimerrun << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_PS_WINDOW_ADDR, (REG_PL_RD(BT_CONTROLLER_PS_WINDOW_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)pstimerrun <<15));
}
__INLINE uint8_t bt_controller_ps_window_ps_timer_ctrl_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PS_WINDOW_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_ps_window_ps_timer_ctrl_setf(uint8_t pstimerctrl)
{
	ASSERT_ERR((((uint32_t)pstimerctrl << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_PS_WINDOW_ADDR, (REG_PL_RD(BT_CONTROLLER_PS_WINDOW_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)pstimerctrl <<14));
}
__INLINE uint8_t bt_controller_ps_window_ps_int_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PS_WINDOW_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_ps_window_ps_int_en_setf(uint8_t psinten)
{
	ASSERT_ERR((((uint32_t)psinten << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_PS_WINDOW_ADDR, (REG_PL_RD(BT_CONTROLLER_PS_WINDOW_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)psinten <<13));
}
__INLINE uint8_t bt_controller_ps_window_override_bb_scan_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PS_WINDOW_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_ps_window_override_bb_scan_setf(uint8_t overridebbscan)
{
	ASSERT_ERR((((uint32_t)overridebbscan << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_PS_WINDOW_ADDR, (REG_PL_RD(BT_CONTROLLER_PS_WINDOW_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)overridebbscan <<12));
}
__INLINE uint16_t bt_controller_ps_window_ps_window_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PS_WINDOW_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x00000FFF)) >> 0);
}
__INLINE void bt_controller_ps_window_ps_window_setf(uint16_t pswindow)
{
	ASSERT_ERR((((uint32_t)pswindow << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PS_WINDOW_ADDR, (REG_PL_RD(BT_CONTROLLER_PS_WINDOW_ADDR) & ~((uint32_t)0x00000FFF)) | ((uint32_t)pswindow <<0));
}

/**
 * @brief IS_INTERVAL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 is_interval_reg_12_to_15_bits_are_reserved 0x0
 *    11:00 Inquiry_scan_interval     0x0
 * </pre>
 */
#define BT_CONTROLLER_IS_INTERVAL_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000068)
#define BT_CONTROLLER_IS_INTERVAL_OFFSET      0x00000068
#define BT_CONTROLLER_IS_INTERVAL_INDEX       0x0000001A
#define BT_CONTROLLER_IS_INTERVAL_RESET       0x00000000

__INLINE uint32_t  bt_controller_is_interval_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_IS_INTERVAL_ADDR);
}

__INLINE void bt_controller_is_interval_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IS_INTERVAL_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IS_INTERVAL_IS_INTERVAL_REG_12_TO_15_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_IS_INTERVAL_IS_INTERVAL_REG_12_TO_15_BITS_ARE_RESERVED_LSB    12
#define BT_CONTROLLER_IS_INTERVAL_IS_INTERVAL_REG_12_TO_15_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_IS_INTERVAL_INQUIRY_SCAN_INTERVAL_MASK    ((uint32_t)0x00000FFF)
#define BT_CONTROLLER_IS_INTERVAL_INQUIRY_SCAN_INTERVAL_LSB    0
#define BT_CONTROLLER_IS_INTERVAL_INQUIRY_SCAN_INTERVAL_WIDTH    ((uint32_t)0x0000000C)

#define BT_CONTROLLER_IS_INTERVAL_IS_INTERVAL_REG_12_TO_15_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_IS_INTERVAL_INQUIRY_SCAN_INTERVAL_RST    0x0

__INLINE void bt_controller_is_interval_pack(uint8_t is_interval_reg_12_to_15_bits_are_reserved, uint16_t inquiry_scan_interval)
{
	ASSERT_ERR((((uint32_t)is_interval_reg_12_to_15_bits_are_reserved << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)inquiry_scan_interval << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IS_INTERVAL_ADDR,  ((uint32_t)is_interval_reg_12_to_15_bits_are_reserved << 12) |((uint32_t)inquiry_scan_interval << 0));
}

__INLINE void bt_controller_is_interval_unpack(uint8_t* is_interval_reg_12_to_15_bits_are_reserved, uint16_t* inquiry_scan_interval)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IS_INTERVAL_ADDR);

	*is_interval_reg_12_to_15_bits_are_reserved = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*inquiry_scan_interval = (localVal & ((uint32_t)0x00000FFF)) >>  0;
}

__INLINE uint8_t bt_controller_is_interval_is_interval_reg_12_to_15_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IS_INTERVAL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE uint16_t bt_controller_is_interval_inquiry_scan_interval_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IS_INTERVAL_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x00000FFF)) >> 0);
}
__INLINE void bt_controller_is_interval_inquiry_scan_interval_setf(uint16_t inquiryscaninterval)
{
	ASSERT_ERR((((uint32_t)inquiryscaninterval << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IS_INTERVAL_ADDR, (REG_PL_RD(BT_CONTROLLER_IS_INTERVAL_ADDR) & ~((uint32_t)0x00000FFF)) | ((uint32_t)inquiryscaninterval <<0));
}

/**
 * @brief IS_WINDOW register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    reload_en                 0              
 *    14    scan_incr_en              0              
 *    13    is_int_en                 0              
 *    12    Inq_Scan_type             0              
 *    11:00 is_window                 0x0
 * </pre>
 */
#define BT_CONTROLLER_IS_WINDOW_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000006C)
#define BT_CONTROLLER_IS_WINDOW_OFFSET      0x0000006C
#define BT_CONTROLLER_IS_WINDOW_INDEX       0x0000001B
#define BT_CONTROLLER_IS_WINDOW_RESET       0x00000000

__INLINE uint32_t  bt_controller_is_window_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_IS_WINDOW_ADDR);
}

__INLINE void bt_controller_is_window_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IS_WINDOW_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IS_WINDOW_RELOAD_EN_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_IS_WINDOW_RELOAD_EN_POS    15
#define BT_CONTROLLER_IS_WINDOW_SCAN_INCR_EN_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_IS_WINDOW_SCAN_INCR_EN_POS    14
#define BT_CONTROLLER_IS_WINDOW_IS_INT_EN_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_IS_WINDOW_IS_INT_EN_POS    13
#define BT_CONTROLLER_IS_WINDOW_INQ_SCAN_TYPE_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_IS_WINDOW_INQ_SCAN_TYPE_POS    12
#define BT_CONTROLLER_IS_WINDOW_IS_WINDOW_MASK    ((uint32_t)0x00000FFF)
#define BT_CONTROLLER_IS_WINDOW_IS_WINDOW_LSB    0
#define BT_CONTROLLER_IS_WINDOW_IS_WINDOW_WIDTH    ((uint32_t)0x0000000C)

#define BT_CONTROLLER_IS_WINDOW_RELOAD_EN_RST    0x0
#define BT_CONTROLLER_IS_WINDOW_SCAN_INCR_EN_RST    0x0
#define BT_CONTROLLER_IS_WINDOW_IS_INT_EN_RST    0x0
#define BT_CONTROLLER_IS_WINDOW_INQ_SCAN_TYPE_RST    0x0
#define BT_CONTROLLER_IS_WINDOW_IS_WINDOW_RST    0x0

__INLINE void bt_controller_is_window_pack(uint8_t reload_en, uint8_t scan_incr_en, uint8_t is_int_en, uint8_t inq_scan_type, uint16_t is_window)
{
	ASSERT_ERR((((uint32_t)reload_en << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)scan_incr_en << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)is_int_en << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)inq_scan_type << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)is_window << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IS_WINDOW_ADDR,  ((uint32_t)reload_en << 15) |((uint32_t)scan_incr_en << 14) |((uint32_t)is_int_en << 13) |((uint32_t)inq_scan_type << 12) |((uint32_t)is_window << 0));
}

__INLINE void bt_controller_is_window_unpack(uint8_t* reload_en, uint8_t* scan_incr_en, uint8_t* is_int_en, uint8_t* inq_scan_type, uint16_t* is_window)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IS_WINDOW_ADDR);

	*reload_en = (localVal & ((uint32_t)0x00008000)) >>  15;
	*scan_incr_en = (localVal & ((uint32_t)0x00004000)) >>  14;
	*is_int_en = (localVal & ((uint32_t)0x00002000)) >>  13;
	*inq_scan_type = (localVal & ((uint32_t)0x00001000)) >>  12;
	*is_window = (localVal & ((uint32_t)0x00000FFF)) >>  0;
}

__INLINE uint8_t bt_controller_is_window_reload_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IS_WINDOW_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_is_window_reload_en_setf(uint8_t reloaden)
{
	ASSERT_ERR((((uint32_t)reloaden << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_IS_WINDOW_ADDR, (REG_PL_RD(BT_CONTROLLER_IS_WINDOW_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)reloaden <<15));
}
__INLINE uint8_t bt_controller_is_window_scan_incr_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IS_WINDOW_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_is_window_scan_incr_en_setf(uint8_t scanincren)
{
	ASSERT_ERR((((uint32_t)scanincren << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_IS_WINDOW_ADDR, (REG_PL_RD(BT_CONTROLLER_IS_WINDOW_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)scanincren <<14));
}
__INLINE uint8_t bt_controller_is_window_is_int_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IS_WINDOW_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_is_window_is_int_en_setf(uint8_t isinten)
{
	ASSERT_ERR((((uint32_t)isinten << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_IS_WINDOW_ADDR, (REG_PL_RD(BT_CONTROLLER_IS_WINDOW_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)isinten <<13));
}
__INLINE uint8_t bt_controller_is_window_inq_scan_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IS_WINDOW_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_is_window_inq_scan_type_setf(uint8_t inqscantype)
{
	ASSERT_ERR((((uint32_t)inqscantype << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_IS_WINDOW_ADDR, (REG_PL_RD(BT_CONTROLLER_IS_WINDOW_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)inqscantype <<12));
}
__INLINE uint16_t bt_controller_is_window_is_window_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IS_WINDOW_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x00000FFF)) >> 0);
}
__INLINE void bt_controller_is_window_is_window_setf(uint16_t iswindow)
{
	ASSERT_ERR((((uint32_t)iswindow << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IS_WINDOW_ADDR, (REG_PL_RD(BT_CONTROLLER_IS_WINDOW_ADDR) & ~((uint32_t)0x00000FFF)) | ((uint32_t)iswindow <<0));
}

/**
 * @brief TOSTS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    Piconet_id                0              
 *    14:10 tosts_reg_10_to_15_bits_are_reserved 0x0
 *    09    Hold_end                  0              
 *    08    hold_start                0              
 *    07    Park_nc_to                0              
 *    06    mss_success               0              
 *    05    unpark_req                0              
 *    04    Retx_abort_or_nbc_expiry  0              
 *    03    pr_to                     0              
 *    02    page_to                   0              
 *    01    nc_to                     0              
 *    00    inq_to                    0              
 * </pre>
 */
#define BT_CONTROLLER_TOSTS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000070)
#define BT_CONTROLLER_TOSTS_REG_OFFSET      0x00000070
#define BT_CONTROLLER_TOSTS_REG_INDEX       0x0000001C
#define BT_CONTROLLER_TOSTS_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_tosts_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TOSTS_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_TOSTS_REG_PICONET_ID_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_TOSTS_REG_PICONET_ID_POS    15
#define BT_CONTROLLER_TOSTS_REG_TOSTS_REG_10_TO_15_BITS_ARE_RESERVED_MASK    ((uint32_t)0x00007C00)
#define BT_CONTROLLER_TOSTS_REG_TOSTS_REG_10_TO_15_BITS_ARE_RESERVED_LSB    10
#define BT_CONTROLLER_TOSTS_REG_TOSTS_REG_10_TO_15_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_TOSTS_REG_HOLD_END_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_TOSTS_REG_HOLD_END_POS    9
#define BT_CONTROLLER_TOSTS_REG_HOLD_START_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_TOSTS_REG_HOLD_START_POS    8
#define BT_CONTROLLER_TOSTS_REG_PARK_NC_TO_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_TOSTS_REG_PARK_NC_TO_POS    7
#define BT_CONTROLLER_TOSTS_REG_MSS_SUCCESS_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_TOSTS_REG_MSS_SUCCESS_POS    6
#define BT_CONTROLLER_TOSTS_REG_UNPARK_REQ_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_TOSTS_REG_UNPARK_REQ_POS    5
#define BT_CONTROLLER_TOSTS_REG_RETX_ABORT_OR_NBC_EXPIRY_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_TOSTS_REG_RETX_ABORT_OR_NBC_EXPIRY_POS    4
#define BT_CONTROLLER_TOSTS_REG_PR_TO_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_TOSTS_REG_PR_TO_POS    3
#define BT_CONTROLLER_TOSTS_REG_PAGE_TO_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_TOSTS_REG_PAGE_TO_POS    2
#define BT_CONTROLLER_TOSTS_REG_NC_TO_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TOSTS_REG_NC_TO_POS    1
#define BT_CONTROLLER_TOSTS_REG_INQ_TO_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TOSTS_REG_INQ_TO_POS    0

#define BT_CONTROLLER_TOSTS_REG_PICONET_ID_RST    0x0
#define BT_CONTROLLER_TOSTS_REG_TOSTS_REG_10_TO_15_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TOSTS_REG_HOLD_END_RST    0x0
#define BT_CONTROLLER_TOSTS_REG_HOLD_START_RST    0x0
#define BT_CONTROLLER_TOSTS_REG_PARK_NC_TO_RST    0x0
#define BT_CONTROLLER_TOSTS_REG_MSS_SUCCESS_RST    0x0
#define BT_CONTROLLER_TOSTS_REG_UNPARK_REQ_RST    0x0
#define BT_CONTROLLER_TOSTS_REG_RETX_ABORT_OR_NBC_EXPIRY_RST    0x0
#define BT_CONTROLLER_TOSTS_REG_PR_TO_RST    0x0
#define BT_CONTROLLER_TOSTS_REG_PAGE_TO_RST    0x0
#define BT_CONTROLLER_TOSTS_REG_NC_TO_RST    0x0
#define BT_CONTROLLER_TOSTS_REG_INQ_TO_RST    0x0

__INLINE void bt_controller_tosts_reg_unpack(uint8_t* piconet_id, uint8_t* tosts_reg_10_to_15_bits_are_reserved, uint8_t* hold_end, uint8_t* hold_start, uint8_t* park_nc_to, uint8_t* mss_success, uint8_t* unpark_req, uint8_t* retx_abort_or_nbc_expiry, uint8_t* pr_to, uint8_t* page_to, uint8_t* nc_to, uint8_t* inq_to)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_REG_ADDR);

	*piconet_id = (localVal & ((uint32_t)0x00008000)) >>  15;
	*tosts_reg_10_to_15_bits_are_reserved = (localVal & ((uint32_t)0x00007C00)) >>  10;
	*hold_end = (localVal & ((uint32_t)0x00000200)) >>  9;
	*hold_start = (localVal & ((uint32_t)0x00000100)) >>  8;
	*park_nc_to = (localVal & ((uint32_t)0x00000080)) >>  7;
	*mss_success = (localVal & ((uint32_t)0x00000040)) >>  6;
	*unpark_req = (localVal & ((uint32_t)0x00000020)) >>  5;
	*retx_abort_or_nbc_expiry = (localVal & ((uint32_t)0x00000010)) >>  4;
	*pr_to = (localVal & ((uint32_t)0x00000008)) >>  3;
	*page_to = (localVal & ((uint32_t)0x00000004)) >>  2;
	*nc_to = (localVal & ((uint32_t)0x00000002)) >>  1;
	*inq_to = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_tosts_reg_piconet_id_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t bt_controller_tosts_reg_tosts_reg_10_to_15_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00007C00)) >> 10);
}
__INLINE uint8_t bt_controller_tosts_reg_hold_end_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t bt_controller_tosts_reg_hold_start_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t bt_controller_tosts_reg_park_nc_to_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_tosts_reg_mss_success_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t bt_controller_tosts_reg_unpark_req_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t bt_controller_tosts_reg_retx_abort_or_nbc_expiry_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t bt_controller_tosts_reg_pr_to_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t bt_controller_tosts_reg_page_to_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t bt_controller_tosts_reg_nc_to_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t bt_controller_tosts_reg_inq_to_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief TB_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 tbeacon                   0x0
 * </pre>
 */
#define BT_CONTROLLER_TB_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000074)
#define BT_CONTROLLER_TB_REGISTER_OFFSET      0x00000074
#define BT_CONTROLLER_TB_REGISTER_INDEX       0x0000001D
#define BT_CONTROLLER_TB_REGISTER_RESET       0x00000000

__INLINE uint32_t  bt_controller_tb_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TB_REGISTER_ADDR);
}

__INLINE void bt_controller_tb_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TB_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TB_REGISTER_TBEACON_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_TB_REGISTER_TBEACON_LSB    0
#define BT_CONTROLLER_TB_REGISTER_TBEACON_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_TB_REGISTER_TBEACON_RST    0x0

__INLINE uint16_t bt_controller_tb_register_tbeacon_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TB_REGISTER_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_tb_register_tbeacon_setf(uint16_t tbeacon)
{
	ASSERT_ERR((((uint32_t)tbeacon << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TB_REGISTER_ADDR, (uint32_t)tbeacon << 0);
}

/**
 * @brief DB_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 dbeacon                   0x0
 * </pre>
 */
#define BT_CONTROLLER_DB_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000078)
#define BT_CONTROLLER_DB_REGISTER_OFFSET      0x00000078
#define BT_CONTROLLER_DB_REGISTER_INDEX       0x0000001E
#define BT_CONTROLLER_DB_REGISTER_RESET       0x00000000

__INLINE uint32_t  bt_controller_db_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_DB_REGISTER_ADDR);
}

__INLINE void bt_controller_db_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_DB_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_DB_REGISTER_DBEACON_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_DB_REGISTER_DBEACON_LSB    0
#define BT_CONTROLLER_DB_REGISTER_DBEACON_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_DB_REGISTER_DBEACON_RST    0x0

__INLINE uint16_t bt_controller_db_register_dbeacon_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DB_REGISTER_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_db_register_dbeacon_setf(uint16_t dbeacon)
{
	ASSERT_ERR((((uint32_t)dbeacon << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_DB_REGISTER_ADDR, (uint32_t)dbeacon << 0);
}

/**
 * @brief NACC_DACC_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 N_acc_slots               0x0
 *    07:00 daccess                   0x0
 * </pre>
 */
#define BT_CONTROLLER_NACC_DACC_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000007C)
#define BT_CONTROLLER_NACC_DACC_REG_OFFSET      0x0000007C
#define BT_CONTROLLER_NACC_DACC_REG_INDEX       0x0000001F
#define BT_CONTROLLER_NACC_DACC_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_nacc_dacc_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_NACC_DACC_REG_ADDR);
}

__INLINE void bt_controller_nacc_dacc_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_NACC_DACC_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_NACC_DACC_REG_N_ACC_SLOTS_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_NACC_DACC_REG_N_ACC_SLOTS_LSB    8
#define BT_CONTROLLER_NACC_DACC_REG_N_ACC_SLOTS_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_NACC_DACC_REG_DACCESS_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_NACC_DACC_REG_DACCESS_LSB    0
#define BT_CONTROLLER_NACC_DACC_REG_DACCESS_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_NACC_DACC_REG_N_ACC_SLOTS_RST    0x0
#define BT_CONTROLLER_NACC_DACC_REG_DACCESS_RST    0x0

__INLINE void bt_controller_nacc_dacc_reg_pack(uint8_t n_acc_slots, uint8_t daccess)
{
	ASSERT_ERR((((uint32_t)n_acc_slots << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)daccess << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_NACC_DACC_REG_ADDR,  ((uint32_t)n_acc_slots << 8) |((uint32_t)daccess << 0));
}

__INLINE void bt_controller_nacc_dacc_reg_unpack(uint8_t* n_acc_slots, uint8_t* daccess)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_NACC_DACC_REG_ADDR);

	*n_acc_slots = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*daccess = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_nacc_dacc_reg_n_acc_slots_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_NACC_DACC_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_nacc_dacc_reg_n_acc_slots_setf(uint8_t naccslots)
{
	ASSERT_ERR((((uint32_t)naccslots << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_NACC_DACC_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_NACC_DACC_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)naccslots <<8));
}
__INLINE uint8_t bt_controller_nacc_dacc_reg_daccess_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_NACC_DACC_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_nacc_dacc_reg_daccess_setf(uint8_t daccess)
{
	ASSERT_ERR((((uint32_t)daccess << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_NACC_DACC_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_NACC_DACC_REG_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)daccess <<0));
}

/**
 * @brief DELTAB_TACC_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 Deltab                    0x0
 *    07:00 Taccess                   0x0
 * </pre>
 */
#define BT_CONTROLLER_DELTAB_TACC_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000080)
#define BT_CONTROLLER_DELTAB_TACC_REG_OFFSET      0x00000080
#define BT_CONTROLLER_DELTAB_TACC_REG_INDEX       0x00000020
#define BT_CONTROLLER_DELTAB_TACC_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_deltab_tacc_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_DELTAB_TACC_REG_ADDR);
}

__INLINE void bt_controller_deltab_tacc_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_DELTAB_TACC_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_DELTAB_TACC_REG_DELTAB_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_DELTAB_TACC_REG_DELTAB_LSB    8
#define BT_CONTROLLER_DELTAB_TACC_REG_DELTAB_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_DELTAB_TACC_REG_TACCESS_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_DELTAB_TACC_REG_TACCESS_LSB    0
#define BT_CONTROLLER_DELTAB_TACC_REG_TACCESS_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_DELTAB_TACC_REG_DELTAB_RST    0x0
#define BT_CONTROLLER_DELTAB_TACC_REG_TACCESS_RST    0x0

__INLINE void bt_controller_deltab_tacc_reg_pack(uint8_t deltab, uint8_t taccess)
{
	ASSERT_ERR((((uint32_t)deltab << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)taccess << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_DELTAB_TACC_REG_ADDR,  ((uint32_t)deltab << 8) |((uint32_t)taccess << 0));
}

__INLINE void bt_controller_deltab_tacc_reg_unpack(uint8_t* deltab, uint8_t* taccess)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DELTAB_TACC_REG_ADDR);

	*deltab = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*taccess = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_deltab_tacc_reg_deltab_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DELTAB_TACC_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_deltab_tacc_reg_deltab_setf(uint8_t deltab)
{
	ASSERT_ERR((((uint32_t)deltab << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_DELTAB_TACC_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_DELTAB_TACC_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)deltab <<8));
}
__INLINE uint8_t bt_controller_deltab_tacc_reg_taccess_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DELTAB_TACC_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_deltab_tacc_reg_taccess_setf(uint8_t taccess)
{
	ASSERT_ERR((((uint32_t)taccess << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_DELTAB_TACC_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_DELTAB_TACC_REG_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)taccess <<0));
}

/**
 * @brief MACC_NPOLL_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 Nretrans                  0x0
 *    11:08 Maccess                   0x0
 *    07:00 Npoll                     0x0
 * </pre>
 */
#define BT_CONTROLLER_MACC_NPOLL_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000084)
#define BT_CONTROLLER_MACC_NPOLL_REG_OFFSET      0x00000084
#define BT_CONTROLLER_MACC_NPOLL_REG_INDEX       0x00000021
#define BT_CONTROLLER_MACC_NPOLL_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_macc_npoll_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_MACC_NPOLL_REG_ADDR);
}

__INLINE void bt_controller_macc_npoll_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_MACC_NPOLL_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_MACC_NPOLL_REG_NRETRANS_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_MACC_NPOLL_REG_NRETRANS_LSB    12
#define BT_CONTROLLER_MACC_NPOLL_REG_NRETRANS_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_MACC_NPOLL_REG_MACCESS_MASK    ((uint32_t)0x00000F00)
#define BT_CONTROLLER_MACC_NPOLL_REG_MACCESS_LSB    8
#define BT_CONTROLLER_MACC_NPOLL_REG_MACCESS_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_MACC_NPOLL_REG_NPOLL_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_MACC_NPOLL_REG_NPOLL_LSB    0
#define BT_CONTROLLER_MACC_NPOLL_REG_NPOLL_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_MACC_NPOLL_REG_NRETRANS_RST    0x0
#define BT_CONTROLLER_MACC_NPOLL_REG_MACCESS_RST    0x0
#define BT_CONTROLLER_MACC_NPOLL_REG_NPOLL_RST    0x0

__INLINE void bt_controller_macc_npoll_reg_pack(uint8_t nretrans, uint8_t maccess, uint8_t npoll)
{
	ASSERT_ERR((((uint32_t)nretrans << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)maccess << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)npoll << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_MACC_NPOLL_REG_ADDR,  ((uint32_t)nretrans << 12) |((uint32_t)maccess << 8) |((uint32_t)npoll << 0));
}

__INLINE void bt_controller_macc_npoll_reg_unpack(uint8_t* nretrans, uint8_t* maccess, uint8_t* npoll)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MACC_NPOLL_REG_ADDR);

	*nretrans = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*maccess = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*npoll = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_macc_npoll_reg_nretrans_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MACC_NPOLL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void bt_controller_macc_npoll_reg_nretrans_setf(uint8_t nretrans)
{
	ASSERT_ERR((((uint32_t)nretrans << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(BT_CONTROLLER_MACC_NPOLL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_MACC_NPOLL_REG_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)nretrans <<12));
}
__INLINE uint8_t bt_controller_macc_npoll_reg_maccess_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MACC_NPOLL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void bt_controller_macc_npoll_reg_maccess_setf(uint8_t maccess)
{
	ASSERT_ERR((((uint32_t)maccess << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_MACC_NPOLL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_MACC_NPOLL_REG_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)maccess <<8));
}
__INLINE uint8_t bt_controller_macc_npoll_reg_npoll_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MACC_NPOLL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_macc_npoll_reg_npoll_setf(uint8_t npoll)
{
	ASSERT_ERR((((uint32_t)npoll << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_MACC_NPOLL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_MACC_NPOLL_REG_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)npoll <<0));
}

/**
 * @brief ARADDR_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 araddr_reg_8_to_15_bits_are_reserved 0x0
 *    07:00 Ar_addr                   0x0
 * </pre>
 */
#define BT_CONTROLLER_ARADDR_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000088)
#define BT_CONTROLLER_ARADDR_REG_OFFSET      0x00000088
#define BT_CONTROLLER_ARADDR_REG_INDEX       0x00000022
#define BT_CONTROLLER_ARADDR_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_araddr_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ARADDR_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_ARADDR_REG_ARADDR_REG_8_TO_15_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_ARADDR_REG_ARADDR_REG_8_TO_15_BITS_ARE_RESERVED_LSB    8
#define BT_CONTROLLER_ARADDR_REG_ARADDR_REG_8_TO_15_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_ARADDR_REG_AR_ADDR_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_ARADDR_REG_AR_ADDR_LSB    0
#define BT_CONTROLLER_ARADDR_REG_AR_ADDR_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_ARADDR_REG_ARADDR_REG_8_TO_15_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_ARADDR_REG_AR_ADDR_RST    0x0

__INLINE void bt_controller_araddr_reg_unpack(uint8_t* araddr_reg_8_to_15_bits_are_reserved, uint8_t* ar_addr)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ARADDR_REG_ADDR);

	*araddr_reg_8_to_15_bits_are_reserved = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*ar_addr = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_araddr_reg_araddr_reg_8_to_15_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ARADDR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t bt_controller_araddr_reg_ar_addr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ARADDR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}

/**
 * @brief BEC_NBC_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 Bcn_rep_nb                0x0
 *    07:00 Nbc                       0x0
 * </pre>
 */
#define BT_CONTROLLER_BEC_NBC_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000008C)
#define BT_CONTROLLER_BEC_NBC_REG_OFFSET      0x0000008C
#define BT_CONTROLLER_BEC_NBC_REG_INDEX       0x00000023
#define BT_CONTROLLER_BEC_NBC_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_bec_nbc_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_BEC_NBC_REG_ADDR);
}

__INLINE void bt_controller_bec_nbc_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_BEC_NBC_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_BEC_NBC_REG_BCN_REP_NB_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_BEC_NBC_REG_BCN_REP_NB_LSB    8
#define BT_CONTROLLER_BEC_NBC_REG_BCN_REP_NB_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_BEC_NBC_REG_NBC_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_BEC_NBC_REG_NBC_LSB    0
#define BT_CONTROLLER_BEC_NBC_REG_NBC_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_BEC_NBC_REG_BCN_REP_NB_RST    0x0
#define BT_CONTROLLER_BEC_NBC_REG_NBC_RST    0x0

__INLINE void bt_controller_bec_nbc_reg_pack(uint8_t bcn_rep_nb, uint8_t nbc)
{
	ASSERT_ERR((((uint32_t)bcn_rep_nb << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)nbc << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_BEC_NBC_REG_ADDR,  ((uint32_t)bcn_rep_nb << 8) |((uint32_t)nbc << 0));
}

__INLINE void bt_controller_bec_nbc_reg_unpack(uint8_t* bcn_rep_nb, uint8_t* nbc)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_BEC_NBC_REG_ADDR);

	*bcn_rep_nb = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*nbc = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_bec_nbc_reg_bcn_rep_nb_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_BEC_NBC_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_bec_nbc_reg_bcn_rep_nb_setf(uint8_t bcnrepnb)
{
	ASSERT_ERR((((uint32_t)bcnrepnb << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_BEC_NBC_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_BEC_NBC_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)bcnrepnb <<8));
}
__INLINE uint8_t bt_controller_bec_nbc_reg_nbc_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_BEC_NBC_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_bec_nbc_reg_nbc_setf(uint8_t nbc)
{
	ASSERT_ERR((((uint32_t)nbc << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_BEC_NBC_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_BEC_NBC_REG_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)nbc <<0));
}

/**
 * @brief DSNIFF_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Dsniff_or_Dhold_or_Dpoll  0x0
 * </pre>
 */
#define BT_CONTROLLER_DSNIFF_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000090)
#define BT_CONTROLLER_DSNIFF_REG_OFFSET      0x00000090
#define BT_CONTROLLER_DSNIFF_REG_INDEX       0x00000024
#define BT_CONTROLLER_DSNIFF_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_dsniff_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_DSNIFF_REG_ADDR);
}

__INLINE void bt_controller_dsniff_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_DSNIFF_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_DSNIFF_REG_DSNIFF_OR_DHOLD_OR_DPOLL_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_DSNIFF_REG_DSNIFF_OR_DHOLD_OR_DPOLL_LSB    0
#define BT_CONTROLLER_DSNIFF_REG_DSNIFF_OR_DHOLD_OR_DPOLL_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_DSNIFF_REG_DSNIFF_OR_DHOLD_OR_DPOLL_RST    0x0

__INLINE uint16_t bt_controller_dsniff_reg_dsniff_or_dhold_or_dpoll_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DSNIFF_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_dsniff_reg_dsniff_or_dhold_or_dpoll_setf(uint16_t dsniffordholdordpoll)
{
	ASSERT_ERR((((uint32_t)dsniffordholdordpoll << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_DSNIFF_REG_ADDR, (uint32_t)dsniffordholdordpoll << 0);
}

/**
 * @brief ATTEMPT_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 sniff_attempt             0x0
 * </pre>
 */
#define BT_CONTROLLER_ATTEMPT_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000094)
#define BT_CONTROLLER_ATTEMPT_REG_OFFSET      0x00000094
#define BT_CONTROLLER_ATTEMPT_REG_INDEX       0x00000025
#define BT_CONTROLLER_ATTEMPT_REG_RESET       0x00000000

__INLINE void bt_controller_attempt_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ATTEMPT_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ATTEMPT_REG_SNIFF_ATTEMPT_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_ATTEMPT_REG_SNIFF_ATTEMPT_LSB    0
#define BT_CONTROLLER_ATTEMPT_REG_SNIFF_ATTEMPT_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_ATTEMPT_REG_SNIFF_ATTEMPT_RST    0x0

__INLINE void bt_controller_attempt_reg_sniff_attempt_setf(uint16_t sniffattempt)
{
	ASSERT_ERR((((uint32_t)sniffattempt << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ATTEMPT_REG_ADDR, (uint32_t)sniffattempt << 0);
}

/**
 * @brief SNIFFTO_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Sniff_timeout             0x0
 * </pre>
 */
#define BT_CONTROLLER_SNIFFTO_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000098)
#define BT_CONTROLLER_SNIFFTO_REG_OFFSET      0x00000098
#define BT_CONTROLLER_SNIFFTO_REG_INDEX       0x00000026
#define BT_CONTROLLER_SNIFFTO_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_sniffto_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_SNIFFTO_REG_ADDR);
}

__INLINE void bt_controller_sniffto_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SNIFFTO_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SNIFFTO_REG_SNIFF_TIMEOUT_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_SNIFFTO_REG_SNIFF_TIMEOUT_LSB    0
#define BT_CONTROLLER_SNIFFTO_REG_SNIFF_TIMEOUT_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_SNIFFTO_REG_SNIFF_TIMEOUT_RST    0x0

__INLINE uint16_t bt_controller_sniffto_reg_sniff_timeout_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SNIFFTO_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_sniffto_reg_sniff_timeout_setf(uint16_t snifftimeout)
{
	ASSERT_ERR((((uint32_t)snifftimeout << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_SNIFFTO_REG_ADDR, (uint32_t)snifftimeout << 0);
}

/**
 * @brief TSNIFF_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Sniff_interval_or_Hold_period_or_Tpoll 0x0
 * </pre>
 */
#define BT_CONTROLLER_TSNIFF_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000009C)
#define BT_CONTROLLER_TSNIFF_REG_OFFSET      0x0000009C
#define BT_CONTROLLER_TSNIFF_REG_INDEX       0x00000027
#define BT_CONTROLLER_TSNIFF_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_tsniff_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TSNIFF_REG_ADDR);
}

__INLINE void bt_controller_tsniff_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TSNIFF_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TSNIFF_REG_SNIFF_INTERVAL_OR_HOLD_PERIOD_OR_TPOLL_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_TSNIFF_REG_SNIFF_INTERVAL_OR_HOLD_PERIOD_OR_TPOLL_LSB    0
#define BT_CONTROLLER_TSNIFF_REG_SNIFF_INTERVAL_OR_HOLD_PERIOD_OR_TPOLL_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_TSNIFF_REG_SNIFF_INTERVAL_OR_HOLD_PERIOD_OR_TPOLL_RST    0x0

__INLINE uint16_t bt_controller_tsniff_reg_sniff_interval_or_hold_period_or_tpoll_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TSNIFF_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_tsniff_reg_sniff_interval_or_hold_period_or_tpoll_setf(uint16_t sniffintervalorholdperiodortpoll)
{
	ASSERT_ERR((((uint32_t)sniffintervalorholdperiodortpoll << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TSNIFF_REG_ADDR, (uint32_t)sniffintervalorholdperiodortpoll << 0);
}

/**
 * @brief XTOL_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    xtol_reg_15th_bit_is_reserved 0              
 *    14:08 Pn1_X_val_tol             0x0
 *    07    xtol_reg_7th_bit_is_reserved 0              
 *    06:00 Pn0_X_val_tol             0x0
 * </pre>
 */
#define BT_CONTROLLER_XTOL_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000A0)
#define BT_CONTROLLER_XTOL_REG_OFFSET      0x000000A0
#define BT_CONTROLLER_XTOL_REG_INDEX       0x00000028
#define BT_CONTROLLER_XTOL_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_xtol_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_XTOL_REG_ADDR);
}

__INLINE void bt_controller_xtol_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_XTOL_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_XTOL_REG_XTOL_REG_15_TH_BIT_IS_RESERVED_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_XTOL_REG_XTOL_REG_15_TH_BIT_IS_RESERVED_POS    15
#define BT_CONTROLLER_XTOL_REG_PN_1_X_VAL_TOL_MASK    ((uint32_t)0x00007F00)
#define BT_CONTROLLER_XTOL_REG_PN_1_X_VAL_TOL_LSB    8
#define BT_CONTROLLER_XTOL_REG_PN_1_X_VAL_TOL_WIDTH    ((uint32_t)0x00000007)
#define BT_CONTROLLER_XTOL_REG_XTOL_REG_7_TH_BIT_IS_RESERVED_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_XTOL_REG_XTOL_REG_7_TH_BIT_IS_RESERVED_POS    7
#define BT_CONTROLLER_XTOL_REG_PN_0_X_VAL_TOL_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_XTOL_REG_PN_0_X_VAL_TOL_LSB    0
#define BT_CONTROLLER_XTOL_REG_PN_0_X_VAL_TOL_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_XTOL_REG_XTOL_REG_15_TH_BIT_IS_RESERVED_RST    0x0
#define BT_CONTROLLER_XTOL_REG_PN_1_X_VAL_TOL_RST    0x0
#define BT_CONTROLLER_XTOL_REG_XTOL_REG_7_TH_BIT_IS_RESERVED_RST    0x0
#define BT_CONTROLLER_XTOL_REG_PN_0_X_VAL_TOL_RST    0x0

__INLINE void bt_controller_xtol_reg_pack(uint8_t xtol_reg_15th_bit_is_reserved, uint8_t pn1_x_val_tol, uint8_t xtol_reg_7th_bit_is_reserved, uint8_t pn0_x_val_tol)
{
	ASSERT_ERR((((uint32_t)xtol_reg_15th_bit_is_reserved << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)pn1_x_val_tol << 8) & ~((uint32_t)0x00007F00)) == 0);
	ASSERT_ERR((((uint32_t)xtol_reg_7th_bit_is_reserved << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)pn0_x_val_tol << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_XTOL_REG_ADDR,  ((uint32_t)xtol_reg_15th_bit_is_reserved << 15) |((uint32_t)pn1_x_val_tol << 8) |((uint32_t)xtol_reg_7th_bit_is_reserved << 7) |((uint32_t)pn0_x_val_tol << 0));
}

__INLINE void bt_controller_xtol_reg_unpack(uint8_t* xtol_reg_15th_bit_is_reserved, uint8_t* pn1_x_val_tol, uint8_t* xtol_reg_7th_bit_is_reserved, uint8_t* pn0_x_val_tol)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_XTOL_REG_ADDR);

	*xtol_reg_15th_bit_is_reserved = (localVal & ((uint32_t)0x00008000)) >>  15;
	*pn1_x_val_tol = (localVal & ((uint32_t)0x00007F00)) >>  8;
	*xtol_reg_7th_bit_is_reserved = (localVal & ((uint32_t)0x00000080)) >>  7;
	*pn0_x_val_tol = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_xtol_reg_xtol_reg_15_th_bit_is_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_XTOL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t bt_controller_xtol_reg_pn_1_x_val_tol_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_XTOL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00007F00)) >> 8);
}
__INLINE void bt_controller_xtol_reg_pn_1_x_val_tol_setf(uint8_t pn1xvaltol)
{
	ASSERT_ERR((((uint32_t)pn1xvaltol << 8) & ~((uint32_t)0x00007F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_XTOL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_XTOL_REG_ADDR) & ~((uint32_t)0x00007F00)) | ((uint32_t)pn1xvaltol <<8));
}
__INLINE uint8_t bt_controller_xtol_reg_xtol_reg_7_th_bit_is_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_XTOL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_xtol_reg_pn_0_x_val_tol_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_XTOL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void bt_controller_xtol_reg_pn_0_x_val_tol_setf(uint8_t pn0xvaltol)
{
	ASSERT_ERR((((uint32_t)pn0xvaltol << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_XTOL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_XTOL_REG_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)pn0xvaltol <<0));
}

/**
 * @brief PHOFF_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:11 phase_offset_reg_11_to_15_bits_are_reserved 0x0
 *    10:00 Ph_offset                 0x0
 * </pre>
 */
#define BT_CONTROLLER_PHOFF_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000A4)
#define BT_CONTROLLER_PHOFF_REG_OFFSET      0x000000A4
#define BT_CONTROLLER_PHOFF_REG_INDEX       0x00000029
#define BT_CONTROLLER_PHOFF_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_phoff_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PHOFF_REG_ADDR);
}

__INLINE void bt_controller_phoff_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PHOFF_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PHOFF_REG_PHASE_OFFSET_REG_11_TO_15_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000F800)
#define BT_CONTROLLER_PHOFF_REG_PHASE_OFFSET_REG_11_TO_15_BITS_ARE_RESERVED_LSB    11
#define BT_CONTROLLER_PHOFF_REG_PHASE_OFFSET_REG_11_TO_15_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_PHOFF_REG_PH_OFFSET_MASK    ((uint32_t)0x000007FF)
#define BT_CONTROLLER_PHOFF_REG_PH_OFFSET_LSB    0
#define BT_CONTROLLER_PHOFF_REG_PH_OFFSET_WIDTH    ((uint32_t)0x0000000B)

#define BT_CONTROLLER_PHOFF_REG_PHASE_OFFSET_REG_11_TO_15_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_PHOFF_REG_PH_OFFSET_RST    0x0

__INLINE void bt_controller_phoff_reg_pack(uint8_t phase_offset_reg_11_to_15_bits_are_reserved, uint16_t ph_offset)
{
	ASSERT_ERR((((uint32_t)phase_offset_reg_11_to_15_bits_are_reserved << 11) & ~((uint32_t)0x0000F800)) == 0);
	ASSERT_ERR((((uint32_t)ph_offset << 0) & ~((uint32_t)0x000007FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PHOFF_REG_ADDR,  ((uint32_t)phase_offset_reg_11_to_15_bits_are_reserved << 11) |((uint32_t)ph_offset << 0));
}

__INLINE void bt_controller_phoff_reg_unpack(uint8_t* phase_offset_reg_11_to_15_bits_are_reserved, uint16_t* ph_offset)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PHOFF_REG_ADDR);

	*phase_offset_reg_11_to_15_bits_are_reserved = (localVal & ((uint32_t)0x0000F800)) >>  11;
	*ph_offset = (localVal & ((uint32_t)0x000007FF)) >>  0;
}

__INLINE uint8_t bt_controller_phoff_reg_phase_offset_reg_11_to_15_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PHOFF_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F800)) >> 11);
}
__INLINE uint16_t bt_controller_phoff_reg_ph_offset_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PHOFF_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000007FF)) >> 0);
}
__INLINE void bt_controller_phoff_reg_ph_offset_setf(uint16_t phoffset)
{
	ASSERT_ERR((((uint32_t)phoffset << 0) & ~((uint32_t)0x000007FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PHOFF_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PHOFF_REG_ADDR) & ~((uint32_t)0x000007FF)) | ((uint32_t)phoffset <<0));
}

/**
 * @brief HARD_OFFSET register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 hard_offset               0x0
 * </pre>
 */
#define BT_CONTROLLER_HARD_OFFSET_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000A8)
#define BT_CONTROLLER_HARD_OFFSET_OFFSET      0x000000A8
#define BT_CONTROLLER_HARD_OFFSET_INDEX       0x0000002A
#define BT_CONTROLLER_HARD_OFFSET_RESET       0x00000000

__INLINE uint32_t  bt_controller_hard_offset_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_HARD_OFFSET_ADDR);
}

// field definitions
#define BT_CONTROLLER_HARD_OFFSET_HARD_OFFSET_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_HARD_OFFSET_HARD_OFFSET_LSB    0
#define BT_CONTROLLER_HARD_OFFSET_HARD_OFFSET_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_HARD_OFFSET_HARD_OFFSET_RST    0x0

__INLINE uint16_t bt_controller_hard_offset_hard_offset_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_HARD_OFFSET_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief SNIFF_SCO_STS register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    Sniff_intr_status_pn1_slv 0              
 *    14    Sniff_intr_status_pn0_slv 0              
 *    13:07 Esco_start_intr_status    0x0
 *    06:00 Sniff_intr_status         0x0
 * </pre>
 */
#define BT_CONTROLLER_SNIFF_SCO_STS_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000B8)
#define BT_CONTROLLER_SNIFF_SCO_STS_OFFSET      0x000000B8
#define BT_CONTROLLER_SNIFF_SCO_STS_INDEX       0x0000002E
#define BT_CONTROLLER_SNIFF_SCO_STS_RESET       0x00000000

__INLINE uint32_t  bt_controller_sniff_sco_sts_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_SNIFF_SCO_STS_ADDR);
}

// field definitions
#define BT_CONTROLLER_SNIFF_SCO_STS_SNIFF_INTR_STATUS_PN_1_SLV_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_SNIFF_SCO_STS_SNIFF_INTR_STATUS_PN_1_SLV_POS    15
#define BT_CONTROLLER_SNIFF_SCO_STS_SNIFF_INTR_STATUS_PN_0_SLV_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_SNIFF_SCO_STS_SNIFF_INTR_STATUS_PN_0_SLV_POS    14
#define BT_CONTROLLER_SNIFF_SCO_STS_ESCO_START_INTR_STATUS_MASK    ((uint32_t)0x00003F80)
#define BT_CONTROLLER_SNIFF_SCO_STS_ESCO_START_INTR_STATUS_LSB    7
#define BT_CONTROLLER_SNIFF_SCO_STS_ESCO_START_INTR_STATUS_WIDTH    ((uint32_t)0x00000007)
#define BT_CONTROLLER_SNIFF_SCO_STS_SNIFF_INTR_STATUS_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_SNIFF_SCO_STS_SNIFF_INTR_STATUS_LSB    0
#define BT_CONTROLLER_SNIFF_SCO_STS_SNIFF_INTR_STATUS_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_SNIFF_SCO_STS_SNIFF_INTR_STATUS_PN_1_SLV_RST    0x0
#define BT_CONTROLLER_SNIFF_SCO_STS_SNIFF_INTR_STATUS_PN_0_SLV_RST    0x0
#define BT_CONTROLLER_SNIFF_SCO_STS_ESCO_START_INTR_STATUS_RST    0x0
#define BT_CONTROLLER_SNIFF_SCO_STS_SNIFF_INTR_STATUS_RST    0x0

__INLINE void bt_controller_sniff_sco_sts_unpack(uint8_t* sniff_intr_status_pn1_slv, uint8_t* sniff_intr_status_pn0_slv, uint8_t* esco_start_intr_status, uint8_t* sniff_intr_status)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SNIFF_SCO_STS_ADDR);

	*sniff_intr_status_pn1_slv = (localVal & ((uint32_t)0x00008000)) >>  15;
	*sniff_intr_status_pn0_slv = (localVal & ((uint32_t)0x00004000)) >>  14;
	*esco_start_intr_status = (localVal & ((uint32_t)0x00003F80)) >>  7;
	*sniff_intr_status = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_sniff_sco_sts_sniff_intr_status_pn_1_slv_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SNIFF_SCO_STS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t bt_controller_sniff_sco_sts_sniff_intr_status_pn_0_slv_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SNIFF_SCO_STS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t bt_controller_sniff_sco_sts_esco_start_intr_status_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SNIFF_SCO_STS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003F80)) >> 7);
}
__INLINE uint8_t bt_controller_sniff_sco_sts_sniff_intr_status_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SNIFF_SCO_STS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}

/**
 * @brief SCO_TYPE_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    Ed_si_data_en             0              
 *    14    sco_packet_reg_bit14_is_reserved 0              
 *    13    Slot_retx_en              1              
 *    12    Bb_ack_handle             0              
 *    11    Sniff_tpoll_prty          1              
 *    10    Sco_single_full_bw        0              
 *    09    Sco_multi_full_bw         0              
 *    08    Esco_full_bw              0              
 *    07    White_dis                 0              
 *    06:05 Hop_mode                  0x0
 *    04    Master_slave              0              
 *    03:00 Sco_type                  0x0
 * </pre>
 */
#define BT_CONTROLLER_SCO_TYPE_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000BC)
#define BT_CONTROLLER_SCO_TYPE_REG_OFFSET      0x000000BC
#define BT_CONTROLLER_SCO_TYPE_REG_INDEX       0x0000002F
#define BT_CONTROLLER_SCO_TYPE_REG_RESET       0x00002800

__INLINE uint32_t  bt_controller_sco_type_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR);
}

__INLINE void bt_controller_sco_type_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SCO_TYPE_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SCO_TYPE_REG_ED_SI_DATA_EN_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_SCO_TYPE_REG_ED_SI_DATA_EN_POS    15
#define BT_CONTROLLER_SCO_TYPE_REG_SCO_PACKET_REG_BIT_14_IS_RESERVED_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_SCO_TYPE_REG_SCO_PACKET_REG_BIT_14_IS_RESERVED_POS    14
#define BT_CONTROLLER_SCO_TYPE_REG_SLOT_RETX_EN_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_SCO_TYPE_REG_SLOT_RETX_EN_POS    13
#define BT_CONTROLLER_SCO_TYPE_REG_BB_ACK_HANDLE_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_SCO_TYPE_REG_BB_ACK_HANDLE_POS    12
#define BT_CONTROLLER_SCO_TYPE_REG_SNIFF_TPOLL_PRTY_BIT    ((uint32_t)0x00000800)
#define BT_CONTROLLER_SCO_TYPE_REG_SNIFF_TPOLL_PRTY_POS    11
#define BT_CONTROLLER_SCO_TYPE_REG_SCO_SINGLE_FULL_BW_BIT    ((uint32_t)0x00000400)
#define BT_CONTROLLER_SCO_TYPE_REG_SCO_SINGLE_FULL_BW_POS    10
#define BT_CONTROLLER_SCO_TYPE_REG_SCO_MULTI_FULL_BW_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_SCO_TYPE_REG_SCO_MULTI_FULL_BW_POS    9
#define BT_CONTROLLER_SCO_TYPE_REG_ESCO_FULL_BW_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_SCO_TYPE_REG_ESCO_FULL_BW_POS    8
#define BT_CONTROLLER_SCO_TYPE_REG_WHITE_DIS_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_SCO_TYPE_REG_WHITE_DIS_POS    7
#define BT_CONTROLLER_SCO_TYPE_REG_HOP_MODE_MASK    ((uint32_t)0x00000060)
#define BT_CONTROLLER_SCO_TYPE_REG_HOP_MODE_LSB    5
#define BT_CONTROLLER_SCO_TYPE_REG_HOP_MODE_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_SCO_TYPE_REG_MASTER_SLAVE_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_SCO_TYPE_REG_MASTER_SLAVE_POS    4
#define BT_CONTROLLER_SCO_TYPE_REG_SCO_TYPE_MASK    ((uint32_t)0x0000000F)
#define BT_CONTROLLER_SCO_TYPE_REG_SCO_TYPE_LSB    0
#define BT_CONTROLLER_SCO_TYPE_REG_SCO_TYPE_WIDTH    ((uint32_t)0x00000004)

#define BT_CONTROLLER_SCO_TYPE_REG_ED_SI_DATA_EN_RST    0x0
#define BT_CONTROLLER_SCO_TYPE_REG_SCO_PACKET_REG_BIT_14_IS_RESERVED_RST    0x0
#define BT_CONTROLLER_SCO_TYPE_REG_SLOT_RETX_EN_RST    0x1
#define BT_CONTROLLER_SCO_TYPE_REG_BB_ACK_HANDLE_RST    0x0
#define BT_CONTROLLER_SCO_TYPE_REG_SNIFF_TPOLL_PRTY_RST    0x1
#define BT_CONTROLLER_SCO_TYPE_REG_SCO_SINGLE_FULL_BW_RST    0x0
#define BT_CONTROLLER_SCO_TYPE_REG_SCO_MULTI_FULL_BW_RST    0x0
#define BT_CONTROLLER_SCO_TYPE_REG_ESCO_FULL_BW_RST    0x0
#define BT_CONTROLLER_SCO_TYPE_REG_WHITE_DIS_RST    0x0
#define BT_CONTROLLER_SCO_TYPE_REG_HOP_MODE_RST    0x0
#define BT_CONTROLLER_SCO_TYPE_REG_MASTER_SLAVE_RST    0x0
#define BT_CONTROLLER_SCO_TYPE_REG_SCO_TYPE_RST    0x0

__INLINE void bt_controller_sco_type_reg_pack(uint8_t ed_si_data_en, uint8_t sco_packet_reg_bit14_is_reserved, uint8_t slot_retx_en, uint8_t bb_ack_handle, uint8_t sniff_tpoll_prty, uint8_t sco_single_full_bw, uint8_t sco_multi_full_bw, uint8_t esco_full_bw, uint8_t white_dis, uint8_t hop_mode, uint8_t master_slave, uint8_t sco_type)
{
	ASSERT_ERR((((uint32_t)ed_si_data_en << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)sco_packet_reg_bit14_is_reserved << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)slot_retx_en << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)bb_ack_handle << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_tpoll_prty << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)sco_single_full_bw << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)sco_multi_full_bw << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)esco_full_bw << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)white_dis << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)hop_mode << 5) & ~((uint32_t)0x00000060)) == 0);
	ASSERT_ERR((((uint32_t)master_slave << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)sco_type << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(BT_CONTROLLER_SCO_TYPE_REG_ADDR,  ((uint32_t)ed_si_data_en << 15) |((uint32_t)sco_packet_reg_bit14_is_reserved << 14) |((uint32_t)slot_retx_en << 13) |((uint32_t)bb_ack_handle << 12) |((uint32_t)sniff_tpoll_prty << 11) |((uint32_t)sco_single_full_bw << 10) |((uint32_t)sco_multi_full_bw << 9) |((uint32_t)esco_full_bw << 8) |((uint32_t)white_dis << 7) |((uint32_t)hop_mode << 5) |((uint32_t)master_slave << 4) |((uint32_t)sco_type << 0));
}

__INLINE void bt_controller_sco_type_reg_unpack(uint8_t* ed_si_data_en, uint8_t* sco_packet_reg_bit14_is_reserved, uint8_t* slot_retx_en, uint8_t* bb_ack_handle, uint8_t* sniff_tpoll_prty, uint8_t* sco_single_full_bw, uint8_t* sco_multi_full_bw, uint8_t* esco_full_bw, uint8_t* white_dis, uint8_t* hop_mode, uint8_t* master_slave, uint8_t* sco_type)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR);

	*ed_si_data_en = (localVal & ((uint32_t)0x00008000)) >>  15;
	*sco_packet_reg_bit14_is_reserved = (localVal & ((uint32_t)0x00004000)) >>  14;
	*slot_retx_en = (localVal & ((uint32_t)0x00002000)) >>  13;
	*bb_ack_handle = (localVal & ((uint32_t)0x00001000)) >>  12;
	*sniff_tpoll_prty = (localVal & ((uint32_t)0x00000800)) >>  11;
	*sco_single_full_bw = (localVal & ((uint32_t)0x00000400)) >>  10;
	*sco_multi_full_bw = (localVal & ((uint32_t)0x00000200)) >>  9;
	*esco_full_bw = (localVal & ((uint32_t)0x00000100)) >>  8;
	*white_dis = (localVal & ((uint32_t)0x00000080)) >>  7;
	*hop_mode = (localVal & ((uint32_t)0x00000060)) >>  5;
	*master_slave = (localVal & ((uint32_t)0x00000010)) >>  4;
	*sco_type = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t bt_controller_sco_type_reg_ed_si_data_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_sco_type_reg_ed_si_data_en_setf(uint8_t edsidataen)
{
	ASSERT_ERR((((uint32_t)edsidataen << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_SCO_TYPE_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)edsidataen <<15));
}
__INLINE uint8_t bt_controller_sco_type_reg_sco_packet_reg_bit_14_is_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE uint8_t bt_controller_sco_type_reg_slot_retx_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_sco_type_reg_slot_retx_en_setf(uint8_t slotretxen)
{
	ASSERT_ERR((((uint32_t)slotretxen << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_SCO_TYPE_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)slotretxen <<13));
}
__INLINE uint8_t bt_controller_sco_type_reg_bb_ack_handle_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_sco_type_reg_bb_ack_handle_setf(uint8_t bbackhandle)
{
	ASSERT_ERR((((uint32_t)bbackhandle << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_SCO_TYPE_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)bbackhandle <<12));
}
__INLINE uint8_t bt_controller_sco_type_reg_sniff_tpoll_prty_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void bt_controller_sco_type_reg_sniff_tpoll_prty_setf(uint8_t snifftpollprty)
{
	ASSERT_ERR((((uint32_t)snifftpollprty << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(BT_CONTROLLER_SCO_TYPE_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)snifftpollprty <<11));
}
__INLINE uint8_t bt_controller_sco_type_reg_sco_single_full_bw_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void bt_controller_sco_type_reg_sco_single_full_bw_setf(uint8_t scosinglefullbw)
{
	ASSERT_ERR((((uint32_t)scosinglefullbw << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(BT_CONTROLLER_SCO_TYPE_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)scosinglefullbw <<10));
}
__INLINE uint8_t bt_controller_sco_type_reg_sco_multi_full_bw_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void bt_controller_sco_type_reg_sco_multi_full_bw_setf(uint8_t scomultifullbw)
{
	ASSERT_ERR((((uint32_t)scomultifullbw << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(BT_CONTROLLER_SCO_TYPE_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)scomultifullbw <<9));
}
__INLINE uint8_t bt_controller_sco_type_reg_esco_full_bw_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_sco_type_reg_esco_full_bw_setf(uint8_t escofullbw)
{
	ASSERT_ERR((((uint32_t)escofullbw << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_SCO_TYPE_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)escofullbw <<8));
}
__INLINE uint8_t bt_controller_sco_type_reg_white_dis_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_sco_type_reg_white_dis_setf(uint8_t whitedis)
{
	ASSERT_ERR((((uint32_t)whitedis << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_SCO_TYPE_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)whitedis <<7));
}
__INLINE uint8_t bt_controller_sco_type_reg_hop_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000060)) >> 5);
}
__INLINE void bt_controller_sco_type_reg_hop_mode_setf(uint8_t hopmode)
{
	ASSERT_ERR((((uint32_t)hopmode << 5) & ~((uint32_t)0x00000060)) == 0);
	REG_PL_WR(BT_CONTROLLER_SCO_TYPE_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR) & ~((uint32_t)0x00000060)) | ((uint32_t)hopmode <<5));
}
__INLINE uint8_t bt_controller_sco_type_reg_master_slave_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_sco_type_reg_master_slave_setf(uint8_t masterslave)
{
	ASSERT_ERR((((uint32_t)masterslave << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_SCO_TYPE_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)masterslave <<4));
}
__INLINE uint8_t bt_controller_sco_type_reg_sco_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void bt_controller_sco_type_reg_sco_type_setf(uint8_t scotype)
{
	ASSERT_ERR((((uint32_t)scotype << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(BT_CONTROLLER_SCO_TYPE_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SCO_TYPE_REG_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)scotype <<0));
}

/**
 * @brief VER_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Ver_No                    0x00D3
 * </pre>
 */
#define BT_CONTROLLER_VER_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000C0)
#define BT_CONTROLLER_VER_REG_OFFSET      0x000000C0
#define BT_CONTROLLER_VER_REG_INDEX       0x00000030
#define BT_CONTROLLER_VER_REG_RESET       0x000000D3

__INLINE uint32_t  bt_controller_ver_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_VER_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_VER_REG_VER_NO_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_VER_REG_VER_NO_LSB    0
#define BT_CONTROLLER_VER_REG_VER_NO_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_VER_REG_VER_NO_RST    0x00D3

__INLINE uint16_t bt_controller_ver_reg_ver_no_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_VER_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief CLKOFF_REG_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Clock_off                 0x0
 * </pre>
 */
#define BT_CONTROLLER_CLKOFF_REG_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000C4)
#define BT_CONTROLLER_CLKOFF_REG_1_OFFSET      0x000000C4
#define BT_CONTROLLER_CLKOFF_REG_1_INDEX       0x00000031
#define BT_CONTROLLER_CLKOFF_REG_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_clkoff_reg_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CLKOFF_REG_1_ADDR);
}

__INLINE void bt_controller_clkoff_reg_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CLKOFF_REG_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CLKOFF_REG_1_CLOCK_OFF_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_CLKOFF_REG_1_CLOCK_OFF_LSB    0
#define BT_CONTROLLER_CLKOFF_REG_1_CLOCK_OFF_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_CLKOFF_REG_1_CLOCK_OFF_RST    0x0

__INLINE uint16_t bt_controller_clkoff_reg_1_clock_off_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CLKOFF_REG_1_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_clkoff_reg_1_clock_off_setf(uint16_t clockoff)
{
	ASSERT_ERR((((uint32_t)clockoff << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_CLKOFF_REG_1_ADDR, (uint32_t)clockoff << 0);
}

/**
 * @brief NATIVE_CLK_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Native_clock_15_to_0_bits 0x0
 * </pre>
 */
#define BT_CONTROLLER_NATIVE_CLK_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000C8)
#define BT_CONTROLLER_NATIVE_CLK_1_OFFSET      0x000000C8
#define BT_CONTROLLER_NATIVE_CLK_1_INDEX       0x00000032
#define BT_CONTROLLER_NATIVE_CLK_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_native_clk_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_NATIVE_CLK_1_ADDR);
}

__INLINE void bt_controller_native_clk_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_NATIVE_CLK_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_NATIVE_CLK_1_NATIVE_CLOCK_15_TO_0_BITS_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_NATIVE_CLK_1_NATIVE_CLOCK_15_TO_0_BITS_LSB    0
#define BT_CONTROLLER_NATIVE_CLK_1_NATIVE_CLOCK_15_TO_0_BITS_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_NATIVE_CLK_1_NATIVE_CLOCK_15_TO_0_BITS_RST    0x0

__INLINE uint16_t bt_controller_native_clk_1_native_clock_15_to_0_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_NATIVE_CLK_1_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_native_clk_1_native_clock_15_to_0_bits_setf(uint16_t nativeclock15to0bits)
{
	ASSERT_ERR((((uint32_t)nativeclock15to0bits << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_NATIVE_CLK_1_ADDR, (uint32_t)nativeclock15to0bits << 0);
}

/**
 * @brief NATIVE_CLK_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 native_clk2_reg_12_to_15_bits_are_reserved 0x0
 *    11:00 Native_clock_27_to_16_bits 0x0
 * </pre>
 */
#define BT_CONTROLLER_NATIVE_CLK_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000CC)
#define BT_CONTROLLER_NATIVE_CLK_2_OFFSET      0x000000CC
#define BT_CONTROLLER_NATIVE_CLK_2_INDEX       0x00000033
#define BT_CONTROLLER_NATIVE_CLK_2_RESET       0x00000000

__INLINE uint32_t  bt_controller_native_clk_2_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_NATIVE_CLK_2_ADDR);
}

__INLINE void bt_controller_native_clk_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_NATIVE_CLK_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_NATIVE_CLK_2_NATIVE_CLK_2_REG_12_TO_15_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_NATIVE_CLK_2_NATIVE_CLK_2_REG_12_TO_15_BITS_ARE_RESERVED_LSB    12
#define BT_CONTROLLER_NATIVE_CLK_2_NATIVE_CLK_2_REG_12_TO_15_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_NATIVE_CLK_2_NATIVE_CLOCK_27_TO_16_BITS_MASK    ((uint32_t)0x00000FFF)
#define BT_CONTROLLER_NATIVE_CLK_2_NATIVE_CLOCK_27_TO_16_BITS_LSB    0
#define BT_CONTROLLER_NATIVE_CLK_2_NATIVE_CLOCK_27_TO_16_BITS_WIDTH    ((uint32_t)0x0000000C)

#define BT_CONTROLLER_NATIVE_CLK_2_NATIVE_CLK_2_REG_12_TO_15_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_NATIVE_CLK_2_NATIVE_CLOCK_27_TO_16_BITS_RST    0x0

__INLINE void bt_controller_native_clk_2_pack(uint8_t native_clk2_reg_12_to_15_bits_are_reserved, uint16_t native_clock_27_to_16_bits)
{
	ASSERT_ERR((((uint32_t)native_clk2_reg_12_to_15_bits_are_reserved << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)native_clock_27_to_16_bits << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_NATIVE_CLK_2_ADDR,  ((uint32_t)native_clk2_reg_12_to_15_bits_are_reserved << 12) |((uint32_t)native_clock_27_to_16_bits << 0));
}

__INLINE void bt_controller_native_clk_2_unpack(uint8_t* native_clk2_reg_12_to_15_bits_are_reserved, uint16_t* native_clock_27_to_16_bits)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_NATIVE_CLK_2_ADDR);

	*native_clk2_reg_12_to_15_bits_are_reserved = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*native_clock_27_to_16_bits = (localVal & ((uint32_t)0x00000FFF)) >>  0;
}

__INLINE uint8_t bt_controller_native_clk_2_native_clk_2_reg_12_to_15_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_NATIVE_CLK_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE uint16_t bt_controller_native_clk_2_native_clock_27_to_16_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_NATIVE_CLK_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x00000FFF)) >> 0);
}
__INLINE void bt_controller_native_clk_2_native_clock_27_to_16_bits_setf(uint16_t nativeclock27to16bits)
{
	ASSERT_ERR((((uint32_t)nativeclock27to16bits << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_NATIVE_CLK_2_ADDR, (REG_PL_RD(BT_CONTROLLER_NATIVE_CLK_2_ADDR) & ~((uint32_t)0x00000FFF)) | ((uint32_t)nativeclock27to16bits <<0));
}

/**
 * @brief PN_0_CLK_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Piconet0_clock_15_to_2_bits 0x0
 * </pre>
 */
#define BT_CONTROLLER_PN_0_CLK_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000D0)
#define BT_CONTROLLER_PN_0_CLK_1_REG_OFFSET      0x000000D0
#define BT_CONTROLLER_PN_0_CLK_1_REG_INDEX       0x00000034
#define BT_CONTROLLER_PN_0_CLK_1_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_pn_0_clk_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PN_0_CLK_1_REG_ADDR);
}

__INLINE void bt_controller_pn_0_clk_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PN_0_CLK_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PN_0_CLK_1_REG_PICONET_0_CLOCK_15_TO_2_BITS_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PN_0_CLK_1_REG_PICONET_0_CLOCK_15_TO_2_BITS_LSB    0
#define BT_CONTROLLER_PN_0_CLK_1_REG_PICONET_0_CLOCK_15_TO_2_BITS_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PN_0_CLK_1_REG_PICONET_0_CLOCK_15_TO_2_BITS_RST    0x0

__INLINE uint16_t bt_controller_pn_0_clk_1_reg_piconet_0_clock_15_to_2_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_CLK_1_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_pn_0_clk_1_reg_piconet_0_clock_15_to_2_bits_setf(uint16_t piconet0clock15to2bits)
{
	ASSERT_ERR((((uint32_t)piconet0clock15to2bits << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_0_CLK_1_REG_ADDR, (uint32_t)piconet0clock15to2bits << 0);
}

/**
 * @brief PN_0_CLK_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 piconet0_clk2_reg_15_to_12_bits_are_reserved 0x0
 *    11:00 Piconet0_clock_27_to_16_bits 0x0
 * </pre>
 */
#define BT_CONTROLLER_PN_0_CLK_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000D4)
#define BT_CONTROLLER_PN_0_CLK_2_REG_OFFSET      0x000000D4
#define BT_CONTROLLER_PN_0_CLK_2_REG_INDEX       0x00000035
#define BT_CONTROLLER_PN_0_CLK_2_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_pn_0_clk_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PN_0_CLK_2_REG_ADDR);
}

__INLINE void bt_controller_pn_0_clk_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PN_0_CLK_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PN_0_CLK_2_REG_PICONET_0_CLK_2_REG_15_TO_12_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_PN_0_CLK_2_REG_PICONET_0_CLK_2_REG_15_TO_12_BITS_ARE_RESERVED_LSB    12
#define BT_CONTROLLER_PN_0_CLK_2_REG_PICONET_0_CLK_2_REG_15_TO_12_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_PN_0_CLK_2_REG_PICONET_0_CLOCK_27_TO_16_BITS_MASK    ((uint32_t)0x00000FFF)
#define BT_CONTROLLER_PN_0_CLK_2_REG_PICONET_0_CLOCK_27_TO_16_BITS_LSB    0
#define BT_CONTROLLER_PN_0_CLK_2_REG_PICONET_0_CLOCK_27_TO_16_BITS_WIDTH    ((uint32_t)0x0000000C)

#define BT_CONTROLLER_PN_0_CLK_2_REG_PICONET_0_CLK_2_REG_15_TO_12_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_PN_0_CLK_2_REG_PICONET_0_CLOCK_27_TO_16_BITS_RST    0x0

__INLINE void bt_controller_pn_0_clk_2_reg_pack(uint8_t piconet0_clk2_reg_15_to_12_bits_are_reserved, uint16_t piconet0_clock_27_to_16_bits)
{
	ASSERT_ERR((((uint32_t)piconet0_clk2_reg_15_to_12_bits_are_reserved << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)piconet0_clock_27_to_16_bits << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_0_CLK_2_REG_ADDR,  ((uint32_t)piconet0_clk2_reg_15_to_12_bits_are_reserved << 12) |((uint32_t)piconet0_clock_27_to_16_bits << 0));
}

__INLINE void bt_controller_pn_0_clk_2_reg_unpack(uint8_t* piconet0_clk2_reg_15_to_12_bits_are_reserved, uint16_t* piconet0_clock_27_to_16_bits)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_CLK_2_REG_ADDR);

	*piconet0_clk2_reg_15_to_12_bits_are_reserved = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*piconet0_clock_27_to_16_bits = (localVal & ((uint32_t)0x00000FFF)) >>  0;
}

__INLINE uint8_t bt_controller_pn_0_clk_2_reg_piconet_0_clk_2_reg_15_to_12_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_CLK_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE uint16_t bt_controller_pn_0_clk_2_reg_piconet_0_clock_27_to_16_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_CLK_2_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x00000FFF)) >> 0);
}
__INLINE void bt_controller_pn_0_clk_2_reg_piconet_0_clock_27_to_16_bits_setf(uint16_t piconet0clock27to16bits)
{
	ASSERT_ERR((((uint32_t)piconet0clock27to16bits << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_0_CLK_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PN_0_CLK_2_REG_ADDR) & ~((uint32_t)0x00000FFF)) | ((uint32_t)piconet0clock27to16bits <<0));
}

/**
 * @brief WIN_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Wakeup_Instance           0x0
 * </pre>
 */
#define BT_CONTROLLER_WIN_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000DC)
#define BT_CONTROLLER_WIN_REG_OFFSET      0x000000DC
#define BT_CONTROLLER_WIN_REG_INDEX       0x00000037
#define BT_CONTROLLER_WIN_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_win_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_WIN_REG_ADDR);
}

__INLINE void bt_controller_win_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_WIN_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_WIN_REG_WAKEUP_INSTANCE_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_WIN_REG_WAKEUP_INSTANCE_LSB    0
#define BT_CONTROLLER_WIN_REG_WAKEUP_INSTANCE_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_WIN_REG_WAKEUP_INSTANCE_RST    0x0

__INLINE uint16_t bt_controller_win_reg_wakeup_instance_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_WIN_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_win_reg_wakeup_instance_setf(uint16_t wakeupinstance)
{
	ASSERT_ERR((((uint32_t)wakeupinstance << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_WIN_REG_ADDR, (uint32_t)wakeupinstance << 0);
}

/**
 * @brief LUT_ROW_01 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 Packet_Type_am_address_0  0x0
 *    11:10 LLID_am_address_0         0x0
 *    09:00 Payload_Length_of_am_address_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_01_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000E0)
#define BT_CONTROLLER_LUT_ROW_01_OFFSET      0x000000E0
#define BT_CONTROLLER_LUT_ROW_01_INDEX       0x00000038
#define BT_CONTROLLER_LUT_ROW_01_RESET       0x00000000

__INLINE uint32_t  bt_controller_lut_row_01_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_01_ADDR);
}

__INLINE void bt_controller_lut_row_01_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_01_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_01_PACKET_TYPE_AM_ADDRESS_0_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_LUT_ROW_01_PACKET_TYPE_AM_ADDRESS_0_LSB    12
#define BT_CONTROLLER_LUT_ROW_01_PACKET_TYPE_AM_ADDRESS_0_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_01_LLID_AM_ADDRESS_0_MASK    ((uint32_t)0x00000C00)
#define BT_CONTROLLER_LUT_ROW_01_LLID_AM_ADDRESS_0_LSB    10
#define BT_CONTROLLER_LUT_ROW_01_LLID_AM_ADDRESS_0_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_01_PAYLOAD_LENGTH_OF_AM_ADDRESS_0_MASK    ((uint32_t)0x000003FF)
#define BT_CONTROLLER_LUT_ROW_01_PAYLOAD_LENGTH_OF_AM_ADDRESS_0_LSB    0
#define BT_CONTROLLER_LUT_ROW_01_PAYLOAD_LENGTH_OF_AM_ADDRESS_0_WIDTH    ((uint32_t)0x0000000A)

#define BT_CONTROLLER_LUT_ROW_01_PACKET_TYPE_AM_ADDRESS_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_01_LLID_AM_ADDRESS_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_01_PAYLOAD_LENGTH_OF_AM_ADDRESS_0_RST    0x0

__INLINE void bt_controller_lut_row_01_pack(uint8_t packet_type_am_address_0, uint8_t llid_am_address_0, uint16_t payload_length_of_am_address_0)
{
	ASSERT_ERR((((uint32_t)packet_type_am_address_0 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)llid_am_address_0 << 10) & ~((uint32_t)0x00000C00)) == 0);
	ASSERT_ERR((((uint32_t)payload_length_of_am_address_0 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_01_ADDR,  ((uint32_t)packet_type_am_address_0 << 12) |((uint32_t)llid_am_address_0 << 10) |((uint32_t)payload_length_of_am_address_0 << 0));
}

__INLINE void bt_controller_lut_row_01_unpack(uint8_t* packet_type_am_address_0, uint8_t* llid_am_address_0, uint16_t* payload_length_of_am_address_0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_01_ADDR);

	*packet_type_am_address_0 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*llid_am_address_0 = (localVal & ((uint32_t)0x00000C00)) >>  10;
	*payload_length_of_am_address_0 = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_01_packet_type_am_address_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_01_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void bt_controller_lut_row_01_packet_type_am_address_0_setf(uint8_t packettypeamaddress0)
{
	ASSERT_ERR((((uint32_t)packettypeamaddress0 << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_01_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_01_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)packettypeamaddress0 <<12));
}
__INLINE uint8_t bt_controller_lut_row_01_llid_am_address_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_01_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000C00)) >> 10);
}
__INLINE void bt_controller_lut_row_01_llid_am_address_0_setf(uint8_t llidamaddress0)
{
	ASSERT_ERR((((uint32_t)llidamaddress0 << 10) & ~((uint32_t)0x00000C00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_01_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_01_ADDR) & ~((uint32_t)0x00000C00)) | ((uint32_t)llidamaddress0 <<10));
}
__INLINE uint16_t bt_controller_lut_row_01_payload_length_of_am_address_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_01_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void bt_controller_lut_row_01_payload_length_of_am_address_0_setf(uint16_t payloadlengthofamaddress0)
{
	ASSERT_ERR((((uint32_t)payloadlengthofamaddress0 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_01_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_01_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)payloadlengthofamaddress0 <<0));
}

/**
 * @brief LUT_ROW_02 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    PTT_of_am_address_0       0              
 *    14    ESCO_of_am_address_0      0              
 *    13    Sniff_Start_of_am_address_0 0              
 *    12    Sniff_End_of_am_address_0 0              
 *    11:09 TX_Gain_of_am_address_0   0x7
 *    08    Active_of_am_address_0    0              
 *    07    SCO1_of_am_address_0      0              
 *    06    SCO2_of_am_address_0      0              
 *    05    Payload_Header_Flow_of_am_address_0_Broadcast 0              
 *    04    Hold_of_am_address_0      0              
 *    03    Sniff_of_am_address_0     0              
 *    02    ARQN_of_am_address_0      0              
 *    01    SEQN_of_am_address_0      0              
 *    00    Packet_Header_Flow_of_am_address_0 0              
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_02_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000E4)
#define BT_CONTROLLER_LUT_ROW_02_OFFSET      0x000000E4
#define BT_CONTROLLER_LUT_ROW_02_INDEX       0x00000039
#define BT_CONTROLLER_LUT_ROW_02_RESET       0x00000E00

__INLINE uint32_t  bt_controller_lut_row_02_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR);
}

__INLINE void bt_controller_lut_row_02_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_02_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_02_PTT_OF_AM_ADDRESS_0_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_LUT_ROW_02_PTT_OF_AM_ADDRESS_0_POS    15
#define BT_CONTROLLER_LUT_ROW_02_ESCO_OF_AM_ADDRESS_0_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_LUT_ROW_02_ESCO_OF_AM_ADDRESS_0_POS    14
#define BT_CONTROLLER_LUT_ROW_02_SNIFF_START_OF_AM_ADDRESS_0_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_LUT_ROW_02_SNIFF_START_OF_AM_ADDRESS_0_POS    13
#define BT_CONTROLLER_LUT_ROW_02_SNIFF_END_OF_AM_ADDRESS_0_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_LUT_ROW_02_SNIFF_END_OF_AM_ADDRESS_0_POS    12
#define BT_CONTROLLER_LUT_ROW_02_TX_GAIN_OF_AM_ADDRESS_0_MASK    ((uint32_t)0x00000E00)
#define BT_CONTROLLER_LUT_ROW_02_TX_GAIN_OF_AM_ADDRESS_0_LSB    9
#define BT_CONTROLLER_LUT_ROW_02_TX_GAIN_OF_AM_ADDRESS_0_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_LUT_ROW_02_ACTIVE_OF_AM_ADDRESS_0_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_LUT_ROW_02_ACTIVE_OF_AM_ADDRESS_0_POS    8
#define BT_CONTROLLER_LUT_ROW_02_SCO_1_OF_AM_ADDRESS_0_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_LUT_ROW_02_SCO_1_OF_AM_ADDRESS_0_POS    7
#define BT_CONTROLLER_LUT_ROW_02_SCO_2_OF_AM_ADDRESS_0_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_LUT_ROW_02_SCO_2_OF_AM_ADDRESS_0_POS    6
#define BT_CONTROLLER_LUT_ROW_02_PAYLOAD_HEADER_FLOW_OF_AM_ADDRESS_0_BROADCAST_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_LUT_ROW_02_PAYLOAD_HEADER_FLOW_OF_AM_ADDRESS_0_BROADCAST_POS    5
#define BT_CONTROLLER_LUT_ROW_02_HOLD_OF_AM_ADDRESS_0_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_LUT_ROW_02_HOLD_OF_AM_ADDRESS_0_POS    4
#define BT_CONTROLLER_LUT_ROW_02_SNIFF_OF_AM_ADDRESS_0_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_LUT_ROW_02_SNIFF_OF_AM_ADDRESS_0_POS    3
#define BT_CONTROLLER_LUT_ROW_02_ARQN_OF_AM_ADDRESS_0_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_02_ARQN_OF_AM_ADDRESS_0_POS    2
#define BT_CONTROLLER_LUT_ROW_02_SEQN_OF_AM_ADDRESS_0_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_02_SEQN_OF_AM_ADDRESS_0_POS    1
#define BT_CONTROLLER_LUT_ROW_02_PACKET_HEADER_FLOW_OF_AM_ADDRESS_0_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_LUT_ROW_02_PACKET_HEADER_FLOW_OF_AM_ADDRESS_0_POS    0

#define BT_CONTROLLER_LUT_ROW_02_PTT_OF_AM_ADDRESS_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_02_ESCO_OF_AM_ADDRESS_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_02_SNIFF_START_OF_AM_ADDRESS_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_02_SNIFF_END_OF_AM_ADDRESS_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_02_TX_GAIN_OF_AM_ADDRESS_0_RST    0x7
#define BT_CONTROLLER_LUT_ROW_02_ACTIVE_OF_AM_ADDRESS_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_02_SCO_1_OF_AM_ADDRESS_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_02_SCO_2_OF_AM_ADDRESS_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_02_PAYLOAD_HEADER_FLOW_OF_AM_ADDRESS_0_BROADCAST_RST    0x0
#define BT_CONTROLLER_LUT_ROW_02_HOLD_OF_AM_ADDRESS_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_02_SNIFF_OF_AM_ADDRESS_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_02_ARQN_OF_AM_ADDRESS_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_02_SEQN_OF_AM_ADDRESS_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_02_PACKET_HEADER_FLOW_OF_AM_ADDRESS_0_RST    0x0

__INLINE void bt_controller_lut_row_02_pack(uint8_t ptt_of_am_address_0, uint8_t esco_of_am_address_0, uint8_t sniff_start_of_am_address_0, uint8_t sniff_end_of_am_address_0, uint8_t tx_gain_of_am_address_0, uint8_t active_of_am_address_0, uint8_t sco1_of_am_address_0, uint8_t sco2_of_am_address_0, uint8_t payload_header_flow_of_am_address_0_broadcast, uint8_t hold_of_am_address_0, uint8_t sniff_of_am_address_0, uint8_t arqn_of_am_address_0, uint8_t seqn_of_am_address_0, uint8_t packet_header_flow_of_am_address_0)
{
	ASSERT_ERR((((uint32_t)ptt_of_am_address_0 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)esco_of_am_address_0 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_start_of_am_address_0 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_end_of_am_address_0 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)tx_gain_of_am_address_0 << 9) & ~((uint32_t)0x00000E00)) == 0);
	ASSERT_ERR((((uint32_t)active_of_am_address_0 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)sco1_of_am_address_0 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)sco2_of_am_address_0 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)payload_header_flow_of_am_address_0_broadcast << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)hold_of_am_address_0 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)sniff_of_am_address_0 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)arqn_of_am_address_0 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)seqn_of_am_address_0 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)packet_header_flow_of_am_address_0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_02_ADDR,  ((uint32_t)ptt_of_am_address_0 << 15) |((uint32_t)esco_of_am_address_0 << 14) |((uint32_t)sniff_start_of_am_address_0 << 13) |((uint32_t)sniff_end_of_am_address_0 << 12) |((uint32_t)tx_gain_of_am_address_0 << 9) |((uint32_t)active_of_am_address_0 << 8) |((uint32_t)sco1_of_am_address_0 << 7) |((uint32_t)sco2_of_am_address_0 << 6) |((uint32_t)payload_header_flow_of_am_address_0_broadcast << 5) |((uint32_t)hold_of_am_address_0 << 4) |((uint32_t)sniff_of_am_address_0 << 3) |((uint32_t)arqn_of_am_address_0 << 2) |((uint32_t)seqn_of_am_address_0 << 1) |((uint32_t)packet_header_flow_of_am_address_0 << 0));
}

__INLINE void bt_controller_lut_row_02_unpack(uint8_t* ptt_of_am_address_0, uint8_t* esco_of_am_address_0, uint8_t* sniff_start_of_am_address_0, uint8_t* sniff_end_of_am_address_0, uint8_t* tx_gain_of_am_address_0, uint8_t* active_of_am_address_0, uint8_t* sco1_of_am_address_0, uint8_t* sco2_of_am_address_0, uint8_t* payload_header_flow_of_am_address_0_broadcast, uint8_t* hold_of_am_address_0, uint8_t* sniff_of_am_address_0, uint8_t* arqn_of_am_address_0, uint8_t* seqn_of_am_address_0, uint8_t* packet_header_flow_of_am_address_0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR);

	*ptt_of_am_address_0 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*esco_of_am_address_0 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*sniff_start_of_am_address_0 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*sniff_end_of_am_address_0 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*tx_gain_of_am_address_0 = (localVal & ((uint32_t)0x00000E00)) >>  9;
	*active_of_am_address_0 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*sco1_of_am_address_0 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*sco2_of_am_address_0 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*payload_header_flow_of_am_address_0_broadcast = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hold_of_am_address_0 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*sniff_of_am_address_0 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*arqn_of_am_address_0 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*seqn_of_am_address_0 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*packet_header_flow_of_am_address_0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_02_ptt_of_am_address_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_lut_row_02_ptt_of_am_address_0_setf(uint8_t pttofamaddress0)
{
	ASSERT_ERR((((uint32_t)pttofamaddress0 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_02_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)pttofamaddress0 <<15));
}
__INLINE uint8_t bt_controller_lut_row_02_esco_of_am_address_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_lut_row_02_esco_of_am_address_0_setf(uint8_t escoofamaddress0)
{
	ASSERT_ERR((((uint32_t)escoofamaddress0 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_02_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)escoofamaddress0 <<14));
}
__INLINE uint8_t bt_controller_lut_row_02_sniff_start_of_am_address_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_lut_row_02_sniff_start_of_am_address_0_setf(uint8_t sniffstartofamaddress0)
{
	ASSERT_ERR((((uint32_t)sniffstartofamaddress0 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_02_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)sniffstartofamaddress0 <<13));
}
__INLINE uint8_t bt_controller_lut_row_02_sniff_end_of_am_address_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_lut_row_02_sniff_end_of_am_address_0_setf(uint8_t sniffendofamaddress0)
{
	ASSERT_ERR((((uint32_t)sniffendofamaddress0 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_02_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)sniffendofamaddress0 <<12));
}
__INLINE uint8_t bt_controller_lut_row_02_tx_gain_of_am_address_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000E00)) >> 9);
}
__INLINE void bt_controller_lut_row_02_tx_gain_of_am_address_0_setf(uint8_t txgainofamaddress0)
{
	ASSERT_ERR((((uint32_t)txgainofamaddress0 << 9) & ~((uint32_t)0x00000E00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_02_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR) & ~((uint32_t)0x00000E00)) | ((uint32_t)txgainofamaddress0 <<9));
}
__INLINE uint8_t bt_controller_lut_row_02_active_of_am_address_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_lut_row_02_active_of_am_address_0_setf(uint8_t activeofamaddress0)
{
	ASSERT_ERR((((uint32_t)activeofamaddress0 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_02_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)activeofamaddress0 <<8));
}
__INLINE uint8_t bt_controller_lut_row_02_sco_1_of_am_address_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_lut_row_02_sco_1_of_am_address_0_setf(uint8_t sco1ofamaddress0)
{
	ASSERT_ERR((((uint32_t)sco1ofamaddress0 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_02_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)sco1ofamaddress0 <<7));
}
__INLINE uint8_t bt_controller_lut_row_02_sco_2_of_am_address_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_lut_row_02_sco_2_of_am_address_0_setf(uint8_t sco2ofamaddress0)
{
	ASSERT_ERR((((uint32_t)sco2ofamaddress0 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_02_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)sco2ofamaddress0 <<6));
}
__INLINE uint8_t bt_controller_lut_row_02_payload_header_flow_of_am_address_0_broadcast_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_lut_row_02_payload_header_flow_of_am_address_0_broadcast_setf(uint8_t payloadheaderflowofamaddress0broadcast)
{
	ASSERT_ERR((((uint32_t)payloadheaderflowofamaddress0broadcast << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_02_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)payloadheaderflowofamaddress0broadcast <<5));
}
__INLINE uint8_t bt_controller_lut_row_02_hold_of_am_address_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_lut_row_02_hold_of_am_address_0_setf(uint8_t holdofamaddress0)
{
	ASSERT_ERR((((uint32_t)holdofamaddress0 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_02_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)holdofamaddress0 <<4));
}
__INLINE uint8_t bt_controller_lut_row_02_sniff_of_am_address_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_lut_row_02_sniff_of_am_address_0_setf(uint8_t sniffofamaddress0)
{
	ASSERT_ERR((((uint32_t)sniffofamaddress0 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_02_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)sniffofamaddress0 <<3));
}
__INLINE uint8_t bt_controller_lut_row_02_arqn_of_am_address_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_lut_row_02_arqn_of_am_address_0_setf(uint8_t arqnofamaddress0)
{
	ASSERT_ERR((((uint32_t)arqnofamaddress0 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_02_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)arqnofamaddress0 <<2));
}
__INLINE uint8_t bt_controller_lut_row_02_seqn_of_am_address_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_lut_row_02_seqn_of_am_address_0_setf(uint8_t seqnofamaddress0)
{
	ASSERT_ERR((((uint32_t)seqnofamaddress0 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_02_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)seqnofamaddress0 <<1));
}
__INLINE uint8_t bt_controller_lut_row_02_packet_header_flow_of_am_address_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_lut_row_02_packet_header_flow_of_am_address_0_setf(uint8_t packetheaderflowofamaddress0)
{
	ASSERT_ERR((((uint32_t)packetheaderflowofamaddress0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_02_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_02_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)packetheaderflowofamaddress0 <<0));
}

/**
 * @brief LUT_ROW_11 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 Packet_Type_am_address_1  0xC
 *    11:10 LLID_am_address_1         0x0
 *    09:00 Payload_Length_of_am_address_1 0x0
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_11_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000E8)
#define BT_CONTROLLER_LUT_ROW_11_OFFSET      0x000000E8
#define BT_CONTROLLER_LUT_ROW_11_INDEX       0x0000003A
#define BT_CONTROLLER_LUT_ROW_11_RESET       0x0000C000

__INLINE uint32_t  bt_controller_lut_row_11_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_11_ADDR);
}

__INLINE void bt_controller_lut_row_11_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_11_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_11_PACKET_TYPE_AM_ADDRESS_1_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_LUT_ROW_11_PACKET_TYPE_AM_ADDRESS_1_LSB    12
#define BT_CONTROLLER_LUT_ROW_11_PACKET_TYPE_AM_ADDRESS_1_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_11_LLID_AM_ADDRESS_1_MASK    ((uint32_t)0x00000C00)
#define BT_CONTROLLER_LUT_ROW_11_LLID_AM_ADDRESS_1_LSB    10
#define BT_CONTROLLER_LUT_ROW_11_LLID_AM_ADDRESS_1_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_11_PAYLOAD_LENGTH_OF_AM_ADDRESS_1_MASK    ((uint32_t)0x000003FF)
#define BT_CONTROLLER_LUT_ROW_11_PAYLOAD_LENGTH_OF_AM_ADDRESS_1_LSB    0
#define BT_CONTROLLER_LUT_ROW_11_PAYLOAD_LENGTH_OF_AM_ADDRESS_1_WIDTH    ((uint32_t)0x0000000A)

#define BT_CONTROLLER_LUT_ROW_11_PACKET_TYPE_AM_ADDRESS_1_RST    0xC
#define BT_CONTROLLER_LUT_ROW_11_LLID_AM_ADDRESS_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_11_PAYLOAD_LENGTH_OF_AM_ADDRESS_1_RST    0x0

__INLINE void bt_controller_lut_row_11_pack(uint8_t packet_type_am_address_1, uint8_t llid_am_address_1, uint16_t payload_length_of_am_address_1)
{
	ASSERT_ERR((((uint32_t)packet_type_am_address_1 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)llid_am_address_1 << 10) & ~((uint32_t)0x00000C00)) == 0);
	ASSERT_ERR((((uint32_t)payload_length_of_am_address_1 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_11_ADDR,  ((uint32_t)packet_type_am_address_1 << 12) |((uint32_t)llid_am_address_1 << 10) |((uint32_t)payload_length_of_am_address_1 << 0));
}

__INLINE void bt_controller_lut_row_11_unpack(uint8_t* packet_type_am_address_1, uint8_t* llid_am_address_1, uint16_t* payload_length_of_am_address_1)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_11_ADDR);

	*packet_type_am_address_1 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*llid_am_address_1 = (localVal & ((uint32_t)0x00000C00)) >>  10;
	*payload_length_of_am_address_1 = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_11_packet_type_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_11_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void bt_controller_lut_row_11_packet_type_am_address_1_setf(uint8_t packettypeamaddress1)
{
	ASSERT_ERR((((uint32_t)packettypeamaddress1 << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_11_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_11_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)packettypeamaddress1 <<12));
}
__INLINE uint8_t bt_controller_lut_row_11_llid_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_11_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000C00)) >> 10);
}
__INLINE void bt_controller_lut_row_11_llid_am_address_1_setf(uint8_t llidamaddress1)
{
	ASSERT_ERR((((uint32_t)llidamaddress1 << 10) & ~((uint32_t)0x00000C00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_11_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_11_ADDR) & ~((uint32_t)0x00000C00)) | ((uint32_t)llidamaddress1 <<10));
}
__INLINE uint16_t bt_controller_lut_row_11_payload_length_of_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_11_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void bt_controller_lut_row_11_payload_length_of_am_address_1_setf(uint16_t payloadlengthofamaddress1)
{
	ASSERT_ERR((((uint32_t)payloadlengthofamaddress1 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_11_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_11_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)payloadlengthofamaddress1 <<0));
}

/**
 * @brief LUT_ROW_12 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    Ptt_am_address_1          0              
 *    14    Esco_am_address_1         0              
 *    13    Sniff_Start_am_address_1  0              
 *    12    Sniff_End_am_address_1    0              
 *    11:09 TX_Gain_am_address_1      0x0
 *    08    Active_am_address_1       0              
 *    07    SCO1_am_address_1         0              
 *    06    SCO2_am_address_1         0              
 *    05    Payload_Header_Flow_am_address_1 0              
 *    04    Hold_am_address_1         0              
 *    03    Sniff_am_address_1        0              
 *    02    ARQN_am_address_1         1              
 *    01    SEQN_am_address_1         0              
 *    00    Packet_Header_Flow_am_address_1 1              
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_12_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000EC)
#define BT_CONTROLLER_LUT_ROW_12_OFFSET      0x000000EC
#define BT_CONTROLLER_LUT_ROW_12_INDEX       0x0000003B
#define BT_CONTROLLER_LUT_ROW_12_RESET       0x00000005

__INLINE uint32_t  bt_controller_lut_row_12_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR);
}

__INLINE void bt_controller_lut_row_12_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_12_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_12_PTT_AM_ADDRESS_1_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_LUT_ROW_12_PTT_AM_ADDRESS_1_POS    15
#define BT_CONTROLLER_LUT_ROW_12_ESCO_AM_ADDRESS_1_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_LUT_ROW_12_ESCO_AM_ADDRESS_1_POS    14
#define BT_CONTROLLER_LUT_ROW_12_SNIFF_START_AM_ADDRESS_1_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_LUT_ROW_12_SNIFF_START_AM_ADDRESS_1_POS    13
#define BT_CONTROLLER_LUT_ROW_12_SNIFF_END_AM_ADDRESS_1_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_LUT_ROW_12_SNIFF_END_AM_ADDRESS_1_POS    12
#define BT_CONTROLLER_LUT_ROW_12_TX_GAIN_AM_ADDRESS_1_MASK    ((uint32_t)0x00000E00)
#define BT_CONTROLLER_LUT_ROW_12_TX_GAIN_AM_ADDRESS_1_LSB    9
#define BT_CONTROLLER_LUT_ROW_12_TX_GAIN_AM_ADDRESS_1_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_LUT_ROW_12_ACTIVE_AM_ADDRESS_1_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_LUT_ROW_12_ACTIVE_AM_ADDRESS_1_POS    8
#define BT_CONTROLLER_LUT_ROW_12_SCO_1_AM_ADDRESS_1_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_LUT_ROW_12_SCO_1_AM_ADDRESS_1_POS    7
#define BT_CONTROLLER_LUT_ROW_12_SCO_2_AM_ADDRESS_1_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_LUT_ROW_12_SCO_2_AM_ADDRESS_1_POS    6
#define BT_CONTROLLER_LUT_ROW_12_PAYLOAD_HEADER_FLOW_AM_ADDRESS_1_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_LUT_ROW_12_PAYLOAD_HEADER_FLOW_AM_ADDRESS_1_POS    5
#define BT_CONTROLLER_LUT_ROW_12_HOLD_AM_ADDRESS_1_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_LUT_ROW_12_HOLD_AM_ADDRESS_1_POS    4
#define BT_CONTROLLER_LUT_ROW_12_SNIFF_AM_ADDRESS_1_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_LUT_ROW_12_SNIFF_AM_ADDRESS_1_POS    3
#define BT_CONTROLLER_LUT_ROW_12_ARQN_AM_ADDRESS_1_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_12_ARQN_AM_ADDRESS_1_POS    2
#define BT_CONTROLLER_LUT_ROW_12_SEQN_AM_ADDRESS_1_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_12_SEQN_AM_ADDRESS_1_POS    1
#define BT_CONTROLLER_LUT_ROW_12_PACKET_HEADER_FLOW_AM_ADDRESS_1_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_LUT_ROW_12_PACKET_HEADER_FLOW_AM_ADDRESS_1_POS    0

#define BT_CONTROLLER_LUT_ROW_12_PTT_AM_ADDRESS_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_12_ESCO_AM_ADDRESS_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_12_SNIFF_START_AM_ADDRESS_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_12_SNIFF_END_AM_ADDRESS_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_12_TX_GAIN_AM_ADDRESS_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_12_ACTIVE_AM_ADDRESS_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_12_SCO_1_AM_ADDRESS_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_12_SCO_2_AM_ADDRESS_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_12_PAYLOAD_HEADER_FLOW_AM_ADDRESS_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_12_HOLD_AM_ADDRESS_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_12_SNIFF_AM_ADDRESS_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_12_ARQN_AM_ADDRESS_1_RST    0x1
#define BT_CONTROLLER_LUT_ROW_12_SEQN_AM_ADDRESS_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_12_PACKET_HEADER_FLOW_AM_ADDRESS_1_RST    0x1

__INLINE void bt_controller_lut_row_12_pack(uint8_t ptt_am_address_1, uint8_t esco_am_address_1, uint8_t sniff_start_am_address_1, uint8_t sniff_end_am_address_1, uint8_t tx_gain_am_address_1, uint8_t active_am_address_1, uint8_t sco1_am_address_1, uint8_t sco2_am_address_1, uint8_t payload_header_flow_am_address_1, uint8_t hold_am_address_1, uint8_t sniff_am_address_1, uint8_t arqn_am_address_1, uint8_t seqn_am_address_1, uint8_t packet_header_flow_am_address_1)
{
	ASSERT_ERR((((uint32_t)ptt_am_address_1 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)esco_am_address_1 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_start_am_address_1 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_end_am_address_1 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)tx_gain_am_address_1 << 9) & ~((uint32_t)0x00000E00)) == 0);
	ASSERT_ERR((((uint32_t)active_am_address_1 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)sco1_am_address_1 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)sco2_am_address_1 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)payload_header_flow_am_address_1 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)hold_am_address_1 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)sniff_am_address_1 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)arqn_am_address_1 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)seqn_am_address_1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)packet_header_flow_am_address_1 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_12_ADDR,  ((uint32_t)ptt_am_address_1 << 15) |((uint32_t)esco_am_address_1 << 14) |((uint32_t)sniff_start_am_address_1 << 13) |((uint32_t)sniff_end_am_address_1 << 12) |((uint32_t)tx_gain_am_address_1 << 9) |((uint32_t)active_am_address_1 << 8) |((uint32_t)sco1_am_address_1 << 7) |((uint32_t)sco2_am_address_1 << 6) |((uint32_t)payload_header_flow_am_address_1 << 5) |((uint32_t)hold_am_address_1 << 4) |((uint32_t)sniff_am_address_1 << 3) |((uint32_t)arqn_am_address_1 << 2) |((uint32_t)seqn_am_address_1 << 1) |((uint32_t)packet_header_flow_am_address_1 << 0));
}

__INLINE void bt_controller_lut_row_12_unpack(uint8_t* ptt_am_address_1, uint8_t* esco_am_address_1, uint8_t* sniff_start_am_address_1, uint8_t* sniff_end_am_address_1, uint8_t* tx_gain_am_address_1, uint8_t* active_am_address_1, uint8_t* sco1_am_address_1, uint8_t* sco2_am_address_1, uint8_t* payload_header_flow_am_address_1, uint8_t* hold_am_address_1, uint8_t* sniff_am_address_1, uint8_t* arqn_am_address_1, uint8_t* seqn_am_address_1, uint8_t* packet_header_flow_am_address_1)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR);

	*ptt_am_address_1 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*esco_am_address_1 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*sniff_start_am_address_1 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*sniff_end_am_address_1 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*tx_gain_am_address_1 = (localVal & ((uint32_t)0x00000E00)) >>  9;
	*active_am_address_1 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*sco1_am_address_1 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*sco2_am_address_1 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*payload_header_flow_am_address_1 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hold_am_address_1 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*sniff_am_address_1 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*arqn_am_address_1 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*seqn_am_address_1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*packet_header_flow_am_address_1 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_12_ptt_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_lut_row_12_ptt_am_address_1_setf(uint8_t pttamaddress1)
{
	ASSERT_ERR((((uint32_t)pttamaddress1 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_12_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)pttamaddress1 <<15));
}
__INLINE uint8_t bt_controller_lut_row_12_esco_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_lut_row_12_esco_am_address_1_setf(uint8_t escoamaddress1)
{
	ASSERT_ERR((((uint32_t)escoamaddress1 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_12_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)escoamaddress1 <<14));
}
__INLINE uint8_t bt_controller_lut_row_12_sniff_start_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_lut_row_12_sniff_start_am_address_1_setf(uint8_t sniffstartamaddress1)
{
	ASSERT_ERR((((uint32_t)sniffstartamaddress1 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_12_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)sniffstartamaddress1 <<13));
}
__INLINE uint8_t bt_controller_lut_row_12_sniff_end_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_lut_row_12_sniff_end_am_address_1_setf(uint8_t sniffendamaddress1)
{
	ASSERT_ERR((((uint32_t)sniffendamaddress1 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_12_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)sniffendamaddress1 <<12));
}
__INLINE uint8_t bt_controller_lut_row_12_tx_gain_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000E00)) >> 9);
}
__INLINE void bt_controller_lut_row_12_tx_gain_am_address_1_setf(uint8_t txgainamaddress1)
{
	ASSERT_ERR((((uint32_t)txgainamaddress1 << 9) & ~((uint32_t)0x00000E00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_12_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR) & ~((uint32_t)0x00000E00)) | ((uint32_t)txgainamaddress1 <<9));
}
__INLINE uint8_t bt_controller_lut_row_12_active_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_lut_row_12_active_am_address_1_setf(uint8_t activeamaddress1)
{
	ASSERT_ERR((((uint32_t)activeamaddress1 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_12_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)activeamaddress1 <<8));
}
__INLINE uint8_t bt_controller_lut_row_12_sco_1_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_lut_row_12_sco_1_am_address_1_setf(uint8_t sco1amaddress1)
{
	ASSERT_ERR((((uint32_t)sco1amaddress1 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_12_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)sco1amaddress1 <<7));
}
__INLINE uint8_t bt_controller_lut_row_12_sco_2_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_lut_row_12_sco_2_am_address_1_setf(uint8_t sco2amaddress1)
{
	ASSERT_ERR((((uint32_t)sco2amaddress1 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_12_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)sco2amaddress1 <<6));
}
__INLINE uint8_t bt_controller_lut_row_12_payload_header_flow_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_lut_row_12_payload_header_flow_am_address_1_setf(uint8_t payloadheaderflowamaddress1)
{
	ASSERT_ERR((((uint32_t)payloadheaderflowamaddress1 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_12_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)payloadheaderflowamaddress1 <<5));
}
__INLINE uint8_t bt_controller_lut_row_12_hold_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_lut_row_12_hold_am_address_1_setf(uint8_t holdamaddress1)
{
	ASSERT_ERR((((uint32_t)holdamaddress1 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_12_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)holdamaddress1 <<4));
}
__INLINE uint8_t bt_controller_lut_row_12_sniff_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_lut_row_12_sniff_am_address_1_setf(uint8_t sniffamaddress1)
{
	ASSERT_ERR((((uint32_t)sniffamaddress1 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_12_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)sniffamaddress1 <<3));
}
__INLINE uint8_t bt_controller_lut_row_12_arqn_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_lut_row_12_arqn_am_address_1_setf(uint8_t arqnamaddress1)
{
	ASSERT_ERR((((uint32_t)arqnamaddress1 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_12_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)arqnamaddress1 <<2));
}
__INLINE uint8_t bt_controller_lut_row_12_seqn_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_lut_row_12_seqn_am_address_1_setf(uint8_t seqnamaddress1)
{
	ASSERT_ERR((((uint32_t)seqnamaddress1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_12_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)seqnamaddress1 <<1));
}
__INLINE uint8_t bt_controller_lut_row_12_packet_header_flow_am_address_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_lut_row_12_packet_header_flow_am_address_1_setf(uint8_t packetheaderflowamaddress1)
{
	ASSERT_ERR((((uint32_t)packetheaderflowamaddress1 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_12_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_12_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)packetheaderflowamaddress1 <<0));
}

/**
 * @brief LUT_ROW_21 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 Packet_Type_am_address_2  0xC
 *    11:10 LLID_am_address_2         0x0
 *    09:00 Payload_Length_of_am_address_2 0x0
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_21_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000F0)
#define BT_CONTROLLER_LUT_ROW_21_OFFSET      0x000000F0
#define BT_CONTROLLER_LUT_ROW_21_INDEX       0x0000003C
#define BT_CONTROLLER_LUT_ROW_21_RESET       0x0000C000

__INLINE uint32_t  bt_controller_lut_row_21_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_21_ADDR);
}

__INLINE void bt_controller_lut_row_21_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_21_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_21_PACKET_TYPE_AM_ADDRESS_2_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_LUT_ROW_21_PACKET_TYPE_AM_ADDRESS_2_LSB    12
#define BT_CONTROLLER_LUT_ROW_21_PACKET_TYPE_AM_ADDRESS_2_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_21_LLID_AM_ADDRESS_2_MASK    ((uint32_t)0x00000C00)
#define BT_CONTROLLER_LUT_ROW_21_LLID_AM_ADDRESS_2_LSB    10
#define BT_CONTROLLER_LUT_ROW_21_LLID_AM_ADDRESS_2_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_21_PAYLOAD_LENGTH_OF_AM_ADDRESS_2_MASK    ((uint32_t)0x000003FF)
#define BT_CONTROLLER_LUT_ROW_21_PAYLOAD_LENGTH_OF_AM_ADDRESS_2_LSB    0
#define BT_CONTROLLER_LUT_ROW_21_PAYLOAD_LENGTH_OF_AM_ADDRESS_2_WIDTH    ((uint32_t)0x0000000A)

#define BT_CONTROLLER_LUT_ROW_21_PACKET_TYPE_AM_ADDRESS_2_RST    0xC
#define BT_CONTROLLER_LUT_ROW_21_LLID_AM_ADDRESS_2_RST    0x0
#define BT_CONTROLLER_LUT_ROW_21_PAYLOAD_LENGTH_OF_AM_ADDRESS_2_RST    0x0

__INLINE void bt_controller_lut_row_21_pack(uint8_t packet_type_am_address_2, uint8_t llid_am_address_2, uint16_t payload_length_of_am_address_2)
{
	ASSERT_ERR((((uint32_t)packet_type_am_address_2 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)llid_am_address_2 << 10) & ~((uint32_t)0x00000C00)) == 0);
	ASSERT_ERR((((uint32_t)payload_length_of_am_address_2 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_21_ADDR,  ((uint32_t)packet_type_am_address_2 << 12) |((uint32_t)llid_am_address_2 << 10) |((uint32_t)payload_length_of_am_address_2 << 0));
}

__INLINE void bt_controller_lut_row_21_unpack(uint8_t* packet_type_am_address_2, uint8_t* llid_am_address_2, uint16_t* payload_length_of_am_address_2)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_21_ADDR);

	*packet_type_am_address_2 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*llid_am_address_2 = (localVal & ((uint32_t)0x00000C00)) >>  10;
	*payload_length_of_am_address_2 = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_21_packet_type_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_21_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void bt_controller_lut_row_21_packet_type_am_address_2_setf(uint8_t packettypeamaddress2)
{
	ASSERT_ERR((((uint32_t)packettypeamaddress2 << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_21_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_21_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)packettypeamaddress2 <<12));
}
__INLINE uint8_t bt_controller_lut_row_21_llid_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_21_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000C00)) >> 10);
}
__INLINE void bt_controller_lut_row_21_llid_am_address_2_setf(uint8_t llidamaddress2)
{
	ASSERT_ERR((((uint32_t)llidamaddress2 << 10) & ~((uint32_t)0x00000C00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_21_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_21_ADDR) & ~((uint32_t)0x00000C00)) | ((uint32_t)llidamaddress2 <<10));
}
__INLINE uint16_t bt_controller_lut_row_21_payload_length_of_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_21_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void bt_controller_lut_row_21_payload_length_of_am_address_2_setf(uint16_t payloadlengthofamaddress2)
{
	ASSERT_ERR((((uint32_t)payloadlengthofamaddress2 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_21_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_21_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)payloadlengthofamaddress2 <<0));
}

/**
 * @brief LUT_ROW_22 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    Ptt_am_address_2          0              
 *    14    Esco_am_address_2         0              
 *    13    Sniff_Start_am_address_2  0              
 *    12    Sniff_End_am_address_2    0              
 *    11:09 TX_Gain_am_address_2      0x0
 *    08    Active_am_address_2       0              
 *    07    SCO1_am_address_2         0              
 *    06    SCO2_am_address_2         0              
 *    05    Payload_Header_Flow_am_address_2 0              
 *    04    Hold_am_address_2         0              
 *    03    Sniff_am_address_2        0              
 *    02    ARQN_am_address_2         1              
 *    01    SEQN_am_address_2         0              
 *    00    Packet_Header_Flow_am_address_2 1              
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_22_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000F4)
#define BT_CONTROLLER_LUT_ROW_22_OFFSET      0x000000F4
#define BT_CONTROLLER_LUT_ROW_22_INDEX       0x0000003D
#define BT_CONTROLLER_LUT_ROW_22_RESET       0x00000005

__INLINE uint32_t  bt_controller_lut_row_22_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR);
}

__INLINE void bt_controller_lut_row_22_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_22_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_22_PTT_AM_ADDRESS_2_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_LUT_ROW_22_PTT_AM_ADDRESS_2_POS    15
#define BT_CONTROLLER_LUT_ROW_22_ESCO_AM_ADDRESS_2_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_LUT_ROW_22_ESCO_AM_ADDRESS_2_POS    14
#define BT_CONTROLLER_LUT_ROW_22_SNIFF_START_AM_ADDRESS_2_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_LUT_ROW_22_SNIFF_START_AM_ADDRESS_2_POS    13
#define BT_CONTROLLER_LUT_ROW_22_SNIFF_END_AM_ADDRESS_2_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_LUT_ROW_22_SNIFF_END_AM_ADDRESS_2_POS    12
#define BT_CONTROLLER_LUT_ROW_22_TX_GAIN_AM_ADDRESS_2_MASK    ((uint32_t)0x00000E00)
#define BT_CONTROLLER_LUT_ROW_22_TX_GAIN_AM_ADDRESS_2_LSB    9
#define BT_CONTROLLER_LUT_ROW_22_TX_GAIN_AM_ADDRESS_2_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_LUT_ROW_22_ACTIVE_AM_ADDRESS_2_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_LUT_ROW_22_ACTIVE_AM_ADDRESS_2_POS    8
#define BT_CONTROLLER_LUT_ROW_22_SCO_1_AM_ADDRESS_2_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_LUT_ROW_22_SCO_1_AM_ADDRESS_2_POS    7
#define BT_CONTROLLER_LUT_ROW_22_SCO_2_AM_ADDRESS_2_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_LUT_ROW_22_SCO_2_AM_ADDRESS_2_POS    6
#define BT_CONTROLLER_LUT_ROW_22_PAYLOAD_HEADER_FLOW_AM_ADDRESS_2_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_LUT_ROW_22_PAYLOAD_HEADER_FLOW_AM_ADDRESS_2_POS    5
#define BT_CONTROLLER_LUT_ROW_22_HOLD_AM_ADDRESS_2_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_LUT_ROW_22_HOLD_AM_ADDRESS_2_POS    4
#define BT_CONTROLLER_LUT_ROW_22_SNIFF_AM_ADDRESS_2_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_LUT_ROW_22_SNIFF_AM_ADDRESS_2_POS    3
#define BT_CONTROLLER_LUT_ROW_22_ARQN_AM_ADDRESS_2_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_22_ARQN_AM_ADDRESS_2_POS    2
#define BT_CONTROLLER_LUT_ROW_22_SEQN_AM_ADDRESS_2_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_22_SEQN_AM_ADDRESS_2_POS    1
#define BT_CONTROLLER_LUT_ROW_22_PACKET_HEADER_FLOW_AM_ADDRESS_2_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_LUT_ROW_22_PACKET_HEADER_FLOW_AM_ADDRESS_2_POS    0

#define BT_CONTROLLER_LUT_ROW_22_PTT_AM_ADDRESS_2_RST    0x0
#define BT_CONTROLLER_LUT_ROW_22_ESCO_AM_ADDRESS_2_RST    0x0
#define BT_CONTROLLER_LUT_ROW_22_SNIFF_START_AM_ADDRESS_2_RST    0x0
#define BT_CONTROLLER_LUT_ROW_22_SNIFF_END_AM_ADDRESS_2_RST    0x0
#define BT_CONTROLLER_LUT_ROW_22_TX_GAIN_AM_ADDRESS_2_RST    0x0
#define BT_CONTROLLER_LUT_ROW_22_ACTIVE_AM_ADDRESS_2_RST    0x0
#define BT_CONTROLLER_LUT_ROW_22_SCO_1_AM_ADDRESS_2_RST    0x0
#define BT_CONTROLLER_LUT_ROW_22_SCO_2_AM_ADDRESS_2_RST    0x0
#define BT_CONTROLLER_LUT_ROW_22_PAYLOAD_HEADER_FLOW_AM_ADDRESS_2_RST    0x0
#define BT_CONTROLLER_LUT_ROW_22_HOLD_AM_ADDRESS_2_RST    0x0
#define BT_CONTROLLER_LUT_ROW_22_SNIFF_AM_ADDRESS_2_RST    0x0
#define BT_CONTROLLER_LUT_ROW_22_ARQN_AM_ADDRESS_2_RST    0x1
#define BT_CONTROLLER_LUT_ROW_22_SEQN_AM_ADDRESS_2_RST    0x0
#define BT_CONTROLLER_LUT_ROW_22_PACKET_HEADER_FLOW_AM_ADDRESS_2_RST    0x1

__INLINE void bt_controller_lut_row_22_pack(uint8_t ptt_am_address_2, uint8_t esco_am_address_2, uint8_t sniff_start_am_address_2, uint8_t sniff_end_am_address_2, uint8_t tx_gain_am_address_2, uint8_t active_am_address_2, uint8_t sco1_am_address_2, uint8_t sco2_am_address_2, uint8_t payload_header_flow_am_address_2, uint8_t hold_am_address_2, uint8_t sniff_am_address_2, uint8_t arqn_am_address_2, uint8_t seqn_am_address_2, uint8_t packet_header_flow_am_address_2)
{
	ASSERT_ERR((((uint32_t)ptt_am_address_2 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)esco_am_address_2 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_start_am_address_2 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_end_am_address_2 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)tx_gain_am_address_2 << 9) & ~((uint32_t)0x00000E00)) == 0);
	ASSERT_ERR((((uint32_t)active_am_address_2 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)sco1_am_address_2 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)sco2_am_address_2 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)payload_header_flow_am_address_2 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)hold_am_address_2 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)sniff_am_address_2 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)arqn_am_address_2 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)seqn_am_address_2 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)packet_header_flow_am_address_2 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_22_ADDR,  ((uint32_t)ptt_am_address_2 << 15) |((uint32_t)esco_am_address_2 << 14) |((uint32_t)sniff_start_am_address_2 << 13) |((uint32_t)sniff_end_am_address_2 << 12) |((uint32_t)tx_gain_am_address_2 << 9) |((uint32_t)active_am_address_2 << 8) |((uint32_t)sco1_am_address_2 << 7) |((uint32_t)sco2_am_address_2 << 6) |((uint32_t)payload_header_flow_am_address_2 << 5) |((uint32_t)hold_am_address_2 << 4) |((uint32_t)sniff_am_address_2 << 3) |((uint32_t)arqn_am_address_2 << 2) |((uint32_t)seqn_am_address_2 << 1) |((uint32_t)packet_header_flow_am_address_2 << 0));
}

__INLINE void bt_controller_lut_row_22_unpack(uint8_t* ptt_am_address_2, uint8_t* esco_am_address_2, uint8_t* sniff_start_am_address_2, uint8_t* sniff_end_am_address_2, uint8_t* tx_gain_am_address_2, uint8_t* active_am_address_2, uint8_t* sco1_am_address_2, uint8_t* sco2_am_address_2, uint8_t* payload_header_flow_am_address_2, uint8_t* hold_am_address_2, uint8_t* sniff_am_address_2, uint8_t* arqn_am_address_2, uint8_t* seqn_am_address_2, uint8_t* packet_header_flow_am_address_2)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR);

	*ptt_am_address_2 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*esco_am_address_2 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*sniff_start_am_address_2 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*sniff_end_am_address_2 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*tx_gain_am_address_2 = (localVal & ((uint32_t)0x00000E00)) >>  9;
	*active_am_address_2 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*sco1_am_address_2 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*sco2_am_address_2 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*payload_header_flow_am_address_2 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hold_am_address_2 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*sniff_am_address_2 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*arqn_am_address_2 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*seqn_am_address_2 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*packet_header_flow_am_address_2 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_22_ptt_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_lut_row_22_ptt_am_address_2_setf(uint8_t pttamaddress2)
{
	ASSERT_ERR((((uint32_t)pttamaddress2 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_22_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)pttamaddress2 <<15));
}
__INLINE uint8_t bt_controller_lut_row_22_esco_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_lut_row_22_esco_am_address_2_setf(uint8_t escoamaddress2)
{
	ASSERT_ERR((((uint32_t)escoamaddress2 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_22_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)escoamaddress2 <<14));
}
__INLINE uint8_t bt_controller_lut_row_22_sniff_start_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_lut_row_22_sniff_start_am_address_2_setf(uint8_t sniffstartamaddress2)
{
	ASSERT_ERR((((uint32_t)sniffstartamaddress2 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_22_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)sniffstartamaddress2 <<13));
}
__INLINE uint8_t bt_controller_lut_row_22_sniff_end_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_lut_row_22_sniff_end_am_address_2_setf(uint8_t sniffendamaddress2)
{
	ASSERT_ERR((((uint32_t)sniffendamaddress2 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_22_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)sniffendamaddress2 <<12));
}
__INLINE uint8_t bt_controller_lut_row_22_tx_gain_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000E00)) >> 9);
}
__INLINE void bt_controller_lut_row_22_tx_gain_am_address_2_setf(uint8_t txgainamaddress2)
{
	ASSERT_ERR((((uint32_t)txgainamaddress2 << 9) & ~((uint32_t)0x00000E00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_22_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR) & ~((uint32_t)0x00000E00)) | ((uint32_t)txgainamaddress2 <<9));
}
__INLINE uint8_t bt_controller_lut_row_22_active_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_lut_row_22_active_am_address_2_setf(uint8_t activeamaddress2)
{
	ASSERT_ERR((((uint32_t)activeamaddress2 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_22_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)activeamaddress2 <<8));
}
__INLINE uint8_t bt_controller_lut_row_22_sco_1_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_lut_row_22_sco_1_am_address_2_setf(uint8_t sco1amaddress2)
{
	ASSERT_ERR((((uint32_t)sco1amaddress2 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_22_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)sco1amaddress2 <<7));
}
__INLINE uint8_t bt_controller_lut_row_22_sco_2_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_lut_row_22_sco_2_am_address_2_setf(uint8_t sco2amaddress2)
{
	ASSERT_ERR((((uint32_t)sco2amaddress2 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_22_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)sco2amaddress2 <<6));
}
__INLINE uint8_t bt_controller_lut_row_22_payload_header_flow_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_lut_row_22_payload_header_flow_am_address_2_setf(uint8_t payloadheaderflowamaddress2)
{
	ASSERT_ERR((((uint32_t)payloadheaderflowamaddress2 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_22_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)payloadheaderflowamaddress2 <<5));
}
__INLINE uint8_t bt_controller_lut_row_22_hold_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_lut_row_22_hold_am_address_2_setf(uint8_t holdamaddress2)
{
	ASSERT_ERR((((uint32_t)holdamaddress2 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_22_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)holdamaddress2 <<4));
}
__INLINE uint8_t bt_controller_lut_row_22_sniff_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_lut_row_22_sniff_am_address_2_setf(uint8_t sniffamaddress2)
{
	ASSERT_ERR((((uint32_t)sniffamaddress2 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_22_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)sniffamaddress2 <<3));
}
__INLINE uint8_t bt_controller_lut_row_22_arqn_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_lut_row_22_arqn_am_address_2_setf(uint8_t arqnamaddress2)
{
	ASSERT_ERR((((uint32_t)arqnamaddress2 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_22_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)arqnamaddress2 <<2));
}
__INLINE uint8_t bt_controller_lut_row_22_seqn_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_lut_row_22_seqn_am_address_2_setf(uint8_t seqnamaddress2)
{
	ASSERT_ERR((((uint32_t)seqnamaddress2 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_22_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)seqnamaddress2 <<1));
}
__INLINE uint8_t bt_controller_lut_row_22_packet_header_flow_am_address_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_lut_row_22_packet_header_flow_am_address_2_setf(uint8_t packetheaderflowamaddress2)
{
	ASSERT_ERR((((uint32_t)packetheaderflowamaddress2 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_22_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_22_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)packetheaderflowamaddress2 <<0));
}

/**
 * @brief LUT_ROW_31 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 Packet_Type_am_address_3  0xC
 *    11:10 LLID_am_address_3         0x0
 *    09:00 Payload_Length_of_am_address_3 0x0
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_31_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000F8)
#define BT_CONTROLLER_LUT_ROW_31_OFFSET      0x000000F8
#define BT_CONTROLLER_LUT_ROW_31_INDEX       0x0000003E
#define BT_CONTROLLER_LUT_ROW_31_RESET       0x0000C000

__INLINE uint32_t  bt_controller_lut_row_31_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_31_ADDR);
}

__INLINE void bt_controller_lut_row_31_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_31_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_31_PACKET_TYPE_AM_ADDRESS_3_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_LUT_ROW_31_PACKET_TYPE_AM_ADDRESS_3_LSB    12
#define BT_CONTROLLER_LUT_ROW_31_PACKET_TYPE_AM_ADDRESS_3_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_31_LLID_AM_ADDRESS_3_MASK    ((uint32_t)0x00000C00)
#define BT_CONTROLLER_LUT_ROW_31_LLID_AM_ADDRESS_3_LSB    10
#define BT_CONTROLLER_LUT_ROW_31_LLID_AM_ADDRESS_3_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_31_PAYLOAD_LENGTH_OF_AM_ADDRESS_3_MASK    ((uint32_t)0x000003FF)
#define BT_CONTROLLER_LUT_ROW_31_PAYLOAD_LENGTH_OF_AM_ADDRESS_3_LSB    0
#define BT_CONTROLLER_LUT_ROW_31_PAYLOAD_LENGTH_OF_AM_ADDRESS_3_WIDTH    ((uint32_t)0x0000000A)

#define BT_CONTROLLER_LUT_ROW_31_PACKET_TYPE_AM_ADDRESS_3_RST    0xC
#define BT_CONTROLLER_LUT_ROW_31_LLID_AM_ADDRESS_3_RST    0x0
#define BT_CONTROLLER_LUT_ROW_31_PAYLOAD_LENGTH_OF_AM_ADDRESS_3_RST    0x0

__INLINE void bt_controller_lut_row_31_pack(uint8_t packet_type_am_address_3, uint8_t llid_am_address_3, uint16_t payload_length_of_am_address_3)
{
	ASSERT_ERR((((uint32_t)packet_type_am_address_3 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)llid_am_address_3 << 10) & ~((uint32_t)0x00000C00)) == 0);
	ASSERT_ERR((((uint32_t)payload_length_of_am_address_3 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_31_ADDR,  ((uint32_t)packet_type_am_address_3 << 12) |((uint32_t)llid_am_address_3 << 10) |((uint32_t)payload_length_of_am_address_3 << 0));
}

__INLINE void bt_controller_lut_row_31_unpack(uint8_t* packet_type_am_address_3, uint8_t* llid_am_address_3, uint16_t* payload_length_of_am_address_3)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_31_ADDR);

	*packet_type_am_address_3 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*llid_am_address_3 = (localVal & ((uint32_t)0x00000C00)) >>  10;
	*payload_length_of_am_address_3 = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_31_packet_type_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_31_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void bt_controller_lut_row_31_packet_type_am_address_3_setf(uint8_t packettypeamaddress3)
{
	ASSERT_ERR((((uint32_t)packettypeamaddress3 << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_31_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_31_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)packettypeamaddress3 <<12));
}
__INLINE uint8_t bt_controller_lut_row_31_llid_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_31_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000C00)) >> 10);
}
__INLINE void bt_controller_lut_row_31_llid_am_address_3_setf(uint8_t llidamaddress3)
{
	ASSERT_ERR((((uint32_t)llidamaddress3 << 10) & ~((uint32_t)0x00000C00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_31_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_31_ADDR) & ~((uint32_t)0x00000C00)) | ((uint32_t)llidamaddress3 <<10));
}
__INLINE uint16_t bt_controller_lut_row_31_payload_length_of_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_31_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void bt_controller_lut_row_31_payload_length_of_am_address_3_setf(uint16_t payloadlengthofamaddress3)
{
	ASSERT_ERR((((uint32_t)payloadlengthofamaddress3 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_31_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_31_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)payloadlengthofamaddress3 <<0));
}

/**
 * @brief LUT_ROW_32 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    Ptt_am_address_3          0              
 *    14    Esco_am_address_3         0              
 *    13    Sniff_Start_am_address_3  0              
 *    12    Sniff_End_am_address_3    0              
 *    11:09 TX_Gain_am_address_3      0x0
 *    08    Active_am_address_3       0              
 *    07    SCO1_am_address_3         0              
 *    06    SCO2_am_address_3         0              
 *    05    Payload_Header_Flow_am_address_3 0              
 *    04    Hold_am_address_3         0              
 *    03    Sniff_am_address_3        0              
 *    02    ARQN_am_address_3         1              
 *    01    SEQN_am_address_3         0              
 *    00    Packet_Header_Flow_am_address_3 1              
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_32_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000000FC)
#define BT_CONTROLLER_LUT_ROW_32_OFFSET      0x000000FC
#define BT_CONTROLLER_LUT_ROW_32_INDEX       0x0000003F
#define BT_CONTROLLER_LUT_ROW_32_RESET       0x00000005

__INLINE uint32_t  bt_controller_lut_row_32_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR);
}

__INLINE void bt_controller_lut_row_32_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_32_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_32_PTT_AM_ADDRESS_3_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_LUT_ROW_32_PTT_AM_ADDRESS_3_POS    15
#define BT_CONTROLLER_LUT_ROW_32_ESCO_AM_ADDRESS_3_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_LUT_ROW_32_ESCO_AM_ADDRESS_3_POS    14
#define BT_CONTROLLER_LUT_ROW_32_SNIFF_START_AM_ADDRESS_3_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_LUT_ROW_32_SNIFF_START_AM_ADDRESS_3_POS    13
#define BT_CONTROLLER_LUT_ROW_32_SNIFF_END_AM_ADDRESS_3_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_LUT_ROW_32_SNIFF_END_AM_ADDRESS_3_POS    12
#define BT_CONTROLLER_LUT_ROW_32_TX_GAIN_AM_ADDRESS_3_MASK    ((uint32_t)0x00000E00)
#define BT_CONTROLLER_LUT_ROW_32_TX_GAIN_AM_ADDRESS_3_LSB    9
#define BT_CONTROLLER_LUT_ROW_32_TX_GAIN_AM_ADDRESS_3_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_LUT_ROW_32_ACTIVE_AM_ADDRESS_3_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_LUT_ROW_32_ACTIVE_AM_ADDRESS_3_POS    8
#define BT_CONTROLLER_LUT_ROW_32_SCO_1_AM_ADDRESS_3_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_LUT_ROW_32_SCO_1_AM_ADDRESS_3_POS    7
#define BT_CONTROLLER_LUT_ROW_32_SCO_2_AM_ADDRESS_3_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_LUT_ROW_32_SCO_2_AM_ADDRESS_3_POS    6
#define BT_CONTROLLER_LUT_ROW_32_PAYLOAD_HEADER_FLOW_AM_ADDRESS_3_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_LUT_ROW_32_PAYLOAD_HEADER_FLOW_AM_ADDRESS_3_POS    5
#define BT_CONTROLLER_LUT_ROW_32_HOLD_AM_ADDRESS_3_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_LUT_ROW_32_HOLD_AM_ADDRESS_3_POS    4
#define BT_CONTROLLER_LUT_ROW_32_SNIFF_AM_ADDRESS_3_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_LUT_ROW_32_SNIFF_AM_ADDRESS_3_POS    3
#define BT_CONTROLLER_LUT_ROW_32_ARQN_AM_ADDRESS_3_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_32_ARQN_AM_ADDRESS_3_POS    2
#define BT_CONTROLLER_LUT_ROW_32_SEQN_AM_ADDRESS_3_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_32_SEQN_AM_ADDRESS_3_POS    1
#define BT_CONTROLLER_LUT_ROW_32_PACKET_HEADER_FLOW_AM_ADDRESS_3_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_LUT_ROW_32_PACKET_HEADER_FLOW_AM_ADDRESS_3_POS    0

#define BT_CONTROLLER_LUT_ROW_32_PTT_AM_ADDRESS_3_RST    0x0
#define BT_CONTROLLER_LUT_ROW_32_ESCO_AM_ADDRESS_3_RST    0x0
#define BT_CONTROLLER_LUT_ROW_32_SNIFF_START_AM_ADDRESS_3_RST    0x0
#define BT_CONTROLLER_LUT_ROW_32_SNIFF_END_AM_ADDRESS_3_RST    0x0
#define BT_CONTROLLER_LUT_ROW_32_TX_GAIN_AM_ADDRESS_3_RST    0x0
#define BT_CONTROLLER_LUT_ROW_32_ACTIVE_AM_ADDRESS_3_RST    0x0
#define BT_CONTROLLER_LUT_ROW_32_SCO_1_AM_ADDRESS_3_RST    0x0
#define BT_CONTROLLER_LUT_ROW_32_SCO_2_AM_ADDRESS_3_RST    0x0
#define BT_CONTROLLER_LUT_ROW_32_PAYLOAD_HEADER_FLOW_AM_ADDRESS_3_RST    0x0
#define BT_CONTROLLER_LUT_ROW_32_HOLD_AM_ADDRESS_3_RST    0x0
#define BT_CONTROLLER_LUT_ROW_32_SNIFF_AM_ADDRESS_3_RST    0x0
#define BT_CONTROLLER_LUT_ROW_32_ARQN_AM_ADDRESS_3_RST    0x1
#define BT_CONTROLLER_LUT_ROW_32_SEQN_AM_ADDRESS_3_RST    0x0
#define BT_CONTROLLER_LUT_ROW_32_PACKET_HEADER_FLOW_AM_ADDRESS_3_RST    0x1

__INLINE void bt_controller_lut_row_32_pack(uint8_t ptt_am_address_3, uint8_t esco_am_address_3, uint8_t sniff_start_am_address_3, uint8_t sniff_end_am_address_3, uint8_t tx_gain_am_address_3, uint8_t active_am_address_3, uint8_t sco1_am_address_3, uint8_t sco2_am_address_3, uint8_t payload_header_flow_am_address_3, uint8_t hold_am_address_3, uint8_t sniff_am_address_3, uint8_t arqn_am_address_3, uint8_t seqn_am_address_3, uint8_t packet_header_flow_am_address_3)
{
	ASSERT_ERR((((uint32_t)ptt_am_address_3 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)esco_am_address_3 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_start_am_address_3 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_end_am_address_3 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)tx_gain_am_address_3 << 9) & ~((uint32_t)0x00000E00)) == 0);
	ASSERT_ERR((((uint32_t)active_am_address_3 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)sco1_am_address_3 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)sco2_am_address_3 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)payload_header_flow_am_address_3 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)hold_am_address_3 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)sniff_am_address_3 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)arqn_am_address_3 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)seqn_am_address_3 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)packet_header_flow_am_address_3 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_32_ADDR,  ((uint32_t)ptt_am_address_3 << 15) |((uint32_t)esco_am_address_3 << 14) |((uint32_t)sniff_start_am_address_3 << 13) |((uint32_t)sniff_end_am_address_3 << 12) |((uint32_t)tx_gain_am_address_3 << 9) |((uint32_t)active_am_address_3 << 8) |((uint32_t)sco1_am_address_3 << 7) |((uint32_t)sco2_am_address_3 << 6) |((uint32_t)payload_header_flow_am_address_3 << 5) |((uint32_t)hold_am_address_3 << 4) |((uint32_t)sniff_am_address_3 << 3) |((uint32_t)arqn_am_address_3 << 2) |((uint32_t)seqn_am_address_3 << 1) |((uint32_t)packet_header_flow_am_address_3 << 0));
}

__INLINE void bt_controller_lut_row_32_unpack(uint8_t* ptt_am_address_3, uint8_t* esco_am_address_3, uint8_t* sniff_start_am_address_3, uint8_t* sniff_end_am_address_3, uint8_t* tx_gain_am_address_3, uint8_t* active_am_address_3, uint8_t* sco1_am_address_3, uint8_t* sco2_am_address_3, uint8_t* payload_header_flow_am_address_3, uint8_t* hold_am_address_3, uint8_t* sniff_am_address_3, uint8_t* arqn_am_address_3, uint8_t* seqn_am_address_3, uint8_t* packet_header_flow_am_address_3)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR);

	*ptt_am_address_3 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*esco_am_address_3 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*sniff_start_am_address_3 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*sniff_end_am_address_3 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*tx_gain_am_address_3 = (localVal & ((uint32_t)0x00000E00)) >>  9;
	*active_am_address_3 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*sco1_am_address_3 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*sco2_am_address_3 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*payload_header_flow_am_address_3 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hold_am_address_3 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*sniff_am_address_3 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*arqn_am_address_3 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*seqn_am_address_3 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*packet_header_flow_am_address_3 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_32_ptt_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_lut_row_32_ptt_am_address_3_setf(uint8_t pttamaddress3)
{
	ASSERT_ERR((((uint32_t)pttamaddress3 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_32_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)pttamaddress3 <<15));
}
__INLINE uint8_t bt_controller_lut_row_32_esco_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_lut_row_32_esco_am_address_3_setf(uint8_t escoamaddress3)
{
	ASSERT_ERR((((uint32_t)escoamaddress3 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_32_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)escoamaddress3 <<14));
}
__INLINE uint8_t bt_controller_lut_row_32_sniff_start_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_lut_row_32_sniff_start_am_address_3_setf(uint8_t sniffstartamaddress3)
{
	ASSERT_ERR((((uint32_t)sniffstartamaddress3 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_32_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)sniffstartamaddress3 <<13));
}
__INLINE uint8_t bt_controller_lut_row_32_sniff_end_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_lut_row_32_sniff_end_am_address_3_setf(uint8_t sniffendamaddress3)
{
	ASSERT_ERR((((uint32_t)sniffendamaddress3 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_32_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)sniffendamaddress3 <<12));
}
__INLINE uint8_t bt_controller_lut_row_32_tx_gain_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000E00)) >> 9);
}
__INLINE void bt_controller_lut_row_32_tx_gain_am_address_3_setf(uint8_t txgainamaddress3)
{
	ASSERT_ERR((((uint32_t)txgainamaddress3 << 9) & ~((uint32_t)0x00000E00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_32_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR) & ~((uint32_t)0x00000E00)) | ((uint32_t)txgainamaddress3 <<9));
}
__INLINE uint8_t bt_controller_lut_row_32_active_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_lut_row_32_active_am_address_3_setf(uint8_t activeamaddress3)
{
	ASSERT_ERR((((uint32_t)activeamaddress3 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_32_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)activeamaddress3 <<8));
}
__INLINE uint8_t bt_controller_lut_row_32_sco_1_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_lut_row_32_sco_1_am_address_3_setf(uint8_t sco1amaddress3)
{
	ASSERT_ERR((((uint32_t)sco1amaddress3 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_32_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)sco1amaddress3 <<7));
}
__INLINE uint8_t bt_controller_lut_row_32_sco_2_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_lut_row_32_sco_2_am_address_3_setf(uint8_t sco2amaddress3)
{
	ASSERT_ERR((((uint32_t)sco2amaddress3 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_32_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)sco2amaddress3 <<6));
}
__INLINE uint8_t bt_controller_lut_row_32_payload_header_flow_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_lut_row_32_payload_header_flow_am_address_3_setf(uint8_t payloadheaderflowamaddress3)
{
	ASSERT_ERR((((uint32_t)payloadheaderflowamaddress3 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_32_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)payloadheaderflowamaddress3 <<5));
}
__INLINE uint8_t bt_controller_lut_row_32_hold_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_lut_row_32_hold_am_address_3_setf(uint8_t holdamaddress3)
{
	ASSERT_ERR((((uint32_t)holdamaddress3 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_32_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)holdamaddress3 <<4));
}
__INLINE uint8_t bt_controller_lut_row_32_sniff_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_lut_row_32_sniff_am_address_3_setf(uint8_t sniffamaddress3)
{
	ASSERT_ERR((((uint32_t)sniffamaddress3 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_32_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)sniffamaddress3 <<3));
}
__INLINE uint8_t bt_controller_lut_row_32_arqn_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_lut_row_32_arqn_am_address_3_setf(uint8_t arqnamaddress3)
{
	ASSERT_ERR((((uint32_t)arqnamaddress3 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_32_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)arqnamaddress3 <<2));
}
__INLINE uint8_t bt_controller_lut_row_32_seqn_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_lut_row_32_seqn_am_address_3_setf(uint8_t seqnamaddress3)
{
	ASSERT_ERR((((uint32_t)seqnamaddress3 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_32_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)seqnamaddress3 <<1));
}
__INLINE uint8_t bt_controller_lut_row_32_packet_header_flow_am_address_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_lut_row_32_packet_header_flow_am_address_3_setf(uint8_t packetheaderflowamaddress3)
{
	ASSERT_ERR((((uint32_t)packetheaderflowamaddress3 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_32_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_32_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)packetheaderflowamaddress3 <<0));
}

/**
 * @brief LUT_ROW_41 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 Packet_Type_am_address_4  0xC
 *    11:10 LLID_am_address_4         0x0
 *    09:00 Payload_Length_of_am_address_4 0x0
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_41_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000100)
#define BT_CONTROLLER_LUT_ROW_41_OFFSET      0x00000100
#define BT_CONTROLLER_LUT_ROW_41_INDEX       0x00000040
#define BT_CONTROLLER_LUT_ROW_41_RESET       0x0000C000

__INLINE uint32_t  bt_controller_lut_row_41_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_41_ADDR);
}

__INLINE void bt_controller_lut_row_41_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_41_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_41_PACKET_TYPE_AM_ADDRESS_4_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_LUT_ROW_41_PACKET_TYPE_AM_ADDRESS_4_LSB    12
#define BT_CONTROLLER_LUT_ROW_41_PACKET_TYPE_AM_ADDRESS_4_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_41_LLID_AM_ADDRESS_4_MASK    ((uint32_t)0x00000C00)
#define BT_CONTROLLER_LUT_ROW_41_LLID_AM_ADDRESS_4_LSB    10
#define BT_CONTROLLER_LUT_ROW_41_LLID_AM_ADDRESS_4_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_41_PAYLOAD_LENGTH_OF_AM_ADDRESS_4_MASK    ((uint32_t)0x000003FF)
#define BT_CONTROLLER_LUT_ROW_41_PAYLOAD_LENGTH_OF_AM_ADDRESS_4_LSB    0
#define BT_CONTROLLER_LUT_ROW_41_PAYLOAD_LENGTH_OF_AM_ADDRESS_4_WIDTH    ((uint32_t)0x0000000A)

#define BT_CONTROLLER_LUT_ROW_41_PACKET_TYPE_AM_ADDRESS_4_RST    0xC
#define BT_CONTROLLER_LUT_ROW_41_LLID_AM_ADDRESS_4_RST    0x0
#define BT_CONTROLLER_LUT_ROW_41_PAYLOAD_LENGTH_OF_AM_ADDRESS_4_RST    0x0

__INLINE void bt_controller_lut_row_41_pack(uint8_t packet_type_am_address_4, uint8_t llid_am_address_4, uint16_t payload_length_of_am_address_4)
{
	ASSERT_ERR((((uint32_t)packet_type_am_address_4 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)llid_am_address_4 << 10) & ~((uint32_t)0x00000C00)) == 0);
	ASSERT_ERR((((uint32_t)payload_length_of_am_address_4 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_41_ADDR,  ((uint32_t)packet_type_am_address_4 << 12) |((uint32_t)llid_am_address_4 << 10) |((uint32_t)payload_length_of_am_address_4 << 0));
}

__INLINE void bt_controller_lut_row_41_unpack(uint8_t* packet_type_am_address_4, uint8_t* llid_am_address_4, uint16_t* payload_length_of_am_address_4)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_41_ADDR);

	*packet_type_am_address_4 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*llid_am_address_4 = (localVal & ((uint32_t)0x00000C00)) >>  10;
	*payload_length_of_am_address_4 = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_41_packet_type_am_address_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_41_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void bt_controller_lut_row_41_packet_type_am_address_4_setf(uint8_t packettypeamaddress4)
{
	ASSERT_ERR((((uint32_t)packettypeamaddress4 << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_41_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_41_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)packettypeamaddress4 <<12));
}
__INLINE uint8_t bt_controller_lut_row_41_llid_am_address_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_41_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000C00)) >> 10);
}
__INLINE void bt_controller_lut_row_41_llid_am_address_4_setf(uint8_t llidamaddress4)
{
	ASSERT_ERR((((uint32_t)llidamaddress4 << 10) & ~((uint32_t)0x00000C00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_41_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_41_ADDR) & ~((uint32_t)0x00000C00)) | ((uint32_t)llidamaddress4 <<10));
}
__INLINE uint16_t bt_controller_lut_row_41_payload_length_of_am_address_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_41_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void bt_controller_lut_row_41_payload_length_of_am_address_4_setf(uint16_t payloadlengthofamaddress4)
{
	ASSERT_ERR((((uint32_t)payloadlengthofamaddress4 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_41_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_41_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)payloadlengthofamaddress4 <<0));
}

/**
 * @brief LUT_ROW_42 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    Ptt_am_address_4          0              
 *    14    Esco_am_address_4         0              
 *    13    Sniff_Start_am_address_4  0              
 *    12    Sniff_End_am_address_4    0              
 *    11:09 TX_Gain_am_address_4      0x0
 *    08    Active_am_address_4       0              
 *    07    SCO1_am_address_4         0              
 *    06    SCO2_am_address_4         0              
 *    05    Payload_Header_Flow       0              
 *    04    Hold_am_address_4         0              
 *    03    Sniff_am_address_4        0              
 *    02    ARQN_am_address_4         1              
 *    01    SEQN_am_address_4         0              
 *    00    Packet_Header_Flow_am_address_4 1              
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_42_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000104)
#define BT_CONTROLLER_LUT_ROW_42_OFFSET      0x00000104
#define BT_CONTROLLER_LUT_ROW_42_INDEX       0x00000041
#define BT_CONTROLLER_LUT_ROW_42_RESET       0x00000005

__INLINE uint32_t  bt_controller_lut_row_42_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR);
}

__INLINE void bt_controller_lut_row_42_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_42_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_42_PTT_AM_ADDRESS_4_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_LUT_ROW_42_PTT_AM_ADDRESS_4_POS    15
#define BT_CONTROLLER_LUT_ROW_42_ESCO_AM_ADDRESS_4_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_LUT_ROW_42_ESCO_AM_ADDRESS_4_POS    14
#define BT_CONTROLLER_LUT_ROW_42_SNIFF_START_AM_ADDRESS_4_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_LUT_ROW_42_SNIFF_START_AM_ADDRESS_4_POS    13
#define BT_CONTROLLER_LUT_ROW_42_SNIFF_END_AM_ADDRESS_4_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_LUT_ROW_42_SNIFF_END_AM_ADDRESS_4_POS    12
#define BT_CONTROLLER_LUT_ROW_42_TX_GAIN_AM_ADDRESS_4_MASK    ((uint32_t)0x00000E00)
#define BT_CONTROLLER_LUT_ROW_42_TX_GAIN_AM_ADDRESS_4_LSB    9
#define BT_CONTROLLER_LUT_ROW_42_TX_GAIN_AM_ADDRESS_4_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_LUT_ROW_42_ACTIVE_AM_ADDRESS_4_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_LUT_ROW_42_ACTIVE_AM_ADDRESS_4_POS    8
#define BT_CONTROLLER_LUT_ROW_42_SCO_1_AM_ADDRESS_4_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_LUT_ROW_42_SCO_1_AM_ADDRESS_4_POS    7
#define BT_CONTROLLER_LUT_ROW_42_SCO_2_AM_ADDRESS_4_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_LUT_ROW_42_SCO_2_AM_ADDRESS_4_POS    6
#define BT_CONTROLLER_LUT_ROW_42_PAYLOAD_HEADER_FLOW_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_LUT_ROW_42_PAYLOAD_HEADER_FLOW_POS    5
#define BT_CONTROLLER_LUT_ROW_42_HOLD_AM_ADDRESS_4_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_LUT_ROW_42_HOLD_AM_ADDRESS_4_POS    4
#define BT_CONTROLLER_LUT_ROW_42_SNIFF_AM_ADDRESS_4_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_LUT_ROW_42_SNIFF_AM_ADDRESS_4_POS    3
#define BT_CONTROLLER_LUT_ROW_42_ARQN_AM_ADDRESS_4_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_42_ARQN_AM_ADDRESS_4_POS    2
#define BT_CONTROLLER_LUT_ROW_42_SEQN_AM_ADDRESS_4_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_42_SEQN_AM_ADDRESS_4_POS    1
#define BT_CONTROLLER_LUT_ROW_42_PACKET_HEADER_FLOW_AM_ADDRESS_4_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_LUT_ROW_42_PACKET_HEADER_FLOW_AM_ADDRESS_4_POS    0

#define BT_CONTROLLER_LUT_ROW_42_PTT_AM_ADDRESS_4_RST    0x0
#define BT_CONTROLLER_LUT_ROW_42_ESCO_AM_ADDRESS_4_RST    0x0
#define BT_CONTROLLER_LUT_ROW_42_SNIFF_START_AM_ADDRESS_4_RST    0x0
#define BT_CONTROLLER_LUT_ROW_42_SNIFF_END_AM_ADDRESS_4_RST    0x0
#define BT_CONTROLLER_LUT_ROW_42_TX_GAIN_AM_ADDRESS_4_RST    0x0
#define BT_CONTROLLER_LUT_ROW_42_ACTIVE_AM_ADDRESS_4_RST    0x0
#define BT_CONTROLLER_LUT_ROW_42_SCO_1_AM_ADDRESS_4_RST    0x0
#define BT_CONTROLLER_LUT_ROW_42_SCO_2_AM_ADDRESS_4_RST    0x0
#define BT_CONTROLLER_LUT_ROW_42_PAYLOAD_HEADER_FLOW_RST    0x0
#define BT_CONTROLLER_LUT_ROW_42_HOLD_AM_ADDRESS_4_RST    0x0
#define BT_CONTROLLER_LUT_ROW_42_SNIFF_AM_ADDRESS_4_RST    0x0
#define BT_CONTROLLER_LUT_ROW_42_ARQN_AM_ADDRESS_4_RST    0x1
#define BT_CONTROLLER_LUT_ROW_42_SEQN_AM_ADDRESS_4_RST    0x0
#define BT_CONTROLLER_LUT_ROW_42_PACKET_HEADER_FLOW_AM_ADDRESS_4_RST    0x1

__INLINE void bt_controller_lut_row_42_pack(uint8_t ptt_am_address_4, uint8_t esco_am_address_4, uint8_t sniff_start_am_address_4, uint8_t sniff_end_am_address_4, uint8_t tx_gain_am_address_4, uint8_t active_am_address_4, uint8_t sco1_am_address_4, uint8_t sco2_am_address_4, uint8_t payload_header_flow, uint8_t hold_am_address_4, uint8_t sniff_am_address_4, uint8_t arqn_am_address_4, uint8_t seqn_am_address_4, uint8_t packet_header_flow_am_address_4)
{
	ASSERT_ERR((((uint32_t)ptt_am_address_4 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)esco_am_address_4 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_start_am_address_4 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_end_am_address_4 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)tx_gain_am_address_4 << 9) & ~((uint32_t)0x00000E00)) == 0);
	ASSERT_ERR((((uint32_t)active_am_address_4 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)sco1_am_address_4 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)sco2_am_address_4 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)payload_header_flow << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)hold_am_address_4 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)sniff_am_address_4 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)arqn_am_address_4 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)seqn_am_address_4 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)packet_header_flow_am_address_4 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_42_ADDR,  ((uint32_t)ptt_am_address_4 << 15) |((uint32_t)esco_am_address_4 << 14) |((uint32_t)sniff_start_am_address_4 << 13) |((uint32_t)sniff_end_am_address_4 << 12) |((uint32_t)tx_gain_am_address_4 << 9) |((uint32_t)active_am_address_4 << 8) |((uint32_t)sco1_am_address_4 << 7) |((uint32_t)sco2_am_address_4 << 6) |((uint32_t)payload_header_flow << 5) |((uint32_t)hold_am_address_4 << 4) |((uint32_t)sniff_am_address_4 << 3) |((uint32_t)arqn_am_address_4 << 2) |((uint32_t)seqn_am_address_4 << 1) |((uint32_t)packet_header_flow_am_address_4 << 0));
}

__INLINE void bt_controller_lut_row_42_unpack(uint8_t* ptt_am_address_4, uint8_t* esco_am_address_4, uint8_t* sniff_start_am_address_4, uint8_t* sniff_end_am_address_4, uint8_t* tx_gain_am_address_4, uint8_t* active_am_address_4, uint8_t* sco1_am_address_4, uint8_t* sco2_am_address_4, uint8_t* payload_header_flow, uint8_t* hold_am_address_4, uint8_t* sniff_am_address_4, uint8_t* arqn_am_address_4, uint8_t* seqn_am_address_4, uint8_t* packet_header_flow_am_address_4)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR);

	*ptt_am_address_4 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*esco_am_address_4 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*sniff_start_am_address_4 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*sniff_end_am_address_4 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*tx_gain_am_address_4 = (localVal & ((uint32_t)0x00000E00)) >>  9;
	*active_am_address_4 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*sco1_am_address_4 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*sco2_am_address_4 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*payload_header_flow = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hold_am_address_4 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*sniff_am_address_4 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*arqn_am_address_4 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*seqn_am_address_4 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*packet_header_flow_am_address_4 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_42_ptt_am_address_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_lut_row_42_ptt_am_address_4_setf(uint8_t pttamaddress4)
{
	ASSERT_ERR((((uint32_t)pttamaddress4 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_42_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)pttamaddress4 <<15));
}
__INLINE uint8_t bt_controller_lut_row_42_esco_am_address_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_lut_row_42_esco_am_address_4_setf(uint8_t escoamaddress4)
{
	ASSERT_ERR((((uint32_t)escoamaddress4 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_42_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)escoamaddress4 <<14));
}
__INLINE uint8_t bt_controller_lut_row_42_sniff_start_am_address_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_lut_row_42_sniff_start_am_address_4_setf(uint8_t sniffstartamaddress4)
{
	ASSERT_ERR((((uint32_t)sniffstartamaddress4 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_42_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)sniffstartamaddress4 <<13));
}
__INLINE uint8_t bt_controller_lut_row_42_sniff_end_am_address_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_lut_row_42_sniff_end_am_address_4_setf(uint8_t sniffendamaddress4)
{
	ASSERT_ERR((((uint32_t)sniffendamaddress4 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_42_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)sniffendamaddress4 <<12));
}
__INLINE uint8_t bt_controller_lut_row_42_tx_gain_am_address_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000E00)) >> 9);
}
__INLINE void bt_controller_lut_row_42_tx_gain_am_address_4_setf(uint8_t txgainamaddress4)
{
	ASSERT_ERR((((uint32_t)txgainamaddress4 << 9) & ~((uint32_t)0x00000E00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_42_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR) & ~((uint32_t)0x00000E00)) | ((uint32_t)txgainamaddress4 <<9));
}
__INLINE uint8_t bt_controller_lut_row_42_active_am_address_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_lut_row_42_active_am_address_4_setf(uint8_t activeamaddress4)
{
	ASSERT_ERR((((uint32_t)activeamaddress4 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_42_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)activeamaddress4 <<8));
}
__INLINE uint8_t bt_controller_lut_row_42_sco_1_am_address_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_lut_row_42_sco_1_am_address_4_setf(uint8_t sco1amaddress4)
{
	ASSERT_ERR((((uint32_t)sco1amaddress4 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_42_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)sco1amaddress4 <<7));
}
__INLINE uint8_t bt_controller_lut_row_42_sco_2_am_address_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_lut_row_42_sco_2_am_address_4_setf(uint8_t sco2amaddress4)
{
	ASSERT_ERR((((uint32_t)sco2amaddress4 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_42_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)sco2amaddress4 <<6));
}
__INLINE uint8_t bt_controller_lut_row_42_payload_header_flow_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_lut_row_42_payload_header_flow_setf(uint8_t payloadheaderflow)
{
	ASSERT_ERR((((uint32_t)payloadheaderflow << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_42_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)payloadheaderflow <<5));
}
__INLINE uint8_t bt_controller_lut_row_42_hold_am_address_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_lut_row_42_hold_am_address_4_setf(uint8_t holdamaddress4)
{
	ASSERT_ERR((((uint32_t)holdamaddress4 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_42_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)holdamaddress4 <<4));
}
__INLINE uint8_t bt_controller_lut_row_42_sniff_am_address_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_lut_row_42_sniff_am_address_4_setf(uint8_t sniffamaddress4)
{
	ASSERT_ERR((((uint32_t)sniffamaddress4 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_42_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)sniffamaddress4 <<3));
}
__INLINE uint8_t bt_controller_lut_row_42_arqn_am_address_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_lut_row_42_arqn_am_address_4_setf(uint8_t arqnamaddress4)
{
	ASSERT_ERR((((uint32_t)arqnamaddress4 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_42_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)arqnamaddress4 <<2));
}
__INLINE uint8_t bt_controller_lut_row_42_seqn_am_address_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_lut_row_42_seqn_am_address_4_setf(uint8_t seqnamaddress4)
{
	ASSERT_ERR((((uint32_t)seqnamaddress4 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_42_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)seqnamaddress4 <<1));
}
__INLINE uint8_t bt_controller_lut_row_42_packet_header_flow_am_address_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_lut_row_42_packet_header_flow_am_address_4_setf(uint8_t packetheaderflowamaddress4)
{
	ASSERT_ERR((((uint32_t)packetheaderflowamaddress4 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_42_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_42_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)packetheaderflowamaddress4 <<0));
}

/**
 * @brief LUT_ROW_51 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 Packet_Type_am_address_5  0xC
 *    11:10 LLID_am_address_5         0x0
 *    09:00 Payload_Length_of_am_address_5 0x0
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_51_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000108)
#define BT_CONTROLLER_LUT_ROW_51_OFFSET      0x00000108
#define BT_CONTROLLER_LUT_ROW_51_INDEX       0x00000042
#define BT_CONTROLLER_LUT_ROW_51_RESET       0x0000C000

__INLINE uint32_t  bt_controller_lut_row_51_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_51_ADDR);
}

__INLINE void bt_controller_lut_row_51_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_51_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_51_PACKET_TYPE_AM_ADDRESS_5_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_LUT_ROW_51_PACKET_TYPE_AM_ADDRESS_5_LSB    12
#define BT_CONTROLLER_LUT_ROW_51_PACKET_TYPE_AM_ADDRESS_5_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_51_LLID_AM_ADDRESS_5_MASK    ((uint32_t)0x00000C00)
#define BT_CONTROLLER_LUT_ROW_51_LLID_AM_ADDRESS_5_LSB    10
#define BT_CONTROLLER_LUT_ROW_51_LLID_AM_ADDRESS_5_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_51_PAYLOAD_LENGTH_OF_AM_ADDRESS_5_MASK    ((uint32_t)0x000003FF)
#define BT_CONTROLLER_LUT_ROW_51_PAYLOAD_LENGTH_OF_AM_ADDRESS_5_LSB    0
#define BT_CONTROLLER_LUT_ROW_51_PAYLOAD_LENGTH_OF_AM_ADDRESS_5_WIDTH    ((uint32_t)0x0000000A)

#define BT_CONTROLLER_LUT_ROW_51_PACKET_TYPE_AM_ADDRESS_5_RST    0xC
#define BT_CONTROLLER_LUT_ROW_51_LLID_AM_ADDRESS_5_RST    0x0
#define BT_CONTROLLER_LUT_ROW_51_PAYLOAD_LENGTH_OF_AM_ADDRESS_5_RST    0x0

__INLINE void bt_controller_lut_row_51_pack(uint8_t packet_type_am_address_5, uint8_t llid_am_address_5, uint16_t payload_length_of_am_address_5)
{
	ASSERT_ERR((((uint32_t)packet_type_am_address_5 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)llid_am_address_5 << 10) & ~((uint32_t)0x00000C00)) == 0);
	ASSERT_ERR((((uint32_t)payload_length_of_am_address_5 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_51_ADDR,  ((uint32_t)packet_type_am_address_5 << 12) |((uint32_t)llid_am_address_5 << 10) |((uint32_t)payload_length_of_am_address_5 << 0));
}

__INLINE void bt_controller_lut_row_51_unpack(uint8_t* packet_type_am_address_5, uint8_t* llid_am_address_5, uint16_t* payload_length_of_am_address_5)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_51_ADDR);

	*packet_type_am_address_5 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*llid_am_address_5 = (localVal & ((uint32_t)0x00000C00)) >>  10;
	*payload_length_of_am_address_5 = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_51_packet_type_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_51_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void bt_controller_lut_row_51_packet_type_am_address_5_setf(uint8_t packettypeamaddress5)
{
	ASSERT_ERR((((uint32_t)packettypeamaddress5 << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_51_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_51_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)packettypeamaddress5 <<12));
}
__INLINE uint8_t bt_controller_lut_row_51_llid_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_51_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000C00)) >> 10);
}
__INLINE void bt_controller_lut_row_51_llid_am_address_5_setf(uint8_t llidamaddress5)
{
	ASSERT_ERR((((uint32_t)llidamaddress5 << 10) & ~((uint32_t)0x00000C00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_51_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_51_ADDR) & ~((uint32_t)0x00000C00)) | ((uint32_t)llidamaddress5 <<10));
}
__INLINE uint16_t bt_controller_lut_row_51_payload_length_of_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_51_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void bt_controller_lut_row_51_payload_length_of_am_address_5_setf(uint16_t payloadlengthofamaddress5)
{
	ASSERT_ERR((((uint32_t)payloadlengthofamaddress5 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_51_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_51_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)payloadlengthofamaddress5 <<0));
}

/**
 * @brief LUT_ROW_52 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    Ptt_am_address_5          0              
 *    14    Esco_am_address_5         0              
 *    13    Sniff_Start_am_address_5  0              
 *    12    Sniff_End_am_address_5    0              
 *    11:09 TX_Gain_am_address_5      0x0
 *    08    Active_am_address_5       0              
 *    07    SCO1_am_address_5         0              
 *    06    SCO2_am_address_5         0              
 *    05    Payload_Header_Flow_am_address_5 0              
 *    04    Hold_am_address_5         0              
 *    03    Sniff_am_address_5        0              
 *    02    ARQN_am_address_5         1              
 *    01    SEQN_am_address_5         0              
 *    00    Packet_Header_Flow_am_address_5 1              
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_52_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000010C)
#define BT_CONTROLLER_LUT_ROW_52_OFFSET      0x0000010C
#define BT_CONTROLLER_LUT_ROW_52_INDEX       0x00000043
#define BT_CONTROLLER_LUT_ROW_52_RESET       0x00000005

__INLINE uint32_t  bt_controller_lut_row_52_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR);
}

__INLINE void bt_controller_lut_row_52_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_52_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_52_PTT_AM_ADDRESS_5_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_LUT_ROW_52_PTT_AM_ADDRESS_5_POS    15
#define BT_CONTROLLER_LUT_ROW_52_ESCO_AM_ADDRESS_5_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_LUT_ROW_52_ESCO_AM_ADDRESS_5_POS    14
#define BT_CONTROLLER_LUT_ROW_52_SNIFF_START_AM_ADDRESS_5_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_LUT_ROW_52_SNIFF_START_AM_ADDRESS_5_POS    13
#define BT_CONTROLLER_LUT_ROW_52_SNIFF_END_AM_ADDRESS_5_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_LUT_ROW_52_SNIFF_END_AM_ADDRESS_5_POS    12
#define BT_CONTROLLER_LUT_ROW_52_TX_GAIN_AM_ADDRESS_5_MASK    ((uint32_t)0x00000E00)
#define BT_CONTROLLER_LUT_ROW_52_TX_GAIN_AM_ADDRESS_5_LSB    9
#define BT_CONTROLLER_LUT_ROW_52_TX_GAIN_AM_ADDRESS_5_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_LUT_ROW_52_ACTIVE_AM_ADDRESS_5_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_LUT_ROW_52_ACTIVE_AM_ADDRESS_5_POS    8
#define BT_CONTROLLER_LUT_ROW_52_SCO_1_AM_ADDRESS_5_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_LUT_ROW_52_SCO_1_AM_ADDRESS_5_POS    7
#define BT_CONTROLLER_LUT_ROW_52_SCO_2_AM_ADDRESS_5_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_LUT_ROW_52_SCO_2_AM_ADDRESS_5_POS    6
#define BT_CONTROLLER_LUT_ROW_52_PAYLOAD_HEADER_FLOW_AM_ADDRESS_5_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_LUT_ROW_52_PAYLOAD_HEADER_FLOW_AM_ADDRESS_5_POS    5
#define BT_CONTROLLER_LUT_ROW_52_HOLD_AM_ADDRESS_5_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_LUT_ROW_52_HOLD_AM_ADDRESS_5_POS    4
#define BT_CONTROLLER_LUT_ROW_52_SNIFF_AM_ADDRESS_5_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_LUT_ROW_52_SNIFF_AM_ADDRESS_5_POS    3
#define BT_CONTROLLER_LUT_ROW_52_ARQN_AM_ADDRESS_5_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_52_ARQN_AM_ADDRESS_5_POS    2
#define BT_CONTROLLER_LUT_ROW_52_SEQN_AM_ADDRESS_5_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_52_SEQN_AM_ADDRESS_5_POS    1
#define BT_CONTROLLER_LUT_ROW_52_PACKET_HEADER_FLOW_AM_ADDRESS_5_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_LUT_ROW_52_PACKET_HEADER_FLOW_AM_ADDRESS_5_POS    0

#define BT_CONTROLLER_LUT_ROW_52_PTT_AM_ADDRESS_5_RST    0x0
#define BT_CONTROLLER_LUT_ROW_52_ESCO_AM_ADDRESS_5_RST    0x0
#define BT_CONTROLLER_LUT_ROW_52_SNIFF_START_AM_ADDRESS_5_RST    0x0
#define BT_CONTROLLER_LUT_ROW_52_SNIFF_END_AM_ADDRESS_5_RST    0x0
#define BT_CONTROLLER_LUT_ROW_52_TX_GAIN_AM_ADDRESS_5_RST    0x0
#define BT_CONTROLLER_LUT_ROW_52_ACTIVE_AM_ADDRESS_5_RST    0x0
#define BT_CONTROLLER_LUT_ROW_52_SCO_1_AM_ADDRESS_5_RST    0x0
#define BT_CONTROLLER_LUT_ROW_52_SCO_2_AM_ADDRESS_5_RST    0x0
#define BT_CONTROLLER_LUT_ROW_52_PAYLOAD_HEADER_FLOW_AM_ADDRESS_5_RST    0x0
#define BT_CONTROLLER_LUT_ROW_52_HOLD_AM_ADDRESS_5_RST    0x0
#define BT_CONTROLLER_LUT_ROW_52_SNIFF_AM_ADDRESS_5_RST    0x0
#define BT_CONTROLLER_LUT_ROW_52_ARQN_AM_ADDRESS_5_RST    0x1
#define BT_CONTROLLER_LUT_ROW_52_SEQN_AM_ADDRESS_5_RST    0x0
#define BT_CONTROLLER_LUT_ROW_52_PACKET_HEADER_FLOW_AM_ADDRESS_5_RST    0x1

__INLINE void bt_controller_lut_row_52_pack(uint8_t ptt_am_address_5, uint8_t esco_am_address_5, uint8_t sniff_start_am_address_5, uint8_t sniff_end_am_address_5, uint8_t tx_gain_am_address_5, uint8_t active_am_address_5, uint8_t sco1_am_address_5, uint8_t sco2_am_address_5, uint8_t payload_header_flow_am_address_5, uint8_t hold_am_address_5, uint8_t sniff_am_address_5, uint8_t arqn_am_address_5, uint8_t seqn_am_address_5, uint8_t packet_header_flow_am_address_5)
{
	ASSERT_ERR((((uint32_t)ptt_am_address_5 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)esco_am_address_5 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_start_am_address_5 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_end_am_address_5 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)tx_gain_am_address_5 << 9) & ~((uint32_t)0x00000E00)) == 0);
	ASSERT_ERR((((uint32_t)active_am_address_5 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)sco1_am_address_5 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)sco2_am_address_5 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)payload_header_flow_am_address_5 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)hold_am_address_5 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)sniff_am_address_5 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)arqn_am_address_5 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)seqn_am_address_5 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)packet_header_flow_am_address_5 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_52_ADDR,  ((uint32_t)ptt_am_address_5 << 15) |((uint32_t)esco_am_address_5 << 14) |((uint32_t)sniff_start_am_address_5 << 13) |((uint32_t)sniff_end_am_address_5 << 12) |((uint32_t)tx_gain_am_address_5 << 9) |((uint32_t)active_am_address_5 << 8) |((uint32_t)sco1_am_address_5 << 7) |((uint32_t)sco2_am_address_5 << 6) |((uint32_t)payload_header_flow_am_address_5 << 5) |((uint32_t)hold_am_address_5 << 4) |((uint32_t)sniff_am_address_5 << 3) |((uint32_t)arqn_am_address_5 << 2) |((uint32_t)seqn_am_address_5 << 1) |((uint32_t)packet_header_flow_am_address_5 << 0));
}

__INLINE void bt_controller_lut_row_52_unpack(uint8_t* ptt_am_address_5, uint8_t* esco_am_address_5, uint8_t* sniff_start_am_address_5, uint8_t* sniff_end_am_address_5, uint8_t* tx_gain_am_address_5, uint8_t* active_am_address_5, uint8_t* sco1_am_address_5, uint8_t* sco2_am_address_5, uint8_t* payload_header_flow_am_address_5, uint8_t* hold_am_address_5, uint8_t* sniff_am_address_5, uint8_t* arqn_am_address_5, uint8_t* seqn_am_address_5, uint8_t* packet_header_flow_am_address_5)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR);

	*ptt_am_address_5 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*esco_am_address_5 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*sniff_start_am_address_5 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*sniff_end_am_address_5 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*tx_gain_am_address_5 = (localVal & ((uint32_t)0x00000E00)) >>  9;
	*active_am_address_5 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*sco1_am_address_5 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*sco2_am_address_5 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*payload_header_flow_am_address_5 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hold_am_address_5 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*sniff_am_address_5 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*arqn_am_address_5 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*seqn_am_address_5 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*packet_header_flow_am_address_5 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_52_ptt_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_lut_row_52_ptt_am_address_5_setf(uint8_t pttamaddress5)
{
	ASSERT_ERR((((uint32_t)pttamaddress5 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_52_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)pttamaddress5 <<15));
}
__INLINE uint8_t bt_controller_lut_row_52_esco_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_lut_row_52_esco_am_address_5_setf(uint8_t escoamaddress5)
{
	ASSERT_ERR((((uint32_t)escoamaddress5 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_52_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)escoamaddress5 <<14));
}
__INLINE uint8_t bt_controller_lut_row_52_sniff_start_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_lut_row_52_sniff_start_am_address_5_setf(uint8_t sniffstartamaddress5)
{
	ASSERT_ERR((((uint32_t)sniffstartamaddress5 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_52_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)sniffstartamaddress5 <<13));
}
__INLINE uint8_t bt_controller_lut_row_52_sniff_end_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_lut_row_52_sniff_end_am_address_5_setf(uint8_t sniffendamaddress5)
{
	ASSERT_ERR((((uint32_t)sniffendamaddress5 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_52_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)sniffendamaddress5 <<12));
}
__INLINE uint8_t bt_controller_lut_row_52_tx_gain_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000E00)) >> 9);
}
__INLINE void bt_controller_lut_row_52_tx_gain_am_address_5_setf(uint8_t txgainamaddress5)
{
	ASSERT_ERR((((uint32_t)txgainamaddress5 << 9) & ~((uint32_t)0x00000E00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_52_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR) & ~((uint32_t)0x00000E00)) | ((uint32_t)txgainamaddress5 <<9));
}
__INLINE uint8_t bt_controller_lut_row_52_active_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_lut_row_52_active_am_address_5_setf(uint8_t activeamaddress5)
{
	ASSERT_ERR((((uint32_t)activeamaddress5 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_52_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)activeamaddress5 <<8));
}
__INLINE uint8_t bt_controller_lut_row_52_sco_1_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_lut_row_52_sco_1_am_address_5_setf(uint8_t sco1amaddress5)
{
	ASSERT_ERR((((uint32_t)sco1amaddress5 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_52_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)sco1amaddress5 <<7));
}
__INLINE uint8_t bt_controller_lut_row_52_sco_2_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_lut_row_52_sco_2_am_address_5_setf(uint8_t sco2amaddress5)
{
	ASSERT_ERR((((uint32_t)sco2amaddress5 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_52_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)sco2amaddress5 <<6));
}
__INLINE uint8_t bt_controller_lut_row_52_payload_header_flow_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_lut_row_52_payload_header_flow_am_address_5_setf(uint8_t payloadheaderflowamaddress5)
{
	ASSERT_ERR((((uint32_t)payloadheaderflowamaddress5 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_52_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)payloadheaderflowamaddress5 <<5));
}
__INLINE uint8_t bt_controller_lut_row_52_hold_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_lut_row_52_hold_am_address_5_setf(uint8_t holdamaddress5)
{
	ASSERT_ERR((((uint32_t)holdamaddress5 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_52_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)holdamaddress5 <<4));
}
__INLINE uint8_t bt_controller_lut_row_52_sniff_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_lut_row_52_sniff_am_address_5_setf(uint8_t sniffamaddress5)
{
	ASSERT_ERR((((uint32_t)sniffamaddress5 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_52_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)sniffamaddress5 <<3));
}
__INLINE uint8_t bt_controller_lut_row_52_arqn_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_lut_row_52_arqn_am_address_5_setf(uint8_t arqnamaddress5)
{
	ASSERT_ERR((((uint32_t)arqnamaddress5 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_52_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)arqnamaddress5 <<2));
}
__INLINE uint8_t bt_controller_lut_row_52_seqn_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_lut_row_52_seqn_am_address_5_setf(uint8_t seqnamaddress5)
{
	ASSERT_ERR((((uint32_t)seqnamaddress5 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_52_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)seqnamaddress5 <<1));
}
__INLINE uint8_t bt_controller_lut_row_52_packet_header_flow_am_address_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_lut_row_52_packet_header_flow_am_address_5_setf(uint8_t packetheaderflowamaddress5)
{
	ASSERT_ERR((((uint32_t)packetheaderflowamaddress5 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_52_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_52_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)packetheaderflowamaddress5 <<0));
}

/**
 * @brief LUT_ROW_61 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 Packet_Type_am_address_6  0xC
 *    11:10 LLID_am_address_6         0x0
 *    09:00 Payload_Length_of_am_address_6 0x0
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_61_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000110)
#define BT_CONTROLLER_LUT_ROW_61_OFFSET      0x00000110
#define BT_CONTROLLER_LUT_ROW_61_INDEX       0x00000044
#define BT_CONTROLLER_LUT_ROW_61_RESET       0x0000C000

__INLINE uint32_t  bt_controller_lut_row_61_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_61_ADDR);
}

__INLINE void bt_controller_lut_row_61_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_61_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_61_PACKET_TYPE_AM_ADDRESS_6_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_LUT_ROW_61_PACKET_TYPE_AM_ADDRESS_6_LSB    12
#define BT_CONTROLLER_LUT_ROW_61_PACKET_TYPE_AM_ADDRESS_6_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_61_LLID_AM_ADDRESS_6_MASK    ((uint32_t)0x00000C00)
#define BT_CONTROLLER_LUT_ROW_61_LLID_AM_ADDRESS_6_LSB    10
#define BT_CONTROLLER_LUT_ROW_61_LLID_AM_ADDRESS_6_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_61_PAYLOAD_LENGTH_OF_AM_ADDRESS_6_MASK    ((uint32_t)0x000003FF)
#define BT_CONTROLLER_LUT_ROW_61_PAYLOAD_LENGTH_OF_AM_ADDRESS_6_LSB    0
#define BT_CONTROLLER_LUT_ROW_61_PAYLOAD_LENGTH_OF_AM_ADDRESS_6_WIDTH    ((uint32_t)0x0000000A)

#define BT_CONTROLLER_LUT_ROW_61_PACKET_TYPE_AM_ADDRESS_6_RST    0xC
#define BT_CONTROLLER_LUT_ROW_61_LLID_AM_ADDRESS_6_RST    0x0
#define BT_CONTROLLER_LUT_ROW_61_PAYLOAD_LENGTH_OF_AM_ADDRESS_6_RST    0x0

__INLINE void bt_controller_lut_row_61_pack(uint8_t packet_type_am_address_6, uint8_t llid_am_address_6, uint16_t payload_length_of_am_address_6)
{
	ASSERT_ERR((((uint32_t)packet_type_am_address_6 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)llid_am_address_6 << 10) & ~((uint32_t)0x00000C00)) == 0);
	ASSERT_ERR((((uint32_t)payload_length_of_am_address_6 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_61_ADDR,  ((uint32_t)packet_type_am_address_6 << 12) |((uint32_t)llid_am_address_6 << 10) |((uint32_t)payload_length_of_am_address_6 << 0));
}

__INLINE void bt_controller_lut_row_61_unpack(uint8_t* packet_type_am_address_6, uint8_t* llid_am_address_6, uint16_t* payload_length_of_am_address_6)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_61_ADDR);

	*packet_type_am_address_6 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*llid_am_address_6 = (localVal & ((uint32_t)0x00000C00)) >>  10;
	*payload_length_of_am_address_6 = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_61_packet_type_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_61_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void bt_controller_lut_row_61_packet_type_am_address_6_setf(uint8_t packettypeamaddress6)
{
	ASSERT_ERR((((uint32_t)packettypeamaddress6 << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_61_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_61_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)packettypeamaddress6 <<12));
}
__INLINE uint8_t bt_controller_lut_row_61_llid_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_61_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000C00)) >> 10);
}
__INLINE void bt_controller_lut_row_61_llid_am_address_6_setf(uint8_t llidamaddress6)
{
	ASSERT_ERR((((uint32_t)llidamaddress6 << 10) & ~((uint32_t)0x00000C00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_61_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_61_ADDR) & ~((uint32_t)0x00000C00)) | ((uint32_t)llidamaddress6 <<10));
}
__INLINE uint16_t bt_controller_lut_row_61_payload_length_of_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_61_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void bt_controller_lut_row_61_payload_length_of_am_address_6_setf(uint16_t payloadlengthofamaddress6)
{
	ASSERT_ERR((((uint32_t)payloadlengthofamaddress6 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_61_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_61_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)payloadlengthofamaddress6 <<0));
}

/**
 * @brief LUT_ROW_62 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    Ptt_am_address_6          0              
 *    14    Esco_am_address_6         0              
 *    13    Sniff_Start_am_address_6  0              
 *    12    Sniff_End_am_address_6    0              
 *    11:09 TX_Gain_am_address_6      0x0
 *    08    Active_am_address_6       0              
 *    07    SCO1_am_address_6         0              
 *    06    SCO2_am_address_6         0              
 *    05    Payload_Header_Flow_am_address_6 0              
 *    04    Hold_am_address_6         0              
 *    03    Sniff_am_address_6        0              
 *    02    ARQN_am_address_6         1              
 *    01    SEQN_am_address_6         0              
 *    00    Packet_Header_Flow_am_address_6 1              
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_62_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000114)
#define BT_CONTROLLER_LUT_ROW_62_OFFSET      0x00000114
#define BT_CONTROLLER_LUT_ROW_62_INDEX       0x00000045
#define BT_CONTROLLER_LUT_ROW_62_RESET       0x00000005

__INLINE uint32_t  bt_controller_lut_row_62_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR);
}

__INLINE void bt_controller_lut_row_62_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_62_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_62_PTT_AM_ADDRESS_6_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_LUT_ROW_62_PTT_AM_ADDRESS_6_POS    15
#define BT_CONTROLLER_LUT_ROW_62_ESCO_AM_ADDRESS_6_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_LUT_ROW_62_ESCO_AM_ADDRESS_6_POS    14
#define BT_CONTROLLER_LUT_ROW_62_SNIFF_START_AM_ADDRESS_6_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_LUT_ROW_62_SNIFF_START_AM_ADDRESS_6_POS    13
#define BT_CONTROLLER_LUT_ROW_62_SNIFF_END_AM_ADDRESS_6_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_LUT_ROW_62_SNIFF_END_AM_ADDRESS_6_POS    12
#define BT_CONTROLLER_LUT_ROW_62_TX_GAIN_AM_ADDRESS_6_MASK    ((uint32_t)0x00000E00)
#define BT_CONTROLLER_LUT_ROW_62_TX_GAIN_AM_ADDRESS_6_LSB    9
#define BT_CONTROLLER_LUT_ROW_62_TX_GAIN_AM_ADDRESS_6_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_LUT_ROW_62_ACTIVE_AM_ADDRESS_6_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_LUT_ROW_62_ACTIVE_AM_ADDRESS_6_POS    8
#define BT_CONTROLLER_LUT_ROW_62_SCO_1_AM_ADDRESS_6_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_LUT_ROW_62_SCO_1_AM_ADDRESS_6_POS    7
#define BT_CONTROLLER_LUT_ROW_62_SCO_2_AM_ADDRESS_6_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_LUT_ROW_62_SCO_2_AM_ADDRESS_6_POS    6
#define BT_CONTROLLER_LUT_ROW_62_PAYLOAD_HEADER_FLOW_AM_ADDRESS_6_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_LUT_ROW_62_PAYLOAD_HEADER_FLOW_AM_ADDRESS_6_POS    5
#define BT_CONTROLLER_LUT_ROW_62_HOLD_AM_ADDRESS_6_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_LUT_ROW_62_HOLD_AM_ADDRESS_6_POS    4
#define BT_CONTROLLER_LUT_ROW_62_SNIFF_AM_ADDRESS_6_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_LUT_ROW_62_SNIFF_AM_ADDRESS_6_POS    3
#define BT_CONTROLLER_LUT_ROW_62_ARQN_AM_ADDRESS_6_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_62_ARQN_AM_ADDRESS_6_POS    2
#define BT_CONTROLLER_LUT_ROW_62_SEQN_AM_ADDRESS_6_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_62_SEQN_AM_ADDRESS_6_POS    1
#define BT_CONTROLLER_LUT_ROW_62_PACKET_HEADER_FLOW_AM_ADDRESS_6_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_LUT_ROW_62_PACKET_HEADER_FLOW_AM_ADDRESS_6_POS    0

#define BT_CONTROLLER_LUT_ROW_62_PTT_AM_ADDRESS_6_RST    0x0
#define BT_CONTROLLER_LUT_ROW_62_ESCO_AM_ADDRESS_6_RST    0x0
#define BT_CONTROLLER_LUT_ROW_62_SNIFF_START_AM_ADDRESS_6_RST    0x0
#define BT_CONTROLLER_LUT_ROW_62_SNIFF_END_AM_ADDRESS_6_RST    0x0
#define BT_CONTROLLER_LUT_ROW_62_TX_GAIN_AM_ADDRESS_6_RST    0x0
#define BT_CONTROLLER_LUT_ROW_62_ACTIVE_AM_ADDRESS_6_RST    0x0
#define BT_CONTROLLER_LUT_ROW_62_SCO_1_AM_ADDRESS_6_RST    0x0
#define BT_CONTROLLER_LUT_ROW_62_SCO_2_AM_ADDRESS_6_RST    0x0
#define BT_CONTROLLER_LUT_ROW_62_PAYLOAD_HEADER_FLOW_AM_ADDRESS_6_RST    0x0
#define BT_CONTROLLER_LUT_ROW_62_HOLD_AM_ADDRESS_6_RST    0x0
#define BT_CONTROLLER_LUT_ROW_62_SNIFF_AM_ADDRESS_6_RST    0x0
#define BT_CONTROLLER_LUT_ROW_62_ARQN_AM_ADDRESS_6_RST    0x1
#define BT_CONTROLLER_LUT_ROW_62_SEQN_AM_ADDRESS_6_RST    0x0
#define BT_CONTROLLER_LUT_ROW_62_PACKET_HEADER_FLOW_AM_ADDRESS_6_RST    0x1

__INLINE void bt_controller_lut_row_62_pack(uint8_t ptt_am_address_6, uint8_t esco_am_address_6, uint8_t sniff_start_am_address_6, uint8_t sniff_end_am_address_6, uint8_t tx_gain_am_address_6, uint8_t active_am_address_6, uint8_t sco1_am_address_6, uint8_t sco2_am_address_6, uint8_t payload_header_flow_am_address_6, uint8_t hold_am_address_6, uint8_t sniff_am_address_6, uint8_t arqn_am_address_6, uint8_t seqn_am_address_6, uint8_t packet_header_flow_am_address_6)
{
	ASSERT_ERR((((uint32_t)ptt_am_address_6 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)esco_am_address_6 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_start_am_address_6 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_end_am_address_6 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)tx_gain_am_address_6 << 9) & ~((uint32_t)0x00000E00)) == 0);
	ASSERT_ERR((((uint32_t)active_am_address_6 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)sco1_am_address_6 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)sco2_am_address_6 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)payload_header_flow_am_address_6 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)hold_am_address_6 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)sniff_am_address_6 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)arqn_am_address_6 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)seqn_am_address_6 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)packet_header_flow_am_address_6 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_62_ADDR,  ((uint32_t)ptt_am_address_6 << 15) |((uint32_t)esco_am_address_6 << 14) |((uint32_t)sniff_start_am_address_6 << 13) |((uint32_t)sniff_end_am_address_6 << 12) |((uint32_t)tx_gain_am_address_6 << 9) |((uint32_t)active_am_address_6 << 8) |((uint32_t)sco1_am_address_6 << 7) |((uint32_t)sco2_am_address_6 << 6) |((uint32_t)payload_header_flow_am_address_6 << 5) |((uint32_t)hold_am_address_6 << 4) |((uint32_t)sniff_am_address_6 << 3) |((uint32_t)arqn_am_address_6 << 2) |((uint32_t)seqn_am_address_6 << 1) |((uint32_t)packet_header_flow_am_address_6 << 0));
}

__INLINE void bt_controller_lut_row_62_unpack(uint8_t* ptt_am_address_6, uint8_t* esco_am_address_6, uint8_t* sniff_start_am_address_6, uint8_t* sniff_end_am_address_6, uint8_t* tx_gain_am_address_6, uint8_t* active_am_address_6, uint8_t* sco1_am_address_6, uint8_t* sco2_am_address_6, uint8_t* payload_header_flow_am_address_6, uint8_t* hold_am_address_6, uint8_t* sniff_am_address_6, uint8_t* arqn_am_address_6, uint8_t* seqn_am_address_6, uint8_t* packet_header_flow_am_address_6)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR);

	*ptt_am_address_6 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*esco_am_address_6 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*sniff_start_am_address_6 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*sniff_end_am_address_6 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*tx_gain_am_address_6 = (localVal & ((uint32_t)0x00000E00)) >>  9;
	*active_am_address_6 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*sco1_am_address_6 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*sco2_am_address_6 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*payload_header_flow_am_address_6 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hold_am_address_6 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*sniff_am_address_6 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*arqn_am_address_6 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*seqn_am_address_6 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*packet_header_flow_am_address_6 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_62_ptt_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_lut_row_62_ptt_am_address_6_setf(uint8_t pttamaddress6)
{
	ASSERT_ERR((((uint32_t)pttamaddress6 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_62_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)pttamaddress6 <<15));
}
__INLINE uint8_t bt_controller_lut_row_62_esco_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_lut_row_62_esco_am_address_6_setf(uint8_t escoamaddress6)
{
	ASSERT_ERR((((uint32_t)escoamaddress6 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_62_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)escoamaddress6 <<14));
}
__INLINE uint8_t bt_controller_lut_row_62_sniff_start_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_lut_row_62_sniff_start_am_address_6_setf(uint8_t sniffstartamaddress6)
{
	ASSERT_ERR((((uint32_t)sniffstartamaddress6 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_62_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)sniffstartamaddress6 <<13));
}
__INLINE uint8_t bt_controller_lut_row_62_sniff_end_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_lut_row_62_sniff_end_am_address_6_setf(uint8_t sniffendamaddress6)
{
	ASSERT_ERR((((uint32_t)sniffendamaddress6 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_62_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)sniffendamaddress6 <<12));
}
__INLINE uint8_t bt_controller_lut_row_62_tx_gain_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000E00)) >> 9);
}
__INLINE void bt_controller_lut_row_62_tx_gain_am_address_6_setf(uint8_t txgainamaddress6)
{
	ASSERT_ERR((((uint32_t)txgainamaddress6 << 9) & ~((uint32_t)0x00000E00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_62_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR) & ~((uint32_t)0x00000E00)) | ((uint32_t)txgainamaddress6 <<9));
}
__INLINE uint8_t bt_controller_lut_row_62_active_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_lut_row_62_active_am_address_6_setf(uint8_t activeamaddress6)
{
	ASSERT_ERR((((uint32_t)activeamaddress6 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_62_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)activeamaddress6 <<8));
}
__INLINE uint8_t bt_controller_lut_row_62_sco_1_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_lut_row_62_sco_1_am_address_6_setf(uint8_t sco1amaddress6)
{
	ASSERT_ERR((((uint32_t)sco1amaddress6 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_62_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)sco1amaddress6 <<7));
}
__INLINE uint8_t bt_controller_lut_row_62_sco_2_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_lut_row_62_sco_2_am_address_6_setf(uint8_t sco2amaddress6)
{
	ASSERT_ERR((((uint32_t)sco2amaddress6 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_62_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)sco2amaddress6 <<6));
}
__INLINE uint8_t bt_controller_lut_row_62_payload_header_flow_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_lut_row_62_payload_header_flow_am_address_6_setf(uint8_t payloadheaderflowamaddress6)
{
	ASSERT_ERR((((uint32_t)payloadheaderflowamaddress6 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_62_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)payloadheaderflowamaddress6 <<5));
}
__INLINE uint8_t bt_controller_lut_row_62_hold_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_lut_row_62_hold_am_address_6_setf(uint8_t holdamaddress6)
{
	ASSERT_ERR((((uint32_t)holdamaddress6 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_62_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)holdamaddress6 <<4));
}
__INLINE uint8_t bt_controller_lut_row_62_sniff_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_lut_row_62_sniff_am_address_6_setf(uint8_t sniffamaddress6)
{
	ASSERT_ERR((((uint32_t)sniffamaddress6 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_62_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)sniffamaddress6 <<3));
}
__INLINE uint8_t bt_controller_lut_row_62_arqn_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_lut_row_62_arqn_am_address_6_setf(uint8_t arqnamaddress6)
{
	ASSERT_ERR((((uint32_t)arqnamaddress6 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_62_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)arqnamaddress6 <<2));
}
__INLINE uint8_t bt_controller_lut_row_62_seqn_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_lut_row_62_seqn_am_address_6_setf(uint8_t seqnamaddress6)
{
	ASSERT_ERR((((uint32_t)seqnamaddress6 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_62_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)seqnamaddress6 <<1));
}
__INLINE uint8_t bt_controller_lut_row_62_packet_header_flow_am_address_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_lut_row_62_packet_header_flow_am_address_6_setf(uint8_t packetheaderflowamaddress6)
{
	ASSERT_ERR((((uint32_t)packetheaderflowamaddress6 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_62_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_62_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)packetheaderflowamaddress6 <<0));
}

/**
 * @brief LUT_ROW_71 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 Packet_Type_am_address_7  0xC
 *    11:10 LLID_am_address_7         0x0
 *    09:00 Payload_Length_of_am_address_7 0x0
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_71_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000118)
#define BT_CONTROLLER_LUT_ROW_71_OFFSET      0x00000118
#define BT_CONTROLLER_LUT_ROW_71_INDEX       0x00000046
#define BT_CONTROLLER_LUT_ROW_71_RESET       0x0000C000

__INLINE uint32_t  bt_controller_lut_row_71_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_71_ADDR);
}

__INLINE void bt_controller_lut_row_71_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_71_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_71_PACKET_TYPE_AM_ADDRESS_7_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_LUT_ROW_71_PACKET_TYPE_AM_ADDRESS_7_LSB    12
#define BT_CONTROLLER_LUT_ROW_71_PACKET_TYPE_AM_ADDRESS_7_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_71_LLID_AM_ADDRESS_7_MASK    ((uint32_t)0x00000C00)
#define BT_CONTROLLER_LUT_ROW_71_LLID_AM_ADDRESS_7_LSB    10
#define BT_CONTROLLER_LUT_ROW_71_LLID_AM_ADDRESS_7_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_71_PAYLOAD_LENGTH_OF_AM_ADDRESS_7_MASK    ((uint32_t)0x000003FF)
#define BT_CONTROLLER_LUT_ROW_71_PAYLOAD_LENGTH_OF_AM_ADDRESS_7_LSB    0
#define BT_CONTROLLER_LUT_ROW_71_PAYLOAD_LENGTH_OF_AM_ADDRESS_7_WIDTH    ((uint32_t)0x0000000A)

#define BT_CONTROLLER_LUT_ROW_71_PACKET_TYPE_AM_ADDRESS_7_RST    0xC
#define BT_CONTROLLER_LUT_ROW_71_LLID_AM_ADDRESS_7_RST    0x0
#define BT_CONTROLLER_LUT_ROW_71_PAYLOAD_LENGTH_OF_AM_ADDRESS_7_RST    0x0

__INLINE void bt_controller_lut_row_71_pack(uint8_t packet_type_am_address_7, uint8_t llid_am_address_7, uint16_t payload_length_of_am_address_7)
{
	ASSERT_ERR((((uint32_t)packet_type_am_address_7 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)llid_am_address_7 << 10) & ~((uint32_t)0x00000C00)) == 0);
	ASSERT_ERR((((uint32_t)payload_length_of_am_address_7 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_71_ADDR,  ((uint32_t)packet_type_am_address_7 << 12) |((uint32_t)llid_am_address_7 << 10) |((uint32_t)payload_length_of_am_address_7 << 0));
}

__INLINE void bt_controller_lut_row_71_unpack(uint8_t* packet_type_am_address_7, uint8_t* llid_am_address_7, uint16_t* payload_length_of_am_address_7)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_71_ADDR);

	*packet_type_am_address_7 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*llid_am_address_7 = (localVal & ((uint32_t)0x00000C00)) >>  10;
	*payload_length_of_am_address_7 = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_71_packet_type_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_71_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void bt_controller_lut_row_71_packet_type_am_address_7_setf(uint8_t packettypeamaddress7)
{
	ASSERT_ERR((((uint32_t)packettypeamaddress7 << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_71_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_71_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)packettypeamaddress7 <<12));
}
__INLINE uint8_t bt_controller_lut_row_71_llid_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_71_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000C00)) >> 10);
}
__INLINE void bt_controller_lut_row_71_llid_am_address_7_setf(uint8_t llidamaddress7)
{
	ASSERT_ERR((((uint32_t)llidamaddress7 << 10) & ~((uint32_t)0x00000C00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_71_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_71_ADDR) & ~((uint32_t)0x00000C00)) | ((uint32_t)llidamaddress7 <<10));
}
__INLINE uint16_t bt_controller_lut_row_71_payload_length_of_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_71_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void bt_controller_lut_row_71_payload_length_of_am_address_7_setf(uint16_t payloadlengthofamaddress7)
{
	ASSERT_ERR((((uint32_t)payloadlengthofamaddress7 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_71_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_71_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)payloadlengthofamaddress7 <<0));
}

/**
 * @brief LUT_ROW_72 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    Ptt_am_address_7          0              
 *    14    Esco_am_address_7         0              
 *    13    Sniff_Start_am_address_7  0              
 *    12    Sniff_End_am_address_7    0              
 *    11:09 TX_Gain_am_address_7      0x0
 *    08    Active_am_address_7       0              
 *    07    SCO1_am_address_7         0              
 *    06    SCO2_am_address_7         0              
 *    05    Payload_Header_Flow_am_address_7 0              
 *    04    Hold_am_address_7         0              
 *    03    Sniff_am_address_7        0              
 *    02    ARQN_am_address_7         1              
 *    01    SEQN_am_address_7         0              
 *    00    Packet_Header_Flow_am_address_7 1              
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_72_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000011C)
#define BT_CONTROLLER_LUT_ROW_72_OFFSET      0x0000011C
#define BT_CONTROLLER_LUT_ROW_72_INDEX       0x00000047
#define BT_CONTROLLER_LUT_ROW_72_RESET       0x00000005

__INLINE uint32_t  bt_controller_lut_row_72_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR);
}

__INLINE void bt_controller_lut_row_72_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_72_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_72_PTT_AM_ADDRESS_7_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_LUT_ROW_72_PTT_AM_ADDRESS_7_POS    15
#define BT_CONTROLLER_LUT_ROW_72_ESCO_AM_ADDRESS_7_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_LUT_ROW_72_ESCO_AM_ADDRESS_7_POS    14
#define BT_CONTROLLER_LUT_ROW_72_SNIFF_START_AM_ADDRESS_7_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_LUT_ROW_72_SNIFF_START_AM_ADDRESS_7_POS    13
#define BT_CONTROLLER_LUT_ROW_72_SNIFF_END_AM_ADDRESS_7_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_LUT_ROW_72_SNIFF_END_AM_ADDRESS_7_POS    12
#define BT_CONTROLLER_LUT_ROW_72_TX_GAIN_AM_ADDRESS_7_MASK    ((uint32_t)0x00000E00)
#define BT_CONTROLLER_LUT_ROW_72_TX_GAIN_AM_ADDRESS_7_LSB    9
#define BT_CONTROLLER_LUT_ROW_72_TX_GAIN_AM_ADDRESS_7_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_LUT_ROW_72_ACTIVE_AM_ADDRESS_7_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_LUT_ROW_72_ACTIVE_AM_ADDRESS_7_POS    8
#define BT_CONTROLLER_LUT_ROW_72_SCO_1_AM_ADDRESS_7_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_LUT_ROW_72_SCO_1_AM_ADDRESS_7_POS    7
#define BT_CONTROLLER_LUT_ROW_72_SCO_2_AM_ADDRESS_7_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_LUT_ROW_72_SCO_2_AM_ADDRESS_7_POS    6
#define BT_CONTROLLER_LUT_ROW_72_PAYLOAD_HEADER_FLOW_AM_ADDRESS_7_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_LUT_ROW_72_PAYLOAD_HEADER_FLOW_AM_ADDRESS_7_POS    5
#define BT_CONTROLLER_LUT_ROW_72_HOLD_AM_ADDRESS_7_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_LUT_ROW_72_HOLD_AM_ADDRESS_7_POS    4
#define BT_CONTROLLER_LUT_ROW_72_SNIFF_AM_ADDRESS_7_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_LUT_ROW_72_SNIFF_AM_ADDRESS_7_POS    3
#define BT_CONTROLLER_LUT_ROW_72_ARQN_AM_ADDRESS_7_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_72_ARQN_AM_ADDRESS_7_POS    2
#define BT_CONTROLLER_LUT_ROW_72_SEQN_AM_ADDRESS_7_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_72_SEQN_AM_ADDRESS_7_POS    1
#define BT_CONTROLLER_LUT_ROW_72_PACKET_HEADER_FLOW_AM_ADDRESS_7_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_LUT_ROW_72_PACKET_HEADER_FLOW_AM_ADDRESS_7_POS    0

#define BT_CONTROLLER_LUT_ROW_72_PTT_AM_ADDRESS_7_RST    0x0
#define BT_CONTROLLER_LUT_ROW_72_ESCO_AM_ADDRESS_7_RST    0x0
#define BT_CONTROLLER_LUT_ROW_72_SNIFF_START_AM_ADDRESS_7_RST    0x0
#define BT_CONTROLLER_LUT_ROW_72_SNIFF_END_AM_ADDRESS_7_RST    0x0
#define BT_CONTROLLER_LUT_ROW_72_TX_GAIN_AM_ADDRESS_7_RST    0x0
#define BT_CONTROLLER_LUT_ROW_72_ACTIVE_AM_ADDRESS_7_RST    0x0
#define BT_CONTROLLER_LUT_ROW_72_SCO_1_AM_ADDRESS_7_RST    0x0
#define BT_CONTROLLER_LUT_ROW_72_SCO_2_AM_ADDRESS_7_RST    0x0
#define BT_CONTROLLER_LUT_ROW_72_PAYLOAD_HEADER_FLOW_AM_ADDRESS_7_RST    0x0
#define BT_CONTROLLER_LUT_ROW_72_HOLD_AM_ADDRESS_7_RST    0x0
#define BT_CONTROLLER_LUT_ROW_72_SNIFF_AM_ADDRESS_7_RST    0x0
#define BT_CONTROLLER_LUT_ROW_72_ARQN_AM_ADDRESS_7_RST    0x1
#define BT_CONTROLLER_LUT_ROW_72_SEQN_AM_ADDRESS_7_RST    0x0
#define BT_CONTROLLER_LUT_ROW_72_PACKET_HEADER_FLOW_AM_ADDRESS_7_RST    0x1

__INLINE void bt_controller_lut_row_72_pack(uint8_t ptt_am_address_7, uint8_t esco_am_address_7, uint8_t sniff_start_am_address_7, uint8_t sniff_end_am_address_7, uint8_t tx_gain_am_address_7, uint8_t active_am_address_7, uint8_t sco1_am_address_7, uint8_t sco2_am_address_7, uint8_t payload_header_flow_am_address_7, uint8_t hold_am_address_7, uint8_t sniff_am_address_7, uint8_t arqn_am_address_7, uint8_t seqn_am_address_7, uint8_t packet_header_flow_am_address_7)
{
	ASSERT_ERR((((uint32_t)ptt_am_address_7 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)esco_am_address_7 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_start_am_address_7 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_end_am_address_7 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)tx_gain_am_address_7 << 9) & ~((uint32_t)0x00000E00)) == 0);
	ASSERT_ERR((((uint32_t)active_am_address_7 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)sco1_am_address_7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)sco2_am_address_7 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)payload_header_flow_am_address_7 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)hold_am_address_7 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)sniff_am_address_7 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)arqn_am_address_7 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)seqn_am_address_7 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)packet_header_flow_am_address_7 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_72_ADDR,  ((uint32_t)ptt_am_address_7 << 15) |((uint32_t)esco_am_address_7 << 14) |((uint32_t)sniff_start_am_address_7 << 13) |((uint32_t)sniff_end_am_address_7 << 12) |((uint32_t)tx_gain_am_address_7 << 9) |((uint32_t)active_am_address_7 << 8) |((uint32_t)sco1_am_address_7 << 7) |((uint32_t)sco2_am_address_7 << 6) |((uint32_t)payload_header_flow_am_address_7 << 5) |((uint32_t)hold_am_address_7 << 4) |((uint32_t)sniff_am_address_7 << 3) |((uint32_t)arqn_am_address_7 << 2) |((uint32_t)seqn_am_address_7 << 1) |((uint32_t)packet_header_flow_am_address_7 << 0));
}

__INLINE void bt_controller_lut_row_72_unpack(uint8_t* ptt_am_address_7, uint8_t* esco_am_address_7, uint8_t* sniff_start_am_address_7, uint8_t* sniff_end_am_address_7, uint8_t* tx_gain_am_address_7, uint8_t* active_am_address_7, uint8_t* sco1_am_address_7, uint8_t* sco2_am_address_7, uint8_t* payload_header_flow_am_address_7, uint8_t* hold_am_address_7, uint8_t* sniff_am_address_7, uint8_t* arqn_am_address_7, uint8_t* seqn_am_address_7, uint8_t* packet_header_flow_am_address_7)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR);

	*ptt_am_address_7 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*esco_am_address_7 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*sniff_start_am_address_7 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*sniff_end_am_address_7 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*tx_gain_am_address_7 = (localVal & ((uint32_t)0x00000E00)) >>  9;
	*active_am_address_7 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*sco1_am_address_7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*sco2_am_address_7 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*payload_header_flow_am_address_7 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hold_am_address_7 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*sniff_am_address_7 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*arqn_am_address_7 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*seqn_am_address_7 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*packet_header_flow_am_address_7 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_72_ptt_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_lut_row_72_ptt_am_address_7_setf(uint8_t pttamaddress7)
{
	ASSERT_ERR((((uint32_t)pttamaddress7 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_72_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)pttamaddress7 <<15));
}
__INLINE uint8_t bt_controller_lut_row_72_esco_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_lut_row_72_esco_am_address_7_setf(uint8_t escoamaddress7)
{
	ASSERT_ERR((((uint32_t)escoamaddress7 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_72_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)escoamaddress7 <<14));
}
__INLINE uint8_t bt_controller_lut_row_72_sniff_start_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_lut_row_72_sniff_start_am_address_7_setf(uint8_t sniffstartamaddress7)
{
	ASSERT_ERR((((uint32_t)sniffstartamaddress7 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_72_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)sniffstartamaddress7 <<13));
}
__INLINE uint8_t bt_controller_lut_row_72_sniff_end_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_lut_row_72_sniff_end_am_address_7_setf(uint8_t sniffendamaddress7)
{
	ASSERT_ERR((((uint32_t)sniffendamaddress7 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_72_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)sniffendamaddress7 <<12));
}
__INLINE uint8_t bt_controller_lut_row_72_tx_gain_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000E00)) >> 9);
}
__INLINE void bt_controller_lut_row_72_tx_gain_am_address_7_setf(uint8_t txgainamaddress7)
{
	ASSERT_ERR((((uint32_t)txgainamaddress7 << 9) & ~((uint32_t)0x00000E00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_72_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR) & ~((uint32_t)0x00000E00)) | ((uint32_t)txgainamaddress7 <<9));
}
__INLINE uint8_t bt_controller_lut_row_72_active_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_lut_row_72_active_am_address_7_setf(uint8_t activeamaddress7)
{
	ASSERT_ERR((((uint32_t)activeamaddress7 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_72_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)activeamaddress7 <<8));
}
__INLINE uint8_t bt_controller_lut_row_72_sco_1_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_lut_row_72_sco_1_am_address_7_setf(uint8_t sco1amaddress7)
{
	ASSERT_ERR((((uint32_t)sco1amaddress7 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_72_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)sco1amaddress7 <<7));
}
__INLINE uint8_t bt_controller_lut_row_72_sco_2_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_lut_row_72_sco_2_am_address_7_setf(uint8_t sco2amaddress7)
{
	ASSERT_ERR((((uint32_t)sco2amaddress7 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_72_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)sco2amaddress7 <<6));
}
__INLINE uint8_t bt_controller_lut_row_72_payload_header_flow_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_lut_row_72_payload_header_flow_am_address_7_setf(uint8_t payloadheaderflowamaddress7)
{
	ASSERT_ERR((((uint32_t)payloadheaderflowamaddress7 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_72_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)payloadheaderflowamaddress7 <<5));
}
__INLINE uint8_t bt_controller_lut_row_72_hold_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_lut_row_72_hold_am_address_7_setf(uint8_t holdamaddress7)
{
	ASSERT_ERR((((uint32_t)holdamaddress7 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_72_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)holdamaddress7 <<4));
}
__INLINE uint8_t bt_controller_lut_row_72_sniff_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_lut_row_72_sniff_am_address_7_setf(uint8_t sniffamaddress7)
{
	ASSERT_ERR((((uint32_t)sniffamaddress7 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_72_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)sniffamaddress7 <<3));
}
__INLINE uint8_t bt_controller_lut_row_72_arqn_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_lut_row_72_arqn_am_address_7_setf(uint8_t arqnamaddress7)
{
	ASSERT_ERR((((uint32_t)arqnamaddress7 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_72_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)arqnamaddress7 <<2));
}
__INLINE uint8_t bt_controller_lut_row_72_seqn_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_lut_row_72_seqn_am_address_7_setf(uint8_t seqnamaddress7)
{
	ASSERT_ERR((((uint32_t)seqnamaddress7 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_72_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)seqnamaddress7 <<1));
}
__INLINE uint8_t bt_controller_lut_row_72_packet_header_flow_am_address_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_lut_row_72_packet_header_flow_am_address_7_setf(uint8_t packetheaderflowamaddress7)
{
	ASSERT_ERR((((uint32_t)packetheaderflowamaddress7 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_72_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_72_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)packetheaderflowamaddress7 <<0));
}

/**
 * @brief TX_FIFO_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Data_of_tx_fifo0          0x0
 * </pre>
 */
#define BT_CONTROLLER_TX_FIFO_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000128)
#define BT_CONTROLLER_TX_FIFO_0_OFFSET      0x00000128
#define BT_CONTROLLER_TX_FIFO_0_INDEX       0x0000004A
#define BT_CONTROLLER_TX_FIFO_0_RESET       0x00000000

__INLINE uint32_t  bt_controller_tx_fifo_0_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TX_FIFO_0_ADDR);
}

__INLINE void bt_controller_tx_fifo_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TX_FIFO_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TX_FIFO_0_DATA_OF_TX_FIFO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_TX_FIFO_0_DATA_OF_TX_FIFO_0_LSB    0
#define BT_CONTROLLER_TX_FIFO_0_DATA_OF_TX_FIFO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_TX_FIFO_0_DATA_OF_TX_FIFO_0_RST    0x0

__INLINE uint16_t bt_controller_tx_fifo_0_data_of_tx_fifo_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_FIFO_0_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_tx_fifo_0_data_of_tx_fifo_0_setf(uint16_t dataoftxfifo0)
{
	ASSERT_ERR((((uint32_t)dataoftxfifo0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TX_FIFO_0_ADDR, (uint32_t)dataoftxfifo0 << 0);
}

/**
 * @brief TX_FIFO_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Data_of_tx_fifo1          0x0
 * </pre>
 */
#define BT_CONTROLLER_TX_FIFO_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000012C)
#define BT_CONTROLLER_TX_FIFO_1_OFFSET      0x0000012C
#define BT_CONTROLLER_TX_FIFO_1_INDEX       0x0000004B
#define BT_CONTROLLER_TX_FIFO_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_tx_fifo_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TX_FIFO_1_ADDR);
}

__INLINE void bt_controller_tx_fifo_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TX_FIFO_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TX_FIFO_1_DATA_OF_TX_FIFO_1_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_TX_FIFO_1_DATA_OF_TX_FIFO_1_LSB    0
#define BT_CONTROLLER_TX_FIFO_1_DATA_OF_TX_FIFO_1_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_TX_FIFO_1_DATA_OF_TX_FIFO_1_RST    0x0

__INLINE uint16_t bt_controller_tx_fifo_1_data_of_tx_fifo_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_FIFO_1_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_tx_fifo_1_data_of_tx_fifo_1_setf(uint16_t dataoftxfifo1)
{
	ASSERT_ERR((((uint32_t)dataoftxfifo1 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TX_FIFO_1_ADDR, (uint32_t)dataoftxfifo1 << 0);
}

/**
 * @brief TXPATH_CON_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:10 txpath_config_reg_15_to_6_bits_are_reserved 0x0
 *    09    Cpu_tobbtx_inten          0              
 *    08    Pcmrx_tocpu_inten         0              
 *    07    Host_bbtxpath_en          0              
 *    06:00 Pcmrx_tocpu_thr           0x0
 * </pre>
 */
#define BT_CONTROLLER_TXPATH_CON_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000130)
#define BT_CONTROLLER_TXPATH_CON_REG_OFFSET      0x00000130
#define BT_CONTROLLER_TXPATH_CON_REG_INDEX       0x0000004C
#define BT_CONTROLLER_TXPATH_CON_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_txpath_con_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TXPATH_CON_REG_ADDR);
}

__INLINE void bt_controller_txpath_con_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TXPATH_CON_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TXPATH_CON_REG_TXPATH_CONFIG_REG_15_TO_6_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FC00)
#define BT_CONTROLLER_TXPATH_CON_REG_TXPATH_CONFIG_REG_15_TO_6_BITS_ARE_RESERVED_LSB    10
#define BT_CONTROLLER_TXPATH_CON_REG_TXPATH_CONFIG_REG_15_TO_6_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_TXPATH_CON_REG_CPU_TOBBTX_INTEN_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_TXPATH_CON_REG_CPU_TOBBTX_INTEN_POS    9
#define BT_CONTROLLER_TXPATH_CON_REG_PCMRX_TOCPU_INTEN_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_TXPATH_CON_REG_PCMRX_TOCPU_INTEN_POS    8
#define BT_CONTROLLER_TXPATH_CON_REG_HOST_BBTXPATH_EN_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_TXPATH_CON_REG_HOST_BBTXPATH_EN_POS    7
#define BT_CONTROLLER_TXPATH_CON_REG_PCMRX_TOCPU_THR_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_TXPATH_CON_REG_PCMRX_TOCPU_THR_LSB    0
#define BT_CONTROLLER_TXPATH_CON_REG_PCMRX_TOCPU_THR_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_TXPATH_CON_REG_TXPATH_CONFIG_REG_15_TO_6_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TXPATH_CON_REG_CPU_TOBBTX_INTEN_RST    0x0
#define BT_CONTROLLER_TXPATH_CON_REG_PCMRX_TOCPU_INTEN_RST    0x0
#define BT_CONTROLLER_TXPATH_CON_REG_HOST_BBTXPATH_EN_RST    0x0
#define BT_CONTROLLER_TXPATH_CON_REG_PCMRX_TOCPU_THR_RST    0x0

__INLINE void bt_controller_txpath_con_reg_pack(uint8_t txpath_config_reg_15_to_6_bits_are_reserved, uint8_t cpu_tobbtx_inten, uint8_t pcmrx_tocpu_inten, uint8_t host_bbtxpath_en, uint8_t pcmrx_tocpu_thr)
{
	ASSERT_ERR((((uint32_t)txpath_config_reg_15_to_6_bits_are_reserved << 10) & ~((uint32_t)0x0000FC00)) == 0);
	ASSERT_ERR((((uint32_t)cpu_tobbtx_inten << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)pcmrx_tocpu_inten << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)host_bbtxpath_en << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)pcmrx_tocpu_thr << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_TXPATH_CON_REG_ADDR,  ((uint32_t)txpath_config_reg_15_to_6_bits_are_reserved << 10) |((uint32_t)cpu_tobbtx_inten << 9) |((uint32_t)pcmrx_tocpu_inten << 8) |((uint32_t)host_bbtxpath_en << 7) |((uint32_t)pcmrx_tocpu_thr << 0));
}

__INLINE void bt_controller_txpath_con_reg_unpack(uint8_t* txpath_config_reg_15_to_6_bits_are_reserved, uint8_t* cpu_tobbtx_inten, uint8_t* pcmrx_tocpu_inten, uint8_t* host_bbtxpath_en, uint8_t* pcmrx_tocpu_thr)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXPATH_CON_REG_ADDR);

	*txpath_config_reg_15_to_6_bits_are_reserved = (localVal & ((uint32_t)0x0000FC00)) >>  10;
	*cpu_tobbtx_inten = (localVal & ((uint32_t)0x00000200)) >>  9;
	*pcmrx_tocpu_inten = (localVal & ((uint32_t)0x00000100)) >>  8;
	*host_bbtxpath_en = (localVal & ((uint32_t)0x00000080)) >>  7;
	*pcmrx_tocpu_thr = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_txpath_con_reg_txpath_config_reg_15_to_6_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXPATH_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FC00)) >> 10);
}
__INLINE uint8_t bt_controller_txpath_con_reg_cpu_tobbtx_inten_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXPATH_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void bt_controller_txpath_con_reg_cpu_tobbtx_inten_setf(uint8_t cputobbtxinten)
{
	ASSERT_ERR((((uint32_t)cputobbtxinten << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(BT_CONTROLLER_TXPATH_CON_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TXPATH_CON_REG_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)cputobbtxinten <<9));
}
__INLINE uint8_t bt_controller_txpath_con_reg_pcmrx_tocpu_inten_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXPATH_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_txpath_con_reg_pcmrx_tocpu_inten_setf(uint8_t pcmrxtocpuinten)
{
	ASSERT_ERR((((uint32_t)pcmrxtocpuinten << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_TXPATH_CON_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TXPATH_CON_REG_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)pcmrxtocpuinten <<8));
}
__INLINE uint8_t bt_controller_txpath_con_reg_host_bbtxpath_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXPATH_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_txpath_con_reg_host_bbtxpath_en_setf(uint8_t hostbbtxpathen)
{
	ASSERT_ERR((((uint32_t)hostbbtxpathen << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_TXPATH_CON_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TXPATH_CON_REG_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)hostbbtxpathen <<7));
}
__INLINE uint8_t bt_controller_txpath_con_reg_pcmrx_tocpu_thr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXPATH_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void bt_controller_txpath_con_reg_pcmrx_tocpu_thr_setf(uint8_t pcmrxtocputhr)
{
	ASSERT_ERR((((uint32_t)pcmrxtocputhr << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_TXPATH_CON_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TXPATH_CON_REG_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)pcmrxtocputhr <<0));
}

/**
 * @brief RXPATH_CON_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:10 rxpath_config_reg_15_to_6_bits_are_reserved 0x0
 *    09    bbrx_tocpu_inten          0              
 *    08    cpu_topcmtx_inten         0              
 *    07    Host_bbrxpath_en          0              
 *    06:00 cpu_topcmtx_thr           0x0
 * </pre>
 */
#define BT_CONTROLLER_RXPATH_CON_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000134)
#define BT_CONTROLLER_RXPATH_CON_REG_OFFSET      0x00000134
#define BT_CONTROLLER_RXPATH_CON_REG_INDEX       0x0000004D
#define BT_CONTROLLER_RXPATH_CON_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rxpath_con_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RXPATH_CON_REG_ADDR);
}

__INLINE void bt_controller_rxpath_con_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RXPATH_CON_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RXPATH_CON_REG_RXPATH_CONFIG_REG_15_TO_6_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FC00)
#define BT_CONTROLLER_RXPATH_CON_REG_RXPATH_CONFIG_REG_15_TO_6_BITS_ARE_RESERVED_LSB    10
#define BT_CONTROLLER_RXPATH_CON_REG_RXPATH_CONFIG_REG_15_TO_6_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_RXPATH_CON_REG_BBRX_TOCPU_INTEN_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_RXPATH_CON_REG_BBRX_TOCPU_INTEN_POS    9
#define BT_CONTROLLER_RXPATH_CON_REG_CPU_TOPCMTX_INTEN_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_RXPATH_CON_REG_CPU_TOPCMTX_INTEN_POS    8
#define BT_CONTROLLER_RXPATH_CON_REG_HOST_BBRXPATH_EN_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_RXPATH_CON_REG_HOST_BBRXPATH_EN_POS    7
#define BT_CONTROLLER_RXPATH_CON_REG_CPU_TOPCMTX_THR_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_RXPATH_CON_REG_CPU_TOPCMTX_THR_LSB    0
#define BT_CONTROLLER_RXPATH_CON_REG_CPU_TOPCMTX_THR_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_RXPATH_CON_REG_RXPATH_CONFIG_REG_15_TO_6_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_RXPATH_CON_REG_BBRX_TOCPU_INTEN_RST    0x0
#define BT_CONTROLLER_RXPATH_CON_REG_CPU_TOPCMTX_INTEN_RST    0x0
#define BT_CONTROLLER_RXPATH_CON_REG_HOST_BBRXPATH_EN_RST    0x0
#define BT_CONTROLLER_RXPATH_CON_REG_CPU_TOPCMTX_THR_RST    0x0

__INLINE void bt_controller_rxpath_con_reg_pack(uint8_t rxpath_config_reg_15_to_6_bits_are_reserved, uint8_t bbrx_tocpu_inten, uint8_t cpu_topcmtx_inten, uint8_t host_bbrxpath_en, uint8_t cpu_topcmtx_thr)
{
	ASSERT_ERR((((uint32_t)rxpath_config_reg_15_to_6_bits_are_reserved << 10) & ~((uint32_t)0x0000FC00)) == 0);
	ASSERT_ERR((((uint32_t)bbrx_tocpu_inten << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)cpu_topcmtx_inten << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)host_bbrxpath_en << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)cpu_topcmtx_thr << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_RXPATH_CON_REG_ADDR,  ((uint32_t)rxpath_config_reg_15_to_6_bits_are_reserved << 10) |((uint32_t)bbrx_tocpu_inten << 9) |((uint32_t)cpu_topcmtx_inten << 8) |((uint32_t)host_bbrxpath_en << 7) |((uint32_t)cpu_topcmtx_thr << 0));
}

__INLINE void bt_controller_rxpath_con_reg_unpack(uint8_t* rxpath_config_reg_15_to_6_bits_are_reserved, uint8_t* bbrx_tocpu_inten, uint8_t* cpu_topcmtx_inten, uint8_t* host_bbrxpath_en, uint8_t* cpu_topcmtx_thr)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RXPATH_CON_REG_ADDR);

	*rxpath_config_reg_15_to_6_bits_are_reserved = (localVal & ((uint32_t)0x0000FC00)) >>  10;
	*bbrx_tocpu_inten = (localVal & ((uint32_t)0x00000200)) >>  9;
	*cpu_topcmtx_inten = (localVal & ((uint32_t)0x00000100)) >>  8;
	*host_bbrxpath_en = (localVal & ((uint32_t)0x00000080)) >>  7;
	*cpu_topcmtx_thr = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_rxpath_con_reg_rxpath_config_reg_15_to_6_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RXPATH_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FC00)) >> 10);
}
__INLINE uint8_t bt_controller_rxpath_con_reg_bbrx_tocpu_inten_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RXPATH_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void bt_controller_rxpath_con_reg_bbrx_tocpu_inten_setf(uint8_t bbrxtocpuinten)
{
	ASSERT_ERR((((uint32_t)bbrxtocpuinten << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(BT_CONTROLLER_RXPATH_CON_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RXPATH_CON_REG_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)bbrxtocpuinten <<9));
}
__INLINE uint8_t bt_controller_rxpath_con_reg_cpu_topcmtx_inten_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RXPATH_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_rxpath_con_reg_cpu_topcmtx_inten_setf(uint8_t cputopcmtxinten)
{
	ASSERT_ERR((((uint32_t)cputopcmtxinten << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_RXPATH_CON_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RXPATH_CON_REG_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)cputopcmtxinten <<8));
}
__INLINE uint8_t bt_controller_rxpath_con_reg_host_bbrxpath_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RXPATH_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_rxpath_con_reg_host_bbrxpath_en_setf(uint8_t hostbbrxpathen)
{
	ASSERT_ERR((((uint32_t)hostbbrxpathen << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_RXPATH_CON_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RXPATH_CON_REG_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)hostbbrxpathen <<7));
}
__INLINE uint8_t bt_controller_rxpath_con_reg_cpu_topcmtx_thr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RXPATH_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void bt_controller_rxpath_con_reg_cpu_topcmtx_thr_setf(uint8_t cputopcmtxthr)
{
	ASSERT_ERR((((uint32_t)cputopcmtxthr << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_RXPATH_CON_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RXPATH_CON_REG_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)cputopcmtxthr <<0));
}

/**
 * @brief FIFO_CTRL_REG_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:04 fifo_ctrl_reg1_15_to_4_bits_are_reserved 0x0
 *    03:00 Cbk_type                  0x0
 * </pre>
 */
#define BT_CONTROLLER_FIFO_CTRL_REG_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000138)
#define BT_CONTROLLER_FIFO_CTRL_REG_1_OFFSET      0x00000138
#define BT_CONTROLLER_FIFO_CTRL_REG_1_INDEX       0x0000004E
#define BT_CONTROLLER_FIFO_CTRL_REG_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_fifo_ctrl_reg_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_1_ADDR);
}

// field definitions
#define BT_CONTROLLER_FIFO_CTRL_REG_1_FIFO_CTRL_REG_1_15_TO_4_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FFF0)
#define BT_CONTROLLER_FIFO_CTRL_REG_1_FIFO_CTRL_REG_1_15_TO_4_BITS_ARE_RESERVED_LSB    4
#define BT_CONTROLLER_FIFO_CTRL_REG_1_FIFO_CTRL_REG_1_15_TO_4_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000000C)
#define BT_CONTROLLER_FIFO_CTRL_REG_1_CBK_TYPE_MASK    ((uint32_t)0x0000000F)
#define BT_CONTROLLER_FIFO_CTRL_REG_1_CBK_TYPE_LSB    0
#define BT_CONTROLLER_FIFO_CTRL_REG_1_CBK_TYPE_WIDTH    ((uint32_t)0x00000004)

#define BT_CONTROLLER_FIFO_CTRL_REG_1_FIFO_CTRL_REG_1_15_TO_4_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_FIFO_CTRL_REG_1_CBK_TYPE_RST    0x0

__INLINE void bt_controller_fifo_ctrl_reg_1_unpack(uint16_t* fifo_ctrl_reg1_15_to_4_bits_are_reserved, uint8_t* cbk_type)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_1_ADDR);

	*fifo_ctrl_reg1_15_to_4_bits_are_reserved = (localVal & ((uint32_t)0x0000FFF0)) >>  4;
	*cbk_type = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint16_t bt_controller_fifo_ctrl_reg_1_fifo_ctrl_reg_1_15_to_4_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFF0)) >> 4);
}
__INLINE uint8_t bt_controller_fifo_ctrl_reg_1_cbk_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}

/**
 * @brief BBRX_TOCPU_FIFO register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Bbrx_tocpu_out            0x0
 * </pre>
 */
#define BT_CONTROLLER_BBRX_TOCPU_FIFO_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000013C)
#define BT_CONTROLLER_BBRX_TOCPU_FIFO_OFFSET      0x0000013C
#define BT_CONTROLLER_BBRX_TOCPU_FIFO_INDEX       0x0000004F
#define BT_CONTROLLER_BBRX_TOCPU_FIFO_RESET       0x00000000

__INLINE uint32_t  bt_controller_bbrx_tocpu_fifo_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_BBRX_TOCPU_FIFO_ADDR);
}

// field definitions
#define BT_CONTROLLER_BBRX_TOCPU_FIFO_BBRX_TOCPU_OUT_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_BBRX_TOCPU_FIFO_BBRX_TOCPU_OUT_LSB    0
#define BT_CONTROLLER_BBRX_TOCPU_FIFO_BBRX_TOCPU_OUT_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_BBRX_TOCPU_FIFO_BBRX_TOCPU_OUT_RST    0x0

__INLINE uint16_t bt_controller_bbrx_tocpu_fifo_bbrx_tocpu_out_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_BBRX_TOCPU_FIFO_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief PCMRX_TOCPU_FIFO register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 pcmrx_tocpu_out           0x0
 * </pre>
 */
#define BT_CONTROLLER_PCMRX_TOCPU_FIFO_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000140)
#define BT_CONTROLLER_PCMRX_TOCPU_FIFO_OFFSET      0x00000140
#define BT_CONTROLLER_PCMRX_TOCPU_FIFO_INDEX       0x00000050
#define BT_CONTROLLER_PCMRX_TOCPU_FIFO_RESET       0x00000000

__INLINE uint32_t  bt_controller_pcmrx_tocpu_fifo_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PCMRX_TOCPU_FIFO_ADDR);
}

// field definitions
#define BT_CONTROLLER_PCMRX_TOCPU_FIFO_PCMRX_TOCPU_OUT_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PCMRX_TOCPU_FIFO_PCMRX_TOCPU_OUT_LSB    0
#define BT_CONTROLLER_PCMRX_TOCPU_FIFO_PCMRX_TOCPU_OUT_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PCMRX_TOCPU_FIFO_PCMRX_TOCPU_OUT_RST    0x0

__INLINE uint16_t bt_controller_pcmrx_tocpu_fifo_pcmrx_tocpu_out_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCMRX_TOCPU_FIFO_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief RXPATH_STS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    bbrx_full                 0              
 *    14:09 bbrx_tocpu_bytes          0x0
 *    08    bbrx_empty                1              
 *    07    pcmtx_full                0              
 *    06:01 cpu_topcmtx_bytes         0x0
 *    00    Pcmtx_empty               1              
 * </pre>
 */
#define BT_CONTROLLER_RXPATH_STS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000144)
#define BT_CONTROLLER_RXPATH_STS_REG_OFFSET      0x00000144
#define BT_CONTROLLER_RXPATH_STS_REG_INDEX       0x00000051
#define BT_CONTROLLER_RXPATH_STS_REG_RESET       0x00000101

__INLINE uint32_t  bt_controller_rxpath_sts_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RXPATH_STS_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_RXPATH_STS_REG_BBRX_FULL_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_RXPATH_STS_REG_BBRX_FULL_POS    15
#define BT_CONTROLLER_RXPATH_STS_REG_BBRX_TOCPU_BYTES_MASK    ((uint32_t)0x00007E00)
#define BT_CONTROLLER_RXPATH_STS_REG_BBRX_TOCPU_BYTES_LSB    9
#define BT_CONTROLLER_RXPATH_STS_REG_BBRX_TOCPU_BYTES_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_RXPATH_STS_REG_BBRX_EMPTY_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_RXPATH_STS_REG_BBRX_EMPTY_POS    8
#define BT_CONTROLLER_RXPATH_STS_REG_PCMTX_FULL_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_RXPATH_STS_REG_PCMTX_FULL_POS    7
#define BT_CONTROLLER_RXPATH_STS_REG_CPU_TOPCMTX_BYTES_MASK    ((uint32_t)0x0000007E)
#define BT_CONTROLLER_RXPATH_STS_REG_CPU_TOPCMTX_BYTES_LSB    1
#define BT_CONTROLLER_RXPATH_STS_REG_CPU_TOPCMTX_BYTES_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_RXPATH_STS_REG_PCMTX_EMPTY_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_RXPATH_STS_REG_PCMTX_EMPTY_POS    0

#define BT_CONTROLLER_RXPATH_STS_REG_BBRX_FULL_RST    0x0
#define BT_CONTROLLER_RXPATH_STS_REG_BBRX_TOCPU_BYTES_RST    0x0
#define BT_CONTROLLER_RXPATH_STS_REG_BBRX_EMPTY_RST    0x1
#define BT_CONTROLLER_RXPATH_STS_REG_PCMTX_FULL_RST    0x0
#define BT_CONTROLLER_RXPATH_STS_REG_CPU_TOPCMTX_BYTES_RST    0x0
#define BT_CONTROLLER_RXPATH_STS_REG_PCMTX_EMPTY_RST    0x1

__INLINE void bt_controller_rxpath_sts_reg_unpack(uint8_t* bbrx_full, uint8_t* bbrx_tocpu_bytes, uint8_t* bbrx_empty, uint8_t* pcmtx_full, uint8_t* cpu_topcmtx_bytes, uint8_t* pcmtx_empty)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RXPATH_STS_REG_ADDR);

	*bbrx_full = (localVal & ((uint32_t)0x00008000)) >>  15;
	*bbrx_tocpu_bytes = (localVal & ((uint32_t)0x00007E00)) >>  9;
	*bbrx_empty = (localVal & ((uint32_t)0x00000100)) >>  8;
	*pcmtx_full = (localVal & ((uint32_t)0x00000080)) >>  7;
	*cpu_topcmtx_bytes = (localVal & ((uint32_t)0x0000007E)) >>  1;
	*pcmtx_empty = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_rxpath_sts_reg_bbrx_full_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RXPATH_STS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t bt_controller_rxpath_sts_reg_bbrx_tocpu_bytes_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RXPATH_STS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00007E00)) >> 9);
}
__INLINE uint8_t bt_controller_rxpath_sts_reg_bbrx_empty_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RXPATH_STS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t bt_controller_rxpath_sts_reg_pcmtx_full_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RXPATH_STS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_rxpath_sts_reg_cpu_topcmtx_bytes_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RXPATH_STS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007E)) >> 1);
}
__INLINE uint8_t bt_controller_rxpath_sts_reg_pcmtx_empty_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RXPATH_STS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief TX_FIFO_8 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 data_tx_fifo8             0x0
 * </pre>
 */
#define BT_CONTROLLER_TX_FIFO_8_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000148)
#define BT_CONTROLLER_TX_FIFO_8_OFFSET      0x00000148
#define BT_CONTROLLER_TX_FIFO_8_INDEX       0x00000052
#define BT_CONTROLLER_TX_FIFO_8_RESET       0x00000000

__INLINE void bt_controller_tx_fifo_8_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TX_FIFO_8_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TX_FIFO_8_DATA_TX_FIFO_8_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_TX_FIFO_8_DATA_TX_FIFO_8_LSB    0
#define BT_CONTROLLER_TX_FIFO_8_DATA_TX_FIFO_8_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_TX_FIFO_8_DATA_TX_FIFO_8_RST    0x0

__INLINE void bt_controller_tx_fifo_8_data_tx_fifo_8_setf(uint16_t datatxfifo8)
{
	ASSERT_ERR((((uint32_t)datatxfifo8 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TX_FIFO_8_ADDR, (uint32_t)datatxfifo8 << 0);
}

/**
 * @brief SCO_FIFO_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 data_of_sco_fifo2         0x0
 * </pre>
 */
#define BT_CONTROLLER_SCO_FIFO_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000014C)
#define BT_CONTROLLER_SCO_FIFO_2_OFFSET      0x0000014C
#define BT_CONTROLLER_SCO_FIFO_2_INDEX       0x00000053
#define BT_CONTROLLER_SCO_FIFO_2_RESET       0x00000000

__INLINE uint32_t  bt_controller_sco_fifo_2_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_SCO_FIFO_2_ADDR);
}

__INLINE void bt_controller_sco_fifo_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SCO_FIFO_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SCO_FIFO_2_DATA_OF_SCO_FIFO_2_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_SCO_FIFO_2_DATA_OF_SCO_FIFO_2_LSB    0
#define BT_CONTROLLER_SCO_FIFO_2_DATA_OF_SCO_FIFO_2_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_SCO_FIFO_2_DATA_OF_SCO_FIFO_2_RST    0x0

__INLINE uint16_t bt_controller_sco_fifo_2_data_of_sco_fifo_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SCO_FIFO_2_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_sco_fifo_2_data_of_sco_fifo_2_setf(uint16_t dataofscofifo2)
{
	ASSERT_ERR((((uint32_t)dataofscofifo2 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_SCO_FIFO_2_ADDR, (uint32_t)dataofscofifo2 << 0);
}

/**
 * @brief FHS_REG_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Cod_15_downto_0_bits      0x0
 * </pre>
 */
#define BT_CONTROLLER_FHS_REG_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000150)
#define BT_CONTROLLER_FHS_REG_1_OFFSET      0x00000150
#define BT_CONTROLLER_FHS_REG_1_INDEX       0x00000054
#define BT_CONTROLLER_FHS_REG_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_fhs_reg_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_FHS_REG_1_ADDR);
}

__INLINE void bt_controller_fhs_reg_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_FHS_REG_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_FHS_REG_1_COD_15_DOWNTO_0_BITS_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_FHS_REG_1_COD_15_DOWNTO_0_BITS_LSB    0
#define BT_CONTROLLER_FHS_REG_1_COD_15_DOWNTO_0_BITS_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_FHS_REG_1_COD_15_DOWNTO_0_BITS_RST    0x0

__INLINE uint16_t bt_controller_fhs_reg_1_cod_15_downto_0_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FHS_REG_1_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_fhs_reg_1_cod_15_downto_0_bits_setf(uint16_t cod15downto0bits)
{
	ASSERT_ERR((((uint32_t)cod15downto0bits << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_FHS_REG_1_ADDR, (uint32_t)cod15downto0bits << 0);
}

/**
 * @brief FHS_REG_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:14 SR_mode                   0x0
 *    13:12 SP_mode                   0x0
 *    11    Int_pscan                 0              
 *    10:08 Pg_scan_mode              0x0
 *    07:00 Cod_23_downto_16_bits     0x0
 * </pre>
 */
#define BT_CONTROLLER_FHS_REG_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000154)
#define BT_CONTROLLER_FHS_REG_2_OFFSET      0x00000154
#define BT_CONTROLLER_FHS_REG_2_INDEX       0x00000055
#define BT_CONTROLLER_FHS_REG_2_RESET       0x00000000

__INLINE uint32_t  bt_controller_fhs_reg_2_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_FHS_REG_2_ADDR);
}

__INLINE void bt_controller_fhs_reg_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_FHS_REG_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_FHS_REG_2_SR_MODE_MASK    ((uint32_t)0x0000C000)
#define BT_CONTROLLER_FHS_REG_2_SR_MODE_LSB    14
#define BT_CONTROLLER_FHS_REG_2_SR_MODE_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_FHS_REG_2_SP_MODE_MASK    ((uint32_t)0x00003000)
#define BT_CONTROLLER_FHS_REG_2_SP_MODE_LSB    12
#define BT_CONTROLLER_FHS_REG_2_SP_MODE_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_FHS_REG_2_INT_PSCAN_BIT    ((uint32_t)0x00000800)
#define BT_CONTROLLER_FHS_REG_2_INT_PSCAN_POS    11
#define BT_CONTROLLER_FHS_REG_2_PG_SCAN_MODE_MASK    ((uint32_t)0x00000700)
#define BT_CONTROLLER_FHS_REG_2_PG_SCAN_MODE_LSB    8
#define BT_CONTROLLER_FHS_REG_2_PG_SCAN_MODE_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_FHS_REG_2_COD_23_DOWNTO_16_BITS_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_FHS_REG_2_COD_23_DOWNTO_16_BITS_LSB    0
#define BT_CONTROLLER_FHS_REG_2_COD_23_DOWNTO_16_BITS_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_FHS_REG_2_SR_MODE_RST    0x0
#define BT_CONTROLLER_FHS_REG_2_SP_MODE_RST    0x0
#define BT_CONTROLLER_FHS_REG_2_INT_PSCAN_RST    0x0
#define BT_CONTROLLER_FHS_REG_2_PG_SCAN_MODE_RST    0x0
#define BT_CONTROLLER_FHS_REG_2_COD_23_DOWNTO_16_BITS_RST    0x0

__INLINE void bt_controller_fhs_reg_2_pack(uint8_t sr_mode, uint8_t sp_mode, uint8_t int_pscan, uint8_t pg_scan_mode, uint8_t cod_23_downto_16_bits)
{
	ASSERT_ERR((((uint32_t)sr_mode << 14) & ~((uint32_t)0x0000C000)) == 0);
	ASSERT_ERR((((uint32_t)sp_mode << 12) & ~((uint32_t)0x00003000)) == 0);
	ASSERT_ERR((((uint32_t)int_pscan << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)pg_scan_mode << 8) & ~((uint32_t)0x00000700)) == 0);
	ASSERT_ERR((((uint32_t)cod_23_downto_16_bits << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_FHS_REG_2_ADDR,  ((uint32_t)sr_mode << 14) |((uint32_t)sp_mode << 12) |((uint32_t)int_pscan << 11) |((uint32_t)pg_scan_mode << 8) |((uint32_t)cod_23_downto_16_bits << 0));
}

__INLINE void bt_controller_fhs_reg_2_unpack(uint8_t* sr_mode, uint8_t* sp_mode, uint8_t* int_pscan, uint8_t* pg_scan_mode, uint8_t* cod_23_downto_16_bits)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FHS_REG_2_ADDR);

	*sr_mode = (localVal & ((uint32_t)0x0000C000)) >>  14;
	*sp_mode = (localVal & ((uint32_t)0x00003000)) >>  12;
	*int_pscan = (localVal & ((uint32_t)0x00000800)) >>  11;
	*pg_scan_mode = (localVal & ((uint32_t)0x00000700)) >>  8;
	*cod_23_downto_16_bits = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_fhs_reg_2_sr_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FHS_REG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000C000)) >> 14);
}
__INLINE void bt_controller_fhs_reg_2_sr_mode_setf(uint8_t srmode)
{
	ASSERT_ERR((((uint32_t)srmode << 14) & ~((uint32_t)0x0000C000)) == 0);
	REG_PL_WR(BT_CONTROLLER_FHS_REG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_FHS_REG_2_ADDR) & ~((uint32_t)0x0000C000)) | ((uint32_t)srmode <<14));
}
__INLINE uint8_t bt_controller_fhs_reg_2_sp_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FHS_REG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003000)) >> 12);
}
__INLINE void bt_controller_fhs_reg_2_sp_mode_setf(uint8_t spmode)
{
	ASSERT_ERR((((uint32_t)spmode << 12) & ~((uint32_t)0x00003000)) == 0);
	REG_PL_WR(BT_CONTROLLER_FHS_REG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_FHS_REG_2_ADDR) & ~((uint32_t)0x00003000)) | ((uint32_t)spmode <<12));
}
__INLINE uint8_t bt_controller_fhs_reg_2_int_pscan_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FHS_REG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void bt_controller_fhs_reg_2_int_pscan_setf(uint8_t intpscan)
{
	ASSERT_ERR((((uint32_t)intpscan << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(BT_CONTROLLER_FHS_REG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_FHS_REG_2_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)intpscan <<11));
}
__INLINE uint8_t bt_controller_fhs_reg_2_pg_scan_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FHS_REG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000700)) >> 8);
}
__INLINE void bt_controller_fhs_reg_2_pg_scan_mode_setf(uint8_t pgscanmode)
{
	ASSERT_ERR((((uint32_t)pgscanmode << 8) & ~((uint32_t)0x00000700)) == 0);
	REG_PL_WR(BT_CONTROLLER_FHS_REG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_FHS_REG_2_ADDR) & ~((uint32_t)0x00000700)) | ((uint32_t)pgscanmode <<8));
}
__INLINE uint8_t bt_controller_fhs_reg_2_cod_23_downto_16_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FHS_REG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_fhs_reg_2_cod_23_downto_16_bits_setf(uint8_t cod23downto16bits)
{
	ASSERT_ERR((((uint32_t)cod23downto16bits << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_FHS_REG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_FHS_REG_2_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)cod23downto16bits <<0));
}

/**
 * @brief ENCREN_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    encryption_enable_reg_15_bit_are_reserved 0              
 *    14:11 encryption_enable_reg_14_11_bits_are_reserved 0x0
 *    10    AES_enc_sel               0              
 *    09    Nsco_esco                 0              
 *    08    No_flush_on_err           0              
 *    07    Stop_esco_retx            0              
 *    06    No_retx                   0              
 *    05    No_sco                    0              
 *    04:02 deprecated                0x0
 *    01    Encr_enable_tx            0              
 *    00    Encr_enable_rx            0              
 * </pre>
 */
#define BT_CONTROLLER_ENCREN_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000158)
#define BT_CONTROLLER_ENCREN_REG_OFFSET      0x00000158
#define BT_CONTROLLER_ENCREN_REG_INDEX       0x00000056
#define BT_CONTROLLER_ENCREN_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_encren_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR);
}

__INLINE void bt_controller_encren_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ENCREN_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ENCREN_REG_ENCRYPTION_ENABLE_REG_15_BIT_ARE_RESERVED_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_ENCREN_REG_ENCRYPTION_ENABLE_REG_15_BIT_ARE_RESERVED_POS    15
#define BT_CONTROLLER_ENCREN_REG_ENCRYPTION_ENABLE_REG_14_11_BITS_ARE_RESERVED_MASK    ((uint32_t)0x00007800)
#define BT_CONTROLLER_ENCREN_REG_ENCRYPTION_ENABLE_REG_14_11_BITS_ARE_RESERVED_LSB    11
#define BT_CONTROLLER_ENCREN_REG_ENCRYPTION_ENABLE_REG_14_11_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_ENCREN_REG_AES_ENC_SEL_BIT    ((uint32_t)0x00000400)
#define BT_CONTROLLER_ENCREN_REG_AES_ENC_SEL_POS    10
#define BT_CONTROLLER_ENCREN_REG_NSCO_ESCO_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_ENCREN_REG_NSCO_ESCO_POS    9
#define BT_CONTROLLER_ENCREN_REG_NO_FLUSH_ON_ERR_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_ENCREN_REG_NO_FLUSH_ON_ERR_POS    8
#define BT_CONTROLLER_ENCREN_REG_STOP_ESCO_RETX_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_ENCREN_REG_STOP_ESCO_RETX_POS    7
#define BT_CONTROLLER_ENCREN_REG_NO_RETX_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_ENCREN_REG_NO_RETX_POS    6
#define BT_CONTROLLER_ENCREN_REG_NO_SCO_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_ENCREN_REG_NO_SCO_POS    5
#define BT_CONTROLLER_ENCREN_REG_DEPRECATED_MASK    ((uint32_t)0x0000001C)
#define BT_CONTROLLER_ENCREN_REG_DEPRECATED_LSB    2
#define BT_CONTROLLER_ENCREN_REG_DEPRECATED_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_ENCREN_REG_ENCR_ENABLE_TX_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_ENCREN_REG_ENCR_ENABLE_TX_POS    1
#define BT_CONTROLLER_ENCREN_REG_ENCR_ENABLE_RX_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_ENCREN_REG_ENCR_ENABLE_RX_POS    0

#define BT_CONTROLLER_ENCREN_REG_ENCRYPTION_ENABLE_REG_15_BIT_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_ENCREN_REG_ENCRYPTION_ENABLE_REG_14_11_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_ENCREN_REG_AES_ENC_SEL_RST    0x0
#define BT_CONTROLLER_ENCREN_REG_NSCO_ESCO_RST    0x0
#define BT_CONTROLLER_ENCREN_REG_NO_FLUSH_ON_ERR_RST    0x0
#define BT_CONTROLLER_ENCREN_REG_STOP_ESCO_RETX_RST    0x0
#define BT_CONTROLLER_ENCREN_REG_NO_RETX_RST    0x0
#define BT_CONTROLLER_ENCREN_REG_NO_SCO_RST    0x0
#define BT_CONTROLLER_ENCREN_REG_DEPRECATED_RST    0x0
#define BT_CONTROLLER_ENCREN_REG_ENCR_ENABLE_TX_RST    0x0
#define BT_CONTROLLER_ENCREN_REG_ENCR_ENABLE_RX_RST    0x0

__INLINE void bt_controller_encren_reg_pack(uint8_t encryption_enable_reg_15_bit_are_reserved, uint8_t encryption_enable_reg_14_11_bits_are_reserved, uint8_t aes_enc_sel, uint8_t nsco_esco, uint8_t no_flush_on_err, uint8_t stop_esco_retx, uint8_t no_retx, uint8_t no_sco, uint8_t deprecated, uint8_t encr_enable_tx, uint8_t encr_enable_rx)
{
	ASSERT_ERR((((uint32_t)encryption_enable_reg_15_bit_are_reserved << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)encryption_enable_reg_14_11_bits_are_reserved << 11) & ~((uint32_t)0x00007800)) == 0);
	ASSERT_ERR((((uint32_t)aes_enc_sel << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)nsco_esco << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)no_flush_on_err << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)stop_esco_retx << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)no_retx << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)no_sco << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)deprecated << 2) & ~((uint32_t)0x0000001C)) == 0);
	ASSERT_ERR((((uint32_t)encr_enable_tx << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)encr_enable_rx << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENCREN_REG_ADDR,  ((uint32_t)encryption_enable_reg_15_bit_are_reserved << 15) |((uint32_t)encryption_enable_reg_14_11_bits_are_reserved << 11) |((uint32_t)aes_enc_sel << 10) |((uint32_t)nsco_esco << 9) |((uint32_t)no_flush_on_err << 8) |((uint32_t)stop_esco_retx << 7) |((uint32_t)no_retx << 6) |((uint32_t)no_sco << 5) |((uint32_t)deprecated << 2) |((uint32_t)encr_enable_tx << 1) |((uint32_t)encr_enable_rx << 0));
}

__INLINE void bt_controller_encren_reg_unpack(uint8_t* encryption_enable_reg_15_bit_are_reserved, uint8_t* encryption_enable_reg_14_11_bits_are_reserved, uint8_t* aes_enc_sel, uint8_t* nsco_esco, uint8_t* no_flush_on_err, uint8_t* stop_esco_retx, uint8_t* no_retx, uint8_t* no_sco, uint8_t* deprecated, uint8_t* encr_enable_tx, uint8_t* encr_enable_rx)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR);

	*encryption_enable_reg_15_bit_are_reserved = (localVal & ((uint32_t)0x00008000)) >>  15;
	*encryption_enable_reg_14_11_bits_are_reserved = (localVal & ((uint32_t)0x00007800)) >>  11;
	*aes_enc_sel = (localVal & ((uint32_t)0x00000400)) >>  10;
	*nsco_esco = (localVal & ((uint32_t)0x00000200)) >>  9;
	*no_flush_on_err = (localVal & ((uint32_t)0x00000100)) >>  8;
	*stop_esco_retx = (localVal & ((uint32_t)0x00000080)) >>  7;
	*no_retx = (localVal & ((uint32_t)0x00000040)) >>  6;
	*no_sco = (localVal & ((uint32_t)0x00000020)) >>  5;
	*deprecated = (localVal & ((uint32_t)0x0000001C)) >>  2;
	*encr_enable_tx = (localVal & ((uint32_t)0x00000002)) >>  1;
	*encr_enable_rx = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_encren_reg_encryption_enable_reg_15_bit_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t bt_controller_encren_reg_encryption_enable_reg_14_11_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00007800)) >> 11);
}
__INLINE uint8_t bt_controller_encren_reg_aes_enc_sel_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void bt_controller_encren_reg_aes_enc_sel_setf(uint8_t aesencsel)
{
	ASSERT_ERR((((uint32_t)aesencsel << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENCREN_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)aesencsel <<10));
}
__INLINE uint8_t bt_controller_encren_reg_nsco_esco_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void bt_controller_encren_reg_nsco_esco_setf(uint8_t nscoesco)
{
	ASSERT_ERR((((uint32_t)nscoesco << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENCREN_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)nscoesco <<9));
}
__INLINE uint8_t bt_controller_encren_reg_no_flush_on_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_encren_reg_no_flush_on_err_setf(uint8_t noflushonerr)
{
	ASSERT_ERR((((uint32_t)noflushonerr << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENCREN_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)noflushonerr <<8));
}
__INLINE uint8_t bt_controller_encren_reg_stop_esco_retx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_encren_reg_stop_esco_retx_setf(uint8_t stopescoretx)
{
	ASSERT_ERR((((uint32_t)stopescoretx << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENCREN_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)stopescoretx <<7));
}
__INLINE uint8_t bt_controller_encren_reg_no_retx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_encren_reg_no_retx_setf(uint8_t noretx)
{
	ASSERT_ERR((((uint32_t)noretx << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENCREN_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)noretx <<6));
}
__INLINE uint8_t bt_controller_encren_reg_no_sco_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_encren_reg_no_sco_setf(uint8_t nosco)
{
	ASSERT_ERR((((uint32_t)nosco << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENCREN_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)nosco <<5));
}
__INLINE uint8_t bt_controller_encren_reg_deprecated_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000001C)) >> 2);
}
__INLINE void bt_controller_encren_reg_deprecated_setf(uint8_t deprecated)
{
	ASSERT_ERR((((uint32_t)deprecated << 2) & ~((uint32_t)0x0000001C)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENCREN_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR) & ~((uint32_t)0x0000001C)) | ((uint32_t)deprecated <<2));
}
__INLINE uint8_t bt_controller_encren_reg_encr_enable_tx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_encren_reg_encr_enable_tx_setf(uint8_t encrenabletx)
{
	ASSERT_ERR((((uint32_t)encrenabletx << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENCREN_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)encrenabletx <<1));
}
__INLINE uint8_t bt_controller_encren_reg_encr_enable_rx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_encren_reg_encr_enable_rx_setf(uint8_t encrenablerx)
{
	ASSERT_ERR((((uint32_t)encrenablerx << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENCREN_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_ENCREN_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)encrenablerx <<0));
}

/**
 * @brief ENC_KEY_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 ENC_KEY1                  0x0
 * </pre>
 */
#define BT_CONTROLLER_ENC_KEY_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000015C)
#define BT_CONTROLLER_ENC_KEY_1_REG_OFFSET      0x0000015C
#define BT_CONTROLLER_ENC_KEY_1_REG_INDEX       0x00000057
#define BT_CONTROLLER_ENC_KEY_1_REG_RESET       0x00000000

__INLINE void bt_controller_enc_key_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ENC_KEY_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ENC_KEY_1_REG_ENC_KEY_1_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_ENC_KEY_1_REG_ENC_KEY_1_LSB    0
#define BT_CONTROLLER_ENC_KEY_1_REG_ENC_KEY_1_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_ENC_KEY_1_REG_ENC_KEY_1_RST    0x0

__INLINE void bt_controller_enc_key_1_reg_enc_key_1_setf(uint16_t enckey1)
{
	ASSERT_ERR((((uint32_t)enckey1 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENC_KEY_1_REG_ADDR, (uint32_t)enckey1 << 0);
}

/**
 * @brief ENC_KEY_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 ENC_KEY2                  0x0
 * </pre>
 */
#define BT_CONTROLLER_ENC_KEY_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000160)
#define BT_CONTROLLER_ENC_KEY_2_REG_OFFSET      0x00000160
#define BT_CONTROLLER_ENC_KEY_2_REG_INDEX       0x00000058
#define BT_CONTROLLER_ENC_KEY_2_REG_RESET       0x00000000

__INLINE void bt_controller_enc_key_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ENC_KEY_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ENC_KEY_2_REG_ENC_KEY_2_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_ENC_KEY_2_REG_ENC_KEY_2_LSB    0
#define BT_CONTROLLER_ENC_KEY_2_REG_ENC_KEY_2_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_ENC_KEY_2_REG_ENC_KEY_2_RST    0x0

__INLINE void bt_controller_enc_key_2_reg_enc_key_2_setf(uint16_t enckey2)
{
	ASSERT_ERR((((uint32_t)enckey2 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENC_KEY_2_REG_ADDR, (uint32_t)enckey2 << 0);
}

/**
 * @brief ENC_KEY_3_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 ENC_KEY3                  0x0
 * </pre>
 */
#define BT_CONTROLLER_ENC_KEY_3_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000164)
#define BT_CONTROLLER_ENC_KEY_3_REG_OFFSET      0x00000164
#define BT_CONTROLLER_ENC_KEY_3_REG_INDEX       0x00000059
#define BT_CONTROLLER_ENC_KEY_3_REG_RESET       0x00000000

__INLINE void bt_controller_enc_key_3_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ENC_KEY_3_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ENC_KEY_3_REG_ENC_KEY_3_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_ENC_KEY_3_REG_ENC_KEY_3_LSB    0
#define BT_CONTROLLER_ENC_KEY_3_REG_ENC_KEY_3_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_ENC_KEY_3_REG_ENC_KEY_3_RST    0x0

__INLINE void bt_controller_enc_key_3_reg_enc_key_3_setf(uint16_t enckey3)
{
	ASSERT_ERR((((uint32_t)enckey3 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENC_KEY_3_REG_ADDR, (uint32_t)enckey3 << 0);
}

/**
 * @brief ENC_KEY_4_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 ENC_KEY4                  0x0
 * </pre>
 */
#define BT_CONTROLLER_ENC_KEY_4_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000168)
#define BT_CONTROLLER_ENC_KEY_4_REG_OFFSET      0x00000168
#define BT_CONTROLLER_ENC_KEY_4_REG_INDEX       0x0000005A
#define BT_CONTROLLER_ENC_KEY_4_REG_RESET       0x00000000

__INLINE void bt_controller_enc_key_4_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ENC_KEY_4_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ENC_KEY_4_REG_ENC_KEY_4_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_ENC_KEY_4_REG_ENC_KEY_4_LSB    0
#define BT_CONTROLLER_ENC_KEY_4_REG_ENC_KEY_4_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_ENC_KEY_4_REG_ENC_KEY_4_RST    0x0

__INLINE void bt_controller_enc_key_4_reg_enc_key_4_setf(uint16_t enckey4)
{
	ASSERT_ERR((((uint32_t)enckey4 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENC_KEY_4_REG_ADDR, (uint32_t)enckey4 << 0);
}

/**
 * @brief ENC_KEY_5_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 ENC_KEY5                  0x0
 * </pre>
 */
#define BT_CONTROLLER_ENC_KEY_5_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000016C)
#define BT_CONTROLLER_ENC_KEY_5_REG_OFFSET      0x0000016C
#define BT_CONTROLLER_ENC_KEY_5_REG_INDEX       0x0000005B
#define BT_CONTROLLER_ENC_KEY_5_REG_RESET       0x00000000

__INLINE void bt_controller_enc_key_5_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ENC_KEY_5_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ENC_KEY_5_REG_ENC_KEY_5_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_ENC_KEY_5_REG_ENC_KEY_5_LSB    0
#define BT_CONTROLLER_ENC_KEY_5_REG_ENC_KEY_5_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_ENC_KEY_5_REG_ENC_KEY_5_RST    0x0

__INLINE void bt_controller_enc_key_5_reg_enc_key_5_setf(uint16_t enckey5)
{
	ASSERT_ERR((((uint32_t)enckey5 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENC_KEY_5_REG_ADDR, (uint32_t)enckey5 << 0);
}

/**
 * @brief ENC_KEY_6_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 ENC_KEY6                  0x0
 * </pre>
 */
#define BT_CONTROLLER_ENC_KEY_6_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000170)
#define BT_CONTROLLER_ENC_KEY_6_REG_OFFSET      0x00000170
#define BT_CONTROLLER_ENC_KEY_6_REG_INDEX       0x0000005C
#define BT_CONTROLLER_ENC_KEY_6_REG_RESET       0x00000000

__INLINE void bt_controller_enc_key_6_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ENC_KEY_6_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ENC_KEY_6_REG_ENC_KEY_6_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_ENC_KEY_6_REG_ENC_KEY_6_LSB    0
#define BT_CONTROLLER_ENC_KEY_6_REG_ENC_KEY_6_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_ENC_KEY_6_REG_ENC_KEY_6_RST    0x0

__INLINE void bt_controller_enc_key_6_reg_enc_key_6_setf(uint16_t enckey6)
{
	ASSERT_ERR((((uint32_t)enckey6 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENC_KEY_6_REG_ADDR, (uint32_t)enckey6 << 0);
}

/**
 * @brief ENC_KEY_7_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 ENC_KEY7                  0x0
 * </pre>
 */
#define BT_CONTROLLER_ENC_KEY_7_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000174)
#define BT_CONTROLLER_ENC_KEY_7_REG_OFFSET      0x00000174
#define BT_CONTROLLER_ENC_KEY_7_REG_INDEX       0x0000005D
#define BT_CONTROLLER_ENC_KEY_7_REG_RESET       0x00000000

__INLINE void bt_controller_enc_key_7_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ENC_KEY_7_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ENC_KEY_7_REG_ENC_KEY_7_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_ENC_KEY_7_REG_ENC_KEY_7_LSB    0
#define BT_CONTROLLER_ENC_KEY_7_REG_ENC_KEY_7_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_ENC_KEY_7_REG_ENC_KEY_7_RST    0x0

__INLINE void bt_controller_enc_key_7_reg_enc_key_7_setf(uint16_t enckey7)
{
	ASSERT_ERR((((uint32_t)enckey7 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENC_KEY_7_REG_ADDR, (uint32_t)enckey7 << 0);
}

/**
 * @brief ENC_KEY_8_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 ENC_KEY8                  0x0
 * </pre>
 */
#define BT_CONTROLLER_ENC_KEY_8_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000178)
#define BT_CONTROLLER_ENC_KEY_8_REG_OFFSET      0x00000178
#define BT_CONTROLLER_ENC_KEY_8_REG_INDEX       0x0000005E
#define BT_CONTROLLER_ENC_KEY_8_REG_RESET       0x00000000

__INLINE void bt_controller_enc_key_8_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ENC_KEY_8_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ENC_KEY_8_REG_ENC_KEY_8_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_ENC_KEY_8_REG_ENC_KEY_8_LSB    0
#define BT_CONTROLLER_ENC_KEY_8_REG_ENC_KEY_8_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_ENC_KEY_8_REG_ENC_KEY_8_RST    0x0

__INLINE void bt_controller_enc_key_8_reg_enc_key_8_setf(uint16_t enckey8)
{
	ASSERT_ERR((((uint32_t)enckey8 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENC_KEY_8_REG_ADDR, (uint32_t)enckey8 << 0);
}

/**
 * @brief INTR_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    Hbuf_intr                 0              
 *    14    Po_intr                   0              
 *    13    Hsk_intr                  0              
 *    12    Access_err                0              
 *    11    End_esco                  0              
 *    10    Start_esco                0              
 *    09    Sniff                     0              
 *    08    Bb_timer                  0              
 *    07    I_rad                     0              
 *    06    i_rxfifo2                 0              
 *    05    Hlc_conn                  0              
 *    04    i_txfifo0                 0              
 *    03    I_to                      0              
 *    02    I_mode                    0              
 *    01    I_tx                      0              
 *    00    I_rx                      0              
 * </pre>
 */
#define BT_CONTROLLER_INTR_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000017C)
#define BT_CONTROLLER_INTR_REG_OFFSET      0x0000017C
#define BT_CONTROLLER_INTR_REG_INDEX       0x0000005F
#define BT_CONTROLLER_INTR_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_intr_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
}

__INLINE void bt_controller_intr_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_INTR_REG_HBUF_INTR_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_INTR_REG_HBUF_INTR_POS    15
#define BT_CONTROLLER_INTR_REG_PO_INTR_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_INTR_REG_PO_INTR_POS    14
#define BT_CONTROLLER_INTR_REG_HSK_INTR_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_INTR_REG_HSK_INTR_POS    13
#define BT_CONTROLLER_INTR_REG_ACCESS_ERR_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_INTR_REG_ACCESS_ERR_POS    12
#define BT_CONTROLLER_INTR_REG_END_ESCO_BIT    ((uint32_t)0x00000800)
#define BT_CONTROLLER_INTR_REG_END_ESCO_POS    11
#define BT_CONTROLLER_INTR_REG_START_ESCO_BIT    ((uint32_t)0x00000400)
#define BT_CONTROLLER_INTR_REG_START_ESCO_POS    10
#define BT_CONTROLLER_INTR_REG_SNIFF_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_INTR_REG_SNIFF_POS    9
#define BT_CONTROLLER_INTR_REG_BB_TIMER_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_INTR_REG_BB_TIMER_POS    8
#define BT_CONTROLLER_INTR_REG_I_RAD_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_INTR_REG_I_RAD_POS    7
#define BT_CONTROLLER_INTR_REG_I_RXFIFO_2_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_INTR_REG_I_RXFIFO_2_POS    6
#define BT_CONTROLLER_INTR_REG_HLC_CONN_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_INTR_REG_HLC_CONN_POS    5
#define BT_CONTROLLER_INTR_REG_I_TXFIFO_0_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_INTR_REG_I_TXFIFO_0_POS    4
#define BT_CONTROLLER_INTR_REG_I_TO_BIT     ((uint32_t)0x00000008)
#define BT_CONTROLLER_INTR_REG_I_TO_POS     3
#define BT_CONTROLLER_INTR_REG_I_MODE_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_INTR_REG_I_MODE_POS    2
#define BT_CONTROLLER_INTR_REG_I_TX_BIT     ((uint32_t)0x00000002)
#define BT_CONTROLLER_INTR_REG_I_TX_POS     1
#define BT_CONTROLLER_INTR_REG_I_RX_BIT     ((uint32_t)0x00000001)
#define BT_CONTROLLER_INTR_REG_I_RX_POS     0

#define BT_CONTROLLER_INTR_REG_HBUF_INTR_RST    0x0
#define BT_CONTROLLER_INTR_REG_PO_INTR_RST    0x0
#define BT_CONTROLLER_INTR_REG_HSK_INTR_RST    0x0
#define BT_CONTROLLER_INTR_REG_ACCESS_ERR_RST    0x0
#define BT_CONTROLLER_INTR_REG_END_ESCO_RST    0x0
#define BT_CONTROLLER_INTR_REG_START_ESCO_RST    0x0
#define BT_CONTROLLER_INTR_REG_SNIFF_RST    0x0
#define BT_CONTROLLER_INTR_REG_BB_TIMER_RST    0x0
#define BT_CONTROLLER_INTR_REG_I_RAD_RST    0x0
#define BT_CONTROLLER_INTR_REG_I_RXFIFO_2_RST    0x0
#define BT_CONTROLLER_INTR_REG_HLC_CONN_RST    0x0
#define BT_CONTROLLER_INTR_REG_I_TXFIFO_0_RST    0x0
#define BT_CONTROLLER_INTR_REG_I_TO_RST     0x0
#define BT_CONTROLLER_INTR_REG_I_MODE_RST    0x0
#define BT_CONTROLLER_INTR_REG_I_TX_RST     0x0
#define BT_CONTROLLER_INTR_REG_I_RX_RST     0x0

__INLINE void bt_controller_intr_reg_pack(uint8_t hbuf_intr, uint8_t po_intr, uint8_t hsk_intr, uint8_t access_err, uint8_t end_esco, uint8_t start_esco, uint8_t sniff, uint8_t bb_timer, uint8_t i_rad, uint8_t i_rxfifo2, uint8_t hlc_conn, uint8_t i_txfifo0, uint8_t i_to, uint8_t i_mode, uint8_t i_tx, uint8_t i_rx)
{
	ASSERT_ERR((((uint32_t)hbuf_intr << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)po_intr << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)hsk_intr << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)access_err << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)end_esco << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)start_esco << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)sniff << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)bb_timer << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)i_rad << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)i_rxfifo2 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)hlc_conn << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)i_txfifo0 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)i_to << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)i_mode << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)i_tx << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)i_rx << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR,  ((uint32_t)hbuf_intr << 15) |((uint32_t)po_intr << 14) |((uint32_t)hsk_intr << 13) |((uint32_t)access_err << 12) |((uint32_t)end_esco << 11) |((uint32_t)start_esco << 10) |((uint32_t)sniff << 9) |((uint32_t)bb_timer << 8) |((uint32_t)i_rad << 7) |((uint32_t)i_rxfifo2 << 6) |((uint32_t)hlc_conn << 5) |((uint32_t)i_txfifo0 << 4) |((uint32_t)i_to << 3) |((uint32_t)i_mode << 2) |((uint32_t)i_tx << 1) |((uint32_t)i_rx << 0));
}

__INLINE void bt_controller_intr_reg_unpack(uint8_t* hbuf_intr, uint8_t* po_intr, uint8_t* hsk_intr, uint8_t* access_err, uint8_t* end_esco, uint8_t* start_esco, uint8_t* sniff, uint8_t* bb_timer, uint8_t* i_rad, uint8_t* i_rxfifo2, uint8_t* hlc_conn, uint8_t* i_txfifo0, uint8_t* i_to, uint8_t* i_mode, uint8_t* i_tx, uint8_t* i_rx)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);

	*hbuf_intr = (localVal & ((uint32_t)0x00008000)) >>  15;
	*po_intr = (localVal & ((uint32_t)0x00004000)) >>  14;
	*hsk_intr = (localVal & ((uint32_t)0x00002000)) >>  13;
	*access_err = (localVal & ((uint32_t)0x00001000)) >>  12;
	*end_esco = (localVal & ((uint32_t)0x00000800)) >>  11;
	*start_esco = (localVal & ((uint32_t)0x00000400)) >>  10;
	*sniff = (localVal & ((uint32_t)0x00000200)) >>  9;
	*bb_timer = (localVal & ((uint32_t)0x00000100)) >>  8;
	*i_rad = (localVal & ((uint32_t)0x00000080)) >>  7;
	*i_rxfifo2 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*hlc_conn = (localVal & ((uint32_t)0x00000020)) >>  5;
	*i_txfifo0 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*i_to = (localVal & ((uint32_t)0x00000008)) >>  3;
	*i_mode = (localVal & ((uint32_t)0x00000004)) >>  2;
	*i_tx = (localVal & ((uint32_t)0x00000002)) >>  1;
	*i_rx = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_intr_reg_hbuf_intr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_intr_reg_hbuf_intr_setf(uint8_t hbufintr)
{
	ASSERT_ERR((((uint32_t)hbufintr << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)hbufintr <<15));
}
__INLINE uint8_t bt_controller_intr_reg_po_intr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_intr_reg_po_intr_setf(uint8_t pointr)
{
	ASSERT_ERR((((uint32_t)pointr << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)pointr <<14));
}
__INLINE uint8_t bt_controller_intr_reg_hsk_intr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_intr_reg_hsk_intr_setf(uint8_t hskintr)
{
	ASSERT_ERR((((uint32_t)hskintr << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)hskintr <<13));
}
__INLINE uint8_t bt_controller_intr_reg_access_err_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_intr_reg_access_err_setf(uint8_t accesserr)
{
	ASSERT_ERR((((uint32_t)accesserr << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)accesserr <<12));
}
__INLINE uint8_t bt_controller_intr_reg_end_esco_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void bt_controller_intr_reg_end_esco_setf(uint8_t endesco)
{
	ASSERT_ERR((((uint32_t)endesco << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)endesco <<11));
}
__INLINE uint8_t bt_controller_intr_reg_start_esco_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void bt_controller_intr_reg_start_esco_setf(uint8_t startesco)
{
	ASSERT_ERR((((uint32_t)startesco << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)startesco <<10));
}
__INLINE uint8_t bt_controller_intr_reg_sniff_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void bt_controller_intr_reg_sniff_setf(uint8_t sniff)
{
	ASSERT_ERR((((uint32_t)sniff << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)sniff <<9));
}
__INLINE uint8_t bt_controller_intr_reg_bb_timer_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_intr_reg_bb_timer_setf(uint8_t bbtimer)
{
	ASSERT_ERR((((uint32_t)bbtimer << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)bbtimer <<8));
}
__INLINE uint8_t bt_controller_intr_reg_i_rad_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_intr_reg_i_rad_setf(uint8_t irad)
{
	ASSERT_ERR((((uint32_t)irad << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)irad <<7));
}
__INLINE uint8_t bt_controller_intr_reg_i_rxfifo_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_intr_reg_i_rxfifo_2_setf(uint8_t irxfifo2)
{
	ASSERT_ERR((((uint32_t)irxfifo2 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)irxfifo2 <<6));
}
__INLINE uint8_t bt_controller_intr_reg_hlc_conn_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_intr_reg_hlc_conn_setf(uint8_t hlcconn)
{
	ASSERT_ERR((((uint32_t)hlcconn << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)hlcconn <<5));
}
__INLINE uint8_t bt_controller_intr_reg_i_txfifo_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_intr_reg_i_txfifo_0_setf(uint8_t itxfifo0)
{
	ASSERT_ERR((((uint32_t)itxfifo0 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)itxfifo0 <<4));
}
__INLINE uint8_t bt_controller_intr_reg_i_to_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_intr_reg_i_to_setf(uint8_t ito)
{
	ASSERT_ERR((((uint32_t)ito << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)ito <<3));
}
__INLINE uint8_t bt_controller_intr_reg_i_mode_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_intr_reg_i_mode_setf(uint8_t imode)
{
	ASSERT_ERR((((uint32_t)imode << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)imode <<2));
}
__INLINE uint8_t bt_controller_intr_reg_i_tx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_intr_reg_i_tx_setf(uint8_t itx)
{
	ASSERT_ERR((((uint32_t)itx << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)itx <<1));
}
__INLINE uint8_t bt_controller_intr_reg_i_rx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_intr_reg_i_rx_setf(uint8_t irx)
{
	ASSERT_ERR((((uint32_t)irx << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)irx <<0));
}

/**
 * @brief INTR_MASK_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:04 interrupt_mask2_reg_15_4_bits_are_reserved 0x0
 *    03    Sco_rx_instr_en           0              
 *    02    Sco_tx_intr_en            0              
 *    01    sync_i_en                 0              
 *    00    Rx_id_intr_en             1              
 * </pre>
 */
#define BT_CONTROLLER_INTR_MASK_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000180)
#define BT_CONTROLLER_INTR_MASK_2_OFFSET      0x00000180
#define BT_CONTROLLER_INTR_MASK_2_INDEX       0x00000060
#define BT_CONTROLLER_INTR_MASK_2_RESET       0x00000001

__INLINE uint32_t  bt_controller_intr_mask_2_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_INTR_MASK_2_ADDR);
}

__INLINE void bt_controller_intr_mask_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_INTR_MASK_2_INTERRUPT_MASK_2_REG_15_4_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FFF0)
#define BT_CONTROLLER_INTR_MASK_2_INTERRUPT_MASK_2_REG_15_4_BITS_ARE_RESERVED_LSB    4
#define BT_CONTROLLER_INTR_MASK_2_INTERRUPT_MASK_2_REG_15_4_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000000C)
#define BT_CONTROLLER_INTR_MASK_2_SCO_RX_INSTR_EN_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_INTR_MASK_2_SCO_RX_INSTR_EN_POS    3
#define BT_CONTROLLER_INTR_MASK_2_SCO_TX_INTR_EN_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_INTR_MASK_2_SCO_TX_INTR_EN_POS    2
#define BT_CONTROLLER_INTR_MASK_2_SYNC_I_EN_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_INTR_MASK_2_SYNC_I_EN_POS    1
#define BT_CONTROLLER_INTR_MASK_2_RX_ID_INTR_EN_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_INTR_MASK_2_RX_ID_INTR_EN_POS    0

#define BT_CONTROLLER_INTR_MASK_2_INTERRUPT_MASK_2_REG_15_4_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_INTR_MASK_2_SCO_RX_INSTR_EN_RST    0x0
#define BT_CONTROLLER_INTR_MASK_2_SCO_TX_INTR_EN_RST    0x0
#define BT_CONTROLLER_INTR_MASK_2_SYNC_I_EN_RST    0x0
#define BT_CONTROLLER_INTR_MASK_2_RX_ID_INTR_EN_RST    0x1

__INLINE void bt_controller_intr_mask_2_pack(uint16_t interrupt_mask2_reg_15_4_bits_are_reserved, uint8_t sco_rx_instr_en, uint8_t sco_tx_intr_en, uint8_t sync_i_en, uint8_t rx_id_intr_en)
{
	ASSERT_ERR((((uint32_t)interrupt_mask2_reg_15_4_bits_are_reserved << 4) & ~((uint32_t)0x0000FFF0)) == 0);
	ASSERT_ERR((((uint32_t)sco_rx_instr_en << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)sco_tx_intr_en << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)sync_i_en << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)rx_id_intr_en << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_2_ADDR,  ((uint32_t)interrupt_mask2_reg_15_4_bits_are_reserved << 4) |((uint32_t)sco_rx_instr_en << 3) |((uint32_t)sco_tx_intr_en << 2) |((uint32_t)sync_i_en << 1) |((uint32_t)rx_id_intr_en << 0));
}

__INLINE void bt_controller_intr_mask_2_unpack(uint16_t* interrupt_mask2_reg_15_4_bits_are_reserved, uint8_t* sco_rx_instr_en, uint8_t* sco_tx_intr_en, uint8_t* sync_i_en, uint8_t* rx_id_intr_en)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_2_ADDR);

	*interrupt_mask2_reg_15_4_bits_are_reserved = (localVal & ((uint32_t)0x0000FFF0)) >>  4;
	*sco_rx_instr_en = (localVal & ((uint32_t)0x00000008)) >>  3;
	*sco_tx_intr_en = (localVal & ((uint32_t)0x00000004)) >>  2;
	*sync_i_en = (localVal & ((uint32_t)0x00000002)) >>  1;
	*rx_id_intr_en = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_intr_mask_2_interrupt_mask_2_reg_15_4_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFF0)) >> 4);
}
__INLINE void bt_controller_intr_mask_2_sco_rx_instr_en_setf(uint8_t scorxinstren)
{
	ASSERT_ERR((((uint32_t)scorxinstren << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_2_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_2_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)scorxinstren <<3));
}
__INLINE void bt_controller_intr_mask_2_sco_tx_intr_en_setf(uint8_t scotxintren)
{
	ASSERT_ERR((((uint32_t)scotxintren << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_2_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_2_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)scotxintren <<2));
}
__INLINE void bt_controller_intr_mask_2_sync_i_en_setf(uint8_t syncien)
{
	ASSERT_ERR((((uint32_t)syncien << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_2_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_2_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)syncien <<1));
}
__INLINE void bt_controller_intr_mask_2_rx_id_intr_en_setf(uint8_t rxidintren)
{
	ASSERT_ERR((((uint32_t)rxidintren << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_2_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_2_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)rxidintren <<0));
}

/**
 * @brief CORRELATOR_THRESOLD_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 Sync_sequence_threshold   0x93
 *    07    corr_reg_bit_7_bit_is_reserved 0              
 *    06:00 Access_code_threshold     0x44
 * </pre>
 */
#define BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000184)
#define BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_OFFSET      0x00000184
#define BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_INDEX       0x00000061
#define BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_RESET       0x00009344

__INLINE uint32_t  bt_controller_correlator_thresold_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_ADDR);
}

__INLINE void bt_controller_correlator_thresold_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_SYNC_SEQUENCE_THRESHOLD_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_SYNC_SEQUENCE_THRESHOLD_LSB    8
#define BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_SYNC_SEQUENCE_THRESHOLD_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_CORR_REG_BIT_7_BIT_IS_RESERVED_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_CORR_REG_BIT_7_BIT_IS_RESERVED_POS    7
#define BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_ACCESS_CODE_THRESHOLD_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_ACCESS_CODE_THRESHOLD_LSB    0
#define BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_ACCESS_CODE_THRESHOLD_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_SYNC_SEQUENCE_THRESHOLD_RST    0x93
#define BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_CORR_REG_BIT_7_BIT_IS_RESERVED_RST    0x0
#define BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_ACCESS_CODE_THRESHOLD_RST    0x44

__INLINE void bt_controller_correlator_thresold_register_pack(uint8_t sync_sequence_threshold, uint8_t corr_reg_bit_7_bit_is_reserved, uint8_t access_code_threshold)
{
	ASSERT_ERR((((uint32_t)sync_sequence_threshold << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)corr_reg_bit_7_bit_is_reserved << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)access_code_threshold << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_ADDR,  ((uint32_t)sync_sequence_threshold << 8) |((uint32_t)corr_reg_bit_7_bit_is_reserved << 7) |((uint32_t)access_code_threshold << 0));
}

__INLINE void bt_controller_correlator_thresold_register_unpack(uint8_t* sync_sequence_threshold, uint8_t* corr_reg_bit_7_bit_is_reserved, uint8_t* access_code_threshold)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_ADDR);

	*sync_sequence_threshold = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*corr_reg_bit_7_bit_is_reserved = (localVal & ((uint32_t)0x00000080)) >>  7;
	*access_code_threshold = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_correlator_thresold_register_sync_sequence_threshold_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_correlator_thresold_register_sync_sequence_threshold_setf(uint8_t syncsequencethreshold)
{
	ASSERT_ERR((((uint32_t)syncsequencethreshold << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)syncsequencethreshold <<8));
}
__INLINE uint8_t bt_controller_correlator_thresold_register_corr_reg_bit_7_bit_is_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_correlator_thresold_register_access_code_threshold_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void bt_controller_correlator_thresold_register_access_code_threshold_setf(uint8_t accesscodethreshold)
{
	ASSERT_ERR((((uint32_t)accesscodethreshold << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CORRELATOR_THRESOLD_REGISTER_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)accesscodethreshold <<0));
}

/**
 * @brief CH_ADDR register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 RX_Channel                0x0
 *    07:00 TX_Channel                0x0
 * </pre>
 */
#define BT_CONTROLLER_CH_ADDR_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000188)
#define BT_CONTROLLER_CH_ADDR_OFFSET      0x00000188
#define BT_CONTROLLER_CH_ADDR_INDEX       0x00000062
#define BT_CONTROLLER_CH_ADDR_RESET       0x00000000

__INLINE uint32_t  bt_controller_ch_addr_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CH_ADDR_ADDR);
}

__INLINE void bt_controller_ch_addr_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CH_ADDR_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CH_ADDR_RX_CHANNEL_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_CH_ADDR_RX_CHANNEL_LSB    8
#define BT_CONTROLLER_CH_ADDR_RX_CHANNEL_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_CH_ADDR_TX_CHANNEL_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_CH_ADDR_TX_CHANNEL_LSB    0
#define BT_CONTROLLER_CH_ADDR_TX_CHANNEL_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_CH_ADDR_RX_CHANNEL_RST    0x0
#define BT_CONTROLLER_CH_ADDR_TX_CHANNEL_RST    0x0

__INLINE void bt_controller_ch_addr_pack(uint8_t rx_channel, uint8_t tx_channel)
{
	ASSERT_ERR((((uint32_t)rx_channel << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)tx_channel << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_CH_ADDR_ADDR,  ((uint32_t)rx_channel << 8) |((uint32_t)tx_channel << 0));
}

__INLINE void bt_controller_ch_addr_unpack(uint8_t* rx_channel, uint8_t* tx_channel)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CH_ADDR_ADDR);

	*rx_channel = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*tx_channel = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_ch_addr_rx_channel_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CH_ADDR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_ch_addr_rx_channel_setf(uint8_t rxchannel)
{
	ASSERT_ERR((((uint32_t)rxchannel << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_CH_ADDR_ADDR, (REG_PL_RD(BT_CONTROLLER_CH_ADDR_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)rxchannel <<8));
}
__INLINE uint8_t bt_controller_ch_addr_tx_channel_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CH_ADDR_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_ch_addr_tx_channel_setf(uint8_t txchannel)
{
	ASSERT_ERR((((uint32_t)txchannel << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_CH_ADDR_ADDR, (REG_PL_RD(BT_CONTROLLER_CH_ADDR_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)txchannel <<0));
}

/**
 * @brief RF_DELAY_H_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 TX_RF_DELAY_H             0x88
 *    07:00 RX_RF_DELAY_H             0x77
 * </pre>
 */
#define BT_CONTROLLER_RF_DELAY_H_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000018C)
#define BT_CONTROLLER_RF_DELAY_H_REGISTER_OFFSET      0x0000018C
#define BT_CONTROLLER_RF_DELAY_H_REGISTER_INDEX       0x00000063
#define BT_CONTROLLER_RF_DELAY_H_REGISTER_RESET       0x00008877

__INLINE uint32_t  bt_controller_rf_delay_h_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_DELAY_H_REGISTER_ADDR);
}

__INLINE void bt_controller_rf_delay_h_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_DELAY_H_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_DELAY_H_REGISTER_TX_RF_DELAY_H_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_RF_DELAY_H_REGISTER_TX_RF_DELAY_H_LSB    8
#define BT_CONTROLLER_RF_DELAY_H_REGISTER_TX_RF_DELAY_H_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RF_DELAY_H_REGISTER_RX_RF_DELAY_H_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_RF_DELAY_H_REGISTER_RX_RF_DELAY_H_LSB    0
#define BT_CONTROLLER_RF_DELAY_H_REGISTER_RX_RF_DELAY_H_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_RF_DELAY_H_REGISTER_TX_RF_DELAY_H_RST    0x88
#define BT_CONTROLLER_RF_DELAY_H_REGISTER_RX_RF_DELAY_H_RST    0x77

__INLINE void bt_controller_rf_delay_h_register_pack(uint8_t tx_rf_delay_h, uint8_t rx_rf_delay_h)
{
	ASSERT_ERR((((uint32_t)tx_rf_delay_h << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)rx_rf_delay_h << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_DELAY_H_REGISTER_ADDR,  ((uint32_t)tx_rf_delay_h << 8) |((uint32_t)rx_rf_delay_h << 0));
}

__INLINE void bt_controller_rf_delay_h_register_unpack(uint8_t* tx_rf_delay_h, uint8_t* rx_rf_delay_h)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_DELAY_H_REGISTER_ADDR);

	*tx_rf_delay_h = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*rx_rf_delay_h = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_rf_delay_h_register_tx_rf_delay_h_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_DELAY_H_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_rf_delay_h_register_tx_rf_delay_h_setf(uint8_t txrfdelayh)
{
	ASSERT_ERR((((uint32_t)txrfdelayh << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_DELAY_H_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_RF_DELAY_H_REGISTER_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)txrfdelayh <<8));
}
__INLINE uint8_t bt_controller_rf_delay_h_register_rx_rf_delay_h_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_DELAY_H_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_rf_delay_h_register_rx_rf_delay_h_setf(uint8_t rxrfdelayh)
{
	ASSERT_ERR((((uint32_t)rxrfdelayh << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_DELAY_H_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_RF_DELAY_H_REGISTER_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)rxrfdelayh <<0));
}

/**
 * @brief RF_DELAY_F_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 TX_RF_DELAY_F             0x88
 *    07:00 RX_RF_DELAY_F             0x77
 * </pre>
 */
#define BT_CONTROLLER_RF_DELAY_F_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000190)
#define BT_CONTROLLER_RF_DELAY_F_REGISTER_OFFSET      0x00000190
#define BT_CONTROLLER_RF_DELAY_F_REGISTER_INDEX       0x00000064
#define BT_CONTROLLER_RF_DELAY_F_REGISTER_RESET       0x00008877

__INLINE uint32_t  bt_controller_rf_delay_f_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_DELAY_F_REGISTER_ADDR);
}

__INLINE void bt_controller_rf_delay_f_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_DELAY_F_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_DELAY_F_REGISTER_TX_RF_DELAY_F_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_RF_DELAY_F_REGISTER_TX_RF_DELAY_F_LSB    8
#define BT_CONTROLLER_RF_DELAY_F_REGISTER_TX_RF_DELAY_F_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RF_DELAY_F_REGISTER_RX_RF_DELAY_F_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_RF_DELAY_F_REGISTER_RX_RF_DELAY_F_LSB    0
#define BT_CONTROLLER_RF_DELAY_F_REGISTER_RX_RF_DELAY_F_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_RF_DELAY_F_REGISTER_TX_RF_DELAY_F_RST    0x88
#define BT_CONTROLLER_RF_DELAY_F_REGISTER_RX_RF_DELAY_F_RST    0x77

__INLINE void bt_controller_rf_delay_f_register_pack(uint8_t tx_rf_delay_f, uint8_t rx_rf_delay_f)
{
	ASSERT_ERR((((uint32_t)tx_rf_delay_f << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)rx_rf_delay_f << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_DELAY_F_REGISTER_ADDR,  ((uint32_t)tx_rf_delay_f << 8) |((uint32_t)rx_rf_delay_f << 0));
}

__INLINE void bt_controller_rf_delay_f_register_unpack(uint8_t* tx_rf_delay_f, uint8_t* rx_rf_delay_f)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_DELAY_F_REGISTER_ADDR);

	*tx_rf_delay_f = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*rx_rf_delay_f = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_rf_delay_f_register_tx_rf_delay_f_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_DELAY_F_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_rf_delay_f_register_tx_rf_delay_f_setf(uint8_t txrfdelayf)
{
	ASSERT_ERR((((uint32_t)txrfdelayf << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_DELAY_F_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_RF_DELAY_F_REGISTER_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)txrfdelayf <<8));
}
__INLINE uint8_t bt_controller_rf_delay_f_register_rx_rf_delay_f_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_DELAY_F_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_rf_delay_f_register_rx_rf_delay_f_setf(uint8_t rxrfdelayf)
{
	ASSERT_ERR((((uint32_t)rxrfdelayf << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_DELAY_F_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_RF_DELAY_F_REGISTER_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)rxrfdelayf <<0));
}

/**
 * @brief TOGGLE_CLK_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:10 Toggle_clk0_reg_15_downto_9_reserved 0x0
 *    09:00 toggle_clk0               0x0138
 * </pre>
 */
#define BT_CONTROLLER_TOGGLE_CLK_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000194)
#define BT_CONTROLLER_TOGGLE_CLK_0_OFFSET      0x00000194
#define BT_CONTROLLER_TOGGLE_CLK_0_INDEX       0x00000065
#define BT_CONTROLLER_TOGGLE_CLK_0_RESET       0x00000138

__INLINE uint32_t  bt_controller_toggle_clk_0_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TOGGLE_CLK_0_ADDR);
}

__INLINE void bt_controller_toggle_clk_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TOGGLE_CLK_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TOGGLE_CLK_0_TOGGLE_CLK_0_REG_15_DOWNTO_9_RESERVED_MASK    ((uint32_t)0x0000FC00)
#define BT_CONTROLLER_TOGGLE_CLK_0_TOGGLE_CLK_0_REG_15_DOWNTO_9_RESERVED_LSB    10
#define BT_CONTROLLER_TOGGLE_CLK_0_TOGGLE_CLK_0_REG_15_DOWNTO_9_RESERVED_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_TOGGLE_CLK_0_TOGGLE_CLK_0_MASK    ((uint32_t)0x000003FF)
#define BT_CONTROLLER_TOGGLE_CLK_0_TOGGLE_CLK_0_LSB    0
#define BT_CONTROLLER_TOGGLE_CLK_0_TOGGLE_CLK_0_WIDTH    ((uint32_t)0x0000000A)

#define BT_CONTROLLER_TOGGLE_CLK_0_TOGGLE_CLK_0_REG_15_DOWNTO_9_RESERVED_RST    0x0
#define BT_CONTROLLER_TOGGLE_CLK_0_TOGGLE_CLK_0_RST    0x0138

__INLINE void bt_controller_toggle_clk_0_pack(uint8_t toggle_clk0_reg_15_downto_9_reserved, uint16_t toggle_clk0)
{
	ASSERT_ERR((((uint32_t)toggle_clk0_reg_15_downto_9_reserved << 10) & ~((uint32_t)0x0000FC00)) == 0);
	ASSERT_ERR((((uint32_t)toggle_clk0 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TOGGLE_CLK_0_ADDR,  ((uint32_t)toggle_clk0_reg_15_downto_9_reserved << 10) |((uint32_t)toggle_clk0 << 0));
}

__INLINE void bt_controller_toggle_clk_0_unpack(uint8_t* toggle_clk0_reg_15_downto_9_reserved, uint16_t* toggle_clk0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOGGLE_CLK_0_ADDR);

	*toggle_clk0_reg_15_downto_9_reserved = (localVal & ((uint32_t)0x0000FC00)) >>  10;
	*toggle_clk0 = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint8_t bt_controller_toggle_clk_0_toggle_clk_0_reg_15_downto_9_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOGGLE_CLK_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FC00)) >> 10);
}
__INLINE uint16_t bt_controller_toggle_clk_0_toggle_clk_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOGGLE_CLK_0_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void bt_controller_toggle_clk_0_toggle_clk_0_setf(uint16_t toggleclk0)
{
	ASSERT_ERR((((uint32_t)toggleclk0 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TOGGLE_CLK_0_ADDR, (REG_PL_RD(BT_CONTROLLER_TOGGLE_CLK_0_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)toggleclk0 <<0));
}

/**
 * @brief CORR_DIS_F_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:09 corr_dis_f_reg_15_to_9_bit_are_reserved 0x00
 *    08:00 CORR_DISABLE_F            0x12c
 * </pre>
 */
#define BT_CONTROLLER_CORR_DIS_F_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000198)
#define BT_CONTROLLER_CORR_DIS_F_REGISTER_OFFSET      0x00000198
#define BT_CONTROLLER_CORR_DIS_F_REGISTER_INDEX       0x00000066
#define BT_CONTROLLER_CORR_DIS_F_REGISTER_RESET       0x0000012C

__INLINE uint32_t  bt_controller_corr_dis_f_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CORR_DIS_F_REGISTER_ADDR);
}

__INLINE void bt_controller_corr_dis_f_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CORR_DIS_F_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CORR_DIS_F_REGISTER_CORR_DIS_F_REG_15_TO_9_BIT_ARE_RESERVED_MASK    ((uint32_t)0x0000FE00)
#define BT_CONTROLLER_CORR_DIS_F_REGISTER_CORR_DIS_F_REG_15_TO_9_BIT_ARE_RESERVED_LSB    9
#define BT_CONTROLLER_CORR_DIS_F_REGISTER_CORR_DIS_F_REG_15_TO_9_BIT_ARE_RESERVED_WIDTH    ((uint32_t)0x00000007)
#define BT_CONTROLLER_CORR_DIS_F_REGISTER_CORR_DISABLE_F_MASK    ((uint32_t)0x000001FF)
#define BT_CONTROLLER_CORR_DIS_F_REGISTER_CORR_DISABLE_F_LSB    0
#define BT_CONTROLLER_CORR_DIS_F_REGISTER_CORR_DISABLE_F_WIDTH    ((uint32_t)0x00000009)

#define BT_CONTROLLER_CORR_DIS_F_REGISTER_CORR_DIS_F_REG_15_TO_9_BIT_ARE_RESERVED_RST    0x00
#define BT_CONTROLLER_CORR_DIS_F_REGISTER_CORR_DISABLE_F_RST    0x12c

__INLINE void bt_controller_corr_dis_f_register_pack(uint8_t corr_dis_f_reg_15_to_9_bit_are_reserved, uint16_t corr_disable_f)
{
	ASSERT_ERR((((uint32_t)corr_dis_f_reg_15_to_9_bit_are_reserved << 9) & ~((uint32_t)0x0000FE00)) == 0);
	ASSERT_ERR((((uint32_t)corr_disable_f << 0) & ~((uint32_t)0x000001FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_CORR_DIS_F_REGISTER_ADDR,  ((uint32_t)corr_dis_f_reg_15_to_9_bit_are_reserved << 9) |((uint32_t)corr_disable_f << 0));
}

__INLINE void bt_controller_corr_dis_f_register_unpack(uint8_t* corr_dis_f_reg_15_to_9_bit_are_reserved, uint16_t* corr_disable_f)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORR_DIS_F_REGISTER_ADDR);

	*corr_dis_f_reg_15_to_9_bit_are_reserved = (localVal & ((uint32_t)0x0000FE00)) >>  9;
	*corr_disable_f = (localVal & ((uint32_t)0x000001FF)) >>  0;
}

__INLINE uint8_t bt_controller_corr_dis_f_register_corr_dis_f_reg_15_to_9_bit_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORR_DIS_F_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FE00)) >> 9);
}
__INLINE uint16_t bt_controller_corr_dis_f_register_corr_disable_f_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORR_DIS_F_REGISTER_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000001FF)) >> 0);
}
__INLINE void bt_controller_corr_dis_f_register_corr_disable_f_setf(uint16_t corrdisablef)
{
	ASSERT_ERR((((uint32_t)corrdisablef << 0) & ~((uint32_t)0x000001FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_CORR_DIS_F_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CORR_DIS_F_REGISTER_ADDR) & ~((uint32_t)0x000001FF)) | ((uint32_t)corrdisablef <<0));
}

/**
 * @brief CORR_DIS_H_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:09 corr_dis_h_reg_15_to_9_bit_are_reserved 0x00
 *    08:00 CORR_DISABLE_H            0x12c
 * </pre>
 */
#define BT_CONTROLLER_CORR_DIS_H_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000019C)
#define BT_CONTROLLER_CORR_DIS_H_REGISTER_OFFSET      0x0000019C
#define BT_CONTROLLER_CORR_DIS_H_REGISTER_INDEX       0x00000067
#define BT_CONTROLLER_CORR_DIS_H_REGISTER_RESET       0x0000012C

__INLINE uint32_t  bt_controller_corr_dis_h_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CORR_DIS_H_REGISTER_ADDR);
}

__INLINE void bt_controller_corr_dis_h_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CORR_DIS_H_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CORR_DIS_H_REGISTER_CORR_DIS_H_REG_15_TO_9_BIT_ARE_RESERVED_MASK    ((uint32_t)0x0000FE00)
#define BT_CONTROLLER_CORR_DIS_H_REGISTER_CORR_DIS_H_REG_15_TO_9_BIT_ARE_RESERVED_LSB    9
#define BT_CONTROLLER_CORR_DIS_H_REGISTER_CORR_DIS_H_REG_15_TO_9_BIT_ARE_RESERVED_WIDTH    ((uint32_t)0x00000007)
#define BT_CONTROLLER_CORR_DIS_H_REGISTER_CORR_DISABLE_H_MASK    ((uint32_t)0x000001FF)
#define BT_CONTROLLER_CORR_DIS_H_REGISTER_CORR_DISABLE_H_LSB    0
#define BT_CONTROLLER_CORR_DIS_H_REGISTER_CORR_DISABLE_H_WIDTH    ((uint32_t)0x00000009)

#define BT_CONTROLLER_CORR_DIS_H_REGISTER_CORR_DIS_H_REG_15_TO_9_BIT_ARE_RESERVED_RST    0x00
#define BT_CONTROLLER_CORR_DIS_H_REGISTER_CORR_DISABLE_H_RST    0x12c

__INLINE void bt_controller_corr_dis_h_register_pack(uint8_t corr_dis_h_reg_15_to_9_bit_are_reserved, uint16_t corr_disable_h)
{
	ASSERT_ERR((((uint32_t)corr_dis_h_reg_15_to_9_bit_are_reserved << 9) & ~((uint32_t)0x0000FE00)) == 0);
	ASSERT_ERR((((uint32_t)corr_disable_h << 0) & ~((uint32_t)0x000001FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_CORR_DIS_H_REGISTER_ADDR,  ((uint32_t)corr_dis_h_reg_15_to_9_bit_are_reserved << 9) |((uint32_t)corr_disable_h << 0));
}

__INLINE void bt_controller_corr_dis_h_register_unpack(uint8_t* corr_dis_h_reg_15_to_9_bit_are_reserved, uint16_t* corr_disable_h)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORR_DIS_H_REGISTER_ADDR);

	*corr_dis_h_reg_15_to_9_bit_are_reserved = (localVal & ((uint32_t)0x0000FE00)) >>  9;
	*corr_disable_h = (localVal & ((uint32_t)0x000001FF)) >>  0;
}

__INLINE uint8_t bt_controller_corr_dis_h_register_corr_dis_h_reg_15_to_9_bit_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORR_DIS_H_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FE00)) >> 9);
}
__INLINE uint16_t bt_controller_corr_dis_h_register_corr_disable_h_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORR_DIS_H_REGISTER_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000001FF)) >> 0);
}
__INLINE void bt_controller_corr_dis_h_register_corr_disable_h_setf(uint16_t corrdisableh)
{
	ASSERT_ERR((((uint32_t)corrdisableh << 0) & ~((uint32_t)0x000001FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_CORR_DIS_H_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CORR_DIS_H_REGISTER_ADDR) & ~((uint32_t)0x000001FF)) | ((uint32_t)corrdisableh <<0));
}

/**
 * @brief TRIG_1_STID_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:09 trig_1stid_reg_15_to_9_bits_are_reserved_ 0x0
 *    08:00 TRIG_SEND_ID_FHS          0x1dc
 * </pre>
 */
#define BT_CONTROLLER_TRIG_1_STID_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001A0)
#define BT_CONTROLLER_TRIG_1_STID_REGISTER_OFFSET      0x000001A0
#define BT_CONTROLLER_TRIG_1_STID_REGISTER_INDEX       0x00000068
#define BT_CONTROLLER_TRIG_1_STID_REGISTER_RESET       0x000001DC

__INLINE uint32_t  bt_controller_trig_1_stid_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TRIG_1_STID_REGISTER_ADDR);
}

__INLINE void bt_controller_trig_1_stid_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TRIG_1_STID_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TRIG_1_STID_REGISTER_TRIG_1_STID_REG_15_TO_9_BITS_ARE_RESERVED__MASK    ((uint32_t)0x0000FE00)
#define BT_CONTROLLER_TRIG_1_STID_REGISTER_TRIG_1_STID_REG_15_TO_9_BITS_ARE_RESERVED__LSB    9
#define BT_CONTROLLER_TRIG_1_STID_REGISTER_TRIG_1_STID_REG_15_TO_9_BITS_ARE_RESERVED__WIDTH    ((uint32_t)0x00000007)
#define BT_CONTROLLER_TRIG_1_STID_REGISTER_TRIG_SEND_ID_FHS_MASK    ((uint32_t)0x000001FF)
#define BT_CONTROLLER_TRIG_1_STID_REGISTER_TRIG_SEND_ID_FHS_LSB    0
#define BT_CONTROLLER_TRIG_1_STID_REGISTER_TRIG_SEND_ID_FHS_WIDTH    ((uint32_t)0x00000009)

#define BT_CONTROLLER_TRIG_1_STID_REGISTER_TRIG_1_STID_REG_15_TO_9_BITS_ARE_RESERVED__RST    0x0
#define BT_CONTROLLER_TRIG_1_STID_REGISTER_TRIG_SEND_ID_FHS_RST    0x1dc

__INLINE void bt_controller_trig_1_stid_register_pack(uint8_t trig_1stid_reg_15_to_9_bits_are_reserved_, uint16_t trig_send_id_fhs)
{
	ASSERT_ERR((((uint32_t)trig_1stid_reg_15_to_9_bits_are_reserved_ << 9) & ~((uint32_t)0x0000FE00)) == 0);
	ASSERT_ERR((((uint32_t)trig_send_id_fhs << 0) & ~((uint32_t)0x000001FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TRIG_1_STID_REGISTER_ADDR,  ((uint32_t)trig_1stid_reg_15_to_9_bits_are_reserved_ << 9) |((uint32_t)trig_send_id_fhs << 0));
}

__INLINE void bt_controller_trig_1_stid_register_unpack(uint8_t* trig_1stid_reg_15_to_9_bits_are_reserved_, uint16_t* trig_send_id_fhs)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRIG_1_STID_REGISTER_ADDR);

	*trig_1stid_reg_15_to_9_bits_are_reserved_ = (localVal & ((uint32_t)0x0000FE00)) >>  9;
	*trig_send_id_fhs = (localVal & ((uint32_t)0x000001FF)) >>  0;
}

__INLINE uint8_t bt_controller_trig_1_stid_register_trig_1_stid_reg_15_to_9_bits_are_reserved__getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRIG_1_STID_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FE00)) >> 9);
}
__INLINE uint16_t bt_controller_trig_1_stid_register_trig_send_id_fhs_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRIG_1_STID_REGISTER_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000001FF)) >> 0);
}
__INLINE void bt_controller_trig_1_stid_register_trig_send_id_fhs_setf(uint16_t trigsendidfhs)
{
	ASSERT_ERR((((uint32_t)trigsendidfhs << 0) & ~((uint32_t)0x000001FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TRIG_1_STID_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_TRIG_1_STID_REGISTER_ADDR) & ~((uint32_t)0x000001FF)) | ((uint32_t)trigsendidfhs <<0));
}

/**
 * @brief TRIG_RECFHS_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:09 trig_recfhs_reg_15_to_9_bits_are_reserved 0x0
 *    08:00 TRIG_REC_FHS              0x19b
 * </pre>
 */
#define BT_CONTROLLER_TRIG_RECFHS_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001A4)
#define BT_CONTROLLER_TRIG_RECFHS_REGISTER_OFFSET      0x000001A4
#define BT_CONTROLLER_TRIG_RECFHS_REGISTER_INDEX       0x00000069
#define BT_CONTROLLER_TRIG_RECFHS_REGISTER_RESET       0x0000019B

__INLINE uint32_t  bt_controller_trig_recfhs_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TRIG_RECFHS_REGISTER_ADDR);
}

__INLINE void bt_controller_trig_recfhs_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TRIG_RECFHS_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TRIG_RECFHS_REGISTER_TRIG_RECFHS_REG_15_TO_9_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FE00)
#define BT_CONTROLLER_TRIG_RECFHS_REGISTER_TRIG_RECFHS_REG_15_TO_9_BITS_ARE_RESERVED_LSB    9
#define BT_CONTROLLER_TRIG_RECFHS_REGISTER_TRIG_RECFHS_REG_15_TO_9_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000007)
#define BT_CONTROLLER_TRIG_RECFHS_REGISTER_TRIG_REC_FHS_MASK    ((uint32_t)0x000001FF)
#define BT_CONTROLLER_TRIG_RECFHS_REGISTER_TRIG_REC_FHS_LSB    0
#define BT_CONTROLLER_TRIG_RECFHS_REGISTER_TRIG_REC_FHS_WIDTH    ((uint32_t)0x00000009)

#define BT_CONTROLLER_TRIG_RECFHS_REGISTER_TRIG_RECFHS_REG_15_TO_9_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TRIG_RECFHS_REGISTER_TRIG_REC_FHS_RST    0x19b

__INLINE void bt_controller_trig_recfhs_register_pack(uint8_t trig_recfhs_reg_15_to_9_bits_are_reserved, uint16_t trig_rec_fhs)
{
	ASSERT_ERR((((uint32_t)trig_recfhs_reg_15_to_9_bits_are_reserved << 9) & ~((uint32_t)0x0000FE00)) == 0);
	ASSERT_ERR((((uint32_t)trig_rec_fhs << 0) & ~((uint32_t)0x000001FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TRIG_RECFHS_REGISTER_ADDR,  ((uint32_t)trig_recfhs_reg_15_to_9_bits_are_reserved << 9) |((uint32_t)trig_rec_fhs << 0));
}

__INLINE void bt_controller_trig_recfhs_register_unpack(uint8_t* trig_recfhs_reg_15_to_9_bits_are_reserved, uint16_t* trig_rec_fhs)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRIG_RECFHS_REGISTER_ADDR);

	*trig_recfhs_reg_15_to_9_bits_are_reserved = (localVal & ((uint32_t)0x0000FE00)) >>  9;
	*trig_rec_fhs = (localVal & ((uint32_t)0x000001FF)) >>  0;
}

__INLINE uint8_t bt_controller_trig_recfhs_register_trig_recfhs_reg_15_to_9_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRIG_RECFHS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FE00)) >> 9);
}
__INLINE uint16_t bt_controller_trig_recfhs_register_trig_rec_fhs_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRIG_RECFHS_REGISTER_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000001FF)) >> 0);
}
__INLINE void bt_controller_trig_recfhs_register_trig_rec_fhs_setf(uint16_t trigrecfhs)
{
	ASSERT_ERR((((uint32_t)trigrecfhs << 0) & ~((uint32_t)0x000001FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TRIG_RECFHS_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_TRIG_RECFHS_REGISTER_ADDR) & ~((uint32_t)0x000001FF)) | ((uint32_t)trigrecfhs <<0));
}

/**
 * @brief TRIG_2_NDID_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    trig_2ndid_reg_15_bit_is_reserved 0              
 *    14:09 LOAD_VALUE2               0x0E
 *    08:00 LOAD_VALUE1               0x19b
 * </pre>
 */
#define BT_CONTROLLER_TRIG_2_NDID_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001A8)
#define BT_CONTROLLER_TRIG_2_NDID_REGISTER_OFFSET      0x000001A8
#define BT_CONTROLLER_TRIG_2_NDID_REGISTER_INDEX       0x0000006A
#define BT_CONTROLLER_TRIG_2_NDID_REGISTER_RESET       0x00001D9B

__INLINE uint32_t  bt_controller_trig_2_ndid_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TRIG_2_NDID_REGISTER_ADDR);
}

__INLINE void bt_controller_trig_2_ndid_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TRIG_2_NDID_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TRIG_2_NDID_REGISTER_TRIG_2_NDID_REG_15_BIT_IS_RESERVED_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_TRIG_2_NDID_REGISTER_TRIG_2_NDID_REG_15_BIT_IS_RESERVED_POS    15
#define BT_CONTROLLER_TRIG_2_NDID_REGISTER_LOAD_VALUE_2_MASK    ((uint32_t)0x00007E00)
#define BT_CONTROLLER_TRIG_2_NDID_REGISTER_LOAD_VALUE_2_LSB    9
#define BT_CONTROLLER_TRIG_2_NDID_REGISTER_LOAD_VALUE_2_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_TRIG_2_NDID_REGISTER_LOAD_VALUE_1_MASK    ((uint32_t)0x000001FF)
#define BT_CONTROLLER_TRIG_2_NDID_REGISTER_LOAD_VALUE_1_LSB    0
#define BT_CONTROLLER_TRIG_2_NDID_REGISTER_LOAD_VALUE_1_WIDTH    ((uint32_t)0x00000009)

#define BT_CONTROLLER_TRIG_2_NDID_REGISTER_TRIG_2_NDID_REG_15_BIT_IS_RESERVED_RST    0x0
#define BT_CONTROLLER_TRIG_2_NDID_REGISTER_LOAD_VALUE_2_RST    0x0E
#define BT_CONTROLLER_TRIG_2_NDID_REGISTER_LOAD_VALUE_1_RST    0x19b

__INLINE void bt_controller_trig_2_ndid_register_pack(uint8_t trig_2ndid_reg_15_bit_is_reserved, uint8_t load_value2, uint16_t load_value1)
{
	ASSERT_ERR((((uint32_t)trig_2ndid_reg_15_bit_is_reserved << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)load_value2 << 9) & ~((uint32_t)0x00007E00)) == 0);
	ASSERT_ERR((((uint32_t)load_value1 << 0) & ~((uint32_t)0x000001FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TRIG_2_NDID_REGISTER_ADDR,  ((uint32_t)trig_2ndid_reg_15_bit_is_reserved << 15) |((uint32_t)load_value2 << 9) |((uint32_t)load_value1 << 0));
}

__INLINE void bt_controller_trig_2_ndid_register_unpack(uint8_t* trig_2ndid_reg_15_bit_is_reserved, uint8_t* load_value2, uint16_t* load_value1)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRIG_2_NDID_REGISTER_ADDR);

	*trig_2ndid_reg_15_bit_is_reserved = (localVal & ((uint32_t)0x00008000)) >>  15;
	*load_value2 = (localVal & ((uint32_t)0x00007E00)) >>  9;
	*load_value1 = (localVal & ((uint32_t)0x000001FF)) >>  0;
}

__INLINE uint8_t bt_controller_trig_2_ndid_register_trig_2_ndid_reg_15_bit_is_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRIG_2_NDID_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t bt_controller_trig_2_ndid_register_load_value_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRIG_2_NDID_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00007E00)) >> 9);
}
__INLINE void bt_controller_trig_2_ndid_register_load_value_2_setf(uint8_t loadvalue2)
{
	ASSERT_ERR((((uint32_t)loadvalue2 << 9) & ~((uint32_t)0x00007E00)) == 0);
	REG_PL_WR(BT_CONTROLLER_TRIG_2_NDID_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_TRIG_2_NDID_REGISTER_ADDR) & ~((uint32_t)0x00007E00)) | ((uint32_t)loadvalue2 <<9));
}
__INLINE uint16_t bt_controller_trig_2_ndid_register_load_value_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TRIG_2_NDID_REGISTER_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000001FF)) >> 0);
}
__INLINE void bt_controller_trig_2_ndid_register_load_value_1_setf(uint16_t loadvalue1)
{
	ASSERT_ERR((((uint32_t)loadvalue1 << 0) & ~((uint32_t)0x000001FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TRIG_2_NDID_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_TRIG_2_NDID_REGISTER_ADDR) & ~((uint32_t)0x000001FF)) | ((uint32_t)loadvalue1 <<0));
}

/**
 * @brief RADIO_CNTRL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:11 radio_cntrl_reg_15_11_bits_are_reserved 0x0
 *    10    rssi_rd_sts               0              
 *    09    si_done_host_sts          0              
 *    08    Rif_pos_over              0              
 *    07:00 host_data_out_7_downto_0  0x0
 * </pre>
 */
#define BT_CONTROLLER_RADIO_CNTRL_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001AC)
#define BT_CONTROLLER_RADIO_CNTRL_OFFSET      0x000001AC
#define BT_CONTROLLER_RADIO_CNTRL_INDEX       0x0000006B
#define BT_CONTROLLER_RADIO_CNTRL_RESET       0x00000000

__INLINE uint32_t  bt_controller_radio_cntrl_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RADIO_CNTRL_ADDR);
}

// field definitions
#define BT_CONTROLLER_RADIO_CNTRL_RADIO_CNTRL_REG_15_11_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000F800)
#define BT_CONTROLLER_RADIO_CNTRL_RADIO_CNTRL_REG_15_11_BITS_ARE_RESERVED_LSB    11
#define BT_CONTROLLER_RADIO_CNTRL_RADIO_CNTRL_REG_15_11_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_RADIO_CNTRL_RSSI_RD_STS_BIT    ((uint32_t)0x00000400)
#define BT_CONTROLLER_RADIO_CNTRL_RSSI_RD_STS_POS    10
#define BT_CONTROLLER_RADIO_CNTRL_SI_DONE_HOST_STS_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_RADIO_CNTRL_SI_DONE_HOST_STS_POS    9
#define BT_CONTROLLER_RADIO_CNTRL_RIF_POS_OVER_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_RADIO_CNTRL_RIF_POS_OVER_POS    8
#define BT_CONTROLLER_RADIO_CNTRL_HOST_DATA_OUT_7_DOWNTO_0_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_RADIO_CNTRL_HOST_DATA_OUT_7_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RADIO_CNTRL_HOST_DATA_OUT_7_DOWNTO_0_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_RADIO_CNTRL_RADIO_CNTRL_REG_15_11_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_RADIO_CNTRL_RSSI_RD_STS_RST    0x0
#define BT_CONTROLLER_RADIO_CNTRL_SI_DONE_HOST_STS_RST    0x0
#define BT_CONTROLLER_RADIO_CNTRL_RIF_POS_OVER_RST    0x0
#define BT_CONTROLLER_RADIO_CNTRL_HOST_DATA_OUT_7_DOWNTO_0_RST    0x0

__INLINE void bt_controller_radio_cntrl_unpack(uint8_t* radio_cntrl_reg_15_11_bits_are_reserved, uint8_t* rssi_rd_sts, uint8_t* si_done_host_sts, uint8_t* rif_pos_over, uint8_t* host_data_out_7_downto_0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CNTRL_ADDR);

	*radio_cntrl_reg_15_11_bits_are_reserved = (localVal & ((uint32_t)0x0000F800)) >>  11;
	*rssi_rd_sts = (localVal & ((uint32_t)0x00000400)) >>  10;
	*si_done_host_sts = (localVal & ((uint32_t)0x00000200)) >>  9;
	*rif_pos_over = (localVal & ((uint32_t)0x00000100)) >>  8;
	*host_data_out_7_downto_0 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_radio_cntrl_radio_cntrl_reg_15_11_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F800)) >> 11);
}
__INLINE uint8_t bt_controller_radio_cntrl_rssi_rd_sts_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t bt_controller_radio_cntrl_si_done_host_sts_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t bt_controller_radio_cntrl_rif_pos_over_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t bt_controller_radio_cntrl_host_data_out_7_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}

/**
 * @brief RADIO_SEL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rssi_data                 0x0
 * </pre>
 */
#define BT_CONTROLLER_RADIO_SEL_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001B0)
#define BT_CONTROLLER_RADIO_SEL_OFFSET      0x000001B0
#define BT_CONTROLLER_RADIO_SEL_INDEX       0x0000006C
#define BT_CONTROLLER_RADIO_SEL_RESET       0x00000000

__INLINE uint32_t  bt_controller_radio_sel_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RADIO_SEL_ADDR);
}

// field definitions
#define BT_CONTROLLER_RADIO_SEL_RSSI_DATA_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RADIO_SEL_RSSI_DATA_LSB    0
#define BT_CONTROLLER_RADIO_SEL_RSSI_DATA_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RADIO_SEL_RSSI_DATA_RST    0x0

__INLINE uint16_t bt_controller_radio_sel_rssi_data_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_SEL_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief RADIO_DATA register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 host_data_15_downto_0_bits 0x0
 * </pre>
 */
#define BT_CONTROLLER_RADIO_DATA_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001B4)
#define BT_CONTROLLER_RADIO_DATA_OFFSET      0x000001B4
#define BT_CONTROLLER_RADIO_DATA_INDEX       0x0000006D
#define BT_CONTROLLER_RADIO_DATA_RESET       0x00000000

__INLINE uint32_t  bt_controller_radio_data_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RADIO_DATA_ADDR);
}

__INLINE void bt_controller_radio_data_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RADIO_DATA_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RADIO_DATA_HOST_DATA_15_DOWNTO_0_BITS_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RADIO_DATA_HOST_DATA_15_DOWNTO_0_BITS_LSB    0
#define BT_CONTROLLER_RADIO_DATA_HOST_DATA_15_DOWNTO_0_BITS_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RADIO_DATA_HOST_DATA_15_DOWNTO_0_BITS_RST    0x0

__INLINE uint16_t bt_controller_radio_data_host_data_15_downto_0_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_DATA_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_radio_data_host_data_15_downto_0_bits_setf(uint16_t hostdata15downto0bits)
{
	ASSERT_ERR((((uint32_t)hostdata15downto0bits << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_DATA_ADDR, (uint32_t)hostdata15downto0bits << 0);
}

/**
 * @brief RADIO_CNFG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Radio_cnfg_15_downto_0_bits 0x0
 * </pre>
 */
#define BT_CONTROLLER_RADIO_CNFG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001B8)
#define BT_CONTROLLER_RADIO_CNFG_OFFSET      0x000001B8
#define BT_CONTROLLER_RADIO_CNFG_INDEX       0x0000006E
#define BT_CONTROLLER_RADIO_CNFG_RESET       0x00000000

__INLINE uint32_t  bt_controller_radio_cnfg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RADIO_CNFG_ADDR);
}

__INLINE void bt_controller_radio_cnfg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RADIO_CNFG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RADIO_CNFG_RADIO_CNFG_15_DOWNTO_0_BITS_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RADIO_CNFG_RADIO_CNFG_15_DOWNTO_0_BITS_LSB    0
#define BT_CONTROLLER_RADIO_CNFG_RADIO_CNFG_15_DOWNTO_0_BITS_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RADIO_CNFG_RADIO_CNFG_15_DOWNTO_0_BITS_RST    0x0

__INLINE uint16_t bt_controller_radio_cnfg_radio_cnfg_15_downto_0_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CNFG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_radio_cnfg_radio_cnfg_15_downto_0_bits_setf(uint16_t radiocnfg15downto0bits)
{
	ASSERT_ERR((((uint32_t)radiocnfg15downto0bits << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CNFG_ADDR, (uint32_t)radiocnfg15downto0bits << 0);
}

/**
 * @brief HBUF_INTSTS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:04 hbuf_intsts_reg_15_4_bits_are_reserved 0x0
 *    03    pcmtx_thr_detect          0              
 *    02    pcmrx_thr_detect          0              
 *    01    Bbrx_thr_detect           0              
 *    00    Bbtx_thr_detect           0              
 * </pre>
 */
#define BT_CONTROLLER_HBUF_INTSTS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001BC)
#define BT_CONTROLLER_HBUF_INTSTS_REG_OFFSET      0x000001BC
#define BT_CONTROLLER_HBUF_INTSTS_REG_INDEX       0x0000006F
#define BT_CONTROLLER_HBUF_INTSTS_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_hbuf_intsts_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_HBUF_INTSTS_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_HBUF_INTSTS_REG_HBUF_INTSTS_REG_15_4_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FFF0)
#define BT_CONTROLLER_HBUF_INTSTS_REG_HBUF_INTSTS_REG_15_4_BITS_ARE_RESERVED_LSB    4
#define BT_CONTROLLER_HBUF_INTSTS_REG_HBUF_INTSTS_REG_15_4_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000000C)
#define BT_CONTROLLER_HBUF_INTSTS_REG_PCMTX_THR_DETECT_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_HBUF_INTSTS_REG_PCMTX_THR_DETECT_POS    3
#define BT_CONTROLLER_HBUF_INTSTS_REG_PCMRX_THR_DETECT_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_HBUF_INTSTS_REG_PCMRX_THR_DETECT_POS    2
#define BT_CONTROLLER_HBUF_INTSTS_REG_BBRX_THR_DETECT_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_HBUF_INTSTS_REG_BBRX_THR_DETECT_POS    1
#define BT_CONTROLLER_HBUF_INTSTS_REG_BBTX_THR_DETECT_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_HBUF_INTSTS_REG_BBTX_THR_DETECT_POS    0

#define BT_CONTROLLER_HBUF_INTSTS_REG_HBUF_INTSTS_REG_15_4_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_HBUF_INTSTS_REG_PCMTX_THR_DETECT_RST    0x0
#define BT_CONTROLLER_HBUF_INTSTS_REG_PCMRX_THR_DETECT_RST    0x0
#define BT_CONTROLLER_HBUF_INTSTS_REG_BBRX_THR_DETECT_RST    0x0
#define BT_CONTROLLER_HBUF_INTSTS_REG_BBTX_THR_DETECT_RST    0x0

__INLINE void bt_controller_hbuf_intsts_reg_unpack(uint16_t* hbuf_intsts_reg_15_4_bits_are_reserved, uint8_t* pcmtx_thr_detect, uint8_t* pcmrx_thr_detect, uint8_t* bbrx_thr_detect, uint8_t* bbtx_thr_detect)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_HBUF_INTSTS_REG_ADDR);

	*hbuf_intsts_reg_15_4_bits_are_reserved = (localVal & ((uint32_t)0x0000FFF0)) >>  4;
	*pcmtx_thr_detect = (localVal & ((uint32_t)0x00000008)) >>  3;
	*pcmrx_thr_detect = (localVal & ((uint32_t)0x00000004)) >>  2;
	*bbrx_thr_detect = (localVal & ((uint32_t)0x00000002)) >>  1;
	*bbtx_thr_detect = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_hbuf_intsts_reg_hbuf_intsts_reg_15_4_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_HBUF_INTSTS_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFF0)) >> 4);
}
__INLINE uint8_t bt_controller_hbuf_intsts_reg_pcmtx_thr_detect_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_HBUF_INTSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t bt_controller_hbuf_intsts_reg_pcmrx_thr_detect_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_HBUF_INTSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t bt_controller_hbuf_intsts_reg_bbrx_thr_detect_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_HBUF_INTSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t bt_controller_hbuf_intsts_reg_bbtx_thr_detect_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_HBUF_INTSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief LOOPBACK register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    long_nshort               0              
 *    14    ti_loopback               1              
 *    13    down_loopback             0              
 *    12    up_loopback               0              
 *    11    cvsd_en                   0              
 *    10    framesync_sel             0              
 *    09    code_conv_sel             0              
 *    08:06 code_select_tx            0x0
 *    05:03 code_select_rx            0x0
 *    02    Counter_data              0              
 *    01    Filter_loopback           0              
 *    00    Fifo_loopback             0              
 * </pre>
 */
#define BT_CONTROLLER_LOOPBACK_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001C0)
#define BT_CONTROLLER_LOOPBACK_OFFSET      0x000001C0
#define BT_CONTROLLER_LOOPBACK_INDEX       0x00000070
#define BT_CONTROLLER_LOOPBACK_RESET       0x00004000

__INLINE uint32_t  bt_controller_loopback_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR);
}

__INLINE void bt_controller_loopback_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LOOPBACK_LONG_NSHORT_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_LOOPBACK_LONG_NSHORT_POS    15
#define BT_CONTROLLER_LOOPBACK_TI_LOOPBACK_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_LOOPBACK_TI_LOOPBACK_POS    14
#define BT_CONTROLLER_LOOPBACK_DOWN_LOOPBACK_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_LOOPBACK_DOWN_LOOPBACK_POS    13
#define BT_CONTROLLER_LOOPBACK_UP_LOOPBACK_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_LOOPBACK_UP_LOOPBACK_POS    12
#define BT_CONTROLLER_LOOPBACK_CVSD_EN_BIT    ((uint32_t)0x00000800)
#define BT_CONTROLLER_LOOPBACK_CVSD_EN_POS    11
#define BT_CONTROLLER_LOOPBACK_FRAMESYNC_SEL_BIT    ((uint32_t)0x00000400)
#define BT_CONTROLLER_LOOPBACK_FRAMESYNC_SEL_POS    10
#define BT_CONTROLLER_LOOPBACK_CODE_CONV_SEL_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_LOOPBACK_CODE_CONV_SEL_POS    9
#define BT_CONTROLLER_LOOPBACK_CODE_SELECT_TX_MASK    ((uint32_t)0x000001C0)
#define BT_CONTROLLER_LOOPBACK_CODE_SELECT_TX_LSB    6
#define BT_CONTROLLER_LOOPBACK_CODE_SELECT_TX_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_LOOPBACK_CODE_SELECT_RX_MASK    ((uint32_t)0x00000038)
#define BT_CONTROLLER_LOOPBACK_CODE_SELECT_RX_LSB    3
#define BT_CONTROLLER_LOOPBACK_CODE_SELECT_RX_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_LOOPBACK_COUNTER_DATA_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LOOPBACK_COUNTER_DATA_POS    2
#define BT_CONTROLLER_LOOPBACK_FILTER_LOOPBACK_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LOOPBACK_FILTER_LOOPBACK_POS    1
#define BT_CONTROLLER_LOOPBACK_FIFO_LOOPBACK_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_LOOPBACK_FIFO_LOOPBACK_POS    0

#define BT_CONTROLLER_LOOPBACK_LONG_NSHORT_RST    0x0
#define BT_CONTROLLER_LOOPBACK_TI_LOOPBACK_RST    0x1
#define BT_CONTROLLER_LOOPBACK_DOWN_LOOPBACK_RST    0x0
#define BT_CONTROLLER_LOOPBACK_UP_LOOPBACK_RST    0x0
#define BT_CONTROLLER_LOOPBACK_CVSD_EN_RST    0x0
#define BT_CONTROLLER_LOOPBACK_FRAMESYNC_SEL_RST    0x0
#define BT_CONTROLLER_LOOPBACK_CODE_CONV_SEL_RST    0x0
#define BT_CONTROLLER_LOOPBACK_CODE_SELECT_TX_RST    0x0
#define BT_CONTROLLER_LOOPBACK_CODE_SELECT_RX_RST    0x0
#define BT_CONTROLLER_LOOPBACK_COUNTER_DATA_RST    0x0
#define BT_CONTROLLER_LOOPBACK_FILTER_LOOPBACK_RST    0x0
#define BT_CONTROLLER_LOOPBACK_FIFO_LOOPBACK_RST    0x0

__INLINE void bt_controller_loopback_pack(uint8_t long_nshort, uint8_t ti_loopback, uint8_t down_loopback, uint8_t up_loopback, uint8_t cvsd_en, uint8_t framesync_sel, uint8_t code_conv_sel, uint8_t code_select_tx, uint8_t code_select_rx, uint8_t counter_data, uint8_t filter_loopback, uint8_t fifo_loopback)
{
	ASSERT_ERR((((uint32_t)long_nshort << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)ti_loopback << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)down_loopback << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)up_loopback << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)cvsd_en << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)framesync_sel << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)code_conv_sel << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)code_select_tx << 6) & ~((uint32_t)0x000001C0)) == 0);
	ASSERT_ERR((((uint32_t)code_select_rx << 3) & ~((uint32_t)0x00000038)) == 0);
	ASSERT_ERR((((uint32_t)counter_data << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)filter_loopback << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)fifo_loopback << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_ADDR,  ((uint32_t)long_nshort << 15) |((uint32_t)ti_loopback << 14) |((uint32_t)down_loopback << 13) |((uint32_t)up_loopback << 12) |((uint32_t)cvsd_en << 11) |((uint32_t)framesync_sel << 10) |((uint32_t)code_conv_sel << 9) |((uint32_t)code_select_tx << 6) |((uint32_t)code_select_rx << 3) |((uint32_t)counter_data << 2) |((uint32_t)filter_loopback << 1) |((uint32_t)fifo_loopback << 0));
}

__INLINE void bt_controller_loopback_unpack(uint8_t* long_nshort, uint8_t* ti_loopback, uint8_t* down_loopback, uint8_t* up_loopback, uint8_t* cvsd_en, uint8_t* framesync_sel, uint8_t* code_conv_sel, uint8_t* code_select_tx, uint8_t* code_select_rx, uint8_t* counter_data, uint8_t* filter_loopback, uint8_t* fifo_loopback)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR);

	*long_nshort = (localVal & ((uint32_t)0x00008000)) >>  15;
	*ti_loopback = (localVal & ((uint32_t)0x00004000)) >>  14;
	*down_loopback = (localVal & ((uint32_t)0x00002000)) >>  13;
	*up_loopback = (localVal & ((uint32_t)0x00001000)) >>  12;
	*cvsd_en = (localVal & ((uint32_t)0x00000800)) >>  11;
	*framesync_sel = (localVal & ((uint32_t)0x00000400)) >>  10;
	*code_conv_sel = (localVal & ((uint32_t)0x00000200)) >>  9;
	*code_select_tx = (localVal & ((uint32_t)0x000001C0)) >>  6;
	*code_select_rx = (localVal & ((uint32_t)0x00000038)) >>  3;
	*counter_data = (localVal & ((uint32_t)0x00000004)) >>  2;
	*filter_loopback = (localVal & ((uint32_t)0x00000002)) >>  1;
	*fifo_loopback = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_loopback_long_nshort_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_loopback_long_nshort_setf(uint8_t longnshort)
{
	ASSERT_ERR((((uint32_t)longnshort << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_ADDR, (REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)longnshort <<15));
}
__INLINE uint8_t bt_controller_loopback_ti_loopback_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_loopback_ti_loopback_setf(uint8_t tiloopback)
{
	ASSERT_ERR((((uint32_t)tiloopback << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_ADDR, (REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)tiloopback <<14));
}
__INLINE uint8_t bt_controller_loopback_down_loopback_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_loopback_down_loopback_setf(uint8_t downloopback)
{
	ASSERT_ERR((((uint32_t)downloopback << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_ADDR, (REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)downloopback <<13));
}
__INLINE uint8_t bt_controller_loopback_up_loopback_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_loopback_up_loopback_setf(uint8_t uploopback)
{
	ASSERT_ERR((((uint32_t)uploopback << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_ADDR, (REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)uploopback <<12));
}
__INLINE uint8_t bt_controller_loopback_cvsd_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void bt_controller_loopback_cvsd_en_setf(uint8_t cvsden)
{
	ASSERT_ERR((((uint32_t)cvsden << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_ADDR, (REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)cvsden <<11));
}
__INLINE uint8_t bt_controller_loopback_framesync_sel_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void bt_controller_loopback_framesync_sel_setf(uint8_t framesyncsel)
{
	ASSERT_ERR((((uint32_t)framesyncsel << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_ADDR, (REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)framesyncsel <<10));
}
__INLINE uint8_t bt_controller_loopback_code_conv_sel_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void bt_controller_loopback_code_conv_sel_setf(uint8_t codeconvsel)
{
	ASSERT_ERR((((uint32_t)codeconvsel << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_ADDR, (REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)codeconvsel <<9));
}
__INLINE uint8_t bt_controller_loopback_code_select_tx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000001C0)) >> 6);
}
__INLINE void bt_controller_loopback_code_select_tx_setf(uint8_t codeselecttx)
{
	ASSERT_ERR((((uint32_t)codeselecttx << 6) & ~((uint32_t)0x000001C0)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_ADDR, (REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR) & ~((uint32_t)0x000001C0)) | ((uint32_t)codeselecttx <<6));
}
__INLINE uint8_t bt_controller_loopback_code_select_rx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000038)) >> 3);
}
__INLINE void bt_controller_loopback_code_select_rx_setf(uint8_t codeselectrx)
{
	ASSERT_ERR((((uint32_t)codeselectrx << 3) & ~((uint32_t)0x00000038)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_ADDR, (REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR) & ~((uint32_t)0x00000038)) | ((uint32_t)codeselectrx <<3));
}
__INLINE uint8_t bt_controller_loopback_counter_data_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_loopback_counter_data_setf(uint8_t counterdata)
{
	ASSERT_ERR((((uint32_t)counterdata << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_ADDR, (REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)counterdata <<2));
}
__INLINE uint8_t bt_controller_loopback_filter_loopback_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_loopback_filter_loopback_setf(uint8_t filterloopback)
{
	ASSERT_ERR((((uint32_t)filterloopback << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_ADDR, (REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)filterloopback <<1));
}
__INLINE uint8_t bt_controller_loopback_fifo_loopback_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_loopback_fifo_loopback_setf(uint8_t fifoloopback)
{
	ASSERT_ERR((((uint32_t)fifoloopback << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_ADDR, (REG_PL_RD(BT_CONTROLLER_LOOPBACK_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)fifoloopback <<0));
}

/**
 * @brief IIS_CON_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:09 iis_con_reg_15_9_bits_are_reserved 0x0
 *    08    rx_on_delay               0              
 *    07    iis_codec_en              0              
 *    06    IIS_fifo_loopback         0              
 *    05    iis_counter_data          0              
 *    04    iis_ms                    1              
 *    03    sample_length             0              
 *    02    loopback                  0              
 *    01    mono_stereo               0              
 *    00    data_format               0              
 * </pre>
 */
#define BT_CONTROLLER_IIS_CON_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001C4)
#define BT_CONTROLLER_IIS_CON_REG_OFFSET      0x000001C4
#define BT_CONTROLLER_IIS_CON_REG_INDEX       0x00000071
#define BT_CONTROLLER_IIS_CON_REG_RESET       0x00000010

__INLINE uint32_t  bt_controller_iis_con_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR);
}

__INLINE void bt_controller_iis_con_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IIS_CON_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IIS_CON_REG_IIS_CON_REG_15_9_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FE00)
#define BT_CONTROLLER_IIS_CON_REG_IIS_CON_REG_15_9_BITS_ARE_RESERVED_LSB    9
#define BT_CONTROLLER_IIS_CON_REG_IIS_CON_REG_15_9_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000007)
#define BT_CONTROLLER_IIS_CON_REG_RX_ON_DELAY_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_IIS_CON_REG_RX_ON_DELAY_POS    8
#define BT_CONTROLLER_IIS_CON_REG_IIS_CODEC_EN_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_IIS_CON_REG_IIS_CODEC_EN_POS    7
#define BT_CONTROLLER_IIS_CON_REG_IIS_FIFO_LOOPBACK_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_IIS_CON_REG_IIS_FIFO_LOOPBACK_POS    6
#define BT_CONTROLLER_IIS_CON_REG_IIS_COUNTER_DATA_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_IIS_CON_REG_IIS_COUNTER_DATA_POS    5
#define BT_CONTROLLER_IIS_CON_REG_IIS_MS_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_IIS_CON_REG_IIS_MS_POS    4
#define BT_CONTROLLER_IIS_CON_REG_SAMPLE_LENGTH_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_IIS_CON_REG_SAMPLE_LENGTH_POS    3
#define BT_CONTROLLER_IIS_CON_REG_LOOPBACK_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_IIS_CON_REG_LOOPBACK_POS    2
#define BT_CONTROLLER_IIS_CON_REG_MONO_STEREO_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_IIS_CON_REG_MONO_STEREO_POS    1
#define BT_CONTROLLER_IIS_CON_REG_DATA_FORMAT_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_IIS_CON_REG_DATA_FORMAT_POS    0

#define BT_CONTROLLER_IIS_CON_REG_IIS_CON_REG_15_9_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_IIS_CON_REG_RX_ON_DELAY_RST    0x0
#define BT_CONTROLLER_IIS_CON_REG_IIS_CODEC_EN_RST    0x0
#define BT_CONTROLLER_IIS_CON_REG_IIS_FIFO_LOOPBACK_RST    0x0
#define BT_CONTROLLER_IIS_CON_REG_IIS_COUNTER_DATA_RST    0x0
#define BT_CONTROLLER_IIS_CON_REG_IIS_MS_RST    0x1
#define BT_CONTROLLER_IIS_CON_REG_SAMPLE_LENGTH_RST    0x0
#define BT_CONTROLLER_IIS_CON_REG_LOOPBACK_RST    0x0
#define BT_CONTROLLER_IIS_CON_REG_MONO_STEREO_RST    0x0
#define BT_CONTROLLER_IIS_CON_REG_DATA_FORMAT_RST    0x0

__INLINE void bt_controller_iis_con_reg_pack(uint8_t iis_con_reg_15_9_bits_are_reserved, uint8_t rx_on_delay, uint8_t iis_codec_en, uint8_t iis_fifo_loopback, uint8_t iis_counter_data, uint8_t iis_ms, uint8_t sample_length, uint8_t loopback, uint8_t mono_stereo, uint8_t data_format)
{
	ASSERT_ERR((((uint32_t)iis_con_reg_15_9_bits_are_reserved << 9) & ~((uint32_t)0x0000FE00)) == 0);
	ASSERT_ERR((((uint32_t)rx_on_delay << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)iis_codec_en << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)iis_fifo_loopback << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)iis_counter_data << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)iis_ms << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)sample_length << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)loopback << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)mono_stereo << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)data_format << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_IIS_CON_REG_ADDR,  ((uint32_t)iis_con_reg_15_9_bits_are_reserved << 9) |((uint32_t)rx_on_delay << 8) |((uint32_t)iis_codec_en << 7) |((uint32_t)iis_fifo_loopback << 6) |((uint32_t)iis_counter_data << 5) |((uint32_t)iis_ms << 4) |((uint32_t)sample_length << 3) |((uint32_t)loopback << 2) |((uint32_t)mono_stereo << 1) |((uint32_t)data_format << 0));
}

__INLINE void bt_controller_iis_con_reg_unpack(uint8_t* iis_con_reg_15_9_bits_are_reserved, uint8_t* rx_on_delay, uint8_t* iis_codec_en, uint8_t* iis_fifo_loopback, uint8_t* iis_counter_data, uint8_t* iis_ms, uint8_t* sample_length, uint8_t* loopback, uint8_t* mono_stereo, uint8_t* data_format)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR);

	*iis_con_reg_15_9_bits_are_reserved = (localVal & ((uint32_t)0x0000FE00)) >>  9;
	*rx_on_delay = (localVal & ((uint32_t)0x00000100)) >>  8;
	*iis_codec_en = (localVal & ((uint32_t)0x00000080)) >>  7;
	*iis_fifo_loopback = (localVal & ((uint32_t)0x00000040)) >>  6;
	*iis_counter_data = (localVal & ((uint32_t)0x00000020)) >>  5;
	*iis_ms = (localVal & ((uint32_t)0x00000010)) >>  4;
	*sample_length = (localVal & ((uint32_t)0x00000008)) >>  3;
	*loopback = (localVal & ((uint32_t)0x00000004)) >>  2;
	*mono_stereo = (localVal & ((uint32_t)0x00000002)) >>  1;
	*data_format = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_iis_con_reg_iis_con_reg_15_9_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FE00)) >> 9);
}
__INLINE uint8_t bt_controller_iis_con_reg_rx_on_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t bt_controller_iis_con_reg_iis_codec_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_iis_con_reg_iis_codec_en_setf(uint8_t iiscodecen)
{
	ASSERT_ERR((((uint32_t)iiscodecen << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_IIS_CON_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)iiscodecen <<7));
}
__INLINE uint8_t bt_controller_iis_con_reg_iis_fifo_loopback_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_iis_con_reg_iis_fifo_loopback_setf(uint8_t iisfifoloopback)
{
	ASSERT_ERR((((uint32_t)iisfifoloopback << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_IIS_CON_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)iisfifoloopback <<6));
}
__INLINE uint8_t bt_controller_iis_con_reg_iis_counter_data_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_iis_con_reg_iis_counter_data_setf(uint8_t iiscounterdata)
{
	ASSERT_ERR((((uint32_t)iiscounterdata << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_IIS_CON_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)iiscounterdata <<5));
}
__INLINE uint8_t bt_controller_iis_con_reg_iis_ms_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_iis_con_reg_iis_ms_setf(uint8_t iisms)
{
	ASSERT_ERR((((uint32_t)iisms << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_IIS_CON_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)iisms <<4));
}
__INLINE uint8_t bt_controller_iis_con_reg_sample_length_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_iis_con_reg_sample_length_setf(uint8_t samplelength)
{
	ASSERT_ERR((((uint32_t)samplelength << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_IIS_CON_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)samplelength <<3));
}
__INLINE uint8_t bt_controller_iis_con_reg_loopback_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_iis_con_reg_loopback_setf(uint8_t loopback)
{
	ASSERT_ERR((((uint32_t)loopback << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_IIS_CON_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)loopback <<2));
}
__INLINE uint8_t bt_controller_iis_con_reg_mono_stereo_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_iis_con_reg_mono_stereo_setf(uint8_t monostereo)
{
	ASSERT_ERR((((uint32_t)monostereo << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_IIS_CON_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)monostereo <<1));
}
__INLINE uint8_t bt_controller_iis_con_reg_data_format_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_iis_con_reg_data_format_setf(uint8_t dataformat)
{
	ASSERT_ERR((((uint32_t)dataformat << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_IIS_CON_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_IIS_CON_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)dataformat <<0));
}

/**
 * @brief MAP_REG_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 AFH_channel_map_bits_15_downto_0 0xFFFF
 * </pre>
 */
#define BT_CONTROLLER_MAP_REG_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001C8)
#define BT_CONTROLLER_MAP_REG_0_OFFSET      0x000001C8
#define BT_CONTROLLER_MAP_REG_0_INDEX       0x00000072
#define BT_CONTROLLER_MAP_REG_0_RESET       0x0000FFFF

__INLINE void bt_controller_map_reg_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_MAP_REG_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_MAP_REG_0_AFH_CHANNEL_MAP_BITS_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_MAP_REG_0_AFH_CHANNEL_MAP_BITS_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_MAP_REG_0_AFH_CHANNEL_MAP_BITS_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_MAP_REG_0_AFH_CHANNEL_MAP_BITS_15_DOWNTO_0_RST    0xFFFF

__INLINE void bt_controller_map_reg_0_afh_channel_map_bits_15_downto_0_setf(uint16_t afhchannelmapbits15downto0)
{
	ASSERT_ERR((((uint32_t)afhchannelmapbits15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_MAP_REG_0_ADDR, (uint32_t)afhchannelmapbits15downto0 << 0);
}

/**
 * @brief MAP_REG_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 AFH_channel_map_bits_31_downto_16 0xFFFF
 * </pre>
 */
#define BT_CONTROLLER_MAP_REG_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001CC)
#define BT_CONTROLLER_MAP_REG_1_OFFSET      0x000001CC
#define BT_CONTROLLER_MAP_REG_1_INDEX       0x00000073
#define BT_CONTROLLER_MAP_REG_1_RESET       0x0000FFFF

__INLINE void bt_controller_map_reg_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_MAP_REG_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_MAP_REG_1_AFH_CHANNEL_MAP_BITS_31_DOWNTO_16_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_MAP_REG_1_AFH_CHANNEL_MAP_BITS_31_DOWNTO_16_LSB    0
#define BT_CONTROLLER_MAP_REG_1_AFH_CHANNEL_MAP_BITS_31_DOWNTO_16_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_MAP_REG_1_AFH_CHANNEL_MAP_BITS_31_DOWNTO_16_RST    0xFFFF

__INLINE void bt_controller_map_reg_1_afh_channel_map_bits_31_downto_16_setf(uint16_t afhchannelmapbits31downto16)
{
	ASSERT_ERR((((uint32_t)afhchannelmapbits31downto16 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_MAP_REG_1_ADDR, (uint32_t)afhchannelmapbits31downto16 << 0);
}

/**
 * @brief MAP_REG_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 AFH_channel_map_bits_47_downto_32 0xFFFF
 * </pre>
 */
#define BT_CONTROLLER_MAP_REG_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001D0)
#define BT_CONTROLLER_MAP_REG_2_OFFSET      0x000001D0
#define BT_CONTROLLER_MAP_REG_2_INDEX       0x00000074
#define BT_CONTROLLER_MAP_REG_2_RESET       0x0000FFFF

__INLINE void bt_controller_map_reg_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_MAP_REG_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_MAP_REG_2_AFH_CHANNEL_MAP_BITS_47_DOWNTO_32_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_MAP_REG_2_AFH_CHANNEL_MAP_BITS_47_DOWNTO_32_LSB    0
#define BT_CONTROLLER_MAP_REG_2_AFH_CHANNEL_MAP_BITS_47_DOWNTO_32_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_MAP_REG_2_AFH_CHANNEL_MAP_BITS_47_DOWNTO_32_RST    0xFFFF

__INLINE void bt_controller_map_reg_2_afh_channel_map_bits_47_downto_32_setf(uint16_t afhchannelmapbits47downto32)
{
	ASSERT_ERR((((uint32_t)afhchannelmapbits47downto32 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_MAP_REG_2_ADDR, (uint32_t)afhchannelmapbits47downto32 << 0);
}

/**
 * @brief MAP_REG_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 AFH_channel_map_bits_63_downto_48 0xFFFF
 * </pre>
 */
#define BT_CONTROLLER_MAP_REG_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001D4)
#define BT_CONTROLLER_MAP_REG_3_OFFSET      0x000001D4
#define BT_CONTROLLER_MAP_REG_3_INDEX       0x00000075
#define BT_CONTROLLER_MAP_REG_3_RESET       0x0000FFFF

__INLINE void bt_controller_map_reg_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_MAP_REG_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_MAP_REG_3_AFH_CHANNEL_MAP_BITS_63_DOWNTO_48_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_MAP_REG_3_AFH_CHANNEL_MAP_BITS_63_DOWNTO_48_LSB    0
#define BT_CONTROLLER_MAP_REG_3_AFH_CHANNEL_MAP_BITS_63_DOWNTO_48_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_MAP_REG_3_AFH_CHANNEL_MAP_BITS_63_DOWNTO_48_RST    0xFFFF

__INLINE void bt_controller_map_reg_3_afh_channel_map_bits_63_downto_48_setf(uint16_t afhchannelmapbits63downto48)
{
	ASSERT_ERR((((uint32_t)afhchannelmapbits63downto48 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_MAP_REG_3_ADDR, (uint32_t)afhchannelmapbits63downto48 << 0);
}

/**
 * @brief MAP_REG_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    AFH_channel_enable        0              
 *    14:00 AFH_channel_map_bits_78_down_to_64 0x7F
 * </pre>
 */
#define BT_CONTROLLER_MAP_REG_4_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001D8)
#define BT_CONTROLLER_MAP_REG_4_OFFSET      0x000001D8
#define BT_CONTROLLER_MAP_REG_4_INDEX       0x00000076
#define BT_CONTROLLER_MAP_REG_4_RESET       0x0000007F

__INLINE void bt_controller_map_reg_4_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_MAP_REG_4_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_MAP_REG_4_AFH_CHANNEL_ENABLE_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_MAP_REG_4_AFH_CHANNEL_ENABLE_POS    15
#define BT_CONTROLLER_MAP_REG_4_AFH_CHANNEL_MAP_BITS_78_DOWN_TO_64_MASK    ((uint32_t)0x00007FFF)
#define BT_CONTROLLER_MAP_REG_4_AFH_CHANNEL_MAP_BITS_78_DOWN_TO_64_LSB    0
#define BT_CONTROLLER_MAP_REG_4_AFH_CHANNEL_MAP_BITS_78_DOWN_TO_64_WIDTH    ((uint32_t)0x0000000F)

#define BT_CONTROLLER_MAP_REG_4_AFH_CHANNEL_ENABLE_RST    0x0
#define BT_CONTROLLER_MAP_REG_4_AFH_CHANNEL_MAP_BITS_78_DOWN_TO_64_RST    0x7F

__INLINE void bt_controller_map_reg_4_pack(uint8_t afh_channel_enable, uint16_t afh_channel_map_bits_78_down_to_64)
{
	ASSERT_ERR((((uint32_t)afh_channel_enable << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)afh_channel_map_bits_78_down_to_64 << 0) & ~((uint32_t)0x00007FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_MAP_REG_4_ADDR,  ((uint32_t)afh_channel_enable << 15) |((uint32_t)afh_channel_map_bits_78_down_to_64 << 0));
}

__INLINE void bt_controller_map_reg_4_afh_channel_enable_setf(uint8_t afhchannelenable)
{
	ASSERT_ERR((((uint32_t)afhchannelenable << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_MAP_REG_4_ADDR, (REG_PL_RD(BT_CONTROLLER_MAP_REG_4_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)afhchannelenable <<15));
}
__INLINE void bt_controller_map_reg_4_afh_channel_map_bits_78_down_to_64_setf(uint16_t afhchannelmapbits78downto64)
{
	ASSERT_ERR((((uint32_t)afhchannelmapbits78downto64 << 0) & ~((uint32_t)0x00007FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_MAP_REG_4_ADDR, (REG_PL_RD(BT_CONTROLLER_MAP_REG_4_ADDR) & ~((uint32_t)0x00007FFF)) | ((uint32_t)afhchannelmapbits78downto64 <<0));
}

/**
 * @brief FIFO_CTRL_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:11 fifo_cntrl_reg_15_to_11_bits_are_reserved 0x0
 *    10    Slave_overrride           0              
 *    09    fifo_cntrl_reg_9th_bit_is_reserved 0              
 *    08:06 Sco_number                0x0
 *    05    Rcnt_pkt_flush            0              
 *    04    PCM2                      1              
 *    03    Host2                     0              
 *    02    PCM1                      0              
 *    01    Host1                     0              
 *    00    Fifo1_2                   0              
 * </pre>
 */
#define BT_CONTROLLER_FIFO_CTRL_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001DC)
#define BT_CONTROLLER_FIFO_CTRL_REG_OFFSET      0x000001DC
#define BT_CONTROLLER_FIFO_CTRL_REG_INDEX       0x00000077
#define BT_CONTROLLER_FIFO_CTRL_REG_RESET       0x00000010

__INLINE uint32_t  bt_controller_fifo_ctrl_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR);
}

__INLINE void bt_controller_fifo_ctrl_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_FIFO_CTRL_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_FIFO_CTRL_REG_FIFO_CNTRL_REG_15_TO_11_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000F800)
#define BT_CONTROLLER_FIFO_CTRL_REG_FIFO_CNTRL_REG_15_TO_11_BITS_ARE_RESERVED_LSB    11
#define BT_CONTROLLER_FIFO_CTRL_REG_FIFO_CNTRL_REG_15_TO_11_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_FIFO_CTRL_REG_SLAVE_OVERRRIDE_BIT    ((uint32_t)0x00000400)
#define BT_CONTROLLER_FIFO_CTRL_REG_SLAVE_OVERRRIDE_POS    10
#define BT_CONTROLLER_FIFO_CTRL_REG_FIFO_CNTRL_REG_9_TH_BIT_IS_RESERVED_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_FIFO_CTRL_REG_FIFO_CNTRL_REG_9_TH_BIT_IS_RESERVED_POS    9
#define BT_CONTROLLER_FIFO_CTRL_REG_SCO_NUMBER_MASK    ((uint32_t)0x000001C0)
#define BT_CONTROLLER_FIFO_CTRL_REG_SCO_NUMBER_LSB    6
#define BT_CONTROLLER_FIFO_CTRL_REG_SCO_NUMBER_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_FIFO_CTRL_REG_RCNT_PKT_FLUSH_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_FIFO_CTRL_REG_RCNT_PKT_FLUSH_POS    5
#define BT_CONTROLLER_FIFO_CTRL_REG_PCM_2_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_FIFO_CTRL_REG_PCM_2_POS    4
#define BT_CONTROLLER_FIFO_CTRL_REG_HOST_2_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_FIFO_CTRL_REG_HOST_2_POS    3
#define BT_CONTROLLER_FIFO_CTRL_REG_PCM_1_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_FIFO_CTRL_REG_PCM_1_POS    2
#define BT_CONTROLLER_FIFO_CTRL_REG_HOST_1_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_FIFO_CTRL_REG_HOST_1_POS    1
#define BT_CONTROLLER_FIFO_CTRL_REG_FIFO_1_2_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_FIFO_CTRL_REG_FIFO_1_2_POS    0

#define BT_CONTROLLER_FIFO_CTRL_REG_FIFO_CNTRL_REG_15_TO_11_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_FIFO_CTRL_REG_SLAVE_OVERRRIDE_RST    0x0
#define BT_CONTROLLER_FIFO_CTRL_REG_FIFO_CNTRL_REG_9_TH_BIT_IS_RESERVED_RST    0x0
#define BT_CONTROLLER_FIFO_CTRL_REG_SCO_NUMBER_RST    0x0
#define BT_CONTROLLER_FIFO_CTRL_REG_RCNT_PKT_FLUSH_RST    0x0
#define BT_CONTROLLER_FIFO_CTRL_REG_PCM_2_RST    0x1
#define BT_CONTROLLER_FIFO_CTRL_REG_HOST_2_RST    0x0
#define BT_CONTROLLER_FIFO_CTRL_REG_PCM_1_RST    0x0
#define BT_CONTROLLER_FIFO_CTRL_REG_HOST_1_RST    0x0
#define BT_CONTROLLER_FIFO_CTRL_REG_FIFO_1_2_RST    0x0

__INLINE void bt_controller_fifo_ctrl_reg_pack(uint8_t fifo_cntrl_reg_15_to_11_bits_are_reserved, uint8_t slave_overrride, uint8_t fifo_cntrl_reg_9th_bit_is_reserved, uint8_t sco_number, uint8_t rcnt_pkt_flush, uint8_t pcm2, uint8_t host2, uint8_t pcm1, uint8_t host1, uint8_t fifo1_2)
{
	ASSERT_ERR((((uint32_t)fifo_cntrl_reg_15_to_11_bits_are_reserved << 11) & ~((uint32_t)0x0000F800)) == 0);
	ASSERT_ERR((((uint32_t)slave_overrride << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)fifo_cntrl_reg_9th_bit_is_reserved << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)sco_number << 6) & ~((uint32_t)0x000001C0)) == 0);
	ASSERT_ERR((((uint32_t)rcnt_pkt_flush << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)pcm2 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)host2 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)pcm1 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)host1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)fifo1_2 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_FIFO_CTRL_REG_ADDR,  ((uint32_t)fifo_cntrl_reg_15_to_11_bits_are_reserved << 11) |((uint32_t)slave_overrride << 10) |((uint32_t)fifo_cntrl_reg_9th_bit_is_reserved << 9) |((uint32_t)sco_number << 6) |((uint32_t)rcnt_pkt_flush << 5) |((uint32_t)pcm2 << 4) |((uint32_t)host2 << 3) |((uint32_t)pcm1 << 2) |((uint32_t)host1 << 1) |((uint32_t)fifo1_2 << 0));
}

__INLINE void bt_controller_fifo_ctrl_reg_unpack(uint8_t* fifo_cntrl_reg_15_to_11_bits_are_reserved, uint8_t* slave_overrride, uint8_t* fifo_cntrl_reg_9th_bit_is_reserved, uint8_t* sco_number, uint8_t* rcnt_pkt_flush, uint8_t* pcm2, uint8_t* host2, uint8_t* pcm1, uint8_t* host1, uint8_t* fifo1_2)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR);

	*fifo_cntrl_reg_15_to_11_bits_are_reserved = (localVal & ((uint32_t)0x0000F800)) >>  11;
	*slave_overrride = (localVal & ((uint32_t)0x00000400)) >>  10;
	*fifo_cntrl_reg_9th_bit_is_reserved = (localVal & ((uint32_t)0x00000200)) >>  9;
	*sco_number = (localVal & ((uint32_t)0x000001C0)) >>  6;
	*rcnt_pkt_flush = (localVal & ((uint32_t)0x00000020)) >>  5;
	*pcm2 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*host2 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*pcm1 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*host1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*fifo1_2 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_fifo_ctrl_reg_fifo_cntrl_reg_15_to_11_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F800)) >> 11);
}
__INLINE uint8_t bt_controller_fifo_ctrl_reg_slave_overrride_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void bt_controller_fifo_ctrl_reg_slave_overrride_setf(uint8_t slaveoverrride)
{
	ASSERT_ERR((((uint32_t)slaveoverrride << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(BT_CONTROLLER_FIFO_CTRL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)slaveoverrride <<10));
}
__INLINE uint8_t bt_controller_fifo_ctrl_reg_fifo_cntrl_reg_9_th_bit_is_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t bt_controller_fifo_ctrl_reg_sco_number_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000001C0)) >> 6);
}
__INLINE uint8_t bt_controller_fifo_ctrl_reg_rcnt_pkt_flush_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_fifo_ctrl_reg_rcnt_pkt_flush_setf(uint8_t rcntpktflush)
{
	ASSERT_ERR((((uint32_t)rcntpktflush << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_FIFO_CTRL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rcntpktflush <<5));
}
__INLINE uint8_t bt_controller_fifo_ctrl_reg_pcm_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_fifo_ctrl_reg_pcm_2_setf(uint8_t pcm2)
{
	ASSERT_ERR((((uint32_t)pcm2 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_FIFO_CTRL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)pcm2 <<4));
}
__INLINE uint8_t bt_controller_fifo_ctrl_reg_host_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_fifo_ctrl_reg_host_2_setf(uint8_t host2)
{
	ASSERT_ERR((((uint32_t)host2 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_FIFO_CTRL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)host2 <<3));
}
__INLINE uint8_t bt_controller_fifo_ctrl_reg_pcm_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_fifo_ctrl_reg_pcm_1_setf(uint8_t pcm1)
{
	ASSERT_ERR((((uint32_t)pcm1 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_FIFO_CTRL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)pcm1 <<2));
}
__INLINE uint8_t bt_controller_fifo_ctrl_reg_host_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_fifo_ctrl_reg_host_1_setf(uint8_t host1)
{
	ASSERT_ERR((((uint32_t)host1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_FIFO_CTRL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)host1 <<1));
}
__INLINE uint8_t bt_controller_fifo_ctrl_reg_fifo_1_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_fifo_ctrl_reg_fifo_1_2_setf(uint8_t fifo12)
{
	ASSERT_ERR((((uint32_t)fifo12 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_FIFO_CTRL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_FIFO_CTRL_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)fifo12 <<0));
}

/**
 * @brief SCO_FIFO_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 sco_fifo1_data            0x0
 * </pre>
 */
#define BT_CONTROLLER_SCO_FIFO_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001E0)
#define BT_CONTROLLER_SCO_FIFO_1_OFFSET      0x000001E0
#define BT_CONTROLLER_SCO_FIFO_1_INDEX       0x00000078
#define BT_CONTROLLER_SCO_FIFO_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_sco_fifo_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_SCO_FIFO_1_ADDR);
}

__INLINE void bt_controller_sco_fifo_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SCO_FIFO_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SCO_FIFO_1_SCO_FIFO_1_DATA_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_SCO_FIFO_1_SCO_FIFO_1_DATA_LSB    0
#define BT_CONTROLLER_SCO_FIFO_1_SCO_FIFO_1_DATA_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_SCO_FIFO_1_SCO_FIFO_1_DATA_RST    0x0

__INLINE uint16_t bt_controller_sco_fifo_1_sco_fifo_1_data_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SCO_FIFO_1_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_sco_fifo_1_sco_fifo_1_data_setf(uint16_t scofifo1data)
{
	ASSERT_ERR((((uint32_t)scofifo1data << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_SCO_FIFO_1_ADDR, (uint32_t)scofifo1data << 0);
}

/**
 * @brief IIS_PRESCALAR_REG_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 Terminal_count2           0x1F
 *    07:00 Terminal_count1           0x1E
 * </pre>
 */
#define BT_CONTROLLER_IIS_PRESCALAR_REG_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001E4)
#define BT_CONTROLLER_IIS_PRESCALAR_REG_1_OFFSET      0x000001E4
#define BT_CONTROLLER_IIS_PRESCALAR_REG_1_INDEX       0x00000079
#define BT_CONTROLLER_IIS_PRESCALAR_REG_1_RESET       0x00001F1E

__INLINE uint32_t  bt_controller_iis_prescalar_reg_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_IIS_PRESCALAR_REG_1_ADDR);
}

__INLINE void bt_controller_iis_prescalar_reg_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IIS_PRESCALAR_REG_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IIS_PRESCALAR_REG_1_TERMINAL_COUNT_2_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_IIS_PRESCALAR_REG_1_TERMINAL_COUNT_2_LSB    8
#define BT_CONTROLLER_IIS_PRESCALAR_REG_1_TERMINAL_COUNT_2_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_IIS_PRESCALAR_REG_1_TERMINAL_COUNT_1_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_IIS_PRESCALAR_REG_1_TERMINAL_COUNT_1_LSB    0
#define BT_CONTROLLER_IIS_PRESCALAR_REG_1_TERMINAL_COUNT_1_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_IIS_PRESCALAR_REG_1_TERMINAL_COUNT_2_RST    0x1F
#define BT_CONTROLLER_IIS_PRESCALAR_REG_1_TERMINAL_COUNT_1_RST    0x1E

__INLINE void bt_controller_iis_prescalar_reg_1_pack(uint8_t terminal_count2, uint8_t terminal_count1)
{
	ASSERT_ERR((((uint32_t)terminal_count2 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)terminal_count1 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IIS_PRESCALAR_REG_1_ADDR,  ((uint32_t)terminal_count2 << 8) |((uint32_t)terminal_count1 << 0));
}

__INLINE void bt_controller_iis_prescalar_reg_1_unpack(uint8_t* terminal_count2, uint8_t* terminal_count1)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_PRESCALAR_REG_1_ADDR);

	*terminal_count2 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*terminal_count1 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_iis_prescalar_reg_1_terminal_count_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_PRESCALAR_REG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_iis_prescalar_reg_1_terminal_count_2_setf(uint8_t terminalcount2)
{
	ASSERT_ERR((((uint32_t)terminalcount2 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_IIS_PRESCALAR_REG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_IIS_PRESCALAR_REG_1_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)terminalcount2 <<8));
}
__INLINE uint8_t bt_controller_iis_prescalar_reg_1_terminal_count_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_PRESCALAR_REG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_iis_prescalar_reg_1_terminal_count_1_setf(uint8_t terminalcount1)
{
	ASSERT_ERR((((uint32_t)terminalcount1 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IIS_PRESCALAR_REG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_IIS_PRESCALAR_REG_1_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)terminalcount1 <<0));
}

/**
 * @brief IIS_PRESCALAR_REG_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 Terminal_count4           0x03
 *    07:00 Terminal_count3           0x02
 * </pre>
 */
#define BT_CONTROLLER_IIS_PRESCALAR_REG_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001E8)
#define BT_CONTROLLER_IIS_PRESCALAR_REG_2_OFFSET      0x000001E8
#define BT_CONTROLLER_IIS_PRESCALAR_REG_2_INDEX       0x0000007A
#define BT_CONTROLLER_IIS_PRESCALAR_REG_2_RESET       0x00000302

__INLINE uint32_t  bt_controller_iis_prescalar_reg_2_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_IIS_PRESCALAR_REG_2_ADDR);
}

__INLINE void bt_controller_iis_prescalar_reg_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IIS_PRESCALAR_REG_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IIS_PRESCALAR_REG_2_TERMINAL_COUNT_4_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_IIS_PRESCALAR_REG_2_TERMINAL_COUNT_4_LSB    8
#define BT_CONTROLLER_IIS_PRESCALAR_REG_2_TERMINAL_COUNT_4_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_IIS_PRESCALAR_REG_2_TERMINAL_COUNT_3_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_IIS_PRESCALAR_REG_2_TERMINAL_COUNT_3_LSB    0
#define BT_CONTROLLER_IIS_PRESCALAR_REG_2_TERMINAL_COUNT_3_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_IIS_PRESCALAR_REG_2_TERMINAL_COUNT_4_RST    0x03
#define BT_CONTROLLER_IIS_PRESCALAR_REG_2_TERMINAL_COUNT_3_RST    0x02

__INLINE void bt_controller_iis_prescalar_reg_2_pack(uint8_t terminal_count4, uint8_t terminal_count3)
{
	ASSERT_ERR((((uint32_t)terminal_count4 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)terminal_count3 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IIS_PRESCALAR_REG_2_ADDR,  ((uint32_t)terminal_count4 << 8) |((uint32_t)terminal_count3 << 0));
}

__INLINE void bt_controller_iis_prescalar_reg_2_unpack(uint8_t* terminal_count4, uint8_t* terminal_count3)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_PRESCALAR_REG_2_ADDR);

	*terminal_count4 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*terminal_count3 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_iis_prescalar_reg_2_terminal_count_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_PRESCALAR_REG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_iis_prescalar_reg_2_terminal_count_4_setf(uint8_t terminalcount4)
{
	ASSERT_ERR((((uint32_t)terminalcount4 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_IIS_PRESCALAR_REG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_IIS_PRESCALAR_REG_2_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)terminalcount4 <<8));
}
__INLINE uint8_t bt_controller_iis_prescalar_reg_2_terminal_count_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IIS_PRESCALAR_REG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_iis_prescalar_reg_2_terminal_count_3_setf(uint8_t terminalcount3)
{
	ASSERT_ERR((((uint32_t)terminalcount3 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IIS_PRESCALAR_REG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_IIS_PRESCALAR_REG_2_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)terminalcount3 <<0));
}

/**
 * @brief MCLK_PRESCALAR_REG_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 Mclk_Terminal_count2      0x0
 *    07:00 Mclk_Terminal_count1      0x0
 * </pre>
 */
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001EC)
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_1_OFFSET      0x000001EC
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_1_INDEX       0x0000007B
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_mclk_prescalar_reg_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_MCLK_PRESCALAR_REG_1_ADDR);
}

__INLINE void bt_controller_mclk_prescalar_reg_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_MCLK_PRESCALAR_REG_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_1_MCLK_TERMINAL_COUNT_2_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_1_MCLK_TERMINAL_COUNT_2_LSB    8
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_1_MCLK_TERMINAL_COUNT_2_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_1_MCLK_TERMINAL_COUNT_1_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_1_MCLK_TERMINAL_COUNT_1_LSB    0
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_1_MCLK_TERMINAL_COUNT_1_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_MCLK_PRESCALAR_REG_1_MCLK_TERMINAL_COUNT_2_RST    0x0
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_1_MCLK_TERMINAL_COUNT_1_RST    0x0

__INLINE void bt_controller_mclk_prescalar_reg_1_pack(uint8_t mclk_terminal_count2, uint8_t mclk_terminal_count1)
{
	ASSERT_ERR((((uint32_t)mclk_terminal_count2 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)mclk_terminal_count1 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_MCLK_PRESCALAR_REG_1_ADDR,  ((uint32_t)mclk_terminal_count2 << 8) |((uint32_t)mclk_terminal_count1 << 0));
}

__INLINE void bt_controller_mclk_prescalar_reg_1_unpack(uint8_t* mclk_terminal_count2, uint8_t* mclk_terminal_count1)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MCLK_PRESCALAR_REG_1_ADDR);

	*mclk_terminal_count2 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*mclk_terminal_count1 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_mclk_prescalar_reg_1_mclk_terminal_count_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MCLK_PRESCALAR_REG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_mclk_prescalar_reg_1_mclk_terminal_count_2_setf(uint8_t mclkterminalcount2)
{
	ASSERT_ERR((((uint32_t)mclkterminalcount2 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_MCLK_PRESCALAR_REG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_MCLK_PRESCALAR_REG_1_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)mclkterminalcount2 <<8));
}
__INLINE uint8_t bt_controller_mclk_prescalar_reg_1_mclk_terminal_count_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MCLK_PRESCALAR_REG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_mclk_prescalar_reg_1_mclk_terminal_count_1_setf(uint8_t mclkterminalcount1)
{
	ASSERT_ERR((((uint32_t)mclkterminalcount1 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_MCLK_PRESCALAR_REG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_MCLK_PRESCALAR_REG_1_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)mclkterminalcount1 <<0));
}

/**
 * @brief MCLK_PRESCALAR_REG_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Mclk_Terminal_count3      0x0
 * </pre>
 */
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001F0)
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_2_OFFSET      0x000001F0
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_2_INDEX       0x0000007C
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_2_RESET       0x00000000

__INLINE uint32_t  bt_controller_mclk_prescalar_reg_2_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_MCLK_PRESCALAR_REG_2_ADDR);
}

__INLINE void bt_controller_mclk_prescalar_reg_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_MCLK_PRESCALAR_REG_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_2_MCLK_TERMINAL_COUNT_3_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_2_MCLK_TERMINAL_COUNT_3_LSB    0
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_2_MCLK_TERMINAL_COUNT_3_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_MCLK_PRESCALAR_REG_2_MCLK_TERMINAL_COUNT_3_RST    0x0

__INLINE uint16_t bt_controller_mclk_prescalar_reg_2_mclk_terminal_count_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MCLK_PRESCALAR_REG_2_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_mclk_prescalar_reg_2_mclk_terminal_count_3_setf(uint16_t mclkterminalcount3)
{
	ASSERT_ERR((((uint32_t)mclkterminalcount3 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_MCLK_PRESCALAR_REG_2_ADDR, (uint32_t)mclkterminalcount3 << 0);
}

/**
 * @brief MCLK_PRESCALAR_REG_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Mclk_Terminal_count4      0x0
 * </pre>
 */
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001F4)
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_3_OFFSET      0x000001F4
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_3_INDEX       0x0000007D
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_3_RESET       0x00000000

__INLINE uint32_t  bt_controller_mclk_prescalar_reg_3_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_MCLK_PRESCALAR_REG_3_ADDR);
}

__INLINE void bt_controller_mclk_prescalar_reg_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_MCLK_PRESCALAR_REG_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_3_MCLK_TERMINAL_COUNT_4_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_3_MCLK_TERMINAL_COUNT_4_LSB    0
#define BT_CONTROLLER_MCLK_PRESCALAR_REG_3_MCLK_TERMINAL_COUNT_4_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_MCLK_PRESCALAR_REG_3_MCLK_TERMINAL_COUNT_4_RST    0x0

__INLINE uint16_t bt_controller_mclk_prescalar_reg_3_mclk_terminal_count_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MCLK_PRESCALAR_REG_3_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_mclk_prescalar_reg_3_mclk_terminal_count_4_setf(uint16_t mclkterminalcount4)
{
	ASSERT_ERR((((uint32_t)mclkterminalcount4 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_MCLK_PRESCALAR_REG_3_ADDR, (uint32_t)mclkterminalcount4 << 0);
}

/**
 * @brief PCDSTS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:06 pcdsts_reg_15_to_6_bits_are_reserved 0x0
 *    05    Rssi_meas                 0              
 *    04    crc_chk_q_or_Csm_txcrc_q  0              
 *    03    csm_dataphase_q_or_Csm_datadv_q 0              
 *    02    Csm_plheaderen_q          0              
 *    01    Csm_headeren_q            0              
 *    00    Csm_accessen_q            0              
 * </pre>
 */
#define BT_CONTROLLER_PCDSTS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000001F8)
#define BT_CONTROLLER_PCDSTS_REG_OFFSET      0x000001F8
#define BT_CONTROLLER_PCDSTS_REG_INDEX       0x0000007E
#define BT_CONTROLLER_PCDSTS_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_pcdsts_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PCDSTS_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_PCDSTS_REG_PCDSTS_REG_15_TO_6_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FFC0)
#define BT_CONTROLLER_PCDSTS_REG_PCDSTS_REG_15_TO_6_BITS_ARE_RESERVED_LSB    6
#define BT_CONTROLLER_PCDSTS_REG_PCDSTS_REG_15_TO_6_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000000A)
#define BT_CONTROLLER_PCDSTS_REG_RSSI_MEAS_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_PCDSTS_REG_RSSI_MEAS_POS    5
#define BT_CONTROLLER_PCDSTS_REG_CRC_CHK_Q_OR_CSM_TXCRC_Q_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_PCDSTS_REG_CRC_CHK_Q_OR_CSM_TXCRC_Q_POS    4
#define BT_CONTROLLER_PCDSTS_REG_CSM_DATAPHASE_Q_OR_CSM_DATADV_Q_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_PCDSTS_REG_CSM_DATAPHASE_Q_OR_CSM_DATADV_Q_POS    3
#define BT_CONTROLLER_PCDSTS_REG_CSM_PLHEADEREN_Q_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_PCDSTS_REG_CSM_PLHEADEREN_Q_POS    2
#define BT_CONTROLLER_PCDSTS_REG_CSM_HEADEREN_Q_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_PCDSTS_REG_CSM_HEADEREN_Q_POS    1
#define BT_CONTROLLER_PCDSTS_REG_CSM_ACCESSEN_Q_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_PCDSTS_REG_CSM_ACCESSEN_Q_POS    0

#define BT_CONTROLLER_PCDSTS_REG_PCDSTS_REG_15_TO_6_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_PCDSTS_REG_RSSI_MEAS_RST    0x0
#define BT_CONTROLLER_PCDSTS_REG_CRC_CHK_Q_OR_CSM_TXCRC_Q_RST    0x0
#define BT_CONTROLLER_PCDSTS_REG_CSM_DATAPHASE_Q_OR_CSM_DATADV_Q_RST    0x0
#define BT_CONTROLLER_PCDSTS_REG_CSM_PLHEADEREN_Q_RST    0x0
#define BT_CONTROLLER_PCDSTS_REG_CSM_HEADEREN_Q_RST    0x0
#define BT_CONTROLLER_PCDSTS_REG_CSM_ACCESSEN_Q_RST    0x0

__INLINE void bt_controller_pcdsts_reg_unpack(uint16_t* pcdsts_reg_15_to_6_bits_are_reserved, uint8_t* rssi_meas, uint8_t* crc_chk_q_or_csm_txcrc_q, uint8_t* csm_dataphase_q_or_csm_datadv_q, uint8_t* csm_plheaderen_q, uint8_t* csm_headeren_q, uint8_t* csm_accessen_q)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCDSTS_REG_ADDR);

	*pcdsts_reg_15_to_6_bits_are_reserved = (localVal & ((uint32_t)0x0000FFC0)) >>  6;
	*rssi_meas = (localVal & ((uint32_t)0x00000020)) >>  5;
	*crc_chk_q_or_csm_txcrc_q = (localVal & ((uint32_t)0x00000010)) >>  4;
	*csm_dataphase_q_or_csm_datadv_q = (localVal & ((uint32_t)0x00000008)) >>  3;
	*csm_plheaderen_q = (localVal & ((uint32_t)0x00000004)) >>  2;
	*csm_headeren_q = (localVal & ((uint32_t)0x00000002)) >>  1;
	*csm_accessen_q = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_pcdsts_reg_pcdsts_reg_15_to_6_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCDSTS_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFC0)) >> 6);
}
__INLINE uint8_t bt_controller_pcdsts_reg_rssi_meas_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCDSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t bt_controller_pcdsts_reg_crc_chk_q_or_csm_txcrc_q_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCDSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t bt_controller_pcdsts_reg_csm_dataphase_q_or_csm_datadv_q_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCDSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t bt_controller_pcdsts_reg_csm_plheaderen_q_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCDSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t bt_controller_pcdsts_reg_csm_headeren_q_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCDSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t bt_controller_pcdsts_reg_csm_accessen_q_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCDSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief LUT_ROW_81 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 Packet_Typeof_slave_in_piconet0_ 0xC0
 *    11:10 LLID_of_slave_in_piconet0 0x0
 *    09:00 Payload_Length_of_slave_in_piconet0 0x0
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_81_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000200)
#define BT_CONTROLLER_LUT_ROW_81_OFFSET      0x00000200
#define BT_CONTROLLER_LUT_ROW_81_INDEX       0x00000080
#define BT_CONTROLLER_LUT_ROW_81_RESET       0x0000C000

__INLINE uint32_t  bt_controller_lut_row_81_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_81_ADDR);
}

__INLINE void bt_controller_lut_row_81_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_81_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_81_PACKET_TYPEOF_SLAVE_IN_PICONET_0__MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_LUT_ROW_81_PACKET_TYPEOF_SLAVE_IN_PICONET_0__LSB    12
#define BT_CONTROLLER_LUT_ROW_81_PACKET_TYPEOF_SLAVE_IN_PICONET_0__WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_81_LLID_OF_SLAVE_IN_PICONET_0_MASK    ((uint32_t)0x00000C00)
#define BT_CONTROLLER_LUT_ROW_81_LLID_OF_SLAVE_IN_PICONET_0_LSB    10
#define BT_CONTROLLER_LUT_ROW_81_LLID_OF_SLAVE_IN_PICONET_0_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_81_PAYLOAD_LENGTH_OF_SLAVE_IN_PICONET_0_MASK    ((uint32_t)0x000003FF)
#define BT_CONTROLLER_LUT_ROW_81_PAYLOAD_LENGTH_OF_SLAVE_IN_PICONET_0_LSB    0
#define BT_CONTROLLER_LUT_ROW_81_PAYLOAD_LENGTH_OF_SLAVE_IN_PICONET_0_WIDTH    ((uint32_t)0x0000000A)

#define BT_CONTROLLER_LUT_ROW_81_PACKET_TYPEOF_SLAVE_IN_PICONET_0__RST    0xC0
#define BT_CONTROLLER_LUT_ROW_81_LLID_OF_SLAVE_IN_PICONET_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_81_PAYLOAD_LENGTH_OF_SLAVE_IN_PICONET_0_RST    0x0

__INLINE void bt_controller_lut_row_81_pack(uint8_t packet_typeof_slave_in_piconet0_, uint8_t llid_of_slave_in_piconet0, uint16_t payload_length_of_slave_in_piconet0)
{
	ASSERT_ERR((((uint32_t)packet_typeof_slave_in_piconet0_ << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)llid_of_slave_in_piconet0 << 10) & ~((uint32_t)0x00000C00)) == 0);
	ASSERT_ERR((((uint32_t)payload_length_of_slave_in_piconet0 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_81_ADDR,  ((uint32_t)packet_typeof_slave_in_piconet0_ << 12) |((uint32_t)llid_of_slave_in_piconet0 << 10) |((uint32_t)payload_length_of_slave_in_piconet0 << 0));
}

__INLINE void bt_controller_lut_row_81_unpack(uint8_t* packet_typeof_slave_in_piconet0_, uint8_t* llid_of_slave_in_piconet0, uint16_t* payload_length_of_slave_in_piconet0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_81_ADDR);

	*packet_typeof_slave_in_piconet0_ = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*llid_of_slave_in_piconet0 = (localVal & ((uint32_t)0x00000C00)) >>  10;
	*payload_length_of_slave_in_piconet0 = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_81_packet_typeof_slave_in_piconet_0__getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_81_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void bt_controller_lut_row_81_packet_typeof_slave_in_piconet_0__setf(uint8_t packettypeofslaveinpiconet0_)
{
	ASSERT_ERR((((uint32_t)packettypeofslaveinpiconet0_ << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_81_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_81_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)packettypeofslaveinpiconet0_ <<12));
}
__INLINE uint8_t bt_controller_lut_row_81_llid_of_slave_in_piconet_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_81_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000C00)) >> 10);
}
__INLINE void bt_controller_lut_row_81_llid_of_slave_in_piconet_0_setf(uint8_t llidofslaveinpiconet0)
{
	ASSERT_ERR((((uint32_t)llidofslaveinpiconet0 << 10) & ~((uint32_t)0x00000C00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_81_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_81_ADDR) & ~((uint32_t)0x00000C00)) | ((uint32_t)llidofslaveinpiconet0 <<10));
}
__INLINE uint16_t bt_controller_lut_row_81_payload_length_of_slave_in_piconet_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_81_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void bt_controller_lut_row_81_payload_length_of_slave_in_piconet_0_setf(uint16_t payloadlengthofslaveinpiconet0)
{
	ASSERT_ERR((((uint32_t)payloadlengthofslaveinpiconet0 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_81_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_81_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)payloadlengthofslaveinpiconet0 <<0));
}

/**
 * @brief LUT_ROW_82 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    PTT_of_slave_in_piconet0  0              
 *    14    ESCO_of_slave_in_piconet0 0              
 *    13    Sniff_Start_of_slave_in_piconet0 0              
 *    12    Sniff_End_of_slave_in_piconet0 0              
 *    11:09 TX_Gain_of_slave_in_piconet0 0x0
 *    08    Active_of_slave_in_piconet0 0              
 *    07    SCO1_of_slave_in_piconet0 0              
 *    06    SCO2_of_slave_in_piconet0 0              
 *    05    Payload_Header_Flow_of_slave_in_piconet0 0              
 *    04    Hold_of_slave_in_piconet0 0              
 *    03    Sniff_of_slave_in_piconet0 0              
 *    02    ARQN_of_slave_in_piconet0 1              
 *    01    SEQN_of_slave_in_piconet0 0              
 *    00    Packet_Header_Flow_of_slave_in_piconet0 1              
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_82_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000204)
#define BT_CONTROLLER_LUT_ROW_82_OFFSET      0x00000204
#define BT_CONTROLLER_LUT_ROW_82_INDEX       0x00000081
#define BT_CONTROLLER_LUT_ROW_82_RESET       0x00000005

__INLINE uint32_t  bt_controller_lut_row_82_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR);
}

__INLINE void bt_controller_lut_row_82_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_82_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_82_PTT_OF_SLAVE_IN_PICONET_0_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_LUT_ROW_82_PTT_OF_SLAVE_IN_PICONET_0_POS    15
#define BT_CONTROLLER_LUT_ROW_82_ESCO_OF_SLAVE_IN_PICONET_0_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_LUT_ROW_82_ESCO_OF_SLAVE_IN_PICONET_0_POS    14
#define BT_CONTROLLER_LUT_ROW_82_SNIFF_START_OF_SLAVE_IN_PICONET_0_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_LUT_ROW_82_SNIFF_START_OF_SLAVE_IN_PICONET_0_POS    13
#define BT_CONTROLLER_LUT_ROW_82_SNIFF_END_OF_SLAVE_IN_PICONET_0_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_LUT_ROW_82_SNIFF_END_OF_SLAVE_IN_PICONET_0_POS    12
#define BT_CONTROLLER_LUT_ROW_82_TX_GAIN_OF_SLAVE_IN_PICONET_0_MASK    ((uint32_t)0x00000E00)
#define BT_CONTROLLER_LUT_ROW_82_TX_GAIN_OF_SLAVE_IN_PICONET_0_LSB    9
#define BT_CONTROLLER_LUT_ROW_82_TX_GAIN_OF_SLAVE_IN_PICONET_0_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_LUT_ROW_82_ACTIVE_OF_SLAVE_IN_PICONET_0_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_LUT_ROW_82_ACTIVE_OF_SLAVE_IN_PICONET_0_POS    8
#define BT_CONTROLLER_LUT_ROW_82_SCO_1_OF_SLAVE_IN_PICONET_0_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_LUT_ROW_82_SCO_1_OF_SLAVE_IN_PICONET_0_POS    7
#define BT_CONTROLLER_LUT_ROW_82_SCO_2_OF_SLAVE_IN_PICONET_0_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_LUT_ROW_82_SCO_2_OF_SLAVE_IN_PICONET_0_POS    6
#define BT_CONTROLLER_LUT_ROW_82_PAYLOAD_HEADER_FLOW_OF_SLAVE_IN_PICONET_0_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_LUT_ROW_82_PAYLOAD_HEADER_FLOW_OF_SLAVE_IN_PICONET_0_POS    5
#define BT_CONTROLLER_LUT_ROW_82_HOLD_OF_SLAVE_IN_PICONET_0_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_LUT_ROW_82_HOLD_OF_SLAVE_IN_PICONET_0_POS    4
#define BT_CONTROLLER_LUT_ROW_82_SNIFF_OF_SLAVE_IN_PICONET_0_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_LUT_ROW_82_SNIFF_OF_SLAVE_IN_PICONET_0_POS    3
#define BT_CONTROLLER_LUT_ROW_82_ARQN_OF_SLAVE_IN_PICONET_0_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_82_ARQN_OF_SLAVE_IN_PICONET_0_POS    2
#define BT_CONTROLLER_LUT_ROW_82_SEQN_OF_SLAVE_IN_PICONET_0_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_82_SEQN_OF_SLAVE_IN_PICONET_0_POS    1
#define BT_CONTROLLER_LUT_ROW_82_PACKET_HEADER_FLOW_OF_SLAVE_IN_PICONET_0_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_LUT_ROW_82_PACKET_HEADER_FLOW_OF_SLAVE_IN_PICONET_0_POS    0

#define BT_CONTROLLER_LUT_ROW_82_PTT_OF_SLAVE_IN_PICONET_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_82_ESCO_OF_SLAVE_IN_PICONET_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_82_SNIFF_START_OF_SLAVE_IN_PICONET_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_82_SNIFF_END_OF_SLAVE_IN_PICONET_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_82_TX_GAIN_OF_SLAVE_IN_PICONET_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_82_ACTIVE_OF_SLAVE_IN_PICONET_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_82_SCO_1_OF_SLAVE_IN_PICONET_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_82_SCO_2_OF_SLAVE_IN_PICONET_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_82_PAYLOAD_HEADER_FLOW_OF_SLAVE_IN_PICONET_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_82_HOLD_OF_SLAVE_IN_PICONET_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_82_SNIFF_OF_SLAVE_IN_PICONET_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_82_ARQN_OF_SLAVE_IN_PICONET_0_RST    0x1
#define BT_CONTROLLER_LUT_ROW_82_SEQN_OF_SLAVE_IN_PICONET_0_RST    0x0
#define BT_CONTROLLER_LUT_ROW_82_PACKET_HEADER_FLOW_OF_SLAVE_IN_PICONET_0_RST    0x1

__INLINE void bt_controller_lut_row_82_pack(uint8_t ptt_of_slave_in_piconet0, uint8_t esco_of_slave_in_piconet0, uint8_t sniff_start_of_slave_in_piconet0, uint8_t sniff_end_of_slave_in_piconet0, uint8_t tx_gain_of_slave_in_piconet0, uint8_t active_of_slave_in_piconet0, uint8_t sco1_of_slave_in_piconet0, uint8_t sco2_of_slave_in_piconet0, uint8_t payload_header_flow_of_slave_in_piconet0, uint8_t hold_of_slave_in_piconet0, uint8_t sniff_of_slave_in_piconet0, uint8_t arqn_of_slave_in_piconet0, uint8_t seqn_of_slave_in_piconet0, uint8_t packet_header_flow_of_slave_in_piconet0)
{
	ASSERT_ERR((((uint32_t)ptt_of_slave_in_piconet0 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)esco_of_slave_in_piconet0 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_start_of_slave_in_piconet0 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_end_of_slave_in_piconet0 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)tx_gain_of_slave_in_piconet0 << 9) & ~((uint32_t)0x00000E00)) == 0);
	ASSERT_ERR((((uint32_t)active_of_slave_in_piconet0 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)sco1_of_slave_in_piconet0 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)sco2_of_slave_in_piconet0 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)payload_header_flow_of_slave_in_piconet0 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)hold_of_slave_in_piconet0 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)sniff_of_slave_in_piconet0 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)arqn_of_slave_in_piconet0 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)seqn_of_slave_in_piconet0 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)packet_header_flow_of_slave_in_piconet0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_82_ADDR,  ((uint32_t)ptt_of_slave_in_piconet0 << 15) |((uint32_t)esco_of_slave_in_piconet0 << 14) |((uint32_t)sniff_start_of_slave_in_piconet0 << 13) |((uint32_t)sniff_end_of_slave_in_piconet0 << 12) |((uint32_t)tx_gain_of_slave_in_piconet0 << 9) |((uint32_t)active_of_slave_in_piconet0 << 8) |((uint32_t)sco1_of_slave_in_piconet0 << 7) |((uint32_t)sco2_of_slave_in_piconet0 << 6) |((uint32_t)payload_header_flow_of_slave_in_piconet0 << 5) |((uint32_t)hold_of_slave_in_piconet0 << 4) |((uint32_t)sniff_of_slave_in_piconet0 << 3) |((uint32_t)arqn_of_slave_in_piconet0 << 2) |((uint32_t)seqn_of_slave_in_piconet0 << 1) |((uint32_t)packet_header_flow_of_slave_in_piconet0 << 0));
}

__INLINE void bt_controller_lut_row_82_unpack(uint8_t* ptt_of_slave_in_piconet0, uint8_t* esco_of_slave_in_piconet0, uint8_t* sniff_start_of_slave_in_piconet0, uint8_t* sniff_end_of_slave_in_piconet0, uint8_t* tx_gain_of_slave_in_piconet0, uint8_t* active_of_slave_in_piconet0, uint8_t* sco1_of_slave_in_piconet0, uint8_t* sco2_of_slave_in_piconet0, uint8_t* payload_header_flow_of_slave_in_piconet0, uint8_t* hold_of_slave_in_piconet0, uint8_t* sniff_of_slave_in_piconet0, uint8_t* arqn_of_slave_in_piconet0, uint8_t* seqn_of_slave_in_piconet0, uint8_t* packet_header_flow_of_slave_in_piconet0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR);

	*ptt_of_slave_in_piconet0 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*esco_of_slave_in_piconet0 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*sniff_start_of_slave_in_piconet0 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*sniff_end_of_slave_in_piconet0 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*tx_gain_of_slave_in_piconet0 = (localVal & ((uint32_t)0x00000E00)) >>  9;
	*active_of_slave_in_piconet0 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*sco1_of_slave_in_piconet0 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*sco2_of_slave_in_piconet0 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*payload_header_flow_of_slave_in_piconet0 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hold_of_slave_in_piconet0 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*sniff_of_slave_in_piconet0 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*arqn_of_slave_in_piconet0 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*seqn_of_slave_in_piconet0 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*packet_header_flow_of_slave_in_piconet0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_82_ptt_of_slave_in_piconet_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_lut_row_82_ptt_of_slave_in_piconet_0_setf(uint8_t pttofslaveinpiconet0)
{
	ASSERT_ERR((((uint32_t)pttofslaveinpiconet0 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_82_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)pttofslaveinpiconet0 <<15));
}
__INLINE uint8_t bt_controller_lut_row_82_esco_of_slave_in_piconet_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_lut_row_82_esco_of_slave_in_piconet_0_setf(uint8_t escoofslaveinpiconet0)
{
	ASSERT_ERR((((uint32_t)escoofslaveinpiconet0 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_82_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)escoofslaveinpiconet0 <<14));
}
__INLINE uint8_t bt_controller_lut_row_82_sniff_start_of_slave_in_piconet_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_lut_row_82_sniff_start_of_slave_in_piconet_0_setf(uint8_t sniffstartofslaveinpiconet0)
{
	ASSERT_ERR((((uint32_t)sniffstartofslaveinpiconet0 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_82_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)sniffstartofslaveinpiconet0 <<13));
}
__INLINE uint8_t bt_controller_lut_row_82_sniff_end_of_slave_in_piconet_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_lut_row_82_sniff_end_of_slave_in_piconet_0_setf(uint8_t sniffendofslaveinpiconet0)
{
	ASSERT_ERR((((uint32_t)sniffendofslaveinpiconet0 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_82_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)sniffendofslaveinpiconet0 <<12));
}
__INLINE uint8_t bt_controller_lut_row_82_tx_gain_of_slave_in_piconet_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000E00)) >> 9);
}
__INLINE void bt_controller_lut_row_82_tx_gain_of_slave_in_piconet_0_setf(uint8_t txgainofslaveinpiconet0)
{
	ASSERT_ERR((((uint32_t)txgainofslaveinpiconet0 << 9) & ~((uint32_t)0x00000E00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_82_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR) & ~((uint32_t)0x00000E00)) | ((uint32_t)txgainofslaveinpiconet0 <<9));
}
__INLINE uint8_t bt_controller_lut_row_82_active_of_slave_in_piconet_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_lut_row_82_active_of_slave_in_piconet_0_setf(uint8_t activeofslaveinpiconet0)
{
	ASSERT_ERR((((uint32_t)activeofslaveinpiconet0 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_82_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)activeofslaveinpiconet0 <<8));
}
__INLINE uint8_t bt_controller_lut_row_82_sco_1_of_slave_in_piconet_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_lut_row_82_sco_1_of_slave_in_piconet_0_setf(uint8_t sco1ofslaveinpiconet0)
{
	ASSERT_ERR((((uint32_t)sco1ofslaveinpiconet0 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_82_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)sco1ofslaveinpiconet0 <<7));
}
__INLINE uint8_t bt_controller_lut_row_82_sco_2_of_slave_in_piconet_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_lut_row_82_sco_2_of_slave_in_piconet_0_setf(uint8_t sco2ofslaveinpiconet0)
{
	ASSERT_ERR((((uint32_t)sco2ofslaveinpiconet0 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_82_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)sco2ofslaveinpiconet0 <<6));
}
__INLINE uint8_t bt_controller_lut_row_82_payload_header_flow_of_slave_in_piconet_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_lut_row_82_payload_header_flow_of_slave_in_piconet_0_setf(uint8_t payloadheaderflowofslaveinpiconet0)
{
	ASSERT_ERR((((uint32_t)payloadheaderflowofslaveinpiconet0 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_82_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)payloadheaderflowofslaveinpiconet0 <<5));
}
__INLINE uint8_t bt_controller_lut_row_82_hold_of_slave_in_piconet_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_lut_row_82_hold_of_slave_in_piconet_0_setf(uint8_t holdofslaveinpiconet0)
{
	ASSERT_ERR((((uint32_t)holdofslaveinpiconet0 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_82_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)holdofslaveinpiconet0 <<4));
}
__INLINE uint8_t bt_controller_lut_row_82_sniff_of_slave_in_piconet_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_lut_row_82_sniff_of_slave_in_piconet_0_setf(uint8_t sniffofslaveinpiconet0)
{
	ASSERT_ERR((((uint32_t)sniffofslaveinpiconet0 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_82_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)sniffofslaveinpiconet0 <<3));
}
__INLINE uint8_t bt_controller_lut_row_82_arqn_of_slave_in_piconet_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_lut_row_82_arqn_of_slave_in_piconet_0_setf(uint8_t arqnofslaveinpiconet0)
{
	ASSERT_ERR((((uint32_t)arqnofslaveinpiconet0 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_82_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)arqnofslaveinpiconet0 <<2));
}
__INLINE uint8_t bt_controller_lut_row_82_seqn_of_slave_in_piconet_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_lut_row_82_seqn_of_slave_in_piconet_0_setf(uint8_t seqnofslaveinpiconet0)
{
	ASSERT_ERR((((uint32_t)seqnofslaveinpiconet0 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_82_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)seqnofslaveinpiconet0 <<1));
}
__INLINE uint8_t bt_controller_lut_row_82_packet_header_flow_of_slave_in_piconet_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_lut_row_82_packet_header_flow_of_slave_in_piconet_0_setf(uint8_t packetheaderflowofslaveinpiconet0)
{
	ASSERT_ERR((((uint32_t)packetheaderflowofslaveinpiconet0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_82_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_82_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)packetheaderflowofslaveinpiconet0 <<0));
}

/**
 * @brief LUT_ROW_91 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 Packet_Type_Slave_in_piconet_1 0xC0
 *    11:10 LLID_Slave_in_piconet_1   0x0
 *    09:00 Payload_Length_Slave_in_piconet_1 0x0
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_91_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000208)
#define BT_CONTROLLER_LUT_ROW_91_OFFSET      0x00000208
#define BT_CONTROLLER_LUT_ROW_91_INDEX       0x00000082
#define BT_CONTROLLER_LUT_ROW_91_RESET       0x0000C000

__INLINE uint32_t  bt_controller_lut_row_91_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_91_ADDR);
}

__INLINE void bt_controller_lut_row_91_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_91_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_91_PACKET_TYPE_SLAVE_IN_PICONET_1_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_LUT_ROW_91_PACKET_TYPE_SLAVE_IN_PICONET_1_LSB    12
#define BT_CONTROLLER_LUT_ROW_91_PACKET_TYPE_SLAVE_IN_PICONET_1_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_91_LLID_SLAVE_IN_PICONET_1_MASK    ((uint32_t)0x00000C00)
#define BT_CONTROLLER_LUT_ROW_91_LLID_SLAVE_IN_PICONET_1_LSB    10
#define BT_CONTROLLER_LUT_ROW_91_LLID_SLAVE_IN_PICONET_1_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_91_PAYLOAD_LENGTH_SLAVE_IN_PICONET_1_MASK    ((uint32_t)0x000003FF)
#define BT_CONTROLLER_LUT_ROW_91_PAYLOAD_LENGTH_SLAVE_IN_PICONET_1_LSB    0
#define BT_CONTROLLER_LUT_ROW_91_PAYLOAD_LENGTH_SLAVE_IN_PICONET_1_WIDTH    ((uint32_t)0x0000000A)

#define BT_CONTROLLER_LUT_ROW_91_PACKET_TYPE_SLAVE_IN_PICONET_1_RST    0xC0
#define BT_CONTROLLER_LUT_ROW_91_LLID_SLAVE_IN_PICONET_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_91_PAYLOAD_LENGTH_SLAVE_IN_PICONET_1_RST    0x0

__INLINE void bt_controller_lut_row_91_pack(uint8_t packet_type_slave_in_piconet_1, uint8_t llid_slave_in_piconet_1, uint16_t payload_length_slave_in_piconet_1)
{
	ASSERT_ERR((((uint32_t)packet_type_slave_in_piconet_1 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)llid_slave_in_piconet_1 << 10) & ~((uint32_t)0x00000C00)) == 0);
	ASSERT_ERR((((uint32_t)payload_length_slave_in_piconet_1 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_91_ADDR,  ((uint32_t)packet_type_slave_in_piconet_1 << 12) |((uint32_t)llid_slave_in_piconet_1 << 10) |((uint32_t)payload_length_slave_in_piconet_1 << 0));
}

__INLINE void bt_controller_lut_row_91_unpack(uint8_t* packet_type_slave_in_piconet_1, uint8_t* llid_slave_in_piconet_1, uint16_t* payload_length_slave_in_piconet_1)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_91_ADDR);

	*packet_type_slave_in_piconet_1 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*llid_slave_in_piconet_1 = (localVal & ((uint32_t)0x00000C00)) >>  10;
	*payload_length_slave_in_piconet_1 = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_91_packet_type_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_91_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void bt_controller_lut_row_91_packet_type_slave_in_piconet_1_setf(uint8_t packettypeslaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)packettypeslaveinpiconet1 << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_91_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_91_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)packettypeslaveinpiconet1 <<12));
}
__INLINE uint8_t bt_controller_lut_row_91_llid_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_91_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000C00)) >> 10);
}
__INLINE void bt_controller_lut_row_91_llid_slave_in_piconet_1_setf(uint8_t llidslaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)llidslaveinpiconet1 << 10) & ~((uint32_t)0x00000C00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_91_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_91_ADDR) & ~((uint32_t)0x00000C00)) | ((uint32_t)llidslaveinpiconet1 <<10));
}
__INLINE uint16_t bt_controller_lut_row_91_payload_length_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_91_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void bt_controller_lut_row_91_payload_length_slave_in_piconet_1_setf(uint16_t payloadlengthslaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)payloadlengthslaveinpiconet1 << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_91_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_91_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)payloadlengthslaveinpiconet1 <<0));
}

/**
 * @brief LUT_ROW_92 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    PTT_Slave_in_piconet1     0              
 *    14    ESCO_Slave_in_piconet1    0              
 *    13    Sniff_Start_Slave_in_piconet1 0              
 *    12    Sniff_End_Slave_in_piconet1 0              
 *    11:09 TX_Gain_Slave_in_piconet1 0x0
 *    08    Active_Slave_in_piconet1  0              
 *    07    SCO1_Slave_in_piconet1    0              
 *    06    SCO2_Slave_in_piconet1    0              
 *    05    Payload_Header_Flow_Slave_in_piconet1 0              
 *    04    Hold_Slave_in_piconet1    0              
 *    03    Sniff_Slave_in_piconet1   0              
 *    02    ARQN_Slave_in_piconet1    1              
 *    01    SEQN_Slave_in_piconet1    0              
 *    00    Packet_Header_Flow_Slave_in_piconet1 1              
 * </pre>
 */
#define BT_CONTROLLER_LUT_ROW_92_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000020C)
#define BT_CONTROLLER_LUT_ROW_92_OFFSET      0x0000020C
#define BT_CONTROLLER_LUT_ROW_92_INDEX       0x00000083
#define BT_CONTROLLER_LUT_ROW_92_RESET       0x00000005

__INLINE uint32_t  bt_controller_lut_row_92_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR);
}

__INLINE void bt_controller_lut_row_92_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_92_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_ROW_92_PTT_SLAVE_IN_PICONET_1_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_LUT_ROW_92_PTT_SLAVE_IN_PICONET_1_POS    15
#define BT_CONTROLLER_LUT_ROW_92_ESCO_SLAVE_IN_PICONET_1_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_LUT_ROW_92_ESCO_SLAVE_IN_PICONET_1_POS    14
#define BT_CONTROLLER_LUT_ROW_92_SNIFF_START_SLAVE_IN_PICONET_1_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_LUT_ROW_92_SNIFF_START_SLAVE_IN_PICONET_1_POS    13
#define BT_CONTROLLER_LUT_ROW_92_SNIFF_END_SLAVE_IN_PICONET_1_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_LUT_ROW_92_SNIFF_END_SLAVE_IN_PICONET_1_POS    12
#define BT_CONTROLLER_LUT_ROW_92_TX_GAIN_SLAVE_IN_PICONET_1_MASK    ((uint32_t)0x00000E00)
#define BT_CONTROLLER_LUT_ROW_92_TX_GAIN_SLAVE_IN_PICONET_1_LSB    9
#define BT_CONTROLLER_LUT_ROW_92_TX_GAIN_SLAVE_IN_PICONET_1_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_LUT_ROW_92_ACTIVE_SLAVE_IN_PICONET_1_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_LUT_ROW_92_ACTIVE_SLAVE_IN_PICONET_1_POS    8
#define BT_CONTROLLER_LUT_ROW_92_SCO_1_SLAVE_IN_PICONET_1_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_LUT_ROW_92_SCO_1_SLAVE_IN_PICONET_1_POS    7
#define BT_CONTROLLER_LUT_ROW_92_SCO_2_SLAVE_IN_PICONET_1_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_LUT_ROW_92_SCO_2_SLAVE_IN_PICONET_1_POS    6
#define BT_CONTROLLER_LUT_ROW_92_PAYLOAD_HEADER_FLOW_SLAVE_IN_PICONET_1_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_LUT_ROW_92_PAYLOAD_HEADER_FLOW_SLAVE_IN_PICONET_1_POS    5
#define BT_CONTROLLER_LUT_ROW_92_HOLD_SLAVE_IN_PICONET_1_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_LUT_ROW_92_HOLD_SLAVE_IN_PICONET_1_POS    4
#define BT_CONTROLLER_LUT_ROW_92_SNIFF_SLAVE_IN_PICONET_1_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_LUT_ROW_92_SNIFF_SLAVE_IN_PICONET_1_POS    3
#define BT_CONTROLLER_LUT_ROW_92_ARQN_SLAVE_IN_PICONET_1_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_ROW_92_ARQN_SLAVE_IN_PICONET_1_POS    2
#define BT_CONTROLLER_LUT_ROW_92_SEQN_SLAVE_IN_PICONET_1_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LUT_ROW_92_SEQN_SLAVE_IN_PICONET_1_POS    1
#define BT_CONTROLLER_LUT_ROW_92_PACKET_HEADER_FLOW_SLAVE_IN_PICONET_1_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_LUT_ROW_92_PACKET_HEADER_FLOW_SLAVE_IN_PICONET_1_POS    0

#define BT_CONTROLLER_LUT_ROW_92_PTT_SLAVE_IN_PICONET_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_92_ESCO_SLAVE_IN_PICONET_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_92_SNIFF_START_SLAVE_IN_PICONET_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_92_SNIFF_END_SLAVE_IN_PICONET_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_92_TX_GAIN_SLAVE_IN_PICONET_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_92_ACTIVE_SLAVE_IN_PICONET_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_92_SCO_1_SLAVE_IN_PICONET_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_92_SCO_2_SLAVE_IN_PICONET_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_92_PAYLOAD_HEADER_FLOW_SLAVE_IN_PICONET_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_92_HOLD_SLAVE_IN_PICONET_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_92_SNIFF_SLAVE_IN_PICONET_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_92_ARQN_SLAVE_IN_PICONET_1_RST    0x1
#define BT_CONTROLLER_LUT_ROW_92_SEQN_SLAVE_IN_PICONET_1_RST    0x0
#define BT_CONTROLLER_LUT_ROW_92_PACKET_HEADER_FLOW_SLAVE_IN_PICONET_1_RST    0x1

__INLINE void bt_controller_lut_row_92_pack(uint8_t ptt_slave_in_piconet1, uint8_t esco_slave_in_piconet1, uint8_t sniff_start_slave_in_piconet1, uint8_t sniff_end_slave_in_piconet1, uint8_t tx_gain_slave_in_piconet1, uint8_t active_slave_in_piconet1, uint8_t sco1_slave_in_piconet1, uint8_t sco2_slave_in_piconet1, uint8_t payload_header_flow_slave_in_piconet1, uint8_t hold_slave_in_piconet1, uint8_t sniff_slave_in_piconet1, uint8_t arqn_slave_in_piconet1, uint8_t seqn_slave_in_piconet1, uint8_t packet_header_flow_slave_in_piconet1)
{
	ASSERT_ERR((((uint32_t)ptt_slave_in_piconet1 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)esco_slave_in_piconet1 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_start_slave_in_piconet1 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)sniff_end_slave_in_piconet1 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)tx_gain_slave_in_piconet1 << 9) & ~((uint32_t)0x00000E00)) == 0);
	ASSERT_ERR((((uint32_t)active_slave_in_piconet1 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)sco1_slave_in_piconet1 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)sco2_slave_in_piconet1 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)payload_header_flow_slave_in_piconet1 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)hold_slave_in_piconet1 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)sniff_slave_in_piconet1 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)arqn_slave_in_piconet1 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)seqn_slave_in_piconet1 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)packet_header_flow_slave_in_piconet1 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_92_ADDR,  ((uint32_t)ptt_slave_in_piconet1 << 15) |((uint32_t)esco_slave_in_piconet1 << 14) |((uint32_t)sniff_start_slave_in_piconet1 << 13) |((uint32_t)sniff_end_slave_in_piconet1 << 12) |((uint32_t)tx_gain_slave_in_piconet1 << 9) |((uint32_t)active_slave_in_piconet1 << 8) |((uint32_t)sco1_slave_in_piconet1 << 7) |((uint32_t)sco2_slave_in_piconet1 << 6) |((uint32_t)payload_header_flow_slave_in_piconet1 << 5) |((uint32_t)hold_slave_in_piconet1 << 4) |((uint32_t)sniff_slave_in_piconet1 << 3) |((uint32_t)arqn_slave_in_piconet1 << 2) |((uint32_t)seqn_slave_in_piconet1 << 1) |((uint32_t)packet_header_flow_slave_in_piconet1 << 0));
}

__INLINE void bt_controller_lut_row_92_unpack(uint8_t* ptt_slave_in_piconet1, uint8_t* esco_slave_in_piconet1, uint8_t* sniff_start_slave_in_piconet1, uint8_t* sniff_end_slave_in_piconet1, uint8_t* tx_gain_slave_in_piconet1, uint8_t* active_slave_in_piconet1, uint8_t* sco1_slave_in_piconet1, uint8_t* sco2_slave_in_piconet1, uint8_t* payload_header_flow_slave_in_piconet1, uint8_t* hold_slave_in_piconet1, uint8_t* sniff_slave_in_piconet1, uint8_t* arqn_slave_in_piconet1, uint8_t* seqn_slave_in_piconet1, uint8_t* packet_header_flow_slave_in_piconet1)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR);

	*ptt_slave_in_piconet1 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*esco_slave_in_piconet1 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*sniff_start_slave_in_piconet1 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*sniff_end_slave_in_piconet1 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*tx_gain_slave_in_piconet1 = (localVal & ((uint32_t)0x00000E00)) >>  9;
	*active_slave_in_piconet1 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*sco1_slave_in_piconet1 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*sco2_slave_in_piconet1 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*payload_header_flow_slave_in_piconet1 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*hold_slave_in_piconet1 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*sniff_slave_in_piconet1 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*arqn_slave_in_piconet1 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*seqn_slave_in_piconet1 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*packet_header_flow_slave_in_piconet1 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_lut_row_92_ptt_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_lut_row_92_ptt_slave_in_piconet_1_setf(uint8_t pttslaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)pttslaveinpiconet1 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_92_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)pttslaveinpiconet1 <<15));
}
__INLINE uint8_t bt_controller_lut_row_92_esco_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_lut_row_92_esco_slave_in_piconet_1_setf(uint8_t escoslaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)escoslaveinpiconet1 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_92_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)escoslaveinpiconet1 <<14));
}
__INLINE uint8_t bt_controller_lut_row_92_sniff_start_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_lut_row_92_sniff_start_slave_in_piconet_1_setf(uint8_t sniffstartslaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)sniffstartslaveinpiconet1 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_92_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)sniffstartslaveinpiconet1 <<13));
}
__INLINE uint8_t bt_controller_lut_row_92_sniff_end_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_lut_row_92_sniff_end_slave_in_piconet_1_setf(uint8_t sniffendslaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)sniffendslaveinpiconet1 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_92_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)sniffendslaveinpiconet1 <<12));
}
__INLINE uint8_t bt_controller_lut_row_92_tx_gain_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000E00)) >> 9);
}
__INLINE void bt_controller_lut_row_92_tx_gain_slave_in_piconet_1_setf(uint8_t txgainslaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)txgainslaveinpiconet1 << 9) & ~((uint32_t)0x00000E00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_92_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR) & ~((uint32_t)0x00000E00)) | ((uint32_t)txgainslaveinpiconet1 <<9));
}
__INLINE uint8_t bt_controller_lut_row_92_active_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_lut_row_92_active_slave_in_piconet_1_setf(uint8_t activeslaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)activeslaveinpiconet1 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_92_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)activeslaveinpiconet1 <<8));
}
__INLINE uint8_t bt_controller_lut_row_92_sco_1_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_lut_row_92_sco_1_slave_in_piconet_1_setf(uint8_t sco1slaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)sco1slaveinpiconet1 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_92_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)sco1slaveinpiconet1 <<7));
}
__INLINE uint8_t bt_controller_lut_row_92_sco_2_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_lut_row_92_sco_2_slave_in_piconet_1_setf(uint8_t sco2slaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)sco2slaveinpiconet1 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_92_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)sco2slaveinpiconet1 <<6));
}
__INLINE uint8_t bt_controller_lut_row_92_payload_header_flow_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_lut_row_92_payload_header_flow_slave_in_piconet_1_setf(uint8_t payloadheaderflowslaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)payloadheaderflowslaveinpiconet1 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_92_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)payloadheaderflowslaveinpiconet1 <<5));
}
__INLINE uint8_t bt_controller_lut_row_92_hold_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_lut_row_92_hold_slave_in_piconet_1_setf(uint8_t holdslaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)holdslaveinpiconet1 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_92_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)holdslaveinpiconet1 <<4));
}
__INLINE uint8_t bt_controller_lut_row_92_sniff_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_lut_row_92_sniff_slave_in_piconet_1_setf(uint8_t sniffslaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)sniffslaveinpiconet1 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_92_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)sniffslaveinpiconet1 <<3));
}
__INLINE uint8_t bt_controller_lut_row_92_arqn_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_lut_row_92_arqn_slave_in_piconet_1_setf(uint8_t arqnslaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)arqnslaveinpiconet1 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_92_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)arqnslaveinpiconet1 <<2));
}
__INLINE uint8_t bt_controller_lut_row_92_seqn_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_lut_row_92_seqn_slave_in_piconet_1_setf(uint8_t seqnslaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)seqnslaveinpiconet1 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_92_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)seqnslaveinpiconet1 <<1));
}
__INLINE uint8_t bt_controller_lut_row_92_packet_header_flow_slave_in_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_lut_row_92_packet_header_flow_slave_in_piconet_1_setf(uint8_t packetheaderflowslaveinpiconet1)
{
	ASSERT_ERR((((uint32_t)packetheaderflowslaveinpiconet1 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_ROW_92_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_ROW_92_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)packetheaderflowslaveinpiconet1 <<0));
}

/**
 * @brief PN_0_INFO_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 pn0_info_reg_15_to_8_bits_are_reserved 0x0
 *    07:05 Lut_pn0info_reg_l_7_downto_5 0x0
 *    04    pn0info_reg_retx          0              
 *    03:01 lut_pn0info_reg_l_3_downto_0 0x0
 *    00    pn0info_reg_ms            0              
 * </pre>
 */
#define BT_CONTROLLER_PN_0_INFO_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000210)
#define BT_CONTROLLER_PN_0_INFO_REG_OFFSET      0x00000210
#define BT_CONTROLLER_PN_0_INFO_REG_INDEX       0x00000084
#define BT_CONTROLLER_PN_0_INFO_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_pn_0_info_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PN_0_INFO_REG_ADDR);
}

__INLINE void bt_controller_pn_0_info_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PN_0_INFO_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PN_0_INFO_REG_PN_0_INFO_REG_15_TO_8_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_PN_0_INFO_REG_PN_0_INFO_REG_15_TO_8_BITS_ARE_RESERVED_LSB    8
#define BT_CONTROLLER_PN_0_INFO_REG_PN_0_INFO_REG_15_TO_8_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_PN_0_INFO_REG_LUT_PN_0_INFO_REG_L_7_DOWNTO_5_MASK    ((uint32_t)0x000000E0)
#define BT_CONTROLLER_PN_0_INFO_REG_LUT_PN_0_INFO_REG_L_7_DOWNTO_5_LSB    5
#define BT_CONTROLLER_PN_0_INFO_REG_LUT_PN_0_INFO_REG_L_7_DOWNTO_5_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_PN_0_INFO_REG_PN_0_INFO_REG_RETX_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_PN_0_INFO_REG_PN_0_INFO_REG_RETX_POS    4
#define BT_CONTROLLER_PN_0_INFO_REG_LUT_PN_0_INFO_REG_L_3_DOWNTO_0_MASK    ((uint32_t)0x0000000E)
#define BT_CONTROLLER_PN_0_INFO_REG_LUT_PN_0_INFO_REG_L_3_DOWNTO_0_LSB    1
#define BT_CONTROLLER_PN_0_INFO_REG_LUT_PN_0_INFO_REG_L_3_DOWNTO_0_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_PN_0_INFO_REG_PN_0_INFO_REG_MS_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_PN_0_INFO_REG_PN_0_INFO_REG_MS_POS    0

#define BT_CONTROLLER_PN_0_INFO_REG_PN_0_INFO_REG_15_TO_8_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_PN_0_INFO_REG_LUT_PN_0_INFO_REG_L_7_DOWNTO_5_RST    0x0
#define BT_CONTROLLER_PN_0_INFO_REG_PN_0_INFO_REG_RETX_RST    0x0
#define BT_CONTROLLER_PN_0_INFO_REG_LUT_PN_0_INFO_REG_L_3_DOWNTO_0_RST    0x0
#define BT_CONTROLLER_PN_0_INFO_REG_PN_0_INFO_REG_MS_RST    0x0

__INLINE void bt_controller_pn_0_info_reg_pack(uint8_t pn0_info_reg_15_to_8_bits_are_reserved, uint8_t lut_pn0info_reg_l_7_downto_5, uint8_t pn0info_reg_retx, uint8_t lut_pn0info_reg_l_3_downto_0, uint8_t pn0info_reg_ms)
{
	ASSERT_ERR((((uint32_t)pn0_info_reg_15_to_8_bits_are_reserved << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)lut_pn0info_reg_l_7_downto_5 << 5) & ~((uint32_t)0x000000E0)) == 0);
	ASSERT_ERR((((uint32_t)pn0info_reg_retx << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)lut_pn0info_reg_l_3_downto_0 << 1) & ~((uint32_t)0x0000000E)) == 0);
	ASSERT_ERR((((uint32_t)pn0info_reg_ms << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_0_INFO_REG_ADDR,  ((uint32_t)pn0_info_reg_15_to_8_bits_are_reserved << 8) |((uint32_t)lut_pn0info_reg_l_7_downto_5 << 5) |((uint32_t)pn0info_reg_retx << 4) |((uint32_t)lut_pn0info_reg_l_3_downto_0 << 1) |((uint32_t)pn0info_reg_ms << 0));
}

__INLINE void bt_controller_pn_0_info_reg_unpack(uint8_t* pn0_info_reg_15_to_8_bits_are_reserved, uint8_t* lut_pn0info_reg_l_7_downto_5, uint8_t* pn0info_reg_retx, uint8_t* lut_pn0info_reg_l_3_downto_0, uint8_t* pn0info_reg_ms)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_INFO_REG_ADDR);

	*pn0_info_reg_15_to_8_bits_are_reserved = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*lut_pn0info_reg_l_7_downto_5 = (localVal & ((uint32_t)0x000000E0)) >>  5;
	*pn0info_reg_retx = (localVal & ((uint32_t)0x00000010)) >>  4;
	*lut_pn0info_reg_l_3_downto_0 = (localVal & ((uint32_t)0x0000000E)) >>  1;
	*pn0info_reg_ms = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_pn_0_info_reg_pn_0_info_reg_15_to_8_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_INFO_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t bt_controller_pn_0_info_reg_lut_pn_0_info_reg_l_7_downto_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_INFO_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000E0)) >> 5);
}
__INLINE void bt_controller_pn_0_info_reg_lut_pn_0_info_reg_l_7_downto_5_setf(uint8_t lutpn0inforegl7downto5)
{
	ASSERT_ERR((((uint32_t)lutpn0inforegl7downto5 << 5) & ~((uint32_t)0x000000E0)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_0_INFO_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PN_0_INFO_REG_ADDR) & ~((uint32_t)0x000000E0)) | ((uint32_t)lutpn0inforegl7downto5 <<5));
}
__INLINE uint8_t bt_controller_pn_0_info_reg_pn_0_info_reg_retx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_INFO_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_pn_0_info_reg_pn_0_info_reg_retx_setf(uint8_t pn0inforegretx)
{
	ASSERT_ERR((((uint32_t)pn0inforegretx << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_0_INFO_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PN_0_INFO_REG_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)pn0inforegretx <<4));
}
__INLINE uint8_t bt_controller_pn_0_info_reg_lut_pn_0_info_reg_l_3_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_INFO_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000E)) >> 1);
}
__INLINE void bt_controller_pn_0_info_reg_lut_pn_0_info_reg_l_3_downto_0_setf(uint8_t lutpn0inforegl3downto0)
{
	ASSERT_ERR((((uint32_t)lutpn0inforegl3downto0 << 1) & ~((uint32_t)0x0000000E)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_0_INFO_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PN_0_INFO_REG_ADDR) & ~((uint32_t)0x0000000E)) | ((uint32_t)lutpn0inforegl3downto0 <<1));
}
__INLINE uint8_t bt_controller_pn_0_info_reg_pn_0_info_reg_ms_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_INFO_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_pn_0_info_reg_pn_0_info_reg_ms_setf(uint8_t pn0inforegms)
{
	ASSERT_ERR((((uint32_t)pn0inforegms << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_0_INFO_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PN_0_INFO_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)pn0inforegms <<0));
}

/**
 * @brief PN_1_INFO_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 pn1_info_reg_15_to_8_bits_are_reserved 0x0
 *    07:05 Lut_pn1info_reg_l_7_downto_3 0x0
 *    04    Pn1info_reg_retx          0              
 *    03:01 lut_pn1info_reg_l3_downto_0 0x0
 *    00    pn1info_reg_ms            0              
 * </pre>
 */
#define BT_CONTROLLER_PN_1_INFO_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000214)
#define BT_CONTROLLER_PN_1_INFO_REG_OFFSET      0x00000214
#define BT_CONTROLLER_PN_1_INFO_REG_INDEX       0x00000085
#define BT_CONTROLLER_PN_1_INFO_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_pn_1_info_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PN_1_INFO_REG_ADDR);
}

__INLINE void bt_controller_pn_1_info_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PN_1_INFO_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PN_1_INFO_REG_PN_1_INFO_REG_15_TO_8_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_PN_1_INFO_REG_PN_1_INFO_REG_15_TO_8_BITS_ARE_RESERVED_LSB    8
#define BT_CONTROLLER_PN_1_INFO_REG_PN_1_INFO_REG_15_TO_8_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_PN_1_INFO_REG_LUT_PN_1_INFO_REG_L_7_DOWNTO_3_MASK    ((uint32_t)0x000000E0)
#define BT_CONTROLLER_PN_1_INFO_REG_LUT_PN_1_INFO_REG_L_7_DOWNTO_3_LSB    5
#define BT_CONTROLLER_PN_1_INFO_REG_LUT_PN_1_INFO_REG_L_7_DOWNTO_3_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_PN_1_INFO_REG_PN_1_INFO_REG_RETX_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_PN_1_INFO_REG_PN_1_INFO_REG_RETX_POS    4
#define BT_CONTROLLER_PN_1_INFO_REG_LUT_PN_1_INFO_REG_L_3_DOWNTO_0_MASK    ((uint32_t)0x0000000E)
#define BT_CONTROLLER_PN_1_INFO_REG_LUT_PN_1_INFO_REG_L_3_DOWNTO_0_LSB    1
#define BT_CONTROLLER_PN_1_INFO_REG_LUT_PN_1_INFO_REG_L_3_DOWNTO_0_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_PN_1_INFO_REG_PN_1_INFO_REG_MS_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_PN_1_INFO_REG_PN_1_INFO_REG_MS_POS    0

#define BT_CONTROLLER_PN_1_INFO_REG_PN_1_INFO_REG_15_TO_8_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_PN_1_INFO_REG_LUT_PN_1_INFO_REG_L_7_DOWNTO_3_RST    0x0
#define BT_CONTROLLER_PN_1_INFO_REG_PN_1_INFO_REG_RETX_RST    0x0
#define BT_CONTROLLER_PN_1_INFO_REG_LUT_PN_1_INFO_REG_L_3_DOWNTO_0_RST    0x0
#define BT_CONTROLLER_PN_1_INFO_REG_PN_1_INFO_REG_MS_RST    0x0

__INLINE void bt_controller_pn_1_info_reg_pack(uint8_t pn1_info_reg_15_to_8_bits_are_reserved, uint8_t lut_pn1info_reg_l_7_downto_3, uint8_t pn1info_reg_retx, uint8_t lut_pn1info_reg_l3_downto_0, uint8_t pn1info_reg_ms)
{
	ASSERT_ERR((((uint32_t)pn1_info_reg_15_to_8_bits_are_reserved << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)lut_pn1info_reg_l_7_downto_3 << 5) & ~((uint32_t)0x000000E0)) == 0);
	ASSERT_ERR((((uint32_t)pn1info_reg_retx << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)lut_pn1info_reg_l3_downto_0 << 1) & ~((uint32_t)0x0000000E)) == 0);
	ASSERT_ERR((((uint32_t)pn1info_reg_ms << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_1_INFO_REG_ADDR,  ((uint32_t)pn1_info_reg_15_to_8_bits_are_reserved << 8) |((uint32_t)lut_pn1info_reg_l_7_downto_3 << 5) |((uint32_t)pn1info_reg_retx << 4) |((uint32_t)lut_pn1info_reg_l3_downto_0 << 1) |((uint32_t)pn1info_reg_ms << 0));
}

__INLINE void bt_controller_pn_1_info_reg_unpack(uint8_t* pn1_info_reg_15_to_8_bits_are_reserved, uint8_t* lut_pn1info_reg_l_7_downto_3, uint8_t* pn1info_reg_retx, uint8_t* lut_pn1info_reg_l3_downto_0, uint8_t* pn1info_reg_ms)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_1_INFO_REG_ADDR);

	*pn1_info_reg_15_to_8_bits_are_reserved = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*lut_pn1info_reg_l_7_downto_3 = (localVal & ((uint32_t)0x000000E0)) >>  5;
	*pn1info_reg_retx = (localVal & ((uint32_t)0x00000010)) >>  4;
	*lut_pn1info_reg_l3_downto_0 = (localVal & ((uint32_t)0x0000000E)) >>  1;
	*pn1info_reg_ms = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_pn_1_info_reg_pn_1_info_reg_15_to_8_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_1_INFO_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t bt_controller_pn_1_info_reg_lut_pn_1_info_reg_l_7_downto_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_1_INFO_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000E0)) >> 5);
}
__INLINE void bt_controller_pn_1_info_reg_lut_pn_1_info_reg_l_7_downto_3_setf(uint8_t lutpn1inforegl7downto3)
{
	ASSERT_ERR((((uint32_t)lutpn1inforegl7downto3 << 5) & ~((uint32_t)0x000000E0)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_1_INFO_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PN_1_INFO_REG_ADDR) & ~((uint32_t)0x000000E0)) | ((uint32_t)lutpn1inforegl7downto3 <<5));
}
__INLINE uint8_t bt_controller_pn_1_info_reg_pn_1_info_reg_retx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_1_INFO_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_pn_1_info_reg_pn_1_info_reg_retx_setf(uint8_t pn1inforegretx)
{
	ASSERT_ERR((((uint32_t)pn1inforegretx << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_1_INFO_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PN_1_INFO_REG_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)pn1inforegretx <<4));
}
__INLINE uint8_t bt_controller_pn_1_info_reg_lut_pn_1_info_reg_l_3_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_1_INFO_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000E)) >> 1);
}
__INLINE void bt_controller_pn_1_info_reg_lut_pn_1_info_reg_l_3_downto_0_setf(uint8_t lutpn1inforegl3downto0)
{
	ASSERT_ERR((((uint32_t)lutpn1inforegl3downto0 << 1) & ~((uint32_t)0x0000000E)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_1_INFO_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PN_1_INFO_REG_ADDR) & ~((uint32_t)0x0000000E)) | ((uint32_t)lutpn1inforegl3downto0 <<1));
}
__INLINE uint8_t bt_controller_pn_1_info_reg_pn_1_info_reg_ms_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_1_INFO_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_pn_1_info_reg_pn_1_info_reg_ms_setf(uint8_t pn1inforegms)
{
	ASSERT_ERR((((uint32_t)pn1inforegms << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_1_INFO_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PN_1_INFO_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)pn1inforegms <<0));
}

/**
 * @brief PN_1_CLK_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Piconet1_clock_15_to_0_bits 0x0
 * </pre>
 */
#define BT_CONTROLLER_PN_1_CLK_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000218)
#define BT_CONTROLLER_PN_1_CLK_1_REG_OFFSET      0x00000218
#define BT_CONTROLLER_PN_1_CLK_1_REG_INDEX       0x00000086
#define BT_CONTROLLER_PN_1_CLK_1_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_pn_1_clk_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PN_1_CLK_1_REG_ADDR);
}

__INLINE void bt_controller_pn_1_clk_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PN_1_CLK_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PN_1_CLK_1_REG_PICONET_1_CLOCK_15_TO_0_BITS_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PN_1_CLK_1_REG_PICONET_1_CLOCK_15_TO_0_BITS_LSB    0
#define BT_CONTROLLER_PN_1_CLK_1_REG_PICONET_1_CLOCK_15_TO_0_BITS_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PN_1_CLK_1_REG_PICONET_1_CLOCK_15_TO_0_BITS_RST    0x0

__INLINE uint16_t bt_controller_pn_1_clk_1_reg_piconet_1_clock_15_to_0_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_1_CLK_1_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_pn_1_clk_1_reg_piconet_1_clock_15_to_0_bits_setf(uint16_t piconet1clock15to0bits)
{
	ASSERT_ERR((((uint32_t)piconet1clock15to0bits << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_1_CLK_1_REG_ADDR, (uint32_t)piconet1clock15to0bits << 0);
}

/**
 * @brief PN_1_CLK_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 piconet1_clk2_reg_15_12_bits_are_reserved 0x0
 *    11:00 Piconet1_clock_27_to_16_bits 0x0
 * </pre>
 */
#define BT_CONTROLLER_PN_1_CLK_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000021C)
#define BT_CONTROLLER_PN_1_CLK_2_REG_OFFSET      0x0000021C
#define BT_CONTROLLER_PN_1_CLK_2_REG_INDEX       0x00000087
#define BT_CONTROLLER_PN_1_CLK_2_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_pn_1_clk_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PN_1_CLK_2_REG_ADDR);
}

__INLINE void bt_controller_pn_1_clk_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PN_1_CLK_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PN_1_CLK_2_REG_PICONET_1_CLK_2_REG_15_12_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_PN_1_CLK_2_REG_PICONET_1_CLK_2_REG_15_12_BITS_ARE_RESERVED_LSB    12
#define BT_CONTROLLER_PN_1_CLK_2_REG_PICONET_1_CLK_2_REG_15_12_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_PN_1_CLK_2_REG_PICONET_1_CLOCK_27_TO_16_BITS_MASK    ((uint32_t)0x00000FFF)
#define BT_CONTROLLER_PN_1_CLK_2_REG_PICONET_1_CLOCK_27_TO_16_BITS_LSB    0
#define BT_CONTROLLER_PN_1_CLK_2_REG_PICONET_1_CLOCK_27_TO_16_BITS_WIDTH    ((uint32_t)0x0000000C)

#define BT_CONTROLLER_PN_1_CLK_2_REG_PICONET_1_CLK_2_REG_15_12_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_PN_1_CLK_2_REG_PICONET_1_CLOCK_27_TO_16_BITS_RST    0x0

__INLINE void bt_controller_pn_1_clk_2_reg_pack(uint8_t piconet1_clk2_reg_15_12_bits_are_reserved, uint16_t piconet1_clock_27_to_16_bits)
{
	ASSERT_ERR((((uint32_t)piconet1_clk2_reg_15_12_bits_are_reserved << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)piconet1_clock_27_to_16_bits << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_1_CLK_2_REG_ADDR,  ((uint32_t)piconet1_clk2_reg_15_12_bits_are_reserved << 12) |((uint32_t)piconet1_clock_27_to_16_bits << 0));
}

__INLINE void bt_controller_pn_1_clk_2_reg_unpack(uint8_t* piconet1_clk2_reg_15_12_bits_are_reserved, uint16_t* piconet1_clock_27_to_16_bits)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_1_CLK_2_REG_ADDR);

	*piconet1_clk2_reg_15_12_bits_are_reserved = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*piconet1_clock_27_to_16_bits = (localVal & ((uint32_t)0x00000FFF)) >>  0;
}

__INLINE uint8_t bt_controller_pn_1_clk_2_reg_piconet_1_clk_2_reg_15_12_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_1_CLK_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE uint16_t bt_controller_pn_1_clk_2_reg_piconet_1_clock_27_to_16_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_1_CLK_2_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x00000FFF)) >> 0);
}
__INLINE void bt_controller_pn_1_clk_2_reg_piconet_1_clock_27_to_16_bits_setf(uint16_t piconet1clock27to16bits)
{
	ASSERT_ERR((((uint32_t)piconet1clock27to16bits << 0) & ~((uint32_t)0x00000FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PN_1_CLK_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PN_1_CLK_2_REG_ADDR) & ~((uint32_t)0x00000FFF)) | ((uint32_t)piconet1clock27to16bits <<0));
}

/**
 * @brief PICONET_1_BD_LOWER_ADDR register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 pn1_bd_addr_15_downto_0   0x0
 * </pre>
 */
#define BT_CONTROLLER_PICONET_1_BD_LOWER_ADDR_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000220)
#define BT_CONTROLLER_PICONET_1_BD_LOWER_ADDR_OFFSET      0x00000220
#define BT_CONTROLLER_PICONET_1_BD_LOWER_ADDR_INDEX       0x00000088
#define BT_CONTROLLER_PICONET_1_BD_LOWER_ADDR_RESET       0x00000000

__INLINE uint32_t  bt_controller_piconet_1_bd_lower_addr_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PICONET_1_BD_LOWER_ADDR_ADDR);
}

__INLINE void bt_controller_piconet_1_bd_lower_addr_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PICONET_1_BD_LOWER_ADDR_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PICONET_1_BD_LOWER_ADDR_PN_1_BD_ADDR_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PICONET_1_BD_LOWER_ADDR_PN_1_BD_ADDR_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_PICONET_1_BD_LOWER_ADDR_PN_1_BD_ADDR_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PICONET_1_BD_LOWER_ADDR_PN_1_BD_ADDR_15_DOWNTO_0_RST    0x0

__INLINE uint16_t bt_controller_piconet_1_bd_lower_addr_pn_1_bd_addr_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PICONET_1_BD_LOWER_ADDR_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_piconet_1_bd_lower_addr_pn_1_bd_addr_15_downto_0_setf(uint16_t pn1bdaddr15downto0)
{
	ASSERT_ERR((((uint32_t)pn1bdaddr15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PICONET_1_BD_LOWER_ADDR_ADDR, (uint32_t)pn1bdaddr15downto0 << 0);
}

/**
 * @brief PICONET_1_BD_MIDDLE_ADRR register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 pn1_bd_addr_31_downto_16  0x0
 * </pre>
 */
#define BT_CONTROLLER_PICONET_1_BD_MIDDLE_ADRR_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000224)
#define BT_CONTROLLER_PICONET_1_BD_MIDDLE_ADRR_OFFSET      0x00000224
#define BT_CONTROLLER_PICONET_1_BD_MIDDLE_ADRR_INDEX       0x00000089
#define BT_CONTROLLER_PICONET_1_BD_MIDDLE_ADRR_RESET       0x00000000

__INLINE uint32_t  bt_controller_piconet_1_bd_middle_adrr_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PICONET_1_BD_MIDDLE_ADRR_ADDR);
}

__INLINE void bt_controller_piconet_1_bd_middle_adrr_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PICONET_1_BD_MIDDLE_ADRR_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PICONET_1_BD_MIDDLE_ADRR_PN_1_BD_ADDR_31_DOWNTO_16_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PICONET_1_BD_MIDDLE_ADRR_PN_1_BD_ADDR_31_DOWNTO_16_LSB    0
#define BT_CONTROLLER_PICONET_1_BD_MIDDLE_ADRR_PN_1_BD_ADDR_31_DOWNTO_16_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PICONET_1_BD_MIDDLE_ADRR_PN_1_BD_ADDR_31_DOWNTO_16_RST    0x0

__INLINE uint16_t bt_controller_piconet_1_bd_middle_adrr_pn_1_bd_addr_31_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PICONET_1_BD_MIDDLE_ADRR_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_piconet_1_bd_middle_adrr_pn_1_bd_addr_31_downto_16_setf(uint16_t pn1bdaddr31downto16)
{
	ASSERT_ERR((((uint32_t)pn1bdaddr31downto16 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PICONET_1_BD_MIDDLE_ADRR_ADDR, (uint32_t)pn1bdaddr31downto16 << 0);
}

/**
 * @brief PICONET_1_BD_UPPER_ADDR register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 pn1_bd_addr_47_downto_32  0x0
 * </pre>
 */
#define BT_CONTROLLER_PICONET_1_BD_UPPER_ADDR_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000228)
#define BT_CONTROLLER_PICONET_1_BD_UPPER_ADDR_OFFSET      0x00000228
#define BT_CONTROLLER_PICONET_1_BD_UPPER_ADDR_INDEX       0x0000008A
#define BT_CONTROLLER_PICONET_1_BD_UPPER_ADDR_RESET       0x00000000

__INLINE uint32_t  bt_controller_piconet_1_bd_upper_addr_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PICONET_1_BD_UPPER_ADDR_ADDR);
}

__INLINE void bt_controller_piconet_1_bd_upper_addr_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PICONET_1_BD_UPPER_ADDR_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PICONET_1_BD_UPPER_ADDR_PN_1_BD_ADDR_47_DOWNTO_32_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PICONET_1_BD_UPPER_ADDR_PN_1_BD_ADDR_47_DOWNTO_32_LSB    0
#define BT_CONTROLLER_PICONET_1_BD_UPPER_ADDR_PN_1_BD_ADDR_47_DOWNTO_32_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PICONET_1_BD_UPPER_ADDR_PN_1_BD_ADDR_47_DOWNTO_32_RST    0x0

__INLINE uint16_t bt_controller_piconet_1_bd_upper_addr_pn_1_bd_addr_47_downto_32_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PICONET_1_BD_UPPER_ADDR_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_piconet_1_bd_upper_addr_pn_1_bd_addr_47_downto_32_setf(uint16_t pn1bdaddr47downto32)
{
	ASSERT_ERR((((uint32_t)pn1bdaddr47downto32 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PICONET_1_BD_UPPER_ADDR_ADDR, (uint32_t)pn1bdaddr47downto32 << 0);
}

/**
 * @brief PICONET_1_PARITY_BITS_LOWER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 pn1_parity_bits_15_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_LOWER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000022C)
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_LOWER_OFFSET      0x0000022C
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_LOWER_INDEX       0x0000008B
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_LOWER_RESET       0x00000000

__INLINE uint32_t  bt_controller_piconet_1_parity_bits_lower_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PICONET_1_PARITY_BITS_LOWER_ADDR);
}

__INLINE void bt_controller_piconet_1_parity_bits_lower_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PICONET_1_PARITY_BITS_LOWER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_LOWER_PN_1_PARITY_BITS_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_LOWER_PN_1_PARITY_BITS_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_LOWER_PN_1_PARITY_BITS_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PICONET_1_PARITY_BITS_LOWER_PN_1_PARITY_BITS_15_DOWNTO_0_RST    0x0

__INLINE uint16_t bt_controller_piconet_1_parity_bits_lower_pn_1_parity_bits_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PICONET_1_PARITY_BITS_LOWER_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_piconet_1_parity_bits_lower_pn_1_parity_bits_15_downto_0_setf(uint16_t pn1paritybits15downto0)
{
	ASSERT_ERR((((uint32_t)pn1paritybits15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PICONET_1_PARITY_BITS_LOWER_ADDR, (uint32_t)pn1paritybits15downto0 << 0);
}

/**
 * @brief PICONET_1_PARITY_BITS_MIDDLE register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 pn1_parity_bits_31_downto_16 0x0
 * </pre>
 */
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_MIDDLE_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000230)
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_MIDDLE_OFFSET      0x00000230
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_MIDDLE_INDEX       0x0000008C
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_MIDDLE_RESET       0x00000000

__INLINE uint32_t  bt_controller_piconet_1_parity_bits_middle_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PICONET_1_PARITY_BITS_MIDDLE_ADDR);
}

__INLINE void bt_controller_piconet_1_parity_bits_middle_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PICONET_1_PARITY_BITS_MIDDLE_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_MIDDLE_PN_1_PARITY_BITS_31_DOWNTO_16_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_MIDDLE_PN_1_PARITY_BITS_31_DOWNTO_16_LSB    0
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_MIDDLE_PN_1_PARITY_BITS_31_DOWNTO_16_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PICONET_1_PARITY_BITS_MIDDLE_PN_1_PARITY_BITS_31_DOWNTO_16_RST    0x0

__INLINE uint16_t bt_controller_piconet_1_parity_bits_middle_pn_1_parity_bits_31_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PICONET_1_PARITY_BITS_MIDDLE_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_piconet_1_parity_bits_middle_pn_1_parity_bits_31_downto_16_setf(uint16_t pn1paritybits31downto16)
{
	ASSERT_ERR((((uint32_t)pn1paritybits31downto16 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PICONET_1_PARITY_BITS_MIDDLE_ADDR, (uint32_t)pn1paritybits31downto16 << 0);
}

/**
 * @brief PICONET_1_PARITY_BITS_UPPER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:02 piconet_parity_upper_reg_15_to_2_bits_are_reserved 0x0
 *    01:00 pn1_parity_bits_33_downto_32 0x0
 * </pre>
 */
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000234)
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_OFFSET      0x00000234
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_INDEX       0x0000008D
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_RESET       0x00000000

__INLINE uint32_t  bt_controller_piconet_1_parity_bits_upper_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_ADDR);
}

__INLINE void bt_controller_piconet_1_parity_bits_upper_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_PICONET_PARITY_UPPER_REG_15_TO_2_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FFFC)
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_PICONET_PARITY_UPPER_REG_15_TO_2_BITS_ARE_RESERVED_LSB    2
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_PICONET_PARITY_UPPER_REG_15_TO_2_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000000E)
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_PN_1_PARITY_BITS_33_DOWNTO_32_MASK    ((uint32_t)0x00000003)
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_PN_1_PARITY_BITS_33_DOWNTO_32_LSB    0
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_PN_1_PARITY_BITS_33_DOWNTO_32_WIDTH    ((uint32_t)0x00000002)

#define BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_PICONET_PARITY_UPPER_REG_15_TO_2_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_PN_1_PARITY_BITS_33_DOWNTO_32_RST    0x0

__INLINE void bt_controller_piconet_1_parity_bits_upper_pack(uint16_t piconet_parity_upper_reg_15_to_2_bits_are_reserved, uint8_t pn1_parity_bits_33_downto_32)
{
	ASSERT_ERR((((uint32_t)piconet_parity_upper_reg_15_to_2_bits_are_reserved << 2) & ~((uint32_t)0x0000FFFC)) == 0);
	ASSERT_ERR((((uint32_t)pn1_parity_bits_33_downto_32 << 0) & ~((uint32_t)0x00000003)) == 0);
	REG_PL_WR(BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_ADDR,  ((uint32_t)piconet_parity_upper_reg_15_to_2_bits_are_reserved << 2) |((uint32_t)pn1_parity_bits_33_downto_32 << 0));
}

__INLINE void bt_controller_piconet_1_parity_bits_upper_unpack(uint16_t* piconet_parity_upper_reg_15_to_2_bits_are_reserved, uint8_t* pn1_parity_bits_33_downto_32)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_ADDR);

	*piconet_parity_upper_reg_15_to_2_bits_are_reserved = (localVal & ((uint32_t)0x0000FFFC)) >>  2;
	*pn1_parity_bits_33_downto_32 = (localVal & ((uint32_t)0x00000003)) >>  0;
}

__INLINE uint16_t bt_controller_piconet_1_parity_bits_upper_piconet_parity_upper_reg_15_to_2_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFC)) >> 2);
}
__INLINE uint8_t bt_controller_piconet_1_parity_bits_upper_pn_1_parity_bits_33_downto_32_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000003)) >> 0);
}
__INLINE void bt_controller_piconet_1_parity_bits_upper_pn_1_parity_bits_33_downto_32_setf(uint8_t pn1paritybits33downto32)
{
	ASSERT_ERR((((uint32_t)pn1paritybits33downto32 << 0) & ~((uint32_t)0x00000003)) == 0);
	REG_PL_WR(BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_ADDR, (REG_PL_RD(BT_CONTROLLER_PICONET_1_PARITY_BITS_UPPER_ADDR) & ~((uint32_t)0x00000003)) | ((uint32_t)pn1paritybits33downto32 <<0));
}

/**
 * @brief PRIORITY_CNTRL register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    Tpoll_Lpm_pri_pn1         0              
 *    14    Tpoll_Lpm_pri_pn0         0              
 *    13    Lpm_prempt_pn0            0              
 *    12    Lpm_prempt_pn1            0              
 *    11    priority_cntrl_reg_11th_bit_not_used 0              
 *    10    Protocol_acl_pri          0              
 *    09    Page_acl_pri              0              
 *    08    priority_cntrl_8th_bit_notused 0              
 *    07    Pause_sco                 0              
 *    06    Page_acl_priority         0              
 *    05:04 priority_cntrl_reg_5_to_4_not_used 0x0
 *    03    Scan_disable              0              
 *    02    Sco_tpoll_pri_pn1         0              
 *    01    Sco_tpoll_pri_pn0         0              
 *    00    Sco_resp_pri              1              
 * </pre>
 */
#define BT_CONTROLLER_PRIORITY_CNTRL_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000238)
#define BT_CONTROLLER_PRIORITY_CNTRL_OFFSET      0x00000238
#define BT_CONTROLLER_PRIORITY_CNTRL_INDEX       0x0000008E
#define BT_CONTROLLER_PRIORITY_CNTRL_RESET       0x00000001

__INLINE uint32_t  bt_controller_priority_cntrl_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);
}

__INLINE void bt_controller_priority_cntrl_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PRIORITY_CNTRL_TPOLL_LPM_PRI_PN_1_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_PRIORITY_CNTRL_TPOLL_LPM_PRI_PN_1_POS    15
#define BT_CONTROLLER_PRIORITY_CNTRL_TPOLL_LPM_PRI_PN_0_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_PRIORITY_CNTRL_TPOLL_LPM_PRI_PN_0_POS    14
#define BT_CONTROLLER_PRIORITY_CNTRL_LPM_PREMPT_PN_0_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_PRIORITY_CNTRL_LPM_PREMPT_PN_0_POS    13
#define BT_CONTROLLER_PRIORITY_CNTRL_LPM_PREMPT_PN_1_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_PRIORITY_CNTRL_LPM_PREMPT_PN_1_POS    12
#define BT_CONTROLLER_PRIORITY_CNTRL_PRIORITY_CNTRL_REG_11_TH_BIT_NOT_USED_BIT    ((uint32_t)0x00000800)
#define BT_CONTROLLER_PRIORITY_CNTRL_PRIORITY_CNTRL_REG_11_TH_BIT_NOT_USED_POS    11
#define BT_CONTROLLER_PRIORITY_CNTRL_PROTOCOL_ACL_PRI_BIT    ((uint32_t)0x00000400)
#define BT_CONTROLLER_PRIORITY_CNTRL_PROTOCOL_ACL_PRI_POS    10
#define BT_CONTROLLER_PRIORITY_CNTRL_PAGE_ACL_PRI_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_PRIORITY_CNTRL_PAGE_ACL_PRI_POS    9
#define BT_CONTROLLER_PRIORITY_CNTRL_PRIORITY_CNTRL_8_TH_BIT_NOTUSED_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_PRIORITY_CNTRL_PRIORITY_CNTRL_8_TH_BIT_NOTUSED_POS    8
#define BT_CONTROLLER_PRIORITY_CNTRL_PAUSE_SCO_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_PRIORITY_CNTRL_PAUSE_SCO_POS    7
#define BT_CONTROLLER_PRIORITY_CNTRL_PAGE_ACL_PRIORITY_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_PRIORITY_CNTRL_PAGE_ACL_PRIORITY_POS    6
#define BT_CONTROLLER_PRIORITY_CNTRL_PRIORITY_CNTRL_REG_5_TO_4_NOT_USED_MASK    ((uint32_t)0x00000030)
#define BT_CONTROLLER_PRIORITY_CNTRL_PRIORITY_CNTRL_REG_5_TO_4_NOT_USED_LSB    4
#define BT_CONTROLLER_PRIORITY_CNTRL_PRIORITY_CNTRL_REG_5_TO_4_NOT_USED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_PRIORITY_CNTRL_SCAN_DISABLE_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_PRIORITY_CNTRL_SCAN_DISABLE_POS    3
#define BT_CONTROLLER_PRIORITY_CNTRL_SCO_TPOLL_PRI_PN_1_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_PRIORITY_CNTRL_SCO_TPOLL_PRI_PN_1_POS    2
#define BT_CONTROLLER_PRIORITY_CNTRL_SCO_TPOLL_PRI_PN_0_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_PRIORITY_CNTRL_SCO_TPOLL_PRI_PN_0_POS    1
#define BT_CONTROLLER_PRIORITY_CNTRL_SCO_RESP_PRI_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_PRIORITY_CNTRL_SCO_RESP_PRI_POS    0

#define BT_CONTROLLER_PRIORITY_CNTRL_TPOLL_LPM_PRI_PN_1_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_TPOLL_LPM_PRI_PN_0_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_LPM_PREMPT_PN_0_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_LPM_PREMPT_PN_1_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_PRIORITY_CNTRL_REG_11_TH_BIT_NOT_USED_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_PROTOCOL_ACL_PRI_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_PAGE_ACL_PRI_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_PRIORITY_CNTRL_8_TH_BIT_NOTUSED_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_PAUSE_SCO_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_PAGE_ACL_PRIORITY_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_PRIORITY_CNTRL_REG_5_TO_4_NOT_USED_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_SCAN_DISABLE_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_SCO_TPOLL_PRI_PN_1_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_SCO_TPOLL_PRI_PN_0_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_SCO_RESP_PRI_RST    0x1

__INLINE void bt_controller_priority_cntrl_pack(uint8_t tpoll_lpm_pri_pn1, uint8_t tpoll_lpm_pri_pn0, uint8_t lpm_prempt_pn0, uint8_t lpm_prempt_pn1, uint8_t priority_cntrl_reg_11th_bit_not_used, uint8_t protocol_acl_pri, uint8_t page_acl_pri, uint8_t priority_cntrl_8th_bit_notused, uint8_t pause_sco, uint8_t page_acl_priority, uint8_t priority_cntrl_reg_5_to_4_not_used, uint8_t scan_disable, uint8_t sco_tpoll_pri_pn1, uint8_t sco_tpoll_pri_pn0, uint8_t sco_resp_pri)
{
	ASSERT_ERR((((uint32_t)tpoll_lpm_pri_pn1 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)tpoll_lpm_pri_pn0 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)lpm_prempt_pn0 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)lpm_prempt_pn1 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)priority_cntrl_reg_11th_bit_not_used << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)protocol_acl_pri << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)page_acl_pri << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)priority_cntrl_8th_bit_notused << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)pause_sco << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)page_acl_priority << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)priority_cntrl_reg_5_to_4_not_used << 4) & ~((uint32_t)0x00000030)) == 0);
	ASSERT_ERR((((uint32_t)scan_disable << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)sco_tpoll_pri_pn1 << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)sco_tpoll_pri_pn0 << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)sco_resp_pri << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_ADDR,  ((uint32_t)tpoll_lpm_pri_pn1 << 15) |((uint32_t)tpoll_lpm_pri_pn0 << 14) |((uint32_t)lpm_prempt_pn0 << 13) |((uint32_t)lpm_prempt_pn1 << 12) |((uint32_t)priority_cntrl_reg_11th_bit_not_used << 11) |((uint32_t)protocol_acl_pri << 10) |((uint32_t)page_acl_pri << 9) |((uint32_t)priority_cntrl_8th_bit_notused << 8) |((uint32_t)pause_sco << 7) |((uint32_t)page_acl_priority << 6) |((uint32_t)priority_cntrl_reg_5_to_4_not_used << 4) |((uint32_t)scan_disable << 3) |((uint32_t)sco_tpoll_pri_pn1 << 2) |((uint32_t)sco_tpoll_pri_pn0 << 1) |((uint32_t)sco_resp_pri << 0));
}

__INLINE void bt_controller_priority_cntrl_unpack(uint8_t* tpoll_lpm_pri_pn1, uint8_t* tpoll_lpm_pri_pn0, uint8_t* lpm_prempt_pn0, uint8_t* lpm_prempt_pn1, uint8_t* priority_cntrl_reg_11th_bit_not_used, uint8_t* protocol_acl_pri, uint8_t* page_acl_pri, uint8_t* priority_cntrl_8th_bit_notused, uint8_t* pause_sco, uint8_t* page_acl_priority, uint8_t* priority_cntrl_reg_5_to_4_not_used, uint8_t* scan_disable, uint8_t* sco_tpoll_pri_pn1, uint8_t* sco_tpoll_pri_pn0, uint8_t* sco_resp_pri)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);

	*tpoll_lpm_pri_pn1 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*tpoll_lpm_pri_pn0 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*lpm_prempt_pn0 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*lpm_prempt_pn1 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*priority_cntrl_reg_11th_bit_not_used = (localVal & ((uint32_t)0x00000800)) >>  11;
	*protocol_acl_pri = (localVal & ((uint32_t)0x00000400)) >>  10;
	*page_acl_pri = (localVal & ((uint32_t)0x00000200)) >>  9;
	*priority_cntrl_8th_bit_notused = (localVal & ((uint32_t)0x00000100)) >>  8;
	*pause_sco = (localVal & ((uint32_t)0x00000080)) >>  7;
	*page_acl_priority = (localVal & ((uint32_t)0x00000040)) >>  6;
	*priority_cntrl_reg_5_to_4_not_used = (localVal & ((uint32_t)0x00000030)) >>  4;
	*scan_disable = (localVal & ((uint32_t)0x00000008)) >>  3;
	*sco_tpoll_pri_pn1 = (localVal & ((uint32_t)0x00000004)) >>  2;
	*sco_tpoll_pri_pn0 = (localVal & ((uint32_t)0x00000002)) >>  1;
	*sco_resp_pri = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_priority_cntrl_tpoll_lpm_pri_pn_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_priority_cntrl_tpoll_lpm_pri_pn_1_setf(uint8_t tpolllpmpripn1)
{
	ASSERT_ERR((((uint32_t)tpolllpmpripn1 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)tpolllpmpripn1 <<15));
}
__INLINE uint8_t bt_controller_priority_cntrl_tpoll_lpm_pri_pn_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_priority_cntrl_tpoll_lpm_pri_pn_0_setf(uint8_t tpolllpmpripn0)
{
	ASSERT_ERR((((uint32_t)tpolllpmpripn0 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)tpolllpmpripn0 <<14));
}
__INLINE uint8_t bt_controller_priority_cntrl_lpm_prempt_pn_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_priority_cntrl_lpm_prempt_pn_0_setf(uint8_t lpmpremptpn0)
{
	ASSERT_ERR((((uint32_t)lpmpremptpn0 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)lpmpremptpn0 <<13));
}
__INLINE uint8_t bt_controller_priority_cntrl_lpm_prempt_pn_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_priority_cntrl_lpm_prempt_pn_1_setf(uint8_t lpmpremptpn1)
{
	ASSERT_ERR((((uint32_t)lpmpremptpn1 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)lpmpremptpn1 <<12));
}
__INLINE uint8_t bt_controller_priority_cntrl_priority_cntrl_reg_11_th_bit_not_used_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t bt_controller_priority_cntrl_protocol_acl_pri_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void bt_controller_priority_cntrl_protocol_acl_pri_setf(uint8_t protocolaclpri)
{
	ASSERT_ERR((((uint32_t)protocolaclpri << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)protocolaclpri <<10));
}
__INLINE uint8_t bt_controller_priority_cntrl_page_acl_pri_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void bt_controller_priority_cntrl_page_acl_pri_setf(uint8_t pageaclpri)
{
	ASSERT_ERR((((uint32_t)pageaclpri << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)pageaclpri <<9));
}
__INLINE uint8_t bt_controller_priority_cntrl_priority_cntrl_8_th_bit_notused_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_priority_cntrl_priority_cntrl_8_th_bit_notused_setf(uint8_t prioritycntrl8thbitnotused)
{
	ASSERT_ERR((((uint32_t)prioritycntrl8thbitnotused << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)prioritycntrl8thbitnotused <<8));
}
__INLINE uint8_t bt_controller_priority_cntrl_pause_sco_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_priority_cntrl_pause_sco_setf(uint8_t pausesco)
{
	ASSERT_ERR((((uint32_t)pausesco << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)pausesco <<7));
}
__INLINE uint8_t bt_controller_priority_cntrl_page_acl_priority_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_priority_cntrl_page_acl_priority_setf(uint8_t pageaclpriority)
{
	ASSERT_ERR((((uint32_t)pageaclpriority << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)pageaclpriority <<6));
}
__INLINE uint8_t bt_controller_priority_cntrl_priority_cntrl_reg_5_to_4_not_used_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000030)) >> 4);
}
__INLINE uint8_t bt_controller_priority_cntrl_scan_disable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_priority_cntrl_scan_disable_setf(uint8_t scandisable)
{
	ASSERT_ERR((((uint32_t)scandisable << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)scandisable <<3));
}
__INLINE uint8_t bt_controller_priority_cntrl_sco_tpoll_pri_pn_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_priority_cntrl_sco_tpoll_pri_pn_1_setf(uint8_t scotpollpripn1)
{
	ASSERT_ERR((((uint32_t)scotpollpripn1 << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)scotpollpripn1 <<2));
}
__INLINE uint8_t bt_controller_priority_cntrl_sco_tpoll_pri_pn_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_priority_cntrl_sco_tpoll_pri_pn_0_setf(uint8_t scotpollpripn0)
{
	ASSERT_ERR((((uint32_t)scotpollpripn0 << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)scotpollpripn0 <<1));
}
__INLINE uint8_t bt_controller_priority_cntrl_sco_resp_pri_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_priority_cntrl_sco_resp_pri_setf(uint8_t scoresppri)
{
	ASSERT_ERR((((uint32_t)scoresppri << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)scoresppri <<0));
}

/**
 * @brief PRIORITY_CNTRL_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:06 priority_cntrl2_reg_15_to_6_bits_are_reserved 0x0
 *    05    Sniff_transition_priority 0              
 *    04    Pause_all_traffic         1              
 *    03    Crc_priority              0              
 *    02:00 Sniff_pause_slots_2_downto_0 0x7
 * </pre>
 */
#define BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000023C)
#define BT_CONTROLLER_PRIORITY_CNTRL_2_OFFSET      0x0000023C
#define BT_CONTROLLER_PRIORITY_CNTRL_2_INDEX       0x0000008F
#define BT_CONTROLLER_PRIORITY_CNTRL_2_RESET       0x00000017

__INLINE uint32_t  bt_controller_priority_cntrl_2_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR);
}

__INLINE void bt_controller_priority_cntrl_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PRIORITY_CNTRL_2_PRIORITY_CNTRL_2_REG_15_TO_6_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FFC0)
#define BT_CONTROLLER_PRIORITY_CNTRL_2_PRIORITY_CNTRL_2_REG_15_TO_6_BITS_ARE_RESERVED_LSB    6
#define BT_CONTROLLER_PRIORITY_CNTRL_2_PRIORITY_CNTRL_2_REG_15_TO_6_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000000A)
#define BT_CONTROLLER_PRIORITY_CNTRL_2_SNIFF_TRANSITION_PRIORITY_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_PRIORITY_CNTRL_2_SNIFF_TRANSITION_PRIORITY_POS    5
#define BT_CONTROLLER_PRIORITY_CNTRL_2_PAUSE_ALL_TRAFFIC_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_PRIORITY_CNTRL_2_PAUSE_ALL_TRAFFIC_POS    4
#define BT_CONTROLLER_PRIORITY_CNTRL_2_CRC_PRIORITY_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_PRIORITY_CNTRL_2_CRC_PRIORITY_POS    3
#define BT_CONTROLLER_PRIORITY_CNTRL_2_SNIFF_PAUSE_SLOTS_2_DOWNTO_0_MASK    ((uint32_t)0x00000007)
#define BT_CONTROLLER_PRIORITY_CNTRL_2_SNIFF_PAUSE_SLOTS_2_DOWNTO_0_LSB    0
#define BT_CONTROLLER_PRIORITY_CNTRL_2_SNIFF_PAUSE_SLOTS_2_DOWNTO_0_WIDTH    ((uint32_t)0x00000003)

#define BT_CONTROLLER_PRIORITY_CNTRL_2_PRIORITY_CNTRL_2_REG_15_TO_6_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_2_SNIFF_TRANSITION_PRIORITY_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_2_PAUSE_ALL_TRAFFIC_RST    0x1
#define BT_CONTROLLER_PRIORITY_CNTRL_2_CRC_PRIORITY_RST    0x0
#define BT_CONTROLLER_PRIORITY_CNTRL_2_SNIFF_PAUSE_SLOTS_2_DOWNTO_0_RST    0x7

__INLINE void bt_controller_priority_cntrl_2_pack(uint16_t priority_cntrl2_reg_15_to_6_bits_are_reserved, uint8_t sniff_transition_priority, uint8_t pause_all_traffic, uint8_t crc_priority, uint8_t sniff_pause_slots_2_downto_0)
{
	ASSERT_ERR((((uint32_t)priority_cntrl2_reg_15_to_6_bits_are_reserved << 6) & ~((uint32_t)0x0000FFC0)) == 0);
	ASSERT_ERR((((uint32_t)sniff_transition_priority << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)pause_all_traffic << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)crc_priority << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)sniff_pause_slots_2_downto_0 << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR,  ((uint32_t)priority_cntrl2_reg_15_to_6_bits_are_reserved << 6) |((uint32_t)sniff_transition_priority << 5) |((uint32_t)pause_all_traffic << 4) |((uint32_t)crc_priority << 3) |((uint32_t)sniff_pause_slots_2_downto_0 << 0));
}

__INLINE void bt_controller_priority_cntrl_2_unpack(uint16_t* priority_cntrl2_reg_15_to_6_bits_are_reserved, uint8_t* sniff_transition_priority, uint8_t* pause_all_traffic, uint8_t* crc_priority, uint8_t* sniff_pause_slots_2_downto_0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR);

	*priority_cntrl2_reg_15_to_6_bits_are_reserved = (localVal & ((uint32_t)0x0000FFC0)) >>  6;
	*sniff_transition_priority = (localVal & ((uint32_t)0x00000020)) >>  5;
	*pause_all_traffic = (localVal & ((uint32_t)0x00000010)) >>  4;
	*crc_priority = (localVal & ((uint32_t)0x00000008)) >>  3;
	*sniff_pause_slots_2_downto_0 = (localVal & ((uint32_t)0x00000007)) >>  0;
}

__INLINE uint16_t bt_controller_priority_cntrl_2_priority_cntrl_2_reg_15_to_6_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFC0)) >> 6);
}
__INLINE uint8_t bt_controller_priority_cntrl_2_sniff_transition_priority_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_priority_cntrl_2_sniff_transition_priority_setf(uint8_t snifftransitionpriority)
{
	ASSERT_ERR((((uint32_t)snifftransitionpriority << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)snifftransitionpriority <<5));
}
__INLINE uint8_t bt_controller_priority_cntrl_2_pause_all_traffic_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_priority_cntrl_2_pause_all_traffic_setf(uint8_t pausealltraffic)
{
	ASSERT_ERR((((uint32_t)pausealltraffic << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)pausealltraffic <<4));
}
__INLINE uint8_t bt_controller_priority_cntrl_2_crc_priority_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_priority_cntrl_2_crc_priority_setf(uint8_t crcpriority)
{
	ASSERT_ERR((((uint32_t)crcpriority << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)crcpriority <<3));
}
__INLINE uint8_t bt_controller_priority_cntrl_2_sniff_pause_slots_2_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000007)) >> 0);
}
__INLINE void bt_controller_priority_cntrl_2_sniff_pause_slots_2_downto_0_setf(uint8_t sniffpauseslots2downto0)
{
	ASSERT_ERR((((uint32_t)sniffpauseslots2downto0 << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIORITY_CNTRL_2_ADDR) & ~((uint32_t)0x00000007)) | ((uint32_t)sniffpauseslots2downto0 <<0));
}

/**
 * @brief RADIO_DATA_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Host_data_31_to_16_bits   0x0
 * </pre>
 */
#define BT_CONTROLLER_RADIO_DATA_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000240)
#define BT_CONTROLLER_RADIO_DATA_1_OFFSET      0x00000240
#define BT_CONTROLLER_RADIO_DATA_1_INDEX       0x00000090
#define BT_CONTROLLER_RADIO_DATA_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_radio_data_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RADIO_DATA_1_ADDR);
}

__INLINE void bt_controller_radio_data_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RADIO_DATA_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RADIO_DATA_1_HOST_DATA_31_TO_16_BITS_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RADIO_DATA_1_HOST_DATA_31_TO_16_BITS_LSB    0
#define BT_CONTROLLER_RADIO_DATA_1_HOST_DATA_31_TO_16_BITS_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RADIO_DATA_1_HOST_DATA_31_TO_16_BITS_RST    0x0

__INLINE uint16_t bt_controller_radio_data_1_host_data_31_to_16_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_DATA_1_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_radio_data_1_host_data_31_to_16_bits_setf(uint16_t hostdata31to16bits)
{
	ASSERT_ERR((((uint32_t)hostdata31to16bits << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_DATA_1_ADDR, (uint32_t)hostdata31to16bits << 0);
}

/**
 * @brief SYNC_GUARD_TIME_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 ahb_wait_count            0x19
 *    07    sync_guard_time_reg_7th_bit_is_reserved 0              
 *    06:00 Sync_detect_adjust        0x15
 * </pre>
 */
#define BT_CONTROLLER_SYNC_GUARD_TIME_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000244)
#define BT_CONTROLLER_SYNC_GUARD_TIME_REG_OFFSET      0x00000244
#define BT_CONTROLLER_SYNC_GUARD_TIME_REG_INDEX       0x00000091
#define BT_CONTROLLER_SYNC_GUARD_TIME_REG_RESET       0x00001915

__INLINE uint32_t  bt_controller_sync_guard_time_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_SYNC_GUARD_TIME_REG_ADDR);
}

__INLINE void bt_controller_sync_guard_time_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SYNC_GUARD_TIME_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SYNC_GUARD_TIME_REG_AHB_WAIT_COUNT_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_SYNC_GUARD_TIME_REG_AHB_WAIT_COUNT_LSB    8
#define BT_CONTROLLER_SYNC_GUARD_TIME_REG_AHB_WAIT_COUNT_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_SYNC_GUARD_TIME_REG_SYNC_GUARD_TIME_REG_7_TH_BIT_IS_RESERVED_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_SYNC_GUARD_TIME_REG_SYNC_GUARD_TIME_REG_7_TH_BIT_IS_RESERVED_POS    7
#define BT_CONTROLLER_SYNC_GUARD_TIME_REG_SYNC_DETECT_ADJUST_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_SYNC_GUARD_TIME_REG_SYNC_DETECT_ADJUST_LSB    0
#define BT_CONTROLLER_SYNC_GUARD_TIME_REG_SYNC_DETECT_ADJUST_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_SYNC_GUARD_TIME_REG_AHB_WAIT_COUNT_RST    0x19
#define BT_CONTROLLER_SYNC_GUARD_TIME_REG_SYNC_GUARD_TIME_REG_7_TH_BIT_IS_RESERVED_RST    0x0
#define BT_CONTROLLER_SYNC_GUARD_TIME_REG_SYNC_DETECT_ADJUST_RST    0x15

__INLINE void bt_controller_sync_guard_time_reg_pack(uint8_t ahb_wait_count, uint8_t sync_guard_time_reg_7th_bit_is_reserved, uint8_t sync_detect_adjust)
{
	ASSERT_ERR((((uint32_t)ahb_wait_count << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)sync_guard_time_reg_7th_bit_is_reserved << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)sync_detect_adjust << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_SYNC_GUARD_TIME_REG_ADDR,  ((uint32_t)ahb_wait_count << 8) |((uint32_t)sync_guard_time_reg_7th_bit_is_reserved << 7) |((uint32_t)sync_detect_adjust << 0));
}

__INLINE void bt_controller_sync_guard_time_reg_unpack(uint8_t* ahb_wait_count, uint8_t* sync_guard_time_reg_7th_bit_is_reserved, uint8_t* sync_detect_adjust)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SYNC_GUARD_TIME_REG_ADDR);

	*ahb_wait_count = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*sync_guard_time_reg_7th_bit_is_reserved = (localVal & ((uint32_t)0x00000080)) >>  7;
	*sync_detect_adjust = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_sync_guard_time_reg_ahb_wait_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SYNC_GUARD_TIME_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_sync_guard_time_reg_ahb_wait_count_setf(uint8_t ahbwaitcount)
{
	ASSERT_ERR((((uint32_t)ahbwaitcount << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_SYNC_GUARD_TIME_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SYNC_GUARD_TIME_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)ahbwaitcount <<8));
}
__INLINE uint8_t bt_controller_sync_guard_time_reg_sync_guard_time_reg_7_th_bit_is_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SYNC_GUARD_TIME_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_sync_guard_time_reg_sync_detect_adjust_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SYNC_GUARD_TIME_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void bt_controller_sync_guard_time_reg_sync_detect_adjust_setf(uint8_t syncdetectadjust)
{
	ASSERT_ERR((((uint32_t)syncdetectadjust << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_SYNC_GUARD_TIME_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SYNC_GUARD_TIME_REG_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)syncdetectadjust <<0));
}

/**
 * @brief CORR_CNFG_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:10 guard_width               0x28
 *    09    Channel_Acc_rssi_txrx     0              
 *    08    Channel_Acc_rssi          0              
 *    07:02 reseved_7bit_2bit_corr_cnfg_reg 0x0
 *    01    En_btc_rxtx               0              
 *    00    En_btc_txrx               0              
 * </pre>
 */
#define BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000258)
#define BT_CONTROLLER_CORR_CNFG_REGISTER_OFFSET      0x00000258
#define BT_CONTROLLER_CORR_CNFG_REGISTER_INDEX       0x00000096
#define BT_CONTROLLER_CORR_CNFG_REGISTER_RESET       0x00006000

__INLINE uint32_t  bt_controller_corr_cnfg_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR);
}

__INLINE void bt_controller_corr_cnfg_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CORR_CNFG_REGISTER_GUARD_WIDTH_MASK    ((uint32_t)0x0000FC00)
#define BT_CONTROLLER_CORR_CNFG_REGISTER_GUARD_WIDTH_LSB    10
#define BT_CONTROLLER_CORR_CNFG_REGISTER_GUARD_WIDTH_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_CORR_CNFG_REGISTER_CHANNEL_ACC_RSSI_TXRX_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_CORR_CNFG_REGISTER_CHANNEL_ACC_RSSI_TXRX_POS    9
#define BT_CONTROLLER_CORR_CNFG_REGISTER_CHANNEL_ACC_RSSI_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_CORR_CNFG_REGISTER_CHANNEL_ACC_RSSI_POS    8
#define BT_CONTROLLER_CORR_CNFG_REGISTER_RESEVED_7_BIT_2_BIT_CORR_CNFG_REG_MASK    ((uint32_t)0x000000FC)
#define BT_CONTROLLER_CORR_CNFG_REGISTER_RESEVED_7_BIT_2_BIT_CORR_CNFG_REG_LSB    2
#define BT_CONTROLLER_CORR_CNFG_REGISTER_RESEVED_7_BIT_2_BIT_CORR_CNFG_REG_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_CORR_CNFG_REGISTER_EN_BTC_RXTX_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_CORR_CNFG_REGISTER_EN_BTC_RXTX_POS    1
#define BT_CONTROLLER_CORR_CNFG_REGISTER_EN_BTC_TXRX_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_CORR_CNFG_REGISTER_EN_BTC_TXRX_POS    0

#define BT_CONTROLLER_CORR_CNFG_REGISTER_GUARD_WIDTH_RST    0x28
#define BT_CONTROLLER_CORR_CNFG_REGISTER_CHANNEL_ACC_RSSI_TXRX_RST    0x0
#define BT_CONTROLLER_CORR_CNFG_REGISTER_CHANNEL_ACC_RSSI_RST    0x0
#define BT_CONTROLLER_CORR_CNFG_REGISTER_RESEVED_7_BIT_2_BIT_CORR_CNFG_REG_RST    0x0
#define BT_CONTROLLER_CORR_CNFG_REGISTER_EN_BTC_RXTX_RST    0x0
#define BT_CONTROLLER_CORR_CNFG_REGISTER_EN_BTC_TXRX_RST    0x0

__INLINE void bt_controller_corr_cnfg_register_pack(uint8_t guard_width, uint8_t channel_acc_rssi_txrx, uint8_t channel_acc_rssi, uint8_t reseved_7bit_2bit_corr_cnfg_reg, uint8_t en_btc_rxtx, uint8_t en_btc_txrx)
{
	ASSERT_ERR((((uint32_t)guard_width << 10) & ~((uint32_t)0x0000FC00)) == 0);
	ASSERT_ERR((((uint32_t)channel_acc_rssi_txrx << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)channel_acc_rssi << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)reseved_7bit_2bit_corr_cnfg_reg << 2) & ~((uint32_t)0x000000FC)) == 0);
	ASSERT_ERR((((uint32_t)en_btc_rxtx << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)en_btc_txrx << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR,  ((uint32_t)guard_width << 10) |((uint32_t)channel_acc_rssi_txrx << 9) |((uint32_t)channel_acc_rssi << 8) |((uint32_t)reseved_7bit_2bit_corr_cnfg_reg << 2) |((uint32_t)en_btc_rxtx << 1) |((uint32_t)en_btc_txrx << 0));
}

__INLINE void bt_controller_corr_cnfg_register_unpack(uint8_t* guard_width, uint8_t* channel_acc_rssi_txrx, uint8_t* channel_acc_rssi, uint8_t* reseved_7bit_2bit_corr_cnfg_reg, uint8_t* en_btc_rxtx, uint8_t* en_btc_txrx)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR);

	*guard_width = (localVal & ((uint32_t)0x0000FC00)) >>  10;
	*channel_acc_rssi_txrx = (localVal & ((uint32_t)0x00000200)) >>  9;
	*channel_acc_rssi = (localVal & ((uint32_t)0x00000100)) >>  8;
	*reseved_7bit_2bit_corr_cnfg_reg = (localVal & ((uint32_t)0x000000FC)) >>  2;
	*en_btc_rxtx = (localVal & ((uint32_t)0x00000002)) >>  1;
	*en_btc_txrx = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_corr_cnfg_register_guard_width_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FC00)) >> 10);
}
__INLINE void bt_controller_corr_cnfg_register_guard_width_setf(uint8_t guardwidth)
{
	ASSERT_ERR((((uint32_t)guardwidth << 10) & ~((uint32_t)0x0000FC00)) == 0);
	REG_PL_WR(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR) & ~((uint32_t)0x0000FC00)) | ((uint32_t)guardwidth <<10));
}
__INLINE uint8_t bt_controller_corr_cnfg_register_channel_acc_rssi_txrx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void bt_controller_corr_cnfg_register_channel_acc_rssi_txrx_setf(uint8_t channelaccrssitxrx)
{
	ASSERT_ERR((((uint32_t)channelaccrssitxrx << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)channelaccrssitxrx <<9));
}
__INLINE uint8_t bt_controller_corr_cnfg_register_channel_acc_rssi_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_corr_cnfg_register_channel_acc_rssi_setf(uint8_t channelaccrssi)
{
	ASSERT_ERR((((uint32_t)channelaccrssi << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)channelaccrssi <<8));
}
__INLINE uint8_t bt_controller_corr_cnfg_register_reseved_7_bit_2_bit_corr_cnfg_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FC)) >> 2);
}
__INLINE uint8_t bt_controller_corr_cnfg_register_en_btc_rxtx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_corr_cnfg_register_en_btc_rxtx_setf(uint8_t enbtcrxtx)
{
	ASSERT_ERR((((uint32_t)enbtcrxtx << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)enbtcrxtx <<1));
}
__INLINE uint8_t bt_controller_corr_cnfg_register_en_btc_txrx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_corr_cnfg_register_en_btc_txrx_setf(uint8_t enbtctxrx)
{
	ASSERT_ERR((((uint32_t)enbtctxrx << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_CORR_CNFG_REGISTER_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)enbtctxrx <<0));
}

/**
 * @brief RADIO_CNFG_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 Stand_state               0x8
 *    11:08 not_used                  0x8
 *    07:04 Wait_idle                 0x8
 *    03    Radio_cntrl               1              
 *    02:00 radio_cfg1_reg_3_bits_are_reserved 0x4
 * </pre>
 */
#define BT_CONTROLLER_RADIO_CNFG_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000025C)
#define BT_CONTROLLER_RADIO_CNFG_1_OFFSET      0x0000025C
#define BT_CONTROLLER_RADIO_CNFG_1_INDEX       0x00000097
#define BT_CONTROLLER_RADIO_CNFG_1_RESET       0x0000888C

__INLINE uint32_t  bt_controller_radio_cnfg_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RADIO_CNFG_1_ADDR);
}

__INLINE void bt_controller_radio_cnfg_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RADIO_CNFG_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RADIO_CNFG_1_STAND_STATE_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_RADIO_CNFG_1_STAND_STATE_LSB    12
#define BT_CONTROLLER_RADIO_CNFG_1_STAND_STATE_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_RADIO_CNFG_1_NOT_USED_MASK    ((uint32_t)0x00000F00)
#define BT_CONTROLLER_RADIO_CNFG_1_NOT_USED_LSB    8
#define BT_CONTROLLER_RADIO_CNFG_1_NOT_USED_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_RADIO_CNFG_1_WAIT_IDLE_MASK    ((uint32_t)0x000000F0)
#define BT_CONTROLLER_RADIO_CNFG_1_WAIT_IDLE_LSB    4
#define BT_CONTROLLER_RADIO_CNFG_1_WAIT_IDLE_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_RADIO_CNFG_1_RADIO_CNTRL_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RADIO_CNFG_1_RADIO_CNTRL_POS    3
#define BT_CONTROLLER_RADIO_CNFG_1_RADIO_CFG_1_REG_3_BITS_ARE_RESERVED_MASK    ((uint32_t)0x00000007)
#define BT_CONTROLLER_RADIO_CNFG_1_RADIO_CFG_1_REG_3_BITS_ARE_RESERVED_LSB    0
#define BT_CONTROLLER_RADIO_CNFG_1_RADIO_CFG_1_REG_3_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000003)

#define BT_CONTROLLER_RADIO_CNFG_1_STAND_STATE_RST    0x8
#define BT_CONTROLLER_RADIO_CNFG_1_NOT_USED_RST    0x8
#define BT_CONTROLLER_RADIO_CNFG_1_WAIT_IDLE_RST    0x8
#define BT_CONTROLLER_RADIO_CNFG_1_RADIO_CNTRL_RST    0x1
#define BT_CONTROLLER_RADIO_CNFG_1_RADIO_CFG_1_REG_3_BITS_ARE_RESERVED_RST    0x4

__INLINE void bt_controller_radio_cnfg_1_pack(uint8_t stand_state, uint8_t not_used, uint8_t wait_idle, uint8_t radio_cntrl, uint8_t radio_cfg1_reg_3_bits_are_reserved)
{
	ASSERT_ERR((((uint32_t)stand_state << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)not_used << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)wait_idle << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)radio_cntrl << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)radio_cfg1_reg_3_bits_are_reserved << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CNFG_1_ADDR,  ((uint32_t)stand_state << 12) |((uint32_t)not_used << 8) |((uint32_t)wait_idle << 4) |((uint32_t)radio_cntrl << 3) |((uint32_t)radio_cfg1_reg_3_bits_are_reserved << 0));
}

__INLINE void bt_controller_radio_cnfg_1_unpack(uint8_t* stand_state, uint8_t* not_used, uint8_t* wait_idle, uint8_t* radio_cntrl, uint8_t* radio_cfg1_reg_3_bits_are_reserved)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CNFG_1_ADDR);

	*stand_state = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*not_used = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*wait_idle = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*radio_cntrl = (localVal & ((uint32_t)0x00000008)) >>  3;
	*radio_cfg1_reg_3_bits_are_reserved = (localVal & ((uint32_t)0x00000007)) >>  0;
}

__INLINE uint8_t bt_controller_radio_cnfg_1_stand_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CNFG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE void bt_controller_radio_cnfg_1_stand_state_setf(uint8_t standstate)
{
	ASSERT_ERR((((uint32_t)standstate << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CNFG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_CNFG_1_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)standstate <<12));
}
__INLINE uint8_t bt_controller_radio_cnfg_1_not_used_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CNFG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE uint8_t bt_controller_radio_cnfg_1_wait_idle_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CNFG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void bt_controller_radio_cnfg_1_wait_idle_setf(uint8_t waitidle)
{
	ASSERT_ERR((((uint32_t)waitidle << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CNFG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_CNFG_1_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)waitidle <<4));
}
__INLINE uint8_t bt_controller_radio_cnfg_1_radio_cntrl_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CNFG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_radio_cnfg_1_radio_cntrl_setf(uint8_t radiocntrl)
{
	ASSERT_ERR((((uint32_t)radiocntrl << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CNFG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_CNFG_1_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)radiocntrl <<3));
}
__INLINE uint8_t bt_controller_radio_cnfg_1_radio_cfg_1_reg_3_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CNFG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000007)) >> 0);
}

/**
 * @brief P_PULSE_DELAY_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 p_pulse_delay_reg_15_to_8_bits_are_reserved 0x0
 *    07:04 No_of_extra_preamble_bits 0xE
 *    03:01 p_pulse_delay_reg_3_to_1_bits_are_reserved 0x0
 *    00    internal_sync_detect      1              
 * </pre>
 */
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000260)
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_OFFSET      0x00000260
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_INDEX       0x00000098
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_RESET       0x000000E1

__INLINE uint32_t  bt_controller_p_pulse_delay_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_P_PULSE_DELAY_REGISTER_ADDR);
}

__INLINE void bt_controller_p_pulse_delay_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_P_PULSE_DELAY_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_P_PULSE_DELAY_REG_15_TO_8_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_P_PULSE_DELAY_REG_15_TO_8_BITS_ARE_RESERVED_LSB    8
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_P_PULSE_DELAY_REG_15_TO_8_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_NO_OF_EXTRA_PREAMBLE_BITS_MASK    ((uint32_t)0x000000F0)
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_NO_OF_EXTRA_PREAMBLE_BITS_LSB    4
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_NO_OF_EXTRA_PREAMBLE_BITS_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_P_PULSE_DELAY_REG_3_TO_1_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000000E)
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_P_PULSE_DELAY_REG_3_TO_1_BITS_ARE_RESERVED_LSB    1
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_P_PULSE_DELAY_REG_3_TO_1_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_INTERNAL_SYNC_DETECT_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_INTERNAL_SYNC_DETECT_POS    0

#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_P_PULSE_DELAY_REG_15_TO_8_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_NO_OF_EXTRA_PREAMBLE_BITS_RST    0xE
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_P_PULSE_DELAY_REG_3_TO_1_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_P_PULSE_DELAY_REGISTER_INTERNAL_SYNC_DETECT_RST    0x1

__INLINE void bt_controller_p_pulse_delay_register_pack(uint8_t p_pulse_delay_reg_15_to_8_bits_are_reserved, uint8_t no_of_extra_preamble_bits, uint8_t p_pulse_delay_reg_3_to_1_bits_are_reserved, uint8_t internal_sync_detect)
{
	ASSERT_ERR((((uint32_t)p_pulse_delay_reg_15_to_8_bits_are_reserved << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)no_of_extra_preamble_bits << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)p_pulse_delay_reg_3_to_1_bits_are_reserved << 1) & ~((uint32_t)0x0000000E)) == 0);
	ASSERT_ERR((((uint32_t)internal_sync_detect << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_P_PULSE_DELAY_REGISTER_ADDR,  ((uint32_t)p_pulse_delay_reg_15_to_8_bits_are_reserved << 8) |((uint32_t)no_of_extra_preamble_bits << 4) |((uint32_t)p_pulse_delay_reg_3_to_1_bits_are_reserved << 1) |((uint32_t)internal_sync_detect << 0));
}

__INLINE void bt_controller_p_pulse_delay_register_unpack(uint8_t* p_pulse_delay_reg_15_to_8_bits_are_reserved, uint8_t* no_of_extra_preamble_bits, uint8_t* p_pulse_delay_reg_3_to_1_bits_are_reserved, uint8_t* internal_sync_detect)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_P_PULSE_DELAY_REGISTER_ADDR);

	*p_pulse_delay_reg_15_to_8_bits_are_reserved = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*no_of_extra_preamble_bits = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*p_pulse_delay_reg_3_to_1_bits_are_reserved = (localVal & ((uint32_t)0x0000000E)) >>  1;
	*internal_sync_detect = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_p_pulse_delay_register_p_pulse_delay_reg_15_to_8_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_P_PULSE_DELAY_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t bt_controller_p_pulse_delay_register_no_of_extra_preamble_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_P_PULSE_DELAY_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void bt_controller_p_pulse_delay_register_no_of_extra_preamble_bits_setf(uint8_t noofextrapreamblebits)
{
	ASSERT_ERR((((uint32_t)noofextrapreamblebits << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(BT_CONTROLLER_P_PULSE_DELAY_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_P_PULSE_DELAY_REGISTER_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)noofextrapreamblebits <<4));
}
__INLINE uint8_t bt_controller_p_pulse_delay_register_p_pulse_delay_reg_3_to_1_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_P_PULSE_DELAY_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000E)) >> 1);
}
__INLINE uint8_t bt_controller_p_pulse_delay_register_internal_sync_detect_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_P_PULSE_DELAY_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_p_pulse_delay_register_internal_sync_detect_setf(uint8_t internalsyncdetect)
{
	ASSERT_ERR((((uint32_t)internalsyncdetect << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_P_PULSE_DELAY_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_P_PULSE_DELAY_REGISTER_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)internalsyncdetect <<0));
}

/**
 * @brief SPI_MOD_CONTROL_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:14 Adress_Data_Delay         0x0
 *    13    MSB_or_LSB_First          0              
 *    12    Adress_or_Data_First      0              
 *    11:07 Number_of_address_bits    0x80
 *    06:02 Number_of_data_bits       0x1F
 *    01    Three_Wire_or_Four_Wire   1              
 *    00    SPI_Enable_or_Disable     1              
 * </pre>
 */
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000264)
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_OFFSET      0x00000264
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_INDEX       0x00000099
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_RESET       0x0000087F

__INLINE uint32_t  bt_controller_spi_mod_control_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR);
}

__INLINE void bt_controller_spi_mod_control_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADRESS_DATA_DELAY_MASK    ((uint32_t)0x0000C000)
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADRESS_DATA_DELAY_LSB    14
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADRESS_DATA_DELAY_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_MSB_OR_LSB_FIRST_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_MSB_OR_LSB_FIRST_POS    13
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADRESS_OR_DATA_FIRST_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADRESS_OR_DATA_FIRST_POS    12
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_NUMBER_OF_ADDRESS_BITS_MASK    ((uint32_t)0x00000F80)
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_NUMBER_OF_ADDRESS_BITS_LSB    7
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_NUMBER_OF_ADDRESS_BITS_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_NUMBER_OF_DATA_BITS_MASK    ((uint32_t)0x0000007C)
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_NUMBER_OF_DATA_BITS_LSB    2
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_NUMBER_OF_DATA_BITS_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_THREE_WIRE_OR_FOUR_WIRE_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_THREE_WIRE_OR_FOUR_WIRE_POS    1
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_SPI_ENABLE_OR_DISABLE_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_SPI_ENABLE_OR_DISABLE_POS    0

#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADRESS_DATA_DELAY_RST    0x0
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_MSB_OR_LSB_FIRST_RST    0x0
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADRESS_OR_DATA_FIRST_RST    0x0
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_NUMBER_OF_ADDRESS_BITS_RST    0x80
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_NUMBER_OF_DATA_BITS_RST    0x1F
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_THREE_WIRE_OR_FOUR_WIRE_RST    0x1
#define BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_SPI_ENABLE_OR_DISABLE_RST    0x1

__INLINE void bt_controller_spi_mod_control_register_pack(uint8_t adress_data_delay, uint8_t msb_or_lsb_first, uint8_t adress_or_data_first, uint8_t number_of_address_bits, uint8_t number_of_data_bits, uint8_t three_wire_or_four_wire, uint8_t spi_enable_or_disable)
{
	ASSERT_ERR((((uint32_t)adress_data_delay << 14) & ~((uint32_t)0x0000C000)) == 0);
	ASSERT_ERR((((uint32_t)msb_or_lsb_first << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)adress_or_data_first << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)number_of_address_bits << 7) & ~((uint32_t)0x00000F80)) == 0);
	ASSERT_ERR((((uint32_t)number_of_data_bits << 2) & ~((uint32_t)0x0000007C)) == 0);
	ASSERT_ERR((((uint32_t)three_wire_or_four_wire << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spi_enable_or_disable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR,  ((uint32_t)adress_data_delay << 14) |((uint32_t)msb_or_lsb_first << 13) |((uint32_t)adress_or_data_first << 12) |((uint32_t)number_of_address_bits << 7) |((uint32_t)number_of_data_bits << 2) |((uint32_t)three_wire_or_four_wire << 1) |((uint32_t)spi_enable_or_disable << 0));
}

__INLINE void bt_controller_spi_mod_control_register_unpack(uint8_t* adress_data_delay, uint8_t* msb_or_lsb_first, uint8_t* adress_or_data_first, uint8_t* number_of_address_bits, uint8_t* number_of_data_bits, uint8_t* three_wire_or_four_wire, uint8_t* spi_enable_or_disable)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR);

	*adress_data_delay = (localVal & ((uint32_t)0x0000C000)) >>  14;
	*msb_or_lsb_first = (localVal & ((uint32_t)0x00002000)) >>  13;
	*adress_or_data_first = (localVal & ((uint32_t)0x00001000)) >>  12;
	*number_of_address_bits = (localVal & ((uint32_t)0x00000F80)) >>  7;
	*number_of_data_bits = (localVal & ((uint32_t)0x0000007C)) >>  2;
	*three_wire_or_four_wire = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spi_enable_or_disable = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_spi_mod_control_register_adress_data_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000C000)) >> 14);
}
__INLINE void bt_controller_spi_mod_control_register_adress_data_delay_setf(uint8_t adressdatadelay)
{
	ASSERT_ERR((((uint32_t)adressdatadelay << 14) & ~((uint32_t)0x0000C000)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR) & ~((uint32_t)0x0000C000)) | ((uint32_t)adressdatadelay <<14));
}
__INLINE uint8_t bt_controller_spi_mod_control_register_msb_or_lsb_first_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_spi_mod_control_register_msb_or_lsb_first_setf(uint8_t msborlsbfirst)
{
	ASSERT_ERR((((uint32_t)msborlsbfirst << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)msborlsbfirst <<13));
}
__INLINE uint8_t bt_controller_spi_mod_control_register_adress_or_data_first_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_spi_mod_control_register_adress_or_data_first_setf(uint8_t adressordatafirst)
{
	ASSERT_ERR((((uint32_t)adressordatafirst << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)adressordatafirst <<12));
}
__INLINE uint8_t bt_controller_spi_mod_control_register_number_of_address_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F80)) >> 7);
}
__INLINE void bt_controller_spi_mod_control_register_number_of_address_bits_setf(uint8_t numberofaddressbits)
{
	ASSERT_ERR((((uint32_t)numberofaddressbits << 7) & ~((uint32_t)0x00000F80)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR) & ~((uint32_t)0x00000F80)) | ((uint32_t)numberofaddressbits <<7));
}
__INLINE uint8_t bt_controller_spi_mod_control_register_number_of_data_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007C)) >> 2);
}
__INLINE void bt_controller_spi_mod_control_register_number_of_data_bits_setf(uint8_t numberofdatabits)
{
	ASSERT_ERR((((uint32_t)numberofdatabits << 2) & ~((uint32_t)0x0000007C)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR) & ~((uint32_t)0x0000007C)) | ((uint32_t)numberofdatabits <<2));
}
__INLINE uint8_t bt_controller_spi_mod_control_register_three_wire_or_four_wire_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_spi_mod_control_register_three_wire_or_four_wire_setf(uint8_t threewireorfourwire)
{
	ASSERT_ERR((((uint32_t)threewireorfourwire << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)threewireorfourwire <<1));
}
__INLINE uint8_t bt_controller_spi_mod_control_register_spi_enable_or_disable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_spi_mod_control_register_spi_enable_or_disable_setf(uint8_t spienableordisable)
{
	ASSERT_ERR((((uint32_t)spienableordisable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_MOD_CONTROL_REGISTER_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spienableordisable <<0));
}

/**
 * @brief SPI_CNTRL_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    spi_cntrl_reg_15th_bit_is_reserved 0              
 *    14    Clock_Data_Delay          0              
 *    13    ECC                       0              
 *    12:11 SE                        0x10
 *    10:09 Enble_Clock_Assertion_Delay 0x01
 *    08    CIS                       0              
 *    07    DEAD                      0              
 *    06    TEDR                      0              
 *    05    DES                       0              
 *    04:03 EDP                       0x0
 *    02:01 Enable_Clock_Deassertion_Delay 0x10
 *    00    EIS                       1              
 * </pre>
 */
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000268)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_OFFSET      0x00000268
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_INDEX       0x0000009A
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_RESET       0x00001205

__INLINE uint32_t  bt_controller_spi_cntrl_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR);
}

__INLINE void bt_controller_spi_cntrl_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_SPI_CNTRL_REG_15_TH_BIT_IS_RESERVED_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_SPI_CNTRL_REG_15_TH_BIT_IS_RESERVED_POS    15
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_CLOCK_DATA_DELAY_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_CLOCK_DATA_DELAY_POS    14
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_ECC_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_ECC_POS    13
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_SE_MASK    ((uint32_t)0x00001800)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_SE_LSB    11
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_SE_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_ENBLE_CLOCK_ASSERTION_DELAY_MASK    ((uint32_t)0x00000600)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_ENBLE_CLOCK_ASSERTION_DELAY_LSB    9
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_ENBLE_CLOCK_ASSERTION_DELAY_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_CIS_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_CIS_POS    8
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_DEAD_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_DEAD_POS    7
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_TEDR_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_TEDR_POS    6
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_DES_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_DES_POS    5
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_EDP_MASK    ((uint32_t)0x00000018)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_EDP_LSB    3
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_EDP_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_ENABLE_CLOCK_DEASSERTION_DELAY_MASK    ((uint32_t)0x00000006)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_ENABLE_CLOCK_DEASSERTION_DELAY_LSB    1
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_ENABLE_CLOCK_DEASSERTION_DELAY_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_EIS_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_EIS_POS    0

#define BT_CONTROLLER_SPI_CNTRL_REGISTER_SPI_CNTRL_REG_15_TH_BIT_IS_RESERVED_RST    0x0
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_CLOCK_DATA_DELAY_RST    0x0
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_ECC_RST    0x0
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_SE_RST    0x10
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_ENBLE_CLOCK_ASSERTION_DELAY_RST    0x01
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_CIS_RST    0x0
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_DEAD_RST    0x0
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_TEDR_RST    0x0
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_DES_RST    0x0
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_EDP_RST    0x0
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_ENABLE_CLOCK_DEASSERTION_DELAY_RST    0x10
#define BT_CONTROLLER_SPI_CNTRL_REGISTER_EIS_RST    0x1

__INLINE void bt_controller_spi_cntrl_register_pack(uint8_t spi_cntrl_reg_15th_bit_is_reserved, uint8_t clock_data_delay, uint8_t ecc, uint8_t se, uint8_t enble_clock_assertion_delay, uint8_t cis, uint8_t dead, uint8_t tedr, uint8_t des, uint8_t edp, uint8_t enable_clock_deassertion_delay, uint8_t eis)
{
	ASSERT_ERR((((uint32_t)spi_cntrl_reg_15th_bit_is_reserved << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)clock_data_delay << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)ecc << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)se << 11) & ~((uint32_t)0x00001800)) == 0);
	ASSERT_ERR((((uint32_t)enble_clock_assertion_delay << 9) & ~((uint32_t)0x00000600)) == 0);
	ASSERT_ERR((((uint32_t)cis << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)dead << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)tedr << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)des << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)edp << 3) & ~((uint32_t)0x00000018)) == 0);
	ASSERT_ERR((((uint32_t)enable_clock_deassertion_delay << 1) & ~((uint32_t)0x00000006)) == 0);
	ASSERT_ERR((((uint32_t)eis << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR,  ((uint32_t)spi_cntrl_reg_15th_bit_is_reserved << 15) |((uint32_t)clock_data_delay << 14) |((uint32_t)ecc << 13) |((uint32_t)se << 11) |((uint32_t)enble_clock_assertion_delay << 9) |((uint32_t)cis << 8) |((uint32_t)dead << 7) |((uint32_t)tedr << 6) |((uint32_t)des << 5) |((uint32_t)edp << 3) |((uint32_t)enable_clock_deassertion_delay << 1) |((uint32_t)eis << 0));
}

__INLINE void bt_controller_spi_cntrl_register_unpack(uint8_t* spi_cntrl_reg_15th_bit_is_reserved, uint8_t* clock_data_delay, uint8_t* ecc, uint8_t* se, uint8_t* enble_clock_assertion_delay, uint8_t* cis, uint8_t* dead, uint8_t* tedr, uint8_t* des, uint8_t* edp, uint8_t* enable_clock_deassertion_delay, uint8_t* eis)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR);

	*spi_cntrl_reg_15th_bit_is_reserved = (localVal & ((uint32_t)0x00008000)) >>  15;
	*clock_data_delay = (localVal & ((uint32_t)0x00004000)) >>  14;
	*ecc = (localVal & ((uint32_t)0x00002000)) >>  13;
	*se = (localVal & ((uint32_t)0x00001800)) >>  11;
	*enble_clock_assertion_delay = (localVal & ((uint32_t)0x00000600)) >>  9;
	*cis = (localVal & ((uint32_t)0x00000100)) >>  8;
	*dead = (localVal & ((uint32_t)0x00000080)) >>  7;
	*tedr = (localVal & ((uint32_t)0x00000040)) >>  6;
	*des = (localVal & ((uint32_t)0x00000020)) >>  5;
	*edp = (localVal & ((uint32_t)0x00000018)) >>  3;
	*enable_clock_deassertion_delay = (localVal & ((uint32_t)0x00000006)) >>  1;
	*eis = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_spi_cntrl_register_spi_cntrl_reg_15_th_bit_is_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t bt_controller_spi_cntrl_register_clock_data_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_spi_cntrl_register_clock_data_delay_setf(uint8_t clockdatadelay)
{
	ASSERT_ERR((((uint32_t)clockdatadelay << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)clockdatadelay <<14));
}
__INLINE uint8_t bt_controller_spi_cntrl_register_ecc_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_spi_cntrl_register_ecc_setf(uint8_t ecc)
{
	ASSERT_ERR((((uint32_t)ecc << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)ecc <<13));
}
__INLINE uint8_t bt_controller_spi_cntrl_register_se_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001800)) >> 11);
}
__INLINE void bt_controller_spi_cntrl_register_se_setf(uint8_t se)
{
	ASSERT_ERR((((uint32_t)se << 11) & ~((uint32_t)0x00001800)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR) & ~((uint32_t)0x00001800)) | ((uint32_t)se <<11));
}
__INLINE uint8_t bt_controller_spi_cntrl_register_enble_clock_assertion_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000600)) >> 9);
}
__INLINE void bt_controller_spi_cntrl_register_enble_clock_assertion_delay_setf(uint8_t enbleclockassertiondelay)
{
	ASSERT_ERR((((uint32_t)enbleclockassertiondelay << 9) & ~((uint32_t)0x00000600)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR) & ~((uint32_t)0x00000600)) | ((uint32_t)enbleclockassertiondelay <<9));
}
__INLINE uint8_t bt_controller_spi_cntrl_register_cis_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_spi_cntrl_register_cis_setf(uint8_t cis)
{
	ASSERT_ERR((((uint32_t)cis << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)cis <<8));
}
__INLINE uint8_t bt_controller_spi_cntrl_register_dead_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_spi_cntrl_register_dead_setf(uint8_t dead)
{
	ASSERT_ERR((((uint32_t)dead << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)dead <<7));
}
__INLINE uint8_t bt_controller_spi_cntrl_register_tedr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_spi_cntrl_register_tedr_setf(uint8_t tedr)
{
	ASSERT_ERR((((uint32_t)tedr << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)tedr <<6));
}
__INLINE uint8_t bt_controller_spi_cntrl_register_des_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_spi_cntrl_register_des_setf(uint8_t des)
{
	ASSERT_ERR((((uint32_t)des << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)des <<5));
}
__INLINE uint8_t bt_controller_spi_cntrl_register_edp_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000018)) >> 3);
}
__INLINE void bt_controller_spi_cntrl_register_edp_setf(uint8_t edp)
{
	ASSERT_ERR((((uint32_t)edp << 3) & ~((uint32_t)0x00000018)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR) & ~((uint32_t)0x00000018)) | ((uint32_t)edp <<3));
}
__INLINE uint8_t bt_controller_spi_cntrl_register_enable_clock_deassertion_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000006)) >> 1);
}
__INLINE void bt_controller_spi_cntrl_register_enable_clock_deassertion_delay_setf(uint8_t enableclockdeassertiondelay)
{
	ASSERT_ERR((((uint32_t)enableclockdeassertiondelay << 1) & ~((uint32_t)0x00000006)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR) & ~((uint32_t)0x00000006)) | ((uint32_t)enableclockdeassertiondelay <<1));
}
__INLINE uint8_t bt_controller_spi_cntrl_register_eis_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_spi_cntrl_register_eis_setf(uint8_t eis)
{
	ASSERT_ERR((((uint32_t)eis << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CNTRL_REGISTER_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)eis <<0));
}

/**
 * @brief POWER_GAIN_LNK_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 reserved_bit15_to_bit12_power_gain_link0 0x0
 *    11:08 step_size_power_gain_link0 0x1
 *    07    reserved_bit7_power_gain_link0 0              
 *    06:00 final_index_power_gain_link0 0x12
 * </pre>
 */
#define BT_CONTROLLER_POWER_GAIN_LNK_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000280)
#define BT_CONTROLLER_POWER_GAIN_LNK_0_OFFSET      0x00000280
#define BT_CONTROLLER_POWER_GAIN_LNK_0_INDEX       0x000000A0
#define BT_CONTROLLER_POWER_GAIN_LNK_0_RESET       0x00000112

__INLINE uint32_t  bt_controller_power_gain_lnk_0_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_0_ADDR);
}

__INLINE void bt_controller_power_gain_lnk_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_POWER_GAIN_LNK_0_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_0_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_POWER_GAIN_LNK_0_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_0_LSB    12
#define BT_CONTROLLER_POWER_GAIN_LNK_0_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_0_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_0_STEP_SIZE_POWER_GAIN_LINK_0_MASK    ((uint32_t)0x00000F00)
#define BT_CONTROLLER_POWER_GAIN_LNK_0_STEP_SIZE_POWER_GAIN_LINK_0_LSB    8
#define BT_CONTROLLER_POWER_GAIN_LNK_0_STEP_SIZE_POWER_GAIN_LINK_0_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_0_RESERVED_BIT_7_POWER_GAIN_LINK_0_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_POWER_GAIN_LNK_0_RESERVED_BIT_7_POWER_GAIN_LINK_0_POS    7
#define BT_CONTROLLER_POWER_GAIN_LNK_0_FINAL_INDEX_POWER_GAIN_LINK_0_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_POWER_GAIN_LNK_0_FINAL_INDEX_POWER_GAIN_LINK_0_LSB    0
#define BT_CONTROLLER_POWER_GAIN_LNK_0_FINAL_INDEX_POWER_GAIN_LINK_0_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_POWER_GAIN_LNK_0_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_0_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_0_STEP_SIZE_POWER_GAIN_LINK_0_RST    0x1
#define BT_CONTROLLER_POWER_GAIN_LNK_0_RESERVED_BIT_7_POWER_GAIN_LINK_0_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_0_FINAL_INDEX_POWER_GAIN_LINK_0_RST    0x12

__INLINE void bt_controller_power_gain_lnk_0_pack(uint8_t reserved_bit15_to_bit12_power_gain_link0, uint8_t step_size_power_gain_link0, uint8_t reserved_bit7_power_gain_link0, uint8_t final_index_power_gain_link0)
{
	ASSERT_ERR((((uint32_t)reserved_bit15_to_bit12_power_gain_link0 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)step_size_power_gain_link0 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)reserved_bit7_power_gain_link0 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)final_index_power_gain_link0 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_0_ADDR,  ((uint32_t)reserved_bit15_to_bit12_power_gain_link0 << 12) |((uint32_t)step_size_power_gain_link0 << 8) |((uint32_t)reserved_bit7_power_gain_link0 << 7) |((uint32_t)final_index_power_gain_link0 << 0));
}

__INLINE void bt_controller_power_gain_lnk_0_unpack(uint8_t* reserved_bit15_to_bit12_power_gain_link0, uint8_t* step_size_power_gain_link0, uint8_t* reserved_bit7_power_gain_link0, uint8_t* final_index_power_gain_link0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_0_ADDR);

	*reserved_bit15_to_bit12_power_gain_link0 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*step_size_power_gain_link0 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*reserved_bit7_power_gain_link0 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*final_index_power_gain_link0 = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_power_gain_lnk_0_reserved_bit_15_to_bit_12_power_gain_link_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE uint8_t bt_controller_power_gain_lnk_0_step_size_power_gain_link_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void bt_controller_power_gain_lnk_0_step_size_power_gain_link_0_setf(uint8_t stepsizepowergainlink0)
{
	ASSERT_ERR((((uint32_t)stepsizepowergainlink0 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_0_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_0_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)stepsizepowergainlink0 <<8));
}
__INLINE uint8_t bt_controller_power_gain_lnk_0_reserved_bit_7_power_gain_link_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_power_gain_lnk_0_final_index_power_gain_link_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void bt_controller_power_gain_lnk_0_final_index_power_gain_link_0_setf(uint8_t finalindexpowergainlink0)
{
	ASSERT_ERR((((uint32_t)finalindexpowergainlink0 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_0_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_0_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)finalindexpowergainlink0 <<0));
}

/**
 * @brief POWER_GAIN_LNK_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 reserved_bit15_to_bit12_power_gain_link1 0x0
 *    11:08 step_size_power_gain_link1 0x1
 *    07    reserved_bit7_power_gain_link1 0              
 *    06:00 final_index_power_gain_link1 0x12
 * </pre>
 */
#define BT_CONTROLLER_POWER_GAIN_LNK_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000284)
#define BT_CONTROLLER_POWER_GAIN_LNK_1_OFFSET      0x00000284
#define BT_CONTROLLER_POWER_GAIN_LNK_1_INDEX       0x000000A1
#define BT_CONTROLLER_POWER_GAIN_LNK_1_RESET       0x00000112

__INLINE uint32_t  bt_controller_power_gain_lnk_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_1_ADDR);
}

__INLINE void bt_controller_power_gain_lnk_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_POWER_GAIN_LNK_1_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_1_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_POWER_GAIN_LNK_1_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_1_LSB    12
#define BT_CONTROLLER_POWER_GAIN_LNK_1_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_1_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_1_STEP_SIZE_POWER_GAIN_LINK_1_MASK    ((uint32_t)0x00000F00)
#define BT_CONTROLLER_POWER_GAIN_LNK_1_STEP_SIZE_POWER_GAIN_LINK_1_LSB    8
#define BT_CONTROLLER_POWER_GAIN_LNK_1_STEP_SIZE_POWER_GAIN_LINK_1_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_1_RESERVED_BIT_7_POWER_GAIN_LINK_1_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_POWER_GAIN_LNK_1_RESERVED_BIT_7_POWER_GAIN_LINK_1_POS    7
#define BT_CONTROLLER_POWER_GAIN_LNK_1_FINAL_INDEX_POWER_GAIN_LINK_1_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_POWER_GAIN_LNK_1_FINAL_INDEX_POWER_GAIN_LINK_1_LSB    0
#define BT_CONTROLLER_POWER_GAIN_LNK_1_FINAL_INDEX_POWER_GAIN_LINK_1_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_POWER_GAIN_LNK_1_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_1_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_1_STEP_SIZE_POWER_GAIN_LINK_1_RST    0x1
#define BT_CONTROLLER_POWER_GAIN_LNK_1_RESERVED_BIT_7_POWER_GAIN_LINK_1_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_1_FINAL_INDEX_POWER_GAIN_LINK_1_RST    0x12

__INLINE void bt_controller_power_gain_lnk_1_pack(uint8_t reserved_bit15_to_bit12_power_gain_link1, uint8_t step_size_power_gain_link1, uint8_t reserved_bit7_power_gain_link1, uint8_t final_index_power_gain_link1)
{
	ASSERT_ERR((((uint32_t)reserved_bit15_to_bit12_power_gain_link1 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)step_size_power_gain_link1 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)reserved_bit7_power_gain_link1 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)final_index_power_gain_link1 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_1_ADDR,  ((uint32_t)reserved_bit15_to_bit12_power_gain_link1 << 12) |((uint32_t)step_size_power_gain_link1 << 8) |((uint32_t)reserved_bit7_power_gain_link1 << 7) |((uint32_t)final_index_power_gain_link1 << 0));
}

__INLINE void bt_controller_power_gain_lnk_1_unpack(uint8_t* reserved_bit15_to_bit12_power_gain_link1, uint8_t* step_size_power_gain_link1, uint8_t* reserved_bit7_power_gain_link1, uint8_t* final_index_power_gain_link1)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_1_ADDR);

	*reserved_bit15_to_bit12_power_gain_link1 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*step_size_power_gain_link1 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*reserved_bit7_power_gain_link1 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*final_index_power_gain_link1 = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_power_gain_lnk_1_reserved_bit_15_to_bit_12_power_gain_link_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE uint8_t bt_controller_power_gain_lnk_1_step_size_power_gain_link_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void bt_controller_power_gain_lnk_1_step_size_power_gain_link_1_setf(uint8_t stepsizepowergainlink1)
{
	ASSERT_ERR((((uint32_t)stepsizepowergainlink1 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_1_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_1_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)stepsizepowergainlink1 <<8));
}
__INLINE uint8_t bt_controller_power_gain_lnk_1_reserved_bit_7_power_gain_link_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_power_gain_lnk_1_final_index_power_gain_link_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void bt_controller_power_gain_lnk_1_final_index_power_gain_link_1_setf(uint8_t finalindexpowergainlink1)
{
	ASSERT_ERR((((uint32_t)finalindexpowergainlink1 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_1_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_1_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)finalindexpowergainlink1 <<0));
}

/**
 * @brief POWER_GAIN_LNK_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 reserved_bit15_to_bit12_power_gain_link2 0x0
 *    11:08 step_size_power_gain_link2 0x1
 *    07    reserved_bit7_power_gain_link2 0              
 *    06:00 final_index_power_gain_link2 0x12
 * </pre>
 */
#define BT_CONTROLLER_POWER_GAIN_LNK_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000288)
#define BT_CONTROLLER_POWER_GAIN_LNK_2_OFFSET      0x00000288
#define BT_CONTROLLER_POWER_GAIN_LNK_2_INDEX       0x000000A2
#define BT_CONTROLLER_POWER_GAIN_LNK_2_RESET       0x00000112

__INLINE uint32_t  bt_controller_power_gain_lnk_2_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_2_ADDR);
}

__INLINE void bt_controller_power_gain_lnk_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_POWER_GAIN_LNK_2_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_2_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_POWER_GAIN_LNK_2_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_2_LSB    12
#define BT_CONTROLLER_POWER_GAIN_LNK_2_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_2_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_2_STEP_SIZE_POWER_GAIN_LINK_2_MASK    ((uint32_t)0x00000F00)
#define BT_CONTROLLER_POWER_GAIN_LNK_2_STEP_SIZE_POWER_GAIN_LINK_2_LSB    8
#define BT_CONTROLLER_POWER_GAIN_LNK_2_STEP_SIZE_POWER_GAIN_LINK_2_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_2_RESERVED_BIT_7_POWER_GAIN_LINK_2_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_POWER_GAIN_LNK_2_RESERVED_BIT_7_POWER_GAIN_LINK_2_POS    7
#define BT_CONTROLLER_POWER_GAIN_LNK_2_FINAL_INDEX_POWER_GAIN_LINK_2_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_POWER_GAIN_LNK_2_FINAL_INDEX_POWER_GAIN_LINK_2_LSB    0
#define BT_CONTROLLER_POWER_GAIN_LNK_2_FINAL_INDEX_POWER_GAIN_LINK_2_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_POWER_GAIN_LNK_2_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_2_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_2_STEP_SIZE_POWER_GAIN_LINK_2_RST    0x1
#define BT_CONTROLLER_POWER_GAIN_LNK_2_RESERVED_BIT_7_POWER_GAIN_LINK_2_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_2_FINAL_INDEX_POWER_GAIN_LINK_2_RST    0x12

__INLINE void bt_controller_power_gain_lnk_2_pack(uint8_t reserved_bit15_to_bit12_power_gain_link2, uint8_t step_size_power_gain_link2, uint8_t reserved_bit7_power_gain_link2, uint8_t final_index_power_gain_link2)
{
	ASSERT_ERR((((uint32_t)reserved_bit15_to_bit12_power_gain_link2 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)step_size_power_gain_link2 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)reserved_bit7_power_gain_link2 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)final_index_power_gain_link2 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_2_ADDR,  ((uint32_t)reserved_bit15_to_bit12_power_gain_link2 << 12) |((uint32_t)step_size_power_gain_link2 << 8) |((uint32_t)reserved_bit7_power_gain_link2 << 7) |((uint32_t)final_index_power_gain_link2 << 0));
}

__INLINE void bt_controller_power_gain_lnk_2_unpack(uint8_t* reserved_bit15_to_bit12_power_gain_link2, uint8_t* step_size_power_gain_link2, uint8_t* reserved_bit7_power_gain_link2, uint8_t* final_index_power_gain_link2)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_2_ADDR);

	*reserved_bit15_to_bit12_power_gain_link2 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*step_size_power_gain_link2 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*reserved_bit7_power_gain_link2 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*final_index_power_gain_link2 = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_power_gain_lnk_2_reserved_bit_15_to_bit_12_power_gain_link_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE uint8_t bt_controller_power_gain_lnk_2_step_size_power_gain_link_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void bt_controller_power_gain_lnk_2_step_size_power_gain_link_2_setf(uint8_t stepsizepowergainlink2)
{
	ASSERT_ERR((((uint32_t)stepsizepowergainlink2 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_2_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_2_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)stepsizepowergainlink2 <<8));
}
__INLINE uint8_t bt_controller_power_gain_lnk_2_reserved_bit_7_power_gain_link_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_power_gain_lnk_2_final_index_power_gain_link_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void bt_controller_power_gain_lnk_2_final_index_power_gain_link_2_setf(uint8_t finalindexpowergainlink2)
{
	ASSERT_ERR((((uint32_t)finalindexpowergainlink2 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_2_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_2_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)finalindexpowergainlink2 <<0));
}

/**
 * @brief POWER_GAIN_LNK_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 reserved_bit15_to_bit12_power_gain_link3 0x0
 *    11:08 step_size_power_gain_link3 0x1
 *    07    reserved_bit7_power_gain_link3 0              
 *    06:00 final_index_power_gain_link3 0x12
 * </pre>
 */
#define BT_CONTROLLER_POWER_GAIN_LNK_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000028C)
#define BT_CONTROLLER_POWER_GAIN_LNK_3_OFFSET      0x0000028C
#define BT_CONTROLLER_POWER_GAIN_LNK_3_INDEX       0x000000A3
#define BT_CONTROLLER_POWER_GAIN_LNK_3_RESET       0x00000112

__INLINE uint32_t  bt_controller_power_gain_lnk_3_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_3_ADDR);
}

__INLINE void bt_controller_power_gain_lnk_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_POWER_GAIN_LNK_3_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_3_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_POWER_GAIN_LNK_3_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_3_LSB    12
#define BT_CONTROLLER_POWER_GAIN_LNK_3_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_3_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_3_STEP_SIZE_POWER_GAIN_LINK_3_MASK    ((uint32_t)0x00000F00)
#define BT_CONTROLLER_POWER_GAIN_LNK_3_STEP_SIZE_POWER_GAIN_LINK_3_LSB    8
#define BT_CONTROLLER_POWER_GAIN_LNK_3_STEP_SIZE_POWER_GAIN_LINK_3_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_3_RESERVED_BIT_7_POWER_GAIN_LINK_3_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_POWER_GAIN_LNK_3_RESERVED_BIT_7_POWER_GAIN_LINK_3_POS    7
#define BT_CONTROLLER_POWER_GAIN_LNK_3_FINAL_INDEX_POWER_GAIN_LINK_3_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_POWER_GAIN_LNK_3_FINAL_INDEX_POWER_GAIN_LINK_3_LSB    0
#define BT_CONTROLLER_POWER_GAIN_LNK_3_FINAL_INDEX_POWER_GAIN_LINK_3_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_POWER_GAIN_LNK_3_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_3_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_3_STEP_SIZE_POWER_GAIN_LINK_3_RST    0x1
#define BT_CONTROLLER_POWER_GAIN_LNK_3_RESERVED_BIT_7_POWER_GAIN_LINK_3_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_3_FINAL_INDEX_POWER_GAIN_LINK_3_RST    0x12

__INLINE void bt_controller_power_gain_lnk_3_pack(uint8_t reserved_bit15_to_bit12_power_gain_link3, uint8_t step_size_power_gain_link3, uint8_t reserved_bit7_power_gain_link3, uint8_t final_index_power_gain_link3)
{
	ASSERT_ERR((((uint32_t)reserved_bit15_to_bit12_power_gain_link3 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)step_size_power_gain_link3 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)reserved_bit7_power_gain_link3 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)final_index_power_gain_link3 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_3_ADDR,  ((uint32_t)reserved_bit15_to_bit12_power_gain_link3 << 12) |((uint32_t)step_size_power_gain_link3 << 8) |((uint32_t)reserved_bit7_power_gain_link3 << 7) |((uint32_t)final_index_power_gain_link3 << 0));
}

__INLINE void bt_controller_power_gain_lnk_3_unpack(uint8_t* reserved_bit15_to_bit12_power_gain_link3, uint8_t* step_size_power_gain_link3, uint8_t* reserved_bit7_power_gain_link3, uint8_t* final_index_power_gain_link3)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_3_ADDR);

	*reserved_bit15_to_bit12_power_gain_link3 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*step_size_power_gain_link3 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*reserved_bit7_power_gain_link3 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*final_index_power_gain_link3 = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_power_gain_lnk_3_reserved_bit_15_to_bit_12_power_gain_link_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE uint8_t bt_controller_power_gain_lnk_3_step_size_power_gain_link_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void bt_controller_power_gain_lnk_3_step_size_power_gain_link_3_setf(uint8_t stepsizepowergainlink3)
{
	ASSERT_ERR((((uint32_t)stepsizepowergainlink3 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_3_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_3_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)stepsizepowergainlink3 <<8));
}
__INLINE uint8_t bt_controller_power_gain_lnk_3_reserved_bit_7_power_gain_link_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_power_gain_lnk_3_final_index_power_gain_link_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void bt_controller_power_gain_lnk_3_final_index_power_gain_link_3_setf(uint8_t finalindexpowergainlink3)
{
	ASSERT_ERR((((uint32_t)finalindexpowergainlink3 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_3_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_3_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)finalindexpowergainlink3 <<0));
}

/**
 * @brief POWER_GAIN_LNK_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 reserved_bit15_to_bit12_power_gain_link4 0x0
 *    11:08 step_size_power_gain_link4 0x1
 *    07    reserved_bit7_power_gain_link4 0              
 *    06:00 final_index_power_gain_link4 0x12
 * </pre>
 */
#define BT_CONTROLLER_POWER_GAIN_LNK_4_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000290)
#define BT_CONTROLLER_POWER_GAIN_LNK_4_OFFSET      0x00000290
#define BT_CONTROLLER_POWER_GAIN_LNK_4_INDEX       0x000000A4
#define BT_CONTROLLER_POWER_GAIN_LNK_4_RESET       0x00000012

__INLINE uint32_t  bt_controller_power_gain_lnk_4_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_4_ADDR);
}

__INLINE void bt_controller_power_gain_lnk_4_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_4_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_POWER_GAIN_LNK_4_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_4_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_POWER_GAIN_LNK_4_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_4_LSB    12
#define BT_CONTROLLER_POWER_GAIN_LNK_4_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_4_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_4_STEP_SIZE_POWER_GAIN_LINK_4_MASK    ((uint32_t)0x00000F00)
#define BT_CONTROLLER_POWER_GAIN_LNK_4_STEP_SIZE_POWER_GAIN_LINK_4_LSB    8
#define BT_CONTROLLER_POWER_GAIN_LNK_4_STEP_SIZE_POWER_GAIN_LINK_4_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_4_RESERVED_BIT_7_POWER_GAIN_LINK_4_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_POWER_GAIN_LNK_4_RESERVED_BIT_7_POWER_GAIN_LINK_4_POS    7
#define BT_CONTROLLER_POWER_GAIN_LNK_4_FINAL_INDEX_POWER_GAIN_LINK_4_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_POWER_GAIN_LNK_4_FINAL_INDEX_POWER_GAIN_LINK_4_LSB    0
#define BT_CONTROLLER_POWER_GAIN_LNK_4_FINAL_INDEX_POWER_GAIN_LINK_4_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_POWER_GAIN_LNK_4_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_4_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_4_STEP_SIZE_POWER_GAIN_LINK_4_RST    0x1
#define BT_CONTROLLER_POWER_GAIN_LNK_4_RESERVED_BIT_7_POWER_GAIN_LINK_4_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_4_FINAL_INDEX_POWER_GAIN_LINK_4_RST    0x12

__INLINE void bt_controller_power_gain_lnk_4_pack(uint8_t reserved_bit15_to_bit12_power_gain_link4, uint8_t step_size_power_gain_link4, uint8_t reserved_bit7_power_gain_link4, uint8_t final_index_power_gain_link4)
{
	ASSERT_ERR((((uint32_t)reserved_bit15_to_bit12_power_gain_link4 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)step_size_power_gain_link4 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)reserved_bit7_power_gain_link4 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)final_index_power_gain_link4 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_4_ADDR,  ((uint32_t)reserved_bit15_to_bit12_power_gain_link4 << 12) |((uint32_t)step_size_power_gain_link4 << 8) |((uint32_t)reserved_bit7_power_gain_link4 << 7) |((uint32_t)final_index_power_gain_link4 << 0));
}

__INLINE void bt_controller_power_gain_lnk_4_unpack(uint8_t* reserved_bit15_to_bit12_power_gain_link4, uint8_t* step_size_power_gain_link4, uint8_t* reserved_bit7_power_gain_link4, uint8_t* final_index_power_gain_link4)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_4_ADDR);

	*reserved_bit15_to_bit12_power_gain_link4 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*step_size_power_gain_link4 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*reserved_bit7_power_gain_link4 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*final_index_power_gain_link4 = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_power_gain_lnk_4_reserved_bit_15_to_bit_12_power_gain_link_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE uint8_t bt_controller_power_gain_lnk_4_step_size_power_gain_link_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void bt_controller_power_gain_lnk_4_step_size_power_gain_link_4_setf(uint8_t stepsizepowergainlink4)
{
	ASSERT_ERR((((uint32_t)stepsizepowergainlink4 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_4_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_4_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)stepsizepowergainlink4 <<8));
}
__INLINE uint8_t bt_controller_power_gain_lnk_4_reserved_bit_7_power_gain_link_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_power_gain_lnk_4_final_index_power_gain_link_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void bt_controller_power_gain_lnk_4_final_index_power_gain_link_4_setf(uint8_t finalindexpowergainlink4)
{
	ASSERT_ERR((((uint32_t)finalindexpowergainlink4 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_4_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_4_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)finalindexpowergainlink4 <<0));
}

/**
 * @brief POWER_GAIN_LNK_5 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 reserved_bit15_to_bit12_power_gain_link5 0x0
 *    11:08 step_size_power_gain_link5 0x1
 *    07    reserved_bit7_power_gain_link5 0              
 *    06:00 final_index_power_gain_link5 0x12
 * </pre>
 */
#define BT_CONTROLLER_POWER_GAIN_LNK_5_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000294)
#define BT_CONTROLLER_POWER_GAIN_LNK_5_OFFSET      0x00000294
#define BT_CONTROLLER_POWER_GAIN_LNK_5_INDEX       0x000000A5
#define BT_CONTROLLER_POWER_GAIN_LNK_5_RESET       0x00000112

__INLINE uint32_t  bt_controller_power_gain_lnk_5_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_5_ADDR);
}

__INLINE void bt_controller_power_gain_lnk_5_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_5_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_POWER_GAIN_LNK_5_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_5_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_POWER_GAIN_LNK_5_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_5_LSB    12
#define BT_CONTROLLER_POWER_GAIN_LNK_5_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_5_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_5_STEP_SIZE_POWER_GAIN_LINK_5_MASK    ((uint32_t)0x00000F00)
#define BT_CONTROLLER_POWER_GAIN_LNK_5_STEP_SIZE_POWER_GAIN_LINK_5_LSB    8
#define BT_CONTROLLER_POWER_GAIN_LNK_5_STEP_SIZE_POWER_GAIN_LINK_5_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_5_RESERVED_BIT_7_POWER_GAIN_LINK_5_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_POWER_GAIN_LNK_5_RESERVED_BIT_7_POWER_GAIN_LINK_5_POS    7
#define BT_CONTROLLER_POWER_GAIN_LNK_5_FINAL_INDEX_POWER_GAIN_LINK_5_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_POWER_GAIN_LNK_5_FINAL_INDEX_POWER_GAIN_LINK_5_LSB    0
#define BT_CONTROLLER_POWER_GAIN_LNK_5_FINAL_INDEX_POWER_GAIN_LINK_5_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_POWER_GAIN_LNK_5_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_5_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_5_STEP_SIZE_POWER_GAIN_LINK_5_RST    0x1
#define BT_CONTROLLER_POWER_GAIN_LNK_5_RESERVED_BIT_7_POWER_GAIN_LINK_5_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_5_FINAL_INDEX_POWER_GAIN_LINK_5_RST    0x12

__INLINE void bt_controller_power_gain_lnk_5_pack(uint8_t reserved_bit15_to_bit12_power_gain_link5, uint8_t step_size_power_gain_link5, uint8_t reserved_bit7_power_gain_link5, uint8_t final_index_power_gain_link5)
{
	ASSERT_ERR((((uint32_t)reserved_bit15_to_bit12_power_gain_link5 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)step_size_power_gain_link5 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)reserved_bit7_power_gain_link5 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)final_index_power_gain_link5 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_5_ADDR,  ((uint32_t)reserved_bit15_to_bit12_power_gain_link5 << 12) |((uint32_t)step_size_power_gain_link5 << 8) |((uint32_t)reserved_bit7_power_gain_link5 << 7) |((uint32_t)final_index_power_gain_link5 << 0));
}

__INLINE void bt_controller_power_gain_lnk_5_unpack(uint8_t* reserved_bit15_to_bit12_power_gain_link5, uint8_t* step_size_power_gain_link5, uint8_t* reserved_bit7_power_gain_link5, uint8_t* final_index_power_gain_link5)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_5_ADDR);

	*reserved_bit15_to_bit12_power_gain_link5 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*step_size_power_gain_link5 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*reserved_bit7_power_gain_link5 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*final_index_power_gain_link5 = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_power_gain_lnk_5_reserved_bit_15_to_bit_12_power_gain_link_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_5_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE uint8_t bt_controller_power_gain_lnk_5_step_size_power_gain_link_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_5_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void bt_controller_power_gain_lnk_5_step_size_power_gain_link_5_setf(uint8_t stepsizepowergainlink5)
{
	ASSERT_ERR((((uint32_t)stepsizepowergainlink5 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_5_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_5_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)stepsizepowergainlink5 <<8));
}
__INLINE uint8_t bt_controller_power_gain_lnk_5_reserved_bit_7_power_gain_link_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_5_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_power_gain_lnk_5_final_index_power_gain_link_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_5_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void bt_controller_power_gain_lnk_5_final_index_power_gain_link_5_setf(uint8_t finalindexpowergainlink5)
{
	ASSERT_ERR((((uint32_t)finalindexpowergainlink5 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_5_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_5_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)finalindexpowergainlink5 <<0));
}

/**
 * @brief POWER_GAIN_LNK_6 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 reserved_bit15_to_bit12_power_gain_link6 0x0
 *    11:08 step_size_power_gain_link6 0x1
 *    07    reserved_bit7_power_gain_link6 0              
 *    06:00 final_index_power_gain_link6 0x12
 * </pre>
 */
#define BT_CONTROLLER_POWER_GAIN_LNK_6_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000298)
#define BT_CONTROLLER_POWER_GAIN_LNK_6_OFFSET      0x00000298
#define BT_CONTROLLER_POWER_GAIN_LNK_6_INDEX       0x000000A6
#define BT_CONTROLLER_POWER_GAIN_LNK_6_RESET       0x00000112

__INLINE uint32_t  bt_controller_power_gain_lnk_6_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_6_ADDR);
}

__INLINE void bt_controller_power_gain_lnk_6_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_6_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_POWER_GAIN_LNK_6_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_6_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_POWER_GAIN_LNK_6_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_6_LSB    12
#define BT_CONTROLLER_POWER_GAIN_LNK_6_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_6_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_6_STEP_SIZE_POWER_GAIN_LINK_6_MASK    ((uint32_t)0x00000F00)
#define BT_CONTROLLER_POWER_GAIN_LNK_6_STEP_SIZE_POWER_GAIN_LINK_6_LSB    8
#define BT_CONTROLLER_POWER_GAIN_LNK_6_STEP_SIZE_POWER_GAIN_LINK_6_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_6_RESERVED_BIT_7_POWER_GAIN_LINK_6_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_POWER_GAIN_LNK_6_RESERVED_BIT_7_POWER_GAIN_LINK_6_POS    7
#define BT_CONTROLLER_POWER_GAIN_LNK_6_FINAL_INDEX_POWER_GAIN_LINK_6_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_POWER_GAIN_LNK_6_FINAL_INDEX_POWER_GAIN_LINK_6_LSB    0
#define BT_CONTROLLER_POWER_GAIN_LNK_6_FINAL_INDEX_POWER_GAIN_LINK_6_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_POWER_GAIN_LNK_6_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_6_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_6_STEP_SIZE_POWER_GAIN_LINK_6_RST    0x1
#define BT_CONTROLLER_POWER_GAIN_LNK_6_RESERVED_BIT_7_POWER_GAIN_LINK_6_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_6_FINAL_INDEX_POWER_GAIN_LINK_6_RST    0x12

__INLINE void bt_controller_power_gain_lnk_6_pack(uint8_t reserved_bit15_to_bit12_power_gain_link6, uint8_t step_size_power_gain_link6, uint8_t reserved_bit7_power_gain_link6, uint8_t final_index_power_gain_link6)
{
	ASSERT_ERR((((uint32_t)reserved_bit15_to_bit12_power_gain_link6 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)step_size_power_gain_link6 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)reserved_bit7_power_gain_link6 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)final_index_power_gain_link6 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_6_ADDR,  ((uint32_t)reserved_bit15_to_bit12_power_gain_link6 << 12) |((uint32_t)step_size_power_gain_link6 << 8) |((uint32_t)reserved_bit7_power_gain_link6 << 7) |((uint32_t)final_index_power_gain_link6 << 0));
}

__INLINE void bt_controller_power_gain_lnk_6_unpack(uint8_t* reserved_bit15_to_bit12_power_gain_link6, uint8_t* step_size_power_gain_link6, uint8_t* reserved_bit7_power_gain_link6, uint8_t* final_index_power_gain_link6)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_6_ADDR);

	*reserved_bit15_to_bit12_power_gain_link6 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*step_size_power_gain_link6 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*reserved_bit7_power_gain_link6 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*final_index_power_gain_link6 = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_power_gain_lnk_6_reserved_bit_15_to_bit_12_power_gain_link_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_6_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE uint8_t bt_controller_power_gain_lnk_6_step_size_power_gain_link_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_6_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void bt_controller_power_gain_lnk_6_step_size_power_gain_link_6_setf(uint8_t stepsizepowergainlink6)
{
	ASSERT_ERR((((uint32_t)stepsizepowergainlink6 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_6_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_6_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)stepsizepowergainlink6 <<8));
}
__INLINE uint8_t bt_controller_power_gain_lnk_6_reserved_bit_7_power_gain_link_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_6_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_power_gain_lnk_6_final_index_power_gain_link_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_6_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void bt_controller_power_gain_lnk_6_final_index_power_gain_link_6_setf(uint8_t finalindexpowergainlink6)
{
	ASSERT_ERR((((uint32_t)finalindexpowergainlink6 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_6_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_6_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)finalindexpowergainlink6 <<0));
}

/**
 * @brief POWER_GAIN_LNK_7 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 reserved_bit15_to_bit12_power_gain_link7 0x0
 *    11:08 step_size_power_gain_link7 0x1
 *    07    reserved_bit7_power_gain_link7 0              
 *    06:00 final_index_power_gain_link7 0x12
 * </pre>
 */
#define BT_CONTROLLER_POWER_GAIN_LNK_7_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000029C)
#define BT_CONTROLLER_POWER_GAIN_LNK_7_OFFSET      0x0000029C
#define BT_CONTROLLER_POWER_GAIN_LNK_7_INDEX       0x000000A7
#define BT_CONTROLLER_POWER_GAIN_LNK_7_RESET       0x00000112

__INLINE uint32_t  bt_controller_power_gain_lnk_7_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_7_ADDR);
}

__INLINE void bt_controller_power_gain_lnk_7_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_7_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_POWER_GAIN_LNK_7_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_7_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_POWER_GAIN_LNK_7_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_7_LSB    12
#define BT_CONTROLLER_POWER_GAIN_LNK_7_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_7_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_7_STEP_SIZE_POWER_GAIN_LINK_7_MASK    ((uint32_t)0x00000F00)
#define BT_CONTROLLER_POWER_GAIN_LNK_7_STEP_SIZE_POWER_GAIN_LINK_7_LSB    8
#define BT_CONTROLLER_POWER_GAIN_LNK_7_STEP_SIZE_POWER_GAIN_LINK_7_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_7_RESERVED_BIT_7_POWER_GAIN_LINK_7_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_POWER_GAIN_LNK_7_RESERVED_BIT_7_POWER_GAIN_LINK_7_POS    7
#define BT_CONTROLLER_POWER_GAIN_LNK_7_FINAL_INDEX_POWER_GAIN_LINK_7_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_POWER_GAIN_LNK_7_FINAL_INDEX_POWER_GAIN_LINK_7_LSB    0
#define BT_CONTROLLER_POWER_GAIN_LNK_7_FINAL_INDEX_POWER_GAIN_LINK_7_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_POWER_GAIN_LNK_7_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_7_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_7_STEP_SIZE_POWER_GAIN_LINK_7_RST    0x1
#define BT_CONTROLLER_POWER_GAIN_LNK_7_RESERVED_BIT_7_POWER_GAIN_LINK_7_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_7_FINAL_INDEX_POWER_GAIN_LINK_7_RST    0x12

__INLINE void bt_controller_power_gain_lnk_7_pack(uint8_t reserved_bit15_to_bit12_power_gain_link7, uint8_t step_size_power_gain_link7, uint8_t reserved_bit7_power_gain_link7, uint8_t final_index_power_gain_link7)
{
	ASSERT_ERR((((uint32_t)reserved_bit15_to_bit12_power_gain_link7 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)step_size_power_gain_link7 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)reserved_bit7_power_gain_link7 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)final_index_power_gain_link7 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_7_ADDR,  ((uint32_t)reserved_bit15_to_bit12_power_gain_link7 << 12) |((uint32_t)step_size_power_gain_link7 << 8) |((uint32_t)reserved_bit7_power_gain_link7 << 7) |((uint32_t)final_index_power_gain_link7 << 0));
}

__INLINE void bt_controller_power_gain_lnk_7_unpack(uint8_t* reserved_bit15_to_bit12_power_gain_link7, uint8_t* step_size_power_gain_link7, uint8_t* reserved_bit7_power_gain_link7, uint8_t* final_index_power_gain_link7)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_7_ADDR);

	*reserved_bit15_to_bit12_power_gain_link7 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*step_size_power_gain_link7 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*reserved_bit7_power_gain_link7 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*final_index_power_gain_link7 = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_power_gain_lnk_7_reserved_bit_15_to_bit_12_power_gain_link_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_7_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE uint8_t bt_controller_power_gain_lnk_7_step_size_power_gain_link_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_7_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void bt_controller_power_gain_lnk_7_step_size_power_gain_link_7_setf(uint8_t stepsizepowergainlink7)
{
	ASSERT_ERR((((uint32_t)stepsizepowergainlink7 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_7_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_7_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)stepsizepowergainlink7 <<8));
}
__INLINE uint8_t bt_controller_power_gain_lnk_7_reserved_bit_7_power_gain_link_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_7_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_power_gain_lnk_7_final_index_power_gain_link_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_7_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void bt_controller_power_gain_lnk_7_final_index_power_gain_link_7_setf(uint8_t finalindexpowergainlink7)
{
	ASSERT_ERR((((uint32_t)finalindexpowergainlink7 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_7_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_7_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)finalindexpowergainlink7 <<0));
}

/**
 * @brief LUT_DEBUG_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    End_latch                 0              
 *    14:12 Lut_am_addr               0x0
 *    11:08 Lut_pkt_type              0x0
 *    07    Sniff_en1                 0              
 *    06    Sniff_en2                 0              
 *    05    Sniff_en8                 0              
 *    04    Sniff_en9                 0              
 *    03:00 Lut_cs                    0x0
 * </pre>
 */
#define BT_CONTROLLER_LUT_DEBUG_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002A0)
#define BT_CONTROLLER_LUT_DEBUG_1_OFFSET      0x000002A0
#define BT_CONTROLLER_LUT_DEBUG_1_INDEX       0x000000A8
#define BT_CONTROLLER_LUT_DEBUG_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_lut_debug_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR);
}

__INLINE void bt_controller_lut_debug_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_DEBUG_1_END_LATCH_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_LUT_DEBUG_1_END_LATCH_POS    15
#define BT_CONTROLLER_LUT_DEBUG_1_LUT_AM_ADDR_MASK    ((uint32_t)0x00007000)
#define BT_CONTROLLER_LUT_DEBUG_1_LUT_AM_ADDR_LSB    12
#define BT_CONTROLLER_LUT_DEBUG_1_LUT_AM_ADDR_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_LUT_DEBUG_1_LUT_PKT_TYPE_MASK    ((uint32_t)0x00000F00)
#define BT_CONTROLLER_LUT_DEBUG_1_LUT_PKT_TYPE_LSB    8
#define BT_CONTROLLER_LUT_DEBUG_1_LUT_PKT_TYPE_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_LUT_DEBUG_1_SNIFF_EN_1_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_LUT_DEBUG_1_SNIFF_EN_1_POS    7
#define BT_CONTROLLER_LUT_DEBUG_1_SNIFF_EN_2_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_LUT_DEBUG_1_SNIFF_EN_2_POS    6
#define BT_CONTROLLER_LUT_DEBUG_1_SNIFF_EN_8_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_LUT_DEBUG_1_SNIFF_EN_8_POS    5
#define BT_CONTROLLER_LUT_DEBUG_1_SNIFF_EN_9_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_LUT_DEBUG_1_SNIFF_EN_9_POS    4
#define BT_CONTROLLER_LUT_DEBUG_1_LUT_CS_MASK    ((uint32_t)0x0000000F)
#define BT_CONTROLLER_LUT_DEBUG_1_LUT_CS_LSB    0
#define BT_CONTROLLER_LUT_DEBUG_1_LUT_CS_WIDTH    ((uint32_t)0x00000004)

#define BT_CONTROLLER_LUT_DEBUG_1_END_LATCH_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_1_LUT_AM_ADDR_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_1_LUT_PKT_TYPE_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_1_SNIFF_EN_1_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_1_SNIFF_EN_2_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_1_SNIFF_EN_8_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_1_SNIFF_EN_9_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_1_LUT_CS_RST    0x0

__INLINE void bt_controller_lut_debug_1_pack(uint8_t end_latch, uint8_t lut_am_addr, uint8_t lut_pkt_type, uint8_t sniff_en1, uint8_t sniff_en2, uint8_t sniff_en8, uint8_t sniff_en9, uint8_t lut_cs)
{
	ASSERT_ERR((((uint32_t)end_latch << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)lut_am_addr << 12) & ~((uint32_t)0x00007000)) == 0);
	ASSERT_ERR((((uint32_t)lut_pkt_type << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)sniff_en1 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)sniff_en2 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)sniff_en8 << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)sniff_en9 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)lut_cs << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_1_ADDR,  ((uint32_t)end_latch << 15) |((uint32_t)lut_am_addr << 12) |((uint32_t)lut_pkt_type << 8) |((uint32_t)sniff_en1 << 7) |((uint32_t)sniff_en2 << 6) |((uint32_t)sniff_en8 << 5) |((uint32_t)sniff_en9 << 4) |((uint32_t)lut_cs << 0));
}

__INLINE void bt_controller_lut_debug_1_unpack(uint8_t* end_latch, uint8_t* lut_am_addr, uint8_t* lut_pkt_type, uint8_t* sniff_en1, uint8_t* sniff_en2, uint8_t* sniff_en8, uint8_t* sniff_en9, uint8_t* lut_cs)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR);

	*end_latch = (localVal & ((uint32_t)0x00008000)) >>  15;
	*lut_am_addr = (localVal & ((uint32_t)0x00007000)) >>  12;
	*lut_pkt_type = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*sniff_en1 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*sniff_en2 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*sniff_en8 = (localVal & ((uint32_t)0x00000020)) >>  5;
	*sniff_en9 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*lut_cs = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t bt_controller_lut_debug_1_end_latch_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_lut_debug_1_end_latch_setf(uint8_t endlatch)
{
	ASSERT_ERR((((uint32_t)endlatch << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)endlatch <<15));
}
__INLINE uint8_t bt_controller_lut_debug_1_lut_am_addr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00007000)) >> 12);
}
__INLINE void bt_controller_lut_debug_1_lut_am_addr_setf(uint8_t lutamaddr)
{
	ASSERT_ERR((((uint32_t)lutamaddr << 12) & ~((uint32_t)0x00007000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR) & ~((uint32_t)0x00007000)) | ((uint32_t)lutamaddr <<12));
}
__INLINE uint8_t bt_controller_lut_debug_1_lut_pkt_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void bt_controller_lut_debug_1_lut_pkt_type_setf(uint8_t lutpkttype)
{
	ASSERT_ERR((((uint32_t)lutpkttype << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)lutpkttype <<8));
}
__INLINE uint8_t bt_controller_lut_debug_1_sniff_en_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_lut_debug_1_sniff_en_1_setf(uint8_t sniffen1)
{
	ASSERT_ERR((((uint32_t)sniffen1 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)sniffen1 <<7));
}
__INLINE uint8_t bt_controller_lut_debug_1_sniff_en_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_lut_debug_1_sniff_en_2_setf(uint8_t sniffen2)
{
	ASSERT_ERR((((uint32_t)sniffen2 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)sniffen2 <<6));
}
__INLINE uint8_t bt_controller_lut_debug_1_sniff_en_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_lut_debug_1_sniff_en_8_setf(uint8_t sniffen8)
{
	ASSERT_ERR((((uint32_t)sniffen8 << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)sniffen8 <<5));
}
__INLINE uint8_t bt_controller_lut_debug_1_sniff_en_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_lut_debug_1_sniff_en_9_setf(uint8_t sniffen9)
{
	ASSERT_ERR((((uint32_t)sniffen9 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)sniffen9 <<4));
}
__INLINE uint8_t bt_controller_lut_debug_1_lut_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void bt_controller_lut_debug_1_lut_cs_setf(uint8_t lutcs)
{
	ASSERT_ERR((((uint32_t)lutcs << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_1_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)lutcs <<0));
}

/**
 * @brief LUT_DEBUG_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    Comm_tpoll1               0              
 *    14    Comm_tpoll2               0              
 *    13    Comm_tpoll8               0              
 *    12    Comm_tpoll9               0              
 *    11    Active1                   0              
 *    10    Active2                   0              
 *    09    Active8                   0              
 *    08    Active9                   0              
 *    07    Pn_switch_en_tx           0              
 *    06    Pn1_acl_traffic           0              
 *    05    Pn0_tpoll_activity        0              
 *    04    Pn1_tpoll_activity        0              
 *    03    Pn0_acl_traffic           0              
 *    02:00 Scatter_cs                0x0
 * </pre>
 */
#define BT_CONTROLLER_LUT_DEBUG_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002A4)
#define BT_CONTROLLER_LUT_DEBUG_2_OFFSET      0x000002A4
#define BT_CONTROLLER_LUT_DEBUG_2_INDEX       0x000000A9
#define BT_CONTROLLER_LUT_DEBUG_2_RESET       0x00000000

__INLINE uint32_t  bt_controller_lut_debug_2_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR);
}

__INLINE void bt_controller_lut_debug_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LUT_DEBUG_2_COMM_TPOLL_1_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_LUT_DEBUG_2_COMM_TPOLL_1_POS    15
#define BT_CONTROLLER_LUT_DEBUG_2_COMM_TPOLL_2_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_LUT_DEBUG_2_COMM_TPOLL_2_POS    14
#define BT_CONTROLLER_LUT_DEBUG_2_COMM_TPOLL_8_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_LUT_DEBUG_2_COMM_TPOLL_8_POS    13
#define BT_CONTROLLER_LUT_DEBUG_2_COMM_TPOLL_9_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_LUT_DEBUG_2_COMM_TPOLL_9_POS    12
#define BT_CONTROLLER_LUT_DEBUG_2_ACTIVE_1_BIT    ((uint32_t)0x00000800)
#define BT_CONTROLLER_LUT_DEBUG_2_ACTIVE_1_POS    11
#define BT_CONTROLLER_LUT_DEBUG_2_ACTIVE_2_BIT    ((uint32_t)0x00000400)
#define BT_CONTROLLER_LUT_DEBUG_2_ACTIVE_2_POS    10
#define BT_CONTROLLER_LUT_DEBUG_2_ACTIVE_8_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_LUT_DEBUG_2_ACTIVE_8_POS    9
#define BT_CONTROLLER_LUT_DEBUG_2_ACTIVE_9_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_LUT_DEBUG_2_ACTIVE_9_POS    8
#define BT_CONTROLLER_LUT_DEBUG_2_PN_SWITCH_EN_TX_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_LUT_DEBUG_2_PN_SWITCH_EN_TX_POS    7
#define BT_CONTROLLER_LUT_DEBUG_2_PN_1_ACL_TRAFFIC_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_LUT_DEBUG_2_PN_1_ACL_TRAFFIC_POS    6
#define BT_CONTROLLER_LUT_DEBUG_2_PN_0_TPOLL_ACTIVITY_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_LUT_DEBUG_2_PN_0_TPOLL_ACTIVITY_POS    5
#define BT_CONTROLLER_LUT_DEBUG_2_PN_1_TPOLL_ACTIVITY_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_LUT_DEBUG_2_PN_1_TPOLL_ACTIVITY_POS    4
#define BT_CONTROLLER_LUT_DEBUG_2_PN_0_ACL_TRAFFIC_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_LUT_DEBUG_2_PN_0_ACL_TRAFFIC_POS    3
#define BT_CONTROLLER_LUT_DEBUG_2_SCATTER_CS_MASK    ((uint32_t)0x00000007)
#define BT_CONTROLLER_LUT_DEBUG_2_SCATTER_CS_LSB    0
#define BT_CONTROLLER_LUT_DEBUG_2_SCATTER_CS_WIDTH    ((uint32_t)0x00000003)

#define BT_CONTROLLER_LUT_DEBUG_2_COMM_TPOLL_1_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_2_COMM_TPOLL_2_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_2_COMM_TPOLL_8_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_2_COMM_TPOLL_9_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_2_ACTIVE_1_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_2_ACTIVE_2_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_2_ACTIVE_8_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_2_ACTIVE_9_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_2_PN_SWITCH_EN_TX_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_2_PN_1_ACL_TRAFFIC_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_2_PN_0_TPOLL_ACTIVITY_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_2_PN_1_TPOLL_ACTIVITY_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_2_PN_0_ACL_TRAFFIC_RST    0x0
#define BT_CONTROLLER_LUT_DEBUG_2_SCATTER_CS_RST    0x0

__INLINE void bt_controller_lut_debug_2_pack(uint8_t comm_tpoll1, uint8_t comm_tpoll2, uint8_t comm_tpoll8, uint8_t comm_tpoll9, uint8_t active1, uint8_t active2, uint8_t active8, uint8_t active9, uint8_t pn_switch_en_tx, uint8_t pn1_acl_traffic, uint8_t pn0_tpoll_activity, uint8_t pn1_tpoll_activity, uint8_t pn0_acl_traffic, uint8_t scatter_cs)
{
	ASSERT_ERR((((uint32_t)comm_tpoll1 << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)comm_tpoll2 << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)comm_tpoll8 << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)comm_tpoll9 << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)active1 << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)active2 << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)active8 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)active9 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)pn_switch_en_tx << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)pn1_acl_traffic << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)pn0_tpoll_activity << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)pn1_tpoll_activity << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)pn0_acl_traffic << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)scatter_cs << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_2_ADDR,  ((uint32_t)comm_tpoll1 << 15) |((uint32_t)comm_tpoll2 << 14) |((uint32_t)comm_tpoll8 << 13) |((uint32_t)comm_tpoll9 << 12) |((uint32_t)active1 << 11) |((uint32_t)active2 << 10) |((uint32_t)active8 << 9) |((uint32_t)active9 << 8) |((uint32_t)pn_switch_en_tx << 7) |((uint32_t)pn1_acl_traffic << 6) |((uint32_t)pn0_tpoll_activity << 5) |((uint32_t)pn1_tpoll_activity << 4) |((uint32_t)pn0_acl_traffic << 3) |((uint32_t)scatter_cs << 0));
}

__INLINE void bt_controller_lut_debug_2_unpack(uint8_t* comm_tpoll1, uint8_t* comm_tpoll2, uint8_t* comm_tpoll8, uint8_t* comm_tpoll9, uint8_t* active1, uint8_t* active2, uint8_t* active8, uint8_t* active9, uint8_t* pn_switch_en_tx, uint8_t* pn1_acl_traffic, uint8_t* pn0_tpoll_activity, uint8_t* pn1_tpoll_activity, uint8_t* pn0_acl_traffic, uint8_t* scatter_cs)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR);

	*comm_tpoll1 = (localVal & ((uint32_t)0x00008000)) >>  15;
	*comm_tpoll2 = (localVal & ((uint32_t)0x00004000)) >>  14;
	*comm_tpoll8 = (localVal & ((uint32_t)0x00002000)) >>  13;
	*comm_tpoll9 = (localVal & ((uint32_t)0x00001000)) >>  12;
	*active1 = (localVal & ((uint32_t)0x00000800)) >>  11;
	*active2 = (localVal & ((uint32_t)0x00000400)) >>  10;
	*active8 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*active9 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*pn_switch_en_tx = (localVal & ((uint32_t)0x00000080)) >>  7;
	*pn1_acl_traffic = (localVal & ((uint32_t)0x00000040)) >>  6;
	*pn0_tpoll_activity = (localVal & ((uint32_t)0x00000020)) >>  5;
	*pn1_tpoll_activity = (localVal & ((uint32_t)0x00000010)) >>  4;
	*pn0_acl_traffic = (localVal & ((uint32_t)0x00000008)) >>  3;
	*scatter_cs = (localVal & ((uint32_t)0x00000007)) >>  0;
}

__INLINE uint8_t bt_controller_lut_debug_2_comm_tpoll_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_lut_debug_2_comm_tpoll_1_setf(uint8_t commtpoll1)
{
	ASSERT_ERR((((uint32_t)commtpoll1 << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)commtpoll1 <<15));
}
__INLINE uint8_t bt_controller_lut_debug_2_comm_tpoll_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_lut_debug_2_comm_tpoll_2_setf(uint8_t commtpoll2)
{
	ASSERT_ERR((((uint32_t)commtpoll2 << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)commtpoll2 <<14));
}
__INLINE uint8_t bt_controller_lut_debug_2_comm_tpoll_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_lut_debug_2_comm_tpoll_8_setf(uint8_t commtpoll8)
{
	ASSERT_ERR((((uint32_t)commtpoll8 << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)commtpoll8 <<13));
}
__INLINE uint8_t bt_controller_lut_debug_2_comm_tpoll_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_lut_debug_2_comm_tpoll_9_setf(uint8_t commtpoll9)
{
	ASSERT_ERR((((uint32_t)commtpoll9 << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)commtpoll9 <<12));
}
__INLINE uint8_t bt_controller_lut_debug_2_active_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void bt_controller_lut_debug_2_active_1_setf(uint8_t active1)
{
	ASSERT_ERR((((uint32_t)active1 << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)active1 <<11));
}
__INLINE uint8_t bt_controller_lut_debug_2_active_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void bt_controller_lut_debug_2_active_2_setf(uint8_t active2)
{
	ASSERT_ERR((((uint32_t)active2 << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)active2 <<10));
}
__INLINE uint8_t bt_controller_lut_debug_2_active_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE void bt_controller_lut_debug_2_active_8_setf(uint8_t active8)
{
	ASSERT_ERR((((uint32_t)active8 << 9) & ~((uint32_t)0x00000200)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR) & ~((uint32_t)0x00000200)) | ((uint32_t)active8 <<9));
}
__INLINE uint8_t bt_controller_lut_debug_2_active_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_lut_debug_2_active_9_setf(uint8_t active9)
{
	ASSERT_ERR((((uint32_t)active9 << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)active9 <<8));
}
__INLINE uint8_t bt_controller_lut_debug_2_pn_switch_en_tx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_lut_debug_2_pn_switch_en_tx_setf(uint8_t pnswitchentx)
{
	ASSERT_ERR((((uint32_t)pnswitchentx << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)pnswitchentx <<7));
}
__INLINE uint8_t bt_controller_lut_debug_2_pn_1_acl_traffic_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_lut_debug_2_pn_1_acl_traffic_setf(uint8_t pn1acltraffic)
{
	ASSERT_ERR((((uint32_t)pn1acltraffic << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)pn1acltraffic <<6));
}
__INLINE uint8_t bt_controller_lut_debug_2_pn_0_tpoll_activity_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_lut_debug_2_pn_0_tpoll_activity_setf(uint8_t pn0tpollactivity)
{
	ASSERT_ERR((((uint32_t)pn0tpollactivity << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)pn0tpollactivity <<5));
}
__INLINE uint8_t bt_controller_lut_debug_2_pn_1_tpoll_activity_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_lut_debug_2_pn_1_tpoll_activity_setf(uint8_t pn1tpollactivity)
{
	ASSERT_ERR((((uint32_t)pn1tpollactivity << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)pn1tpollactivity <<4));
}
__INLINE uint8_t bt_controller_lut_debug_2_pn_0_acl_traffic_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_lut_debug_2_pn_0_acl_traffic_setf(uint8_t pn0acltraffic)
{
	ASSERT_ERR((((uint32_t)pn0acltraffic << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)pn0acltraffic <<3));
}
__INLINE uint8_t bt_controller_lut_debug_2_scatter_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000007)) >> 0);
}
__INLINE void bt_controller_lut_debug_2_scatter_cs_setf(uint8_t scattercs)
{
	ASSERT_ERR((((uint32_t)scattercs << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(BT_CONTROLLER_LUT_DEBUG_2_ADDR, (REG_PL_RD(BT_CONTROLLER_LUT_DEBUG_2_ADDR) & ~((uint32_t)0x00000007)) | ((uint32_t)scattercs <<0));
}

/**
 * @brief BTC_DEBUG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:04 Ninq_page_counter         0x0
 *    03:00 Btc_cs                    0x0
 * </pre>
 */
#define BT_CONTROLLER_BTC_DEBUG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002A8)
#define BT_CONTROLLER_BTC_DEBUG_OFFSET      0x000002A8
#define BT_CONTROLLER_BTC_DEBUG_INDEX       0x000000AA
#define BT_CONTROLLER_BTC_DEBUG_RESET       0x00000000

__INLINE uint32_t  bt_controller_btc_debug_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_BTC_DEBUG_ADDR);
}

__INLINE void bt_controller_btc_debug_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_BTC_DEBUG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_BTC_DEBUG_NINQ_PAGE_COUNTER_MASK    ((uint32_t)0x0000FFF0)
#define BT_CONTROLLER_BTC_DEBUG_NINQ_PAGE_COUNTER_LSB    4
#define BT_CONTROLLER_BTC_DEBUG_NINQ_PAGE_COUNTER_WIDTH    ((uint32_t)0x0000000C)
#define BT_CONTROLLER_BTC_DEBUG_BTC_CS_MASK    ((uint32_t)0x0000000F)
#define BT_CONTROLLER_BTC_DEBUG_BTC_CS_LSB    0
#define BT_CONTROLLER_BTC_DEBUG_BTC_CS_WIDTH    ((uint32_t)0x00000004)

#define BT_CONTROLLER_BTC_DEBUG_NINQ_PAGE_COUNTER_RST    0x0
#define BT_CONTROLLER_BTC_DEBUG_BTC_CS_RST    0x0

__INLINE void bt_controller_btc_debug_pack(uint16_t ninq_page_counter, uint8_t btc_cs)
{
	ASSERT_ERR((((uint32_t)ninq_page_counter << 4) & ~((uint32_t)0x0000FFF0)) == 0);
	ASSERT_ERR((((uint32_t)btc_cs << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(BT_CONTROLLER_BTC_DEBUG_ADDR,  ((uint32_t)ninq_page_counter << 4) |((uint32_t)btc_cs << 0));
}

__INLINE void bt_controller_btc_debug_unpack(uint16_t* ninq_page_counter, uint8_t* btc_cs)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_BTC_DEBUG_ADDR);

	*ninq_page_counter = (localVal & ((uint32_t)0x0000FFF0)) >>  4;
	*btc_cs = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint16_t bt_controller_btc_debug_ninq_page_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_BTC_DEBUG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFF0)) >> 4);
}
__INLINE void bt_controller_btc_debug_ninq_page_counter_setf(uint16_t ninqpagecounter)
{
	ASSERT_ERR((((uint32_t)ninqpagecounter << 4) & ~((uint32_t)0x0000FFF0)) == 0);
	REG_PL_WR(BT_CONTROLLER_BTC_DEBUG_ADDR, (REG_PL_RD(BT_CONTROLLER_BTC_DEBUG_ADDR) & ~((uint32_t)0x0000FFF0)) | ((uint32_t)ninqpagecounter <<4));
}
__INLINE uint8_t bt_controller_btc_debug_btc_cs_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_BTC_DEBUG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void bt_controller_btc_debug_btc_cs_setf(uint8_t btccs)
{
	ASSERT_ERR((((uint32_t)btccs << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(BT_CONTROLLER_BTC_DEBUG_ADDR, (REG_PL_RD(BT_CONTROLLER_BTC_DEBUG_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)btccs <<0));
}

/**
 * @brief PCD_DEBUG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    pcd_debug_reg_15th_bit_is_reserved 0              
 *    14:12 Clk_cntr                  0x0
 *    11    Access_error              0              
 *    10:08 Pcd_am_addr               0x0
 *    07    Cbk_piconet1              0              
 *    06    Crc_frame_pn1             0              
 *    05    No_nack                   0              
 *    04    Fw_nack_edge_pn1          0              
 *    03    Fw_nack_edge_pn0          0              
 *    02    Nack_enable_reg           0              
 *    01    Pcd_tog_en_reg            0              
 *    00    Crc_frame_pn0             0              
 * </pre>
 */
#define BT_CONTROLLER_PCD_DEBUG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002AC)
#define BT_CONTROLLER_PCD_DEBUG_OFFSET      0x000002AC
#define BT_CONTROLLER_PCD_DEBUG_INDEX       0x000000AB
#define BT_CONTROLLER_PCD_DEBUG_RESET       0x00000000

__INLINE uint32_t  bt_controller_pcd_debug_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR);
}

__INLINE void bt_controller_pcd_debug_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PCD_DEBUG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PCD_DEBUG_PCD_DEBUG_REG_15_TH_BIT_IS_RESERVED_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_PCD_DEBUG_PCD_DEBUG_REG_15_TH_BIT_IS_RESERVED_POS    15
#define BT_CONTROLLER_PCD_DEBUG_CLK_CNTR_MASK    ((uint32_t)0x00007000)
#define BT_CONTROLLER_PCD_DEBUG_CLK_CNTR_LSB    12
#define BT_CONTROLLER_PCD_DEBUG_CLK_CNTR_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_PCD_DEBUG_ACCESS_ERROR_BIT    ((uint32_t)0x00000800)
#define BT_CONTROLLER_PCD_DEBUG_ACCESS_ERROR_POS    11
#define BT_CONTROLLER_PCD_DEBUG_PCD_AM_ADDR_MASK    ((uint32_t)0x00000700)
#define BT_CONTROLLER_PCD_DEBUG_PCD_AM_ADDR_LSB    8
#define BT_CONTROLLER_PCD_DEBUG_PCD_AM_ADDR_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_PCD_DEBUG_CBK_PICONET_1_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_PCD_DEBUG_CBK_PICONET_1_POS    7
#define BT_CONTROLLER_PCD_DEBUG_CRC_FRAME_PN_1_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_PCD_DEBUG_CRC_FRAME_PN_1_POS    6
#define BT_CONTROLLER_PCD_DEBUG_NO_NACK_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_PCD_DEBUG_NO_NACK_POS    5
#define BT_CONTROLLER_PCD_DEBUG_FW_NACK_EDGE_PN_1_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_PCD_DEBUG_FW_NACK_EDGE_PN_1_POS    4
#define BT_CONTROLLER_PCD_DEBUG_FW_NACK_EDGE_PN_0_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_PCD_DEBUG_FW_NACK_EDGE_PN_0_POS    3
#define BT_CONTROLLER_PCD_DEBUG_NACK_ENABLE_REG_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_PCD_DEBUG_NACK_ENABLE_REG_POS    2
#define BT_CONTROLLER_PCD_DEBUG_PCD_TOG_EN_REG_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_PCD_DEBUG_PCD_TOG_EN_REG_POS    1
#define BT_CONTROLLER_PCD_DEBUG_CRC_FRAME_PN_0_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_PCD_DEBUG_CRC_FRAME_PN_0_POS    0

#define BT_CONTROLLER_PCD_DEBUG_PCD_DEBUG_REG_15_TH_BIT_IS_RESERVED_RST    0x0
#define BT_CONTROLLER_PCD_DEBUG_CLK_CNTR_RST    0x0
#define BT_CONTROLLER_PCD_DEBUG_ACCESS_ERROR_RST    0x0
#define BT_CONTROLLER_PCD_DEBUG_PCD_AM_ADDR_RST    0x0
#define BT_CONTROLLER_PCD_DEBUG_CBK_PICONET_1_RST    0x0
#define BT_CONTROLLER_PCD_DEBUG_CRC_FRAME_PN_1_RST    0x0
#define BT_CONTROLLER_PCD_DEBUG_NO_NACK_RST    0x0
#define BT_CONTROLLER_PCD_DEBUG_FW_NACK_EDGE_PN_1_RST    0x0
#define BT_CONTROLLER_PCD_DEBUG_FW_NACK_EDGE_PN_0_RST    0x0
#define BT_CONTROLLER_PCD_DEBUG_NACK_ENABLE_REG_RST    0x0
#define BT_CONTROLLER_PCD_DEBUG_PCD_TOG_EN_REG_RST    0x0
#define BT_CONTROLLER_PCD_DEBUG_CRC_FRAME_PN_0_RST    0x0

__INLINE void bt_controller_pcd_debug_pack(uint8_t pcd_debug_reg_15th_bit_is_reserved, uint8_t clk_cntr, uint8_t access_error, uint8_t pcd_am_addr, uint8_t cbk_piconet1, uint8_t crc_frame_pn1, uint8_t no_nack, uint8_t fw_nack_edge_pn1, uint8_t fw_nack_edge_pn0, uint8_t nack_enable_reg, uint8_t pcd_tog_en_reg, uint8_t crc_frame_pn0)
{
	ASSERT_ERR((((uint32_t)pcd_debug_reg_15th_bit_is_reserved << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)clk_cntr << 12) & ~((uint32_t)0x00007000)) == 0);
	ASSERT_ERR((((uint32_t)access_error << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)pcd_am_addr << 8) & ~((uint32_t)0x00000700)) == 0);
	ASSERT_ERR((((uint32_t)cbk_piconet1 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)crc_frame_pn1 << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)no_nack << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)fw_nack_edge_pn1 << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)fw_nack_edge_pn0 << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)nack_enable_reg << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)pcd_tog_en_reg << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)crc_frame_pn0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_PCD_DEBUG_ADDR,  ((uint32_t)pcd_debug_reg_15th_bit_is_reserved << 15) |((uint32_t)clk_cntr << 12) |((uint32_t)access_error << 11) |((uint32_t)pcd_am_addr << 8) |((uint32_t)cbk_piconet1 << 7) |((uint32_t)crc_frame_pn1 << 6) |((uint32_t)no_nack << 5) |((uint32_t)fw_nack_edge_pn1 << 4) |((uint32_t)fw_nack_edge_pn0 << 3) |((uint32_t)nack_enable_reg << 2) |((uint32_t)pcd_tog_en_reg << 1) |((uint32_t)crc_frame_pn0 << 0));
}

__INLINE void bt_controller_pcd_debug_unpack(uint8_t* pcd_debug_reg_15th_bit_is_reserved, uint8_t* clk_cntr, uint8_t* access_error, uint8_t* pcd_am_addr, uint8_t* cbk_piconet1, uint8_t* crc_frame_pn1, uint8_t* no_nack, uint8_t* fw_nack_edge_pn1, uint8_t* fw_nack_edge_pn0, uint8_t* nack_enable_reg, uint8_t* pcd_tog_en_reg, uint8_t* crc_frame_pn0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR);

	*pcd_debug_reg_15th_bit_is_reserved = (localVal & ((uint32_t)0x00008000)) >>  15;
	*clk_cntr = (localVal & ((uint32_t)0x00007000)) >>  12;
	*access_error = (localVal & ((uint32_t)0x00000800)) >>  11;
	*pcd_am_addr = (localVal & ((uint32_t)0x00000700)) >>  8;
	*cbk_piconet1 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*crc_frame_pn1 = (localVal & ((uint32_t)0x00000040)) >>  6;
	*no_nack = (localVal & ((uint32_t)0x00000020)) >>  5;
	*fw_nack_edge_pn1 = (localVal & ((uint32_t)0x00000010)) >>  4;
	*fw_nack_edge_pn0 = (localVal & ((uint32_t)0x00000008)) >>  3;
	*nack_enable_reg = (localVal & ((uint32_t)0x00000004)) >>  2;
	*pcd_tog_en_reg = (localVal & ((uint32_t)0x00000002)) >>  1;
	*crc_frame_pn0 = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_pcd_debug_pcd_debug_reg_15_th_bit_is_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t bt_controller_pcd_debug_clk_cntr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00007000)) >> 12);
}
__INLINE void bt_controller_pcd_debug_clk_cntr_setf(uint8_t clkcntr)
{
	ASSERT_ERR((((uint32_t)clkcntr << 12) & ~((uint32_t)0x00007000)) == 0);
	REG_PL_WR(BT_CONTROLLER_PCD_DEBUG_ADDR, (REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR) & ~((uint32_t)0x00007000)) | ((uint32_t)clkcntr <<12));
}
__INLINE uint8_t bt_controller_pcd_debug_access_error_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void bt_controller_pcd_debug_access_error_setf(uint8_t accesserror)
{
	ASSERT_ERR((((uint32_t)accesserror << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(BT_CONTROLLER_PCD_DEBUG_ADDR, (REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)accesserror <<11));
}
__INLINE uint8_t bt_controller_pcd_debug_pcd_am_addr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000700)) >> 8);
}
__INLINE void bt_controller_pcd_debug_pcd_am_addr_setf(uint8_t pcdamaddr)
{
	ASSERT_ERR((((uint32_t)pcdamaddr << 8) & ~((uint32_t)0x00000700)) == 0);
	REG_PL_WR(BT_CONTROLLER_PCD_DEBUG_ADDR, (REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR) & ~((uint32_t)0x00000700)) | ((uint32_t)pcdamaddr <<8));
}
__INLINE uint8_t bt_controller_pcd_debug_cbk_piconet_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_pcd_debug_cbk_piconet_1_setf(uint8_t cbkpiconet1)
{
	ASSERT_ERR((((uint32_t)cbkpiconet1 << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_PCD_DEBUG_ADDR, (REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)cbkpiconet1 <<7));
}
__INLINE uint8_t bt_controller_pcd_debug_crc_frame_pn_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_pcd_debug_crc_frame_pn_1_setf(uint8_t crcframepn1)
{
	ASSERT_ERR((((uint32_t)crcframepn1 << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_PCD_DEBUG_ADDR, (REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)crcframepn1 <<6));
}
__INLINE uint8_t bt_controller_pcd_debug_no_nack_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_pcd_debug_no_nack_setf(uint8_t nonack)
{
	ASSERT_ERR((((uint32_t)nonack << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_PCD_DEBUG_ADDR, (REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)nonack <<5));
}
__INLINE uint8_t bt_controller_pcd_debug_fw_nack_edge_pn_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_pcd_debug_fw_nack_edge_pn_1_setf(uint8_t fwnackedgepn1)
{
	ASSERT_ERR((((uint32_t)fwnackedgepn1 << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_PCD_DEBUG_ADDR, (REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)fwnackedgepn1 <<4));
}
__INLINE uint8_t bt_controller_pcd_debug_fw_nack_edge_pn_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_pcd_debug_fw_nack_edge_pn_0_setf(uint8_t fwnackedgepn0)
{
	ASSERT_ERR((((uint32_t)fwnackedgepn0 << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_PCD_DEBUG_ADDR, (REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)fwnackedgepn0 <<3));
}
__INLINE uint8_t bt_controller_pcd_debug_nack_enable_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_pcd_debug_nack_enable_reg_setf(uint8_t nackenablereg)
{
	ASSERT_ERR((((uint32_t)nackenablereg << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_PCD_DEBUG_ADDR, (REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)nackenablereg <<2));
}
__INLINE uint8_t bt_controller_pcd_debug_pcd_tog_en_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_pcd_debug_pcd_tog_en_reg_setf(uint8_t pcdtogenreg)
{
	ASSERT_ERR((((uint32_t)pcdtogenreg << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_PCD_DEBUG_ADDR, (REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)pcdtogenreg <<1));
}
__INLINE uint8_t bt_controller_pcd_debug_crc_frame_pn_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_pcd_debug_crc_frame_pn_0_setf(uint8_t crcframepn0)
{
	ASSERT_ERR((((uint32_t)crcframepn0 << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_PCD_DEBUG_ADDR, (REG_PL_RD(BT_CONTROLLER_PCD_DEBUG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)crcframepn0 <<0));
}

/**
 * @brief PN_1_PKTRX register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Cgn_n_clock_pn1_rx        0x0
 * </pre>
 */
#define BT_CONTROLLER_PN_1_PKTRX_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002B0)
#define BT_CONTROLLER_PN_1_PKTRX_OFFSET      0x000002B0
#define BT_CONTROLLER_PN_1_PKTRX_INDEX       0x000000AC
#define BT_CONTROLLER_PN_1_PKTRX_RESET       0x00000000

__INLINE uint32_t  bt_controller_pn_1_pktrx_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PN_1_PKTRX_ADDR);
}

// field definitions
#define BT_CONTROLLER_PN_1_PKTRX_CGN_N_CLOCK_PN_1_RX_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PN_1_PKTRX_CGN_N_CLOCK_PN_1_RX_LSB    0
#define BT_CONTROLLER_PN_1_PKTRX_CGN_N_CLOCK_PN_1_RX_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PN_1_PKTRX_CGN_N_CLOCK_PN_1_RX_RST    0x0

__INLINE uint16_t bt_controller_pn_1_pktrx_cgn_n_clock_pn_1_rx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_1_PKTRX_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief PN_0_PKTRX register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Cgn_n_clock_pn0_rx        0x0
 * </pre>
 */
#define BT_CONTROLLER_PN_0_PKTRX_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002B4)
#define BT_CONTROLLER_PN_0_PKTRX_OFFSET      0x000002B4
#define BT_CONTROLLER_PN_0_PKTRX_INDEX       0x000000AD
#define BT_CONTROLLER_PN_0_PKTRX_RESET       0x00000000

__INLINE uint32_t  bt_controller_pn_0_pktrx_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PN_0_PKTRX_ADDR);
}

// field definitions
#define BT_CONTROLLER_PN_0_PKTRX_CGN_N_CLOCK_PN_0_RX_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PN_0_PKTRX_CGN_N_CLOCK_PN_0_RX_LSB    0
#define BT_CONTROLLER_PN_0_PKTRX_CGN_N_CLOCK_PN_0_RX_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PN_0_PKTRX_CGN_N_CLOCK_PN_0_RX_RST    0x0

__INLINE uint16_t bt_controller_pn_0_pktrx_cgn_n_clock_pn_0_rx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_PKTRX_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief PN_1_PKTTX register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Cgn_n_clock_pn1_tx        0x0
 * </pre>
 */
#define BT_CONTROLLER_PN_1_PKTTX_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002B8)
#define BT_CONTROLLER_PN_1_PKTTX_OFFSET      0x000002B8
#define BT_CONTROLLER_PN_1_PKTTX_INDEX       0x000000AE
#define BT_CONTROLLER_PN_1_PKTTX_RESET       0x00000000

__INLINE uint32_t  bt_controller_pn_1_pkttx_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PN_1_PKTTX_ADDR);
}

// field definitions
#define BT_CONTROLLER_PN_1_PKTTX_CGN_N_CLOCK_PN_1_TX_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PN_1_PKTTX_CGN_N_CLOCK_PN_1_TX_LSB    0
#define BT_CONTROLLER_PN_1_PKTTX_CGN_N_CLOCK_PN_1_TX_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PN_1_PKTTX_CGN_N_CLOCK_PN_1_TX_RST    0x0

__INLINE uint16_t bt_controller_pn_1_pkttx_cgn_n_clock_pn_1_tx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_1_PKTTX_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief PN_0_PKTTX register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Cgn_n_clock_pn0_tx        0x0
 * </pre>
 */
#define BT_CONTROLLER_PN_0_PKTTX_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002BC)
#define BT_CONTROLLER_PN_0_PKTTX_OFFSET      0x000002BC
#define BT_CONTROLLER_PN_0_PKTTX_INDEX       0x000000AF
#define BT_CONTROLLER_PN_0_PKTTX_RESET       0x00000000

__INLINE uint32_t  bt_controller_pn_0_pkttx_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PN_0_PKTTX_ADDR);
}

// field definitions
#define BT_CONTROLLER_PN_0_PKTTX_CGN_N_CLOCK_PN_0_TX_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PN_0_PKTTX_CGN_N_CLOCK_PN_0_TX_LSB    0
#define BT_CONTROLLER_PN_0_PKTTX_CGN_N_CLOCK_PN_0_TX_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PN_0_PKTTX_CGN_N_CLOCK_PN_0_TX_RST    0x0

__INLINE uint16_t bt_controller_pn_0_pkttx_cgn_n_clock_pn_0_tx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PN_0_PKTTX_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief POWER_GAIN_LNK_8 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 reserved_bit15_to_bit12_power_gain_link8 0x0
 *    11:08 step_size_power_gain_link8 0x1
 *    07    reserved_bit7_power_gain_link8 0              
 *    06:00 final_index_power_gain_link8 0x12
 * </pre>
 */
#define BT_CONTROLLER_POWER_GAIN_LNK_8_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002C8)
#define BT_CONTROLLER_POWER_GAIN_LNK_8_OFFSET      0x000002C8
#define BT_CONTROLLER_POWER_GAIN_LNK_8_INDEX       0x000000B2
#define BT_CONTROLLER_POWER_GAIN_LNK_8_RESET       0x00000112

__INLINE uint32_t  bt_controller_power_gain_lnk_8_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_8_ADDR);
}

__INLINE void bt_controller_power_gain_lnk_8_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_8_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_POWER_GAIN_LNK_8_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_8_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_POWER_GAIN_LNK_8_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_8_LSB    12
#define BT_CONTROLLER_POWER_GAIN_LNK_8_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_8_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_8_STEP_SIZE_POWER_GAIN_LINK_8_MASK    ((uint32_t)0x00000F00)
#define BT_CONTROLLER_POWER_GAIN_LNK_8_STEP_SIZE_POWER_GAIN_LINK_8_LSB    8
#define BT_CONTROLLER_POWER_GAIN_LNK_8_STEP_SIZE_POWER_GAIN_LINK_8_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_8_RESERVED_BIT_7_POWER_GAIN_LINK_8_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_POWER_GAIN_LNK_8_RESERVED_BIT_7_POWER_GAIN_LINK_8_POS    7
#define BT_CONTROLLER_POWER_GAIN_LNK_8_FINAL_INDEX_POWER_GAIN_LINK_8_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_POWER_GAIN_LNK_8_FINAL_INDEX_POWER_GAIN_LINK_8_LSB    0
#define BT_CONTROLLER_POWER_GAIN_LNK_8_FINAL_INDEX_POWER_GAIN_LINK_8_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_POWER_GAIN_LNK_8_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_8_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_8_STEP_SIZE_POWER_GAIN_LINK_8_RST    0x1
#define BT_CONTROLLER_POWER_GAIN_LNK_8_RESERVED_BIT_7_POWER_GAIN_LINK_8_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_8_FINAL_INDEX_POWER_GAIN_LINK_8_RST    0x12

__INLINE void bt_controller_power_gain_lnk_8_pack(uint8_t reserved_bit15_to_bit12_power_gain_link8, uint8_t step_size_power_gain_link8, uint8_t reserved_bit7_power_gain_link8, uint8_t final_index_power_gain_link8)
{
	ASSERT_ERR((((uint32_t)reserved_bit15_to_bit12_power_gain_link8 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)step_size_power_gain_link8 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)reserved_bit7_power_gain_link8 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)final_index_power_gain_link8 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_8_ADDR,  ((uint32_t)reserved_bit15_to_bit12_power_gain_link8 << 12) |((uint32_t)step_size_power_gain_link8 << 8) |((uint32_t)reserved_bit7_power_gain_link8 << 7) |((uint32_t)final_index_power_gain_link8 << 0));
}

__INLINE void bt_controller_power_gain_lnk_8_unpack(uint8_t* reserved_bit15_to_bit12_power_gain_link8, uint8_t* step_size_power_gain_link8, uint8_t* reserved_bit7_power_gain_link8, uint8_t* final_index_power_gain_link8)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_8_ADDR);

	*reserved_bit15_to_bit12_power_gain_link8 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*step_size_power_gain_link8 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*reserved_bit7_power_gain_link8 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*final_index_power_gain_link8 = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_power_gain_lnk_8_reserved_bit_15_to_bit_12_power_gain_link_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_8_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE uint8_t bt_controller_power_gain_lnk_8_step_size_power_gain_link_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_8_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void bt_controller_power_gain_lnk_8_step_size_power_gain_link_8_setf(uint8_t stepsizepowergainlink8)
{
	ASSERT_ERR((((uint32_t)stepsizepowergainlink8 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_8_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_8_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)stepsizepowergainlink8 <<8));
}
__INLINE uint8_t bt_controller_power_gain_lnk_8_reserved_bit_7_power_gain_link_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_8_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_power_gain_lnk_8_final_index_power_gain_link_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_8_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void bt_controller_power_gain_lnk_8_final_index_power_gain_link_8_setf(uint8_t finalindexpowergainlink8)
{
	ASSERT_ERR((((uint32_t)finalindexpowergainlink8 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_8_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_8_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)finalindexpowergainlink8 <<0));
}

/**
 * @brief PL_TX_COUNTER_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 TX_Payload_Counter0_15_downto_8_bits 0x0
 *    07:00 TX_Payload_Counter0_7_downto_0_bits 0x0
 * </pre>
 */
#define BT_CONTROLLER_PL_TX_COUNTER_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002CC)
#define BT_CONTROLLER_PL_TX_COUNTER_0_OFFSET      0x000002CC
#define BT_CONTROLLER_PL_TX_COUNTER_0_INDEX       0x000000B3
#define BT_CONTROLLER_PL_TX_COUNTER_0_RESET       0x00000000

__INLINE uint32_t  bt_controller_pl_tx_counter_0_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_0_ADDR);
}

__INLINE void bt_controller_pl_tx_counter_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PL_TX_COUNTER_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PL_TX_COUNTER_0_TX_PAYLOAD_COUNTER_0_15_DOWNTO_8_BITS_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_PL_TX_COUNTER_0_TX_PAYLOAD_COUNTER_0_15_DOWNTO_8_BITS_LSB    8
#define BT_CONTROLLER_PL_TX_COUNTER_0_TX_PAYLOAD_COUNTER_0_15_DOWNTO_8_BITS_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_PL_TX_COUNTER_0_TX_PAYLOAD_COUNTER_0_7_DOWNTO_0_BITS_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_PL_TX_COUNTER_0_TX_PAYLOAD_COUNTER_0_7_DOWNTO_0_BITS_LSB    0
#define BT_CONTROLLER_PL_TX_COUNTER_0_TX_PAYLOAD_COUNTER_0_7_DOWNTO_0_BITS_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_PL_TX_COUNTER_0_TX_PAYLOAD_COUNTER_0_15_DOWNTO_8_BITS_RST    0x0
#define BT_CONTROLLER_PL_TX_COUNTER_0_TX_PAYLOAD_COUNTER_0_7_DOWNTO_0_BITS_RST    0x0

__INLINE void bt_controller_pl_tx_counter_0_pack(uint8_t tx_payload_counter0_15_downto_8_bits, uint8_t tx_payload_counter0_7_downto_0_bits)
{
	ASSERT_ERR((((uint32_t)tx_payload_counter0_15_downto_8_bits << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)tx_payload_counter0_7_downto_0_bits << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_TX_COUNTER_0_ADDR,  ((uint32_t)tx_payload_counter0_15_downto_8_bits << 8) |((uint32_t)tx_payload_counter0_7_downto_0_bits << 0));
}

__INLINE void bt_controller_pl_tx_counter_0_unpack(uint8_t* tx_payload_counter0_15_downto_8_bits, uint8_t* tx_payload_counter0_7_downto_0_bits)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_0_ADDR);

	*tx_payload_counter0_15_downto_8_bits = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*tx_payload_counter0_7_downto_0_bits = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_pl_tx_counter_0_tx_payload_counter_0_15_downto_8_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_pl_tx_counter_0_tx_payload_counter_0_15_downto_8_bits_setf(uint8_t txpayloadcounter015downto8bits)
{
	ASSERT_ERR((((uint32_t)txpayloadcounter015downto8bits << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_TX_COUNTER_0_ADDR, (REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_0_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)txpayloadcounter015downto8bits <<8));
}
__INLINE uint8_t bt_controller_pl_tx_counter_0_tx_payload_counter_0_7_downto_0_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_pl_tx_counter_0_tx_payload_counter_0_7_downto_0_bits_setf(uint8_t txpayloadcounter07downto0bits)
{
	ASSERT_ERR((((uint32_t)txpayloadcounter07downto0bits << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_TX_COUNTER_0_ADDR, (REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_0_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)txpayloadcounter07downto0bits <<0));
}

/**
 * @brief PL_TX_COUNTER_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 TX_Payload_Counter1_31_downto_24_bits 0x0
 *    07:00 TX_Payload_Counter1_23_downto_16_bits 0x0
 * </pre>
 */
#define BT_CONTROLLER_PL_TX_COUNTER_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002D0)
#define BT_CONTROLLER_PL_TX_COUNTER_1_OFFSET      0x000002D0
#define BT_CONTROLLER_PL_TX_COUNTER_1_INDEX       0x000000B4
#define BT_CONTROLLER_PL_TX_COUNTER_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_pl_tx_counter_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_1_ADDR);
}

__INLINE void bt_controller_pl_tx_counter_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PL_TX_COUNTER_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PL_TX_COUNTER_1_TX_PAYLOAD_COUNTER_1_31_DOWNTO_24_BITS_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_PL_TX_COUNTER_1_TX_PAYLOAD_COUNTER_1_31_DOWNTO_24_BITS_LSB    8
#define BT_CONTROLLER_PL_TX_COUNTER_1_TX_PAYLOAD_COUNTER_1_31_DOWNTO_24_BITS_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_PL_TX_COUNTER_1_TX_PAYLOAD_COUNTER_1_23_DOWNTO_16_BITS_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_PL_TX_COUNTER_1_TX_PAYLOAD_COUNTER_1_23_DOWNTO_16_BITS_LSB    0
#define BT_CONTROLLER_PL_TX_COUNTER_1_TX_PAYLOAD_COUNTER_1_23_DOWNTO_16_BITS_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_PL_TX_COUNTER_1_TX_PAYLOAD_COUNTER_1_31_DOWNTO_24_BITS_RST    0x0
#define BT_CONTROLLER_PL_TX_COUNTER_1_TX_PAYLOAD_COUNTER_1_23_DOWNTO_16_BITS_RST    0x0

__INLINE void bt_controller_pl_tx_counter_1_pack(uint8_t tx_payload_counter1_31_downto_24_bits, uint8_t tx_payload_counter1_23_downto_16_bits)
{
	ASSERT_ERR((((uint32_t)tx_payload_counter1_31_downto_24_bits << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)tx_payload_counter1_23_downto_16_bits << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_TX_COUNTER_1_ADDR,  ((uint32_t)tx_payload_counter1_31_downto_24_bits << 8) |((uint32_t)tx_payload_counter1_23_downto_16_bits << 0));
}

__INLINE void bt_controller_pl_tx_counter_1_unpack(uint8_t* tx_payload_counter1_31_downto_24_bits, uint8_t* tx_payload_counter1_23_downto_16_bits)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_1_ADDR);

	*tx_payload_counter1_31_downto_24_bits = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*tx_payload_counter1_23_downto_16_bits = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_pl_tx_counter_1_tx_payload_counter_1_31_downto_24_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_pl_tx_counter_1_tx_payload_counter_1_31_downto_24_bits_setf(uint8_t txpayloadcounter131downto24bits)
{
	ASSERT_ERR((((uint32_t)txpayloadcounter131downto24bits << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_TX_COUNTER_1_ADDR, (REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_1_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)txpayloadcounter131downto24bits <<8));
}
__INLINE uint8_t bt_controller_pl_tx_counter_1_tx_payload_counter_1_23_downto_16_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_pl_tx_counter_1_tx_payload_counter_1_23_downto_16_bits_setf(uint8_t txpayloadcounter123downto16bits)
{
	ASSERT_ERR((((uint32_t)txpayloadcounter123downto16bits << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_TX_COUNTER_1_ADDR, (REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_1_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)txpayloadcounter123downto16bits <<0));
}

/**
 * @brief PL_TX_COUNTER_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 pl_tx_counter2_15_to_8_bits_are_reserved 0x0
 *    07:06 TX_Payload_Counter2_nonce_Type 0x0
 *    05    TX_Payload_Counter2_direction 0              
 *    04    TX_Payload_Counter2_zero_length_ACL_U 0              
 *    03:00 TX_Payload_Counter2_35_downto_32 0x0
 * </pre>
 */
#define BT_CONTROLLER_PL_TX_COUNTER_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002D4)
#define BT_CONTROLLER_PL_TX_COUNTER_2_OFFSET      0x000002D4
#define BT_CONTROLLER_PL_TX_COUNTER_2_INDEX       0x000000B5
#define BT_CONTROLLER_PL_TX_COUNTER_2_RESET       0x00000000

__INLINE uint32_t  bt_controller_pl_tx_counter_2_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR);
}

__INLINE void bt_controller_pl_tx_counter_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PL_TX_COUNTER_2_PL_TX_COUNTER_2_15_TO_8_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_PL_TX_COUNTER_2_PL_TX_COUNTER_2_15_TO_8_BITS_ARE_RESERVED_LSB    8
#define BT_CONTROLLER_PL_TX_COUNTER_2_PL_TX_COUNTER_2_15_TO_8_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_PL_TX_COUNTER_2_TX_PAYLOAD_COUNTER_2_NONCE_TYPE_MASK    ((uint32_t)0x000000C0)
#define BT_CONTROLLER_PL_TX_COUNTER_2_TX_PAYLOAD_COUNTER_2_NONCE_TYPE_LSB    6
#define BT_CONTROLLER_PL_TX_COUNTER_2_TX_PAYLOAD_COUNTER_2_NONCE_TYPE_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_PL_TX_COUNTER_2_TX_PAYLOAD_COUNTER_2_DIRECTION_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_PL_TX_COUNTER_2_TX_PAYLOAD_COUNTER_2_DIRECTION_POS    5
#define BT_CONTROLLER_PL_TX_COUNTER_2_TX_PAYLOAD_COUNTER_2_ZERO_LENGTH_ACL_U_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_PL_TX_COUNTER_2_TX_PAYLOAD_COUNTER_2_ZERO_LENGTH_ACL_U_POS    4
#define BT_CONTROLLER_PL_TX_COUNTER_2_TX_PAYLOAD_COUNTER_2_35_DOWNTO_32_MASK    ((uint32_t)0x0000000F)
#define BT_CONTROLLER_PL_TX_COUNTER_2_TX_PAYLOAD_COUNTER_2_35_DOWNTO_32_LSB    0
#define BT_CONTROLLER_PL_TX_COUNTER_2_TX_PAYLOAD_COUNTER_2_35_DOWNTO_32_WIDTH    ((uint32_t)0x00000004)

#define BT_CONTROLLER_PL_TX_COUNTER_2_PL_TX_COUNTER_2_15_TO_8_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_PL_TX_COUNTER_2_TX_PAYLOAD_COUNTER_2_NONCE_TYPE_RST    0x0
#define BT_CONTROLLER_PL_TX_COUNTER_2_TX_PAYLOAD_COUNTER_2_DIRECTION_RST    0x0
#define BT_CONTROLLER_PL_TX_COUNTER_2_TX_PAYLOAD_COUNTER_2_ZERO_LENGTH_ACL_U_RST    0x0
#define BT_CONTROLLER_PL_TX_COUNTER_2_TX_PAYLOAD_COUNTER_2_35_DOWNTO_32_RST    0x0

__INLINE void bt_controller_pl_tx_counter_2_pack(uint8_t pl_tx_counter2_15_to_8_bits_are_reserved, uint8_t tx_payload_counter2_nonce_type, uint8_t tx_payload_counter2_direction, uint8_t tx_payload_counter2_zero_length_acl_u, uint8_t tx_payload_counter2_35_downto_32)
{
	ASSERT_ERR((((uint32_t)pl_tx_counter2_15_to_8_bits_are_reserved << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)tx_payload_counter2_nonce_type << 6) & ~((uint32_t)0x000000C0)) == 0);
	ASSERT_ERR((((uint32_t)tx_payload_counter2_direction << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)tx_payload_counter2_zero_length_acl_u << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)tx_payload_counter2_35_downto_32 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR,  ((uint32_t)pl_tx_counter2_15_to_8_bits_are_reserved << 8) |((uint32_t)tx_payload_counter2_nonce_type << 6) |((uint32_t)tx_payload_counter2_direction << 5) |((uint32_t)tx_payload_counter2_zero_length_acl_u << 4) |((uint32_t)tx_payload_counter2_35_downto_32 << 0));
}

__INLINE void bt_controller_pl_tx_counter_2_unpack(uint8_t* pl_tx_counter2_15_to_8_bits_are_reserved, uint8_t* tx_payload_counter2_nonce_type, uint8_t* tx_payload_counter2_direction, uint8_t* tx_payload_counter2_zero_length_acl_u, uint8_t* tx_payload_counter2_35_downto_32)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR);

	*pl_tx_counter2_15_to_8_bits_are_reserved = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*tx_payload_counter2_nonce_type = (localVal & ((uint32_t)0x000000C0)) >>  6;
	*tx_payload_counter2_direction = (localVal & ((uint32_t)0x00000020)) >>  5;
	*tx_payload_counter2_zero_length_acl_u = (localVal & ((uint32_t)0x00000010)) >>  4;
	*tx_payload_counter2_35_downto_32 = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t bt_controller_pl_tx_counter_2_pl_tx_counter_2_15_to_8_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t bt_controller_pl_tx_counter_2_tx_payload_counter_2_nonce_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000C0)) >> 6);
}
__INLINE void bt_controller_pl_tx_counter_2_tx_payload_counter_2_nonce_type_setf(uint8_t txpayloadcounter2noncetype)
{
	ASSERT_ERR((((uint32_t)txpayloadcounter2noncetype << 6) & ~((uint32_t)0x000000C0)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR, (REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR) & ~((uint32_t)0x000000C0)) | ((uint32_t)txpayloadcounter2noncetype <<6));
}
__INLINE uint8_t bt_controller_pl_tx_counter_2_tx_payload_counter_2_direction_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_pl_tx_counter_2_tx_payload_counter_2_direction_setf(uint8_t txpayloadcounter2direction)
{
	ASSERT_ERR((((uint32_t)txpayloadcounter2direction << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR, (REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)txpayloadcounter2direction <<5));
}
__INLINE uint8_t bt_controller_pl_tx_counter_2_tx_payload_counter_2_zero_length_acl_u_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_pl_tx_counter_2_tx_payload_counter_2_zero_length_acl_u_setf(uint8_t txpayloadcounter2zerolengthaclu)
{
	ASSERT_ERR((((uint32_t)txpayloadcounter2zerolengthaclu << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR, (REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)txpayloadcounter2zerolengthaclu <<4));
}
__INLINE uint8_t bt_controller_pl_tx_counter_2_tx_payload_counter_2_35_downto_32_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void bt_controller_pl_tx_counter_2_tx_payload_counter_2_35_downto_32_setf(uint8_t txpayloadcounter235downto32)
{
	ASSERT_ERR((((uint32_t)txpayloadcounter235downto32 << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR, (REG_PL_RD(BT_CONTROLLER_PL_TX_COUNTER_2_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)txpayloadcounter235downto32 <<0));
}

/**
 * @brief PL_RX_COUNTER_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 RX_Payload_Counter0_15_downto_8_bits 0x0
 *    07:00 RX_Payload_Counter0_7_downto_0_bits 0x0
 * </pre>
 */
#define BT_CONTROLLER_PL_RX_COUNTER_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002D8)
#define BT_CONTROLLER_PL_RX_COUNTER_0_OFFSET      0x000002D8
#define BT_CONTROLLER_PL_RX_COUNTER_0_INDEX       0x000000B6
#define BT_CONTROLLER_PL_RX_COUNTER_0_RESET       0x00000000

__INLINE uint32_t  bt_controller_pl_rx_counter_0_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_0_ADDR);
}

__INLINE void bt_controller_pl_rx_counter_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PL_RX_COUNTER_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PL_RX_COUNTER_0_RX_PAYLOAD_COUNTER_0_15_DOWNTO_8_BITS_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_PL_RX_COUNTER_0_RX_PAYLOAD_COUNTER_0_15_DOWNTO_8_BITS_LSB    8
#define BT_CONTROLLER_PL_RX_COUNTER_0_RX_PAYLOAD_COUNTER_0_15_DOWNTO_8_BITS_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_PL_RX_COUNTER_0_RX_PAYLOAD_COUNTER_0_7_DOWNTO_0_BITS_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_PL_RX_COUNTER_0_RX_PAYLOAD_COUNTER_0_7_DOWNTO_0_BITS_LSB    0
#define BT_CONTROLLER_PL_RX_COUNTER_0_RX_PAYLOAD_COUNTER_0_7_DOWNTO_0_BITS_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_PL_RX_COUNTER_0_RX_PAYLOAD_COUNTER_0_15_DOWNTO_8_BITS_RST    0x0
#define BT_CONTROLLER_PL_RX_COUNTER_0_RX_PAYLOAD_COUNTER_0_7_DOWNTO_0_BITS_RST    0x0

__INLINE void bt_controller_pl_rx_counter_0_pack(uint8_t rx_payload_counter0_15_downto_8_bits, uint8_t rx_payload_counter0_7_downto_0_bits)
{
	ASSERT_ERR((((uint32_t)rx_payload_counter0_15_downto_8_bits << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_counter0_7_downto_0_bits << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_RX_COUNTER_0_ADDR,  ((uint32_t)rx_payload_counter0_15_downto_8_bits << 8) |((uint32_t)rx_payload_counter0_7_downto_0_bits << 0));
}

__INLINE void bt_controller_pl_rx_counter_0_unpack(uint8_t* rx_payload_counter0_15_downto_8_bits, uint8_t* rx_payload_counter0_7_downto_0_bits)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_0_ADDR);

	*rx_payload_counter0_15_downto_8_bits = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*rx_payload_counter0_7_downto_0_bits = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_pl_rx_counter_0_rx_payload_counter_0_15_downto_8_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_pl_rx_counter_0_rx_payload_counter_0_15_downto_8_bits_setf(uint8_t rxpayloadcounter015downto8bits)
{
	ASSERT_ERR((((uint32_t)rxpayloadcounter015downto8bits << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_RX_COUNTER_0_ADDR, (REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_0_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)rxpayloadcounter015downto8bits <<8));
}
__INLINE uint8_t bt_controller_pl_rx_counter_0_rx_payload_counter_0_7_downto_0_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_pl_rx_counter_0_rx_payload_counter_0_7_downto_0_bits_setf(uint8_t rxpayloadcounter07downto0bits)
{
	ASSERT_ERR((((uint32_t)rxpayloadcounter07downto0bits << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_RX_COUNTER_0_ADDR, (REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_0_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)rxpayloadcounter07downto0bits <<0));
}

/**
 * @brief PL_RX_COUNTER_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 RX_Payload_Counter1_31_downto_24_bits 0x0
 *    07:00 RX_Payload_Counter1_23_downto_16_bits 0x0
 * </pre>
 */
#define BT_CONTROLLER_PL_RX_COUNTER_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002DC)
#define BT_CONTROLLER_PL_RX_COUNTER_1_OFFSET      0x000002DC
#define BT_CONTROLLER_PL_RX_COUNTER_1_INDEX       0x000000B7
#define BT_CONTROLLER_PL_RX_COUNTER_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_pl_rx_counter_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_1_ADDR);
}

__INLINE void bt_controller_pl_rx_counter_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PL_RX_COUNTER_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PL_RX_COUNTER_1_RX_PAYLOAD_COUNTER_1_31_DOWNTO_24_BITS_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_PL_RX_COUNTER_1_RX_PAYLOAD_COUNTER_1_31_DOWNTO_24_BITS_LSB    8
#define BT_CONTROLLER_PL_RX_COUNTER_1_RX_PAYLOAD_COUNTER_1_31_DOWNTO_24_BITS_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_PL_RX_COUNTER_1_RX_PAYLOAD_COUNTER_1_23_DOWNTO_16_BITS_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_PL_RX_COUNTER_1_RX_PAYLOAD_COUNTER_1_23_DOWNTO_16_BITS_LSB    0
#define BT_CONTROLLER_PL_RX_COUNTER_1_RX_PAYLOAD_COUNTER_1_23_DOWNTO_16_BITS_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_PL_RX_COUNTER_1_RX_PAYLOAD_COUNTER_1_31_DOWNTO_24_BITS_RST    0x0
#define BT_CONTROLLER_PL_RX_COUNTER_1_RX_PAYLOAD_COUNTER_1_23_DOWNTO_16_BITS_RST    0x0

__INLINE void bt_controller_pl_rx_counter_1_pack(uint8_t rx_payload_counter1_31_downto_24_bits, uint8_t rx_payload_counter1_23_downto_16_bits)
{
	ASSERT_ERR((((uint32_t)rx_payload_counter1_31_downto_24_bits << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_counter1_23_downto_16_bits << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_RX_COUNTER_1_ADDR,  ((uint32_t)rx_payload_counter1_31_downto_24_bits << 8) |((uint32_t)rx_payload_counter1_23_downto_16_bits << 0));
}

__INLINE void bt_controller_pl_rx_counter_1_unpack(uint8_t* rx_payload_counter1_31_downto_24_bits, uint8_t* rx_payload_counter1_23_downto_16_bits)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_1_ADDR);

	*rx_payload_counter1_31_downto_24_bits = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*rx_payload_counter1_23_downto_16_bits = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_pl_rx_counter_1_rx_payload_counter_1_31_downto_24_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_pl_rx_counter_1_rx_payload_counter_1_31_downto_24_bits_setf(uint8_t rxpayloadcounter131downto24bits)
{
	ASSERT_ERR((((uint32_t)rxpayloadcounter131downto24bits << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_RX_COUNTER_1_ADDR, (REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_1_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)rxpayloadcounter131downto24bits <<8));
}
__INLINE uint8_t bt_controller_pl_rx_counter_1_rx_payload_counter_1_23_downto_16_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_pl_rx_counter_1_rx_payload_counter_1_23_downto_16_bits_setf(uint8_t rxpayloadcounter123downto16bits)
{
	ASSERT_ERR((((uint32_t)rxpayloadcounter123downto16bits << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_RX_COUNTER_1_ADDR, (REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_1_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)rxpayloadcounter123downto16bits <<0));
}

/**
 * @brief PL_RX_COUNTER_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 pl_rx_counter2_15_to8_bits_are_reserved 0x0
 *    07:06 RX_Payload_Counter2_nonce_Type 0x0
 *    05    RX_Payload_Counter2_direction 0              
 *    04    RX_Payload_Counter2_zero_length_ACL_U 0              
 *    03:00 RX_Payload_Counter2_35_downto_32_bits 0x0
 * </pre>
 */
#define BT_CONTROLLER_PL_RX_COUNTER_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002E0)
#define BT_CONTROLLER_PL_RX_COUNTER_2_OFFSET      0x000002E0
#define BT_CONTROLLER_PL_RX_COUNTER_2_INDEX       0x000000B8
#define BT_CONTROLLER_PL_RX_COUNTER_2_RESET       0x00000000

__INLINE uint32_t  bt_controller_pl_rx_counter_2_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR);
}

__INLINE void bt_controller_pl_rx_counter_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PL_RX_COUNTER_2_PL_RX_COUNTER_2_15_TO_8_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_PL_RX_COUNTER_2_PL_RX_COUNTER_2_15_TO_8_BITS_ARE_RESERVED_LSB    8
#define BT_CONTROLLER_PL_RX_COUNTER_2_PL_RX_COUNTER_2_15_TO_8_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_PL_RX_COUNTER_2_RX_PAYLOAD_COUNTER_2_NONCE_TYPE_MASK    ((uint32_t)0x000000C0)
#define BT_CONTROLLER_PL_RX_COUNTER_2_RX_PAYLOAD_COUNTER_2_NONCE_TYPE_LSB    6
#define BT_CONTROLLER_PL_RX_COUNTER_2_RX_PAYLOAD_COUNTER_2_NONCE_TYPE_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_PL_RX_COUNTER_2_RX_PAYLOAD_COUNTER_2_DIRECTION_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_PL_RX_COUNTER_2_RX_PAYLOAD_COUNTER_2_DIRECTION_POS    5
#define BT_CONTROLLER_PL_RX_COUNTER_2_RX_PAYLOAD_COUNTER_2_ZERO_LENGTH_ACL_U_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_PL_RX_COUNTER_2_RX_PAYLOAD_COUNTER_2_ZERO_LENGTH_ACL_U_POS    4
#define BT_CONTROLLER_PL_RX_COUNTER_2_RX_PAYLOAD_COUNTER_2_35_DOWNTO_32_BITS_MASK    ((uint32_t)0x0000000F)
#define BT_CONTROLLER_PL_RX_COUNTER_2_RX_PAYLOAD_COUNTER_2_35_DOWNTO_32_BITS_LSB    0
#define BT_CONTROLLER_PL_RX_COUNTER_2_RX_PAYLOAD_COUNTER_2_35_DOWNTO_32_BITS_WIDTH    ((uint32_t)0x00000004)

#define BT_CONTROLLER_PL_RX_COUNTER_2_PL_RX_COUNTER_2_15_TO_8_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_PL_RX_COUNTER_2_RX_PAYLOAD_COUNTER_2_NONCE_TYPE_RST    0x0
#define BT_CONTROLLER_PL_RX_COUNTER_2_RX_PAYLOAD_COUNTER_2_DIRECTION_RST    0x0
#define BT_CONTROLLER_PL_RX_COUNTER_2_RX_PAYLOAD_COUNTER_2_ZERO_LENGTH_ACL_U_RST    0x0
#define BT_CONTROLLER_PL_RX_COUNTER_2_RX_PAYLOAD_COUNTER_2_35_DOWNTO_32_BITS_RST    0x0

__INLINE void bt_controller_pl_rx_counter_2_pack(uint8_t pl_rx_counter2_15_to8_bits_are_reserved, uint8_t rx_payload_counter2_nonce_type, uint8_t rx_payload_counter2_direction, uint8_t rx_payload_counter2_zero_length_acl_u, uint8_t rx_payload_counter2_35_downto_32_bits)
{
	ASSERT_ERR((((uint32_t)pl_rx_counter2_15_to8_bits_are_reserved << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_counter2_nonce_type << 6) & ~((uint32_t)0x000000C0)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_counter2_direction << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_counter2_zero_length_acl_u << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)rx_payload_counter2_35_downto_32_bits << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR,  ((uint32_t)pl_rx_counter2_15_to8_bits_are_reserved << 8) |((uint32_t)rx_payload_counter2_nonce_type << 6) |((uint32_t)rx_payload_counter2_direction << 5) |((uint32_t)rx_payload_counter2_zero_length_acl_u << 4) |((uint32_t)rx_payload_counter2_35_downto_32_bits << 0));
}

__INLINE void bt_controller_pl_rx_counter_2_unpack(uint8_t* pl_rx_counter2_15_to8_bits_are_reserved, uint8_t* rx_payload_counter2_nonce_type, uint8_t* rx_payload_counter2_direction, uint8_t* rx_payload_counter2_zero_length_acl_u, uint8_t* rx_payload_counter2_35_downto_32_bits)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR);

	*pl_rx_counter2_15_to8_bits_are_reserved = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*rx_payload_counter2_nonce_type = (localVal & ((uint32_t)0x000000C0)) >>  6;
	*rx_payload_counter2_direction = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rx_payload_counter2_zero_length_acl_u = (localVal & ((uint32_t)0x00000010)) >>  4;
	*rx_payload_counter2_35_downto_32_bits = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t bt_controller_pl_rx_counter_2_pl_rx_counter_2_15_to_8_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t bt_controller_pl_rx_counter_2_rx_payload_counter_2_nonce_type_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000C0)) >> 6);
}
__INLINE void bt_controller_pl_rx_counter_2_rx_payload_counter_2_nonce_type_setf(uint8_t rxpayloadcounter2noncetype)
{
	ASSERT_ERR((((uint32_t)rxpayloadcounter2noncetype << 6) & ~((uint32_t)0x000000C0)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR, (REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR) & ~((uint32_t)0x000000C0)) | ((uint32_t)rxpayloadcounter2noncetype <<6));
}
__INLINE uint8_t bt_controller_pl_rx_counter_2_rx_payload_counter_2_direction_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_pl_rx_counter_2_rx_payload_counter_2_direction_setf(uint8_t rxpayloadcounter2direction)
{
	ASSERT_ERR((((uint32_t)rxpayloadcounter2direction << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR, (REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rxpayloadcounter2direction <<5));
}
__INLINE uint8_t bt_controller_pl_rx_counter_2_rx_payload_counter_2_zero_length_acl_u_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_pl_rx_counter_2_rx_payload_counter_2_zero_length_acl_u_setf(uint8_t rxpayloadcounter2zerolengthaclu)
{
	ASSERT_ERR((((uint32_t)rxpayloadcounter2zerolengthaclu << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR, (REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)rxpayloadcounter2zerolengthaclu <<4));
}
__INLINE uint8_t bt_controller_pl_rx_counter_2_rx_payload_counter_2_35_downto_32_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void bt_controller_pl_rx_counter_2_rx_payload_counter_2_35_downto_32_bits_setf(uint8_t rxpayloadcounter235downto32bits)
{
	ASSERT_ERR((((uint32_t)rxpayloadcounter235downto32bits << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR, (REG_PL_RD(BT_CONTROLLER_PL_RX_COUNTER_2_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)rxpayloadcounter235downto32bits <<0));
}

/**
 * @brief ESCO_DAY_COUNTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:11 esco_day_counter_15_11_bits_are_reserved 0x0
 *    10:00 DAY_COUNTER               0x0
 * </pre>
 */
#define BT_CONTROLLER_ESCO_DAY_COUNTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002E4)
#define BT_CONTROLLER_ESCO_DAY_COUNTER_OFFSET      0x000002E4
#define BT_CONTROLLER_ESCO_DAY_COUNTER_INDEX       0x000000B9
#define BT_CONTROLLER_ESCO_DAY_COUNTER_RESET       0x00000000

__INLINE uint32_t  bt_controller_esco_day_counter_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ESCO_DAY_COUNTER_ADDR);
}

__INLINE void bt_controller_esco_day_counter_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ESCO_DAY_COUNTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ESCO_DAY_COUNTER_ESCO_DAY_COUNTER_15_11_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000F800)
#define BT_CONTROLLER_ESCO_DAY_COUNTER_ESCO_DAY_COUNTER_15_11_BITS_ARE_RESERVED_LSB    11
#define BT_CONTROLLER_ESCO_DAY_COUNTER_ESCO_DAY_COUNTER_15_11_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_ESCO_DAY_COUNTER_DAY_COUNTER_MASK    ((uint32_t)0x000007FF)
#define BT_CONTROLLER_ESCO_DAY_COUNTER_DAY_COUNTER_LSB    0
#define BT_CONTROLLER_ESCO_DAY_COUNTER_DAY_COUNTER_WIDTH    ((uint32_t)0x0000000B)

#define BT_CONTROLLER_ESCO_DAY_COUNTER_ESCO_DAY_COUNTER_15_11_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_ESCO_DAY_COUNTER_DAY_COUNTER_RST    0x0

__INLINE void bt_controller_esco_day_counter_pack(uint8_t esco_day_counter_15_11_bits_are_reserved, uint16_t day_counter)
{
	ASSERT_ERR((((uint32_t)esco_day_counter_15_11_bits_are_reserved << 11) & ~((uint32_t)0x0000F800)) == 0);
	ASSERT_ERR((((uint32_t)day_counter << 0) & ~((uint32_t)0x000007FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ESCO_DAY_COUNTER_ADDR,  ((uint32_t)esco_day_counter_15_11_bits_are_reserved << 11) |((uint32_t)day_counter << 0));
}

__INLINE void bt_controller_esco_day_counter_unpack(uint8_t* esco_day_counter_15_11_bits_are_reserved, uint16_t* day_counter)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ESCO_DAY_COUNTER_ADDR);

	*esco_day_counter_15_11_bits_are_reserved = (localVal & ((uint32_t)0x0000F800)) >>  11;
	*day_counter = (localVal & ((uint32_t)0x000007FF)) >>  0;
}

__INLINE uint8_t bt_controller_esco_day_counter_esco_day_counter_15_11_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ESCO_DAY_COUNTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F800)) >> 11);
}
__INLINE uint16_t bt_controller_esco_day_counter_day_counter_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ESCO_DAY_COUNTER_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000007FF)) >> 0);
}
__INLINE void bt_controller_esco_day_counter_day_counter_setf(uint16_t daycounter)
{
	ASSERT_ERR((((uint32_t)daycounter << 0) & ~((uint32_t)0x000007FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ESCO_DAY_COUNTER_ADDR, (REG_PL_RD(BT_CONTROLLER_ESCO_DAY_COUNTER_ADDR) & ~((uint32_t)0x000007FF)) | ((uint32_t)daycounter <<0));
}

/**
 * @brief IV_REGISTER_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 Nonce6                    0x0
 *    07:00 Nonce5                    0x0
 * </pre>
 */
#define BT_CONTROLLER_IV_REGISTER_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002E8)
#define BT_CONTROLLER_IV_REGISTER_1_OFFSET      0x000002E8
#define BT_CONTROLLER_IV_REGISTER_1_INDEX       0x000000BA
#define BT_CONTROLLER_IV_REGISTER_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_iv_register_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_IV_REGISTER_1_ADDR);
}

__INLINE void bt_controller_iv_register_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IV_REGISTER_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IV_REGISTER_1_NONCE_6_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_IV_REGISTER_1_NONCE_6_LSB    8
#define BT_CONTROLLER_IV_REGISTER_1_NONCE_6_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_IV_REGISTER_1_NONCE_5_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_IV_REGISTER_1_NONCE_5_LSB    0
#define BT_CONTROLLER_IV_REGISTER_1_NONCE_5_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_IV_REGISTER_1_NONCE_6_RST    0x0
#define BT_CONTROLLER_IV_REGISTER_1_NONCE_5_RST    0x0

__INLINE void bt_controller_iv_register_1_pack(uint8_t nonce6, uint8_t nonce5)
{
	ASSERT_ERR((((uint32_t)nonce6 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)nonce5 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IV_REGISTER_1_ADDR,  ((uint32_t)nonce6 << 8) |((uint32_t)nonce5 << 0));
}

__INLINE void bt_controller_iv_register_1_unpack(uint8_t* nonce6, uint8_t* nonce5)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IV_REGISTER_1_ADDR);

	*nonce6 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*nonce5 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_iv_register_1_nonce_6_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IV_REGISTER_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_iv_register_1_nonce_6_setf(uint8_t nonce6)
{
	ASSERT_ERR((((uint32_t)nonce6 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_IV_REGISTER_1_ADDR, (REG_PL_RD(BT_CONTROLLER_IV_REGISTER_1_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)nonce6 <<8));
}
__INLINE uint8_t bt_controller_iv_register_1_nonce_5_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IV_REGISTER_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_iv_register_1_nonce_5_setf(uint8_t nonce5)
{
	ASSERT_ERR((((uint32_t)nonce5 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IV_REGISTER_1_ADDR, (REG_PL_RD(BT_CONTROLLER_IV_REGISTER_1_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)nonce5 <<0));
}

/**
 * @brief IV_REGISTER_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 Nonce8                    0x0
 *    07:00 Nonce7                    0x0
 * </pre>
 */
#define BT_CONTROLLER_IV_REGISTER_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002EC)
#define BT_CONTROLLER_IV_REGISTER_2_OFFSET      0x000002EC
#define BT_CONTROLLER_IV_REGISTER_2_INDEX       0x000000BB
#define BT_CONTROLLER_IV_REGISTER_2_RESET       0x00000000

__INLINE uint32_t  bt_controller_iv_register_2_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_IV_REGISTER_2_ADDR);
}

__INLINE void bt_controller_iv_register_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IV_REGISTER_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IV_REGISTER_2_NONCE_8_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_IV_REGISTER_2_NONCE_8_LSB    8
#define BT_CONTROLLER_IV_REGISTER_2_NONCE_8_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_IV_REGISTER_2_NONCE_7_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_IV_REGISTER_2_NONCE_7_LSB    0
#define BT_CONTROLLER_IV_REGISTER_2_NONCE_7_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_IV_REGISTER_2_NONCE_8_RST    0x0
#define BT_CONTROLLER_IV_REGISTER_2_NONCE_7_RST    0x0

__INLINE void bt_controller_iv_register_2_pack(uint8_t nonce8, uint8_t nonce7)
{
	ASSERT_ERR((((uint32_t)nonce8 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)nonce7 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IV_REGISTER_2_ADDR,  ((uint32_t)nonce8 << 8) |((uint32_t)nonce7 << 0));
}

__INLINE void bt_controller_iv_register_2_unpack(uint8_t* nonce8, uint8_t* nonce7)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IV_REGISTER_2_ADDR);

	*nonce8 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*nonce7 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_iv_register_2_nonce_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IV_REGISTER_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_iv_register_2_nonce_8_setf(uint8_t nonce8)
{
	ASSERT_ERR((((uint32_t)nonce8 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_IV_REGISTER_2_ADDR, (REG_PL_RD(BT_CONTROLLER_IV_REGISTER_2_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)nonce8 <<8));
}
__INLINE uint8_t bt_controller_iv_register_2_nonce_7_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IV_REGISTER_2_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_iv_register_2_nonce_7_setf(uint8_t nonce7)
{
	ASSERT_ERR((((uint32_t)nonce7 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IV_REGISTER_2_ADDR, (REG_PL_RD(BT_CONTROLLER_IV_REGISTER_2_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)nonce7 <<0));
}

/**
 * @brief IV_REGISTER_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 Nonce10                   0x0
 *    07:00 Nonce9                    0x0
 * </pre>
 */
#define BT_CONTROLLER_IV_REGISTER_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002F0)
#define BT_CONTROLLER_IV_REGISTER_3_OFFSET      0x000002F0
#define BT_CONTROLLER_IV_REGISTER_3_INDEX       0x000000BC
#define BT_CONTROLLER_IV_REGISTER_3_RESET       0x00000000

__INLINE uint32_t  bt_controller_iv_register_3_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_IV_REGISTER_3_ADDR);
}

__INLINE void bt_controller_iv_register_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IV_REGISTER_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IV_REGISTER_3_NONCE_10_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_IV_REGISTER_3_NONCE_10_LSB    8
#define BT_CONTROLLER_IV_REGISTER_3_NONCE_10_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_IV_REGISTER_3_NONCE_9_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_IV_REGISTER_3_NONCE_9_LSB    0
#define BT_CONTROLLER_IV_REGISTER_3_NONCE_9_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_IV_REGISTER_3_NONCE_10_RST    0x0
#define BT_CONTROLLER_IV_REGISTER_3_NONCE_9_RST    0x0

__INLINE void bt_controller_iv_register_3_pack(uint8_t nonce10, uint8_t nonce9)
{
	ASSERT_ERR((((uint32_t)nonce10 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)nonce9 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IV_REGISTER_3_ADDR,  ((uint32_t)nonce10 << 8) |((uint32_t)nonce9 << 0));
}

__INLINE void bt_controller_iv_register_3_unpack(uint8_t* nonce10, uint8_t* nonce9)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IV_REGISTER_3_ADDR);

	*nonce10 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*nonce9 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_iv_register_3_nonce_10_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IV_REGISTER_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_iv_register_3_nonce_10_setf(uint8_t nonce10)
{
	ASSERT_ERR((((uint32_t)nonce10 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_IV_REGISTER_3_ADDR, (REG_PL_RD(BT_CONTROLLER_IV_REGISTER_3_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)nonce10 <<8));
}
__INLINE uint8_t bt_controller_iv_register_3_nonce_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IV_REGISTER_3_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_iv_register_3_nonce_9_setf(uint8_t nonce9)
{
	ASSERT_ERR((((uint32_t)nonce9 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IV_REGISTER_3_ADDR, (REG_PL_RD(BT_CONTROLLER_IV_REGISTER_3_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)nonce9 <<0));
}

/**
 * @brief IV_REGISTER_4 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 Nonce12                   0x0
 *    07:00 Nonce11                   0x0
 * </pre>
 */
#define BT_CONTROLLER_IV_REGISTER_4_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000002F4)
#define BT_CONTROLLER_IV_REGISTER_4_OFFSET      0x000002F4
#define BT_CONTROLLER_IV_REGISTER_4_INDEX       0x000000BD
#define BT_CONTROLLER_IV_REGISTER_4_RESET       0x00000000

__INLINE uint32_t  bt_controller_iv_register_4_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_IV_REGISTER_4_ADDR);
}

__INLINE void bt_controller_iv_register_4_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IV_REGISTER_4_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IV_REGISTER_4_NONCE_12_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_IV_REGISTER_4_NONCE_12_LSB    8
#define BT_CONTROLLER_IV_REGISTER_4_NONCE_12_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_IV_REGISTER_4_NONCE_11_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_IV_REGISTER_4_NONCE_11_LSB    0
#define BT_CONTROLLER_IV_REGISTER_4_NONCE_11_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_IV_REGISTER_4_NONCE_12_RST    0x0
#define BT_CONTROLLER_IV_REGISTER_4_NONCE_11_RST    0x0

__INLINE void bt_controller_iv_register_4_pack(uint8_t nonce12, uint8_t nonce11)
{
	ASSERT_ERR((((uint32_t)nonce12 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)nonce11 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IV_REGISTER_4_ADDR,  ((uint32_t)nonce12 << 8) |((uint32_t)nonce11 << 0));
}

__INLINE void bt_controller_iv_register_4_unpack(uint8_t* nonce12, uint8_t* nonce11)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IV_REGISTER_4_ADDR);

	*nonce12 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*nonce11 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_iv_register_4_nonce_12_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IV_REGISTER_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_iv_register_4_nonce_12_setf(uint8_t nonce12)
{
	ASSERT_ERR((((uint32_t)nonce12 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_IV_REGISTER_4_ADDR, (REG_PL_RD(BT_CONTROLLER_IV_REGISTER_4_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)nonce12 <<8));
}
__INLINE uint8_t bt_controller_iv_register_4_nonce_11_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_IV_REGISTER_4_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_iv_register_4_nonce_11_setf(uint8_t nonce11)
{
	ASSERT_ERR((((uint32_t)nonce11 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IV_REGISTER_4_ADDR, (REG_PL_RD(BT_CONTROLLER_IV_REGISTER_4_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)nonce11 <<0));
}

/**
 * @brief DEBUG_RX_MIC_LSO register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Received_MIC_data_15_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_DEBUG_RX_MIC_LSO_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000300)
#define BT_CONTROLLER_DEBUG_RX_MIC_LSO_OFFSET      0x00000300
#define BT_CONTROLLER_DEBUG_RX_MIC_LSO_INDEX       0x000000C0
#define BT_CONTROLLER_DEBUG_RX_MIC_LSO_RESET       0x00000000

__INLINE uint32_t  bt_controller_debug_rx_mic_lso_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_DEBUG_RX_MIC_LSO_ADDR);
}

// field definitions
#define BT_CONTROLLER_DEBUG_RX_MIC_LSO_RECEIVED_MIC_DATA_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_DEBUG_RX_MIC_LSO_RECEIVED_MIC_DATA_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_DEBUG_RX_MIC_LSO_RECEIVED_MIC_DATA_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_DEBUG_RX_MIC_LSO_RECEIVED_MIC_DATA_15_DOWNTO_0_RST    0x0

__INLINE uint16_t bt_controller_debug_rx_mic_lso_received_mic_data_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DEBUG_RX_MIC_LSO_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief DEBUG_RX_MIC_MSO register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Received_MIC_data_31_downto_16 0x0
 * </pre>
 */
#define BT_CONTROLLER_DEBUG_RX_MIC_MSO_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000304)
#define BT_CONTROLLER_DEBUG_RX_MIC_MSO_OFFSET      0x00000304
#define BT_CONTROLLER_DEBUG_RX_MIC_MSO_INDEX       0x000000C1
#define BT_CONTROLLER_DEBUG_RX_MIC_MSO_RESET       0x00000000

__INLINE uint32_t  bt_controller_debug_rx_mic_mso_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_DEBUG_RX_MIC_MSO_ADDR);
}

// field definitions
#define BT_CONTROLLER_DEBUG_RX_MIC_MSO_RECEIVED_MIC_DATA_31_DOWNTO_16_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_DEBUG_RX_MIC_MSO_RECEIVED_MIC_DATA_31_DOWNTO_16_LSB    0
#define BT_CONTROLLER_DEBUG_RX_MIC_MSO_RECEIVED_MIC_DATA_31_DOWNTO_16_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_DEBUG_RX_MIC_MSO_RECEIVED_MIC_DATA_31_DOWNTO_16_RST    0x0

__INLINE uint16_t bt_controller_debug_rx_mic_mso_received_mic_data_31_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DEBUG_RX_MIC_MSO_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief DEBUG_CAL_MIC_LSO register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Calculated_MIC_data_15_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_DEBUG_CAL_MIC_LSO_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000308)
#define BT_CONTROLLER_DEBUG_CAL_MIC_LSO_OFFSET      0x00000308
#define BT_CONTROLLER_DEBUG_CAL_MIC_LSO_INDEX       0x000000C2
#define BT_CONTROLLER_DEBUG_CAL_MIC_LSO_RESET       0x00000000

__INLINE uint32_t  bt_controller_debug_cal_mic_lso_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_DEBUG_CAL_MIC_LSO_ADDR);
}

// field definitions
#define BT_CONTROLLER_DEBUG_CAL_MIC_LSO_CALCULATED_MIC_DATA_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_DEBUG_CAL_MIC_LSO_CALCULATED_MIC_DATA_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_DEBUG_CAL_MIC_LSO_CALCULATED_MIC_DATA_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_DEBUG_CAL_MIC_LSO_CALCULATED_MIC_DATA_15_DOWNTO_0_RST    0x0

__INLINE uint16_t bt_controller_debug_cal_mic_lso_calculated_mic_data_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DEBUG_CAL_MIC_LSO_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief DEBUG_CAL_MIC_MSO register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 Calculated_MIC_data_31_downto_16 0x0
 * </pre>
 */
#define BT_CONTROLLER_DEBUG_CAL_MIC_MSO_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000030C)
#define BT_CONTROLLER_DEBUG_CAL_MIC_MSO_OFFSET      0x0000030C
#define BT_CONTROLLER_DEBUG_CAL_MIC_MSO_INDEX       0x000000C3
#define BT_CONTROLLER_DEBUG_CAL_MIC_MSO_RESET       0x00000000

__INLINE uint32_t  bt_controller_debug_cal_mic_mso_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_DEBUG_CAL_MIC_MSO_ADDR);
}

// field definitions
#define BT_CONTROLLER_DEBUG_CAL_MIC_MSO_CALCULATED_MIC_DATA_31_DOWNTO_16_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_DEBUG_CAL_MIC_MSO_CALCULATED_MIC_DATA_31_DOWNTO_16_LSB    0
#define BT_CONTROLLER_DEBUG_CAL_MIC_MSO_CALCULATED_MIC_DATA_31_DOWNTO_16_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_DEBUG_CAL_MIC_MSO_CALCULATED_MIC_DATA_31_DOWNTO_16_RST    0x0

__INLINE uint16_t bt_controller_debug_cal_mic_mso_calculated_mic_data_31_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DEBUG_CAL_MIC_MSO_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief AES_INTR_MASK register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:01 aes_intr_mask_15_to_11_bits_are_reserved 0x0
 *    00    aes_intr_enable           0              
 * </pre>
 */
#define BT_CONTROLLER_AES_INTR_MASK_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000310)
#define BT_CONTROLLER_AES_INTR_MASK_OFFSET      0x00000310
#define BT_CONTROLLER_AES_INTR_MASK_INDEX       0x000000C4
#define BT_CONTROLLER_AES_INTR_MASK_RESET       0x00000000

__INLINE uint32_t  bt_controller_aes_intr_mask_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_AES_INTR_MASK_ADDR);
}

__INLINE void bt_controller_aes_intr_mask_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_AES_INTR_MASK_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_AES_INTR_MASK_AES_INTR_MASK_15_TO_11_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FFFE)
#define BT_CONTROLLER_AES_INTR_MASK_AES_INTR_MASK_15_TO_11_BITS_ARE_RESERVED_LSB    1
#define BT_CONTROLLER_AES_INTR_MASK_AES_INTR_MASK_15_TO_11_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000000F)
#define BT_CONTROLLER_AES_INTR_MASK_AES_INTR_ENABLE_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_AES_INTR_MASK_AES_INTR_ENABLE_POS    0

#define BT_CONTROLLER_AES_INTR_MASK_AES_INTR_MASK_15_TO_11_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_AES_INTR_MASK_AES_INTR_ENABLE_RST    0x0

__INLINE void bt_controller_aes_intr_mask_pack(uint16_t aes_intr_mask_15_to_11_bits_are_reserved, uint8_t aes_intr_enable)
{
	ASSERT_ERR((((uint32_t)aes_intr_mask_15_to_11_bits_are_reserved << 1) & ~((uint32_t)0x0000FFFE)) == 0);
	ASSERT_ERR((((uint32_t)aes_intr_enable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_AES_INTR_MASK_ADDR,  ((uint32_t)aes_intr_mask_15_to_11_bits_are_reserved << 1) |((uint32_t)aes_intr_enable << 0));
}

__INLINE void bt_controller_aes_intr_mask_unpack(uint16_t* aes_intr_mask_15_to_11_bits_are_reserved, uint8_t* aes_intr_enable)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_AES_INTR_MASK_ADDR);

	*aes_intr_mask_15_to_11_bits_are_reserved = (localVal & ((uint32_t)0x0000FFFE)) >>  1;
	*aes_intr_enable = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_aes_intr_mask_aes_intr_mask_15_to_11_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_AES_INTR_MASK_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFE)) >> 1);
}
__INLINE uint8_t bt_controller_aes_intr_mask_aes_intr_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_AES_INTR_MASK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_aes_intr_mask_aes_intr_enable_setf(uint8_t aesintrenable)
{
	ASSERT_ERR((((uint32_t)aesintrenable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_AES_INTR_MASK_ADDR, (REG_PL_RD(BT_CONTROLLER_AES_INTR_MASK_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)aesintrenable <<0));
}

/**
 * @brief AES_INTR_STAT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:01 aes_intr_stat_15_11_bits_are_reserved 0x0
 *    00    aes_intr                  0              
 * </pre>
 */
#define BT_CONTROLLER_AES_INTR_STAT_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000314)
#define BT_CONTROLLER_AES_INTR_STAT_OFFSET      0x00000314
#define BT_CONTROLLER_AES_INTR_STAT_INDEX       0x000000C5
#define BT_CONTROLLER_AES_INTR_STAT_RESET       0x00000000

__INLINE uint32_t  bt_controller_aes_intr_stat_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_AES_INTR_STAT_ADDR);
}

__INLINE void bt_controller_aes_intr_stat_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_AES_INTR_STAT_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_AES_INTR_STAT_AES_INTR_STAT_15_11_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FFFE)
#define BT_CONTROLLER_AES_INTR_STAT_AES_INTR_STAT_15_11_BITS_ARE_RESERVED_LSB    1
#define BT_CONTROLLER_AES_INTR_STAT_AES_INTR_STAT_15_11_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000000F)
#define BT_CONTROLLER_AES_INTR_STAT_AES_INTR_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_AES_INTR_STAT_AES_INTR_POS    0

#define BT_CONTROLLER_AES_INTR_STAT_AES_INTR_STAT_15_11_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_AES_INTR_STAT_AES_INTR_RST    0x0

__INLINE void bt_controller_aes_intr_stat_pack(uint16_t aes_intr_stat_15_11_bits_are_reserved, uint8_t aes_intr)
{
	ASSERT_ERR((((uint32_t)aes_intr_stat_15_11_bits_are_reserved << 1) & ~((uint32_t)0x0000FFFE)) == 0);
	ASSERT_ERR((((uint32_t)aes_intr << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_AES_INTR_STAT_ADDR,  ((uint32_t)aes_intr_stat_15_11_bits_are_reserved << 1) |((uint32_t)aes_intr << 0));
}

__INLINE void bt_controller_aes_intr_stat_unpack(uint16_t* aes_intr_stat_15_11_bits_are_reserved, uint8_t* aes_intr)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_AES_INTR_STAT_ADDR);

	*aes_intr_stat_15_11_bits_are_reserved = (localVal & ((uint32_t)0x0000FFFE)) >>  1;
	*aes_intr = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_aes_intr_stat_aes_intr_stat_15_11_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_AES_INTR_STAT_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFE)) >> 1);
}
__INLINE uint8_t bt_controller_aes_intr_stat_aes_intr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_AES_INTR_STAT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_aes_intr_stat_aes_intr_setf(uint8_t aesintr)
{
	ASSERT_ERR((((uint32_t)aesintr << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_AES_INTR_STAT_ADDR, (REG_PL_RD(BT_CONTROLLER_AES_INTR_STAT_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)aesintr <<0));
}

/**
 * @brief LOW_IF_TX_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 low_if_tx_value           0x00
 * </pre>
 */
#define BT_CONTROLLER_LOW_IF_TX_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000031C)
#define BT_CONTROLLER_LOW_IF_TX_REG_OFFSET      0x0000031C
#define BT_CONTROLLER_LOW_IF_TX_REG_INDEX       0x000000C7
#define BT_CONTROLLER_LOW_IF_TX_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_low_if_tx_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LOW_IF_TX_REG_ADDR);
}

__INLINE void bt_controller_low_if_tx_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LOW_IF_TX_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LOW_IF_TX_REG_LOW_IF_TX_VALUE_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_LOW_IF_TX_REG_LOW_IF_TX_VALUE_LSB    0
#define BT_CONTROLLER_LOW_IF_TX_REG_LOW_IF_TX_VALUE_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_LOW_IF_TX_REG_LOW_IF_TX_VALUE_RST    0x00

__INLINE uint16_t bt_controller_low_if_tx_reg_low_if_tx_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOW_IF_TX_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_low_if_tx_reg_low_if_tx_value_setf(uint16_t lowiftxvalue)
{
	ASSERT_ERR((((uint32_t)lowiftxvalue << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOW_IF_TX_REG_ADDR, (uint32_t)lowiftxvalue << 0);
}

/**
 * @brief LOOPBACK_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:04 loopback1_reg_15_4_bits_are_reserved 0x0
 *    03    mclk_dir                  0              
 *    02:01 cif_bit_length_pcm        0x01
 *    00    Cif_ms_pcm                1              
 * </pre>
 */
#define BT_CONTROLLER_LOOPBACK_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000320)
#define BT_CONTROLLER_LOOPBACK_1_OFFSET      0x00000320
#define BT_CONTROLLER_LOOPBACK_1_INDEX       0x000000C8
#define BT_CONTROLLER_LOOPBACK_1_RESET       0x00000003

__INLINE uint32_t  bt_controller_loopback_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LOOPBACK_1_ADDR);
}

__INLINE void bt_controller_loopback_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LOOPBACK_1_LOOPBACK_1_REG_15_4_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FFF0)
#define BT_CONTROLLER_LOOPBACK_1_LOOPBACK_1_REG_15_4_BITS_ARE_RESERVED_LSB    4
#define BT_CONTROLLER_LOOPBACK_1_LOOPBACK_1_REG_15_4_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000000C)
#define BT_CONTROLLER_LOOPBACK_1_MCLK_DIR_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_LOOPBACK_1_MCLK_DIR_POS    3
#define BT_CONTROLLER_LOOPBACK_1_CIF_BIT_LENGTH_PCM_MASK    ((uint32_t)0x00000006)
#define BT_CONTROLLER_LOOPBACK_1_CIF_BIT_LENGTH_PCM_LSB    1
#define BT_CONTROLLER_LOOPBACK_1_CIF_BIT_LENGTH_PCM_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_LOOPBACK_1_CIF_MS_PCM_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_LOOPBACK_1_CIF_MS_PCM_POS    0

#define BT_CONTROLLER_LOOPBACK_1_LOOPBACK_1_REG_15_4_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_LOOPBACK_1_MCLK_DIR_RST    0x0
#define BT_CONTROLLER_LOOPBACK_1_CIF_BIT_LENGTH_PCM_RST    0x01
#define BT_CONTROLLER_LOOPBACK_1_CIF_MS_PCM_RST    0x1

__INLINE void bt_controller_loopback_1_pack(uint16_t loopback1_reg_15_4_bits_are_reserved, uint8_t mclk_dir, uint8_t cif_bit_length_pcm, uint8_t cif_ms_pcm)
{
	ASSERT_ERR((((uint32_t)loopback1_reg_15_4_bits_are_reserved << 4) & ~((uint32_t)0x0000FFF0)) == 0);
	ASSERT_ERR((((uint32_t)mclk_dir << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)cif_bit_length_pcm << 1) & ~((uint32_t)0x00000006)) == 0);
	ASSERT_ERR((((uint32_t)cif_ms_pcm << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_1_ADDR,  ((uint32_t)loopback1_reg_15_4_bits_are_reserved << 4) |((uint32_t)mclk_dir << 3) |((uint32_t)cif_bit_length_pcm << 1) |((uint32_t)cif_ms_pcm << 0));
}

__INLINE void bt_controller_loopback_1_unpack(uint16_t* loopback1_reg_15_4_bits_are_reserved, uint8_t* mclk_dir, uint8_t* cif_bit_length_pcm, uint8_t* cif_ms_pcm)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_1_ADDR);

	*loopback1_reg_15_4_bits_are_reserved = (localVal & ((uint32_t)0x0000FFF0)) >>  4;
	*mclk_dir = (localVal & ((uint32_t)0x00000008)) >>  3;
	*cif_bit_length_pcm = (localVal & ((uint32_t)0x00000006)) >>  1;
	*cif_ms_pcm = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_loopback_1_loopback_1_reg_15_4_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_1_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFF0)) >> 4);
}
__INLINE void bt_controller_loopback_1_loopback_1_reg_15_4_bits_are_reserved_setf(uint16_t loopback1reg154bitsarereserved)
{
	ASSERT_ERR((((uint32_t)loopback1reg154bitsarereserved << 4) & ~((uint32_t)0x0000FFF0)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_1_ADDR, (REG_PL_RD(BT_CONTROLLER_LOOPBACK_1_ADDR) & ~((uint32_t)0x0000FFF0)) | ((uint32_t)loopback1reg154bitsarereserved <<4));
}
__INLINE uint8_t bt_controller_loopback_1_mclk_dir_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_loopback_1_mclk_dir_setf(uint8_t mclkdir)
{
	ASSERT_ERR((((uint32_t)mclkdir << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_1_ADDR, (REG_PL_RD(BT_CONTROLLER_LOOPBACK_1_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)mclkdir <<3));
}
__INLINE uint8_t bt_controller_loopback_1_cif_bit_length_pcm_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000006)) >> 1);
}
__INLINE void bt_controller_loopback_1_cif_bit_length_pcm_setf(uint8_t cifbitlengthpcm)
{
	ASSERT_ERR((((uint32_t)cifbitlengthpcm << 1) & ~((uint32_t)0x00000006)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_1_ADDR, (REG_PL_RD(BT_CONTROLLER_LOOPBACK_1_ADDR) & ~((uint32_t)0x00000006)) | ((uint32_t)cifbitlengthpcm <<1));
}
__INLINE uint8_t bt_controller_loopback_1_cif_ms_pcm_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOOPBACK_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_loopback_1_cif_ms_pcm_setf(uint8_t cifmspcm)
{
	ASSERT_ERR((((uint32_t)cifmspcm << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOOPBACK_1_ADDR, (REG_PL_RD(BT_CONTROLLER_LOOPBACK_1_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)cifmspcm <<0));
}

/**
 * @brief RF_PA_RAMPUP_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 tx_pa_rampup_count        0x0
 * </pre>
 */
#define BT_CONTROLLER_RF_PA_RAMPUP_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000324)
#define BT_CONTROLLER_RF_PA_RAMPUP_REG_OFFSET      0x00000324
#define BT_CONTROLLER_RF_PA_RAMPUP_REG_INDEX       0x000000C9
#define BT_CONTROLLER_RF_PA_RAMPUP_REG_RESET       0x0000806F

__INLINE uint32_t  bt_controller_rf_pa_rampup_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_PA_RAMPUP_REG_ADDR);
}

__INLINE void bt_controller_rf_pa_rampup_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_PA_RAMPUP_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_PA_RAMPUP_REG_TX_PA_RAMPUP_COUNT_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_PA_RAMPUP_REG_TX_PA_RAMPUP_COUNT_LSB    0
#define BT_CONTROLLER_RF_PA_RAMPUP_REG_TX_PA_RAMPUP_COUNT_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_PA_RAMPUP_REG_TX_PA_RAMPUP_COUNT_RST    0x0

__INLINE uint16_t bt_controller_rf_pa_rampup_reg_tx_pa_rampup_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_PA_RAMPUP_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_pa_rampup_reg_tx_pa_rampup_count_setf(uint16_t txparampupcount)
{
	ASSERT_ERR((((uint32_t)txparampupcount << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_PA_RAMPUP_REG_ADDR, (uint32_t)txparampupcount << 0);
}

/**
 * @brief MODE_STATUS_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    mode_sts_reg_15_bit_reserved 0              
 *    14    rannum_counter_start      0              
 *    13    Piconet_sts               0              
 *    12    I_end_access              0              
 *    11    I_access                  0              
 *    10    I_beacon                  0              
 *    09    Sco3                      0              
 *    08    Sco2                      0              
 *    07    Sco1                      0              
 *    06    Presp                     0              
 *    05    Iresp                     0              
 *    04    Park                      0              
 *    03:00 Deprecated_donot_use      0x0
 * </pre>
 */
#define BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000328)
#define BT_CONTROLLER_MODE_STATUS_REGISTER_OFFSET      0x00000328
#define BT_CONTROLLER_MODE_STATUS_REGISTER_INDEX       0x000000CA
#define BT_CONTROLLER_MODE_STATUS_REGISTER_RESET       0x00000000

__INLINE uint32_t  bt_controller_mode_status_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR);
}

__INLINE void bt_controller_mode_status_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_MODE_STATUS_REGISTER_MODE_STS_REG_15_BIT_RESERVED_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_MODE_STATUS_REGISTER_MODE_STS_REG_15_BIT_RESERVED_POS    15
#define BT_CONTROLLER_MODE_STATUS_REGISTER_RANNUM_COUNTER_START_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_MODE_STATUS_REGISTER_RANNUM_COUNTER_START_POS    14
#define BT_CONTROLLER_MODE_STATUS_REGISTER_PICONET_STS_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_MODE_STATUS_REGISTER_PICONET_STS_POS    13
#define BT_CONTROLLER_MODE_STATUS_REGISTER_I_END_ACCESS_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_MODE_STATUS_REGISTER_I_END_ACCESS_POS    12
#define BT_CONTROLLER_MODE_STATUS_REGISTER_I_ACCESS_BIT    ((uint32_t)0x00000800)
#define BT_CONTROLLER_MODE_STATUS_REGISTER_I_ACCESS_POS    11
#define BT_CONTROLLER_MODE_STATUS_REGISTER_I_BEACON_BIT    ((uint32_t)0x00000400)
#define BT_CONTROLLER_MODE_STATUS_REGISTER_I_BEACON_POS    10
#define BT_CONTROLLER_MODE_STATUS_REGISTER_SCO_3_BIT    ((uint32_t)0x00000200)
#define BT_CONTROLLER_MODE_STATUS_REGISTER_SCO_3_POS    9
#define BT_CONTROLLER_MODE_STATUS_REGISTER_SCO_2_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_MODE_STATUS_REGISTER_SCO_2_POS    8
#define BT_CONTROLLER_MODE_STATUS_REGISTER_SCO_1_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_MODE_STATUS_REGISTER_SCO_1_POS    7
#define BT_CONTROLLER_MODE_STATUS_REGISTER_PRESP_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_MODE_STATUS_REGISTER_PRESP_POS    6
#define BT_CONTROLLER_MODE_STATUS_REGISTER_IRESP_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_MODE_STATUS_REGISTER_IRESP_POS    5
#define BT_CONTROLLER_MODE_STATUS_REGISTER_PARK_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_MODE_STATUS_REGISTER_PARK_POS    4
#define BT_CONTROLLER_MODE_STATUS_REGISTER_DEPRECATED_DONOT_USE_MASK    ((uint32_t)0x0000000F)
#define BT_CONTROLLER_MODE_STATUS_REGISTER_DEPRECATED_DONOT_USE_LSB    0
#define BT_CONTROLLER_MODE_STATUS_REGISTER_DEPRECATED_DONOT_USE_WIDTH    ((uint32_t)0x00000004)

#define BT_CONTROLLER_MODE_STATUS_REGISTER_MODE_STS_REG_15_BIT_RESERVED_RST    0x0
#define BT_CONTROLLER_MODE_STATUS_REGISTER_RANNUM_COUNTER_START_RST    0x0
#define BT_CONTROLLER_MODE_STATUS_REGISTER_PICONET_STS_RST    0x0
#define BT_CONTROLLER_MODE_STATUS_REGISTER_I_END_ACCESS_RST    0x0
#define BT_CONTROLLER_MODE_STATUS_REGISTER_I_ACCESS_RST    0x0
#define BT_CONTROLLER_MODE_STATUS_REGISTER_I_BEACON_RST    0x0
#define BT_CONTROLLER_MODE_STATUS_REGISTER_SCO_3_RST    0x0
#define BT_CONTROLLER_MODE_STATUS_REGISTER_SCO_2_RST    0x0
#define BT_CONTROLLER_MODE_STATUS_REGISTER_SCO_1_RST    0x0
#define BT_CONTROLLER_MODE_STATUS_REGISTER_PRESP_RST    0x0
#define BT_CONTROLLER_MODE_STATUS_REGISTER_IRESP_RST    0x0
#define BT_CONTROLLER_MODE_STATUS_REGISTER_PARK_RST    0x0
#define BT_CONTROLLER_MODE_STATUS_REGISTER_DEPRECATED_DONOT_USE_RST    0x0

__INLINE void bt_controller_mode_status_register_pack(uint8_t mode_sts_reg_15_bit_reserved, uint8_t rannum_counter_start, uint8_t piconet_sts, uint8_t i_end_access, uint8_t i_access, uint8_t i_beacon, uint8_t sco3, uint8_t sco2, uint8_t sco1, uint8_t presp, uint8_t iresp, uint8_t park, uint8_t deprecated_donot_use)
{
	ASSERT_ERR((((uint32_t)mode_sts_reg_15_bit_reserved << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)rannum_counter_start << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)piconet_sts << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)i_end_access << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)i_access << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)i_beacon << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)sco3 << 9) & ~((uint32_t)0x00000200)) == 0);
	ASSERT_ERR((((uint32_t)sco2 << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)sco1 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)presp << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)iresp << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)park << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)deprecated_donot_use << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR,  ((uint32_t)mode_sts_reg_15_bit_reserved << 15) |((uint32_t)rannum_counter_start << 14) |((uint32_t)piconet_sts << 13) |((uint32_t)i_end_access << 12) |((uint32_t)i_access << 11) |((uint32_t)i_beacon << 10) |((uint32_t)sco3 << 9) |((uint32_t)sco2 << 8) |((uint32_t)sco1 << 7) |((uint32_t)presp << 6) |((uint32_t)iresp << 5) |((uint32_t)park << 4) |((uint32_t)deprecated_donot_use << 0));
}

__INLINE void bt_controller_mode_status_register_unpack(uint8_t* mode_sts_reg_15_bit_reserved, uint8_t* rannum_counter_start, uint8_t* piconet_sts, uint8_t* i_end_access, uint8_t* i_access, uint8_t* i_beacon, uint8_t* sco3, uint8_t* sco2, uint8_t* sco1, uint8_t* presp, uint8_t* iresp, uint8_t* park, uint8_t* deprecated_donot_use)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR);

	*mode_sts_reg_15_bit_reserved = (localVal & ((uint32_t)0x00008000)) >>  15;
	*rannum_counter_start = (localVal & ((uint32_t)0x00004000)) >>  14;
	*piconet_sts = (localVal & ((uint32_t)0x00002000)) >>  13;
	*i_end_access = (localVal & ((uint32_t)0x00001000)) >>  12;
	*i_access = (localVal & ((uint32_t)0x00000800)) >>  11;
	*i_beacon = (localVal & ((uint32_t)0x00000400)) >>  10;
	*sco3 = (localVal & ((uint32_t)0x00000200)) >>  9;
	*sco2 = (localVal & ((uint32_t)0x00000100)) >>  8;
	*sco1 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*presp = (localVal & ((uint32_t)0x00000040)) >>  6;
	*iresp = (localVal & ((uint32_t)0x00000020)) >>  5;
	*park = (localVal & ((uint32_t)0x00000010)) >>  4;
	*deprecated_donot_use = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint8_t bt_controller_mode_status_register_mode_sts_reg_15_bit_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t bt_controller_mode_status_register_rannum_counter_start_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_mode_status_register_rannum_counter_start_setf(uint8_t rannumcounterstart)
{
	ASSERT_ERR((((uint32_t)rannumcounterstart << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)rannumcounterstart <<14));
}
__INLINE uint8_t bt_controller_mode_status_register_piconet_sts_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t bt_controller_mode_status_register_i_end_access_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE uint8_t bt_controller_mode_status_register_i_access_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE uint8_t bt_controller_mode_status_register_i_beacon_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t bt_controller_mode_status_register_sco_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000200)) >> 9);
}
__INLINE uint8_t bt_controller_mode_status_register_sco_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t bt_controller_mode_status_register_sco_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_mode_status_register_presp_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t bt_controller_mode_status_register_iresp_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE uint8_t bt_controller_mode_status_register_park_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t bt_controller_mode_status_register_deprecated_donot_use_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MODE_STATUS_REGISTER_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}

/**
 * @brief ESCO_FLUSH_LEN register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:10 esco_flush_en_reg_10_to_15_bits_are_reserved 0x0
 *    09:00 esco_host_flush_length    0x0
 * </pre>
 */
#define BT_CONTROLLER_ESCO_FLUSH_LEN_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000032C)
#define BT_CONTROLLER_ESCO_FLUSH_LEN_OFFSET      0x0000032C
#define BT_CONTROLLER_ESCO_FLUSH_LEN_INDEX       0x000000CB
#define BT_CONTROLLER_ESCO_FLUSH_LEN_RESET       0x00000000

__INLINE uint32_t  bt_controller_esco_flush_len_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ESCO_FLUSH_LEN_ADDR);
}

__INLINE void bt_controller_esco_flush_len_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ESCO_FLUSH_LEN_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ESCO_FLUSH_LEN_ESCO_FLUSH_EN_REG_10_TO_15_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FC00)
#define BT_CONTROLLER_ESCO_FLUSH_LEN_ESCO_FLUSH_EN_REG_10_TO_15_BITS_ARE_RESERVED_LSB    10
#define BT_CONTROLLER_ESCO_FLUSH_LEN_ESCO_FLUSH_EN_REG_10_TO_15_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_ESCO_FLUSH_LEN_ESCO_HOST_FLUSH_LENGTH_MASK    ((uint32_t)0x000003FF)
#define BT_CONTROLLER_ESCO_FLUSH_LEN_ESCO_HOST_FLUSH_LENGTH_LSB    0
#define BT_CONTROLLER_ESCO_FLUSH_LEN_ESCO_HOST_FLUSH_LENGTH_WIDTH    ((uint32_t)0x0000000A)

#define BT_CONTROLLER_ESCO_FLUSH_LEN_ESCO_FLUSH_EN_REG_10_TO_15_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_ESCO_FLUSH_LEN_ESCO_HOST_FLUSH_LENGTH_RST    0x0

__INLINE void bt_controller_esco_flush_len_pack(uint8_t esco_flush_en_reg_10_to_15_bits_are_reserved, uint16_t esco_host_flush_length)
{
	ASSERT_ERR((((uint32_t)esco_flush_en_reg_10_to_15_bits_are_reserved << 10) & ~((uint32_t)0x0000FC00)) == 0);
	ASSERT_ERR((((uint32_t)esco_host_flush_length << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ESCO_FLUSH_LEN_ADDR,  ((uint32_t)esco_flush_en_reg_10_to_15_bits_are_reserved << 10) |((uint32_t)esco_host_flush_length << 0));
}

__INLINE void bt_controller_esco_flush_len_unpack(uint8_t* esco_flush_en_reg_10_to_15_bits_are_reserved, uint16_t* esco_host_flush_length)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ESCO_FLUSH_LEN_ADDR);

	*esco_flush_en_reg_10_to_15_bits_are_reserved = (localVal & ((uint32_t)0x0000FC00)) >>  10;
	*esco_host_flush_length = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint8_t bt_controller_esco_flush_len_esco_flush_en_reg_10_to_15_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ESCO_FLUSH_LEN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FC00)) >> 10);
}
__INLINE void bt_controller_esco_flush_len_esco_host_flush_length_setf(uint16_t escohostflushlength)
{
	ASSERT_ERR((((uint32_t)escohostflushlength << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ESCO_FLUSH_LEN_ADDR, (REG_PL_RD(BT_CONTROLLER_ESCO_FLUSH_LEN_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)escohostflushlength <<0));
}

/**
 * @brief TSCO_TESCO_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 Te_SCO                    0x0
 *    07:06 tsco_tesco_reg_6_to_7_bits_are_reserved 0x0
 *    05:03 tsco_tesco_reg_3_to_5_bits_are_reserved 0x0
 *    02:00 Tsco                      0x0
 * </pre>
 */
#define BT_CONTROLLER_TSCO_TESCO_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000330)
#define BT_CONTROLLER_TSCO_TESCO_REG_OFFSET      0x00000330
#define BT_CONTROLLER_TSCO_TESCO_REG_INDEX       0x000000CC
#define BT_CONTROLLER_TSCO_TESCO_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_tsco_tesco_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TSCO_TESCO_REG_ADDR);
}

__INLINE void bt_controller_tsco_tesco_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TSCO_TESCO_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TSCO_TESCO_REG_TE_SCO_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_TSCO_TESCO_REG_TE_SCO_LSB    8
#define BT_CONTROLLER_TSCO_TESCO_REG_TE_SCO_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_TSCO_TESCO_REG_TSCO_TESCO_REG_6_TO_7_BITS_ARE_RESERVED_MASK    ((uint32_t)0x000000C0)
#define BT_CONTROLLER_TSCO_TESCO_REG_TSCO_TESCO_REG_6_TO_7_BITS_ARE_RESERVED_LSB    6
#define BT_CONTROLLER_TSCO_TESCO_REG_TSCO_TESCO_REG_6_TO_7_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TSCO_TESCO_REG_TSCO_TESCO_REG_3_TO_5_BITS_ARE_RESERVED_MASK    ((uint32_t)0x00000038)
#define BT_CONTROLLER_TSCO_TESCO_REG_TSCO_TESCO_REG_3_TO_5_BITS_ARE_RESERVED_LSB    3
#define BT_CONTROLLER_TSCO_TESCO_REG_TSCO_TESCO_REG_3_TO_5_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_TSCO_TESCO_REG_TSCO_MASK    ((uint32_t)0x00000007)
#define BT_CONTROLLER_TSCO_TESCO_REG_TSCO_LSB    0
#define BT_CONTROLLER_TSCO_TESCO_REG_TSCO_WIDTH    ((uint32_t)0x00000003)

#define BT_CONTROLLER_TSCO_TESCO_REG_TE_SCO_RST    0x0
#define BT_CONTROLLER_TSCO_TESCO_REG_TSCO_TESCO_REG_6_TO_7_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TSCO_TESCO_REG_TSCO_TESCO_REG_3_TO_5_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TSCO_TESCO_REG_TSCO_RST    0x0

__INLINE void bt_controller_tsco_tesco_reg_pack(uint8_t te_sco, uint8_t tsco_tesco_reg_6_to_7_bits_are_reserved, uint8_t tsco_tesco_reg_3_to_5_bits_are_reserved, uint8_t tsco)
{
	ASSERT_ERR((((uint32_t)te_sco << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)tsco_tesco_reg_6_to_7_bits_are_reserved << 6) & ~((uint32_t)0x000000C0)) == 0);
	ASSERT_ERR((((uint32_t)tsco_tesco_reg_3_to_5_bits_are_reserved << 3) & ~((uint32_t)0x00000038)) == 0);
	ASSERT_ERR((((uint32_t)tsco << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(BT_CONTROLLER_TSCO_TESCO_REG_ADDR,  ((uint32_t)te_sco << 8) |((uint32_t)tsco_tesco_reg_6_to_7_bits_are_reserved << 6) |((uint32_t)tsco_tesco_reg_3_to_5_bits_are_reserved << 3) |((uint32_t)tsco << 0));
}

__INLINE void bt_controller_tsco_tesco_reg_unpack(uint8_t* te_sco, uint8_t* tsco_tesco_reg_6_to_7_bits_are_reserved, uint8_t* tsco_tesco_reg_3_to_5_bits_are_reserved, uint8_t* tsco)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TSCO_TESCO_REG_ADDR);

	*te_sco = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*tsco_tesco_reg_6_to_7_bits_are_reserved = (localVal & ((uint32_t)0x000000C0)) >>  6;
	*tsco_tesco_reg_3_to_5_bits_are_reserved = (localVal & ((uint32_t)0x00000038)) >>  3;
	*tsco = (localVal & ((uint32_t)0x00000007)) >>  0;
}

__INLINE void bt_controller_tsco_tesco_reg_te_sco_setf(uint8_t tesco)
{
	ASSERT_ERR((((uint32_t)tesco << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_TSCO_TESCO_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TSCO_TESCO_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)tesco <<8));
}
__INLINE uint8_t bt_controller_tsco_tesco_reg_tsco_tesco_reg_6_to_7_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TSCO_TESCO_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000C0)) >> 6);
}
__INLINE uint8_t bt_controller_tsco_tesco_reg_tsco_tesco_reg_3_to_5_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TSCO_TESCO_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000038)) >> 3);
}
__INLINE uint8_t bt_controller_tsco_tesco_reg_tsco_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TSCO_TESCO_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000007)) >> 0);
}
__INLINE void bt_controller_tsco_tesco_reg_tsco_setf(uint8_t tsco)
{
	ASSERT_ERR((((uint32_t)tsco << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(BT_CONTROLLER_TSCO_TESCO_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TSCO_TESCO_REG_ADDR) & ~((uint32_t)0x00000007)) | ((uint32_t)tsco <<0));
}

/**
 * @brief WESCO_DSCO_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 wesco                     0x0
 *    07:00 dsco_or_desco             0x0
 * </pre>
 */
#define BT_CONTROLLER_WESCO_DSCO_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000334)
#define BT_CONTROLLER_WESCO_DSCO_REG_OFFSET      0x00000334
#define BT_CONTROLLER_WESCO_DSCO_REG_INDEX       0x000000CD
#define BT_CONTROLLER_WESCO_DSCO_REG_RESET       0x00000000

__INLINE void bt_controller_wesco_dsco_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_WESCO_DSCO_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_WESCO_DSCO_REG_WESCO_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_WESCO_DSCO_REG_WESCO_LSB    8
#define BT_CONTROLLER_WESCO_DSCO_REG_WESCO_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_WESCO_DSCO_REG_DSCO_OR_DESCO_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_WESCO_DSCO_REG_DSCO_OR_DESCO_LSB    0
#define BT_CONTROLLER_WESCO_DSCO_REG_DSCO_OR_DESCO_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_WESCO_DSCO_REG_WESCO_RST    0x0
#define BT_CONTROLLER_WESCO_DSCO_REG_DSCO_OR_DESCO_RST    0x0

__INLINE void bt_controller_wesco_dsco_reg_pack(uint8_t wesco, uint8_t dsco_or_desco)
{
	ASSERT_ERR((((uint32_t)wesco << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)dsco_or_desco << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_WESCO_DSCO_REG_ADDR,  ((uint32_t)wesco << 8) |((uint32_t)dsco_or_desco << 0));
}

__INLINE void bt_controller_wesco_dsco_reg_wesco_setf(uint8_t wesco)
{
	ASSERT_ERR((((uint32_t)wesco << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_WESCO_DSCO_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_WESCO_DSCO_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)wesco <<8));
}
__INLINE void bt_controller_wesco_dsco_reg_dsco_or_desco_setf(uint8_t dscoordesco)
{
	ASSERT_ERR((((uint32_t)dscoordesco << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_WESCO_DSCO_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_WESCO_DSCO_REG_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)dscoordesco <<0));
}

/**
 * @brief ESCO_LT_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 esco_type                 0x0
 *    11:10 esco_lt_en_reg_11_10_bits_are_reserved 0x0
 *    09:00 esco_length_9_to_0_bits   0x0
 * </pre>
 */
#define BT_CONTROLLER_ESCO_LT_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000338)
#define BT_CONTROLLER_ESCO_LT_REG_OFFSET      0x00000338
#define BT_CONTROLLER_ESCO_LT_REG_INDEX       0x000000CE
#define BT_CONTROLLER_ESCO_LT_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_esco_lt_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ESCO_LT_REG_ADDR);
}

__INLINE void bt_controller_esco_lt_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ESCO_LT_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ESCO_LT_REG_ESCO_TYPE_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_ESCO_LT_REG_ESCO_TYPE_LSB    12
#define BT_CONTROLLER_ESCO_LT_REG_ESCO_TYPE_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_ESCO_LT_REG_ESCO_LT_EN_REG_11_10_BITS_ARE_RESERVED_MASK    ((uint32_t)0x00000C00)
#define BT_CONTROLLER_ESCO_LT_REG_ESCO_LT_EN_REG_11_10_BITS_ARE_RESERVED_LSB    10
#define BT_CONTROLLER_ESCO_LT_REG_ESCO_LT_EN_REG_11_10_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_ESCO_LT_REG_ESCO_LENGTH_9_TO_0_BITS_MASK    ((uint32_t)0x000003FF)
#define BT_CONTROLLER_ESCO_LT_REG_ESCO_LENGTH_9_TO_0_BITS_LSB    0
#define BT_CONTROLLER_ESCO_LT_REG_ESCO_LENGTH_9_TO_0_BITS_WIDTH    ((uint32_t)0x0000000A)

#define BT_CONTROLLER_ESCO_LT_REG_ESCO_TYPE_RST    0x0
#define BT_CONTROLLER_ESCO_LT_REG_ESCO_LT_EN_REG_11_10_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_ESCO_LT_REG_ESCO_LENGTH_9_TO_0_BITS_RST    0x0

__INLINE void bt_controller_esco_lt_reg_pack(uint8_t esco_type, uint8_t esco_lt_en_reg_11_10_bits_are_reserved, uint16_t esco_length_9_to_0_bits)
{
	ASSERT_ERR((((uint32_t)esco_type << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)esco_lt_en_reg_11_10_bits_are_reserved << 10) & ~((uint32_t)0x00000C00)) == 0);
	ASSERT_ERR((((uint32_t)esco_length_9_to_0_bits << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ESCO_LT_REG_ADDR,  ((uint32_t)esco_type << 12) |((uint32_t)esco_lt_en_reg_11_10_bits_are_reserved << 10) |((uint32_t)esco_length_9_to_0_bits << 0));
}

__INLINE void bt_controller_esco_lt_reg_unpack(uint8_t* esco_type, uint8_t* esco_lt_en_reg_11_10_bits_are_reserved, uint16_t* esco_length_9_to_0_bits)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ESCO_LT_REG_ADDR);

	*esco_type = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*esco_lt_en_reg_11_10_bits_are_reserved = (localVal & ((uint32_t)0x00000C00)) >>  10;
	*esco_length_9_to_0_bits = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE void bt_controller_esco_lt_reg_esco_type_setf(uint8_t escotype)
{
	ASSERT_ERR((((uint32_t)escotype << 12) & ~((uint32_t)0x0000F000)) == 0);
	REG_PL_WR(BT_CONTROLLER_ESCO_LT_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_ESCO_LT_REG_ADDR) & ~((uint32_t)0x0000F000)) | ((uint32_t)escotype <<12));
}
__INLINE uint8_t bt_controller_esco_lt_reg_esco_lt_en_reg_11_10_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ESCO_LT_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000C00)) >> 10);
}
__INLINE void bt_controller_esco_lt_reg_esco_length_9_to_0_bits_setf(uint16_t escolength9to0bits)
{
	ASSERT_ERR((((uint32_t)escolength9to0bits << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ESCO_LT_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_ESCO_LT_REG_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)escolength9to0bits <<0));
}

/**
 * @brief POC_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 Osc_startup_delay         0x0
 *    07:03 Bb_clk_freq_minus_1       0x0
 *    02    Lpo_freq_sel              0              
 *    01    Enable_deep_sleep         0              
 *    00    po_intr_status_or_Enable_sleep 0              
 * </pre>
 */
#define BT_CONTROLLER_POC_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000033C)
#define BT_CONTROLLER_POC_REG_OFFSET      0x0000033C
#define BT_CONTROLLER_POC_REG_INDEX       0x000000CF
#define BT_CONTROLLER_POC_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_poc_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_POC_REG_ADDR);
}

__INLINE void bt_controller_poc_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_POC_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_POC_REG_OSC_STARTUP_DELAY_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_POC_REG_OSC_STARTUP_DELAY_LSB    8
#define BT_CONTROLLER_POC_REG_OSC_STARTUP_DELAY_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_POC_REG_BB_CLK_FREQ_MINUS_1_MASK    ((uint32_t)0x000000F8)
#define BT_CONTROLLER_POC_REG_BB_CLK_FREQ_MINUS_1_LSB    3
#define BT_CONTROLLER_POC_REG_BB_CLK_FREQ_MINUS_1_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_POC_REG_LPO_FREQ_SEL_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POC_REG_LPO_FREQ_SEL_POS    2
#define BT_CONTROLLER_POC_REG_ENABLE_DEEP_SLEEP_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_POC_REG_ENABLE_DEEP_SLEEP_POS    1
#define BT_CONTROLLER_POC_REG_PO_INTR_STATUS_OR_ENABLE_SLEEP_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_POC_REG_PO_INTR_STATUS_OR_ENABLE_SLEEP_POS    0

#define BT_CONTROLLER_POC_REG_OSC_STARTUP_DELAY_RST    0x0
#define BT_CONTROLLER_POC_REG_BB_CLK_FREQ_MINUS_1_RST    0x0
#define BT_CONTROLLER_POC_REG_LPO_FREQ_SEL_RST    0x0
#define BT_CONTROLLER_POC_REG_ENABLE_DEEP_SLEEP_RST    0x0
#define BT_CONTROLLER_POC_REG_PO_INTR_STATUS_OR_ENABLE_SLEEP_RST    0x0

__INLINE void bt_controller_poc_reg_pack(uint8_t osc_startup_delay, uint8_t bb_clk_freq_minus_1, uint8_t lpo_freq_sel, uint8_t enable_deep_sleep, uint8_t po_intr_status_or_enable_sleep)
{
	ASSERT_ERR((((uint32_t)osc_startup_delay << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)bb_clk_freq_minus_1 << 3) & ~((uint32_t)0x000000F8)) == 0);
	ASSERT_ERR((((uint32_t)lpo_freq_sel << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)enable_deep_sleep << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)po_intr_status_or_enable_sleep << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_POC_REG_ADDR,  ((uint32_t)osc_startup_delay << 8) |((uint32_t)bb_clk_freq_minus_1 << 3) |((uint32_t)lpo_freq_sel << 2) |((uint32_t)enable_deep_sleep << 1) |((uint32_t)po_intr_status_or_enable_sleep << 0));
}

__INLINE void bt_controller_poc_reg_unpack(uint8_t* osc_startup_delay, uint8_t* bb_clk_freq_minus_1, uint8_t* lpo_freq_sel, uint8_t* enable_deep_sleep, uint8_t* po_intr_status_or_enable_sleep)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POC_REG_ADDR);

	*osc_startup_delay = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*bb_clk_freq_minus_1 = (localVal & ((uint32_t)0x000000F8)) >>  3;
	*lpo_freq_sel = (localVal & ((uint32_t)0x00000004)) >>  2;
	*enable_deep_sleep = (localVal & ((uint32_t)0x00000002)) >>  1;
	*po_intr_status_or_enable_sleep = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_poc_reg_osc_startup_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POC_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_poc_reg_osc_startup_delay_setf(uint8_t oscstartupdelay)
{
	ASSERT_ERR((((uint32_t)oscstartupdelay << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_POC_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_POC_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)oscstartupdelay <<8));
}
__INLINE uint8_t bt_controller_poc_reg_bb_clk_freq_minus_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POC_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F8)) >> 3);
}
__INLINE void bt_controller_poc_reg_bb_clk_freq_minus_1_setf(uint8_t bbclkfreqminus1)
{
	ASSERT_ERR((((uint32_t)bbclkfreqminus1 << 3) & ~((uint32_t)0x000000F8)) == 0);
	REG_PL_WR(BT_CONTROLLER_POC_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_POC_REG_ADDR) & ~((uint32_t)0x000000F8)) | ((uint32_t)bbclkfreqminus1 <<3));
}
__INLINE uint8_t bt_controller_poc_reg_lpo_freq_sel_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POC_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_poc_reg_lpo_freq_sel_setf(uint8_t lpofreqsel)
{
	ASSERT_ERR((((uint32_t)lpofreqsel << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_POC_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_POC_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)lpofreqsel <<2));
}
__INLINE uint8_t bt_controller_poc_reg_enable_deep_sleep_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POC_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_poc_reg_enable_deep_sleep_setf(uint8_t enabledeepsleep)
{
	ASSERT_ERR((((uint32_t)enabledeepsleep << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_POC_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_POC_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)enabledeepsleep <<1));
}
__INLINE uint8_t bt_controller_poc_reg_po_intr_status_or_enable_sleep_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POC_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_poc_reg_po_intr_status_or_enable_sleep_setf(uint8_t pointrstatusorenablesleep)
{
	ASSERT_ERR((((uint32_t)pointrstatusorenablesleep << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_POC_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_POC_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)pointrstatusorenablesleep <<0));
}

/**
 * @brief FTXSTS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 mask_bits                 0x0
 *    07:04 fifo_address_to_be_flushed 0x0
 *    03:02 fxsts_reg_3_to_4_bits_reserved 0x0
 *    01    tx_fifo_empty             0              
 *    00    tx_fifo_full              0              
 * </pre>
 */
#define BT_CONTROLLER_FTXSTS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000340)
#define BT_CONTROLLER_FTXSTS_REG_OFFSET      0x00000340
#define BT_CONTROLLER_FTXSTS_REG_INDEX       0x000000D0
#define BT_CONTROLLER_FTXSTS_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_ftxsts_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_FTXSTS_REG_ADDR);
}

__INLINE void bt_controller_ftxsts_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_FTXSTS_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_FTXSTS_REG_MASK_BITS_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_FTXSTS_REG_MASK_BITS_LSB    8
#define BT_CONTROLLER_FTXSTS_REG_MASK_BITS_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_FTXSTS_REG_FIFO_ADDRESS_TO_BE_FLUSHED_MASK    ((uint32_t)0x000000F0)
#define BT_CONTROLLER_FTXSTS_REG_FIFO_ADDRESS_TO_BE_FLUSHED_LSB    4
#define BT_CONTROLLER_FTXSTS_REG_FIFO_ADDRESS_TO_BE_FLUSHED_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_FTXSTS_REG_FXSTS_REG_3_TO_4_BITS_RESERVED_MASK    ((uint32_t)0x0000000C)
#define BT_CONTROLLER_FTXSTS_REG_FXSTS_REG_3_TO_4_BITS_RESERVED_LSB    2
#define BT_CONTROLLER_FTXSTS_REG_FXSTS_REG_3_TO_4_BITS_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_FTXSTS_REG_TX_FIFO_EMPTY_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_FTXSTS_REG_TX_FIFO_EMPTY_POS    1
#define BT_CONTROLLER_FTXSTS_REG_TX_FIFO_FULL_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_FTXSTS_REG_TX_FIFO_FULL_POS    0

#define BT_CONTROLLER_FTXSTS_REG_MASK_BITS_RST    0x0
#define BT_CONTROLLER_FTXSTS_REG_FIFO_ADDRESS_TO_BE_FLUSHED_RST    0x0
#define BT_CONTROLLER_FTXSTS_REG_FXSTS_REG_3_TO_4_BITS_RESERVED_RST    0x0
#define BT_CONTROLLER_FTXSTS_REG_TX_FIFO_EMPTY_RST    0x0
#define BT_CONTROLLER_FTXSTS_REG_TX_FIFO_FULL_RST    0x0

__INLINE void bt_controller_ftxsts_reg_pack(uint8_t mask_bits, uint8_t fifo_address_to_be_flushed, uint8_t fxsts_reg_3_to_4_bits_reserved, uint8_t tx_fifo_empty, uint8_t tx_fifo_full)
{
	ASSERT_ERR((((uint32_t)mask_bits << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)fifo_address_to_be_flushed << 4) & ~((uint32_t)0x000000F0)) == 0);
	ASSERT_ERR((((uint32_t)fxsts_reg_3_to_4_bits_reserved << 2) & ~((uint32_t)0x0000000C)) == 0);
	ASSERT_ERR((((uint32_t)tx_fifo_empty << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)tx_fifo_full << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_FTXSTS_REG_ADDR,  ((uint32_t)mask_bits << 8) |((uint32_t)fifo_address_to_be_flushed << 4) |((uint32_t)fxsts_reg_3_to_4_bits_reserved << 2) |((uint32_t)tx_fifo_empty << 1) |((uint32_t)tx_fifo_full << 0));
}

__INLINE void bt_controller_ftxsts_reg_unpack(uint8_t* mask_bits, uint8_t* fifo_address_to_be_flushed, uint8_t* fxsts_reg_3_to_4_bits_reserved, uint8_t* tx_fifo_empty, uint8_t* tx_fifo_full)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FTXSTS_REG_ADDR);

	*mask_bits = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*fifo_address_to_be_flushed = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*fxsts_reg_3_to_4_bits_reserved = (localVal & ((uint32_t)0x0000000C)) >>  2;
	*tx_fifo_empty = (localVal & ((uint32_t)0x00000002)) >>  1;
	*tx_fifo_full = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_ftxsts_reg_mask_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FTXSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_ftxsts_reg_mask_bits_setf(uint8_t maskbits)
{
	ASSERT_ERR((((uint32_t)maskbits << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_FTXSTS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_FTXSTS_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)maskbits <<8));
}
__INLINE uint8_t bt_controller_ftxsts_reg_fifo_address_to_be_flushed_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FTXSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE void bt_controller_ftxsts_reg_fifo_address_to_be_flushed_setf(uint8_t fifoaddresstobeflushed)
{
	ASSERT_ERR((((uint32_t)fifoaddresstobeflushed << 4) & ~((uint32_t)0x000000F0)) == 0);
	REG_PL_WR(BT_CONTROLLER_FTXSTS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_FTXSTS_REG_ADDR) & ~((uint32_t)0x000000F0)) | ((uint32_t)fifoaddresstobeflushed <<4));
}
__INLINE uint8_t bt_controller_ftxsts_reg_fxsts_reg_3_to_4_bits_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FTXSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000C)) >> 2);
}
__INLINE uint8_t bt_controller_ftxsts_reg_tx_fifo_empty_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FTXSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t bt_controller_ftxsts_reg_tx_fifo_full_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FTXSTS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief CPU_TOPCMTX_FIFO register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 data_by_cpu               0x0
 * </pre>
 */
#define BT_CONTROLLER_CPU_TOPCMTX_FIFO_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000344)
#define BT_CONTROLLER_CPU_TOPCMTX_FIFO_OFFSET      0x00000344
#define BT_CONTROLLER_CPU_TOPCMTX_FIFO_INDEX       0x000000D1
#define BT_CONTROLLER_CPU_TOPCMTX_FIFO_RESET       0x00000000

__INLINE void bt_controller_cpu_topcmtx_fifo_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CPU_TOPCMTX_FIFO_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CPU_TOPCMTX_FIFO_DATA_BY_CPU_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_CPU_TOPCMTX_FIFO_DATA_BY_CPU_LSB    0
#define BT_CONTROLLER_CPU_TOPCMTX_FIFO_DATA_BY_CPU_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_CPU_TOPCMTX_FIFO_DATA_BY_CPU_RST    0x0

__INLINE void bt_controller_cpu_topcmtx_fifo_data_by_cpu_setf(uint16_t databycpu)
{
	ASSERT_ERR((((uint32_t)databycpu << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_CPU_TOPCMTX_FIFO_ADDR, (uint32_t)databycpu << 0);
}

/**
 * @brief CPU_TOBBTX_FIFO register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 data_of_txfifo_sco_or_esco 0x0
 * </pre>
 */
#define BT_CONTROLLER_CPU_TOBBTX_FIFO_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000348)
#define BT_CONTROLLER_CPU_TOBBTX_FIFO_OFFSET      0x00000348
#define BT_CONTROLLER_CPU_TOBBTX_FIFO_INDEX       0x000000D2
#define BT_CONTROLLER_CPU_TOBBTX_FIFO_RESET       0x00000000

__INLINE void bt_controller_cpu_tobbtx_fifo_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CPU_TOBBTX_FIFO_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CPU_TOBBTX_FIFO_DATA_OF_TXFIFO_SCO_OR_ESCO_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_CPU_TOBBTX_FIFO_DATA_OF_TXFIFO_SCO_OR_ESCO_LSB    0
#define BT_CONTROLLER_CPU_TOBBTX_FIFO_DATA_OF_TXFIFO_SCO_OR_ESCO_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_CPU_TOBBTX_FIFO_DATA_OF_TXFIFO_SCO_OR_ESCO_RST    0x0

__INLINE void bt_controller_cpu_tobbtx_fifo_data_of_txfifo_sco_or_esco_setf(uint16_t dataoftxfifoscooresco)
{
	ASSERT_ERR((((uint32_t)dataoftxfifoscooresco << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_CPU_TOBBTX_FIFO_ADDR, (uint32_t)dataoftxfifoscooresco << 0);
}

/**
 * @brief TXPATH_STS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    bbtx_full                 0              
 *    14:09 cpu_tobbtx_bytes          0x0
 *    08    bbtx_empty                1              
 *    07    pcmrx_full                0              
 *    06:01 pcmrx_tocpu_bytes         0x0
 *    00    Pcmrx_empty               1              
 * </pre>
 */
#define BT_CONTROLLER_TXPATH_STS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000034C)
#define BT_CONTROLLER_TXPATH_STS_REG_OFFSET      0x0000034C
#define BT_CONTROLLER_TXPATH_STS_REG_INDEX       0x000000D3
#define BT_CONTROLLER_TXPATH_STS_REG_RESET       0x00000101

__INLINE uint32_t  bt_controller_txpath_sts_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TXPATH_STS_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_TXPATH_STS_REG_BBTX_FULL_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_TXPATH_STS_REG_BBTX_FULL_POS    15
#define BT_CONTROLLER_TXPATH_STS_REG_CPU_TOBBTX_BYTES_MASK    ((uint32_t)0x00007E00)
#define BT_CONTROLLER_TXPATH_STS_REG_CPU_TOBBTX_BYTES_LSB    9
#define BT_CONTROLLER_TXPATH_STS_REG_CPU_TOBBTX_BYTES_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_TXPATH_STS_REG_BBTX_EMPTY_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_TXPATH_STS_REG_BBTX_EMPTY_POS    8
#define BT_CONTROLLER_TXPATH_STS_REG_PCMRX_FULL_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_TXPATH_STS_REG_PCMRX_FULL_POS    7
#define BT_CONTROLLER_TXPATH_STS_REG_PCMRX_TOCPU_BYTES_MASK    ((uint32_t)0x0000007E)
#define BT_CONTROLLER_TXPATH_STS_REG_PCMRX_TOCPU_BYTES_LSB    1
#define BT_CONTROLLER_TXPATH_STS_REG_PCMRX_TOCPU_BYTES_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_TXPATH_STS_REG_PCMRX_EMPTY_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TXPATH_STS_REG_PCMRX_EMPTY_POS    0

#define BT_CONTROLLER_TXPATH_STS_REG_BBTX_FULL_RST    0x0
#define BT_CONTROLLER_TXPATH_STS_REG_CPU_TOBBTX_BYTES_RST    0x0
#define BT_CONTROLLER_TXPATH_STS_REG_BBTX_EMPTY_RST    0x1
#define BT_CONTROLLER_TXPATH_STS_REG_PCMRX_FULL_RST    0x0
#define BT_CONTROLLER_TXPATH_STS_REG_PCMRX_TOCPU_BYTES_RST    0x0
#define BT_CONTROLLER_TXPATH_STS_REG_PCMRX_EMPTY_RST    0x1

__INLINE void bt_controller_txpath_sts_reg_unpack(uint8_t* bbtx_full, uint8_t* cpu_tobbtx_bytes, uint8_t* bbtx_empty, uint8_t* pcmrx_full, uint8_t* pcmrx_tocpu_bytes, uint8_t* pcmrx_empty)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXPATH_STS_REG_ADDR);

	*bbtx_full = (localVal & ((uint32_t)0x00008000)) >>  15;
	*cpu_tobbtx_bytes = (localVal & ((uint32_t)0x00007E00)) >>  9;
	*bbtx_empty = (localVal & ((uint32_t)0x00000100)) >>  8;
	*pcmrx_full = (localVal & ((uint32_t)0x00000080)) >>  7;
	*pcmrx_tocpu_bytes = (localVal & ((uint32_t)0x0000007E)) >>  1;
	*pcmrx_empty = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_txpath_sts_reg_bbtx_full_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXPATH_STS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t bt_controller_txpath_sts_reg_cpu_tobbtx_bytes_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXPATH_STS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00007E00)) >> 9);
}
__INLINE uint8_t bt_controller_txpath_sts_reg_bbtx_empty_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXPATH_STS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE uint8_t bt_controller_txpath_sts_reg_pcmrx_full_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXPATH_STS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_txpath_sts_reg_pcmrx_tocpu_bytes_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXPATH_STS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007E)) >> 1);
}
__INLINE uint8_t bt_controller_txpath_sts_reg_pcmrx_empty_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXPATH_STS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief LOW_IF_RX_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 low_if_rx_value           0x0800
 * </pre>
 */
#define BT_CONTROLLER_LOW_IF_RX_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000350)
#define BT_CONTROLLER_LOW_IF_RX_REG_OFFSET      0x00000350
#define BT_CONTROLLER_LOW_IF_RX_REG_INDEX       0x000000D4
#define BT_CONTROLLER_LOW_IF_RX_REG_RESET       0x00000800

__INLINE uint32_t  bt_controller_low_if_rx_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LOW_IF_RX_REG_ADDR);
}

__INLINE void bt_controller_low_if_rx_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LOW_IF_RX_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LOW_IF_RX_REG_LOW_IF_RX_VALUE_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_LOW_IF_RX_REG_LOW_IF_RX_VALUE_LSB    0
#define BT_CONTROLLER_LOW_IF_RX_REG_LOW_IF_RX_VALUE_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_LOW_IF_RX_REG_LOW_IF_RX_VALUE_RST    0x0800

__INLINE uint16_t bt_controller_low_if_rx_reg_low_if_rx_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOW_IF_RX_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_low_if_rx_reg_low_if_rx_value_setf(uint16_t lowifrxvalue)
{
	ASSERT_ERR((((uint32_t)lowifrxvalue << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOW_IF_RX_REG_ADDR, (uint32_t)lowifrxvalue << 0);
}

/**
 * @brief TOSTS_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:01 tosts1_reg_15_11_bits_are_reserved 0x0
 *    00    abort_op_btc              0              
 * </pre>
 */
#define BT_CONTROLLER_TOSTS_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000354)
#define BT_CONTROLLER_TOSTS_1_REG_OFFSET      0x00000354
#define BT_CONTROLLER_TOSTS_1_REG_INDEX       0x000000D5
#define BT_CONTROLLER_TOSTS_1_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_tosts_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TOSTS_1_REG_ADDR);
}

__INLINE void bt_controller_tosts_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TOSTS_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TOSTS_1_REG_TOSTS_1_REG_15_11_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FFFE)
#define BT_CONTROLLER_TOSTS_1_REG_TOSTS_1_REG_15_11_BITS_ARE_RESERVED_LSB    1
#define BT_CONTROLLER_TOSTS_1_REG_TOSTS_1_REG_15_11_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000000F)
#define BT_CONTROLLER_TOSTS_1_REG_ABORT_OP_BTC_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TOSTS_1_REG_ABORT_OP_BTC_POS    0

#define BT_CONTROLLER_TOSTS_1_REG_TOSTS_1_REG_15_11_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TOSTS_1_REG_ABORT_OP_BTC_RST    0x0

__INLINE void bt_controller_tosts_1_reg_pack(uint16_t tosts1_reg_15_11_bits_are_reserved, uint8_t abort_op_btc)
{
	ASSERT_ERR((((uint32_t)tosts1_reg_15_11_bits_are_reserved << 1) & ~((uint32_t)0x0000FFFE)) == 0);
	ASSERT_ERR((((uint32_t)abort_op_btc << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TOSTS_1_REG_ADDR,  ((uint32_t)tosts1_reg_15_11_bits_are_reserved << 1) |((uint32_t)abort_op_btc << 0));
}

__INLINE void bt_controller_tosts_1_reg_unpack(uint16_t* tosts1_reg_15_11_bits_are_reserved, uint8_t* abort_op_btc)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_1_REG_ADDR);

	*tosts1_reg_15_11_bits_are_reserved = (localVal & ((uint32_t)0x0000FFFE)) >>  1;
	*abort_op_btc = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_tosts_1_reg_tosts_1_reg_15_11_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_1_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFE)) >> 1);
}
__INLINE uint8_t bt_controller_tosts_1_reg_abort_op_btc_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_tosts_1_reg_abort_op_btc_setf(uint8_t abortopbtc)
{
	ASSERT_ERR((((uint32_t)abortopbtc << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TOSTS_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TOSTS_1_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)abortopbtc <<0));
}

/**
 * @brief TOSTS_1_MASK_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:01 tosts1_mask_reg_15_to_1_bits_reserved 0x0
 *    00    time_out_sts1_mask        0              
 * </pre>
 */
#define BT_CONTROLLER_TOSTS_1_MASK_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000358)
#define BT_CONTROLLER_TOSTS_1_MASK_REG_OFFSET      0x00000358
#define BT_CONTROLLER_TOSTS_1_MASK_REG_INDEX       0x000000D6
#define BT_CONTROLLER_TOSTS_1_MASK_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_tosts_1_mask_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TOSTS_1_MASK_REG_ADDR);
}

__INLINE void bt_controller_tosts_1_mask_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TOSTS_1_MASK_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TOSTS_1_MASK_REG_TOSTS_1_MASK_REG_15_TO_1_BITS_RESERVED_MASK    ((uint32_t)0x0000FFFE)
#define BT_CONTROLLER_TOSTS_1_MASK_REG_TOSTS_1_MASK_REG_15_TO_1_BITS_RESERVED_LSB    1
#define BT_CONTROLLER_TOSTS_1_MASK_REG_TOSTS_1_MASK_REG_15_TO_1_BITS_RESERVED_WIDTH    ((uint32_t)0x0000000F)
#define BT_CONTROLLER_TOSTS_1_MASK_REG_TIME_OUT_STS_1_MASK_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TOSTS_1_MASK_REG_TIME_OUT_STS_1_MASK_POS    0

#define BT_CONTROLLER_TOSTS_1_MASK_REG_TOSTS_1_MASK_REG_15_TO_1_BITS_RESERVED_RST    0x0
#define BT_CONTROLLER_TOSTS_1_MASK_REG_TIME_OUT_STS_1_MASK_RST    0x0

__INLINE void bt_controller_tosts_1_mask_reg_pack(uint16_t tosts1_mask_reg_15_to_1_bits_reserved, uint8_t time_out_sts1_mask)
{
	ASSERT_ERR((((uint32_t)tosts1_mask_reg_15_to_1_bits_reserved << 1) & ~((uint32_t)0x0000FFFE)) == 0);
	ASSERT_ERR((((uint32_t)time_out_sts1_mask << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TOSTS_1_MASK_REG_ADDR,  ((uint32_t)tosts1_mask_reg_15_to_1_bits_reserved << 1) |((uint32_t)time_out_sts1_mask << 0));
}

__INLINE void bt_controller_tosts_1_mask_reg_unpack(uint16_t* tosts1_mask_reg_15_to_1_bits_reserved, uint8_t* time_out_sts1_mask)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_1_MASK_REG_ADDR);

	*tosts1_mask_reg_15_to_1_bits_reserved = (localVal & ((uint32_t)0x0000FFFE)) >>  1;
	*time_out_sts1_mask = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_tosts_1_mask_reg_tosts_1_mask_reg_15_to_1_bits_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_1_MASK_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFE)) >> 1);
}
__INLINE uint8_t bt_controller_tosts_1_mask_reg_time_out_sts_1_mask_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TOSTS_1_MASK_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_tosts_1_mask_reg_time_out_sts_1_mask_setf(uint8_t timeoutsts1mask)
{
	ASSERT_ERR((((uint32_t)timeoutsts1mask << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TOSTS_1_MASK_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TOSTS_1_MASK_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timeoutsts1mask <<0));
}

/**
 * @brief RADIO_SEL_EXT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:13 rx_gain2_downto_0         0x0
 *    12    rf_test_mode              0              
 *    11:09 rf_test_data_pat          0x0
 *    08    fw_pos_over               0              
 *    07    Trig_acc_or_addr          0              
 *    06    radio_sel_ext_6_bit_are_reserved 0              
 *    05    Rf_lpbk_Sen_rdptr_en      0              
 *    04    Rf_test_pat_mode          0              
 *    03    radio_sel_ext_1_bit_is_reserved 0              
 *    02:00 Radio_sel_2_downto_0      0x3
 * </pre>
 */
#define BT_CONTROLLER_RADIO_SEL_EXT_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000035C)
#define BT_CONTROLLER_RADIO_SEL_EXT_OFFSET      0x0000035C
#define BT_CONTROLLER_RADIO_SEL_EXT_INDEX       0x000000D7
#define BT_CONTROLLER_RADIO_SEL_EXT_RESET       0x00000003

__INLINE uint32_t  bt_controller_radio_sel_ext_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RADIO_SEL_EXT_ADDR);
}

__INLINE void bt_controller_radio_sel_ext_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RADIO_SEL_EXT_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RADIO_SEL_EXT_RX_GAIN_2_DOWNTO_0_MASK    ((uint32_t)0x0000E000)
#define BT_CONTROLLER_RADIO_SEL_EXT_RX_GAIN_2_DOWNTO_0_LSB    13
#define BT_CONTROLLER_RADIO_SEL_EXT_RX_GAIN_2_DOWNTO_0_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_RADIO_SEL_EXT_RF_TEST_MODE_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_RADIO_SEL_EXT_RF_TEST_MODE_POS    12
#define BT_CONTROLLER_RADIO_SEL_EXT_RF_TEST_DATA_PAT_MASK    ((uint32_t)0x00000E00)
#define BT_CONTROLLER_RADIO_SEL_EXT_RF_TEST_DATA_PAT_LSB    9
#define BT_CONTROLLER_RADIO_SEL_EXT_RF_TEST_DATA_PAT_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_RADIO_SEL_EXT_FW_POS_OVER_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_RADIO_SEL_EXT_FW_POS_OVER_POS    8
#define BT_CONTROLLER_RADIO_SEL_EXT_TRIG_ACC_OR_ADDR_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_RADIO_SEL_EXT_TRIG_ACC_OR_ADDR_POS    7
#define BT_CONTROLLER_RADIO_SEL_EXT_RADIO_SEL_EXT_6_BIT_ARE_RESERVED_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_RADIO_SEL_EXT_RADIO_SEL_EXT_6_BIT_ARE_RESERVED_POS    6
#define BT_CONTROLLER_RADIO_SEL_EXT_RF_LPBK_SEN_RDPTR_EN_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_RADIO_SEL_EXT_RF_LPBK_SEN_RDPTR_EN_POS    5
#define BT_CONTROLLER_RADIO_SEL_EXT_RF_TEST_PAT_MODE_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_RADIO_SEL_EXT_RF_TEST_PAT_MODE_POS    4
#define BT_CONTROLLER_RADIO_SEL_EXT_RADIO_SEL_EXT_1_BIT_IS_RESERVED_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RADIO_SEL_EXT_RADIO_SEL_EXT_1_BIT_IS_RESERVED_POS    3
#define BT_CONTROLLER_RADIO_SEL_EXT_RADIO_SEL_2_DOWNTO_0_MASK    ((uint32_t)0x00000007)
#define BT_CONTROLLER_RADIO_SEL_EXT_RADIO_SEL_2_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RADIO_SEL_EXT_RADIO_SEL_2_DOWNTO_0_WIDTH    ((uint32_t)0x00000003)

#define BT_CONTROLLER_RADIO_SEL_EXT_RX_GAIN_2_DOWNTO_0_RST    0x0
#define BT_CONTROLLER_RADIO_SEL_EXT_RF_TEST_MODE_RST    0x0
#define BT_CONTROLLER_RADIO_SEL_EXT_RF_TEST_DATA_PAT_RST    0x0
#define BT_CONTROLLER_RADIO_SEL_EXT_FW_POS_OVER_RST    0x0
#define BT_CONTROLLER_RADIO_SEL_EXT_TRIG_ACC_OR_ADDR_RST    0x0
#define BT_CONTROLLER_RADIO_SEL_EXT_RADIO_SEL_EXT_6_BIT_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_RADIO_SEL_EXT_RF_LPBK_SEN_RDPTR_EN_RST    0x0
#define BT_CONTROLLER_RADIO_SEL_EXT_RF_TEST_PAT_MODE_RST    0x0
#define BT_CONTROLLER_RADIO_SEL_EXT_RADIO_SEL_EXT_1_BIT_IS_RESERVED_RST    0x0
#define BT_CONTROLLER_RADIO_SEL_EXT_RADIO_SEL_2_DOWNTO_0_RST    0x3

__INLINE void bt_controller_radio_sel_ext_pack(uint8_t rx_gain2_downto_0, uint8_t rf_test_mode, uint8_t rf_test_data_pat, uint8_t fw_pos_over, uint8_t trig_acc_or_addr, uint8_t radio_sel_ext_6_bit_are_reserved, uint8_t rf_lpbk_sen_rdptr_en, uint8_t rf_test_pat_mode, uint8_t radio_sel_ext_1_bit_is_reserved, uint8_t radio_sel_2_downto_0)
{
	ASSERT_ERR((((uint32_t)rx_gain2_downto_0 << 13) & ~((uint32_t)0x0000E000)) == 0);
	ASSERT_ERR((((uint32_t)rf_test_mode << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)rf_test_data_pat << 9) & ~((uint32_t)0x00000E00)) == 0);
	ASSERT_ERR((((uint32_t)fw_pos_over << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)trig_acc_or_addr << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)radio_sel_ext_6_bit_are_reserved << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)rf_lpbk_sen_rdptr_en << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)rf_test_pat_mode << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)radio_sel_ext_1_bit_is_reserved << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)radio_sel_2_downto_0 << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_SEL_EXT_ADDR,  ((uint32_t)rx_gain2_downto_0 << 13) |((uint32_t)rf_test_mode << 12) |((uint32_t)rf_test_data_pat << 9) |((uint32_t)fw_pos_over << 8) |((uint32_t)trig_acc_or_addr << 7) |((uint32_t)radio_sel_ext_6_bit_are_reserved << 6) |((uint32_t)rf_lpbk_sen_rdptr_en << 5) |((uint32_t)rf_test_pat_mode << 4) |((uint32_t)radio_sel_ext_1_bit_is_reserved << 3) |((uint32_t)radio_sel_2_downto_0 << 0));
}

__INLINE void bt_controller_radio_sel_ext_unpack(uint8_t* rx_gain2_downto_0, uint8_t* rf_test_mode, uint8_t* rf_test_data_pat, uint8_t* fw_pos_over, uint8_t* trig_acc_or_addr, uint8_t* radio_sel_ext_6_bit_are_reserved, uint8_t* rf_lpbk_sen_rdptr_en, uint8_t* rf_test_pat_mode, uint8_t* radio_sel_ext_1_bit_is_reserved, uint8_t* radio_sel_2_downto_0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_SEL_EXT_ADDR);

	*rx_gain2_downto_0 = (localVal & ((uint32_t)0x0000E000)) >>  13;
	*rf_test_mode = (localVal & ((uint32_t)0x00001000)) >>  12;
	*rf_test_data_pat = (localVal & ((uint32_t)0x00000E00)) >>  9;
	*fw_pos_over = (localVal & ((uint32_t)0x00000100)) >>  8;
	*trig_acc_or_addr = (localVal & ((uint32_t)0x00000080)) >>  7;
	*radio_sel_ext_6_bit_are_reserved = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rf_lpbk_sen_rdptr_en = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rf_test_pat_mode = (localVal & ((uint32_t)0x00000010)) >>  4;
	*radio_sel_ext_1_bit_is_reserved = (localVal & ((uint32_t)0x00000008)) >>  3;
	*radio_sel_2_downto_0 = (localVal & ((uint32_t)0x00000007)) >>  0;
}

__INLINE void bt_controller_radio_sel_ext_rx_gain_2_downto_0_setf(uint8_t rxgain2downto0)
{
	ASSERT_ERR((((uint32_t)rxgain2downto0 << 13) & ~((uint32_t)0x0000E000)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_SEL_EXT_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_SEL_EXT_ADDR) & ~((uint32_t)0x0000E000)) | ((uint32_t)rxgain2downto0 <<13));
}
__INLINE void bt_controller_radio_sel_ext_rf_test_mode_setf(uint8_t rftestmode)
{
	ASSERT_ERR((((uint32_t)rftestmode << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_SEL_EXT_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_SEL_EXT_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)rftestmode <<12));
}
__INLINE void bt_controller_radio_sel_ext_rf_test_data_pat_setf(uint8_t rftestdatapat)
{
	ASSERT_ERR((((uint32_t)rftestdatapat << 9) & ~((uint32_t)0x00000E00)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_SEL_EXT_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_SEL_EXT_ADDR) & ~((uint32_t)0x00000E00)) | ((uint32_t)rftestdatapat <<9));
}
__INLINE void bt_controller_radio_sel_ext_fw_pos_over_setf(uint8_t fwposover)
{
	ASSERT_ERR((((uint32_t)fwposover << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_SEL_EXT_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_SEL_EXT_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)fwposover <<8));
}
__INLINE void bt_controller_radio_sel_ext_trig_acc_or_addr_setf(uint8_t trigaccoraddr)
{
	ASSERT_ERR((((uint32_t)trigaccoraddr << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_SEL_EXT_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_SEL_EXT_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)trigaccoraddr <<7));
}
__INLINE uint8_t bt_controller_radio_sel_ext_radio_sel_ext_6_bit_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_SEL_EXT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE uint8_t bt_controller_radio_sel_ext_rf_lpbk_sen_rdptr_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_SEL_EXT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_radio_sel_ext_rf_lpbk_sen_rdptr_en_setf(uint8_t rflpbksenrdptren)
{
	ASSERT_ERR((((uint32_t)rflpbksenrdptren << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_SEL_EXT_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_SEL_EXT_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rflpbksenrdptren <<5));
}
__INLINE void bt_controller_radio_sel_ext_rf_test_pat_mode_setf(uint8_t rftestpatmode)
{
	ASSERT_ERR((((uint32_t)rftestpatmode << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_SEL_EXT_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_SEL_EXT_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)rftestpatmode <<4));
}
__INLINE uint8_t bt_controller_radio_sel_ext_radio_sel_ext_1_bit_is_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_SEL_EXT_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_radio_sel_ext_radio_sel_2_downto_0_setf(uint8_t radiosel2downto0)
{
	ASSERT_ERR((((uint32_t)radiosel2downto0 << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_SEL_EXT_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_SEL_EXT_ADDR) & ~((uint32_t)0x00000007)) | ((uint32_t)radiosel2downto0 <<0));
}

/**
 * @brief RADIO_CNTRL_EXT register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15    radio_cntrl_ext_host_rw   0              
 *    14:00 radio_cntrl_ext_host_addr_or_datain_bits_14_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_RADIO_CNTRL_EXT_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000360)
#define BT_CONTROLLER_RADIO_CNTRL_EXT_OFFSET      0x00000360
#define BT_CONTROLLER_RADIO_CNTRL_EXT_INDEX       0x000000D8
#define BT_CONTROLLER_RADIO_CNTRL_EXT_RESET       0x00000000

__INLINE void bt_controller_radio_cntrl_ext_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RADIO_CNTRL_EXT_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RADIO_CNTRL_EXT_RADIO_CNTRL_EXT_HOST_RW_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_RADIO_CNTRL_EXT_RADIO_CNTRL_EXT_HOST_RW_POS    15
#define BT_CONTROLLER_RADIO_CNTRL_EXT_RADIO_CNTRL_EXT_HOST_ADDR_OR_DATAIN_BITS_14_DOWNTO_0_MASK    ((uint32_t)0x00007FFF)
#define BT_CONTROLLER_RADIO_CNTRL_EXT_RADIO_CNTRL_EXT_HOST_ADDR_OR_DATAIN_BITS_14_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RADIO_CNTRL_EXT_RADIO_CNTRL_EXT_HOST_ADDR_OR_DATAIN_BITS_14_DOWNTO_0_WIDTH    ((uint32_t)0x0000000F)

#define BT_CONTROLLER_RADIO_CNTRL_EXT_RADIO_CNTRL_EXT_HOST_RW_RST    0x0
#define BT_CONTROLLER_RADIO_CNTRL_EXT_RADIO_CNTRL_EXT_HOST_ADDR_OR_DATAIN_BITS_14_DOWNTO_0_RST    0x0

__INLINE void bt_controller_radio_cntrl_ext_pack(uint8_t radio_cntrl_ext_host_rw, uint16_t radio_cntrl_ext_host_addr_or_datain_bits_14_downto_0)
{
	ASSERT_ERR((((uint32_t)radio_cntrl_ext_host_rw << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)radio_cntrl_ext_host_addr_or_datain_bits_14_downto_0 << 0) & ~((uint32_t)0x00007FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CNTRL_EXT_ADDR,  ((uint32_t)radio_cntrl_ext_host_rw << 15) |((uint32_t)radio_cntrl_ext_host_addr_or_datain_bits_14_downto_0 << 0));
}

__INLINE void bt_controller_radio_cntrl_ext_radio_cntrl_ext_host_rw_setf(uint8_t radiocntrlexthostrw)
{
	ASSERT_ERR((((uint32_t)radiocntrlexthostrw << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CNTRL_EXT_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_CNTRL_EXT_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)radiocntrlexthostrw <<15));
}
__INLINE void bt_controller_radio_cntrl_ext_radio_cntrl_ext_host_addr_or_datain_bits_14_downto_0_setf(uint16_t radiocntrlexthostaddrordatainbits14downto0)
{
	ASSERT_ERR((((uint32_t)radiocntrlexthostaddrordatainbits14downto0 << 0) & ~((uint32_t)0x00007FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CNTRL_EXT_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_CNTRL_EXT_ADDR) & ~((uint32_t)0x00007FFF)) | ((uint32_t)radiocntrlexthostaddrordatainbits14downto0 <<0));
}

/**
 * @brief ESCO_END_STATUS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 lut_fsm_monitor_7_to_0_bits 0x0
 *    07    esco_end_sts_reg_7th_bit_is_reserved 0              
 *    06:00 Esco_end_status           0x0
 * </pre>
 */
#define BT_CONTROLLER_ESCO_END_STATUS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000364)
#define BT_CONTROLLER_ESCO_END_STATUS_REG_OFFSET      0x00000364
#define BT_CONTROLLER_ESCO_END_STATUS_REG_INDEX       0x000000D9
#define BT_CONTROLLER_ESCO_END_STATUS_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_esco_end_status_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ESCO_END_STATUS_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_ESCO_END_STATUS_REG_LUT_FSM_MONITOR_7_TO_0_BITS_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_ESCO_END_STATUS_REG_LUT_FSM_MONITOR_7_TO_0_BITS_LSB    8
#define BT_CONTROLLER_ESCO_END_STATUS_REG_LUT_FSM_MONITOR_7_TO_0_BITS_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_ESCO_END_STATUS_REG_ESCO_END_STS_REG_7_TH_BIT_IS_RESERVED_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_ESCO_END_STATUS_REG_ESCO_END_STS_REG_7_TH_BIT_IS_RESERVED_POS    7
#define BT_CONTROLLER_ESCO_END_STATUS_REG_ESCO_END_STATUS_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_ESCO_END_STATUS_REG_ESCO_END_STATUS_LSB    0
#define BT_CONTROLLER_ESCO_END_STATUS_REG_ESCO_END_STATUS_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_ESCO_END_STATUS_REG_LUT_FSM_MONITOR_7_TO_0_BITS_RST    0x0
#define BT_CONTROLLER_ESCO_END_STATUS_REG_ESCO_END_STS_REG_7_TH_BIT_IS_RESERVED_RST    0x0
#define BT_CONTROLLER_ESCO_END_STATUS_REG_ESCO_END_STATUS_RST    0x0

__INLINE void bt_controller_esco_end_status_reg_unpack(uint8_t* lut_fsm_monitor_7_to_0_bits, uint8_t* esco_end_sts_reg_7th_bit_is_reserved, uint8_t* esco_end_status)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ESCO_END_STATUS_REG_ADDR);

	*lut_fsm_monitor_7_to_0_bits = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*esco_end_sts_reg_7th_bit_is_reserved = (localVal & ((uint32_t)0x00000080)) >>  7;
	*esco_end_status = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_esco_end_status_reg_lut_fsm_monitor_7_to_0_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ESCO_END_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t bt_controller_esco_end_status_reg_esco_end_sts_reg_7_th_bit_is_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ESCO_END_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_esco_end_status_reg_esco_end_status_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ESCO_END_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}

/**
 * @brief ESCO_TX_TYPE register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:10 Esco_Packet_Type          0x0
 *    09:00 esco_tx_type_reg_9_to_0_bits_are_reserved 0x0
 * </pre>
 */
#define BT_CONTROLLER_ESCO_TX_TYPE_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000368)
#define BT_CONTROLLER_ESCO_TX_TYPE_OFFSET      0x00000368
#define BT_CONTROLLER_ESCO_TX_TYPE_INDEX       0x000000DA
#define BT_CONTROLLER_ESCO_TX_TYPE_RESET       0x00000000

__INLINE uint32_t  bt_controller_esco_tx_type_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ESCO_TX_TYPE_ADDR);
}

__INLINE void bt_controller_esco_tx_type_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ESCO_TX_TYPE_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ESCO_TX_TYPE_ESCO_PACKET_TYPE_MASK    ((uint32_t)0x0000FC00)
#define BT_CONTROLLER_ESCO_TX_TYPE_ESCO_PACKET_TYPE_LSB    10
#define BT_CONTROLLER_ESCO_TX_TYPE_ESCO_PACKET_TYPE_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_ESCO_TX_TYPE_ESCO_TX_TYPE_REG_9_TO_0_BITS_ARE_RESERVED_MASK    ((uint32_t)0x000003FF)
#define BT_CONTROLLER_ESCO_TX_TYPE_ESCO_TX_TYPE_REG_9_TO_0_BITS_ARE_RESERVED_LSB    0
#define BT_CONTROLLER_ESCO_TX_TYPE_ESCO_TX_TYPE_REG_9_TO_0_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000000A)

#define BT_CONTROLLER_ESCO_TX_TYPE_ESCO_PACKET_TYPE_RST    0x0
#define BT_CONTROLLER_ESCO_TX_TYPE_ESCO_TX_TYPE_REG_9_TO_0_BITS_ARE_RESERVED_RST    0x0

__INLINE void bt_controller_esco_tx_type_pack(uint8_t esco_packet_type, uint16_t esco_tx_type_reg_9_to_0_bits_are_reserved)
{
	ASSERT_ERR((((uint32_t)esco_packet_type << 10) & ~((uint32_t)0x0000FC00)) == 0);
	ASSERT_ERR((((uint32_t)esco_tx_type_reg_9_to_0_bits_are_reserved << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ESCO_TX_TYPE_ADDR,  ((uint32_t)esco_packet_type << 10) |((uint32_t)esco_tx_type_reg_9_to_0_bits_are_reserved << 0));
}

__INLINE void bt_controller_esco_tx_type_unpack(uint8_t* esco_packet_type, uint16_t* esco_tx_type_reg_9_to_0_bits_are_reserved)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ESCO_TX_TYPE_ADDR);

	*esco_packet_type = (localVal & ((uint32_t)0x0000FC00)) >>  10;
	*esco_tx_type_reg_9_to_0_bits_are_reserved = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE void bt_controller_esco_tx_type_esco_packet_type_setf(uint8_t escopackettype)
{
	ASSERT_ERR((((uint32_t)escopackettype << 10) & ~((uint32_t)0x0000FC00)) == 0);
	REG_PL_WR(BT_CONTROLLER_ESCO_TX_TYPE_ADDR, (REG_PL_RD(BT_CONTROLLER_ESCO_TX_TYPE_ADDR) & ~((uint32_t)0x0000FC00)) | ((uint32_t)escopackettype <<10));
}
__INLINE uint16_t bt_controller_esco_tx_type_esco_tx_type_reg_9_to_0_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ESCO_TX_TYPE_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}

/**
 * @brief RF_PROG_DATA_11_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rf_prog_data1_15downto0   0x0
 * </pre>
 */
#define BT_CONTROLLER_RF_PROG_DATA_11_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000036C)
#define BT_CONTROLLER_RF_PROG_DATA_11_REG_OFFSET      0x0000036C
#define BT_CONTROLLER_RF_PROG_DATA_11_REG_INDEX       0x000000DB
#define BT_CONTROLLER_RF_PROG_DATA_11_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rf_prog_data_11_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_11_REG_ADDR);
}

__INLINE void bt_controller_rf_prog_data_11_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_11_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_PROG_DATA_11_REG_RF_PROG_DATA_1_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_PROG_DATA_11_REG_RF_PROG_DATA_1_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_PROG_DATA_11_REG_RF_PROG_DATA_1_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_PROG_DATA_11_REG_RF_PROG_DATA_1_15_DOWNTO_0_RST    0x0

__INLINE uint16_t bt_controller_rf_prog_data_11_reg_rf_prog_data_1_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_11_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_prog_data_11_reg_rf_prog_data_1_15_downto_0_setf(uint16_t rfprogdata115downto0)
{
	ASSERT_ERR((((uint32_t)rfprogdata115downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_11_REG_ADDR, (uint32_t)rfprogdata115downto0 << 0);
}

/**
 * @brief RF_PROG_DATA_12_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rf_prog_data1_31downto16  0x0
 * </pre>
 */
#define BT_CONTROLLER_RF_PROG_DATA_12_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000370)
#define BT_CONTROLLER_RF_PROG_DATA_12_REG_OFFSET      0x00000370
#define BT_CONTROLLER_RF_PROG_DATA_12_REG_INDEX       0x000000DC
#define BT_CONTROLLER_RF_PROG_DATA_12_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rf_prog_data_12_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_12_REG_ADDR);
}

__INLINE void bt_controller_rf_prog_data_12_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_12_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_PROG_DATA_12_REG_RF_PROG_DATA_1_31_DOWNTO_16_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_PROG_DATA_12_REG_RF_PROG_DATA_1_31_DOWNTO_16_LSB    0
#define BT_CONTROLLER_RF_PROG_DATA_12_REG_RF_PROG_DATA_1_31_DOWNTO_16_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_PROG_DATA_12_REG_RF_PROG_DATA_1_31_DOWNTO_16_RST    0x0

__INLINE uint16_t bt_controller_rf_prog_data_12_reg_rf_prog_data_1_31_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_12_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_prog_data_12_reg_rf_prog_data_1_31_downto_16_setf(uint16_t rfprogdata131downto16)
{
	ASSERT_ERR((((uint32_t)rfprogdata131downto16 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_12_REG_ADDR, (uint32_t)rfprogdata131downto16 << 0);
}

/**
 * @brief RF_PROG_DATA_21_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rf_prog_data2_15downto0   0x0
 * </pre>
 */
#define BT_CONTROLLER_RF_PROG_DATA_21_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000374)
#define BT_CONTROLLER_RF_PROG_DATA_21_REG_OFFSET      0x00000374
#define BT_CONTROLLER_RF_PROG_DATA_21_REG_INDEX       0x000000DD
#define BT_CONTROLLER_RF_PROG_DATA_21_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rf_prog_data_21_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_21_REG_ADDR);
}

__INLINE void bt_controller_rf_prog_data_21_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_21_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_PROG_DATA_21_REG_RF_PROG_DATA_2_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_PROG_DATA_21_REG_RF_PROG_DATA_2_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_PROG_DATA_21_REG_RF_PROG_DATA_2_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_PROG_DATA_21_REG_RF_PROG_DATA_2_15_DOWNTO_0_RST    0x0

__INLINE uint16_t bt_controller_rf_prog_data_21_reg_rf_prog_data_2_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_21_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_prog_data_21_reg_rf_prog_data_2_15_downto_0_setf(uint16_t rfprogdata215downto0)
{
	ASSERT_ERR((((uint32_t)rfprogdata215downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_21_REG_ADDR, (uint32_t)rfprogdata215downto0 << 0);
}

/**
 * @brief RF_PROG_DATA_22_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rf_prog_data2_31downto16  0x0
 * </pre>
 */
#define BT_CONTROLLER_RF_PROG_DATA_22_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000378)
#define BT_CONTROLLER_RF_PROG_DATA_22_REG_OFFSET      0x00000378
#define BT_CONTROLLER_RF_PROG_DATA_22_REG_INDEX       0x000000DE
#define BT_CONTROLLER_RF_PROG_DATA_22_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rf_prog_data_22_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_22_REG_ADDR);
}

__INLINE void bt_controller_rf_prog_data_22_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_22_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_PROG_DATA_22_REG_RF_PROG_DATA_2_31_DOWNTO_16_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_PROG_DATA_22_REG_RF_PROG_DATA_2_31_DOWNTO_16_LSB    0
#define BT_CONTROLLER_RF_PROG_DATA_22_REG_RF_PROG_DATA_2_31_DOWNTO_16_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_PROG_DATA_22_REG_RF_PROG_DATA_2_31_DOWNTO_16_RST    0x0

__INLINE uint16_t bt_controller_rf_prog_data_22_reg_rf_prog_data_2_31_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_22_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_prog_data_22_reg_rf_prog_data_2_31_downto_16_setf(uint16_t rfprogdata231downto16)
{
	ASSERT_ERR((((uint32_t)rfprogdata231downto16 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_22_REG_ADDR, (uint32_t)rfprogdata231downto16 << 0);
}

/**
 * @brief RF_PROG_DATA_31_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rf_prog_data3_15downto0   0x0
 * </pre>
 */
#define BT_CONTROLLER_RF_PROG_DATA_31_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000037C)
#define BT_CONTROLLER_RF_PROG_DATA_31_REG_OFFSET      0x0000037C
#define BT_CONTROLLER_RF_PROG_DATA_31_REG_INDEX       0x000000DF
#define BT_CONTROLLER_RF_PROG_DATA_31_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rf_prog_data_31_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_31_REG_ADDR);
}

__INLINE void bt_controller_rf_prog_data_31_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_31_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_PROG_DATA_31_REG_RF_PROG_DATA_3_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_PROG_DATA_31_REG_RF_PROG_DATA_3_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_PROG_DATA_31_REG_RF_PROG_DATA_3_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_PROG_DATA_31_REG_RF_PROG_DATA_3_15_DOWNTO_0_RST    0x0

__INLINE uint16_t bt_controller_rf_prog_data_31_reg_rf_prog_data_3_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_31_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_prog_data_31_reg_rf_prog_data_3_15_downto_0_setf(uint16_t rfprogdata315downto0)
{
	ASSERT_ERR((((uint32_t)rfprogdata315downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_31_REG_ADDR, (uint32_t)rfprogdata315downto0 << 0);
}

/**
 * @brief RF_PROG_DATA_32_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rf_prog_data3_31downto16  0x0
 * </pre>
 */
#define BT_CONTROLLER_RF_PROG_DATA_32_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000380)
#define BT_CONTROLLER_RF_PROG_DATA_32_REG_OFFSET      0x00000380
#define BT_CONTROLLER_RF_PROG_DATA_32_REG_INDEX       0x000000E0
#define BT_CONTROLLER_RF_PROG_DATA_32_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rf_prog_data_32_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_32_REG_ADDR);
}

__INLINE void bt_controller_rf_prog_data_32_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_32_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_PROG_DATA_32_REG_RF_PROG_DATA_3_31_DOWNTO_16_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_PROG_DATA_32_REG_RF_PROG_DATA_3_31_DOWNTO_16_LSB    0
#define BT_CONTROLLER_RF_PROG_DATA_32_REG_RF_PROG_DATA_3_31_DOWNTO_16_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_PROG_DATA_32_REG_RF_PROG_DATA_3_31_DOWNTO_16_RST    0x0

__INLINE uint16_t bt_controller_rf_prog_data_32_reg_rf_prog_data_3_31_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_32_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_prog_data_32_reg_rf_prog_data_3_31_downto_16_setf(uint16_t rfprogdata331downto16)
{
	ASSERT_ERR((((uint32_t)rfprogdata331downto16 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_32_REG_ADDR, (uint32_t)rfprogdata331downto16 << 0);
}

/**
 * @brief RF_PROG_DATA_41_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rf_prog_data4_15downto0   0x0
 * </pre>
 */
#define BT_CONTROLLER_RF_PROG_DATA_41_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000384)
#define BT_CONTROLLER_RF_PROG_DATA_41_REG_OFFSET      0x00000384
#define BT_CONTROLLER_RF_PROG_DATA_41_REG_INDEX       0x000000E1
#define BT_CONTROLLER_RF_PROG_DATA_41_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rf_prog_data_41_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_41_REG_ADDR);
}

__INLINE void bt_controller_rf_prog_data_41_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_41_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_PROG_DATA_41_REG_RF_PROG_DATA_4_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_PROG_DATA_41_REG_RF_PROG_DATA_4_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_PROG_DATA_41_REG_RF_PROG_DATA_4_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_PROG_DATA_41_REG_RF_PROG_DATA_4_15_DOWNTO_0_RST    0x0

__INLINE uint16_t bt_controller_rf_prog_data_41_reg_rf_prog_data_4_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_41_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_prog_data_41_reg_rf_prog_data_4_15_downto_0_setf(uint16_t rfprogdata415downto0)
{
	ASSERT_ERR((((uint32_t)rfprogdata415downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_41_REG_ADDR, (uint32_t)rfprogdata415downto0 << 0);
}

/**
 * @brief RF_PROG_DATA_42_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rf_prog_data4_31downto16  0x0
 * </pre>
 */
#define BT_CONTROLLER_RF_PROG_DATA_42_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000388)
#define BT_CONTROLLER_RF_PROG_DATA_42_REG_OFFSET      0x00000388
#define BT_CONTROLLER_RF_PROG_DATA_42_REG_INDEX       0x000000E2
#define BT_CONTROLLER_RF_PROG_DATA_42_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rf_prog_data_42_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_42_REG_ADDR);
}

__INLINE void bt_controller_rf_prog_data_42_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_42_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_PROG_DATA_42_REG_RF_PROG_DATA_4_31_DOWNTO_16_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_PROG_DATA_42_REG_RF_PROG_DATA_4_31_DOWNTO_16_LSB    0
#define BT_CONTROLLER_RF_PROG_DATA_42_REG_RF_PROG_DATA_4_31_DOWNTO_16_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_PROG_DATA_42_REG_RF_PROG_DATA_4_31_DOWNTO_16_RST    0x0

__INLINE uint16_t bt_controller_rf_prog_data_42_reg_rf_prog_data_4_31_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_42_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_prog_data_42_reg_rf_prog_data_4_31_downto_16_setf(uint16_t rfprogdata431downto16)
{
	ASSERT_ERR((((uint32_t)rfprogdata431downto16 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_42_REG_ADDR, (uint32_t)rfprogdata431downto16 << 0);
}

/**
 * @brief RF_PROG_DATA_51_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rf_prog_data5_15downto0   0x0
 * </pre>
 */
#define BT_CONTROLLER_RF_PROG_DATA_51_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000038C)
#define BT_CONTROLLER_RF_PROG_DATA_51_REG_OFFSET      0x0000038C
#define BT_CONTROLLER_RF_PROG_DATA_51_REG_INDEX       0x000000E3
#define BT_CONTROLLER_RF_PROG_DATA_51_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rf_prog_data_51_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_51_REG_ADDR);
}

__INLINE void bt_controller_rf_prog_data_51_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_51_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_PROG_DATA_51_REG_RF_PROG_DATA_5_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_PROG_DATA_51_REG_RF_PROG_DATA_5_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_PROG_DATA_51_REG_RF_PROG_DATA_5_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_PROG_DATA_51_REG_RF_PROG_DATA_5_15_DOWNTO_0_RST    0x0

__INLINE uint16_t bt_controller_rf_prog_data_51_reg_rf_prog_data_5_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_51_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_prog_data_51_reg_rf_prog_data_5_15_downto_0_setf(uint16_t rfprogdata515downto0)
{
	ASSERT_ERR((((uint32_t)rfprogdata515downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_51_REG_ADDR, (uint32_t)rfprogdata515downto0 << 0);
}

/**
 * @brief RF_PROG_DATA_52_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rf_prog_data5_31downto16  0x0
 * </pre>
 */
#define BT_CONTROLLER_RF_PROG_DATA_52_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000390)
#define BT_CONTROLLER_RF_PROG_DATA_52_REG_OFFSET      0x00000390
#define BT_CONTROLLER_RF_PROG_DATA_52_REG_INDEX       0x000000E4
#define BT_CONTROLLER_RF_PROG_DATA_52_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rf_prog_data_52_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_52_REG_ADDR);
}

__INLINE void bt_controller_rf_prog_data_52_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_52_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_PROG_DATA_52_REG_RF_PROG_DATA_5_31_DOWNTO_16_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_PROG_DATA_52_REG_RF_PROG_DATA_5_31_DOWNTO_16_LSB    0
#define BT_CONTROLLER_RF_PROG_DATA_52_REG_RF_PROG_DATA_5_31_DOWNTO_16_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_PROG_DATA_52_REG_RF_PROG_DATA_5_31_DOWNTO_16_RST    0x0

__INLINE uint16_t bt_controller_rf_prog_data_52_reg_rf_prog_data_5_31_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_PROG_DATA_52_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_prog_data_52_reg_rf_prog_data_5_31_downto_16_setf(uint16_t rfprogdata531downto16)
{
	ASSERT_ERR((((uint32_t)rfprogdata531downto16 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_PROG_DATA_52_REG_ADDR, (uint32_t)rfprogdata531downto16 << 0);
}

/**
 * @brief RF_PROG_ADDR_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rf_prog_addr1_15downto0   0x7FFF
 * </pre>
 */
#define BT_CONTROLLER_RF_PROG_ADDR_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000394)
#define BT_CONTROLLER_RF_PROG_ADDR_1_REG_OFFSET      0x00000394
#define BT_CONTROLLER_RF_PROG_ADDR_1_REG_INDEX       0x000000E5
#define BT_CONTROLLER_RF_PROG_ADDR_1_REG_RESET       0x00007FFF

__INLINE uint32_t  bt_controller_rf_prog_addr_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_PROG_ADDR_1_REG_ADDR);
}

__INLINE void bt_controller_rf_prog_addr_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_PROG_ADDR_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_PROG_ADDR_1_REG_RF_PROG_ADDR_1_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_PROG_ADDR_1_REG_RF_PROG_ADDR_1_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_PROG_ADDR_1_REG_RF_PROG_ADDR_1_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_PROG_ADDR_1_REG_RF_PROG_ADDR_1_15_DOWNTO_0_RST    0x7FFF

__INLINE uint16_t bt_controller_rf_prog_addr_1_reg_rf_prog_addr_1_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_PROG_ADDR_1_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_prog_addr_1_reg_rf_prog_addr_1_15_downto_0_setf(uint16_t rfprogaddr115downto0)
{
	ASSERT_ERR((((uint32_t)rfprogaddr115downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_PROG_ADDR_1_REG_ADDR, (uint32_t)rfprogaddr115downto0 << 0);
}

/**
 * @brief RF_PROG_ADDR_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rf_prog_addr2_15downto0   0x7FFF
 * </pre>
 */
#define BT_CONTROLLER_RF_PROG_ADDR_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00000398)
#define BT_CONTROLLER_RF_PROG_ADDR_2_REG_OFFSET      0x00000398
#define BT_CONTROLLER_RF_PROG_ADDR_2_REG_INDEX       0x000000E6
#define BT_CONTROLLER_RF_PROG_ADDR_2_REG_RESET       0x00007FFF

__INLINE uint32_t  bt_controller_rf_prog_addr_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_PROG_ADDR_2_REG_ADDR);
}

__INLINE void bt_controller_rf_prog_addr_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_PROG_ADDR_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_PROG_ADDR_2_REG_RF_PROG_ADDR_2_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_PROG_ADDR_2_REG_RF_PROG_ADDR_2_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_PROG_ADDR_2_REG_RF_PROG_ADDR_2_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_PROG_ADDR_2_REG_RF_PROG_ADDR_2_15_DOWNTO_0_RST    0x7FFF

__INLINE uint16_t bt_controller_rf_prog_addr_2_reg_rf_prog_addr_2_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_PROG_ADDR_2_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_prog_addr_2_reg_rf_prog_addr_2_15_downto_0_setf(uint16_t rfprogaddr215downto0)
{
	ASSERT_ERR((((uint32_t)rfprogaddr215downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_PROG_ADDR_2_REG_ADDR, (uint32_t)rfprogaddr215downto0 << 0);
}

/**
 * @brief RF_PROG_ADDR_3_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rf_prog_addr3_15downto0   0x7FFF
 * </pre>
 */
#define BT_CONTROLLER_RF_PROG_ADDR_3_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000039C)
#define BT_CONTROLLER_RF_PROG_ADDR_3_REG_OFFSET      0x0000039C
#define BT_CONTROLLER_RF_PROG_ADDR_3_REG_INDEX       0x000000E7
#define BT_CONTROLLER_RF_PROG_ADDR_3_REG_RESET       0x00007FFF

__INLINE uint32_t  bt_controller_rf_prog_addr_3_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_PROG_ADDR_3_REG_ADDR);
}

__INLINE void bt_controller_rf_prog_addr_3_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_PROG_ADDR_3_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_PROG_ADDR_3_REG_RF_PROG_ADDR_3_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_PROG_ADDR_3_REG_RF_PROG_ADDR_3_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_PROG_ADDR_3_REG_RF_PROG_ADDR_3_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_PROG_ADDR_3_REG_RF_PROG_ADDR_3_15_DOWNTO_0_RST    0x7FFF

__INLINE uint16_t bt_controller_rf_prog_addr_3_reg_rf_prog_addr_3_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_PROG_ADDR_3_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_prog_addr_3_reg_rf_prog_addr_3_15_downto_0_setf(uint16_t rfprogaddr315downto0)
{
	ASSERT_ERR((((uint32_t)rfprogaddr315downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_PROG_ADDR_3_REG_ADDR, (uint32_t)rfprogaddr315downto0 << 0);
}

/**
 * @brief RF_PROG_ADDR_4_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rf_prog_addr4_15downto0   0x7FFF
 * </pre>
 */
#define BT_CONTROLLER_RF_PROG_ADDR_4_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003A0)
#define BT_CONTROLLER_RF_PROG_ADDR_4_REG_OFFSET      0x000003A0
#define BT_CONTROLLER_RF_PROG_ADDR_4_REG_INDEX       0x000000E8
#define BT_CONTROLLER_RF_PROG_ADDR_4_REG_RESET       0x00007FFF

__INLINE uint32_t  bt_controller_rf_prog_addr_4_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_PROG_ADDR_4_REG_ADDR);
}

__INLINE void bt_controller_rf_prog_addr_4_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_PROG_ADDR_4_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_PROG_ADDR_4_REG_RF_PROG_ADDR_4_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_PROG_ADDR_4_REG_RF_PROG_ADDR_4_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_PROG_ADDR_4_REG_RF_PROG_ADDR_4_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_PROG_ADDR_4_REG_RF_PROG_ADDR_4_15_DOWNTO_0_RST    0x7FFF

__INLINE uint16_t bt_controller_rf_prog_addr_4_reg_rf_prog_addr_4_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_PROG_ADDR_4_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_prog_addr_4_reg_rf_prog_addr_4_15_downto_0_setf(uint16_t rfprogaddr415downto0)
{
	ASSERT_ERR((((uint32_t)rfprogaddr415downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_PROG_ADDR_4_REG_ADDR, (uint32_t)rfprogaddr415downto0 << 0);
}

/**
 * @brief RF_PROG_ADDR_5_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rf_prog_addr5_15downto0   0x7FFF
 * </pre>
 */
#define BT_CONTROLLER_RF_PROG_ADDR_5_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003A4)
#define BT_CONTROLLER_RF_PROG_ADDR_5_REG_OFFSET      0x000003A4
#define BT_CONTROLLER_RF_PROG_ADDR_5_REG_INDEX       0x000000E9
#define BT_CONTROLLER_RF_PROG_ADDR_5_REG_RESET       0x00007FFF

__INLINE uint32_t  bt_controller_rf_prog_addr_5_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_PROG_ADDR_5_REG_ADDR);
}

__INLINE void bt_controller_rf_prog_addr_5_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_PROG_ADDR_5_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_PROG_ADDR_5_REG_RF_PROG_ADDR_5_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_PROG_ADDR_5_REG_RF_PROG_ADDR_5_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_PROG_ADDR_5_REG_RF_PROG_ADDR_5_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_PROG_ADDR_5_REG_RF_PROG_ADDR_5_15_DOWNTO_0_RST    0x7FFF

__INLINE uint16_t bt_controller_rf_prog_addr_5_reg_rf_prog_addr_5_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_PROG_ADDR_5_REG_ADDR);
	return (uint16_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_prog_addr_5_reg_rf_prog_addr_5_15_downto_0_setf(uint16_t rfprogaddr515downto0)
{
	ASSERT_ERR((((uint32_t)rfprogaddr515downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_PROG_ADDR_5_REG_ADDR, (uint32_t)rfprogaddr515downto0 << 0);
}

/**
 * @brief RF_ADC_DELAY_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 rf_adc_delay1_reg_15downto8 0x00
 *    07:00 rf_adc_delay1_reg_7downto0 0x6D
 * </pre>
 */
#define BT_CONTROLLER_RF_ADC_DELAY_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003A8)
#define BT_CONTROLLER_RF_ADC_DELAY_1_REG_OFFSET      0x000003A8
#define BT_CONTROLLER_RF_ADC_DELAY_1_REG_INDEX       0x000000EA
#define BT_CONTROLLER_RF_ADC_DELAY_1_REG_RESET       0x0000006D

__INLINE uint32_t  bt_controller_rf_adc_delay_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_ADC_DELAY_1_REG_ADDR);
}

__INLINE void bt_controller_rf_adc_delay_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_ADC_DELAY_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_ADC_DELAY_1_REG_RF_ADC_DELAY_1_REG_15_DOWNTO_8_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_RF_ADC_DELAY_1_REG_RF_ADC_DELAY_1_REG_15_DOWNTO_8_LSB    8
#define BT_CONTROLLER_RF_ADC_DELAY_1_REG_RF_ADC_DELAY_1_REG_15_DOWNTO_8_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RF_ADC_DELAY_1_REG_RF_ADC_DELAY_1_REG_7_DOWNTO_0_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_RF_ADC_DELAY_1_REG_RF_ADC_DELAY_1_REG_7_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_ADC_DELAY_1_REG_RF_ADC_DELAY_1_REG_7_DOWNTO_0_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_RF_ADC_DELAY_1_REG_RF_ADC_DELAY_1_REG_15_DOWNTO_8_RST    0x00
#define BT_CONTROLLER_RF_ADC_DELAY_1_REG_RF_ADC_DELAY_1_REG_7_DOWNTO_0_RST    0x6D

__INLINE void bt_controller_rf_adc_delay_1_reg_pack(uint8_t rf_adc_delay1_reg_15downto8, uint8_t rf_adc_delay1_reg_7downto0)
{
	ASSERT_ERR((((uint32_t)rf_adc_delay1_reg_15downto8 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)rf_adc_delay1_reg_7downto0 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_ADC_DELAY_1_REG_ADDR,  ((uint32_t)rf_adc_delay1_reg_15downto8 << 8) |((uint32_t)rf_adc_delay1_reg_7downto0 << 0));
}

__INLINE void bt_controller_rf_adc_delay_1_reg_unpack(uint8_t* rf_adc_delay1_reg_15downto8, uint8_t* rf_adc_delay1_reg_7downto0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADC_DELAY_1_REG_ADDR);

	*rf_adc_delay1_reg_15downto8 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*rf_adc_delay1_reg_7downto0 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_rf_adc_delay_1_reg_rf_adc_delay_1_reg_15_downto_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADC_DELAY_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t bt_controller_rf_adc_delay_1_reg_rf_adc_delay_1_reg_7_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADC_DELAY_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_rf_adc_delay_1_reg_rf_adc_delay_1_reg_7_downto_0_setf(uint8_t rfadcdelay1reg7downto0)
{
	ASSERT_ERR((((uint32_t)rfadcdelay1reg7downto0 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_ADC_DELAY_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RF_ADC_DELAY_1_REG_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)rfadcdelay1reg7downto0 <<0));
}

/**
 * @brief RF_ADC_DELAY_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 rf_adc_delay2_reg_15downto8 0x00
 *    07:00 rf_adc_delay2_reg_7downto0 0x6D
 * </pre>
 */
#define BT_CONTROLLER_RF_ADC_DELAY_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003AC)
#define BT_CONTROLLER_RF_ADC_DELAY_2_REG_OFFSET      0x000003AC
#define BT_CONTROLLER_RF_ADC_DELAY_2_REG_INDEX       0x000000EB
#define BT_CONTROLLER_RF_ADC_DELAY_2_REG_RESET       0x0000006D

__INLINE uint32_t  bt_controller_rf_adc_delay_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_ADC_DELAY_2_REG_ADDR);
}

__INLINE void bt_controller_rf_adc_delay_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_ADC_DELAY_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_ADC_DELAY_2_REG_RF_ADC_DELAY_2_REG_15_DOWNTO_8_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_RF_ADC_DELAY_2_REG_RF_ADC_DELAY_2_REG_15_DOWNTO_8_LSB    8
#define BT_CONTROLLER_RF_ADC_DELAY_2_REG_RF_ADC_DELAY_2_REG_15_DOWNTO_8_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RF_ADC_DELAY_2_REG_RF_ADC_DELAY_2_REG_7_DOWNTO_0_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_RF_ADC_DELAY_2_REG_RF_ADC_DELAY_2_REG_7_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_ADC_DELAY_2_REG_RF_ADC_DELAY_2_REG_7_DOWNTO_0_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_RF_ADC_DELAY_2_REG_RF_ADC_DELAY_2_REG_15_DOWNTO_8_RST    0x00
#define BT_CONTROLLER_RF_ADC_DELAY_2_REG_RF_ADC_DELAY_2_REG_7_DOWNTO_0_RST    0x6D

__INLINE void bt_controller_rf_adc_delay_2_reg_pack(uint8_t rf_adc_delay2_reg_15downto8, uint8_t rf_adc_delay2_reg_7downto0)
{
	ASSERT_ERR((((uint32_t)rf_adc_delay2_reg_15downto8 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)rf_adc_delay2_reg_7downto0 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_ADC_DELAY_2_REG_ADDR,  ((uint32_t)rf_adc_delay2_reg_15downto8 << 8) |((uint32_t)rf_adc_delay2_reg_7downto0 << 0));
}

__INLINE void bt_controller_rf_adc_delay_2_reg_unpack(uint8_t* rf_adc_delay2_reg_15downto8, uint8_t* rf_adc_delay2_reg_7downto0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADC_DELAY_2_REG_ADDR);

	*rf_adc_delay2_reg_15downto8 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*rf_adc_delay2_reg_7downto0 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_rf_adc_delay_2_reg_rf_adc_delay_2_reg_15_downto_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADC_DELAY_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t bt_controller_rf_adc_delay_2_reg_rf_adc_delay_2_reg_7_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADC_DELAY_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_rf_adc_delay_2_reg_rf_adc_delay_2_reg_7_downto_0_setf(uint8_t rfadcdelay2reg7downto0)
{
	ASSERT_ERR((((uint32_t)rfadcdelay2reg7downto0 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_ADC_DELAY_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RF_ADC_DELAY_2_REG_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)rfadcdelay2reg7downto0 <<0));
}

/**
 * @brief RF_DAC_DELAY_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:08 rf_adc_delay3_reg_15downto8 0x79
 *    07:00 rf_adc_delay3_reg_7downto0 0x73
 * </pre>
 */
#define BT_CONTROLLER_RF_DAC_DELAY_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003B0)
#define BT_CONTROLLER_RF_DAC_DELAY_1_REG_OFFSET      0x000003B0
#define BT_CONTROLLER_RF_DAC_DELAY_1_REG_INDEX       0x000000EC
#define BT_CONTROLLER_RF_DAC_DELAY_1_REG_RESET       0x00007973

__INLINE uint32_t  bt_controller_rf_dac_delay_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_DAC_DELAY_1_REG_ADDR);
}

__INLINE void bt_controller_rf_dac_delay_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_DAC_DELAY_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_DAC_DELAY_1_REG_RF_ADC_DELAY_3_REG_15_DOWNTO_8_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_RF_DAC_DELAY_1_REG_RF_ADC_DELAY_3_REG_15_DOWNTO_8_LSB    8
#define BT_CONTROLLER_RF_DAC_DELAY_1_REG_RF_ADC_DELAY_3_REG_15_DOWNTO_8_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RF_DAC_DELAY_1_REG_RF_ADC_DELAY_3_REG_7_DOWNTO_0_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_RF_DAC_DELAY_1_REG_RF_ADC_DELAY_3_REG_7_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_DAC_DELAY_1_REG_RF_ADC_DELAY_3_REG_7_DOWNTO_0_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_RF_DAC_DELAY_1_REG_RF_ADC_DELAY_3_REG_15_DOWNTO_8_RST    0x79
#define BT_CONTROLLER_RF_DAC_DELAY_1_REG_RF_ADC_DELAY_3_REG_7_DOWNTO_0_RST    0x73

__INLINE void bt_controller_rf_dac_delay_1_reg_pack(uint8_t rf_adc_delay3_reg_15downto8, uint8_t rf_adc_delay3_reg_7downto0)
{
	ASSERT_ERR((((uint32_t)rf_adc_delay3_reg_15downto8 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)rf_adc_delay3_reg_7downto0 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_DAC_DELAY_1_REG_ADDR,  ((uint32_t)rf_adc_delay3_reg_15downto8 << 8) |((uint32_t)rf_adc_delay3_reg_7downto0 << 0));
}

__INLINE void bt_controller_rf_dac_delay_1_reg_unpack(uint8_t* rf_adc_delay3_reg_15downto8, uint8_t* rf_adc_delay3_reg_7downto0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_DAC_DELAY_1_REG_ADDR);

	*rf_adc_delay3_reg_15downto8 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*rf_adc_delay3_reg_7downto0 = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_rf_dac_delay_1_reg_rf_adc_delay_3_reg_15_downto_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_DAC_DELAY_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_rf_dac_delay_1_reg_rf_adc_delay_3_reg_15_downto_8_setf(uint8_t rfadcdelay3reg15downto8)
{
	ASSERT_ERR((((uint32_t)rfadcdelay3reg15downto8 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_DAC_DELAY_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RF_DAC_DELAY_1_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)rfadcdelay3reg15downto8 <<8));
}
__INLINE uint8_t bt_controller_rf_dac_delay_1_reg_rf_adc_delay_3_reg_7_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_DAC_DELAY_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_rf_dac_delay_1_reg_rf_adc_delay_3_reg_7_downto_0_setf(uint8_t rfadcdelay3reg7downto0)
{
	ASSERT_ERR((((uint32_t)rfadcdelay3reg7downto0 << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_DAC_DELAY_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RF_DAC_DELAY_1_REG_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)rfadcdelay3reg7downto0 <<0));
}

/**
 * @brief DBG_COUNTER_EN register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:06 authentication_fail_counter_enable 0x3FF
 *    05    rx_error_bits_counter_enable 1              
 *    04    tx_bits_counter_enable    1              
 *    03    acc_address_fail_counter_en 1              
 *    02    crc_error_counter_en      1              
 *    01    fec_error_counter_en      1              
 *    00    hec_error_couter_en       1              
 * </pre>
 */
#define BT_CONTROLLER_DBG_COUNTER_EN_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003B4)
#define BT_CONTROLLER_DBG_COUNTER_EN_OFFSET      0x000003B4
#define BT_CONTROLLER_DBG_COUNTER_EN_INDEX       0x000000ED
#define BT_CONTROLLER_DBG_COUNTER_EN_RESET       0x0000FFFF

__INLINE uint32_t  bt_controller_dbg_counter_en_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_DBG_COUNTER_EN_ADDR);
}

__INLINE void bt_controller_dbg_counter_en_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_DBG_COUNTER_EN_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_DBG_COUNTER_EN_AUTHENTICATION_FAIL_COUNTER_ENABLE_MASK    ((uint32_t)0x0000FFC0)
#define BT_CONTROLLER_DBG_COUNTER_EN_AUTHENTICATION_FAIL_COUNTER_ENABLE_LSB    6
#define BT_CONTROLLER_DBG_COUNTER_EN_AUTHENTICATION_FAIL_COUNTER_ENABLE_WIDTH    ((uint32_t)0x0000000A)
#define BT_CONTROLLER_DBG_COUNTER_EN_RX_ERROR_BITS_COUNTER_ENABLE_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_DBG_COUNTER_EN_RX_ERROR_BITS_COUNTER_ENABLE_POS    5
#define BT_CONTROLLER_DBG_COUNTER_EN_TX_BITS_COUNTER_ENABLE_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_DBG_COUNTER_EN_TX_BITS_COUNTER_ENABLE_POS    4
#define BT_CONTROLLER_DBG_COUNTER_EN_ACC_ADDRESS_FAIL_COUNTER_EN_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_DBG_COUNTER_EN_ACC_ADDRESS_FAIL_COUNTER_EN_POS    3
#define BT_CONTROLLER_DBG_COUNTER_EN_CRC_ERROR_COUNTER_EN_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_DBG_COUNTER_EN_CRC_ERROR_COUNTER_EN_POS    2
#define BT_CONTROLLER_DBG_COUNTER_EN_FEC_ERROR_COUNTER_EN_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_DBG_COUNTER_EN_FEC_ERROR_COUNTER_EN_POS    1
#define BT_CONTROLLER_DBG_COUNTER_EN_HEC_ERROR_COUTER_EN_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_DBG_COUNTER_EN_HEC_ERROR_COUTER_EN_POS    0

#define BT_CONTROLLER_DBG_COUNTER_EN_AUTHENTICATION_FAIL_COUNTER_ENABLE_RST    0x3FF
#define BT_CONTROLLER_DBG_COUNTER_EN_RX_ERROR_BITS_COUNTER_ENABLE_RST    0x1
#define BT_CONTROLLER_DBG_COUNTER_EN_TX_BITS_COUNTER_ENABLE_RST    0x1
#define BT_CONTROLLER_DBG_COUNTER_EN_ACC_ADDRESS_FAIL_COUNTER_EN_RST    0x1
#define BT_CONTROLLER_DBG_COUNTER_EN_CRC_ERROR_COUNTER_EN_RST    0x1
#define BT_CONTROLLER_DBG_COUNTER_EN_FEC_ERROR_COUNTER_EN_RST    0x1
#define BT_CONTROLLER_DBG_COUNTER_EN_HEC_ERROR_COUTER_EN_RST    0x1

__INLINE void bt_controller_dbg_counter_en_pack(uint16_t authentication_fail_counter_enable, uint8_t rx_error_bits_counter_enable, uint8_t tx_bits_counter_enable, uint8_t acc_address_fail_counter_en, uint8_t crc_error_counter_en, uint8_t fec_error_counter_en, uint8_t hec_error_couter_en)
{
	ASSERT_ERR((((uint32_t)authentication_fail_counter_enable << 6) & ~((uint32_t)0x0000FFC0)) == 0);
	ASSERT_ERR((((uint32_t)rx_error_bits_counter_enable << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)tx_bits_counter_enable << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)acc_address_fail_counter_en << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)crc_error_counter_en << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)fec_error_counter_en << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)hec_error_couter_en << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_DBG_COUNTER_EN_ADDR,  ((uint32_t)authentication_fail_counter_enable << 6) |((uint32_t)rx_error_bits_counter_enable << 5) |((uint32_t)tx_bits_counter_enable << 4) |((uint32_t)acc_address_fail_counter_en << 3) |((uint32_t)crc_error_counter_en << 2) |((uint32_t)fec_error_counter_en << 1) |((uint32_t)hec_error_couter_en << 0));
}

__INLINE void bt_controller_dbg_counter_en_unpack(uint16_t* authentication_fail_counter_enable, uint8_t* rx_error_bits_counter_enable, uint8_t* tx_bits_counter_enable, uint8_t* acc_address_fail_counter_en, uint8_t* crc_error_counter_en, uint8_t* fec_error_counter_en, uint8_t* hec_error_couter_en)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DBG_COUNTER_EN_ADDR);

	*authentication_fail_counter_enable = (localVal & ((uint32_t)0x0000FFC0)) >>  6;
	*rx_error_bits_counter_enable = (localVal & ((uint32_t)0x00000020)) >>  5;
	*tx_bits_counter_enable = (localVal & ((uint32_t)0x00000010)) >>  4;
	*acc_address_fail_counter_en = (localVal & ((uint32_t)0x00000008)) >>  3;
	*crc_error_counter_en = (localVal & ((uint32_t)0x00000004)) >>  2;
	*fec_error_counter_en = (localVal & ((uint32_t)0x00000002)) >>  1;
	*hec_error_couter_en = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_dbg_counter_en_authentication_fail_counter_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DBG_COUNTER_EN_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFC0)) >> 6);
}
__INLINE uint8_t bt_controller_dbg_counter_en_rx_error_bits_counter_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DBG_COUNTER_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_dbg_counter_en_rx_error_bits_counter_enable_setf(uint8_t rxerrorbitscounterenable)
{
	ASSERT_ERR((((uint32_t)rxerrorbitscounterenable << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_DBG_COUNTER_EN_ADDR, (REG_PL_RD(BT_CONTROLLER_DBG_COUNTER_EN_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rxerrorbitscounterenable <<5));
}
__INLINE uint8_t bt_controller_dbg_counter_en_tx_bits_counter_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DBG_COUNTER_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_dbg_counter_en_tx_bits_counter_enable_setf(uint8_t txbitscounterenable)
{
	ASSERT_ERR((((uint32_t)txbitscounterenable << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_DBG_COUNTER_EN_ADDR, (REG_PL_RD(BT_CONTROLLER_DBG_COUNTER_EN_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)txbitscounterenable <<4));
}
__INLINE uint8_t bt_controller_dbg_counter_en_acc_address_fail_counter_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DBG_COUNTER_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_dbg_counter_en_acc_address_fail_counter_en_setf(uint8_t accaddressfailcounteren)
{
	ASSERT_ERR((((uint32_t)accaddressfailcounteren << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_DBG_COUNTER_EN_ADDR, (REG_PL_RD(BT_CONTROLLER_DBG_COUNTER_EN_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)accaddressfailcounteren <<3));
}
__INLINE uint8_t bt_controller_dbg_counter_en_crc_error_counter_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DBG_COUNTER_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_dbg_counter_en_crc_error_counter_en_setf(uint8_t crcerrorcounteren)
{
	ASSERT_ERR((((uint32_t)crcerrorcounteren << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_DBG_COUNTER_EN_ADDR, (REG_PL_RD(BT_CONTROLLER_DBG_COUNTER_EN_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)crcerrorcounteren <<2));
}
__INLINE uint8_t bt_controller_dbg_counter_en_fec_error_counter_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DBG_COUNTER_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_dbg_counter_en_fec_error_counter_en_setf(uint8_t fecerrorcounteren)
{
	ASSERT_ERR((((uint32_t)fecerrorcounteren << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_DBG_COUNTER_EN_ADDR, (REG_PL_RD(BT_CONTROLLER_DBG_COUNTER_EN_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)fecerrorcounteren <<1));
}
__INLINE uint8_t bt_controller_dbg_counter_en_hec_error_couter_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DBG_COUNTER_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_dbg_counter_en_hec_error_couter_en_setf(uint8_t hecerrorcouteren)
{
	ASSERT_ERR((((uint32_t)hecerrorcouteren << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_DBG_COUNTER_EN_ADDR, (REG_PL_RD(BT_CONTROLLER_DBG_COUNTER_EN_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)hecerrorcouteren <<0));
}

/**
 * @brief HEC_ERR_COUNTER_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 hec_err_counter_15_downto_0_reg 0x0
 * </pre>
 */
#define BT_CONTROLLER_HEC_ERR_COUNTER_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003B8)
#define BT_CONTROLLER_HEC_ERR_COUNTER_0_OFFSET      0x000003B8
#define BT_CONTROLLER_HEC_ERR_COUNTER_0_INDEX       0x000000EE
#define BT_CONTROLLER_HEC_ERR_COUNTER_0_RESET       0x00000000

__INLINE uint32_t  bt_controller_hec_err_counter_0_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_HEC_ERR_COUNTER_0_ADDR);
}

// field definitions
#define BT_CONTROLLER_HEC_ERR_COUNTER_0_HEC_ERR_COUNTER_15_DOWNTO_0_REG_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_HEC_ERR_COUNTER_0_HEC_ERR_COUNTER_15_DOWNTO_0_REG_LSB    0
#define BT_CONTROLLER_HEC_ERR_COUNTER_0_HEC_ERR_COUNTER_15_DOWNTO_0_REG_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_HEC_ERR_COUNTER_0_HEC_ERR_COUNTER_15_DOWNTO_0_REG_RST    0x0

__INLINE uint16_t bt_controller_hec_err_counter_0_hec_err_counter_15_downto_0_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_HEC_ERR_COUNTER_0_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief HEC_ERR_COUNTER_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 hec_err_counter_31_downto_16_reg 0x0
 * </pre>
 */
#define BT_CONTROLLER_HEC_ERR_COUNTER_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003BC)
#define BT_CONTROLLER_HEC_ERR_COUNTER_1_OFFSET      0x000003BC
#define BT_CONTROLLER_HEC_ERR_COUNTER_1_INDEX       0x000000EF
#define BT_CONTROLLER_HEC_ERR_COUNTER_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_hec_err_counter_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_HEC_ERR_COUNTER_1_ADDR);
}

// field definitions
#define BT_CONTROLLER_HEC_ERR_COUNTER_1_HEC_ERR_COUNTER_31_DOWNTO_16_REG_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_HEC_ERR_COUNTER_1_HEC_ERR_COUNTER_31_DOWNTO_16_REG_LSB    0
#define BT_CONTROLLER_HEC_ERR_COUNTER_1_HEC_ERR_COUNTER_31_DOWNTO_16_REG_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_HEC_ERR_COUNTER_1_HEC_ERR_COUNTER_31_DOWNTO_16_REG_RST    0x0

__INLINE uint16_t bt_controller_hec_err_counter_1_hec_err_counter_31_downto_16_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_HEC_ERR_COUNTER_1_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief FEC_ERR_COUNTER_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 fec_err_counter_15_downto_0_reg 0x0
 * </pre>
 */
#define BT_CONTROLLER_FEC_ERR_COUNTER_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003C0)
#define BT_CONTROLLER_FEC_ERR_COUNTER_0_OFFSET      0x000003C0
#define BT_CONTROLLER_FEC_ERR_COUNTER_0_INDEX       0x000000F0
#define BT_CONTROLLER_FEC_ERR_COUNTER_0_RESET       0x00000000

__INLINE uint32_t  bt_controller_fec_err_counter_0_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_FEC_ERR_COUNTER_0_ADDR);
}

// field definitions
#define BT_CONTROLLER_FEC_ERR_COUNTER_0_FEC_ERR_COUNTER_15_DOWNTO_0_REG_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_FEC_ERR_COUNTER_0_FEC_ERR_COUNTER_15_DOWNTO_0_REG_LSB    0
#define BT_CONTROLLER_FEC_ERR_COUNTER_0_FEC_ERR_COUNTER_15_DOWNTO_0_REG_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_FEC_ERR_COUNTER_0_FEC_ERR_COUNTER_15_DOWNTO_0_REG_RST    0x0

__INLINE uint16_t bt_controller_fec_err_counter_0_fec_err_counter_15_downto_0_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FEC_ERR_COUNTER_0_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief FEC_ERR_COUNTER_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 fec_err_counter_31_downto_16_reg 0x0
 * </pre>
 */
#define BT_CONTROLLER_FEC_ERR_COUNTER_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003C4)
#define BT_CONTROLLER_FEC_ERR_COUNTER_1_OFFSET      0x000003C4
#define BT_CONTROLLER_FEC_ERR_COUNTER_1_INDEX       0x000000F1
#define BT_CONTROLLER_FEC_ERR_COUNTER_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_fec_err_counter_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_FEC_ERR_COUNTER_1_ADDR);
}

// field definitions
#define BT_CONTROLLER_FEC_ERR_COUNTER_1_FEC_ERR_COUNTER_31_DOWNTO_16_REG_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_FEC_ERR_COUNTER_1_FEC_ERR_COUNTER_31_DOWNTO_16_REG_LSB    0
#define BT_CONTROLLER_FEC_ERR_COUNTER_1_FEC_ERR_COUNTER_31_DOWNTO_16_REG_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_FEC_ERR_COUNTER_1_FEC_ERR_COUNTER_31_DOWNTO_16_REG_RST    0x0

__INLINE uint16_t bt_controller_fec_err_counter_1_fec_err_counter_31_downto_16_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FEC_ERR_COUNTER_1_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief CRC_ERR_COUNTER_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 crc_err_counter_15_downto_0_reg 0x0
 * </pre>
 */
#define BT_CONTROLLER_CRC_ERR_COUNTER_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003C8)
#define BT_CONTROLLER_CRC_ERR_COUNTER_0_OFFSET      0x000003C8
#define BT_CONTROLLER_CRC_ERR_COUNTER_0_INDEX       0x000000F2
#define BT_CONTROLLER_CRC_ERR_COUNTER_0_RESET       0x00000000

__INLINE uint32_t  bt_controller_crc_err_counter_0_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CRC_ERR_COUNTER_0_ADDR);
}

// field definitions
#define BT_CONTROLLER_CRC_ERR_COUNTER_0_CRC_ERR_COUNTER_15_DOWNTO_0_REG_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_CRC_ERR_COUNTER_0_CRC_ERR_COUNTER_15_DOWNTO_0_REG_LSB    0
#define BT_CONTROLLER_CRC_ERR_COUNTER_0_CRC_ERR_COUNTER_15_DOWNTO_0_REG_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_CRC_ERR_COUNTER_0_CRC_ERR_COUNTER_15_DOWNTO_0_REG_RST    0x0

__INLINE uint16_t bt_controller_crc_err_counter_0_crc_err_counter_15_downto_0_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CRC_ERR_COUNTER_0_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief CRC_ERR_COUNTER_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 crc_err_counter_31_downto_16_reg 0x0
 * </pre>
 */
#define BT_CONTROLLER_CRC_ERR_COUNTER_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003CC)
#define BT_CONTROLLER_CRC_ERR_COUNTER_1_OFFSET      0x000003CC
#define BT_CONTROLLER_CRC_ERR_COUNTER_1_INDEX       0x000000F3
#define BT_CONTROLLER_CRC_ERR_COUNTER_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_crc_err_counter_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CRC_ERR_COUNTER_1_ADDR);
}

// field definitions
#define BT_CONTROLLER_CRC_ERR_COUNTER_1_CRC_ERR_COUNTER_31_DOWNTO_16_REG_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_CRC_ERR_COUNTER_1_CRC_ERR_COUNTER_31_DOWNTO_16_REG_LSB    0
#define BT_CONTROLLER_CRC_ERR_COUNTER_1_CRC_ERR_COUNTER_31_DOWNTO_16_REG_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_CRC_ERR_COUNTER_1_CRC_ERR_COUNTER_31_DOWNTO_16_REG_RST    0x0

__INLINE uint16_t bt_controller_crc_err_counter_1_crc_err_counter_31_downto_16_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CRC_ERR_COUNTER_1_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief ACC_FAIL_COUNTER_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 acc_fail_counter_15_downto_0_reg 0x0
 * </pre>
 */
#define BT_CONTROLLER_ACC_FAIL_COUNTER_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003D0)
#define BT_CONTROLLER_ACC_FAIL_COUNTER_0_OFFSET      0x000003D0
#define BT_CONTROLLER_ACC_FAIL_COUNTER_0_INDEX       0x000000F4
#define BT_CONTROLLER_ACC_FAIL_COUNTER_0_RESET       0x00000000

__INLINE uint32_t  bt_controller_acc_fail_counter_0_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ACC_FAIL_COUNTER_0_ADDR);
}

// field definitions
#define BT_CONTROLLER_ACC_FAIL_COUNTER_0_ACC_FAIL_COUNTER_15_DOWNTO_0_REG_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_ACC_FAIL_COUNTER_0_ACC_FAIL_COUNTER_15_DOWNTO_0_REG_LSB    0
#define BT_CONTROLLER_ACC_FAIL_COUNTER_0_ACC_FAIL_COUNTER_15_DOWNTO_0_REG_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_ACC_FAIL_COUNTER_0_ACC_FAIL_COUNTER_15_DOWNTO_0_REG_RST    0x0

__INLINE uint16_t bt_controller_acc_fail_counter_0_acc_fail_counter_15_downto_0_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ACC_FAIL_COUNTER_0_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief ACC_FAIL_COUNTER_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 acc_fail_counter_31_downto_16_reg 0x0
 * </pre>
 */
#define BT_CONTROLLER_ACC_FAIL_COUNTER_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003D4)
#define BT_CONTROLLER_ACC_FAIL_COUNTER_1_OFFSET      0x000003D4
#define BT_CONTROLLER_ACC_FAIL_COUNTER_1_INDEX       0x000000F5
#define BT_CONTROLLER_ACC_FAIL_COUNTER_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_acc_fail_counter_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ACC_FAIL_COUNTER_1_ADDR);
}

// field definitions
#define BT_CONTROLLER_ACC_FAIL_COUNTER_1_ACC_FAIL_COUNTER_31_DOWNTO_16_REG_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_ACC_FAIL_COUNTER_1_ACC_FAIL_COUNTER_31_DOWNTO_16_REG_LSB    0
#define BT_CONTROLLER_ACC_FAIL_COUNTER_1_ACC_FAIL_COUNTER_31_DOWNTO_16_REG_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_ACC_FAIL_COUNTER_1_ACC_FAIL_COUNTER_31_DOWNTO_16_REG_RST    0x0

__INLINE uint16_t bt_controller_acc_fail_counter_1_acc_fail_counter_31_downto_16_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ACC_FAIL_COUNTER_1_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief TEST_TX_BITS_COUNTER_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 tx_pkt_payload_counter_15_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_TEST_TX_BITS_COUNTER_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003D8)
#define BT_CONTROLLER_TEST_TX_BITS_COUNTER_0_OFFSET      0x000003D8
#define BT_CONTROLLER_TEST_TX_BITS_COUNTER_0_INDEX       0x000000F6
#define BT_CONTROLLER_TEST_TX_BITS_COUNTER_0_RESET       0x00000000

__INLINE uint32_t  bt_controller_test_tx_bits_counter_0_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TEST_TX_BITS_COUNTER_0_ADDR);
}

// field definitions
#define BT_CONTROLLER_TEST_TX_BITS_COUNTER_0_TX_PKT_PAYLOAD_COUNTER_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_TEST_TX_BITS_COUNTER_0_TX_PKT_PAYLOAD_COUNTER_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TEST_TX_BITS_COUNTER_0_TX_PKT_PAYLOAD_COUNTER_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_TEST_TX_BITS_COUNTER_0_TX_PKT_PAYLOAD_COUNTER_15_DOWNTO_0_RST    0x0

__INLINE uint16_t bt_controller_test_tx_bits_counter_0_tx_pkt_payload_counter_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TEST_TX_BITS_COUNTER_0_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief TEST_TX_BITS_COUNTER_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rx_pkt_payload_counter_31_downto_16 0x0
 * </pre>
 */
#define BT_CONTROLLER_TEST_TX_BITS_COUNTER_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003DC)
#define BT_CONTROLLER_TEST_TX_BITS_COUNTER_1_OFFSET      0x000003DC
#define BT_CONTROLLER_TEST_TX_BITS_COUNTER_1_INDEX       0x000000F7
#define BT_CONTROLLER_TEST_TX_BITS_COUNTER_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_test_tx_bits_counter_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TEST_TX_BITS_COUNTER_1_ADDR);
}

// field definitions
#define BT_CONTROLLER_TEST_TX_BITS_COUNTER_1_RX_PKT_PAYLOAD_COUNTER_31_DOWNTO_16_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_TEST_TX_BITS_COUNTER_1_RX_PKT_PAYLOAD_COUNTER_31_DOWNTO_16_LSB    0
#define BT_CONTROLLER_TEST_TX_BITS_COUNTER_1_RX_PKT_PAYLOAD_COUNTER_31_DOWNTO_16_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_TEST_TX_BITS_COUNTER_1_RX_PKT_PAYLOAD_COUNTER_31_DOWNTO_16_RST    0x0

__INLINE uint16_t bt_controller_test_tx_bits_counter_1_rx_pkt_payload_counter_31_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TEST_TX_BITS_COUNTER_1_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief TEST_RX_BITS_ERR_COUNTER_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 tx_pkt_payload_counter_15_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003E0)
#define BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_0_OFFSET      0x000003E0
#define BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_0_INDEX       0x000000F8
#define BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_0_RESET       0x00000000

__INLINE uint32_t  bt_controller_test_rx_bits_err_counter_0_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_0_ADDR);
}

// field definitions
#define BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_0_TX_PKT_PAYLOAD_COUNTER_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_0_TX_PKT_PAYLOAD_COUNTER_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_0_TX_PKT_PAYLOAD_COUNTER_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_0_TX_PKT_PAYLOAD_COUNTER_15_DOWNTO_0_RST    0x0

__INLINE uint16_t bt_controller_test_rx_bits_err_counter_0_tx_pkt_payload_counter_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_0_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief TEST_RX_BITS_ERR_COUNTER_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:00 rx_pkt_payload_counter_31_downto_16 0x0
 * </pre>
 */
#define BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000003E4)
#define BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_1_OFFSET      0x000003E4
#define BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_1_INDEX       0x000000F9
#define BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_test_rx_bits_err_counter_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_1_ADDR);
}

// field definitions
#define BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_1_RX_PKT_PAYLOAD_COUNTER_31_DOWNTO_16_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_1_RX_PKT_PAYLOAD_COUNTER_31_DOWNTO_16_LSB    0
#define BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_1_RX_PKT_PAYLOAD_COUNTER_31_DOWNTO_16_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_1_RX_PKT_PAYLOAD_COUNTER_31_DOWNTO_16_RST    0x0

__INLINE uint16_t bt_controller_test_rx_bits_err_counter_1_rx_pkt_payload_counter_31_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TEST_RX_BITS_ERR_COUNTER_1_ADDR);
	return (uint16_t)(localVal >> 0);
}

/**
 * @brief POWER_GAIN_LNK_9 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:12 reserved_bit15_to_bit12_power_gain_link9 0x0
 *    11:08 step_size_power_gain_link9 0x1
 *    07    reserved_bit7_power_gain_link9 0              
 *    06:00 final_index_power_gain_link9 0x12
 * </pre>
 */
#define BT_CONTROLLER_POWER_GAIN_LNK_9_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000005E8)
#define BT_CONTROLLER_POWER_GAIN_LNK_9_OFFSET      0x000005E8
#define BT_CONTROLLER_POWER_GAIN_LNK_9_INDEX       0x0000017A
#define BT_CONTROLLER_POWER_GAIN_LNK_9_RESET       0x00000112

__INLINE uint32_t  bt_controller_power_gain_lnk_9_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_9_ADDR);
}

__INLINE void bt_controller_power_gain_lnk_9_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_9_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_POWER_GAIN_LNK_9_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_9_MASK    ((uint32_t)0x0000F000)
#define BT_CONTROLLER_POWER_GAIN_LNK_9_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_9_LSB    12
#define BT_CONTROLLER_POWER_GAIN_LNK_9_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_9_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_9_STEP_SIZE_POWER_GAIN_LINK_9_MASK    ((uint32_t)0x00000F00)
#define BT_CONTROLLER_POWER_GAIN_LNK_9_STEP_SIZE_POWER_GAIN_LINK_9_LSB    8
#define BT_CONTROLLER_POWER_GAIN_LNK_9_STEP_SIZE_POWER_GAIN_LINK_9_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_POWER_GAIN_LNK_9_RESERVED_BIT_7_POWER_GAIN_LINK_9_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_POWER_GAIN_LNK_9_RESERVED_BIT_7_POWER_GAIN_LINK_9_POS    7
#define BT_CONTROLLER_POWER_GAIN_LNK_9_FINAL_INDEX_POWER_GAIN_LINK_9_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_POWER_GAIN_LNK_9_FINAL_INDEX_POWER_GAIN_LINK_9_LSB    0
#define BT_CONTROLLER_POWER_GAIN_LNK_9_FINAL_INDEX_POWER_GAIN_LINK_9_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_POWER_GAIN_LNK_9_RESERVED_BIT_15_TO_BIT_12_POWER_GAIN_LINK_9_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_9_STEP_SIZE_POWER_GAIN_LINK_9_RST    0x1
#define BT_CONTROLLER_POWER_GAIN_LNK_9_RESERVED_BIT_7_POWER_GAIN_LINK_9_RST    0x0
#define BT_CONTROLLER_POWER_GAIN_LNK_9_FINAL_INDEX_POWER_GAIN_LINK_9_RST    0x12

__INLINE void bt_controller_power_gain_lnk_9_pack(uint8_t reserved_bit15_to_bit12_power_gain_link9, uint8_t step_size_power_gain_link9, uint8_t reserved_bit7_power_gain_link9, uint8_t final_index_power_gain_link9)
{
	ASSERT_ERR((((uint32_t)reserved_bit15_to_bit12_power_gain_link9 << 12) & ~((uint32_t)0x0000F000)) == 0);
	ASSERT_ERR((((uint32_t)step_size_power_gain_link9 << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)reserved_bit7_power_gain_link9 << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)final_index_power_gain_link9 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_9_ADDR,  ((uint32_t)reserved_bit15_to_bit12_power_gain_link9 << 12) |((uint32_t)step_size_power_gain_link9 << 8) |((uint32_t)reserved_bit7_power_gain_link9 << 7) |((uint32_t)final_index_power_gain_link9 << 0));
}

__INLINE void bt_controller_power_gain_lnk_9_unpack(uint8_t* reserved_bit15_to_bit12_power_gain_link9, uint8_t* step_size_power_gain_link9, uint8_t* reserved_bit7_power_gain_link9, uint8_t* final_index_power_gain_link9)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_9_ADDR);

	*reserved_bit15_to_bit12_power_gain_link9 = (localVal & ((uint32_t)0x0000F000)) >>  12;
	*step_size_power_gain_link9 = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*reserved_bit7_power_gain_link9 = (localVal & ((uint32_t)0x00000080)) >>  7;
	*final_index_power_gain_link9 = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint8_t bt_controller_power_gain_lnk_9_reserved_bit_15_to_bit_12_power_gain_link_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_9_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000F000)) >> 12);
}
__INLINE uint8_t bt_controller_power_gain_lnk_9_step_size_power_gain_link_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_9_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void bt_controller_power_gain_lnk_9_step_size_power_gain_link_9_setf(uint8_t stepsizepowergainlink9)
{
	ASSERT_ERR((((uint32_t)stepsizepowergainlink9 << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_9_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_9_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)stepsizepowergainlink9 <<8));
}
__INLINE uint8_t bt_controller_power_gain_lnk_9_reserved_bit_7_power_gain_link_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_9_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE uint8_t bt_controller_power_gain_lnk_9_final_index_power_gain_link_9_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_9_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void bt_controller_power_gain_lnk_9_final_index_power_gain_link_9_setf(uint8_t finalindexpowergainlink9)
{
	ASSERT_ERR((((uint32_t)finalindexpowergainlink9 << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_POWER_GAIN_LNK_9_ADDR, (REG_PL_RD(BT_CONTROLLER_POWER_GAIN_LNK_9_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)finalindexpowergainlink9 <<0));
}

/**
 * @brief TXON_START_TIME register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:09 TXON_START_TIME_15_downto_9_reserved 0x0
 *    08:00 TX_ON_START_TIME          0x0A0
 * </pre>
 */
#define BT_CONTROLLER_TXON_START_TIME_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000005EC)
#define BT_CONTROLLER_TXON_START_TIME_OFFSET      0x000005EC
#define BT_CONTROLLER_TXON_START_TIME_INDEX       0x0000017B
#define BT_CONTROLLER_TXON_START_TIME_RESET       0x000000A0

__INLINE uint32_t  bt_controller_txon_start_time_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TXON_START_TIME_ADDR);
}

__INLINE void bt_controller_txon_start_time_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TXON_START_TIME_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TXON_START_TIME_TXON_START_TIME_15_DOWNTO_9_RESERVED_MASK    ((uint32_t)0x0000FE00)
#define BT_CONTROLLER_TXON_START_TIME_TXON_START_TIME_15_DOWNTO_9_RESERVED_LSB    9
#define BT_CONTROLLER_TXON_START_TIME_TXON_START_TIME_15_DOWNTO_9_RESERVED_WIDTH    ((uint32_t)0x00000007)
#define BT_CONTROLLER_TXON_START_TIME_TX_ON_START_TIME_MASK    ((uint32_t)0x000001FF)
#define BT_CONTROLLER_TXON_START_TIME_TX_ON_START_TIME_LSB    0
#define BT_CONTROLLER_TXON_START_TIME_TX_ON_START_TIME_WIDTH    ((uint32_t)0x00000009)

#define BT_CONTROLLER_TXON_START_TIME_TXON_START_TIME_15_DOWNTO_9_RESERVED_RST    0x0
#define BT_CONTROLLER_TXON_START_TIME_TX_ON_START_TIME_RST    0x0A0

__INLINE void bt_controller_txon_start_time_pack(uint8_t txon_start_time_15_downto_9_reserved, uint16_t tx_on_start_time)
{
	ASSERT_ERR((((uint32_t)txon_start_time_15_downto_9_reserved << 9) & ~((uint32_t)0x0000FE00)) == 0);
	ASSERT_ERR((((uint32_t)tx_on_start_time << 0) & ~((uint32_t)0x000001FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TXON_START_TIME_ADDR,  ((uint32_t)txon_start_time_15_downto_9_reserved << 9) |((uint32_t)tx_on_start_time << 0));
}

__INLINE void bt_controller_txon_start_time_unpack(uint8_t* txon_start_time_15_downto_9_reserved, uint16_t* tx_on_start_time)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXON_START_TIME_ADDR);

	*txon_start_time_15_downto_9_reserved = (localVal & ((uint32_t)0x0000FE00)) >>  9;
	*tx_on_start_time = (localVal & ((uint32_t)0x000001FF)) >>  0;
}

__INLINE uint8_t bt_controller_txon_start_time_txon_start_time_15_downto_9_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXON_START_TIME_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FE00)) >> 9);
}
__INLINE uint16_t bt_controller_txon_start_time_tx_on_start_time_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXON_START_TIME_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000001FF)) >> 0);
}
__INLINE void bt_controller_txon_start_time_tx_on_start_time_setf(uint16_t txonstarttime)
{
	ASSERT_ERR((((uint32_t)txonstarttime << 0) & ~((uint32_t)0x000001FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TXON_START_TIME_ADDR, (REG_PL_RD(BT_CONTROLLER_TXON_START_TIME_ADDR) & ~((uint32_t)0x000001FF)) | ((uint32_t)txonstarttime <<0));
}

/**
 * @brief TXON_END_TIME register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:09 TXON_END_TIME_15_downto_9_reserved 0x0
 *    08:00 TX_ON_END_TIME            0x0A0
 * </pre>
 */
#define BT_CONTROLLER_TXON_END_TIME_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000005F0)
#define BT_CONTROLLER_TXON_END_TIME_OFFSET      0x000005F0
#define BT_CONTROLLER_TXON_END_TIME_INDEX       0x0000017C
#define BT_CONTROLLER_TXON_END_TIME_RESET       0x000000A0

__INLINE uint32_t  bt_controller_txon_end_time_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TXON_END_TIME_ADDR);
}

__INLINE void bt_controller_txon_end_time_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TXON_END_TIME_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TXON_END_TIME_TXON_END_TIME_15_DOWNTO_9_RESERVED_MASK    ((uint32_t)0x0000FE00)
#define BT_CONTROLLER_TXON_END_TIME_TXON_END_TIME_15_DOWNTO_9_RESERVED_LSB    9
#define BT_CONTROLLER_TXON_END_TIME_TXON_END_TIME_15_DOWNTO_9_RESERVED_WIDTH    ((uint32_t)0x00000007)
#define BT_CONTROLLER_TXON_END_TIME_TX_ON_END_TIME_MASK    ((uint32_t)0x000001FF)
#define BT_CONTROLLER_TXON_END_TIME_TX_ON_END_TIME_LSB    0
#define BT_CONTROLLER_TXON_END_TIME_TX_ON_END_TIME_WIDTH    ((uint32_t)0x00000009)

#define BT_CONTROLLER_TXON_END_TIME_TXON_END_TIME_15_DOWNTO_9_RESERVED_RST    0x0
#define BT_CONTROLLER_TXON_END_TIME_TX_ON_END_TIME_RST    0x0A0

__INLINE void bt_controller_txon_end_time_pack(uint8_t txon_end_time_15_downto_9_reserved, uint16_t tx_on_end_time)
{
	ASSERT_ERR((((uint32_t)txon_end_time_15_downto_9_reserved << 9) & ~((uint32_t)0x0000FE00)) == 0);
	ASSERT_ERR((((uint32_t)tx_on_end_time << 0) & ~((uint32_t)0x000001FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TXON_END_TIME_ADDR,  ((uint32_t)txon_end_time_15_downto_9_reserved << 9) |((uint32_t)tx_on_end_time << 0));
}

__INLINE void bt_controller_txon_end_time_unpack(uint8_t* txon_end_time_15_downto_9_reserved, uint16_t* tx_on_end_time)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXON_END_TIME_ADDR);

	*txon_end_time_15_downto_9_reserved = (localVal & ((uint32_t)0x0000FE00)) >>  9;
	*tx_on_end_time = (localVal & ((uint32_t)0x000001FF)) >>  0;
}

__INLINE uint8_t bt_controller_txon_end_time_txon_end_time_15_downto_9_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXON_END_TIME_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FE00)) >> 9);
}
__INLINE uint16_t bt_controller_txon_end_time_tx_on_end_time_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TXON_END_TIME_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000001FF)) >> 0);
}
__INLINE void bt_controller_txon_end_time_tx_on_end_time_setf(uint16_t txonendtime)
{
	ASSERT_ERR((((uint32_t)txonendtime << 0) & ~((uint32_t)0x000001FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TXON_END_TIME_ADDR, (REG_PL_RD(BT_CONTROLLER_TXON_END_TIME_ADDR) & ~((uint32_t)0x000001FF)) | ((uint32_t)txonendtime <<0));
}

/**
 * @brief CLOCK_CONFIG_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:05 clock_config_reg_27_bits_are_reserved 0x0
 *    04:00 clock_count_4_downto_0    0x0
 * </pre>
 */
#define BT_CONTROLLER_CLOCK_CONFIG_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004000)
#define BT_CONTROLLER_CLOCK_CONFIG_REG_OFFSET      0x00004000
#define BT_CONTROLLER_CLOCK_CONFIG_REG_INDEX       0x00001000
#define BT_CONTROLLER_CLOCK_CONFIG_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_clock_config_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CLOCK_CONFIG_REG_ADDR);
}

__INLINE void bt_controller_clock_config_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CLOCK_CONFIG_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CLOCK_CONFIG_REG_CLOCK_CONFIG_REG_27_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFFFE0)
#define BT_CONTROLLER_CLOCK_CONFIG_REG_CLOCK_CONFIG_REG_27_BITS_ARE_RESERVED_LSB    5
#define BT_CONTROLLER_CLOCK_CONFIG_REG_CLOCK_CONFIG_REG_27_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000001B)
#define BT_CONTROLLER_CLOCK_CONFIG_REG_CLOCK_COUNT_4_DOWNTO_0_MASK    ((uint32_t)0x0000001F)
#define BT_CONTROLLER_CLOCK_CONFIG_REG_CLOCK_COUNT_4_DOWNTO_0_LSB    0
#define BT_CONTROLLER_CLOCK_CONFIG_REG_CLOCK_COUNT_4_DOWNTO_0_WIDTH    ((uint32_t)0x00000005)

#define BT_CONTROLLER_CLOCK_CONFIG_REG_CLOCK_CONFIG_REG_27_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_CLOCK_CONFIG_REG_CLOCK_COUNT_4_DOWNTO_0_RST    0x0

__INLINE void bt_controller_clock_config_reg_pack(uint32_t clock_config_reg_27_bits_are_reserved, uint8_t clock_count_4_downto_0)
{
	ASSERT_ERR((((uint32_t)clock_config_reg_27_bits_are_reserved << 5) & ~((uint32_t)0xFFFFFFE0)) == 0);
	ASSERT_ERR((((uint32_t)clock_count_4_downto_0 << 0) & ~((uint32_t)0x0000001F)) == 0);
	REG_PL_WR(BT_CONTROLLER_CLOCK_CONFIG_REG_ADDR,  ((uint32_t)clock_config_reg_27_bits_are_reserved << 5) |((uint32_t)clock_count_4_downto_0 << 0));
}

__INLINE void bt_controller_clock_config_reg_unpack(uint32_t* clock_config_reg_27_bits_are_reserved, uint8_t* clock_count_4_downto_0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CLOCK_CONFIG_REG_ADDR);

	*clock_config_reg_27_bits_are_reserved = (localVal & ((uint32_t)0xFFFFFFE0)) >>  5;
	*clock_count_4_downto_0 = (localVal & ((uint32_t)0x0000001F)) >>  0;
}

__INLINE uint32_t bt_controller_clock_config_reg_clock_config_reg_27_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CLOCK_CONFIG_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFE0)) >> 5);
}
__INLINE void bt_controller_clock_config_reg_clock_config_reg_27_bits_are_reserved_setf(uint32_t clockconfigreg27bitsarereserved)
{
	ASSERT_ERR((((uint32_t)clockconfigreg27bitsarereserved << 5) & ~((uint32_t)0xFFFFFFE0)) == 0);
	REG_PL_WR(BT_CONTROLLER_CLOCK_CONFIG_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_CLOCK_CONFIG_REG_ADDR) & ~((uint32_t)0xFFFFFFE0)) | ((uint32_t)clockconfigreg27bitsarereserved <<5));
}
__INLINE uint8_t bt_controller_clock_config_reg_clock_count_4_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CLOCK_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000001F)) >> 0);
}
__INLINE void bt_controller_clock_config_reg_clock_count_4_downto_0_setf(uint8_t clockcount4downto0)
{
	ASSERT_ERR((((uint32_t)clockcount4downto0 << 0) & ~((uint32_t)0x0000001F)) == 0);
	REG_PL_WR(BT_CONTROLLER_CLOCK_CONFIG_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_CLOCK_CONFIG_REG_ADDR) & ~((uint32_t)0x0000001F)) | ((uint32_t)clockcount4downto0 <<0));
}

/**
 * @brief CLOCK_CONTROL_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:02 clock_control_reg_31_2_bits_are_reserved 0x0
 *    01    deep_sleep_mode_enable    0              
 *    00    sleep_mode_enable         0              
 * </pre>
 */
#define BT_CONTROLLER_CLOCK_CONTROL_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004004)
#define BT_CONTROLLER_CLOCK_CONTROL_REG_OFFSET      0x00004004
#define BT_CONTROLLER_CLOCK_CONTROL_REG_INDEX       0x00001001
#define BT_CONTROLLER_CLOCK_CONTROL_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_clock_control_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CLOCK_CONTROL_REG_ADDR);
}

__INLINE void bt_controller_clock_control_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CLOCK_CONTROL_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CLOCK_CONTROL_REG_CLOCK_CONTROL_REG_31_2_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFFFFC)
#define BT_CONTROLLER_CLOCK_CONTROL_REG_CLOCK_CONTROL_REG_31_2_BITS_ARE_RESERVED_LSB    2
#define BT_CONTROLLER_CLOCK_CONTROL_REG_CLOCK_CONTROL_REG_31_2_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000001E)
#define BT_CONTROLLER_CLOCK_CONTROL_REG_DEEP_SLEEP_MODE_ENABLE_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_CLOCK_CONTROL_REG_DEEP_SLEEP_MODE_ENABLE_POS    1
#define BT_CONTROLLER_CLOCK_CONTROL_REG_SLEEP_MODE_ENABLE_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_CLOCK_CONTROL_REG_SLEEP_MODE_ENABLE_POS    0

#define BT_CONTROLLER_CLOCK_CONTROL_REG_CLOCK_CONTROL_REG_31_2_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_CLOCK_CONTROL_REG_DEEP_SLEEP_MODE_ENABLE_RST    0x0
#define BT_CONTROLLER_CLOCK_CONTROL_REG_SLEEP_MODE_ENABLE_RST    0x0

__INLINE void bt_controller_clock_control_reg_pack(uint32_t clock_control_reg_31_2_bits_are_reserved, uint8_t deep_sleep_mode_enable, uint8_t sleep_mode_enable)
{
	ASSERT_ERR((((uint32_t)clock_control_reg_31_2_bits_are_reserved << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	ASSERT_ERR((((uint32_t)deep_sleep_mode_enable << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)sleep_mode_enable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_CLOCK_CONTROL_REG_ADDR,  ((uint32_t)clock_control_reg_31_2_bits_are_reserved << 2) |((uint32_t)deep_sleep_mode_enable << 1) |((uint32_t)sleep_mode_enable << 0));
}

__INLINE void bt_controller_clock_control_reg_unpack(uint32_t* clock_control_reg_31_2_bits_are_reserved, uint8_t* deep_sleep_mode_enable, uint8_t* sleep_mode_enable)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CLOCK_CONTROL_REG_ADDR);

	*clock_control_reg_31_2_bits_are_reserved = (localVal & ((uint32_t)0xFFFFFFFC)) >>  2;
	*deep_sleep_mode_enable = (localVal & ((uint32_t)0x00000002)) >>  1;
	*sleep_mode_enable = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t bt_controller_clock_control_reg_clock_control_reg_31_2_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CLOCK_CONTROL_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFFC)) >> 2);
}
__INLINE uint8_t bt_controller_clock_control_reg_deep_sleep_mode_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CLOCK_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_clock_control_reg_deep_sleep_mode_enable_setf(uint8_t deepsleepmodeenable)
{
	ASSERT_ERR((((uint32_t)deepsleepmodeenable << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_CLOCK_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_CLOCK_CONTROL_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)deepsleepmodeenable <<1));
}
__INLINE uint8_t bt_controller_clock_control_reg_sleep_mode_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CLOCK_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_clock_control_reg_sleep_mode_enable_setf(uint8_t sleepmodeenable)
{
	ASSERT_ERR((((uint32_t)sleepmodeenable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_CLOCK_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_CLOCK_CONTROL_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)sleepmodeenable <<0));
}

/**
 * @brief CLOCK_VALUE_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 clock_value_reg_16_to_31_bits_are_reserved 0x0
 *    15:00 Running_Counter_Value_15_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_CLOCK_VALUE_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004008)
#define BT_CONTROLLER_CLOCK_VALUE_REG_OFFSET      0x00004008
#define BT_CONTROLLER_CLOCK_VALUE_REG_INDEX       0x00001002
#define BT_CONTROLLER_CLOCK_VALUE_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_clock_value_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CLOCK_VALUE_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_CLOCK_VALUE_REG_CLOCK_VALUE_REG_16_TO_31_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_CLOCK_VALUE_REG_CLOCK_VALUE_REG_16_TO_31_BITS_ARE_RESERVED_LSB    16
#define BT_CONTROLLER_CLOCK_VALUE_REG_CLOCK_VALUE_REG_16_TO_31_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_CLOCK_VALUE_REG_RUNNING_COUNTER_VALUE_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_CLOCK_VALUE_REG_RUNNING_COUNTER_VALUE_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_CLOCK_VALUE_REG_RUNNING_COUNTER_VALUE_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_CLOCK_VALUE_REG_CLOCK_VALUE_REG_16_TO_31_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_CLOCK_VALUE_REG_RUNNING_COUNTER_VALUE_15_DOWNTO_0_RST    0x0

__INLINE void bt_controller_clock_value_reg_unpack(uint16_t* clock_value_reg_16_to_31_bits_are_reserved, uint16_t* running_counter_value_15_downto_0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CLOCK_VALUE_REG_ADDR);

	*clock_value_reg_16_to_31_bits_are_reserved = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*running_counter_value_15_downto_0 = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t bt_controller_clock_value_reg_clock_value_reg_16_to_31_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CLOCK_VALUE_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint16_t bt_controller_clock_value_reg_running_counter_value_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CLOCK_VALUE_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}

/**
 * @brief FW_DEBUG_EN_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 fw_debug_en               0x0
 * </pre>
 */
#define BT_CONTROLLER_FW_DEBUG_EN_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000400C)
#define BT_CONTROLLER_FW_DEBUG_EN_REG_OFFSET      0x0000400C
#define BT_CONTROLLER_FW_DEBUG_EN_REG_INDEX       0x00001003
#define BT_CONTROLLER_FW_DEBUG_EN_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_fw_debug_en_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_FW_DEBUG_EN_REG_ADDR);
}

__INLINE void bt_controller_fw_debug_en_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_FW_DEBUG_EN_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_FW_DEBUG_EN_REG_FW_DEBUG_EN_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_FW_DEBUG_EN_REG_FW_DEBUG_EN_LSB    0
#define BT_CONTROLLER_FW_DEBUG_EN_REG_FW_DEBUG_EN_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_FW_DEBUG_EN_REG_FW_DEBUG_EN_RST    0x0

__INLINE uint32_t bt_controller_fw_debug_en_reg_fw_debug_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FW_DEBUG_EN_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_fw_debug_en_reg_fw_debug_en_setf(uint32_t fwdebugen)
{
	ASSERT_ERR((((uint32_t)fwdebugen << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_FW_DEBUG_EN_REG_ADDR, (uint32_t)fwdebugen << 0);
}

/**
 * @brief FW_DEBUG_VALUE_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 fw_debug_val              0x0
 * </pre>
 */
#define BT_CONTROLLER_FW_DEBUG_VALUE_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004010)
#define BT_CONTROLLER_FW_DEBUG_VALUE_REG_OFFSET      0x00004010
#define BT_CONTROLLER_FW_DEBUG_VALUE_REG_INDEX       0x00001004
#define BT_CONTROLLER_FW_DEBUG_VALUE_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_fw_debug_value_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_FW_DEBUG_VALUE_REG_ADDR);
}

__INLINE void bt_controller_fw_debug_value_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_FW_DEBUG_VALUE_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_FW_DEBUG_VALUE_REG_FW_DEBUG_VAL_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_FW_DEBUG_VALUE_REG_FW_DEBUG_VAL_LSB    0
#define BT_CONTROLLER_FW_DEBUG_VALUE_REG_FW_DEBUG_VAL_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_FW_DEBUG_VALUE_REG_FW_DEBUG_VAL_RST    0x0

__INLINE uint32_t bt_controller_fw_debug_value_reg_fw_debug_val_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_FW_DEBUG_VALUE_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_fw_debug_value_reg_fw_debug_val_setf(uint32_t fwdebugval)
{
	ASSERT_ERR((((uint32_t)fwdebugval << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_FW_DEBUG_VALUE_REG_ADDR, (uint32_t)fwdebugval << 0);
}

/**
 * @brief SLEEP_MODE_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer0_count_value_sleep_mode_is_exited 0x0
 * </pre>
 */
#define BT_CONTROLLER_SLEEP_MODE_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004014)
#define BT_CONTROLLER_SLEEP_MODE_REG_OFFSET      0x00004014
#define BT_CONTROLLER_SLEEP_MODE_REG_INDEX       0x00001005
#define BT_CONTROLLER_SLEEP_MODE_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_sleep_mode_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_SLEEP_MODE_REG_ADDR);
}

__INLINE void bt_controller_sleep_mode_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SLEEP_MODE_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SLEEP_MODE_REG_TIMER_0_COUNT_VALUE_SLEEP_MODE_IS_EXITED_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_SLEEP_MODE_REG_TIMER_0_COUNT_VALUE_SLEEP_MODE_IS_EXITED_LSB    0
#define BT_CONTROLLER_SLEEP_MODE_REG_TIMER_0_COUNT_VALUE_SLEEP_MODE_IS_EXITED_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_SLEEP_MODE_REG_TIMER_0_COUNT_VALUE_SLEEP_MODE_IS_EXITED_RST    0x0

__INLINE uint32_t bt_controller_sleep_mode_reg_timer_0_count_value_sleep_mode_is_exited_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SLEEP_MODE_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_sleep_mode_reg_timer_0_count_value_sleep_mode_is_exited_setf(uint32_t timer0countvaluesleepmodeisexited)
{
	ASSERT_ERR((((uint32_t)timer0countvaluesleepmodeisexited << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_SLEEP_MODE_REG_ADDR, (uint32_t)timer0countvaluesleepmodeisexited << 0);
}

/**
 * @brief DEEP_SLEEP_MODE_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer0_count_value_deep_sleep_mode_is_exited 0x0
 * </pre>
 */
#define BT_CONTROLLER_DEEP_SLEEP_MODE_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004018)
#define BT_CONTROLLER_DEEP_SLEEP_MODE_REG_OFFSET      0x00004018
#define BT_CONTROLLER_DEEP_SLEEP_MODE_REG_INDEX       0x00001006
#define BT_CONTROLLER_DEEP_SLEEP_MODE_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_deep_sleep_mode_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_DEEP_SLEEP_MODE_REG_ADDR);
}

__INLINE void bt_controller_deep_sleep_mode_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_DEEP_SLEEP_MODE_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_DEEP_SLEEP_MODE_REG_TIMER_0_COUNT_VALUE_DEEP_SLEEP_MODE_IS_EXITED_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_DEEP_SLEEP_MODE_REG_TIMER_0_COUNT_VALUE_DEEP_SLEEP_MODE_IS_EXITED_LSB    0
#define BT_CONTROLLER_DEEP_SLEEP_MODE_REG_TIMER_0_COUNT_VALUE_DEEP_SLEEP_MODE_IS_EXITED_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_DEEP_SLEEP_MODE_REG_TIMER_0_COUNT_VALUE_DEEP_SLEEP_MODE_IS_EXITED_RST    0x0

__INLINE uint32_t bt_controller_deep_sleep_mode_reg_timer_0_count_value_deep_sleep_mode_is_exited_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_DEEP_SLEEP_MODE_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_deep_sleep_mode_reg_timer_0_count_value_deep_sleep_mode_is_exited_setf(uint32_t timer0countvaluedeepsleepmodeisexited)
{
	ASSERT_ERR((((uint32_t)timer0countvaluedeepsleepmodeisexited << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_DEEP_SLEEP_MODE_REG_ADDR, (uint32_t)timer0countvaluedeepsleepmodeisexited << 0);
}

/**
 * @brief SW_PROFILING_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    15:01 sw_profiling_reg_15bits_reserved 0x0
 *    00    sw_profiling              0              
 * </pre>
 */
#define BT_CONTROLLER_SW_PROFILING_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000401C)
#define BT_CONTROLLER_SW_PROFILING_REG_OFFSET      0x0000401C
#define BT_CONTROLLER_SW_PROFILING_REG_INDEX       0x00001007
#define BT_CONTROLLER_SW_PROFILING_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_sw_profiling_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_SW_PROFILING_REG_ADDR);
}

__INLINE void bt_controller_sw_profiling_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SW_PROFILING_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SW_PROFILING_REG_SW_PROFILING_REG_15_BITS_RESERVED_MASK    ((uint32_t)0x0000FFFE)
#define BT_CONTROLLER_SW_PROFILING_REG_SW_PROFILING_REG_15_BITS_RESERVED_LSB    1
#define BT_CONTROLLER_SW_PROFILING_REG_SW_PROFILING_REG_15_BITS_RESERVED_WIDTH    ((uint32_t)0x0000000F)
#define BT_CONTROLLER_SW_PROFILING_REG_SW_PROFILING_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_SW_PROFILING_REG_SW_PROFILING_POS    0

#define BT_CONTROLLER_SW_PROFILING_REG_SW_PROFILING_REG_15_BITS_RESERVED_RST    0x0
#define BT_CONTROLLER_SW_PROFILING_REG_SW_PROFILING_RST    0x0

__INLINE void bt_controller_sw_profiling_reg_pack(uint16_t sw_profiling_reg_15bits_reserved, uint8_t sw_profiling)
{
	ASSERT_ERR((((uint32_t)sw_profiling_reg_15bits_reserved << 1) & ~((uint32_t)0x0000FFFE)) == 0);
	ASSERT_ERR((((uint32_t)sw_profiling << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_SW_PROFILING_REG_ADDR,  ((uint32_t)sw_profiling_reg_15bits_reserved << 1) |((uint32_t)sw_profiling << 0));
}

__INLINE void bt_controller_sw_profiling_reg_unpack(uint16_t* sw_profiling_reg_15bits_reserved, uint8_t* sw_profiling)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SW_PROFILING_REG_ADDR);

	*sw_profiling_reg_15bits_reserved = (localVal & ((uint32_t)0x0000FFFE)) >>  1;
	*sw_profiling = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_sw_profiling_reg_sw_profiling_reg_15_bits_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SW_PROFILING_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFE)) >> 1);
}
__INLINE uint8_t bt_controller_sw_profiling_reg_sw_profiling_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SW_PROFILING_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_sw_profiling_reg_sw_profiling_setf(uint8_t swprofiling)
{
	ASSERT_ERR((((uint32_t)swprofiling << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_SW_PROFILING_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SW_PROFILING_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)swprofiling <<0));
}

/**
 * @brief RADIO_CONFIG_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 radio_config1_reg_31_to_24_bits_are_reserved 0x0
 *    23:16 RX_ON_DELAY_23_downto_16  0x77
 *    15:08 Tx_On_delay_15_downto_8   0x88
 *    07:06 radio_config1_reg_7_to_6_bits_are_reserved 0x0
 *    05:00 corr_threshold_5_downto_0 0x1F
 * </pre>
 */
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004400)
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_OFFSET      0x00004400
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_INDEX       0x00001100
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_RESET       0x0077881F

__INLINE uint32_t  bt_controller_radio_config_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_1_REG_ADDR);
}

__INLINE void bt_controller_radio_config_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RADIO_CONFIG_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_RADIO_CONFIG_1_REG_31_TO_24_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFF000000)
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_RADIO_CONFIG_1_REG_31_TO_24_BITS_ARE_RESERVED_LSB    24
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_RADIO_CONFIG_1_REG_31_TO_24_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_RX_ON_DELAY_23_DOWNTO_16_MASK    ((uint32_t)0x00FF0000)
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_RX_ON_DELAY_23_DOWNTO_16_LSB    16
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_RX_ON_DELAY_23_DOWNTO_16_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_TX_ON_DELAY_15_DOWNTO_8_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_TX_ON_DELAY_15_DOWNTO_8_LSB    8
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_TX_ON_DELAY_15_DOWNTO_8_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_RADIO_CONFIG_1_REG_7_TO_6_BITS_ARE_RESERVED_MASK    ((uint32_t)0x000000C0)
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_RADIO_CONFIG_1_REG_7_TO_6_BITS_ARE_RESERVED_LSB    6
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_RADIO_CONFIG_1_REG_7_TO_6_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_CORR_THRESHOLD_5_DOWNTO_0_MASK    ((uint32_t)0x0000003F)
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_CORR_THRESHOLD_5_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_CORR_THRESHOLD_5_DOWNTO_0_WIDTH    ((uint32_t)0x00000006)

#define BT_CONTROLLER_RADIO_CONFIG_1_REG_RADIO_CONFIG_1_REG_31_TO_24_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_RX_ON_DELAY_23_DOWNTO_16_RST    0x77
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_TX_ON_DELAY_15_DOWNTO_8_RST    0x88
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_RADIO_CONFIG_1_REG_7_TO_6_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_RADIO_CONFIG_1_REG_CORR_THRESHOLD_5_DOWNTO_0_RST    0x1F

__INLINE void bt_controller_radio_config_1_reg_pack(uint8_t radio_config1_reg_31_to_24_bits_are_reserved, uint8_t rx_on_delay_23_downto_16, uint8_t tx_on_delay_15_downto_8, uint8_t radio_config1_reg_7_to_6_bits_are_reserved, uint8_t corr_threshold_5_downto_0)
{
	ASSERT_ERR((((uint32_t)radio_config1_reg_31_to_24_bits_are_reserved << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_on_delay_23_downto_16 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)tx_on_delay_15_downto_8 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)radio_config1_reg_7_to_6_bits_are_reserved << 6) & ~((uint32_t)0x000000C0)) == 0);
	ASSERT_ERR((((uint32_t)corr_threshold_5_downto_0 << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CONFIG_1_REG_ADDR,  ((uint32_t)radio_config1_reg_31_to_24_bits_are_reserved << 24) |((uint32_t)rx_on_delay_23_downto_16 << 16) |((uint32_t)tx_on_delay_15_downto_8 << 8) |((uint32_t)radio_config1_reg_7_to_6_bits_are_reserved << 6) |((uint32_t)corr_threshold_5_downto_0 << 0));
}

__INLINE void bt_controller_radio_config_1_reg_unpack(uint8_t* radio_config1_reg_31_to_24_bits_are_reserved, uint8_t* rx_on_delay_23_downto_16, uint8_t* tx_on_delay_15_downto_8, uint8_t* radio_config1_reg_7_to_6_bits_are_reserved, uint8_t* corr_threshold_5_downto_0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_1_REG_ADDR);

	*radio_config1_reg_31_to_24_bits_are_reserved = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*rx_on_delay_23_downto_16 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*tx_on_delay_15_downto_8 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*radio_config1_reg_7_to_6_bits_are_reserved = (localVal & ((uint32_t)0x000000C0)) >>  6;
	*corr_threshold_5_downto_0 = (localVal & ((uint32_t)0x0000003F)) >>  0;
}

__INLINE uint8_t bt_controller_radio_config_1_reg_radio_config_1_reg_31_to_24_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE uint8_t bt_controller_radio_config_1_reg_rx_on_delay_23_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void bt_controller_radio_config_1_reg_rx_on_delay_23_downto_16_setf(uint8_t rxondelay23downto16)
{
	ASSERT_ERR((((uint32_t)rxondelay23downto16 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)rxondelay23downto16 <<16));
}
__INLINE uint8_t bt_controller_radio_config_1_reg_tx_on_delay_15_downto_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_radio_config_1_reg_tx_on_delay_15_downto_8_setf(uint8_t txondelay15downto8)
{
	ASSERT_ERR((((uint32_t)txondelay15downto8 << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_1_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)txondelay15downto8 <<8));
}
__INLINE uint8_t bt_controller_radio_config_1_reg_radio_config_1_reg_7_to_6_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000C0)) >> 6);
}
__INLINE uint8_t bt_controller_radio_config_1_reg_corr_threshold_5_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000003F)) >> 0);
}
__INLINE void bt_controller_radio_config_1_reg_corr_threshold_5_downto_0_setf(uint8_t corrthreshold5downto0)
{
	ASSERT_ERR((((uint32_t)corrthreshold5downto0 << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_1_REG_ADDR) & ~((uint32_t)0x0000003F)) | ((uint32_t)corrthreshold5downto0 <<0));
}

/**
 * @brief RADIO_CONFIG_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 T_IFS_Tx_to_Rx_31_downto_24 0x0
 *    23:16 T_IFS_Rx_to_Tx_23_downto_16 0x0
 *    15:08 radio_config2_reg_15_to_8_bits_are_reserved 0x0
 *    07:00 TX_POWER                  0x0
 * </pre>
 */
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004404)
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_OFFSET      0x00004404
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_INDEX       0x00001101
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_radio_config_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_2_REG_ADDR);
}

__INLINE void bt_controller_radio_config_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RADIO_CONFIG_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_T_IFS_TX_TO_RX_31_DOWNTO_24_MASK    ((uint32_t)0xFF000000)
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_T_IFS_TX_TO_RX_31_DOWNTO_24_LSB    24
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_T_IFS_TX_TO_RX_31_DOWNTO_24_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_T_IFS_RX_TO_TX_23_DOWNTO_16_MASK    ((uint32_t)0x00FF0000)
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_T_IFS_RX_TO_TX_23_DOWNTO_16_LSB    16
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_T_IFS_RX_TO_TX_23_DOWNTO_16_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_RADIO_CONFIG_2_REG_15_TO_8_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_RADIO_CONFIG_2_REG_15_TO_8_BITS_ARE_RESERVED_LSB    8
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_RADIO_CONFIG_2_REG_15_TO_8_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_TX_POWER_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_TX_POWER_LSB    0
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_TX_POWER_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_RADIO_CONFIG_2_REG_T_IFS_TX_TO_RX_31_DOWNTO_24_RST    0x0
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_T_IFS_RX_TO_TX_23_DOWNTO_16_RST    0x0
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_RADIO_CONFIG_2_REG_15_TO_8_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_RADIO_CONFIG_2_REG_TX_POWER_RST    0x0

__INLINE void bt_controller_radio_config_2_reg_pack(uint8_t t_ifs_tx_to_rx_31_downto_24, uint8_t t_ifs_rx_to_tx_23_downto_16, uint8_t radio_config2_reg_15_to_8_bits_are_reserved, uint8_t tx_power)
{
	ASSERT_ERR((((uint32_t)t_ifs_tx_to_rx_31_downto_24 << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)t_ifs_rx_to_tx_23_downto_16 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)radio_config2_reg_15_to_8_bits_are_reserved << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)tx_power << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CONFIG_2_REG_ADDR,  ((uint32_t)t_ifs_tx_to_rx_31_downto_24 << 24) |((uint32_t)t_ifs_rx_to_tx_23_downto_16 << 16) |((uint32_t)radio_config2_reg_15_to_8_bits_are_reserved << 8) |((uint32_t)tx_power << 0));
}

__INLINE void bt_controller_radio_config_2_reg_unpack(uint8_t* t_ifs_tx_to_rx_31_downto_24, uint8_t* t_ifs_rx_to_tx_23_downto_16, uint8_t* radio_config2_reg_15_to_8_bits_are_reserved, uint8_t* tx_power)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_2_REG_ADDR);

	*t_ifs_tx_to_rx_31_downto_24 = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*t_ifs_rx_to_tx_23_downto_16 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*radio_config2_reg_15_to_8_bits_are_reserved = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*tx_power = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint8_t bt_controller_radio_config_2_reg_t_ifs_tx_to_rx_31_downto_24_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void bt_controller_radio_config_2_reg_t_ifs_tx_to_rx_31_downto_24_setf(uint8_t tifstxtorx31downto24)
{
	ASSERT_ERR((((uint32_t)tifstxtorx31downto24 << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CONFIG_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_2_REG_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)tifstxtorx31downto24 <<24));
}
__INLINE uint8_t bt_controller_radio_config_2_reg_t_ifs_rx_to_tx_23_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void bt_controller_radio_config_2_reg_t_ifs_rx_to_tx_23_downto_16_setf(uint8_t tifsrxtotx23downto16)
{
	ASSERT_ERR((((uint32_t)tifsrxtotx23downto16 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CONFIG_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_2_REG_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)tifsrxtotx23downto16 <<16));
}
__INLINE uint8_t bt_controller_radio_config_2_reg_radio_config_2_reg_15_to_8_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t bt_controller_radio_config_2_reg_tx_power_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_radio_config_2_reg_tx_power_setf(uint8_t txpower)
{
	ASSERT_ERR((((uint32_t)txpower << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CONFIG_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_2_REG_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)txpower <<0));
}

/**
 * @brief ACCESS_ADDRESS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 Access_address_31_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_ACCESS_ADDRESS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004408)
#define BT_CONTROLLER_ACCESS_ADDRESS_REG_OFFSET      0x00004408
#define BT_CONTROLLER_ACCESS_ADDRESS_REG_INDEX       0x00001102
#define BT_CONTROLLER_ACCESS_ADDRESS_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_access_address_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ACCESS_ADDRESS_REG_ADDR);
}

__INLINE void bt_controller_access_address_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ACCESS_ADDRESS_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ACCESS_ADDRESS_REG_ACCESS_ADDRESS_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_ACCESS_ADDRESS_REG_ACCESS_ADDRESS_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_ACCESS_ADDRESS_REG_ACCESS_ADDRESS_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_ACCESS_ADDRESS_REG_ACCESS_ADDRESS_31_DOWNTO_0_RST    0x0

__INLINE uint32_t bt_controller_access_address_reg_access_address_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ACCESS_ADDRESS_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_access_address_reg_access_address_31_downto_0_setf(uint32_t accessaddress31downto0)
{
	ASSERT_ERR((((uint32_t)accessaddress31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ACCESS_ADDRESS_REG_ADDR, (uint32_t)accessaddress31downto0 << 0);
}

/**
 * @brief RADIO_STAT_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 radio_stat_reg_31_16_bits_are_reserved 0x0
 *    15:08 RSSI_value_read_from_RF_15_downto_8 0x0
 *    07:04 radio_stat_reg_7_to_4_bits_are_reserved 0x0
 *    03    radio_state               0              
 *    02    RSSI_received             0              
 *    01    Rampup_done               0              
 *    00    RF_initial                1              
 * </pre>
 */
#define BT_CONTROLLER_RADIO_STAT_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000440C)
#define BT_CONTROLLER_RADIO_STAT_REG_OFFSET      0x0000440C
#define BT_CONTROLLER_RADIO_STAT_REG_INDEX       0x00001103
#define BT_CONTROLLER_RADIO_STAT_REG_RESET       0x00000001

__INLINE uint32_t  bt_controller_radio_stat_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RADIO_STAT_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_RADIO_STAT_REG_RADIO_STAT_REG_31_16_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_RADIO_STAT_REG_RADIO_STAT_REG_31_16_BITS_ARE_RESERVED_LSB    16
#define BT_CONTROLLER_RADIO_STAT_REG_RADIO_STAT_REG_31_16_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_RADIO_STAT_REG_RSSI_VALUE_READ_FROM_RF_15_DOWNTO_8_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_RADIO_STAT_REG_RSSI_VALUE_READ_FROM_RF_15_DOWNTO_8_LSB    8
#define BT_CONTROLLER_RADIO_STAT_REG_RSSI_VALUE_READ_FROM_RF_15_DOWNTO_8_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RADIO_STAT_REG_RADIO_STAT_REG_7_TO_4_BITS_ARE_RESERVED_MASK    ((uint32_t)0x000000F0)
#define BT_CONTROLLER_RADIO_STAT_REG_RADIO_STAT_REG_7_TO_4_BITS_ARE_RESERVED_LSB    4
#define BT_CONTROLLER_RADIO_STAT_REG_RADIO_STAT_REG_7_TO_4_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_RADIO_STAT_REG_RADIO_STATE_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RADIO_STAT_REG_RADIO_STATE_POS    3
#define BT_CONTROLLER_RADIO_STAT_REG_RSSI_RECEIVED_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_RADIO_STAT_REG_RSSI_RECEIVED_POS    2
#define BT_CONTROLLER_RADIO_STAT_REG_RAMPUP_DONE_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_RADIO_STAT_REG_RAMPUP_DONE_POS    1
#define BT_CONTROLLER_RADIO_STAT_REG_RF_INITIAL_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_RADIO_STAT_REG_RF_INITIAL_POS    0

#define BT_CONTROLLER_RADIO_STAT_REG_RADIO_STAT_REG_31_16_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_RADIO_STAT_REG_RSSI_VALUE_READ_FROM_RF_15_DOWNTO_8_RST    0x0
#define BT_CONTROLLER_RADIO_STAT_REG_RADIO_STAT_REG_7_TO_4_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_RADIO_STAT_REG_RADIO_STATE_RST    0x0
#define BT_CONTROLLER_RADIO_STAT_REG_RSSI_RECEIVED_RST    0x0
#define BT_CONTROLLER_RADIO_STAT_REG_RAMPUP_DONE_RST    0x0
#define BT_CONTROLLER_RADIO_STAT_REG_RF_INITIAL_RST    0x1

__INLINE void bt_controller_radio_stat_reg_unpack(uint16_t* radio_stat_reg_31_16_bits_are_reserved, uint8_t* rssi_value_read_from_rf_15_downto_8, uint8_t* radio_stat_reg_7_to_4_bits_are_reserved, uint8_t* radio_state, uint8_t* rssi_received, uint8_t* rampup_done, uint8_t* rf_initial)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_STAT_REG_ADDR);

	*radio_stat_reg_31_16_bits_are_reserved = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*rssi_value_read_from_rf_15_downto_8 = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*radio_stat_reg_7_to_4_bits_are_reserved = (localVal & ((uint32_t)0x000000F0)) >>  4;
	*radio_state = (localVal & ((uint32_t)0x00000008)) >>  3;
	*rssi_received = (localVal & ((uint32_t)0x00000004)) >>  2;
	*rampup_done = (localVal & ((uint32_t)0x00000002)) >>  1;
	*rf_initial = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_radio_stat_reg_radio_stat_reg_31_16_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_STAT_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t bt_controller_radio_stat_reg_rssi_value_read_from_rf_15_downto_8_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_STAT_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE uint8_t bt_controller_radio_stat_reg_radio_stat_reg_7_to_4_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_STAT_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F0)) >> 4);
}
__INLINE uint8_t bt_controller_radio_stat_reg_radio_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_STAT_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t bt_controller_radio_stat_reg_rssi_received_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_STAT_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t bt_controller_radio_stat_reg_rampup_done_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_STAT_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t bt_controller_radio_stat_reg_rf_initial_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_STAT_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief RADIO_CONTROL_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 radio_control_reg_31_16_bits_are_reserved 0x0
 *    15    radio_control_reg_host_rw 0              
 *    14:00 radio_control_reg_host_addr_14_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_RADIO_CONTROL_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004410)
#define BT_CONTROLLER_RADIO_CONTROL_REGISTER_OFFSET      0x00004410
#define BT_CONTROLLER_RADIO_CONTROL_REGISTER_INDEX       0x00001104
#define BT_CONTROLLER_RADIO_CONTROL_REGISTER_RESET       0x00000000

__INLINE uint32_t  bt_controller_radio_control_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RADIO_CONTROL_REGISTER_ADDR);
}

__INLINE void bt_controller_radio_control_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RADIO_CONTROL_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RADIO_CONTROL_REGISTER_RADIO_CONTROL_REG_31_16_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_RADIO_CONTROL_REGISTER_RADIO_CONTROL_REG_31_16_BITS_ARE_RESERVED_LSB    16
#define BT_CONTROLLER_RADIO_CONTROL_REGISTER_RADIO_CONTROL_REG_31_16_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_RADIO_CONTROL_REGISTER_RADIO_CONTROL_REG_HOST_RW_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_RADIO_CONTROL_REGISTER_RADIO_CONTROL_REG_HOST_RW_POS    15
#define BT_CONTROLLER_RADIO_CONTROL_REGISTER_RADIO_CONTROL_REG_HOST_ADDR_14_DOWNTO_0_MASK    ((uint32_t)0x00007FFF)
#define BT_CONTROLLER_RADIO_CONTROL_REGISTER_RADIO_CONTROL_REG_HOST_ADDR_14_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RADIO_CONTROL_REGISTER_RADIO_CONTROL_REG_HOST_ADDR_14_DOWNTO_0_WIDTH    ((uint32_t)0x0000000F)

#define BT_CONTROLLER_RADIO_CONTROL_REGISTER_RADIO_CONTROL_REG_31_16_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_RADIO_CONTROL_REGISTER_RADIO_CONTROL_REG_HOST_RW_RST    0x0
#define BT_CONTROLLER_RADIO_CONTROL_REGISTER_RADIO_CONTROL_REG_HOST_ADDR_14_DOWNTO_0_RST    0x0

__INLINE void bt_controller_radio_control_register_pack(uint16_t radio_control_reg_31_16_bits_are_reserved, uint8_t radio_control_reg_host_rw, uint16_t radio_control_reg_host_addr_14_downto_0)
{
	ASSERT_ERR((((uint32_t)radio_control_reg_31_16_bits_are_reserved << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)radio_control_reg_host_rw << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)radio_control_reg_host_addr_14_downto_0 << 0) & ~((uint32_t)0x00007FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CONTROL_REGISTER_ADDR,  ((uint32_t)radio_control_reg_31_16_bits_are_reserved << 16) |((uint32_t)radio_control_reg_host_rw << 15) |((uint32_t)radio_control_reg_host_addr_14_downto_0 << 0));
}

__INLINE void bt_controller_radio_control_register_unpack(uint16_t* radio_control_reg_31_16_bits_are_reserved, uint8_t* radio_control_reg_host_rw, uint16_t* radio_control_reg_host_addr_14_downto_0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONTROL_REGISTER_ADDR);

	*radio_control_reg_31_16_bits_are_reserved = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*radio_control_reg_host_rw = (localVal & ((uint32_t)0x00008000)) >>  15;
	*radio_control_reg_host_addr_14_downto_0 = (localVal & ((uint32_t)0x00007FFF)) >>  0;
}

__INLINE uint16_t bt_controller_radio_control_register_radio_control_reg_31_16_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONTROL_REGISTER_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE void bt_controller_radio_control_register_radio_control_reg_host_rw_setf(uint8_t radiocontrolreghostrw)
{
	ASSERT_ERR((((uint32_t)radiocontrolreghostrw << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CONTROL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_CONTROL_REGISTER_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)radiocontrolreghostrw <<15));
}
__INLINE void bt_controller_radio_control_register_radio_control_reg_host_addr_14_downto_0_setf(uint16_t radiocontrolreghostaddr14downto0)
{
	ASSERT_ERR((((uint32_t)radiocontrolreghostaddr14downto0 << 0) & ~((uint32_t)0x00007FFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CONTROL_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_CONTROL_REGISTER_ADDR) & ~((uint32_t)0x00007FFF)) | ((uint32_t)radiocontrolreghostaddr14downto0 <<0));
}

/**
 * @brief RADIO_CONFIG_3_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 PA_rampup_count           0x77
 *    23    pa_ramping_in_steps_eanble 1              
 *    22:18 radio_config3_bits_22_18_reserved 0x0
 *    17:09 No_sysclk_count_end_transmission 0x0A0
 *    08:00 No_sysclk_count_begin_transmission 0x03A
 * </pre>
 */
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004414)
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_OFFSET      0x00004414
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_INDEX       0x00001105
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_RESET       0x7781403A

__INLINE uint32_t  bt_controller_radio_config_3_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_3_REG_ADDR);
}

__INLINE void bt_controller_radio_config_3_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RADIO_CONFIG_3_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_PA_RAMPUP_COUNT_MASK    ((uint32_t)0xFF000000)
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_PA_RAMPUP_COUNT_LSB    24
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_PA_RAMPUP_COUNT_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_PA_RAMPING_IN_STEPS_EANBLE_BIT    ((uint32_t)0x00800000)
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_PA_RAMPING_IN_STEPS_EANBLE_POS    23
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_RADIO_CONFIG_3_BITS_22_18_RESERVED_MASK    ((uint32_t)0x007C0000)
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_RADIO_CONFIG_3_BITS_22_18_RESERVED_LSB    18
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_RADIO_CONFIG_3_BITS_22_18_RESERVED_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_NO_SYSCLK_COUNT_END_TRANSMISSION_MASK    ((uint32_t)0x0003FE00)
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_NO_SYSCLK_COUNT_END_TRANSMISSION_LSB    9
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_NO_SYSCLK_COUNT_END_TRANSMISSION_WIDTH    ((uint32_t)0x00000009)
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_NO_SYSCLK_COUNT_BEGIN_TRANSMISSION_MASK    ((uint32_t)0x000001FF)
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_NO_SYSCLK_COUNT_BEGIN_TRANSMISSION_LSB    0
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_NO_SYSCLK_COUNT_BEGIN_TRANSMISSION_WIDTH    ((uint32_t)0x00000009)

#define BT_CONTROLLER_RADIO_CONFIG_3_REG_PA_RAMPUP_COUNT_RST    0x77
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_PA_RAMPING_IN_STEPS_EANBLE_RST    0x1
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_RADIO_CONFIG_3_BITS_22_18_RESERVED_RST    0x0
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_NO_SYSCLK_COUNT_END_TRANSMISSION_RST    0x0A0
#define BT_CONTROLLER_RADIO_CONFIG_3_REG_NO_SYSCLK_COUNT_BEGIN_TRANSMISSION_RST    0x03A

__INLINE void bt_controller_radio_config_3_reg_pack(uint8_t pa_rampup_count, uint8_t pa_ramping_in_steps_eanble, uint8_t radio_config3_bits_22_18_reserved, uint16_t no_sysclk_count_end_transmission, uint16_t no_sysclk_count_begin_transmission)
{
	ASSERT_ERR((((uint32_t)pa_rampup_count << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)pa_ramping_in_steps_eanble << 23) & ~((uint32_t)0x00800000)) == 0);
	ASSERT_ERR((((uint32_t)radio_config3_bits_22_18_reserved << 18) & ~((uint32_t)0x007C0000)) == 0);
	ASSERT_ERR((((uint32_t)no_sysclk_count_end_transmission << 9) & ~((uint32_t)0x0003FE00)) == 0);
	ASSERT_ERR((((uint32_t)no_sysclk_count_begin_transmission << 0) & ~((uint32_t)0x000001FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CONFIG_3_REG_ADDR,  ((uint32_t)pa_rampup_count << 24) |((uint32_t)pa_ramping_in_steps_eanble << 23) |((uint32_t)radio_config3_bits_22_18_reserved << 18) |((uint32_t)no_sysclk_count_end_transmission << 9) |((uint32_t)no_sysclk_count_begin_transmission << 0));
}

__INLINE void bt_controller_radio_config_3_reg_unpack(uint8_t* pa_rampup_count, uint8_t* pa_ramping_in_steps_eanble, uint8_t* radio_config3_bits_22_18_reserved, uint16_t* no_sysclk_count_end_transmission, uint16_t* no_sysclk_count_begin_transmission)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_3_REG_ADDR);

	*pa_rampup_count = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*pa_ramping_in_steps_eanble = (localVal & ((uint32_t)0x00800000)) >>  23;
	*radio_config3_bits_22_18_reserved = (localVal & ((uint32_t)0x007C0000)) >>  18;
	*no_sysclk_count_end_transmission = (localVal & ((uint32_t)0x0003FE00)) >>  9;
	*no_sysclk_count_begin_transmission = (localVal & ((uint32_t)0x000001FF)) >>  0;
}

__INLINE uint8_t bt_controller_radio_config_3_reg_pa_rampup_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_3_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE void bt_controller_radio_config_3_reg_pa_rampup_count_setf(uint8_t parampupcount)
{
	ASSERT_ERR((((uint32_t)parampupcount << 24) & ~((uint32_t)0xFF000000)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CONFIG_3_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_3_REG_ADDR) & ~((uint32_t)0xFF000000)) | ((uint32_t)parampupcount <<24));
}
__INLINE uint8_t bt_controller_radio_config_3_reg_pa_ramping_in_steps_eanble_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_3_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00800000)) >> 23);
}
__INLINE void bt_controller_radio_config_3_reg_pa_ramping_in_steps_eanble_setf(uint8_t parampinginstepseanble)
{
	ASSERT_ERR((((uint32_t)parampinginstepseanble << 23) & ~((uint32_t)0x00800000)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CONFIG_3_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_3_REG_ADDR) & ~((uint32_t)0x00800000)) | ((uint32_t)parampinginstepseanble <<23));
}
__INLINE uint8_t bt_controller_radio_config_3_reg_radio_config_3_bits_22_18_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_3_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x007C0000)) >> 18);
}
__INLINE uint16_t bt_controller_radio_config_3_reg_no_sysclk_count_end_transmission_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_3_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0003FE00)) >> 9);
}
__INLINE void bt_controller_radio_config_3_reg_no_sysclk_count_end_transmission_setf(uint16_t nosysclkcountendtransmission)
{
	ASSERT_ERR((((uint32_t)nosysclkcountendtransmission << 9) & ~((uint32_t)0x0003FE00)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_CONFIG_3_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_3_REG_ADDR) & ~((uint32_t)0x0003FE00)) | ((uint32_t)nosysclkcountendtransmission <<9));
}
__INLINE uint16_t bt_controller_radio_config_3_reg_no_sysclk_count_begin_transmission_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_CONFIG_3_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000001FF)) >> 0);
}

/**
 * @brief SPI_MODE_CNTRL_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 spi_mode_cntrl1_reg_31_to_16_bits_are_reserved 0x0
 *    15:14 addr_data_interval        0x0
 *    13    msb_lsb_first             0              
 *    12    addr_data_first           0              
 *    11:07 addr_bits_no              0x10
 *    06:02 data_bits_no              0x1F
 *    01    Four_Wire_Three_Wire_Interface 1              
 *    00    spe                       1              
 * </pre>
 */
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004418)
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_OFFSET      0x00004418
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_INDEX       0x00001106
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_RESET       0x0000087F

__INLINE uint32_t  bt_controller_spi_mode_cntrl_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR);
}

__INLINE void bt_controller_spi_mode_cntrl_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_SPI_MODE_CNTRL_1_REG_31_TO_16_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_SPI_MODE_CNTRL_1_REG_31_TO_16_BITS_ARE_RESERVED_LSB    16
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_SPI_MODE_CNTRL_1_REG_31_TO_16_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR_DATA_INTERVAL_MASK    ((uint32_t)0x0000C000)
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR_DATA_INTERVAL_LSB    14
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR_DATA_INTERVAL_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_MSB_LSB_FIRST_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_MSB_LSB_FIRST_POS    13
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR_DATA_FIRST_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR_DATA_FIRST_POS    12
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR_BITS_NO_MASK    ((uint32_t)0x00000F80)
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR_BITS_NO_LSB    7
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR_BITS_NO_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_DATA_BITS_NO_MASK    ((uint32_t)0x0000007C)
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_DATA_BITS_NO_LSB    2
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_DATA_BITS_NO_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_FOUR_WIRE_THREE_WIRE_INTERFACE_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_FOUR_WIRE_THREE_WIRE_INTERFACE_POS    1
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_SPE_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_SPE_POS    0

#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_SPI_MODE_CNTRL_1_REG_31_TO_16_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR_DATA_INTERVAL_RST    0x0
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_MSB_LSB_FIRST_RST    0x0
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR_DATA_FIRST_RST    0x0
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR_BITS_NO_RST    0x10
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_DATA_BITS_NO_RST    0x1F
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_FOUR_WIRE_THREE_WIRE_INTERFACE_RST    0x1
#define BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_SPE_RST    0x1

__INLINE void bt_controller_spi_mode_cntrl_1_reg_pack(uint16_t spi_mode_cntrl1_reg_31_to_16_bits_are_reserved, uint8_t addr_data_interval, uint8_t msb_lsb_first, uint8_t addr_data_first, uint8_t addr_bits_no, uint8_t data_bits_no, uint8_t four_wire_three_wire_interface, uint8_t spe)
{
	ASSERT_ERR((((uint32_t)spi_mode_cntrl1_reg_31_to_16_bits_are_reserved << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)addr_data_interval << 14) & ~((uint32_t)0x0000C000)) == 0);
	ASSERT_ERR((((uint32_t)msb_lsb_first << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)addr_data_first << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)addr_bits_no << 7) & ~((uint32_t)0x00000F80)) == 0);
	ASSERT_ERR((((uint32_t)data_bits_no << 2) & ~((uint32_t)0x0000007C)) == 0);
	ASSERT_ERR((((uint32_t)four_wire_three_wire_interface << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)spe << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR,  ((uint32_t)spi_mode_cntrl1_reg_31_to_16_bits_are_reserved << 16) |((uint32_t)addr_data_interval << 14) |((uint32_t)msb_lsb_first << 13) |((uint32_t)addr_data_first << 12) |((uint32_t)addr_bits_no << 7) |((uint32_t)data_bits_no << 2) |((uint32_t)four_wire_three_wire_interface << 1) |((uint32_t)spe << 0));
}

__INLINE void bt_controller_spi_mode_cntrl_1_reg_unpack(uint16_t* spi_mode_cntrl1_reg_31_to_16_bits_are_reserved, uint8_t* addr_data_interval, uint8_t* msb_lsb_first, uint8_t* addr_data_first, uint8_t* addr_bits_no, uint8_t* data_bits_no, uint8_t* four_wire_three_wire_interface, uint8_t* spe)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR);

	*spi_mode_cntrl1_reg_31_to_16_bits_are_reserved = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*addr_data_interval = (localVal & ((uint32_t)0x0000C000)) >>  14;
	*msb_lsb_first = (localVal & ((uint32_t)0x00002000)) >>  13;
	*addr_data_first = (localVal & ((uint32_t)0x00001000)) >>  12;
	*addr_bits_no = (localVal & ((uint32_t)0x00000F80)) >>  7;
	*data_bits_no = (localVal & ((uint32_t)0x0000007C)) >>  2;
	*four_wire_three_wire_interface = (localVal & ((uint32_t)0x00000002)) >>  1;
	*spe = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_spi_mode_cntrl_1_reg_spi_mode_cntrl_1_reg_31_to_16_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t bt_controller_spi_mode_cntrl_1_reg_addr_data_interval_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000C000)) >> 14);
}
__INLINE void bt_controller_spi_mode_cntrl_1_reg_addr_data_interval_setf(uint8_t addrdatainterval)
{
	ASSERT_ERR((((uint32_t)addrdatainterval << 14) & ~((uint32_t)0x0000C000)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR) & ~((uint32_t)0x0000C000)) | ((uint32_t)addrdatainterval <<14));
}
__INLINE uint8_t bt_controller_spi_mode_cntrl_1_reg_msb_lsb_first_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE void bt_controller_spi_mode_cntrl_1_reg_msb_lsb_first_setf(uint8_t msblsbfirst)
{
	ASSERT_ERR((((uint32_t)msblsbfirst << 13) & ~((uint32_t)0x00002000)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR) & ~((uint32_t)0x00002000)) | ((uint32_t)msblsbfirst <<13));
}
__INLINE uint8_t bt_controller_spi_mode_cntrl_1_reg_addr_data_first_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_spi_mode_cntrl_1_reg_addr_data_first_setf(uint8_t addrdatafirst)
{
	ASSERT_ERR((((uint32_t)addrdatafirst << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)addrdatafirst <<12));
}
__INLINE uint8_t bt_controller_spi_mode_cntrl_1_reg_addr_bits_no_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F80)) >> 7);
}
__INLINE void bt_controller_spi_mode_cntrl_1_reg_addr_bits_no_setf(uint8_t addrbitsno)
{
	ASSERT_ERR((((uint32_t)addrbitsno << 7) & ~((uint32_t)0x00000F80)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR) & ~((uint32_t)0x00000F80)) | ((uint32_t)addrbitsno <<7));
}
__INLINE uint8_t bt_controller_spi_mode_cntrl_1_reg_data_bits_no_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007C)) >> 2);
}
__INLINE void bt_controller_spi_mode_cntrl_1_reg_data_bits_no_setf(uint8_t databitsno)
{
	ASSERT_ERR((((uint32_t)databitsno << 2) & ~((uint32_t)0x0000007C)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR) & ~((uint32_t)0x0000007C)) | ((uint32_t)databitsno <<2));
}
__INLINE uint8_t bt_controller_spi_mode_cntrl_1_reg_four_wire_three_wire_interface_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_spi_mode_cntrl_1_reg_four_wire_three_wire_interface_setf(uint8_t fourwirethreewireinterface)
{
	ASSERT_ERR((((uint32_t)fourwirethreewireinterface << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)fourwirethreewireinterface <<1));
}
__INLINE uint8_t bt_controller_spi_mode_cntrl_1_reg_spe_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_spi_mode_cntrl_1_reg_spe_setf(uint8_t spe)
{
	ASSERT_ERR((((uint32_t)spe << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_MODE_CNTRL_1_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)spe <<0));
}

/**
 * @brief SPI_CLK_CNTRL_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:13 spi_clk_cntrl_reg_31_to_13_bits_are_reserved 0x00008
 *    12    clk_data_Delay            1              
 *    11    extra_clock_cycle         0              
 *    10:09 shift_edge                0x1
 *    08    en_clk_a_d                0              
 *    07:05 spi_clk_cntrl_reg_7_to_5_bits_are_reserved 0x0
 *    04:03 en_d_period               0x0
 *    02:01 en_clk_d_d                0x10
 *    00    en_idle_state             1              
 * </pre>
 */
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000441C)
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_OFFSET      0x0000441C
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_INDEX       0x00001107
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_RESET       0x00011205

__INLINE uint32_t  bt_controller_spi_clk_cntrl_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR);
}

__INLINE void bt_controller_spi_clk_cntrl_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_SPI_CLK_CNTRL_REG_31_TO_13_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFE000)
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_SPI_CLK_CNTRL_REG_31_TO_13_BITS_ARE_RESERVED_LSB    13
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_SPI_CLK_CNTRL_REG_31_TO_13_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000013)
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_CLK_DATA_DELAY_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_CLK_DATA_DELAY_POS    12
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EXTRA_CLOCK_CYCLE_BIT    ((uint32_t)0x00000800)
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EXTRA_CLOCK_CYCLE_POS    11
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_SHIFT_EDGE_MASK    ((uint32_t)0x00000600)
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_SHIFT_EDGE_LSB    9
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_SHIFT_EDGE_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EN_CLK_A_D_BIT    ((uint32_t)0x00000100)
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EN_CLK_A_D_POS    8
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_SPI_CLK_CNTRL_REG_7_TO_5_BITS_ARE_RESERVED_MASK    ((uint32_t)0x000000E0)
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_SPI_CLK_CNTRL_REG_7_TO_5_BITS_ARE_RESERVED_LSB    5
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_SPI_CLK_CNTRL_REG_7_TO_5_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EN_D_PERIOD_MASK    ((uint32_t)0x00000018)
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EN_D_PERIOD_LSB    3
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EN_D_PERIOD_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EN_CLK_D_D_MASK    ((uint32_t)0x00000006)
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EN_CLK_D_D_LSB    1
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EN_CLK_D_D_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EN_IDLE_STATE_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EN_IDLE_STATE_POS    0

#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_SPI_CLK_CNTRL_REG_31_TO_13_BITS_ARE_RESERVED_RST    0x00008
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_CLK_DATA_DELAY_RST    0x1
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EXTRA_CLOCK_CYCLE_RST    0x0
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_SHIFT_EDGE_RST    0x1
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EN_CLK_A_D_RST    0x0
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_SPI_CLK_CNTRL_REG_7_TO_5_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EN_D_PERIOD_RST    0x0
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EN_CLK_D_D_RST    0x10
#define BT_CONTROLLER_SPI_CLK_CNTRL_REG_EN_IDLE_STATE_RST    0x1

__INLINE void bt_controller_spi_clk_cntrl_reg_pack(uint32_t spi_clk_cntrl_reg_31_to_13_bits_are_reserved, uint8_t clk_data_delay, uint8_t extra_clock_cycle, uint8_t shift_edge, uint8_t en_clk_a_d, uint8_t spi_clk_cntrl_reg_7_to_5_bits_are_reserved, uint8_t en_d_period, uint8_t en_clk_d_d, uint8_t en_idle_state)
{
	ASSERT_ERR((((uint32_t)spi_clk_cntrl_reg_31_to_13_bits_are_reserved << 13) & ~((uint32_t)0xFFFFE000)) == 0);
	ASSERT_ERR((((uint32_t)clk_data_delay << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)extra_clock_cycle << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)shift_edge << 9) & ~((uint32_t)0x00000600)) == 0);
	ASSERT_ERR((((uint32_t)en_clk_a_d << 8) & ~((uint32_t)0x00000100)) == 0);
	ASSERT_ERR((((uint32_t)spi_clk_cntrl_reg_7_to_5_bits_are_reserved << 5) & ~((uint32_t)0x000000E0)) == 0);
	ASSERT_ERR((((uint32_t)en_d_period << 3) & ~((uint32_t)0x00000018)) == 0);
	ASSERT_ERR((((uint32_t)en_clk_d_d << 1) & ~((uint32_t)0x00000006)) == 0);
	ASSERT_ERR((((uint32_t)en_idle_state << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR,  ((uint32_t)spi_clk_cntrl_reg_31_to_13_bits_are_reserved << 13) |((uint32_t)clk_data_delay << 12) |((uint32_t)extra_clock_cycle << 11) |((uint32_t)shift_edge << 9) |((uint32_t)en_clk_a_d << 8) |((uint32_t)spi_clk_cntrl_reg_7_to_5_bits_are_reserved << 5) |((uint32_t)en_d_period << 3) |((uint32_t)en_clk_d_d << 1) |((uint32_t)en_idle_state << 0));
}

__INLINE void bt_controller_spi_clk_cntrl_reg_unpack(uint32_t* spi_clk_cntrl_reg_31_to_13_bits_are_reserved, uint8_t* clk_data_delay, uint8_t* extra_clock_cycle, uint8_t* shift_edge, uint8_t* en_clk_a_d, uint8_t* spi_clk_cntrl_reg_7_to_5_bits_are_reserved, uint8_t* en_d_period, uint8_t* en_clk_d_d, uint8_t* en_idle_state)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR);

	*spi_clk_cntrl_reg_31_to_13_bits_are_reserved = (localVal & ((uint32_t)0xFFFFE000)) >>  13;
	*clk_data_delay = (localVal & ((uint32_t)0x00001000)) >>  12;
	*extra_clock_cycle = (localVal & ((uint32_t)0x00000800)) >>  11;
	*shift_edge = (localVal & ((uint32_t)0x00000600)) >>  9;
	*en_clk_a_d = (localVal & ((uint32_t)0x00000100)) >>  8;
	*spi_clk_cntrl_reg_7_to_5_bits_are_reserved = (localVal & ((uint32_t)0x000000E0)) >>  5;
	*en_d_period = (localVal & ((uint32_t)0x00000018)) >>  3;
	*en_clk_d_d = (localVal & ((uint32_t)0x00000006)) >>  1;
	*en_idle_state = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t bt_controller_spi_clk_cntrl_reg_spi_clk_cntrl_reg_31_to_13_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFE000)) >> 13);
}
__INLINE uint8_t bt_controller_spi_clk_cntrl_reg_clk_data_delay_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_spi_clk_cntrl_reg_clk_data_delay_setf(uint8_t clkdatadelay)
{
	ASSERT_ERR((((uint32_t)clkdatadelay << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)clkdatadelay <<12));
}
__INLINE uint8_t bt_controller_spi_clk_cntrl_reg_extra_clock_cycle_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void bt_controller_spi_clk_cntrl_reg_extra_clock_cycle_setf(uint8_t extraclockcycle)
{
	ASSERT_ERR((((uint32_t)extraclockcycle << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)extraclockcycle <<11));
}
__INLINE uint8_t bt_controller_spi_clk_cntrl_reg_shift_edge_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000600)) >> 9);
}
__INLINE void bt_controller_spi_clk_cntrl_reg_shift_edge_setf(uint8_t shiftedge)
{
	ASSERT_ERR((((uint32_t)shiftedge << 9) & ~((uint32_t)0x00000600)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR) & ~((uint32_t)0x00000600)) | ((uint32_t)shiftedge <<9));
}
__INLINE uint8_t bt_controller_spi_clk_cntrl_reg_en_clk_a_d_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000100)) >> 8);
}
__INLINE void bt_controller_spi_clk_cntrl_reg_en_clk_a_d_setf(uint8_t enclkad)
{
	ASSERT_ERR((((uint32_t)enclkad << 8) & ~((uint32_t)0x00000100)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR) & ~((uint32_t)0x00000100)) | ((uint32_t)enclkad <<8));
}
__INLINE uint8_t bt_controller_spi_clk_cntrl_reg_spi_clk_cntrl_reg_7_to_5_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000E0)) >> 5);
}
__INLINE uint8_t bt_controller_spi_clk_cntrl_reg_en_d_period_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000018)) >> 3);
}
__INLINE void bt_controller_spi_clk_cntrl_reg_en_d_period_setf(uint8_t endperiod)
{
	ASSERT_ERR((((uint32_t)endperiod << 3) & ~((uint32_t)0x00000018)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR) & ~((uint32_t)0x00000018)) | ((uint32_t)endperiod <<3));
}
__INLINE uint8_t bt_controller_spi_clk_cntrl_reg_en_clk_d_d_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000006)) >> 1);
}
__INLINE void bt_controller_spi_clk_cntrl_reg_en_clk_d_d_setf(uint8_t enclkdd)
{
	ASSERT_ERR((((uint32_t)enclkdd << 1) & ~((uint32_t)0x00000006)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR) & ~((uint32_t)0x00000006)) | ((uint32_t)enclkdd <<1));
}
__INLINE uint8_t bt_controller_spi_clk_cntrl_reg_en_idle_state_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_spi_clk_cntrl_reg_en_idle_state_setf(uint8_t enidlestate)
{
	ASSERT_ERR((((uint32_t)enidlestate << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_SPI_CLK_CNTRL_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)enidlestate <<0));
}

/**
 * @brief LOW_IF_CONFIG_TX_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 low_if_tx_value_31_downto_16_for_2_Mpbs 0x0
 *    15:00 low_if_tx_value_15_downto_0_for_1_Mbps 0x0
 * </pre>
 */
#define BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004420)
#define BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_OFFSET      0x00004420
#define BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_INDEX       0x00001108
#define BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_low_if_config_tx_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_ADDR);
}

__INLINE void bt_controller_low_if_config_tx_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_LOW_IF_TX_VALUE_31_DOWNTO_16_FOR_2_MPBS_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_LOW_IF_TX_VALUE_31_DOWNTO_16_FOR_2_MPBS_LSB    16
#define BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_LOW_IF_TX_VALUE_31_DOWNTO_16_FOR_2_MPBS_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_LOW_IF_TX_VALUE_15_DOWNTO_0_FOR_1_MBPS_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_LOW_IF_TX_VALUE_15_DOWNTO_0_FOR_1_MBPS_LSB    0
#define BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_LOW_IF_TX_VALUE_15_DOWNTO_0_FOR_1_MBPS_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_LOW_IF_TX_VALUE_31_DOWNTO_16_FOR_2_MPBS_RST    0x0
#define BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_LOW_IF_TX_VALUE_15_DOWNTO_0_FOR_1_MBPS_RST    0x0

__INLINE void bt_controller_low_if_config_tx_reg_pack(uint16_t low_if_tx_value_31_downto_16_for_2_mpbs, uint16_t low_if_tx_value_15_downto_0_for_1_mbps)
{
	ASSERT_ERR((((uint32_t)low_if_tx_value_31_downto_16_for_2_mpbs << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)low_if_tx_value_15_downto_0_for_1_mbps << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_ADDR,  ((uint32_t)low_if_tx_value_31_downto_16_for_2_mpbs << 16) |((uint32_t)low_if_tx_value_15_downto_0_for_1_mbps << 0));
}

__INLINE void bt_controller_low_if_config_tx_reg_unpack(uint16_t* low_if_tx_value_31_downto_16_for_2_mpbs, uint16_t* low_if_tx_value_15_downto_0_for_1_mbps)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_ADDR);

	*low_if_tx_value_31_downto_16_for_2_mpbs = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*low_if_tx_value_15_downto_0_for_1_mbps = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t bt_controller_low_if_config_tx_reg_low_if_tx_value_31_downto_16_for_2_mpbs_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE void bt_controller_low_if_config_tx_reg_low_if_tx_value_31_downto_16_for_2_mpbs_setf(uint16_t lowiftxvalue31downto16for2mpbs)
{
	ASSERT_ERR((((uint32_t)lowiftxvalue31downto16for2mpbs << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_ADDR) & ~((uint32_t)0xFFFF0000)) | ((uint32_t)lowiftxvalue31downto16for2mpbs <<16));
}
__INLINE uint16_t bt_controller_low_if_config_tx_reg_low_if_tx_value_15_downto_0_for_1_mbps_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void bt_controller_low_if_config_tx_reg_low_if_tx_value_15_downto_0_for_1_mbps_setf(uint16_t lowiftxvalue15downto0for1mbps)
{
	ASSERT_ERR((((uint32_t)lowiftxvalue15downto0for1mbps << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_LOW_IF_CONFIG_TX_REG_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)lowiftxvalue15downto0for1mbps <<0));
}

/**
 * @brief LOW_IF_CONFIG_RX_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 low_if_rx_value_31_downto_16 0x1000
 *    15:00 low_if_rx_value_15_downto_0 0x0800
 * </pre>
 */
#define BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004424)
#define BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_OFFSET      0x00004424
#define BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_INDEX       0x00001109
#define BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_RESET       0x10000800

__INLINE uint32_t  bt_controller_low_if_config_rx_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_ADDR);
}

__INLINE void bt_controller_low_if_config_rx_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_LOW_IF_RX_VALUE_31_DOWNTO_16_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_LOW_IF_RX_VALUE_31_DOWNTO_16_LSB    16
#define BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_LOW_IF_RX_VALUE_31_DOWNTO_16_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_LOW_IF_RX_VALUE_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_LOW_IF_RX_VALUE_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_LOW_IF_RX_VALUE_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_LOW_IF_RX_VALUE_31_DOWNTO_16_RST    0x1000
#define BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_LOW_IF_RX_VALUE_15_DOWNTO_0_RST    0x0800

__INLINE void bt_controller_low_if_config_rx_reg_pack(uint16_t low_if_rx_value_31_downto_16, uint16_t low_if_rx_value_15_downto_0)
{
	ASSERT_ERR((((uint32_t)low_if_rx_value_31_downto_16 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)low_if_rx_value_15_downto_0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_ADDR,  ((uint32_t)low_if_rx_value_31_downto_16 << 16) |((uint32_t)low_if_rx_value_15_downto_0 << 0));
}

__INLINE void bt_controller_low_if_config_rx_reg_unpack(uint16_t* low_if_rx_value_31_downto_16, uint16_t* low_if_rx_value_15_downto_0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_ADDR);

	*low_if_rx_value_31_downto_16 = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*low_if_rx_value_15_downto_0 = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t bt_controller_low_if_config_rx_reg_low_if_rx_value_31_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE void bt_controller_low_if_config_rx_reg_low_if_rx_value_31_downto_16_setf(uint16_t lowifrxvalue31downto16)
{
	ASSERT_ERR((((uint32_t)lowifrxvalue31downto16 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_ADDR) & ~((uint32_t)0xFFFF0000)) | ((uint32_t)lowifrxvalue31downto16 <<16));
}
__INLINE uint16_t bt_controller_low_if_config_rx_reg_low_if_rx_value_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void bt_controller_low_if_config_rx_reg_low_if_rx_value_15_downto_0_setf(uint16_t lowifrxvalue15downto0)
{
	ASSERT_ERR((((uint32_t)lowifrxvalue15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_LOW_IF_CONFIG_RX_REG_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)lowifrxvalue15downto0 <<0));
}

/**
 * @brief RADIO_DATAIN_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 host_data_31_downto_0_to_be_sent_to_radio 0x0
 * </pre>
 */
#define BT_CONTROLLER_RADIO_DATAIN_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004428)
#define BT_CONTROLLER_RADIO_DATAIN_REG_OFFSET      0x00004428
#define BT_CONTROLLER_RADIO_DATAIN_REG_INDEX       0x0000110A
#define BT_CONTROLLER_RADIO_DATAIN_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_radio_datain_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RADIO_DATAIN_REG_ADDR);
}

__INLINE void bt_controller_radio_datain_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RADIO_DATAIN_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RADIO_DATAIN_REG_HOST_DATA_31_DOWNTO_0_TO_BE_SENT_TO_RADIO_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_RADIO_DATAIN_REG_HOST_DATA_31_DOWNTO_0_TO_BE_SENT_TO_RADIO_LSB    0
#define BT_CONTROLLER_RADIO_DATAIN_REG_HOST_DATA_31_DOWNTO_0_TO_BE_SENT_TO_RADIO_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_RADIO_DATAIN_REG_HOST_DATA_31_DOWNTO_0_TO_BE_SENT_TO_RADIO_RST    0x0

__INLINE uint32_t bt_controller_radio_datain_reg_host_data_31_downto_0_to_be_sent_to_radio_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_DATAIN_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_radio_datain_reg_host_data_31_downto_0_to_be_sent_to_radio_setf(uint32_t hostdata31downto0tobesenttoradio)
{
	ASSERT_ERR((((uint32_t)hostdata31downto0tobesenttoradio << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RADIO_DATAIN_REG_ADDR, (uint32_t)hostdata31downto0tobesenttoradio << 0);
}

/**
 * @brief RADIO_DATAOUT_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 host_data_to_be_read_31_downto_0_by_host 0x0
 * </pre>
 */
#define BT_CONTROLLER_RADIO_DATAOUT_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000442C)
#define BT_CONTROLLER_RADIO_DATAOUT_REG_OFFSET      0x0000442C
#define BT_CONTROLLER_RADIO_DATAOUT_REG_INDEX       0x0000110B
#define BT_CONTROLLER_RADIO_DATAOUT_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_radio_dataout_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RADIO_DATAOUT_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_RADIO_DATAOUT_REG_HOST_DATA_TO_BE_READ_31_DOWNTO_0_BY_HOST_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_RADIO_DATAOUT_REG_HOST_DATA_TO_BE_READ_31_DOWNTO_0_BY_HOST_LSB    0
#define BT_CONTROLLER_RADIO_DATAOUT_REG_HOST_DATA_TO_BE_READ_31_DOWNTO_0_BY_HOST_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_RADIO_DATAOUT_REG_HOST_DATA_TO_BE_READ_31_DOWNTO_0_BY_HOST_RST    0x0

__INLINE uint32_t bt_controller_radio_dataout_reg_host_data_to_be_read_31_downto_0_by_host_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RADIO_DATAOUT_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RF_DATA_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 rf_data1_reg_31downto0    0x0
 * </pre>
 */
#define BT_CONTROLLER_RF_DATA_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004430)
#define BT_CONTROLLER_RF_DATA_1_REG_OFFSET      0x00004430
#define BT_CONTROLLER_RF_DATA_1_REG_INDEX       0x0000110C
#define BT_CONTROLLER_RF_DATA_1_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rf_data_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_DATA_1_REG_ADDR);
}

__INLINE void bt_controller_rf_data_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_DATA_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_DATA_1_REG_RF_DATA_1_REG_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_RF_DATA_1_REG_RF_DATA_1_REG_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_DATA_1_REG_RF_DATA_1_REG_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_RF_DATA_1_REG_RF_DATA_1_REG_31_DOWNTO_0_RST    0x0

__INLINE uint32_t bt_controller_rf_data_1_reg_rf_data_1_reg_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_DATA_1_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_data_1_reg_rf_data_1_reg_31_downto_0_setf(uint32_t rfdata1reg31downto0)
{
	ASSERT_ERR((((uint32_t)rfdata1reg31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_DATA_1_REG_ADDR, (uint32_t)rfdata1reg31downto0 << 0);
}

/**
 * @brief RF_DATA_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 rf_data2_reg_31downto0    0x0
 * </pre>
 */
#define BT_CONTROLLER_RF_DATA_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004434)
#define BT_CONTROLLER_RF_DATA_2_REG_OFFSET      0x00004434
#define BT_CONTROLLER_RF_DATA_2_REG_INDEX       0x0000110D
#define BT_CONTROLLER_RF_DATA_2_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rf_data_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_DATA_2_REG_ADDR);
}

__INLINE void bt_controller_rf_data_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_DATA_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_DATA_2_REG_RF_DATA_2_REG_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_RF_DATA_2_REG_RF_DATA_2_REG_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_DATA_2_REG_RF_DATA_2_REG_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_RF_DATA_2_REG_RF_DATA_2_REG_31_DOWNTO_0_RST    0x0

__INLINE uint32_t bt_controller_rf_data_2_reg_rf_data_2_reg_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_DATA_2_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_data_2_reg_rf_data_2_reg_31_downto_0_setf(uint32_t rfdata2reg31downto0)
{
	ASSERT_ERR((((uint32_t)rfdata2reg31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_DATA_2_REG_ADDR, (uint32_t)rfdata2reg31downto0 << 0);
}

/**
 * @brief RF_DATA_3_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 rf_data3_reg_31downto0    0x0
 * </pre>
 */
#define BT_CONTROLLER_RF_DATA_3_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004438)
#define BT_CONTROLLER_RF_DATA_3_REG_OFFSET      0x00004438
#define BT_CONTROLLER_RF_DATA_3_REG_INDEX       0x0000110E
#define BT_CONTROLLER_RF_DATA_3_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rf_data_3_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_DATA_3_REG_ADDR);
}

__INLINE void bt_controller_rf_data_3_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_DATA_3_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_DATA_3_REG_RF_DATA_3_REG_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_RF_DATA_3_REG_RF_DATA_3_REG_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_DATA_3_REG_RF_DATA_3_REG_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_RF_DATA_3_REG_RF_DATA_3_REG_31_DOWNTO_0_RST    0x0

__INLINE uint32_t bt_controller_rf_data_3_reg_rf_data_3_reg_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_DATA_3_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_data_3_reg_rf_data_3_reg_31_downto_0_setf(uint32_t rfdata3reg31downto0)
{
	ASSERT_ERR((((uint32_t)rfdata3reg31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_DATA_3_REG_ADDR, (uint32_t)rfdata3reg31downto0 << 0);
}

/**
 * @brief RF_DATA_4_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 rf_data4_reg_31downto0    0x0
 * </pre>
 */
#define BT_CONTROLLER_RF_DATA_4_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000443C)
#define BT_CONTROLLER_RF_DATA_4_REG_OFFSET      0x0000443C
#define BT_CONTROLLER_RF_DATA_4_REG_INDEX       0x0000110F
#define BT_CONTROLLER_RF_DATA_4_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rf_data_4_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_DATA_4_REG_ADDR);
}

__INLINE void bt_controller_rf_data_4_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_DATA_4_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_DATA_4_REG_RF_DATA_4_REG_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_RF_DATA_4_REG_RF_DATA_4_REG_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_DATA_4_REG_RF_DATA_4_REG_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_RF_DATA_4_REG_RF_DATA_4_REG_31_DOWNTO_0_RST    0x0

__INLINE uint32_t bt_controller_rf_data_4_reg_rf_data_4_reg_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_DATA_4_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_data_4_reg_rf_data_4_reg_31_downto_0_setf(uint32_t rfdata4reg31downto0)
{
	ASSERT_ERR((((uint32_t)rfdata4reg31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_DATA_4_REG_ADDR, (uint32_t)rfdata4reg31downto0 << 0);
}

/**
 * @brief RF_DATA_5_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 rf_data5_reg_31downto0    0x0
 * </pre>
 */
#define BT_CONTROLLER_RF_DATA_5_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004440)
#define BT_CONTROLLER_RF_DATA_5_REG_OFFSET      0x00004440
#define BT_CONTROLLER_RF_DATA_5_REG_INDEX       0x00001110
#define BT_CONTROLLER_RF_DATA_5_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rf_data_5_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_DATA_5_REG_ADDR);
}

__INLINE void bt_controller_rf_data_5_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_DATA_5_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_DATA_5_REG_RF_DATA_5_REG_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_RF_DATA_5_REG_RF_DATA_5_REG_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_DATA_5_REG_RF_DATA_5_REG_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_RF_DATA_5_REG_RF_DATA_5_REG_31_DOWNTO_0_RST    0x0

__INLINE uint32_t bt_controller_rf_data_5_reg_rf_data_5_reg_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_DATA_5_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_data_5_reg_rf_data_5_reg_31_downto_0_setf(uint32_t rfdata5reg31downto0)
{
	ASSERT_ERR((((uint32_t)rfdata5reg31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_DATA_5_REG_ADDR, (uint32_t)rfdata5reg31downto0 << 0);
}

/**
 * @brief RF_ADDR_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 reserved_rf_addr1_reg_31downto0 0x0
 *    15:00 rf_addr1_reg_15downto0    0x7FFF
 * </pre>
 */
#define BT_CONTROLLER_RF_ADDR_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004444)
#define BT_CONTROLLER_RF_ADDR_1_REG_OFFSET      0x00004444
#define BT_CONTROLLER_RF_ADDR_1_REG_INDEX       0x00001111
#define BT_CONTROLLER_RF_ADDR_1_REG_RESET       0x00007FFF

__INLINE uint32_t  bt_controller_rf_addr_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_ADDR_1_REG_ADDR);
}

__INLINE void bt_controller_rf_addr_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_ADDR_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_ADDR_1_REG_RESERVED_RF_ADDR_1_REG_31_DOWNTO_0_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_RF_ADDR_1_REG_RESERVED_RF_ADDR_1_REG_31_DOWNTO_0_LSB    16
#define BT_CONTROLLER_RF_ADDR_1_REG_RESERVED_RF_ADDR_1_REG_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_RF_ADDR_1_REG_RF_ADDR_1_REG_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_ADDR_1_REG_RF_ADDR_1_REG_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_ADDR_1_REG_RF_ADDR_1_REG_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_ADDR_1_REG_RESERVED_RF_ADDR_1_REG_31_DOWNTO_0_RST    0x0
#define BT_CONTROLLER_RF_ADDR_1_REG_RF_ADDR_1_REG_15_DOWNTO_0_RST    0x7FFF

__INLINE void bt_controller_rf_addr_1_reg_pack(uint16_t reserved_rf_addr1_reg_31downto0, uint16_t rf_addr1_reg_15downto0)
{
	ASSERT_ERR((((uint32_t)reserved_rf_addr1_reg_31downto0 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)rf_addr1_reg_15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_ADDR_1_REG_ADDR,  ((uint32_t)reserved_rf_addr1_reg_31downto0 << 16) |((uint32_t)rf_addr1_reg_15downto0 << 0));
}

__INLINE void bt_controller_rf_addr_1_reg_unpack(uint16_t* reserved_rf_addr1_reg_31downto0, uint16_t* rf_addr1_reg_15downto0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADDR_1_REG_ADDR);

	*reserved_rf_addr1_reg_31downto0 = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*rf_addr1_reg_15downto0 = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t bt_controller_rf_addr_1_reg_reserved_rf_addr_1_reg_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADDR_1_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint16_t bt_controller_rf_addr_1_reg_rf_addr_1_reg_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADDR_1_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void bt_controller_rf_addr_1_reg_rf_addr_1_reg_15_downto_0_setf(uint16_t rfaddr1reg15downto0)
{
	ASSERT_ERR((((uint32_t)rfaddr1reg15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_ADDR_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RF_ADDR_1_REG_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)rfaddr1reg15downto0 <<0));
}

/**
 * @brief RF_ADDR_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 reserved_rf_addr2_reg_31downto0 0x0
 *    15:00 rf_addr2_reg_15downto0    0x7FFF
 * </pre>
 */
#define BT_CONTROLLER_RF_ADDR_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004448)
#define BT_CONTROLLER_RF_ADDR_2_REG_OFFSET      0x00004448
#define BT_CONTROLLER_RF_ADDR_2_REG_INDEX       0x00001112
#define BT_CONTROLLER_RF_ADDR_2_REG_RESET       0x00007FFF

__INLINE uint32_t  bt_controller_rf_addr_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_ADDR_2_REG_ADDR);
}

__INLINE void bt_controller_rf_addr_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_ADDR_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_ADDR_2_REG_RESERVED_RF_ADDR_2_REG_31_DOWNTO_0_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_RF_ADDR_2_REG_RESERVED_RF_ADDR_2_REG_31_DOWNTO_0_LSB    16
#define BT_CONTROLLER_RF_ADDR_2_REG_RESERVED_RF_ADDR_2_REG_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_RF_ADDR_2_REG_RF_ADDR_2_REG_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_ADDR_2_REG_RF_ADDR_2_REG_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_ADDR_2_REG_RF_ADDR_2_REG_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_ADDR_2_REG_RESERVED_RF_ADDR_2_REG_31_DOWNTO_0_RST    0x0
#define BT_CONTROLLER_RF_ADDR_2_REG_RF_ADDR_2_REG_15_DOWNTO_0_RST    0x7FFF

__INLINE void bt_controller_rf_addr_2_reg_pack(uint16_t reserved_rf_addr2_reg_31downto0, uint16_t rf_addr2_reg_15downto0)
{
	ASSERT_ERR((((uint32_t)reserved_rf_addr2_reg_31downto0 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)rf_addr2_reg_15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_ADDR_2_REG_ADDR,  ((uint32_t)reserved_rf_addr2_reg_31downto0 << 16) |((uint32_t)rf_addr2_reg_15downto0 << 0));
}

__INLINE void bt_controller_rf_addr_2_reg_unpack(uint16_t* reserved_rf_addr2_reg_31downto0, uint16_t* rf_addr2_reg_15downto0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADDR_2_REG_ADDR);

	*reserved_rf_addr2_reg_31downto0 = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*rf_addr2_reg_15downto0 = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t bt_controller_rf_addr_2_reg_reserved_rf_addr_2_reg_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADDR_2_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint16_t bt_controller_rf_addr_2_reg_rf_addr_2_reg_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADDR_2_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void bt_controller_rf_addr_2_reg_rf_addr_2_reg_15_downto_0_setf(uint16_t rfaddr2reg15downto0)
{
	ASSERT_ERR((((uint32_t)rfaddr2reg15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_ADDR_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RF_ADDR_2_REG_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)rfaddr2reg15downto0 <<0));
}

/**
 * @brief RF_ADDR_3_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 reserved_rf_addr3_reg_31downto0 0x0
 *    15:00 rf_addr3_reg_15downto0    0x7FFF
 * </pre>
 */
#define BT_CONTROLLER_RF_ADDR_3_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000444C)
#define BT_CONTROLLER_RF_ADDR_3_REG_OFFSET      0x0000444C
#define BT_CONTROLLER_RF_ADDR_3_REG_INDEX       0x00001113
#define BT_CONTROLLER_RF_ADDR_3_REG_RESET       0x00007FFF

__INLINE uint32_t  bt_controller_rf_addr_3_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_ADDR_3_REG_ADDR);
}

__INLINE void bt_controller_rf_addr_3_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_ADDR_3_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_ADDR_3_REG_RESERVED_RF_ADDR_3_REG_31_DOWNTO_0_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_RF_ADDR_3_REG_RESERVED_RF_ADDR_3_REG_31_DOWNTO_0_LSB    16
#define BT_CONTROLLER_RF_ADDR_3_REG_RESERVED_RF_ADDR_3_REG_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_RF_ADDR_3_REG_RF_ADDR_3_REG_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_ADDR_3_REG_RF_ADDR_3_REG_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_ADDR_3_REG_RF_ADDR_3_REG_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_ADDR_3_REG_RESERVED_RF_ADDR_3_REG_31_DOWNTO_0_RST    0x0
#define BT_CONTROLLER_RF_ADDR_3_REG_RF_ADDR_3_REG_15_DOWNTO_0_RST    0x7FFF

__INLINE void bt_controller_rf_addr_3_reg_pack(uint16_t reserved_rf_addr3_reg_31downto0, uint16_t rf_addr3_reg_15downto0)
{
	ASSERT_ERR((((uint32_t)reserved_rf_addr3_reg_31downto0 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)rf_addr3_reg_15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_ADDR_3_REG_ADDR,  ((uint32_t)reserved_rf_addr3_reg_31downto0 << 16) |((uint32_t)rf_addr3_reg_15downto0 << 0));
}

__INLINE void bt_controller_rf_addr_3_reg_unpack(uint16_t* reserved_rf_addr3_reg_31downto0, uint16_t* rf_addr3_reg_15downto0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADDR_3_REG_ADDR);

	*reserved_rf_addr3_reg_31downto0 = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*rf_addr3_reg_15downto0 = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t bt_controller_rf_addr_3_reg_reserved_rf_addr_3_reg_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADDR_3_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint16_t bt_controller_rf_addr_3_reg_rf_addr_3_reg_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADDR_3_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void bt_controller_rf_addr_3_reg_rf_addr_3_reg_15_downto_0_setf(uint16_t rfaddr3reg15downto0)
{
	ASSERT_ERR((((uint32_t)rfaddr3reg15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_ADDR_3_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RF_ADDR_3_REG_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)rfaddr3reg15downto0 <<0));
}

/**
 * @brief RF_ADDR_4_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 reserved_rf_addr4_reg_31downto0 0x0
 *    15:00 rf_addr4_reg_15downto0    0x7FFF
 * </pre>
 */
#define BT_CONTROLLER_RF_ADDR_4_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004450)
#define BT_CONTROLLER_RF_ADDR_4_REG_OFFSET      0x00004450
#define BT_CONTROLLER_RF_ADDR_4_REG_INDEX       0x00001114
#define BT_CONTROLLER_RF_ADDR_4_REG_RESET       0x00007FFF

__INLINE uint32_t  bt_controller_rf_addr_4_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_ADDR_4_REG_ADDR);
}

__INLINE void bt_controller_rf_addr_4_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_ADDR_4_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_ADDR_4_REG_RESERVED_RF_ADDR_4_REG_31_DOWNTO_0_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_RF_ADDR_4_REG_RESERVED_RF_ADDR_4_REG_31_DOWNTO_0_LSB    16
#define BT_CONTROLLER_RF_ADDR_4_REG_RESERVED_RF_ADDR_4_REG_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_RF_ADDR_4_REG_RF_ADDR_4_REG_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_ADDR_4_REG_RF_ADDR_4_REG_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_ADDR_4_REG_RF_ADDR_4_REG_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_ADDR_4_REG_RESERVED_RF_ADDR_4_REG_31_DOWNTO_0_RST    0x0
#define BT_CONTROLLER_RF_ADDR_4_REG_RF_ADDR_4_REG_15_DOWNTO_0_RST    0x7FFF

__INLINE void bt_controller_rf_addr_4_reg_pack(uint16_t reserved_rf_addr4_reg_31downto0, uint16_t rf_addr4_reg_15downto0)
{
	ASSERT_ERR((((uint32_t)reserved_rf_addr4_reg_31downto0 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)rf_addr4_reg_15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_ADDR_4_REG_ADDR,  ((uint32_t)reserved_rf_addr4_reg_31downto0 << 16) |((uint32_t)rf_addr4_reg_15downto0 << 0));
}

__INLINE void bt_controller_rf_addr_4_reg_unpack(uint16_t* reserved_rf_addr4_reg_31downto0, uint16_t* rf_addr4_reg_15downto0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADDR_4_REG_ADDR);

	*reserved_rf_addr4_reg_31downto0 = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*rf_addr4_reg_15downto0 = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t bt_controller_rf_addr_4_reg_reserved_rf_addr_4_reg_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADDR_4_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint16_t bt_controller_rf_addr_4_reg_rf_addr_4_reg_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADDR_4_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void bt_controller_rf_addr_4_reg_rf_addr_4_reg_15_downto_0_setf(uint16_t rfaddr4reg15downto0)
{
	ASSERT_ERR((((uint32_t)rfaddr4reg15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_ADDR_4_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RF_ADDR_4_REG_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)rfaddr4reg15downto0 <<0));
}

/**
 * @brief RF_ADDR_5_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 reserved_rf_addr5_reg_31downto0 0x0
 *    15:00 rf_addr5_reg_15downto0    0x7FFF
 * </pre>
 */
#define BT_CONTROLLER_RF_ADDR_5_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004454)
#define BT_CONTROLLER_RF_ADDR_5_REG_OFFSET      0x00004454
#define BT_CONTROLLER_RF_ADDR_5_REG_INDEX       0x00001115
#define BT_CONTROLLER_RF_ADDR_5_REG_RESET       0x00007FFF

__INLINE uint32_t  bt_controller_rf_addr_5_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_ADDR_5_REG_ADDR);
}

__INLINE void bt_controller_rf_addr_5_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_ADDR_5_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_ADDR_5_REG_RESERVED_RF_ADDR_5_REG_31_DOWNTO_0_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_RF_ADDR_5_REG_RESERVED_RF_ADDR_5_REG_31_DOWNTO_0_LSB    16
#define BT_CONTROLLER_RF_ADDR_5_REG_RESERVED_RF_ADDR_5_REG_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_RF_ADDR_5_REG_RF_ADDR_5_REG_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_RF_ADDR_5_REG_RF_ADDR_5_REG_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_ADDR_5_REG_RF_ADDR_5_REG_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_RF_ADDR_5_REG_RESERVED_RF_ADDR_5_REG_31_DOWNTO_0_RST    0x0
#define BT_CONTROLLER_RF_ADDR_5_REG_RF_ADDR_5_REG_15_DOWNTO_0_RST    0x7FFF

__INLINE void bt_controller_rf_addr_5_reg_pack(uint16_t reserved_rf_addr5_reg_31downto0, uint16_t rf_addr5_reg_15downto0)
{
	ASSERT_ERR((((uint32_t)reserved_rf_addr5_reg_31downto0 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)rf_addr5_reg_15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_ADDR_5_REG_ADDR,  ((uint32_t)reserved_rf_addr5_reg_31downto0 << 16) |((uint32_t)rf_addr5_reg_15downto0 << 0));
}

__INLINE void bt_controller_rf_addr_5_reg_unpack(uint16_t* reserved_rf_addr5_reg_31downto0, uint16_t* rf_addr5_reg_15downto0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADDR_5_REG_ADDR);

	*reserved_rf_addr5_reg_31downto0 = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*rf_addr5_reg_15downto0 = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t bt_controller_rf_addr_5_reg_reserved_rf_addr_5_reg_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADDR_5_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint16_t bt_controller_rf_addr_5_reg_rf_addr_5_reg_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADDR_5_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void bt_controller_rf_addr_5_reg_rf_addr_5_reg_15_downto_0_setf(uint16_t rfaddr5reg15downto0)
{
	ASSERT_ERR((((uint32_t)rfaddr5reg15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_ADDR_5_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RF_ADDR_5_REG_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)rfaddr5reg15downto0 <<0));
}

/**
 * @brief RF_ADC_DAC_DEL_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 rf_adc_dac_del_reg_31downto0 0x776d_6d73
 * </pre>
 */
#define BT_CONTROLLER_RF_ADC_DAC_DEL_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004458)
#define BT_CONTROLLER_RF_ADC_DAC_DEL_REG_OFFSET      0x00004458
#define BT_CONTROLLER_RF_ADC_DAC_DEL_REG_INDEX       0x00001116
#define BT_CONTROLLER_RF_ADC_DAC_DEL_REG_RESET       0x776D6D73

__INLINE uint32_t  bt_controller_rf_adc_dac_del_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_ADC_DAC_DEL_REG_ADDR);
}

__INLINE void bt_controller_rf_adc_dac_del_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_ADC_DAC_DEL_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_ADC_DAC_DEL_REG_RF_ADC_DAC_DEL_REG_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_RF_ADC_DAC_DEL_REG_RF_ADC_DAC_DEL_REG_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_RF_ADC_DAC_DEL_REG_RF_ADC_DAC_DEL_REG_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_RF_ADC_DAC_DEL_REG_RF_ADC_DAC_DEL_REG_31_DOWNTO_0_RST    0x776d_6d73

__INLINE uint32_t bt_controller_rf_adc_dac_del_reg_rf_adc_dac_del_reg_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_ADC_DAC_DEL_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_rf_adc_dac_del_reg_rf_adc_dac_del_reg_31_downto_0_setf(uint32_t rfadcdacdelreg31downto0)
{
	ASSERT_ERR((((uint32_t)rfadcdacdelreg31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_ADC_DAC_DEL_REG_ADDR, (uint32_t)rfadcdacdelreg31downto0 << 0);
}

/**
 * @brief RF_SLL_PA_CONFIG_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 rf_sll_pa_config_31_downto_16 0x0
 *    15:07 Step_Size                 0x002
 *    06:00 Final_index               0x12
 * </pre>
 */
#define BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000465C)
#define BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_OFFSET      0x0000465C
#define BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_INDEX       0x00001197
#define BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_RESET       0x00000112

__INLINE uint32_t  bt_controller_rf_sll_pa_config_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_ADDR);
}

__INLINE void bt_controller_rf_sll_pa_config_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_RF_SLL_PA_CONFIG_31_DOWNTO_16_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_RF_SLL_PA_CONFIG_31_DOWNTO_16_LSB    16
#define BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_RF_SLL_PA_CONFIG_31_DOWNTO_16_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_STEP_SIZE_MASK    ((uint32_t)0x0000FF80)
#define BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_STEP_SIZE_LSB    7
#define BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_STEP_SIZE_WIDTH    ((uint32_t)0x00000009)
#define BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_FINAL_INDEX_MASK    ((uint32_t)0x0000007F)
#define BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_FINAL_INDEX_LSB    0
#define BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_FINAL_INDEX_WIDTH    ((uint32_t)0x00000007)

#define BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_RF_SLL_PA_CONFIG_31_DOWNTO_16_RST    0x0
#define BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_STEP_SIZE_RST    0x002
#define BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_FINAL_INDEX_RST    0x12

__INLINE void bt_controller_rf_sll_pa_config_reg_pack(uint16_t rf_sll_pa_config_31_downto_16, uint16_t step_size, uint8_t final_index)
{
	ASSERT_ERR((((uint32_t)rf_sll_pa_config_31_downto_16 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)step_size << 7) & ~((uint32_t)0x0000FF80)) == 0);
	ASSERT_ERR((((uint32_t)final_index << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_ADDR,  ((uint32_t)rf_sll_pa_config_31_downto_16 << 16) |((uint32_t)step_size << 7) |((uint32_t)final_index << 0));
}

__INLINE void bt_controller_rf_sll_pa_config_reg_unpack(uint16_t* rf_sll_pa_config_31_downto_16, uint16_t* step_size, uint8_t* final_index)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_ADDR);

	*rf_sll_pa_config_31_downto_16 = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*step_size = (localVal & ((uint32_t)0x0000FF80)) >>  7;
	*final_index = (localVal & ((uint32_t)0x0000007F)) >>  0;
}

__INLINE uint16_t bt_controller_rf_sll_pa_config_reg_rf_sll_pa_config_31_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint16_t bt_controller_rf_sll_pa_config_reg_step_size_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FF80)) >> 7);
}
__INLINE void bt_controller_rf_sll_pa_config_reg_step_size_setf(uint16_t stepsize)
{
	ASSERT_ERR((((uint32_t)stepsize << 7) & ~((uint32_t)0x0000FF80)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_ADDR) & ~((uint32_t)0x0000FF80)) | ((uint32_t)stepsize <<7));
}
__INLINE uint8_t bt_controller_rf_sll_pa_config_reg_final_index_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000007F)) >> 0);
}
__INLINE void bt_controller_rf_sll_pa_config_reg_final_index_setf(uint8_t finalindex)
{
	ASSERT_ERR((((uint32_t)finalindex << 0) & ~((uint32_t)0x0000007F)) == 0);
	REG_PL_WR(BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RF_SLL_PA_CONFIG_REG_ADDR) & ~((uint32_t)0x0000007F)) | ((uint32_t)finalindex <<0));
}

/**
 * @brief TIMER_0_LOAD_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer0_load_reg_Terminal_count_31_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_TIMER_0_LOAD_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004800)
#define BT_CONTROLLER_TIMER_0_LOAD_REG_OFFSET      0x00004800
#define BT_CONTROLLER_TIMER_0_LOAD_REG_INDEX       0x00001200
#define BT_CONTROLLER_TIMER_0_LOAD_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_timer_0_load_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_0_LOAD_REG_ADDR);
}

__INLINE void bt_controller_timer_0_load_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_0_LOAD_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_0_LOAD_REG_TIMER_0_LOAD_REG_TERMINAL_COUNT_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TIMER_0_LOAD_REG_TIMER_0_LOAD_REG_TERMINAL_COUNT_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TIMER_0_LOAD_REG_TIMER_0_LOAD_REG_TERMINAL_COUNT_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TIMER_0_LOAD_REG_TIMER_0_LOAD_REG_TERMINAL_COUNT_31_DOWNTO_0_RST    0x0

__INLINE uint32_t bt_controller_timer_0_load_reg_timer_0_load_reg_terminal_count_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_0_LOAD_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_timer_0_load_reg_timer_0_load_reg_terminal_count_31_downto_0_setf(uint32_t timer0loadregterminalcount31downto0)
{
	ASSERT_ERR((((uint32_t)timer0loadregterminalcount31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_0_LOAD_REG_ADDR, (uint32_t)timer0loadregterminalcount31downto0 << 0);
}

/**
 * @brief TIMER_0_COUNT_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer0_count_reg_Present_count_31_downto_0 0xFFFFFFFF
 * </pre>
 */
#define BT_CONTROLLER_TIMER_0_COUNT_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004804)
#define BT_CONTROLLER_TIMER_0_COUNT_REG_OFFSET      0x00004804
#define BT_CONTROLLER_TIMER_0_COUNT_REG_INDEX       0x00001201
#define BT_CONTROLLER_TIMER_0_COUNT_REG_RESET       0xFFFFFFFF

__INLINE uint32_t  bt_controller_timer_0_count_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_0_COUNT_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_TIMER_0_COUNT_REG_TIMER_0_COUNT_REG_PRESENT_COUNT_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TIMER_0_COUNT_REG_TIMER_0_COUNT_REG_PRESENT_COUNT_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TIMER_0_COUNT_REG_TIMER_0_COUNT_REG_PRESENT_COUNT_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TIMER_0_COUNT_REG_TIMER_0_COUNT_REG_PRESENT_COUNT_31_DOWNTO_0_RST    0xFFFFFFFF

__INLINE uint32_t bt_controller_timer_0_count_reg_timer_0_count_reg_present_count_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_0_COUNT_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief TIMER_0_CONTROL_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 timer0_control_reg_16_bits_are_reserved 0x0
 *    15:08 timer0_Prescalar_value    0x0
 *    07:03 timer0_control_reg_5_bits_are_reserved 0x0
 *    02    timer0_UP_or_Down_Counting 1              
 *    01    timer0_Oneshot_or_Cyclic  0              
 *    00    timer0_timer_enable       0              
 * </pre>
 */
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004808)
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_OFFSET      0x00004808
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_INDEX       0x00001202
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_RESET       0x00000004

__INLINE uint32_t  bt_controller_timer_0_control_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR);
}

__INLINE void bt_controller_timer_0_control_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_CONTROL_REG_16_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_CONTROL_REG_16_BITS_ARE_RESERVED_LSB    16
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_CONTROL_REG_16_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_PRESCALAR_VALUE_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_PRESCALAR_VALUE_LSB    8
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_PRESCALAR_VALUE_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_CONTROL_REG_5_BITS_ARE_RESERVED_MASK    ((uint32_t)0x000000F8)
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_CONTROL_REG_5_BITS_ARE_RESERVED_LSB    3
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_CONTROL_REG_5_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_UP_OR_DOWN_COUNTING_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_UP_OR_DOWN_COUNTING_POS    2
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_ONESHOT_OR_CYCLIC_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_ONESHOT_OR_CYCLIC_POS    1
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_TIMER_ENABLE_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_TIMER_ENABLE_POS    0

#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_CONTROL_REG_16_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_PRESCALAR_VALUE_RST    0x0
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_CONTROL_REG_5_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_UP_OR_DOWN_COUNTING_RST    0x1
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_ONESHOT_OR_CYCLIC_RST    0x0
#define BT_CONTROLLER_TIMER_0_CONTROL_REG_TIMER_0_TIMER_ENABLE_RST    0x0

__INLINE void bt_controller_timer_0_control_reg_pack(uint16_t timer0_control_reg_16_bits_are_reserved, uint8_t timer0_prescalar_value, uint8_t timer0_control_reg_5_bits_are_reserved, uint8_t timer0_up_or_down_counting, uint8_t timer0_oneshot_or_cyclic, uint8_t timer0_timer_enable)
{
	ASSERT_ERR((((uint32_t)timer0_control_reg_16_bits_are_reserved << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)timer0_prescalar_value << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)timer0_control_reg_5_bits_are_reserved << 3) & ~((uint32_t)0x000000F8)) == 0);
	ASSERT_ERR((((uint32_t)timer0_up_or_down_counting << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)timer0_oneshot_or_cyclic << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)timer0_timer_enable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR,  ((uint32_t)timer0_control_reg_16_bits_are_reserved << 16) |((uint32_t)timer0_prescalar_value << 8) |((uint32_t)timer0_control_reg_5_bits_are_reserved << 3) |((uint32_t)timer0_up_or_down_counting << 2) |((uint32_t)timer0_oneshot_or_cyclic << 1) |((uint32_t)timer0_timer_enable << 0));
}

__INLINE void bt_controller_timer_0_control_reg_unpack(uint16_t* timer0_control_reg_16_bits_are_reserved, uint8_t* timer0_prescalar_value, uint8_t* timer0_control_reg_5_bits_are_reserved, uint8_t* timer0_up_or_down_counting, uint8_t* timer0_oneshot_or_cyclic, uint8_t* timer0_timer_enable)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR);

	*timer0_control_reg_16_bits_are_reserved = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*timer0_prescalar_value = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*timer0_control_reg_5_bits_are_reserved = (localVal & ((uint32_t)0x000000F8)) >>  3;
	*timer0_up_or_down_counting = (localVal & ((uint32_t)0x00000004)) >>  2;
	*timer0_oneshot_or_cyclic = (localVal & ((uint32_t)0x00000002)) >>  1;
	*timer0_timer_enable = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_timer_0_control_reg_timer_0_control_reg_16_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t bt_controller_timer_0_control_reg_timer_0_prescalar_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_timer_0_control_reg_timer_0_prescalar_value_setf(uint8_t timer0prescalarvalue)
{
	ASSERT_ERR((((uint32_t)timer0prescalarvalue << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)timer0prescalarvalue <<8));
}
__INLINE uint8_t bt_controller_timer_0_control_reg_timer_0_control_reg_5_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F8)) >> 3);
}
__INLINE uint8_t bt_controller_timer_0_control_reg_timer_0_up_or_down_counting_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_timer_0_control_reg_timer_0_up_or_down_counting_setf(uint8_t timer0upordowncounting)
{
	ASSERT_ERR((((uint32_t)timer0upordowncounting << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)timer0upordowncounting <<2));
}
__INLINE uint8_t bt_controller_timer_0_control_reg_timer_0_oneshot_or_cyclic_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_timer_0_control_reg_timer_0_oneshot_or_cyclic_setf(uint8_t timer0oneshotorcyclic)
{
	ASSERT_ERR((((uint32_t)timer0oneshotorcyclic << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)timer0oneshotorcyclic <<1));
}
__INLINE uint8_t bt_controller_timer_0_control_reg_timer_0_timer_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_timer_0_control_reg_timer_0_timer_enable_setf(uint8_t timer0timerenable)
{
	ASSERT_ERR((((uint32_t)timer0timerenable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_0_CONTROL_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timer0timerenable <<0));
}

/**
 * @brief TIMER_0_STATUS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:02 timer0_status_reg_30_bits_are_reserved 0x0
 *    01    timer0_Timer_running      0              
 *    00    timer0_Timer_expired      0              
 * </pre>
 */
#define BT_CONTROLLER_TIMER_0_STATUS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000480C)
#define BT_CONTROLLER_TIMER_0_STATUS_REG_OFFSET      0x0000480C
#define BT_CONTROLLER_TIMER_0_STATUS_REG_INDEX       0x00001203
#define BT_CONTROLLER_TIMER_0_STATUS_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_timer_0_status_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_0_STATUS_REG_ADDR);
}

__INLINE void bt_controller_timer_0_status_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_0_STATUS_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_0_STATUS_REG_TIMER_0_STATUS_REG_30_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFFFFC)
#define BT_CONTROLLER_TIMER_0_STATUS_REG_TIMER_0_STATUS_REG_30_BITS_ARE_RESERVED_LSB    2
#define BT_CONTROLLER_TIMER_0_STATUS_REG_TIMER_0_STATUS_REG_30_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000001E)
#define BT_CONTROLLER_TIMER_0_STATUS_REG_TIMER_0_TIMER_RUNNING_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TIMER_0_STATUS_REG_TIMER_0_TIMER_RUNNING_POS    1
#define BT_CONTROLLER_TIMER_0_STATUS_REG_TIMER_0_TIMER_EXPIRED_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TIMER_0_STATUS_REG_TIMER_0_TIMER_EXPIRED_POS    0

#define BT_CONTROLLER_TIMER_0_STATUS_REG_TIMER_0_STATUS_REG_30_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_0_STATUS_REG_TIMER_0_TIMER_RUNNING_RST    0x0
#define BT_CONTROLLER_TIMER_0_STATUS_REG_TIMER_0_TIMER_EXPIRED_RST    0x0

__INLINE void bt_controller_timer_0_status_reg_pack(uint32_t timer0_status_reg_30_bits_are_reserved, uint8_t timer0_timer_running, uint8_t timer0_timer_expired)
{
	ASSERT_ERR((((uint32_t)timer0_status_reg_30_bits_are_reserved << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	ASSERT_ERR((((uint32_t)timer0_timer_running << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)timer0_timer_expired << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_0_STATUS_REG_ADDR,  ((uint32_t)timer0_status_reg_30_bits_are_reserved << 2) |((uint32_t)timer0_timer_running << 1) |((uint32_t)timer0_timer_expired << 0));
}

__INLINE void bt_controller_timer_0_status_reg_unpack(uint32_t* timer0_status_reg_30_bits_are_reserved, uint8_t* timer0_timer_running, uint8_t* timer0_timer_expired)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_0_STATUS_REG_ADDR);

	*timer0_status_reg_30_bits_are_reserved = (localVal & ((uint32_t)0xFFFFFFFC)) >>  2;
	*timer0_timer_running = (localVal & ((uint32_t)0x00000002)) >>  1;
	*timer0_timer_expired = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t bt_controller_timer_0_status_reg_timer_0_status_reg_30_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_0_STATUS_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFFC)) >> 2);
}
__INLINE uint8_t bt_controller_timer_0_status_reg_timer_0_timer_running_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_0_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_timer_0_status_reg_timer_0_timer_running_setf(uint8_t timer0timerrunning)
{
	ASSERT_ERR((((uint32_t)timer0timerrunning << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_0_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_0_STATUS_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)timer0timerrunning <<1));
}
__INLINE uint8_t bt_controller_timer_0_status_reg_timer_0_timer_expired_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_0_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_timer_0_status_reg_timer_0_timer_expired_setf(uint8_t timer0timerexpired)
{
	ASSERT_ERR((((uint32_t)timer0timerexpired << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_0_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_0_STATUS_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timer0timerexpired <<0));
}

/**
 * @brief TIMER_1_LOAD_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer1_Terminal_count_31_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_TIMER_1_LOAD_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004810)
#define BT_CONTROLLER_TIMER_1_LOAD_REG_OFFSET      0x00004810
#define BT_CONTROLLER_TIMER_1_LOAD_REG_INDEX       0x00001204
#define BT_CONTROLLER_TIMER_1_LOAD_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_timer_1_load_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_1_LOAD_REG_ADDR);
}

__INLINE void bt_controller_timer_1_load_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_1_LOAD_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_1_LOAD_REG_TIMER_1_TERMINAL_COUNT_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TIMER_1_LOAD_REG_TIMER_1_TERMINAL_COUNT_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TIMER_1_LOAD_REG_TIMER_1_TERMINAL_COUNT_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TIMER_1_LOAD_REG_TIMER_1_TERMINAL_COUNT_31_DOWNTO_0_RST    0x0

__INLINE uint32_t bt_controller_timer_1_load_reg_timer_1_terminal_count_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_1_LOAD_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_timer_1_load_reg_timer_1_terminal_count_31_downto_0_setf(uint32_t timer1terminalcount31downto0)
{
	ASSERT_ERR((((uint32_t)timer1terminalcount31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_1_LOAD_REG_ADDR, (uint32_t)timer1terminalcount31downto0 << 0);
}

/**
 * @brief TIMER_1_COUNT_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer1_Present_count_31_downto_0 0xFFFFFFFF
 * </pre>
 */
#define BT_CONTROLLER_TIMER_1_COUNT_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004814)
#define BT_CONTROLLER_TIMER_1_COUNT_REG_OFFSET      0x00004814
#define BT_CONTROLLER_TIMER_1_COUNT_REG_INDEX       0x00001205
#define BT_CONTROLLER_TIMER_1_COUNT_REG_RESET       0xFFFFFFFF

__INLINE uint32_t  bt_controller_timer_1_count_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_1_COUNT_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_TIMER_1_COUNT_REG_TIMER_1_PRESENT_COUNT_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TIMER_1_COUNT_REG_TIMER_1_PRESENT_COUNT_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TIMER_1_COUNT_REG_TIMER_1_PRESENT_COUNT_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TIMER_1_COUNT_REG_TIMER_1_PRESENT_COUNT_31_DOWNTO_0_RST    0xFFFFFFFF

__INLINE uint32_t bt_controller_timer_1_count_reg_timer_1_present_count_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_1_COUNT_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief TIMER_1_CONTROL_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 timer1_control_reg_16_bits_are_reserved 0x0
 *    15:08 timer1_Prescalar_value    0x0
 *    07:03 timer1_control_reg_5bits_are_reserved 0x0
 *    02    timer1_UP_or_Down_Counting 1              
 *    01    timer1_Oneshot_or_Cyclic  0              
 *    00    timer1_timer_enable       0              
 * </pre>
 */
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004818)
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_OFFSET      0x00004818
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_INDEX       0x00001206
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_RESET       0x00000004

__INLINE uint32_t  bt_controller_timer_1_control_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR);
}

__INLINE void bt_controller_timer_1_control_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_CONTROL_REG_16_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_CONTROL_REG_16_BITS_ARE_RESERVED_LSB    16
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_CONTROL_REG_16_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_PRESCALAR_VALUE_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_PRESCALAR_VALUE_LSB    8
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_PRESCALAR_VALUE_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_CONTROL_REG_5_BITS_ARE_RESERVED_MASK    ((uint32_t)0x000000F8)
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_CONTROL_REG_5_BITS_ARE_RESERVED_LSB    3
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_CONTROL_REG_5_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_UP_OR_DOWN_COUNTING_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_UP_OR_DOWN_COUNTING_POS    2
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_ONESHOT_OR_CYCLIC_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_ONESHOT_OR_CYCLIC_POS    1
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_TIMER_ENABLE_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_TIMER_ENABLE_POS    0

#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_CONTROL_REG_16_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_PRESCALAR_VALUE_RST    0x0
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_CONTROL_REG_5_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_UP_OR_DOWN_COUNTING_RST    0x1
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_ONESHOT_OR_CYCLIC_RST    0x0
#define BT_CONTROLLER_TIMER_1_CONTROL_REG_TIMER_1_TIMER_ENABLE_RST    0x0

__INLINE void bt_controller_timer_1_control_reg_pack(uint16_t timer1_control_reg_16_bits_are_reserved, uint8_t timer1_prescalar_value, uint8_t timer1_control_reg_5bits_are_reserved, uint8_t timer1_up_or_down_counting, uint8_t timer1_oneshot_or_cyclic, uint8_t timer1_timer_enable)
{
	ASSERT_ERR((((uint32_t)timer1_control_reg_16_bits_are_reserved << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)timer1_prescalar_value << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)timer1_control_reg_5bits_are_reserved << 3) & ~((uint32_t)0x000000F8)) == 0);
	ASSERT_ERR((((uint32_t)timer1_up_or_down_counting << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)timer1_oneshot_or_cyclic << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)timer1_timer_enable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR,  ((uint32_t)timer1_control_reg_16_bits_are_reserved << 16) |((uint32_t)timer1_prescalar_value << 8) |((uint32_t)timer1_control_reg_5bits_are_reserved << 3) |((uint32_t)timer1_up_or_down_counting << 2) |((uint32_t)timer1_oneshot_or_cyclic << 1) |((uint32_t)timer1_timer_enable << 0));
}

__INLINE void bt_controller_timer_1_control_reg_unpack(uint16_t* timer1_control_reg_16_bits_are_reserved, uint8_t* timer1_prescalar_value, uint8_t* timer1_control_reg_5bits_are_reserved, uint8_t* timer1_up_or_down_counting, uint8_t* timer1_oneshot_or_cyclic, uint8_t* timer1_timer_enable)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR);

	*timer1_control_reg_16_bits_are_reserved = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*timer1_prescalar_value = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*timer1_control_reg_5bits_are_reserved = (localVal & ((uint32_t)0x000000F8)) >>  3;
	*timer1_up_or_down_counting = (localVal & ((uint32_t)0x00000004)) >>  2;
	*timer1_oneshot_or_cyclic = (localVal & ((uint32_t)0x00000002)) >>  1;
	*timer1_timer_enable = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_timer_1_control_reg_timer_1_control_reg_16_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t bt_controller_timer_1_control_reg_timer_1_prescalar_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_timer_1_control_reg_timer_1_prescalar_value_setf(uint8_t timer1prescalarvalue)
{
	ASSERT_ERR((((uint32_t)timer1prescalarvalue << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)timer1prescalarvalue <<8));
}
__INLINE uint8_t bt_controller_timer_1_control_reg_timer_1_control_reg_5_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F8)) >> 3);
}
__INLINE uint8_t bt_controller_timer_1_control_reg_timer_1_up_or_down_counting_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_timer_1_control_reg_timer_1_up_or_down_counting_setf(uint8_t timer1upordowncounting)
{
	ASSERT_ERR((((uint32_t)timer1upordowncounting << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)timer1upordowncounting <<2));
}
__INLINE uint8_t bt_controller_timer_1_control_reg_timer_1_oneshot_or_cyclic_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_timer_1_control_reg_timer_1_oneshot_or_cyclic_setf(uint8_t timer1oneshotorcyclic)
{
	ASSERT_ERR((((uint32_t)timer1oneshotorcyclic << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)timer1oneshotorcyclic <<1));
}
__INLINE uint8_t bt_controller_timer_1_control_reg_timer_1_timer_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_timer_1_control_reg_timer_1_timer_enable_setf(uint8_t timer1timerenable)
{
	ASSERT_ERR((((uint32_t)timer1timerenable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_1_CONTROL_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timer1timerenable <<0));
}

/**
 * @brief TIMER_1_STATUS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:02 timer1_status_reg_30_bits_are_reserved 0x0
 *    01    timer1_Timer_running      0              
 *    00    timer1_Timer_expired      0              
 * </pre>
 */
#define BT_CONTROLLER_TIMER_1_STATUS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000481C)
#define BT_CONTROLLER_TIMER_1_STATUS_REG_OFFSET      0x0000481C
#define BT_CONTROLLER_TIMER_1_STATUS_REG_INDEX       0x00001207
#define BT_CONTROLLER_TIMER_1_STATUS_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_timer_1_status_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_1_STATUS_REG_ADDR);
}

__INLINE void bt_controller_timer_1_status_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_1_STATUS_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_1_STATUS_REG_TIMER_1_STATUS_REG_30_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFFFFC)
#define BT_CONTROLLER_TIMER_1_STATUS_REG_TIMER_1_STATUS_REG_30_BITS_ARE_RESERVED_LSB    2
#define BT_CONTROLLER_TIMER_1_STATUS_REG_TIMER_1_STATUS_REG_30_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000001E)
#define BT_CONTROLLER_TIMER_1_STATUS_REG_TIMER_1_TIMER_RUNNING_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TIMER_1_STATUS_REG_TIMER_1_TIMER_RUNNING_POS    1
#define BT_CONTROLLER_TIMER_1_STATUS_REG_TIMER_1_TIMER_EXPIRED_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TIMER_1_STATUS_REG_TIMER_1_TIMER_EXPIRED_POS    0

#define BT_CONTROLLER_TIMER_1_STATUS_REG_TIMER_1_STATUS_REG_30_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_1_STATUS_REG_TIMER_1_TIMER_RUNNING_RST    0x0
#define BT_CONTROLLER_TIMER_1_STATUS_REG_TIMER_1_TIMER_EXPIRED_RST    0x0

__INLINE void bt_controller_timer_1_status_reg_pack(uint32_t timer1_status_reg_30_bits_are_reserved, uint8_t timer1_timer_running, uint8_t timer1_timer_expired)
{
	ASSERT_ERR((((uint32_t)timer1_status_reg_30_bits_are_reserved << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	ASSERT_ERR((((uint32_t)timer1_timer_running << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)timer1_timer_expired << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_1_STATUS_REG_ADDR,  ((uint32_t)timer1_status_reg_30_bits_are_reserved << 2) |((uint32_t)timer1_timer_running << 1) |((uint32_t)timer1_timer_expired << 0));
}

__INLINE void bt_controller_timer_1_status_reg_unpack(uint32_t* timer1_status_reg_30_bits_are_reserved, uint8_t* timer1_timer_running, uint8_t* timer1_timer_expired)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_1_STATUS_REG_ADDR);

	*timer1_status_reg_30_bits_are_reserved = (localVal & ((uint32_t)0xFFFFFFFC)) >>  2;
	*timer1_timer_running = (localVal & ((uint32_t)0x00000002)) >>  1;
	*timer1_timer_expired = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t bt_controller_timer_1_status_reg_timer_1_status_reg_30_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_1_STATUS_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFFC)) >> 2);
}
__INLINE uint8_t bt_controller_timer_1_status_reg_timer_1_timer_running_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_1_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_timer_1_status_reg_timer_1_timer_running_setf(uint8_t timer1timerrunning)
{
	ASSERT_ERR((((uint32_t)timer1timerrunning << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_1_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_1_STATUS_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)timer1timerrunning <<1));
}
__INLINE uint8_t bt_controller_timer_1_status_reg_timer_1_timer_expired_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_1_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_timer_1_status_reg_timer_1_timer_expired_setf(uint8_t timer1timerexpired)
{
	ASSERT_ERR((((uint32_t)timer1timerexpired << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_1_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_1_STATUS_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timer1timerexpired <<0));
}

/**
 * @brief TIMER_2_LOAD_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer2_Terminal_count_31_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_TIMER_2_LOAD_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004820)
#define BT_CONTROLLER_TIMER_2_LOAD_REG_OFFSET      0x00004820
#define BT_CONTROLLER_TIMER_2_LOAD_REG_INDEX       0x00001208
#define BT_CONTROLLER_TIMER_2_LOAD_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_timer_2_load_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_2_LOAD_REG_ADDR);
}

__INLINE void bt_controller_timer_2_load_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_2_LOAD_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_2_LOAD_REG_TIMER_2_TERMINAL_COUNT_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TIMER_2_LOAD_REG_TIMER_2_TERMINAL_COUNT_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TIMER_2_LOAD_REG_TIMER_2_TERMINAL_COUNT_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TIMER_2_LOAD_REG_TIMER_2_TERMINAL_COUNT_31_DOWNTO_0_RST    0x0

__INLINE uint32_t bt_controller_timer_2_load_reg_timer_2_terminal_count_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_2_LOAD_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_timer_2_load_reg_timer_2_terminal_count_31_downto_0_setf(uint32_t timer2terminalcount31downto0)
{
	ASSERT_ERR((((uint32_t)timer2terminalcount31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_2_LOAD_REG_ADDR, (uint32_t)timer2terminalcount31downto0 << 0);
}

/**
 * @brief TIMER_2_COUNT_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer2_Present_count_31_downto_0 0xFFFFFFFF
 * </pre>
 */
#define BT_CONTROLLER_TIMER_2_COUNT_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004824)
#define BT_CONTROLLER_TIMER_2_COUNT_REG_OFFSET      0x00004824
#define BT_CONTROLLER_TIMER_2_COUNT_REG_INDEX       0x00001209
#define BT_CONTROLLER_TIMER_2_COUNT_REG_RESET       0xFFFFFFFF

__INLINE uint32_t  bt_controller_timer_2_count_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_2_COUNT_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_TIMER_2_COUNT_REG_TIMER_2_PRESENT_COUNT_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TIMER_2_COUNT_REG_TIMER_2_PRESENT_COUNT_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TIMER_2_COUNT_REG_TIMER_2_PRESENT_COUNT_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TIMER_2_COUNT_REG_TIMER_2_PRESENT_COUNT_31_DOWNTO_0_RST    0xFFFFFFFF

__INLINE uint32_t bt_controller_timer_2_count_reg_timer_2_present_count_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_2_COUNT_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief TIMER_2_CONTROL_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 timer2_control_reg_16_bits_are_reserved 0x0
 *    15:08 timer2_Prescalar_value    0x0
 *    07:03 timer2_control_reg_5_bits_are_reserved 0x0
 *    02    timer2_UP_or_Down_Counting 1              
 *    01    timer2_Oneshot_or_Cyclic  0              
 *    00    timer2_timer_enable       0              
 * </pre>
 */
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004828)
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_OFFSET      0x00004828
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_INDEX       0x0000120A
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_RESET       0x00000004

__INLINE uint32_t  bt_controller_timer_2_control_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR);
}

__INLINE void bt_controller_timer_2_control_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_CONTROL_REG_16_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_CONTROL_REG_16_BITS_ARE_RESERVED_LSB    16
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_CONTROL_REG_16_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_PRESCALAR_VALUE_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_PRESCALAR_VALUE_LSB    8
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_PRESCALAR_VALUE_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_CONTROL_REG_5_BITS_ARE_RESERVED_MASK    ((uint32_t)0x000000F8)
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_CONTROL_REG_5_BITS_ARE_RESERVED_LSB    3
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_CONTROL_REG_5_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_UP_OR_DOWN_COUNTING_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_UP_OR_DOWN_COUNTING_POS    2
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_ONESHOT_OR_CYCLIC_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_ONESHOT_OR_CYCLIC_POS    1
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_TIMER_ENABLE_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_TIMER_ENABLE_POS    0

#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_CONTROL_REG_16_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_PRESCALAR_VALUE_RST    0x0
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_CONTROL_REG_5_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_UP_OR_DOWN_COUNTING_RST    0x1
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_ONESHOT_OR_CYCLIC_RST    0x0
#define BT_CONTROLLER_TIMER_2_CONTROL_REG_TIMER_2_TIMER_ENABLE_RST    0x0

__INLINE void bt_controller_timer_2_control_reg_pack(uint16_t timer2_control_reg_16_bits_are_reserved, uint8_t timer2_prescalar_value, uint8_t timer2_control_reg_5_bits_are_reserved, uint8_t timer2_up_or_down_counting, uint8_t timer2_oneshot_or_cyclic, uint8_t timer2_timer_enable)
{
	ASSERT_ERR((((uint32_t)timer2_control_reg_16_bits_are_reserved << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)timer2_prescalar_value << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)timer2_control_reg_5_bits_are_reserved << 3) & ~((uint32_t)0x000000F8)) == 0);
	ASSERT_ERR((((uint32_t)timer2_up_or_down_counting << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)timer2_oneshot_or_cyclic << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)timer2_timer_enable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR,  ((uint32_t)timer2_control_reg_16_bits_are_reserved << 16) |((uint32_t)timer2_prescalar_value << 8) |((uint32_t)timer2_control_reg_5_bits_are_reserved << 3) |((uint32_t)timer2_up_or_down_counting << 2) |((uint32_t)timer2_oneshot_or_cyclic << 1) |((uint32_t)timer2_timer_enable << 0));
}

__INLINE void bt_controller_timer_2_control_reg_unpack(uint16_t* timer2_control_reg_16_bits_are_reserved, uint8_t* timer2_prescalar_value, uint8_t* timer2_control_reg_5_bits_are_reserved, uint8_t* timer2_up_or_down_counting, uint8_t* timer2_oneshot_or_cyclic, uint8_t* timer2_timer_enable)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR);

	*timer2_control_reg_16_bits_are_reserved = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*timer2_prescalar_value = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*timer2_control_reg_5_bits_are_reserved = (localVal & ((uint32_t)0x000000F8)) >>  3;
	*timer2_up_or_down_counting = (localVal & ((uint32_t)0x00000004)) >>  2;
	*timer2_oneshot_or_cyclic = (localVal & ((uint32_t)0x00000002)) >>  1;
	*timer2_timer_enable = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_timer_2_control_reg_timer_2_control_reg_16_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t bt_controller_timer_2_control_reg_timer_2_prescalar_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_timer_2_control_reg_timer_2_prescalar_value_setf(uint8_t timer2prescalarvalue)
{
	ASSERT_ERR((((uint32_t)timer2prescalarvalue << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)timer2prescalarvalue <<8));
}
__INLINE uint8_t bt_controller_timer_2_control_reg_timer_2_control_reg_5_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F8)) >> 3);
}
__INLINE uint8_t bt_controller_timer_2_control_reg_timer_2_up_or_down_counting_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_timer_2_control_reg_timer_2_up_or_down_counting_setf(uint8_t timer2upordowncounting)
{
	ASSERT_ERR((((uint32_t)timer2upordowncounting << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)timer2upordowncounting <<2));
}
__INLINE uint8_t bt_controller_timer_2_control_reg_timer_2_oneshot_or_cyclic_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_timer_2_control_reg_timer_2_oneshot_or_cyclic_setf(uint8_t timer2oneshotorcyclic)
{
	ASSERT_ERR((((uint32_t)timer2oneshotorcyclic << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)timer2oneshotorcyclic <<1));
}
__INLINE uint8_t bt_controller_timer_2_control_reg_timer_2_timer_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_timer_2_control_reg_timer_2_timer_enable_setf(uint8_t timer2timerenable)
{
	ASSERT_ERR((((uint32_t)timer2timerenable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_2_CONTROL_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timer2timerenable <<0));
}

/**
 * @brief TIMER_2_STATUS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:02 timer2_stat_reg_30bits_are_reserved 0x0
 *    01    timer2_Timer_running      0              
 *    00    timer2_Timer_expired      0              
 * </pre>
 */
#define BT_CONTROLLER_TIMER_2_STATUS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000482C)
#define BT_CONTROLLER_TIMER_2_STATUS_REG_OFFSET      0x0000482C
#define BT_CONTROLLER_TIMER_2_STATUS_REG_INDEX       0x0000120B
#define BT_CONTROLLER_TIMER_2_STATUS_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_timer_2_status_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_2_STATUS_REG_ADDR);
}

__INLINE void bt_controller_timer_2_status_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_2_STATUS_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_2_STATUS_REG_TIMER_2_STAT_REG_30_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFFFFC)
#define BT_CONTROLLER_TIMER_2_STATUS_REG_TIMER_2_STAT_REG_30_BITS_ARE_RESERVED_LSB    2
#define BT_CONTROLLER_TIMER_2_STATUS_REG_TIMER_2_STAT_REG_30_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000001E)
#define BT_CONTROLLER_TIMER_2_STATUS_REG_TIMER_2_TIMER_RUNNING_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TIMER_2_STATUS_REG_TIMER_2_TIMER_RUNNING_POS    1
#define BT_CONTROLLER_TIMER_2_STATUS_REG_TIMER_2_TIMER_EXPIRED_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TIMER_2_STATUS_REG_TIMER_2_TIMER_EXPIRED_POS    0

#define BT_CONTROLLER_TIMER_2_STATUS_REG_TIMER_2_STAT_REG_30_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_2_STATUS_REG_TIMER_2_TIMER_RUNNING_RST    0x0
#define BT_CONTROLLER_TIMER_2_STATUS_REG_TIMER_2_TIMER_EXPIRED_RST    0x0

__INLINE void bt_controller_timer_2_status_reg_pack(uint32_t timer2_stat_reg_30bits_are_reserved, uint8_t timer2_timer_running, uint8_t timer2_timer_expired)
{
	ASSERT_ERR((((uint32_t)timer2_stat_reg_30bits_are_reserved << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	ASSERT_ERR((((uint32_t)timer2_timer_running << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)timer2_timer_expired << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_2_STATUS_REG_ADDR,  ((uint32_t)timer2_stat_reg_30bits_are_reserved << 2) |((uint32_t)timer2_timer_running << 1) |((uint32_t)timer2_timer_expired << 0));
}

__INLINE void bt_controller_timer_2_status_reg_unpack(uint32_t* timer2_stat_reg_30bits_are_reserved, uint8_t* timer2_timer_running, uint8_t* timer2_timer_expired)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_2_STATUS_REG_ADDR);

	*timer2_stat_reg_30bits_are_reserved = (localVal & ((uint32_t)0xFFFFFFFC)) >>  2;
	*timer2_timer_running = (localVal & ((uint32_t)0x00000002)) >>  1;
	*timer2_timer_expired = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t bt_controller_timer_2_status_reg_timer_2_stat_reg_30_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_2_STATUS_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFFC)) >> 2);
}
__INLINE uint8_t bt_controller_timer_2_status_reg_timer_2_timer_running_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_2_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_timer_2_status_reg_timer_2_timer_running_setf(uint8_t timer2timerrunning)
{
	ASSERT_ERR((((uint32_t)timer2timerrunning << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_2_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_2_STATUS_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)timer2timerrunning <<1));
}
__INLINE uint8_t bt_controller_timer_2_status_reg_timer_2_timer_expired_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_2_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_timer_2_status_reg_timer_2_timer_expired_setf(uint8_t timer2timerexpired)
{
	ASSERT_ERR((((uint32_t)timer2timerexpired << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_2_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_2_STATUS_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timer2timerexpired <<0));
}

/**
 * @brief TIMER_3_LOAD_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer3_Terminal_count_31_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_TIMER_3_LOAD_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004830)
#define BT_CONTROLLER_TIMER_3_LOAD_REG_OFFSET      0x00004830
#define BT_CONTROLLER_TIMER_3_LOAD_REG_INDEX       0x0000120C
#define BT_CONTROLLER_TIMER_3_LOAD_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_timer_3_load_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_3_LOAD_REG_ADDR);
}

__INLINE void bt_controller_timer_3_load_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_3_LOAD_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_3_LOAD_REG_TIMER_3_TERMINAL_COUNT_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TIMER_3_LOAD_REG_TIMER_3_TERMINAL_COUNT_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TIMER_3_LOAD_REG_TIMER_3_TERMINAL_COUNT_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TIMER_3_LOAD_REG_TIMER_3_TERMINAL_COUNT_31_DOWNTO_0_RST    0x0

__INLINE uint32_t bt_controller_timer_3_load_reg_timer_3_terminal_count_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_3_LOAD_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_timer_3_load_reg_timer_3_terminal_count_31_downto_0_setf(uint32_t timer3terminalcount31downto0)
{
	ASSERT_ERR((((uint32_t)timer3terminalcount31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_3_LOAD_REG_ADDR, (uint32_t)timer3terminalcount31downto0 << 0);
}

/**
 * @brief TIMER_3_COUNT_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer3_Present_count_31_downto_0 0xFFFFFFFF
 * </pre>
 */
#define BT_CONTROLLER_TIMER_3_COUNT_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004834)
#define BT_CONTROLLER_TIMER_3_COUNT_REG_OFFSET      0x00004834
#define BT_CONTROLLER_TIMER_3_COUNT_REG_INDEX       0x0000120D
#define BT_CONTROLLER_TIMER_3_COUNT_REG_RESET       0xFFFFFFFF

__INLINE uint32_t  bt_controller_timer_3_count_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_3_COUNT_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_TIMER_3_COUNT_REG_TIMER_3_PRESENT_COUNT_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TIMER_3_COUNT_REG_TIMER_3_PRESENT_COUNT_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TIMER_3_COUNT_REG_TIMER_3_PRESENT_COUNT_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TIMER_3_COUNT_REG_TIMER_3_PRESENT_COUNT_31_DOWNTO_0_RST    0xFFFFFFFF

__INLINE uint32_t bt_controller_timer_3_count_reg_timer_3_present_count_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_3_COUNT_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief TIMER_3_CONTROL_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 timer3_control_reg_16_bits_are_reserved 0x0
 *    15:08 Prescalar_value           0x0
 *    07:03 timer3_control_reg_5bits_are_reserved 0x0
 *    02    timer3_UP_or_Down_Counting 1              
 *    01    timer3_Oneshot_or_Cyclic  0              
 *    00    timer3_timer_enable       0              
 * </pre>
 */
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004838)
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_OFFSET      0x00004838
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_INDEX       0x0000120E
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_RESET       0x00000004

__INLINE uint32_t  bt_controller_timer_3_control_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR);
}

__INLINE void bt_controller_timer_3_control_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_CONTROL_REG_16_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_CONTROL_REG_16_BITS_ARE_RESERVED_LSB    16
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_CONTROL_REG_16_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_PRESCALAR_VALUE_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_PRESCALAR_VALUE_LSB    8
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_PRESCALAR_VALUE_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_CONTROL_REG_5_BITS_ARE_RESERVED_MASK    ((uint32_t)0x000000F8)
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_CONTROL_REG_5_BITS_ARE_RESERVED_LSB    3
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_CONTROL_REG_5_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_UP_OR_DOWN_COUNTING_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_UP_OR_DOWN_COUNTING_POS    2
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_ONESHOT_OR_CYCLIC_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_ONESHOT_OR_CYCLIC_POS    1
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_TIMER_ENABLE_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_TIMER_ENABLE_POS    0

#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_CONTROL_REG_16_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_PRESCALAR_VALUE_RST    0x0
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_CONTROL_REG_5_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_UP_OR_DOWN_COUNTING_RST    0x1
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_ONESHOT_OR_CYCLIC_RST    0x0
#define BT_CONTROLLER_TIMER_3_CONTROL_REG_TIMER_3_TIMER_ENABLE_RST    0x0

__INLINE void bt_controller_timer_3_control_reg_pack(uint16_t timer3_control_reg_16_bits_are_reserved, uint8_t prescalar_value, uint8_t timer3_control_reg_5bits_are_reserved, uint8_t timer3_up_or_down_counting, uint8_t timer3_oneshot_or_cyclic, uint8_t timer3_timer_enable)
{
	ASSERT_ERR((((uint32_t)timer3_control_reg_16_bits_are_reserved << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)prescalar_value << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)timer3_control_reg_5bits_are_reserved << 3) & ~((uint32_t)0x000000F8)) == 0);
	ASSERT_ERR((((uint32_t)timer3_up_or_down_counting << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)timer3_oneshot_or_cyclic << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)timer3_timer_enable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR,  ((uint32_t)timer3_control_reg_16_bits_are_reserved << 16) |((uint32_t)prescalar_value << 8) |((uint32_t)timer3_control_reg_5bits_are_reserved << 3) |((uint32_t)timer3_up_or_down_counting << 2) |((uint32_t)timer3_oneshot_or_cyclic << 1) |((uint32_t)timer3_timer_enable << 0));
}

__INLINE void bt_controller_timer_3_control_reg_unpack(uint16_t* timer3_control_reg_16_bits_are_reserved, uint8_t* prescalar_value, uint8_t* timer3_control_reg_5bits_are_reserved, uint8_t* timer3_up_or_down_counting, uint8_t* timer3_oneshot_or_cyclic, uint8_t* timer3_timer_enable)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR);

	*timer3_control_reg_16_bits_are_reserved = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*prescalar_value = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*timer3_control_reg_5bits_are_reserved = (localVal & ((uint32_t)0x000000F8)) >>  3;
	*timer3_up_or_down_counting = (localVal & ((uint32_t)0x00000004)) >>  2;
	*timer3_oneshot_or_cyclic = (localVal & ((uint32_t)0x00000002)) >>  1;
	*timer3_timer_enable = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_timer_3_control_reg_timer_3_control_reg_16_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t bt_controller_timer_3_control_reg_prescalar_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_timer_3_control_reg_prescalar_value_setf(uint8_t prescalarvalue)
{
	ASSERT_ERR((((uint32_t)prescalarvalue << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)prescalarvalue <<8));
}
__INLINE uint8_t bt_controller_timer_3_control_reg_timer_3_control_reg_5_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F8)) >> 3);
}
__INLINE uint8_t bt_controller_timer_3_control_reg_timer_3_up_or_down_counting_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_timer_3_control_reg_timer_3_up_or_down_counting_setf(uint8_t timer3upordowncounting)
{
	ASSERT_ERR((((uint32_t)timer3upordowncounting << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)timer3upordowncounting <<2));
}
__INLINE uint8_t bt_controller_timer_3_control_reg_timer_3_oneshot_or_cyclic_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_timer_3_control_reg_timer_3_oneshot_or_cyclic_setf(uint8_t timer3oneshotorcyclic)
{
	ASSERT_ERR((((uint32_t)timer3oneshotorcyclic << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)timer3oneshotorcyclic <<1));
}
__INLINE uint8_t bt_controller_timer_3_control_reg_timer_3_timer_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_timer_3_control_reg_timer_3_timer_enable_setf(uint8_t timer3timerenable)
{
	ASSERT_ERR((((uint32_t)timer3timerenable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_3_CONTROL_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timer3timerenable <<0));
}

/**
 * @brief TIMER_3_STATUS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:02 timer3_status_reg_30_bits_are_reserved 0x0
 *    01    timer3_Timer_running      0              
 *    00    timer3_Timer_expired      0              
 * </pre>
 */
#define BT_CONTROLLER_TIMER_3_STATUS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000483C)
#define BT_CONTROLLER_TIMER_3_STATUS_REG_OFFSET      0x0000483C
#define BT_CONTROLLER_TIMER_3_STATUS_REG_INDEX       0x0000120F
#define BT_CONTROLLER_TIMER_3_STATUS_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_timer_3_status_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_3_STATUS_REG_ADDR);
}

__INLINE void bt_controller_timer_3_status_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_3_STATUS_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_3_STATUS_REG_TIMER_3_STATUS_REG_30_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFFFFC)
#define BT_CONTROLLER_TIMER_3_STATUS_REG_TIMER_3_STATUS_REG_30_BITS_ARE_RESERVED_LSB    2
#define BT_CONTROLLER_TIMER_3_STATUS_REG_TIMER_3_STATUS_REG_30_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000001E)
#define BT_CONTROLLER_TIMER_3_STATUS_REG_TIMER_3_TIMER_RUNNING_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TIMER_3_STATUS_REG_TIMER_3_TIMER_RUNNING_POS    1
#define BT_CONTROLLER_TIMER_3_STATUS_REG_TIMER_3_TIMER_EXPIRED_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TIMER_3_STATUS_REG_TIMER_3_TIMER_EXPIRED_POS    0

#define BT_CONTROLLER_TIMER_3_STATUS_REG_TIMER_3_STATUS_REG_30_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_3_STATUS_REG_TIMER_3_TIMER_RUNNING_RST    0x0
#define BT_CONTROLLER_TIMER_3_STATUS_REG_TIMER_3_TIMER_EXPIRED_RST    0x0

__INLINE void bt_controller_timer_3_status_reg_pack(uint32_t timer3_status_reg_30_bits_are_reserved, uint8_t timer3_timer_running, uint8_t timer3_timer_expired)
{
	ASSERT_ERR((((uint32_t)timer3_status_reg_30_bits_are_reserved << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	ASSERT_ERR((((uint32_t)timer3_timer_running << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)timer3_timer_expired << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_3_STATUS_REG_ADDR,  ((uint32_t)timer3_status_reg_30_bits_are_reserved << 2) |((uint32_t)timer3_timer_running << 1) |((uint32_t)timer3_timer_expired << 0));
}

__INLINE void bt_controller_timer_3_status_reg_unpack(uint32_t* timer3_status_reg_30_bits_are_reserved, uint8_t* timer3_timer_running, uint8_t* timer3_timer_expired)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_3_STATUS_REG_ADDR);

	*timer3_status_reg_30_bits_are_reserved = (localVal & ((uint32_t)0xFFFFFFFC)) >>  2;
	*timer3_timer_running = (localVal & ((uint32_t)0x00000002)) >>  1;
	*timer3_timer_expired = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t bt_controller_timer_3_status_reg_timer_3_status_reg_30_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_3_STATUS_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFFC)) >> 2);
}
__INLINE uint8_t bt_controller_timer_3_status_reg_timer_3_timer_running_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_3_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_timer_3_status_reg_timer_3_timer_running_setf(uint8_t timer3timerrunning)
{
	ASSERT_ERR((((uint32_t)timer3timerrunning << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_3_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_3_STATUS_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)timer3timerrunning <<1));
}
__INLINE uint8_t bt_controller_timer_3_status_reg_timer_3_timer_expired_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_3_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_timer_3_status_reg_timer_3_timer_expired_setf(uint8_t timer3timerexpired)
{
	ASSERT_ERR((((uint32_t)timer3timerexpired << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_3_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_3_STATUS_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timer3timerexpired <<0));
}

/**
 * @brief TIMER_4_LOAD_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer4_Terminal_count_31_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_TIMER_4_LOAD_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004840)
#define BT_CONTROLLER_TIMER_4_LOAD_REG_OFFSET      0x00004840
#define BT_CONTROLLER_TIMER_4_LOAD_REG_INDEX       0x00001210
#define BT_CONTROLLER_TIMER_4_LOAD_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_timer_4_load_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_4_LOAD_REG_ADDR);
}

__INLINE void bt_controller_timer_4_load_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_4_LOAD_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_4_LOAD_REG_TIMER_4_TERMINAL_COUNT_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TIMER_4_LOAD_REG_TIMER_4_TERMINAL_COUNT_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TIMER_4_LOAD_REG_TIMER_4_TERMINAL_COUNT_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TIMER_4_LOAD_REG_TIMER_4_TERMINAL_COUNT_31_DOWNTO_0_RST    0x0

__INLINE uint32_t bt_controller_timer_4_load_reg_timer_4_terminal_count_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_4_LOAD_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_timer_4_load_reg_timer_4_terminal_count_31_downto_0_setf(uint32_t timer4terminalcount31downto0)
{
	ASSERT_ERR((((uint32_t)timer4terminalcount31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_4_LOAD_REG_ADDR, (uint32_t)timer4terminalcount31downto0 << 0);
}

/**
 * @brief TIMER_4_COUNT_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer4_Present_count_31_downto_0 0xFFFFFFFF
 * </pre>
 */
#define BT_CONTROLLER_TIMER_4_COUNT_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004844)
#define BT_CONTROLLER_TIMER_4_COUNT_REG_OFFSET      0x00004844
#define BT_CONTROLLER_TIMER_4_COUNT_REG_INDEX       0x00001211
#define BT_CONTROLLER_TIMER_4_COUNT_REG_RESET       0xFFFFFFFF

__INLINE uint32_t  bt_controller_timer_4_count_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_4_COUNT_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_TIMER_4_COUNT_REG_TIMER_4_PRESENT_COUNT_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TIMER_4_COUNT_REG_TIMER_4_PRESENT_COUNT_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TIMER_4_COUNT_REG_TIMER_4_PRESENT_COUNT_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TIMER_4_COUNT_REG_TIMER_4_PRESENT_COUNT_31_DOWNTO_0_RST    0xFFFFFFFF

__INLINE uint32_t bt_controller_timer_4_count_reg_timer_4_present_count_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_4_COUNT_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief TIMER_4_CONTROL_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 timer4_control_reg_16_bits_are_reserved 0x0
 *    15:08 timer4_Prescalar_value    0x0
 *    07:03 timer4_control_reg_5_bits_are_reserved 0x0
 *    02    timer4_UP_or_Down_Counting 1              
 *    01    timer4_Oneshot_or_Cyclic  0              
 *    00    timer4_timer_enable       0              
 * </pre>
 */
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004848)
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_OFFSET      0x00004848
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_INDEX       0x00001212
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_RESET       0x00000004

__INLINE uint32_t  bt_controller_timer_4_control_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR);
}

__INLINE void bt_controller_timer_4_control_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_CONTROL_REG_16_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_CONTROL_REG_16_BITS_ARE_RESERVED_LSB    16
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_CONTROL_REG_16_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_PRESCALAR_VALUE_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_PRESCALAR_VALUE_LSB    8
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_PRESCALAR_VALUE_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_CONTROL_REG_5_BITS_ARE_RESERVED_MASK    ((uint32_t)0x000000F8)
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_CONTROL_REG_5_BITS_ARE_RESERVED_LSB    3
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_CONTROL_REG_5_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_UP_OR_DOWN_COUNTING_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_UP_OR_DOWN_COUNTING_POS    2
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_ONESHOT_OR_CYCLIC_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_ONESHOT_OR_CYCLIC_POS    1
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_TIMER_ENABLE_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_TIMER_ENABLE_POS    0

#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_CONTROL_REG_16_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_PRESCALAR_VALUE_RST    0x0
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_CONTROL_REG_5_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_UP_OR_DOWN_COUNTING_RST    0x1
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_ONESHOT_OR_CYCLIC_RST    0x0
#define BT_CONTROLLER_TIMER_4_CONTROL_REG_TIMER_4_TIMER_ENABLE_RST    0x0

__INLINE void bt_controller_timer_4_control_reg_pack(uint16_t timer4_control_reg_16_bits_are_reserved, uint8_t timer4_prescalar_value, uint8_t timer4_control_reg_5_bits_are_reserved, uint8_t timer4_up_or_down_counting, uint8_t timer4_oneshot_or_cyclic, uint8_t timer4_timer_enable)
{
	ASSERT_ERR((((uint32_t)timer4_control_reg_16_bits_are_reserved << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)timer4_prescalar_value << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)timer4_control_reg_5_bits_are_reserved << 3) & ~((uint32_t)0x000000F8)) == 0);
	ASSERT_ERR((((uint32_t)timer4_up_or_down_counting << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)timer4_oneshot_or_cyclic << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)timer4_timer_enable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR,  ((uint32_t)timer4_control_reg_16_bits_are_reserved << 16) |((uint32_t)timer4_prescalar_value << 8) |((uint32_t)timer4_control_reg_5_bits_are_reserved << 3) |((uint32_t)timer4_up_or_down_counting << 2) |((uint32_t)timer4_oneshot_or_cyclic << 1) |((uint32_t)timer4_timer_enable << 0));
}

__INLINE void bt_controller_timer_4_control_reg_unpack(uint16_t* timer4_control_reg_16_bits_are_reserved, uint8_t* timer4_prescalar_value, uint8_t* timer4_control_reg_5_bits_are_reserved, uint8_t* timer4_up_or_down_counting, uint8_t* timer4_oneshot_or_cyclic, uint8_t* timer4_timer_enable)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR);

	*timer4_control_reg_16_bits_are_reserved = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*timer4_prescalar_value = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*timer4_control_reg_5_bits_are_reserved = (localVal & ((uint32_t)0x000000F8)) >>  3;
	*timer4_up_or_down_counting = (localVal & ((uint32_t)0x00000004)) >>  2;
	*timer4_oneshot_or_cyclic = (localVal & ((uint32_t)0x00000002)) >>  1;
	*timer4_timer_enable = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_timer_4_control_reg_timer_4_control_reg_16_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t bt_controller_timer_4_control_reg_timer_4_prescalar_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_timer_4_control_reg_timer_4_prescalar_value_setf(uint8_t timer4prescalarvalue)
{
	ASSERT_ERR((((uint32_t)timer4prescalarvalue << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)timer4prescalarvalue <<8));
}
__INLINE uint8_t bt_controller_timer_4_control_reg_timer_4_control_reg_5_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F8)) >> 3);
}
__INLINE uint8_t bt_controller_timer_4_control_reg_timer_4_up_or_down_counting_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_timer_4_control_reg_timer_4_up_or_down_counting_setf(uint8_t timer4upordowncounting)
{
	ASSERT_ERR((((uint32_t)timer4upordowncounting << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)timer4upordowncounting <<2));
}
__INLINE uint8_t bt_controller_timer_4_control_reg_timer_4_oneshot_or_cyclic_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_timer_4_control_reg_timer_4_oneshot_or_cyclic_setf(uint8_t timer4oneshotorcyclic)
{
	ASSERT_ERR((((uint32_t)timer4oneshotorcyclic << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)timer4oneshotorcyclic <<1));
}
__INLINE uint8_t bt_controller_timer_4_control_reg_timer_4_timer_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_timer_4_control_reg_timer_4_timer_enable_setf(uint8_t timer4timerenable)
{
	ASSERT_ERR((((uint32_t)timer4timerenable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_4_CONTROL_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timer4timerenable <<0));
}

/**
 * @brief TIMER_4_STATUS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:02 timer4_status_reg_30_bits_are_reserved 0x0
 *    01    timer4_Timer_running      0              
 *    00    timer4_Timer_expired      0              
 * </pre>
 */
#define BT_CONTROLLER_TIMER_4_STATUS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000484C)
#define BT_CONTROLLER_TIMER_4_STATUS_REG_OFFSET      0x0000484C
#define BT_CONTROLLER_TIMER_4_STATUS_REG_INDEX       0x00001213
#define BT_CONTROLLER_TIMER_4_STATUS_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_timer_4_status_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_4_STATUS_REG_ADDR);
}

__INLINE void bt_controller_timer_4_status_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_4_STATUS_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_4_STATUS_REG_TIMER_4_STATUS_REG_30_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFFFFC)
#define BT_CONTROLLER_TIMER_4_STATUS_REG_TIMER_4_STATUS_REG_30_BITS_ARE_RESERVED_LSB    2
#define BT_CONTROLLER_TIMER_4_STATUS_REG_TIMER_4_STATUS_REG_30_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000001E)
#define BT_CONTROLLER_TIMER_4_STATUS_REG_TIMER_4_TIMER_RUNNING_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TIMER_4_STATUS_REG_TIMER_4_TIMER_RUNNING_POS    1
#define BT_CONTROLLER_TIMER_4_STATUS_REG_TIMER_4_TIMER_EXPIRED_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TIMER_4_STATUS_REG_TIMER_4_TIMER_EXPIRED_POS    0

#define BT_CONTROLLER_TIMER_4_STATUS_REG_TIMER_4_STATUS_REG_30_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_4_STATUS_REG_TIMER_4_TIMER_RUNNING_RST    0x0
#define BT_CONTROLLER_TIMER_4_STATUS_REG_TIMER_4_TIMER_EXPIRED_RST    0x0

__INLINE void bt_controller_timer_4_status_reg_pack(uint32_t timer4_status_reg_30_bits_are_reserved, uint8_t timer4_timer_running, uint8_t timer4_timer_expired)
{
	ASSERT_ERR((((uint32_t)timer4_status_reg_30_bits_are_reserved << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	ASSERT_ERR((((uint32_t)timer4_timer_running << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)timer4_timer_expired << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_4_STATUS_REG_ADDR,  ((uint32_t)timer4_status_reg_30_bits_are_reserved << 2) |((uint32_t)timer4_timer_running << 1) |((uint32_t)timer4_timer_expired << 0));
}

__INLINE void bt_controller_timer_4_status_reg_unpack(uint32_t* timer4_status_reg_30_bits_are_reserved, uint8_t* timer4_timer_running, uint8_t* timer4_timer_expired)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_4_STATUS_REG_ADDR);

	*timer4_status_reg_30_bits_are_reserved = (localVal & ((uint32_t)0xFFFFFFFC)) >>  2;
	*timer4_timer_running = (localVal & ((uint32_t)0x00000002)) >>  1;
	*timer4_timer_expired = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t bt_controller_timer_4_status_reg_timer_4_status_reg_30_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_4_STATUS_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFFC)) >> 2);
}
__INLINE uint8_t bt_controller_timer_4_status_reg_timer_4_timer_running_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_4_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_timer_4_status_reg_timer_4_timer_running_setf(uint8_t timer4timerrunning)
{
	ASSERT_ERR((((uint32_t)timer4timerrunning << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_4_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_4_STATUS_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)timer4timerrunning <<1));
}
__INLINE uint8_t bt_controller_timer_4_status_reg_timer_4_timer_expired_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_4_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_timer_4_status_reg_timer_4_timer_expired_setf(uint8_t timer4timerexpired)
{
	ASSERT_ERR((((uint32_t)timer4timerexpired << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_4_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_4_STATUS_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timer4timerexpired <<0));
}

/**
 * @brief TIMER_5_LOAD_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer5_Terminal_count_31_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_TIMER_5_LOAD_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004850)
#define BT_CONTROLLER_TIMER_5_LOAD_REG_OFFSET      0x00004850
#define BT_CONTROLLER_TIMER_5_LOAD_REG_INDEX       0x00001214
#define BT_CONTROLLER_TIMER_5_LOAD_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_timer_5_load_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_5_LOAD_REG_ADDR);
}

__INLINE void bt_controller_timer_5_load_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_5_LOAD_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_5_LOAD_REG_TIMER_5_TERMINAL_COUNT_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TIMER_5_LOAD_REG_TIMER_5_TERMINAL_COUNT_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TIMER_5_LOAD_REG_TIMER_5_TERMINAL_COUNT_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TIMER_5_LOAD_REG_TIMER_5_TERMINAL_COUNT_31_DOWNTO_0_RST    0x0

__INLINE uint32_t bt_controller_timer_5_load_reg_timer_5_terminal_count_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_5_LOAD_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_timer_5_load_reg_timer_5_terminal_count_31_downto_0_setf(uint32_t timer5terminalcount31downto0)
{
	ASSERT_ERR((((uint32_t)timer5terminalcount31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_5_LOAD_REG_ADDR, (uint32_t)timer5terminalcount31downto0 << 0);
}

/**
 * @brief TIMER_5_COUNT_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer5_Present_count_31_downto_0 0xFFFFFFFF
 * </pre>
 */
#define BT_CONTROLLER_TIMER_5_COUNT_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004854)
#define BT_CONTROLLER_TIMER_5_COUNT_REG_OFFSET      0x00004854
#define BT_CONTROLLER_TIMER_5_COUNT_REG_INDEX       0x00001215
#define BT_CONTROLLER_TIMER_5_COUNT_REG_RESET       0xFFFFFFFF

__INLINE uint32_t  bt_controller_timer_5_count_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_5_COUNT_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_TIMER_5_COUNT_REG_TIMER_5_PRESENT_COUNT_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TIMER_5_COUNT_REG_TIMER_5_PRESENT_COUNT_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TIMER_5_COUNT_REG_TIMER_5_PRESENT_COUNT_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TIMER_5_COUNT_REG_TIMER_5_PRESENT_COUNT_31_DOWNTO_0_RST    0xFFFFFFFF

__INLINE uint32_t bt_controller_timer_5_count_reg_timer_5_present_count_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_5_COUNT_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief TIMER_5_CONTROL_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 timer5_control_reg_16_bits_are_reserved 0x0
 *    15:08 timer5_Pre_Scalar_value   0x0
 *    07:03 timer5_5_bits_are_reserved 0x0
 *    02    timer5_UP_or_Down_Counting 1              
 *    01    timer5_Oneshot_or_Cyclic  0              
 *    00    timer5_timer_enable       0              
 * </pre>
 */
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004858)
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_OFFSET      0x00004858
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_INDEX       0x00001216
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_RESET       0x00000004

__INLINE uint32_t  bt_controller_timer_5_control_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR);
}

__INLINE void bt_controller_timer_5_control_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_CONTROL_REG_16_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_CONTROL_REG_16_BITS_ARE_RESERVED_LSB    16
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_CONTROL_REG_16_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_PRE_SCALAR_VALUE_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_PRE_SCALAR_VALUE_LSB    8
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_PRE_SCALAR_VALUE_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_5_BITS_ARE_RESERVED_MASK    ((uint32_t)0x000000F8)
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_5_BITS_ARE_RESERVED_LSB    3
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_5_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_UP_OR_DOWN_COUNTING_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_UP_OR_DOWN_COUNTING_POS    2
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_ONESHOT_OR_CYCLIC_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_ONESHOT_OR_CYCLIC_POS    1
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_TIMER_ENABLE_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_TIMER_ENABLE_POS    0

#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_CONTROL_REG_16_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_PRE_SCALAR_VALUE_RST    0x0
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_5_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_UP_OR_DOWN_COUNTING_RST    0x1
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_ONESHOT_OR_CYCLIC_RST    0x0
#define BT_CONTROLLER_TIMER_5_CONTROL_REG_TIMER_5_TIMER_ENABLE_RST    0x0

__INLINE void bt_controller_timer_5_control_reg_pack(uint16_t timer5_control_reg_16_bits_are_reserved, uint8_t timer5_pre_scalar_value, uint8_t timer5_5_bits_are_reserved, uint8_t timer5_up_or_down_counting, uint8_t timer5_oneshot_or_cyclic, uint8_t timer5_timer_enable)
{
	ASSERT_ERR((((uint32_t)timer5_control_reg_16_bits_are_reserved << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)timer5_pre_scalar_value << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)timer5_5_bits_are_reserved << 3) & ~((uint32_t)0x000000F8)) == 0);
	ASSERT_ERR((((uint32_t)timer5_up_or_down_counting << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)timer5_oneshot_or_cyclic << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)timer5_timer_enable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR,  ((uint32_t)timer5_control_reg_16_bits_are_reserved << 16) |((uint32_t)timer5_pre_scalar_value << 8) |((uint32_t)timer5_5_bits_are_reserved << 3) |((uint32_t)timer5_up_or_down_counting << 2) |((uint32_t)timer5_oneshot_or_cyclic << 1) |((uint32_t)timer5_timer_enable << 0));
}

__INLINE void bt_controller_timer_5_control_reg_unpack(uint16_t* timer5_control_reg_16_bits_are_reserved, uint8_t* timer5_pre_scalar_value, uint8_t* timer5_5_bits_are_reserved, uint8_t* timer5_up_or_down_counting, uint8_t* timer5_oneshot_or_cyclic, uint8_t* timer5_timer_enable)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR);

	*timer5_control_reg_16_bits_are_reserved = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*timer5_pre_scalar_value = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*timer5_5_bits_are_reserved = (localVal & ((uint32_t)0x000000F8)) >>  3;
	*timer5_up_or_down_counting = (localVal & ((uint32_t)0x00000004)) >>  2;
	*timer5_oneshot_or_cyclic = (localVal & ((uint32_t)0x00000002)) >>  1;
	*timer5_timer_enable = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_timer_5_control_reg_timer_5_control_reg_16_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t bt_controller_timer_5_control_reg_timer_5_pre_scalar_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_timer_5_control_reg_timer_5_pre_scalar_value_setf(uint8_t timer5prescalarvalue)
{
	ASSERT_ERR((((uint32_t)timer5prescalarvalue << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)timer5prescalarvalue <<8));
}
__INLINE uint8_t bt_controller_timer_5_control_reg_timer_5_5_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F8)) >> 3);
}
__INLINE uint8_t bt_controller_timer_5_control_reg_timer_5_up_or_down_counting_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_timer_5_control_reg_timer_5_up_or_down_counting_setf(uint8_t timer5upordowncounting)
{
	ASSERT_ERR((((uint32_t)timer5upordowncounting << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)timer5upordowncounting <<2));
}
__INLINE uint8_t bt_controller_timer_5_control_reg_timer_5_oneshot_or_cyclic_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_timer_5_control_reg_timer_5_oneshot_or_cyclic_setf(uint8_t timer5oneshotorcyclic)
{
	ASSERT_ERR((((uint32_t)timer5oneshotorcyclic << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)timer5oneshotorcyclic <<1));
}
__INLINE uint8_t bt_controller_timer_5_control_reg_timer_5_timer_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_timer_5_control_reg_timer_5_timer_enable_setf(uint8_t timer5timerenable)
{
	ASSERT_ERR((((uint32_t)timer5timerenable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_5_CONTROL_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timer5timerenable <<0));
}

/**
 * @brief TIMER_5_STATUS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:02 timer5_status_reg_30_bits_are_reserved 0x0
 *    01    timer5_Timer_running      0              
 *    00    timer5_Timer_expired      0              
 * </pre>
 */
#define BT_CONTROLLER_TIMER_5_STATUS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000485C)
#define BT_CONTROLLER_TIMER_5_STATUS_REG_OFFSET      0x0000485C
#define BT_CONTROLLER_TIMER_5_STATUS_REG_INDEX       0x00001217
#define BT_CONTROLLER_TIMER_5_STATUS_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_timer_5_status_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_5_STATUS_REG_ADDR);
}

__INLINE void bt_controller_timer_5_status_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_5_STATUS_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_5_STATUS_REG_TIMER_5_STATUS_REG_30_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFFFFC)
#define BT_CONTROLLER_TIMER_5_STATUS_REG_TIMER_5_STATUS_REG_30_BITS_ARE_RESERVED_LSB    2
#define BT_CONTROLLER_TIMER_5_STATUS_REG_TIMER_5_STATUS_REG_30_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000001E)
#define BT_CONTROLLER_TIMER_5_STATUS_REG_TIMER_5_TIMER_RUNNING_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TIMER_5_STATUS_REG_TIMER_5_TIMER_RUNNING_POS    1
#define BT_CONTROLLER_TIMER_5_STATUS_REG_TIMER_5_TIMER_EXPIRED_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TIMER_5_STATUS_REG_TIMER_5_TIMER_EXPIRED_POS    0

#define BT_CONTROLLER_TIMER_5_STATUS_REG_TIMER_5_STATUS_REG_30_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_5_STATUS_REG_TIMER_5_TIMER_RUNNING_RST    0x0
#define BT_CONTROLLER_TIMER_5_STATUS_REG_TIMER_5_TIMER_EXPIRED_RST    0x0

__INLINE void bt_controller_timer_5_status_reg_pack(uint32_t timer5_status_reg_30_bits_are_reserved, uint8_t timer5_timer_running, uint8_t timer5_timer_expired)
{
	ASSERT_ERR((((uint32_t)timer5_status_reg_30_bits_are_reserved << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	ASSERT_ERR((((uint32_t)timer5_timer_running << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)timer5_timer_expired << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_5_STATUS_REG_ADDR,  ((uint32_t)timer5_status_reg_30_bits_are_reserved << 2) |((uint32_t)timer5_timer_running << 1) |((uint32_t)timer5_timer_expired << 0));
}

__INLINE void bt_controller_timer_5_status_reg_unpack(uint32_t* timer5_status_reg_30_bits_are_reserved, uint8_t* timer5_timer_running, uint8_t* timer5_timer_expired)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_5_STATUS_REG_ADDR);

	*timer5_status_reg_30_bits_are_reserved = (localVal & ((uint32_t)0xFFFFFFFC)) >>  2;
	*timer5_timer_running = (localVal & ((uint32_t)0x00000002)) >>  1;
	*timer5_timer_expired = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t bt_controller_timer_5_status_reg_timer_5_status_reg_30_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_5_STATUS_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFFC)) >> 2);
}
__INLINE uint8_t bt_controller_timer_5_status_reg_timer_5_timer_running_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_5_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_timer_5_status_reg_timer_5_timer_running_setf(uint8_t timer5timerrunning)
{
	ASSERT_ERR((((uint32_t)timer5timerrunning << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_5_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_5_STATUS_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)timer5timerrunning <<1));
}
__INLINE uint8_t bt_controller_timer_5_status_reg_timer_5_timer_expired_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_5_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_timer_5_status_reg_timer_5_timer_expired_setf(uint8_t timer5timerexpired)
{
	ASSERT_ERR((((uint32_t)timer5timerexpired << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_5_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_5_STATUS_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timer5timerexpired <<0));
}

/**
 * @brief TIMER_6_LOAD_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer6_Terminal_count_31_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_TIMER_6_LOAD_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004860)
#define BT_CONTROLLER_TIMER_6_LOAD_REG_OFFSET      0x00004860
#define BT_CONTROLLER_TIMER_6_LOAD_REG_INDEX       0x00001218
#define BT_CONTROLLER_TIMER_6_LOAD_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_timer_6_load_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_6_LOAD_REG_ADDR);
}

__INLINE void bt_controller_timer_6_load_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_6_LOAD_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_6_LOAD_REG_TIMER_6_TERMINAL_COUNT_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TIMER_6_LOAD_REG_TIMER_6_TERMINAL_COUNT_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TIMER_6_LOAD_REG_TIMER_6_TERMINAL_COUNT_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TIMER_6_LOAD_REG_TIMER_6_TERMINAL_COUNT_31_DOWNTO_0_RST    0x0

__INLINE uint32_t bt_controller_timer_6_load_reg_timer_6_terminal_count_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_6_LOAD_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_timer_6_load_reg_timer_6_terminal_count_31_downto_0_setf(uint32_t timer6terminalcount31downto0)
{
	ASSERT_ERR((((uint32_t)timer6terminalcount31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_6_LOAD_REG_ADDR, (uint32_t)timer6terminalcount31downto0 << 0);
}

/**
 * @brief TIMER_6_COUNT_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer6_Present_count_31_downto_0 0xFFFFFFFF
 * </pre>
 */
#define BT_CONTROLLER_TIMER_6_COUNT_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004864)
#define BT_CONTROLLER_TIMER_6_COUNT_REG_OFFSET      0x00004864
#define BT_CONTROLLER_TIMER_6_COUNT_REG_INDEX       0x00001219
#define BT_CONTROLLER_TIMER_6_COUNT_REG_RESET       0xFFFFFFFF

__INLINE uint32_t  bt_controller_timer_6_count_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_6_COUNT_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_TIMER_6_COUNT_REG_TIMER_6_PRESENT_COUNT_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TIMER_6_COUNT_REG_TIMER_6_PRESENT_COUNT_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TIMER_6_COUNT_REG_TIMER_6_PRESENT_COUNT_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TIMER_6_COUNT_REG_TIMER_6_PRESENT_COUNT_31_DOWNTO_0_RST    0xFFFFFFFF

__INLINE uint32_t bt_controller_timer_6_count_reg_timer_6_present_count_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_6_COUNT_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief TIMER_6_CONTROL_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 timer6_control_reg_16_bits_are_reserved 0x0
 *    15:08 timer6_Pre_Scalar_value   0x0
 *    07:03 timer6_control_reg_5_bits_are_reserved 0x0
 *    02    timer6_UP_or_Down_Counting 1              
 *    01    timer6_Oneshot_or_Cyclic  0              
 *    00    timer6_timer_enable       0              
 * </pre>
 */
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004868)
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_OFFSET      0x00004868
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_INDEX       0x0000121A
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_RESET       0x00000004

__INLINE uint32_t  bt_controller_timer_6_control_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR);
}

__INLINE void bt_controller_timer_6_control_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_CONTROL_REG_16_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_CONTROL_REG_16_BITS_ARE_RESERVED_LSB    16
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_CONTROL_REG_16_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_PRE_SCALAR_VALUE_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_PRE_SCALAR_VALUE_LSB    8
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_PRE_SCALAR_VALUE_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_CONTROL_REG_5_BITS_ARE_RESERVED_MASK    ((uint32_t)0x000000F8)
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_CONTROL_REG_5_BITS_ARE_RESERVED_LSB    3
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_CONTROL_REG_5_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_UP_OR_DOWN_COUNTING_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_UP_OR_DOWN_COUNTING_POS    2
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_ONESHOT_OR_CYCLIC_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_ONESHOT_OR_CYCLIC_POS    1
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_TIMER_ENABLE_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_TIMER_ENABLE_POS    0

#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_CONTROL_REG_16_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_PRE_SCALAR_VALUE_RST    0x0
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_CONTROL_REG_5_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_UP_OR_DOWN_COUNTING_RST    0x1
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_ONESHOT_OR_CYCLIC_RST    0x0
#define BT_CONTROLLER_TIMER_6_CONTROL_REG_TIMER_6_TIMER_ENABLE_RST    0x0

__INLINE void bt_controller_timer_6_control_reg_pack(uint16_t timer6_control_reg_16_bits_are_reserved, uint8_t timer6_pre_scalar_value, uint8_t timer6_control_reg_5_bits_are_reserved, uint8_t timer6_up_or_down_counting, uint8_t timer6_oneshot_or_cyclic, uint8_t timer6_timer_enable)
{
	ASSERT_ERR((((uint32_t)timer6_control_reg_16_bits_are_reserved << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)timer6_pre_scalar_value << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)timer6_control_reg_5_bits_are_reserved << 3) & ~((uint32_t)0x000000F8)) == 0);
	ASSERT_ERR((((uint32_t)timer6_up_or_down_counting << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)timer6_oneshot_or_cyclic << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)timer6_timer_enable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR,  ((uint32_t)timer6_control_reg_16_bits_are_reserved << 16) |((uint32_t)timer6_pre_scalar_value << 8) |((uint32_t)timer6_control_reg_5_bits_are_reserved << 3) |((uint32_t)timer6_up_or_down_counting << 2) |((uint32_t)timer6_oneshot_or_cyclic << 1) |((uint32_t)timer6_timer_enable << 0));
}

__INLINE void bt_controller_timer_6_control_reg_unpack(uint16_t* timer6_control_reg_16_bits_are_reserved, uint8_t* timer6_pre_scalar_value, uint8_t* timer6_control_reg_5_bits_are_reserved, uint8_t* timer6_up_or_down_counting, uint8_t* timer6_oneshot_or_cyclic, uint8_t* timer6_timer_enable)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR);

	*timer6_control_reg_16_bits_are_reserved = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*timer6_pre_scalar_value = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*timer6_control_reg_5_bits_are_reserved = (localVal & ((uint32_t)0x000000F8)) >>  3;
	*timer6_up_or_down_counting = (localVal & ((uint32_t)0x00000004)) >>  2;
	*timer6_oneshot_or_cyclic = (localVal & ((uint32_t)0x00000002)) >>  1;
	*timer6_timer_enable = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_timer_6_control_reg_timer_6_control_reg_16_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t bt_controller_timer_6_control_reg_timer_6_pre_scalar_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_timer_6_control_reg_timer_6_pre_scalar_value_setf(uint8_t timer6prescalarvalue)
{
	ASSERT_ERR((((uint32_t)timer6prescalarvalue << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)timer6prescalarvalue <<8));
}
__INLINE uint8_t bt_controller_timer_6_control_reg_timer_6_control_reg_5_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F8)) >> 3);
}
__INLINE uint8_t bt_controller_timer_6_control_reg_timer_6_up_or_down_counting_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_timer_6_control_reg_timer_6_up_or_down_counting_setf(uint8_t timer6upordowncounting)
{
	ASSERT_ERR((((uint32_t)timer6upordowncounting << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)timer6upordowncounting <<2));
}
__INLINE uint8_t bt_controller_timer_6_control_reg_timer_6_oneshot_or_cyclic_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_timer_6_control_reg_timer_6_oneshot_or_cyclic_setf(uint8_t timer6oneshotorcyclic)
{
	ASSERT_ERR((((uint32_t)timer6oneshotorcyclic << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)timer6oneshotorcyclic <<1));
}
__INLINE uint8_t bt_controller_timer_6_control_reg_timer_6_timer_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_timer_6_control_reg_timer_6_timer_enable_setf(uint8_t timer6timerenable)
{
	ASSERT_ERR((((uint32_t)timer6timerenable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_6_CONTROL_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timer6timerenable <<0));
}

/**
 * @brief TIMER_6_STATUS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:02 timer6_status_reg_30_bits_are_reserved 0x0
 *    01    timer6_Timer_running      0              
 *    00    timer6_Timer_expired      0              
 * </pre>
 */
#define BT_CONTROLLER_TIMER_6_STATUS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000486C)
#define BT_CONTROLLER_TIMER_6_STATUS_REG_OFFSET      0x0000486C
#define BT_CONTROLLER_TIMER_6_STATUS_REG_INDEX       0x0000121B
#define BT_CONTROLLER_TIMER_6_STATUS_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_timer_6_status_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_6_STATUS_REG_ADDR);
}

__INLINE void bt_controller_timer_6_status_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_6_STATUS_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_6_STATUS_REG_TIMER_6_STATUS_REG_30_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFFFFC)
#define BT_CONTROLLER_TIMER_6_STATUS_REG_TIMER_6_STATUS_REG_30_BITS_ARE_RESERVED_LSB    2
#define BT_CONTROLLER_TIMER_6_STATUS_REG_TIMER_6_STATUS_REG_30_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000001E)
#define BT_CONTROLLER_TIMER_6_STATUS_REG_TIMER_6_TIMER_RUNNING_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TIMER_6_STATUS_REG_TIMER_6_TIMER_RUNNING_POS    1
#define BT_CONTROLLER_TIMER_6_STATUS_REG_TIMER_6_TIMER_EXPIRED_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TIMER_6_STATUS_REG_TIMER_6_TIMER_EXPIRED_POS    0

#define BT_CONTROLLER_TIMER_6_STATUS_REG_TIMER_6_STATUS_REG_30_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_6_STATUS_REG_TIMER_6_TIMER_RUNNING_RST    0x0
#define BT_CONTROLLER_TIMER_6_STATUS_REG_TIMER_6_TIMER_EXPIRED_RST    0x0

__INLINE void bt_controller_timer_6_status_reg_pack(uint32_t timer6_status_reg_30_bits_are_reserved, uint8_t timer6_timer_running, uint8_t timer6_timer_expired)
{
	ASSERT_ERR((((uint32_t)timer6_status_reg_30_bits_are_reserved << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	ASSERT_ERR((((uint32_t)timer6_timer_running << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)timer6_timer_expired << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_6_STATUS_REG_ADDR,  ((uint32_t)timer6_status_reg_30_bits_are_reserved << 2) |((uint32_t)timer6_timer_running << 1) |((uint32_t)timer6_timer_expired << 0));
}

__INLINE void bt_controller_timer_6_status_reg_unpack(uint32_t* timer6_status_reg_30_bits_are_reserved, uint8_t* timer6_timer_running, uint8_t* timer6_timer_expired)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_6_STATUS_REG_ADDR);

	*timer6_status_reg_30_bits_are_reserved = (localVal & ((uint32_t)0xFFFFFFFC)) >>  2;
	*timer6_timer_running = (localVal & ((uint32_t)0x00000002)) >>  1;
	*timer6_timer_expired = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t bt_controller_timer_6_status_reg_timer_6_status_reg_30_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_6_STATUS_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFFC)) >> 2);
}
__INLINE uint8_t bt_controller_timer_6_status_reg_timer_6_timer_running_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_6_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_timer_6_status_reg_timer_6_timer_running_setf(uint8_t timer6timerrunning)
{
	ASSERT_ERR((((uint32_t)timer6timerrunning << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_6_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_6_STATUS_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)timer6timerrunning <<1));
}
__INLINE uint8_t bt_controller_timer_6_status_reg_timer_6_timer_expired_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_6_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_timer_6_status_reg_timer_6_timer_expired_setf(uint8_t timer6timerexpired)
{
	ASSERT_ERR((((uint32_t)timer6timerexpired << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_6_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_6_STATUS_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timer6timerexpired <<0));
}

/**
 * @brief TIMER_7_LOAD_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer7_Terminal_count_31_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_TIMER_7_LOAD_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004870)
#define BT_CONTROLLER_TIMER_7_LOAD_REG_OFFSET      0x00004870
#define BT_CONTROLLER_TIMER_7_LOAD_REG_INDEX       0x0000121C
#define BT_CONTROLLER_TIMER_7_LOAD_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_timer_7_load_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_7_LOAD_REG_ADDR);
}

__INLINE void bt_controller_timer_7_load_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_7_LOAD_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_7_LOAD_REG_TIMER_7_TERMINAL_COUNT_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TIMER_7_LOAD_REG_TIMER_7_TERMINAL_COUNT_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TIMER_7_LOAD_REG_TIMER_7_TERMINAL_COUNT_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TIMER_7_LOAD_REG_TIMER_7_TERMINAL_COUNT_31_DOWNTO_0_RST    0x0

__INLINE uint32_t bt_controller_timer_7_load_reg_timer_7_terminal_count_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_7_LOAD_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_timer_7_load_reg_timer_7_terminal_count_31_downto_0_setf(uint32_t timer7terminalcount31downto0)
{
	ASSERT_ERR((((uint32_t)timer7terminalcount31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_7_LOAD_REG_ADDR, (uint32_t)timer7terminalcount31downto0 << 0);
}

/**
 * @brief TIMER_7_COUNT_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 timer7_Present_count_31_downto_0 0xFFFFFFFF
 * </pre>
 */
#define BT_CONTROLLER_TIMER_7_COUNT_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004874)
#define BT_CONTROLLER_TIMER_7_COUNT_REG_OFFSET      0x00004874
#define BT_CONTROLLER_TIMER_7_COUNT_REG_INDEX       0x0000121D
#define BT_CONTROLLER_TIMER_7_COUNT_REG_RESET       0xFFFFFFFF

__INLINE uint32_t  bt_controller_timer_7_count_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_7_COUNT_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_TIMER_7_COUNT_REG_TIMER_7_PRESENT_COUNT_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TIMER_7_COUNT_REG_TIMER_7_PRESENT_COUNT_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_TIMER_7_COUNT_REG_TIMER_7_PRESENT_COUNT_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TIMER_7_COUNT_REG_TIMER_7_PRESENT_COUNT_31_DOWNTO_0_RST    0xFFFFFFFF

__INLINE uint32_t bt_controller_timer_7_count_reg_timer_7_present_count_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_7_COUNT_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief TIMER_7_CONTROL_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 timer7_control_reg_16_bits_are_reserved 0x0
 *    15:08 timer7_Pre_Scalar_value   0x0
 *    07:03 timer7_control_reg_5_bits_are_reserved 0x0
 *    02    timer7_UP_or_Down_Counting 1              
 *    01    timer7_Oneshot_or_Cyclic  0              
 *    00    timer7_timer_enable       0              
 * </pre>
 */
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004878)
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_OFFSET      0x00004878
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_INDEX       0x0000121E
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_RESET       0x00000004

__INLINE uint32_t  bt_controller_timer_7_control_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR);
}

__INLINE void bt_controller_timer_7_control_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_CONTROL_REG_16_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_CONTROL_REG_16_BITS_ARE_RESERVED_LSB    16
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_CONTROL_REG_16_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_PRE_SCALAR_VALUE_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_PRE_SCALAR_VALUE_LSB    8
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_PRE_SCALAR_VALUE_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_CONTROL_REG_5_BITS_ARE_RESERVED_MASK    ((uint32_t)0x000000F8)
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_CONTROL_REG_5_BITS_ARE_RESERVED_LSB    3
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_CONTROL_REG_5_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_UP_OR_DOWN_COUNTING_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_UP_OR_DOWN_COUNTING_POS    2
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_ONESHOT_OR_CYCLIC_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_ONESHOT_OR_CYCLIC_POS    1
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_TIMER_ENABLE_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_TIMER_ENABLE_POS    0

#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_CONTROL_REG_16_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_PRE_SCALAR_VALUE_RST    0x0
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_CONTROL_REG_5_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_UP_OR_DOWN_COUNTING_RST    0x1
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_ONESHOT_OR_CYCLIC_RST    0x0
#define BT_CONTROLLER_TIMER_7_CONTROL_REG_TIMER_7_TIMER_ENABLE_RST    0x0

__INLINE void bt_controller_timer_7_control_reg_pack(uint16_t timer7_control_reg_16_bits_are_reserved, uint8_t timer7_pre_scalar_value, uint8_t timer7_control_reg_5_bits_are_reserved, uint8_t timer7_up_or_down_counting, uint8_t timer7_oneshot_or_cyclic, uint8_t timer7_timer_enable)
{
	ASSERT_ERR((((uint32_t)timer7_control_reg_16_bits_are_reserved << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)timer7_pre_scalar_value << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)timer7_control_reg_5_bits_are_reserved << 3) & ~((uint32_t)0x000000F8)) == 0);
	ASSERT_ERR((((uint32_t)timer7_up_or_down_counting << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)timer7_oneshot_or_cyclic << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)timer7_timer_enable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR,  ((uint32_t)timer7_control_reg_16_bits_are_reserved << 16) |((uint32_t)timer7_pre_scalar_value << 8) |((uint32_t)timer7_control_reg_5_bits_are_reserved << 3) |((uint32_t)timer7_up_or_down_counting << 2) |((uint32_t)timer7_oneshot_or_cyclic << 1) |((uint32_t)timer7_timer_enable << 0));
}

__INLINE void bt_controller_timer_7_control_reg_unpack(uint16_t* timer7_control_reg_16_bits_are_reserved, uint8_t* timer7_pre_scalar_value, uint8_t* timer7_control_reg_5_bits_are_reserved, uint8_t* timer7_up_or_down_counting, uint8_t* timer7_oneshot_or_cyclic, uint8_t* timer7_timer_enable)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR);

	*timer7_control_reg_16_bits_are_reserved = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*timer7_pre_scalar_value = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*timer7_control_reg_5_bits_are_reserved = (localVal & ((uint32_t)0x000000F8)) >>  3;
	*timer7_up_or_down_counting = (localVal & ((uint32_t)0x00000004)) >>  2;
	*timer7_oneshot_or_cyclic = (localVal & ((uint32_t)0x00000002)) >>  1;
	*timer7_timer_enable = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_timer_7_control_reg_timer_7_control_reg_16_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t bt_controller_timer_7_control_reg_timer_7_pre_scalar_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_timer_7_control_reg_timer_7_pre_scalar_value_setf(uint8_t timer7prescalarvalue)
{
	ASSERT_ERR((((uint32_t)timer7prescalarvalue << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)timer7prescalarvalue <<8));
}
__INLINE uint8_t bt_controller_timer_7_control_reg_timer_7_control_reg_5_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000F8)) >> 3);
}
__INLINE uint8_t bt_controller_timer_7_control_reg_timer_7_up_or_down_counting_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_timer_7_control_reg_timer_7_up_or_down_counting_setf(uint8_t timer7upordowncounting)
{
	ASSERT_ERR((((uint32_t)timer7upordowncounting << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)timer7upordowncounting <<2));
}
__INLINE uint8_t bt_controller_timer_7_control_reg_timer_7_oneshot_or_cyclic_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_timer_7_control_reg_timer_7_oneshot_or_cyclic_setf(uint8_t timer7oneshotorcyclic)
{
	ASSERT_ERR((((uint32_t)timer7oneshotorcyclic << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)timer7oneshotorcyclic <<1));
}
__INLINE uint8_t bt_controller_timer_7_control_reg_timer_7_timer_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_timer_7_control_reg_timer_7_timer_enable_setf(uint8_t timer7timerenable)
{
	ASSERT_ERR((((uint32_t)timer7timerenable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_7_CONTROL_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timer7timerenable <<0));
}

/**
 * @brief TIMER_7_STATUS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:02 timer7_status_reg_30_bits_are_reserved 0x0
 *    01    timer7_Timer_running      0              
 *    00    timer7_Timer_expired      0              
 * </pre>
 */
#define BT_CONTROLLER_TIMER_7_STATUS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000487C)
#define BT_CONTROLLER_TIMER_7_STATUS_REG_OFFSET      0x0000487C
#define BT_CONTROLLER_TIMER_7_STATUS_REG_INDEX       0x0000121F
#define BT_CONTROLLER_TIMER_7_STATUS_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_timer_7_status_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TIMER_7_STATUS_REG_ADDR);
}

__INLINE void bt_controller_timer_7_status_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TIMER_7_STATUS_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TIMER_7_STATUS_REG_TIMER_7_STATUS_REG_30_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFFFFC)
#define BT_CONTROLLER_TIMER_7_STATUS_REG_TIMER_7_STATUS_REG_30_BITS_ARE_RESERVED_LSB    2
#define BT_CONTROLLER_TIMER_7_STATUS_REG_TIMER_7_STATUS_REG_30_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000001E)
#define BT_CONTROLLER_TIMER_7_STATUS_REG_TIMER_7_TIMER_RUNNING_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TIMER_7_STATUS_REG_TIMER_7_TIMER_RUNNING_POS    1
#define BT_CONTROLLER_TIMER_7_STATUS_REG_TIMER_7_TIMER_EXPIRED_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TIMER_7_STATUS_REG_TIMER_7_TIMER_EXPIRED_POS    0

#define BT_CONTROLLER_TIMER_7_STATUS_REG_TIMER_7_STATUS_REG_30_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TIMER_7_STATUS_REG_TIMER_7_TIMER_RUNNING_RST    0x0
#define BT_CONTROLLER_TIMER_7_STATUS_REG_TIMER_7_TIMER_EXPIRED_RST    0x0

__INLINE void bt_controller_timer_7_status_reg_pack(uint32_t timer7_status_reg_30_bits_are_reserved, uint8_t timer7_timer_running, uint8_t timer7_timer_expired)
{
	ASSERT_ERR((((uint32_t)timer7_status_reg_30_bits_are_reserved << 2) & ~((uint32_t)0xFFFFFFFC)) == 0);
	ASSERT_ERR((((uint32_t)timer7_timer_running << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)timer7_timer_expired << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_7_STATUS_REG_ADDR,  ((uint32_t)timer7_status_reg_30_bits_are_reserved << 2) |((uint32_t)timer7_timer_running << 1) |((uint32_t)timer7_timer_expired << 0));
}

__INLINE void bt_controller_timer_7_status_reg_unpack(uint32_t* timer7_status_reg_30_bits_are_reserved, uint8_t* timer7_timer_running, uint8_t* timer7_timer_expired)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_7_STATUS_REG_ADDR);

	*timer7_status_reg_30_bits_are_reserved = (localVal & ((uint32_t)0xFFFFFFFC)) >>  2;
	*timer7_timer_running = (localVal & ((uint32_t)0x00000002)) >>  1;
	*timer7_timer_expired = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t bt_controller_timer_7_status_reg_timer_7_status_reg_30_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_7_STATUS_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFFC)) >> 2);
}
__INLINE uint8_t bt_controller_timer_7_status_reg_timer_7_timer_running_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_7_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_timer_7_status_reg_timer_7_timer_running_setf(uint8_t timer7timerrunning)
{
	ASSERT_ERR((((uint32_t)timer7timerrunning << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_7_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_7_STATUS_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)timer7timerrunning <<1));
}
__INLINE uint8_t bt_controller_timer_7_status_reg_timer_7_timer_expired_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TIMER_7_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_timer_7_status_reg_timer_7_timer_expired_setf(uint8_t timer7timerexpired)
{
	ASSERT_ERR((((uint32_t)timer7timerexpired << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TIMER_7_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TIMER_7_STATUS_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)timer7timerexpired <<0));
}

/**
 * @brief ENCRYPTION_KEY_0_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 Encryption_or_Decryption_Key0 0x0
 * </pre>
 */
#define BT_CONTROLLER_ENCRYPTION_KEY_0_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004A00)
#define BT_CONTROLLER_ENCRYPTION_KEY_0_REG_OFFSET      0x00004A00
#define BT_CONTROLLER_ENCRYPTION_KEY_0_REG_INDEX       0x00001280
#define BT_CONTROLLER_ENCRYPTION_KEY_0_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_encryption_key_0_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ENCRYPTION_KEY_0_REG_ADDR);
}

__INLINE void bt_controller_encryption_key_0_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ENCRYPTION_KEY_0_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ENCRYPTION_KEY_0_REG_ENCRYPTION_OR_DECRYPTION_KEY_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_ENCRYPTION_KEY_0_REG_ENCRYPTION_OR_DECRYPTION_KEY_0_LSB    0
#define BT_CONTROLLER_ENCRYPTION_KEY_0_REG_ENCRYPTION_OR_DECRYPTION_KEY_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_ENCRYPTION_KEY_0_REG_ENCRYPTION_OR_DECRYPTION_KEY_0_RST    0x0

__INLINE uint32_t bt_controller_encryption_key_0_reg_encryption_or_decryption_key_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENCRYPTION_KEY_0_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_encryption_key_0_reg_encryption_or_decryption_key_0_setf(uint32_t encryptionordecryptionkey0)
{
	ASSERT_ERR((((uint32_t)encryptionordecryptionkey0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENCRYPTION_KEY_0_REG_ADDR, (uint32_t)encryptionordecryptionkey0 << 0);
}

/**
 * @brief ENCRYPTION_KEY_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 Encryption_or_Decryption_Key1 0x0
 * </pre>
 */
#define BT_CONTROLLER_ENCRYPTION_KEY_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004A04)
#define BT_CONTROLLER_ENCRYPTION_KEY_1_REG_OFFSET      0x00004A04
#define BT_CONTROLLER_ENCRYPTION_KEY_1_REG_INDEX       0x00001281
#define BT_CONTROLLER_ENCRYPTION_KEY_1_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_encryption_key_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ENCRYPTION_KEY_1_REG_ADDR);
}

__INLINE void bt_controller_encryption_key_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ENCRYPTION_KEY_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ENCRYPTION_KEY_1_REG_ENCRYPTION_OR_DECRYPTION_KEY_1_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_ENCRYPTION_KEY_1_REG_ENCRYPTION_OR_DECRYPTION_KEY_1_LSB    0
#define BT_CONTROLLER_ENCRYPTION_KEY_1_REG_ENCRYPTION_OR_DECRYPTION_KEY_1_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_ENCRYPTION_KEY_1_REG_ENCRYPTION_OR_DECRYPTION_KEY_1_RST    0x0

__INLINE uint32_t bt_controller_encryption_key_1_reg_encryption_or_decryption_key_1_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENCRYPTION_KEY_1_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_encryption_key_1_reg_encryption_or_decryption_key_1_setf(uint32_t encryptionordecryptionkey1)
{
	ASSERT_ERR((((uint32_t)encryptionordecryptionkey1 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENCRYPTION_KEY_1_REG_ADDR, (uint32_t)encryptionordecryptionkey1 << 0);
}

/**
 * @brief ENCRYPTION_KEY_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 Encryption_or_Decryption_Key2 0x0
 * </pre>
 */
#define BT_CONTROLLER_ENCRYPTION_KEY_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004A08)
#define BT_CONTROLLER_ENCRYPTION_KEY_2_REG_OFFSET      0x00004A08
#define BT_CONTROLLER_ENCRYPTION_KEY_2_REG_INDEX       0x00001282
#define BT_CONTROLLER_ENCRYPTION_KEY_2_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_encryption_key_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ENCRYPTION_KEY_2_REG_ADDR);
}

__INLINE void bt_controller_encryption_key_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ENCRYPTION_KEY_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ENCRYPTION_KEY_2_REG_ENCRYPTION_OR_DECRYPTION_KEY_2_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_ENCRYPTION_KEY_2_REG_ENCRYPTION_OR_DECRYPTION_KEY_2_LSB    0
#define BT_CONTROLLER_ENCRYPTION_KEY_2_REG_ENCRYPTION_OR_DECRYPTION_KEY_2_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_ENCRYPTION_KEY_2_REG_ENCRYPTION_OR_DECRYPTION_KEY_2_RST    0x0

__INLINE uint32_t bt_controller_encryption_key_2_reg_encryption_or_decryption_key_2_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENCRYPTION_KEY_2_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_encryption_key_2_reg_encryption_or_decryption_key_2_setf(uint32_t encryptionordecryptionkey2)
{
	ASSERT_ERR((((uint32_t)encryptionordecryptionkey2 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENCRYPTION_KEY_2_REG_ADDR, (uint32_t)encryptionordecryptionkey2 << 0);
}

/**
 * @brief ENCRYPTION_KEY_3_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 Encryption_or_Decryption_Key3 0x0
 * </pre>
 */
#define BT_CONTROLLER_ENCRYPTION_KEY_3_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004A0C)
#define BT_CONTROLLER_ENCRYPTION_KEY_3_REG_OFFSET      0x00004A0C
#define BT_CONTROLLER_ENCRYPTION_KEY_3_REG_INDEX       0x00001283
#define BT_CONTROLLER_ENCRYPTION_KEY_3_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_encryption_key_3_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ENCRYPTION_KEY_3_REG_ADDR);
}

__INLINE void bt_controller_encryption_key_3_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_ENCRYPTION_KEY_3_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_ENCRYPTION_KEY_3_REG_ENCRYPTION_OR_DECRYPTION_KEY_3_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_ENCRYPTION_KEY_3_REG_ENCRYPTION_OR_DECRYPTION_KEY_3_LSB    0
#define BT_CONTROLLER_ENCRYPTION_KEY_3_REG_ENCRYPTION_OR_DECRYPTION_KEY_3_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_ENCRYPTION_KEY_3_REG_ENCRYPTION_OR_DECRYPTION_KEY_3_RST    0x0

__INLINE uint32_t bt_controller_encryption_key_3_reg_encryption_or_decryption_key_3_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENCRYPTION_KEY_3_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_encryption_key_3_reg_encryption_or_decryption_key_3_setf(uint32_t encryptionordecryptionkey3)
{
	ASSERT_ERR((((uint32_t)encryptionordecryptionkey3 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_ENCRYPTION_KEY_3_REG_ADDR, (uint32_t)encryptionordecryptionkey3 << 0);
}

/**
 * @brief PACKET_COUNTER_0_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 Packet_counter0_value_bits 0x0
 * </pre>
 */
#define BT_CONTROLLER_PACKET_COUNTER_0_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004A10)
#define BT_CONTROLLER_PACKET_COUNTER_0_REG_OFFSET      0x00004A10
#define BT_CONTROLLER_PACKET_COUNTER_0_REG_INDEX       0x00001284
#define BT_CONTROLLER_PACKET_COUNTER_0_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_packet_counter_0_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PACKET_COUNTER_0_REG_ADDR);
}

__INLINE void bt_controller_packet_counter_0_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PACKET_COUNTER_0_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PACKET_COUNTER_0_REG_PACKET_COUNTER_0_VALUE_BITS_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_PACKET_COUNTER_0_REG_PACKET_COUNTER_0_VALUE_BITS_LSB    0
#define BT_CONTROLLER_PACKET_COUNTER_0_REG_PACKET_COUNTER_0_VALUE_BITS_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_PACKET_COUNTER_0_REG_PACKET_COUNTER_0_VALUE_BITS_RST    0x0

__INLINE uint32_t bt_controller_packet_counter_0_reg_packet_counter_0_value_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PACKET_COUNTER_0_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_packet_counter_0_reg_packet_counter_0_value_bits_setf(uint32_t packetcounter0valuebits)
{
	ASSERT_ERR((((uint32_t)packetcounter0valuebits << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PACKET_COUNTER_0_REG_ADDR, (uint32_t)packetcounter0valuebits << 0);
}

/**
 * @brief PACKET_COUNTER_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:08 packet_counter1_31_8_bits_are_reserved 0x0
 *    07:00 Packet_counter1_value_bits 0x0
 * </pre>
 */
#define BT_CONTROLLER_PACKET_COUNTER_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004A14)
#define BT_CONTROLLER_PACKET_COUNTER_1_REG_OFFSET      0x00004A14
#define BT_CONTROLLER_PACKET_COUNTER_1_REG_INDEX       0x00001285
#define BT_CONTROLLER_PACKET_COUNTER_1_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_packet_counter_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PACKET_COUNTER_1_REG_ADDR);
}

__INLINE void bt_controller_packet_counter_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PACKET_COUNTER_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PACKET_COUNTER_1_REG_PACKET_COUNTER_1_31_8_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFFF00)
#define BT_CONTROLLER_PACKET_COUNTER_1_REG_PACKET_COUNTER_1_31_8_BITS_ARE_RESERVED_LSB    8
#define BT_CONTROLLER_PACKET_COUNTER_1_REG_PACKET_COUNTER_1_31_8_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000018)
#define BT_CONTROLLER_PACKET_COUNTER_1_REG_PACKET_COUNTER_1_VALUE_BITS_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_PACKET_COUNTER_1_REG_PACKET_COUNTER_1_VALUE_BITS_LSB    0
#define BT_CONTROLLER_PACKET_COUNTER_1_REG_PACKET_COUNTER_1_VALUE_BITS_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_PACKET_COUNTER_1_REG_PACKET_COUNTER_1_31_8_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_PACKET_COUNTER_1_REG_PACKET_COUNTER_1_VALUE_BITS_RST    0x0

__INLINE void bt_controller_packet_counter_1_reg_pack(uint32_t packet_counter1_31_8_bits_are_reserved, uint8_t packet_counter1_value_bits)
{
	ASSERT_ERR((((uint32_t)packet_counter1_31_8_bits_are_reserved << 8) & ~((uint32_t)0xFFFFFF00)) == 0);
	ASSERT_ERR((((uint32_t)packet_counter1_value_bits << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PACKET_COUNTER_1_REG_ADDR,  ((uint32_t)packet_counter1_31_8_bits_are_reserved << 8) |((uint32_t)packet_counter1_value_bits << 0));
}

__INLINE void bt_controller_packet_counter_1_reg_unpack(uint32_t* packet_counter1_31_8_bits_are_reserved, uint8_t* packet_counter1_value_bits)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PACKET_COUNTER_1_REG_ADDR);

	*packet_counter1_31_8_bits_are_reserved = (localVal & ((uint32_t)0xFFFFFF00)) >>  8;
	*packet_counter1_value_bits = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint32_t bt_controller_packet_counter_1_reg_packet_counter_1_31_8_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PACKET_COUNTER_1_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFF00)) >> 8);
}
__INLINE uint8_t bt_controller_packet_counter_1_reg_packet_counter_1_value_bits_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PACKET_COUNTER_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FF)) >> 0);
}
__INLINE void bt_controller_packet_counter_1_reg_packet_counter_1_value_bits_setf(uint8_t packetcounter1valuebits)
{
	ASSERT_ERR((((uint32_t)packetcounter1valuebits << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PACKET_COUNTER_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PACKET_COUNTER_1_REG_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)packetcounter1valuebits <<0));
}

/**
 * @brief INIT_IV_MASTER_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IV_For_Master             0x0
 * </pre>
 */
#define BT_CONTROLLER_INIT_IV_MASTER_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004A18)
#define BT_CONTROLLER_INIT_IV_MASTER_REG_OFFSET      0x00004A18
#define BT_CONTROLLER_INIT_IV_MASTER_REG_INDEX       0x00001286
#define BT_CONTROLLER_INIT_IV_MASTER_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_init_iv_master_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_INIT_IV_MASTER_REG_ADDR);
}

__INLINE void bt_controller_init_iv_master_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_INIT_IV_MASTER_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_INIT_IV_MASTER_REG_IV_FOR_MASTER_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_INIT_IV_MASTER_REG_IV_FOR_MASTER_LSB    0
#define BT_CONTROLLER_INIT_IV_MASTER_REG_IV_FOR_MASTER_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_INIT_IV_MASTER_REG_IV_FOR_MASTER_RST    0x0

__INLINE uint32_t bt_controller_init_iv_master_reg_iv_for_master_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INIT_IV_MASTER_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_init_iv_master_reg_iv_for_master_setf(uint32_t ivformaster)
{
	ASSERT_ERR((((uint32_t)ivformaster << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_INIT_IV_MASTER_REG_ADDR, (uint32_t)ivformaster << 0);
}

/**
 * @brief INIT_IV_SLAVE_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IV_For_Slave              0x0
 * </pre>
 */
#define BT_CONTROLLER_INIT_IV_SLAVE_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004A1C)
#define BT_CONTROLLER_INIT_IV_SLAVE_REG_OFFSET      0x00004A1C
#define BT_CONTROLLER_INIT_IV_SLAVE_REG_INDEX       0x00001287
#define BT_CONTROLLER_INIT_IV_SLAVE_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_init_iv_slave_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_INIT_IV_SLAVE_REG_ADDR);
}

__INLINE void bt_controller_init_iv_slave_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_INIT_IV_SLAVE_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_INIT_IV_SLAVE_REG_IV_FOR_SLAVE_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_INIT_IV_SLAVE_REG_IV_FOR_SLAVE_LSB    0
#define BT_CONTROLLER_INIT_IV_SLAVE_REG_IV_FOR_SLAVE_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_INIT_IV_SLAVE_REG_IV_FOR_SLAVE_RST    0x0

__INLINE uint32_t bt_controller_init_iv_slave_reg_iv_for_slave_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INIT_IV_SLAVE_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_init_iv_slave_reg_iv_for_slave_setf(uint32_t ivforslave)
{
	ASSERT_ERR((((uint32_t)ivforslave << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_INIT_IV_SLAVE_REG_ADDR, (uint32_t)ivforslave << 0);
}

/**
 * @brief ENC_PARAM_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 Length_of_authentication_data 0x0
 *    23:16 Length_on_Input_Data      0x0
 *    15    Selection_Bit             0              
 *    14:11 enc_param_reg_14_11_bits_are_reserved 0x0
 *    10    ENC_Direction_bit         0              
 *    09:02 Length_of_input_data      0x0
 *    01:00 LLID_for_PDU              0x0
 * </pre>
 */
#define BT_CONTROLLER_ENC_PARAM_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004A20)
#define BT_CONTROLLER_ENC_PARAM_REG_OFFSET      0x00004A20
#define BT_CONTROLLER_ENC_PARAM_REG_INDEX       0x00001288
#define BT_CONTROLLER_ENC_PARAM_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_enc_param_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ENC_PARAM_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_ENC_PARAM_REG_LENGTH_OF_AUTHENTICATION_DATA_MASK    ((uint32_t)0xFF000000)
#define BT_CONTROLLER_ENC_PARAM_REG_LENGTH_OF_AUTHENTICATION_DATA_LSB    24
#define BT_CONTROLLER_ENC_PARAM_REG_LENGTH_OF_AUTHENTICATION_DATA_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_ENC_PARAM_REG_LENGTH_ON_INPUT_DATA_MASK    ((uint32_t)0x00FF0000)
#define BT_CONTROLLER_ENC_PARAM_REG_LENGTH_ON_INPUT_DATA_LSB    16
#define BT_CONTROLLER_ENC_PARAM_REG_LENGTH_ON_INPUT_DATA_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_ENC_PARAM_REG_SELECTION_BIT_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_ENC_PARAM_REG_SELECTION_BIT_POS    15
#define BT_CONTROLLER_ENC_PARAM_REG_ENC_PARAM_REG_14_11_BITS_ARE_RESERVED_MASK    ((uint32_t)0x00007800)
#define BT_CONTROLLER_ENC_PARAM_REG_ENC_PARAM_REG_14_11_BITS_ARE_RESERVED_LSB    11
#define BT_CONTROLLER_ENC_PARAM_REG_ENC_PARAM_REG_14_11_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_ENC_PARAM_REG_ENC_DIRECTION_BIT_BIT    ((uint32_t)0x00000400)
#define BT_CONTROLLER_ENC_PARAM_REG_ENC_DIRECTION_BIT_POS    10
#define BT_CONTROLLER_ENC_PARAM_REG_LENGTH_OF_INPUT_DATA_MASK    ((uint32_t)0x000003FC)
#define BT_CONTROLLER_ENC_PARAM_REG_LENGTH_OF_INPUT_DATA_LSB    2
#define BT_CONTROLLER_ENC_PARAM_REG_LENGTH_OF_INPUT_DATA_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_ENC_PARAM_REG_LLID_FOR_PDU_MASK    ((uint32_t)0x00000003)
#define BT_CONTROLLER_ENC_PARAM_REG_LLID_FOR_PDU_LSB    0
#define BT_CONTROLLER_ENC_PARAM_REG_LLID_FOR_PDU_WIDTH    ((uint32_t)0x00000002)

#define BT_CONTROLLER_ENC_PARAM_REG_LENGTH_OF_AUTHENTICATION_DATA_RST    0x0
#define BT_CONTROLLER_ENC_PARAM_REG_LENGTH_ON_INPUT_DATA_RST    0x0
#define BT_CONTROLLER_ENC_PARAM_REG_SELECTION_BIT_RST    0x0
#define BT_CONTROLLER_ENC_PARAM_REG_ENC_PARAM_REG_14_11_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_ENC_PARAM_REG_ENC_DIRECTION_BIT_RST    0x0
#define BT_CONTROLLER_ENC_PARAM_REG_LENGTH_OF_INPUT_DATA_RST    0x0
#define BT_CONTROLLER_ENC_PARAM_REG_LLID_FOR_PDU_RST    0x0

__INLINE void bt_controller_enc_param_reg_unpack(uint8_t* length_of_authentication_data, uint8_t* length_on_input_data, uint8_t* selection_bit, uint8_t* enc_param_reg_14_11_bits_are_reserved, uint8_t* enc_direction_bit, uint8_t* length_of_input_data, uint8_t* llid_for_pdu)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENC_PARAM_REG_ADDR);

	*length_of_authentication_data = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*length_on_input_data = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*selection_bit = (localVal & ((uint32_t)0x00008000)) >>  15;
	*enc_param_reg_14_11_bits_are_reserved = (localVal & ((uint32_t)0x00007800)) >>  11;
	*enc_direction_bit = (localVal & ((uint32_t)0x00000400)) >>  10;
	*length_of_input_data = (localVal & ((uint32_t)0x000003FC)) >>  2;
	*llid_for_pdu = (localVal & ((uint32_t)0x00000003)) >>  0;
}

__INLINE uint8_t bt_controller_enc_param_reg_length_of_authentication_data_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENC_PARAM_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE uint8_t bt_controller_enc_param_reg_length_on_input_data_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENC_PARAM_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE uint8_t bt_controller_enc_param_reg_selection_bit_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENC_PARAM_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE uint8_t bt_controller_enc_param_reg_enc_param_reg_14_11_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENC_PARAM_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00007800)) >> 11);
}
__INLINE uint8_t bt_controller_enc_param_reg_enc_direction_bit_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENC_PARAM_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE uint8_t bt_controller_enc_param_reg_length_of_input_data_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENC_PARAM_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000003FC)) >> 2);
}
__INLINE uint8_t bt_controller_enc_param_reg_llid_for_pdu_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENC_PARAM_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000003)) >> 0);
}

/**
 * @brief ENC_CONFIG_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:05 enc_config_reg_31_to_5_bits_are_reserved 0x0
 *    04    Enable_for_AES_Direct_Transmission 0              
 *    03    Enable_for_AES_Direct_Reception 0              
 *    02    Encrypt_or_Decrypt        0              
 *    01    ECB_or_CCM                0              
 *    00    Start_of_AES              0              
 * </pre>
 */
#define BT_CONTROLLER_ENC_CONFIG_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004A24)
#define BT_CONTROLLER_ENC_CONFIG_REG_OFFSET      0x00004A24
#define BT_CONTROLLER_ENC_CONFIG_REG_INDEX       0x00001289
#define BT_CONTROLLER_ENC_CONFIG_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_enc_config_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ENC_CONFIG_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_ENC_CONFIG_REG_ENC_CONFIG_REG_31_TO_5_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFFFE0)
#define BT_CONTROLLER_ENC_CONFIG_REG_ENC_CONFIG_REG_31_TO_5_BITS_ARE_RESERVED_LSB    5
#define BT_CONTROLLER_ENC_CONFIG_REG_ENC_CONFIG_REG_31_TO_5_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000001B)
#define BT_CONTROLLER_ENC_CONFIG_REG_ENABLE_FOR_AES_DIRECT_TRANSMISSION_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_ENC_CONFIG_REG_ENABLE_FOR_AES_DIRECT_TRANSMISSION_POS    4
#define BT_CONTROLLER_ENC_CONFIG_REG_ENABLE_FOR_AES_DIRECT_RECEPTION_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_ENC_CONFIG_REG_ENABLE_FOR_AES_DIRECT_RECEPTION_POS    3
#define BT_CONTROLLER_ENC_CONFIG_REG_ENCRYPT_OR_DECRYPT_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_ENC_CONFIG_REG_ENCRYPT_OR_DECRYPT_POS    2
#define BT_CONTROLLER_ENC_CONFIG_REG_ECB_OR_CCM_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_ENC_CONFIG_REG_ECB_OR_CCM_POS    1
#define BT_CONTROLLER_ENC_CONFIG_REG_START_OF_AES_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_ENC_CONFIG_REG_START_OF_AES_POS    0

#define BT_CONTROLLER_ENC_CONFIG_REG_ENC_CONFIG_REG_31_TO_5_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_ENC_CONFIG_REG_ENABLE_FOR_AES_DIRECT_TRANSMISSION_RST    0x0
#define BT_CONTROLLER_ENC_CONFIG_REG_ENABLE_FOR_AES_DIRECT_RECEPTION_RST    0x0
#define BT_CONTROLLER_ENC_CONFIG_REG_ENCRYPT_OR_DECRYPT_RST    0x0
#define BT_CONTROLLER_ENC_CONFIG_REG_ECB_OR_CCM_RST    0x0
#define BT_CONTROLLER_ENC_CONFIG_REG_START_OF_AES_RST    0x0

__INLINE void bt_controller_enc_config_reg_unpack(uint32_t* enc_config_reg_31_to_5_bits_are_reserved, uint8_t* enable_for_aes_direct_transmission, uint8_t* enable_for_aes_direct_reception, uint8_t* encrypt_or_decrypt, uint8_t* ecb_or_ccm, uint8_t* start_of_aes)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENC_CONFIG_REG_ADDR);

	*enc_config_reg_31_to_5_bits_are_reserved = (localVal & ((uint32_t)0xFFFFFFE0)) >>  5;
	*enable_for_aes_direct_transmission = (localVal & ((uint32_t)0x00000010)) >>  4;
	*enable_for_aes_direct_reception = (localVal & ((uint32_t)0x00000008)) >>  3;
	*encrypt_or_decrypt = (localVal & ((uint32_t)0x00000004)) >>  2;
	*ecb_or_ccm = (localVal & ((uint32_t)0x00000002)) >>  1;
	*start_of_aes = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t bt_controller_enc_config_reg_enc_config_reg_31_to_5_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENC_CONFIG_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFE0)) >> 5);
}
__INLINE uint8_t bt_controller_enc_config_reg_enable_for_aes_direct_transmission_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENC_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE uint8_t bt_controller_enc_config_reg_enable_for_aes_direct_reception_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENC_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t bt_controller_enc_config_reg_encrypt_or_decrypt_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENC_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE uint8_t bt_controller_enc_config_reg_ecb_or_ccm_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENC_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE uint8_t bt_controller_enc_config_reg_start_of_aes_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ENC_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief INT_MASK register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:01 sll_int_mask_reg_31_1_bits_are_reserved 0x0
 *    00    int_mask_reg_auth_Pass_or_Fail 0              
 * </pre>
 */
#define BT_CONTROLLER_INT_MASK_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004A28)
#define BT_CONTROLLER_INT_MASK_OFFSET      0x00004A28
#define BT_CONTROLLER_INT_MASK_INDEX       0x0000128A
#define BT_CONTROLLER_INT_MASK_RESET       0x00000000

__INLINE uint32_t  bt_controller_int_mask_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_INT_MASK_ADDR);
}

__INLINE void bt_controller_int_mask_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_INT_MASK_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_INT_MASK_SLL_INT_MASK_REG_31_1_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFFFFE)
#define BT_CONTROLLER_INT_MASK_SLL_INT_MASK_REG_31_1_BITS_ARE_RESERVED_LSB    1
#define BT_CONTROLLER_INT_MASK_SLL_INT_MASK_REG_31_1_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000001F)
#define BT_CONTROLLER_INT_MASK_INT_MASK_REG_AUTH_PASS_OR_FAIL_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_INT_MASK_INT_MASK_REG_AUTH_PASS_OR_FAIL_POS    0

#define BT_CONTROLLER_INT_MASK_SLL_INT_MASK_REG_31_1_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_INT_MASK_INT_MASK_REG_AUTH_PASS_OR_FAIL_RST    0x0

__INLINE void bt_controller_int_mask_pack(uint32_t sll_int_mask_reg_31_1_bits_are_reserved, uint8_t int_mask_reg_auth_pass_or_fail)
{
	ASSERT_ERR((((uint32_t)sll_int_mask_reg_31_1_bits_are_reserved << 1) & ~((uint32_t)0xFFFFFFFE)) == 0);
	ASSERT_ERR((((uint32_t)int_mask_reg_auth_pass_or_fail << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_INT_MASK_ADDR,  ((uint32_t)sll_int_mask_reg_31_1_bits_are_reserved << 1) |((uint32_t)int_mask_reg_auth_pass_or_fail << 0));
}

__INLINE void bt_controller_int_mask_unpack(uint32_t* sll_int_mask_reg_31_1_bits_are_reserved, uint8_t* int_mask_reg_auth_pass_or_fail)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INT_MASK_ADDR);

	*sll_int_mask_reg_31_1_bits_are_reserved = (localVal & ((uint32_t)0xFFFFFFFE)) >>  1;
	*int_mask_reg_auth_pass_or_fail = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t bt_controller_int_mask_sll_int_mask_reg_31_1_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INT_MASK_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFFE)) >> 1);
}
__INLINE uint8_t bt_controller_int_mask_int_mask_reg_auth_pass_or_fail_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INT_MASK_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_int_mask_int_mask_reg_auth_pass_or_fail_setf(uint8_t intmaskregauthpassorfail)
{
	ASSERT_ERR((((uint32_t)intmaskregauthpassorfail << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_INT_MASK_ADDR, (REG_PL_RD(BT_CONTROLLER_INT_MASK_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)intmaskregauthpassorfail <<0));
}

/**
 * @brief INT_STATUS register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:01 sll_int_status_reg_31_1_bits_are_reserved 0x0
 *    00    int_status_reg_auth_Pass_or_Fail 0              
 * </pre>
 */
#define BT_CONTROLLER_INT_STATUS_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004A2C)
#define BT_CONTROLLER_INT_STATUS_OFFSET      0x00004A2C
#define BT_CONTROLLER_INT_STATUS_INDEX       0x0000128B
#define BT_CONTROLLER_INT_STATUS_RESET       0x00000000

__INLINE uint32_t  bt_controller_int_status_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_INT_STATUS_ADDR);
}

__INLINE void bt_controller_int_status_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_INT_STATUS_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_INT_STATUS_SLL_INT_STATUS_REG_31_1_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFFFFE)
#define BT_CONTROLLER_INT_STATUS_SLL_INT_STATUS_REG_31_1_BITS_ARE_RESERVED_LSB    1
#define BT_CONTROLLER_INT_STATUS_SLL_INT_STATUS_REG_31_1_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000001F)
#define BT_CONTROLLER_INT_STATUS_INT_STATUS_REG_AUTH_PASS_OR_FAIL_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_INT_STATUS_INT_STATUS_REG_AUTH_PASS_OR_FAIL_POS    0

#define BT_CONTROLLER_INT_STATUS_SLL_INT_STATUS_REG_31_1_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_INT_STATUS_INT_STATUS_REG_AUTH_PASS_OR_FAIL_RST    0x0

__INLINE void bt_controller_int_status_pack(uint32_t sll_int_status_reg_31_1_bits_are_reserved, uint8_t int_status_reg_auth_pass_or_fail)
{
	ASSERT_ERR((((uint32_t)sll_int_status_reg_31_1_bits_are_reserved << 1) & ~((uint32_t)0xFFFFFFFE)) == 0);
	ASSERT_ERR((((uint32_t)int_status_reg_auth_pass_or_fail << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_INT_STATUS_ADDR,  ((uint32_t)sll_int_status_reg_31_1_bits_are_reserved << 1) |((uint32_t)int_status_reg_auth_pass_or_fail << 0));
}

__INLINE void bt_controller_int_status_unpack(uint32_t* sll_int_status_reg_31_1_bits_are_reserved, uint8_t* int_status_reg_auth_pass_or_fail)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INT_STATUS_ADDR);

	*sll_int_status_reg_31_1_bits_are_reserved = (localVal & ((uint32_t)0xFFFFFFFE)) >>  1;
	*int_status_reg_auth_pass_or_fail = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t bt_controller_int_status_sll_int_status_reg_31_1_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INT_STATUS_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFFE)) >> 1);
}
__INLINE uint8_t bt_controller_int_status_int_status_reg_auth_pass_or_fail_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INT_STATUS_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_int_status_int_status_reg_auth_pass_or_fail_setf(uint8_t intstatusregauthpassorfail)
{
	ASSERT_ERR((((uint32_t)intstatusregauthpassorfail << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_INT_STATUS_ADDR, (REG_PL_RD(BT_CONTROLLER_INT_STATUS_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)intstatusregauthpassorfail <<0));
}

/**
 * @brief WHITELIST_FIFO register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 FIFO_containing_address_to_be_whitelisted 0x0
 * </pre>
 */
#define BT_CONTROLLER_WHITELIST_FIFO_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004B00)
#define BT_CONTROLLER_WHITELIST_FIFO_OFFSET      0x00004B00
#define BT_CONTROLLER_WHITELIST_FIFO_INDEX       0x000012C0
#define BT_CONTROLLER_WHITELIST_FIFO_RESET       0x00000000

__INLINE void bt_controller_whitelist_fifo_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_WHITELIST_FIFO_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_WHITELIST_FIFO_FIFO_CONTAINING_ADDRESS_TO_BE_WHITELISTED_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_WHITELIST_FIFO_FIFO_CONTAINING_ADDRESS_TO_BE_WHITELISTED_LSB    0
#define BT_CONTROLLER_WHITELIST_FIFO_FIFO_CONTAINING_ADDRESS_TO_BE_WHITELISTED_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_WHITELIST_FIFO_FIFO_CONTAINING_ADDRESS_TO_BE_WHITELISTED_RST    0x0

__INLINE void bt_controller_whitelist_fifo_fifo_containing_address_to_be_whitelisted_setf(uint32_t fifocontainingaddresstobewhitelisted)
{
	ASSERT_ERR((((uint32_t)fifocontainingaddresstobewhitelisted << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_WHITELIST_FIFO_ADDR, (uint32_t)fifocontainingaddresstobewhitelisted << 0);
}

/**
 * @brief WHITELIST_CONFIG_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:04 whitelist_config_reg_31_4_bits_are_reserved 0x0
 *    03:01 number_of_valid_entries   0x0
 *    00    Whitelist_Addr            0              
 * </pre>
 */
#define BT_CONTROLLER_WHITELIST_CONFIG_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00004B04)
#define BT_CONTROLLER_WHITELIST_CONFIG_REG_OFFSET      0x00004B04
#define BT_CONTROLLER_WHITELIST_CONFIG_REG_INDEX       0x000012C1
#define BT_CONTROLLER_WHITELIST_CONFIG_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_whitelist_config_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_WHITELIST_CONFIG_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_WHITELIST_CONFIG_REG_WHITELIST_CONFIG_REG_31_4_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFFFF0)
#define BT_CONTROLLER_WHITELIST_CONFIG_REG_WHITELIST_CONFIG_REG_31_4_BITS_ARE_RESERVED_LSB    4
#define BT_CONTROLLER_WHITELIST_CONFIG_REG_WHITELIST_CONFIG_REG_31_4_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000001C)
#define BT_CONTROLLER_WHITELIST_CONFIG_REG_NUMBER_OF_VALID_ENTRIES_MASK    ((uint32_t)0x0000000E)
#define BT_CONTROLLER_WHITELIST_CONFIG_REG_NUMBER_OF_VALID_ENTRIES_LSB    1
#define BT_CONTROLLER_WHITELIST_CONFIG_REG_NUMBER_OF_VALID_ENTRIES_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_WHITELIST_CONFIG_REG_WHITELIST_ADDR_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_WHITELIST_CONFIG_REG_WHITELIST_ADDR_POS    0

#define BT_CONTROLLER_WHITELIST_CONFIG_REG_WHITELIST_CONFIG_REG_31_4_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_WHITELIST_CONFIG_REG_NUMBER_OF_VALID_ENTRIES_RST    0x0
#define BT_CONTROLLER_WHITELIST_CONFIG_REG_WHITELIST_ADDR_RST    0x0

__INLINE void bt_controller_whitelist_config_reg_unpack(uint32_t* whitelist_config_reg_31_4_bits_are_reserved, uint8_t* number_of_valid_entries, uint8_t* whitelist_addr)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_WHITELIST_CONFIG_REG_ADDR);

	*whitelist_config_reg_31_4_bits_are_reserved = (localVal & ((uint32_t)0xFFFFFFF0)) >>  4;
	*number_of_valid_entries = (localVal & ((uint32_t)0x0000000E)) >>  1;
	*whitelist_addr = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t bt_controller_whitelist_config_reg_whitelist_config_reg_31_4_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_WHITELIST_CONFIG_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFF0)) >> 4);
}
__INLINE uint8_t bt_controller_whitelist_config_reg_number_of_valid_entries_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_WHITELIST_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000E)) >> 1);
}
__INLINE uint8_t bt_controller_whitelist_config_reg_whitelist_addr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_WHITELIST_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}

/**
 * @brief COMMAND_REGISTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:08 command_reg_31_to_8_bits_are_reserved 0x0
 *    07:00 Command_Opcode            0x0
 * </pre>
 */
#define BT_CONTROLLER_COMMAND_REGISTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005000)
#define BT_CONTROLLER_COMMAND_REGISTER_OFFSET      0x00005000
#define BT_CONTROLLER_COMMAND_REGISTER_INDEX       0x00001400
#define BT_CONTROLLER_COMMAND_REGISTER_RESET       0x00000000

__INLINE uint32_t  bt_controller_command_register_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_COMMAND_REGISTER_ADDR);
}

__INLINE void bt_controller_command_register_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_COMMAND_REGISTER_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_COMMAND_REGISTER_COMMAND_REG_31_TO_8_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFFFF00)
#define BT_CONTROLLER_COMMAND_REGISTER_COMMAND_REG_31_TO_8_BITS_ARE_RESERVED_LSB    8
#define BT_CONTROLLER_COMMAND_REGISTER_COMMAND_REG_31_TO_8_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000018)
#define BT_CONTROLLER_COMMAND_REGISTER_COMMAND_OPCODE_MASK    ((uint32_t)0x000000FF)
#define BT_CONTROLLER_COMMAND_REGISTER_COMMAND_OPCODE_LSB    0
#define BT_CONTROLLER_COMMAND_REGISTER_COMMAND_OPCODE_WIDTH    ((uint32_t)0x00000008)

#define BT_CONTROLLER_COMMAND_REGISTER_COMMAND_REG_31_TO_8_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_COMMAND_REGISTER_COMMAND_OPCODE_RST    0x0

__INLINE void bt_controller_command_register_pack(uint32_t command_reg_31_to_8_bits_are_reserved, uint8_t command_opcode)
{
	ASSERT_ERR((((uint32_t)command_reg_31_to_8_bits_are_reserved << 8) & ~((uint32_t)0xFFFFFF00)) == 0);
	ASSERT_ERR((((uint32_t)command_opcode << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_COMMAND_REGISTER_ADDR,  ((uint32_t)command_reg_31_to_8_bits_are_reserved << 8) |((uint32_t)command_opcode << 0));
}

__INLINE void bt_controller_command_register_unpack(uint32_t* command_reg_31_to_8_bits_are_reserved, uint8_t* command_opcode)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_COMMAND_REGISTER_ADDR);

	*command_reg_31_to_8_bits_are_reserved = (localVal & ((uint32_t)0xFFFFFF00)) >>  8;
	*command_opcode = (localVal & ((uint32_t)0x000000FF)) >>  0;
}

__INLINE uint32_t bt_controller_command_register_command_reg_31_to_8_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_COMMAND_REGISTER_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFF00)) >> 8);
}
__INLINE void bt_controller_command_register_command_opcode_setf(uint8_t commandopcode)
{
	ASSERT_ERR((((uint32_t)commandopcode << 0) & ~((uint32_t)0x000000FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_COMMAND_REGISTER_ADDR, (REG_PL_RD(BT_CONTROLLER_COMMAND_REGISTER_ADDR) & ~((uint32_t)0x000000FF)) | ((uint32_t)commandopcode <<0));
}

/**
 * @brief TX_CONFIG_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:30 tx_config1_reg_31_to_30_bits_are_reserved 0x0
 *    29:24 Encryption_start_offset_in_micro_seconds 0x00
 *    23:19 tx_config1_reg_23_to_19_bits_are_reserved 0x0
 *    18:16 TX_Buffer_Index_18_downto_16 0x0
 *    15    TX_CRC_Enable             1              
 *    14    Encryption_Enable         0              
 *    13    tx_config1_reg_13_bit_is_reserved 0              
 *    12    tx_Direction_Bit          0              
 *    11    tx_whitening_enable       1              
 *    10    tx_Auto_Ack_Enable        0              
 *    09:03 sll_TX_Channel            0x0
 *    02:00 TX_PHY                    0x0
 * </pre>
 */
#define BT_CONTROLLER_TX_CONFIG_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005004)
#define BT_CONTROLLER_TX_CONFIG_1_REG_OFFSET      0x00005004
#define BT_CONTROLLER_TX_CONFIG_1_REG_INDEX       0x00001401
#define BT_CONTROLLER_TX_CONFIG_1_REG_RESET       0x00008800

__INLINE uint32_t  bt_controller_tx_config_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR);
}

__INLINE void bt_controller_tx_config_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_CONFIG_1_REG_31_TO_30_BITS_ARE_RESERVED_MASK    ((uint32_t)0xC0000000)
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_CONFIG_1_REG_31_TO_30_BITS_ARE_RESERVED_LSB    30
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_CONFIG_1_REG_31_TO_30_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_TX_CONFIG_1_REG_ENCRYPTION_START_OFFSET_IN_MICRO_SECONDS_MASK    ((uint32_t)0x3F000000)
#define BT_CONTROLLER_TX_CONFIG_1_REG_ENCRYPTION_START_OFFSET_IN_MICRO_SECONDS_LSB    24
#define BT_CONTROLLER_TX_CONFIG_1_REG_ENCRYPTION_START_OFFSET_IN_MICRO_SECONDS_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_CONFIG_1_REG_23_TO_19_BITS_ARE_RESERVED_MASK    ((uint32_t)0x00F80000)
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_CONFIG_1_REG_23_TO_19_BITS_ARE_RESERVED_LSB    19
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_CONFIG_1_REG_23_TO_19_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000005)
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_BUFFER_INDEX_18_DOWNTO_16_MASK    ((uint32_t)0x00070000)
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_BUFFER_INDEX_18_DOWNTO_16_LSB    16
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_BUFFER_INDEX_18_DOWNTO_16_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_CRC_ENABLE_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_CRC_ENABLE_POS    15
#define BT_CONTROLLER_TX_CONFIG_1_REG_ENCRYPTION_ENABLE_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_TX_CONFIG_1_REG_ENCRYPTION_ENABLE_POS    14
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_CONFIG_1_REG_13_BIT_IS_RESERVED_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_CONFIG_1_REG_13_BIT_IS_RESERVED_POS    13
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_DIRECTION_BIT_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_DIRECTION_BIT_POS    12
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_WHITENING_ENABLE_BIT    ((uint32_t)0x00000800)
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_WHITENING_ENABLE_POS    11
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_AUTO_ACK_ENABLE_BIT    ((uint32_t)0x00000400)
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_AUTO_ACK_ENABLE_POS    10
#define BT_CONTROLLER_TX_CONFIG_1_REG_SLL_TX_CHANNEL_MASK    ((uint32_t)0x000003F8)
#define BT_CONTROLLER_TX_CONFIG_1_REG_SLL_TX_CHANNEL_LSB    3
#define BT_CONTROLLER_TX_CONFIG_1_REG_SLL_TX_CHANNEL_WIDTH    ((uint32_t)0x00000007)
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_PHY_MASK    ((uint32_t)0x00000007)
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_PHY_LSB    0
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_PHY_WIDTH    ((uint32_t)0x00000003)

#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_CONFIG_1_REG_31_TO_30_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TX_CONFIG_1_REG_ENCRYPTION_START_OFFSET_IN_MICRO_SECONDS_RST    0x00
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_CONFIG_1_REG_23_TO_19_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_BUFFER_INDEX_18_DOWNTO_16_RST    0x0
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_CRC_ENABLE_RST    0x1
#define BT_CONTROLLER_TX_CONFIG_1_REG_ENCRYPTION_ENABLE_RST    0x0
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_CONFIG_1_REG_13_BIT_IS_RESERVED_RST    0x0
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_DIRECTION_BIT_RST    0x0
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_WHITENING_ENABLE_RST    0x1
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_AUTO_ACK_ENABLE_RST    0x0
#define BT_CONTROLLER_TX_CONFIG_1_REG_SLL_TX_CHANNEL_RST    0x0
#define BT_CONTROLLER_TX_CONFIG_1_REG_TX_PHY_RST    0x0

__INLINE void bt_controller_tx_config_1_reg_pack(uint8_t tx_config1_reg_31_to_30_bits_are_reserved, uint8_t encryption_start_offset_in_micro_seconds, uint8_t tx_config1_reg_23_to_19_bits_are_reserved, uint8_t tx_buffer_index_18_downto_16, uint8_t tx_crc_enable, uint8_t encryption_enable, uint8_t tx_config1_reg_13_bit_is_reserved, uint8_t tx_direction_bit, uint8_t tx_whitening_enable, uint8_t tx_auto_ack_enable, uint8_t sll_tx_channel, uint8_t tx_phy)
{
	ASSERT_ERR((((uint32_t)tx_config1_reg_31_to_30_bits_are_reserved << 30) & ~((uint32_t)0xC0000000)) == 0);
	ASSERT_ERR((((uint32_t)encryption_start_offset_in_micro_seconds << 24) & ~((uint32_t)0x3F000000)) == 0);
	ASSERT_ERR((((uint32_t)tx_config1_reg_23_to_19_bits_are_reserved << 19) & ~((uint32_t)0x00F80000)) == 0);
	ASSERT_ERR((((uint32_t)tx_buffer_index_18_downto_16 << 16) & ~((uint32_t)0x00070000)) == 0);
	ASSERT_ERR((((uint32_t)tx_crc_enable << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)encryption_enable << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)tx_config1_reg_13_bit_is_reserved << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)tx_direction_bit << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)tx_whitening_enable << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)tx_auto_ack_enable << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)sll_tx_channel << 3) & ~((uint32_t)0x000003F8)) == 0);
	ASSERT_ERR((((uint32_t)tx_phy << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR,  ((uint32_t)tx_config1_reg_31_to_30_bits_are_reserved << 30) |((uint32_t)encryption_start_offset_in_micro_seconds << 24) |((uint32_t)tx_config1_reg_23_to_19_bits_are_reserved << 19) |((uint32_t)tx_buffer_index_18_downto_16 << 16) |((uint32_t)tx_crc_enable << 15) |((uint32_t)encryption_enable << 14) |((uint32_t)tx_config1_reg_13_bit_is_reserved << 13) |((uint32_t)tx_direction_bit << 12) |((uint32_t)tx_whitening_enable << 11) |((uint32_t)tx_auto_ack_enable << 10) |((uint32_t)sll_tx_channel << 3) |((uint32_t)tx_phy << 0));
}

__INLINE void bt_controller_tx_config_1_reg_unpack(uint8_t* tx_config1_reg_31_to_30_bits_are_reserved, uint8_t* encryption_start_offset_in_micro_seconds, uint8_t* tx_config1_reg_23_to_19_bits_are_reserved, uint8_t* tx_buffer_index_18_downto_16, uint8_t* tx_crc_enable, uint8_t* encryption_enable, uint8_t* tx_config1_reg_13_bit_is_reserved, uint8_t* tx_direction_bit, uint8_t* tx_whitening_enable, uint8_t* tx_auto_ack_enable, uint8_t* sll_tx_channel, uint8_t* tx_phy)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR);

	*tx_config1_reg_31_to_30_bits_are_reserved = (localVal & ((uint32_t)0xC0000000)) >>  30;
	*encryption_start_offset_in_micro_seconds = (localVal & ((uint32_t)0x3F000000)) >>  24;
	*tx_config1_reg_23_to_19_bits_are_reserved = (localVal & ((uint32_t)0x00F80000)) >>  19;
	*tx_buffer_index_18_downto_16 = (localVal & ((uint32_t)0x00070000)) >>  16;
	*tx_crc_enable = (localVal & ((uint32_t)0x00008000)) >>  15;
	*encryption_enable = (localVal & ((uint32_t)0x00004000)) >>  14;
	*tx_config1_reg_13_bit_is_reserved = (localVal & ((uint32_t)0x00002000)) >>  13;
	*tx_direction_bit = (localVal & ((uint32_t)0x00001000)) >>  12;
	*tx_whitening_enable = (localVal & ((uint32_t)0x00000800)) >>  11;
	*tx_auto_ack_enable = (localVal & ((uint32_t)0x00000400)) >>  10;
	*sll_tx_channel = (localVal & ((uint32_t)0x000003F8)) >>  3;
	*tx_phy = (localVal & ((uint32_t)0x00000007)) >>  0;
}

__INLINE uint8_t bt_controller_tx_config_1_reg_tx_config_1_reg_31_to_30_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xC0000000)) >> 30);
}
__INLINE uint8_t bt_controller_tx_config_1_reg_encryption_start_offset_in_micro_seconds_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x3F000000)) >> 24);
}
__INLINE uint8_t bt_controller_tx_config_1_reg_tx_config_1_reg_23_to_19_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00F80000)) >> 19);
}
__INLINE uint8_t bt_controller_tx_config_1_reg_tx_buffer_index_18_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00070000)) >> 16);
}
__INLINE void bt_controller_tx_config_1_reg_tx_buffer_index_18_downto_16_setf(uint8_t txbufferindex18downto16)
{
	ASSERT_ERR((((uint32_t)txbufferindex18downto16 << 16) & ~((uint32_t)0x00070000)) == 0);
	REG_PL_WR(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00070000)) | ((uint32_t)txbufferindex18downto16 <<16));
}
__INLINE uint8_t bt_controller_tx_config_1_reg_tx_crc_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_tx_config_1_reg_tx_crc_enable_setf(uint8_t txcrcenable)
{
	ASSERT_ERR((((uint32_t)txcrcenable << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)txcrcenable <<15));
}
__INLINE uint8_t bt_controller_tx_config_1_reg_encryption_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_tx_config_1_reg_encryption_enable_setf(uint8_t encryptionenable)
{
	ASSERT_ERR((((uint32_t)encryptionenable << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)encryptionenable <<14));
}
__INLINE uint8_t bt_controller_tx_config_1_reg_tx_config_1_reg_13_bit_is_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t bt_controller_tx_config_1_reg_tx_direction_bit_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_tx_config_1_reg_tx_direction_bit_setf(uint8_t txdirectionbit)
{
	ASSERT_ERR((((uint32_t)txdirectionbit << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)txdirectionbit <<12));
}
__INLINE uint8_t bt_controller_tx_config_1_reg_tx_whitening_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void bt_controller_tx_config_1_reg_tx_whitening_enable_setf(uint8_t txwhiteningenable)
{
	ASSERT_ERR((((uint32_t)txwhiteningenable << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)txwhiteningenable <<11));
}
__INLINE uint8_t bt_controller_tx_config_1_reg_tx_auto_ack_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void bt_controller_tx_config_1_reg_tx_auto_ack_enable_setf(uint8_t txautoackenable)
{
	ASSERT_ERR((((uint32_t)txautoackenable << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)txautoackenable <<10));
}
__INLINE uint8_t bt_controller_tx_config_1_reg_sll_tx_channel_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000003F8)) >> 3);
}
__INLINE void bt_controller_tx_config_1_reg_sll_tx_channel_setf(uint8_t slltxchannel)
{
	ASSERT_ERR((((uint32_t)slltxchannel << 3) & ~((uint32_t)0x000003F8)) == 0);
	REG_PL_WR(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR) & ~((uint32_t)0x000003F8)) | ((uint32_t)slltxchannel <<3));
}
__INLINE uint8_t bt_controller_tx_config_1_reg_tx_phy_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000007)) >> 0);
}
__INLINE void bt_controller_tx_config_1_reg_tx_phy_setf(uint8_t txphy)
{
	ASSERT_ERR((((uint32_t)txphy << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TX_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00000007)) | ((uint32_t)txphy <<0));
}

/**
 * @brief TX_CONFIG_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 tx_confi2_reg_31_to_16_bits_are_reserved 0x0
 *    15:08 tx_CTE_Duration           0x0
 *    07:01 tx_confi2_reg_7_to_1_bits_are_reserved 0x0
 *    00    tx_CTE_Enable             0              
 * </pre>
 */
#define BT_CONTROLLER_TX_CONFIG_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005008)
#define BT_CONTROLLER_TX_CONFIG_2_REG_OFFSET      0x00005008
#define BT_CONTROLLER_TX_CONFIG_2_REG_INDEX       0x00001402
#define BT_CONTROLLER_TX_CONFIG_2_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_tx_config_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TX_CONFIG_2_REG_ADDR);
}

__INLINE void bt_controller_tx_config_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_TX_CONFIG_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_TX_CONFIG_2_REG_TX_CONFI_2_REG_31_TO_16_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_TX_CONFIG_2_REG_TX_CONFI_2_REG_31_TO_16_BITS_ARE_RESERVED_LSB    16
#define BT_CONTROLLER_TX_CONFIG_2_REG_TX_CONFI_2_REG_31_TO_16_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_TX_CONFIG_2_REG_TX_CTE_DURATION_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_TX_CONFIG_2_REG_TX_CTE_DURATION_LSB    8
#define BT_CONTROLLER_TX_CONFIG_2_REG_TX_CTE_DURATION_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_TX_CONFIG_2_REG_TX_CONFI_2_REG_7_TO_1_BITS_ARE_RESERVED_MASK    ((uint32_t)0x000000FE)
#define BT_CONTROLLER_TX_CONFIG_2_REG_TX_CONFI_2_REG_7_TO_1_BITS_ARE_RESERVED_LSB    1
#define BT_CONTROLLER_TX_CONFIG_2_REG_TX_CONFI_2_REG_7_TO_1_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000007)
#define BT_CONTROLLER_TX_CONFIG_2_REG_TX_CTE_ENABLE_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_TX_CONFIG_2_REG_TX_CTE_ENABLE_POS    0

#define BT_CONTROLLER_TX_CONFIG_2_REG_TX_CONFI_2_REG_31_TO_16_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TX_CONFIG_2_REG_TX_CTE_DURATION_RST    0x0
#define BT_CONTROLLER_TX_CONFIG_2_REG_TX_CONFI_2_REG_7_TO_1_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_TX_CONFIG_2_REG_TX_CTE_ENABLE_RST    0x0

__INLINE void bt_controller_tx_config_2_reg_pack(uint16_t tx_confi2_reg_31_to_16_bits_are_reserved, uint8_t tx_cte_duration, uint8_t tx_confi2_reg_7_to_1_bits_are_reserved, uint8_t tx_cte_enable)
{
	ASSERT_ERR((((uint32_t)tx_confi2_reg_31_to_16_bits_are_reserved << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)tx_cte_duration << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)tx_confi2_reg_7_to_1_bits_are_reserved << 1) & ~((uint32_t)0x000000FE)) == 0);
	ASSERT_ERR((((uint32_t)tx_cte_enable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TX_CONFIG_2_REG_ADDR,  ((uint32_t)tx_confi2_reg_31_to_16_bits_are_reserved << 16) |((uint32_t)tx_cte_duration << 8) |((uint32_t)tx_confi2_reg_7_to_1_bits_are_reserved << 1) |((uint32_t)tx_cte_enable << 0));
}

__INLINE void bt_controller_tx_config_2_reg_unpack(uint16_t* tx_confi2_reg_31_to_16_bits_are_reserved, uint8_t* tx_cte_duration, uint8_t* tx_confi2_reg_7_to_1_bits_are_reserved, uint8_t* tx_cte_enable)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_2_REG_ADDR);

	*tx_confi2_reg_31_to_16_bits_are_reserved = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*tx_cte_duration = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*tx_confi2_reg_7_to_1_bits_are_reserved = (localVal & ((uint32_t)0x000000FE)) >>  1;
	*tx_cte_enable = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_tx_config_2_reg_tx_confi_2_reg_31_to_16_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_2_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t bt_controller_tx_config_2_reg_tx_cte_duration_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_tx_config_2_reg_tx_cte_duration_setf(uint8_t txcteduration)
{
	ASSERT_ERR((((uint32_t)txcteduration << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_TX_CONFIG_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TX_CONFIG_2_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)txcteduration <<8));
}
__INLINE uint8_t bt_controller_tx_config_2_reg_tx_confi_2_reg_7_to_1_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000FE)) >> 1);
}
__INLINE uint8_t bt_controller_tx_config_2_reg_tx_cte_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_tx_config_2_reg_tx_cte_enable_setf(uint8_t txcteenable)
{
	ASSERT_ERR((((uint32_t)txcteenable << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_TX_CONFIG_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_TX_CONFIG_2_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)txcteenable <<0));
}

/**
 * @brief RX_CONFIG_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:17 Rxconfi1_reg_31_17_bits_are_reserved 0x0
 *    16    Receive_Byte_count_enable 0              
 *    15    rx_config1_reg_15bit_is_not_used 0              
 *    14    On_the_fly_decryption_Enable 0              
 *    13    rx_config1_reg_13_bit_is_reserved 0              
 *    12    rx_Direction_Bit          0              
 *    11    rx_Whitening_Enable       1              
 *    10    rx_Auto_Ack_Enable        0              
 *    09:03 sll_RX_Channel            0x0
 *    02:00 RX_PHY                    0x0
 * </pre>
 */
#define BT_CONTROLLER_RX_CONFIG_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000500C)
#define BT_CONTROLLER_RX_CONFIG_1_REG_OFFSET      0x0000500C
#define BT_CONTROLLER_RX_CONFIG_1_REG_INDEX       0x00001403
#define BT_CONTROLLER_RX_CONFIG_1_REG_RESET       0x00000800

__INLINE uint32_t  bt_controller_rx_config_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR);
}

__INLINE void bt_controller_rx_config_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RX_CONFIG_1_REG_RXCONFI_1_REG_31_17_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFE0000)
#define BT_CONTROLLER_RX_CONFIG_1_REG_RXCONFI_1_REG_31_17_BITS_ARE_RESERVED_LSB    17
#define BT_CONTROLLER_RX_CONFIG_1_REG_RXCONFI_1_REG_31_17_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000000F)
#define BT_CONTROLLER_RX_CONFIG_1_REG_RECEIVE_BYTE_COUNT_ENABLE_BIT    ((uint32_t)0x00010000)
#define BT_CONTROLLER_RX_CONFIG_1_REG_RECEIVE_BYTE_COUNT_ENABLE_POS    16
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_CONFIG_1_REG_15_BIT_IS_NOT_USED_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_CONFIG_1_REG_15_BIT_IS_NOT_USED_POS    15
#define BT_CONTROLLER_RX_CONFIG_1_REG_ON_THE_FLY_DECRYPTION_ENABLE_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_RX_CONFIG_1_REG_ON_THE_FLY_DECRYPTION_ENABLE_POS    14
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_CONFIG_1_REG_13_BIT_IS_RESERVED_BIT    ((uint32_t)0x00002000)
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_CONFIG_1_REG_13_BIT_IS_RESERVED_POS    13
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_DIRECTION_BIT_BIT    ((uint32_t)0x00001000)
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_DIRECTION_BIT_POS    12
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_WHITENING_ENABLE_BIT    ((uint32_t)0x00000800)
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_WHITENING_ENABLE_POS    11
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_AUTO_ACK_ENABLE_BIT    ((uint32_t)0x00000400)
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_AUTO_ACK_ENABLE_POS    10
#define BT_CONTROLLER_RX_CONFIG_1_REG_SLL_RX_CHANNEL_MASK    ((uint32_t)0x000003F8)
#define BT_CONTROLLER_RX_CONFIG_1_REG_SLL_RX_CHANNEL_LSB    3
#define BT_CONTROLLER_RX_CONFIG_1_REG_SLL_RX_CHANNEL_WIDTH    ((uint32_t)0x00000007)
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_PHY_MASK    ((uint32_t)0x00000007)
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_PHY_LSB    0
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_PHY_WIDTH    ((uint32_t)0x00000003)

#define BT_CONTROLLER_RX_CONFIG_1_REG_RXCONFI_1_REG_31_17_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_RX_CONFIG_1_REG_RECEIVE_BYTE_COUNT_ENABLE_RST    0x0
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_CONFIG_1_REG_15_BIT_IS_NOT_USED_RST    0x0
#define BT_CONTROLLER_RX_CONFIG_1_REG_ON_THE_FLY_DECRYPTION_ENABLE_RST    0x0
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_CONFIG_1_REG_13_BIT_IS_RESERVED_RST    0x0
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_DIRECTION_BIT_RST    0x0
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_WHITENING_ENABLE_RST    0x1
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_AUTO_ACK_ENABLE_RST    0x0
#define BT_CONTROLLER_RX_CONFIG_1_REG_SLL_RX_CHANNEL_RST    0x0
#define BT_CONTROLLER_RX_CONFIG_1_REG_RX_PHY_RST    0x0

__INLINE void bt_controller_rx_config_1_reg_pack(uint16_t rxconfi1_reg_31_17_bits_are_reserved, uint8_t receive_byte_count_enable, uint8_t rx_config1_reg_15bit_is_not_used, uint8_t on_the_fly_decryption_enable, uint8_t rx_config1_reg_13_bit_is_reserved, uint8_t rx_direction_bit, uint8_t rx_whitening_enable, uint8_t rx_auto_ack_enable, uint8_t sll_rx_channel, uint8_t rx_phy)
{
	ASSERT_ERR((((uint32_t)rxconfi1_reg_31_17_bits_are_reserved << 17) & ~((uint32_t)0xFFFE0000)) == 0);
	ASSERT_ERR((((uint32_t)receive_byte_count_enable << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)rx_config1_reg_15bit_is_not_used << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)on_the_fly_decryption_enable << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)rx_config1_reg_13_bit_is_reserved << 13) & ~((uint32_t)0x00002000)) == 0);
	ASSERT_ERR((((uint32_t)rx_direction_bit << 12) & ~((uint32_t)0x00001000)) == 0);
	ASSERT_ERR((((uint32_t)rx_whitening_enable << 11) & ~((uint32_t)0x00000800)) == 0);
	ASSERT_ERR((((uint32_t)rx_auto_ack_enable << 10) & ~((uint32_t)0x00000400)) == 0);
	ASSERT_ERR((((uint32_t)sll_rx_channel << 3) & ~((uint32_t)0x000003F8)) == 0);
	ASSERT_ERR((((uint32_t)rx_phy << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR,  ((uint32_t)rxconfi1_reg_31_17_bits_are_reserved << 17) |((uint32_t)receive_byte_count_enable << 16) |((uint32_t)rx_config1_reg_15bit_is_not_used << 15) |((uint32_t)on_the_fly_decryption_enable << 14) |((uint32_t)rx_config1_reg_13_bit_is_reserved << 13) |((uint32_t)rx_direction_bit << 12) |((uint32_t)rx_whitening_enable << 11) |((uint32_t)rx_auto_ack_enable << 10) |((uint32_t)sll_rx_channel << 3) |((uint32_t)rx_phy << 0));
}

__INLINE void bt_controller_rx_config_1_reg_unpack(uint16_t* rxconfi1_reg_31_17_bits_are_reserved, uint8_t* receive_byte_count_enable, uint8_t* rx_config1_reg_15bit_is_not_used, uint8_t* on_the_fly_decryption_enable, uint8_t* rx_config1_reg_13_bit_is_reserved, uint8_t* rx_direction_bit, uint8_t* rx_whitening_enable, uint8_t* rx_auto_ack_enable, uint8_t* sll_rx_channel, uint8_t* rx_phy)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR);

	*rxconfi1_reg_31_17_bits_are_reserved = (localVal & ((uint32_t)0xFFFE0000)) >>  17;
	*receive_byte_count_enable = (localVal & ((uint32_t)0x00010000)) >>  16;
	*rx_config1_reg_15bit_is_not_used = (localVal & ((uint32_t)0x00008000)) >>  15;
	*on_the_fly_decryption_enable = (localVal & ((uint32_t)0x00004000)) >>  14;
	*rx_config1_reg_13_bit_is_reserved = (localVal & ((uint32_t)0x00002000)) >>  13;
	*rx_direction_bit = (localVal & ((uint32_t)0x00001000)) >>  12;
	*rx_whitening_enable = (localVal & ((uint32_t)0x00000800)) >>  11;
	*rx_auto_ack_enable = (localVal & ((uint32_t)0x00000400)) >>  10;
	*sll_rx_channel = (localVal & ((uint32_t)0x000003F8)) >>  3;
	*rx_phy = (localVal & ((uint32_t)0x00000007)) >>  0;
}

__INLINE uint16_t bt_controller_rx_config_1_reg_rxconfi_1_reg_31_17_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFE0000)) >> 17);
}
__INLINE uint8_t bt_controller_rx_config_1_reg_receive_byte_count_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void bt_controller_rx_config_1_reg_receive_byte_count_enable_setf(uint8_t receivebytecountenable)
{
	ASSERT_ERR((((uint32_t)receivebytecountenable << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)receivebytecountenable <<16));
}
__INLINE uint8_t bt_controller_rx_config_1_reg_rx_config_1_reg_15_bit_is_not_used_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_rx_config_1_reg_rx_config_1_reg_15_bit_is_not_used_setf(uint8_t rxconfig1reg15bitisnotused)
{
	ASSERT_ERR((((uint32_t)rxconfig1reg15bitisnotused << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)rxconfig1reg15bitisnotused <<15));
}
__INLINE uint8_t bt_controller_rx_config_1_reg_on_the_fly_decryption_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_rx_config_1_reg_on_the_fly_decryption_enable_setf(uint8_t ontheflydecryptionenable)
{
	ASSERT_ERR((((uint32_t)ontheflydecryptionenable << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)ontheflydecryptionenable <<14));
}
__INLINE uint8_t bt_controller_rx_config_1_reg_rx_config_1_reg_13_bit_is_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00002000)) >> 13);
}
__INLINE uint8_t bt_controller_rx_config_1_reg_rx_direction_bit_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00001000)) >> 12);
}
__INLINE void bt_controller_rx_config_1_reg_rx_direction_bit_setf(uint8_t rxdirectionbit)
{
	ASSERT_ERR((((uint32_t)rxdirectionbit << 12) & ~((uint32_t)0x00001000)) == 0);
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00001000)) | ((uint32_t)rxdirectionbit <<12));
}
__INLINE uint8_t bt_controller_rx_config_1_reg_rx_whitening_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000800)) >> 11);
}
__INLINE void bt_controller_rx_config_1_reg_rx_whitening_enable_setf(uint8_t rxwhiteningenable)
{
	ASSERT_ERR((((uint32_t)rxwhiteningenable << 11) & ~((uint32_t)0x00000800)) == 0);
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00000800)) | ((uint32_t)rxwhiteningenable <<11));
}
__INLINE uint8_t bt_controller_rx_config_1_reg_rx_auto_ack_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000400)) >> 10);
}
__INLINE void bt_controller_rx_config_1_reg_rx_auto_ack_enable_setf(uint8_t rxautoackenable)
{
	ASSERT_ERR((((uint32_t)rxautoackenable << 10) & ~((uint32_t)0x00000400)) == 0);
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00000400)) | ((uint32_t)rxautoackenable <<10));
}
__INLINE uint8_t bt_controller_rx_config_1_reg_sll_rx_channel_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000003F8)) >> 3);
}
__INLINE void bt_controller_rx_config_1_reg_sll_rx_channel_setf(uint8_t sllrxchannel)
{
	ASSERT_ERR((((uint32_t)sllrxchannel << 3) & ~((uint32_t)0x000003F8)) == 0);
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR) & ~((uint32_t)0x000003F8)) | ((uint32_t)sllrxchannel <<3));
}
__INLINE uint8_t bt_controller_rx_config_1_reg_rx_phy_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000007)) >> 0);
}
__INLINE void bt_controller_rx_config_1_reg_rx_phy_setf(uint8_t rxphy)
{
	ASSERT_ERR((((uint32_t)rxphy << 0) & ~((uint32_t)0x00000007)) == 0);
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RX_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00000007)) | ((uint32_t)rxphy <<0));
}

/**
 * @brief RX_CONFIG_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 rx_config2_reg_31_to_24_bits_are_reserved 0x0
 *    23:16 rx_byte_int_level         0x0
 *    15:08 rx_CTE_Duration           0x0
 *    07    rx_CTE_enable             0              
 *    06    Duplicate_List_enable     0              
 *    05    rx_config2_Whitelist_enable 0              
 *    04:00 rxconfig2_reg_4_0_bits_are_reserved 0x0
 * </pre>
 */
#define BT_CONTROLLER_RX_CONFIG_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005010)
#define BT_CONTROLLER_RX_CONFIG_2_REG_OFFSET      0x00005010
#define BT_CONTROLLER_RX_CONFIG_2_REG_INDEX       0x00001404
#define BT_CONTROLLER_RX_CONFIG_2_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rx_config_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR);
}

__INLINE void bt_controller_rx_config_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_CONFIG_2_REG_31_TO_24_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFF000000)
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_CONFIG_2_REG_31_TO_24_BITS_ARE_RESERVED_LSB    24
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_CONFIG_2_REG_31_TO_24_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_BYTE_INT_LEVEL_MASK    ((uint32_t)0x00FF0000)
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_BYTE_INT_LEVEL_LSB    16
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_BYTE_INT_LEVEL_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_CTE_DURATION_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_CTE_DURATION_LSB    8
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_CTE_DURATION_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_CTE_ENABLE_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_CTE_ENABLE_POS    7
#define BT_CONTROLLER_RX_CONFIG_2_REG_DUPLICATE_LIST_ENABLE_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_RX_CONFIG_2_REG_DUPLICATE_LIST_ENABLE_POS    6
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_CONFIG_2_WHITELIST_ENABLE_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_CONFIG_2_WHITELIST_ENABLE_POS    5
#define BT_CONTROLLER_RX_CONFIG_2_REG_RXCONFIG_2_REG_4_0_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000001F)
#define BT_CONTROLLER_RX_CONFIG_2_REG_RXCONFIG_2_REG_4_0_BITS_ARE_RESERVED_LSB    0
#define BT_CONTROLLER_RX_CONFIG_2_REG_RXCONFIG_2_REG_4_0_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000005)

#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_CONFIG_2_REG_31_TO_24_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_BYTE_INT_LEVEL_RST    0x0
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_CTE_DURATION_RST    0x0
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_CTE_ENABLE_RST    0x0
#define BT_CONTROLLER_RX_CONFIG_2_REG_DUPLICATE_LIST_ENABLE_RST    0x0
#define BT_CONTROLLER_RX_CONFIG_2_REG_RX_CONFIG_2_WHITELIST_ENABLE_RST    0x0
#define BT_CONTROLLER_RX_CONFIG_2_REG_RXCONFIG_2_REG_4_0_BITS_ARE_RESERVED_RST    0x0

__INLINE void bt_controller_rx_config_2_reg_pack(uint8_t rx_config2_reg_31_to_24_bits_are_reserved, uint8_t rx_byte_int_level, uint8_t rx_cte_duration, uint8_t rx_cte_enable, uint8_t duplicate_list_enable, uint8_t rx_config2_whitelist_enable, uint8_t rxconfig2_reg_4_0_bits_are_reserved)
{
	ASSERT_ERR((((uint32_t)rx_config2_reg_31_to_24_bits_are_reserved << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)rx_byte_int_level << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)rx_cte_duration << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)rx_cte_enable << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)duplicate_list_enable << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)rx_config2_whitelist_enable << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)rxconfig2_reg_4_0_bits_are_reserved << 0) & ~((uint32_t)0x0000001F)) == 0);
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR,  ((uint32_t)rx_config2_reg_31_to_24_bits_are_reserved << 24) |((uint32_t)rx_byte_int_level << 16) |((uint32_t)rx_cte_duration << 8) |((uint32_t)rx_cte_enable << 7) |((uint32_t)duplicate_list_enable << 6) |((uint32_t)rx_config2_whitelist_enable << 5) |((uint32_t)rxconfig2_reg_4_0_bits_are_reserved << 0));
}

__INLINE void bt_controller_rx_config_2_reg_unpack(uint8_t* rx_config2_reg_31_to_24_bits_are_reserved, uint8_t* rx_byte_int_level, uint8_t* rx_cte_duration, uint8_t* rx_cte_enable, uint8_t* duplicate_list_enable, uint8_t* rx_config2_whitelist_enable, uint8_t* rxconfig2_reg_4_0_bits_are_reserved)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR);

	*rx_config2_reg_31_to_24_bits_are_reserved = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*rx_byte_int_level = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*rx_cte_duration = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*rx_cte_enable = (localVal & ((uint32_t)0x00000080)) >>  7;
	*duplicate_list_enable = (localVal & ((uint32_t)0x00000040)) >>  6;
	*rx_config2_whitelist_enable = (localVal & ((uint32_t)0x00000020)) >>  5;
	*rxconfig2_reg_4_0_bits_are_reserved = (localVal & ((uint32_t)0x0000001F)) >>  0;
}

__INLINE uint8_t bt_controller_rx_config_2_reg_rx_config_2_reg_31_to_24_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE uint8_t bt_controller_rx_config_2_reg_rx_byte_int_level_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void bt_controller_rx_config_2_reg_rx_byte_int_level_setf(uint8_t rxbyteintlevel)
{
	ASSERT_ERR((((uint32_t)rxbyteintlevel << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)rxbyteintlevel <<16));
}
__INLINE uint8_t bt_controller_rx_config_2_reg_rx_cte_duration_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_rx_config_2_reg_rx_cte_duration_setf(uint8_t rxcteduration)
{
	ASSERT_ERR((((uint32_t)rxcteduration << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)rxcteduration <<8));
}
__INLINE uint8_t bt_controller_rx_config_2_reg_rx_cte_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_rx_config_2_reg_rx_cte_enable_setf(uint8_t rxcteenable)
{
	ASSERT_ERR((((uint32_t)rxcteenable << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)rxcteenable <<7));
}
__INLINE uint8_t bt_controller_rx_config_2_reg_duplicate_list_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_rx_config_2_reg_duplicate_list_enable_setf(uint8_t duplicatelistenable)
{
	ASSERT_ERR((((uint32_t)duplicatelistenable << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)duplicatelistenable <<6));
}
__INLINE uint8_t bt_controller_rx_config_2_reg_rx_config_2_whitelist_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_rx_config_2_reg_rx_config_2_whitelist_enable_setf(uint8_t rxconfig2whitelistenable)
{
	ASSERT_ERR((((uint32_t)rxconfig2whitelistenable << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)rxconfig2whitelistenable <<5));
}
__INLINE uint8_t bt_controller_rx_config_2_reg_rxconfig_2_reg_4_0_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000001F)) >> 0);
}

/**
 * @brief CRC_INIT_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:24 crc_init_reg_31_to_24_bits_are_reserved 0x0
 *    23:16 CRC_Int_Value_23_downto_16 0x0
 *    15:00 CRC_Int_Value_15_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_CRC_INIT_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005014)
#define BT_CONTROLLER_CRC_INIT_REG_OFFSET      0x00005014
#define BT_CONTROLLER_CRC_INIT_REG_INDEX       0x00001405
#define BT_CONTROLLER_CRC_INIT_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_crc_init_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CRC_INIT_REG_ADDR);
}

__INLINE void bt_controller_crc_init_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CRC_INIT_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CRC_INIT_REG_CRC_INIT_REG_31_TO_24_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFF000000)
#define BT_CONTROLLER_CRC_INIT_REG_CRC_INIT_REG_31_TO_24_BITS_ARE_RESERVED_LSB    24
#define BT_CONTROLLER_CRC_INIT_REG_CRC_INIT_REG_31_TO_24_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_CRC_INIT_REG_CRC_INT_VALUE_23_DOWNTO_16_MASK    ((uint32_t)0x00FF0000)
#define BT_CONTROLLER_CRC_INIT_REG_CRC_INT_VALUE_23_DOWNTO_16_LSB    16
#define BT_CONTROLLER_CRC_INIT_REG_CRC_INT_VALUE_23_DOWNTO_16_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_CRC_INIT_REG_CRC_INT_VALUE_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_CRC_INIT_REG_CRC_INT_VALUE_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_CRC_INIT_REG_CRC_INT_VALUE_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_CRC_INIT_REG_CRC_INIT_REG_31_TO_24_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_CRC_INIT_REG_CRC_INT_VALUE_23_DOWNTO_16_RST    0x0
#define BT_CONTROLLER_CRC_INIT_REG_CRC_INT_VALUE_15_DOWNTO_0_RST    0x0

__INLINE void bt_controller_crc_init_reg_pack(uint8_t crc_init_reg_31_to_24_bits_are_reserved, uint8_t crc_int_value_23_downto_16, uint16_t crc_int_value_15_downto_0)
{
	ASSERT_ERR((((uint32_t)crc_init_reg_31_to_24_bits_are_reserved << 24) & ~((uint32_t)0xFF000000)) == 0);
	ASSERT_ERR((((uint32_t)crc_int_value_23_downto_16 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	ASSERT_ERR((((uint32_t)crc_int_value_15_downto_0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_CRC_INIT_REG_ADDR,  ((uint32_t)crc_init_reg_31_to_24_bits_are_reserved << 24) |((uint32_t)crc_int_value_23_downto_16 << 16) |((uint32_t)crc_int_value_15_downto_0 << 0));
}

__INLINE void bt_controller_crc_init_reg_unpack(uint8_t* crc_init_reg_31_to_24_bits_are_reserved, uint8_t* crc_int_value_23_downto_16, uint16_t* crc_int_value_15_downto_0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CRC_INIT_REG_ADDR);

	*crc_init_reg_31_to_24_bits_are_reserved = (localVal & ((uint32_t)0xFF000000)) >>  24;
	*crc_int_value_23_downto_16 = (localVal & ((uint32_t)0x00FF0000)) >>  16;
	*crc_int_value_15_downto_0 = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint8_t bt_controller_crc_init_reg_crc_init_reg_31_to_24_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CRC_INIT_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFF000000)) >> 24);
}
__INLINE uint8_t bt_controller_crc_init_reg_crc_int_value_23_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CRC_INIT_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00FF0000)) >> 16);
}
__INLINE void bt_controller_crc_init_reg_crc_int_value_23_downto_16_setf(uint8_t crcintvalue23downto16)
{
	ASSERT_ERR((((uint32_t)crcintvalue23downto16 << 16) & ~((uint32_t)0x00FF0000)) == 0);
	REG_PL_WR(BT_CONTROLLER_CRC_INIT_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_CRC_INIT_REG_ADDR) & ~((uint32_t)0x00FF0000)) | ((uint32_t)crcintvalue23downto16 <<16));
}
__INLINE uint16_t bt_controller_crc_init_reg_crc_int_value_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CRC_INIT_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void bt_controller_crc_init_reg_crc_int_value_15_downto_0_setf(uint16_t crcintvalue15downto0)
{
	ASSERT_ERR((((uint32_t)crcintvalue15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_CRC_INIT_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_CRC_INIT_REG_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)crcintvalue15downto0 <<0));
}

/**
 * @brief PACKET_HEADER_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 RX_Packet_Header_31_downto_16 0x0
 *    15:00 TX_Packet_Header_15_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_PACKET_HEADER_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005018)
#define BT_CONTROLLER_PACKET_HEADER_REG_OFFSET      0x00005018
#define BT_CONTROLLER_PACKET_HEADER_REG_INDEX       0x00001406
#define BT_CONTROLLER_PACKET_HEADER_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_packet_header_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PACKET_HEADER_REG_ADDR);
}

__INLINE void bt_controller_packet_header_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PACKET_HEADER_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PACKET_HEADER_REG_RX_PACKET_HEADER_31_DOWNTO_16_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_PACKET_HEADER_REG_RX_PACKET_HEADER_31_DOWNTO_16_LSB    16
#define BT_CONTROLLER_PACKET_HEADER_REG_RX_PACKET_HEADER_31_DOWNTO_16_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_PACKET_HEADER_REG_TX_PACKET_HEADER_15_DOWNTO_0_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_PACKET_HEADER_REG_TX_PACKET_HEADER_15_DOWNTO_0_LSB    0
#define BT_CONTROLLER_PACKET_HEADER_REG_TX_PACKET_HEADER_15_DOWNTO_0_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_PACKET_HEADER_REG_RX_PACKET_HEADER_31_DOWNTO_16_RST    0x0
#define BT_CONTROLLER_PACKET_HEADER_REG_TX_PACKET_HEADER_15_DOWNTO_0_RST    0x0

__INLINE void bt_controller_packet_header_reg_pack(uint16_t rx_packet_header_31_downto_16, uint16_t tx_packet_header_15_downto_0)
{
	ASSERT_ERR((((uint32_t)rx_packet_header_31_downto_16 << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)tx_packet_header_15_downto_0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PACKET_HEADER_REG_ADDR,  ((uint32_t)rx_packet_header_31_downto_16 << 16) |((uint32_t)tx_packet_header_15_downto_0 << 0));
}

__INLINE void bt_controller_packet_header_reg_unpack(uint16_t* rx_packet_header_31_downto_16, uint16_t* tx_packet_header_15_downto_0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PACKET_HEADER_REG_ADDR);

	*rx_packet_header_31_downto_16 = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*tx_packet_header_15_downto_0 = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t bt_controller_packet_header_reg_rx_packet_header_31_downto_16_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PACKET_HEADER_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint16_t bt_controller_packet_header_reg_tx_packet_header_15_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PACKET_HEADER_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}
__INLINE void bt_controller_packet_header_reg_tx_packet_header_15_downto_0_setf(uint16_t txpacketheader15downto0)
{
	ASSERT_ERR((((uint32_t)txpacketheader15downto0 << 0) & ~((uint32_t)0x0000FFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PACKET_HEADER_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PACKET_HEADER_REG_ADDR) & ~((uint32_t)0x0000FFFF)) | ((uint32_t)txpacketheader15downto0 <<0));
}

/**
 * @brief INTR_STATUS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:20 int_status_reg_31_20_bits_are_reserved 0x0
 *    19    address_Resolution_done_interrupt 0              
 *    18    receive_header_done_interrupt 0              
 *    17    intr_sts_reg_Sleep_mode_exit_interrupt 0              
 *    16    intr_sts_reg_abort        0              
 *    15:08 intr_sts_reg_Time_Expiry  0x0
 *    07    intr_sts_reg_RF_Initilization_over 0              
 *    06    intr_sts_reg_RX_Packet_Access_Address_match_found 0              
 *    05    intr_sts_reg_Received_Specified_number_of_bytes 0              
 *    04    intr_sts_reg_standalone_AES_operation_Done 0              
 *    03    intr_sts_reg_Received_Zero_Payload_packet 0              
 *    02    intr_sts_reg_Rx_Done_With_Error 0              
 *    01    intr_sts_reg_RX_Done      0              
 *    00    intr_sts_reg_TX_Done      0              
 * </pre>
 */
#define BT_CONTROLLER_INTR_STATUS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000501C)
#define BT_CONTROLLER_INTR_STATUS_REG_OFFSET      0x0000501C
#define BT_CONTROLLER_INTR_STATUS_REG_INDEX       0x00001407
#define BT_CONTROLLER_INTR_STATUS_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_intr_status_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR);
}

__INLINE void bt_controller_intr_status_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_INTR_STATUS_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_INTR_STATUS_REG_INT_STATUS_REG_31_20_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFF00000)
#define BT_CONTROLLER_INTR_STATUS_REG_INT_STATUS_REG_31_20_BITS_ARE_RESERVED_LSB    20
#define BT_CONTROLLER_INTR_STATUS_REG_INT_STATUS_REG_31_20_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000000C)
#define BT_CONTROLLER_INTR_STATUS_REG_ADDRESS_RESOLUTION_DONE_INTERRUPT_BIT    ((uint32_t)0x00080000)
#define BT_CONTROLLER_INTR_STATUS_REG_ADDRESS_RESOLUTION_DONE_INTERRUPT_POS    19
#define BT_CONTROLLER_INTR_STATUS_REG_RECEIVE_HEADER_DONE_INTERRUPT_BIT    ((uint32_t)0x00040000)
#define BT_CONTROLLER_INTR_STATUS_REG_RECEIVE_HEADER_DONE_INTERRUPT_POS    18
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_SLEEP_MODE_EXIT_INTERRUPT_BIT    ((uint32_t)0x00020000)
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_SLEEP_MODE_EXIT_INTERRUPT_POS    17
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_ABORT_BIT    ((uint32_t)0x00010000)
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_ABORT_POS    16
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_TIME_EXPIRY_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_TIME_EXPIRY_LSB    8
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_TIME_EXPIRY_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RF_INITILIZATION_OVER_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RF_INITILIZATION_OVER_POS    7
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RX_PACKET_ACCESS_ADDRESS_MATCH_FOUND_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RX_PACKET_ACCESS_ADDRESS_MATCH_FOUND_POS    6
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RECEIVED_SPECIFIED_NUMBER_OF_BYTES_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RECEIVED_SPECIFIED_NUMBER_OF_BYTES_POS    5
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_STANDALONE_AES_OPERATION_DONE_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_STANDALONE_AES_OPERATION_DONE_POS    4
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RECEIVED_ZERO_PAYLOAD_PACKET_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RECEIVED_ZERO_PAYLOAD_PACKET_POS    3
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RX_DONE_WITH_ERROR_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RX_DONE_WITH_ERROR_POS    2
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RX_DONE_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RX_DONE_POS    1
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_TX_DONE_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_TX_DONE_POS    0

#define BT_CONTROLLER_INTR_STATUS_REG_INT_STATUS_REG_31_20_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_INTR_STATUS_REG_ADDRESS_RESOLUTION_DONE_INTERRUPT_RST    0x0
#define BT_CONTROLLER_INTR_STATUS_REG_RECEIVE_HEADER_DONE_INTERRUPT_RST    0x0
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_SLEEP_MODE_EXIT_INTERRUPT_RST    0x0
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_ABORT_RST    0x0
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_TIME_EXPIRY_RST    0x0
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RF_INITILIZATION_OVER_RST    0x0
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RX_PACKET_ACCESS_ADDRESS_MATCH_FOUND_RST    0x0
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RECEIVED_SPECIFIED_NUMBER_OF_BYTES_RST    0x0
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_STANDALONE_AES_OPERATION_DONE_RST    0x0
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RECEIVED_ZERO_PAYLOAD_PACKET_RST    0x0
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RX_DONE_WITH_ERROR_RST    0x0
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_RX_DONE_RST    0x0
#define BT_CONTROLLER_INTR_STATUS_REG_INTR_STS_REG_TX_DONE_RST    0x0

__INLINE void bt_controller_intr_status_reg_pack(uint16_t int_status_reg_31_20_bits_are_reserved, uint8_t address_resolution_done_interrupt, uint8_t receive_header_done_interrupt, uint8_t intr_sts_reg_sleep_mode_exit_interrupt, uint8_t intr_sts_reg_abort, uint8_t intr_sts_reg_time_expiry, uint8_t intr_sts_reg_rf_initilization_over, uint8_t intr_sts_reg_rx_packet_access_address_match_found, uint8_t intr_sts_reg_received_specified_number_of_bytes, uint8_t intr_sts_reg_standalone_aes_operation_done, uint8_t intr_sts_reg_received_zero_payload_packet, uint8_t intr_sts_reg_rx_done_with_error, uint8_t intr_sts_reg_rx_done, uint8_t intr_sts_reg_tx_done)
{
	ASSERT_ERR((((uint32_t)int_status_reg_31_20_bits_are_reserved << 20) & ~((uint32_t)0xFFF00000)) == 0);
	ASSERT_ERR((((uint32_t)address_resolution_done_interrupt << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)receive_header_done_interrupt << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)intr_sts_reg_sleep_mode_exit_interrupt << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)intr_sts_reg_abort << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)intr_sts_reg_time_expiry << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)intr_sts_reg_rf_initilization_over << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)intr_sts_reg_rx_packet_access_address_match_found << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)intr_sts_reg_received_specified_number_of_bytes << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)intr_sts_reg_standalone_aes_operation_done << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)intr_sts_reg_received_zero_payload_packet << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)intr_sts_reg_rx_done_with_error << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)intr_sts_reg_rx_done << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)intr_sts_reg_tx_done << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_STATUS_REG_ADDR,  ((uint32_t)int_status_reg_31_20_bits_are_reserved << 20) |((uint32_t)address_resolution_done_interrupt << 19) |((uint32_t)receive_header_done_interrupt << 18) |((uint32_t)intr_sts_reg_sleep_mode_exit_interrupt << 17) |((uint32_t)intr_sts_reg_abort << 16) |((uint32_t)intr_sts_reg_time_expiry << 8) |((uint32_t)intr_sts_reg_rf_initilization_over << 7) |((uint32_t)intr_sts_reg_rx_packet_access_address_match_found << 6) |((uint32_t)intr_sts_reg_received_specified_number_of_bytes << 5) |((uint32_t)intr_sts_reg_standalone_aes_operation_done << 4) |((uint32_t)intr_sts_reg_received_zero_payload_packet << 3) |((uint32_t)intr_sts_reg_rx_done_with_error << 2) |((uint32_t)intr_sts_reg_rx_done << 1) |((uint32_t)intr_sts_reg_tx_done << 0));
}

__INLINE void bt_controller_intr_status_reg_unpack(uint16_t* int_status_reg_31_20_bits_are_reserved, uint8_t* address_resolution_done_interrupt, uint8_t* receive_header_done_interrupt, uint8_t* intr_sts_reg_sleep_mode_exit_interrupt, uint8_t* intr_sts_reg_abort, uint8_t* intr_sts_reg_time_expiry, uint8_t* intr_sts_reg_rf_initilization_over, uint8_t* intr_sts_reg_rx_packet_access_address_match_found, uint8_t* intr_sts_reg_received_specified_number_of_bytes, uint8_t* intr_sts_reg_standalone_aes_operation_done, uint8_t* intr_sts_reg_received_zero_payload_packet, uint8_t* intr_sts_reg_rx_done_with_error, uint8_t* intr_sts_reg_rx_done, uint8_t* intr_sts_reg_tx_done)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR);

	*int_status_reg_31_20_bits_are_reserved = (localVal & ((uint32_t)0xFFF00000)) >>  20;
	*address_resolution_done_interrupt = (localVal & ((uint32_t)0x00080000)) >>  19;
	*receive_header_done_interrupt = (localVal & ((uint32_t)0x00040000)) >>  18;
	*intr_sts_reg_sleep_mode_exit_interrupt = (localVal & ((uint32_t)0x00020000)) >>  17;
	*intr_sts_reg_abort = (localVal & ((uint32_t)0x00010000)) >>  16;
	*intr_sts_reg_time_expiry = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*intr_sts_reg_rf_initilization_over = (localVal & ((uint32_t)0x00000080)) >>  7;
	*intr_sts_reg_rx_packet_access_address_match_found = (localVal & ((uint32_t)0x00000040)) >>  6;
	*intr_sts_reg_received_specified_number_of_bytes = (localVal & ((uint32_t)0x00000020)) >>  5;
	*intr_sts_reg_standalone_aes_operation_done = (localVal & ((uint32_t)0x00000010)) >>  4;
	*intr_sts_reg_received_zero_payload_packet = (localVal & ((uint32_t)0x00000008)) >>  3;
	*intr_sts_reg_rx_done_with_error = (localVal & ((uint32_t)0x00000004)) >>  2;
	*intr_sts_reg_rx_done = (localVal & ((uint32_t)0x00000002)) >>  1;
	*intr_sts_reg_tx_done = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_intr_status_reg_int_status_reg_31_20_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFF00000)) >> 20);
}
__INLINE uint8_t bt_controller_intr_status_reg_address_resolution_done_interrupt_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void bt_controller_intr_status_reg_address_resolution_done_interrupt_setf(uint8_t addressresolutiondoneinterrupt)
{
	ASSERT_ERR((((uint32_t)addressresolutiondoneinterrupt << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)addressresolutiondoneinterrupt <<19));
}
__INLINE uint8_t bt_controller_intr_status_reg_receive_header_done_interrupt_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void bt_controller_intr_status_reg_receive_header_done_interrupt_setf(uint8_t receiveheaderdoneinterrupt)
{
	ASSERT_ERR((((uint32_t)receiveheaderdoneinterrupt << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)receiveheaderdoneinterrupt <<18));
}
__INLINE uint8_t bt_controller_intr_status_reg_intr_sts_reg_sleep_mode_exit_interrupt_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void bt_controller_intr_status_reg_intr_sts_reg_sleep_mode_exit_interrupt_setf(uint8_t intrstsregsleepmodeexitinterrupt)
{
	ASSERT_ERR((((uint32_t)intrstsregsleepmodeexitinterrupt << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)intrstsregsleepmodeexitinterrupt <<17));
}
__INLINE uint8_t bt_controller_intr_status_reg_intr_sts_reg_abort_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void bt_controller_intr_status_reg_intr_sts_reg_abort_setf(uint8_t intrstsregabort)
{
	ASSERT_ERR((((uint32_t)intrstsregabort << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)intrstsregabort <<16));
}
__INLINE uint8_t bt_controller_intr_status_reg_intr_sts_reg_time_expiry_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_intr_status_reg_intr_sts_reg_time_expiry_setf(uint8_t intrstsregtimeexpiry)
{
	ASSERT_ERR((((uint32_t)intrstsregtimeexpiry << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)intrstsregtimeexpiry <<8));
}
__INLINE uint8_t bt_controller_intr_status_reg_intr_sts_reg_rf_initilization_over_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_intr_status_reg_intr_sts_reg_rf_initilization_over_setf(uint8_t intrstsregrfinitilizationover)
{
	ASSERT_ERR((((uint32_t)intrstsregrfinitilizationover << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)intrstsregrfinitilizationover <<7));
}
__INLINE uint8_t bt_controller_intr_status_reg_intr_sts_reg_rx_packet_access_address_match_found_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_intr_status_reg_intr_sts_reg_rx_packet_access_address_match_found_setf(uint8_t intrstsregrxpacketaccessaddressmatchfound)
{
	ASSERT_ERR((((uint32_t)intrstsregrxpacketaccessaddressmatchfound << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)intrstsregrxpacketaccessaddressmatchfound <<6));
}
__INLINE uint8_t bt_controller_intr_status_reg_intr_sts_reg_received_specified_number_of_bytes_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_intr_status_reg_intr_sts_reg_received_specified_number_of_bytes_setf(uint8_t intrstsregreceivedspecifiednumberofbytes)
{
	ASSERT_ERR((((uint32_t)intrstsregreceivedspecifiednumberofbytes << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)intrstsregreceivedspecifiednumberofbytes <<5));
}
__INLINE uint8_t bt_controller_intr_status_reg_intr_sts_reg_standalone_aes_operation_done_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_intr_status_reg_intr_sts_reg_standalone_aes_operation_done_setf(uint8_t intrstsregstandaloneaesoperationdone)
{
	ASSERT_ERR((((uint32_t)intrstsregstandaloneaesoperationdone << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)intrstsregstandaloneaesoperationdone <<4));
}
__INLINE uint8_t bt_controller_intr_status_reg_intr_sts_reg_received_zero_payload_packet_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_intr_status_reg_intr_sts_reg_received_zero_payload_packet_setf(uint8_t intrstsregreceivedzeropayloadpacket)
{
	ASSERT_ERR((((uint32_t)intrstsregreceivedzeropayloadpacket << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)intrstsregreceivedzeropayloadpacket <<3));
}
__INLINE uint8_t bt_controller_intr_status_reg_intr_sts_reg_rx_done_with_error_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_intr_status_reg_intr_sts_reg_rx_done_with_error_setf(uint8_t intrstsregrxdonewitherror)
{
	ASSERT_ERR((((uint32_t)intrstsregrxdonewitherror << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)intrstsregrxdonewitherror <<2));
}
__INLINE uint8_t bt_controller_intr_status_reg_intr_sts_reg_rx_done_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_intr_status_reg_intr_sts_reg_rx_done_setf(uint8_t intrstsregrxdone)
{
	ASSERT_ERR((((uint32_t)intrstsregrxdone << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)intrstsregrxdone <<1));
}
__INLINE uint8_t bt_controller_intr_status_reg_intr_sts_reg_tx_done_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_intr_status_reg_intr_sts_reg_tx_done_setf(uint8_t intrstsregtxdone)
{
	ASSERT_ERR((((uint32_t)intrstsregtxdone << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_STATUS_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_STATUS_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)intrstsregtxdone <<0));
}

/**
 * @brief INTR_MASK_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:20 int_mask_reg_12bits_are_reserved 0x0
 *    19    intr_mask_reg_address_resolution_done_interrupt 0              
 *    18    intr_mask_reg_receive_header_done_interrupt 0              
 *    17    intr_mask_reg_Sleep_mode_exit_interrupt 0              
 *    16    intr_mask_reg_abort       0              
 *    15:08 intr_mask_reg_Time_Expiry 0x0
 *    07    intr_mask_reg_RF_Initilization_over 0              
 *    06    intr_mask_reg_RX_Packet_Access_Address_match_found 0              
 *    05    intr_mask_reg_Received_Specified_number_of_Bytes 0              
 *    04    intr_mask_reg_Standalone_AES_Done 0              
 *    03    intr_mask_reg_Received_Zero_Payload_packet 0              
 *    02    intr_mask_reg_Rx_Done_With_Error 0              
 *    01    intr_mask_reg_RX_Done     0              
 *    00    intr_mask_reg_TX_Done     0              
 * </pre>
 */
#define BT_CONTROLLER_INTR_MASK_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005020)
#define BT_CONTROLLER_INTR_MASK_REG_OFFSET      0x00005020
#define BT_CONTROLLER_INTR_MASK_REG_INDEX       0x00001408
#define BT_CONTROLLER_INTR_MASK_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_intr_mask_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR);
}

__INLINE void bt_controller_intr_mask_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_INTR_MASK_REG_INT_MASK_REG_12_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFF00000)
#define BT_CONTROLLER_INTR_MASK_REG_INT_MASK_REG_12_BITS_ARE_RESERVED_LSB    20
#define BT_CONTROLLER_INTR_MASK_REG_INT_MASK_REG_12_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x0000000C)
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_ADDRESS_RESOLUTION_DONE_INTERRUPT_BIT    ((uint32_t)0x00080000)
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_ADDRESS_RESOLUTION_DONE_INTERRUPT_POS    19
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RECEIVE_HEADER_DONE_INTERRUPT_BIT    ((uint32_t)0x00040000)
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RECEIVE_HEADER_DONE_INTERRUPT_POS    18
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_SLEEP_MODE_EXIT_INTERRUPT_BIT    ((uint32_t)0x00020000)
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_SLEEP_MODE_EXIT_INTERRUPT_POS    17
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_ABORT_BIT    ((uint32_t)0x00010000)
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_ABORT_POS    16
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_TIME_EXPIRY_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_TIME_EXPIRY_LSB    8
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_TIME_EXPIRY_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RF_INITILIZATION_OVER_BIT    ((uint32_t)0x00000080)
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RF_INITILIZATION_OVER_POS    7
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RX_PACKET_ACCESS_ADDRESS_MATCH_FOUND_BIT    ((uint32_t)0x00000040)
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RX_PACKET_ACCESS_ADDRESS_MATCH_FOUND_POS    6
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RECEIVED_SPECIFIED_NUMBER_OF_BYTES_BIT    ((uint32_t)0x00000020)
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RECEIVED_SPECIFIED_NUMBER_OF_BYTES_POS    5
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_STANDALONE_AES_DONE_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_STANDALONE_AES_DONE_POS    4
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RECEIVED_ZERO_PAYLOAD_PACKET_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RECEIVED_ZERO_PAYLOAD_PACKET_POS    3
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RX_DONE_WITH_ERROR_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RX_DONE_WITH_ERROR_POS    2
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RX_DONE_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RX_DONE_POS    1
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_TX_DONE_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_TX_DONE_POS    0

#define BT_CONTROLLER_INTR_MASK_REG_INT_MASK_REG_12_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_ADDRESS_RESOLUTION_DONE_INTERRUPT_RST    0x0
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RECEIVE_HEADER_DONE_INTERRUPT_RST    0x0
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_SLEEP_MODE_EXIT_INTERRUPT_RST    0x0
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_ABORT_RST    0x0
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_TIME_EXPIRY_RST    0x0
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RF_INITILIZATION_OVER_RST    0x0
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RX_PACKET_ACCESS_ADDRESS_MATCH_FOUND_RST    0x0
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RECEIVED_SPECIFIED_NUMBER_OF_BYTES_RST    0x0
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_STANDALONE_AES_DONE_RST    0x0
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RECEIVED_ZERO_PAYLOAD_PACKET_RST    0x0
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RX_DONE_WITH_ERROR_RST    0x0
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_RX_DONE_RST    0x0
#define BT_CONTROLLER_INTR_MASK_REG_INTR_MASK_REG_TX_DONE_RST    0x0

__INLINE void bt_controller_intr_mask_reg_pack(uint16_t int_mask_reg_12bits_are_reserved, uint8_t intr_mask_reg_address_resolution_done_interrupt, uint8_t intr_mask_reg_receive_header_done_interrupt, uint8_t intr_mask_reg_sleep_mode_exit_interrupt, uint8_t intr_mask_reg_abort, uint8_t intr_mask_reg_time_expiry, uint8_t intr_mask_reg_rf_initilization_over, uint8_t intr_mask_reg_rx_packet_access_address_match_found, uint8_t intr_mask_reg_received_specified_number_of_bytes, uint8_t intr_mask_reg_standalone_aes_done, uint8_t intr_mask_reg_received_zero_payload_packet, uint8_t intr_mask_reg_rx_done_with_error, uint8_t intr_mask_reg_rx_done, uint8_t intr_mask_reg_tx_done)
{
	ASSERT_ERR((((uint32_t)int_mask_reg_12bits_are_reserved << 20) & ~((uint32_t)0xFFF00000)) == 0);
	ASSERT_ERR((((uint32_t)intr_mask_reg_address_resolution_done_interrupt << 19) & ~((uint32_t)0x00080000)) == 0);
	ASSERT_ERR((((uint32_t)intr_mask_reg_receive_header_done_interrupt << 18) & ~((uint32_t)0x00040000)) == 0);
	ASSERT_ERR((((uint32_t)intr_mask_reg_sleep_mode_exit_interrupt << 17) & ~((uint32_t)0x00020000)) == 0);
	ASSERT_ERR((((uint32_t)intr_mask_reg_abort << 16) & ~((uint32_t)0x00010000)) == 0);
	ASSERT_ERR((((uint32_t)intr_mask_reg_time_expiry << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)intr_mask_reg_rf_initilization_over << 7) & ~((uint32_t)0x00000080)) == 0);
	ASSERT_ERR((((uint32_t)intr_mask_reg_rx_packet_access_address_match_found << 6) & ~((uint32_t)0x00000040)) == 0);
	ASSERT_ERR((((uint32_t)intr_mask_reg_received_specified_number_of_bytes << 5) & ~((uint32_t)0x00000020)) == 0);
	ASSERT_ERR((((uint32_t)intr_mask_reg_standalone_aes_done << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)intr_mask_reg_received_zero_payload_packet << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)intr_mask_reg_rx_done_with_error << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)intr_mask_reg_rx_done << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)intr_mask_reg_tx_done << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_REG_ADDR,  ((uint32_t)int_mask_reg_12bits_are_reserved << 20) |((uint32_t)intr_mask_reg_address_resolution_done_interrupt << 19) |((uint32_t)intr_mask_reg_receive_header_done_interrupt << 18) |((uint32_t)intr_mask_reg_sleep_mode_exit_interrupt << 17) |((uint32_t)intr_mask_reg_abort << 16) |((uint32_t)intr_mask_reg_time_expiry << 8) |((uint32_t)intr_mask_reg_rf_initilization_over << 7) |((uint32_t)intr_mask_reg_rx_packet_access_address_match_found << 6) |((uint32_t)intr_mask_reg_received_specified_number_of_bytes << 5) |((uint32_t)intr_mask_reg_standalone_aes_done << 4) |((uint32_t)intr_mask_reg_received_zero_payload_packet << 3) |((uint32_t)intr_mask_reg_rx_done_with_error << 2) |((uint32_t)intr_mask_reg_rx_done << 1) |((uint32_t)intr_mask_reg_tx_done << 0));
}

__INLINE void bt_controller_intr_mask_reg_unpack(uint16_t* int_mask_reg_12bits_are_reserved, uint8_t* intr_mask_reg_address_resolution_done_interrupt, uint8_t* intr_mask_reg_receive_header_done_interrupt, uint8_t* intr_mask_reg_sleep_mode_exit_interrupt, uint8_t* intr_mask_reg_abort, uint8_t* intr_mask_reg_time_expiry, uint8_t* intr_mask_reg_rf_initilization_over, uint8_t* intr_mask_reg_rx_packet_access_address_match_found, uint8_t* intr_mask_reg_received_specified_number_of_bytes, uint8_t* intr_mask_reg_standalone_aes_done, uint8_t* intr_mask_reg_received_zero_payload_packet, uint8_t* intr_mask_reg_rx_done_with_error, uint8_t* intr_mask_reg_rx_done, uint8_t* intr_mask_reg_tx_done)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR);

	*int_mask_reg_12bits_are_reserved = (localVal & ((uint32_t)0xFFF00000)) >>  20;
	*intr_mask_reg_address_resolution_done_interrupt = (localVal & ((uint32_t)0x00080000)) >>  19;
	*intr_mask_reg_receive_header_done_interrupt = (localVal & ((uint32_t)0x00040000)) >>  18;
	*intr_mask_reg_sleep_mode_exit_interrupt = (localVal & ((uint32_t)0x00020000)) >>  17;
	*intr_mask_reg_abort = (localVal & ((uint32_t)0x00010000)) >>  16;
	*intr_mask_reg_time_expiry = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*intr_mask_reg_rf_initilization_over = (localVal & ((uint32_t)0x00000080)) >>  7;
	*intr_mask_reg_rx_packet_access_address_match_found = (localVal & ((uint32_t)0x00000040)) >>  6;
	*intr_mask_reg_received_specified_number_of_bytes = (localVal & ((uint32_t)0x00000020)) >>  5;
	*intr_mask_reg_standalone_aes_done = (localVal & ((uint32_t)0x00000010)) >>  4;
	*intr_mask_reg_received_zero_payload_packet = (localVal & ((uint32_t)0x00000008)) >>  3;
	*intr_mask_reg_rx_done_with_error = (localVal & ((uint32_t)0x00000004)) >>  2;
	*intr_mask_reg_rx_done = (localVal & ((uint32_t)0x00000002)) >>  1;
	*intr_mask_reg_tx_done = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint16_t bt_controller_intr_mask_reg_int_mask_reg_12_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFF00000)) >> 20);
}
__INLINE uint8_t bt_controller_intr_mask_reg_intr_mask_reg_address_resolution_done_interrupt_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE void bt_controller_intr_mask_reg_intr_mask_reg_address_resolution_done_interrupt_setf(uint8_t intrmaskregaddressresolutiondoneinterrupt)
{
	ASSERT_ERR((((uint32_t)intrmaskregaddressresolutiondoneinterrupt << 19) & ~((uint32_t)0x00080000)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR) & ~((uint32_t)0x00080000)) | ((uint32_t)intrmaskregaddressresolutiondoneinterrupt <<19));
}
__INLINE uint8_t bt_controller_intr_mask_reg_intr_mask_reg_receive_header_done_interrupt_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE void bt_controller_intr_mask_reg_intr_mask_reg_receive_header_done_interrupt_setf(uint8_t intrmaskregreceiveheaderdoneinterrupt)
{
	ASSERT_ERR((((uint32_t)intrmaskregreceiveheaderdoneinterrupt << 18) & ~((uint32_t)0x00040000)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR) & ~((uint32_t)0x00040000)) | ((uint32_t)intrmaskregreceiveheaderdoneinterrupt <<18));
}
__INLINE uint8_t bt_controller_intr_mask_reg_intr_mask_reg_sleep_mode_exit_interrupt_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE void bt_controller_intr_mask_reg_intr_mask_reg_sleep_mode_exit_interrupt_setf(uint8_t intrmaskregsleepmodeexitinterrupt)
{
	ASSERT_ERR((((uint32_t)intrmaskregsleepmodeexitinterrupt << 17) & ~((uint32_t)0x00020000)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR) & ~((uint32_t)0x00020000)) | ((uint32_t)intrmaskregsleepmodeexitinterrupt <<17));
}
__INLINE uint8_t bt_controller_intr_mask_reg_intr_mask_reg_abort_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE void bt_controller_intr_mask_reg_intr_mask_reg_abort_setf(uint8_t intrmaskregabort)
{
	ASSERT_ERR((((uint32_t)intrmaskregabort << 16) & ~((uint32_t)0x00010000)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR) & ~((uint32_t)0x00010000)) | ((uint32_t)intrmaskregabort <<16));
}
__INLINE uint8_t bt_controller_intr_mask_reg_intr_mask_reg_time_expiry_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_intr_mask_reg_intr_mask_reg_time_expiry_setf(uint8_t intrmaskregtimeexpiry)
{
	ASSERT_ERR((((uint32_t)intrmaskregtimeexpiry << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)intrmaskregtimeexpiry <<8));
}
__INLINE uint8_t bt_controller_intr_mask_reg_intr_mask_reg_rf_initilization_over_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000080)) >> 7);
}
__INLINE void bt_controller_intr_mask_reg_intr_mask_reg_rf_initilization_over_setf(uint8_t intrmaskregrfinitilizationover)
{
	ASSERT_ERR((((uint32_t)intrmaskregrfinitilizationover << 7) & ~((uint32_t)0x00000080)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR) & ~((uint32_t)0x00000080)) | ((uint32_t)intrmaskregrfinitilizationover <<7));
}
__INLINE uint8_t bt_controller_intr_mask_reg_intr_mask_reg_rx_packet_access_address_match_found_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000040)) >> 6);
}
__INLINE void bt_controller_intr_mask_reg_intr_mask_reg_rx_packet_access_address_match_found_setf(uint8_t intrmaskregrxpacketaccessaddressmatchfound)
{
	ASSERT_ERR((((uint32_t)intrmaskregrxpacketaccessaddressmatchfound << 6) & ~((uint32_t)0x00000040)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR) & ~((uint32_t)0x00000040)) | ((uint32_t)intrmaskregrxpacketaccessaddressmatchfound <<6));
}
__INLINE uint8_t bt_controller_intr_mask_reg_intr_mask_reg_received_specified_number_of_bytes_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000020)) >> 5);
}
__INLINE void bt_controller_intr_mask_reg_intr_mask_reg_received_specified_number_of_bytes_setf(uint8_t intrmaskregreceivedspecifiednumberofbytes)
{
	ASSERT_ERR((((uint32_t)intrmaskregreceivedspecifiednumberofbytes << 5) & ~((uint32_t)0x00000020)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR) & ~((uint32_t)0x00000020)) | ((uint32_t)intrmaskregreceivedspecifiednumberofbytes <<5));
}
__INLINE uint8_t bt_controller_intr_mask_reg_intr_mask_reg_standalone_aes_done_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_intr_mask_reg_intr_mask_reg_standalone_aes_done_setf(uint8_t intrmaskregstandaloneaesdone)
{
	ASSERT_ERR((((uint32_t)intrmaskregstandaloneaesdone << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)intrmaskregstandaloneaesdone <<4));
}
__INLINE uint8_t bt_controller_intr_mask_reg_intr_mask_reg_received_zero_payload_packet_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_intr_mask_reg_intr_mask_reg_received_zero_payload_packet_setf(uint8_t intrmaskregreceivedzeropayloadpacket)
{
	ASSERT_ERR((((uint32_t)intrmaskregreceivedzeropayloadpacket << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)intrmaskregreceivedzeropayloadpacket <<3));
}
__INLINE uint8_t bt_controller_intr_mask_reg_intr_mask_reg_rx_done_with_error_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_intr_mask_reg_intr_mask_reg_rx_done_with_error_setf(uint8_t intrmaskregrxdonewitherror)
{
	ASSERT_ERR((((uint32_t)intrmaskregrxdonewitherror << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)intrmaskregrxdonewitherror <<2));
}
__INLINE uint8_t bt_controller_intr_mask_reg_intr_mask_reg_rx_done_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_intr_mask_reg_intr_mask_reg_rx_done_setf(uint8_t intrmaskregrxdone)
{
	ASSERT_ERR((((uint32_t)intrmaskregrxdone << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)intrmaskregrxdone <<1));
}
__INLINE uint8_t bt_controller_intr_mask_reg_intr_mask_reg_tx_done_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_intr_mask_reg_intr_mask_reg_tx_done_setf(uint8_t intrmaskregtxdone)
{
	ASSERT_ERR((((uint32_t)intrmaskregtxdone << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_INTR_MASK_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_INTR_MASK_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)intrmaskregtxdone <<0));
}

/**
 * @brief CAPTURE_CONFIG_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:28 capture_cfg_reg_31_28_bits_are_reserved 0x0
 *    27:24 Reference_time_to_Capture_27_downto_24 0x0
 *    23:04 capture_cfg_reg_23_to_4_bits_are_reserved 0x0
 *    03    TX_End                    0              
 *    02    Access_Address            0              
 *    01    RX_End                    0              
 *    00    RX_Start                  0              
 * </pre>
 */
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005024)
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_OFFSET      0x00005024
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_INDEX       0x00001409
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_capture_config_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR);
}

__INLINE void bt_controller_capture_config_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_CAPTURE_CFG_REG_31_28_BITS_ARE_RESERVED_MASK    ((uint32_t)0xF0000000)
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_CAPTURE_CFG_REG_31_28_BITS_ARE_RESERVED_LSB    28
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_CAPTURE_CFG_REG_31_28_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_REFERENCE_TIME_TO_CAPTURE_27_DOWNTO_24_MASK    ((uint32_t)0x0F000000)
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_REFERENCE_TIME_TO_CAPTURE_27_DOWNTO_24_LSB    24
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_REFERENCE_TIME_TO_CAPTURE_27_DOWNTO_24_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_CAPTURE_CFG_REG_23_TO_4_BITS_ARE_RESERVED_MASK    ((uint32_t)0x00FFFFF0)
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_CAPTURE_CFG_REG_23_TO_4_BITS_ARE_RESERVED_LSB    4
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_CAPTURE_CFG_REG_23_TO_4_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000014)
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_TX_END_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_TX_END_POS    3
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_ACCESS_ADDRESS_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_ACCESS_ADDRESS_POS    2
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_RX_END_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_RX_END_POS    1
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_RX_START_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_RX_START_POS    0

#define BT_CONTROLLER_CAPTURE_CONFIG_REG_CAPTURE_CFG_REG_31_28_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_REFERENCE_TIME_TO_CAPTURE_27_DOWNTO_24_RST    0x0
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_CAPTURE_CFG_REG_23_TO_4_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_TX_END_RST    0x0
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_ACCESS_ADDRESS_RST    0x0
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_RX_END_RST    0x0
#define BT_CONTROLLER_CAPTURE_CONFIG_REG_RX_START_RST    0x0

__INLINE void bt_controller_capture_config_reg_pack(uint8_t capture_cfg_reg_31_28_bits_are_reserved, uint8_t reference_time_to_capture_27_downto_24, uint32_t capture_cfg_reg_23_to_4_bits_are_reserved, uint8_t tx_end, uint8_t access_address, uint8_t rx_end, uint8_t rx_start)
{
	ASSERT_ERR((((uint32_t)capture_cfg_reg_31_28_bits_are_reserved << 28) & ~((uint32_t)0xF0000000)) == 0);
	ASSERT_ERR((((uint32_t)reference_time_to_capture_27_downto_24 << 24) & ~((uint32_t)0x0F000000)) == 0);
	ASSERT_ERR((((uint32_t)capture_cfg_reg_23_to_4_bits_are_reserved << 4) & ~((uint32_t)0x00FFFFF0)) == 0);
	ASSERT_ERR((((uint32_t)tx_end << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)access_address << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)rx_end << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)rx_start << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR,  ((uint32_t)capture_cfg_reg_31_28_bits_are_reserved << 28) |((uint32_t)reference_time_to_capture_27_downto_24 << 24) |((uint32_t)capture_cfg_reg_23_to_4_bits_are_reserved << 4) |((uint32_t)tx_end << 3) |((uint32_t)access_address << 2) |((uint32_t)rx_end << 1) |((uint32_t)rx_start << 0));
}

__INLINE void bt_controller_capture_config_reg_unpack(uint8_t* capture_cfg_reg_31_28_bits_are_reserved, uint8_t* reference_time_to_capture_27_downto_24, uint32_t* capture_cfg_reg_23_to_4_bits_are_reserved, uint8_t* tx_end, uint8_t* access_address, uint8_t* rx_end, uint8_t* rx_start)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR);

	*capture_cfg_reg_31_28_bits_are_reserved = (localVal & ((uint32_t)0xF0000000)) >>  28;
	*reference_time_to_capture_27_downto_24 = (localVal & ((uint32_t)0x0F000000)) >>  24;
	*capture_cfg_reg_23_to_4_bits_are_reserved = (localVal & ((uint32_t)0x00FFFFF0)) >>  4;
	*tx_end = (localVal & ((uint32_t)0x00000008)) >>  3;
	*access_address = (localVal & ((uint32_t)0x00000004)) >>  2;
	*rx_end = (localVal & ((uint32_t)0x00000002)) >>  1;
	*rx_start = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint8_t bt_controller_capture_config_reg_capture_cfg_reg_31_28_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xF0000000)) >> 28);
}
__INLINE uint8_t bt_controller_capture_config_reg_reference_time_to_capture_27_downto_24_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0F000000)) >> 24);
}
__INLINE void bt_controller_capture_config_reg_reference_time_to_capture_27_downto_24_setf(uint8_t referencetimetocapture27downto24)
{
	ASSERT_ERR((((uint32_t)referencetimetocapture27downto24 << 24) & ~((uint32_t)0x0F000000)) == 0);
	REG_PL_WR(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR) & ~((uint32_t)0x0F000000)) | ((uint32_t)referencetimetocapture27downto24 <<24));
}
__INLINE uint32_t bt_controller_capture_config_reg_capture_cfg_reg_23_to_4_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0x00FFFFF0)) >> 4);
}
__INLINE uint8_t bt_controller_capture_config_reg_tx_end_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_capture_config_reg_tx_end_setf(uint8_t txend)
{
	ASSERT_ERR((((uint32_t)txend << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)txend <<3));
}
__INLINE uint8_t bt_controller_capture_config_reg_access_address_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_capture_config_reg_access_address_setf(uint8_t accessaddress)
{
	ASSERT_ERR((((uint32_t)accessaddress << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)accessaddress <<2));
}
__INLINE uint8_t bt_controller_capture_config_reg_rx_end_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_capture_config_reg_rx_end_setf(uint8_t rxend)
{
	ASSERT_ERR((((uint32_t)rxend << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)rxend <<1));
}
__INLINE uint8_t bt_controller_capture_config_reg_rx_start_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_capture_config_reg_rx_start_setf(uint8_t rxstart)
{
	ASSERT_ERR((((uint32_t)rxstart << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_CAPTURE_CONFIG_REG_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)rxstart <<0));
}

/**
 * @brief RX_START_CAPTURE_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_Start_Timestamp        0x0
 * </pre>
 */
#define BT_CONTROLLER_RX_START_CAPTURE_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005028)
#define BT_CONTROLLER_RX_START_CAPTURE_REG_OFFSET      0x00005028
#define BT_CONTROLLER_RX_START_CAPTURE_REG_INDEX       0x0000140A
#define BT_CONTROLLER_RX_START_CAPTURE_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rx_start_capture_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RX_START_CAPTURE_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_RX_START_CAPTURE_REG_RX_START_TIMESTAMP_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_RX_START_CAPTURE_REG_RX_START_TIMESTAMP_LSB    0
#define BT_CONTROLLER_RX_START_CAPTURE_REG_RX_START_TIMESTAMP_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_RX_START_CAPTURE_REG_RX_START_TIMESTAMP_RST    0x0

__INLINE uint32_t bt_controller_rx_start_capture_reg_rx_start_timestamp_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_START_CAPTURE_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_END_CAPTURE_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 RX_End_Timestamp          0x0
 * </pre>
 */
#define BT_CONTROLLER_RX_END_CAPTURE_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000502C)
#define BT_CONTROLLER_RX_END_CAPTURE_REG_OFFSET      0x0000502C
#define BT_CONTROLLER_RX_END_CAPTURE_REG_INDEX       0x0000140B
#define BT_CONTROLLER_RX_END_CAPTURE_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rx_end_capture_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RX_END_CAPTURE_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_RX_END_CAPTURE_REG_RX_END_TIMESTAMP_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_RX_END_CAPTURE_REG_RX_END_TIMESTAMP_LSB    0
#define BT_CONTROLLER_RX_END_CAPTURE_REG_RX_END_TIMESTAMP_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_RX_END_CAPTURE_REG_RX_END_TIMESTAMP_RST    0x0

__INLINE uint32_t bt_controller_rx_end_capture_reg_rx_end_timestamp_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_END_CAPTURE_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief ACC_ADDR_MATCH_CAPTURE register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 Access_Address_Match_Timestamp 0x0
 * </pre>
 */
#define BT_CONTROLLER_ACC_ADDR_MATCH_CAPTURE_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005030)
#define BT_CONTROLLER_ACC_ADDR_MATCH_CAPTURE_OFFSET      0x00005030
#define BT_CONTROLLER_ACC_ADDR_MATCH_CAPTURE_INDEX       0x0000140C
#define BT_CONTROLLER_ACC_ADDR_MATCH_CAPTURE_RESET       0x00000000

__INLINE uint32_t  bt_controller_acc_addr_match_capture_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ACC_ADDR_MATCH_CAPTURE_ADDR);
}

// field definitions
#define BT_CONTROLLER_ACC_ADDR_MATCH_CAPTURE_ACCESS_ADDRESS_MATCH_TIMESTAMP_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_ACC_ADDR_MATCH_CAPTURE_ACCESS_ADDRESS_MATCH_TIMESTAMP_LSB    0
#define BT_CONTROLLER_ACC_ADDR_MATCH_CAPTURE_ACCESS_ADDRESS_MATCH_TIMESTAMP_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_ACC_ADDR_MATCH_CAPTURE_ACCESS_ADDRESS_MATCH_TIMESTAMP_RST    0x0

__INLINE uint32_t bt_controller_acc_addr_match_capture_access_address_match_timestamp_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ACC_ADDR_MATCH_CAPTURE_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief TX_END_CAPTURE_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 TX_End_Timestamp          0x0
 * </pre>
 */
#define BT_CONTROLLER_TX_END_CAPTURE_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005034)
#define BT_CONTROLLER_TX_END_CAPTURE_REG_OFFSET      0x00005034
#define BT_CONTROLLER_TX_END_CAPTURE_REG_INDEX       0x0000140D
#define BT_CONTROLLER_TX_END_CAPTURE_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_tx_end_capture_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_TX_END_CAPTURE_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_TX_END_CAPTURE_REG_TX_END_TIMESTAMP_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_TX_END_CAPTURE_REG_TX_END_TIMESTAMP_LSB    0
#define BT_CONTROLLER_TX_END_CAPTURE_REG_TX_END_TIMESTAMP_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_TX_END_CAPTURE_REG_TX_END_TIMESTAMP_RST    0x0

__INLINE uint32_t bt_controller_tx_end_capture_reg_tx_end_timestamp_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_TX_END_CAPTURE_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief T_1_COUNT_VALUE_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 T1_Counter_Value          0x0
 * </pre>
 */
#define BT_CONTROLLER_T_1_COUNT_VALUE_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005038)
#define BT_CONTROLLER_T_1_COUNT_VALUE_REG_OFFSET      0x00005038
#define BT_CONTROLLER_T_1_COUNT_VALUE_REG_INDEX       0x0000140E
#define BT_CONTROLLER_T_1_COUNT_VALUE_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_t_1_count_value_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_T_1_COUNT_VALUE_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_T_1_COUNT_VALUE_REG_T_1_COUNTER_VALUE_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_T_1_COUNT_VALUE_REG_T_1_COUNTER_VALUE_LSB    0
#define BT_CONTROLLER_T_1_COUNT_VALUE_REG_T_1_COUNTER_VALUE_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_T_1_COUNT_VALUE_REG_T_1_COUNTER_VALUE_RST    0x0

__INLINE uint32_t bt_controller_t_1_count_value_reg_t_1_counter_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_T_1_COUNT_VALUE_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief T_2_COUNT_VALUE_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 T2_Counter_Value          0x0
 * </pre>
 */
#define BT_CONTROLLER_T_2_COUNT_VALUE_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000503C)
#define BT_CONTROLLER_T_2_COUNT_VALUE_REG_OFFSET      0x0000503C
#define BT_CONTROLLER_T_2_COUNT_VALUE_REG_INDEX       0x0000140F
#define BT_CONTROLLER_T_2_COUNT_VALUE_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_t_2_count_value_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_T_2_COUNT_VALUE_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_T_2_COUNT_VALUE_REG_T_2_COUNTER_VALUE_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_T_2_COUNT_VALUE_REG_T_2_COUNTER_VALUE_LSB    0
#define BT_CONTROLLER_T_2_COUNT_VALUE_REG_T_2_COUNTER_VALUE_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_T_2_COUNT_VALUE_REG_T_2_COUNTER_VALUE_RST    0x0

__INLINE uint32_t bt_controller_t_2_count_value_reg_t_2_counter_value_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_T_2_COUNT_VALUE_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief STAT_ONLY_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:22 stat_only_reg_reserved_bit31_bit22 0x0
 *    21    stat_only_reg_received_coding_scheme_indicator 0              
 *    20    stat_only_reg_address_resolution_Pass_or_Fail 0              
 *    19    stat_only_reg_authentication_Pass_or_Fail 0              
 *    18    Read_Fifo_Empty           1              
 *    17    TX_Buf_processing_by_hardware 0              
 *    16    TX_Buf_Availability_to_firmware_to_write 0              
 *    15:00 stat_only_reg_0_15_bits_are_reserved 0x0
 * </pre>
 */
#define BT_CONTROLLER_STAT_ONLY_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005040)
#define BT_CONTROLLER_STAT_ONLY_REG_OFFSET      0x00005040
#define BT_CONTROLLER_STAT_ONLY_REG_INDEX       0x00001410
#define BT_CONTROLLER_STAT_ONLY_REG_RESET       0x00040000

__INLINE uint32_t  bt_controller_stat_only_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_STAT_ONLY_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_RESERVED_BIT_31_BIT_22_MASK    ((uint32_t)0xFFC00000)
#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_RESERVED_BIT_31_BIT_22_LSB    22
#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_RESERVED_BIT_31_BIT_22_WIDTH    ((uint32_t)0x0000000A)
#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_RECEIVED_CODING_SCHEME_INDICATOR_BIT    ((uint32_t)0x00200000)
#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_RECEIVED_CODING_SCHEME_INDICATOR_POS    21
#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_ADDRESS_RESOLUTION_PASS_OR_FAIL_BIT    ((uint32_t)0x00100000)
#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_ADDRESS_RESOLUTION_PASS_OR_FAIL_POS    20
#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_AUTHENTICATION_PASS_OR_FAIL_BIT    ((uint32_t)0x00080000)
#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_AUTHENTICATION_PASS_OR_FAIL_POS    19
#define BT_CONTROLLER_STAT_ONLY_REG_READ_FIFO_EMPTY_BIT    ((uint32_t)0x00040000)
#define BT_CONTROLLER_STAT_ONLY_REG_READ_FIFO_EMPTY_POS    18
#define BT_CONTROLLER_STAT_ONLY_REG_TX_BUF_PROCESSING_BY_HARDWARE_BIT    ((uint32_t)0x00020000)
#define BT_CONTROLLER_STAT_ONLY_REG_TX_BUF_PROCESSING_BY_HARDWARE_POS    17
#define BT_CONTROLLER_STAT_ONLY_REG_TX_BUF_AVAILABILITY_TO_FIRMWARE_TO_WRITE_BIT    ((uint32_t)0x00010000)
#define BT_CONTROLLER_STAT_ONLY_REG_TX_BUF_AVAILABILITY_TO_FIRMWARE_TO_WRITE_POS    16
#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_0_15_BITS_ARE_RESERVED_MASK    ((uint32_t)0x0000FFFF)
#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_0_15_BITS_ARE_RESERVED_LSB    0
#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_0_15_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000010)

#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_RESERVED_BIT_31_BIT_22_RST    0x0
#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_RECEIVED_CODING_SCHEME_INDICATOR_RST    0x0
#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_ADDRESS_RESOLUTION_PASS_OR_FAIL_RST    0x0
#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_AUTHENTICATION_PASS_OR_FAIL_RST    0x0
#define BT_CONTROLLER_STAT_ONLY_REG_READ_FIFO_EMPTY_RST    0x1
#define BT_CONTROLLER_STAT_ONLY_REG_TX_BUF_PROCESSING_BY_HARDWARE_RST    0x0
#define BT_CONTROLLER_STAT_ONLY_REG_TX_BUF_AVAILABILITY_TO_FIRMWARE_TO_WRITE_RST    0x0
#define BT_CONTROLLER_STAT_ONLY_REG_STAT_ONLY_REG_0_15_BITS_ARE_RESERVED_RST    0x0

__INLINE void bt_controller_stat_only_reg_unpack(uint16_t* stat_only_reg_reserved_bit31_bit22, uint8_t* stat_only_reg_received_coding_scheme_indicator, uint8_t* stat_only_reg_address_resolution_pass_or_fail, uint8_t* stat_only_reg_authentication_pass_or_fail, uint8_t* read_fifo_empty, uint8_t* tx_buf_processing_by_hardware, uint8_t* tx_buf_availability_to_firmware_to_write, uint16_t* stat_only_reg_0_15_bits_are_reserved)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_STAT_ONLY_REG_ADDR);

	*stat_only_reg_reserved_bit31_bit22 = (localVal & ((uint32_t)0xFFC00000)) >>  22;
	*stat_only_reg_received_coding_scheme_indicator = (localVal & ((uint32_t)0x00200000)) >>  21;
	*stat_only_reg_address_resolution_pass_or_fail = (localVal & ((uint32_t)0x00100000)) >>  20;
	*stat_only_reg_authentication_pass_or_fail = (localVal & ((uint32_t)0x00080000)) >>  19;
	*read_fifo_empty = (localVal & ((uint32_t)0x00040000)) >>  18;
	*tx_buf_processing_by_hardware = (localVal & ((uint32_t)0x00020000)) >>  17;
	*tx_buf_availability_to_firmware_to_write = (localVal & ((uint32_t)0x00010000)) >>  16;
	*stat_only_reg_0_15_bits_are_reserved = (localVal & ((uint32_t)0x0000FFFF)) >>  0;
}

__INLINE uint16_t bt_controller_stat_only_reg_stat_only_reg_reserved_bit_31_bit_22_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_STAT_ONLY_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFC00000)) >> 22);
}
__INLINE uint8_t bt_controller_stat_only_reg_stat_only_reg_received_coding_scheme_indicator_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_STAT_ONLY_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00200000)) >> 21);
}
__INLINE uint8_t bt_controller_stat_only_reg_stat_only_reg_address_resolution_pass_or_fail_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_STAT_ONLY_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00100000)) >> 20);
}
__INLINE uint8_t bt_controller_stat_only_reg_stat_only_reg_authentication_pass_or_fail_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_STAT_ONLY_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00080000)) >> 19);
}
__INLINE uint8_t bt_controller_stat_only_reg_read_fifo_empty_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_STAT_ONLY_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00040000)) >> 18);
}
__INLINE uint8_t bt_controller_stat_only_reg_tx_buf_processing_by_hardware_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_STAT_ONLY_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00020000)) >> 17);
}
__INLINE uint8_t bt_controller_stat_only_reg_tx_buf_availability_to_firmware_to_write_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_STAT_ONLY_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00010000)) >> 16);
}
__INLINE uint16_t bt_controller_stat_only_reg_stat_only_reg_0_15_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_STAT_ONLY_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x0000FFFF)) >> 0);
}

/**
 * @brief RX_BYTE_COUNT_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 Received_Bytes            0x0
 * </pre>
 */
#define BT_CONTROLLER_RX_BYTE_COUNT_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005044)
#define BT_CONTROLLER_RX_BYTE_COUNT_REG_OFFSET      0x00005044
#define BT_CONTROLLER_RX_BYTE_COUNT_REG_INDEX       0x00001411
#define BT_CONTROLLER_RX_BYTE_COUNT_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_rx_byte_count_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RX_BYTE_COUNT_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_RX_BYTE_COUNT_REG_RECEIVED_BYTES_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_RX_BYTE_COUNT_REG_RECEIVED_BYTES_LSB    0
#define BT_CONTROLLER_RX_BYTE_COUNT_REG_RECEIVED_BYTES_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_RX_BYTE_COUNT_REG_RECEIVED_BYTES_RST    0x0

__INLINE uint32_t bt_controller_rx_byte_count_reg_received_bytes_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_BYTE_COUNT_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief AES_KEY_REG_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 AES_module_Key_bits_31_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_AES_KEY_REG_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005048)
#define BT_CONTROLLER_AES_KEY_REG_0_OFFSET      0x00005048
#define BT_CONTROLLER_AES_KEY_REG_0_INDEX       0x00001412
#define BT_CONTROLLER_AES_KEY_REG_0_RESET       0x00000000

__INLINE uint32_t  bt_controller_aes_key_reg_0_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_AES_KEY_REG_0_ADDR);
}

__INLINE void bt_controller_aes_key_reg_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_AES_KEY_REG_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_AES_KEY_REG_0_AES_MODULE_KEY_BITS_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_AES_KEY_REG_0_AES_MODULE_KEY_BITS_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_AES_KEY_REG_0_AES_MODULE_KEY_BITS_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_AES_KEY_REG_0_AES_MODULE_KEY_BITS_31_DOWNTO_0_RST    0x0

__INLINE uint32_t bt_controller_aes_key_reg_0_aes_module_key_bits_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_AES_KEY_REG_0_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_aes_key_reg_0_aes_module_key_bits_31_downto_0_setf(uint32_t aesmodulekeybits31downto0)
{
	ASSERT_ERR((((uint32_t)aesmodulekeybits31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_AES_KEY_REG_0_ADDR, (uint32_t)aesmodulekeybits31downto0 << 0);
}

/**
 * @brief AES_KEY_REG_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 AES_module_Key_bits63_downto_32 0x0
 * </pre>
 */
#define BT_CONTROLLER_AES_KEY_REG_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000504C)
#define BT_CONTROLLER_AES_KEY_REG_1_OFFSET      0x0000504C
#define BT_CONTROLLER_AES_KEY_REG_1_INDEX       0x00001413
#define BT_CONTROLLER_AES_KEY_REG_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_aes_key_reg_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_AES_KEY_REG_1_ADDR);
}

__INLINE void bt_controller_aes_key_reg_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_AES_KEY_REG_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_AES_KEY_REG_1_AES_MODULE_KEY_BITS_63_DOWNTO_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_AES_KEY_REG_1_AES_MODULE_KEY_BITS_63_DOWNTO_32_LSB    0
#define BT_CONTROLLER_AES_KEY_REG_1_AES_MODULE_KEY_BITS_63_DOWNTO_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_AES_KEY_REG_1_AES_MODULE_KEY_BITS_63_DOWNTO_32_RST    0x0

__INLINE uint32_t bt_controller_aes_key_reg_1_aes_module_key_bits_63_downto_32_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_AES_KEY_REG_1_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_aes_key_reg_1_aes_module_key_bits_63_downto_32_setf(uint32_t aesmodulekeybits63downto32)
{
	ASSERT_ERR((((uint32_t)aesmodulekeybits63downto32 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_AES_KEY_REG_1_ADDR, (uint32_t)aesmodulekeybits63downto32 << 0);
}

/**
 * @brief AES_KEY_REG_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 AES_module_Key_bits_95_downto_64 0x0
 * </pre>
 */
#define BT_CONTROLLER_AES_KEY_REG_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005050)
#define BT_CONTROLLER_AES_KEY_REG_2_OFFSET      0x00005050
#define BT_CONTROLLER_AES_KEY_REG_2_INDEX       0x00001414
#define BT_CONTROLLER_AES_KEY_REG_2_RESET       0x00000000

__INLINE uint32_t  bt_controller_aes_key_reg_2_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_AES_KEY_REG_2_ADDR);
}

__INLINE void bt_controller_aes_key_reg_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_AES_KEY_REG_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_AES_KEY_REG_2_AES_MODULE_KEY_BITS_95_DOWNTO_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_AES_KEY_REG_2_AES_MODULE_KEY_BITS_95_DOWNTO_64_LSB    0
#define BT_CONTROLLER_AES_KEY_REG_2_AES_MODULE_KEY_BITS_95_DOWNTO_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_AES_KEY_REG_2_AES_MODULE_KEY_BITS_95_DOWNTO_64_RST    0x0

__INLINE uint32_t bt_controller_aes_key_reg_2_aes_module_key_bits_95_downto_64_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_AES_KEY_REG_2_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_aes_key_reg_2_aes_module_key_bits_95_downto_64_setf(uint32_t aesmodulekeybits95downto64)
{
	ASSERT_ERR((((uint32_t)aesmodulekeybits95downto64 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_AES_KEY_REG_2_ADDR, (uint32_t)aesmodulekeybits95downto64 << 0);
}

/**
 * @brief AES_KEY_REG_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 AES_module_Key_bits_128_downto_96 0x0
 * </pre>
 */
#define BT_CONTROLLER_AES_KEY_REG_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005054)
#define BT_CONTROLLER_AES_KEY_REG_3_OFFSET      0x00005054
#define BT_CONTROLLER_AES_KEY_REG_3_INDEX       0x00001415
#define BT_CONTROLLER_AES_KEY_REG_3_RESET       0x00000000

__INLINE uint32_t  bt_controller_aes_key_reg_3_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_AES_KEY_REG_3_ADDR);
}

__INLINE void bt_controller_aes_key_reg_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_AES_KEY_REG_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_AES_KEY_REG_3_AES_MODULE_KEY_BITS_128_DOWNTO_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_AES_KEY_REG_3_AES_MODULE_KEY_BITS_128_DOWNTO_96_LSB    0
#define BT_CONTROLLER_AES_KEY_REG_3_AES_MODULE_KEY_BITS_128_DOWNTO_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_AES_KEY_REG_3_AES_MODULE_KEY_BITS_128_DOWNTO_96_RST    0x0

__INLINE uint32_t bt_controller_aes_key_reg_3_aes_module_key_bits_128_downto_96_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_AES_KEY_REG_3_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_aes_key_reg_3_aes_module_key_bits_128_downto_96_setf(uint32_t aesmodulekeybits128downto96)
{
	ASSERT_ERR((((uint32_t)aesmodulekeybits128downto96 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_AES_KEY_REG_3_ADDR, (uint32_t)aesmodulekeybits128downto96 << 0);
}

/**
 * @brief AES_DATA_REG_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 AES_module_data_bits_31_downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_AES_DATA_REG_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005058)
#define BT_CONTROLLER_AES_DATA_REG_0_OFFSET      0x00005058
#define BT_CONTROLLER_AES_DATA_REG_0_INDEX       0x00001416
#define BT_CONTROLLER_AES_DATA_REG_0_RESET       0x00000000

__INLINE uint32_t  bt_controller_aes_data_reg_0_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_AES_DATA_REG_0_ADDR);
}

__INLINE void bt_controller_aes_data_reg_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_AES_DATA_REG_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_AES_DATA_REG_0_AES_MODULE_DATA_BITS_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_AES_DATA_REG_0_AES_MODULE_DATA_BITS_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_AES_DATA_REG_0_AES_MODULE_DATA_BITS_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_AES_DATA_REG_0_AES_MODULE_DATA_BITS_31_DOWNTO_0_RST    0x0

__INLINE uint32_t bt_controller_aes_data_reg_0_aes_module_data_bits_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_AES_DATA_REG_0_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_aes_data_reg_0_aes_module_data_bits_31_downto_0_setf(uint32_t aesmoduledatabits31downto0)
{
	ASSERT_ERR((((uint32_t)aesmoduledatabits31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_AES_DATA_REG_0_ADDR, (uint32_t)aesmoduledatabits31downto0 << 0);
}

/**
 * @brief AES_DATA_REG_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 AES_module_data_bits_63_downto_32 0x0
 * </pre>
 */
#define BT_CONTROLLER_AES_DATA_REG_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000505C)
#define BT_CONTROLLER_AES_DATA_REG_1_OFFSET      0x0000505C
#define BT_CONTROLLER_AES_DATA_REG_1_INDEX       0x00001417
#define BT_CONTROLLER_AES_DATA_REG_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_aes_data_reg_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_AES_DATA_REG_1_ADDR);
}

__INLINE void bt_controller_aes_data_reg_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_AES_DATA_REG_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_AES_DATA_REG_1_AES_MODULE_DATA_BITS_63_DOWNTO_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_AES_DATA_REG_1_AES_MODULE_DATA_BITS_63_DOWNTO_32_LSB    0
#define BT_CONTROLLER_AES_DATA_REG_1_AES_MODULE_DATA_BITS_63_DOWNTO_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_AES_DATA_REG_1_AES_MODULE_DATA_BITS_63_DOWNTO_32_RST    0x0

__INLINE uint32_t bt_controller_aes_data_reg_1_aes_module_data_bits_63_downto_32_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_AES_DATA_REG_1_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_aes_data_reg_1_aes_module_data_bits_63_downto_32_setf(uint32_t aesmoduledatabits63downto32)
{
	ASSERT_ERR((((uint32_t)aesmoduledatabits63downto32 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_AES_DATA_REG_1_ADDR, (uint32_t)aesmoduledatabits63downto32 << 0);
}

/**
 * @brief AES_DATA_REG_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 AES_module_data_bits_95_downto_64 0x0
 * </pre>
 */
#define BT_CONTROLLER_AES_DATA_REG_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005060)
#define BT_CONTROLLER_AES_DATA_REG_2_OFFSET      0x00005060
#define BT_CONTROLLER_AES_DATA_REG_2_INDEX       0x00001418
#define BT_CONTROLLER_AES_DATA_REG_2_RESET       0x00000000

__INLINE uint32_t  bt_controller_aes_data_reg_2_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_AES_DATA_REG_2_ADDR);
}

__INLINE void bt_controller_aes_data_reg_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_AES_DATA_REG_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_AES_DATA_REG_2_AES_MODULE_DATA_BITS_95_DOWNTO_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_AES_DATA_REG_2_AES_MODULE_DATA_BITS_95_DOWNTO_64_LSB    0
#define BT_CONTROLLER_AES_DATA_REG_2_AES_MODULE_DATA_BITS_95_DOWNTO_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_AES_DATA_REG_2_AES_MODULE_DATA_BITS_95_DOWNTO_64_RST    0x0

__INLINE uint32_t bt_controller_aes_data_reg_2_aes_module_data_bits_95_downto_64_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_AES_DATA_REG_2_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_aes_data_reg_2_aes_module_data_bits_95_downto_64_setf(uint32_t aesmoduledatabits95downto64)
{
	ASSERT_ERR((((uint32_t)aesmoduledatabits95downto64 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_AES_DATA_REG_2_ADDR, (uint32_t)aesmoduledatabits95downto64 << 0);
}

/**
 * @brief AES_DATA_REG_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 AES_module_data_bits_128_downto_96 0x0
 * </pre>
 */
#define BT_CONTROLLER_AES_DATA_REG_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005064)
#define BT_CONTROLLER_AES_DATA_REG_3_OFFSET      0x00005064
#define BT_CONTROLLER_AES_DATA_REG_3_INDEX       0x00001419
#define BT_CONTROLLER_AES_DATA_REG_3_RESET       0x00000000

__INLINE uint32_t  bt_controller_aes_data_reg_3_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_AES_DATA_REG_3_ADDR);
}

__INLINE void bt_controller_aes_data_reg_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_AES_DATA_REG_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_AES_DATA_REG_3_AES_MODULE_DATA_BITS_128_DOWNTO_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_AES_DATA_REG_3_AES_MODULE_DATA_BITS_128_DOWNTO_96_LSB    0
#define BT_CONTROLLER_AES_DATA_REG_3_AES_MODULE_DATA_BITS_128_DOWNTO_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_AES_DATA_REG_3_AES_MODULE_DATA_BITS_128_DOWNTO_96_RST    0x0

__INLINE uint32_t bt_controller_aes_data_reg_3_aes_module_data_bits_128_downto_96_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_AES_DATA_REG_3_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_aes_data_reg_3_aes_module_data_bits_128_downto_96_setf(uint32_t aesmoduledatabits128downto96)
{
	ASSERT_ERR((((uint32_t)aesmoduledatabits128downto96 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_AES_DATA_REG_3_ADDR, (uint32_t)aesmoduledatabits128downto96 << 0);
}

/**
 * @brief PKT_DBG_COUNTERS_EN register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:05 pkt_debug_counters_reg_31_downto_5bits_reserved 0x7FF_FFFF
 *    04    auth_fail_counter_en      1              
 *    03    auth_pass_counter_en      1              
 *    02    packet_without_error_counter_en 1              
 *    01    packet_with_error_counter_en 1              
 *    00    access_addr_detect_counter_en 1              
 * </pre>
 */
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005068)
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_OFFSET      0x00005068
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_INDEX       0x0000141A
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_RESET       0xFFFFFFFF

__INLINE uint32_t  bt_controller_pkt_dbg_counters_en_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR);
}

__INLINE void bt_controller_pkt_dbg_counters_en_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_PKT_DEBUG_COUNTERS_REG_31_DOWNTO_5_BITS_RESERVED_MASK    ((uint32_t)0xFFFFFFE0)
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_PKT_DEBUG_COUNTERS_REG_31_DOWNTO_5_BITS_RESERVED_LSB    5
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_PKT_DEBUG_COUNTERS_REG_31_DOWNTO_5_BITS_RESERVED_WIDTH    ((uint32_t)0x0000001B)
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_AUTH_FAIL_COUNTER_EN_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_AUTH_FAIL_COUNTER_EN_POS    4
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_AUTH_PASS_COUNTER_EN_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_AUTH_PASS_COUNTER_EN_POS    3
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_PACKET_WITHOUT_ERROR_COUNTER_EN_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_PACKET_WITHOUT_ERROR_COUNTER_EN_POS    2
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_PACKET_WITH_ERROR_COUNTER_EN_BIT    ((uint32_t)0x00000002)
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_PACKET_WITH_ERROR_COUNTER_EN_POS    1
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ACCESS_ADDR_DETECT_COUNTER_EN_BIT    ((uint32_t)0x00000001)
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ACCESS_ADDR_DETECT_COUNTER_EN_POS    0

#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_PKT_DEBUG_COUNTERS_REG_31_DOWNTO_5_BITS_RESERVED_RST    0x7FF_FFFF
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_AUTH_FAIL_COUNTER_EN_RST    0x1
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_AUTH_PASS_COUNTER_EN_RST    0x1
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_PACKET_WITHOUT_ERROR_COUNTER_EN_RST    0x1
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_PACKET_WITH_ERROR_COUNTER_EN_RST    0x1
#define BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ACCESS_ADDR_DETECT_COUNTER_EN_RST    0x1

__INLINE void bt_controller_pkt_dbg_counters_en_pack(uint32_t pkt_debug_counters_reg_31_downto_5bits_reserved, uint8_t auth_fail_counter_en, uint8_t auth_pass_counter_en, uint8_t packet_without_error_counter_en, uint8_t packet_with_error_counter_en, uint8_t access_addr_detect_counter_en)
{
	ASSERT_ERR((((uint32_t)pkt_debug_counters_reg_31_downto_5bits_reserved << 5) & ~((uint32_t)0xFFFFFFE0)) == 0);
	ASSERT_ERR((((uint32_t)auth_fail_counter_en << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)auth_pass_counter_en << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)packet_without_error_counter_en << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)packet_with_error_counter_en << 1) & ~((uint32_t)0x00000002)) == 0);
	ASSERT_ERR((((uint32_t)access_addr_detect_counter_en << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR,  ((uint32_t)pkt_debug_counters_reg_31_downto_5bits_reserved << 5) |((uint32_t)auth_fail_counter_en << 4) |((uint32_t)auth_pass_counter_en << 3) |((uint32_t)packet_without_error_counter_en << 2) |((uint32_t)packet_with_error_counter_en << 1) |((uint32_t)access_addr_detect_counter_en << 0));
}

__INLINE void bt_controller_pkt_dbg_counters_en_unpack(uint32_t* pkt_debug_counters_reg_31_downto_5bits_reserved, uint8_t* auth_fail_counter_en, uint8_t* auth_pass_counter_en, uint8_t* packet_without_error_counter_en, uint8_t* packet_with_error_counter_en, uint8_t* access_addr_detect_counter_en)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR);

	*pkt_debug_counters_reg_31_downto_5bits_reserved = (localVal & ((uint32_t)0xFFFFFFE0)) >>  5;
	*auth_fail_counter_en = (localVal & ((uint32_t)0x00000010)) >>  4;
	*auth_pass_counter_en = (localVal & ((uint32_t)0x00000008)) >>  3;
	*packet_without_error_counter_en = (localVal & ((uint32_t)0x00000004)) >>  2;
	*packet_with_error_counter_en = (localVal & ((uint32_t)0x00000002)) >>  1;
	*access_addr_detect_counter_en = (localVal & ((uint32_t)0x00000001)) >>  0;
}

__INLINE uint32_t bt_controller_pkt_dbg_counters_en_pkt_debug_counters_reg_31_downto_5_bits_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFE0)) >> 5);
}
__INLINE uint8_t bt_controller_pkt_dbg_counters_en_auth_fail_counter_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_pkt_dbg_counters_en_auth_fail_counter_en_setf(uint8_t authfailcounteren)
{
	ASSERT_ERR((((uint32_t)authfailcounteren << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR, (REG_PL_RD(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)authfailcounteren <<4));
}
__INLINE uint8_t bt_controller_pkt_dbg_counters_en_auth_pass_counter_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE void bt_controller_pkt_dbg_counters_en_auth_pass_counter_en_setf(uint8_t authpasscounteren)
{
	ASSERT_ERR((((uint32_t)authpasscounteren << 3) & ~((uint32_t)0x00000008)) == 0);
	REG_PL_WR(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR, (REG_PL_RD(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR) & ~((uint32_t)0x00000008)) | ((uint32_t)authpasscounteren <<3));
}
__INLINE uint8_t bt_controller_pkt_dbg_counters_en_packet_without_error_counter_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_pkt_dbg_counters_en_packet_without_error_counter_en_setf(uint8_t packetwithouterrorcounteren)
{
	ASSERT_ERR((((uint32_t)packetwithouterrorcounteren << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR, (REG_PL_RD(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)packetwithouterrorcounteren <<2));
}
__INLINE uint8_t bt_controller_pkt_dbg_counters_en_packet_with_error_counter_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000002)) >> 1);
}
__INLINE void bt_controller_pkt_dbg_counters_en_packet_with_error_counter_en_setf(uint8_t packetwitherrorcounteren)
{
	ASSERT_ERR((((uint32_t)packetwitherrorcounteren << 1) & ~((uint32_t)0x00000002)) == 0);
	REG_PL_WR(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR, (REG_PL_RD(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR) & ~((uint32_t)0x00000002)) | ((uint32_t)packetwitherrorcounteren <<1));
}
__INLINE uint8_t bt_controller_pkt_dbg_counters_en_access_addr_detect_counter_en_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000001)) >> 0);
}
__INLINE void bt_controller_pkt_dbg_counters_en_access_addr_detect_counter_en_setf(uint8_t accessaddrdetectcounteren)
{
	ASSERT_ERR((((uint32_t)accessaddrdetectcounteren << 0) & ~((uint32_t)0x00000001)) == 0);
	REG_PL_WR(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR, (REG_PL_RD(BT_CONTROLLER_PKT_DBG_COUNTERS_EN_ADDR) & ~((uint32_t)0x00000001)) | ((uint32_t)accessaddrdetectcounteren <<0));
}

/**
 * @brief ACC_ADDR_DETECT_COUNTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 acc_add_detect_couter_reg 0x0
 * </pre>
 */
#define BT_CONTROLLER_ACC_ADDR_DETECT_COUNTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000506C)
#define BT_CONTROLLER_ACC_ADDR_DETECT_COUNTER_OFFSET      0x0000506C
#define BT_CONTROLLER_ACC_ADDR_DETECT_COUNTER_INDEX       0x0000141B
#define BT_CONTROLLER_ACC_ADDR_DETECT_COUNTER_RESET       0x00000000

__INLINE uint32_t  bt_controller_acc_addr_detect_counter_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_ACC_ADDR_DETECT_COUNTER_ADDR);
}

// field definitions
#define BT_CONTROLLER_ACC_ADDR_DETECT_COUNTER_ACC_ADD_DETECT_COUTER_REG_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_ACC_ADDR_DETECT_COUNTER_ACC_ADD_DETECT_COUTER_REG_LSB    0
#define BT_CONTROLLER_ACC_ADDR_DETECT_COUNTER_ACC_ADD_DETECT_COUTER_REG_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_ACC_ADDR_DETECT_COUNTER_ACC_ADD_DETECT_COUTER_REG_RST    0x0

__INLINE uint32_t bt_controller_acc_addr_detect_counter_acc_add_detect_couter_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_ACC_ADDR_DETECT_COUNTER_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_DONE_W_ERR_COUNTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 rx_done_with_err_counter_reg 0x0
 * </pre>
 */
#define BT_CONTROLLER_RX_DONE_W_ERR_COUNTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005070)
#define BT_CONTROLLER_RX_DONE_W_ERR_COUNTER_OFFSET      0x00005070
#define BT_CONTROLLER_RX_DONE_W_ERR_COUNTER_INDEX       0x0000141C
#define BT_CONTROLLER_RX_DONE_W_ERR_COUNTER_RESET       0x00000000

__INLINE uint32_t  bt_controller_rx_done_w_err_counter_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RX_DONE_W_ERR_COUNTER_ADDR);
}

// field definitions
#define BT_CONTROLLER_RX_DONE_W_ERR_COUNTER_RX_DONE_WITH_ERR_COUNTER_REG_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_RX_DONE_W_ERR_COUNTER_RX_DONE_WITH_ERR_COUNTER_REG_LSB    0
#define BT_CONTROLLER_RX_DONE_W_ERR_COUNTER_RX_DONE_WITH_ERR_COUNTER_REG_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_RX_DONE_W_ERR_COUNTER_RX_DONE_WITH_ERR_COUNTER_REG_RST    0x0

__INLINE uint32_t bt_controller_rx_done_w_err_counter_rx_done_with_err_counter_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_DONE_W_ERR_COUNTER_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief RX_DONE_WO_ERR_COUNTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 rx_done_wo_err_counter_reg 0x0
 * </pre>
 */
#define BT_CONTROLLER_RX_DONE_WO_ERR_COUNTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005074)
#define BT_CONTROLLER_RX_DONE_WO_ERR_COUNTER_OFFSET      0x00005074
#define BT_CONTROLLER_RX_DONE_WO_ERR_COUNTER_INDEX       0x0000141D
#define BT_CONTROLLER_RX_DONE_WO_ERR_COUNTER_RESET       0x00000000

__INLINE uint32_t  bt_controller_rx_done_wo_err_counter_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_RX_DONE_WO_ERR_COUNTER_ADDR);
}

// field definitions
#define BT_CONTROLLER_RX_DONE_WO_ERR_COUNTER_RX_DONE_WO_ERR_COUNTER_REG_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_RX_DONE_WO_ERR_COUNTER_RX_DONE_WO_ERR_COUNTER_REG_LSB    0
#define BT_CONTROLLER_RX_DONE_WO_ERR_COUNTER_RX_DONE_WO_ERR_COUNTER_REG_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_RX_DONE_WO_ERR_COUNTER_RX_DONE_WO_ERR_COUNTER_REG_RST    0x0

__INLINE uint32_t bt_controller_rx_done_wo_err_counter_rx_done_wo_err_counter_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_RX_DONE_WO_ERR_COUNTER_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief AUTH_PASS_COUNTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 aut_pass_counter_reg      0x0
 * </pre>
 */
#define BT_CONTROLLER_AUTH_PASS_COUNTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005078)
#define BT_CONTROLLER_AUTH_PASS_COUNTER_OFFSET      0x00005078
#define BT_CONTROLLER_AUTH_PASS_COUNTER_INDEX       0x0000141E
#define BT_CONTROLLER_AUTH_PASS_COUNTER_RESET       0x00000000

__INLINE uint32_t  bt_controller_auth_pass_counter_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_AUTH_PASS_COUNTER_ADDR);
}

// field definitions
#define BT_CONTROLLER_AUTH_PASS_COUNTER_AUT_PASS_COUNTER_REG_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_AUTH_PASS_COUNTER_AUT_PASS_COUNTER_REG_LSB    0
#define BT_CONTROLLER_AUTH_PASS_COUNTER_AUT_PASS_COUNTER_REG_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_AUTH_PASS_COUNTER_AUT_PASS_COUNTER_REG_RST    0x0

__INLINE uint32_t bt_controller_auth_pass_counter_aut_pass_counter_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_AUTH_PASS_COUNTER_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief AUTH_FAIL_COUNTER register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 aut_fail_counter_reg      0x0
 * </pre>
 */
#define BT_CONTROLLER_AUTH_FAIL_COUNTER_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000507C)
#define BT_CONTROLLER_AUTH_FAIL_COUNTER_OFFSET      0x0000507C
#define BT_CONTROLLER_AUTH_FAIL_COUNTER_INDEX       0x0000141F
#define BT_CONTROLLER_AUTH_FAIL_COUNTER_RESET       0x00000000

__INLINE uint32_t  bt_controller_auth_fail_counter_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_AUTH_FAIL_COUNTER_ADDR);
}

// field definitions
#define BT_CONTROLLER_AUTH_FAIL_COUNTER_AUT_FAIL_COUNTER_REG_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_AUTH_FAIL_COUNTER_AUT_FAIL_COUNTER_REG_LSB    0
#define BT_CONTROLLER_AUTH_FAIL_COUNTER_AUT_FAIL_COUNTER_REG_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_AUTH_FAIL_COUNTER_AUT_FAIL_COUNTER_REG_RST    0x0

__INLINE uint32_t bt_controller_auth_fail_counter_aut_fail_counter_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_AUTH_FAIL_COUNTER_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PRIVACY_CONFIG_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:12 reserved_bit31_bit12_privacy_config_reg 0x0
 *    11:08 Offset_in_payload_to_capture_the_unresolved_address 0x0
 *    07:05 reserved_bit7_to_bit5_privacy_config_reg 0x0
 *    04    Privacy_Enable            0              
 *    03:00 Number_of_valid_entries_in_IRK_table 0x0
 * </pre>
 */
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005080)
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_OFFSET      0x00005080
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_INDEX       0x00001420
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_privacy_config_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PRIVACY_CONFIG_REG_ADDR);
}

__INLINE void bt_controller_privacy_config_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PRIVACY_CONFIG_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_RESERVED_BIT_31_BIT_12_PRIVACY_CONFIG_REG_MASK    ((uint32_t)0xFFFFF000)
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_RESERVED_BIT_31_BIT_12_PRIVACY_CONFIG_REG_LSB    12
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_RESERVED_BIT_31_BIT_12_PRIVACY_CONFIG_REG_WIDTH    ((uint32_t)0x00000014)
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_OFFSET_IN_PAYLOAD_TO_CAPTURE_THE_UNRESOLVED_ADDRESS_MASK    ((uint32_t)0x00000F00)
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_OFFSET_IN_PAYLOAD_TO_CAPTURE_THE_UNRESOLVED_ADDRESS_LSB    8
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_OFFSET_IN_PAYLOAD_TO_CAPTURE_THE_UNRESOLVED_ADDRESS_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_RESERVED_BIT_7_TO_BIT_5_PRIVACY_CONFIG_REG_MASK    ((uint32_t)0x000000E0)
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_RESERVED_BIT_7_TO_BIT_5_PRIVACY_CONFIG_REG_LSB    5
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_RESERVED_BIT_7_TO_BIT_5_PRIVACY_CONFIG_REG_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_PRIVACY_ENABLE_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_PRIVACY_ENABLE_POS    4
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_NUMBER_OF_VALID_ENTRIES_IN_IRK_TABLE_MASK    ((uint32_t)0x0000000F)
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_NUMBER_OF_VALID_ENTRIES_IN_IRK_TABLE_LSB    0
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_NUMBER_OF_VALID_ENTRIES_IN_IRK_TABLE_WIDTH    ((uint32_t)0x00000004)

#define BT_CONTROLLER_PRIVACY_CONFIG_REG_RESERVED_BIT_31_BIT_12_PRIVACY_CONFIG_REG_RST    0x0
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_OFFSET_IN_PAYLOAD_TO_CAPTURE_THE_UNRESOLVED_ADDRESS_RST    0x0
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_RESERVED_BIT_7_TO_BIT_5_PRIVACY_CONFIG_REG_RST    0x0
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_PRIVACY_ENABLE_RST    0x0
#define BT_CONTROLLER_PRIVACY_CONFIG_REG_NUMBER_OF_VALID_ENTRIES_IN_IRK_TABLE_RST    0x0

__INLINE void bt_controller_privacy_config_reg_pack(uint32_t reserved_bit31_bit12_privacy_config_reg, uint8_t offset_in_payload_to_capture_the_unresolved_address, uint8_t reserved_bit7_to_bit5_privacy_config_reg, uint8_t privacy_enable, uint8_t number_of_valid_entries_in_irk_table)
{
	ASSERT_ERR((((uint32_t)reserved_bit31_bit12_privacy_config_reg << 12) & ~((uint32_t)0xFFFFF000)) == 0);
	ASSERT_ERR((((uint32_t)offset_in_payload_to_capture_the_unresolved_address << 8) & ~((uint32_t)0x00000F00)) == 0);
	ASSERT_ERR((((uint32_t)reserved_bit7_to_bit5_privacy_config_reg << 5) & ~((uint32_t)0x000000E0)) == 0);
	ASSERT_ERR((((uint32_t)privacy_enable << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)number_of_valid_entries_in_irk_table << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIVACY_CONFIG_REG_ADDR,  ((uint32_t)reserved_bit31_bit12_privacy_config_reg << 12) |((uint32_t)offset_in_payload_to_capture_the_unresolved_address << 8) |((uint32_t)reserved_bit7_to_bit5_privacy_config_reg << 5) |((uint32_t)privacy_enable << 4) |((uint32_t)number_of_valid_entries_in_irk_table << 0));
}

__INLINE void bt_controller_privacy_config_reg_unpack(uint32_t* reserved_bit31_bit12_privacy_config_reg, uint8_t* offset_in_payload_to_capture_the_unresolved_address, uint8_t* reserved_bit7_to_bit5_privacy_config_reg, uint8_t* privacy_enable, uint8_t* number_of_valid_entries_in_irk_table)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIVACY_CONFIG_REG_ADDR);

	*reserved_bit31_bit12_privacy_config_reg = (localVal & ((uint32_t)0xFFFFF000)) >>  12;
	*offset_in_payload_to_capture_the_unresolved_address = (localVal & ((uint32_t)0x00000F00)) >>  8;
	*reserved_bit7_to_bit5_privacy_config_reg = (localVal & ((uint32_t)0x000000E0)) >>  5;
	*privacy_enable = (localVal & ((uint32_t)0x00000010)) >>  4;
	*number_of_valid_entries_in_irk_table = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint32_t bt_controller_privacy_config_reg_reserved_bit_31_bit_12_privacy_config_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIVACY_CONFIG_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFF000)) >> 12);
}
__INLINE uint8_t bt_controller_privacy_config_reg_offset_in_payload_to_capture_the_unresolved_address_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIVACY_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000F00)) >> 8);
}
__INLINE void bt_controller_privacy_config_reg_offset_in_payload_to_capture_the_unresolved_address_setf(uint8_t offsetinpayloadtocapturetheunresolvedaddress)
{
	ASSERT_ERR((((uint32_t)offsetinpayloadtocapturetheunresolvedaddress << 8) & ~((uint32_t)0x00000F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIVACY_CONFIG_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIVACY_CONFIG_REG_ADDR) & ~((uint32_t)0x00000F00)) | ((uint32_t)offsetinpayloadtocapturetheunresolvedaddress <<8));
}
__INLINE uint8_t bt_controller_privacy_config_reg_reserved_bit_7_to_bit_5_privacy_config_reg_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIVACY_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000E0)) >> 5);
}
__INLINE uint8_t bt_controller_privacy_config_reg_privacy_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIVACY_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_privacy_config_reg_privacy_enable_setf(uint8_t privacyenable)
{
	ASSERT_ERR((((uint32_t)privacyenable << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIVACY_CONFIG_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIVACY_CONFIG_REG_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)privacyenable <<4));
}
__INLINE uint8_t bt_controller_privacy_config_reg_number_of_valid_entries_in_irk_table_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIVACY_CONFIG_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void bt_controller_privacy_config_reg_number_of_valid_entries_in_irk_table_setf(uint8_t numberofvalidentriesinirktable)
{
	ASSERT_ERR((((uint32_t)numberofvalidentriesinirktable << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(BT_CONTROLLER_PRIVACY_CONFIG_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PRIVACY_CONFIG_REG_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)numberofvalidentriesinirktable <<0));
}

/**
 * @brief PRIVACY_STATUS_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:04 reserved_privacy_status_bit31_bit4 0x0
 *    03:00 Resolved_Index            0x0
 * </pre>
 */
#define BT_CONTROLLER_PRIVACY_STATUS_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005084)
#define BT_CONTROLLER_PRIVACY_STATUS_REG_OFFSET      0x00005084
#define BT_CONTROLLER_PRIVACY_STATUS_REG_INDEX       0x00001421
#define BT_CONTROLLER_PRIVACY_STATUS_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_privacy_status_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PRIVACY_STATUS_REG_ADDR);
}

// field definitions
#define BT_CONTROLLER_PRIVACY_STATUS_REG_RESERVED_PRIVACY_STATUS_BIT_31_BIT_4_MASK    ((uint32_t)0xFFFFFFF0)
#define BT_CONTROLLER_PRIVACY_STATUS_REG_RESERVED_PRIVACY_STATUS_BIT_31_BIT_4_LSB    4
#define BT_CONTROLLER_PRIVACY_STATUS_REG_RESERVED_PRIVACY_STATUS_BIT_31_BIT_4_WIDTH    ((uint32_t)0x0000001C)
#define BT_CONTROLLER_PRIVACY_STATUS_REG_RESOLVED_INDEX_MASK    ((uint32_t)0x0000000F)
#define BT_CONTROLLER_PRIVACY_STATUS_REG_RESOLVED_INDEX_LSB    0
#define BT_CONTROLLER_PRIVACY_STATUS_REG_RESOLVED_INDEX_WIDTH    ((uint32_t)0x00000004)

#define BT_CONTROLLER_PRIVACY_STATUS_REG_RESERVED_PRIVACY_STATUS_BIT_31_BIT_4_RST    0x0
#define BT_CONTROLLER_PRIVACY_STATUS_REG_RESOLVED_INDEX_RST    0x0

__INLINE void bt_controller_privacy_status_reg_unpack(uint32_t* reserved_privacy_status_bit31_bit4, uint8_t* resolved_index)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIVACY_STATUS_REG_ADDR);

	*reserved_privacy_status_bit31_bit4 = (localVal & ((uint32_t)0xFFFFFFF0)) >>  4;
	*resolved_index = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint32_t bt_controller_privacy_status_reg_reserved_privacy_status_bit_31_bit_4_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIVACY_STATUS_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFF0)) >> 4);
}
__INLINE uint8_t bt_controller_privacy_status_reg_resolved_index_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PRIVACY_STATUS_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}

/**
 * @brief IRK_0_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK0_31_0                 0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_0_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005090)
#define BT_CONTROLLER_IRK_0_0_OFFSET      0x00005090
#define BT_CONTROLLER_IRK_0_0_INDEX       0x00001424
#define BT_CONTROLLER_IRK_0_0_RESET       0x00000000

__INLINE void bt_controller_irk_0_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_0_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_0_0_IRK_0_31_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_0_0_IRK_0_31_0_LSB    0
#define BT_CONTROLLER_IRK_0_0_IRK_0_31_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_0_0_IRK_0_31_0_RST    0x0

__INLINE void bt_controller_irk_0_0_irk_0_31_0_setf(uint32_t irk0310)
{
	ASSERT_ERR((((uint32_t)irk0310 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_0_0_ADDR, (uint32_t)irk0310 << 0);
}

/**
 * @brief IRK_0_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK0_63_32                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_0_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005094)
#define BT_CONTROLLER_IRK_0_1_OFFSET      0x00005094
#define BT_CONTROLLER_IRK_0_1_INDEX       0x00001425
#define BT_CONTROLLER_IRK_0_1_RESET       0x00000000

__INLINE void bt_controller_irk_0_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_0_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_0_1_IRK_0_63_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_0_1_IRK_0_63_32_LSB    0
#define BT_CONTROLLER_IRK_0_1_IRK_0_63_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_0_1_IRK_0_63_32_RST    0x0

__INLINE void bt_controller_irk_0_1_irk_0_63_32_setf(uint32_t irk06332)
{
	ASSERT_ERR((((uint32_t)irk06332 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_0_1_ADDR, (uint32_t)irk06332 << 0);
}

/**
 * @brief IRK_0_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK0_95_64                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_0_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005098)
#define BT_CONTROLLER_IRK_0_2_OFFSET      0x00005098
#define BT_CONTROLLER_IRK_0_2_INDEX       0x00001426
#define BT_CONTROLLER_IRK_0_2_RESET       0x00000000

__INLINE void bt_controller_irk_0_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_0_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_0_2_IRK_0_95_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_0_2_IRK_0_95_64_LSB    0
#define BT_CONTROLLER_IRK_0_2_IRK_0_95_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_0_2_IRK_0_95_64_RST    0x0

__INLINE void bt_controller_irk_0_2_irk_0_95_64_setf(uint32_t irk09564)
{
	ASSERT_ERR((((uint32_t)irk09564 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_0_2_ADDR, (uint32_t)irk09564 << 0);
}

/**
 * @brief IRK_0_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK0_127_96               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_0_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000509C)
#define BT_CONTROLLER_IRK_0_3_OFFSET      0x0000509C
#define BT_CONTROLLER_IRK_0_3_INDEX       0x00001427
#define BT_CONTROLLER_IRK_0_3_RESET       0x00000000

__INLINE void bt_controller_irk_0_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_0_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_0_3_IRK_0_127_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_0_3_IRK_0_127_96_LSB    0
#define BT_CONTROLLER_IRK_0_3_IRK_0_127_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_0_3_IRK_0_127_96_RST    0x0

__INLINE void bt_controller_irk_0_3_irk_0_127_96_setf(uint32_t irk012796)
{
	ASSERT_ERR((((uint32_t)irk012796 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_0_3_ADDR, (uint32_t)irk012796 << 0);
}

/**
 * @brief IRK_1_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK1_31_0                 0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_1_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050A0)
#define BT_CONTROLLER_IRK_1_0_OFFSET      0x000050A0
#define BT_CONTROLLER_IRK_1_0_INDEX       0x00001428
#define BT_CONTROLLER_IRK_1_0_RESET       0x00000000

__INLINE void bt_controller_irk_1_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_1_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_1_0_IRK_1_31_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_1_0_IRK_1_31_0_LSB    0
#define BT_CONTROLLER_IRK_1_0_IRK_1_31_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_1_0_IRK_1_31_0_RST    0x0

__INLINE void bt_controller_irk_1_0_irk_1_31_0_setf(uint32_t irk1310)
{
	ASSERT_ERR((((uint32_t)irk1310 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_1_0_ADDR, (uint32_t)irk1310 << 0);
}

/**
 * @brief IRK_1_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK1_63_32                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_1_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050A4)
#define BT_CONTROLLER_IRK_1_1_OFFSET      0x000050A4
#define BT_CONTROLLER_IRK_1_1_INDEX       0x00001429
#define BT_CONTROLLER_IRK_1_1_RESET       0x00000000

__INLINE void bt_controller_irk_1_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_1_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_1_1_IRK_1_63_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_1_1_IRK_1_63_32_LSB    0
#define BT_CONTROLLER_IRK_1_1_IRK_1_63_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_1_1_IRK_1_63_32_RST    0x0

__INLINE void bt_controller_irk_1_1_irk_1_63_32_setf(uint32_t irk16332)
{
	ASSERT_ERR((((uint32_t)irk16332 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_1_1_ADDR, (uint32_t)irk16332 << 0);
}

/**
 * @brief IRK_1_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK1_95_64                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_1_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050A8)
#define BT_CONTROLLER_IRK_1_2_OFFSET      0x000050A8
#define BT_CONTROLLER_IRK_1_2_INDEX       0x0000142A
#define BT_CONTROLLER_IRK_1_2_RESET       0x00000000

__INLINE void bt_controller_irk_1_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_1_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_1_2_IRK_1_95_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_1_2_IRK_1_95_64_LSB    0
#define BT_CONTROLLER_IRK_1_2_IRK_1_95_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_1_2_IRK_1_95_64_RST    0x0

__INLINE void bt_controller_irk_1_2_irk_1_95_64_setf(uint32_t irk19564)
{
	ASSERT_ERR((((uint32_t)irk19564 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_1_2_ADDR, (uint32_t)irk19564 << 0);
}

/**
 * @brief IRK_1_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK1_127_96               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_1_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050AC)
#define BT_CONTROLLER_IRK_1_3_OFFSET      0x000050AC
#define BT_CONTROLLER_IRK_1_3_INDEX       0x0000142B
#define BT_CONTROLLER_IRK_1_3_RESET       0x00000000

__INLINE void bt_controller_irk_1_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_1_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_1_3_IRK_1_127_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_1_3_IRK_1_127_96_LSB    0
#define BT_CONTROLLER_IRK_1_3_IRK_1_127_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_1_3_IRK_1_127_96_RST    0x0

__INLINE void bt_controller_irk_1_3_irk_1_127_96_setf(uint32_t irk112796)
{
	ASSERT_ERR((((uint32_t)irk112796 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_1_3_ADDR, (uint32_t)irk112796 << 0);
}

/**
 * @brief IRK_2_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK2_31_0                 0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_2_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050B0)
#define BT_CONTROLLER_IRK_2_0_OFFSET      0x000050B0
#define BT_CONTROLLER_IRK_2_0_INDEX       0x0000142C
#define BT_CONTROLLER_IRK_2_0_RESET       0x00000000

__INLINE void bt_controller_irk_2_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_2_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_2_0_IRK_2_31_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_2_0_IRK_2_31_0_LSB    0
#define BT_CONTROLLER_IRK_2_0_IRK_2_31_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_2_0_IRK_2_31_0_RST    0x0

__INLINE void bt_controller_irk_2_0_irk_2_31_0_setf(uint32_t irk2310)
{
	ASSERT_ERR((((uint32_t)irk2310 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_2_0_ADDR, (uint32_t)irk2310 << 0);
}

/**
 * @brief IRK_2_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK2_63_32                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_2_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050B4)
#define BT_CONTROLLER_IRK_2_1_OFFSET      0x000050B4
#define BT_CONTROLLER_IRK_2_1_INDEX       0x0000142D
#define BT_CONTROLLER_IRK_2_1_RESET       0x00000000

__INLINE void bt_controller_irk_2_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_2_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_2_1_IRK_2_63_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_2_1_IRK_2_63_32_LSB    0
#define BT_CONTROLLER_IRK_2_1_IRK_2_63_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_2_1_IRK_2_63_32_RST    0x0

__INLINE void bt_controller_irk_2_1_irk_2_63_32_setf(uint32_t irk26332)
{
	ASSERT_ERR((((uint32_t)irk26332 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_2_1_ADDR, (uint32_t)irk26332 << 0);
}

/**
 * @brief IRK_2_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK2_95_64                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_2_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050B8)
#define BT_CONTROLLER_IRK_2_2_OFFSET      0x000050B8
#define BT_CONTROLLER_IRK_2_2_INDEX       0x0000142E
#define BT_CONTROLLER_IRK_2_2_RESET       0x00000000

__INLINE void bt_controller_irk_2_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_2_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_2_2_IRK_2_95_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_2_2_IRK_2_95_64_LSB    0
#define BT_CONTROLLER_IRK_2_2_IRK_2_95_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_2_2_IRK_2_95_64_RST    0x0

__INLINE void bt_controller_irk_2_2_irk_2_95_64_setf(uint32_t irk29564)
{
	ASSERT_ERR((((uint32_t)irk29564 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_2_2_ADDR, (uint32_t)irk29564 << 0);
}

/**
 * @brief IRK_2_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK2_127_96               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_2_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050BC)
#define BT_CONTROLLER_IRK_2_3_OFFSET      0x000050BC
#define BT_CONTROLLER_IRK_2_3_INDEX       0x0000142F
#define BT_CONTROLLER_IRK_2_3_RESET       0x00000000

__INLINE void bt_controller_irk_2_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_2_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_2_3_IRK_2_127_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_2_3_IRK_2_127_96_LSB    0
#define BT_CONTROLLER_IRK_2_3_IRK_2_127_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_2_3_IRK_2_127_96_RST    0x0

__INLINE void bt_controller_irk_2_3_irk_2_127_96_setf(uint32_t irk212796)
{
	ASSERT_ERR((((uint32_t)irk212796 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_2_3_ADDR, (uint32_t)irk212796 << 0);
}

/**
 * @brief IRK_3_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK3_31_0                 0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_3_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050C0)
#define BT_CONTROLLER_IRK_3_0_OFFSET      0x000050C0
#define BT_CONTROLLER_IRK_3_0_INDEX       0x00001430
#define BT_CONTROLLER_IRK_3_0_RESET       0x00000000

__INLINE void bt_controller_irk_3_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_3_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_3_0_IRK_3_31_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_3_0_IRK_3_31_0_LSB    0
#define BT_CONTROLLER_IRK_3_0_IRK_3_31_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_3_0_IRK_3_31_0_RST    0x0

__INLINE void bt_controller_irk_3_0_irk_3_31_0_setf(uint32_t irk3310)
{
	ASSERT_ERR((((uint32_t)irk3310 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_3_0_ADDR, (uint32_t)irk3310 << 0);
}

/**
 * @brief IRK_3_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK3_63_32                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_3_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050C4)
#define BT_CONTROLLER_IRK_3_1_OFFSET      0x000050C4
#define BT_CONTROLLER_IRK_3_1_INDEX       0x00001431
#define BT_CONTROLLER_IRK_3_1_RESET       0x00000000

__INLINE void bt_controller_irk_3_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_3_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_3_1_IRK_3_63_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_3_1_IRK_3_63_32_LSB    0
#define BT_CONTROLLER_IRK_3_1_IRK_3_63_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_3_1_IRK_3_63_32_RST    0x0

__INLINE void bt_controller_irk_3_1_irk_3_63_32_setf(uint32_t irk36332)
{
	ASSERT_ERR((((uint32_t)irk36332 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_3_1_ADDR, (uint32_t)irk36332 << 0);
}

/**
 * @brief IRK_3_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK3_95_64                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_3_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050C8)
#define BT_CONTROLLER_IRK_3_2_OFFSET      0x000050C8
#define BT_CONTROLLER_IRK_3_2_INDEX       0x00001432
#define BT_CONTROLLER_IRK_3_2_RESET       0x00000000

__INLINE void bt_controller_irk_3_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_3_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_3_2_IRK_3_95_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_3_2_IRK_3_95_64_LSB    0
#define BT_CONTROLLER_IRK_3_2_IRK_3_95_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_3_2_IRK_3_95_64_RST    0x0

__INLINE void bt_controller_irk_3_2_irk_3_95_64_setf(uint32_t irk39564)
{
	ASSERT_ERR((((uint32_t)irk39564 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_3_2_ADDR, (uint32_t)irk39564 << 0);
}

/**
 * @brief IRK_3_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK3_127_96               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_3_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050CC)
#define BT_CONTROLLER_IRK_3_3_OFFSET      0x000050CC
#define BT_CONTROLLER_IRK_3_3_INDEX       0x00001433
#define BT_CONTROLLER_IRK_3_3_RESET       0x00000000

__INLINE void bt_controller_irk_3_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_3_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_3_3_IRK_3_127_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_3_3_IRK_3_127_96_LSB    0
#define BT_CONTROLLER_IRK_3_3_IRK_3_127_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_3_3_IRK_3_127_96_RST    0x0

__INLINE void bt_controller_irk_3_3_irk_3_127_96_setf(uint32_t irk312796)
{
	ASSERT_ERR((((uint32_t)irk312796 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_3_3_ADDR, (uint32_t)irk312796 << 0);
}

/**
 * @brief IRK_4_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK4_31_0                 0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_4_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050D0)
#define BT_CONTROLLER_IRK_4_0_OFFSET      0x000050D0
#define BT_CONTROLLER_IRK_4_0_INDEX       0x00001434
#define BT_CONTROLLER_IRK_4_0_RESET       0x00000000

__INLINE void bt_controller_irk_4_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_4_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_4_0_IRK_4_31_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_4_0_IRK_4_31_0_LSB    0
#define BT_CONTROLLER_IRK_4_0_IRK_4_31_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_4_0_IRK_4_31_0_RST    0x0

__INLINE void bt_controller_irk_4_0_irk_4_31_0_setf(uint32_t irk4310)
{
	ASSERT_ERR((((uint32_t)irk4310 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_4_0_ADDR, (uint32_t)irk4310 << 0);
}

/**
 * @brief IRK_4_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK4_63_32                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_4_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050D4)
#define BT_CONTROLLER_IRK_4_1_OFFSET      0x000050D4
#define BT_CONTROLLER_IRK_4_1_INDEX       0x00001435
#define BT_CONTROLLER_IRK_4_1_RESET       0x00000000

__INLINE void bt_controller_irk_4_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_4_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_4_1_IRK_4_63_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_4_1_IRK_4_63_32_LSB    0
#define BT_CONTROLLER_IRK_4_1_IRK_4_63_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_4_1_IRK_4_63_32_RST    0x0

__INLINE void bt_controller_irk_4_1_irk_4_63_32_setf(uint32_t irk46332)
{
	ASSERT_ERR((((uint32_t)irk46332 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_4_1_ADDR, (uint32_t)irk46332 << 0);
}

/**
 * @brief IRK_4_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK4_95_64                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_4_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050D8)
#define BT_CONTROLLER_IRK_4_2_OFFSET      0x000050D8
#define BT_CONTROLLER_IRK_4_2_INDEX       0x00001436
#define BT_CONTROLLER_IRK_4_2_RESET       0x00000000

__INLINE void bt_controller_irk_4_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_4_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_4_2_IRK_4_95_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_4_2_IRK_4_95_64_LSB    0
#define BT_CONTROLLER_IRK_4_2_IRK_4_95_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_4_2_IRK_4_95_64_RST    0x0

__INLINE void bt_controller_irk_4_2_irk_4_95_64_setf(uint32_t irk49564)
{
	ASSERT_ERR((((uint32_t)irk49564 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_4_2_ADDR, (uint32_t)irk49564 << 0);
}

/**
 * @brief IRK_4_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK4_127_96               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_4_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050DC)
#define BT_CONTROLLER_IRK_4_3_OFFSET      0x000050DC
#define BT_CONTROLLER_IRK_4_3_INDEX       0x00001437
#define BT_CONTROLLER_IRK_4_3_RESET       0x00000000

__INLINE void bt_controller_irk_4_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_4_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_4_3_IRK_4_127_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_4_3_IRK_4_127_96_LSB    0
#define BT_CONTROLLER_IRK_4_3_IRK_4_127_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_4_3_IRK_4_127_96_RST    0x0

__INLINE void bt_controller_irk_4_3_irk_4_127_96_setf(uint32_t irk412796)
{
	ASSERT_ERR((((uint32_t)irk412796 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_4_3_ADDR, (uint32_t)irk412796 << 0);
}

/**
 * @brief IRK_5_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK5_31_0                 0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_5_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050E0)
#define BT_CONTROLLER_IRK_5_0_OFFSET      0x000050E0
#define BT_CONTROLLER_IRK_5_0_INDEX       0x00001438
#define BT_CONTROLLER_IRK_5_0_RESET       0x00000000

__INLINE void bt_controller_irk_5_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_5_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_5_0_IRK_5_31_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_5_0_IRK_5_31_0_LSB    0
#define BT_CONTROLLER_IRK_5_0_IRK_5_31_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_5_0_IRK_5_31_0_RST    0x0

__INLINE void bt_controller_irk_5_0_irk_5_31_0_setf(uint32_t irk5310)
{
	ASSERT_ERR((((uint32_t)irk5310 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_5_0_ADDR, (uint32_t)irk5310 << 0);
}

/**
 * @brief IRK_5_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK5_63_32                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_5_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050E4)
#define BT_CONTROLLER_IRK_5_1_OFFSET      0x000050E4
#define BT_CONTROLLER_IRK_5_1_INDEX       0x00001439
#define BT_CONTROLLER_IRK_5_1_RESET       0x00000000

__INLINE void bt_controller_irk_5_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_5_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_5_1_IRK_5_63_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_5_1_IRK_5_63_32_LSB    0
#define BT_CONTROLLER_IRK_5_1_IRK_5_63_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_5_1_IRK_5_63_32_RST    0x0

__INLINE void bt_controller_irk_5_1_irk_5_63_32_setf(uint32_t irk56332)
{
	ASSERT_ERR((((uint32_t)irk56332 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_5_1_ADDR, (uint32_t)irk56332 << 0);
}

/**
 * @brief IRK_5_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK5_95_64                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_5_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050E8)
#define BT_CONTROLLER_IRK_5_2_OFFSET      0x000050E8
#define BT_CONTROLLER_IRK_5_2_INDEX       0x0000143A
#define BT_CONTROLLER_IRK_5_2_RESET       0x00000000

__INLINE void bt_controller_irk_5_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_5_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_5_2_IRK_5_95_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_5_2_IRK_5_95_64_LSB    0
#define BT_CONTROLLER_IRK_5_2_IRK_5_95_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_5_2_IRK_5_95_64_RST    0x0

__INLINE void bt_controller_irk_5_2_irk_5_95_64_setf(uint32_t irk59564)
{
	ASSERT_ERR((((uint32_t)irk59564 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_5_2_ADDR, (uint32_t)irk59564 << 0);
}

/**
 * @brief IRK_5_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK5_127_96               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_5_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050EC)
#define BT_CONTROLLER_IRK_5_3_OFFSET      0x000050EC
#define BT_CONTROLLER_IRK_5_3_INDEX       0x0000143B
#define BT_CONTROLLER_IRK_5_3_RESET       0x00000000

__INLINE void bt_controller_irk_5_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_5_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_5_3_IRK_5_127_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_5_3_IRK_5_127_96_LSB    0
#define BT_CONTROLLER_IRK_5_3_IRK_5_127_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_5_3_IRK_5_127_96_RST    0x0

__INLINE void bt_controller_irk_5_3_irk_5_127_96_setf(uint32_t irk512796)
{
	ASSERT_ERR((((uint32_t)irk512796 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_5_3_ADDR, (uint32_t)irk512796 << 0);
}

/**
 * @brief IRK_6_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK6_31_0                 0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_6_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050F0)
#define BT_CONTROLLER_IRK_6_0_OFFSET      0x000050F0
#define BT_CONTROLLER_IRK_6_0_INDEX       0x0000143C
#define BT_CONTROLLER_IRK_6_0_RESET       0x00000000

__INLINE void bt_controller_irk_6_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_6_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_6_0_IRK_6_31_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_6_0_IRK_6_31_0_LSB    0
#define BT_CONTROLLER_IRK_6_0_IRK_6_31_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_6_0_IRK_6_31_0_RST    0x0

__INLINE void bt_controller_irk_6_0_irk_6_31_0_setf(uint32_t irk6310)
{
	ASSERT_ERR((((uint32_t)irk6310 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_6_0_ADDR, (uint32_t)irk6310 << 0);
}

/**
 * @brief IRK_6_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK6_63_32                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_6_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050F4)
#define BT_CONTROLLER_IRK_6_1_OFFSET      0x000050F4
#define BT_CONTROLLER_IRK_6_1_INDEX       0x0000143D
#define BT_CONTROLLER_IRK_6_1_RESET       0x00000000

__INLINE void bt_controller_irk_6_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_6_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_6_1_IRK_6_63_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_6_1_IRK_6_63_32_LSB    0
#define BT_CONTROLLER_IRK_6_1_IRK_6_63_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_6_1_IRK_6_63_32_RST    0x0

__INLINE void bt_controller_irk_6_1_irk_6_63_32_setf(uint32_t irk66332)
{
	ASSERT_ERR((((uint32_t)irk66332 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_6_1_ADDR, (uint32_t)irk66332 << 0);
}

/**
 * @brief IRK_6_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK6_95_64                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_6_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050F8)
#define BT_CONTROLLER_IRK_6_2_OFFSET      0x000050F8
#define BT_CONTROLLER_IRK_6_2_INDEX       0x0000143E
#define BT_CONTROLLER_IRK_6_2_RESET       0x00000000

__INLINE void bt_controller_irk_6_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_6_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_6_2_IRK_6_95_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_6_2_IRK_6_95_64_LSB    0
#define BT_CONTROLLER_IRK_6_2_IRK_6_95_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_6_2_IRK_6_95_64_RST    0x0

__INLINE void bt_controller_irk_6_2_irk_6_95_64_setf(uint32_t irk69564)
{
	ASSERT_ERR((((uint32_t)irk69564 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_6_2_ADDR, (uint32_t)irk69564 << 0);
}

/**
 * @brief IRK_6_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK6_127_96               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_6_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x000050FC)
#define BT_CONTROLLER_IRK_6_3_OFFSET      0x000050FC
#define BT_CONTROLLER_IRK_6_3_INDEX       0x0000143F
#define BT_CONTROLLER_IRK_6_3_RESET       0x00000000

__INLINE void bt_controller_irk_6_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_6_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_6_3_IRK_6_127_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_6_3_IRK_6_127_96_LSB    0
#define BT_CONTROLLER_IRK_6_3_IRK_6_127_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_6_3_IRK_6_127_96_RST    0x0

__INLINE void bt_controller_irk_6_3_irk_6_127_96_setf(uint32_t irk612796)
{
	ASSERT_ERR((((uint32_t)irk612796 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_6_3_ADDR, (uint32_t)irk612796 << 0);
}

/**
 * @brief IRK_7_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK7_31_0                 0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_7_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005100)
#define BT_CONTROLLER_IRK_7_0_OFFSET      0x00005100
#define BT_CONTROLLER_IRK_7_0_INDEX       0x00001440
#define BT_CONTROLLER_IRK_7_0_RESET       0x00000000

__INLINE void bt_controller_irk_7_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_7_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_7_0_IRK_7_31_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_7_0_IRK_7_31_0_LSB    0
#define BT_CONTROLLER_IRK_7_0_IRK_7_31_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_7_0_IRK_7_31_0_RST    0x0

__INLINE void bt_controller_irk_7_0_irk_7_31_0_setf(uint32_t irk7310)
{
	ASSERT_ERR((((uint32_t)irk7310 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_7_0_ADDR, (uint32_t)irk7310 << 0);
}

/**
 * @brief IRK_7_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK7_63_32                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_7_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005104)
#define BT_CONTROLLER_IRK_7_1_OFFSET      0x00005104
#define BT_CONTROLLER_IRK_7_1_INDEX       0x00001441
#define BT_CONTROLLER_IRK_7_1_RESET       0x00000000

__INLINE void bt_controller_irk_7_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_7_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_7_1_IRK_7_63_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_7_1_IRK_7_63_32_LSB    0
#define BT_CONTROLLER_IRK_7_1_IRK_7_63_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_7_1_IRK_7_63_32_RST    0x0

__INLINE void bt_controller_irk_7_1_irk_7_63_32_setf(uint32_t irk76332)
{
	ASSERT_ERR((((uint32_t)irk76332 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_7_1_ADDR, (uint32_t)irk76332 << 0);
}

/**
 * @brief IRK_7_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK7_95_64                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_7_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005108)
#define BT_CONTROLLER_IRK_7_2_OFFSET      0x00005108
#define BT_CONTROLLER_IRK_7_2_INDEX       0x00001442
#define BT_CONTROLLER_IRK_7_2_RESET       0x00000000

__INLINE void bt_controller_irk_7_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_7_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_7_2_IRK_7_95_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_7_2_IRK_7_95_64_LSB    0
#define BT_CONTROLLER_IRK_7_2_IRK_7_95_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_7_2_IRK_7_95_64_RST    0x0

__INLINE void bt_controller_irk_7_2_irk_7_95_64_setf(uint32_t irk79564)
{
	ASSERT_ERR((((uint32_t)irk79564 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_7_2_ADDR, (uint32_t)irk79564 << 0);
}

/**
 * @brief IRK_7_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK7_127_96               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_7_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000510C)
#define BT_CONTROLLER_IRK_7_3_OFFSET      0x0000510C
#define BT_CONTROLLER_IRK_7_3_INDEX       0x00001443
#define BT_CONTROLLER_IRK_7_3_RESET       0x00000000

__INLINE void bt_controller_irk_7_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_7_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_7_3_IRK_7_127_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_7_3_IRK_7_127_96_LSB    0
#define BT_CONTROLLER_IRK_7_3_IRK_7_127_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_7_3_IRK_7_127_96_RST    0x0

__INLINE void bt_controller_irk_7_3_irk_7_127_96_setf(uint32_t irk712796)
{
	ASSERT_ERR((((uint32_t)irk712796 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_7_3_ADDR, (uint32_t)irk712796 << 0);
}

/**
 * @brief IRK_8_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK8_31_0                 0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_8_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005110)
#define BT_CONTROLLER_IRK_8_0_OFFSET      0x00005110
#define BT_CONTROLLER_IRK_8_0_INDEX       0x00001444
#define BT_CONTROLLER_IRK_8_0_RESET       0x00000000

__INLINE void bt_controller_irk_8_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_8_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_8_0_IRK_8_31_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_8_0_IRK_8_31_0_LSB    0
#define BT_CONTROLLER_IRK_8_0_IRK_8_31_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_8_0_IRK_8_31_0_RST    0x0

__INLINE void bt_controller_irk_8_0_irk_8_31_0_setf(uint32_t irk8310)
{
	ASSERT_ERR((((uint32_t)irk8310 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_8_0_ADDR, (uint32_t)irk8310 << 0);
}

/**
 * @brief IRK_8_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK8_63_32                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_8_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005114)
#define BT_CONTROLLER_IRK_8_1_OFFSET      0x00005114
#define BT_CONTROLLER_IRK_8_1_INDEX       0x00001445
#define BT_CONTROLLER_IRK_8_1_RESET       0x00000000

__INLINE void bt_controller_irk_8_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_8_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_8_1_IRK_8_63_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_8_1_IRK_8_63_32_LSB    0
#define BT_CONTROLLER_IRK_8_1_IRK_8_63_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_8_1_IRK_8_63_32_RST    0x0

__INLINE void bt_controller_irk_8_1_irk_8_63_32_setf(uint32_t irk86332)
{
	ASSERT_ERR((((uint32_t)irk86332 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_8_1_ADDR, (uint32_t)irk86332 << 0);
}

/**
 * @brief IRK_8_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK8_95_64                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_8_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005118)
#define BT_CONTROLLER_IRK_8_2_OFFSET      0x00005118
#define BT_CONTROLLER_IRK_8_2_INDEX       0x00001446
#define BT_CONTROLLER_IRK_8_2_RESET       0x00000000

__INLINE void bt_controller_irk_8_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_8_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_8_2_IRK_8_95_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_8_2_IRK_8_95_64_LSB    0
#define BT_CONTROLLER_IRK_8_2_IRK_8_95_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_8_2_IRK_8_95_64_RST    0x0

__INLINE void bt_controller_irk_8_2_irk_8_95_64_setf(uint32_t irk89564)
{
	ASSERT_ERR((((uint32_t)irk89564 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_8_2_ADDR, (uint32_t)irk89564 << 0);
}

/**
 * @brief IRK_8_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK8_127_96               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_8_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000511C)
#define BT_CONTROLLER_IRK_8_3_OFFSET      0x0000511C
#define BT_CONTROLLER_IRK_8_3_INDEX       0x00001447
#define BT_CONTROLLER_IRK_8_3_RESET       0x00000000

__INLINE void bt_controller_irk_8_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_8_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_8_3_IRK_8_127_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_8_3_IRK_8_127_96_LSB    0
#define BT_CONTROLLER_IRK_8_3_IRK_8_127_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_8_3_IRK_8_127_96_RST    0x0

__INLINE void bt_controller_irk_8_3_irk_8_127_96_setf(uint32_t irk812796)
{
	ASSERT_ERR((((uint32_t)irk812796 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_8_3_ADDR, (uint32_t)irk812796 << 0);
}

/**
 * @brief IRK_9_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK9_31_0                 0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_9_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005120)
#define BT_CONTROLLER_IRK_9_0_OFFSET      0x00005120
#define BT_CONTROLLER_IRK_9_0_INDEX       0x00001448
#define BT_CONTROLLER_IRK_9_0_RESET       0x00000000

__INLINE void bt_controller_irk_9_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_9_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_9_0_IRK_9_31_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_9_0_IRK_9_31_0_LSB    0
#define BT_CONTROLLER_IRK_9_0_IRK_9_31_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_9_0_IRK_9_31_0_RST    0x0

__INLINE void bt_controller_irk_9_0_irk_9_31_0_setf(uint32_t irk9310)
{
	ASSERT_ERR((((uint32_t)irk9310 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_9_0_ADDR, (uint32_t)irk9310 << 0);
}

/**
 * @brief IRK_9_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK9_63_32                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_9_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005124)
#define BT_CONTROLLER_IRK_9_1_OFFSET      0x00005124
#define BT_CONTROLLER_IRK_9_1_INDEX       0x00001449
#define BT_CONTROLLER_IRK_9_1_RESET       0x00000000

__INLINE void bt_controller_irk_9_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_9_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_9_1_IRK_9_63_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_9_1_IRK_9_63_32_LSB    0
#define BT_CONTROLLER_IRK_9_1_IRK_9_63_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_9_1_IRK_9_63_32_RST    0x0

__INLINE void bt_controller_irk_9_1_irk_9_63_32_setf(uint32_t irk96332)
{
	ASSERT_ERR((((uint32_t)irk96332 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_9_1_ADDR, (uint32_t)irk96332 << 0);
}

/**
 * @brief IRK_9_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK9_95_64                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_9_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005128)
#define BT_CONTROLLER_IRK_9_2_OFFSET      0x00005128
#define BT_CONTROLLER_IRK_9_2_INDEX       0x0000144A
#define BT_CONTROLLER_IRK_9_2_RESET       0x00000000

__INLINE void bt_controller_irk_9_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_9_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_9_2_IRK_9_95_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_9_2_IRK_9_95_64_LSB    0
#define BT_CONTROLLER_IRK_9_2_IRK_9_95_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_9_2_IRK_9_95_64_RST    0x0

__INLINE void bt_controller_irk_9_2_irk_9_95_64_setf(uint32_t irk99564)
{
	ASSERT_ERR((((uint32_t)irk99564 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_9_2_ADDR, (uint32_t)irk99564 << 0);
}

/**
 * @brief IRK_9_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK9_127_96               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_9_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000512C)
#define BT_CONTROLLER_IRK_9_3_OFFSET      0x0000512C
#define BT_CONTROLLER_IRK_9_3_INDEX       0x0000144B
#define BT_CONTROLLER_IRK_9_3_RESET       0x00000000

__INLINE void bt_controller_irk_9_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_9_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_9_3_IRK_9_127_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_9_3_IRK_9_127_96_LSB    0
#define BT_CONTROLLER_IRK_9_3_IRK_9_127_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_9_3_IRK_9_127_96_RST    0x0

__INLINE void bt_controller_irk_9_3_irk_9_127_96_setf(uint32_t irk912796)
{
	ASSERT_ERR((((uint32_t)irk912796 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_9_3_ADDR, (uint32_t)irk912796 << 0);
}

/**
 * @brief IRK_10_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK10_31_0                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_10_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005130)
#define BT_CONTROLLER_IRK_10_0_OFFSET      0x00005130
#define BT_CONTROLLER_IRK_10_0_INDEX       0x0000144C
#define BT_CONTROLLER_IRK_10_0_RESET       0x00000000

__INLINE void bt_controller_irk_10_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_10_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_10_0_IRK_10_31_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_10_0_IRK_10_31_0_LSB    0
#define BT_CONTROLLER_IRK_10_0_IRK_10_31_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_10_0_IRK_10_31_0_RST    0x0

__INLINE void bt_controller_irk_10_0_irk_10_31_0_setf(uint32_t irk10310)
{
	ASSERT_ERR((((uint32_t)irk10310 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_10_0_ADDR, (uint32_t)irk10310 << 0);
}

/**
 * @brief IRK_10_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK10_63_32               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_10_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005134)
#define BT_CONTROLLER_IRK_10_1_OFFSET      0x00005134
#define BT_CONTROLLER_IRK_10_1_INDEX       0x0000144D
#define BT_CONTROLLER_IRK_10_1_RESET       0x00000000

__INLINE void bt_controller_irk_10_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_10_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_10_1_IRK_10_63_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_10_1_IRK_10_63_32_LSB    0
#define BT_CONTROLLER_IRK_10_1_IRK_10_63_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_10_1_IRK_10_63_32_RST    0x0

__INLINE void bt_controller_irk_10_1_irk_10_63_32_setf(uint32_t irk106332)
{
	ASSERT_ERR((((uint32_t)irk106332 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_10_1_ADDR, (uint32_t)irk106332 << 0);
}

/**
 * @brief IRK_10_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK10_95_64               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_10_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005138)
#define BT_CONTROLLER_IRK_10_2_OFFSET      0x00005138
#define BT_CONTROLLER_IRK_10_2_INDEX       0x0000144E
#define BT_CONTROLLER_IRK_10_2_RESET       0x00000000

__INLINE void bt_controller_irk_10_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_10_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_10_2_IRK_10_95_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_10_2_IRK_10_95_64_LSB    0
#define BT_CONTROLLER_IRK_10_2_IRK_10_95_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_10_2_IRK_10_95_64_RST    0x0

__INLINE void bt_controller_irk_10_2_irk_10_95_64_setf(uint32_t irk109564)
{
	ASSERT_ERR((((uint32_t)irk109564 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_10_2_ADDR, (uint32_t)irk109564 << 0);
}

/**
 * @brief IRK_10_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK10_127_96              0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_10_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000513C)
#define BT_CONTROLLER_IRK_10_3_OFFSET      0x0000513C
#define BT_CONTROLLER_IRK_10_3_INDEX       0x0000144F
#define BT_CONTROLLER_IRK_10_3_RESET       0x00000000

__INLINE void bt_controller_irk_10_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_10_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_10_3_IRK_10_127_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_10_3_IRK_10_127_96_LSB    0
#define BT_CONTROLLER_IRK_10_3_IRK_10_127_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_10_3_IRK_10_127_96_RST    0x0

__INLINE void bt_controller_irk_10_3_irk_10_127_96_setf(uint32_t irk1012796)
{
	ASSERT_ERR((((uint32_t)irk1012796 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_10_3_ADDR, (uint32_t)irk1012796 << 0);
}

/**
 * @brief IRK_11_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK11_31_0                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_11_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005140)
#define BT_CONTROLLER_IRK_11_0_OFFSET      0x00005140
#define BT_CONTROLLER_IRK_11_0_INDEX       0x00001450
#define BT_CONTROLLER_IRK_11_0_RESET       0x00000000

__INLINE void bt_controller_irk_11_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_11_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_11_0_IRK_11_31_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_11_0_IRK_11_31_0_LSB    0
#define BT_CONTROLLER_IRK_11_0_IRK_11_31_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_11_0_IRK_11_31_0_RST    0x0

__INLINE void bt_controller_irk_11_0_irk_11_31_0_setf(uint32_t irk11310)
{
	ASSERT_ERR((((uint32_t)irk11310 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_11_0_ADDR, (uint32_t)irk11310 << 0);
}

/**
 * @brief IRK_11_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK11_63_32               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_11_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005144)
#define BT_CONTROLLER_IRK_11_1_OFFSET      0x00005144
#define BT_CONTROLLER_IRK_11_1_INDEX       0x00001451
#define BT_CONTROLLER_IRK_11_1_RESET       0x00000000

__INLINE void bt_controller_irk_11_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_11_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_11_1_IRK_11_63_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_11_1_IRK_11_63_32_LSB    0
#define BT_CONTROLLER_IRK_11_1_IRK_11_63_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_11_1_IRK_11_63_32_RST    0x0

__INLINE void bt_controller_irk_11_1_irk_11_63_32_setf(uint32_t irk116332)
{
	ASSERT_ERR((((uint32_t)irk116332 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_11_1_ADDR, (uint32_t)irk116332 << 0);
}

/**
 * @brief IRK_11_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK11_95_64               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_11_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005148)
#define BT_CONTROLLER_IRK_11_2_OFFSET      0x00005148
#define BT_CONTROLLER_IRK_11_2_INDEX       0x00001452
#define BT_CONTROLLER_IRK_11_2_RESET       0x00000000

__INLINE void bt_controller_irk_11_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_11_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_11_2_IRK_11_95_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_11_2_IRK_11_95_64_LSB    0
#define BT_CONTROLLER_IRK_11_2_IRK_11_95_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_11_2_IRK_11_95_64_RST    0x0

__INLINE void bt_controller_irk_11_2_irk_11_95_64_setf(uint32_t irk119564)
{
	ASSERT_ERR((((uint32_t)irk119564 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_11_2_ADDR, (uint32_t)irk119564 << 0);
}

/**
 * @brief IRK_11_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK11_127_96              0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_11_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000514C)
#define BT_CONTROLLER_IRK_11_3_OFFSET      0x0000514C
#define BT_CONTROLLER_IRK_11_3_INDEX       0x00001453
#define BT_CONTROLLER_IRK_11_3_RESET       0x00000000

__INLINE void bt_controller_irk_11_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_11_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_11_3_IRK_11_127_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_11_3_IRK_11_127_96_LSB    0
#define BT_CONTROLLER_IRK_11_3_IRK_11_127_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_11_3_IRK_11_127_96_RST    0x0

__INLINE void bt_controller_irk_11_3_irk_11_127_96_setf(uint32_t irk1112796)
{
	ASSERT_ERR((((uint32_t)irk1112796 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_11_3_ADDR, (uint32_t)irk1112796 << 0);
}

/**
 * @brief IRK_12_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK12_31_0                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_12_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005150)
#define BT_CONTROLLER_IRK_12_0_OFFSET      0x00005150
#define BT_CONTROLLER_IRK_12_0_INDEX       0x00001454
#define BT_CONTROLLER_IRK_12_0_RESET       0x00000000

__INLINE void bt_controller_irk_12_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_12_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_12_0_IRK_12_31_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_12_0_IRK_12_31_0_LSB    0
#define BT_CONTROLLER_IRK_12_0_IRK_12_31_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_12_0_IRK_12_31_0_RST    0x0

__INLINE void bt_controller_irk_12_0_irk_12_31_0_setf(uint32_t irk12310)
{
	ASSERT_ERR((((uint32_t)irk12310 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_12_0_ADDR, (uint32_t)irk12310 << 0);
}

/**
 * @brief IRK_12_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK12_63_32               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_12_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005154)
#define BT_CONTROLLER_IRK_12_1_OFFSET      0x00005154
#define BT_CONTROLLER_IRK_12_1_INDEX       0x00001455
#define BT_CONTROLLER_IRK_12_1_RESET       0x00000000

__INLINE void bt_controller_irk_12_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_12_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_12_1_IRK_12_63_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_12_1_IRK_12_63_32_LSB    0
#define BT_CONTROLLER_IRK_12_1_IRK_12_63_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_12_1_IRK_12_63_32_RST    0x0

__INLINE void bt_controller_irk_12_1_irk_12_63_32_setf(uint32_t irk126332)
{
	ASSERT_ERR((((uint32_t)irk126332 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_12_1_ADDR, (uint32_t)irk126332 << 0);
}

/**
 * @brief IRK_12_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK12_95_64               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_12_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005158)
#define BT_CONTROLLER_IRK_12_2_OFFSET      0x00005158
#define BT_CONTROLLER_IRK_12_2_INDEX       0x00001456
#define BT_CONTROLLER_IRK_12_2_RESET       0x00000000

__INLINE void bt_controller_irk_12_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_12_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_12_2_IRK_12_95_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_12_2_IRK_12_95_64_LSB    0
#define BT_CONTROLLER_IRK_12_2_IRK_12_95_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_12_2_IRK_12_95_64_RST    0x0

__INLINE void bt_controller_irk_12_2_irk_12_95_64_setf(uint32_t irk129564)
{
	ASSERT_ERR((((uint32_t)irk129564 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_12_2_ADDR, (uint32_t)irk129564 << 0);
}

/**
 * @brief IRK_12_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK12_127_96              0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_12_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000515C)
#define BT_CONTROLLER_IRK_12_3_OFFSET      0x0000515C
#define BT_CONTROLLER_IRK_12_3_INDEX       0x00001457
#define BT_CONTROLLER_IRK_12_3_RESET       0x00000000

__INLINE void bt_controller_irk_12_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_12_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_12_3_IRK_12_127_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_12_3_IRK_12_127_96_LSB    0
#define BT_CONTROLLER_IRK_12_3_IRK_12_127_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_12_3_IRK_12_127_96_RST    0x0

__INLINE void bt_controller_irk_12_3_irk_12_127_96_setf(uint32_t irk1212796)
{
	ASSERT_ERR((((uint32_t)irk1212796 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_12_3_ADDR, (uint32_t)irk1212796 << 0);
}

/**
 * @brief IRK_13_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK13_31_0                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_13_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005160)
#define BT_CONTROLLER_IRK_13_0_OFFSET      0x00005160
#define BT_CONTROLLER_IRK_13_0_INDEX       0x00001458
#define BT_CONTROLLER_IRK_13_0_RESET       0x00000000

__INLINE void bt_controller_irk_13_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_13_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_13_0_IRK_13_31_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_13_0_IRK_13_31_0_LSB    0
#define BT_CONTROLLER_IRK_13_0_IRK_13_31_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_13_0_IRK_13_31_0_RST    0x0

__INLINE void bt_controller_irk_13_0_irk_13_31_0_setf(uint32_t irk13310)
{
	ASSERT_ERR((((uint32_t)irk13310 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_13_0_ADDR, (uint32_t)irk13310 << 0);
}

/**
 * @brief IRK_13_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK13_63_32               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_13_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005164)
#define BT_CONTROLLER_IRK_13_1_OFFSET      0x00005164
#define BT_CONTROLLER_IRK_13_1_INDEX       0x00001459
#define BT_CONTROLLER_IRK_13_1_RESET       0x00000000

__INLINE void bt_controller_irk_13_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_13_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_13_1_IRK_13_63_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_13_1_IRK_13_63_32_LSB    0
#define BT_CONTROLLER_IRK_13_1_IRK_13_63_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_13_1_IRK_13_63_32_RST    0x0

__INLINE void bt_controller_irk_13_1_irk_13_63_32_setf(uint32_t irk136332)
{
	ASSERT_ERR((((uint32_t)irk136332 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_13_1_ADDR, (uint32_t)irk136332 << 0);
}

/**
 * @brief IRK_13_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK13_95_64               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_13_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005168)
#define BT_CONTROLLER_IRK_13_2_OFFSET      0x00005168
#define BT_CONTROLLER_IRK_13_2_INDEX       0x0000145A
#define BT_CONTROLLER_IRK_13_2_RESET       0x00000000

__INLINE void bt_controller_irk_13_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_13_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_13_2_IRK_13_95_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_13_2_IRK_13_95_64_LSB    0
#define BT_CONTROLLER_IRK_13_2_IRK_13_95_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_13_2_IRK_13_95_64_RST    0x0

__INLINE void bt_controller_irk_13_2_irk_13_95_64_setf(uint32_t irk139564)
{
	ASSERT_ERR((((uint32_t)irk139564 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_13_2_ADDR, (uint32_t)irk139564 << 0);
}

/**
 * @brief IRK_13_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK13_127_96              0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_13_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000516C)
#define BT_CONTROLLER_IRK_13_3_OFFSET      0x0000516C
#define BT_CONTROLLER_IRK_13_3_INDEX       0x0000145B
#define BT_CONTROLLER_IRK_13_3_RESET       0x00000000

__INLINE void bt_controller_irk_13_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_13_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_13_3_IRK_13_127_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_13_3_IRK_13_127_96_LSB    0
#define BT_CONTROLLER_IRK_13_3_IRK_13_127_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_13_3_IRK_13_127_96_RST    0x0

__INLINE void bt_controller_irk_13_3_irk_13_127_96_setf(uint32_t irk1312796)
{
	ASSERT_ERR((((uint32_t)irk1312796 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_13_3_ADDR, (uint32_t)irk1312796 << 0);
}

/**
 * @brief IRK_14_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK14_31_0                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_14_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005170)
#define BT_CONTROLLER_IRK_14_0_OFFSET      0x00005170
#define BT_CONTROLLER_IRK_14_0_INDEX       0x0000145C
#define BT_CONTROLLER_IRK_14_0_RESET       0x00000000

__INLINE void bt_controller_irk_14_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_14_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_14_0_IRK_14_31_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_14_0_IRK_14_31_0_LSB    0
#define BT_CONTROLLER_IRK_14_0_IRK_14_31_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_14_0_IRK_14_31_0_RST    0x0

__INLINE void bt_controller_irk_14_0_irk_14_31_0_setf(uint32_t irk14310)
{
	ASSERT_ERR((((uint32_t)irk14310 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_14_0_ADDR, (uint32_t)irk14310 << 0);
}

/**
 * @brief IRK_14_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK14_63_32               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_14_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005174)
#define BT_CONTROLLER_IRK_14_1_OFFSET      0x00005174
#define BT_CONTROLLER_IRK_14_1_INDEX       0x0000145D
#define BT_CONTROLLER_IRK_14_1_RESET       0x00000000

__INLINE void bt_controller_irk_14_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_14_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_14_1_IRK_14_63_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_14_1_IRK_14_63_32_LSB    0
#define BT_CONTROLLER_IRK_14_1_IRK_14_63_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_14_1_IRK_14_63_32_RST    0x0

__INLINE void bt_controller_irk_14_1_irk_14_63_32_setf(uint32_t irk146332)
{
	ASSERT_ERR((((uint32_t)irk146332 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_14_1_ADDR, (uint32_t)irk146332 << 0);
}

/**
 * @brief IRK_14_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK14_95_64               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_14_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005178)
#define BT_CONTROLLER_IRK_14_2_OFFSET      0x00005178
#define BT_CONTROLLER_IRK_14_2_INDEX       0x0000145E
#define BT_CONTROLLER_IRK_14_2_RESET       0x00000000

__INLINE void bt_controller_irk_14_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_14_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_14_2_IRK_14_95_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_14_2_IRK_14_95_64_LSB    0
#define BT_CONTROLLER_IRK_14_2_IRK_14_95_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_14_2_IRK_14_95_64_RST    0x0

__INLINE void bt_controller_irk_14_2_irk_14_95_64_setf(uint32_t irk149564)
{
	ASSERT_ERR((((uint32_t)irk149564 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_14_2_ADDR, (uint32_t)irk149564 << 0);
}

/**
 * @brief IRK_14_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK14_127_96              0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_14_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000517C)
#define BT_CONTROLLER_IRK_14_3_OFFSET      0x0000517C
#define BT_CONTROLLER_IRK_14_3_INDEX       0x0000145F
#define BT_CONTROLLER_IRK_14_3_RESET       0x00000000

__INLINE void bt_controller_irk_14_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_14_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_14_3_IRK_14_127_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_14_3_IRK_14_127_96_LSB    0
#define BT_CONTROLLER_IRK_14_3_IRK_14_127_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_14_3_IRK_14_127_96_RST    0x0

__INLINE void bt_controller_irk_14_3_irk_14_127_96_setf(uint32_t irk1412796)
{
	ASSERT_ERR((((uint32_t)irk1412796 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_14_3_ADDR, (uint32_t)irk1412796 << 0);
}

/**
 * @brief IRK_15_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK15_31_0                0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_15_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005180)
#define BT_CONTROLLER_IRK_15_0_OFFSET      0x00005180
#define BT_CONTROLLER_IRK_15_0_INDEX       0x00001460
#define BT_CONTROLLER_IRK_15_0_RESET       0x00000000

__INLINE void bt_controller_irk_15_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_15_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_15_0_IRK_15_31_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_15_0_IRK_15_31_0_LSB    0
#define BT_CONTROLLER_IRK_15_0_IRK_15_31_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_15_0_IRK_15_31_0_RST    0x0

__INLINE void bt_controller_irk_15_0_irk_15_31_0_setf(uint32_t irk15310)
{
	ASSERT_ERR((((uint32_t)irk15310 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_15_0_ADDR, (uint32_t)irk15310 << 0);
}

/**
 * @brief IRK_15_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK15_63_32               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_15_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005184)
#define BT_CONTROLLER_IRK_15_1_OFFSET      0x00005184
#define BT_CONTROLLER_IRK_15_1_INDEX       0x00001461
#define BT_CONTROLLER_IRK_15_1_RESET       0x00000000

__INLINE void bt_controller_irk_15_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_15_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_15_1_IRK_15_63_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_15_1_IRK_15_63_32_LSB    0
#define BT_CONTROLLER_IRK_15_1_IRK_15_63_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_15_1_IRK_15_63_32_RST    0x0

__INLINE void bt_controller_irk_15_1_irk_15_63_32_setf(uint32_t irk156332)
{
	ASSERT_ERR((((uint32_t)irk156332 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_15_1_ADDR, (uint32_t)irk156332 << 0);
}

/**
 * @brief IRK_15_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK15_95_64               0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_15_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00005188)
#define BT_CONTROLLER_IRK_15_2_OFFSET      0x00005188
#define BT_CONTROLLER_IRK_15_2_INDEX       0x00001462
#define BT_CONTROLLER_IRK_15_2_RESET       0x00000000

__INLINE void bt_controller_irk_15_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_15_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_15_2_IRK_15_95_64_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_15_2_IRK_15_95_64_LSB    0
#define BT_CONTROLLER_IRK_15_2_IRK_15_95_64_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_15_2_IRK_15_95_64_RST    0x0

__INLINE void bt_controller_irk_15_2_irk_15_95_64_setf(uint32_t irk159564)
{
	ASSERT_ERR((((uint32_t)irk159564 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_15_2_ADDR, (uint32_t)irk159564 << 0);
}

/**
 * @brief IRK_15_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 IRK15_127_96              0x0
 * </pre>
 */
#define BT_CONTROLLER_IRK_15_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000518C)
#define BT_CONTROLLER_IRK_15_3_OFFSET      0x0000518C
#define BT_CONTROLLER_IRK_15_3_INDEX       0x00001463
#define BT_CONTROLLER_IRK_15_3_RESET       0x00000000

__INLINE void bt_controller_irk_15_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_IRK_15_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_IRK_15_3_IRK_15_127_96_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_IRK_15_3_IRK_15_127_96_LSB    0
#define BT_CONTROLLER_IRK_15_3_IRK_15_127_96_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_IRK_15_3_IRK_15_127_96_RST    0x0

__INLINE void bt_controller_irk_15_3_irk_15_127_96_setf(uint32_t irk1512796)
{
	ASSERT_ERR((((uint32_t)irk1512796 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_IRK_15_3_ADDR, (uint32_t)irk1512796 << 0);
}

/**
 * @brief SLL_TX_0_BUF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 transmit_fifo0            0x0
 * </pre>
 */
#define BT_CONTROLLER_SLL_TX_0_BUF_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00006000)
#define BT_CONTROLLER_SLL_TX_0_BUF_0_OFFSET      0x00006000
#define BT_CONTROLLER_SLL_TX_0_BUF_0_INDEX       0x00001800
#define BT_CONTROLLER_SLL_TX_0_BUF_0_RESET       0x00000000

__INLINE void bt_controller_sll_tx_0_buf_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SLL_TX_0_BUF_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SLL_TX_0_BUF_0_TRANSMIT_FIFO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_SLL_TX_0_BUF_0_TRANSMIT_FIFO_0_LSB    0
#define BT_CONTROLLER_SLL_TX_0_BUF_0_TRANSMIT_FIFO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_SLL_TX_0_BUF_0_TRANSMIT_FIFO_0_RST    0x0

__INLINE void bt_controller_sll_tx_0_buf_0_transmit_fifo_0_setf(uint32_t transmitfifo0)
{
	ASSERT_ERR((((uint32_t)transmitfifo0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_SLL_TX_0_BUF_0_ADDR, (uint32_t)transmitfifo0 << 0);
}

/**
 * @brief SLL_TX_0_BUF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 transmit_fifo0            0x0
 * </pre>
 */
#define BT_CONTROLLER_SLL_TX_0_BUF_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00006002)
#define BT_CONTROLLER_SLL_TX_0_BUF_1_OFFSET      0x00006002
#define BT_CONTROLLER_SLL_TX_0_BUF_1_INDEX       0x00001800
#define BT_CONTROLLER_SLL_TX_0_BUF_1_RESET       0x00000000

__INLINE void bt_controller_sll_tx_0_buf_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SLL_TX_0_BUF_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SLL_TX_0_BUF_1_TRANSMIT_FIFO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_SLL_TX_0_BUF_1_TRANSMIT_FIFO_0_LSB    0
#define BT_CONTROLLER_SLL_TX_0_BUF_1_TRANSMIT_FIFO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_SLL_TX_0_BUF_1_TRANSMIT_FIFO_0_RST    0x0

__INLINE void bt_controller_sll_tx_0_buf_1_transmit_fifo_0_setf(uint32_t transmitfifo0)
{
	ASSERT_ERR((((uint32_t)transmitfifo0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_SLL_TX_0_BUF_1_ADDR, (uint32_t)transmitfifo0 << 0);
}

/**
 * @brief SLL_TX_0_BUF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 transmit_fifo0            0x0
 * </pre>
 */
#define BT_CONTROLLER_SLL_TX_0_BUF_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00006004)
#define BT_CONTROLLER_SLL_TX_0_BUF_2_OFFSET      0x00006004
#define BT_CONTROLLER_SLL_TX_0_BUF_2_INDEX       0x00001801
#define BT_CONTROLLER_SLL_TX_0_BUF_2_RESET       0x00000000

__INLINE void bt_controller_sll_tx_0_buf_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SLL_TX_0_BUF_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SLL_TX_0_BUF_2_TRANSMIT_FIFO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_SLL_TX_0_BUF_2_TRANSMIT_FIFO_0_LSB    0
#define BT_CONTROLLER_SLL_TX_0_BUF_2_TRANSMIT_FIFO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_SLL_TX_0_BUF_2_TRANSMIT_FIFO_0_RST    0x0

__INLINE void bt_controller_sll_tx_0_buf_2_transmit_fifo_0_setf(uint32_t transmitfifo0)
{
	ASSERT_ERR((((uint32_t)transmitfifo0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_SLL_TX_0_BUF_2_ADDR, (uint32_t)transmitfifo0 << 0);
}

/**
 * @brief SLL_TX_0_BUF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 transmit_fifo0            0x0
 * </pre>
 */
#define BT_CONTROLLER_SLL_TX_0_BUF_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00006006)
#define BT_CONTROLLER_SLL_TX_0_BUF_3_OFFSET      0x00006006
#define BT_CONTROLLER_SLL_TX_0_BUF_3_INDEX       0x00001801
#define BT_CONTROLLER_SLL_TX_0_BUF_3_RESET       0x00000000

__INLINE void bt_controller_sll_tx_0_buf_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SLL_TX_0_BUF_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SLL_TX_0_BUF_3_TRANSMIT_FIFO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_SLL_TX_0_BUF_3_TRANSMIT_FIFO_0_LSB    0
#define BT_CONTROLLER_SLL_TX_0_BUF_3_TRANSMIT_FIFO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_SLL_TX_0_BUF_3_TRANSMIT_FIFO_0_RST    0x0

__INLINE void bt_controller_sll_tx_0_buf_3_transmit_fifo_0_setf(uint32_t transmitfifo0)
{
	ASSERT_ERR((((uint32_t)transmitfifo0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_SLL_TX_0_BUF_3_ADDR, (uint32_t)transmitfifo0 << 0);
}

/**
 * @brief SLL_TX_1_BUF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 transmit_fifo1            0x0
 * </pre>
 */
#define BT_CONTROLLER_SLL_TX_1_BUF_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00006400)
#define BT_CONTROLLER_SLL_TX_1_BUF_0_OFFSET      0x00006400
#define BT_CONTROLLER_SLL_TX_1_BUF_0_INDEX       0x00001900
#define BT_CONTROLLER_SLL_TX_1_BUF_0_RESET       0x00000000

__INLINE void bt_controller_sll_tx_1_buf_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SLL_TX_1_BUF_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SLL_TX_1_BUF_0_TRANSMIT_FIFO_1_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_SLL_TX_1_BUF_0_TRANSMIT_FIFO_1_LSB    0
#define BT_CONTROLLER_SLL_TX_1_BUF_0_TRANSMIT_FIFO_1_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_SLL_TX_1_BUF_0_TRANSMIT_FIFO_1_RST    0x0

__INLINE void bt_controller_sll_tx_1_buf_0_transmit_fifo_1_setf(uint32_t transmitfifo1)
{
	ASSERT_ERR((((uint32_t)transmitfifo1 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_SLL_TX_1_BUF_0_ADDR, (uint32_t)transmitfifo1 << 0);
}

/**
 * @brief SLL_TX_1_BUF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 transmit_fifo1            0x0
 * </pre>
 */
#define BT_CONTROLLER_SLL_TX_1_BUF_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00006402)
#define BT_CONTROLLER_SLL_TX_1_BUF_1_OFFSET      0x00006402
#define BT_CONTROLLER_SLL_TX_1_BUF_1_INDEX       0x00001900
#define BT_CONTROLLER_SLL_TX_1_BUF_1_RESET       0x00000000

__INLINE void bt_controller_sll_tx_1_buf_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SLL_TX_1_BUF_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SLL_TX_1_BUF_1_TRANSMIT_FIFO_1_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_SLL_TX_1_BUF_1_TRANSMIT_FIFO_1_LSB    0
#define BT_CONTROLLER_SLL_TX_1_BUF_1_TRANSMIT_FIFO_1_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_SLL_TX_1_BUF_1_TRANSMIT_FIFO_1_RST    0x0

__INLINE void bt_controller_sll_tx_1_buf_1_transmit_fifo_1_setf(uint32_t transmitfifo1)
{
	ASSERT_ERR((((uint32_t)transmitfifo1 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_SLL_TX_1_BUF_1_ADDR, (uint32_t)transmitfifo1 << 0);
}

/**
 * @brief SLL_TX_1_BUF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 transmit_fifo1            0x0
 * </pre>
 */
#define BT_CONTROLLER_SLL_TX_1_BUF_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00006404)
#define BT_CONTROLLER_SLL_TX_1_BUF_2_OFFSET      0x00006404
#define BT_CONTROLLER_SLL_TX_1_BUF_2_INDEX       0x00001901
#define BT_CONTROLLER_SLL_TX_1_BUF_2_RESET       0x00000000

__INLINE void bt_controller_sll_tx_1_buf_2_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SLL_TX_1_BUF_2_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SLL_TX_1_BUF_2_TRANSMIT_FIFO_1_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_SLL_TX_1_BUF_2_TRANSMIT_FIFO_1_LSB    0
#define BT_CONTROLLER_SLL_TX_1_BUF_2_TRANSMIT_FIFO_1_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_SLL_TX_1_BUF_2_TRANSMIT_FIFO_1_RST    0x0

__INLINE void bt_controller_sll_tx_1_buf_2_transmit_fifo_1_setf(uint32_t transmitfifo1)
{
	ASSERT_ERR((((uint32_t)transmitfifo1 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_SLL_TX_1_BUF_2_ADDR, (uint32_t)transmitfifo1 << 0);
}

/**
 * @brief SLL_TX_1_BUF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 transmit_fifo1            0x0
 * </pre>
 */
#define BT_CONTROLLER_SLL_TX_1_BUF_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00006406)
#define BT_CONTROLLER_SLL_TX_1_BUF_3_OFFSET      0x00006406
#define BT_CONTROLLER_SLL_TX_1_BUF_3_INDEX       0x00001901
#define BT_CONTROLLER_SLL_TX_1_BUF_3_RESET       0x00000000

__INLINE void bt_controller_sll_tx_1_buf_3_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_SLL_TX_1_BUF_3_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_SLL_TX_1_BUF_3_TRANSMIT_FIFO_1_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_SLL_TX_1_BUF_3_TRANSMIT_FIFO_1_LSB    0
#define BT_CONTROLLER_SLL_TX_1_BUF_3_TRANSMIT_FIFO_1_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_SLL_TX_1_BUF_3_TRANSMIT_FIFO_1_RST    0x0

__INLINE void bt_controller_sll_tx_1_buf_3_transmit_fifo_1_setf(uint32_t transmitfifo1)
{
	ASSERT_ERR((((uint32_t)transmitfifo1 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_SLL_TX_1_BUF_3_ADDR, (uint32_t)transmitfifo1 << 0);
}

/**
 * @brief SLL_RX_0_BUF_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 receive_fifo0             0x0
 * </pre>
 */
#define BT_CONTROLLER_SLL_RX_0_BUF_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00006800)
#define BT_CONTROLLER_SLL_RX_0_BUF_0_OFFSET      0x00006800
#define BT_CONTROLLER_SLL_RX_0_BUF_0_INDEX       0x00001A00
#define BT_CONTROLLER_SLL_RX_0_BUF_0_RESET       0x00000000

__INLINE uint32_t  bt_controller_sll_rx_0_buf_0_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_SLL_RX_0_BUF_0_ADDR);
}

// field definitions
#define BT_CONTROLLER_SLL_RX_0_BUF_0_RECEIVE_FIFO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_SLL_RX_0_BUF_0_RECEIVE_FIFO_0_LSB    0
#define BT_CONTROLLER_SLL_RX_0_BUF_0_RECEIVE_FIFO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_SLL_RX_0_BUF_0_RECEIVE_FIFO_0_RST    0x0

__INLINE uint32_t bt_controller_sll_rx_0_buf_0_receive_fifo_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SLL_RX_0_BUF_0_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief SLL_RX_0_BUF_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 receive_fifo0             0x0
 * </pre>
 */
#define BT_CONTROLLER_SLL_RX_0_BUF_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00006802)
#define BT_CONTROLLER_SLL_RX_0_BUF_1_OFFSET      0x00006802
#define BT_CONTROLLER_SLL_RX_0_BUF_1_INDEX       0x00001A00
#define BT_CONTROLLER_SLL_RX_0_BUF_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_sll_rx_0_buf_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_SLL_RX_0_BUF_1_ADDR);
}

// field definitions
#define BT_CONTROLLER_SLL_RX_0_BUF_1_RECEIVE_FIFO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_SLL_RX_0_BUF_1_RECEIVE_FIFO_0_LSB    0
#define BT_CONTROLLER_SLL_RX_0_BUF_1_RECEIVE_FIFO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_SLL_RX_0_BUF_1_RECEIVE_FIFO_0_RST    0x0

__INLINE uint32_t bt_controller_sll_rx_0_buf_1_receive_fifo_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SLL_RX_0_BUF_1_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief SLL_RX_0_BUF_2 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 receive_fifo0             0x0
 * </pre>
 */
#define BT_CONTROLLER_SLL_RX_0_BUF_2_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00006804)
#define BT_CONTROLLER_SLL_RX_0_BUF_2_OFFSET      0x00006804
#define BT_CONTROLLER_SLL_RX_0_BUF_2_INDEX       0x00001A01
#define BT_CONTROLLER_SLL_RX_0_BUF_2_RESET       0x00000000

__INLINE uint32_t  bt_controller_sll_rx_0_buf_2_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_SLL_RX_0_BUF_2_ADDR);
}

// field definitions
#define BT_CONTROLLER_SLL_RX_0_BUF_2_RECEIVE_FIFO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_SLL_RX_0_BUF_2_RECEIVE_FIFO_0_LSB    0
#define BT_CONTROLLER_SLL_RX_0_BUF_2_RECEIVE_FIFO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_SLL_RX_0_BUF_2_RECEIVE_FIFO_0_RST    0x0

__INLINE uint32_t bt_controller_sll_rx_0_buf_2_receive_fifo_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SLL_RX_0_BUF_2_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief SLL_RX_0_BUF_3 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 receive_fifo0             0x0
 * </pre>
 */
#define BT_CONTROLLER_SLL_RX_0_BUF_3_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00006806)
#define BT_CONTROLLER_SLL_RX_0_BUF_3_OFFSET      0x00006806
#define BT_CONTROLLER_SLL_RX_0_BUF_3_INDEX       0x00001A01
#define BT_CONTROLLER_SLL_RX_0_BUF_3_RESET       0x00000000

__INLINE uint32_t  bt_controller_sll_rx_0_buf_3_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_SLL_RX_0_BUF_3_ADDR);
}

// field definitions
#define BT_CONTROLLER_SLL_RX_0_BUF_3_RECEIVE_FIFO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_SLL_RX_0_BUF_3_RECEIVE_FIFO_0_LSB    0
#define BT_CONTROLLER_SLL_RX_0_BUF_3_RECEIVE_FIFO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_SLL_RX_0_BUF_3_RECEIVE_FIFO_0_RST    0x0

__INLINE uint32_t bt_controller_sll_rx_0_buf_3_receive_fifo_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_SLL_RX_0_BUF_3_ADDR);
	return (uint32_t)(localVal >> 0);
}

/**
 * @brief PTA_CONFIG_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:26 pta_config1_bit31_to_bit26_reserved 0x0
 *    25:16 Count_for_1_MHz           0x0
 *    15:08 requires_expiry_count     0x0
 *    07:05 pta_config1_bit7_to_bit5_reserved 0x0
 *    04    Priority_flag             0              
 *    03    ble_or_bredr_default_selection 0              
 *    02    always_enable_rx          0              
 *    01:00 software_grant            0x0
 * </pre>
 */
#define BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00008000)
#define BT_CONTROLLER_PTA_CONFIG_1_REG_OFFSET      0x00008000
#define BT_CONTROLLER_PTA_CONFIG_1_REG_INDEX       0x00002000
#define BT_CONTROLLER_PTA_CONFIG_1_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_pta_config_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR);
}

__INLINE void bt_controller_pta_config_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PTA_CONFIG_1_REG_PTA_CONFIG_1_BIT_31_TO_BIT_26_RESERVED_MASK    ((uint32_t)0xFC000000)
#define BT_CONTROLLER_PTA_CONFIG_1_REG_PTA_CONFIG_1_BIT_31_TO_BIT_26_RESERVED_LSB    26
#define BT_CONTROLLER_PTA_CONFIG_1_REG_PTA_CONFIG_1_BIT_31_TO_BIT_26_RESERVED_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_PTA_CONFIG_1_REG_COUNT_FOR_1_MHZ_MASK    ((uint32_t)0x03FF0000)
#define BT_CONTROLLER_PTA_CONFIG_1_REG_COUNT_FOR_1_MHZ_LSB    16
#define BT_CONTROLLER_PTA_CONFIG_1_REG_COUNT_FOR_1_MHZ_WIDTH    ((uint32_t)0x0000000A)
#define BT_CONTROLLER_PTA_CONFIG_1_REG_REQUIRES_EXPIRY_COUNT_MASK    ((uint32_t)0x0000FF00)
#define BT_CONTROLLER_PTA_CONFIG_1_REG_REQUIRES_EXPIRY_COUNT_LSB    8
#define BT_CONTROLLER_PTA_CONFIG_1_REG_REQUIRES_EXPIRY_COUNT_WIDTH    ((uint32_t)0x00000008)
#define BT_CONTROLLER_PTA_CONFIG_1_REG_PTA_CONFIG_1_BIT_7_TO_BIT_5_RESERVED_MASK    ((uint32_t)0x000000E0)
#define BT_CONTROLLER_PTA_CONFIG_1_REG_PTA_CONFIG_1_BIT_7_TO_BIT_5_RESERVED_LSB    5
#define BT_CONTROLLER_PTA_CONFIG_1_REG_PTA_CONFIG_1_BIT_7_TO_BIT_5_RESERVED_WIDTH    ((uint32_t)0x00000003)
#define BT_CONTROLLER_PTA_CONFIG_1_REG_PRIORITY_FLAG_BIT    ((uint32_t)0x00000010)
#define BT_CONTROLLER_PTA_CONFIG_1_REG_PRIORITY_FLAG_POS    4
#define BT_CONTROLLER_PTA_CONFIG_1_REG_BLE_OR_BREDR_DEFAULT_SELECTION_BIT    ((uint32_t)0x00000008)
#define BT_CONTROLLER_PTA_CONFIG_1_REG_BLE_OR_BREDR_DEFAULT_SELECTION_POS    3
#define BT_CONTROLLER_PTA_CONFIG_1_REG_ALWAYS_ENABLE_RX_BIT    ((uint32_t)0x00000004)
#define BT_CONTROLLER_PTA_CONFIG_1_REG_ALWAYS_ENABLE_RX_POS    2
#define BT_CONTROLLER_PTA_CONFIG_1_REG_SOFTWARE_GRANT_MASK    ((uint32_t)0x00000003)
#define BT_CONTROLLER_PTA_CONFIG_1_REG_SOFTWARE_GRANT_LSB    0
#define BT_CONTROLLER_PTA_CONFIG_1_REG_SOFTWARE_GRANT_WIDTH    ((uint32_t)0x00000002)

#define BT_CONTROLLER_PTA_CONFIG_1_REG_PTA_CONFIG_1_BIT_31_TO_BIT_26_RESERVED_RST    0x0
#define BT_CONTROLLER_PTA_CONFIG_1_REG_COUNT_FOR_1_MHZ_RST    0x0
#define BT_CONTROLLER_PTA_CONFIG_1_REG_REQUIRES_EXPIRY_COUNT_RST    0x0
#define BT_CONTROLLER_PTA_CONFIG_1_REG_PTA_CONFIG_1_BIT_7_TO_BIT_5_RESERVED_RST    0x0
#define BT_CONTROLLER_PTA_CONFIG_1_REG_PRIORITY_FLAG_RST    0x0
#define BT_CONTROLLER_PTA_CONFIG_1_REG_BLE_OR_BREDR_DEFAULT_SELECTION_RST    0x0
#define BT_CONTROLLER_PTA_CONFIG_1_REG_ALWAYS_ENABLE_RX_RST    0x0
#define BT_CONTROLLER_PTA_CONFIG_1_REG_SOFTWARE_GRANT_RST    0x0

__INLINE void bt_controller_pta_config_1_reg_pack(uint8_t pta_config1_bit31_to_bit26_reserved, uint16_t count_for_1_mhz, uint8_t requires_expiry_count, uint8_t pta_config1_bit7_to_bit5_reserved, uint8_t priority_flag, uint8_t ble_or_bredr_default_selection, uint8_t always_enable_rx, uint8_t software_grant)
{
	ASSERT_ERR((((uint32_t)pta_config1_bit31_to_bit26_reserved << 26) & ~((uint32_t)0xFC000000)) == 0);
	ASSERT_ERR((((uint32_t)count_for_1_mhz << 16) & ~((uint32_t)0x03FF0000)) == 0);
	ASSERT_ERR((((uint32_t)requires_expiry_count << 8) & ~((uint32_t)0x0000FF00)) == 0);
	ASSERT_ERR((((uint32_t)pta_config1_bit7_to_bit5_reserved << 5) & ~((uint32_t)0x000000E0)) == 0);
	ASSERT_ERR((((uint32_t)priority_flag << 4) & ~((uint32_t)0x00000010)) == 0);
	ASSERT_ERR((((uint32_t)ble_or_bredr_default_selection << 3) & ~((uint32_t)0x00000008)) == 0);
	ASSERT_ERR((((uint32_t)always_enable_rx << 2) & ~((uint32_t)0x00000004)) == 0);
	ASSERT_ERR((((uint32_t)software_grant << 0) & ~((uint32_t)0x00000003)) == 0);
	REG_PL_WR(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR,  ((uint32_t)pta_config1_bit31_to_bit26_reserved << 26) |((uint32_t)count_for_1_mhz << 16) |((uint32_t)requires_expiry_count << 8) |((uint32_t)pta_config1_bit7_to_bit5_reserved << 5) |((uint32_t)priority_flag << 4) |((uint32_t)ble_or_bredr_default_selection << 3) |((uint32_t)always_enable_rx << 2) |((uint32_t)software_grant << 0));
}

__INLINE void bt_controller_pta_config_1_reg_unpack(uint8_t* pta_config1_bit31_to_bit26_reserved, uint16_t* count_for_1_mhz, uint8_t* requires_expiry_count, uint8_t* pta_config1_bit7_to_bit5_reserved, uint8_t* priority_flag, uint8_t* ble_or_bredr_default_selection, uint8_t* always_enable_rx, uint8_t* software_grant)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR);

	*pta_config1_bit31_to_bit26_reserved = (localVal & ((uint32_t)0xFC000000)) >>  26;
	*count_for_1_mhz = (localVal & ((uint32_t)0x03FF0000)) >>  16;
	*requires_expiry_count = (localVal & ((uint32_t)0x0000FF00)) >>  8;
	*pta_config1_bit7_to_bit5_reserved = (localVal & ((uint32_t)0x000000E0)) >>  5;
	*priority_flag = (localVal & ((uint32_t)0x00000010)) >>  4;
	*ble_or_bredr_default_selection = (localVal & ((uint32_t)0x00000008)) >>  3;
	*always_enable_rx = (localVal & ((uint32_t)0x00000004)) >>  2;
	*software_grant = (localVal & ((uint32_t)0x00000003)) >>  0;
}

__INLINE uint8_t bt_controller_pta_config_1_reg_pta_config_1_bit_31_to_bit_26_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFC000000)) >> 26);
}
__INLINE uint16_t bt_controller_pta_config_1_reg_count_for_1_mhz_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x03FF0000)) >> 16);
}
__INLINE void bt_controller_pta_config_1_reg_count_for_1_mhz_setf(uint16_t countfor1mhz)
{
	ASSERT_ERR((((uint32_t)countfor1mhz << 16) & ~((uint32_t)0x03FF0000)) == 0);
	REG_PL_WR(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR) & ~((uint32_t)0x03FF0000)) | ((uint32_t)countfor1mhz <<16));
}
__INLINE uint8_t bt_controller_pta_config_1_reg_requires_expiry_count_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000FF00)) >> 8);
}
__INLINE void bt_controller_pta_config_1_reg_requires_expiry_count_setf(uint8_t requiresexpirycount)
{
	ASSERT_ERR((((uint32_t)requiresexpirycount << 8) & ~((uint32_t)0x0000FF00)) == 0);
	REG_PL_WR(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR) & ~((uint32_t)0x0000FF00)) | ((uint32_t)requiresexpirycount <<8));
}
__INLINE uint8_t bt_controller_pta_config_1_reg_pta_config_1_bit_7_to_bit_5_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000E0)) >> 5);
}
__INLINE uint8_t bt_controller_pta_config_1_reg_priority_flag_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000010)) >> 4);
}
__INLINE void bt_controller_pta_config_1_reg_priority_flag_setf(uint8_t priorityflag)
{
	ASSERT_ERR((((uint32_t)priorityflag << 4) & ~((uint32_t)0x00000010)) == 0);
	REG_PL_WR(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00000010)) | ((uint32_t)priorityflag <<4));
}
__INLINE uint8_t bt_controller_pta_config_1_reg_ble_or_bredr_default_selection_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000008)) >> 3);
}
__INLINE uint8_t bt_controller_pta_config_1_reg_always_enable_rx_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000004)) >> 2);
}
__INLINE void bt_controller_pta_config_1_reg_always_enable_rx_setf(uint8_t alwaysenablerx)
{
	ASSERT_ERR((((uint32_t)alwaysenablerx << 2) & ~((uint32_t)0x00000004)) == 0);
	REG_PL_WR(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00000004)) | ((uint32_t)alwaysenablerx <<2));
}
__INLINE uint8_t bt_controller_pta_config_1_reg_software_grant_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000003)) >> 0);
}
__INLINE void bt_controller_pta_config_1_reg_software_grant_setf(uint8_t softwaregrant)
{
	ASSERT_ERR((((uint32_t)softwaregrant << 0) & ~((uint32_t)0x00000003)) == 0);
	REG_PL_WR(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_1_REG_ADDR) & ~((uint32_t)0x00000003)) | ((uint32_t)softwaregrant <<0));
}

/**
 * @brief PTA_CONFIG_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:16 pta_config2_reg_31_16_bits_are_reserved 0x0
 *    15    Inquiry_operation         0              
 *    14    page_operation            0              
 *    13:10 pta_config2_reg_13_to_10_bits_are_reserved 0x0
 *    09:00 conn_lt_addr              0x0
 * </pre>
 */
#define BT_CONTROLLER_PTA_CONFIG_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00008004)
#define BT_CONTROLLER_PTA_CONFIG_2_REG_OFFSET      0x00008004
#define BT_CONTROLLER_PTA_CONFIG_2_REG_INDEX       0x00002001
#define BT_CONTROLLER_PTA_CONFIG_2_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_pta_config_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_2_REG_ADDR);
}

__INLINE void bt_controller_pta_config_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_PTA_CONFIG_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_PTA_CONFIG_2_REG_PTA_CONFIG_2_REG_31_16_BITS_ARE_RESERVED_MASK    ((uint32_t)0xFFFF0000)
#define BT_CONTROLLER_PTA_CONFIG_2_REG_PTA_CONFIG_2_REG_31_16_BITS_ARE_RESERVED_LSB    16
#define BT_CONTROLLER_PTA_CONFIG_2_REG_PTA_CONFIG_2_REG_31_16_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000010)
#define BT_CONTROLLER_PTA_CONFIG_2_REG_INQUIRY_OPERATION_BIT    ((uint32_t)0x00008000)
#define BT_CONTROLLER_PTA_CONFIG_2_REG_INQUIRY_OPERATION_POS    15
#define BT_CONTROLLER_PTA_CONFIG_2_REG_PAGE_OPERATION_BIT    ((uint32_t)0x00004000)
#define BT_CONTROLLER_PTA_CONFIG_2_REG_PAGE_OPERATION_POS    14
#define BT_CONTROLLER_PTA_CONFIG_2_REG_PTA_CONFIG_2_REG_13_TO_10_BITS_ARE_RESERVED_MASK    ((uint32_t)0x00003C00)
#define BT_CONTROLLER_PTA_CONFIG_2_REG_PTA_CONFIG_2_REG_13_TO_10_BITS_ARE_RESERVED_LSB    10
#define BT_CONTROLLER_PTA_CONFIG_2_REG_PTA_CONFIG_2_REG_13_TO_10_BITS_ARE_RESERVED_WIDTH    ((uint32_t)0x00000004)
#define BT_CONTROLLER_PTA_CONFIG_2_REG_CONN_LT_ADDR_MASK    ((uint32_t)0x000003FF)
#define BT_CONTROLLER_PTA_CONFIG_2_REG_CONN_LT_ADDR_LSB    0
#define BT_CONTROLLER_PTA_CONFIG_2_REG_CONN_LT_ADDR_WIDTH    ((uint32_t)0x0000000A)

#define BT_CONTROLLER_PTA_CONFIG_2_REG_PTA_CONFIG_2_REG_31_16_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_PTA_CONFIG_2_REG_INQUIRY_OPERATION_RST    0x0
#define BT_CONTROLLER_PTA_CONFIG_2_REG_PAGE_OPERATION_RST    0x0
#define BT_CONTROLLER_PTA_CONFIG_2_REG_PTA_CONFIG_2_REG_13_TO_10_BITS_ARE_RESERVED_RST    0x0
#define BT_CONTROLLER_PTA_CONFIG_2_REG_CONN_LT_ADDR_RST    0x0

__INLINE void bt_controller_pta_config_2_reg_pack(uint16_t pta_config2_reg_31_16_bits_are_reserved, uint8_t inquiry_operation, uint8_t page_operation, uint8_t pta_config2_reg_13_to_10_bits_are_reserved, uint16_t conn_lt_addr)
{
	ASSERT_ERR((((uint32_t)pta_config2_reg_31_16_bits_are_reserved << 16) & ~((uint32_t)0xFFFF0000)) == 0);
	ASSERT_ERR((((uint32_t)inquiry_operation << 15) & ~((uint32_t)0x00008000)) == 0);
	ASSERT_ERR((((uint32_t)page_operation << 14) & ~((uint32_t)0x00004000)) == 0);
	ASSERT_ERR((((uint32_t)pta_config2_reg_13_to_10_bits_are_reserved << 10) & ~((uint32_t)0x00003C00)) == 0);
	ASSERT_ERR((((uint32_t)conn_lt_addr << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PTA_CONFIG_2_REG_ADDR,  ((uint32_t)pta_config2_reg_31_16_bits_are_reserved << 16) |((uint32_t)inquiry_operation << 15) |((uint32_t)page_operation << 14) |((uint32_t)pta_config2_reg_13_to_10_bits_are_reserved << 10) |((uint32_t)conn_lt_addr << 0));
}

__INLINE void bt_controller_pta_config_2_reg_unpack(uint16_t* pta_config2_reg_31_16_bits_are_reserved, uint8_t* inquiry_operation, uint8_t* page_operation, uint8_t* pta_config2_reg_13_to_10_bits_are_reserved, uint16_t* conn_lt_addr)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_2_REG_ADDR);

	*pta_config2_reg_31_16_bits_are_reserved = (localVal & ((uint32_t)0xFFFF0000)) >>  16;
	*inquiry_operation = (localVal & ((uint32_t)0x00008000)) >>  15;
	*page_operation = (localVal & ((uint32_t)0x00004000)) >>  14;
	*pta_config2_reg_13_to_10_bits_are_reserved = (localVal & ((uint32_t)0x00003C00)) >>  10;
	*conn_lt_addr = (localVal & ((uint32_t)0x000003FF)) >>  0;
}

__INLINE uint16_t bt_controller_pta_config_2_reg_pta_config_2_reg_31_16_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_2_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0xFFFF0000)) >> 16);
}
__INLINE uint8_t bt_controller_pta_config_2_reg_inquiry_operation_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00008000)) >> 15);
}
__INLINE void bt_controller_pta_config_2_reg_inquiry_operation_setf(uint8_t inquiryoperation)
{
	ASSERT_ERR((((uint32_t)inquiryoperation << 15) & ~((uint32_t)0x00008000)) == 0);
	REG_PL_WR(BT_CONTROLLER_PTA_CONFIG_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_2_REG_ADDR) & ~((uint32_t)0x00008000)) | ((uint32_t)inquiryoperation <<15));
}
__INLINE uint8_t bt_controller_pta_config_2_reg_page_operation_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00004000)) >> 14);
}
__INLINE void bt_controller_pta_config_2_reg_page_operation_setf(uint8_t pageoperation)
{
	ASSERT_ERR((((uint32_t)pageoperation << 14) & ~((uint32_t)0x00004000)) == 0);
	REG_PL_WR(BT_CONTROLLER_PTA_CONFIG_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_2_REG_ADDR) & ~((uint32_t)0x00004000)) | ((uint32_t)pageoperation <<14));
}
__INLINE uint8_t bt_controller_pta_config_2_reg_pta_config_2_reg_13_to_10_bits_are_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003C00)) >> 10);
}
__INLINE uint16_t bt_controller_pta_config_2_reg_conn_lt_addr_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_2_REG_ADDR);
	return (uint16_t)((localVal & ((uint32_t)0x000003FF)) >> 0);
}
__INLINE void bt_controller_pta_config_2_reg_conn_lt_addr_setf(uint16_t connltaddr)
{
	ASSERT_ERR((((uint32_t)connltaddr << 0) & ~((uint32_t)0x000003FF)) == 0);
	REG_PL_WR(BT_CONTROLLER_PTA_CONFIG_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_PTA_CONFIG_2_REG_ADDR) & ~((uint32_t)0x000003FF)) | ((uint32_t)connltaddr <<0));
}

/**
 * @brief CONT_MODEM_SUBCH_EN_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:12 CONT_MODEM_SUBCH_EN_REG_bits_20_12_reserved 0x0
 *    11:06 Modem_LCU_sub_channel_indexes_enable 0x0
 *    05:00 Controller_LCU_sub_channel_indexes_enable 0x0
 * </pre>
 */
#define BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00008800)
#define BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_OFFSET      0x00008800
#define BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_INDEX       0x00002200
#define BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_cont_modem_subch_en_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_ADDR);
}

__INLINE void bt_controller_cont_modem_subch_en_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_CONT_MODEM_SUBCH_EN_REG_BITS_20_12_RESERVED_MASK    ((uint32_t)0xFFFFF000)
#define BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_CONT_MODEM_SUBCH_EN_REG_BITS_20_12_RESERVED_LSB    12
#define BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_CONT_MODEM_SUBCH_EN_REG_BITS_20_12_RESERVED_WIDTH    ((uint32_t)0x00000014)
#define BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_MODEM_LCU_SUB_CHANNEL_INDEXES_ENABLE_MASK    ((uint32_t)0x00000FC0)
#define BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_MODEM_LCU_SUB_CHANNEL_INDEXES_ENABLE_LSB    6
#define BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_MODEM_LCU_SUB_CHANNEL_INDEXES_ENABLE_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_ENABLE_MASK    ((uint32_t)0x0000003F)
#define BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_ENABLE_LSB    0
#define BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_ENABLE_WIDTH    ((uint32_t)0x00000006)

#define BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_CONT_MODEM_SUBCH_EN_REG_BITS_20_12_RESERVED_RST    0x0
#define BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_MODEM_LCU_SUB_CHANNEL_INDEXES_ENABLE_RST    0x0
#define BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_ENABLE_RST    0x0

__INLINE void bt_controller_cont_modem_subch_en_reg_pack(uint32_t cont_modem_subch_en_reg_bits_20_12_reserved, uint8_t modem_lcu_sub_channel_indexes_enable, uint8_t controller_lcu_sub_channel_indexes_enable)
{
	ASSERT_ERR((((uint32_t)cont_modem_subch_en_reg_bits_20_12_reserved << 12) & ~((uint32_t)0xFFFFF000)) == 0);
	ASSERT_ERR((((uint32_t)modem_lcu_sub_channel_indexes_enable << 6) & ~((uint32_t)0x00000FC0)) == 0);
	ASSERT_ERR((((uint32_t)controller_lcu_sub_channel_indexes_enable << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_ADDR,  ((uint32_t)cont_modem_subch_en_reg_bits_20_12_reserved << 12) |((uint32_t)modem_lcu_sub_channel_indexes_enable << 6) |((uint32_t)controller_lcu_sub_channel_indexes_enable << 0));
}

__INLINE void bt_controller_cont_modem_subch_en_reg_unpack(uint32_t* cont_modem_subch_en_reg_bits_20_12_reserved, uint8_t* modem_lcu_sub_channel_indexes_enable, uint8_t* controller_lcu_sub_channel_indexes_enable)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_ADDR);

	*cont_modem_subch_en_reg_bits_20_12_reserved = (localVal & ((uint32_t)0xFFFFF000)) >>  12;
	*modem_lcu_sub_channel_indexes_enable = (localVal & ((uint32_t)0x00000FC0)) >>  6;
	*controller_lcu_sub_channel_indexes_enable = (localVal & ((uint32_t)0x0000003F)) >>  0;
}

__INLINE uint32_t bt_controller_cont_modem_subch_en_reg_cont_modem_subch_en_reg_bits_20_12_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFF000)) >> 12);
}
__INLINE uint8_t bt_controller_cont_modem_subch_en_reg_modem_lcu_sub_channel_indexes_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00000FC0)) >> 6);
}
__INLINE void bt_controller_cont_modem_subch_en_reg_modem_lcu_sub_channel_indexes_enable_setf(uint8_t modemlcusubchannelindexesenable)
{
	ASSERT_ERR((((uint32_t)modemlcusubchannelindexesenable << 6) & ~((uint32_t)0x00000FC0)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_ADDR) & ~((uint32_t)0x00000FC0)) | ((uint32_t)modemlcusubchannelindexesenable <<6));
}
__INLINE uint8_t bt_controller_cont_modem_subch_en_reg_controller_lcu_sub_channel_indexes_enable_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000003F)) >> 0);
}
__INLINE void bt_controller_cont_modem_subch_en_reg_controller_lcu_sub_channel_indexes_enable_setf(uint8_t controllerlcusubchannelindexesenable)
{
	ASSERT_ERR((((uint32_t)controllerlcusubchannelindexesenable << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_CONT_MODEM_SUBCH_EN_REG_ADDR) & ~((uint32_t)0x0000003F)) | ((uint32_t)controllerlcusubchannelindexesenable <<0));
}

/**
 * @brief CONT_SUBCH_INDEX_REG_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:30 CONT_SUBCH_INDEX_REG0_31downto30_reserved 0x0
 *    29:24 Controller_LCU_sub_channel_indexes_59downto45 0x0
 *    23:22 CONT_SUBCH_INDEX_REG0_24downto22_reserved 0x0
 *    21:16 Controller_LCU_sub_channel_indexes_44downto30 0x0
 *    15:14 CONT_SUBCH_INDEX_REG0_15downto14_reserved 0x0
 *    13:08 Controller_LCU_sub_channel_indexes_29downto15 0x0
 *    07:06 CONT_SUBCH_INDEX_REG0_7downto6_reserved 0x0
 *    05:00 Controller_LCU_sub_channel_indexes_14downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00008804)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_OFFSET      0x00008804
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_INDEX       0x00002201
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_RESET       0x00000000

__INLINE uint32_t  bt_controller_cont_subch_index_reg_0_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR);
}

__INLINE void bt_controller_cont_subch_index_reg_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONT_SUBCH_INDEX_REG_0_31_DOWNTO_30_RESERVED_MASK    ((uint32_t)0xC0000000)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONT_SUBCH_INDEX_REG_0_31_DOWNTO_30_RESERVED_LSB    30
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONT_SUBCH_INDEX_REG_0_31_DOWNTO_30_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_59_DOWNTO_45_MASK    ((uint32_t)0x3F000000)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_59_DOWNTO_45_LSB    24
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_59_DOWNTO_45_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONT_SUBCH_INDEX_REG_0_24_DOWNTO_22_RESERVED_MASK    ((uint32_t)0x00C00000)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONT_SUBCH_INDEX_REG_0_24_DOWNTO_22_RESERVED_LSB    22
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONT_SUBCH_INDEX_REG_0_24_DOWNTO_22_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_44_DOWNTO_30_MASK    ((uint32_t)0x003F0000)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_44_DOWNTO_30_LSB    16
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_44_DOWNTO_30_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONT_SUBCH_INDEX_REG_0_15_DOWNTO_14_RESERVED_MASK    ((uint32_t)0x0000C000)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONT_SUBCH_INDEX_REG_0_15_DOWNTO_14_RESERVED_LSB    14
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONT_SUBCH_INDEX_REG_0_15_DOWNTO_14_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_29_DOWNTO_15_MASK    ((uint32_t)0x00003F00)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_29_DOWNTO_15_LSB    8
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_29_DOWNTO_15_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONT_SUBCH_INDEX_REG_0_7_DOWNTO_6_RESERVED_MASK    ((uint32_t)0x000000C0)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONT_SUBCH_INDEX_REG_0_7_DOWNTO_6_RESERVED_LSB    6
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONT_SUBCH_INDEX_REG_0_7_DOWNTO_6_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_14_DOWNTO_0_MASK    ((uint32_t)0x0000003F)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_14_DOWNTO_0_LSB    0
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_14_DOWNTO_0_WIDTH    ((uint32_t)0x00000006)

#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONT_SUBCH_INDEX_REG_0_31_DOWNTO_30_RESERVED_RST    0x0
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_59_DOWNTO_45_RST    0x0
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONT_SUBCH_INDEX_REG_0_24_DOWNTO_22_RESERVED_RST    0x0
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_44_DOWNTO_30_RST    0x0
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONT_SUBCH_INDEX_REG_0_15_DOWNTO_14_RESERVED_RST    0x0
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_29_DOWNTO_15_RST    0x0
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONT_SUBCH_INDEX_REG_0_7_DOWNTO_6_RESERVED_RST    0x0
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_14_DOWNTO_0_RST    0x0

__INLINE void bt_controller_cont_subch_index_reg_0_pack(uint8_t cont_subch_index_reg0_31downto30_reserved, uint8_t controller_lcu_sub_channel_indexes_59downto45, uint8_t cont_subch_index_reg0_24downto22_reserved, uint8_t controller_lcu_sub_channel_indexes_44downto30, uint8_t cont_subch_index_reg0_15downto14_reserved, uint8_t controller_lcu_sub_channel_indexes_29downto15, uint8_t cont_subch_index_reg0_7downto6_reserved, uint8_t controller_lcu_sub_channel_indexes_14downto_0)
{
	ASSERT_ERR((((uint32_t)cont_subch_index_reg0_31downto30_reserved << 30) & ~((uint32_t)0xC0000000)) == 0);
	ASSERT_ERR((((uint32_t)controller_lcu_sub_channel_indexes_59downto45 << 24) & ~((uint32_t)0x3F000000)) == 0);
	ASSERT_ERR((((uint32_t)cont_subch_index_reg0_24downto22_reserved << 22) & ~((uint32_t)0x00C00000)) == 0);
	ASSERT_ERR((((uint32_t)controller_lcu_sub_channel_indexes_44downto30 << 16) & ~((uint32_t)0x003F0000)) == 0);
	ASSERT_ERR((((uint32_t)cont_subch_index_reg0_15downto14_reserved << 14) & ~((uint32_t)0x0000C000)) == 0);
	ASSERT_ERR((((uint32_t)controller_lcu_sub_channel_indexes_29downto15 << 8) & ~((uint32_t)0x00003F00)) == 0);
	ASSERT_ERR((((uint32_t)cont_subch_index_reg0_7downto6_reserved << 6) & ~((uint32_t)0x000000C0)) == 0);
	ASSERT_ERR((((uint32_t)controller_lcu_sub_channel_indexes_14downto_0 << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR,  ((uint32_t)cont_subch_index_reg0_31downto30_reserved << 30) |((uint32_t)controller_lcu_sub_channel_indexes_59downto45 << 24) |((uint32_t)cont_subch_index_reg0_24downto22_reserved << 22) |((uint32_t)controller_lcu_sub_channel_indexes_44downto30 << 16) |((uint32_t)cont_subch_index_reg0_15downto14_reserved << 14) |((uint32_t)controller_lcu_sub_channel_indexes_29downto15 << 8) |((uint32_t)cont_subch_index_reg0_7downto6_reserved << 6) |((uint32_t)controller_lcu_sub_channel_indexes_14downto_0 << 0));
}

__INLINE void bt_controller_cont_subch_index_reg_0_unpack(uint8_t* cont_subch_index_reg0_31downto30_reserved, uint8_t* controller_lcu_sub_channel_indexes_59downto45, uint8_t* cont_subch_index_reg0_24downto22_reserved, uint8_t* controller_lcu_sub_channel_indexes_44downto30, uint8_t* cont_subch_index_reg0_15downto14_reserved, uint8_t* controller_lcu_sub_channel_indexes_29downto15, uint8_t* cont_subch_index_reg0_7downto6_reserved, uint8_t* controller_lcu_sub_channel_indexes_14downto_0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR);

	*cont_subch_index_reg0_31downto30_reserved = (localVal & ((uint32_t)0xC0000000)) >>  30;
	*controller_lcu_sub_channel_indexes_59downto45 = (localVal & ((uint32_t)0x3F000000)) >>  24;
	*cont_subch_index_reg0_24downto22_reserved = (localVal & ((uint32_t)0x00C00000)) >>  22;
	*controller_lcu_sub_channel_indexes_44downto30 = (localVal & ((uint32_t)0x003F0000)) >>  16;
	*cont_subch_index_reg0_15downto14_reserved = (localVal & ((uint32_t)0x0000C000)) >>  14;
	*controller_lcu_sub_channel_indexes_29downto15 = (localVal & ((uint32_t)0x00003F00)) >>  8;
	*cont_subch_index_reg0_7downto6_reserved = (localVal & ((uint32_t)0x000000C0)) >>  6;
	*controller_lcu_sub_channel_indexes_14downto_0 = (localVal & ((uint32_t)0x0000003F)) >>  0;
}

__INLINE uint8_t bt_controller_cont_subch_index_reg_0_cont_subch_index_reg_0_31_downto_30_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xC0000000)) >> 30);
}
__INLINE uint8_t bt_controller_cont_subch_index_reg_0_controller_lcu_sub_channel_indexes_59_downto_45_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x3F000000)) >> 24);
}
__INLINE void bt_controller_cont_subch_index_reg_0_controller_lcu_sub_channel_indexes_59_downto_45_setf(uint8_t controllerlcusubchannelindexes59downto45)
{
	ASSERT_ERR((((uint32_t)controllerlcusubchannelindexes59downto45 << 24) & ~((uint32_t)0x3F000000)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR, (REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR) & ~((uint32_t)0x3F000000)) | ((uint32_t)controllerlcusubchannelindexes59downto45 <<24));
}
__INLINE uint8_t bt_controller_cont_subch_index_reg_0_cont_subch_index_reg_0_24_downto_22_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00C00000)) >> 22);
}
__INLINE uint8_t bt_controller_cont_subch_index_reg_0_controller_lcu_sub_channel_indexes_44_downto_30_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x003F0000)) >> 16);
}
__INLINE void bt_controller_cont_subch_index_reg_0_controller_lcu_sub_channel_indexes_44_downto_30_setf(uint8_t controllerlcusubchannelindexes44downto30)
{
	ASSERT_ERR((((uint32_t)controllerlcusubchannelindexes44downto30 << 16) & ~((uint32_t)0x003F0000)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR, (REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR) & ~((uint32_t)0x003F0000)) | ((uint32_t)controllerlcusubchannelindexes44downto30 <<16));
}
__INLINE uint8_t bt_controller_cont_subch_index_reg_0_cont_subch_index_reg_0_15_downto_14_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000C000)) >> 14);
}
__INLINE uint8_t bt_controller_cont_subch_index_reg_0_controller_lcu_sub_channel_indexes_29_downto_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003F00)) >> 8);
}
__INLINE void bt_controller_cont_subch_index_reg_0_controller_lcu_sub_channel_indexes_29_downto_15_setf(uint8_t controllerlcusubchannelindexes29downto15)
{
	ASSERT_ERR((((uint32_t)controllerlcusubchannelindexes29downto15 << 8) & ~((uint32_t)0x00003F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR, (REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR) & ~((uint32_t)0x00003F00)) | ((uint32_t)controllerlcusubchannelindexes29downto15 <<8));
}
__INLINE uint8_t bt_controller_cont_subch_index_reg_0_cont_subch_index_reg_0_7_downto_6_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000C0)) >> 6);
}
__INLINE uint8_t bt_controller_cont_subch_index_reg_0_controller_lcu_sub_channel_indexes_14_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000003F)) >> 0);
}
__INLINE void bt_controller_cont_subch_index_reg_0_controller_lcu_sub_channel_indexes_14_downto_0_setf(uint8_t controllerlcusubchannelindexes14downto0)
{
	ASSERT_ERR((((uint32_t)controllerlcusubchannelindexes14downto0 << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR, (REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_0_ADDR) & ~((uint32_t)0x0000003F)) | ((uint32_t)controllerlcusubchannelindexes14downto0 <<0));
}

/**
 * @brief CONT_SUBCH_INDEX_REG_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:14 CONT_SUBCH_INDEX_REG1_31downto14_reserved 0x0
 *    13:08 Controller_LCU_sub_channel_indexes_89downto75 0x0
 *    07:06 CONT_SUBCH_INDEX_REG1_7downto6_reserved 0x0
 *    05:00 Controller_LCU_sub_channel_indexes_74downto_60 0x0
 * </pre>
 */
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00008808)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_OFFSET      0x00008808
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_INDEX       0x00002202
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_cont_subch_index_reg_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_ADDR);
}

__INLINE void bt_controller_cont_subch_index_reg_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_CONT_SUBCH_INDEX_REG_1_31_DOWNTO_14_RESERVED_MASK    ((uint32_t)0xFFFFC000)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_CONT_SUBCH_INDEX_REG_1_31_DOWNTO_14_RESERVED_LSB    14
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_CONT_SUBCH_INDEX_REG_1_31_DOWNTO_14_RESERVED_WIDTH    ((uint32_t)0x00000012)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_89_DOWNTO_75_MASK    ((uint32_t)0x00003F00)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_89_DOWNTO_75_LSB    8
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_89_DOWNTO_75_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_CONT_SUBCH_INDEX_REG_1_7_DOWNTO_6_RESERVED_MASK    ((uint32_t)0x000000C0)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_CONT_SUBCH_INDEX_REG_1_7_DOWNTO_6_RESERVED_LSB    6
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_CONT_SUBCH_INDEX_REG_1_7_DOWNTO_6_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_74_DOWNTO_60_MASK    ((uint32_t)0x0000003F)
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_74_DOWNTO_60_LSB    0
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_74_DOWNTO_60_WIDTH    ((uint32_t)0x00000006)

#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_CONT_SUBCH_INDEX_REG_1_31_DOWNTO_14_RESERVED_RST    0x0
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_89_DOWNTO_75_RST    0x0
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_CONT_SUBCH_INDEX_REG_1_7_DOWNTO_6_RESERVED_RST    0x0
#define BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_74_DOWNTO_60_RST    0x0

__INLINE void bt_controller_cont_subch_index_reg_1_pack(uint32_t cont_subch_index_reg1_31downto14_reserved, uint8_t controller_lcu_sub_channel_indexes_89downto75, uint8_t cont_subch_index_reg1_7downto6_reserved, uint8_t controller_lcu_sub_channel_indexes_74downto_60)
{
	ASSERT_ERR((((uint32_t)cont_subch_index_reg1_31downto14_reserved << 14) & ~((uint32_t)0xFFFFC000)) == 0);
	ASSERT_ERR((((uint32_t)controller_lcu_sub_channel_indexes_89downto75 << 8) & ~((uint32_t)0x00003F00)) == 0);
	ASSERT_ERR((((uint32_t)cont_subch_index_reg1_7downto6_reserved << 6) & ~((uint32_t)0x000000C0)) == 0);
	ASSERT_ERR((((uint32_t)controller_lcu_sub_channel_indexes_74downto_60 << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_ADDR,  ((uint32_t)cont_subch_index_reg1_31downto14_reserved << 14) |((uint32_t)controller_lcu_sub_channel_indexes_89downto75 << 8) |((uint32_t)cont_subch_index_reg1_7downto6_reserved << 6) |((uint32_t)controller_lcu_sub_channel_indexes_74downto_60 << 0));
}

__INLINE void bt_controller_cont_subch_index_reg_1_unpack(uint32_t* cont_subch_index_reg1_31downto14_reserved, uint8_t* controller_lcu_sub_channel_indexes_89downto75, uint8_t* cont_subch_index_reg1_7downto6_reserved, uint8_t* controller_lcu_sub_channel_indexes_74downto_60)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_ADDR);

	*cont_subch_index_reg1_31downto14_reserved = (localVal & ((uint32_t)0xFFFFC000)) >>  14;
	*controller_lcu_sub_channel_indexes_89downto75 = (localVal & ((uint32_t)0x00003F00)) >>  8;
	*cont_subch_index_reg1_7downto6_reserved = (localVal & ((uint32_t)0x000000C0)) >>  6;
	*controller_lcu_sub_channel_indexes_74downto_60 = (localVal & ((uint32_t)0x0000003F)) >>  0;
}

__INLINE uint32_t bt_controller_cont_subch_index_reg_1_cont_subch_index_reg_1_31_downto_14_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFC000)) >> 14);
}
__INLINE uint8_t bt_controller_cont_subch_index_reg_1_controller_lcu_sub_channel_indexes_89_downto_75_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003F00)) >> 8);
}
__INLINE void bt_controller_cont_subch_index_reg_1_controller_lcu_sub_channel_indexes_89_downto_75_setf(uint8_t controllerlcusubchannelindexes89downto75)
{
	ASSERT_ERR((((uint32_t)controllerlcusubchannelindexes89downto75 << 8) & ~((uint32_t)0x00003F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_ADDR) & ~((uint32_t)0x00003F00)) | ((uint32_t)controllerlcusubchannelindexes89downto75 <<8));
}
__INLINE uint8_t bt_controller_cont_subch_index_reg_1_cont_subch_index_reg_1_7_downto_6_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000C0)) >> 6);
}
__INLINE uint8_t bt_controller_cont_subch_index_reg_1_controller_lcu_sub_channel_indexes_74_downto_60_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000003F)) >> 0);
}
__INLINE void bt_controller_cont_subch_index_reg_1_controller_lcu_sub_channel_indexes_74_downto_60_setf(uint8_t controllerlcusubchannelindexes74downto60)
{
	ASSERT_ERR((((uint32_t)controllerlcusubchannelindexes74downto60 << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_CONT_SUBCH_INDEX_REG_1_ADDR) & ~((uint32_t)0x0000003F)) | ((uint32_t)controllerlcusubchannelindexes74downto60 <<0));
}

/**
 * @brief MOD_SUBCH_INDEX_REG_0 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:30 MOD_SUBCH_INDEX_REG0_31downto30_reserved 0x0
 *    29:24 modem_LCU_sub_channel_indexes_59downto45 0x0
 *    23:22 MOD_SUBCH_INDEX_REG0_24downto22_reserved 0x0
 *    21:16 modem_LCU_sub_channel_indexes_44downto30 0x0
 *    15:14 MOD_SUBCH_INDEX_REG0_15downto14_reserved 0x0
 *    13:08 modem_LCU_sub_channel_indexes_29downto15 0x0
 *    07:06 MOD_SUBCH_INDEX_REG0_7downto6_reserved 0x0
 *    05:00 modem_LCU_sub_channel_indexes_14downto_0 0x0
 * </pre>
 */
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000880C)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_OFFSET      0x0000880C
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_INDEX       0x00002203
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_RESET       0x00000000

__INLINE uint32_t  bt_controller_mod_subch_index_reg_0_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR);
}

__INLINE void bt_controller_mod_subch_index_reg_0_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MOD_SUBCH_INDEX_REG_0_31_DOWNTO_30_RESERVED_MASK    ((uint32_t)0xC0000000)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MOD_SUBCH_INDEX_REG_0_31_DOWNTO_30_RESERVED_LSB    30
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MOD_SUBCH_INDEX_REG_0_31_DOWNTO_30_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MODEM_LCU_SUB_CHANNEL_INDEXES_59_DOWNTO_45_MASK    ((uint32_t)0x3F000000)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MODEM_LCU_SUB_CHANNEL_INDEXES_59_DOWNTO_45_LSB    24
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MODEM_LCU_SUB_CHANNEL_INDEXES_59_DOWNTO_45_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MOD_SUBCH_INDEX_REG_0_24_DOWNTO_22_RESERVED_MASK    ((uint32_t)0x00C00000)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MOD_SUBCH_INDEX_REG_0_24_DOWNTO_22_RESERVED_LSB    22
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MOD_SUBCH_INDEX_REG_0_24_DOWNTO_22_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MODEM_LCU_SUB_CHANNEL_INDEXES_44_DOWNTO_30_MASK    ((uint32_t)0x003F0000)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MODEM_LCU_SUB_CHANNEL_INDEXES_44_DOWNTO_30_LSB    16
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MODEM_LCU_SUB_CHANNEL_INDEXES_44_DOWNTO_30_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MOD_SUBCH_INDEX_REG_0_15_DOWNTO_14_RESERVED_MASK    ((uint32_t)0x0000C000)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MOD_SUBCH_INDEX_REG_0_15_DOWNTO_14_RESERVED_LSB    14
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MOD_SUBCH_INDEX_REG_0_15_DOWNTO_14_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MODEM_LCU_SUB_CHANNEL_INDEXES_29_DOWNTO_15_MASK    ((uint32_t)0x00003F00)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MODEM_LCU_SUB_CHANNEL_INDEXES_29_DOWNTO_15_LSB    8
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MODEM_LCU_SUB_CHANNEL_INDEXES_29_DOWNTO_15_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MOD_SUBCH_INDEX_REG_0_7_DOWNTO_6_RESERVED_MASK    ((uint32_t)0x000000C0)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MOD_SUBCH_INDEX_REG_0_7_DOWNTO_6_RESERVED_LSB    6
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MOD_SUBCH_INDEX_REG_0_7_DOWNTO_6_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MODEM_LCU_SUB_CHANNEL_INDEXES_14_DOWNTO_0_MASK    ((uint32_t)0x0000003F)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MODEM_LCU_SUB_CHANNEL_INDEXES_14_DOWNTO_0_LSB    0
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MODEM_LCU_SUB_CHANNEL_INDEXES_14_DOWNTO_0_WIDTH    ((uint32_t)0x00000006)

#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MOD_SUBCH_INDEX_REG_0_31_DOWNTO_30_RESERVED_RST    0x0
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MODEM_LCU_SUB_CHANNEL_INDEXES_59_DOWNTO_45_RST    0x0
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MOD_SUBCH_INDEX_REG_0_24_DOWNTO_22_RESERVED_RST    0x0
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MODEM_LCU_SUB_CHANNEL_INDEXES_44_DOWNTO_30_RST    0x0
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MOD_SUBCH_INDEX_REG_0_15_DOWNTO_14_RESERVED_RST    0x0
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MODEM_LCU_SUB_CHANNEL_INDEXES_29_DOWNTO_15_RST    0x0
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MOD_SUBCH_INDEX_REG_0_7_DOWNTO_6_RESERVED_RST    0x0
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_MODEM_LCU_SUB_CHANNEL_INDEXES_14_DOWNTO_0_RST    0x0

__INLINE void bt_controller_mod_subch_index_reg_0_pack(uint8_t mod_subch_index_reg0_31downto30_reserved, uint8_t modem_lcu_sub_channel_indexes_59downto45, uint8_t mod_subch_index_reg0_24downto22_reserved, uint8_t modem_lcu_sub_channel_indexes_44downto30, uint8_t mod_subch_index_reg0_15downto14_reserved, uint8_t modem_lcu_sub_channel_indexes_29downto15, uint8_t mod_subch_index_reg0_7downto6_reserved, uint8_t modem_lcu_sub_channel_indexes_14downto_0)
{
	ASSERT_ERR((((uint32_t)mod_subch_index_reg0_31downto30_reserved << 30) & ~((uint32_t)0xC0000000)) == 0);
	ASSERT_ERR((((uint32_t)modem_lcu_sub_channel_indexes_59downto45 << 24) & ~((uint32_t)0x3F000000)) == 0);
	ASSERT_ERR((((uint32_t)mod_subch_index_reg0_24downto22_reserved << 22) & ~((uint32_t)0x00C00000)) == 0);
	ASSERT_ERR((((uint32_t)modem_lcu_sub_channel_indexes_44downto30 << 16) & ~((uint32_t)0x003F0000)) == 0);
	ASSERT_ERR((((uint32_t)mod_subch_index_reg0_15downto14_reserved << 14) & ~((uint32_t)0x0000C000)) == 0);
	ASSERT_ERR((((uint32_t)modem_lcu_sub_channel_indexes_29downto15 << 8) & ~((uint32_t)0x00003F00)) == 0);
	ASSERT_ERR((((uint32_t)mod_subch_index_reg0_7downto6_reserved << 6) & ~((uint32_t)0x000000C0)) == 0);
	ASSERT_ERR((((uint32_t)modem_lcu_sub_channel_indexes_14downto_0 << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR,  ((uint32_t)mod_subch_index_reg0_31downto30_reserved << 30) |((uint32_t)modem_lcu_sub_channel_indexes_59downto45 << 24) |((uint32_t)mod_subch_index_reg0_24downto22_reserved << 22) |((uint32_t)modem_lcu_sub_channel_indexes_44downto30 << 16) |((uint32_t)mod_subch_index_reg0_15downto14_reserved << 14) |((uint32_t)modem_lcu_sub_channel_indexes_29downto15 << 8) |((uint32_t)mod_subch_index_reg0_7downto6_reserved << 6) |((uint32_t)modem_lcu_sub_channel_indexes_14downto_0 << 0));
}

__INLINE void bt_controller_mod_subch_index_reg_0_unpack(uint8_t* mod_subch_index_reg0_31downto30_reserved, uint8_t* modem_lcu_sub_channel_indexes_59downto45, uint8_t* mod_subch_index_reg0_24downto22_reserved, uint8_t* modem_lcu_sub_channel_indexes_44downto30, uint8_t* mod_subch_index_reg0_15downto14_reserved, uint8_t* modem_lcu_sub_channel_indexes_29downto15, uint8_t* mod_subch_index_reg0_7downto6_reserved, uint8_t* modem_lcu_sub_channel_indexes_14downto_0)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR);

	*mod_subch_index_reg0_31downto30_reserved = (localVal & ((uint32_t)0xC0000000)) >>  30;
	*modem_lcu_sub_channel_indexes_59downto45 = (localVal & ((uint32_t)0x3F000000)) >>  24;
	*mod_subch_index_reg0_24downto22_reserved = (localVal & ((uint32_t)0x00C00000)) >>  22;
	*modem_lcu_sub_channel_indexes_44downto30 = (localVal & ((uint32_t)0x003F0000)) >>  16;
	*mod_subch_index_reg0_15downto14_reserved = (localVal & ((uint32_t)0x0000C000)) >>  14;
	*modem_lcu_sub_channel_indexes_29downto15 = (localVal & ((uint32_t)0x00003F00)) >>  8;
	*mod_subch_index_reg0_7downto6_reserved = (localVal & ((uint32_t)0x000000C0)) >>  6;
	*modem_lcu_sub_channel_indexes_14downto_0 = (localVal & ((uint32_t)0x0000003F)) >>  0;
}

__INLINE uint8_t bt_controller_mod_subch_index_reg_0_mod_subch_index_reg_0_31_downto_30_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xC0000000)) >> 30);
}
__INLINE uint8_t bt_controller_mod_subch_index_reg_0_modem_lcu_sub_channel_indexes_59_downto_45_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x3F000000)) >> 24);
}
__INLINE void bt_controller_mod_subch_index_reg_0_modem_lcu_sub_channel_indexes_59_downto_45_setf(uint8_t modemlcusubchannelindexes59downto45)
{
	ASSERT_ERR((((uint32_t)modemlcusubchannelindexes59downto45 << 24) & ~((uint32_t)0x3F000000)) == 0);
	REG_PL_WR(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR, (REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR) & ~((uint32_t)0x3F000000)) | ((uint32_t)modemlcusubchannelindexes59downto45 <<24));
}
__INLINE uint8_t bt_controller_mod_subch_index_reg_0_mod_subch_index_reg_0_24_downto_22_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00C00000)) >> 22);
}
__INLINE uint8_t bt_controller_mod_subch_index_reg_0_modem_lcu_sub_channel_indexes_44_downto_30_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x003F0000)) >> 16);
}
__INLINE void bt_controller_mod_subch_index_reg_0_modem_lcu_sub_channel_indexes_44_downto_30_setf(uint8_t modemlcusubchannelindexes44downto30)
{
	ASSERT_ERR((((uint32_t)modemlcusubchannelindexes44downto30 << 16) & ~((uint32_t)0x003F0000)) == 0);
	REG_PL_WR(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR, (REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR) & ~((uint32_t)0x003F0000)) | ((uint32_t)modemlcusubchannelindexes44downto30 <<16));
}
__INLINE uint8_t bt_controller_mod_subch_index_reg_0_mod_subch_index_reg_0_15_downto_14_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000C000)) >> 14);
}
__INLINE uint8_t bt_controller_mod_subch_index_reg_0_modem_lcu_sub_channel_indexes_29_downto_15_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003F00)) >> 8);
}
__INLINE void bt_controller_mod_subch_index_reg_0_modem_lcu_sub_channel_indexes_29_downto_15_setf(uint8_t modemlcusubchannelindexes29downto15)
{
	ASSERT_ERR((((uint32_t)modemlcusubchannelindexes29downto15 << 8) & ~((uint32_t)0x00003F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR, (REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR) & ~((uint32_t)0x00003F00)) | ((uint32_t)modemlcusubchannelindexes29downto15 <<8));
}
__INLINE uint8_t bt_controller_mod_subch_index_reg_0_mod_subch_index_reg_0_7_downto_6_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000C0)) >> 6);
}
__INLINE uint8_t bt_controller_mod_subch_index_reg_0_modem_lcu_sub_channel_indexes_14_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000003F)) >> 0);
}
__INLINE void bt_controller_mod_subch_index_reg_0_modem_lcu_sub_channel_indexes_14_downto_0_setf(uint8_t modemlcusubchannelindexes14downto0)
{
	ASSERT_ERR((((uint32_t)modemlcusubchannelindexes14downto0 << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR, (REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_0_ADDR) & ~((uint32_t)0x0000003F)) | ((uint32_t)modemlcusubchannelindexes14downto0 <<0));
}

/**
 * @brief MOD_SUBCH_INDEX_REG_1 register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:14 MOD_SUBCH_INDEX_REG1_31downto14_reserved 0x0
 *    13:08 modem_LCU_sub_channel_indexes_89downto75 0x0
 *    07:06 MOD_SUBCH_INDEX_REG1_7downto6_reserved 0x0
 *    05:00 modem_LCU_sub_channel_indexes_74downto_60 0x0
 * </pre>
 */
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00008810)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_OFFSET      0x00008810
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_INDEX       0x00002204
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_RESET       0x00000000

__INLINE uint32_t  bt_controller_mod_subch_index_reg_1_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_ADDR);
}

__INLINE void bt_controller_mod_subch_index_reg_1_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_MOD_SUBCH_INDEX_REG_1_31_DOWNTO_14_RESERVED_MASK    ((uint32_t)0xFFFFC000)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_MOD_SUBCH_INDEX_REG_1_31_DOWNTO_14_RESERVED_LSB    14
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_MOD_SUBCH_INDEX_REG_1_31_DOWNTO_14_RESERVED_WIDTH    ((uint32_t)0x00000012)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_MODEM_LCU_SUB_CHANNEL_INDEXES_89_DOWNTO_75_MASK    ((uint32_t)0x00003F00)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_MODEM_LCU_SUB_CHANNEL_INDEXES_89_DOWNTO_75_LSB    8
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_MODEM_LCU_SUB_CHANNEL_INDEXES_89_DOWNTO_75_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_MOD_SUBCH_INDEX_REG_1_7_DOWNTO_6_RESERVED_MASK    ((uint32_t)0x000000C0)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_MOD_SUBCH_INDEX_REG_1_7_DOWNTO_6_RESERVED_LSB    6
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_MOD_SUBCH_INDEX_REG_1_7_DOWNTO_6_RESERVED_WIDTH    ((uint32_t)0x00000002)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_MODEM_LCU_SUB_CHANNEL_INDEXES_74_DOWNTO_60_MASK    ((uint32_t)0x0000003F)
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_MODEM_LCU_SUB_CHANNEL_INDEXES_74_DOWNTO_60_LSB    0
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_MODEM_LCU_SUB_CHANNEL_INDEXES_74_DOWNTO_60_WIDTH    ((uint32_t)0x00000006)

#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_MOD_SUBCH_INDEX_REG_1_31_DOWNTO_14_RESERVED_RST    0x0
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_MODEM_LCU_SUB_CHANNEL_INDEXES_89_DOWNTO_75_RST    0x0
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_MOD_SUBCH_INDEX_REG_1_7_DOWNTO_6_RESERVED_RST    0x0
#define BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_MODEM_LCU_SUB_CHANNEL_INDEXES_74_DOWNTO_60_RST    0x0

__INLINE void bt_controller_mod_subch_index_reg_1_pack(uint32_t mod_subch_index_reg1_31downto14_reserved, uint8_t modem_lcu_sub_channel_indexes_89downto75, uint8_t mod_subch_index_reg1_7downto6_reserved, uint8_t modem_lcu_sub_channel_indexes_74downto_60)
{
	ASSERT_ERR((((uint32_t)mod_subch_index_reg1_31downto14_reserved << 14) & ~((uint32_t)0xFFFFC000)) == 0);
	ASSERT_ERR((((uint32_t)modem_lcu_sub_channel_indexes_89downto75 << 8) & ~((uint32_t)0x00003F00)) == 0);
	ASSERT_ERR((((uint32_t)mod_subch_index_reg1_7downto6_reserved << 6) & ~((uint32_t)0x000000C0)) == 0);
	ASSERT_ERR((((uint32_t)modem_lcu_sub_channel_indexes_74downto_60 << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_ADDR,  ((uint32_t)mod_subch_index_reg1_31downto14_reserved << 14) |((uint32_t)modem_lcu_sub_channel_indexes_89downto75 << 8) |((uint32_t)mod_subch_index_reg1_7downto6_reserved << 6) |((uint32_t)modem_lcu_sub_channel_indexes_74downto_60 << 0));
}

__INLINE void bt_controller_mod_subch_index_reg_1_unpack(uint32_t* mod_subch_index_reg1_31downto14_reserved, uint8_t* modem_lcu_sub_channel_indexes_89downto75, uint8_t* mod_subch_index_reg1_7downto6_reserved, uint8_t* modem_lcu_sub_channel_indexes_74downto_60)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_ADDR);

	*mod_subch_index_reg1_31downto14_reserved = (localVal & ((uint32_t)0xFFFFC000)) >>  14;
	*modem_lcu_sub_channel_indexes_89downto75 = (localVal & ((uint32_t)0x00003F00)) >>  8;
	*mod_subch_index_reg1_7downto6_reserved = (localVal & ((uint32_t)0x000000C0)) >>  6;
	*modem_lcu_sub_channel_indexes_74downto_60 = (localVal & ((uint32_t)0x0000003F)) >>  0;
}

__INLINE uint32_t bt_controller_mod_subch_index_reg_1_mod_subch_index_reg_1_31_downto_14_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFC000)) >> 14);
}
__INLINE uint8_t bt_controller_mod_subch_index_reg_1_modem_lcu_sub_channel_indexes_89_downto_75_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x00003F00)) >> 8);
}
__INLINE void bt_controller_mod_subch_index_reg_1_modem_lcu_sub_channel_indexes_89_downto_75_setf(uint8_t modemlcusubchannelindexes89downto75)
{
	ASSERT_ERR((((uint32_t)modemlcusubchannelindexes89downto75 << 8) & ~((uint32_t)0x00003F00)) == 0);
	REG_PL_WR(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_ADDR) & ~((uint32_t)0x00003F00)) | ((uint32_t)modemlcusubchannelindexes89downto75 <<8));
}
__INLINE uint8_t bt_controller_mod_subch_index_reg_1_mod_subch_index_reg_1_7_downto_6_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x000000C0)) >> 6);
}
__INLINE uint8_t bt_controller_mod_subch_index_reg_1_modem_lcu_sub_channel_indexes_74_downto_60_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000003F)) >> 0);
}
__INLINE void bt_controller_mod_subch_index_reg_1_modem_lcu_sub_channel_indexes_74_downto_60_setf(uint8_t modemlcusubchannelindexes74downto60)
{
	ASSERT_ERR((((uint32_t)modemlcusubchannelindexes74downto60 << 0) & ~((uint32_t)0x0000003F)) == 0);
	REG_PL_WR(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_ADDR, (REG_PL_RD(BT_CONTROLLER_MOD_SUBCH_INDEX_REG_1_ADDR) & ~((uint32_t)0x0000003F)) | ((uint32_t)modemlcusubchannelindexes74downto60 <<0));
}

/**
 * @brief CH_MASK_INDEX_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:04 CH_MASK_INDEX_REG_31_downto_4_reserved 0x0
 *    03:00 Controller_LCU_sub_channel_indexes_to_be_masked 0x0
 * </pre>
 */
#define BT_CONTROLLER_CH_MASK_INDEX_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00008814)
#define BT_CONTROLLER_CH_MASK_INDEX_REG_OFFSET      0x00008814
#define BT_CONTROLLER_CH_MASK_INDEX_REG_INDEX       0x00002205
#define BT_CONTROLLER_CH_MASK_INDEX_REG_RESET       0x00000000

__INLINE uint32_t  bt_controller_ch_mask_index_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CH_MASK_INDEX_REG_ADDR);
}

__INLINE void bt_controller_ch_mask_index_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CH_MASK_INDEX_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CH_MASK_INDEX_REG_CH_MASK_INDEX_REG_31_DOWNTO_4_RESERVED_MASK    ((uint32_t)0xFFFFFFF0)
#define BT_CONTROLLER_CH_MASK_INDEX_REG_CH_MASK_INDEX_REG_31_DOWNTO_4_RESERVED_LSB    4
#define BT_CONTROLLER_CH_MASK_INDEX_REG_CH_MASK_INDEX_REG_31_DOWNTO_4_RESERVED_WIDTH    ((uint32_t)0x0000001C)
#define BT_CONTROLLER_CH_MASK_INDEX_REG_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_TO_BE_MASKED_MASK    ((uint32_t)0x0000000F)
#define BT_CONTROLLER_CH_MASK_INDEX_REG_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_TO_BE_MASKED_LSB    0
#define BT_CONTROLLER_CH_MASK_INDEX_REG_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_TO_BE_MASKED_WIDTH    ((uint32_t)0x00000004)

#define BT_CONTROLLER_CH_MASK_INDEX_REG_CH_MASK_INDEX_REG_31_DOWNTO_4_RESERVED_RST    0x0
#define BT_CONTROLLER_CH_MASK_INDEX_REG_CONTROLLER_LCU_SUB_CHANNEL_INDEXES_TO_BE_MASKED_RST    0x0

__INLINE void bt_controller_ch_mask_index_reg_pack(uint32_t ch_mask_index_reg_31_downto_4_reserved, uint8_t controller_lcu_sub_channel_indexes_to_be_masked)
{
	ASSERT_ERR((((uint32_t)ch_mask_index_reg_31_downto_4_reserved << 4) & ~((uint32_t)0xFFFFFFF0)) == 0);
	ASSERT_ERR((((uint32_t)controller_lcu_sub_channel_indexes_to_be_masked << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(BT_CONTROLLER_CH_MASK_INDEX_REG_ADDR,  ((uint32_t)ch_mask_index_reg_31_downto_4_reserved << 4) |((uint32_t)controller_lcu_sub_channel_indexes_to_be_masked << 0));
}

__INLINE void bt_controller_ch_mask_index_reg_unpack(uint32_t* ch_mask_index_reg_31_downto_4_reserved, uint8_t* controller_lcu_sub_channel_indexes_to_be_masked)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CH_MASK_INDEX_REG_ADDR);

	*ch_mask_index_reg_31_downto_4_reserved = (localVal & ((uint32_t)0xFFFFFFF0)) >>  4;
	*controller_lcu_sub_channel_indexes_to_be_masked = (localVal & ((uint32_t)0x0000000F)) >>  0;
}

__INLINE uint32_t bt_controller_ch_mask_index_reg_ch_mask_index_reg_31_downto_4_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CH_MASK_INDEX_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0xFFFFFFF0)) >> 4);
}
__INLINE uint8_t bt_controller_ch_mask_index_reg_controller_lcu_sub_channel_indexes_to_be_masked_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CH_MASK_INDEX_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0x0000000F)) >> 0);
}
__INLINE void bt_controller_ch_mask_index_reg_controller_lcu_sub_channel_indexes_to_be_masked_setf(uint8_t controllerlcusubchannelindexestobemasked)
{
	ASSERT_ERR((((uint32_t)controllerlcusubchannelindexestobemasked << 0) & ~((uint32_t)0x0000000F)) == 0);
	REG_PL_WR(BT_CONTROLLER_CH_MASK_INDEX_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_CH_MASK_INDEX_REG_ADDR) & ~((uint32_t)0x0000000F)) | ((uint32_t)controllerlcusubchannelindexestobemasked <<0));
}

/**
 * @brief CH_MASK_0_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 Controller_LCU_sub_channel_mask_bits_31_downto_0 0xffffffff
 * </pre>
 */
#define BT_CONTROLLER_CH_MASK_0_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00008818)
#define BT_CONTROLLER_CH_MASK_0_REG_OFFSET      0x00008818
#define BT_CONTROLLER_CH_MASK_0_REG_INDEX       0x00002206
#define BT_CONTROLLER_CH_MASK_0_REG_RESET       0xFFFFFFFF

__INLINE uint32_t  bt_controller_ch_mask_0_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CH_MASK_0_REG_ADDR);
}

__INLINE void bt_controller_ch_mask_0_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CH_MASK_0_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CH_MASK_0_REG_CONTROLLER_LCU_SUB_CHANNEL_MASK_BITS_31_DOWNTO_0_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_CH_MASK_0_REG_CONTROLLER_LCU_SUB_CHANNEL_MASK_BITS_31_DOWNTO_0_LSB    0
#define BT_CONTROLLER_CH_MASK_0_REG_CONTROLLER_LCU_SUB_CHANNEL_MASK_BITS_31_DOWNTO_0_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_CH_MASK_0_REG_CONTROLLER_LCU_SUB_CHANNEL_MASK_BITS_31_DOWNTO_0_RST    0xffffffff

__INLINE uint32_t bt_controller_ch_mask_0_reg_controller_lcu_sub_channel_mask_bits_31_downto_0_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CH_MASK_0_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_ch_mask_0_reg_controller_lcu_sub_channel_mask_bits_31_downto_0_setf(uint32_t controllerlcusubchannelmaskbits31downto0)
{
	ASSERT_ERR((((uint32_t)controllerlcusubchannelmaskbits31downto0 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_CH_MASK_0_REG_ADDR, (uint32_t)controllerlcusubchannelmaskbits31downto0 << 0);
}

/**
 * @brief CH_MASK_1_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:00 Controller_LCU_sub_channel_mask_bits_63_downto32 0xffffffff
 * </pre>
 */
#define BT_CONTROLLER_CH_MASK_1_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x0000881C)
#define BT_CONTROLLER_CH_MASK_1_REG_OFFSET      0x0000881C
#define BT_CONTROLLER_CH_MASK_1_REG_INDEX       0x00002207
#define BT_CONTROLLER_CH_MASK_1_REG_RESET       0xFFFFFFFF

__INLINE uint32_t  bt_controller_ch_mask_1_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CH_MASK_1_REG_ADDR);
}

__INLINE void bt_controller_ch_mask_1_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CH_MASK_1_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CH_MASK_1_REG_CONTROLLER_LCU_SUB_CHANNEL_MASK_BITS_63_DOWNTO_32_MASK    ((uint32_t)0xFFFFFFFF)
#define BT_CONTROLLER_CH_MASK_1_REG_CONTROLLER_LCU_SUB_CHANNEL_MASK_BITS_63_DOWNTO_32_LSB    0
#define BT_CONTROLLER_CH_MASK_1_REG_CONTROLLER_LCU_SUB_CHANNEL_MASK_BITS_63_DOWNTO_32_WIDTH    ((uint32_t)0x00000020)

#define BT_CONTROLLER_CH_MASK_1_REG_CONTROLLER_LCU_SUB_CHANNEL_MASK_BITS_63_DOWNTO_32_RST    0xffffffff

__INLINE uint32_t bt_controller_ch_mask_1_reg_controller_lcu_sub_channel_mask_bits_63_downto_32_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CH_MASK_1_REG_ADDR);
	return (uint32_t)(localVal >> 0);
}
__INLINE void bt_controller_ch_mask_1_reg_controller_lcu_sub_channel_mask_bits_63_downto_32_setf(uint32_t controllerlcusubchannelmaskbits63downto32)
{
	ASSERT_ERR((((uint32_t)controllerlcusubchannelmaskbits63downto32 << 0) & ~((uint32_t)0xFFFFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_CH_MASK_1_REG_ADDR, (uint32_t)controllerlcusubchannelmaskbits63downto32 << 0);
}

/**
 * @brief CH_MASK_2_REG register definition
 * <pre>
 *   Bits           Field Name   Reset Value
 *  -----   ------------------   -----------
 *    31:26 CH_MASK2_REG_31_downto_26_reserved 0x0
 *    25:00 Controller_LCU_sub_channel_mask_bits_89_downto64 0x3fffff
 * </pre>
 */
#define BT_CONTROLLER_CH_MASK_2_REG_ADDR        (REG_BT_CONTROLLER_BASE_ADDR+0x00008820)
#define BT_CONTROLLER_CH_MASK_2_REG_OFFSET      0x00008820
#define BT_CONTROLLER_CH_MASK_2_REG_INDEX       0x00002208
#define BT_CONTROLLER_CH_MASK_2_REG_RESET       0x03FFFFFF

__INLINE uint32_t  bt_controller_ch_mask_2_reg_get(void)
{
	return REG_PL_RD(BT_CONTROLLER_CH_MASK_2_REG_ADDR);
}

__INLINE void bt_controller_ch_mask_2_reg_set(uint32_t value)
{
	REG_PL_WR(BT_CONTROLLER_CH_MASK_2_REG_ADDR, value);
}

// field definitions
#define BT_CONTROLLER_CH_MASK_2_REG_CH_MASK_2_REG_31_DOWNTO_26_RESERVED_MASK    ((uint32_t)0xFC000000)
#define BT_CONTROLLER_CH_MASK_2_REG_CH_MASK_2_REG_31_DOWNTO_26_RESERVED_LSB    26
#define BT_CONTROLLER_CH_MASK_2_REG_CH_MASK_2_REG_31_DOWNTO_26_RESERVED_WIDTH    ((uint32_t)0x00000006)
#define BT_CONTROLLER_CH_MASK_2_REG_CONTROLLER_LCU_SUB_CHANNEL_MASK_BITS_89_DOWNTO_64_MASK    ((uint32_t)0x03FFFFFF)
#define BT_CONTROLLER_CH_MASK_2_REG_CONTROLLER_LCU_SUB_CHANNEL_MASK_BITS_89_DOWNTO_64_LSB    0
#define BT_CONTROLLER_CH_MASK_2_REG_CONTROLLER_LCU_SUB_CHANNEL_MASK_BITS_89_DOWNTO_64_WIDTH    ((uint32_t)0x0000001A)

#define BT_CONTROLLER_CH_MASK_2_REG_CH_MASK_2_REG_31_DOWNTO_26_RESERVED_RST    0x0
#define BT_CONTROLLER_CH_MASK_2_REG_CONTROLLER_LCU_SUB_CHANNEL_MASK_BITS_89_DOWNTO_64_RST    0x3fffff

__INLINE void bt_controller_ch_mask_2_reg_pack(uint8_t ch_mask2_reg_31_downto_26_reserved, uint32_t controller_lcu_sub_channel_mask_bits_89_downto64)
{
	ASSERT_ERR((((uint32_t)ch_mask2_reg_31_downto_26_reserved << 26) & ~((uint32_t)0xFC000000)) == 0);
	ASSERT_ERR((((uint32_t)controller_lcu_sub_channel_mask_bits_89_downto64 << 0) & ~((uint32_t)0x03FFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_CH_MASK_2_REG_ADDR,  ((uint32_t)ch_mask2_reg_31_downto_26_reserved << 26) |((uint32_t)controller_lcu_sub_channel_mask_bits_89_downto64 << 0));
}

__INLINE void bt_controller_ch_mask_2_reg_unpack(uint8_t* ch_mask2_reg_31_downto_26_reserved, uint32_t* controller_lcu_sub_channel_mask_bits_89_downto64)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CH_MASK_2_REG_ADDR);

	*ch_mask2_reg_31_downto_26_reserved = (localVal & ((uint32_t)0xFC000000)) >>  26;
	*controller_lcu_sub_channel_mask_bits_89_downto64 = (localVal & ((uint32_t)0x03FFFFFF)) >>  0;
}

__INLINE uint8_t bt_controller_ch_mask_2_reg_ch_mask_2_reg_31_downto_26_reserved_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CH_MASK_2_REG_ADDR);
	return (uint8_t)((localVal & ((uint32_t)0xFC000000)) >> 26);
}
__INLINE uint32_t bt_controller_ch_mask_2_reg_controller_lcu_sub_channel_mask_bits_89_downto_64_getf(void)
{
	uint32_t localVal = REG_PL_RD(BT_CONTROLLER_CH_MASK_2_REG_ADDR);
	return (uint32_t)((localVal & ((uint32_t)0x03FFFFFF)) >> 0);
}
__INLINE void bt_controller_ch_mask_2_reg_controller_lcu_sub_channel_mask_bits_89_downto_64_setf(uint32_t controllerlcusubchannelmaskbits89downto64)
{
	ASSERT_ERR((((uint32_t)controllerlcusubchannelmaskbits89downto64 << 0) & ~((uint32_t)0x03FFFFFF)) == 0);
	REG_PL_WR(BT_CONTROLLER_CH_MASK_2_REG_ADDR, (REG_PL_RD(BT_CONTROLLER_CH_MASK_2_REG_ADDR) & ~((uint32_t)0x03FFFFFF)) | ((uint32_t)controllerlcusubchannelmaskbits89downto64 <<0));
}


#undef DBG_FILEID
#endif //_REG_BT_CONTROLLER_H_
