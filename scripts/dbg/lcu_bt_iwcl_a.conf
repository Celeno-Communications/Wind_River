#!/bin/sh
#lcu_bt_debug.conf

#PARAMETERS:
#    • Mode:
#        ◦ 0: Tx IQ samples
#            ▪ Configures BT LCU to capture sub channel 0: 24, 25
#        ◦ 1: Rx IQ samples without calibration (used by AGC)
#            ▪ Configures BT LCU to capture sub channel 0: 18, 19
#        ◦ 2: Rx IQ samples with calibration
#            ▪ Configures BT LCU to capture sub channel 0: 20, 21
#    • Capture mode:
#        ◦ 0 = end buffer
#        ◦ 1 = cyclic
#    • Trigger mode:
#        ◦ 0 – LCU is enabled at the end of the IW command
#        ◦ 1 – LCU is enabled once there is Rx/Tx Enable.
#        ◦ 2 – LCU is enabled once there is Rx ADC DATA Enable, Tx PA Enable.

mode="$1"
Capture_mode="$2"
Trigger_mode="$3"

. $cl_install_dir/scripts/ce_mem.inc

### COMMON_LCU_SW_RST
mem_write 0x7CF048 0x1
### PHY_LCU_SW_RST
mem_write 0x4AE154 0x1

# Sleep at least for 6 clocks needed for SW Reset
sleep 1

##################### LCU_COMMON #####################
### BUF_START_ADDR
mem_write 0x7CF014 0x60040000
### BUF_END_ADDR
mem_write 0x7CF018 0x60060000
### CAPTURE_MODE - 0-end buffer, 1-cyclic
if [ "$Capture_mode" == "0" ] ; then
	mem_write 0x7CF01C 0x0
else
	mem_write 0x7CF01C 0x1
fi

### LCU_COMMON_VCI
# virtaul channel index
# ch5_vci [21:20]
# ch4_vci [17:16]
# ch3_vci [13:12]
# ch2_vci [9:8]
# ch1_vci [5:4]
# ch0_vci [1:0]
mem_write 0x7CF000 0x00030000

#LCU_COMMON_CH4_CONF  vci+ts+narrow/wide format
mem_write 0x7CF110 0x6

### LCU_COMMON_LCU_BT_EN - enable BT LCU
#  enable [0]
mem_write 0x7CF900 0x0
### LCU_COMMON_LCU_BT_START
#  start [0]
mem_write 0x7CF904 0x0
### LCU_COMMON_LCU_BT_CH_VALID
#  ch_valid [19:0] - bit per channel
mem_write 0x7CF944 0x00001
### LCU_COMMON_LCU_BT_CTPREV_EN
#  ctprev_valid [19:0]  bit per channel (compare to prev)
mem_write 0x7CF948 0x0


##################### BT_CONTROLLER #####################
### CONT_MODEM_SUBCH_EN_REG
#  Modem_LCU_sub_channel_indexes_enable      [11:6]
#  Controller_LCU_sub_channel_indexes_enable [5:0]
mem_write 0x398800 0x000007e0

### CONT_SUBCH_INDEX_REG0
# Controller_LCU_sub_channel_indexes_59downto45	    [29:24]
# Controller_LCU_sub_channel_indexes_44downto30	    [21:16]
# Controller_LCU_sub_channel_indexes_29downto15	    [13:8]
# Controller_LCU_sub_channel_indexes_14downto_0	    [5:0]
mem_write 0x398804 0x050A0702
### CONT_SUBCH_INDEX_REG1
# Controller_LCU_sub_channel_indexes_89downto75	    [13:8]
# Controller_LCU_sub_channel_indexes_74downto_60    [5:0]
mem_write 0x398808 0x00000000

### MOD_SUBCH_INDEX_REG0
# Modem_LCU_sub_channel_indexes_59downto45	    [29:24]
# Modem_LCU_sub_channel_indexes_44downto30	    [21:16]
# Modem_LCU_sub_channel_indexes_29downto15	    [13:8]
# Modem_LCU_sub_channel_indexes_14downto_0	    [5:0]
mem_write 0x39880C 0x12111000
### MOD_SUBCH_INDEX_REG1
# Modem_LCU_sub_channel_indexes_89downto75     [13:8]
# Modem_LCU_sub_channel_indexes_74downto_60    [5:0]
if [ "$mode" == "0" ] ; then     # Tx IQ samples
	mem_write 0x398810 0x00001918
elif [ "$mode" == "1" ] ; then # Rx IQ samples without calibration (used by AGC)
	mem_write 0x398810 0x00001312
elif [ "$mode" == "2" ] ; then # Rx IQ samples with calibration
	mem_write 0x398810 0x00001e13
fi

### CH_MASK_INDEX_REG
# Controller_LCU_sub_channel_indexes_to_be_masked	[3:0]
mem_write 0x398814 0x00000000
### CH_MASK0_REG
if [ "$Trigger_mode" == "1" ] ; then
	if [ "$mode" == "0" ] ; then     # Tx IQ samples
		mem_write 0x398818 0x00000100
	elif [ "$mode" == "1" ] ; then # Rx IQ samples without calibration (used by AGC)
		mem_write 0x398818 0x00000080
	elif [ "$mode" == "2" ] ; then # Rx IQ samples with calibration
		mem_write 0x398818 0x00000080
	fi
else
	mem_write 0x398818 0x00004000
fi
### CH_MASK1_REG
mem_write 0x39881C 0xFFFFE000
### CH_MASK2_REG
mem_write 0x398820 0x000007FF

##################### LCU_COMMON #####################
	##LCU_BT_START_EN
##start trigger enable (by pattern 1 or by ext trigger 2)
mem_write 0x7CF908 1
#triiger based on specif pattern
# LCU_BT_START_PTRN_REG0
# trigger on ch0 rif_rxon bit 6 (pattren bit 0-31)
#mem_write 0x7CF90c 0x4000  

#LCU_BT_START_PTRN_REG1
##  trigger on ch0 (pattren bit 63-32)
#mem_write 0x7CF910 0x0000000  
##LCU_BT_START_PTRN_REG2
##  trigger (pattren bit 89-64)
mem_write 0x7CF914 0x0000000 
##LCU_BT_START_PTRN_MASK_REG0
##  trigger mask bit 0-31
#mem_write 0x7CF918 0x4000  
##LCU_BT_START_PTRN_MASK_REG1
## trigger mask bit 32-63
#mem_write 0x7CF91c 0x0000000  
##LCU_BT_START_PTRN_MASK_REG2
##trigger mask bit 64-89
mem_write 0x7CF920 0x0000000 

if [ "$Trigger_mode" == "1" ] ; then
	if [ "$mode" == "0" ] ; then     # Tx IQ samples
		mem_write 0x7CF90c 0x00000100
		mem_write 0x7CF910 0x00000000
		mem_write 0x7CF918 0x00000100
		mem_write 0x7CF91c 0x00000000
	elif [ "$mode" == "1" -o "$mode" == "2" ] ; then # Rx IQ samples
		mem_write 0x7CF90c 0x00000080
		mem_write 0x7CF910 0x00000000
		mem_write 0x7CF918 0x00000080
		mem_write 0x7CF91c 0x00000000
	fi
elif [ "$Trigger_mode" == "2" ] ; then
	if [ "$mode" == "0" ] ; then     # Tx IQ samples
		mem_write 0x7CF90c 0x10000000
		mem_write 0x7CF910 0x00000000
		mem_write 0x7CF918 0x10000000
		mem_write 0x7CF91c 0x00000000
	elif [ "$mode" == "1" -o "$mode" == "2" ] ; then # Rx IQ samples
		mem_write 0x7CF90c 0x00000080
		mem_write 0x7CF910 0x00000000
		mem_write 0x7CF918 0x00000080
		mem_write 0x7CF91c 0x00000000
	fi
else
	mem_write 0x7CF90c 0x00004000
	mem_write 0x7CF910 0x00000000
	mem_write 0x7CF918 0x00004000
	mem_write 0x7CF91c 0x00000000
fi

##LCU_BT_PTRN_MATCH_SEL
##which BT channel will be sused for the trigger  pattren- match on ch0 and not ch10
mem_write 0x7CF94C 0x00000000

 ### LCU_COMMON_LCU_BT_EN - enable BT LCU
#  enable [0]
mem_write 0x7CF900 0x1
### LCU_COMMON_REC_CMD
# stop recording  [2]
# start recording [1]
# arm             [0]
mem_write 0x7CF020 0x00000001 # arm
mem_write 0x7CF020 0x00000002 # start
