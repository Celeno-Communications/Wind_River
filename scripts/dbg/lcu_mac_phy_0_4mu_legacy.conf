#!/bin/sh

. $cl_install_dir/scripts/ce_mem.inc

#
#BUF_START_ADDR
mem_write 0x7CF014 0x60040000
#BUF_END_ADDR  - end of the buffer
mem_write 0x7CF018 0x60060000
#CAPTURE_MODE - 1 cyclic 0 end buffer
mem_write 0x7CF01C 0x1
#MAC_ELA_CH0_SELECT - mac0_hw_diag 95:0
mem_write 0x7CF828 0x0
#MAC_ELA_CH1_SELECT - mac1 hw_diag 95:0
mem_write 0x7CF82C 0x0
#MAC_ELA_CH0_EN - eLA starts to send data
mem_write 0x7CF820 0x1
#MAC_ELA_CH1_EN
mem_write 0x7CF824 0x0
#LCU_COMMON_VCI - ch0 vci = 0,ch1 vci = 1,ch2 vci = 2
mem_write 0x7CF000 0x210

#LCU_COMMON_CH0_CONF  vci+ts+narrow/wide format
mem_write 0x7CF100 0x6
#LCU_COMMON_CH1_CONF  vci+ts+narrow/wide format
mem_write 0x7CF104 0x6
#LCU_COMMON_CH2_CONF  vci+ts+narrow/wide format
mem_write 0x7CF108 0x7
#LCU_COMMON_CH3_CONF  vci+ts+narrow/wide format
mem_write 0x7CF10C 0x0
#LCU_COMMON_CH4_CONF  vci+ts+narrow/wide format
mem_write 0x7CF110 0x0
#LCU_COMMON_CH5_CONF  vci+ts+narrow/wide format
mem_write 0x7CF114 0x0

### NOTE: In case CH is disabled you should clear to '0' all its MASK bits.
###       In Wide Mode CH0 is the owner of all 256 MASK bits.
### MASK for 128 lsbits - CH1 mask in Narrow Mode
#bits 31<-0
mem_write 0x7CF800 0
#bits 63<-32
mem_write 0x7CF804 0
#bits 95<-64
mem_write 0x7CF808 0
#bits 127<-96 (VCI+Timestamp)
mem_write 0x7CF80C 0 
### MASK for 128 msbits - CH0 mask in Narrow Mode
#bits 159<-128
mem_write 0x7CF810 0xFFFFFFFF
#bits 191<-160
mem_write 0x7CF814 0xFFFFFFFF
#bits 223<-192
mem_write 0x7CF818 0xFFFFFFFF
#bits 255<-224 (VCI+Timestamp)
mem_write 0x7CF81C 0 

### TRIGGER CONFIGURATION
# Note: EXTRA_SAMPLES and EXTRA_CYCLES both has to be different from 0 in order for this to work !!!
# if either one is 0 - the last sample will be the stop trigger
#EXTRA_SAMPLES - e.g. 0x80 means record additional 128 samples after stop trigger
mem_write 0x7CF024 0x0
#EXTRA_CYCLES - e.g. 0x80000 means record 512K cycles after stop trigger if no more than extra samples occure
mem_write 0x7CF028 0x0
#CH0_TRIG_MODE - stop trigger mode
mem_write 0x7CF830 0x1
# Note: In Single channel narrow mode ch0 sample is in the upper sample -> bits 127-64
#TRIG_PATTERN - bits 95<-64 - common_mpif::mpif_rxend_p [bit 87] => 0x1
mem_write 0x7CF850 0x00000000
mem_write 0x7CF854 0x00000000
mem_write 0x7CF858 0x00800000
mem_write 0x7CF85C 0x00000000
# TRIG_MASK - bits 95<-64 - common_mpif::mpif_rxend_p [bit 87] mask
mem_write 0x7CF870 0x00000000
mem_write 0x7CF874 0x00000000
mem_write 0x7CF878 0x00800000
mem_write 0x7CF87C 0x00000000

#DEBUG_PORT_SEL_A MU0
# CommonMpif   0x38 - mux56  (sel1=>bits[31:16])
# MpifUser     0x67 - mux103 (sel0=>bits[15:0])
mem_write 0x600510 0x00003867
#DEBUG_PORT_SEL_B MU0
# swProf_high 0x1F - mux31 (sel3=>bits[63:48])
# swProf_low  0x1E - mux30 (sel2=>bits[47:32])
mem_write 0x600530 0x00001F1E
#DEBUG_PORT_SEL_C MU0
# debugPortAMPDU    0x1C - mux28 (sel5=>bits[95:80])
# debugPortMainFSM  0x25 - mux37 (sel4=>bits[79:64])
mem_write 0x600534 0x00001C25
#DEBUG_PORT_CNTRL (mpif debug enabled, narrow mode, comaptible)
mem_write 0x60053C 0x00000200
#DEBUG_PORT_ENABLE MU0
mem_write 0x600538 0x0000003F

## LCU PHY0 Configuration
#LCU_CH0_STOP_EN - enable stop signalling
mem_write 0x4AE078 0x0
#LCU_CH0_CONF - CH2: LA, wide(256), MU4
mem_write 0x4AE008  0x312
#LCU_CH0_CTPREV_EN - CH2: sending to common depends on the compare to previous situation
mem_write 0x4AE0C0  0x1
#LCU_CH01_CTPREV_MASK_REG0-7 - CH2: Enable all
mem_write 0x4AE0D0  0xFFFFFFFF
mem_write 0x4AE0D4  0xFFFFFFFF
mem_write 0x4AE0D8  0xFFFFFFFF
mem_write 0x4AE0DC  0xFFFFFFFF
mem_write 0x4AE0E0  0xFFFFFFFF
mem_write 0x4AE0E4  0xFFFFFFFF
mem_write 0x4AE0E8  0xFFFFFFFF
mem_write 0x4AE0EC  0xFFFFFFFF
#RIU_MICTOR_CONF (0x1D0) - Set RIU Debug Group 0 to MICTOR_SEL5 
mem_write 0x4A61D0  0x0
#LCU_MICTORS_BITMAP_REG0 (0x140) - Set MICTOR0_INDX to mictor18 ( RIUDbgPort0  )
mem_write 0x4AE140 0x3FFFFFD2

#LCU_CH0_EN - enable channel 2
mem_write 0x4AE000  0x1
#LCU_CH0_START - CH2
mem_write 0x4AE020  0x1

#LCU_COMMON_REC_CMD  ARM
mem_write 0x7CF020 0x1
#LCU_COMMON_REC_CMD  START
mem_write 0x7CF020 0x2

#CH0_TRIG_EN - Ask LCU common to look for stop trigger
#mem_write 0x7CF838 0x1

