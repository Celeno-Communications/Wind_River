#!/bin/sh

. $cl_install_dir/scripts/ce_mem.inc

### BUF_START_ADDR
mem_write 0x7CF014 0x60040000
### BUF_END_ADDR
mem_write 0x7CF018 0x60060000
### CAPTURE_MODE - 0-end buffer, 1-cyclic
mem_write 0x7CF01C 0x00000001

### MAC_ELA_CHx_SELECT
# see CL6000 AXI Spec 6.3 list of modes
mem_write 0x7CF828 0x00000016 # chan0 - pciew_dbg_bus[31:0]+e2w_dbg_bus[31:0]+txm_dbg_bus[31:0]
mem_write 0x7CF82C 0x00000000 # chan1 - hw_diag[95:0]
### MAC_ELA_CHx_EN
mem_write 0x7CF820 0x00000001 # chan0
mem_write 0x7CF824 0x00000001 # chan1

### LCU_COMMON_VCI
# virtaul channel index
# ch5_vci [21:20]
# ch4_vci [17:16]
# ch3_vci [13:12]
# ch2_vci [9:8]
# ch1_vci [5:4]
# ch0_vci [1:0]
mem_write 0x7CF000 0x00000010

### LCU_COMMON_CHx_CONF
#  write_vci  [2] - write virtual channel index
#  write_ts   [1] - write timestamp
#  rec_format [0] - 0-narrow, 1-wide
mem_write 0x7CF100 0x00000006 # chan0
mem_write 0x7CF104 0x00000006 # chan1
mem_write 0x7CF108 0x00000000 # chan2
mem_write 0x7CF10C 0x00000000 # chan3
mem_write 0x7CF110 0x00000000 # chan4
mem_write 0x7CF114 0x00000000 # chan5

### MAC_ELA_CH01_MASK_REGx
# In case chan0/1 is disabled you should clear its mask.
# In Wide Mode chan0 is the owner of all 256 mask bits.
### MASK for 128 msbits - CH0 mask in Narrow Mode
mem_write 0x7CF81C 0x00000000 # reg7 -> mask[255:224] (VCI + Timestamp)
mem_write 0x7CF818 0xFFFFFFFF # reg6 -> mask[223:192]
mem_write 0x7CF814 0xFFFFFFFF # reg5 -> mask[191:160]
mem_write 0x7CF810 0xFFFFFFFF # reg4 -> mask[159:128]
### MASK for 128 lsbits - CH1 mask in Narrow Mode
mem_write 0x7CF80C 0x00000000 # reg3 -> mask[127:96] (VCI + Timestamp)
mem_write 0x7CF808 0xFFFFFFFF # reg2 -> mask[95:64]
mem_write 0x7CF804 0xFFFFFFFF # reg1 -> mask[63:32]
mem_write 0x7CF800 0xFFFFFFFF # reg0 -> mask[31:0]

### MAC-HW0 DEBUG PORTS SELECT
# select sets of MAC-HW signals to bring out to hw_diag[95:00]
# see hwdiag.txt for all signal groups
### DEBUG_PORT_SEL_A
# sel0 = 0x67 (MpifUser)      -> hw_diag[15:00]
# sel1 = 0x38 (CommonMpif)    -> hw_diag[31:16]
mem_write 0x600510 0x00003867
### DEBUG_PORT_SEL_B
# sel2 = 0x1E (swProf_low)    -> hw_diag[47:32]
# sel3 = 0x1F (swProf_high)   -> hw_diag[63:48]
mem_write 0x600530 0x00001F1E
### DEBUG_PORT_SEL_C
# sel4 = 0x70 (PtaInterface1) -> hw_diag[79:64]
# sel5 = 0x71 (PtaInterface2) -> hw_diag[95:80]
mem_write 0x600534 0x00007170

### DEBUG_PORT_CNTRL
#  mpif_debug_enable [9] - 0-dis, 1-en
#  debug_bus_mode    [8] - 0-narrow, 1-wide
#  debug_top_select  [3:0] - MAC_HW_DebugPorts.xlsx for details
mem_write 0x60053C 0x00000200

### DEBUG_PORT_ENABLE
#  determine which MAC-HW ports (0-5) are enabled
mem_write 0x600538 0x0000003F

### PCIEW_CONF
#  debug_bus_select [10:8] - CL6000 AXI spec section 6.5.8 for details
mem_rmw 0x7C223C 0x00000700 0x8 0x0
### TXM_DBG_CONFIG
#  dbg_en  [5]   - 0-dis, 1-en
#  dbg_sel [4:0] - CL6000_TXM_HDD.docx for details
mem_write 0x7D40F8 0x00000030

### TRIGGER CONFIGURATION
# Note: the first value reached (EXTRA_SAMPLES/EXTRA_CYCLES) will stop the LCU.
# so if either one is '0' - the last sample will be the stop trigger.
### EXTRA_SAMPLES after trigger
mem_write 0x7CF024 0x00000000
### EXTRA_CYCLES after trigger
mem_write 0x7CF028 0x00000000
### CHx_TRIG_MODE - 0-start, 1-stop the LCU recording
mem_write 0x7CF830 0x00000001 # chan0: stop
mem_write 0x7CF834 0x00000001 # chan1: stop
### CHx_TRIG_EN - 0-dis, 1-en (i.e. lcu will search for trigger once LCU is armed)
mem_write 0x7CF838 0x00000000
mem_write 0x7CF83C 0x00000000
### CH01_TRIG_PATTERN_REGx - bits 95<-64 - common_mpif::mpif_rxend_p [bit 87] => 0x1
# Note: In Single channel narrow mode, chan0 sample is in the upper sample -> bits 127-64
mem_write 0x7CF85C 0x00000000 # reg7 -> mask[255:224]
mem_write 0x7CF858 0x00000000 # reg6 -> mask[223:192]
mem_write 0x7CF854 0x00000000 # reg5 -> mask[191:160]
mem_write 0x7CF850 0x00000000 # reg4 -> mask[159:128]
mem_write 0x7CF84C 0x00000000 # reg3 -> mask[127:96]
mem_write 0x7CF848 0x00000000 # reg2 -> mask[95:64]
mem_write 0x7CF844 0x00000000 # reg1 -> mask[63:32]
mem_write 0x7CF840 0x00000000 # reg0 -> mask[31:0]
### CH01_TRIG_MASK_REGx
mem_write 0x7CF87C 0x00000000 # reg7 -> mask[255:224]
mem_write 0x7CF878 0x00000000 # reg6 -> mask[223:192]
mem_write 0x7CF874 0x00000000 # reg5 -> mask[191:160]
mem_write 0x7CF870 0x00000000 # reg4 -> mask[159:128]
mem_write 0x7CF86C 0x00000000 # reg3 -> mask[127:96]
mem_write 0x7CF868 0x00000000 # reg2 -> mask[95:64]
mem_write 0x7CF864 0x00000000 # reg1 -> mask[63:32]
mem_write 0x7CF860 0x00000000 # reg0 -> mask[31:0]

### LCU_COMMON_REC_CMD
# stop recording  [2]
# start recording [1]
# arm             [0]
mem_write 0x7CF020 0x00000001 # arm
mem_write 0x7CF020 0x00000002 # start
